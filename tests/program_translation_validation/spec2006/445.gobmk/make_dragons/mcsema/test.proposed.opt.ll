; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x7ae448_type = type <{ [1 x i8] }>
%G_0x7ae44c_type = type <{ [1 x i8] }>
%G_0x7ae454_type = type <{ [1 x i8] }>
%G_0xaaf050_type = type <{ [4 x i8] }>
%G_0xaaf054_type = type <{ [4 x i8] }>
%G_0xaaf058_type = type <{ [4 x i8] }>
%G_0xab0ed0_type = type <{ [4 x i8] }>
%G_0xab0f24_type = type <{ [4 x i8] }>
%G_0xab0f28_type = type <{ [1 x i8] }>
%G_0xab0fb4_type = type <{ [1 x i8] }>
%G_0xab0fc4_type = type <{ [1 x i8] }>
%G_0xab0fe0_type = type <{ [8 x i8] }>
%G_0xb54cec_type = type <{ [4 x i8] }>
%G_0xc4f96__rip__type = type <{ [8 x i8] }>
%G_0xc5133__rip__type = type <{ [8 x i8] }>
%G_0xc5393__rip__type = type <{ [8 x i8] }>
%G_0xc53ea__rip__type = type <{ [8 x i8] }>
%G_0xc57cf__rip__type = type <{ [8 x i8] }>
%G_0xc589a__rip__type = type <{ [8 x i8] }>
%G_0xc5b25__rip__type = type <{ [8 x i8] }>
%G_0xc5b2a__rip__type = type <{ [8 x i8] }>
%G_0xc5b71__rip__type = type <{ [8 x i8] }>
%G_0xc5bb9__rip__type = type <{ [8 x i8] }>
%G_0xc5db5__rip__type = type <{ [8 x i8] }>
%G_0xc5f18__rip__type = type <{ [8 x i8] }>
%G_0xc5fa4__rip__type = type <{ [8 x i8] }>
%G_0xc636c__rip__type = type <{ [8 x i8] }>
%G_0xc6371__rip__type = type <{ [8 x i8] }>
%G_0xc63b8__rip__type = type <{ [8 x i8] }>
%G_0xc6400__rip__type = type <{ [8 x i8] }>
%G_0xc6512__rip__type = type <{ [8 x i8] }>
%G_0xc714f__rip__type = type <{ [8 x i8] }>
%G_0xc72d0__rip__type = type <{ [8 x i8] }>
%G_0xc72fb__rip__type = type <{ [8 x i8] }>
%G__0x57ad9b_type = type <{ [8 x i8] }>
%G__0x57ae9c_type = type <{ [8 x i8] }>
%G__0x57aeb3_type = type <{ [8 x i8] }>
%G__0x57aece_type = type <{ [8 x i8] }>
%G__0x57aeeb_type = type <{ [8 x i8] }>
%G__0x57af1a_type = type <{ [8 x i8] }>
%G__0x57af35_type = type <{ [8 x i8] }>
%G__0x57af50_type = type <{ [8 x i8] }>
%G__0x57af5f_type = type <{ [8 x i8] }>
%G__0x57af95_type = type <{ [8 x i8] }>
%G__0x57afa4_type = type <{ [8 x i8] }>
%G__0x57afba_type = type <{ [8 x i8] }>
%G__0x57aff0_type = type <{ [8 x i8] }>
%G__0x57b00f_type = type <{ [8 x i8] }>
%G__0x57b01d_type = type <{ [8 x i8] }>
%G__0x57b02e_type = type <{ [8 x i8] }>
%G__0x57b04d_type = type <{ [8 x i8] }>
%G__0x57b06c_type = type <{ [8 x i8] }>
%G__0x57b07b_type = type <{ [8 x i8] }>
%G__0x57b082_type = type <{ [8 x i8] }>
%G__0x57b0a2_type = type <{ [8 x i8] }>
%G__0x57b0b9_type = type <{ [8 x i8] }>
%G__0x57b0c9_type = type <{ [8 x i8] }>
%G__0x57b0ee_type = type <{ [8 x i8] }>
%G__0x57b10b_type = type <{ [8 x i8] }>
%G__0x57b132_type = type <{ [8 x i8] }>
%G__0xb01180_type = type <{ [8 x i8] }>
%G__0xb0eff0_type = type <{ [8 x i8] }>
%G__0xb45500_type = type <{ [8 x i8] }>
%G__0xb4bd20_type = type <{ [8 x i8] }>
%G__0xb9a0a0_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x7ae448 = local_unnamed_addr global %G_0x7ae448_type zeroinitializer
@G_0x7ae44c = local_unnamed_addr global %G_0x7ae44c_type zeroinitializer
@G_0x7ae454 = local_unnamed_addr global %G_0x7ae454_type zeroinitializer
@G_0xaaf050 = local_unnamed_addr global %G_0xaaf050_type zeroinitializer
@G_0xaaf054 = local_unnamed_addr global %G_0xaaf054_type zeroinitializer
@G_0xaaf058 = local_unnamed_addr global %G_0xaaf058_type zeroinitializer
@G_0xab0ed0 = local_unnamed_addr global %G_0xab0ed0_type zeroinitializer
@G_0xab0f24 = local_unnamed_addr global %G_0xab0f24_type zeroinitializer
@G_0xab0f28 = local_unnamed_addr global %G_0xab0f28_type zeroinitializer
@G_0xab0fb4 = local_unnamed_addr global %G_0xab0fb4_type zeroinitializer
@G_0xab0fc4 = local_unnamed_addr global %G_0xab0fc4_type zeroinitializer
@G_0xab0fe0 = local_unnamed_addr global %G_0xab0fe0_type zeroinitializer
@G_0xb54cec = local_unnamed_addr global %G_0xb54cec_type zeroinitializer
@G_0xc4f96__rip_ = global %G_0xc4f96__rip__type zeroinitializer
@G_0xc5133__rip_ = global %G_0xc5133__rip__type zeroinitializer
@G_0xc5393__rip_ = global %G_0xc5393__rip__type zeroinitializer
@G_0xc53ea__rip_ = global %G_0xc53ea__rip__type zeroinitializer
@G_0xc57cf__rip_ = global %G_0xc57cf__rip__type zeroinitializer
@G_0xc589a__rip_ = global %G_0xc589a__rip__type zeroinitializer
@G_0xc5b25__rip_ = global %G_0xc5b25__rip__type zeroinitializer
@G_0xc5b2a__rip_ = global %G_0xc5b2a__rip__type zeroinitializer
@G_0xc5b71__rip_ = global %G_0xc5b71__rip__type zeroinitializer
@G_0xc5bb9__rip_ = global %G_0xc5bb9__rip__type zeroinitializer
@G_0xc5db5__rip_ = global %G_0xc5db5__rip__type zeroinitializer
@G_0xc5f18__rip_ = global %G_0xc5f18__rip__type zeroinitializer
@G_0xc5fa4__rip_ = global %G_0xc5fa4__rip__type zeroinitializer
@G_0xc636c__rip_ = global %G_0xc636c__rip__type zeroinitializer
@G_0xc6371__rip_ = global %G_0xc6371__rip__type zeroinitializer
@G_0xc63b8__rip_ = global %G_0xc63b8__rip__type zeroinitializer
@G_0xc6400__rip_ = global %G_0xc6400__rip__type zeroinitializer
@G_0xc6512__rip_ = global %G_0xc6512__rip__type zeroinitializer
@G_0xc714f__rip_ = global %G_0xc714f__rip__type zeroinitializer
@G_0xc72d0__rip_ = global %G_0xc72d0__rip__type zeroinitializer
@G_0xc72fb__rip_ = global %G_0xc72fb__rip__type zeroinitializer
@G__0x57ad9b = global %G__0x57ad9b_type zeroinitializer
@G__0x57ae9c = global %G__0x57ae9c_type zeroinitializer
@G__0x57aeb3 = global %G__0x57aeb3_type zeroinitializer
@G__0x57aece = global %G__0x57aece_type zeroinitializer
@G__0x57aeeb = global %G__0x57aeeb_type zeroinitializer
@G__0x57af1a = global %G__0x57af1a_type zeroinitializer
@G__0x57af35 = global %G__0x57af35_type zeroinitializer
@G__0x57af50 = global %G__0x57af50_type zeroinitializer
@G__0x57af5f = global %G__0x57af5f_type zeroinitializer
@G__0x57af95 = global %G__0x57af95_type zeroinitializer
@G__0x57afa4 = global %G__0x57afa4_type zeroinitializer
@G__0x57afba = global %G__0x57afba_type zeroinitializer
@G__0x57aff0 = global %G__0x57aff0_type zeroinitializer
@G__0x57b00f = global %G__0x57b00f_type zeroinitializer
@G__0x57b01d = global %G__0x57b01d_type zeroinitializer
@G__0x57b02e = global %G__0x57b02e_type zeroinitializer
@G__0x57b04d = global %G__0x57b04d_type zeroinitializer
@G__0x57b06c = global %G__0x57b06c_type zeroinitializer
@G__0x57b07b = global %G__0x57b07b_type zeroinitializer
@G__0x57b082 = global %G__0x57b082_type zeroinitializer
@G__0x57b0a2 = global %G__0x57b0a2_type zeroinitializer
@G__0x57b0b9 = global %G__0x57b0b9_type zeroinitializer
@G__0x57b0c9 = global %G__0x57b0c9_type zeroinitializer
@G__0x57b0ee = global %G__0x57b0ee_type zeroinitializer
@G__0x57b10b = global %G__0x57b10b_type zeroinitializer
@G__0x57b132 = global %G__0x57b132_type zeroinitializer
@G__0xb01180 = global %G__0xb01180_type zeroinitializer
@G__0xb0eff0 = global %G__0xb0eff0_type zeroinitializer
@G__0xb45500 = global %G__0xb45500_type zeroinitializer
@G__0xb4bd20 = global %G__0xb4bd20_type zeroinitializer
@G__0xb9a0a0 = global %G__0xb9a0a0_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_47c350.start_timer(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41e0b0.initialize_dragon_data(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_437c30.make_domains(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_47c3d0.time_report(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4a6920.find_connections(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_415900.is_ko_point(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41e3b0.dragon_eye(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41e640.initialize_supplementary_dragon_data(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4317b0.add_lunch(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_451db0.gprintf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_43e310.find_half_and_false_eyes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4a69b0.modify_eye_spaces(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4398a0.compute_eyes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_43bb10.eyevalue_to_string(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4393f0.propagate_eye(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41e9f0.analyze_false_eye_territory(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_439550.find_eye_dragons(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_452090.abortgo(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_43b1a0.eye_move_urgency(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_43cc10.add_eyevalues(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41ec60.compute_escape(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_42d360.resegment_initial_influence(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41ef50.compute_refined_dragon_weaknesses(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41f000.compute_crude_status(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41f340.find_neighbor_dragons(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_44fa70.purge_persistent_owl_cache(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4393a0.set_eyevalue(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41f950.crude_dragon_weakness(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_446910.owl_attack(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_44aac0.owl_defend(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_44c3c0.owl_does_defend(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_40ea30.get_last_move(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41fc30.is_same_dragon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_44adb0.owl_threaten_defense(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_44a3f0.owl_threaten_attack(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4757d0.compute_surroundings(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_43b010.max_eyes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_43baf0.min_eyes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41fdb0.dragon_looks_inessential(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_41fe30.dragon_invincible(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_470590.new_semeai(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_46eab0.semeai(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4880f0.is_worm_origin(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_413ec0.extended_chainlinks(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_488480.propagate_worm(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_420150.first_worm_in_dragon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_420180.next_worm_in_dragon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @make_dragons(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %RBX.i1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %11 = load i64, i64* %RBX.i1304, align 8
  %12 = add i64 %10, 4
  store i64 %12, i64* %3, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %11, i64* %14, align 8
  %15 = load i64, i64* %3, align 8
  %16 = add i64 %7, -1144
  store i64 %16, i64* %6, align 8
  %17 = icmp ult i64 %13, 1128
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21)
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1
  %27 = xor i64 %13, %16
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1
  %32 = icmp eq i64 %16, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1
  %35 = lshr i64 %16, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1
  %38 = lshr i64 %13, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i1555 = getelementptr inbounds %union.anon, %union.anon* %44, i64 0, i32 0
  store i64 2, i64* %RAX.i1555, align 8
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI.i = bitcast %union.anon* %45 to i32*
  %46 = load i64, i64* %RBP.i, align 8
  %47 = add i64 %46, -12
  %48 = load i32, i32* %EDI.i, align 4
  %49 = add i64 %15, 15
  store i64 %49, i64* %3, align 8
  %50 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI.i2400 = bitcast %union.anon* %51 to i32*
  %52 = load i64, i64* %RBP.i, align 8
  %53 = add i64 %52, -16
  %54 = load i32, i32* %ESI.i2400, align 4
  %55 = load i64, i64* %3, align 8
  %56 = add i64 %55, 3
  store i64 %56, i64* %3, align 8
  %57 = inttoptr i64 %53 to i32*
  store i32 %54, i32* %57, align 4
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX.i2583 = bitcast %union.anon* %58 to i32*
  %59 = load i64, i64* %RBP.i, align 8
  %60 = add i64 %59, -20
  %61 = load i32, i32* %EDX.i2583, align 4
  %62 = load i64, i64* %3, align 8
  %63 = add i64 %62, 3
  store i64 %63, i64* %3, align 8
  %64 = inttoptr i64 %60 to i32*
  store i32 %61, i32* %64, align 4
  %EAX.i4253 = bitcast %union.anon* %44 to i32*
  %RDI.i4254 = getelementptr inbounds %union.anon, %union.anon* %45, i64 0, i32 0
  %65 = load i32, i32* %EAX.i4253, align 4
  %66 = zext i32 %65 to i64
  %67 = load i64, i64* %3, align 8
  store i64 %66, i64* %RDI.i4254, align 8
  %68 = add i64 %67, 395062
  %69 = add i64 %67, 7
  %70 = load i64, i64* %6, align 8
  %71 = add i64 %70, -8
  %72 = inttoptr i64 %71 to i64*
  store i64 %69, i64* %72, align 8
  store i64 %71, i64* %6, align 8
  store i64 %68, i64* %3, align 8
  %call2_41bc1c = tail call %struct.Memory* @sub_47c350.start_timer(%struct.State* %0, i64 %68, %struct.Memory* %2)
  %73 = load i64, i64* %3, align 8
  store i32 0, i32* bitcast (%G_0xaaf050_type* @G_0xaaf050 to i32*), align 8
  %74 = add i64 %73, 9359
  %75 = add i64 %73, 16
  %76 = load i64, i64* %6, align 8
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %75, i64* %78, align 8
  store i64 %77, i64* %6, align 8
  store i64 %74, i64* %3, align 8
  %call2_41bc2c = tail call %struct.Memory* @sub_41e0b0.initialize_dragon_data(%struct.State* %0, i64 %74, %struct.Memory* %call2_41bc1c)
  %79 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RDI.i4254, align 8
  %RSI.i4246 = getelementptr inbounds %union.anon, %union.anon* %51, i64 0, i32 0
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RSI.i4246, align 8
  %RDX.i4244 = getelementptr inbounds %union.anon, %union.anon* %58, i64 0, i32 0
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %80 = add i64 %79, 114687
  %81 = add i64 %79, 27
  %82 = load i64, i64* %6, align 8
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %81, i64* %84, align 8
  store i64 %83, i64* %6, align 8
  store i64 %80, i64* %3, align 8
  %call2_41bc47 = tail call %struct.Memory* @sub_437c30.make_domains(%struct.State* %0, i64 %80, %struct.Memory* %call2_41bc2c)
  %85 = load i64, i64* %3, align 8
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57ae9c_type* @G__0x57ae9c to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %87 = bitcast [32 x %union.VectorReg]* %86 to i8*
  %88 = add i64 %85, add (i64 ptrtoint (%G_0xc72fb__rip__type* @G_0xc72fb__rip_ to i64), i64 17)
  %89 = add i64 %85, 25
  store i64 %89, i64* %3, align 8
  %90 = inttoptr i64 %88 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast [32 x %union.VectorReg]* %86 to double*
  %93 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %86, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %91, i64* %93, align 1
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %95 = bitcast i64* %94 to double*
  store double 0.000000e+00, double* %95, align 1
  %96 = add i64 %85, 395140
  %97 = add i64 %85, 30
  %98 = load i64, i64* %6, align 8
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %97, i64* %100, align 8
  store i64 %99, i64* %6, align 8
  store i64 %96, i64* %3, align 8
  %call2_41bc65 = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* %0, i64 %96, %struct.Memory* %call2_41bc47)
  %101 = load i64, i64* %RBP.i, align 8
  %102 = add i64 %101, -856
  %103 = load i64, i64* %3, align 8
  %104 = add i64 %103, 8
  store i64 %104, i64* %3, align 8
  %105 = load i64, i64* %93, align 1
  %106 = inttoptr i64 %102 to i64*
  store i64 %105, i64* %106, align 8
  %107 = load i64, i64* %3, align 8
  %108 = add i64 %107, 568494
  %109 = add i64 %107, 5
  %110 = load i64, i64* %6, align 8
  %111 = add i64 %110, -8
  %112 = inttoptr i64 %111 to i64*
  store i64 %109, i64* %112, align 8
  store i64 %111, i64* %6, align 8
  store i64 %108, i64* %3, align 8
  %call2_41bc72 = tail call %struct.Memory* @sub_4a6920.find_connections(%struct.State* %0, i64 %108, %struct.Memory* %call2_41bc65)
  %113 = load i64, i64* %3, align 8
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57aeb3_type* @G__0x57aeb3 to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %114 = add i64 %113, add (i64 ptrtoint (%G_0xc72d0__rip__type* @G_0xc72d0__rip_ to i64), i64 17)
  %115 = add i64 %113, 25
  store i64 %115, i64* %3, align 8
  %116 = inttoptr i64 %114 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %118 = add i64 %113, 395097
  %119 = add i64 %113, 30
  %120 = load i64, i64* %6, align 8
  %121 = add i64 %120, -8
  %122 = inttoptr i64 %121 to i64*
  store i64 %119, i64* %122, align 8
  store i64 %121, i64* %6, align 8
  store i64 %118, i64* %3, align 8
  %call2_41bc90 = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* %0, i64 %118, %struct.Memory* %call2_41bc72)
  %123 = load i64, i64* %3, align 8
  %124 = load i32, i32* bitcast (%G_0x7ae454_type* @G_0x7ae454 to i32*), align 8
  store i8 0, i8* %19, align 1
  %125 = and i32 %124, 255
  %126 = tail call i32 @llvm.ctpop.i32(i32 %125)
  %127 = trunc i32 %126 to i8
  %128 = and i8 %127, 1
  %129 = xor i8 %128, 1
  store i8 %129, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %130 = icmp eq i32 %124, 0
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %34, align 1
  %132 = lshr i32 %124, 31
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %134 = load i64, i64* %RBP.i, align 8
  %135 = add i64 %134, -864
  %136 = add i64 %123, 16
  store i64 %136, i64* %3, align 8
  %137 = load i64, i64* %93, align 1
  %138 = inttoptr i64 %135 to i64*
  store i64 %137, i64* %138, align 8
  %139 = load i64, i64* %3, align 8
  %140 = add i64 %139, 377
  %141 = add i64 %139, 6
  %142 = load i8, i8* %34, align 1
  %143 = icmp eq i8 %142, 0
  %144 = select i1 %143, i64 %140, i64 %141
  store i64 %144, i64* %3, align 8
  br i1 %143, label %entry.block_.L_41be1e_crit_edge, label %block_41bcab

entry.block_.L_41be1e_crit_edge:                  ; preds = %entry
  %.pre313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %.pre314 = getelementptr inbounds %union.anon, %union.anon* %.pre313, i64 0, i32 0
  br label %block_.L_41be1e

block_41bcab:                                     ; preds = %entry
  %145 = load i64, i64* %RBP.i, align 8
  %146 = add i64 %145, -24
  %147 = add i64 %144, 7
  store i64 %147, i64* %3, align 8
  %148 = inttoptr i64 %146 to i32*
  store i32 21, i32* %148, align 4
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i4203 = getelementptr inbounds %union.anon, %union.anon* %149, i64 0, i32 0
  %.pre = load i64, i64* %3, align 8
  br label %block_.L_41bcb2

block_.L_41bcb2:                                  ; preds = %block_.L_41bde5, %block_41bcab
  %150 = phi i64 [ %.pre, %block_41bcab ], [ %682, %block_.L_41bde5 ]
  %MEMORY.0 = phi %struct.Memory* [ %call2_41bc90, %block_41bcab ], [ %MEMORY.7, %block_.L_41bde5 ]
  %151 = load i64, i64* %RBP.i, align 8
  %152 = add i64 %151, -24
  %153 = add i64 %150, 7
  store i64 %153, i64* %3, align 8
  %154 = inttoptr i64 %152 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = add i32 %155, -400
  %157 = icmp ult i32 %155, 400
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %19, align 1
  %159 = and i32 %156, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159)
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %26, align 1
  %164 = xor i32 %155, 16
  %165 = xor i32 %164, %156
  %166 = lshr i32 %165, 4
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %31, align 1
  %169 = icmp eq i32 %156, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %34, align 1
  %171 = lshr i32 %156, 31
  %172 = trunc i32 %171 to i8
  store i8 %172, i8* %37, align 1
  %173 = lshr i32 %155, 31
  %174 = xor i32 %171, %173
  %175 = add nuw nsw i32 %174, %173
  %176 = icmp eq i32 %175, 2
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %43, align 1
  %178 = icmp ne i8 %172, 0
  %179 = xor i1 %178, %176
  %.v323 = select i1 %179, i64 13, i64 326
  %180 = add i64 %150, %.v323
  store i64 %180, i64* %3, align 8
  br i1 %179, label %block_41bcbf, label %block_.L_41bdf8

block_41bcbf:                                     ; preds = %block_.L_41bcb2
  %181 = add i64 %180, 4
  store i64 %181, i64* %3, align 8
  %182 = load i32, i32* %154, align 4
  %183 = sext i32 %182 to i64
  store i64 %183, i64* %RAX.i1555, align 8
  %184 = add nsw i64 %183, 12099168
  %185 = add i64 %180, 12
  store i64 %185, i64* %3, align 8
  %186 = inttoptr i64 %184 to i8*
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i64
  store i64 %188, i64* %RCX.i4203, align 8
  %189 = zext i8 %187 to i32
  %190 = add nsw i32 %189, -3
  %191 = icmp ult i8 %187, 3
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %19, align 1
  %193 = and i32 %190, 255
  %194 = tail call i32 @llvm.ctpop.i32(i32 %193)
  %195 = trunc i32 %194 to i8
  %196 = and i8 %195, 1
  %197 = xor i8 %196, 1
  store i8 %197, i8* %26, align 1
  %198 = xor i32 %190, %189
  %199 = lshr i32 %198, 4
  %200 = trunc i32 %199 to i8
  %201 = and i8 %200, 1
  store i8 %201, i8* %31, align 1
  %202 = icmp eq i32 %190, 0
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %34, align 1
  %204 = lshr i32 %190, 31
  %205 = trunc i32 %204 to i8
  store i8 %205, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v450 = select i1 %202, i64 294, i64 21
  %206 = add i64 %180, %.v450
  store i64 %206, i64* %3, align 8
  br i1 %202, label %block_.L_41bde5, label %block_41bcd4

block_41bcd4:                                     ; preds = %block_41bcbf
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  %207 = add i64 %206, 14
  store i64 %207, i64* %3, align 8
  %208 = load i32, i32* %154, align 4
  %209 = sext i32 %208 to i64
  %210 = mul nsw i64 %209, 36
  store i64 %210, i64* %RCX.i4203, align 8
  %211 = lshr i64 %210, 63
  %212 = add i64 %210, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %212, i64* %RAX.i1555, align 8
  %213 = icmp ult i64 %212, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %214 = icmp ult i64 %212, %210
  %215 = or i1 %213, %214
  %216 = zext i1 %215 to i8
  store i8 %216, i8* %19, align 1
  %217 = trunc i64 %212 to i32
  %218 = and i32 %217, 252
  %219 = tail call i32 @llvm.ctpop.i32(i32 %218)
  %220 = trunc i32 %219 to i8
  %221 = and i8 %220, 1
  %222 = xor i8 %221, 1
  store i8 %222, i8* %26, align 1
  %223 = xor i64 %210, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %224 = xor i64 %223, %212
  %225 = lshr i64 %224, 4
  %226 = trunc i64 %225 to i8
  %227 = and i8 %226, 1
  store i8 %227, i8* %31, align 1
  %228 = icmp eq i64 %212, 0
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %34, align 1
  %230 = lshr i64 %212, 63
  %231 = trunc i64 %230 to i8
  store i8 %231, i8* %37, align 1
  %232 = xor i64 %230, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %233 = xor i64 %230, %211
  %234 = add nuw nsw i64 %232, %233
  %235 = icmp eq i64 %234, 2
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %43, align 1
  %237 = inttoptr i64 %212 to i32*
  %238 = add i64 %206, 24
  store i64 %238, i64* %3, align 8
  %239 = load i32, i32* %237, align 4
  %240 = add i32 %239, -5
  %241 = icmp ult i32 %239, 5
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %19, align 1
  %243 = and i32 %240, 255
  %244 = tail call i32 @llvm.ctpop.i32(i32 %243)
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  store i8 %247, i8* %26, align 1
  %248 = xor i32 %240, %239
  %249 = lshr i32 %248, 4
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  store i8 %251, i8* %31, align 1
  %252 = icmp eq i32 %240, 0
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %34, align 1
  %254 = lshr i32 %240, 31
  %255 = trunc i32 %254 to i8
  store i8 %255, i8* %37, align 1
  %256 = lshr i32 %239, 31
  %257 = xor i32 %254, %256
  %258 = add nuw nsw i32 %257, %256
  %259 = icmp eq i32 %258, 2
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %43, align 1
  %.v451 = select i1 %252, i64 30, i64 134
  %261 = add i64 %206, %.v451
  store i64 %261, i64* %3, align 8
  br i1 %252, label %block_41bcf2, label %block_.L_41bd5a

block_41bcf2:                                     ; preds = %block_41bcd4
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  %262 = load i64, i64* %RBP.i, align 8
  %263 = add i64 %262, -24
  %264 = add i64 %261, 14
  store i64 %264, i64* %3, align 8
  %265 = inttoptr i64 %263 to i32*
  %266 = load i32, i32* %265, align 4
  %267 = sext i32 %266 to i64
  %268 = mul nsw i64 %267, 36
  store i64 %268, i64* %RCX.i4203, align 8
  %269 = lshr i64 %268, 63
  %270 = add i64 %268, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %270, i64* %RAX.i1555, align 8
  %271 = icmp ult i64 %270, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %272 = icmp ult i64 %270, %268
  %273 = or i1 %271, %272
  %274 = zext i1 %273 to i8
  store i8 %274, i8* %19, align 1
  %275 = trunc i64 %270 to i32
  %276 = and i32 %275, 252
  %277 = tail call i32 @llvm.ctpop.i32(i32 %276)
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  store i8 %280, i8* %26, align 1
  %281 = xor i64 %268, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %282 = xor i64 %281, %270
  %283 = lshr i64 %282, 4
  %284 = trunc i64 %283 to i8
  %285 = and i8 %284, 1
  store i8 %285, i8* %31, align 1
  %286 = icmp eq i64 %270, 0
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %34, align 1
  %288 = lshr i64 %270, 63
  %289 = trunc i64 %288 to i8
  store i8 %289, i8* %37, align 1
  %290 = xor i64 %288, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %291 = xor i64 %288, %269
  %292 = add nuw nsw i64 %290, %291
  %293 = icmp eq i64 %292, 2
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %43, align 1
  %295 = add i64 %268, add (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 12)
  %296 = add i64 %261, 24
  store i64 %296, i64* %3, align 8
  %297 = inttoptr i64 %295 to i32*
  %298 = load i32, i32* %297, align 4
  %299 = zext i32 %298 to i64
  store i64 %299, i64* %RDX.i4244, align 8
  %300 = add i64 %261, 27
  store i64 %300, i64* %3, align 8
  %301 = load i32, i32* %265, align 4
  %302 = sub i32 %298, %301
  %303 = icmp ult i32 %298, %301
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %19, align 1
  %305 = and i32 %302, 255
  %306 = tail call i32 @llvm.ctpop.i32(i32 %305)
  %307 = trunc i32 %306 to i8
  %308 = and i8 %307, 1
  %309 = xor i8 %308, 1
  store i8 %309, i8* %26, align 1
  %310 = xor i32 %301, %298
  %311 = xor i32 %310, %302
  %312 = lshr i32 %311, 4
  %313 = trunc i32 %312 to i8
  %314 = and i8 %313, 1
  store i8 %314, i8* %31, align 1
  %315 = icmp eq i32 %302, 0
  %316 = zext i1 %315 to i8
  store i8 %316, i8* %34, align 1
  %317 = lshr i32 %302, 31
  %318 = trunc i32 %317 to i8
  store i8 %318, i8* %37, align 1
  %319 = lshr i32 %298, 31
  %320 = lshr i32 %301, 31
  %321 = xor i32 %320, %319
  %322 = xor i32 %317, %319
  %323 = add nuw nsw i32 %322, %321
  %324 = icmp eq i32 %323, 2
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %43, align 1
  %.v456 = select i1 %315, i64 33, i64 104
  %326 = add i64 %261, %.v456
  store i64 %326, i64* %3, align 8
  br i1 %315, label %block_41bd13, label %block_.L_41bd5a

block_41bd13:                                     ; preds = %block_41bcf2
  %327 = load i64, i64* %RBP.i, align 8
  %328 = add i64 %327, -24
  %329 = add i64 %326, 3
  store i64 %329, i64* %3, align 8
  %330 = inttoptr i64 %328 to i32*
  %331 = load i32, i32* %330, align 4
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RDI.i4254, align 8
  %333 = add i64 %326, -25619
  %334 = add i64 %326, 8
  %335 = load i64, i64* %6, align 8
  %336 = add i64 %335, -8
  %337 = inttoptr i64 %336 to i64*
  store i64 %334, i64* %337, align 8
  store i64 %336, i64* %6, align 8
  store i64 %333, i64* %3, align 8
  %call2_41bd16 = tail call %struct.Memory* @sub_415900.is_ko_point(%struct.State* nonnull %0, i64 %333, %struct.Memory* %MEMORY.0)
  %338 = load i32, i32* %EAX.i4253, align 4
  %339 = load i64, i64* %3, align 8
  store i8 0, i8* %19, align 1
  %340 = and i32 %338, 255
  %341 = tail call i32 @llvm.ctpop.i32(i32 %340)
  %342 = trunc i32 %341 to i8
  %343 = and i8 %342, 1
  %344 = xor i8 %343, 1
  store i8 %344, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %345 = icmp eq i32 %338, 0
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %34, align 1
  %347 = lshr i32 %338, 31
  %348 = trunc i32 %347 to i8
  store i8 %348, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v457 = select i1 %345, i64 40, i64 9
  %349 = add i64 %339, %.v457
  store i64 %349, i64* %3, align 8
  br i1 %345, label %block_.L_41bd43, label %block_41bd24

block_41bd24:                                     ; preds = %block_41bd13
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  %350 = load i64, i64* %RBP.i, align 8
  %351 = add i64 %350, -24
  %352 = add i64 %349, 14
  store i64 %352, i64* %3, align 8
  %353 = inttoptr i64 %351 to i32*
  %354 = load i32, i32* %353, align 4
  %355 = sext i32 %354 to i64
  %356 = mul nsw i64 %355, 36
  store i64 %356, i64* %RCX.i4203, align 8
  %357 = lshr i64 %356, 63
  %358 = add i64 %356, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %358, i64* %RAX.i1555, align 8
  %359 = icmp ult i64 %358, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %360 = icmp ult i64 %358, %356
  %361 = or i1 %359, %360
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %19, align 1
  %363 = trunc i64 %358 to i32
  %364 = and i32 %363, 252
  %365 = tail call i32 @llvm.ctpop.i32(i32 %364)
  %366 = trunc i32 %365 to i8
  %367 = and i8 %366, 1
  %368 = xor i8 %367, 1
  store i8 %368, i8* %26, align 1
  %369 = xor i64 %356, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %370 = xor i64 %369, %358
  %371 = lshr i64 %370, 4
  %372 = trunc i64 %371 to i8
  %373 = and i8 %372, 1
  store i8 %373, i8* %31, align 1
  %374 = icmp eq i64 %358, 0
  %375 = zext i1 %374 to i8
  store i8 %375, i8* %34, align 1
  %376 = lshr i64 %358, 63
  %377 = trunc i64 %376 to i8
  store i8 %377, i8* %37, align 1
  %378 = xor i64 %376, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %379 = xor i64 %376, %357
  %380 = add nuw nsw i64 %378, %379
  %381 = icmp eq i64 %380, 2
  %382 = zext i1 %381 to i8
  store i8 %382, i8* %43, align 1
  %383 = add i64 %356, add (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 4)
  %384 = add i64 %349, 25
  store i64 %384, i64* %3, align 8
  %385 = inttoptr i64 %383 to i32*
  %386 = load i32, i32* %385, align 4
  %387 = add i32 %386, -1
  %388 = icmp eq i32 %386, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %19, align 1
  %390 = and i32 %387, 255
  %391 = tail call i32 @llvm.ctpop.i32(i32 %390)
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  %394 = xor i8 %393, 1
  store i8 %394, i8* %26, align 1
  %395 = xor i32 %387, %386
  %396 = lshr i32 %395, 4
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  store i8 %398, i8* %31, align 1
  %399 = icmp eq i32 %387, 0
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %34, align 1
  %401 = lshr i32 %387, 31
  %402 = trunc i32 %401 to i8
  store i8 %402, i8* %37, align 1
  %403 = lshr i32 %386, 31
  %404 = xor i32 %401, %403
  %405 = add nuw nsw i32 %404, %403
  %406 = icmp eq i32 %405, 2
  %407 = zext i1 %406 to i8
  store i8 %407, i8* %43, align 1
  %408 = icmp ne i8 %402, 0
  %409 = xor i1 %408, %406
  %410 = or i1 %399, %409
  %.v458 = select i1 %410, i64 49, i64 31
  %411 = add i64 %349, %.v458
  store i64 %411, i64* %3, align 8
  br i1 %410, label %block_.L_41bd55, label %block_.L_41bd43

block_.L_41bd43:                                  ; preds = %block_41bd24, %block_41bd13
  %412 = phi i64 [ %411, %block_41bd24 ], [ %349, %block_41bd13 ]
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RSI.i4246, align 8
  %413 = load i64, i64* %RBP.i, align 8
  %414 = add i64 %413, -24
  %415 = add i64 %412, 13
  store i64 %415, i64* %3, align 8
  %416 = inttoptr i64 %414 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i64
  store i64 %418, i64* %RDI.i4254, align 8
  %419 = add i64 %412, 9837
  %420 = add i64 %412, 18
  %421 = load i64, i64* %6, align 8
  %422 = add i64 %421, -8
  %423 = inttoptr i64 %422 to i64*
  store i64 %420, i64* %423, align 8
  store i64 %422, i64* %6, align 8
  store i64 %419, i64* %3, align 8
  %call2_41bd50 = tail call %struct.Memory* @sub_41e3b0.dragon_eye(%struct.State* nonnull %0, i64 %419, %struct.Memory* %MEMORY.0)
  %.pre218 = load i64, i64* %3, align 8
  br label %block_.L_41bd55

block_.L_41bd55:                                  ; preds = %block_.L_41bd43, %block_41bd24
  %424 = phi i64 [ %.pre218, %block_.L_41bd43 ], [ %411, %block_41bd24 ]
  %425 = add i64 %424, 5
  store i64 %425, i64* %3, align 8
  br label %block_.L_41bd5a

block_.L_41bd5a:                                  ; preds = %block_41bcf2, %block_41bcd4, %block_.L_41bd55
  %426 = phi i64 [ %425, %block_.L_41bd55 ], [ %326, %block_41bcf2 ], [ %261, %block_41bcd4 ]
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  %427 = load i64, i64* %RBP.i, align 8
  %428 = add i64 %427, -24
  %429 = add i64 %426, 14
  store i64 %429, i64* %3, align 8
  %430 = inttoptr i64 %428 to i32*
  %431 = load i32, i32* %430, align 4
  %432 = sext i32 %431 to i64
  %433 = mul nsw i64 %432, 36
  store i64 %433, i64* %RCX.i4203, align 8
  %434 = lshr i64 %433, 63
  %435 = add i64 %433, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %435, i64* %RAX.i1555, align 8
  %436 = icmp ult i64 %435, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %437 = icmp ult i64 %435, %433
  %438 = or i1 %436, %437
  %439 = zext i1 %438 to i8
  store i8 %439, i8* %19, align 1
  %440 = trunc i64 %435 to i32
  %441 = and i32 %440, 252
  %442 = tail call i32 @llvm.ctpop.i32(i32 %441)
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  store i8 %445, i8* %26, align 1
  %446 = xor i64 %433, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %447 = xor i64 %446, %435
  %448 = lshr i64 %447, 4
  %449 = trunc i64 %448 to i8
  %450 = and i8 %449, 1
  store i8 %450, i8* %31, align 1
  %451 = icmp eq i64 %435, 0
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %34, align 1
  %453 = lshr i64 %435, 63
  %454 = trunc i64 %453 to i8
  store i8 %454, i8* %37, align 1
  %455 = xor i64 %453, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %456 = xor i64 %453, %434
  %457 = add nuw nsw i64 %455, %456
  %458 = icmp eq i64 %457, 2
  %459 = zext i1 %458 to i8
  store i8 %459, i8* %43, align 1
  %460 = inttoptr i64 %435 to i32*
  %461 = add i64 %426, 24
  store i64 %461, i64* %3, align 8
  %462 = load i32, i32* %460, align 4
  %463 = add i32 %462, -4
  %464 = icmp ult i32 %462, 4
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %19, align 1
  %466 = and i32 %463, 255
  %467 = tail call i32 @llvm.ctpop.i32(i32 %466)
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  %470 = xor i8 %469, 1
  store i8 %470, i8* %26, align 1
  %471 = xor i32 %463, %462
  %472 = lshr i32 %471, 4
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  store i8 %474, i8* %31, align 1
  %475 = icmp eq i32 %463, 0
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %34, align 1
  %477 = lshr i32 %463, 31
  %478 = trunc i32 %477 to i8
  store i8 %478, i8* %37, align 1
  %479 = lshr i32 %462, 31
  %480 = xor i32 %477, %479
  %481 = add nuw nsw i32 %480, %479
  %482 = icmp eq i32 %481, 2
  %483 = zext i1 %482 to i8
  store i8 %483, i8* %43, align 1
  %.v452 = select i1 %475, i64 30, i64 134
  %484 = add i64 %426, %.v452
  store i64 %484, i64* %3, align 8
  br i1 %475, label %block_41bd78, label %block_.L_41bde0

block_41bd78:                                     ; preds = %block_.L_41bd5a
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  %485 = load i64, i64* %RBP.i, align 8
  %486 = add i64 %485, -24
  %487 = add i64 %484, 14
  store i64 %487, i64* %3, align 8
  %488 = inttoptr i64 %486 to i32*
  %489 = load i32, i32* %488, align 4
  %490 = sext i32 %489 to i64
  %491 = mul nsw i64 %490, 36
  store i64 %491, i64* %RCX.i4203, align 8
  %492 = lshr i64 %491, 63
  %493 = add i64 %491, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %493, i64* %RAX.i1555, align 8
  %494 = icmp ult i64 %493, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %495 = icmp ult i64 %493, %491
  %496 = or i1 %494, %495
  %497 = zext i1 %496 to i8
  store i8 %497, i8* %19, align 1
  %498 = trunc i64 %493 to i32
  %499 = and i32 %498, 252
  %500 = tail call i32 @llvm.ctpop.i32(i32 %499)
  %501 = trunc i32 %500 to i8
  %502 = and i8 %501, 1
  %503 = xor i8 %502, 1
  store i8 %503, i8* %26, align 1
  %504 = xor i64 %491, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %505 = xor i64 %504, %493
  %506 = lshr i64 %505, 4
  %507 = trunc i64 %506 to i8
  %508 = and i8 %507, 1
  store i8 %508, i8* %31, align 1
  %509 = icmp eq i64 %493, 0
  %510 = zext i1 %509 to i8
  store i8 %510, i8* %34, align 1
  %511 = lshr i64 %493, 63
  %512 = trunc i64 %511 to i8
  store i8 %512, i8* %37, align 1
  %513 = xor i64 %511, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %514 = xor i64 %511, %492
  %515 = add nuw nsw i64 %513, %514
  %516 = icmp eq i64 %515, 2
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %43, align 1
  %518 = add i64 %491, add (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 12)
  %519 = add i64 %484, 24
  store i64 %519, i64* %3, align 8
  %520 = inttoptr i64 %518 to i32*
  %521 = load i32, i32* %520, align 4
  %522 = zext i32 %521 to i64
  store i64 %522, i64* %RDX.i4244, align 8
  %523 = add i64 %484, 27
  store i64 %523, i64* %3, align 8
  %524 = load i32, i32* %488, align 4
  %525 = sub i32 %521, %524
  %526 = icmp ult i32 %521, %524
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %19, align 1
  %528 = and i32 %525, 255
  %529 = tail call i32 @llvm.ctpop.i32(i32 %528)
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  %532 = xor i8 %531, 1
  store i8 %532, i8* %26, align 1
  %533 = xor i32 %524, %521
  %534 = xor i32 %533, %525
  %535 = lshr i32 %534, 4
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  store i8 %537, i8* %31, align 1
  %538 = icmp eq i32 %525, 0
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %34, align 1
  %540 = lshr i32 %525, 31
  %541 = trunc i32 %540 to i8
  store i8 %541, i8* %37, align 1
  %542 = lshr i32 %521, 31
  %543 = lshr i32 %524, 31
  %544 = xor i32 %543, %542
  %545 = xor i32 %540, %542
  %546 = add nuw nsw i32 %545, %544
  %547 = icmp eq i32 %546, 2
  %548 = zext i1 %547 to i8
  store i8 %548, i8* %43, align 1
  %.v453 = select i1 %538, i64 33, i64 104
  %549 = add i64 %484, %.v453
  store i64 %549, i64* %3, align 8
  br i1 %538, label %block_41bd99, label %block_.L_41bde0

block_41bd99:                                     ; preds = %block_41bd78
  %550 = load i64, i64* %RBP.i, align 8
  %551 = add i64 %550, -24
  %552 = add i64 %549, 3
  store i64 %552, i64* %3, align 8
  %553 = inttoptr i64 %551 to i32*
  %554 = load i32, i32* %553, align 4
  %555 = zext i32 %554 to i64
  store i64 %555, i64* %RDI.i4254, align 8
  %556 = add i64 %549, -25753
  %557 = add i64 %549, 8
  %558 = load i64, i64* %6, align 8
  %559 = add i64 %558, -8
  %560 = inttoptr i64 %559 to i64*
  store i64 %557, i64* %560, align 8
  store i64 %559, i64* %6, align 8
  store i64 %556, i64* %3, align 8
  %call2_41bd9c = tail call %struct.Memory* @sub_415900.is_ko_point(%struct.State* nonnull %0, i64 %556, %struct.Memory* %MEMORY.0)
  %561 = load i32, i32* %EAX.i4253, align 4
  %562 = load i64, i64* %3, align 8
  store i8 0, i8* %19, align 1
  %563 = and i32 %561, 255
  %564 = tail call i32 @llvm.ctpop.i32(i32 %563)
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  store i8 %567, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %568 = icmp eq i32 %561, 0
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %34, align 1
  %570 = lshr i32 %561, 31
  %571 = trunc i32 %570 to i8
  store i8 %571, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v454 = select i1 %568, i64 40, i64 9
  %572 = add i64 %562, %.v454
  store i64 %572, i64* %3, align 8
  br i1 %568, label %block_.L_41bdc9, label %block_41bdaa

block_41bdaa:                                     ; preds = %block_41bd99
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  %573 = load i64, i64* %RBP.i, align 8
  %574 = add i64 %573, -24
  %575 = add i64 %572, 14
  store i64 %575, i64* %3, align 8
  %576 = inttoptr i64 %574 to i32*
  %577 = load i32, i32* %576, align 4
  %578 = sext i32 %577 to i64
  %579 = mul nsw i64 %578, 36
  store i64 %579, i64* %RCX.i4203, align 8
  %580 = lshr i64 %579, 63
  %581 = add i64 %579, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %581, i64* %RAX.i1555, align 8
  %582 = icmp ult i64 %581, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %583 = icmp ult i64 %581, %579
  %584 = or i1 %582, %583
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %19, align 1
  %586 = trunc i64 %581 to i32
  %587 = and i32 %586, 252
  %588 = tail call i32 @llvm.ctpop.i32(i32 %587)
  %589 = trunc i32 %588 to i8
  %590 = and i8 %589, 1
  %591 = xor i8 %590, 1
  store i8 %591, i8* %26, align 1
  %592 = xor i64 %579, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %593 = xor i64 %592, %581
  %594 = lshr i64 %593, 4
  %595 = trunc i64 %594 to i8
  %596 = and i8 %595, 1
  store i8 %596, i8* %31, align 1
  %597 = icmp eq i64 %581, 0
  %598 = zext i1 %597 to i8
  store i8 %598, i8* %34, align 1
  %599 = lshr i64 %581, 63
  %600 = trunc i64 %599 to i8
  store i8 %600, i8* %37, align 1
  %601 = xor i64 %599, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %602 = xor i64 %599, %580
  %603 = add nuw nsw i64 %601, %602
  %604 = icmp eq i64 %603, 2
  %605 = zext i1 %604 to i8
  store i8 %605, i8* %43, align 1
  %606 = add i64 %579, add (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 4)
  %607 = add i64 %572, 25
  store i64 %607, i64* %3, align 8
  %608 = inttoptr i64 %606 to i32*
  %609 = load i32, i32* %608, align 4
  %610 = add i32 %609, -1
  %611 = icmp eq i32 %609, 0
  %612 = zext i1 %611 to i8
  store i8 %612, i8* %19, align 1
  %613 = and i32 %610, 255
  %614 = tail call i32 @llvm.ctpop.i32(i32 %613)
  %615 = trunc i32 %614 to i8
  %616 = and i8 %615, 1
  %617 = xor i8 %616, 1
  store i8 %617, i8* %26, align 1
  %618 = xor i32 %610, %609
  %619 = lshr i32 %618, 4
  %620 = trunc i32 %619 to i8
  %621 = and i8 %620, 1
  store i8 %621, i8* %31, align 1
  %622 = icmp eq i32 %610, 0
  %623 = zext i1 %622 to i8
  store i8 %623, i8* %34, align 1
  %624 = lshr i32 %610, 31
  %625 = trunc i32 %624 to i8
  store i8 %625, i8* %37, align 1
  %626 = lshr i32 %609, 31
  %627 = xor i32 %624, %626
  %628 = add nuw nsw i32 %627, %626
  %629 = icmp eq i32 %628, 2
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %43, align 1
  %631 = icmp ne i8 %625, 0
  %632 = xor i1 %631, %629
  %633 = or i1 %622, %632
  %.v455 = select i1 %633, i64 49, i64 31
  %634 = add i64 %572, %.v455
  store i64 %634, i64* %3, align 8
  br i1 %633, label %block_.L_41bddb, label %block_.L_41bdc9

block_.L_41bdc9:                                  ; preds = %block_41bdaa, %block_41bd99
  %635 = phi i64 [ %634, %block_41bdaa ], [ %572, %block_41bd99 ]
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RSI.i4246, align 8
  %636 = load i64, i64* %RBP.i, align 8
  %637 = add i64 %636, -24
  %638 = add i64 %635, 13
  store i64 %638, i64* %3, align 8
  %639 = inttoptr i64 %637 to i32*
  %640 = load i32, i32* %639, align 4
  %641 = zext i32 %640 to i64
  store i64 %641, i64* %RDI.i4254, align 8
  %642 = add i64 %635, 9703
  %643 = add i64 %635, 18
  %644 = load i64, i64* %6, align 8
  %645 = add i64 %644, -8
  %646 = inttoptr i64 %645 to i64*
  store i64 %643, i64* %646, align 8
  store i64 %645, i64* %6, align 8
  store i64 %642, i64* %3, align 8
  %call2_41bdd6 = tail call %struct.Memory* @sub_41e3b0.dragon_eye(%struct.State* nonnull %0, i64 %642, %struct.Memory* %call2_41bd9c)
  %.pre219 = load i64, i64* %3, align 8
  br label %block_.L_41bddb

block_.L_41bddb:                                  ; preds = %block_.L_41bdc9, %block_41bdaa
  %647 = phi i64 [ %.pre219, %block_.L_41bdc9 ], [ %634, %block_41bdaa ]
  %MEMORY.5 = phi %struct.Memory* [ %call2_41bdd6, %block_.L_41bdc9 ], [ %call2_41bd9c, %block_41bdaa ]
  %648 = add i64 %647, 5
  store i64 %648, i64* %3, align 8
  br label %block_.L_41bde0

block_.L_41bde0:                                  ; preds = %block_41bd78, %block_.L_41bd5a, %block_.L_41bddb
  %649 = phi i64 [ %484, %block_.L_41bd5a ], [ %549, %block_41bd78 ], [ %648, %block_.L_41bddb ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.0, %block_.L_41bd5a ], [ %MEMORY.0, %block_41bd78 ], [ %MEMORY.5, %block_.L_41bddb ]
  %650 = add i64 %649, 5
  store i64 %650, i64* %3, align 8
  %.pre220 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41bde5

block_.L_41bde5:                                  ; preds = %block_.L_41bde0, %block_41bcbf
  %651 = phi i64 [ %151, %block_41bcbf ], [ %.pre220, %block_.L_41bde0 ]
  %652 = phi i64 [ %206, %block_41bcbf ], [ %650, %block_.L_41bde0 ]
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.0, %block_41bcbf ], [ %MEMORY.6, %block_.L_41bde0 ]
  %653 = add i64 %651, -24
  %654 = add i64 %652, 8
  store i64 %654, i64* %3, align 8
  %655 = inttoptr i64 %653 to i32*
  %656 = load i32, i32* %655, align 4
  %657 = add i32 %656, 1
  %658 = zext i32 %657 to i64
  store i64 %658, i64* %RAX.i1555, align 8
  %659 = icmp eq i32 %656, -1
  %660 = icmp eq i32 %657, 0
  %661 = or i1 %659, %660
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %19, align 1
  %663 = and i32 %657, 255
  %664 = tail call i32 @llvm.ctpop.i32(i32 %663)
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = xor i8 %666, 1
  store i8 %667, i8* %26, align 1
  %668 = xor i32 %657, %656
  %669 = lshr i32 %668, 4
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  store i8 %671, i8* %31, align 1
  %672 = zext i1 %660 to i8
  store i8 %672, i8* %34, align 1
  %673 = lshr i32 %657, 31
  %674 = trunc i32 %673 to i8
  store i8 %674, i8* %37, align 1
  %675 = lshr i32 %656, 31
  %676 = xor i32 %673, %675
  %677 = add nuw nsw i32 %676, %673
  %678 = icmp eq i32 %677, 2
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %43, align 1
  %680 = add i64 %652, 14
  store i64 %680, i64* %3, align 8
  store i32 %657, i32* %655, align 4
  %681 = load i64, i64* %3, align 8
  %682 = add i64 %681, -321
  store i64 %682, i64* %3, align 8
  br label %block_.L_41bcb2

block_.L_41bdf8:                                  ; preds = %block_.L_41bcb2
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57aece_type* @G__0x57aece to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %683 = add i64 %180, add (i64 ptrtoint (%G_0xc714f__rip__type* @G_0xc714f__rip_ to i64), i64 17)
  %684 = add i64 %180, 25
  store i64 %684, i64* %3, align 8
  %685 = inttoptr i64 %683 to i64*
  %686 = load i64, i64* %685, align 8
  store i64 %686, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %687 = add i64 %180, 394712
  %688 = add i64 %180, 30
  %689 = load i64, i64* %6, align 8
  %690 = add i64 %689, -8
  %691 = inttoptr i64 %690 to i64*
  store i64 %688, i64* %691, align 8
  store i64 %690, i64* %6, align 8
  store i64 %687, i64* %3, align 8
  %call2_41be11 = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %687, %struct.Memory* %MEMORY.0)
  %692 = load i64, i64* %RBP.i, align 8
  %693 = add i64 %692, -872
  %694 = load i64, i64* %3, align 8
  %695 = add i64 %694, 8
  store i64 %695, i64* %3, align 8
  %696 = load i64, i64* %93, align 1
  %697 = inttoptr i64 %693 to i64*
  store i64 %696, i64* %697, align 8
  %.pre221 = load i64, i64* %3, align 8
  br label %block_.L_41be1e

block_.L_41be1e:                                  ; preds = %entry.block_.L_41be1e_crit_edge, %block_.L_41bdf8
  %ECX.i4047.pre-phi.in = phi %union.anon* [ %.pre313, %entry.block_.L_41be1e_crit_edge ], [ %149, %block_.L_41bdf8 ]
  %RCX.i4050.pre-phi = phi i64* [ %.pre314, %entry.block_.L_41be1e_crit_edge ], [ %RCX.i4203, %block_.L_41bdf8 ]
  %698 = phi i64 [ %140, %entry.block_.L_41be1e_crit_edge ], [ %.pre221, %block_.L_41bdf8 ]
  %MEMORY.8 = phi %struct.Memory* [ %call2_41bc90, %entry.block_.L_41be1e_crit_edge ], [ %call2_41be11, %block_.L_41bdf8 ]
  %ECX.i4047.pre-phi = bitcast %union.anon* %ECX.i4047.pre-phi.in to i32*
  %699 = add i64 %698, 10274
  %700 = add i64 %698, 5
  %701 = load i64, i64* %6, align 8
  %702 = add i64 %701, -8
  %703 = inttoptr i64 %702 to i64*
  store i64 %700, i64* %703, align 8
  store i64 %702, i64* %6, align 8
  store i64 %699, i64* %3, align 8
  %call2_41be1e = tail call %struct.Memory* @sub_41e640.initialize_supplementary_dragon_data(%struct.State* nonnull %0, i64 %699, %struct.Memory* %MEMORY.8)
  %704 = load i64, i64* %RBP.i, align 8
  %705 = add i64 %704, -24
  %706 = load i64, i64* %3, align 8
  %707 = add i64 %706, 7
  store i64 %707, i64* %3, align 8
  %708 = inttoptr i64 %705 to i32*
  store i32 21, i32* %708, align 4
  %R8.i3778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %AL.i3758 = bitcast %union.anon* %44 to i8*
  %.pre222 = load i64, i64* %3, align 8
  br label %block_.L_41be2a

block_.L_41be2a:                                  ; preds = %block_.L_41c0ad, %block_.L_41be1e
  %709 = phi i64 [ %.pre222, %block_.L_41be1e ], [ %1716, %block_.L_41c0ad ]
  %MEMORY.9 = phi %struct.Memory* [ %call2_41be1e, %block_.L_41be1e ], [ %MEMORY.17, %block_.L_41c0ad ]
  %710 = load i64, i64* %RBP.i, align 8
  %711 = add i64 %710, -24
  %712 = add i64 %709, 7
  store i64 %712, i64* %3, align 8
  %713 = inttoptr i64 %711 to i32*
  %714 = load i32, i32* %713, align 4
  %715 = add i32 %714, -400
  %716 = icmp ult i32 %714, 400
  %717 = zext i1 %716 to i8
  store i8 %717, i8* %19, align 1
  %718 = and i32 %715, 255
  %719 = tail call i32 @llvm.ctpop.i32(i32 %718)
  %720 = trunc i32 %719 to i8
  %721 = and i8 %720, 1
  %722 = xor i8 %721, 1
  store i8 %722, i8* %26, align 1
  %723 = xor i32 %714, 16
  %724 = xor i32 %723, %715
  %725 = lshr i32 %724, 4
  %726 = trunc i32 %725 to i8
  %727 = and i8 %726, 1
  store i8 %727, i8* %31, align 1
  %728 = icmp eq i32 %715, 0
  %729 = zext i1 %728 to i8
  store i8 %729, i8* %34, align 1
  %730 = lshr i32 %715, 31
  %731 = trunc i32 %730 to i8
  store i8 %731, i8* %37, align 1
  %732 = lshr i32 %714, 31
  %733 = xor i32 %730, %732
  %734 = add nuw nsw i32 %733, %732
  %735 = icmp eq i32 %734, 2
  %736 = zext i1 %735 to i8
  store i8 %736, i8* %43, align 1
  %737 = icmp ne i8 %731, 0
  %738 = xor i1 %737, %735
  %.v324 = select i1 %738, i64 13, i64 657
  %739 = add i64 %709, %.v324
  store i64 %739, i64* %3, align 8
  br i1 %738, label %block_41be37, label %block_.L_41c0bb

block_41be37:                                     ; preds = %block_.L_41be2a
  %740 = add i64 %739, 4
  store i64 %740, i64* %3, align 8
  %741 = load i32, i32* %713, align 4
  %742 = sext i32 %741 to i64
  store i64 %742, i64* %RAX.i1555, align 8
  %743 = add nsw i64 %742, 12099168
  %744 = add i64 %739, 12
  store i64 %744, i64* %3, align 8
  %745 = inttoptr i64 %743 to i8*
  %746 = load i8, i8* %745, align 1
  %747 = zext i8 %746 to i64
  store i64 %747, i64* %RCX.i4050.pre-phi, align 8
  %748 = zext i8 %746 to i32
  %749 = add nsw i32 %748, -3
  %750 = icmp ult i8 %746, 3
  %751 = zext i1 %750 to i8
  store i8 %751, i8* %19, align 1
  %752 = and i32 %749, 255
  %753 = tail call i32 @llvm.ctpop.i32(i32 %752)
  %754 = trunc i32 %753 to i8
  %755 = and i8 %754, 1
  %756 = xor i8 %755, 1
  store i8 %756, i8* %26, align 1
  %757 = xor i32 %749, %748
  %758 = lshr i32 %757, 4
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  store i8 %760, i8* %31, align 1
  %761 = icmp eq i32 %749, 0
  %762 = zext i1 %761 to i8
  store i8 %762, i8* %34, align 1
  %763 = lshr i32 %749, 31
  %764 = trunc i32 %763 to i8
  store i8 %764, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v438 = select i1 %761, i64 625, i64 21
  %765 = add i64 %739, %.v438
  store i64 %765, i64* %3, align 8
  br i1 %761, label %block_.L_41c0ad, label %block_41be4c

block_41be4c:                                     ; preds = %block_41be37
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %766 = add i64 %765, 14
  store i64 %766, i64* %3, align 8
  %767 = load i32, i32* %713, align 4
  %768 = sext i32 %767 to i64
  %769 = mul nsw i64 %768, 380
  store i64 %769, i64* %RCX.i4050.pre-phi, align 8
  %770 = lshr i64 %769, 63
  %771 = add i64 %769, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %771, i64* %RAX.i1555, align 8
  %772 = icmp ult i64 %771, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %773 = icmp ult i64 %771, %769
  %774 = or i1 %772, %773
  %775 = zext i1 %774 to i8
  store i8 %775, i8* %19, align 1
  %776 = trunc i64 %771 to i32
  %777 = and i32 %776, 252
  %778 = tail call i32 @llvm.ctpop.i32(i32 %777)
  %779 = trunc i32 %778 to i8
  %780 = and i8 %779, 1
  %781 = xor i8 %780, 1
  store i8 %781, i8* %26, align 1
  %782 = xor i64 %769, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %783 = xor i64 %782, %771
  %784 = lshr i64 %783, 4
  %785 = trunc i64 %784 to i8
  %786 = and i8 %785, 1
  store i8 %786, i8* %31, align 1
  %787 = icmp eq i64 %771, 0
  %788 = zext i1 %787 to i8
  store i8 %788, i8* %34, align 1
  %789 = lshr i64 %771, 63
  %790 = trunc i64 %789 to i8
  store i8 %790, i8* %37, align 1
  %791 = xor i64 %789, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %792 = xor i64 %789, %770
  %793 = add nuw nsw i64 %791, %792
  %794 = icmp eq i64 %793, 2
  %795 = zext i1 %794 to i8
  store i8 %795, i8* %43, align 1
  %796 = add i64 %769, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 12)
  %797 = add i64 %765, 27
  store i64 %797, i64* %3, align 8
  %798 = inttoptr i64 %796 to i32*
  %799 = load i32, i32* %798, align 4
  %800 = zext i32 %799 to i64
  store i64 %800, i64* %RDX.i4244, align 8
  %801 = add i64 %765, 30
  store i64 %801, i64* %3, align 8
  %802 = load i32, i32* %713, align 4
  %803 = sub i32 %799, %802
  %804 = icmp ult i32 %799, %802
  %805 = zext i1 %804 to i8
  store i8 %805, i8* %19, align 1
  %806 = and i32 %803, 255
  %807 = tail call i32 @llvm.ctpop.i32(i32 %806)
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = xor i8 %809, 1
  store i8 %810, i8* %26, align 1
  %811 = xor i32 %802, %799
  %812 = xor i32 %811, %803
  %813 = lshr i32 %812, 4
  %814 = trunc i32 %813 to i8
  %815 = and i8 %814, 1
  store i8 %815, i8* %31, align 1
  %816 = icmp eq i32 %803, 0
  %817 = zext i1 %816 to i8
  store i8 %817, i8* %34, align 1
  %818 = lshr i32 %803, 31
  %819 = trunc i32 %818 to i8
  store i8 %819, i8* %37, align 1
  %820 = lshr i32 %799, 31
  %821 = lshr i32 %802, 31
  %822 = xor i32 %821, %820
  %823 = xor i32 %818, %820
  %824 = add nuw nsw i32 %823, %822
  %825 = icmp eq i32 %824, 2
  %826 = zext i1 %825 to i8
  store i8 %826, i8* %43, align 1
  %.v439 = select i1 %816, i64 36, i64 91
  %827 = add i64 %765, %.v439
  store i64 %827, i64* %3, align 8
  br i1 %816, label %block_41be70, label %block_.L_41c0ad

block_41be70:                                     ; preds = %block_41be4c
  %828 = load i64, i64* %RBP.i, align 8
  %829 = add i64 %828, -24
  %830 = add i64 %827, 4
  store i64 %830, i64* %3, align 8
  %831 = inttoptr i64 %829 to i32*
  %832 = load i32, i32* %831, align 4
  %833 = sext i32 %832 to i64
  store i64 %833, i64* %RAX.i1555, align 8
  %834 = add nsw i64 %833, 12099168
  %835 = add i64 %827, 12
  store i64 %835, i64* %3, align 8
  %836 = inttoptr i64 %834 to i8*
  %837 = load i8, i8* %836, align 1
  %838 = zext i8 %837 to i64
  store i64 %838, i64* %RCX.i4050.pre-phi, align 8
  %839 = zext i8 %837 to i32
  store i8 0, i8* %19, align 1
  %840 = tail call i32 @llvm.ctpop.i32(i32 %839)
  %841 = trunc i32 %840 to i8
  %842 = and i8 %841, 1
  %843 = xor i8 %842, 1
  store i8 %843, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %844 = icmp eq i8 %837, 0
  %845 = zext i1 %844 to i8
  store i8 %845, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v440 = select i1 %844, i64 55, i64 21
  %846 = add i64 %827, %.v440
  store i64 %846, i64* %3, align 8
  br i1 %844, label %block_.L_41c0ad, label %block_41be85

block_41be85:                                     ; preds = %block_41be70
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %847 = add i64 %846, 14
  store i64 %847, i64* %3, align 8
  %848 = load i32, i32* %831, align 4
  %849 = sext i32 %848 to i64
  %850 = mul nsw i64 %849, 380
  store i64 %850, i64* %RCX.i4050.pre-phi, align 8
  %851 = lshr i64 %850, 63
  %852 = add i64 %850, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %852, i64* %RAX.i1555, align 8
  %853 = icmp ult i64 %852, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %854 = icmp ult i64 %852, %850
  %855 = or i1 %853, %854
  %856 = zext i1 %855 to i8
  store i8 %856, i8* %19, align 1
  %857 = trunc i64 %852 to i32
  %858 = and i32 %857, 252
  %859 = tail call i32 @llvm.ctpop.i32(i32 %858)
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  %862 = xor i8 %861, 1
  store i8 %862, i8* %26, align 1
  %863 = xor i64 %850, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %864 = xor i64 %863, %852
  %865 = lshr i64 %864, 4
  %866 = trunc i64 %865 to i8
  %867 = and i8 %866, 1
  store i8 %867, i8* %31, align 1
  %868 = icmp eq i64 %852, 0
  %869 = zext i1 %868 to i8
  store i8 %869, i8* %34, align 1
  %870 = lshr i64 %852, 63
  %871 = trunc i64 %870 to i8
  store i8 %871, i8* %37, align 1
  %872 = xor i64 %870, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %873 = xor i64 %870, %851
  %874 = add nuw nsw i64 %872, %873
  %875 = icmp eq i64 %874, 2
  %876 = zext i1 %875 to i8
  store i8 %876, i8* %43, align 1
  %877 = add i64 %850, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 32)
  %878 = add i64 %846, 28
  store i64 %878, i64* %3, align 8
  %879 = inttoptr i64 %877 to i32*
  %880 = load i32, i32* %879, align 4
  store i8 0, i8* %19, align 1
  %881 = and i32 %880, 255
  %882 = tail call i32 @llvm.ctpop.i32(i32 %881)
  %883 = trunc i32 %882 to i8
  %884 = and i8 %883, 1
  %885 = xor i8 %884, 1
  store i8 %885, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %886 = icmp eq i32 %880, 0
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %34, align 1
  %888 = lshr i32 %880, 31
  %889 = trunc i32 %888 to i8
  store i8 %889, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v441 = select i1 %886, i64 34, i64 39
  %890 = add i64 %846, %.v441
  store i64 %890, i64* %3, align 8
  br i1 %886, label %block_.L_41c0ad, label %block_.L_41beac

block_.L_41beac:                                  ; preds = %block_41be85
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %891 = add i64 %890, 14
  store i64 %891, i64* %3, align 8
  %892 = load i32, i32* %831, align 4
  %893 = sext i32 %892 to i64
  %894 = mul nsw i64 %893, 380
  store i64 %894, i64* %RCX.i4050.pre-phi, align 8
  %895 = lshr i64 %894, 63
  %896 = add i64 %894, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %896, i64* %RDX.i4244, align 8
  %897 = icmp ult i64 %896, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %898 = icmp ult i64 %896, %894
  %899 = or i1 %897, %898
  %900 = zext i1 %899 to i8
  store i8 %900, i8* %19, align 1
  %901 = trunc i64 %896 to i32
  %902 = and i32 %901, 252
  %903 = tail call i32 @llvm.ctpop.i32(i32 %902)
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = xor i8 %905, 1
  store i8 %906, i8* %26, align 1
  %907 = xor i64 %894, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %908 = xor i64 %907, %896
  %909 = lshr i64 %908, 4
  %910 = trunc i64 %909 to i8
  %911 = and i8 %910, 1
  store i8 %911, i8* %31, align 1
  %912 = icmp eq i64 %896, 0
  %913 = zext i1 %912 to i8
  store i8 %913, i8* %34, align 1
  %914 = lshr i64 %896, 63
  %915 = trunc i64 %914 to i8
  store i8 %915, i8* %37, align 1
  %916 = xor i64 %914, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %917 = xor i64 %914, %895
  %918 = add nuw nsw i64 %916, %917
  %919 = icmp eq i64 %918, 2
  %920 = zext i1 %919 to i8
  store i8 %920, i8* %43, align 1
  %921 = add i64 %894, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 32)
  %922 = add i64 %890, 30
  store i64 %922, i64* %3, align 8
  %923 = inttoptr i64 %921 to i32*
  %924 = load i32, i32* %923, align 4
  %925 = zext i32 %924 to i64
  store i64 %925, i64* %RSI.i4246, align 8
  %926 = add i64 %828, -40
  %927 = add i64 %890, 33
  store i64 %927, i64* %3, align 8
  %928 = inttoptr i64 %926 to i32*
  store i32 %924, i32* %928, align 4
  %929 = load i64, i64* %RBP.i, align 8
  %930 = add i64 %929, -40
  %931 = load i64, i64* %3, align 8
  %932 = add i64 %931, 4
  store i64 %932, i64* %3, align 8
  %933 = inttoptr i64 %930 to i32*
  %934 = load i32, i32* %933, align 4
  %935 = sext i32 %934 to i64
  %936 = mul nsw i64 %935, 380
  store i64 %936, i64* %RCX.i4050.pre-phi, align 8
  %937 = lshr i64 %936, 63
  %938 = load i64, i64* %RAX.i1555, align 8
  %939 = add i64 %936, %938
  store i64 %939, i64* %RAX.i1555, align 8
  %940 = icmp ult i64 %939, %938
  %941 = icmp ult i64 %939, %936
  %942 = or i1 %940, %941
  %943 = zext i1 %942 to i8
  store i8 %943, i8* %19, align 1
  %944 = trunc i64 %939 to i32
  %945 = and i32 %944, 255
  %946 = tail call i32 @llvm.ctpop.i32(i32 %945)
  %947 = trunc i32 %946 to i8
  %948 = and i8 %947, 1
  %949 = xor i8 %948, 1
  store i8 %949, i8* %26, align 1
  %950 = xor i64 %936, %938
  %951 = xor i64 %950, %939
  %952 = lshr i64 %951, 4
  %953 = trunc i64 %952 to i8
  %954 = and i8 %953, 1
  store i8 %954, i8* %31, align 1
  %955 = icmp eq i64 %939, 0
  %956 = zext i1 %955 to i8
  store i8 %956, i8* %34, align 1
  %957 = lshr i64 %939, 63
  %958 = trunc i64 %957 to i8
  store i8 %958, i8* %37, align 1
  %959 = lshr i64 %938, 63
  %960 = xor i64 %957, %959
  %961 = xor i64 %957, %937
  %962 = add nuw nsw i64 %960, %961
  %963 = icmp eq i64 %962, 2
  %964 = zext i1 %963 to i8
  store i8 %964, i8* %43, align 1
  %965 = add i64 %939, 180
  %966 = add i64 %931, 21
  store i64 %966, i64* %3, align 8
  %967 = inttoptr i64 %965 to i32*
  %968 = load i32, i32* %967, align 4
  store i8 0, i8* %19, align 1
  %969 = and i32 %968, 255
  %970 = tail call i32 @llvm.ctpop.i32(i32 %969)
  %971 = trunc i32 %970 to i8
  %972 = and i8 %971, 1
  %973 = xor i8 %972, 1
  store i8 %973, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %974 = icmp eq i32 %968, 0
  %975 = zext i1 %974 to i8
  store i8 %975, i8* %34, align 1
  %976 = lshr i32 %968, 31
  %977 = trunc i32 %976 to i8
  store i8 %977, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v442 = select i1 %974, i64 27, i64 32
  %978 = add i64 %931, %.v442
  store i64 %978, i64* %3, align 8
  br i1 %974, label %block_.L_41c0ad, label %block_.L_41beed

block_.L_41beed:                                  ; preds = %block_.L_41beac
  %979 = add i64 %929, -12
  %980 = add i64 %978, 4
  store i64 %980, i64* %3, align 8
  %981 = inttoptr i64 %979 to i32*
  %982 = load i32, i32* %981, align 4
  %983 = add i32 %982, -1
  %984 = icmp eq i32 %982, 0
  %985 = zext i1 %984 to i8
  store i8 %985, i8* %19, align 1
  %986 = and i32 %983, 255
  %987 = tail call i32 @llvm.ctpop.i32(i32 %986)
  %988 = trunc i32 %987 to i8
  %989 = and i8 %988, 1
  %990 = xor i8 %989, 1
  store i8 %990, i8* %26, align 1
  %991 = xor i32 %983, %982
  %992 = lshr i32 %991, 4
  %993 = trunc i32 %992 to i8
  %994 = and i8 %993, 1
  store i8 %994, i8* %31, align 1
  %995 = icmp eq i32 %983, 0
  %996 = zext i1 %995 to i8
  store i8 %996, i8* %34, align 1
  %997 = lshr i32 %983, 31
  %998 = trunc i32 %997 to i8
  store i8 %998, i8* %37, align 1
  %999 = lshr i32 %982, 31
  %1000 = xor i32 %997, %999
  %1001 = add nuw nsw i32 %1000, %999
  %1002 = icmp eq i32 %1001, 2
  %1003 = zext i1 %1002 to i8
  store i8 %1003, i8* %43, align 1
  %.v443 = select i1 %995, i64 20, i64 10
  %1004 = add i64 %978, %.v443
  store i64 %1004, i64* %3, align 8
  br i1 %995, label %block_.L_41bf01, label %block_41bef7

block_41bef7:                                     ; preds = %block_.L_41beed
  %1005 = add i64 %1004, 4
  store i64 %1005, i64* %3, align 8
  %1006 = load i32, i32* %981, align 4
  %1007 = add i32 %1006, -2
  %1008 = icmp ult i32 %1006, 2
  %1009 = zext i1 %1008 to i8
  store i8 %1009, i8* %19, align 1
  %1010 = and i32 %1007, 255
  %1011 = tail call i32 @llvm.ctpop.i32(i32 %1010)
  %1012 = trunc i32 %1011 to i8
  %1013 = and i8 %1012, 1
  %1014 = xor i8 %1013, 1
  store i8 %1014, i8* %26, align 1
  %1015 = xor i32 %1007, %1006
  %1016 = lshr i32 %1015, 4
  %1017 = trunc i32 %1016 to i8
  %1018 = and i8 %1017, 1
  store i8 %1018, i8* %31, align 1
  %1019 = icmp eq i32 %1007, 0
  %1020 = zext i1 %1019 to i8
  store i8 %1020, i8* %34, align 1
  %1021 = lshr i32 %1007, 31
  %1022 = trunc i32 %1021 to i8
  store i8 %1022, i8* %37, align 1
  %1023 = lshr i32 %1006, 31
  %1024 = xor i32 %1021, %1023
  %1025 = add nuw nsw i32 %1024, %1023
  %1026 = icmp eq i32 %1025, 2
  %1027 = zext i1 %1026 to i8
  store i8 %1027, i8* %43, align 1
  %.v444 = select i1 %1019, i64 10, i64 21
  %1028 = add i64 %1004, %.v444
  store i64 %1028, i64* %3, align 8
  br i1 %1019, label %block_.L_41bf01, label %block_.L_41bf0c

block_.L_41bf01:                                  ; preds = %block_41bef7, %block_.L_41beed
  %1029 = phi i64 [ %1028, %block_41bef7 ], [ %1004, %block_.L_41beed ]
  %1030 = add i64 %929, -24
  %1031 = add i64 %1029, 3
  store i64 %1031, i64* %3, align 8
  %1032 = inttoptr i64 %1030 to i32*
  %1033 = load i32, i32* %1032, align 4
  %1034 = zext i32 %1033 to i64
  store i64 %1034, i64* %RDI.i4254, align 8
  %1035 = add i64 %1029, 6
  store i64 %1035, i64* %3, align 8
  %1036 = load i32, i32* %933, align 4
  %1037 = zext i32 %1036 to i64
  store i64 %1037, i64* %RSI.i4246, align 8
  %1038 = add i64 %1029, 88239
  %1039 = add i64 %1029, 11
  %1040 = load i64, i64* %6, align 8
  %1041 = add i64 %1040, -8
  %1042 = inttoptr i64 %1041 to i64*
  store i64 %1039, i64* %1042, align 8
  store i64 %1041, i64* %6, align 8
  store i64 %1038, i64* %3, align 8
  %call2_41bf07 = tail call %struct.Memory* @sub_4317b0.add_lunch(%struct.State* nonnull %0, i64 %1038, %struct.Memory* %MEMORY.9)
  %.pre307 = load i64, i64* %3, align 8
  %.pre308 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41bf0c

block_.L_41bf0c:                                  ; preds = %block_41bef7, %block_.L_41bf01
  %1043 = phi i64 [ %.pre308, %block_.L_41bf01 ], [ %929, %block_41bef7 ]
  %1044 = phi i64 [ %.pre307, %block_.L_41bf01 ], [ %1028, %block_41bef7 ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %1045 = add i64 %1043, -24
  %1046 = add i64 %1044, 14
  store i64 %1046, i64* %3, align 8
  %1047 = inttoptr i64 %1045 to i32*
  %1048 = load i32, i32* %1047, align 4
  %1049 = sext i32 %1048 to i64
  %1050 = mul nsw i64 %1049, 76
  store i64 %1050, i64* %RCX.i4050.pre-phi, align 8
  %1051 = lshr i64 %1050, 63
  %1052 = add i64 %1050, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %1052, i64* %RDX.i4244, align 8
  %1053 = icmp ult i64 %1052, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %1054 = icmp ult i64 %1052, %1050
  %1055 = or i1 %1053, %1054
  %1056 = zext i1 %1055 to i8
  store i8 %1056, i8* %19, align 1
  %1057 = trunc i64 %1052 to i32
  %1058 = and i32 %1057, 252
  %1059 = tail call i32 @llvm.ctpop.i32(i32 %1058)
  %1060 = trunc i32 %1059 to i8
  %1061 = and i8 %1060, 1
  %1062 = xor i8 %1061, 1
  store i8 %1062, i8* %26, align 1
  %1063 = xor i64 %1050, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %1064 = xor i64 %1063, %1052
  %1065 = lshr i64 %1064, 4
  %1066 = trunc i64 %1065 to i8
  %1067 = and i8 %1066, 1
  store i8 %1067, i8* %31, align 1
  %1068 = icmp eq i64 %1052, 0
  %1069 = zext i1 %1068 to i8
  store i8 %1069, i8* %34, align 1
  %1070 = lshr i64 %1052, 63
  %1071 = trunc i64 %1070 to i8
  store i8 %1071, i8* %37, align 1
  %1072 = xor i64 %1070, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %1073 = xor i64 %1070, %1051
  %1074 = add nuw nsw i64 %1072, %1073
  %1075 = icmp eq i64 %1074, 2
  %1076 = zext i1 %1075 to i8
  store i8 %1076, i8* %43, align 1
  %1077 = add i64 %1050, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 8)
  %1078 = add i64 %1044, 27
  store i64 %1078, i64* %3, align 8
  %1079 = inttoptr i64 %1077 to i32*
  %1080 = load i32, i32* %1079, align 4
  %1081 = zext i32 %1080 to i64
  store i64 %1081, i64* %RSI.i4246, align 8
  %1082 = add i64 %1043, -44
  %1083 = add i64 %1044, 30
  store i64 %1083, i64* %3, align 8
  %1084 = inttoptr i64 %1082 to i32*
  store i32 %1080, i32* %1084, align 4
  %1085 = load i64, i64* %3, align 8
  %1086 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %1086, i64* %RCX.i4050.pre-phi, align 8
  %1087 = load i64, i64* %RBP.i, align 8
  %1088 = add i64 %1087, -44
  %1089 = add i64 %1085, 12
  store i64 %1089, i64* %3, align 8
  %1090 = inttoptr i64 %1088 to i32*
  %1091 = load i32, i32* %1090, align 4
  %1092 = sext i32 %1091 to i64
  %1093 = mul nsw i64 %1092, 76
  store i64 %1093, i64* %RDX.i4244, align 8
  %1094 = lshr i64 %1093, 63
  %1095 = load i64, i64* %RAX.i1555, align 8
  %1096 = add i64 %1093, %1095
  store i64 %1096, i64* %RAX.i1555, align 8
  %1097 = icmp ult i64 %1096, %1095
  %1098 = icmp ult i64 %1096, %1093
  %1099 = or i1 %1097, %1098
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %19, align 1
  %1101 = trunc i64 %1096 to i32
  %1102 = and i32 %1101, 255
  %1103 = tail call i32 @llvm.ctpop.i32(i32 %1102)
  %1104 = trunc i32 %1103 to i8
  %1105 = and i8 %1104, 1
  %1106 = xor i8 %1105, 1
  store i8 %1106, i8* %26, align 1
  %1107 = xor i64 %1093, %1095
  %1108 = xor i64 %1107, %1096
  %1109 = lshr i64 %1108, 4
  %1110 = trunc i64 %1109 to i8
  %1111 = and i8 %1110, 1
  store i8 %1111, i8* %31, align 1
  %1112 = icmp eq i64 %1096, 0
  %1113 = zext i1 %1112 to i8
  store i8 %1113, i8* %34, align 1
  %1114 = lshr i64 %1096, 63
  %1115 = trunc i64 %1114 to i8
  store i8 %1115, i8* %37, align 1
  %1116 = lshr i64 %1095, 63
  %1117 = xor i64 %1114, %1116
  %1118 = xor i64 %1114, %1094
  %1119 = add nuw nsw i64 %1117, %1118
  %1120 = icmp eq i64 %1119, 2
  %1121 = zext i1 %1120 to i8
  store i8 %1121, i8* %43, align 1
  %1122 = add i64 %1096, 4
  %1123 = add i64 %1085, 23
  store i64 %1123, i64* %3, align 8
  %1124 = inttoptr i64 %1122 to i32*
  %1125 = load i32, i32* %1124, align 4
  %1126 = sext i32 %1125 to i64
  %1127 = mul nsw i64 %1126, 104
  store i64 %1127, i64* %RAX.i1555, align 8
  %1128 = lshr i64 %1127, 63
  %1129 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %1130 = add i64 %1127, %1129
  store i64 %1130, i64* %RCX.i4050.pre-phi, align 8
  %1131 = icmp ult i64 %1130, %1129
  %1132 = icmp ult i64 %1130, %1127
  %1133 = or i1 %1131, %1132
  %1134 = zext i1 %1133 to i8
  store i8 %1134, i8* %19, align 1
  %1135 = trunc i64 %1130 to i32
  %1136 = and i32 %1135, 255
  %1137 = tail call i32 @llvm.ctpop.i32(i32 %1136)
  %1138 = trunc i32 %1137 to i8
  %1139 = and i8 %1138, 1
  %1140 = xor i8 %1139, 1
  store i8 %1140, i8* %26, align 1
  %1141 = xor i64 %1127, %1129
  %1142 = xor i64 %1141, %1130
  %1143 = lshr i64 %1142, 4
  %1144 = trunc i64 %1143 to i8
  %1145 = and i8 %1144, 1
  store i8 %1145, i8* %31, align 1
  %1146 = icmp eq i64 %1130, 0
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %34, align 1
  %1148 = lshr i64 %1130, 63
  %1149 = trunc i64 %1148 to i8
  store i8 %1149, i8* %37, align 1
  %1150 = lshr i64 %1129, 63
  %1151 = xor i64 %1148, %1150
  %1152 = xor i64 %1148, %1128
  %1153 = add nuw nsw i64 %1151, %1152
  %1154 = icmp eq i64 %1153, 2
  %1155 = zext i1 %1154 to i8
  store i8 %1155, i8* %43, align 1
  %1156 = add i64 %1130, 84
  %1157 = add i64 %1085, 33
  store i64 %1157, i64* %3, align 8
  %1158 = inttoptr i64 %1156 to i32*
  %1159 = load i32, i32* %1158, align 4
  %1160 = zext i32 %1159 to i64
  store i64 %1160, i64* %RSI.i4246, align 8
  %1161 = load i64, i64* %RBP.i, align 8
  %1162 = add i64 %1161, -48
  %1163 = add i64 %1085, 36
  store i64 %1163, i64* %3, align 8
  %1164 = inttoptr i64 %1162 to i32*
  store i32 %1159, i32* %1164, align 4
  %1165 = load i64, i64* %RBP.i, align 8
  %1166 = add i64 %1165, -48
  %1167 = load i64, i64* %3, align 8
  %1168 = add i64 %1167, 4
  store i64 %1168, i64* %3, align 8
  %1169 = inttoptr i64 %1166 to i32*
  %1170 = load i32, i32* %1169, align 4
  store i8 0, i8* %19, align 1
  %1171 = and i32 %1170, 255
  %1172 = tail call i32 @llvm.ctpop.i32(i32 %1171)
  %1173 = trunc i32 %1172 to i8
  %1174 = and i8 %1173, 1
  %1175 = xor i8 %1174, 1
  store i8 %1175, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %1176 = icmp eq i32 %1170, 0
  %1177 = zext i1 %1176 to i8
  store i8 %1177, i8* %34, align 1
  %1178 = lshr i32 %1170, 31
  %1179 = trunc i32 %1178 to i8
  store i8 %1179, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v445 = select i1 %1176, i64 169, i64 10
  %1180 = add i64 %1167, %.v445
  store i64 %1180, i64* %3, align 8
  br i1 %1176, label %block_.L_41bff7, label %block_41bf58

block_41bf58:                                     ; preds = %block_.L_41bf0c
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %1181 = add i64 %1165, -40
  %1182 = add i64 %1180, 14
  store i64 %1182, i64* %3, align 8
  %1183 = inttoptr i64 %1181 to i32*
  %1184 = load i32, i32* %1183, align 4
  %1185 = sext i32 %1184 to i64
  %1186 = mul nsw i64 %1185, 380
  store i64 %1186, i64* %RCX.i4050.pre-phi, align 8
  %1187 = lshr i64 %1186, 63
  %1188 = add i64 %1186, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %1188, i64* %RDX.i4244, align 8
  %1189 = icmp ult i64 %1188, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1190 = icmp ult i64 %1188, %1186
  %1191 = or i1 %1189, %1190
  %1192 = zext i1 %1191 to i8
  store i8 %1192, i8* %19, align 1
  %1193 = trunc i64 %1188 to i32
  %1194 = and i32 %1193, 252
  %1195 = tail call i32 @llvm.ctpop.i32(i32 %1194)
  %1196 = trunc i32 %1195 to i8
  %1197 = and i8 %1196, 1
  %1198 = xor i8 %1197, 1
  store i8 %1198, i8* %26, align 1
  %1199 = xor i64 %1186, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1200 = xor i64 %1199, %1188
  %1201 = lshr i64 %1200, 4
  %1202 = trunc i64 %1201 to i8
  %1203 = and i8 %1202, 1
  store i8 %1203, i8* %31, align 1
  %1204 = icmp eq i64 %1188, 0
  %1205 = zext i1 %1204 to i8
  store i8 %1205, i8* %34, align 1
  %1206 = lshr i64 %1188, 63
  %1207 = trunc i64 %1206 to i8
  store i8 %1207, i8* %37, align 1
  %1208 = xor i64 %1206, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %1209 = xor i64 %1206, %1187
  %1210 = add nuw nsw i64 %1208, %1209
  %1211 = icmp eq i64 %1210, 2
  %1212 = zext i1 %1211 to i8
  store i8 %1212, i8* %43, align 1
  %1213 = add i64 %1186, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 36)
  %1214 = add i64 %1180, 30
  store i64 %1214, i64* %3, align 8
  %1215 = inttoptr i64 %1213 to i32*
  %1216 = load i32, i32* %1215, align 4
  %1217 = zext i32 %1216 to i64
  store i64 %1217, i64* %RSI.i4246, align 8
  %1218 = add i64 %1180, 34
  store i64 %1218, i64* %3, align 8
  %1219 = load i32, i32* %1169, align 4
  %1220 = sext i32 %1219 to i64
  %1221 = mul nsw i64 %1220, 380
  store i64 %1221, i64* %RCX.i4050.pre-phi, align 8
  %1222 = lshr i64 %1221, 63
  %1223 = load i64, i64* %RAX.i1555, align 8
  %1224 = add i64 %1221, %1223
  store i64 %1224, i64* %RAX.i1555, align 8
  %1225 = icmp ult i64 %1224, %1223
  %1226 = icmp ult i64 %1224, %1221
  %1227 = or i1 %1225, %1226
  %1228 = zext i1 %1227 to i8
  store i8 %1228, i8* %19, align 1
  %1229 = trunc i64 %1224 to i32
  %1230 = and i32 %1229, 255
  %1231 = tail call i32 @llvm.ctpop.i32(i32 %1230)
  %1232 = trunc i32 %1231 to i8
  %1233 = and i8 %1232, 1
  %1234 = xor i8 %1233, 1
  store i8 %1234, i8* %26, align 1
  %1235 = xor i64 %1221, %1223
  %1236 = xor i64 %1235, %1224
  %1237 = lshr i64 %1236, 4
  %1238 = trunc i64 %1237 to i8
  %1239 = and i8 %1238, 1
  store i8 %1239, i8* %31, align 1
  %1240 = icmp eq i64 %1224, 0
  %1241 = zext i1 %1240 to i8
  store i8 %1241, i8* %34, align 1
  %1242 = lshr i64 %1224, 63
  %1243 = trunc i64 %1242 to i8
  store i8 %1243, i8* %37, align 1
  %1244 = lshr i64 %1223, 63
  %1245 = xor i64 %1242, %1244
  %1246 = xor i64 %1242, %1222
  %1247 = add nuw nsw i64 %1245, %1246
  %1248 = icmp eq i64 %1247, 2
  %1249 = zext i1 %1248 to i8
  store i8 %1249, i8* %43, align 1
  %1250 = add i64 %1224, 36
  %1251 = add i64 %1180, 47
  store i64 %1251, i64* %3, align 8
  %1252 = inttoptr i64 %1250 to i32*
  %1253 = load i32, i32* %1252, align 4
  %1254 = sub i32 %1216, %1253
  %1255 = icmp ult i32 %1216, %1253
  %1256 = zext i1 %1255 to i8
  store i8 %1256, i8* %19, align 1
  %1257 = and i32 %1254, 255
  %1258 = tail call i32 @llvm.ctpop.i32(i32 %1257)
  %1259 = trunc i32 %1258 to i8
  %1260 = and i8 %1259, 1
  %1261 = xor i8 %1260, 1
  store i8 %1261, i8* %26, align 1
  %1262 = xor i32 %1253, %1216
  %1263 = xor i32 %1262, %1254
  %1264 = lshr i32 %1263, 4
  %1265 = trunc i32 %1264 to i8
  %1266 = and i8 %1265, 1
  store i8 %1266, i8* %31, align 1
  %1267 = icmp eq i32 %1254, 0
  %1268 = zext i1 %1267 to i8
  store i8 %1268, i8* %34, align 1
  %1269 = lshr i32 %1254, 31
  %1270 = trunc i32 %1269 to i8
  store i8 %1270, i8* %37, align 1
  %1271 = lshr i32 %1216, 31
  %1272 = lshr i32 %1253, 31
  %1273 = xor i32 %1272, %1271
  %1274 = xor i32 %1269, %1271
  %1275 = add nuw nsw i32 %1274, %1273
  %1276 = icmp eq i32 %1275, 2
  %1277 = zext i1 %1276 to i8
  store i8 %1277, i8* %43, align 1
  %1278 = icmp ne i8 %1270, 0
  %1279 = xor i1 %1278, %1276
  %.demorgan = or i1 %1267, %1279
  %.v446 = select i1 %.demorgan, i64 53, i64 159
  %1280 = add i64 %1180, %.v446
  store i64 %1280, i64* %3, align 8
  br i1 %.demorgan, label %block_41bf8d, label %block_.L_41bff7

block_41bf8d:                                     ; preds = %block_41bf58
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %1281 = load i64, i64* %RBP.i, align 8
  %1282 = add i64 %1281, -40
  %1283 = add i64 %1280, 14
  store i64 %1283, i64* %3, align 8
  %1284 = inttoptr i64 %1282 to i32*
  %1285 = load i32, i32* %1284, align 4
  %1286 = sext i32 %1285 to i64
  %1287 = mul nsw i64 %1286, 380
  store i64 %1287, i64* %RCX.i4050.pre-phi, align 8
  %1288 = lshr i64 %1287, 63
  %1289 = add i64 %1287, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %1289, i64* %RDX.i4244, align 8
  %1290 = icmp ult i64 %1289, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1291 = icmp ult i64 %1289, %1287
  %1292 = or i1 %1290, %1291
  %1293 = zext i1 %1292 to i8
  store i8 %1293, i8* %19, align 1
  %1294 = trunc i64 %1289 to i32
  %1295 = and i32 %1294, 252
  %1296 = tail call i32 @llvm.ctpop.i32(i32 %1295)
  %1297 = trunc i32 %1296 to i8
  %1298 = and i8 %1297, 1
  %1299 = xor i8 %1298, 1
  store i8 %1299, i8* %26, align 1
  %1300 = xor i64 %1287, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1301 = xor i64 %1300, %1289
  %1302 = lshr i64 %1301, 4
  %1303 = trunc i64 %1302 to i8
  %1304 = and i8 %1303, 1
  store i8 %1304, i8* %31, align 1
  %1305 = icmp eq i64 %1289, 0
  %1306 = zext i1 %1305 to i8
  store i8 %1306, i8* %34, align 1
  %1307 = lshr i64 %1289, 63
  %1308 = trunc i64 %1307 to i8
  store i8 %1308, i8* %37, align 1
  %1309 = xor i64 %1307, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %1310 = xor i64 %1307, %1288
  %1311 = add nuw nsw i64 %1309, %1310
  %1312 = icmp eq i64 %1311, 2
  %1313 = zext i1 %1312 to i8
  store i8 %1313, i8* %43, align 1
  %1314 = add i64 %1287, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 36)
  %1315 = add i64 %1280, 30
  store i64 %1315, i64* %3, align 8
  %1316 = inttoptr i64 %1314 to i32*
  %1317 = load i32, i32* %1316, align 4
  %1318 = zext i32 %1317 to i64
  store i64 %1318, i64* %RSI.i4246, align 8
  %1319 = add i64 %1281, -48
  %1320 = add i64 %1280, 34
  store i64 %1320, i64* %3, align 8
  %1321 = inttoptr i64 %1319 to i32*
  %1322 = load i32, i32* %1321, align 4
  %1323 = sext i32 %1322 to i64
  %1324 = mul nsw i64 %1323, 380
  store i64 %1324, i64* %RCX.i4050.pre-phi, align 8
  %1325 = lshr i64 %1324, 63
  %1326 = load i64, i64* %RAX.i1555, align 8
  %1327 = add i64 %1324, %1326
  store i64 %1327, i64* %RAX.i1555, align 8
  %1328 = icmp ult i64 %1327, %1326
  %1329 = icmp ult i64 %1327, %1324
  %1330 = or i1 %1328, %1329
  %1331 = zext i1 %1330 to i8
  store i8 %1331, i8* %19, align 1
  %1332 = trunc i64 %1327 to i32
  %1333 = and i32 %1332, 255
  %1334 = tail call i32 @llvm.ctpop.i32(i32 %1333)
  %1335 = trunc i32 %1334 to i8
  %1336 = and i8 %1335, 1
  %1337 = xor i8 %1336, 1
  store i8 %1337, i8* %26, align 1
  %1338 = xor i64 %1324, %1326
  %1339 = xor i64 %1338, %1327
  %1340 = lshr i64 %1339, 4
  %1341 = trunc i64 %1340 to i8
  %1342 = and i8 %1341, 1
  store i8 %1342, i8* %31, align 1
  %1343 = icmp eq i64 %1327, 0
  %1344 = zext i1 %1343 to i8
  store i8 %1344, i8* %34, align 1
  %1345 = lshr i64 %1327, 63
  %1346 = trunc i64 %1345 to i8
  store i8 %1346, i8* %37, align 1
  %1347 = lshr i64 %1326, 63
  %1348 = xor i64 %1345, %1347
  %1349 = xor i64 %1345, %1325
  %1350 = add nuw nsw i64 %1348, %1349
  %1351 = icmp eq i64 %1350, 2
  %1352 = zext i1 %1351 to i8
  store i8 %1352, i8* %43, align 1
  %1353 = add i64 %1327, 36
  %1354 = add i64 %1280, 47
  store i64 %1354, i64* %3, align 8
  %1355 = inttoptr i64 %1353 to i32*
  %1356 = load i32, i32* %1355, align 4
  %1357 = sub i32 %1317, %1356
  %1358 = icmp ult i32 %1317, %1356
  %1359 = zext i1 %1358 to i8
  store i8 %1359, i8* %19, align 1
  %1360 = and i32 %1357, 255
  %1361 = tail call i32 @llvm.ctpop.i32(i32 %1360)
  %1362 = trunc i32 %1361 to i8
  %1363 = and i8 %1362, 1
  %1364 = xor i8 %1363, 1
  store i8 %1364, i8* %26, align 1
  %1365 = xor i32 %1356, %1317
  %1366 = xor i32 %1365, %1357
  %1367 = lshr i32 %1366, 4
  %1368 = trunc i32 %1367 to i8
  %1369 = and i8 %1368, 1
  store i8 %1369, i8* %31, align 1
  %1370 = icmp eq i32 %1357, 0
  %1371 = zext i1 %1370 to i8
  store i8 %1371, i8* %34, align 1
  %1372 = lshr i32 %1357, 31
  %1373 = trunc i32 %1372 to i8
  store i8 %1373, i8* %37, align 1
  %1374 = lshr i32 %1317, 31
  %1375 = lshr i32 %1356, 31
  %1376 = xor i32 %1375, %1374
  %1377 = xor i32 %1372, %1374
  %1378 = add nuw nsw i32 %1377, %1376
  %1379 = icmp eq i32 %1378, 2
  %1380 = zext i1 %1379 to i8
  store i8 %1380, i8* %43, align 1
  %.v448 = select i1 %1370, i64 53, i64 278
  %1381 = add i64 %1280, %.v448
  store i64 %1381, i64* %3, align 8
  br i1 %1370, label %block_41bfc2, label %block_.L_41c0a3

block_41bfc2:                                     ; preds = %block_41bf8d
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %1382 = load i64, i64* %RBP.i, align 8
  %1383 = add i64 %1382, -40
  %1384 = add i64 %1381, 14
  store i64 %1384, i64* %3, align 8
  %1385 = inttoptr i64 %1383 to i32*
  %1386 = load i32, i32* %1385, align 4
  %1387 = sext i32 %1386 to i64
  %1388 = mul nsw i64 %1387, 380
  store i64 %1388, i64* %RCX.i4050.pre-phi, align 8
  %1389 = lshr i64 %1388, 63
  %1390 = add i64 %1388, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %1390, i64* %RDX.i4244, align 8
  %1391 = icmp ult i64 %1390, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1392 = icmp ult i64 %1390, %1388
  %1393 = or i1 %1391, %1392
  %1394 = zext i1 %1393 to i8
  store i8 %1394, i8* %19, align 1
  %1395 = trunc i64 %1390 to i32
  %1396 = and i32 %1395, 252
  %1397 = tail call i32 @llvm.ctpop.i32(i32 %1396)
  %1398 = trunc i32 %1397 to i8
  %1399 = and i8 %1398, 1
  %1400 = xor i8 %1399, 1
  store i8 %1400, i8* %26, align 1
  %1401 = xor i64 %1388, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1402 = xor i64 %1401, %1390
  %1403 = lshr i64 %1402, 4
  %1404 = trunc i64 %1403 to i8
  %1405 = and i8 %1404, 1
  store i8 %1405, i8* %31, align 1
  %1406 = icmp eq i64 %1390, 0
  %1407 = zext i1 %1406 to i8
  store i8 %1407, i8* %34, align 1
  %1408 = lshr i64 %1390, 63
  %1409 = trunc i64 %1408 to i8
  store i8 %1409, i8* %37, align 1
  %1410 = xor i64 %1408, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %1411 = xor i64 %1408, %1389
  %1412 = add nuw nsw i64 %1410, %1411
  %1413 = icmp eq i64 %1412, 2
  %1414 = zext i1 %1413 to i8
  store i8 %1414, i8* %43, align 1
  %1415 = add i64 %1388, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 16)
  %1416 = add i64 %1381, 30
  store i64 %1416, i64* %3, align 8
  %1417 = inttoptr i64 %1415 to i32*
  %1418 = load i32, i32* %1417, align 4
  %1419 = zext i32 %1418 to i64
  store i64 %1419, i64* %RSI.i4246, align 8
  %1420 = add i64 %1382, -48
  %1421 = add i64 %1381, 34
  store i64 %1421, i64* %3, align 8
  %1422 = inttoptr i64 %1420 to i32*
  %1423 = load i32, i32* %1422, align 4
  %1424 = sext i32 %1423 to i64
  %1425 = mul nsw i64 %1424, 380
  store i64 %1425, i64* %RCX.i4050.pre-phi, align 8
  %1426 = lshr i64 %1425, 63
  %1427 = load i64, i64* %RAX.i1555, align 8
  %1428 = add i64 %1425, %1427
  store i64 %1428, i64* %RAX.i1555, align 8
  %1429 = icmp ult i64 %1428, %1427
  %1430 = icmp ult i64 %1428, %1425
  %1431 = or i1 %1429, %1430
  %1432 = zext i1 %1431 to i8
  store i8 %1432, i8* %19, align 1
  %1433 = trunc i64 %1428 to i32
  %1434 = and i32 %1433, 255
  %1435 = tail call i32 @llvm.ctpop.i32(i32 %1434)
  %1436 = trunc i32 %1435 to i8
  %1437 = and i8 %1436, 1
  %1438 = xor i8 %1437, 1
  store i8 %1438, i8* %26, align 1
  %1439 = xor i64 %1425, %1427
  %1440 = xor i64 %1439, %1428
  %1441 = lshr i64 %1440, 4
  %1442 = trunc i64 %1441 to i8
  %1443 = and i8 %1442, 1
  store i8 %1443, i8* %31, align 1
  %1444 = icmp eq i64 %1428, 0
  %1445 = zext i1 %1444 to i8
  store i8 %1445, i8* %34, align 1
  %1446 = lshr i64 %1428, 63
  %1447 = trunc i64 %1446 to i8
  store i8 %1447, i8* %37, align 1
  %1448 = lshr i64 %1427, 63
  %1449 = xor i64 %1446, %1448
  %1450 = xor i64 %1446, %1426
  %1451 = add nuw nsw i64 %1449, %1450
  %1452 = icmp eq i64 %1451, 2
  %1453 = zext i1 %1452 to i8
  store i8 %1453, i8* %43, align 1
  %1454 = add i64 %1428, 16
  %1455 = add i64 %1381, 47
  store i64 %1455, i64* %3, align 8
  %1456 = inttoptr i64 %1454 to i32*
  %1457 = load i32, i32* %1456, align 4
  %1458 = sub i32 %1418, %1457
  %1459 = icmp ult i32 %1418, %1457
  %1460 = zext i1 %1459 to i8
  store i8 %1460, i8* %19, align 1
  %1461 = and i32 %1458, 255
  %1462 = tail call i32 @llvm.ctpop.i32(i32 %1461)
  %1463 = trunc i32 %1462 to i8
  %1464 = and i8 %1463, 1
  %1465 = xor i8 %1464, 1
  store i8 %1465, i8* %26, align 1
  %1466 = xor i32 %1457, %1418
  %1467 = xor i32 %1466, %1458
  %1468 = lshr i32 %1467, 4
  %1469 = trunc i32 %1468 to i8
  %1470 = and i8 %1469, 1
  store i8 %1470, i8* %31, align 1
  %1471 = icmp eq i32 %1458, 0
  %1472 = zext i1 %1471 to i8
  store i8 %1472, i8* %34, align 1
  %1473 = lshr i32 %1458, 31
  %1474 = trunc i32 %1473 to i8
  store i8 %1474, i8* %37, align 1
  %1475 = lshr i32 %1418, 31
  %1476 = lshr i32 %1457, 31
  %1477 = xor i32 %1476, %1475
  %1478 = xor i32 %1473, %1475
  %1479 = add nuw nsw i32 %1478, %1477
  %1480 = icmp eq i32 %1479, 2
  %1481 = zext i1 %1480 to i8
  store i8 %1481, i8* %43, align 1
  %1482 = icmp ne i8 %1474, 0
  %1483 = xor i1 %1482, %1480
  %.v449 = select i1 %1483, i64 53, i64 225
  %1484 = add i64 %1381, %.v449
  store i64 %1484, i64* %3, align 8
  br i1 %1483, label %block_.L_41bff7, label %block_.L_41c0a3

block_.L_41bff7:                                  ; preds = %block_41bf58, %block_41bfc2, %block_.L_41bf0c
  %1485 = phi i64 [ %1484, %block_41bfc2 ], [ %1280, %block_41bf58 ], [ %1180, %block_.L_41bf0c ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RCX.i4050.pre-phi, align 8
  %1486 = load i64, i64* %RBP.i, align 8
  %1487 = add i64 %1486, -40
  %1488 = add i64 %1485, 24
  store i64 %1488, i64* %3, align 8
  %1489 = inttoptr i64 %1487 to i32*
  %1490 = load i32, i32* %1489, align 4
  %1491 = sext i32 %1490 to i64
  %1492 = mul nsw i64 %1491, 380
  store i64 %1492, i64* %RDX.i4244, align 8
  %1493 = lshr i64 %1492, 63
  %1494 = add i64 %1492, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %1494, i64* %RCX.i4050.pre-phi, align 8
  %1495 = icmp ult i64 %1494, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1496 = icmp ult i64 %1494, %1492
  %1497 = or i1 %1495, %1496
  %1498 = zext i1 %1497 to i8
  store i8 %1498, i8* %19, align 1
  %1499 = trunc i64 %1494 to i32
  %1500 = and i32 %1499, 252
  %1501 = tail call i32 @llvm.ctpop.i32(i32 %1500)
  %1502 = trunc i32 %1501 to i8
  %1503 = and i8 %1502, 1
  %1504 = xor i8 %1503, 1
  store i8 %1504, i8* %26, align 1
  %1505 = xor i64 %1492, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1506 = xor i64 %1505, %1494
  %1507 = lshr i64 %1506, 4
  %1508 = trunc i64 %1507 to i8
  %1509 = and i8 %1508, 1
  store i8 %1509, i8* %31, align 1
  %1510 = icmp eq i64 %1494, 0
  %1511 = zext i1 %1510 to i8
  store i8 %1511, i8* %34, align 1
  %1512 = lshr i64 %1494, 63
  %1513 = trunc i64 %1512 to i8
  store i8 %1513, i8* %37, align 1
  %1514 = xor i64 %1512, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %1515 = xor i64 %1512, %1493
  %1516 = add nuw nsw i64 %1514, %1515
  %1517 = icmp eq i64 %1516, 2
  %1518 = zext i1 %1517 to i8
  store i8 %1518, i8* %43, align 1
  %1519 = add i64 %1492, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 12)
  %1520 = add i64 %1485, 37
  store i64 %1520, i64* %3, align 8
  %1521 = inttoptr i64 %1519 to i32*
  %1522 = load i32, i32* %1521, align 4
  %1523 = zext i32 %1522 to i64
  store i64 %1523, i64* %RSI.i4246, align 8
  %1524 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %1524, i64* %RCX.i4050.pre-phi, align 8
  %1525 = add i64 %1486, -44
  %1526 = add i64 %1485, 49
  store i64 %1526, i64* %3, align 8
  %1527 = inttoptr i64 %1525 to i32*
  %1528 = load i32, i32* %1527, align 4
  %1529 = sext i32 %1528 to i64
  %1530 = mul nsw i64 %1529, 76
  store i64 %1530, i64* %RDX.i4244, align 8
  %1531 = lshr i64 %1530, 63
  %1532 = load i64, i64* %RAX.i1555, align 8
  %1533 = add i64 %1530, %1532
  store i64 %1533, i64* %RAX.i1555, align 8
  %1534 = icmp ult i64 %1533, %1532
  %1535 = icmp ult i64 %1533, %1530
  %1536 = or i1 %1534, %1535
  %1537 = zext i1 %1536 to i8
  store i8 %1537, i8* %19, align 1
  %1538 = trunc i64 %1533 to i32
  %1539 = and i32 %1538, 255
  %1540 = tail call i32 @llvm.ctpop.i32(i32 %1539)
  %1541 = trunc i32 %1540 to i8
  %1542 = and i8 %1541, 1
  %1543 = xor i8 %1542, 1
  store i8 %1543, i8* %26, align 1
  %1544 = xor i64 %1530, %1532
  %1545 = xor i64 %1544, %1533
  %1546 = lshr i64 %1545, 4
  %1547 = trunc i64 %1546 to i8
  %1548 = and i8 %1547, 1
  store i8 %1548, i8* %31, align 1
  %1549 = icmp eq i64 %1533, 0
  %1550 = zext i1 %1549 to i8
  store i8 %1550, i8* %34, align 1
  %1551 = lshr i64 %1533, 63
  %1552 = trunc i64 %1551 to i8
  store i8 %1552, i8* %37, align 1
  %1553 = lshr i64 %1532, 63
  %1554 = xor i64 %1551, %1553
  %1555 = xor i64 %1551, %1531
  %1556 = add nuw nsw i64 %1554, %1555
  %1557 = icmp eq i64 %1556, 2
  %1558 = zext i1 %1557 to i8
  store i8 %1558, i8* %43, align 1
  %1559 = add i64 %1533, 4
  %1560 = add i64 %1485, 60
  store i64 %1560, i64* %3, align 8
  %1561 = inttoptr i64 %1559 to i32*
  %1562 = load i32, i32* %1561, align 4
  %1563 = sext i32 %1562 to i64
  %1564 = mul nsw i64 %1563, 104
  store i64 %1564, i64* %RAX.i1555, align 8
  %1565 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %1566 = add i64 %1564, %1565
  store i64 %1566, i64* %RCX.i4050.pre-phi, align 8
  %1567 = add i64 %1566, 84
  %1568 = load i32, i32* %ESI.i2400, align 4
  %1569 = add i64 %1485, 70
  store i64 %1569, i64* %3, align 8
  %1570 = inttoptr i64 %1567 to i32*
  store i32 %1568, i32* %1570, align 4
  %1571 = load i64, i64* %3, align 8
  %1572 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %19, align 1
  %1573 = and i32 %1572, 255
  %1574 = tail call i32 @llvm.ctpop.i32(i32 %1573)
  %1575 = trunc i32 %1574 to i8
  %1576 = and i8 %1575, 1
  %1577 = xor i8 %1576, 1
  store i8 %1577, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %1578 = icmp eq i32 %1572, 0
  %1579 = zext i1 %1578 to i8
  store i8 %1579, i8* %34, align 1
  %1580 = lshr i32 %1572, 31
  %1581 = trunc i32 %1580 to i8
  store i8 %1581, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v447 = select i1 %1578, i64 14, i64 19
  %1582 = add i64 %1571, %.v447
  store i64 %1582, i64* %3, align 8
  br i1 %1578, label %block_41c04b, label %block_.L_41c050

block_41c04b:                                     ; preds = %block_.L_41bff7
  %1583 = add i64 %1582, 83
  store i64 %1583, i64* %3, align 8
  br label %block_.L_41c09e

block_.L_41c050:                                  ; preds = %block_.L_41bff7
  store i64 ptrtoint (%G__0x57aeeb_type* @G__0x57aeeb to i64), i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %1584 = load i64, i64* %RBP.i, align 8
  %1585 = add i64 %1584, -24
  %1586 = add i64 %1582, 23
  store i64 %1586, i64* %3, align 8
  %1587 = inttoptr i64 %1585 to i32*
  %1588 = load i32, i32* %1587, align 4
  %1589 = zext i32 %1588 to i64
  store i64 %1589, i64* %RSI.i4246, align 8
  %1590 = add i64 %1584, -44
  %1591 = add i64 %1582, 26
  store i64 %1591, i64* %3, align 8
  %1592 = inttoptr i64 %1590 to i32*
  %1593 = load i32, i32* %1592, align 4
  %1594 = zext i32 %1593 to i64
  store i64 %1594, i64* %RDX.i4244, align 8
  %1595 = add i64 %1584, -40
  %1596 = add i64 %1582, 30
  store i64 %1596, i64* %3, align 8
  %1597 = inttoptr i64 %1595 to i32*
  %1598 = load i32, i32* %1597, align 4
  %1599 = sext i32 %1598 to i64
  %1600 = mul nsw i64 %1599, 380
  store i64 %1600, i64* %RCX.i4050.pre-phi, align 8
  %1601 = lshr i64 %1600, 63
  %1602 = add i64 %1600, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %1602, i64* %R8.i3778, align 8
  %1603 = icmp ult i64 %1602, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1604 = icmp ult i64 %1602, %1600
  %1605 = or i1 %1603, %1604
  %1606 = zext i1 %1605 to i8
  store i8 %1606, i8* %19, align 1
  %1607 = trunc i64 %1602 to i32
  %1608 = and i32 %1607, 252
  %1609 = tail call i32 @llvm.ctpop.i32(i32 %1608)
  %1610 = trunc i32 %1609 to i8
  %1611 = and i8 %1610, 1
  %1612 = xor i8 %1611, 1
  store i8 %1612, i8* %26, align 1
  %1613 = xor i64 %1600, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %1614 = xor i64 %1613, %1602
  %1615 = lshr i64 %1614, 4
  %1616 = trunc i64 %1615 to i8
  %1617 = and i8 %1616, 1
  store i8 %1617, i8* %31, align 1
  %1618 = icmp eq i64 %1602, 0
  %1619 = zext i1 %1618 to i8
  store i8 %1619, i8* %34, align 1
  %1620 = lshr i64 %1602, 63
  %1621 = trunc i64 %1620 to i8
  store i8 %1621, i8* %37, align 1
  %1622 = xor i64 %1620, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %1623 = xor i64 %1620, %1601
  %1624 = add nuw nsw i64 %1622, %1623
  %1625 = icmp eq i64 %1624, 2
  %1626 = zext i1 %1625 to i8
  store i8 %1626, i8* %43, align 1
  %1627 = add i64 %1600, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 12)
  %1628 = add i64 %1582, 47
  store i64 %1628, i64* %3, align 8
  %1629 = inttoptr i64 %1627 to i32*
  %1630 = load i32, i32* %1629, align 4
  %1631 = zext i32 %1630 to i64
  store i64 %1631, i64* %RCX.i4050.pre-phi, align 8
  %1632 = add i64 %1582, 51
  store i64 %1632, i64* %3, align 8
  %1633 = load i32, i32* %1597, align 4
  %1634 = sext i32 %1633 to i64
  %1635 = mul nsw i64 %1634, 380
  store i64 %1635, i64* %R8.i3778, align 8
  %1636 = lshr i64 %1635, 63
  %1637 = load i64, i64* %RAX.i1555, align 8
  %1638 = add i64 %1635, %1637
  store i64 %1638, i64* %RAX.i1555, align 8
  %1639 = icmp ult i64 %1638, %1637
  %1640 = icmp ult i64 %1638, %1635
  %1641 = or i1 %1639, %1640
  %1642 = zext i1 %1641 to i8
  store i8 %1642, i8* %19, align 1
  %1643 = trunc i64 %1638 to i32
  %1644 = and i32 %1643, 255
  %1645 = tail call i32 @llvm.ctpop.i32(i32 %1644)
  %1646 = trunc i32 %1645 to i8
  %1647 = and i8 %1646, 1
  %1648 = xor i8 %1647, 1
  store i8 %1648, i8* %26, align 1
  %1649 = xor i64 %1635, %1637
  %1650 = xor i64 %1649, %1638
  %1651 = lshr i64 %1650, 4
  %1652 = trunc i64 %1651 to i8
  %1653 = and i8 %1652, 1
  store i8 %1653, i8* %31, align 1
  %1654 = icmp eq i64 %1638, 0
  %1655 = zext i1 %1654 to i8
  store i8 %1655, i8* %34, align 1
  %1656 = lshr i64 %1638, 63
  %1657 = trunc i64 %1656 to i8
  store i8 %1657, i8* %37, align 1
  %1658 = lshr i64 %1637, 63
  %1659 = xor i64 %1656, %1658
  %1660 = xor i64 %1656, %1636
  %1661 = add nuw nsw i64 %1659, %1660
  %1662 = icmp eq i64 %1661, 2
  %1663 = zext i1 %1662 to i8
  store i8 %1663, i8* %43, align 1
  %1664 = add i64 %1638, 36
  %1665 = add i64 %1582, 65
  store i64 %1665, i64* %3, align 8
  %1666 = inttoptr i64 %1664 to i32*
  %1667 = load i32, i32* %1666, align 4
  %1668 = zext i32 %1667 to i64
  store i64 %1668, i64* %R8.i3778, align 8
  store i8 0, i8* %AL.i3758, align 1
  %1669 = add i64 %1582, 220512
  %1670 = add i64 %1582, 72
  %1671 = load i64, i64* %6, align 8
  %1672 = add i64 %1671, -8
  %1673 = inttoptr i64 %1672 to i64*
  store i64 %1670, i64* %1673, align 8
  store i64 %1672, i64* %6, align 8
  store i64 %1669, i64* %3, align 8
  %call2_41c093 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1669, %struct.Memory* %MEMORY.9)
  %1674 = load i64, i64* %RBP.i, align 8
  %1675 = add i64 %1674, -876
  %1676 = load i32, i32* %EAX.i4253, align 4
  %1677 = load i64, i64* %3, align 8
  %1678 = add i64 %1677, 6
  store i64 %1678, i64* %3, align 8
  %1679 = inttoptr i64 %1675 to i32*
  store i32 %1676, i32* %1679, align 4
  %.pre309 = load i64, i64* %3, align 8
  br label %block_.L_41c09e

block_.L_41c09e:                                  ; preds = %block_.L_41c050, %block_41c04b
  %1680 = phi i64 [ %.pre309, %block_.L_41c050 ], [ %1583, %block_41c04b ]
  %MEMORY.14 = phi %struct.Memory* [ %call2_41c093, %block_.L_41c050 ], [ %MEMORY.9, %block_41c04b ]
  %1681 = add i64 %1680, 5
  store i64 %1681, i64* %3, align 8
  br label %block_.L_41c0a3

block_.L_41c0a3:                                  ; preds = %block_41bf8d, %block_41bfc2, %block_.L_41c09e
  %1682 = phi i64 [ %1681, %block_.L_41c09e ], [ %1381, %block_41bf8d ], [ %1484, %block_41bfc2 ]
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.14, %block_.L_41c09e ], [ %MEMORY.9, %block_41bf8d ], [ %MEMORY.9, %block_41bfc2 ]
  %1683 = add i64 %1682, 5
  store i64 %1683, i64* %3, align 8
  br label %block_.L_41c0ad

block_.L_41c0ad:                                  ; preds = %block_.L_41beac, %block_41be85, %block_41be4c, %block_41be70, %block_41be37, %block_.L_41c0a3
  %1684 = phi i64 [ %978, %block_.L_41beac ], [ %1683, %block_.L_41c0a3 ], [ %765, %block_41be37 ], [ %890, %block_41be85 ], [ %846, %block_41be70 ], [ %827, %block_41be4c ]
  %.sink167 = phi i64 [ 453, %block_.L_41beac ], [ 5, %block_.L_41c0a3 ], [ 5, %block_41be37 ], [ 518, %block_41be85 ], [ 518, %block_41be70 ], [ 518, %block_41be4c ]
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.9, %block_.L_41beac ], [ %MEMORY.15, %block_.L_41c0a3 ], [ %MEMORY.9, %block_41be37 ], [ %MEMORY.9, %block_41be85 ], [ %MEMORY.9, %block_41be70 ], [ %MEMORY.9, %block_41be4c ]
  %1685 = add i64 %1684, %.sink167
  %1686 = load i64, i64* %RBP.i, align 8
  %1687 = add i64 %1686, -24
  %1688 = add i64 %1685, 3
  store i64 %1688, i64* %3, align 8
  %1689 = inttoptr i64 %1687 to i32*
  %1690 = load i32, i32* %1689, align 4
  %1691 = add i32 %1690, 1
  %1692 = zext i32 %1691 to i64
  store i64 %1692, i64* %RAX.i1555, align 8
  %1693 = icmp eq i32 %1690, -1
  %1694 = icmp eq i32 %1691, 0
  %1695 = or i1 %1693, %1694
  %1696 = zext i1 %1695 to i8
  store i8 %1696, i8* %19, align 1
  %1697 = and i32 %1691, 255
  %1698 = tail call i32 @llvm.ctpop.i32(i32 %1697)
  %1699 = trunc i32 %1698 to i8
  %1700 = and i8 %1699, 1
  %1701 = xor i8 %1700, 1
  store i8 %1701, i8* %26, align 1
  %1702 = xor i32 %1691, %1690
  %1703 = lshr i32 %1702, 4
  %1704 = trunc i32 %1703 to i8
  %1705 = and i8 %1704, 1
  store i8 %1705, i8* %31, align 1
  %1706 = zext i1 %1694 to i8
  store i8 %1706, i8* %34, align 1
  %1707 = lshr i32 %1691, 31
  %1708 = trunc i32 %1707 to i8
  store i8 %1708, i8* %37, align 1
  %1709 = lshr i32 %1690, 31
  %1710 = xor i32 %1707, %1709
  %1711 = add nuw nsw i32 %1710, %1707
  %1712 = icmp eq i32 %1711, 2
  %1713 = zext i1 %1712 to i8
  store i8 %1713, i8* %43, align 1
  %1714 = add i64 %1685, 9
  store i64 %1714, i64* %3, align 8
  store i32 %1691, i32* %1689, align 4
  %1715 = load i64, i64* %3, align 8
  %1716 = add i64 %1715, -652
  store i64 %1716, i64* %3, align 8
  br label %block_.L_41be2a

block_.L_41c0bb:                                  ; preds = %block_.L_41be2a
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RSI.i4246, align 8
  store i64 ptrtoint (%G__0xb45500_type* @G__0xb45500 to i64), i64* %RDX.i4244, align 8
  store i64 0, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i64 0, i64* %RCX.i4050.pre-phi, align 8
  %1717 = add i64 %739, 139861
  %1718 = add i64 %739, 34
  %1719 = load i64, i64* %6, align 8
  %1720 = add i64 %1719, -8
  %1721 = inttoptr i64 %1720 to i64*
  store i64 %1718, i64* %1721, align 8
  store i64 %1720, i64* %6, align 8
  store i64 %1717, i64* %3, align 8
  %call2_41c0d8 = tail call %struct.Memory* @sub_43e310.find_half_and_false_eyes(%struct.State* nonnull %0, i64 %1717, %struct.Memory* %MEMORY.9)
  %1722 = load i64, i64* %3, align 8
  store i64 1, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RSI.i4246, align 8
  store i64 ptrtoint (%G__0xb45500_type* @G__0xb45500 to i64), i64* %RDX.i4244, align 8
  store i64 0, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i64 0, i64* %RCX.i4050.pre-phi, align 8
  %1723 = add i64 %1722, 139827
  %1724 = add i64 %1722, 34
  %1725 = load i64, i64* %6, align 8
  %1726 = add i64 %1725, -8
  %1727 = inttoptr i64 %1726 to i64*
  store i64 %1724, i64* %1727, align 8
  store i64 %1726, i64* %6, align 8
  store i64 %1723, i64* %3, align 8
  %call2_41c0fa = tail call %struct.Memory* @sub_43e310.find_half_and_false_eyes(%struct.State* nonnull %0, i64 %1723, %struct.Memory* %call2_41c0d8)
  %1728 = load i64, i64* %3, align 8
  %1729 = add i64 %1728, 567473
  %1730 = add i64 %1728, 5
  %1731 = load i64, i64* %6, align 8
  %1732 = add i64 %1731, -8
  %1733 = inttoptr i64 %1732 to i64*
  store i64 %1730, i64* %1733, align 8
  store i64 %1732, i64* %6, align 8
  store i64 %1729, i64* %3, align 8
  %call2_41c0ff = tail call %struct.Memory* @sub_4a69b0.modify_eye_spaces(%struct.State* nonnull %0, i64 %1729, %struct.Memory* %call2_41c0fa)
  %1734 = load i64, i64* %RBP.i, align 8
  %1735 = add i64 %1734, -24
  %1736 = load i64, i64* %3, align 8
  %1737 = add i64 %1736, 7
  store i64 %1737, i64* %3, align 8
  %1738 = inttoptr i64 %1735 to i32*
  store i32 21, i32* %1738, align 4
  %R9.i3505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D.i3497 = bitcast %union.anon* %1739 to i32*
  %1740 = getelementptr inbounds %union.anon, %union.anon* %1739, i64 0, i32 0
  %1741 = bitcast i64* %6 to i32**
  %.pre223 = load i64, i64* %3, align 8
  br label %block_.L_41c10b

block_.L_41c10b:                                  ; preds = %block_.L_41c371, %block_.L_41c0bb
  %1742 = phi i64 [ %.pre223, %block_.L_41c0bb ], [ %2524, %block_.L_41c371 ]
  %MEMORY.18 = phi %struct.Memory* [ %call2_41c0ff, %block_.L_41c0bb ], [ %MEMORY.23, %block_.L_41c371 ]
  %1743 = load i64, i64* %RBP.i, align 8
  %1744 = add i64 %1743, -24
  %1745 = add i64 %1742, 7
  store i64 %1745, i64* %3, align 8
  %1746 = inttoptr i64 %1744 to i32*
  %1747 = load i32, i32* %1746, align 4
  %1748 = add i32 %1747, -400
  %1749 = icmp ult i32 %1747, 400
  %1750 = zext i1 %1749 to i8
  store i8 %1750, i8* %19, align 1
  %1751 = and i32 %1748, 255
  %1752 = tail call i32 @llvm.ctpop.i32(i32 %1751)
  %1753 = trunc i32 %1752 to i8
  %1754 = and i8 %1753, 1
  %1755 = xor i8 %1754, 1
  store i8 %1755, i8* %26, align 1
  %1756 = xor i32 %1747, 16
  %1757 = xor i32 %1756, %1748
  %1758 = lshr i32 %1757, 4
  %1759 = trunc i32 %1758 to i8
  %1760 = and i8 %1759, 1
  store i8 %1760, i8* %31, align 1
  %1761 = icmp eq i32 %1748, 0
  %1762 = zext i1 %1761 to i8
  store i8 %1762, i8* %34, align 1
  %1763 = lshr i32 %1748, 31
  %1764 = trunc i32 %1763 to i8
  store i8 %1764, i8* %37, align 1
  %1765 = lshr i32 %1747, 31
  %1766 = xor i32 %1763, %1765
  %1767 = add nuw nsw i32 %1766, %1765
  %1768 = icmp eq i32 %1767, 2
  %1769 = zext i1 %1768 to i8
  store i8 %1769, i8* %43, align 1
  %1770 = icmp ne i8 %1764, 0
  %1771 = xor i1 %1770, %1768
  %.v325 = select i1 %1771, i64 13, i64 628
  %1772 = add i64 %1742, %.v325
  store i64 %1772, i64* %3, align 8
  br i1 %1771, label %block_41c118, label %block_.L_41c37f

block_41c118:                                     ; preds = %block_.L_41c10b
  %1773 = add i64 %1772, 4
  store i64 %1773, i64* %3, align 8
  %1774 = load i32, i32* %1746, align 4
  %1775 = sext i32 %1774 to i64
  store i64 %1775, i64* %RAX.i1555, align 8
  %1776 = add nsw i64 %1775, 12099168
  %1777 = add i64 %1772, 12
  store i64 %1777, i64* %3, align 8
  %1778 = inttoptr i64 %1776 to i8*
  %1779 = load i8, i8* %1778, align 1
  %1780 = zext i8 %1779 to i64
  store i64 %1780, i64* %RCX.i4050.pre-phi, align 8
  %1781 = zext i8 %1779 to i32
  %1782 = add nsw i32 %1781, -3
  %1783 = icmp ult i8 %1779, 3
  %1784 = zext i1 %1783 to i8
  store i8 %1784, i8* %19, align 1
  %1785 = and i32 %1782, 255
  %1786 = tail call i32 @llvm.ctpop.i32(i32 %1785)
  %1787 = trunc i32 %1786 to i8
  %1788 = and i8 %1787, 1
  %1789 = xor i8 %1788, 1
  store i8 %1789, i8* %26, align 1
  %1790 = xor i32 %1782, %1781
  %1791 = lshr i32 %1790, 4
  %1792 = trunc i32 %1791 to i8
  %1793 = and i8 %1792, 1
  store i8 %1793, i8* %31, align 1
  %1794 = icmp eq i32 %1782, 0
  %1795 = zext i1 %1794 to i8
  store i8 %1795, i8* %34, align 1
  %1796 = lshr i32 %1782, 31
  %1797 = trunc i32 %1796 to i8
  store i8 %1797, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v431 = select i1 %1794, i64 21, i64 26
  %1798 = add i64 %1772, %.v431
  store i64 %1798, i64* %3, align 8
  br i1 %1794, label %block_41c12d, label %block_.L_41c132

block_41c12d:                                     ; preds = %block_41c118
  %1799 = add i64 %1798, 580
  br label %block_.L_41c371

block_.L_41c132:                                  ; preds = %block_41c118
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  %1800 = add i64 %1798, 14
  store i64 %1800, i64* %3, align 8
  %1801 = load i32, i32* %1746, align 4
  %1802 = sext i32 %1801 to i64
  %1803 = mul nsw i64 %1802, 36
  store i64 %1803, i64* %RCX.i4050.pre-phi, align 8
  %1804 = lshr i64 %1803, 63
  %1805 = add i64 %1803, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %1805, i64* %RAX.i1555, align 8
  %1806 = icmp ult i64 %1805, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %1807 = icmp ult i64 %1805, %1803
  %1808 = or i1 %1806, %1807
  %1809 = zext i1 %1808 to i8
  store i8 %1809, i8* %19, align 1
  %1810 = trunc i64 %1805 to i32
  %1811 = and i32 %1810, 252
  %1812 = tail call i32 @llvm.ctpop.i32(i32 %1811)
  %1813 = trunc i32 %1812 to i8
  %1814 = and i8 %1813, 1
  %1815 = xor i8 %1814, 1
  store i8 %1815, i8* %26, align 1
  %1816 = xor i64 %1803, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %1817 = xor i64 %1816, %1805
  %1818 = lshr i64 %1817, 4
  %1819 = trunc i64 %1818 to i8
  %1820 = and i8 %1819, 1
  store i8 %1820, i8* %31, align 1
  %1821 = icmp eq i64 %1805, 0
  %1822 = zext i1 %1821 to i8
  store i8 %1822, i8* %34, align 1
  %1823 = lshr i64 %1805, 63
  %1824 = trunc i64 %1823 to i8
  store i8 %1824, i8* %37, align 1
  %1825 = xor i64 %1823, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %1826 = xor i64 %1823, %1804
  %1827 = add nuw nsw i64 %1825, %1826
  %1828 = icmp eq i64 %1827, 2
  %1829 = zext i1 %1828 to i8
  store i8 %1829, i8* %43, align 1
  %1830 = inttoptr i64 %1805 to i32*
  %1831 = add i64 %1798, 24
  store i64 %1831, i64* %3, align 8
  %1832 = load i32, i32* %1830, align 4
  %1833 = add i32 %1832, -5
  %1834 = icmp ult i32 %1832, 5
  %1835 = zext i1 %1834 to i8
  store i8 %1835, i8* %19, align 1
  %1836 = and i32 %1833, 255
  %1837 = tail call i32 @llvm.ctpop.i32(i32 %1836)
  %1838 = trunc i32 %1837 to i8
  %1839 = and i8 %1838, 1
  %1840 = xor i8 %1839, 1
  store i8 %1840, i8* %26, align 1
  %1841 = xor i32 %1833, %1832
  %1842 = lshr i32 %1841, 4
  %1843 = trunc i32 %1842 to i8
  %1844 = and i8 %1843, 1
  store i8 %1844, i8* %31, align 1
  %1845 = icmp eq i32 %1833, 0
  %1846 = zext i1 %1845 to i8
  store i8 %1846, i8* %34, align 1
  %1847 = lshr i32 %1833, 31
  %1848 = trunc i32 %1847 to i8
  store i8 %1848, i8* %37, align 1
  %1849 = lshr i32 %1832, 31
  %1850 = xor i32 %1847, %1849
  %1851 = add nuw nsw i32 %1850, %1849
  %1852 = icmp eq i32 %1851, 2
  %1853 = zext i1 %1852 to i8
  store i8 %1853, i8* %43, align 1
  %.v432 = select i1 %1845, i64 30, i64 285
  %1854 = add i64 %1798, %.v432
  store i64 %1854, i64* %3, align 8
  br i1 %1845, label %block_41c150, label %block_.L_41c24f

block_41c150:                                     ; preds = %block_.L_41c132
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  %1855 = load i64, i64* %RBP.i, align 8
  %1856 = add i64 %1855, -24
  %1857 = add i64 %1854, 14
  store i64 %1857, i64* %3, align 8
  %1858 = inttoptr i64 %1856 to i32*
  %1859 = load i32, i32* %1858, align 4
  %1860 = sext i32 %1859 to i64
  %1861 = mul nsw i64 %1860, 36
  store i64 %1861, i64* %RCX.i4050.pre-phi, align 8
  %1862 = lshr i64 %1861, 63
  %1863 = add i64 %1861, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %1863, i64* %RAX.i1555, align 8
  %1864 = icmp ult i64 %1863, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %1865 = icmp ult i64 %1863, %1861
  %1866 = or i1 %1864, %1865
  %1867 = zext i1 %1866 to i8
  store i8 %1867, i8* %19, align 1
  %1868 = trunc i64 %1863 to i32
  %1869 = and i32 %1868, 252
  %1870 = tail call i32 @llvm.ctpop.i32(i32 %1869)
  %1871 = trunc i32 %1870 to i8
  %1872 = and i8 %1871, 1
  %1873 = xor i8 %1872, 1
  store i8 %1873, i8* %26, align 1
  %1874 = xor i64 %1861, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %1875 = xor i64 %1874, %1863
  %1876 = lshr i64 %1875, 4
  %1877 = trunc i64 %1876 to i8
  %1878 = and i8 %1877, 1
  store i8 %1878, i8* %31, align 1
  %1879 = icmp eq i64 %1863, 0
  %1880 = zext i1 %1879 to i8
  store i8 %1880, i8* %34, align 1
  %1881 = lshr i64 %1863, 63
  %1882 = trunc i64 %1881 to i8
  store i8 %1882, i8* %37, align 1
  %1883 = xor i64 %1881, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %1884 = xor i64 %1881, %1862
  %1885 = add nuw nsw i64 %1883, %1884
  %1886 = icmp eq i64 %1885, 2
  %1887 = zext i1 %1886 to i8
  store i8 %1887, i8* %43, align 1
  %1888 = add i64 %1861, add (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 12)
  %1889 = add i64 %1854, 24
  store i64 %1889, i64* %3, align 8
  %1890 = inttoptr i64 %1888 to i32*
  %1891 = load i32, i32* %1890, align 4
  %1892 = zext i32 %1891 to i64
  store i64 %1892, i64* %RDX.i4244, align 8
  %1893 = add i64 %1854, 27
  store i64 %1893, i64* %3, align 8
  %1894 = load i32, i32* %1858, align 4
  %1895 = sub i32 %1891, %1894
  %1896 = icmp ult i32 %1891, %1894
  %1897 = zext i1 %1896 to i8
  store i8 %1897, i8* %19, align 1
  %1898 = and i32 %1895, 255
  %1899 = tail call i32 @llvm.ctpop.i32(i32 %1898)
  %1900 = trunc i32 %1899 to i8
  %1901 = and i8 %1900, 1
  %1902 = xor i8 %1901, 1
  store i8 %1902, i8* %26, align 1
  %1903 = xor i32 %1894, %1891
  %1904 = xor i32 %1903, %1895
  %1905 = lshr i32 %1904, 4
  %1906 = trunc i32 %1905 to i8
  %1907 = and i8 %1906, 1
  store i8 %1907, i8* %31, align 1
  %1908 = icmp eq i32 %1895, 0
  %1909 = zext i1 %1908 to i8
  store i8 %1909, i8* %34, align 1
  %1910 = lshr i32 %1895, 31
  %1911 = trunc i32 %1910 to i8
  store i8 %1911, i8* %37, align 1
  %1912 = lshr i32 %1891, 31
  %1913 = lshr i32 %1894, 31
  %1914 = xor i32 %1913, %1912
  %1915 = xor i32 %1910, %1912
  %1916 = add nuw nsw i32 %1915, %1914
  %1917 = icmp eq i32 %1916, 2
  %1918 = zext i1 %1917 to i8
  store i8 %1918, i8* %43, align 1
  %.v436 = select i1 %1908, i64 33, i64 255
  %1919 = add i64 %1854, %.v436
  store i64 %1919, i64* %3, align 8
  br i1 %1908, label %block_41c171, label %block_.L_41c24f

block_41c171:                                     ; preds = %block_41c150
  %1920 = load i64, i64* %RBP.i, align 8
  %1921 = add i64 %1920, -56
  store i64 %1921, i64* %RSI.i4246, align 8
  %1922 = add i64 %1920, -60
  store i64 %1922, i64* %RDX.i4244, align 8
  %1923 = add i64 %1920, -64
  store i64 %1923, i64* %RCX.i4050.pre-phi, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %R8.i3778, align 8
  store i64 ptrtoint (%G__0xb45500_type* @G__0xb45500 to i64), i64* %R9.i3505, align 8
  store i64 1, i64* %RAX.i1555, align 8
  %1924 = add i64 %1920, -24
  %1925 = add i64 %1919, 40
  store i64 %1925, i64* %3, align 8
  %1926 = inttoptr i64 %1924 to i32*
  %1927 = load i32, i32* %1926, align 4
  %1928 = zext i32 %1927 to i64
  store i64 %1928, i64* %RDI.i4254, align 8
  %1929 = add i64 %1920, -12
  %1930 = add i64 %1919, 44
  store i64 %1930, i64* %3, align 8
  %1931 = inttoptr i64 %1929 to i32*
  %1932 = load i32, i32* %1931, align 4
  %1933 = zext i32 %1932 to i64
  store i64 %1933, i64* %1740, align 8
  %1934 = load i32*, i32** %1741, align 8
  %1935 = add i64 %1919, 51
  store i64 %1935, i64* %3, align 8
  store i32 1, i32* %1934, align 4
  %1936 = load i64, i64* %6, align 8
  %1937 = add i64 %1936, 8
  %1938 = load i32, i32* %R10D.i3497, align 4
  %1939 = load i64, i64* %3, align 8
  %1940 = add i64 %1939, 5
  store i64 %1940, i64* %3, align 8
  %1941 = inttoptr i64 %1937 to i32*
  store i32 %1938, i32* %1941, align 4
  %1942 = load i64, i64* %RBP.i, align 8
  %1943 = add i64 %1942, -880
  %1944 = load i32, i32* %EAX.i4253, align 4
  %1945 = load i64, i64* %3, align 8
  %1946 = add i64 %1945, 6
  store i64 %1946, i64* %3, align 8
  %1947 = inttoptr i64 %1943 to i32*
  store i32 %1944, i32* %1947, align 4
  %1948 = load i64, i64* %3, align 8
  %1949 = add i64 %1948, 120561
  %1950 = add i64 %1948, 5
  %1951 = load i64, i64* %6, align 8
  %1952 = add i64 %1951, -8
  %1953 = inttoptr i64 %1952 to i64*
  store i64 %1950, i64* %1953, align 8
  store i64 %1952, i64* %6, align 8
  store i64 %1949, i64* %3, align 8
  %call2_41c1af = tail call %struct.Memory* @sub_4398a0.compute_eyes(%struct.State* nonnull %0, i64 %1949, %struct.Memory* %MEMORY.18)
  %1954 = load i64, i64* %3, align 8
  %1955 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %1956 = and i32 %1955, 2
  %1957 = zext i32 %1956 to i64
  store i64 %1957, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  %1958 = tail call i32 @llvm.ctpop.i32(i32 %1956)
  %1959 = trunc i32 %1958 to i8
  %1960 = xor i8 %1959, 1
  store i8 %1960, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit321 = lshr exact i32 %1956, 1
  %1961 = trunc i32 %.lobit321 to i8
  %1962 = xor i8 %1961, 1
  store i8 %1962, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %1963 = icmp eq i8 %1962, 0
  %.v437 = select i1 %1963, i64 24, i64 19
  %1964 = add i64 %1954, %.v437
  store i64 %1964, i64* %3, align 8
  br i1 %1963, label %block_.L_41c1cc, label %block_41c1c7

block_41c1c7:                                     ; preds = %block_41c171
  %1965 = add i64 %1964, 55
  store i64 %1965, i64* %3, align 8
  br label %block_.L_41c1fe

block_.L_41c1cc:                                  ; preds = %block_41c171
  %1966 = load i64, i64* %RBP.i, align 8
  %1967 = add i64 %1966, -56
  store i64 %1967, i64* %RDI.i4254, align 8
  %1968 = add i64 %1966, -24
  %1969 = add i64 %1964, 7
  store i64 %1969, i64* %3, align 8
  %1970 = inttoptr i64 %1968 to i32*
  %1971 = load i32, i32* %1970, align 4
  %1972 = zext i32 %1971 to i64
  store i64 %1972, i64* %RSI.i4246, align 8
  %1973 = add i64 %1966, -884
  %1974 = add i64 %1964, 13
  store i64 %1974, i64* %3, align 8
  %1975 = inttoptr i64 %1973 to i32*
  store i32 %1971, i32* %1975, align 4
  %1976 = load i64, i64* %3, align 8
  %1977 = add i64 %1976, 129335
  %1978 = add i64 %1976, 5
  %1979 = load i64, i64* %6, align 8
  %1980 = add i64 %1979, -8
  %1981 = inttoptr i64 %1980 to i64*
  store i64 %1978, i64* %1981, align 8
  store i64 %1980, i64* %6, align 8
  store i64 %1977, i64* %3, align 8
  %call2_41c1d9 = tail call %struct.Memory* @sub_43bb10.eyevalue_to_string(%struct.State* nonnull %0, i64 %1977, %struct.Memory* %MEMORY.18)
  %1982 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x57af1a_type* @G__0x57af1a to i64), i64* %RDI.i4254, align 8
  %1983 = load i64, i64* %RBP.i, align 8
  %1984 = add i64 %1983, -884
  %1985 = add i64 %1982, 16
  store i64 %1985, i64* %3, align 8
  %1986 = inttoptr i64 %1984 to i32*
  %1987 = load i32, i32* %1986, align 4
  %1988 = zext i32 %1987 to i64
  store i64 %1988, i64* %RSI.i4246, align 8
  %1989 = load i64, i64* %RAX.i1555, align 8
  store i64 %1989, i64* %RDX.i4244, align 8
  store i8 0, i8* %AL.i3758, align 1
  %1990 = add i64 %1982, 220114
  %1991 = add i64 %1982, 26
  %1992 = load i64, i64* %6, align 8
  %1993 = add i64 %1992, -8
  %1994 = inttoptr i64 %1993 to i64*
  store i64 %1991, i64* %1994, align 8
  store i64 %1993, i64* %6, align 8
  store i64 %1990, i64* %3, align 8
  %call2_41c1f3 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %1990, %struct.Memory* %MEMORY.18)
  %1995 = load i64, i64* %RBP.i, align 8
  %1996 = add i64 %1995, -888
  %1997 = load i32, i32* %EAX.i4253, align 4
  %1998 = load i64, i64* %3, align 8
  %1999 = add i64 %1998, 6
  store i64 %1999, i64* %3, align 8
  %2000 = inttoptr i64 %1996 to i32*
  store i32 %1997, i32* %2000, align 4
  %.pre302 = load i64, i64* %3, align 8
  br label %block_.L_41c1fe

block_.L_41c1fe:                                  ; preds = %block_.L_41c1cc, %block_41c1c7
  %2001 = phi i64 [ %.pre302, %block_.L_41c1cc ], [ %1965, %block_41c1c7 ]
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  %2002 = load i64, i64* %RBP.i, align 8
  %2003 = add i64 %2002, -24
  %2004 = add i64 %2001, 14
  store i64 %2004, i64* %3, align 8
  %2005 = inttoptr i64 %2003 to i32*
  %2006 = load i32, i32* %2005, align 4
  %2007 = sext i32 %2006 to i64
  %2008 = mul nsw i64 %2007, 36
  store i64 %2008, i64* %RCX.i4050.pre-phi, align 8
  %2009 = lshr i64 %2008, 63
  %2010 = add i64 %2008, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %2010, i64* %RDX.i4244, align 8
  %2011 = icmp ult i64 %2010, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %2012 = icmp ult i64 %2010, %2008
  %2013 = or i1 %2011, %2012
  %2014 = zext i1 %2013 to i8
  store i8 %2014, i8* %19, align 1
  %2015 = trunc i64 %2010 to i32
  %2016 = and i32 %2015, 252
  %2017 = tail call i32 @llvm.ctpop.i32(i32 %2016)
  %2018 = trunc i32 %2017 to i8
  %2019 = and i8 %2018, 1
  %2020 = xor i8 %2019, 1
  store i8 %2020, i8* %26, align 1
  %2021 = xor i64 %2008, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %2022 = xor i64 %2021, %2010
  %2023 = lshr i64 %2022, 4
  %2024 = trunc i64 %2023 to i8
  %2025 = and i8 %2024, 1
  store i8 %2025, i8* %31, align 1
  %2026 = icmp eq i64 %2010, 0
  %2027 = zext i1 %2026 to i8
  store i8 %2027, i8* %34, align 1
  %2028 = lshr i64 %2010, 63
  %2029 = trunc i64 %2028 to i8
  store i8 %2029, i8* %37, align 1
  %2030 = xor i64 %2028, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %2031 = xor i64 %2028, %2009
  %2032 = add nuw nsw i64 %2030, %2031
  %2033 = icmp eq i64 %2032, 2
  %2034 = zext i1 %2033 to i8
  store i8 %2034, i8* %43, align 1
  %2035 = add i64 %2002, -56
  %2036 = add i64 %2001, 27
  store i64 %2036, i64* %3, align 8
  %2037 = inttoptr i64 %2035 to i32*
  %2038 = load i32, i32* %2037, align 4
  %2039 = zext i32 %2038 to i64
  store i64 %2039, i64* %RSI.i4246, align 8
  %2040 = add i64 %2008, add (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 16)
  %2041 = add i64 %2001, 30
  store i64 %2041, i64* %3, align 8
  %2042 = inttoptr i64 %2040 to i32*
  store i32 %2038, i32* %2042, align 4
  %2043 = load i64, i64* %RBP.i, align 8
  %2044 = add i64 %2043, -60
  %2045 = load i64, i64* %3, align 8
  %2046 = add i64 %2045, 3
  store i64 %2046, i64* %3, align 8
  %2047 = inttoptr i64 %2044 to i32*
  %2048 = load i32, i32* %2047, align 4
  %2049 = zext i32 %2048 to i64
  store i64 %2049, i64* %RSI.i4246, align 8
  %2050 = add i64 %2043, -24
  %2051 = add i64 %2045, 7
  store i64 %2051, i64* %3, align 8
  %2052 = inttoptr i64 %2050 to i32*
  %2053 = load i32, i32* %2052, align 4
  %2054 = sext i32 %2053 to i64
  %2055 = mul nsw i64 %2054, 36
  store i64 %2055, i64* %RCX.i4050.pre-phi, align 8
  %2056 = lshr i64 %2055, 63
  %2057 = load i64, i64* %RAX.i1555, align 8
  %2058 = add i64 %2055, %2057
  store i64 %2058, i64* %RDX.i4244, align 8
  %2059 = icmp ult i64 %2058, %2057
  %2060 = icmp ult i64 %2058, %2055
  %2061 = or i1 %2059, %2060
  %2062 = zext i1 %2061 to i8
  store i8 %2062, i8* %19, align 1
  %2063 = trunc i64 %2058 to i32
  %2064 = and i32 %2063, 255
  %2065 = tail call i32 @llvm.ctpop.i32(i32 %2064)
  %2066 = trunc i32 %2065 to i8
  %2067 = and i8 %2066, 1
  %2068 = xor i8 %2067, 1
  store i8 %2068, i8* %26, align 1
  %2069 = xor i64 %2055, %2057
  %2070 = xor i64 %2069, %2058
  %2071 = lshr i64 %2070, 4
  %2072 = trunc i64 %2071 to i8
  %2073 = and i8 %2072, 1
  store i8 %2073, i8* %31, align 1
  %2074 = icmp eq i64 %2058, 0
  %2075 = zext i1 %2074 to i8
  store i8 %2075, i8* %34, align 1
  %2076 = lshr i64 %2058, 63
  %2077 = trunc i64 %2076 to i8
  store i8 %2077, i8* %37, align 1
  %2078 = lshr i64 %2057, 63
  %2079 = xor i64 %2076, %2078
  %2080 = xor i64 %2076, %2056
  %2081 = add nuw nsw i64 %2079, %2080
  %2082 = icmp eq i64 %2081, 2
  %2083 = zext i1 %2082 to i8
  store i8 %2083, i8* %43, align 1
  %2084 = add i64 %2058, 20
  %2085 = add i64 %2045, 20
  store i64 %2085, i64* %3, align 8
  %2086 = inttoptr i64 %2084 to i32*
  store i32 %2048, i32* %2086, align 4
  %2087 = load i64, i64* %RBP.i, align 8
  %2088 = add i64 %2087, -64
  %2089 = load i64, i64* %3, align 8
  %2090 = add i64 %2089, 3
  store i64 %2090, i64* %3, align 8
  %2091 = inttoptr i64 %2088 to i32*
  %2092 = load i32, i32* %2091, align 4
  %2093 = zext i32 %2092 to i64
  store i64 %2093, i64* %RSI.i4246, align 8
  %2094 = add i64 %2087, -24
  %2095 = add i64 %2089, 7
  store i64 %2095, i64* %3, align 8
  %2096 = inttoptr i64 %2094 to i32*
  %2097 = load i32, i32* %2096, align 4
  %2098 = sext i32 %2097 to i64
  %2099 = mul nsw i64 %2098, 36
  store i64 %2099, i64* %RCX.i4050.pre-phi, align 8
  %2100 = lshr i64 %2099, 63
  %2101 = load i64, i64* %RAX.i1555, align 8
  %2102 = add i64 %2099, %2101
  store i64 %2102, i64* %RDX.i4244, align 8
  %2103 = icmp ult i64 %2102, %2101
  %2104 = icmp ult i64 %2102, %2099
  %2105 = or i1 %2103, %2104
  %2106 = zext i1 %2105 to i8
  store i8 %2106, i8* %19, align 1
  %2107 = trunc i64 %2102 to i32
  %2108 = and i32 %2107, 255
  %2109 = tail call i32 @llvm.ctpop.i32(i32 %2108)
  %2110 = trunc i32 %2109 to i8
  %2111 = and i8 %2110, 1
  %2112 = xor i8 %2111, 1
  store i8 %2112, i8* %26, align 1
  %2113 = xor i64 %2099, %2101
  %2114 = xor i64 %2113, %2102
  %2115 = lshr i64 %2114, 4
  %2116 = trunc i64 %2115 to i8
  %2117 = and i8 %2116, 1
  store i8 %2117, i8* %31, align 1
  %2118 = icmp eq i64 %2102, 0
  %2119 = zext i1 %2118 to i8
  store i8 %2119, i8* %34, align 1
  %2120 = lshr i64 %2102, 63
  %2121 = trunc i64 %2120 to i8
  store i8 %2121, i8* %37, align 1
  %2122 = lshr i64 %2101, 63
  %2123 = xor i64 %2120, %2122
  %2124 = xor i64 %2120, %2100
  %2125 = add nuw nsw i64 %2123, %2124
  %2126 = icmp eq i64 %2125, 2
  %2127 = zext i1 %2126 to i8
  store i8 %2127, i8* %43, align 1
  %2128 = add i64 %2102, 24
  %2129 = add i64 %2089, 20
  store i64 %2129, i64* %3, align 8
  %2130 = inttoptr i64 %2128 to i32*
  store i32 %2092, i32* %2130, align 4
  %2131 = load i64, i64* %RBP.i, align 8
  %2132 = add i64 %2131, -24
  %2133 = load i64, i64* %3, align 8
  %2134 = add i64 %2133, 3
  store i64 %2134, i64* %3, align 8
  %2135 = inttoptr i64 %2132 to i32*
  %2136 = load i32, i32* %2135, align 4
  %2137 = zext i32 %2136 to i64
  store i64 %2137, i64* %RDI.i4254, align 8
  %2138 = load i64, i64* %RAX.i1555, align 8
  store i64 %2138, i64* %RSI.i4246, align 8
  %2139 = add i64 %2133, 119212
  %2140 = add i64 %2133, 11
  %2141 = load i64, i64* %6, align 8
  %2142 = add i64 %2141, -8
  %2143 = inttoptr i64 %2142 to i64*
  store i64 %2140, i64* %2143, align 8
  store i64 %2142, i64* %6, align 8
  store i64 %2139, i64* %3, align 8
  %call2_41c24a = tail call %struct.Memory* @sub_4393f0.propagate_eye(%struct.State* nonnull %0, i64 %2139, %struct.Memory* %MEMORY.18)
  %.pre303 = load i64, i64* %3, align 8
  br label %block_.L_41c24f

block_.L_41c24f:                                  ; preds = %block_41c150, %block_.L_41c132, %block_.L_41c1fe
  %2144 = phi i64 [ %1854, %block_.L_41c132 ], [ %1919, %block_41c150 ], [ %.pre303, %block_.L_41c1fe ]
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.18, %block_.L_41c132 ], [ %MEMORY.18, %block_41c150 ], [ %call2_41c24a, %block_.L_41c1fe ]
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  %2145 = load i64, i64* %RBP.i, align 8
  %2146 = add i64 %2145, -24
  %2147 = add i64 %2144, 14
  store i64 %2147, i64* %3, align 8
  %2148 = inttoptr i64 %2146 to i32*
  %2149 = load i32, i32* %2148, align 4
  %2150 = sext i32 %2149 to i64
  %2151 = mul nsw i64 %2150, 36
  store i64 %2151, i64* %RCX.i4050.pre-phi, align 8
  %2152 = lshr i64 %2151, 63
  %2153 = add i64 %2151, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %2153, i64* %RAX.i1555, align 8
  %2154 = icmp ult i64 %2153, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %2155 = icmp ult i64 %2153, %2151
  %2156 = or i1 %2154, %2155
  %2157 = zext i1 %2156 to i8
  store i8 %2157, i8* %19, align 1
  %2158 = trunc i64 %2153 to i32
  %2159 = and i32 %2158, 252
  %2160 = tail call i32 @llvm.ctpop.i32(i32 %2159)
  %2161 = trunc i32 %2160 to i8
  %2162 = and i8 %2161, 1
  %2163 = xor i8 %2162, 1
  store i8 %2163, i8* %26, align 1
  %2164 = xor i64 %2151, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %2165 = xor i64 %2164, %2153
  %2166 = lshr i64 %2165, 4
  %2167 = trunc i64 %2166 to i8
  %2168 = and i8 %2167, 1
  store i8 %2168, i8* %31, align 1
  %2169 = icmp eq i64 %2153, 0
  %2170 = zext i1 %2169 to i8
  store i8 %2170, i8* %34, align 1
  %2171 = lshr i64 %2153, 63
  %2172 = trunc i64 %2171 to i8
  store i8 %2172, i8* %37, align 1
  %2173 = xor i64 %2171, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %2174 = xor i64 %2171, %2152
  %2175 = add nuw nsw i64 %2173, %2174
  %2176 = icmp eq i64 %2175, 2
  %2177 = zext i1 %2176 to i8
  store i8 %2177, i8* %43, align 1
  %2178 = inttoptr i64 %2153 to i32*
  %2179 = add i64 %2144, 24
  store i64 %2179, i64* %3, align 8
  %2180 = load i32, i32* %2178, align 4
  %2181 = add i32 %2180, -4
  %2182 = icmp ult i32 %2180, 4
  %2183 = zext i1 %2182 to i8
  store i8 %2183, i8* %19, align 1
  %2184 = and i32 %2181, 255
  %2185 = tail call i32 @llvm.ctpop.i32(i32 %2184)
  %2186 = trunc i32 %2185 to i8
  %2187 = and i8 %2186, 1
  %2188 = xor i8 %2187, 1
  store i8 %2188, i8* %26, align 1
  %2189 = xor i32 %2181, %2180
  %2190 = lshr i32 %2189, 4
  %2191 = trunc i32 %2190 to i8
  %2192 = and i8 %2191, 1
  store i8 %2192, i8* %31, align 1
  %2193 = icmp eq i32 %2181, 0
  %2194 = zext i1 %2193 to i8
  store i8 %2194, i8* %34, align 1
  %2195 = lshr i32 %2181, 31
  %2196 = trunc i32 %2195 to i8
  store i8 %2196, i8* %37, align 1
  %2197 = lshr i32 %2180, 31
  %2198 = xor i32 %2195, %2197
  %2199 = add nuw nsw i32 %2198, %2197
  %2200 = icmp eq i32 %2199, 2
  %2201 = zext i1 %2200 to i8
  store i8 %2201, i8* %43, align 1
  %.v433 = select i1 %2193, i64 30, i64 285
  %2202 = add i64 %2144, %.v433
  store i64 %2202, i64* %3, align 8
  br i1 %2193, label %block_41c26d, label %block_.L_41c36c

block_41c26d:                                     ; preds = %block_.L_41c24f
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  %2203 = load i64, i64* %RBP.i, align 8
  %2204 = add i64 %2203, -24
  %2205 = add i64 %2202, 14
  store i64 %2205, i64* %3, align 8
  %2206 = inttoptr i64 %2204 to i32*
  %2207 = load i32, i32* %2206, align 4
  %2208 = sext i32 %2207 to i64
  %2209 = mul nsw i64 %2208, 36
  store i64 %2209, i64* %RCX.i4050.pre-phi, align 8
  %2210 = lshr i64 %2209, 63
  %2211 = add i64 %2209, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %2211, i64* %RAX.i1555, align 8
  %2212 = icmp ult i64 %2211, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %2213 = icmp ult i64 %2211, %2209
  %2214 = or i1 %2212, %2213
  %2215 = zext i1 %2214 to i8
  store i8 %2215, i8* %19, align 1
  %2216 = trunc i64 %2211 to i32
  %2217 = and i32 %2216, 252
  %2218 = tail call i32 @llvm.ctpop.i32(i32 %2217)
  %2219 = trunc i32 %2218 to i8
  %2220 = and i8 %2219, 1
  %2221 = xor i8 %2220, 1
  store i8 %2221, i8* %26, align 1
  %2222 = xor i64 %2209, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %2223 = xor i64 %2222, %2211
  %2224 = lshr i64 %2223, 4
  %2225 = trunc i64 %2224 to i8
  %2226 = and i8 %2225, 1
  store i8 %2226, i8* %31, align 1
  %2227 = icmp eq i64 %2211, 0
  %2228 = zext i1 %2227 to i8
  store i8 %2228, i8* %34, align 1
  %2229 = lshr i64 %2211, 63
  %2230 = trunc i64 %2229 to i8
  store i8 %2230, i8* %37, align 1
  %2231 = xor i64 %2229, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %2232 = xor i64 %2229, %2210
  %2233 = add nuw nsw i64 %2231, %2232
  %2234 = icmp eq i64 %2233, 2
  %2235 = zext i1 %2234 to i8
  store i8 %2235, i8* %43, align 1
  %2236 = add i64 %2209, add (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 12)
  %2237 = add i64 %2202, 24
  store i64 %2237, i64* %3, align 8
  %2238 = inttoptr i64 %2236 to i32*
  %2239 = load i32, i32* %2238, align 4
  %2240 = zext i32 %2239 to i64
  store i64 %2240, i64* %RDX.i4244, align 8
  %2241 = add i64 %2202, 27
  store i64 %2241, i64* %3, align 8
  %2242 = load i32, i32* %2206, align 4
  %2243 = sub i32 %2239, %2242
  %2244 = icmp ult i32 %2239, %2242
  %2245 = zext i1 %2244 to i8
  store i8 %2245, i8* %19, align 1
  %2246 = and i32 %2243, 255
  %2247 = tail call i32 @llvm.ctpop.i32(i32 %2246)
  %2248 = trunc i32 %2247 to i8
  %2249 = and i8 %2248, 1
  %2250 = xor i8 %2249, 1
  store i8 %2250, i8* %26, align 1
  %2251 = xor i32 %2242, %2239
  %2252 = xor i32 %2251, %2243
  %2253 = lshr i32 %2252, 4
  %2254 = trunc i32 %2253 to i8
  %2255 = and i8 %2254, 1
  store i8 %2255, i8* %31, align 1
  %2256 = icmp eq i32 %2243, 0
  %2257 = zext i1 %2256 to i8
  store i8 %2257, i8* %34, align 1
  %2258 = lshr i32 %2243, 31
  %2259 = trunc i32 %2258 to i8
  store i8 %2259, i8* %37, align 1
  %2260 = lshr i32 %2239, 31
  %2261 = lshr i32 %2242, 31
  %2262 = xor i32 %2261, %2260
  %2263 = xor i32 %2258, %2260
  %2264 = add nuw nsw i32 %2263, %2262
  %2265 = icmp eq i32 %2264, 2
  %2266 = zext i1 %2265 to i8
  store i8 %2266, i8* %43, align 1
  %.v434 = select i1 %2256, i64 33, i64 255
  %2267 = add i64 %2202, %.v434
  store i64 %2267, i64* %3, align 8
  br i1 %2256, label %block_41c28e, label %block_.L_41c36c

block_41c28e:                                     ; preds = %block_41c26d
  %2268 = load i64, i64* %RBP.i, align 8
  %2269 = add i64 %2268, -72
  store i64 %2269, i64* %RSI.i4246, align 8
  %2270 = add i64 %2268, -76
  store i64 %2270, i64* %RDX.i4244, align 8
  %2271 = add i64 %2268, -80
  store i64 %2271, i64* %RCX.i4050.pre-phi, align 8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %R8.i3778, align 8
  store i64 ptrtoint (%G__0xb45500_type* @G__0xb45500 to i64), i64* %R9.i3505, align 8
  store i64 1, i64* %RAX.i1555, align 8
  %2272 = add i64 %2268, -24
  %2273 = add i64 %2267, 40
  store i64 %2273, i64* %3, align 8
  %2274 = inttoptr i64 %2272 to i32*
  %2275 = load i32, i32* %2274, align 4
  %2276 = zext i32 %2275 to i64
  store i64 %2276, i64* %RDI.i4254, align 8
  %2277 = add i64 %2268, -12
  %2278 = add i64 %2267, 44
  store i64 %2278, i64* %3, align 8
  %2279 = inttoptr i64 %2277 to i32*
  %2280 = load i32, i32* %2279, align 4
  %2281 = zext i32 %2280 to i64
  store i64 %2281, i64* %1740, align 8
  %2282 = load i32*, i32** %1741, align 8
  %2283 = add i64 %2267, 51
  store i64 %2283, i64* %3, align 8
  store i32 1, i32* %2282, align 4
  %2284 = load i64, i64* %6, align 8
  %2285 = add i64 %2284, 8
  %2286 = load i32, i32* %R10D.i3497, align 4
  %2287 = load i64, i64* %3, align 8
  %2288 = add i64 %2287, 5
  store i64 %2288, i64* %3, align 8
  %2289 = inttoptr i64 %2285 to i32*
  store i32 %2286, i32* %2289, align 4
  %2290 = load i64, i64* %RBP.i, align 8
  %2291 = add i64 %2290, -892
  %2292 = load i32, i32* %EAX.i4253, align 4
  %2293 = load i64, i64* %3, align 8
  %2294 = add i64 %2293, 6
  store i64 %2294, i64* %3, align 8
  %2295 = inttoptr i64 %2291 to i32*
  store i32 %2292, i32* %2295, align 4
  %2296 = load i64, i64* %3, align 8
  %2297 = add i64 %2296, 120276
  %2298 = add i64 %2296, 5
  %2299 = load i64, i64* %6, align 8
  %2300 = add i64 %2299, -8
  %2301 = inttoptr i64 %2300 to i64*
  store i64 %2298, i64* %2301, align 8
  store i64 %2300, i64* %6, align 8
  store i64 %2297, i64* %3, align 8
  %call2_41c2cc = tail call %struct.Memory* @sub_4398a0.compute_eyes(%struct.State* nonnull %0, i64 %2297, %struct.Memory* %MEMORY.20)
  %2302 = load i64, i64* %3, align 8
  %2303 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %2304 = and i32 %2303, 2
  %2305 = zext i32 %2304 to i64
  store i64 %2305, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  %2306 = tail call i32 @llvm.ctpop.i32(i32 %2304)
  %2307 = trunc i32 %2306 to i8
  %2308 = xor i8 %2307, 1
  store i8 %2308, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit322 = lshr exact i32 %2304, 1
  %2309 = trunc i32 %.lobit322 to i8
  %2310 = xor i8 %2309, 1
  store i8 %2310, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %2311 = icmp eq i8 %2310, 0
  %.v435 = select i1 %2311, i64 24, i64 19
  %2312 = add i64 %2302, %.v435
  store i64 %2312, i64* %3, align 8
  br i1 %2311, label %block_.L_41c2e9, label %block_41c2e4

block_41c2e4:                                     ; preds = %block_41c28e
  %2313 = add i64 %2312, 55
  store i64 %2313, i64* %3, align 8
  br label %block_.L_41c31b

block_.L_41c2e9:                                  ; preds = %block_41c28e
  %2314 = load i64, i64* %RBP.i, align 8
  %2315 = add i64 %2314, -72
  store i64 %2315, i64* %RDI.i4254, align 8
  %2316 = add i64 %2314, -24
  %2317 = add i64 %2312, 7
  store i64 %2317, i64* %3, align 8
  %2318 = inttoptr i64 %2316 to i32*
  %2319 = load i32, i32* %2318, align 4
  %2320 = zext i32 %2319 to i64
  store i64 %2320, i64* %RSI.i4246, align 8
  %2321 = add i64 %2314, -896
  %2322 = add i64 %2312, 13
  store i64 %2322, i64* %3, align 8
  %2323 = inttoptr i64 %2321 to i32*
  store i32 %2319, i32* %2323, align 4
  %2324 = load i64, i64* %3, align 8
  %2325 = add i64 %2324, 129050
  %2326 = add i64 %2324, 5
  %2327 = load i64, i64* %6, align 8
  %2328 = add i64 %2327, -8
  %2329 = inttoptr i64 %2328 to i64*
  store i64 %2326, i64* %2329, align 8
  store i64 %2328, i64* %6, align 8
  store i64 %2325, i64* %3, align 8
  %call2_41c2f6 = tail call %struct.Memory* @sub_43bb10.eyevalue_to_string(%struct.State* nonnull %0, i64 %2325, %struct.Memory* %call2_41c2cc)
  %2330 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x57af35_type* @G__0x57af35 to i64), i64* %RDI.i4254, align 8
  %2331 = load i64, i64* %RBP.i, align 8
  %2332 = add i64 %2331, -896
  %2333 = add i64 %2330, 16
  store i64 %2333, i64* %3, align 8
  %2334 = inttoptr i64 %2332 to i32*
  %2335 = load i32, i32* %2334, align 4
  %2336 = zext i32 %2335 to i64
  store i64 %2336, i64* %RSI.i4246, align 8
  %2337 = load i64, i64* %RAX.i1555, align 8
  store i64 %2337, i64* %RDX.i4244, align 8
  store i8 0, i8* %AL.i3758, align 1
  %2338 = add i64 %2330, 219829
  %2339 = add i64 %2330, 26
  %2340 = load i64, i64* %6, align 8
  %2341 = add i64 %2340, -8
  %2342 = inttoptr i64 %2341 to i64*
  store i64 %2339, i64* %2342, align 8
  store i64 %2341, i64* %6, align 8
  store i64 %2338, i64* %3, align 8
  %call2_41c310 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %2338, %struct.Memory* %call2_41c2f6)
  %2343 = load i64, i64* %RBP.i, align 8
  %2344 = add i64 %2343, -900
  %2345 = load i32, i32* %EAX.i4253, align 4
  %2346 = load i64, i64* %3, align 8
  %2347 = add i64 %2346, 6
  store i64 %2347, i64* %3, align 8
  %2348 = inttoptr i64 %2344 to i32*
  store i32 %2345, i32* %2348, align 4
  %.pre304 = load i64, i64* %3, align 8
  br label %block_.L_41c31b

block_.L_41c31b:                                  ; preds = %block_.L_41c2e9, %block_41c2e4
  %2349 = phi i64 [ %.pre304, %block_.L_41c2e9 ], [ %2313, %block_41c2e4 ]
  %MEMORY.21 = phi %struct.Memory* [ %call2_41c310, %block_.L_41c2e9 ], [ %call2_41c2cc, %block_41c2e4 ]
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  %2350 = load i64, i64* %RBP.i, align 8
  %2351 = add i64 %2350, -24
  %2352 = add i64 %2349, 14
  store i64 %2352, i64* %3, align 8
  %2353 = inttoptr i64 %2351 to i32*
  %2354 = load i32, i32* %2353, align 4
  %2355 = sext i32 %2354 to i64
  %2356 = mul nsw i64 %2355, 36
  store i64 %2356, i64* %RCX.i4050.pre-phi, align 8
  %2357 = lshr i64 %2356, 63
  %2358 = add i64 %2356, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %2358, i64* %RDX.i4244, align 8
  %2359 = icmp ult i64 %2358, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %2360 = icmp ult i64 %2358, %2356
  %2361 = or i1 %2359, %2360
  %2362 = zext i1 %2361 to i8
  store i8 %2362, i8* %19, align 1
  %2363 = trunc i64 %2358 to i32
  %2364 = and i32 %2363, 252
  %2365 = tail call i32 @llvm.ctpop.i32(i32 %2364)
  %2366 = trunc i32 %2365 to i8
  %2367 = and i8 %2366, 1
  %2368 = xor i8 %2367, 1
  store i8 %2368, i8* %26, align 1
  %2369 = xor i64 %2356, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %2370 = xor i64 %2369, %2358
  %2371 = lshr i64 %2370, 4
  %2372 = trunc i64 %2371 to i8
  %2373 = and i8 %2372, 1
  store i8 %2373, i8* %31, align 1
  %2374 = icmp eq i64 %2358, 0
  %2375 = zext i1 %2374 to i8
  store i8 %2375, i8* %34, align 1
  %2376 = lshr i64 %2358, 63
  %2377 = trunc i64 %2376 to i8
  store i8 %2377, i8* %37, align 1
  %2378 = xor i64 %2376, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %2379 = xor i64 %2376, %2357
  %2380 = add nuw nsw i64 %2378, %2379
  %2381 = icmp eq i64 %2380, 2
  %2382 = zext i1 %2381 to i8
  store i8 %2382, i8* %43, align 1
  %2383 = add i64 %2350, -72
  %2384 = add i64 %2349, 27
  store i64 %2384, i64* %3, align 8
  %2385 = inttoptr i64 %2383 to i32*
  %2386 = load i32, i32* %2385, align 4
  %2387 = zext i32 %2386 to i64
  store i64 %2387, i64* %RSI.i4246, align 8
  %2388 = add i64 %2356, add (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 16)
  %2389 = add i64 %2349, 30
  store i64 %2389, i64* %3, align 8
  %2390 = inttoptr i64 %2388 to i32*
  store i32 %2386, i32* %2390, align 4
  %2391 = load i64, i64* %RBP.i, align 8
  %2392 = add i64 %2391, -76
  %2393 = load i64, i64* %3, align 8
  %2394 = add i64 %2393, 3
  store i64 %2394, i64* %3, align 8
  %2395 = inttoptr i64 %2392 to i32*
  %2396 = load i32, i32* %2395, align 4
  %2397 = zext i32 %2396 to i64
  store i64 %2397, i64* %RSI.i4246, align 8
  %2398 = add i64 %2391, -24
  %2399 = add i64 %2393, 7
  store i64 %2399, i64* %3, align 8
  %2400 = inttoptr i64 %2398 to i32*
  %2401 = load i32, i32* %2400, align 4
  %2402 = sext i32 %2401 to i64
  %2403 = mul nsw i64 %2402, 36
  store i64 %2403, i64* %RCX.i4050.pre-phi, align 8
  %2404 = lshr i64 %2403, 63
  %2405 = load i64, i64* %RAX.i1555, align 8
  %2406 = add i64 %2403, %2405
  store i64 %2406, i64* %RDX.i4244, align 8
  %2407 = icmp ult i64 %2406, %2405
  %2408 = icmp ult i64 %2406, %2403
  %2409 = or i1 %2407, %2408
  %2410 = zext i1 %2409 to i8
  store i8 %2410, i8* %19, align 1
  %2411 = trunc i64 %2406 to i32
  %2412 = and i32 %2411, 255
  %2413 = tail call i32 @llvm.ctpop.i32(i32 %2412)
  %2414 = trunc i32 %2413 to i8
  %2415 = and i8 %2414, 1
  %2416 = xor i8 %2415, 1
  store i8 %2416, i8* %26, align 1
  %2417 = xor i64 %2403, %2405
  %2418 = xor i64 %2417, %2406
  %2419 = lshr i64 %2418, 4
  %2420 = trunc i64 %2419 to i8
  %2421 = and i8 %2420, 1
  store i8 %2421, i8* %31, align 1
  %2422 = icmp eq i64 %2406, 0
  %2423 = zext i1 %2422 to i8
  store i8 %2423, i8* %34, align 1
  %2424 = lshr i64 %2406, 63
  %2425 = trunc i64 %2424 to i8
  store i8 %2425, i8* %37, align 1
  %2426 = lshr i64 %2405, 63
  %2427 = xor i64 %2424, %2426
  %2428 = xor i64 %2424, %2404
  %2429 = add nuw nsw i64 %2427, %2428
  %2430 = icmp eq i64 %2429, 2
  %2431 = zext i1 %2430 to i8
  store i8 %2431, i8* %43, align 1
  %2432 = add i64 %2406, 20
  %2433 = add i64 %2393, 20
  store i64 %2433, i64* %3, align 8
  %2434 = inttoptr i64 %2432 to i32*
  store i32 %2396, i32* %2434, align 4
  %2435 = load i64, i64* %RBP.i, align 8
  %2436 = add i64 %2435, -80
  %2437 = load i64, i64* %3, align 8
  %2438 = add i64 %2437, 3
  store i64 %2438, i64* %3, align 8
  %2439 = inttoptr i64 %2436 to i32*
  %2440 = load i32, i32* %2439, align 4
  %2441 = zext i32 %2440 to i64
  store i64 %2441, i64* %RSI.i4246, align 8
  %2442 = add i64 %2435, -24
  %2443 = add i64 %2437, 7
  store i64 %2443, i64* %3, align 8
  %2444 = inttoptr i64 %2442 to i32*
  %2445 = load i32, i32* %2444, align 4
  %2446 = sext i32 %2445 to i64
  %2447 = mul nsw i64 %2446, 36
  store i64 %2447, i64* %RCX.i4050.pre-phi, align 8
  %2448 = lshr i64 %2447, 63
  %2449 = load i64, i64* %RAX.i1555, align 8
  %2450 = add i64 %2447, %2449
  store i64 %2450, i64* %RDX.i4244, align 8
  %2451 = icmp ult i64 %2450, %2449
  %2452 = icmp ult i64 %2450, %2447
  %2453 = or i1 %2451, %2452
  %2454 = zext i1 %2453 to i8
  store i8 %2454, i8* %19, align 1
  %2455 = trunc i64 %2450 to i32
  %2456 = and i32 %2455, 255
  %2457 = tail call i32 @llvm.ctpop.i32(i32 %2456)
  %2458 = trunc i32 %2457 to i8
  %2459 = and i8 %2458, 1
  %2460 = xor i8 %2459, 1
  store i8 %2460, i8* %26, align 1
  %2461 = xor i64 %2447, %2449
  %2462 = xor i64 %2461, %2450
  %2463 = lshr i64 %2462, 4
  %2464 = trunc i64 %2463 to i8
  %2465 = and i8 %2464, 1
  store i8 %2465, i8* %31, align 1
  %2466 = icmp eq i64 %2450, 0
  %2467 = zext i1 %2466 to i8
  store i8 %2467, i8* %34, align 1
  %2468 = lshr i64 %2450, 63
  %2469 = trunc i64 %2468 to i8
  store i8 %2469, i8* %37, align 1
  %2470 = lshr i64 %2449, 63
  %2471 = xor i64 %2468, %2470
  %2472 = xor i64 %2468, %2448
  %2473 = add nuw nsw i64 %2471, %2472
  %2474 = icmp eq i64 %2473, 2
  %2475 = zext i1 %2474 to i8
  store i8 %2475, i8* %43, align 1
  %2476 = add i64 %2450, 24
  %2477 = add i64 %2437, 20
  store i64 %2477, i64* %3, align 8
  %2478 = inttoptr i64 %2476 to i32*
  store i32 %2440, i32* %2478, align 4
  %2479 = load i64, i64* %RBP.i, align 8
  %2480 = add i64 %2479, -24
  %2481 = load i64, i64* %3, align 8
  %2482 = add i64 %2481, 3
  store i64 %2482, i64* %3, align 8
  %2483 = inttoptr i64 %2480 to i32*
  %2484 = load i32, i32* %2483, align 4
  %2485 = zext i32 %2484 to i64
  store i64 %2485, i64* %RDI.i4254, align 8
  %2486 = load i64, i64* %RAX.i1555, align 8
  store i64 %2486, i64* %RSI.i4246, align 8
  %2487 = add i64 %2481, 118927
  %2488 = add i64 %2481, 11
  %2489 = load i64, i64* %6, align 8
  %2490 = add i64 %2489, -8
  %2491 = inttoptr i64 %2490 to i64*
  store i64 %2488, i64* %2491, align 8
  store i64 %2490, i64* %6, align 8
  store i64 %2487, i64* %3, align 8
  %call2_41c367 = tail call %struct.Memory* @sub_4393f0.propagate_eye(%struct.State* nonnull %0, i64 %2487, %struct.Memory* %MEMORY.21)
  %.pre305 = load i64, i64* %3, align 8
  br label %block_.L_41c36c

block_.L_41c36c:                                  ; preds = %block_41c26d, %block_.L_41c24f, %block_.L_41c31b
  %2492 = phi i64 [ %2202, %block_.L_41c24f ], [ %2267, %block_41c26d ], [ %.pre305, %block_.L_41c31b ]
  %MEMORY.22 = phi %struct.Memory* [ %MEMORY.20, %block_.L_41c24f ], [ %MEMORY.20, %block_41c26d ], [ %call2_41c367, %block_.L_41c31b ]
  %2493 = add i64 %2492, 5
  store i64 %2493, i64* %3, align 8
  %.pre306 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41c371

block_.L_41c371:                                  ; preds = %block_.L_41c36c, %block_41c12d
  %2494 = phi i64 [ %1743, %block_41c12d ], [ %.pre306, %block_.L_41c36c ]
  %storemerge = phi i64 [ %1799, %block_41c12d ], [ %2493, %block_.L_41c36c ]
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.18, %block_41c12d ], [ %MEMORY.22, %block_.L_41c36c ]
  %2495 = add i64 %2494, -24
  %2496 = add i64 %storemerge, 3
  store i64 %2496, i64* %3, align 8
  %2497 = inttoptr i64 %2495 to i32*
  %2498 = load i32, i32* %2497, align 4
  %2499 = add i32 %2498, 1
  %2500 = zext i32 %2499 to i64
  store i64 %2500, i64* %RAX.i1555, align 8
  %2501 = icmp eq i32 %2498, -1
  %2502 = icmp eq i32 %2499, 0
  %2503 = or i1 %2501, %2502
  %2504 = zext i1 %2503 to i8
  store i8 %2504, i8* %19, align 1
  %2505 = and i32 %2499, 255
  %2506 = tail call i32 @llvm.ctpop.i32(i32 %2505)
  %2507 = trunc i32 %2506 to i8
  %2508 = and i8 %2507, 1
  %2509 = xor i8 %2508, 1
  store i8 %2509, i8* %26, align 1
  %2510 = xor i32 %2499, %2498
  %2511 = lshr i32 %2510, 4
  %2512 = trunc i32 %2511 to i8
  %2513 = and i8 %2512, 1
  store i8 %2513, i8* %31, align 1
  %2514 = zext i1 %2502 to i8
  store i8 %2514, i8* %34, align 1
  %2515 = lshr i32 %2499, 31
  %2516 = trunc i32 %2515 to i8
  store i8 %2516, i8* %37, align 1
  %2517 = lshr i32 %2498, 31
  %2518 = xor i32 %2515, %2517
  %2519 = add nuw nsw i32 %2518, %2515
  %2520 = icmp eq i32 %2519, 2
  %2521 = zext i1 %2520 to i8
  store i8 %2521, i8* %43, align 1
  %2522 = add i64 %storemerge, 9
  store i64 %2522, i64* %3, align 8
  store i32 %2499, i32* %2497, align 4
  %2523 = load i64, i64* %3, align 8
  %2524 = add i64 %2523, -623
  store i64 %2524, i64* %3, align 8
  br label %block_.L_41c10b

block_.L_41c37f:                                  ; preds = %block_.L_41c10b
  %2525 = add i64 %1772, 9841
  %2526 = add i64 %1772, 5
  %2527 = load i64, i64* %6, align 8
  %2528 = add i64 %2527, -8
  %2529 = inttoptr i64 %2528 to i64*
  store i64 %2526, i64* %2529, align 8
  store i64 %2528, i64* %6, align 8
  store i64 %2525, i64* %3, align 8
  %call2_41c37f = tail call %struct.Memory* @sub_41e9f0.analyze_false_eye_territory(%struct.State* nonnull %0, i64 %2525, %struct.Memory* %MEMORY.18)
  %2530 = load i64, i64* %RBP.i, align 8
  %2531 = add i64 %2530, -24
  %2532 = load i64, i64* %3, align 8
  %2533 = add i64 %2532, 7
  store i64 %2533, i64* %3, align 8
  %2534 = inttoptr i64 %2531 to i32*
  store i32 21, i32* %2534, align 4
  %.pre224 = load i64, i64* %3, align 8
  br label %block_.L_41c38b

block_.L_41c38b:                                  ; preds = %block_.L_41c801, %block_.L_41c37f
  %2535 = phi i64 [ %.pre224, %block_.L_41c37f ], [ %4045, %block_.L_41c801 ]
  %MEMORY.24 = phi %struct.Memory* [ %call2_41c37f, %block_.L_41c37f ], [ %MEMORY.33, %block_.L_41c801 ]
  %2536 = load i64, i64* %RBP.i, align 8
  %2537 = add i64 %2536, -24
  %2538 = add i64 %2535, 7
  store i64 %2538, i64* %3, align 8
  %2539 = inttoptr i64 %2537 to i32*
  %2540 = load i32, i32* %2539, align 4
  %2541 = add i32 %2540, -400
  %2542 = icmp ult i32 %2540, 400
  %2543 = zext i1 %2542 to i8
  store i8 %2543, i8* %19, align 1
  %2544 = and i32 %2541, 255
  %2545 = tail call i32 @llvm.ctpop.i32(i32 %2544)
  %2546 = trunc i32 %2545 to i8
  %2547 = and i8 %2546, 1
  %2548 = xor i8 %2547, 1
  store i8 %2548, i8* %26, align 1
  %2549 = xor i32 %2540, 16
  %2550 = xor i32 %2549, %2541
  %2551 = lshr i32 %2550, 4
  %2552 = trunc i32 %2551 to i8
  %2553 = and i8 %2552, 1
  store i8 %2553, i8* %31, align 1
  %2554 = icmp eq i32 %2541, 0
  %2555 = zext i1 %2554 to i8
  store i8 %2555, i8* %34, align 1
  %2556 = lshr i32 %2541, 31
  %2557 = trunc i32 %2556 to i8
  store i8 %2557, i8* %37, align 1
  %2558 = lshr i32 %2540, 31
  %2559 = xor i32 %2556, %2558
  %2560 = add nuw nsw i32 %2559, %2558
  %2561 = icmp eq i32 %2560, 2
  %2562 = zext i1 %2561 to i8
  store i8 %2562, i8* %43, align 1
  %2563 = icmp ne i8 %2557, 0
  %2564 = xor i1 %2563, %2561
  %.v326 = select i1 %2564, i64 13, i64 1156
  %2565 = add i64 %2535, %.v326
  store i64 %2565, i64* %3, align 8
  br i1 %2564, label %block_41c398, label %block_.L_41c80f

block_41c398:                                     ; preds = %block_.L_41c38b
  %2566 = add i64 %2565, 4
  store i64 %2566, i64* %3, align 8
  %2567 = load i32, i32* %2539, align 4
  %2568 = sext i32 %2567 to i64
  store i64 %2568, i64* %RAX.i1555, align 8
  %2569 = add nsw i64 %2568, 12099168
  %2570 = add i64 %2565, 12
  store i64 %2570, i64* %3, align 8
  %2571 = inttoptr i64 %2569 to i8*
  %2572 = load i8, i8* %2571, align 1
  %2573 = zext i8 %2572 to i64
  store i64 %2573, i64* %RCX.i4050.pre-phi, align 8
  %2574 = zext i8 %2572 to i32
  %2575 = add nsw i32 %2574, -3
  %2576 = icmp ult i8 %2572, 3
  %2577 = zext i1 %2576 to i8
  store i8 %2577, i8* %19, align 1
  %2578 = and i32 %2575, 255
  %2579 = tail call i32 @llvm.ctpop.i32(i32 %2578)
  %2580 = trunc i32 %2579 to i8
  %2581 = and i8 %2580, 1
  %2582 = xor i8 %2581, 1
  store i8 %2582, i8* %26, align 1
  %2583 = xor i32 %2575, %2574
  %2584 = lshr i32 %2583, 4
  %2585 = trunc i32 %2584 to i8
  %2586 = and i8 %2585, 1
  store i8 %2586, i8* %31, align 1
  %2587 = icmp eq i32 %2575, 0
  %2588 = zext i1 %2587 to i8
  store i8 %2588, i8* %34, align 1
  %2589 = lshr i32 %2575, 31
  %2590 = trunc i32 %2589 to i8
  store i8 %2590, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v418 = select i1 %2587, i64 21, i64 26
  %2591 = add i64 %2565, %.v418
  store i64 %2591, i64* %3, align 8
  br i1 %2587, label %block_41c3ad, label %block_.L_41c3b2

block_41c3ad:                                     ; preds = %block_41c398
  %2592 = add i64 %2591, 1108
  br label %block_.L_41c801

block_.L_41c3b2:                                  ; preds = %block_41c398
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  %2593 = add i64 %2591, 14
  store i64 %2593, i64* %3, align 8
  %2594 = load i32, i32* %2539, align 4
  %2595 = sext i32 %2594 to i64
  %2596 = mul nsw i64 %2595, 36
  store i64 %2596, i64* %RCX.i4050.pre-phi, align 8
  %2597 = lshr i64 %2596, 63
  %2598 = add i64 %2596, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %2598, i64* %RAX.i1555, align 8
  %2599 = icmp ult i64 %2598, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %2600 = icmp ult i64 %2598, %2596
  %2601 = or i1 %2599, %2600
  %2602 = zext i1 %2601 to i8
  store i8 %2602, i8* %19, align 1
  %2603 = trunc i64 %2598 to i32
  %2604 = and i32 %2603, 252
  %2605 = tail call i32 @llvm.ctpop.i32(i32 %2604)
  %2606 = trunc i32 %2605 to i8
  %2607 = and i8 %2606, 1
  %2608 = xor i8 %2607, 1
  store i8 %2608, i8* %26, align 1
  %2609 = xor i64 %2596, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %2610 = xor i64 %2609, %2598
  %2611 = lshr i64 %2610, 4
  %2612 = trunc i64 %2611 to i8
  %2613 = and i8 %2612, 1
  store i8 %2613, i8* %31, align 1
  %2614 = icmp eq i64 %2598, 0
  %2615 = zext i1 %2614 to i8
  store i8 %2615, i8* %34, align 1
  %2616 = lshr i64 %2598, 63
  %2617 = trunc i64 %2616 to i8
  store i8 %2617, i8* %37, align 1
  %2618 = xor i64 %2616, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %2619 = xor i64 %2616, %2597
  %2620 = add nuw nsw i64 %2618, %2619
  %2621 = icmp eq i64 %2620, 2
  %2622 = zext i1 %2621 to i8
  store i8 %2622, i8* %43, align 1
  %2623 = inttoptr i64 %2598 to i32*
  %2624 = add i64 %2591, 24
  store i64 %2624, i64* %3, align 8
  %2625 = load i32, i32* %2623, align 4
  %2626 = add i32 %2625, -5
  %2627 = icmp ult i32 %2625, 5
  %2628 = zext i1 %2627 to i8
  store i8 %2628, i8* %19, align 1
  %2629 = and i32 %2626, 255
  %2630 = tail call i32 @llvm.ctpop.i32(i32 %2629)
  %2631 = trunc i32 %2630 to i8
  %2632 = and i8 %2631, 1
  %2633 = xor i8 %2632, 1
  store i8 %2633, i8* %26, align 1
  %2634 = xor i32 %2626, %2625
  %2635 = lshr i32 %2634, 4
  %2636 = trunc i32 %2635 to i8
  %2637 = and i8 %2636, 1
  store i8 %2637, i8* %31, align 1
  %2638 = icmp eq i32 %2626, 0
  %2639 = zext i1 %2638 to i8
  store i8 %2639, i8* %34, align 1
  %2640 = lshr i32 %2626, 31
  %2641 = trunc i32 %2640 to i8
  store i8 %2641, i8* %37, align 1
  %2642 = lshr i32 %2625, 31
  %2643 = xor i32 %2640, %2642
  %2644 = add nuw nsw i32 %2643, %2642
  %2645 = icmp eq i32 %2644, 2
  %2646 = zext i1 %2645 to i8
  store i8 %2646, i8* %43, align 1
  %.v419 = select i1 %2638, i64 30, i64 536
  %2647 = add i64 %2591, %.v419
  store i64 %2647, i64* %3, align 8
  br i1 %2638, label %block_41c3d0, label %block_.L_41c5ca

block_41c3d0:                                     ; preds = %block_.L_41c3b2
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  %2648 = load i64, i64* %RBP.i, align 8
  %2649 = add i64 %2648, -24
  %2650 = add i64 %2647, 14
  store i64 %2650, i64* %3, align 8
  %2651 = inttoptr i64 %2649 to i32*
  %2652 = load i32, i32* %2651, align 4
  %2653 = sext i32 %2652 to i64
  %2654 = mul nsw i64 %2653, 36
  store i64 %2654, i64* %RCX.i4050.pre-phi, align 8
  %2655 = lshr i64 %2654, 63
  %2656 = add i64 %2654, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %2656, i64* %RAX.i1555, align 8
  %2657 = icmp ult i64 %2656, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %2658 = icmp ult i64 %2656, %2654
  %2659 = or i1 %2657, %2658
  %2660 = zext i1 %2659 to i8
  store i8 %2660, i8* %19, align 1
  %2661 = trunc i64 %2656 to i32
  %2662 = and i32 %2661, 252
  %2663 = tail call i32 @llvm.ctpop.i32(i32 %2662)
  %2664 = trunc i32 %2663 to i8
  %2665 = and i8 %2664, 1
  %2666 = xor i8 %2665, 1
  store i8 %2666, i8* %26, align 1
  %2667 = xor i64 %2654, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %2668 = xor i64 %2667, %2656
  %2669 = lshr i64 %2668, 4
  %2670 = trunc i64 %2669 to i8
  %2671 = and i8 %2670, 1
  store i8 %2671, i8* %31, align 1
  %2672 = icmp eq i64 %2656, 0
  %2673 = zext i1 %2672 to i8
  store i8 %2673, i8* %34, align 1
  %2674 = lshr i64 %2656, 63
  %2675 = trunc i64 %2674 to i8
  store i8 %2675, i8* %37, align 1
  %2676 = xor i64 %2674, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %2677 = xor i64 %2674, %2655
  %2678 = add nuw nsw i64 %2676, %2677
  %2679 = icmp eq i64 %2678, 2
  %2680 = zext i1 %2679 to i8
  store i8 %2680, i8* %43, align 1
  %2681 = add i64 %2654, add (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 12)
  %2682 = add i64 %2647, 24
  store i64 %2682, i64* %3, align 8
  %2683 = inttoptr i64 %2681 to i32*
  %2684 = load i32, i32* %2683, align 4
  %2685 = zext i32 %2684 to i64
  store i64 %2685, i64* %RDX.i4244, align 8
  %2686 = add i64 %2647, 27
  store i64 %2686, i64* %3, align 8
  %2687 = load i32, i32* %2651, align 4
  %2688 = sub i32 %2684, %2687
  %2689 = icmp ult i32 %2684, %2687
  %2690 = zext i1 %2689 to i8
  store i8 %2690, i8* %19, align 1
  %2691 = and i32 %2688, 255
  %2692 = tail call i32 @llvm.ctpop.i32(i32 %2691)
  %2693 = trunc i32 %2692 to i8
  %2694 = and i8 %2693, 1
  %2695 = xor i8 %2694, 1
  store i8 %2695, i8* %26, align 1
  %2696 = xor i32 %2687, %2684
  %2697 = xor i32 %2696, %2688
  %2698 = lshr i32 %2697, 4
  %2699 = trunc i32 %2698 to i8
  %2700 = and i8 %2699, 1
  store i8 %2700, i8* %31, align 1
  %2701 = icmp eq i32 %2688, 0
  %2702 = zext i1 %2701 to i8
  store i8 %2702, i8* %34, align 1
  %2703 = lshr i32 %2688, 31
  %2704 = trunc i32 %2703 to i8
  store i8 %2704, i8* %37, align 1
  %2705 = lshr i32 %2684, 31
  %2706 = lshr i32 %2687, 31
  %2707 = xor i32 %2706, %2705
  %2708 = xor i32 %2703, %2705
  %2709 = add nuw nsw i32 %2708, %2707
  %2710 = icmp eq i32 %2709, 2
  %2711 = zext i1 %2710 to i8
  store i8 %2711, i8* %43, align 1
  %.v426 = select i1 %2701, i64 33, i64 506
  %2712 = add i64 %2647, %.v426
  store i64 %2712, i64* %3, align 8
  br i1 %2701, label %block_41c3f1, label %block_.L_41c5ca

block_41c3f1:                                     ; preds = %block_41c3d0
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  store i64 2, i64* %RDX.i4244, align 8
  %2713 = load i64, i64* %RBP.i, align 8
  %2714 = add i64 %2713, -28
  store i64 %2714, i64* %RCX.i4050.pre-phi, align 8
  store i64 1, i64* %R8.i3778, align 8
  %2715 = add i64 %2713, -24
  %2716 = add i64 %2712, 29
  store i64 %2716, i64* %3, align 8
  %2717 = inttoptr i64 %2715 to i32*
  %2718 = load i32, i32* %2717, align 4
  %2719 = sext i32 %2718 to i64
  %2720 = mul nsw i64 %2719, 36
  store i64 %2720, i64* %RSI.i4246, align 8
  %2721 = lshr i64 %2720, 63
  %2722 = add i64 %2720, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %2722, i64* %RDI.i4254, align 8
  %2723 = icmp ult i64 %2722, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %2724 = icmp ult i64 %2722, %2720
  %2725 = or i1 %2723, %2724
  %2726 = zext i1 %2725 to i8
  store i8 %2726, i8* %19, align 1
  %2727 = trunc i64 %2722 to i32
  %2728 = and i32 %2727, 252
  %2729 = tail call i32 @llvm.ctpop.i32(i32 %2728)
  %2730 = trunc i32 %2729 to i8
  %2731 = and i8 %2730, 1
  %2732 = xor i8 %2731, 1
  store i8 %2732, i8* %26, align 1
  %2733 = xor i64 %2720, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %2734 = xor i64 %2733, %2722
  %2735 = lshr i64 %2734, 4
  %2736 = trunc i64 %2735 to i8
  %2737 = and i8 %2736, 1
  store i8 %2737, i8* %31, align 1
  %2738 = icmp eq i64 %2722, 0
  %2739 = zext i1 %2738 to i8
  store i8 %2739, i8* %34, align 1
  %2740 = lshr i64 %2722, 63
  %2741 = trunc i64 %2740 to i8
  store i8 %2741, i8* %37, align 1
  %2742 = xor i64 %2740, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %2743 = xor i64 %2740, %2721
  %2744 = add nuw nsw i64 %2742, %2743
  %2745 = icmp eq i64 %2744, 2
  %2746 = zext i1 %2745 to i8
  store i8 %2746, i8* %43, align 1
  %2747 = add i64 %2720, add (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 12)
  %2748 = add i64 %2712, 42
  store i64 %2748, i64* %3, align 8
  %2749 = inttoptr i64 %2747 to i32*
  %2750 = load i32, i32* %2749, align 4
  %2751 = zext i32 %2750 to i64
  store i64 %2751, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RSI.i4246, align 8
  %2752 = add i64 %2712, 119135
  %2753 = add i64 %2712, 50
  %2754 = load i64, i64* %6, align 8
  %2755 = add i64 %2754, -8
  %2756 = inttoptr i64 %2755 to i64*
  store i64 %2753, i64* %2756, align 8
  store i64 %2755, i64* %6, align 8
  store i64 %2752, i64* %3, align 8
  %call2_41c41e = tail call %struct.Memory* @sub_439550.find_eye_dragons(%struct.State* nonnull %0, i64 %2752, %struct.Memory* %MEMORY.24)
  %2757 = load i32, i32* %EAX.i4253, align 4
  %2758 = load i64, i64* %3, align 8
  %2759 = add i32 %2757, -1
  %2760 = icmp eq i32 %2757, 0
  %2761 = zext i1 %2760 to i8
  store i8 %2761, i8* %19, align 1
  %2762 = and i32 %2759, 255
  %2763 = tail call i32 @llvm.ctpop.i32(i32 %2762)
  %2764 = trunc i32 %2763 to i8
  %2765 = and i8 %2764, 1
  %2766 = xor i8 %2765, 1
  store i8 %2766, i8* %26, align 1
  %2767 = xor i32 %2759, %2757
  %2768 = lshr i32 %2767, 4
  %2769 = trunc i32 %2768 to i8
  %2770 = and i8 %2769, 1
  store i8 %2770, i8* %31, align 1
  %2771 = icmp eq i32 %2759, 0
  %2772 = zext i1 %2771 to i8
  store i8 %2772, i8* %34, align 1
  %2773 = lshr i32 %2759, 31
  %2774 = trunc i32 %2773 to i8
  store i8 %2774, i8* %37, align 1
  %2775 = lshr i32 %2757, 31
  %2776 = xor i32 %2773, %2775
  %2777 = add nuw nsw i32 %2776, %2775
  %2778 = icmp eq i32 %2777, 2
  %2779 = zext i1 %2778 to i8
  store i8 %2779, i8* %43, align 1
  %.v427 = select i1 %2771, i64 9, i64 423
  %2780 = add i64 %2758, %.v427
  store i64 %2780, i64* %3, align 8
  br i1 %2771, label %block_41c42c, label %block_.L_41c5ca

block_41c42c:                                     ; preds = %block_41c3f1
  %2781 = load i64, i64* %RBP.i, align 8
  %2782 = add i64 %2781, -28
  %2783 = add i64 %2780, 4
  store i64 %2783, i64* %3, align 8
  %2784 = inttoptr i64 %2782 to i32*
  %2785 = load i32, i32* %2784, align 4
  %2786 = sext i32 %2785 to i64
  store i64 %2786, i64* %RAX.i1555, align 8
  %2787 = add nsw i64 %2786, 12099168
  %2788 = add i64 %2780, 12
  store i64 %2788, i64* %3, align 8
  %2789 = inttoptr i64 %2787 to i8*
  %2790 = load i8, i8* %2789, align 1
  %2791 = zext i8 %2790 to i64
  store i64 %2791, i64* %RCX.i4050.pre-phi, align 8
  %2792 = zext i8 %2790 to i32
  %2793 = add nsw i32 %2792, -2
  %2794 = icmp ult i8 %2790, 2
  %2795 = zext i1 %2794 to i8
  store i8 %2795, i8* %19, align 1
  %2796 = and i32 %2793, 255
  %2797 = tail call i32 @llvm.ctpop.i32(i32 %2796)
  %2798 = trunc i32 %2797 to i8
  %2799 = and i8 %2798, 1
  %2800 = xor i8 %2799, 1
  store i8 %2800, i8* %26, align 1
  %2801 = xor i32 %2793, %2792
  %2802 = lshr i32 %2801, 4
  %2803 = trunc i32 %2802 to i8
  %2804 = and i8 %2803, 1
  store i8 %2804, i8* %31, align 1
  %2805 = icmp eq i32 %2793, 0
  %2806 = zext i1 %2805 to i8
  store i8 %2806, i8* %34, align 1
  %2807 = lshr i32 %2793, 31
  %2808 = trunc i32 %2807 to i8
  store i8 %2808, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v428 = select i1 %2805, i64 21, i64 26
  %2809 = add i64 %2780, %.v428
  store i64 %2809, i64* %3, align 8
  br i1 %2805, label %block_41c441, label %block_.L_41c446

block_41c441:                                     ; preds = %block_41c42c
  %2810 = add i64 %2809, 45
  store i64 %2810, i64* %3, align 8
  br label %block_.L_41c46e

block_.L_41c446:                                  ; preds = %block_41c42c
  store i64 ptrtoint (%G__0x57ad9b_type* @G__0x57ad9b to i64), i64* %RDI.i4254, align 8
  store i64 251, i64* %RSI.i4246, align 8
  store i64 ptrtoint (%G__0x57af50_type* @G__0x57af50 to i64), i64* %RDX.i4244, align 8
  store i64 4294967295, i64* %RAX.i1555, align 8
  store i64 4294967295, i64* %RCX.i4050.pre-phi, align 8
  store i64 4294967295, i64* %R8.i3778, align 8
  %2811 = add i64 %2809, 220234
  %2812 = add i64 %2809, 40
  %2813 = load i64, i64* %6, align 8
  %2814 = add i64 %2813, -8
  %2815 = inttoptr i64 %2814 to i64*
  store i64 %2812, i64* %2815, align 8
  store i64 %2814, i64* %6, align 8
  store i64 %2811, i64* %3, align 8
  %call2_41c469 = tail call %struct.Memory* @sub_452090.abortgo(%struct.State* nonnull %0, i64 %2811, %struct.Memory* %MEMORY.24)
  %.pre291 = load i64, i64* %3, align 8
  br label %block_.L_41c46e

block_.L_41c46e:                                  ; preds = %block_.L_41c446, %block_41c441
  %2816 = phi i64 [ %.pre291, %block_.L_41c446 ], [ %2810, %block_41c441 ]
  %2817 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %19, align 1
  %2818 = and i32 %2817, 255
  %2819 = tail call i32 @llvm.ctpop.i32(i32 %2818)
  %2820 = trunc i32 %2819 to i8
  %2821 = and i8 %2820, 1
  %2822 = xor i8 %2821, 1
  store i8 %2822, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %2823 = icmp eq i32 %2817, 0
  %2824 = zext i1 %2823 to i8
  store i8 %2824, i8* %34, align 1
  %2825 = lshr i32 %2817, 31
  %2826 = trunc i32 %2825 to i8
  store i8 %2826, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v429 = select i1 %2823, i64 14, i64 19
  %2827 = add i64 %2816, %.v429
  store i64 %2827, i64* %3, align 8
  br i1 %2823, label %block_41c47c, label %block_.L_41c481

block_41c47c:                                     ; preds = %block_.L_41c46e
  %2828 = add i64 %2827, 34
  store i64 %2828, i64* %3, align 8
  br label %block_.L_41c49e

block_.L_41c481:                                  ; preds = %block_.L_41c46e
  store i64 ptrtoint (%G__0x57af5f_type* @G__0x57af5f to i64), i64* %RDI.i4254, align 8
  %2829 = load i64, i64* %RBP.i, align 8
  %2830 = add i64 %2829, -24
  %2831 = add i64 %2827, 13
  store i64 %2831, i64* %3, align 8
  %2832 = inttoptr i64 %2830 to i32*
  %2833 = load i32, i32* %2832, align 4
  %2834 = zext i32 %2833 to i64
  store i64 %2834, i64* %RSI.i4246, align 8
  %2835 = add i64 %2829, -28
  %2836 = add i64 %2827, 16
  store i64 %2836, i64* %3, align 8
  %2837 = inttoptr i64 %2835 to i32*
  %2838 = load i32, i32* %2837, align 4
  %2839 = zext i32 %2838 to i64
  store i64 %2839, i64* %RDX.i4244, align 8
  store i8 0, i8* %AL.i3758, align 1
  %2840 = add i64 %2827, 219439
  %2841 = add i64 %2827, 23
  %2842 = load i64, i64* %6, align 8
  %2843 = add i64 %2842, -8
  %2844 = inttoptr i64 %2843 to i64*
  store i64 %2841, i64* %2844, align 8
  store i64 %2843, i64* %6, align 8
  store i64 %2840, i64* %3, align 8
  %call2_41c493 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %2840, %struct.Memory* %MEMORY.24)
  %2845 = load i64, i64* %RBP.i, align 8
  %2846 = add i64 %2845, -904
  %2847 = load i32, i32* %EAX.i4253, align 4
  %2848 = load i64, i64* %3, align 8
  %2849 = add i64 %2848, 6
  store i64 %2849, i64* %3, align 8
  %2850 = inttoptr i64 %2846 to i32*
  store i32 %2847, i32* %2850, align 4
  %.pre292 = load i64, i64* %3, align 8
  br label %block_.L_41c49e

block_.L_41c49e:                                  ; preds = %block_.L_41c481, %block_41c47c
  %2851 = phi i64 [ %.pre292, %block_.L_41c481 ], [ %2828, %block_41c47c ]
  %MEMORY.26 = phi %struct.Memory* [ %call2_41c493, %block_.L_41c481 ], [ %MEMORY.24, %block_41c47c ]
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX.i1555, align 8
  %2852 = load i64, i64* %RBP.i, align 8
  %2853 = add i64 %2852, -24
  %2854 = add i64 %2851, 14
  store i64 %2854, i64* %3, align 8
  %2855 = inttoptr i64 %2853 to i32*
  %2856 = load i32, i32* %2855, align 4
  %2857 = sext i32 %2856 to i64
  %2858 = mul nsw i64 %2857, 36
  store i64 %2858, i64* %RCX.i4050.pre-phi, align 8
  %2859 = add i64 %2858, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %2860 = lshr i64 %2859, 63
  %2861 = add i64 %2858, add (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 16)
  store i64 %2861, i64* %RAX.i1555, align 8
  %2862 = icmp ugt i64 %2859, -17
  %2863 = zext i1 %2862 to i8
  store i8 %2863, i8* %19, align 1
  %2864 = trunc i64 %2861 to i32
  %2865 = and i32 %2864, 252
  %2866 = tail call i32 @llvm.ctpop.i32(i32 %2865)
  %2867 = trunc i32 %2866 to i8
  %2868 = and i8 %2867, 1
  %2869 = xor i8 %2868, 1
  store i8 %2869, i8* %26, align 1
  %2870 = xor i64 %2859, 16
  %2871 = xor i64 %2870, %2861
  %2872 = lshr i64 %2871, 4
  %2873 = trunc i64 %2872 to i8
  %2874 = and i8 %2873, 1
  store i8 %2874, i8* %31, align 1
  %2875 = icmp eq i64 %2861, 0
  %2876 = zext i1 %2875 to i8
  store i8 %2876, i8* %34, align 1
  %2877 = lshr i64 %2861, 63
  %2878 = trunc i64 %2877 to i8
  store i8 %2878, i8* %37, align 1
  %2879 = xor i64 %2877, %2860
  %2880 = add nuw nsw i64 %2879, %2877
  %2881 = icmp eq i64 %2880, 2
  %2882 = zext i1 %2881 to i8
  store i8 %2882, i8* %43, align 1
  store i64 %2861, i64* %RDI.i4254, align 8
  %2883 = add i64 %2851, 126210
  %2884 = add i64 %2851, 33
  %2885 = load i64, i64* %6, align 8
  %2886 = add i64 %2885, -8
  %2887 = inttoptr i64 %2886 to i64*
  store i64 %2884, i64* %2887, align 8
  store i64 %2886, i64* %6, align 8
  store i64 %2883, i64* %3, align 8
  %call2_41c4ba = tail call %struct.Memory* @sub_43b1a0.eye_move_urgency(%struct.State* nonnull %0, i64 %2883, %struct.Memory* %MEMORY.26)
  %2888 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i4050.pre-phi, align 8
  %2889 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %2889, i64* %RDI.i4254, align 8
  %2890 = load i64, i64* %RBP.i, align 8
  %2891 = add i64 %2890, -28
  %2892 = add i64 %2888, 22
  store i64 %2892, i64* %3, align 8
  %2893 = inttoptr i64 %2891 to i32*
  %2894 = load i32, i32* %2893, align 4
  %2895 = sext i32 %2894 to i64
  %2896 = mul nsw i64 %2895, 76
  store i64 %2896, i64* %RDX.i4244, align 8
  %2897 = lshr i64 %2896, 63
  %2898 = add i64 %2896, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %2898, i64* %RCX.i4050.pre-phi, align 8
  %2899 = icmp ult i64 %2898, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %2900 = icmp ult i64 %2898, %2896
  %2901 = or i1 %2899, %2900
  %2902 = zext i1 %2901 to i8
  store i8 %2902, i8* %19, align 1
  %2903 = trunc i64 %2898 to i32
  %2904 = and i32 %2903, 252
  %2905 = tail call i32 @llvm.ctpop.i32(i32 %2904)
  %2906 = trunc i32 %2905 to i8
  %2907 = and i8 %2906, 1
  %2908 = xor i8 %2907, 1
  store i8 %2908, i8* %26, align 1
  %2909 = xor i64 %2896, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %2910 = xor i64 %2909, %2898
  %2911 = lshr i64 %2910, 4
  %2912 = trunc i64 %2911 to i8
  %2913 = and i8 %2912, 1
  store i8 %2913, i8* %31, align 1
  %2914 = icmp eq i64 %2898, 0
  %2915 = zext i1 %2914 to i8
  store i8 %2915, i8* %34, align 1
  %2916 = lshr i64 %2898, 63
  %2917 = trunc i64 %2916 to i8
  store i8 %2917, i8* %37, align 1
  %2918 = xor i64 %2916, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %2919 = xor i64 %2916, %2897
  %2920 = add nuw nsw i64 %2918, %2919
  %2921 = icmp eq i64 %2920, 2
  %2922 = zext i1 %2921 to i8
  store i8 %2922, i8* %43, align 1
  %2923 = add i64 %2896, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %2924 = add i64 %2888, 33
  store i64 %2924, i64* %3, align 8
  %2925 = inttoptr i64 %2923 to i32*
  %2926 = load i32, i32* %2925, align 4
  %2927 = sext i32 %2926 to i64
  %2928 = mul nsw i64 %2927, 104
  store i64 %2928, i64* %RCX.i4050.pre-phi, align 8
  %2929 = load i64, i64* %RDI.i4254, align 8
  %2930 = add i64 %2928, %2929
  %2931 = lshr i64 %2930, 63
  %2932 = add i64 %2930, 76
  store i64 %2932, i64* %RDI.i4254, align 8
  %2933 = icmp ugt i64 %2930, -77
  %2934 = zext i1 %2933 to i8
  store i8 %2934, i8* %19, align 1
  %2935 = trunc i64 %2932 to i32
  %2936 = and i32 %2935, 255
  %2937 = tail call i32 @llvm.ctpop.i32(i32 %2936)
  %2938 = trunc i32 %2937 to i8
  %2939 = and i8 %2938, 1
  %2940 = xor i8 %2939, 1
  store i8 %2940, i8* %26, align 1
  %2941 = xor i64 %2932, %2930
  %2942 = lshr i64 %2941, 4
  %2943 = trunc i64 %2942 to i8
  %2944 = and i8 %2943, 1
  store i8 %2944, i8* %31, align 1
  %2945 = icmp eq i64 %2932, 0
  %2946 = zext i1 %2945 to i8
  store i8 %2946, i8* %34, align 1
  %2947 = lshr i64 %2932, 63
  %2948 = trunc i64 %2947 to i8
  store i8 %2948, i8* %37, align 1
  %2949 = xor i64 %2947, %2931
  %2950 = add nuw nsw i64 %2949, %2947
  %2951 = icmp eq i64 %2950, 2
  %2952 = zext i1 %2951 to i8
  store i8 %2952, i8* %43, align 1
  %2953 = load i64, i64* %RBP.i, align 8
  %2954 = add i64 %2953, -908
  %2955 = load i32, i32* %EAX.i4253, align 4
  %2956 = add i64 %2888, 50
  store i64 %2956, i64* %3, align 8
  %2957 = inttoptr i64 %2954 to i32*
  store i32 %2955, i32* %2957, align 4
  %2958 = load i64, i64* %3, align 8
  %2959 = add i64 %2958, 126127
  %2960 = add i64 %2958, 5
  %2961 = load i64, i64* %6, align 8
  %2962 = add i64 %2961, -8
  %2963 = inttoptr i64 %2962 to i64*
  store i64 %2960, i64* %2963, align 8
  store i64 %2962, i64* %6, align 8
  store i64 %2959, i64* %3, align 8
  %call2_41c4f1 = tail call %struct.Memory* @sub_43b1a0.eye_move_urgency(%struct.State* nonnull %0, i64 %2959, %struct.Memory* %call2_41c4ba)
  %2964 = load i64, i64* %RBP.i, align 8
  %2965 = add i64 %2964, -908
  %2966 = load i64, i64* %3, align 8
  %2967 = add i64 %2966, 6
  store i64 %2967, i64* %3, align 8
  %2968 = inttoptr i64 %2965 to i32*
  %2969 = load i32, i32* %2968, align 4
  %2970 = zext i32 %2969 to i64
  store i64 %2970, i64* %RSI.i4246, align 8
  %2971 = load i32, i32* %EAX.i4253, align 4
  %2972 = sub i32 %2969, %2971
  %2973 = icmp ult i32 %2969, %2971
  %2974 = zext i1 %2973 to i8
  store i8 %2974, i8* %19, align 1
  %2975 = and i32 %2972, 255
  %2976 = tail call i32 @llvm.ctpop.i32(i32 %2975)
  %2977 = trunc i32 %2976 to i8
  %2978 = and i8 %2977, 1
  %2979 = xor i8 %2978, 1
  store i8 %2979, i8* %26, align 1
  %2980 = xor i32 %2971, %2969
  %2981 = xor i32 %2980, %2972
  %2982 = lshr i32 %2981, 4
  %2983 = trunc i32 %2982 to i8
  %2984 = and i8 %2983, 1
  store i8 %2984, i8* %31, align 1
  %2985 = icmp eq i32 %2972, 0
  %2986 = zext i1 %2985 to i8
  store i8 %2986, i8* %34, align 1
  %2987 = lshr i32 %2972, 31
  %2988 = trunc i32 %2987 to i8
  store i8 %2988, i8* %37, align 1
  %2989 = lshr i32 %2969, 31
  %2990 = lshr i32 %2971, 31
  %2991 = xor i32 %2990, %2989
  %2992 = xor i32 %2987, %2989
  %2993 = add nuw nsw i32 %2992, %2991
  %2994 = icmp eq i32 %2993, 2
  %2995 = zext i1 %2994 to i8
  store i8 %2995, i8* %43, align 1
  %2996 = icmp ne i8 %2988, 0
  %2997 = xor i1 %2996, %2994
  %2998 = or i1 %2985, %2997
  %.v430 = select i1 %2998, i64 81, i64 14
  %2999 = add i64 %2966, %.v430
  store i64 %2999, i64* %3, align 8
  br i1 %2998, label %block_.L_41c547, label %block_41c504

block_41c504:                                     ; preds = %block_.L_41c49e
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RCX.i4050.pre-phi, align 8
  %3000 = add i64 %2964, -24
  %3001 = add i64 %2999, 24
  store i64 %3001, i64* %3, align 8
  %3002 = inttoptr i64 %3000 to i32*
  %3003 = load i32, i32* %3002, align 4
  %3004 = sext i32 %3003 to i64
  %3005 = mul nsw i64 %3004, 36
  store i64 %3005, i64* %RDX.i4244, align 8
  %3006 = lshr i64 %3005, 63
  %3007 = add i64 %3005, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  store i64 %3007, i64* %RCX.i4050.pre-phi, align 8
  %3008 = icmp ult i64 %3007, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %3009 = icmp ult i64 %3007, %3005
  %3010 = or i1 %3008, %3009
  %3011 = zext i1 %3010 to i8
  store i8 %3011, i8* %19, align 1
  %3012 = trunc i64 %3007 to i32
  %3013 = and i32 %3012, 252
  %3014 = tail call i32 @llvm.ctpop.i32(i32 %3013)
  %3015 = trunc i32 %3014 to i8
  %3016 = and i8 %3015, 1
  %3017 = xor i8 %3016, 1
  store i8 %3017, i8* %26, align 1
  %3018 = xor i64 %3005, ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64)
  %3019 = xor i64 %3018, %3007
  %3020 = lshr i64 %3019, 4
  %3021 = trunc i64 %3020 to i8
  %3022 = and i8 %3021, 1
  store i8 %3022, i8* %31, align 1
  %3023 = icmp eq i64 %3007, 0
  %3024 = zext i1 %3023 to i8
  store i8 %3024, i8* %34, align 1
  %3025 = lshr i64 %3007, 63
  %3026 = trunc i64 %3025 to i8
  store i8 %3026, i8* %37, align 1
  %3027 = xor i64 %3025, lshr (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 63)
  %3028 = xor i64 %3025, %3006
  %3029 = add nuw nsw i64 %3027, %3028
  %3030 = icmp eq i64 %3029, 2
  %3031 = zext i1 %3030 to i8
  store i8 %3031, i8* %43, align 1
  %3032 = add i64 %3005, add (i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64 24)
  %3033 = add i64 %2999, 34
  store i64 %3033, i64* %3, align 8
  %3034 = inttoptr i64 %3032 to i32*
  %3035 = load i32, i32* %3034, align 4
  %3036 = zext i32 %3035 to i64
  store i64 %3036, i64* %RSI.i4246, align 8
  %3037 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %3037, i64* %RCX.i4050.pre-phi, align 8
  %3038 = add i64 %2964, -28
  %3039 = add i64 %2999, 46
  store i64 %3039, i64* %3, align 8
  %3040 = inttoptr i64 %3038 to i32*
  %3041 = load i32, i32* %3040, align 4
  %3042 = sext i32 %3041 to i64
  %3043 = mul nsw i64 %3042, 76
  store i64 %3043, i64* %RDX.i4244, align 8
  %3044 = lshr i64 %3043, 63
  %3045 = load i64, i64* %RAX.i1555, align 8
  %3046 = add i64 %3043, %3045
  store i64 %3046, i64* %RAX.i1555, align 8
  %3047 = icmp ult i64 %3046, %3045
  %3048 = icmp ult i64 %3046, %3043
  %3049 = or i1 %3047, %3048
  %3050 = zext i1 %3049 to i8
  store i8 %3050, i8* %19, align 1
  %3051 = trunc i64 %3046 to i32
  %3052 = and i32 %3051, 255
  %3053 = tail call i32 @llvm.ctpop.i32(i32 %3052)
  %3054 = trunc i32 %3053 to i8
  %3055 = and i8 %3054, 1
  %3056 = xor i8 %3055, 1
  store i8 %3056, i8* %26, align 1
  %3057 = xor i64 %3043, %3045
  %3058 = xor i64 %3057, %3046
  %3059 = lshr i64 %3058, 4
  %3060 = trunc i64 %3059 to i8
  %3061 = and i8 %3060, 1
  store i8 %3061, i8* %31, align 1
  %3062 = icmp eq i64 %3046, 0
  %3063 = zext i1 %3062 to i8
  store i8 %3063, i8* %34, align 1
  %3064 = lshr i64 %3046, 63
  %3065 = trunc i64 %3064 to i8
  store i8 %3065, i8* %37, align 1
  %3066 = lshr i64 %3045, 63
  %3067 = xor i64 %3064, %3066
  %3068 = xor i64 %3064, %3044
  %3069 = add nuw nsw i64 %3067, %3068
  %3070 = icmp eq i64 %3069, 2
  %3071 = zext i1 %3070 to i8
  store i8 %3071, i8* %43, align 1
  %3072 = add i64 %3046, 4
  %3073 = add i64 %2999, 57
  store i64 %3073, i64* %3, align 8
  %3074 = inttoptr i64 %3072 to i32*
  %3075 = load i32, i32* %3074, align 4
  %3076 = sext i32 %3075 to i64
  %3077 = mul nsw i64 %3076, 104
  store i64 %3077, i64* %RAX.i1555, align 8
  %3078 = lshr i64 %3077, 63
  %3079 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %3080 = add i64 %3077, %3079
  store i64 %3080, i64* %RCX.i4050.pre-phi, align 8
  %3081 = icmp ult i64 %3080, %3079
  %3082 = icmp ult i64 %3080, %3077
  %3083 = or i1 %3081, %3082
  %3084 = zext i1 %3083 to i8
  store i8 %3084, i8* %19, align 1
  %3085 = trunc i64 %3080 to i32
  %3086 = and i32 %3085, 255
  %3087 = tail call i32 @llvm.ctpop.i32(i32 %3086)
  %3088 = trunc i32 %3087 to i8
  %3089 = and i8 %3088, 1
  %3090 = xor i8 %3089, 1
  store i8 %3090, i8* %26, align 1
  %3091 = xor i64 %3077, %3079
  %3092 = xor i64 %3091, %3080
  %3093 = lshr i64 %3092, 4
  %3094 = trunc i64 %3093 to i8
  %3095 = and i8 %3094, 1
  store i8 %3095, i8* %31, align 1
  %3096 = icmp eq i64 %3080, 0
  %3097 = zext i1 %3096 to i8
  store i8 %3097, i8* %34, align 1
  %3098 = lshr i64 %3080, 63
  %3099 = trunc i64 %3098 to i8
  store i8 %3099, i8* %37, align 1
  %3100 = lshr i64 %3079, 63
  %3101 = xor i64 %3098, %3100
  %3102 = xor i64 %3098, %3078
  %3103 = add nuw nsw i64 %3101, %3102
  %3104 = icmp eq i64 %3103, 2
  %3105 = zext i1 %3104 to i8
  store i8 %3105, i8* %43, align 1
  %3106 = add i64 %3080, 80
  %3107 = load i32, i32* %ESI.i2400, align 4
  %3108 = add i64 %2999, 67
  store i64 %3108, i64* %3, align 8
  %3109 = inttoptr i64 %3106 to i32*
  store i32 %3107, i32* %3109, align 4
  %.pre293 = load i64, i64* %3, align 8
  %.pre294 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41c547

block_.L_41c547:                                  ; preds = %block_41c504, %block_.L_41c49e
  %3110 = phi i64 [ %.pre294, %block_41c504 ], [ %2964, %block_.L_41c49e ]
  %3111 = phi i64 [ %.pre293, %block_41c504 ], [ %2999, %block_.L_41c49e ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RCX.i4050.pre-phi, align 8
  %3112 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %3112, i64* %RDX.i4244, align 8
  %3113 = add i64 %3110, -28
  %3114 = add i64 %3111, 32
  store i64 %3114, i64* %3, align 8
  %3115 = inttoptr i64 %3113 to i32*
  %3116 = load i32, i32* %3115, align 4
  %3117 = sext i32 %3116 to i64
  %3118 = mul nsw i64 %3117, 76
  store i64 %3118, i64* %RSI.i4246, align 8
  %3119 = lshr i64 %3118, 63
  %3120 = add i64 %3118, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %3120, i64* %RDI.i4254, align 8
  %3121 = icmp ult i64 %3120, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %3122 = icmp ult i64 %3120, %3118
  %3123 = or i1 %3121, %3122
  %3124 = zext i1 %3123 to i8
  store i8 %3124, i8* %19, align 1
  %3125 = trunc i64 %3120 to i32
  %3126 = and i32 %3125, 252
  %3127 = tail call i32 @llvm.ctpop.i32(i32 %3126)
  %3128 = trunc i32 %3127 to i8
  %3129 = and i8 %3128, 1
  %3130 = xor i8 %3129, 1
  store i8 %3130, i8* %26, align 1
  %3131 = xor i64 %3118, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %3132 = xor i64 %3131, %3120
  %3133 = lshr i64 %3132, 4
  %3134 = trunc i64 %3133 to i8
  %3135 = and i8 %3134, 1
  store i8 %3135, i8* %31, align 1
  %3136 = icmp eq i64 %3120, 0
  %3137 = zext i1 %3136 to i8
  store i8 %3137, i8* %34, align 1
  %3138 = lshr i64 %3120, 63
  %3139 = trunc i64 %3138 to i8
  store i8 %3139, i8* %37, align 1
  %3140 = xor i64 %3138, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %3141 = xor i64 %3138, %3119
  %3142 = add nuw nsw i64 %3140, %3141
  %3143 = icmp eq i64 %3142, 2
  %3144 = zext i1 %3143 to i8
  store i8 %3144, i8* %43, align 1
  %3145 = add i64 %3118, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %3146 = add i64 %3111, 46
  store i64 %3146, i64* %3, align 8
  %3147 = inttoptr i64 %3145 to i32*
  %3148 = load i32, i32* %3147, align 4
  %3149 = sext i32 %3148 to i64
  %3150 = mul nsw i64 %3149, 104
  store i64 %3150, i64* %RSI.i4246, align 8
  %3151 = load i64, i64* %RDX.i4244, align 8
  %3152 = add i64 %3150, %3151
  %3153 = lshr i64 %3152, 63
  %3154 = add i64 %3152, 76
  store i64 %3154, i64* %RDX.i4244, align 8
  %3155 = icmp ugt i64 %3152, -77
  %3156 = zext i1 %3155 to i8
  store i8 %3156, i8* %19, align 1
  %3157 = trunc i64 %3154 to i32
  %3158 = and i32 %3157, 255
  %3159 = tail call i32 @llvm.ctpop.i32(i32 %3158)
  %3160 = trunc i32 %3159 to i8
  %3161 = and i8 %3160, 1
  %3162 = xor i8 %3161, 1
  store i8 %3162, i8* %26, align 1
  %3163 = xor i64 %3154, %3152
  %3164 = lshr i64 %3163, 4
  %3165 = trunc i64 %3164 to i8
  %3166 = and i8 %3165, 1
  store i8 %3166, i8* %31, align 1
  %3167 = icmp eq i64 %3154, 0
  %3168 = zext i1 %3167 to i8
  store i8 %3168, i8* %34, align 1
  %3169 = lshr i64 %3154, 63
  %3170 = trunc i64 %3169 to i8
  store i8 %3170, i8* %37, align 1
  %3171 = xor i64 %3169, %3153
  %3172 = add nuw nsw i64 %3171, %3169
  %3173 = icmp eq i64 %3172, 2
  %3174 = zext i1 %3173 to i8
  store i8 %3174, i8* %43, align 1
  %3175 = load i64, i64* %RBP.i, align 8
  %3176 = add i64 %3175, -24
  %3177 = add i64 %3111, 61
  store i64 %3177, i64* %3, align 8
  %3178 = inttoptr i64 %3176 to i32*
  %3179 = load i32, i32* %3178, align 4
  %3180 = sext i32 %3179 to i64
  %3181 = mul nsw i64 %3180, 36
  %3182 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %3183 = add i64 %3181, %3182
  %3184 = lshr i64 %3183, 63
  %3185 = add i64 %3183, 16
  store i64 %3185, i64* %RCX.i4050.pre-phi, align 8
  %3186 = icmp ugt i64 %3183, -17
  %3187 = zext i1 %3186 to i8
  store i8 %3187, i8* %19, align 1
  %3188 = trunc i64 %3185 to i32
  %3189 = and i32 %3188, 255
  %3190 = tail call i32 @llvm.ctpop.i32(i32 %3189)
  %3191 = trunc i32 %3190 to i8
  %3192 = and i8 %3191, 1
  %3193 = xor i8 %3192, 1
  store i8 %3193, i8* %26, align 1
  %3194 = xor i64 %3183, 16
  %3195 = xor i64 %3194, %3185
  %3196 = lshr i64 %3195, 4
  %3197 = trunc i64 %3196 to i8
  %3198 = and i8 %3197, 1
  store i8 %3198, i8* %31, align 1
  %3199 = icmp eq i64 %3185, 0
  %3200 = zext i1 %3199 to i8
  store i8 %3200, i8* %34, align 1
  %3201 = lshr i64 %3185, 63
  %3202 = trunc i64 %3201 to i8
  store i8 %3202, i8* %37, align 1
  %3203 = xor i64 %3201, %3184
  %3204 = add nuw nsw i64 %3203, %3201
  %3205 = icmp eq i64 %3204, 2
  %3206 = zext i1 %3205 to i8
  store i8 %3206, i8* %43, align 1
  %3207 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %3207, i64* %RSI.i4246, align 8
  %3208 = load i64, i64* %RBP.i, align 8
  %3209 = add i64 %3208, -28
  %3210 = add i64 %3111, 84
  store i64 %3210, i64* %3, align 8
  %3211 = inttoptr i64 %3209 to i32*
  %3212 = load i32, i32* %3211, align 4
  %3213 = sext i32 %3212 to i64
  %3214 = mul nsw i64 %3213, 76
  store i64 %3214, i64* %RDI.i4254, align 8
  %3215 = lshr i64 %3214, 63
  %3216 = load i64, i64* %RAX.i1555, align 8
  %3217 = add i64 %3214, %3216
  store i64 %3217, i64* %RAX.i1555, align 8
  %3218 = icmp ult i64 %3217, %3216
  %3219 = icmp ult i64 %3217, %3214
  %3220 = or i1 %3218, %3219
  %3221 = zext i1 %3220 to i8
  store i8 %3221, i8* %19, align 1
  %3222 = trunc i64 %3217 to i32
  %3223 = and i32 %3222, 255
  %3224 = tail call i32 @llvm.ctpop.i32(i32 %3223)
  %3225 = trunc i32 %3224 to i8
  %3226 = and i8 %3225, 1
  %3227 = xor i8 %3226, 1
  store i8 %3227, i8* %26, align 1
  %3228 = xor i64 %3214, %3216
  %3229 = xor i64 %3228, %3217
  %3230 = lshr i64 %3229, 4
  %3231 = trunc i64 %3230 to i8
  %3232 = and i8 %3231, 1
  store i8 %3232, i8* %31, align 1
  %3233 = icmp eq i64 %3217, 0
  %3234 = zext i1 %3233 to i8
  store i8 %3234, i8* %34, align 1
  %3235 = lshr i64 %3217, 63
  %3236 = trunc i64 %3235 to i8
  store i8 %3236, i8* %37, align 1
  %3237 = lshr i64 %3216, 63
  %3238 = xor i64 %3235, %3237
  %3239 = xor i64 %3235, %3215
  %3240 = add nuw nsw i64 %3238, %3239
  %3241 = icmp eq i64 %3240, 2
  %3242 = zext i1 %3241 to i8
  store i8 %3242, i8* %43, align 1
  %3243 = add i64 %3217, 4
  %3244 = add i64 %3111, 95
  store i64 %3244, i64* %3, align 8
  %3245 = inttoptr i64 %3243 to i32*
  %3246 = load i32, i32* %3245, align 4
  %3247 = sext i32 %3246 to i64
  %3248 = mul nsw i64 %3247, 104
  store i64 %3248, i64* %RAX.i1555, align 8
  %3249 = load i64, i64* %RSI.i4246, align 8
  %3250 = add i64 %3248, %3249
  %3251 = lshr i64 %3250, 63
  %3252 = add i64 %3250, 76
  %3253 = icmp ugt i64 %3250, -77
  %3254 = zext i1 %3253 to i8
  store i8 %3254, i8* %19, align 1
  %3255 = trunc i64 %3252 to i32
  %3256 = and i32 %3255, 255
  %3257 = tail call i32 @llvm.ctpop.i32(i32 %3256)
  %3258 = trunc i32 %3257 to i8
  %3259 = and i8 %3258, 1
  %3260 = xor i8 %3259, 1
  store i8 %3260, i8* %26, align 1
  %3261 = xor i64 %3252, %3250
  %3262 = lshr i64 %3261, 4
  %3263 = trunc i64 %3262 to i8
  %3264 = and i8 %3263, 1
  store i8 %3264, i8* %31, align 1
  %3265 = icmp eq i64 %3252, 0
  %3266 = zext i1 %3265 to i8
  store i8 %3266, i8* %34, align 1
  %3267 = lshr i64 %3252, 63
  %3268 = trunc i64 %3267 to i8
  store i8 %3268, i8* %37, align 1
  %3269 = xor i64 %3267, %3251
  %3270 = add nuw nsw i64 %3269, %3267
  %3271 = icmp eq i64 %3270, 2
  %3272 = zext i1 %3271 to i8
  store i8 %3272, i8* %43, align 1
  %3273 = load i64, i64* %RDX.i4244, align 8
  store i64 %3273, i64* %RDI.i4254, align 8
  %3274 = load i64, i64* %RBP.i, align 8
  %3275 = add i64 %3274, -920
  %3276 = add i64 %3111, 116
  store i64 %3276, i64* %3, align 8
  %3277 = inttoptr i64 %3275 to i64*
  store i64 %3252, i64* %3277, align 8
  %3278 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %3279 = load i64, i64* %3, align 8
  store i64 %3278, i64* %RSI.i4246, align 8
  %3280 = load i64, i64* %RBP.i, align 8
  %3281 = add i64 %3280, -920
  %3282 = add i64 %3279, 10
  store i64 %3282, i64* %3, align 8
  %3283 = inttoptr i64 %3281 to i64*
  %3284 = load i64, i64* %3283, align 8
  store i64 %3284, i64* %RDX.i4244, align 8
  %3285 = add i64 %3279, 132693
  %3286 = add i64 %3279, 15
  %3287 = load i64, i64* %6, align 8
  %3288 = add i64 %3287, -8
  %3289 = inttoptr i64 %3288 to i64*
  store i64 %3286, i64* %3289, align 8
  store i64 %3288, i64* %6, align 8
  store i64 %3285, i64* %3, align 8
  %call2_41c5c5 = tail call %struct.Memory* @sub_43cc10.add_eyevalues(%struct.State* nonnull %0, i64 %3285, %struct.Memory* %call2_41c4f1)
  %.pre295 = load i64, i64* %3, align 8
  br label %block_.L_41c5ca

block_.L_41c5ca:                                  ; preds = %block_41c3f1, %block_41c3d0, %block_.L_41c3b2, %block_.L_41c547
  %3290 = phi i64 [ %2647, %block_.L_41c3b2 ], [ %2712, %block_41c3d0 ], [ %2780, %block_41c3f1 ], [ %.pre295, %block_.L_41c547 ]
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.24, %block_.L_41c3b2 ], [ %MEMORY.24, %block_41c3d0 ], [ %MEMORY.24, %block_41c3f1 ], [ %call2_41c5c5, %block_.L_41c547 ]
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  %3291 = load i64, i64* %RBP.i, align 8
  %3292 = add i64 %3291, -24
  %3293 = add i64 %3290, 14
  store i64 %3293, i64* %3, align 8
  %3294 = inttoptr i64 %3292 to i32*
  %3295 = load i32, i32* %3294, align 4
  %3296 = sext i32 %3295 to i64
  %3297 = mul nsw i64 %3296, 36
  store i64 %3297, i64* %RCX.i4050.pre-phi, align 8
  %3298 = lshr i64 %3297, 63
  %3299 = add i64 %3297, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %3299, i64* %RAX.i1555, align 8
  %3300 = icmp ult i64 %3299, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %3301 = icmp ult i64 %3299, %3297
  %3302 = or i1 %3300, %3301
  %3303 = zext i1 %3302 to i8
  store i8 %3303, i8* %19, align 1
  %3304 = trunc i64 %3299 to i32
  %3305 = and i32 %3304, 252
  %3306 = tail call i32 @llvm.ctpop.i32(i32 %3305)
  %3307 = trunc i32 %3306 to i8
  %3308 = and i8 %3307, 1
  %3309 = xor i8 %3308, 1
  store i8 %3309, i8* %26, align 1
  %3310 = xor i64 %3297, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %3311 = xor i64 %3310, %3299
  %3312 = lshr i64 %3311, 4
  %3313 = trunc i64 %3312 to i8
  %3314 = and i8 %3313, 1
  store i8 %3314, i8* %31, align 1
  %3315 = icmp eq i64 %3299, 0
  %3316 = zext i1 %3315 to i8
  store i8 %3316, i8* %34, align 1
  %3317 = lshr i64 %3299, 63
  %3318 = trunc i64 %3317 to i8
  store i8 %3318, i8* %37, align 1
  %3319 = xor i64 %3317, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %3320 = xor i64 %3317, %3298
  %3321 = add nuw nsw i64 %3319, %3320
  %3322 = icmp eq i64 %3321, 2
  %3323 = zext i1 %3322 to i8
  store i8 %3323, i8* %43, align 1
  %3324 = inttoptr i64 %3299 to i32*
  %3325 = add i64 %3290, 24
  store i64 %3325, i64* %3, align 8
  %3326 = load i32, i32* %3324, align 4
  %3327 = add i32 %3326, -4
  %3328 = icmp ult i32 %3326, 4
  %3329 = zext i1 %3328 to i8
  store i8 %3329, i8* %19, align 1
  %3330 = and i32 %3327, 255
  %3331 = tail call i32 @llvm.ctpop.i32(i32 %3330)
  %3332 = trunc i32 %3331 to i8
  %3333 = and i8 %3332, 1
  %3334 = xor i8 %3333, 1
  store i8 %3334, i8* %26, align 1
  %3335 = xor i32 %3327, %3326
  %3336 = lshr i32 %3335, 4
  %3337 = trunc i32 %3336 to i8
  %3338 = and i8 %3337, 1
  store i8 %3338, i8* %31, align 1
  %3339 = icmp eq i32 %3327, 0
  %3340 = zext i1 %3339 to i8
  store i8 %3340, i8* %34, align 1
  %3341 = lshr i32 %3327, 31
  %3342 = trunc i32 %3341 to i8
  store i8 %3342, i8* %37, align 1
  %3343 = lshr i32 %3326, 31
  %3344 = xor i32 %3341, %3343
  %3345 = add nuw nsw i32 %3344, %3343
  %3346 = icmp eq i32 %3345, 2
  %3347 = zext i1 %3346 to i8
  store i8 %3347, i8* %43, align 1
  %.v420 = select i1 %3339, i64 30, i64 562
  %3348 = add i64 %3290, %.v420
  store i64 %3348, i64* %3, align 8
  br i1 %3339, label %block_41c5e8, label %block_.L_41c7fc

block_41c5e8:                                     ; preds = %block_.L_41c5ca
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  %3349 = load i64, i64* %RBP.i, align 8
  %3350 = add i64 %3349, -24
  %3351 = add i64 %3348, 14
  store i64 %3351, i64* %3, align 8
  %3352 = inttoptr i64 %3350 to i32*
  %3353 = load i32, i32* %3352, align 4
  %3354 = sext i32 %3353 to i64
  %3355 = mul nsw i64 %3354, 36
  store i64 %3355, i64* %RCX.i4050.pre-phi, align 8
  %3356 = lshr i64 %3355, 63
  %3357 = add i64 %3355, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %3357, i64* %RAX.i1555, align 8
  %3358 = icmp ult i64 %3357, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %3359 = icmp ult i64 %3357, %3355
  %3360 = or i1 %3358, %3359
  %3361 = zext i1 %3360 to i8
  store i8 %3361, i8* %19, align 1
  %3362 = trunc i64 %3357 to i32
  %3363 = and i32 %3362, 252
  %3364 = tail call i32 @llvm.ctpop.i32(i32 %3363)
  %3365 = trunc i32 %3364 to i8
  %3366 = and i8 %3365, 1
  %3367 = xor i8 %3366, 1
  store i8 %3367, i8* %26, align 1
  %3368 = xor i64 %3355, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %3369 = xor i64 %3368, %3357
  %3370 = lshr i64 %3369, 4
  %3371 = trunc i64 %3370 to i8
  %3372 = and i8 %3371, 1
  store i8 %3372, i8* %31, align 1
  %3373 = icmp eq i64 %3357, 0
  %3374 = zext i1 %3373 to i8
  store i8 %3374, i8* %34, align 1
  %3375 = lshr i64 %3357, 63
  %3376 = trunc i64 %3375 to i8
  store i8 %3376, i8* %37, align 1
  %3377 = xor i64 %3375, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %3378 = xor i64 %3375, %3356
  %3379 = add nuw nsw i64 %3377, %3378
  %3380 = icmp eq i64 %3379, 2
  %3381 = zext i1 %3380 to i8
  store i8 %3381, i8* %43, align 1
  %3382 = add i64 %3355, add (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 12)
  %3383 = add i64 %3348, 24
  store i64 %3383, i64* %3, align 8
  %3384 = inttoptr i64 %3382 to i32*
  %3385 = load i32, i32* %3384, align 4
  %3386 = zext i32 %3385 to i64
  store i64 %3386, i64* %RDX.i4244, align 8
  %3387 = add i64 %3348, 27
  store i64 %3387, i64* %3, align 8
  %3388 = load i32, i32* %3352, align 4
  %3389 = sub i32 %3385, %3388
  %3390 = icmp ult i32 %3385, %3388
  %3391 = zext i1 %3390 to i8
  store i8 %3391, i8* %19, align 1
  %3392 = and i32 %3389, 255
  %3393 = tail call i32 @llvm.ctpop.i32(i32 %3392)
  %3394 = trunc i32 %3393 to i8
  %3395 = and i8 %3394, 1
  %3396 = xor i8 %3395, 1
  store i8 %3396, i8* %26, align 1
  %3397 = xor i32 %3388, %3385
  %3398 = xor i32 %3397, %3389
  %3399 = lshr i32 %3398, 4
  %3400 = trunc i32 %3399 to i8
  %3401 = and i8 %3400, 1
  store i8 %3401, i8* %31, align 1
  %3402 = icmp eq i32 %3389, 0
  %3403 = zext i1 %3402 to i8
  store i8 %3403, i8* %34, align 1
  %3404 = lshr i32 %3389, 31
  %3405 = trunc i32 %3404 to i8
  store i8 %3405, i8* %37, align 1
  %3406 = lshr i32 %3385, 31
  %3407 = lshr i32 %3388, 31
  %3408 = xor i32 %3407, %3406
  %3409 = xor i32 %3404, %3406
  %3410 = add nuw nsw i32 %3409, %3408
  %3411 = icmp eq i32 %3410, 2
  %3412 = zext i1 %3411 to i8
  store i8 %3412, i8* %43, align 1
  %.v421 = select i1 %3402, i64 33, i64 532
  %3413 = add i64 %3348, %.v421
  store i64 %3413, i64* %3, align 8
  br i1 %3402, label %block_41c609, label %block_.L_41c7fc

block_41c609:                                     ; preds = %block_41c5e8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  store i64 1, i64* %RCX.i4050.pre-phi, align 8
  %3414 = load i64, i64* %RBP.i, align 8
  %3415 = add i64 %3414, -28
  store i64 %3415, i64* %RDX.i4244, align 8
  %3416 = add i64 %3414, -24
  %3417 = add i64 %3413, 23
  store i64 %3417, i64* %3, align 8
  %3418 = inttoptr i64 %3416 to i32*
  %3419 = load i32, i32* %3418, align 4
  %3420 = sext i32 %3419 to i64
  %3421 = mul nsw i64 %3420, 36
  store i64 %3421, i64* %RSI.i4246, align 8
  %3422 = lshr i64 %3421, 63
  %3423 = add i64 %3421, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %3423, i64* %RDI.i4254, align 8
  %3424 = icmp ult i64 %3423, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %3425 = icmp ult i64 %3423, %3421
  %3426 = or i1 %3424, %3425
  %3427 = zext i1 %3426 to i8
  store i8 %3427, i8* %19, align 1
  %3428 = trunc i64 %3423 to i32
  %3429 = and i32 %3428, 252
  %3430 = tail call i32 @llvm.ctpop.i32(i32 %3429)
  %3431 = trunc i32 %3430 to i8
  %3432 = and i8 %3431, 1
  %3433 = xor i8 %3432, 1
  store i8 %3433, i8* %26, align 1
  %3434 = xor i64 %3421, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %3435 = xor i64 %3434, %3423
  %3436 = lshr i64 %3435, 4
  %3437 = trunc i64 %3436 to i8
  %3438 = and i8 %3437, 1
  store i8 %3438, i8* %31, align 1
  %3439 = icmp eq i64 %3423, 0
  %3440 = zext i1 %3439 to i8
  store i8 %3440, i8* %34, align 1
  %3441 = lshr i64 %3423, 63
  %3442 = trunc i64 %3441 to i8
  store i8 %3442, i8* %37, align 1
  %3443 = xor i64 %3441, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %3444 = xor i64 %3441, %3422
  %3445 = add nuw nsw i64 %3443, %3444
  %3446 = icmp eq i64 %3445, 2
  %3447 = zext i1 %3446 to i8
  store i8 %3447, i8* %43, align 1
  %3448 = add i64 %3421, add (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 12)
  %3449 = add i64 %3413, 36
  store i64 %3449, i64* %3, align 8
  %3450 = inttoptr i64 %3448 to i32*
  %3451 = load i32, i32* %3450, align 4
  %3452 = zext i32 %3451 to i64
  store i64 %3452, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RSI.i4246, align 8
  %3453 = add i64 %3414, -928
  %3454 = add i64 %3413, 46
  store i64 %3454, i64* %3, align 8
  %3455 = inttoptr i64 %3453 to i64*
  store i64 %3415, i64* %3455, align 8
  %3456 = load i32, i32* %ECX.i4047.pre-phi, align 4
  %3457 = zext i32 %3456 to i64
  %3458 = load i64, i64* %3, align 8
  store i64 %3457, i64* %RDX.i4244, align 8
  %3459 = load i64, i64* %RBP.i, align 8
  %3460 = add i64 %3459, -928
  %3461 = add i64 %3458, 9
  store i64 %3461, i64* %3, align 8
  %3462 = inttoptr i64 %3460 to i64*
  %3463 = load i64, i64* %3462, align 8
  store i64 %3463, i64* %RAX.i1555, align 8
  %3464 = add i64 %3459, -932
  %3465 = add i64 %3458, 15
  store i64 %3465, i64* %3, align 8
  %3466 = inttoptr i64 %3464 to i32*
  store i32 %3456, i32* %3466, align 4
  %3467 = load i64, i64* %RAX.i1555, align 8
  %3468 = load i64, i64* %3, align 8
  store i64 %3467, i64* %RCX.i4050.pre-phi, align 8
  %3469 = load i64, i64* %RBP.i, align 8
  %3470 = add i64 %3469, -932
  %3471 = add i64 %3468, 10
  store i64 %3471, i64* %3, align 8
  %3472 = inttoptr i64 %3470 to i32*
  %3473 = load i32, i32* %3472, align 4
  %3474 = zext i32 %3473 to i64
  store i64 %3474, i64* %R8.i3778, align 8
  %3475 = add i64 %3468, 118538
  %3476 = add i64 %3468, 15
  %3477 = load i64, i64* %6, align 8
  %3478 = add i64 %3477, -8
  %3479 = inttoptr i64 %3478 to i64*
  store i64 %3476, i64* %3479, align 8
  store i64 %3478, i64* %6, align 8
  store i64 %3475, i64* %3, align 8
  %call2_41c650 = tail call %struct.Memory* @sub_439550.find_eye_dragons(%struct.State* nonnull %0, i64 %3475, %struct.Memory* %MEMORY.28)
  %3480 = load i32, i32* %EAX.i4253, align 4
  %3481 = load i64, i64* %3, align 8
  %3482 = add i32 %3480, -1
  %3483 = icmp eq i32 %3480, 0
  %3484 = zext i1 %3483 to i8
  store i8 %3484, i8* %19, align 1
  %3485 = and i32 %3482, 255
  %3486 = tail call i32 @llvm.ctpop.i32(i32 %3485)
  %3487 = trunc i32 %3486 to i8
  %3488 = and i8 %3487, 1
  %3489 = xor i8 %3488, 1
  store i8 %3489, i8* %26, align 1
  %3490 = xor i32 %3482, %3480
  %3491 = lshr i32 %3490, 4
  %3492 = trunc i32 %3491 to i8
  %3493 = and i8 %3492, 1
  store i8 %3493, i8* %31, align 1
  %3494 = icmp eq i32 %3482, 0
  %3495 = zext i1 %3494 to i8
  store i8 %3495, i8* %34, align 1
  %3496 = lshr i32 %3482, 31
  %3497 = trunc i32 %3496 to i8
  store i8 %3497, i8* %37, align 1
  %3498 = lshr i32 %3480, 31
  %3499 = xor i32 %3496, %3498
  %3500 = add nuw nsw i32 %3499, %3498
  %3501 = icmp eq i32 %3500, 2
  %3502 = zext i1 %3501 to i8
  store i8 %3502, i8* %43, align 1
  %.v422 = select i1 %3494, i64 9, i64 423
  %3503 = add i64 %3481, %.v422
  store i64 %3503, i64* %3, align 8
  br i1 %3494, label %block_41c65e, label %block_.L_41c7fc

block_41c65e:                                     ; preds = %block_41c609
  %3504 = load i64, i64* %RBP.i, align 8
  %3505 = add i64 %3504, -28
  %3506 = add i64 %3503, 4
  store i64 %3506, i64* %3, align 8
  %3507 = inttoptr i64 %3505 to i32*
  %3508 = load i32, i32* %3507, align 4
  %3509 = sext i32 %3508 to i64
  store i64 %3509, i64* %RAX.i1555, align 8
  %3510 = add nsw i64 %3509, 12099168
  %3511 = add i64 %3503, 12
  store i64 %3511, i64* %3, align 8
  %3512 = inttoptr i64 %3510 to i8*
  %3513 = load i8, i8* %3512, align 1
  %3514 = zext i8 %3513 to i64
  store i64 %3514, i64* %RCX.i4050.pre-phi, align 8
  %3515 = zext i8 %3513 to i32
  %3516 = add nsw i32 %3515, -1
  %3517 = icmp eq i8 %3513, 0
  %3518 = zext i1 %3517 to i8
  store i8 %3518, i8* %19, align 1
  %3519 = and i32 %3516, 255
  %3520 = tail call i32 @llvm.ctpop.i32(i32 %3519)
  %3521 = trunc i32 %3520 to i8
  %3522 = and i8 %3521, 1
  %3523 = xor i8 %3522, 1
  store i8 %3523, i8* %26, align 1
  %3524 = xor i32 %3516, %3515
  %3525 = lshr i32 %3524, 4
  %3526 = trunc i32 %3525 to i8
  %3527 = and i8 %3526, 1
  store i8 %3527, i8* %31, align 1
  %3528 = icmp eq i32 %3516, 0
  %3529 = zext i1 %3528 to i8
  store i8 %3529, i8* %34, align 1
  %3530 = lshr i32 %3516, 31
  %3531 = trunc i32 %3530 to i8
  store i8 %3531, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v423 = select i1 %3528, i64 21, i64 26
  %3532 = add i64 %3503, %.v423
  store i64 %3532, i64* %3, align 8
  br i1 %3528, label %block_41c673, label %block_.L_41c678

block_41c673:                                     ; preds = %block_41c65e
  %3533 = add i64 %3532, 45
  store i64 %3533, i64* %3, align 8
  br label %block_.L_41c6a0

block_.L_41c678:                                  ; preds = %block_41c65e
  store i64 ptrtoint (%G__0x57ad9b_type* @G__0x57ad9b to i64), i64* %RDI.i4254, align 8
  store i64 266, i64* %RSI.i4246, align 8
  store i64 ptrtoint (%G__0x57af95_type* @G__0x57af95 to i64), i64* %RDX.i4244, align 8
  store i64 4294967295, i64* %RAX.i1555, align 8
  store i64 4294967295, i64* %RCX.i4050.pre-phi, align 8
  store i64 4294967295, i64* %R8.i3778, align 8
  %3534 = add i64 %3532, 219672
  %3535 = add i64 %3532, 40
  %3536 = load i64, i64* %6, align 8
  %3537 = add i64 %3536, -8
  %3538 = inttoptr i64 %3537 to i64*
  store i64 %3535, i64* %3538, align 8
  store i64 %3537, i64* %6, align 8
  store i64 %3534, i64* %3, align 8
  %call2_41c69b = tail call %struct.Memory* @sub_452090.abortgo(%struct.State* nonnull %0, i64 %3534, %struct.Memory* %call2_41c650)
  %.pre296 = load i64, i64* %3, align 8
  br label %block_.L_41c6a0

block_.L_41c6a0:                                  ; preds = %block_.L_41c678, %block_41c673
  %3539 = phi i64 [ %.pre296, %block_.L_41c678 ], [ %3533, %block_41c673 ]
  %MEMORY.29 = phi %struct.Memory* [ %call2_41c69b, %block_.L_41c678 ], [ %call2_41c650, %block_41c673 ]
  %3540 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %19, align 1
  %3541 = and i32 %3540, 255
  %3542 = tail call i32 @llvm.ctpop.i32(i32 %3541)
  %3543 = trunc i32 %3542 to i8
  %3544 = and i8 %3543, 1
  %3545 = xor i8 %3544, 1
  store i8 %3545, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %3546 = icmp eq i32 %3540, 0
  %3547 = zext i1 %3546 to i8
  store i8 %3547, i8* %34, align 1
  %3548 = lshr i32 %3540, 31
  %3549 = trunc i32 %3548 to i8
  store i8 %3549, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v424 = select i1 %3546, i64 14, i64 19
  %3550 = add i64 %3539, %.v424
  store i64 %3550, i64* %3, align 8
  br i1 %3546, label %block_41c6ae, label %block_.L_41c6b3

block_41c6ae:                                     ; preds = %block_.L_41c6a0
  %3551 = add i64 %3550, 34
  store i64 %3551, i64* %3, align 8
  br label %block_.L_41c6d0

block_.L_41c6b3:                                  ; preds = %block_.L_41c6a0
  store i64 ptrtoint (%G__0x57af5f_type* @G__0x57af5f to i64), i64* %RDI.i4254, align 8
  %3552 = load i64, i64* %RBP.i, align 8
  %3553 = add i64 %3552, -24
  %3554 = add i64 %3550, 13
  store i64 %3554, i64* %3, align 8
  %3555 = inttoptr i64 %3553 to i32*
  %3556 = load i32, i32* %3555, align 4
  %3557 = zext i32 %3556 to i64
  store i64 %3557, i64* %RSI.i4246, align 8
  %3558 = add i64 %3552, -28
  %3559 = add i64 %3550, 16
  store i64 %3559, i64* %3, align 8
  %3560 = inttoptr i64 %3558 to i32*
  %3561 = load i32, i32* %3560, align 4
  %3562 = zext i32 %3561 to i64
  store i64 %3562, i64* %RDX.i4244, align 8
  store i8 0, i8* %AL.i3758, align 1
  %3563 = add i64 %3550, 218877
  %3564 = add i64 %3550, 23
  %3565 = load i64, i64* %6, align 8
  %3566 = add i64 %3565, -8
  %3567 = inttoptr i64 %3566 to i64*
  store i64 %3564, i64* %3567, align 8
  store i64 %3566, i64* %6, align 8
  store i64 %3563, i64* %3, align 8
  %call2_41c6c5 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %3563, %struct.Memory* %MEMORY.29)
  %3568 = load i64, i64* %RBP.i, align 8
  %3569 = add i64 %3568, -936
  %3570 = load i32, i32* %EAX.i4253, align 4
  %3571 = load i64, i64* %3, align 8
  %3572 = add i64 %3571, 6
  store i64 %3572, i64* %3, align 8
  %3573 = inttoptr i64 %3569 to i32*
  store i32 %3570, i32* %3573, align 4
  %.pre297 = load i64, i64* %3, align 8
  br label %block_.L_41c6d0

block_.L_41c6d0:                                  ; preds = %block_.L_41c6b3, %block_41c6ae
  %3574 = phi i64 [ %.pre297, %block_.L_41c6b3 ], [ %3551, %block_41c6ae ]
  %MEMORY.30 = phi %struct.Memory* [ %call2_41c6c5, %block_.L_41c6b3 ], [ %MEMORY.29, %block_41c6ae ]
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX.i1555, align 8
  %3575 = load i64, i64* %RBP.i, align 8
  %3576 = add i64 %3575, -24
  %3577 = add i64 %3574, 14
  store i64 %3577, i64* %3, align 8
  %3578 = inttoptr i64 %3576 to i32*
  %3579 = load i32, i32* %3578, align 4
  %3580 = sext i32 %3579 to i64
  %3581 = mul nsw i64 %3580, 36
  store i64 %3581, i64* %RCX.i4050.pre-phi, align 8
  %3582 = add i64 %3581, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %3583 = lshr i64 %3582, 63
  %3584 = add i64 %3581, add (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 16)
  store i64 %3584, i64* %RAX.i1555, align 8
  %3585 = icmp ugt i64 %3582, -17
  %3586 = zext i1 %3585 to i8
  store i8 %3586, i8* %19, align 1
  %3587 = trunc i64 %3584 to i32
  %3588 = and i32 %3587, 252
  %3589 = tail call i32 @llvm.ctpop.i32(i32 %3588)
  %3590 = trunc i32 %3589 to i8
  %3591 = and i8 %3590, 1
  %3592 = xor i8 %3591, 1
  store i8 %3592, i8* %26, align 1
  %3593 = xor i64 %3582, 16
  %3594 = xor i64 %3593, %3584
  %3595 = lshr i64 %3594, 4
  %3596 = trunc i64 %3595 to i8
  %3597 = and i8 %3596, 1
  store i8 %3597, i8* %31, align 1
  %3598 = icmp eq i64 %3584, 0
  %3599 = zext i1 %3598 to i8
  store i8 %3599, i8* %34, align 1
  %3600 = lshr i64 %3584, 63
  %3601 = trunc i64 %3600 to i8
  store i8 %3601, i8* %37, align 1
  %3602 = xor i64 %3600, %3583
  %3603 = add nuw nsw i64 %3602, %3600
  %3604 = icmp eq i64 %3603, 2
  %3605 = zext i1 %3604 to i8
  store i8 %3605, i8* %43, align 1
  store i64 %3584, i64* %RDI.i4254, align 8
  %3606 = add i64 %3574, 125648
  %3607 = add i64 %3574, 33
  %3608 = load i64, i64* %6, align 8
  %3609 = add i64 %3608, -8
  %3610 = inttoptr i64 %3609 to i64*
  store i64 %3607, i64* %3610, align 8
  store i64 %3609, i64* %6, align 8
  store i64 %3606, i64* %3, align 8
  %call2_41c6ec = tail call %struct.Memory* @sub_43b1a0.eye_move_urgency(%struct.State* nonnull %0, i64 %3606, %struct.Memory* %MEMORY.30)
  %3611 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i4050.pre-phi, align 8
  %3612 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %3612, i64* %RDI.i4254, align 8
  %3613 = load i64, i64* %RBP.i, align 8
  %3614 = add i64 %3613, -28
  %3615 = add i64 %3611, 22
  store i64 %3615, i64* %3, align 8
  %3616 = inttoptr i64 %3614 to i32*
  %3617 = load i32, i32* %3616, align 4
  %3618 = sext i32 %3617 to i64
  %3619 = mul nsw i64 %3618, 76
  store i64 %3619, i64* %RDX.i4244, align 8
  %3620 = lshr i64 %3619, 63
  %3621 = add i64 %3619, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %3621, i64* %RCX.i4050.pre-phi, align 8
  %3622 = icmp ult i64 %3621, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %3623 = icmp ult i64 %3621, %3619
  %3624 = or i1 %3622, %3623
  %3625 = zext i1 %3624 to i8
  store i8 %3625, i8* %19, align 1
  %3626 = trunc i64 %3621 to i32
  %3627 = and i32 %3626, 252
  %3628 = tail call i32 @llvm.ctpop.i32(i32 %3627)
  %3629 = trunc i32 %3628 to i8
  %3630 = and i8 %3629, 1
  %3631 = xor i8 %3630, 1
  store i8 %3631, i8* %26, align 1
  %3632 = xor i64 %3619, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %3633 = xor i64 %3632, %3621
  %3634 = lshr i64 %3633, 4
  %3635 = trunc i64 %3634 to i8
  %3636 = and i8 %3635, 1
  store i8 %3636, i8* %31, align 1
  %3637 = icmp eq i64 %3621, 0
  %3638 = zext i1 %3637 to i8
  store i8 %3638, i8* %34, align 1
  %3639 = lshr i64 %3621, 63
  %3640 = trunc i64 %3639 to i8
  store i8 %3640, i8* %37, align 1
  %3641 = xor i64 %3639, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %3642 = xor i64 %3639, %3620
  %3643 = add nuw nsw i64 %3641, %3642
  %3644 = icmp eq i64 %3643, 2
  %3645 = zext i1 %3644 to i8
  store i8 %3645, i8* %43, align 1
  %3646 = add i64 %3619, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %3647 = add i64 %3611, 33
  store i64 %3647, i64* %3, align 8
  %3648 = inttoptr i64 %3646 to i32*
  %3649 = load i32, i32* %3648, align 4
  %3650 = sext i32 %3649 to i64
  %3651 = mul nsw i64 %3650, 104
  store i64 %3651, i64* %RCX.i4050.pre-phi, align 8
  %3652 = load i64, i64* %RDI.i4254, align 8
  %3653 = add i64 %3651, %3652
  %3654 = lshr i64 %3653, 63
  %3655 = add i64 %3653, 76
  store i64 %3655, i64* %RDI.i4254, align 8
  %3656 = icmp ugt i64 %3653, -77
  %3657 = zext i1 %3656 to i8
  store i8 %3657, i8* %19, align 1
  %3658 = trunc i64 %3655 to i32
  %3659 = and i32 %3658, 255
  %3660 = tail call i32 @llvm.ctpop.i32(i32 %3659)
  %3661 = trunc i32 %3660 to i8
  %3662 = and i8 %3661, 1
  %3663 = xor i8 %3662, 1
  store i8 %3663, i8* %26, align 1
  %3664 = xor i64 %3655, %3653
  %3665 = lshr i64 %3664, 4
  %3666 = trunc i64 %3665 to i8
  %3667 = and i8 %3666, 1
  store i8 %3667, i8* %31, align 1
  %3668 = icmp eq i64 %3655, 0
  %3669 = zext i1 %3668 to i8
  store i8 %3669, i8* %34, align 1
  %3670 = lshr i64 %3655, 63
  %3671 = trunc i64 %3670 to i8
  store i8 %3671, i8* %37, align 1
  %3672 = xor i64 %3670, %3654
  %3673 = add nuw nsw i64 %3672, %3670
  %3674 = icmp eq i64 %3673, 2
  %3675 = zext i1 %3674 to i8
  store i8 %3675, i8* %43, align 1
  %3676 = load i64, i64* %RBP.i, align 8
  %3677 = add i64 %3676, -940
  %3678 = load i32, i32* %EAX.i4253, align 4
  %3679 = add i64 %3611, 50
  store i64 %3679, i64* %3, align 8
  %3680 = inttoptr i64 %3677 to i32*
  store i32 %3678, i32* %3680, align 4
  %3681 = load i64, i64* %3, align 8
  %3682 = add i64 %3681, 125565
  %3683 = add i64 %3681, 5
  %3684 = load i64, i64* %6, align 8
  %3685 = add i64 %3684, -8
  %3686 = inttoptr i64 %3685 to i64*
  store i64 %3683, i64* %3686, align 8
  store i64 %3685, i64* %6, align 8
  store i64 %3682, i64* %3, align 8
  %call2_41c723 = tail call %struct.Memory* @sub_43b1a0.eye_move_urgency(%struct.State* nonnull %0, i64 %3682, %struct.Memory* %call2_41c6ec)
  %3687 = load i64, i64* %RBP.i, align 8
  %3688 = add i64 %3687, -940
  %3689 = load i64, i64* %3, align 8
  %3690 = add i64 %3689, 6
  store i64 %3690, i64* %3, align 8
  %3691 = inttoptr i64 %3688 to i32*
  %3692 = load i32, i32* %3691, align 4
  %3693 = zext i32 %3692 to i64
  store i64 %3693, i64* %RSI.i4246, align 8
  %3694 = load i32, i32* %EAX.i4253, align 4
  %3695 = sub i32 %3692, %3694
  %3696 = icmp ult i32 %3692, %3694
  %3697 = zext i1 %3696 to i8
  store i8 %3697, i8* %19, align 1
  %3698 = and i32 %3695, 255
  %3699 = tail call i32 @llvm.ctpop.i32(i32 %3698)
  %3700 = trunc i32 %3699 to i8
  %3701 = and i8 %3700, 1
  %3702 = xor i8 %3701, 1
  store i8 %3702, i8* %26, align 1
  %3703 = xor i32 %3694, %3692
  %3704 = xor i32 %3703, %3695
  %3705 = lshr i32 %3704, 4
  %3706 = trunc i32 %3705 to i8
  %3707 = and i8 %3706, 1
  store i8 %3707, i8* %31, align 1
  %3708 = icmp eq i32 %3695, 0
  %3709 = zext i1 %3708 to i8
  store i8 %3709, i8* %34, align 1
  %3710 = lshr i32 %3695, 31
  %3711 = trunc i32 %3710 to i8
  store i8 %3711, i8* %37, align 1
  %3712 = lshr i32 %3692, 31
  %3713 = lshr i32 %3694, 31
  %3714 = xor i32 %3713, %3712
  %3715 = xor i32 %3710, %3712
  %3716 = add nuw nsw i32 %3715, %3714
  %3717 = icmp eq i32 %3716, 2
  %3718 = zext i1 %3717 to i8
  store i8 %3718, i8* %43, align 1
  %3719 = icmp ne i8 %3711, 0
  %3720 = xor i1 %3719, %3717
  %3721 = or i1 %3708, %3720
  %.v425 = select i1 %3721, i64 81, i64 14
  %3722 = add i64 %3689, %.v425
  store i64 %3722, i64* %3, align 8
  br i1 %3721, label %block_.L_41c779, label %block_41c736

block_41c736:                                     ; preds = %block_.L_41c6d0
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RCX.i4050.pre-phi, align 8
  %3723 = add i64 %3687, -24
  %3724 = add i64 %3722, 24
  store i64 %3724, i64* %3, align 8
  %3725 = inttoptr i64 %3723 to i32*
  %3726 = load i32, i32* %3725, align 4
  %3727 = sext i32 %3726 to i64
  %3728 = mul nsw i64 %3727, 36
  store i64 %3728, i64* %RDX.i4244, align 8
  %3729 = lshr i64 %3728, 63
  %3730 = add i64 %3728, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  store i64 %3730, i64* %RCX.i4050.pre-phi, align 8
  %3731 = icmp ult i64 %3730, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %3732 = icmp ult i64 %3730, %3728
  %3733 = or i1 %3731, %3732
  %3734 = zext i1 %3733 to i8
  store i8 %3734, i8* %19, align 1
  %3735 = trunc i64 %3730 to i32
  %3736 = and i32 %3735, 252
  %3737 = tail call i32 @llvm.ctpop.i32(i32 %3736)
  %3738 = trunc i32 %3737 to i8
  %3739 = and i8 %3738, 1
  %3740 = xor i8 %3739, 1
  store i8 %3740, i8* %26, align 1
  %3741 = xor i64 %3728, ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64)
  %3742 = xor i64 %3741, %3730
  %3743 = lshr i64 %3742, 4
  %3744 = trunc i64 %3743 to i8
  %3745 = and i8 %3744, 1
  store i8 %3745, i8* %31, align 1
  %3746 = icmp eq i64 %3730, 0
  %3747 = zext i1 %3746 to i8
  store i8 %3747, i8* %34, align 1
  %3748 = lshr i64 %3730, 63
  %3749 = trunc i64 %3748 to i8
  store i8 %3749, i8* %37, align 1
  %3750 = xor i64 %3748, lshr (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 63)
  %3751 = xor i64 %3748, %3729
  %3752 = add nuw nsw i64 %3750, %3751
  %3753 = icmp eq i64 %3752, 2
  %3754 = zext i1 %3753 to i8
  store i8 %3754, i8* %43, align 1
  %3755 = add i64 %3728, add (i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64 24)
  %3756 = add i64 %3722, 34
  store i64 %3756, i64* %3, align 8
  %3757 = inttoptr i64 %3755 to i32*
  %3758 = load i32, i32* %3757, align 4
  %3759 = zext i32 %3758 to i64
  store i64 %3759, i64* %RSI.i4246, align 8
  %3760 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %3760, i64* %RCX.i4050.pre-phi, align 8
  %3761 = add i64 %3687, -28
  %3762 = add i64 %3722, 46
  store i64 %3762, i64* %3, align 8
  %3763 = inttoptr i64 %3761 to i32*
  %3764 = load i32, i32* %3763, align 4
  %3765 = sext i32 %3764 to i64
  %3766 = mul nsw i64 %3765, 76
  store i64 %3766, i64* %RDX.i4244, align 8
  %3767 = lshr i64 %3766, 63
  %3768 = load i64, i64* %RAX.i1555, align 8
  %3769 = add i64 %3766, %3768
  store i64 %3769, i64* %RAX.i1555, align 8
  %3770 = icmp ult i64 %3769, %3768
  %3771 = icmp ult i64 %3769, %3766
  %3772 = or i1 %3770, %3771
  %3773 = zext i1 %3772 to i8
  store i8 %3773, i8* %19, align 1
  %3774 = trunc i64 %3769 to i32
  %3775 = and i32 %3774, 255
  %3776 = tail call i32 @llvm.ctpop.i32(i32 %3775)
  %3777 = trunc i32 %3776 to i8
  %3778 = and i8 %3777, 1
  %3779 = xor i8 %3778, 1
  store i8 %3779, i8* %26, align 1
  %3780 = xor i64 %3766, %3768
  %3781 = xor i64 %3780, %3769
  %3782 = lshr i64 %3781, 4
  %3783 = trunc i64 %3782 to i8
  %3784 = and i8 %3783, 1
  store i8 %3784, i8* %31, align 1
  %3785 = icmp eq i64 %3769, 0
  %3786 = zext i1 %3785 to i8
  store i8 %3786, i8* %34, align 1
  %3787 = lshr i64 %3769, 63
  %3788 = trunc i64 %3787 to i8
  store i8 %3788, i8* %37, align 1
  %3789 = lshr i64 %3768, 63
  %3790 = xor i64 %3787, %3789
  %3791 = xor i64 %3787, %3767
  %3792 = add nuw nsw i64 %3790, %3791
  %3793 = icmp eq i64 %3792, 2
  %3794 = zext i1 %3793 to i8
  store i8 %3794, i8* %43, align 1
  %3795 = add i64 %3769, 4
  %3796 = add i64 %3722, 57
  store i64 %3796, i64* %3, align 8
  %3797 = inttoptr i64 %3795 to i32*
  %3798 = load i32, i32* %3797, align 4
  %3799 = sext i32 %3798 to i64
  %3800 = mul nsw i64 %3799, 104
  store i64 %3800, i64* %RAX.i1555, align 8
  %3801 = lshr i64 %3800, 63
  %3802 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %3803 = add i64 %3800, %3802
  store i64 %3803, i64* %RCX.i4050.pre-phi, align 8
  %3804 = icmp ult i64 %3803, %3802
  %3805 = icmp ult i64 %3803, %3800
  %3806 = or i1 %3804, %3805
  %3807 = zext i1 %3806 to i8
  store i8 %3807, i8* %19, align 1
  %3808 = trunc i64 %3803 to i32
  %3809 = and i32 %3808, 255
  %3810 = tail call i32 @llvm.ctpop.i32(i32 %3809)
  %3811 = trunc i32 %3810 to i8
  %3812 = and i8 %3811, 1
  %3813 = xor i8 %3812, 1
  store i8 %3813, i8* %26, align 1
  %3814 = xor i64 %3800, %3802
  %3815 = xor i64 %3814, %3803
  %3816 = lshr i64 %3815, 4
  %3817 = trunc i64 %3816 to i8
  %3818 = and i8 %3817, 1
  store i8 %3818, i8* %31, align 1
  %3819 = icmp eq i64 %3803, 0
  %3820 = zext i1 %3819 to i8
  store i8 %3820, i8* %34, align 1
  %3821 = lshr i64 %3803, 63
  %3822 = trunc i64 %3821 to i8
  store i8 %3822, i8* %37, align 1
  %3823 = lshr i64 %3802, 63
  %3824 = xor i64 %3821, %3823
  %3825 = xor i64 %3821, %3801
  %3826 = add nuw nsw i64 %3824, %3825
  %3827 = icmp eq i64 %3826, 2
  %3828 = zext i1 %3827 to i8
  store i8 %3828, i8* %43, align 1
  %3829 = add i64 %3803, 80
  %3830 = load i32, i32* %ESI.i2400, align 4
  %3831 = add i64 %3722, 67
  store i64 %3831, i64* %3, align 8
  %3832 = inttoptr i64 %3829 to i32*
  store i32 %3830, i32* %3832, align 4
  %.pre298 = load i64, i64* %3, align 8
  %.pre299 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41c779

block_.L_41c779:                                  ; preds = %block_41c736, %block_.L_41c6d0
  %3833 = phi i64 [ %.pre299, %block_41c736 ], [ %3687, %block_.L_41c6d0 ]
  %3834 = phi i64 [ %.pre298, %block_41c736 ], [ %3722, %block_.L_41c6d0 ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RCX.i4050.pre-phi, align 8
  %3835 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %3835, i64* %RDX.i4244, align 8
  %3836 = add i64 %3833, -28
  %3837 = add i64 %3834, 32
  store i64 %3837, i64* %3, align 8
  %3838 = inttoptr i64 %3836 to i32*
  %3839 = load i32, i32* %3838, align 4
  %3840 = sext i32 %3839 to i64
  %3841 = mul nsw i64 %3840, 76
  store i64 %3841, i64* %RSI.i4246, align 8
  %3842 = lshr i64 %3841, 63
  %3843 = add i64 %3841, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %3843, i64* %RDI.i4254, align 8
  %3844 = icmp ult i64 %3843, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %3845 = icmp ult i64 %3843, %3841
  %3846 = or i1 %3844, %3845
  %3847 = zext i1 %3846 to i8
  store i8 %3847, i8* %19, align 1
  %3848 = trunc i64 %3843 to i32
  %3849 = and i32 %3848, 252
  %3850 = tail call i32 @llvm.ctpop.i32(i32 %3849)
  %3851 = trunc i32 %3850 to i8
  %3852 = and i8 %3851, 1
  %3853 = xor i8 %3852, 1
  store i8 %3853, i8* %26, align 1
  %3854 = xor i64 %3841, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %3855 = xor i64 %3854, %3843
  %3856 = lshr i64 %3855, 4
  %3857 = trunc i64 %3856 to i8
  %3858 = and i8 %3857, 1
  store i8 %3858, i8* %31, align 1
  %3859 = icmp eq i64 %3843, 0
  %3860 = zext i1 %3859 to i8
  store i8 %3860, i8* %34, align 1
  %3861 = lshr i64 %3843, 63
  %3862 = trunc i64 %3861 to i8
  store i8 %3862, i8* %37, align 1
  %3863 = xor i64 %3861, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %3864 = xor i64 %3861, %3842
  %3865 = add nuw nsw i64 %3863, %3864
  %3866 = icmp eq i64 %3865, 2
  %3867 = zext i1 %3866 to i8
  store i8 %3867, i8* %43, align 1
  %3868 = add i64 %3841, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %3869 = add i64 %3834, 46
  store i64 %3869, i64* %3, align 8
  %3870 = inttoptr i64 %3868 to i32*
  %3871 = load i32, i32* %3870, align 4
  %3872 = sext i32 %3871 to i64
  %3873 = mul nsw i64 %3872, 104
  store i64 %3873, i64* %RSI.i4246, align 8
  %3874 = load i64, i64* %RDX.i4244, align 8
  %3875 = add i64 %3873, %3874
  %3876 = lshr i64 %3875, 63
  %3877 = add i64 %3875, 76
  store i64 %3877, i64* %RDX.i4244, align 8
  %3878 = icmp ugt i64 %3875, -77
  %3879 = zext i1 %3878 to i8
  store i8 %3879, i8* %19, align 1
  %3880 = trunc i64 %3877 to i32
  %3881 = and i32 %3880, 255
  %3882 = tail call i32 @llvm.ctpop.i32(i32 %3881)
  %3883 = trunc i32 %3882 to i8
  %3884 = and i8 %3883, 1
  %3885 = xor i8 %3884, 1
  store i8 %3885, i8* %26, align 1
  %3886 = xor i64 %3877, %3875
  %3887 = lshr i64 %3886, 4
  %3888 = trunc i64 %3887 to i8
  %3889 = and i8 %3888, 1
  store i8 %3889, i8* %31, align 1
  %3890 = icmp eq i64 %3877, 0
  %3891 = zext i1 %3890 to i8
  store i8 %3891, i8* %34, align 1
  %3892 = lshr i64 %3877, 63
  %3893 = trunc i64 %3892 to i8
  store i8 %3893, i8* %37, align 1
  %3894 = xor i64 %3892, %3876
  %3895 = add nuw nsw i64 %3894, %3892
  %3896 = icmp eq i64 %3895, 2
  %3897 = zext i1 %3896 to i8
  store i8 %3897, i8* %43, align 1
  %3898 = load i64, i64* %RBP.i, align 8
  %3899 = add i64 %3898, -24
  %3900 = add i64 %3834, 61
  store i64 %3900, i64* %3, align 8
  %3901 = inttoptr i64 %3899 to i32*
  %3902 = load i32, i32* %3901, align 4
  %3903 = sext i32 %3902 to i64
  %3904 = mul nsw i64 %3903, 36
  %3905 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %3906 = add i64 %3904, %3905
  %3907 = lshr i64 %3906, 63
  %3908 = add i64 %3906, 16
  store i64 %3908, i64* %RCX.i4050.pre-phi, align 8
  %3909 = icmp ugt i64 %3906, -17
  %3910 = zext i1 %3909 to i8
  store i8 %3910, i8* %19, align 1
  %3911 = trunc i64 %3908 to i32
  %3912 = and i32 %3911, 255
  %3913 = tail call i32 @llvm.ctpop.i32(i32 %3912)
  %3914 = trunc i32 %3913 to i8
  %3915 = and i8 %3914, 1
  %3916 = xor i8 %3915, 1
  store i8 %3916, i8* %26, align 1
  %3917 = xor i64 %3906, 16
  %3918 = xor i64 %3917, %3908
  %3919 = lshr i64 %3918, 4
  %3920 = trunc i64 %3919 to i8
  %3921 = and i8 %3920, 1
  store i8 %3921, i8* %31, align 1
  %3922 = icmp eq i64 %3908, 0
  %3923 = zext i1 %3922 to i8
  store i8 %3923, i8* %34, align 1
  %3924 = lshr i64 %3908, 63
  %3925 = trunc i64 %3924 to i8
  store i8 %3925, i8* %37, align 1
  %3926 = xor i64 %3924, %3907
  %3927 = add nuw nsw i64 %3926, %3924
  %3928 = icmp eq i64 %3927, 2
  %3929 = zext i1 %3928 to i8
  store i8 %3929, i8* %43, align 1
  %3930 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %3930, i64* %RSI.i4246, align 8
  %3931 = load i64, i64* %RBP.i, align 8
  %3932 = add i64 %3931, -28
  %3933 = add i64 %3834, 84
  store i64 %3933, i64* %3, align 8
  %3934 = inttoptr i64 %3932 to i32*
  %3935 = load i32, i32* %3934, align 4
  %3936 = sext i32 %3935 to i64
  %3937 = mul nsw i64 %3936, 76
  store i64 %3937, i64* %RDI.i4254, align 8
  %3938 = lshr i64 %3937, 63
  %3939 = load i64, i64* %RAX.i1555, align 8
  %3940 = add i64 %3937, %3939
  store i64 %3940, i64* %RAX.i1555, align 8
  %3941 = icmp ult i64 %3940, %3939
  %3942 = icmp ult i64 %3940, %3937
  %3943 = or i1 %3941, %3942
  %3944 = zext i1 %3943 to i8
  store i8 %3944, i8* %19, align 1
  %3945 = trunc i64 %3940 to i32
  %3946 = and i32 %3945, 255
  %3947 = tail call i32 @llvm.ctpop.i32(i32 %3946)
  %3948 = trunc i32 %3947 to i8
  %3949 = and i8 %3948, 1
  %3950 = xor i8 %3949, 1
  store i8 %3950, i8* %26, align 1
  %3951 = xor i64 %3937, %3939
  %3952 = xor i64 %3951, %3940
  %3953 = lshr i64 %3952, 4
  %3954 = trunc i64 %3953 to i8
  %3955 = and i8 %3954, 1
  store i8 %3955, i8* %31, align 1
  %3956 = icmp eq i64 %3940, 0
  %3957 = zext i1 %3956 to i8
  store i8 %3957, i8* %34, align 1
  %3958 = lshr i64 %3940, 63
  %3959 = trunc i64 %3958 to i8
  store i8 %3959, i8* %37, align 1
  %3960 = lshr i64 %3939, 63
  %3961 = xor i64 %3958, %3960
  %3962 = xor i64 %3958, %3938
  %3963 = add nuw nsw i64 %3961, %3962
  %3964 = icmp eq i64 %3963, 2
  %3965 = zext i1 %3964 to i8
  store i8 %3965, i8* %43, align 1
  %3966 = add i64 %3940, 4
  %3967 = add i64 %3834, 95
  store i64 %3967, i64* %3, align 8
  %3968 = inttoptr i64 %3966 to i32*
  %3969 = load i32, i32* %3968, align 4
  %3970 = sext i32 %3969 to i64
  %3971 = mul nsw i64 %3970, 104
  store i64 %3971, i64* %RAX.i1555, align 8
  %3972 = load i64, i64* %RSI.i4246, align 8
  %3973 = add i64 %3971, %3972
  %3974 = lshr i64 %3973, 63
  %3975 = add i64 %3973, 76
  %3976 = icmp ugt i64 %3973, -77
  %3977 = zext i1 %3976 to i8
  store i8 %3977, i8* %19, align 1
  %3978 = trunc i64 %3975 to i32
  %3979 = and i32 %3978, 255
  %3980 = tail call i32 @llvm.ctpop.i32(i32 %3979)
  %3981 = trunc i32 %3980 to i8
  %3982 = and i8 %3981, 1
  %3983 = xor i8 %3982, 1
  store i8 %3983, i8* %26, align 1
  %3984 = xor i64 %3975, %3973
  %3985 = lshr i64 %3984, 4
  %3986 = trunc i64 %3985 to i8
  %3987 = and i8 %3986, 1
  store i8 %3987, i8* %31, align 1
  %3988 = icmp eq i64 %3975, 0
  %3989 = zext i1 %3988 to i8
  store i8 %3989, i8* %34, align 1
  %3990 = lshr i64 %3975, 63
  %3991 = trunc i64 %3990 to i8
  store i8 %3991, i8* %37, align 1
  %3992 = xor i64 %3990, %3974
  %3993 = add nuw nsw i64 %3992, %3990
  %3994 = icmp eq i64 %3993, 2
  %3995 = zext i1 %3994 to i8
  store i8 %3995, i8* %43, align 1
  %3996 = load i64, i64* %RDX.i4244, align 8
  store i64 %3996, i64* %RDI.i4254, align 8
  %3997 = load i64, i64* %RBP.i, align 8
  %3998 = add i64 %3997, -952
  %3999 = add i64 %3834, 116
  store i64 %3999, i64* %3, align 8
  %4000 = inttoptr i64 %3998 to i64*
  store i64 %3975, i64* %4000, align 8
  %4001 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %4002 = load i64, i64* %3, align 8
  store i64 %4001, i64* %RSI.i4246, align 8
  %4003 = load i64, i64* %RBP.i, align 8
  %4004 = add i64 %4003, -952
  %4005 = add i64 %4002, 10
  store i64 %4005, i64* %3, align 8
  %4006 = inttoptr i64 %4004 to i64*
  %4007 = load i64, i64* %4006, align 8
  store i64 %4007, i64* %RDX.i4244, align 8
  %4008 = add i64 %4002, 132131
  %4009 = add i64 %4002, 15
  %4010 = load i64, i64* %6, align 8
  %4011 = add i64 %4010, -8
  %4012 = inttoptr i64 %4011 to i64*
  store i64 %4009, i64* %4012, align 8
  store i64 %4011, i64* %6, align 8
  store i64 %4008, i64* %3, align 8
  %call2_41c7f7 = tail call %struct.Memory* @sub_43cc10.add_eyevalues(%struct.State* nonnull %0, i64 %4008, %struct.Memory* %call2_41c723)
  %.pre300 = load i64, i64* %3, align 8
  br label %block_.L_41c7fc

block_.L_41c7fc:                                  ; preds = %block_41c609, %block_41c5e8, %block_.L_41c5ca, %block_.L_41c779
  %4013 = phi i64 [ %3348, %block_.L_41c5ca ], [ %3413, %block_41c5e8 ], [ %3503, %block_41c609 ], [ %.pre300, %block_.L_41c779 ]
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.28, %block_.L_41c5ca ], [ %MEMORY.28, %block_41c5e8 ], [ %call2_41c650, %block_41c609 ], [ %call2_41c7f7, %block_.L_41c779 ]
  %4014 = add i64 %4013, 5
  store i64 %4014, i64* %3, align 8
  %.pre301 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41c801

block_.L_41c801:                                  ; preds = %block_.L_41c7fc, %block_41c3ad
  %4015 = phi i64 [ %2536, %block_41c3ad ], [ %.pre301, %block_.L_41c7fc ]
  %storemerge146 = phi i64 [ %2592, %block_41c3ad ], [ %4014, %block_.L_41c7fc ]
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.24, %block_41c3ad ], [ %MEMORY.32, %block_.L_41c7fc ]
  %4016 = add i64 %4015, -24
  %4017 = add i64 %storemerge146, 3
  store i64 %4017, i64* %3, align 8
  %4018 = inttoptr i64 %4016 to i32*
  %4019 = load i32, i32* %4018, align 4
  %4020 = add i32 %4019, 1
  %4021 = zext i32 %4020 to i64
  store i64 %4021, i64* %RAX.i1555, align 8
  %4022 = icmp eq i32 %4019, -1
  %4023 = icmp eq i32 %4020, 0
  %4024 = or i1 %4022, %4023
  %4025 = zext i1 %4024 to i8
  store i8 %4025, i8* %19, align 1
  %4026 = and i32 %4020, 255
  %4027 = tail call i32 @llvm.ctpop.i32(i32 %4026)
  %4028 = trunc i32 %4027 to i8
  %4029 = and i8 %4028, 1
  %4030 = xor i8 %4029, 1
  store i8 %4030, i8* %26, align 1
  %4031 = xor i32 %4020, %4019
  %4032 = lshr i32 %4031, 4
  %4033 = trunc i32 %4032 to i8
  %4034 = and i8 %4033, 1
  store i8 %4034, i8* %31, align 1
  %4035 = zext i1 %4023 to i8
  store i8 %4035, i8* %34, align 1
  %4036 = lshr i32 %4020, 31
  %4037 = trunc i32 %4036 to i8
  store i8 %4037, i8* %37, align 1
  %4038 = lshr i32 %4019, 31
  %4039 = xor i32 %4036, %4038
  %4040 = add nuw nsw i32 %4039, %4036
  %4041 = icmp eq i32 %4040, 2
  %4042 = zext i1 %4041 to i8
  store i8 %4042, i8* %43, align 1
  %4043 = add i64 %storemerge146, 9
  store i64 %4043, i64* %3, align 8
  store i32 %4020, i32* %4018, align 4
  %4044 = load i64, i64* %3, align 8
  %4045 = add i64 %4044, -1151
  store i64 %4045, i64* %3, align 8
  br label %block_.L_41c38b

block_.L_41c80f:                                  ; preds = %block_.L_41c38b
  %4046 = add i64 %2565, 7
  store i64 %4046, i64* %3, align 8
  store i32 21, i32* %2539, align 4
  %.pre225 = load i64, i64* %3, align 8
  br label %block_.L_41c816

block_.L_41c816:                                  ; preds = %block_.L_41c8a3, %block_.L_41c80f
  %4047 = phi i64 [ %4308, %block_.L_41c8a3 ], [ %.pre225, %block_.L_41c80f ]
  %4048 = load i64, i64* %RBP.i, align 8
  %4049 = add i64 %4048, -24
  %4050 = add i64 %4047, 7
  store i64 %4050, i64* %3, align 8
  %4051 = inttoptr i64 %4049 to i32*
  %4052 = load i32, i32* %4051, align 4
  %4053 = add i32 %4052, -400
  %4054 = icmp ult i32 %4052, 400
  %4055 = zext i1 %4054 to i8
  store i8 %4055, i8* %19, align 1
  %4056 = and i32 %4053, 255
  %4057 = tail call i32 @llvm.ctpop.i32(i32 %4056)
  %4058 = trunc i32 %4057 to i8
  %4059 = and i8 %4058, 1
  %4060 = xor i8 %4059, 1
  store i8 %4060, i8* %26, align 1
  %4061 = xor i32 %4052, 16
  %4062 = xor i32 %4061, %4053
  %4063 = lshr i32 %4062, 4
  %4064 = trunc i32 %4063 to i8
  %4065 = and i8 %4064, 1
  store i8 %4065, i8* %31, align 1
  %4066 = icmp eq i32 %4053, 0
  %4067 = zext i1 %4066 to i8
  store i8 %4067, i8* %34, align 1
  %4068 = lshr i32 %4053, 31
  %4069 = trunc i32 %4068 to i8
  store i8 %4069, i8* %37, align 1
  %4070 = lshr i32 %4052, 31
  %4071 = xor i32 %4068, %4070
  %4072 = add nuw nsw i32 %4071, %4070
  %4073 = icmp eq i32 %4072, 2
  %4074 = zext i1 %4073 to i8
  store i8 %4074, i8* %43, align 1
  %4075 = icmp ne i8 %4069, 0
  %4076 = xor i1 %4075, %4073
  %.v327 = select i1 %4076, i64 13, i64 160
  %4077 = add i64 %4047, %.v327
  store i64 %4077, i64* %3, align 8
  br i1 %4076, label %block_41c823, label %block_.L_41c8b6

block_41c823:                                     ; preds = %block_.L_41c816
  %4078 = add i64 %4077, 4
  store i64 %4078, i64* %3, align 8
  %4079 = load i32, i32* %4051, align 4
  %4080 = sext i32 %4079 to i64
  store i64 %4080, i64* %RAX.i1555, align 8
  %4081 = add nsw i64 %4080, 12099168
  %4082 = add i64 %4077, 12
  store i64 %4082, i64* %3, align 8
  %4083 = inttoptr i64 %4081 to i8*
  %4084 = load i8, i8* %4083, align 1
  %4085 = zext i8 %4084 to i64
  store i64 %4085, i64* %RCX.i4050.pre-phi, align 8
  %4086 = zext i8 %4084 to i32
  %4087 = add nsw i32 %4086, -1
  %4088 = icmp eq i8 %4084, 0
  %4089 = zext i1 %4088 to i8
  store i8 %4089, i8* %19, align 1
  %4090 = and i32 %4087, 255
  %4091 = tail call i32 @llvm.ctpop.i32(i32 %4090)
  %4092 = trunc i32 %4091 to i8
  %4093 = and i8 %4092, 1
  %4094 = xor i8 %4093, 1
  store i8 %4094, i8* %26, align 1
  %4095 = xor i32 %4087, %4086
  %4096 = lshr i32 %4095, 4
  %4097 = trunc i32 %4096 to i8
  %4098 = and i8 %4097, 1
  store i8 %4098, i8* %31, align 1
  %4099 = icmp eq i32 %4087, 0
  %4100 = zext i1 %4099 to i8
  store i8 %4100, i8* %34, align 1
  %4101 = lshr i32 %4087, 31
  %4102 = trunc i32 %4101 to i8
  store i8 %4102, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v415 = select i1 %4099, i64 42, i64 21
  %4103 = add i64 %4077, %.v415
  store i64 %4103, i64* %3, align 8
  br i1 %4099, label %block_.L_41c84d, label %block_41c838

block_41c838:                                     ; preds = %block_41c823
  %4104 = add i64 %4103, 4
  store i64 %4104, i64* %3, align 8
  %4105 = load i32, i32* %4051, align 4
  %4106 = sext i32 %4105 to i64
  store i64 %4106, i64* %RAX.i1555, align 8
  %4107 = add nsw i64 %4106, 12099168
  %4108 = add i64 %4103, 12
  store i64 %4108, i64* %3, align 8
  %4109 = inttoptr i64 %4107 to i8*
  %4110 = load i8, i8* %4109, align 1
  %4111 = zext i8 %4110 to i64
  store i64 %4111, i64* %RCX.i4050.pre-phi, align 8
  %4112 = zext i8 %4110 to i32
  %4113 = add nsw i32 %4112, -2
  %4114 = icmp ult i8 %4110, 2
  %4115 = zext i1 %4114 to i8
  store i8 %4115, i8* %19, align 1
  %4116 = and i32 %4113, 255
  %4117 = tail call i32 @llvm.ctpop.i32(i32 %4116)
  %4118 = trunc i32 %4117 to i8
  %4119 = and i8 %4118, 1
  %4120 = xor i8 %4119, 1
  store i8 %4120, i8* %26, align 1
  %4121 = xor i32 %4113, %4112
  %4122 = lshr i32 %4121, 4
  %4123 = trunc i32 %4122 to i8
  %4124 = and i8 %4123, 1
  store i8 %4124, i8* %31, align 1
  %4125 = icmp eq i32 %4113, 0
  %4126 = zext i1 %4125 to i8
  store i8 %4126, i8* %34, align 1
  %4127 = lshr i32 %4113, 31
  %4128 = trunc i32 %4127 to i8
  store i8 %4128, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v416 = select i1 %4125, i64 21, i64 107
  %4129 = add i64 %4103, %.v416
  store i64 %4129, i64* %3, align 8
  br i1 %4125, label %block_.L_41c84d, label %block_.L_41c8a3

block_.L_41c84d:                                  ; preds = %block_41c838, %block_41c823
  %4130 = phi i64 [ %4129, %block_41c838 ], [ %4103, %block_41c823 ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %4131 = add i64 %4130, 14
  store i64 %4131, i64* %3, align 8
  %4132 = load i32, i32* %4051, align 4
  %4133 = sext i32 %4132 to i64
  %4134 = mul nsw i64 %4133, 76
  store i64 %4134, i64* %RCX.i4050.pre-phi, align 8
  %4135 = lshr i64 %4134, 63
  %4136 = add i64 %4134, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %4136, i64* %RAX.i1555, align 8
  %4137 = icmp ult i64 %4136, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4138 = icmp ult i64 %4136, %4134
  %4139 = or i1 %4137, %4138
  %4140 = zext i1 %4139 to i8
  store i8 %4140, i8* %19, align 1
  %4141 = trunc i64 %4136 to i32
  %4142 = and i32 %4141, 252
  %4143 = tail call i32 @llvm.ctpop.i32(i32 %4142)
  %4144 = trunc i32 %4143 to i8
  %4145 = and i8 %4144, 1
  %4146 = xor i8 %4145, 1
  store i8 %4146, i8* %26, align 1
  %4147 = xor i64 %4134, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4148 = xor i64 %4147, %4136
  %4149 = lshr i64 %4148, 4
  %4150 = trunc i64 %4149 to i8
  %4151 = and i8 %4150, 1
  store i8 %4151, i8* %31, align 1
  %4152 = icmp eq i64 %4136, 0
  %4153 = zext i1 %4152 to i8
  store i8 %4153, i8* %34, align 1
  %4154 = lshr i64 %4136, 63
  %4155 = trunc i64 %4154 to i8
  store i8 %4155, i8* %37, align 1
  %4156 = xor i64 %4154, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %4157 = xor i64 %4154, %4135
  %4158 = add nuw nsw i64 %4156, %4157
  %4159 = icmp eq i64 %4158, 2
  %4160 = zext i1 %4159 to i8
  store i8 %4160, i8* %43, align 1
  %4161 = add i64 %4134, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 8)
  %4162 = add i64 %4130, 24
  store i64 %4162, i64* %3, align 8
  %4163 = inttoptr i64 %4161 to i32*
  %4164 = load i32, i32* %4163, align 4
  %4165 = zext i32 %4164 to i64
  store i64 %4165, i64* %RDX.i4244, align 8
  %4166 = add i64 %4130, 27
  store i64 %4166, i64* %3, align 8
  %4167 = load i32, i32* %4051, align 4
  %4168 = sub i32 %4164, %4167
  %4169 = icmp ult i32 %4164, %4167
  %4170 = zext i1 %4169 to i8
  store i8 %4170, i8* %19, align 1
  %4171 = and i32 %4168, 255
  %4172 = tail call i32 @llvm.ctpop.i32(i32 %4171)
  %4173 = trunc i32 %4172 to i8
  %4174 = and i8 %4173, 1
  %4175 = xor i8 %4174, 1
  store i8 %4175, i8* %26, align 1
  %4176 = xor i32 %4167, %4164
  %4177 = xor i32 %4176, %4168
  %4178 = lshr i32 %4177, 4
  %4179 = trunc i32 %4178 to i8
  %4180 = and i8 %4179, 1
  store i8 %4180, i8* %31, align 1
  %4181 = icmp eq i32 %4168, 0
  %4182 = zext i1 %4181 to i8
  store i8 %4182, i8* %34, align 1
  %4183 = lshr i32 %4168, 31
  %4184 = trunc i32 %4183 to i8
  store i8 %4184, i8* %37, align 1
  %4185 = lshr i32 %4164, 31
  %4186 = lshr i32 %4167, 31
  %4187 = xor i32 %4186, %4185
  %4188 = xor i32 %4183, %4185
  %4189 = add nuw nsw i32 %4188, %4187
  %4190 = icmp eq i32 %4189, 2
  %4191 = zext i1 %4190 to i8
  store i8 %4191, i8* %43, align 1
  %.v417 = select i1 %4181, i64 33, i64 86
  %4192 = add i64 %4130, %.v417
  store i64 %4192, i64* %3, align 8
  br i1 %4181, label %block_41c86e, label %block_.L_41c8a3

block_41c86e:                                     ; preds = %block_.L_41c84d
  store i64 0, i64* %RSI.i4246, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4193 = load i64, i64* %RBP.i, align 8
  %4194 = add i64 %4193, -24
  %4195 = add i64 %4192, 5
  store i64 %4195, i64* %3, align 8
  %4196 = inttoptr i64 %4194 to i32*
  %4197 = load i32, i32* %4196, align 4
  %4198 = zext i32 %4197 to i64
  store i64 %4198, i64* %RDI.i4254, align 8
  %4199 = add i64 %4192, 9202
  %4200 = add i64 %4192, 10
  %4201 = load i64, i64* %6, align 8
  %4202 = add i64 %4201, -8
  %4203 = inttoptr i64 %4202 to i64*
  store i64 %4200, i64* %4203, align 8
  store i64 %4202, i64* %6, align 8
  store i64 %4199, i64* %3, align 8
  %call2_41c873 = tail call %struct.Memory* @sub_41ec60.compute_escape(%struct.State* nonnull %0, i64 %4199, %struct.Memory* %MEMORY.24)
  %4204 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i4050.pre-phi, align 8
  %4205 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %4205, i64* %RDX.i4244, align 8
  %4206 = load i64, i64* %RBP.i, align 8
  %4207 = add i64 %4206, -24
  %4208 = add i64 %4204, 22
  store i64 %4208, i64* %3, align 8
  %4209 = inttoptr i64 %4207 to i32*
  %4210 = load i32, i32* %4209, align 4
  %4211 = sext i32 %4210 to i64
  %4212 = mul nsw i64 %4211, 76
  store i64 %4212, i64* %R8.i3778, align 8
  %4213 = lshr i64 %4212, 63
  %4214 = add i64 %4212, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %4214, i64* %RCX.i4050.pre-phi, align 8
  %4215 = icmp ult i64 %4214, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4216 = icmp ult i64 %4214, %4212
  %4217 = or i1 %4215, %4216
  %4218 = zext i1 %4217 to i8
  store i8 %4218, i8* %19, align 1
  %4219 = trunc i64 %4214 to i32
  %4220 = and i32 %4219, 252
  %4221 = tail call i32 @llvm.ctpop.i32(i32 %4220)
  %4222 = trunc i32 %4221 to i8
  %4223 = and i8 %4222, 1
  %4224 = xor i8 %4223, 1
  store i8 %4224, i8* %26, align 1
  %4225 = xor i64 %4212, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4226 = xor i64 %4225, %4214
  %4227 = lshr i64 %4226, 4
  %4228 = trunc i64 %4227 to i8
  %4229 = and i8 %4228, 1
  store i8 %4229, i8* %31, align 1
  %4230 = icmp eq i64 %4214, 0
  %4231 = zext i1 %4230 to i8
  store i8 %4231, i8* %34, align 1
  %4232 = lshr i64 %4214, 63
  %4233 = trunc i64 %4232 to i8
  store i8 %4233, i8* %37, align 1
  %4234 = xor i64 %4232, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %4235 = xor i64 %4232, %4213
  %4236 = add nuw nsw i64 %4234, %4235
  %4237 = icmp eq i64 %4236, 2
  %4238 = zext i1 %4237 to i8
  store i8 %4238, i8* %43, align 1
  %4239 = add i64 %4212, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %4240 = add i64 %4204, 33
  store i64 %4240, i64* %3, align 8
  %4241 = inttoptr i64 %4239 to i32*
  %4242 = load i32, i32* %4241, align 4
  %4243 = sext i32 %4242 to i64
  %4244 = mul nsw i64 %4243, 104
  store i64 %4244, i64* %RCX.i4050.pre-phi, align 8
  %4245 = lshr i64 %4244, 63
  %4246 = load i64, i64* %RDX.i4244, align 8
  %4247 = add i64 %4244, %4246
  store i64 %4247, i64* %RDX.i4244, align 8
  %4248 = icmp ult i64 %4247, %4246
  %4249 = icmp ult i64 %4247, %4244
  %4250 = or i1 %4248, %4249
  %4251 = zext i1 %4250 to i8
  store i8 %4251, i8* %19, align 1
  %4252 = trunc i64 %4247 to i32
  %4253 = and i32 %4252, 255
  %4254 = tail call i32 @llvm.ctpop.i32(i32 %4253)
  %4255 = trunc i32 %4254 to i8
  %4256 = and i8 %4255, 1
  %4257 = xor i8 %4256, 1
  store i8 %4257, i8* %26, align 1
  %4258 = xor i64 %4244, %4246
  %4259 = xor i64 %4258, %4247
  %4260 = lshr i64 %4259, 4
  %4261 = trunc i64 %4260 to i8
  %4262 = and i8 %4261, 1
  store i8 %4262, i8* %31, align 1
  %4263 = icmp eq i64 %4247, 0
  %4264 = zext i1 %4263 to i8
  store i8 %4264, i8* %34, align 1
  %4265 = lshr i64 %4247, 63
  %4266 = trunc i64 %4265 to i8
  store i8 %4266, i8* %37, align 1
  %4267 = lshr i64 %4246, 63
  %4268 = xor i64 %4265, %4267
  %4269 = xor i64 %4265, %4245
  %4270 = add nuw nsw i64 %4268, %4269
  %4271 = icmp eq i64 %4270, 2
  %4272 = zext i1 %4271 to i8
  store i8 %4272, i8* %43, align 1
  %4273 = add i64 %4247, 72
  %4274 = load i32, i32* %EAX.i4253, align 4
  %4275 = add i64 %4204, 43
  store i64 %4275, i64* %3, align 8
  %4276 = inttoptr i64 %4273 to i32*
  store i32 %4274, i32* %4276, align 4
  %.pre290 = load i64, i64* %3, align 8
  br label %block_.L_41c8a3

block_.L_41c8a3:                                  ; preds = %block_.L_41c84d, %block_41c838, %block_41c86e
  %4277 = phi i64 [ %.pre290, %block_41c86e ], [ %4192, %block_.L_41c84d ], [ %4129, %block_41c838 ]
  %4278 = load i64, i64* %RBP.i, align 8
  %4279 = add i64 %4278, -24
  %4280 = add i64 %4277, 8
  store i64 %4280, i64* %3, align 8
  %4281 = inttoptr i64 %4279 to i32*
  %4282 = load i32, i32* %4281, align 4
  %4283 = add i32 %4282, 1
  %4284 = zext i32 %4283 to i64
  store i64 %4284, i64* %RAX.i1555, align 8
  %4285 = icmp eq i32 %4282, -1
  %4286 = icmp eq i32 %4283, 0
  %4287 = or i1 %4285, %4286
  %4288 = zext i1 %4287 to i8
  store i8 %4288, i8* %19, align 1
  %4289 = and i32 %4283, 255
  %4290 = tail call i32 @llvm.ctpop.i32(i32 %4289)
  %4291 = trunc i32 %4290 to i8
  %4292 = and i8 %4291, 1
  %4293 = xor i8 %4292, 1
  store i8 %4293, i8* %26, align 1
  %4294 = xor i32 %4283, %4282
  %4295 = lshr i32 %4294, 4
  %4296 = trunc i32 %4295 to i8
  %4297 = and i8 %4296, 1
  store i8 %4297, i8* %31, align 1
  %4298 = zext i1 %4286 to i8
  store i8 %4298, i8* %34, align 1
  %4299 = lshr i32 %4283, 31
  %4300 = trunc i32 %4299 to i8
  store i8 %4300, i8* %37, align 1
  %4301 = lshr i32 %4282, 31
  %4302 = xor i32 %4299, %4301
  %4303 = add nuw nsw i32 %4302, %4299
  %4304 = icmp eq i32 %4303, 2
  %4305 = zext i1 %4304 to i8
  store i8 %4305, i8* %43, align 1
  %4306 = add i64 %4277, 14
  store i64 %4306, i64* %3, align 8
  store i32 %4283, i32* %4281, align 4
  %4307 = load i64, i64* %3, align 8
  %4308 = add i64 %4307, -155
  store i64 %4308, i64* %3, align 8
  br label %block_.L_41c816

block_.L_41c8b6:                                  ; preds = %block_.L_41c816
  %4309 = add i64 %4077, 68266
  %4310 = add i64 %4077, 5
  %4311 = load i64, i64* %6, align 8
  %4312 = add i64 %4311, -8
  %4313 = inttoptr i64 %4312 to i64*
  store i64 %4310, i64* %4313, align 8
  store i64 %4312, i64* %6, align 8
  store i64 %4309, i64* %3, align 8
  %call2_41c8b6 = tail call %struct.Memory* @sub_42d360.resegment_initial_influence(%struct.State* nonnull %0, i64 %4309, %struct.Memory* %MEMORY.24)
  %4314 = load i64, i64* %3, align 8
  %4315 = add i64 %4314, 9877
  %4316 = add i64 %4314, 5
  %4317 = load i64, i64* %6, align 8
  %4318 = add i64 %4317, -8
  %4319 = inttoptr i64 %4318 to i64*
  store i64 %4316, i64* %4319, align 8
  store i64 %4318, i64* %6, align 8
  store i64 %4315, i64* %3, align 8
  %call2_41c8bb = tail call %struct.Memory* @sub_41ef50.compute_refined_dragon_weaknesses(%struct.State* nonnull %0, i64 %4315, %struct.Memory* %call2_41c8b6)
  %4320 = load i64, i64* %RBP.i, align 8
  %4321 = add i64 %4320, -32
  %4322 = load i64, i64* %3, align 8
  %4323 = add i64 %4322, 7
  store i64 %4323, i64* %3, align 8
  %4324 = inttoptr i64 %4321 to i32*
  store i32 0, i32* %4324, align 4
  %4325 = bitcast [32 x %union.VectorReg]* %86 to i32*
  %4326 = getelementptr inbounds i8, i8* %87, i64 4
  %4327 = bitcast i8* %4326 to float*
  %4328 = bitcast i64* %94 to float*
  %4329 = getelementptr inbounds i8, i8* %87, i64 12
  %4330 = bitcast i8* %4329 to float*
  %4331 = bitcast [32 x %union.VectorReg]* %86 to <2 x float>*
  %.pre226 = load i64, i64* %3, align 8
  br label %block_.L_41c8c7

block_.L_41c8c7:                                  ; preds = %block_41c8d7, %block_.L_41c8b6
  %4332 = phi i64 [ %4469, %block_41c8d7 ], [ %.pre226, %block_.L_41c8b6 ]
  %4333 = load i64, i64* %RBP.i, align 8
  %4334 = add i64 %4333, -32
  %4335 = add i64 %4332, 3
  store i64 %4335, i64* %3, align 8
  %4336 = inttoptr i64 %4334 to i32*
  %4337 = load i32, i32* %4336, align 4
  %4338 = zext i32 %4337 to i64
  store i64 %4338, i64* %RAX.i1555, align 8
  %4339 = load i32, i32* bitcast (%G_0xb54cec_type* @G_0xb54cec to i32*), align 8
  %4340 = sub i32 %4337, %4339
  %4341 = icmp ult i32 %4337, %4339
  %4342 = zext i1 %4341 to i8
  store i8 %4342, i8* %19, align 1
  %4343 = and i32 %4340, 255
  %4344 = tail call i32 @llvm.ctpop.i32(i32 %4343)
  %4345 = trunc i32 %4344 to i8
  %4346 = and i8 %4345, 1
  %4347 = xor i8 %4346, 1
  store i8 %4347, i8* %26, align 1
  %4348 = xor i32 %4339, %4337
  %4349 = xor i32 %4348, %4340
  %4350 = lshr i32 %4349, 4
  %4351 = trunc i32 %4350 to i8
  %4352 = and i8 %4351, 1
  store i8 %4352, i8* %31, align 1
  %4353 = icmp eq i32 %4340, 0
  %4354 = zext i1 %4353 to i8
  store i8 %4354, i8* %34, align 1
  %4355 = lshr i32 %4340, 31
  %4356 = trunc i32 %4355 to i8
  store i8 %4356, i8* %37, align 1
  %4357 = lshr i32 %4337, 31
  %4358 = lshr i32 %4339, 31
  %4359 = xor i32 %4358, %4357
  %4360 = xor i32 %4355, %4357
  %4361 = add nuw nsw i32 %4360, %4359
  %4362 = icmp eq i32 %4361, 2
  %4363 = zext i1 %4362 to i8
  store i8 %4363, i8* %43, align 1
  %4364 = icmp ne i8 %4356, 0
  %4365 = xor i1 %4364, %4362
  %.v328 = select i1 %4365, i64 16, i64 78
  %4366 = add i64 %4332, %.v328
  store i64 %4366, i64* %3, align 8
  br i1 %4365, label %block_41c8d7, label %block_.L_41c915

block_41c8d7:                                     ; preds = %block_.L_41c8c7
  %4367 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %4367, i64* %RAX.i1555, align 8
  %4368 = add i64 %4366, 12
  store i64 %4368, i64* %3, align 8
  %4369 = load i32, i32* %4336, align 4
  %4370 = sext i32 %4369 to i64
  %4371 = mul nsw i64 %4370, 104
  store i64 %4371, i64* %RCX.i4050.pre-phi, align 8
  %4372 = lshr i64 %4371, 63
  %4373 = add i64 %4371, %4367
  store i64 %4373, i64* %RAX.i1555, align 8
  %4374 = icmp ult i64 %4373, %4367
  %4375 = icmp ult i64 %4373, %4371
  %4376 = or i1 %4374, %4375
  %4377 = zext i1 %4376 to i8
  store i8 %4377, i8* %19, align 1
  %4378 = trunc i64 %4373 to i32
  %4379 = and i32 %4378, 255
  %4380 = tail call i32 @llvm.ctpop.i32(i32 %4379)
  %4381 = trunc i32 %4380 to i8
  %4382 = and i8 %4381, 1
  %4383 = xor i8 %4382, 1
  store i8 %4383, i8* %26, align 1
  %4384 = xor i64 %4371, %4367
  %4385 = xor i64 %4384, %4373
  %4386 = lshr i64 %4385, 4
  %4387 = trunc i64 %4386 to i8
  %4388 = and i8 %4387, 1
  store i8 %4388, i8* %31, align 1
  %4389 = icmp eq i64 %4373, 0
  %4390 = zext i1 %4389 to i8
  store i8 %4390, i8* %34, align 1
  %4391 = lshr i64 %4373, 63
  %4392 = trunc i64 %4391 to i8
  store i8 %4392, i8* %37, align 1
  %4393 = lshr i64 %4367, 63
  %4394 = xor i64 %4391, %4393
  %4395 = xor i64 %4391, %4372
  %4396 = add nuw nsw i64 %4394, %4395
  %4397 = icmp eq i64 %4396, 2
  %4398 = zext i1 %4397 to i8
  store i8 %4398, i8* %43, align 1
  %4399 = add i64 %4373, 64
  %4400 = add i64 %4366, 24
  store i64 %4400, i64* %3, align 8
  %4401 = inttoptr i64 %4399 to i32*
  %4402 = load i32, i32* %4401, align 4
  store i32 %4402, i32* %4325, align 1
  store float 0.000000e+00, float* %4327, align 1
  store float 0.000000e+00, float* %4328, align 1
  store float 0.000000e+00, float* %4330, align 1
  store i64 %4367, i64* %RAX.i1555, align 8
  %4403 = add i64 %4366, 36
  store i64 %4403, i64* %3, align 8
  %4404 = load i32, i32* %4336, align 4
  %4405 = sext i32 %4404 to i64
  %4406 = mul nsw i64 %4405, 104
  store i64 %4406, i64* %RCX.i4050.pre-phi, align 8
  %4407 = lshr i64 %4406, 63
  %4408 = add i64 %4406, %4367
  store i64 %4408, i64* %RAX.i1555, align 8
  %4409 = icmp ult i64 %4408, %4367
  %4410 = icmp ult i64 %4408, %4406
  %4411 = or i1 %4409, %4410
  %4412 = zext i1 %4411 to i8
  store i8 %4412, i8* %19, align 1
  %4413 = trunc i64 %4408 to i32
  %4414 = and i32 %4413, 255
  %4415 = tail call i32 @llvm.ctpop.i32(i32 %4414)
  %4416 = trunc i32 %4415 to i8
  %4417 = and i8 %4416, 1
  %4418 = xor i8 %4417, 1
  store i8 %4418, i8* %26, align 1
  %4419 = xor i64 %4406, %4367
  %4420 = xor i64 %4419, %4408
  %4421 = lshr i64 %4420, 4
  %4422 = trunc i64 %4421 to i8
  %4423 = and i8 %4422, 1
  store i8 %4423, i8* %31, align 1
  %4424 = icmp eq i64 %4408, 0
  %4425 = zext i1 %4424 to i8
  store i8 %4425, i8* %34, align 1
  %4426 = lshr i64 %4408, 63
  %4427 = trunc i64 %4426 to i8
  store i8 %4427, i8* %37, align 1
  %4428 = xor i64 %4426, %4393
  %4429 = xor i64 %4426, %4407
  %4430 = add nuw nsw i64 %4428, %4429
  %4431 = icmp eq i64 %4430, 2
  %4432 = zext i1 %4431 to i8
  store i8 %4432, i8* %43, align 1
  %4433 = add i64 %4408, 68
  %4434 = add i64 %4366, 48
  store i64 %4434, i64* %3, align 8
  %4435 = load <2 x float>, <2 x float>* %4331, align 1
  %4436 = extractelement <2 x float> %4435, i32 0
  %4437 = inttoptr i64 %4433 to float*
  store float %4436, float* %4437, align 4
  %4438 = load i64, i64* %RBP.i, align 8
  %4439 = add i64 %4438, -32
  %4440 = load i64, i64* %3, align 8
  %4441 = add i64 %4440, 3
  store i64 %4441, i64* %3, align 8
  %4442 = inttoptr i64 %4439 to i32*
  %4443 = load i32, i32* %4442, align 4
  %4444 = add i32 %4443, 1
  %4445 = zext i32 %4444 to i64
  store i64 %4445, i64* %RAX.i1555, align 8
  %4446 = icmp eq i32 %4443, -1
  %4447 = icmp eq i32 %4444, 0
  %4448 = or i1 %4446, %4447
  %4449 = zext i1 %4448 to i8
  store i8 %4449, i8* %19, align 1
  %4450 = and i32 %4444, 255
  %4451 = tail call i32 @llvm.ctpop.i32(i32 %4450)
  %4452 = trunc i32 %4451 to i8
  %4453 = and i8 %4452, 1
  %4454 = xor i8 %4453, 1
  store i8 %4454, i8* %26, align 1
  %4455 = xor i32 %4444, %4443
  %4456 = lshr i32 %4455, 4
  %4457 = trunc i32 %4456 to i8
  %4458 = and i8 %4457, 1
  store i8 %4458, i8* %31, align 1
  %4459 = zext i1 %4447 to i8
  store i8 %4459, i8* %34, align 1
  %4460 = lshr i32 %4444, 31
  %4461 = trunc i32 %4460 to i8
  store i8 %4461, i8* %37, align 1
  %4462 = lshr i32 %4443, 31
  %4463 = xor i32 %4460, %4462
  %4464 = add nuw nsw i32 %4463, %4460
  %4465 = icmp eq i32 %4464, 2
  %4466 = zext i1 %4465 to i8
  store i8 %4466, i8* %43, align 1
  %4467 = add i64 %4440, 9
  store i64 %4467, i64* %3, align 8
  store i32 %4444, i32* %4442, align 4
  %4468 = load i64, i64* %3, align 8
  %4469 = add i64 %4468, -73
  store i64 %4469, i64* %3, align 8
  br label %block_.L_41c8c7

block_.L_41c915:                                  ; preds = %block_.L_41c8c7
  %4470 = add i64 %4333, -24
  %4471 = add i64 %4366, 7
  store i64 %4471, i64* %3, align 8
  %4472 = inttoptr i64 %4470 to i32*
  store i32 21, i32* %4472, align 4
  %.pre227 = load i64, i64* %3, align 8
  br label %block_.L_41c91c

block_.L_41c91c:                                  ; preds = %block_.L_41c999, %block_.L_41c915
  %4473 = phi i64 [ %.pre227, %block_.L_41c915 ], [ %4690, %block_.L_41c999 ]
  %4474 = load i64, i64* %RBP.i, align 8
  %4475 = add i64 %4474, -24
  %4476 = add i64 %4473, 7
  store i64 %4476, i64* %3, align 8
  %4477 = inttoptr i64 %4475 to i32*
  %4478 = load i32, i32* %4477, align 4
  %4479 = add i32 %4478, -400
  %4480 = icmp ult i32 %4478, 400
  %4481 = zext i1 %4480 to i8
  store i8 %4481, i8* %19, align 1
  %4482 = and i32 %4479, 255
  %4483 = tail call i32 @llvm.ctpop.i32(i32 %4482)
  %4484 = trunc i32 %4483 to i8
  %4485 = and i8 %4484, 1
  %4486 = xor i8 %4485, 1
  store i8 %4486, i8* %26, align 1
  %4487 = xor i32 %4478, 16
  %4488 = xor i32 %4487, %4479
  %4489 = lshr i32 %4488, 4
  %4490 = trunc i32 %4489 to i8
  %4491 = and i8 %4490, 1
  store i8 %4491, i8* %31, align 1
  %4492 = icmp eq i32 %4479, 0
  %4493 = zext i1 %4492 to i8
  store i8 %4493, i8* %34, align 1
  %4494 = lshr i32 %4479, 31
  %4495 = trunc i32 %4494 to i8
  store i8 %4495, i8* %37, align 1
  %4496 = lshr i32 %4478, 31
  %4497 = xor i32 %4494, %4496
  %4498 = add nuw nsw i32 %4497, %4496
  %4499 = icmp eq i32 %4498, 2
  %4500 = zext i1 %4499 to i8
  store i8 %4500, i8* %43, align 1
  %4501 = icmp ne i8 %4495, 0
  %4502 = xor i1 %4501, %4499
  %.v329 = select i1 %4502, i64 13, i64 144
  %4503 = add i64 %4473, %.v329
  store i64 %4503, i64* %3, align 8
  br i1 %4502, label %block_41c929, label %block_.L_41c9ac

block_41c929:                                     ; preds = %block_.L_41c91c
  %4504 = add i64 %4503, 4
  store i64 %4504, i64* %3, align 8
  %4505 = load i32, i32* %4477, align 4
  %4506 = sext i32 %4505 to i64
  store i64 %4506, i64* %RAX.i1555, align 8
  %4507 = add nsw i64 %4506, 12099168
  %4508 = add i64 %4503, 12
  store i64 %4508, i64* %3, align 8
  %4509 = inttoptr i64 %4507 to i8*
  %4510 = load i8, i8* %4509, align 1
  %4511 = zext i8 %4510 to i64
  store i64 %4511, i64* %RCX.i4050.pre-phi, align 8
  %4512 = zext i8 %4510 to i32
  %4513 = add nsw i32 %4512, -3
  %4514 = icmp ult i8 %4510, 3
  %4515 = zext i1 %4514 to i8
  store i8 %4515, i8* %19, align 1
  %4516 = and i32 %4513, 255
  %4517 = tail call i32 @llvm.ctpop.i32(i32 %4516)
  %4518 = trunc i32 %4517 to i8
  %4519 = and i8 %4518, 1
  %4520 = xor i8 %4519, 1
  store i8 %4520, i8* %26, align 1
  %4521 = xor i32 %4513, %4512
  %4522 = lshr i32 %4521, 4
  %4523 = trunc i32 %4522 to i8
  %4524 = and i8 %4523, 1
  store i8 %4524, i8* %31, align 1
  %4525 = icmp eq i32 %4513, 0
  %4526 = zext i1 %4525 to i8
  store i8 %4526, i8* %34, align 1
  %4527 = lshr i32 %4513, 31
  %4528 = trunc i32 %4527 to i8
  store i8 %4528, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v412 = select i1 %4525, i64 112, i64 21
  %4529 = add i64 %4503, %.v412
  store i64 %4529, i64* %3, align 8
  br i1 %4525, label %block_.L_41c999, label %block_41c93e

block_41c93e:                                     ; preds = %block_41c929
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %4530 = add i64 %4529, 14
  store i64 %4530, i64* %3, align 8
  %4531 = load i32, i32* %4477, align 4
  %4532 = sext i32 %4531 to i64
  %4533 = mul nsw i64 %4532, 76
  store i64 %4533, i64* %RCX.i4050.pre-phi, align 8
  %4534 = lshr i64 %4533, 63
  %4535 = add i64 %4533, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %4535, i64* %RAX.i1555, align 8
  %4536 = icmp ult i64 %4535, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4537 = icmp ult i64 %4535, %4533
  %4538 = or i1 %4536, %4537
  %4539 = zext i1 %4538 to i8
  store i8 %4539, i8* %19, align 1
  %4540 = trunc i64 %4535 to i32
  %4541 = and i32 %4540, 252
  %4542 = tail call i32 @llvm.ctpop.i32(i32 %4541)
  %4543 = trunc i32 %4542 to i8
  %4544 = and i8 %4543, 1
  %4545 = xor i8 %4544, 1
  store i8 %4545, i8* %26, align 1
  %4546 = xor i64 %4533, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4547 = xor i64 %4546, %4535
  %4548 = lshr i64 %4547, 4
  %4549 = trunc i64 %4548 to i8
  %4550 = and i8 %4549, 1
  store i8 %4550, i8* %31, align 1
  %4551 = icmp eq i64 %4535, 0
  %4552 = zext i1 %4551 to i8
  store i8 %4552, i8* %34, align 1
  %4553 = lshr i64 %4535, 63
  %4554 = trunc i64 %4553 to i8
  store i8 %4554, i8* %37, align 1
  %4555 = xor i64 %4553, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %4556 = xor i64 %4553, %4534
  %4557 = add nuw nsw i64 %4555, %4556
  %4558 = icmp eq i64 %4557, 2
  %4559 = zext i1 %4558 to i8
  store i8 %4559, i8* %43, align 1
  %4560 = add i64 %4533, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 8)
  %4561 = add i64 %4529, 24
  store i64 %4561, i64* %3, align 8
  %4562 = inttoptr i64 %4560 to i32*
  %4563 = load i32, i32* %4562, align 4
  %4564 = zext i32 %4563 to i64
  store i64 %4564, i64* %RDX.i4244, align 8
  %4565 = add i64 %4529, 27
  store i64 %4565, i64* %3, align 8
  %4566 = load i32, i32* %4477, align 4
  %4567 = sub i32 %4563, %4566
  %4568 = icmp ult i32 %4563, %4566
  %4569 = zext i1 %4568 to i8
  store i8 %4569, i8* %19, align 1
  %4570 = and i32 %4567, 255
  %4571 = tail call i32 @llvm.ctpop.i32(i32 %4570)
  %4572 = trunc i32 %4571 to i8
  %4573 = and i8 %4572, 1
  %4574 = xor i8 %4573, 1
  store i8 %4574, i8* %26, align 1
  %4575 = xor i32 %4566, %4563
  %4576 = xor i32 %4575, %4567
  %4577 = lshr i32 %4576, 4
  %4578 = trunc i32 %4577 to i8
  %4579 = and i8 %4578, 1
  store i8 %4579, i8* %31, align 1
  %4580 = icmp eq i32 %4567, 0
  %4581 = zext i1 %4580 to i8
  store i8 %4581, i8* %34, align 1
  %4582 = lshr i32 %4567, 31
  %4583 = trunc i32 %4582 to i8
  store i8 %4583, i8* %37, align 1
  %4584 = lshr i32 %4563, 31
  %4585 = lshr i32 %4566, 31
  %4586 = xor i32 %4585, %4584
  %4587 = xor i32 %4582, %4584
  %4588 = add nuw nsw i32 %4587, %4586
  %4589 = icmp eq i32 %4588, 2
  %4590 = zext i1 %4589 to i8
  store i8 %4590, i8* %43, align 1
  %.v413 = select i1 %4580, i64 33, i64 86
  %4591 = add i64 %4529, %.v413
  store i64 %4591, i64* %3, align 8
  br i1 %4580, label %block_41c95f, label %block_.L_41c994

block_41c95f:                                     ; preds = %block_41c93e
  %4592 = load i64, i64* %RBP.i, align 8
  %4593 = add i64 %4592, -24
  %4594 = add i64 %4591, 4
  store i64 %4594, i64* %3, align 8
  %4595 = inttoptr i64 %4593 to i32*
  %4596 = load i32, i32* %4595, align 4
  %4597 = sext i32 %4596 to i64
  store i64 %4597, i64* %RAX.i1555, align 8
  %4598 = add nsw i64 %4597, 12099168
  %4599 = add i64 %4591, 12
  store i64 %4599, i64* %3, align 8
  %4600 = inttoptr i64 %4598 to i8*
  %4601 = load i8, i8* %4600, align 1
  %4602 = zext i8 %4601 to i64
  store i64 %4602, i64* %RCX.i4050.pre-phi, align 8
  %4603 = zext i8 %4601 to i32
  store i8 0, i8* %19, align 1
  %4604 = tail call i32 @llvm.ctpop.i32(i32 %4603)
  %4605 = trunc i32 %4604 to i8
  %4606 = and i8 %4605, 1
  %4607 = xor i8 %4606, 1
  store i8 %4607, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %4608 = icmp eq i8 %4601, 0
  %4609 = zext i1 %4608 to i8
  store i8 %4609, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v414 = select i1 %4608, i64 53, i64 21
  %4610 = add i64 %4591, %.v414
  store i64 %4610, i64* %3, align 8
  br i1 %4608, label %block_.L_41c994, label %block_41c974

block_41c974:                                     ; preds = %block_41c95f
  %4611 = add i64 %4610, 3
  store i64 %4611, i64* %3, align 8
  %4612 = load i32, i32* %4595, align 4
  %4613 = zext i32 %4612 to i64
  store i64 %4613, i64* %RDI.i4254, align 8
  %4614 = add i64 %4610, 9868
  %4615 = add i64 %4610, 8
  %4616 = load i64, i64* %6, align 8
  %4617 = add i64 %4616, -8
  %4618 = inttoptr i64 %4617 to i64*
  store i64 %4615, i64* %4618, align 8
  store i64 %4617, i64* %6, align 8
  store i64 %4614, i64* %3, align 8
  %call2_41c977 = tail call %struct.Memory* @sub_41f000.compute_crude_status(%struct.State* nonnull %0, i64 %4614, %struct.Memory* %call2_41c8bb)
  %4619 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i4050.pre-phi, align 8
  %4620 = load i64, i64* %RBP.i, align 8
  %4621 = add i64 %4620, -24
  %4622 = add i64 %4619, 14
  store i64 %4622, i64* %3, align 8
  %4623 = inttoptr i64 %4621 to i32*
  %4624 = load i32, i32* %4623, align 4
  %4625 = sext i32 %4624 to i64
  %4626 = mul nsw i64 %4625, 76
  store i64 %4626, i64* %RDX.i4244, align 8
  %4627 = lshr i64 %4626, 63
  %4628 = add i64 %4626, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %4628, i64* %RCX.i4050.pre-phi, align 8
  %4629 = icmp ult i64 %4628, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4630 = icmp ult i64 %4628, %4626
  %4631 = or i1 %4629, %4630
  %4632 = zext i1 %4631 to i8
  store i8 %4632, i8* %19, align 1
  %4633 = trunc i64 %4628 to i32
  %4634 = and i32 %4633, 252
  %4635 = tail call i32 @llvm.ctpop.i32(i32 %4634)
  %4636 = trunc i32 %4635 to i8
  %4637 = and i8 %4636, 1
  %4638 = xor i8 %4637, 1
  store i8 %4638, i8* %26, align 1
  %4639 = xor i64 %4626, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4640 = xor i64 %4639, %4628
  %4641 = lshr i64 %4640, 4
  %4642 = trunc i64 %4641 to i8
  %4643 = and i8 %4642, 1
  store i8 %4643, i8* %31, align 1
  %4644 = icmp eq i64 %4628, 0
  %4645 = zext i1 %4644 to i8
  store i8 %4645, i8* %34, align 1
  %4646 = lshr i64 %4628, 63
  %4647 = trunc i64 %4646 to i8
  store i8 %4647, i8* %37, align 1
  %4648 = xor i64 %4646, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %4649 = xor i64 %4646, %4627
  %4650 = add nuw nsw i64 %4648, %4649
  %4651 = icmp eq i64 %4650, 2
  %4652 = zext i1 %4651 to i8
  store i8 %4652, i8* %43, align 1
  %4653 = add i64 %4626, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 20)
  %4654 = load i32, i32* %EAX.i4253, align 4
  %4655 = add i64 %4619, 24
  store i64 %4655, i64* %3, align 8
  %4656 = inttoptr i64 %4653 to i32*
  store i32 %4654, i32* %4656, align 4
  %.pre288 = load i64, i64* %3, align 8
  br label %block_.L_41c994

block_.L_41c994:                                  ; preds = %block_41c93e, %block_41c974, %block_41c95f
  %4657 = phi i64 [ %.pre288, %block_41c974 ], [ %4610, %block_41c95f ], [ %4591, %block_41c93e ]
  %4658 = add i64 %4657, 5
  store i64 %4658, i64* %3, align 8
  %.pre289 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41c999

block_.L_41c999:                                  ; preds = %block_.L_41c994, %block_41c929
  %4659 = phi i64 [ %.pre289, %block_.L_41c994 ], [ %4474, %block_41c929 ]
  %4660 = phi i64 [ %4658, %block_.L_41c994 ], [ %4529, %block_41c929 ]
  %4661 = add i64 %4659, -24
  %4662 = add i64 %4660, 8
  store i64 %4662, i64* %3, align 8
  %4663 = inttoptr i64 %4661 to i32*
  %4664 = load i32, i32* %4663, align 4
  %4665 = add i32 %4664, 1
  %4666 = zext i32 %4665 to i64
  store i64 %4666, i64* %RAX.i1555, align 8
  %4667 = icmp eq i32 %4664, -1
  %4668 = icmp eq i32 %4665, 0
  %4669 = or i1 %4667, %4668
  %4670 = zext i1 %4669 to i8
  store i8 %4670, i8* %19, align 1
  %4671 = and i32 %4665, 255
  %4672 = tail call i32 @llvm.ctpop.i32(i32 %4671)
  %4673 = trunc i32 %4672 to i8
  %4674 = and i8 %4673, 1
  %4675 = xor i8 %4674, 1
  store i8 %4675, i8* %26, align 1
  %4676 = xor i32 %4665, %4664
  %4677 = lshr i32 %4676, 4
  %4678 = trunc i32 %4677 to i8
  %4679 = and i8 %4678, 1
  store i8 %4679, i8* %31, align 1
  %4680 = zext i1 %4668 to i8
  store i8 %4680, i8* %34, align 1
  %4681 = lshr i32 %4665, 31
  %4682 = trunc i32 %4681 to i8
  store i8 %4682, i8* %37, align 1
  %4683 = lshr i32 %4664, 31
  %4684 = xor i32 %4681, %4683
  %4685 = add nuw nsw i32 %4684, %4681
  %4686 = icmp eq i32 %4685, 2
  %4687 = zext i1 %4686 to i8
  store i8 %4687, i8* %43, align 1
  %4688 = add i64 %4660, 14
  store i64 %4688, i64* %3, align 8
  store i32 %4665, i32* %4663, align 4
  %4689 = load i64, i64* %3, align 8
  %4690 = add i64 %4689, -139
  store i64 %4690, i64* %3, align 8
  br label %block_.L_41c91c

block_.L_41c9ac:                                  ; preds = %block_.L_41c91c
  %4691 = add i64 %4503, 7
  store i64 %4691, i64* %3, align 8
  store i32 21, i32* %4477, align 4
  %.pre228 = load i64, i64* %3, align 8
  br label %block_.L_41c9b3

block_.L_41c9b3:                                  ; preds = %block_.L_41ca1d, %block_.L_41c9ac
  %4692 = phi i64 [ %.pre228, %block_.L_41c9ac ], [ %4891, %block_.L_41ca1d ]
  %MEMORY.41 = phi %struct.Memory* [ %call2_41c8bb, %block_.L_41c9ac ], [ %MEMORY.42, %block_.L_41ca1d ]
  %4693 = load i64, i64* %RBP.i, align 8
  %4694 = add i64 %4693, -24
  %4695 = add i64 %4692, 7
  store i64 %4695, i64* %3, align 8
  %4696 = inttoptr i64 %4694 to i32*
  %4697 = load i32, i32* %4696, align 4
  %4698 = add i32 %4697, -400
  %4699 = icmp ult i32 %4697, 400
  %4700 = zext i1 %4699 to i8
  store i8 %4700, i8* %19, align 1
  %4701 = and i32 %4698, 255
  %4702 = tail call i32 @llvm.ctpop.i32(i32 %4701)
  %4703 = trunc i32 %4702 to i8
  %4704 = and i8 %4703, 1
  %4705 = xor i8 %4704, 1
  store i8 %4705, i8* %26, align 1
  %4706 = xor i32 %4697, 16
  %4707 = xor i32 %4706, %4698
  %4708 = lshr i32 %4707, 4
  %4709 = trunc i32 %4708 to i8
  %4710 = and i8 %4709, 1
  store i8 %4710, i8* %31, align 1
  %4711 = icmp eq i32 %4698, 0
  %4712 = zext i1 %4711 to i8
  store i8 %4712, i8* %34, align 1
  %4713 = lshr i32 %4698, 31
  %4714 = trunc i32 %4713 to i8
  store i8 %4714, i8* %37, align 1
  %4715 = lshr i32 %4697, 31
  %4716 = xor i32 %4713, %4715
  %4717 = add nuw nsw i32 %4716, %4715
  %4718 = icmp eq i32 %4717, 2
  %4719 = zext i1 %4718 to i8
  store i8 %4719, i8* %43, align 1
  %4720 = icmp ne i8 %4714, 0
  %4721 = xor i1 %4720, %4718
  %.v330 = select i1 %4721, i64 13, i64 125
  %4722 = add i64 %4692, %.v330
  store i64 %4722, i64* %3, align 8
  br i1 %4721, label %block_41c9c0, label %block_.L_41ca30

block_41c9c0:                                     ; preds = %block_.L_41c9b3
  %4723 = add i64 %4722, 4
  store i64 %4723, i64* %3, align 8
  %4724 = load i32, i32* %4696, align 4
  %4725 = sext i32 %4724 to i64
  store i64 %4725, i64* %RAX.i1555, align 8
  %4726 = add nsw i64 %4725, 12099168
  %4727 = add i64 %4722, 12
  store i64 %4727, i64* %3, align 8
  %4728 = inttoptr i64 %4726 to i8*
  %4729 = load i8, i8* %4728, align 1
  %4730 = zext i8 %4729 to i64
  store i64 %4730, i64* %RCX.i4050.pre-phi, align 8
  %4731 = zext i8 %4729 to i32
  %4732 = add nsw i32 %4731, -3
  %4733 = icmp ult i8 %4729, 3
  %4734 = zext i1 %4733 to i8
  store i8 %4734, i8* %19, align 1
  %4735 = and i32 %4732, 255
  %4736 = tail call i32 @llvm.ctpop.i32(i32 %4735)
  %4737 = trunc i32 %4736 to i8
  %4738 = and i8 %4737, 1
  %4739 = xor i8 %4738, 1
  store i8 %4739, i8* %26, align 1
  %4740 = xor i32 %4732, %4731
  %4741 = lshr i32 %4740, 4
  %4742 = trunc i32 %4741 to i8
  %4743 = and i8 %4742, 1
  store i8 %4743, i8* %31, align 1
  %4744 = icmp eq i32 %4732, 0
  %4745 = zext i1 %4744 to i8
  store i8 %4745, i8* %34, align 1
  %4746 = lshr i32 %4732, 31
  %4747 = trunc i32 %4746 to i8
  store i8 %4747, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v411 = select i1 %4744, i64 93, i64 21
  %4748 = add i64 %4722, %.v411
  store i64 %4748, i64* %3, align 8
  br i1 %4744, label %block_.L_41ca1d, label %block_41c9d5

block_41c9d5:                                     ; preds = %block_41c9c0
  store i64 76, i64* %RAX.i1555, align 8
  store i64 76, i64* %RDX.i4244, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i4050.pre-phi, align 8
  %4749 = add i64 %4748, 21
  store i64 %4749, i64* %3, align 8
  %4750 = load i32, i32* %4696, align 4
  %4751 = sext i32 %4750 to i64
  %4752 = mul nsw i64 %4751, 76
  store i64 %4752, i64* %RSI.i4246, align 8
  %4753 = lshr i64 %4752, 63
  %4754 = add i64 %4752, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %4754, i64* %RDI.i4254, align 8
  %4755 = icmp ult i64 %4754, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4756 = icmp ult i64 %4754, %4752
  %4757 = or i1 %4755, %4756
  %4758 = zext i1 %4757 to i8
  store i8 %4758, i8* %19, align 1
  %4759 = trunc i64 %4754 to i32
  %4760 = and i32 %4759, 252
  %4761 = tail call i32 @llvm.ctpop.i32(i32 %4760)
  %4762 = trunc i32 %4761 to i8
  %4763 = and i8 %4762, 1
  %4764 = xor i8 %4763, 1
  store i8 %4764, i8* %26, align 1
  %4765 = xor i64 %4752, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %4766 = xor i64 %4765, %4754
  %4767 = lshr i64 %4766, 4
  %4768 = trunc i64 %4767 to i8
  %4769 = and i8 %4768, 1
  store i8 %4769, i8* %31, align 1
  %4770 = icmp eq i64 %4754, 0
  %4771 = zext i1 %4770 to i8
  store i8 %4771, i8* %34, align 1
  %4772 = lshr i64 %4754, 63
  %4773 = trunc i64 %4772 to i8
  store i8 %4773, i8* %37, align 1
  %4774 = xor i64 %4772, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %4775 = xor i64 %4772, %4753
  %4776 = add nuw nsw i64 %4774, %4775
  %4777 = icmp eq i64 %4776, 2
  %4778 = zext i1 %4777 to i8
  store i8 %4778, i8* %43, align 1
  %4779 = add i64 %4693, -88
  %4780 = add i64 %4748, 35
  store i64 %4780, i64* %3, align 8
  %4781 = inttoptr i64 %4779 to i64*
  store i64 %4754, i64* %4781, align 8
  %4782 = load i64, i64* %RBP.i, align 8
  %4783 = add i64 %4782, -24
  %4784 = load i64, i64* %3, align 8
  %4785 = add i64 %4784, 4
  store i64 %4785, i64* %3, align 8
  %4786 = inttoptr i64 %4783 to i32*
  %4787 = load i32, i32* %4786, align 4
  %4788 = sext i32 %4787 to i64
  %4789 = mul nsw i64 %4788, 76
  store i64 %4789, i64* %RSI.i4246, align 8
  %4790 = lshr i64 %4789, 63
  %4791 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %4792 = add i64 %4789, %4791
  store i64 %4792, i64* %RDI.i4254, align 8
  %4793 = icmp ult i64 %4792, %4791
  %4794 = icmp ult i64 %4792, %4789
  %4795 = or i1 %4793, %4794
  %4796 = zext i1 %4795 to i8
  store i8 %4796, i8* %19, align 1
  %4797 = trunc i64 %4792 to i32
  %4798 = and i32 %4797, 255
  %4799 = tail call i32 @llvm.ctpop.i32(i32 %4798)
  %4800 = trunc i32 %4799 to i8
  %4801 = and i8 %4800, 1
  %4802 = xor i8 %4801, 1
  store i8 %4802, i8* %26, align 1
  %4803 = xor i64 %4789, %4791
  %4804 = xor i64 %4803, %4792
  %4805 = lshr i64 %4804, 4
  %4806 = trunc i64 %4805 to i8
  %4807 = and i8 %4806, 1
  store i8 %4807, i8* %31, align 1
  %4808 = icmp eq i64 %4792, 0
  %4809 = zext i1 %4808 to i8
  store i8 %4809, i8* %34, align 1
  %4810 = lshr i64 %4792, 63
  %4811 = trunc i64 %4810 to i8
  store i8 %4811, i8* %37, align 1
  %4812 = lshr i64 %4791, 63
  %4813 = xor i64 %4810, %4812
  %4814 = xor i64 %4810, %4790
  %4815 = add nuw nsw i64 %4813, %4814
  %4816 = icmp eq i64 %4815, 2
  %4817 = zext i1 %4816 to i8
  store i8 %4817, i8* %43, align 1
  %4818 = add i64 %4782, -88
  %4819 = add i64 %4784, 18
  store i64 %4819, i64* %3, align 8
  %4820 = inttoptr i64 %4818 to i64*
  %4821 = load i64, i64* %4820, align 8
  store i64 %4821, i64* %RSI.i4246, align 8
  %4822 = add i64 %4821, 8
  %4823 = add i64 %4784, 22
  store i64 %4823, i64* %3, align 8
  %4824 = inttoptr i64 %4822 to i32*
  %4825 = load i32, i32* %4824, align 4
  %4826 = sext i32 %4825 to i64
  %4827 = mul nsw i64 %4826, 76
  %4828 = lshr i64 %4827, 63
  %4829 = add i64 %4827, %4791
  store i64 %4829, i64* %RCX.i4050.pre-phi, align 8
  %4830 = icmp ult i64 %4829, %4791
  %4831 = icmp ult i64 %4829, %4827
  %4832 = or i1 %4830, %4831
  %4833 = zext i1 %4832 to i8
  store i8 %4833, i8* %19, align 1
  %4834 = trunc i64 %4829 to i32
  %4835 = and i32 %4834, 255
  %4836 = tail call i32 @llvm.ctpop.i32(i32 %4835)
  %4837 = trunc i32 %4836 to i8
  %4838 = and i8 %4837, 1
  %4839 = xor i8 %4838, 1
  store i8 %4839, i8* %26, align 1
  %4840 = xor i64 %4827, %4791
  %4841 = xor i64 %4840, %4829
  %4842 = lshr i64 %4841, 4
  %4843 = trunc i64 %4842 to i8
  %4844 = and i8 %4843, 1
  store i8 %4844, i8* %31, align 1
  %4845 = icmp eq i64 %4829, 0
  %4846 = zext i1 %4845 to i8
  store i8 %4846, i8* %34, align 1
  %4847 = lshr i64 %4829, 63
  %4848 = trunc i64 %4847 to i8
  store i8 %4848, i8* %37, align 1
  %4849 = xor i64 %4847, %4812
  %4850 = xor i64 %4847, %4828
  %4851 = add nuw nsw i64 %4849, %4850
  %4852 = icmp eq i64 %4851, 2
  %4853 = zext i1 %4852 to i8
  store i8 %4853, i8* %43, align 1
  store i64 %4829, i64* %RSI.i4246, align 8
  %4854 = add i64 %4784, -112904
  %4855 = add i64 %4784, 37
  %4856 = load i64, i64* %6, align 8
  %4857 = add i64 %4856, -8
  %4858 = inttoptr i64 %4857 to i64*
  store i64 %4855, i64* %4858, align 8
  store i64 %4857, i64* %6, align 8
  store i64 %4854, i64* %3, align 8
  %4859 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %MEMORY.41)
  %.pre286 = load i64, i64* %3, align 8
  %.pre287 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41ca1d

block_.L_41ca1d:                                  ; preds = %block_41c9d5, %block_41c9c0
  %4860 = phi i64 [ %4693, %block_41c9c0 ], [ %.pre287, %block_41c9d5 ]
  %4861 = phi i64 [ %4748, %block_41c9c0 ], [ %.pre286, %block_41c9d5 ]
  %MEMORY.42 = phi %struct.Memory* [ %MEMORY.41, %block_41c9c0 ], [ %4859, %block_41c9d5 ]
  %4862 = add i64 %4860, -24
  %4863 = add i64 %4861, 8
  store i64 %4863, i64* %3, align 8
  %4864 = inttoptr i64 %4862 to i32*
  %4865 = load i32, i32* %4864, align 4
  %4866 = add i32 %4865, 1
  %4867 = zext i32 %4866 to i64
  store i64 %4867, i64* %RAX.i1555, align 8
  %4868 = icmp eq i32 %4865, -1
  %4869 = icmp eq i32 %4866, 0
  %4870 = or i1 %4868, %4869
  %4871 = zext i1 %4870 to i8
  store i8 %4871, i8* %19, align 1
  %4872 = and i32 %4866, 255
  %4873 = tail call i32 @llvm.ctpop.i32(i32 %4872)
  %4874 = trunc i32 %4873 to i8
  %4875 = and i8 %4874, 1
  %4876 = xor i8 %4875, 1
  store i8 %4876, i8* %26, align 1
  %4877 = xor i32 %4866, %4865
  %4878 = lshr i32 %4877, 4
  %4879 = trunc i32 %4878 to i8
  %4880 = and i8 %4879, 1
  store i8 %4880, i8* %31, align 1
  %4881 = zext i1 %4869 to i8
  store i8 %4881, i8* %34, align 1
  %4882 = lshr i32 %4866, 31
  %4883 = trunc i32 %4882 to i8
  store i8 %4883, i8* %37, align 1
  %4884 = lshr i32 %4865, 31
  %4885 = xor i32 %4882, %4884
  %4886 = add nuw nsw i32 %4885, %4882
  %4887 = icmp eq i32 %4886, 2
  %4888 = zext i1 %4887 to i8
  store i8 %4888, i8* %43, align 1
  %4889 = add i64 %4861, 14
  store i64 %4889, i64* %3, align 8
  store i32 %4866, i32* %4864, align 4
  %4890 = load i64, i64* %3, align 8
  %4891 = add i64 %4890, -120
  store i64 %4891, i64* %3, align 8
  br label %block_.L_41c9b3

block_.L_41ca30:                                  ; preds = %block_.L_41c9b3
  %4892 = add i64 %4722, 10512
  %4893 = add i64 %4722, 5
  %4894 = load i64, i64* %6, align 8
  %4895 = add i64 %4894, -8
  %4896 = inttoptr i64 %4895 to i64*
  store i64 %4893, i64* %4896, align 8
  store i64 %4895, i64* %6, align 8
  store i64 %4892, i64* %3, align 8
  %call2_41ca30 = tail call %struct.Memory* @sub_41f340.find_neighbor_dragons(%struct.State* nonnull %0, i64 %4892, %struct.Memory* %MEMORY.41)
  %4897 = load i64, i64* %3, align 8
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57afa4_type* @G__0x57afa4 to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %4898 = add i64 %4897, add (i64 ptrtoint (%G_0xc6512__rip__type* @G_0xc6512__rip_ to i64), i64 17)
  %4899 = add i64 %4897, 25
  store i64 %4899, i64* %3, align 8
  %4900 = inttoptr i64 %4898 to i64*
  %4901 = load i64, i64* %4900, align 8
  store i64 %4901, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %4902 = add i64 %4897, 391579
  %4903 = add i64 %4897, 30
  %4904 = load i64, i64* %6, align 8
  %4905 = add i64 %4904, -8
  %4906 = inttoptr i64 %4905 to i64*
  store i64 %4903, i64* %4906, align 8
  store i64 %4905, i64* %6, align 8
  store i64 %4902, i64* %3, align 8
  %call2_41ca4e = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %4902, %struct.Memory* %call2_41ca30)
  %4907 = load i64, i64* %RBP.i, align 8
  %4908 = add i64 %4907, -16
  %4909 = load i64, i64* %3, align 8
  %4910 = add i64 %4909, 4
  store i64 %4910, i64* %3, align 8
  %4911 = inttoptr i64 %4908 to i32*
  %4912 = load i32, i32* %4911, align 4
  store i8 0, i8* %19, align 1
  %4913 = and i32 %4912, 255
  %4914 = tail call i32 @llvm.ctpop.i32(i32 %4913)
  %4915 = trunc i32 %4914 to i8
  %4916 = and i8 %4915, 1
  %4917 = xor i8 %4916, 1
  store i8 %4917, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %4918 = icmp eq i32 %4912, 0
  %4919 = zext i1 %4918 to i8
  store i8 %4919, i8* %34, align 1
  %4920 = lshr i32 %4912, 31
  %4921 = trunc i32 %4920 to i8
  store i8 %4921, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %4922 = add i64 %4907, -960
  %4923 = add i64 %4909, 12
  store i64 %4923, i64* %3, align 8
  %4924 = load i64, i64* %93, align 1
  %4925 = inttoptr i64 %4922 to i64*
  store i64 %4924, i64* %4925, align 8
  %4926 = load i64, i64* %3, align 8
  %4927 = load i8, i8* %34, align 1
  %4928 = icmp ne i8 %4927, 0
  %.v495 = select i1 %4928, i64 11, i64 6
  %4929 = add i64 %4926, %.v495
  store i64 %4929, i64* %3, align 8
  %cmpBr_41ca5f = icmp eq i8 %4927, 1
  br i1 %cmpBr_41ca5f, label %block_.L_41ca6a, label %block_41ca65

block_41ca65:                                     ; preds = %block_.L_41ca30
  %4930 = add i64 %4929, 5695
  store i64 %4930, i64* %3, align 8
  br label %block_.L_41e0a4

block_.L_41ca6a:                                  ; preds = %block_.L_41ca30
  %4931 = add i64 %4929, 208902
  %4932 = add i64 %4929, 5
  %4933 = load i64, i64* %6, align 8
  %4934 = add i64 %4933, -8
  %4935 = inttoptr i64 %4934 to i64*
  store i64 %4932, i64* %4935, align 8
  store i64 %4934, i64* %6, align 8
  store i64 %4931, i64* %3, align 8
  %call2_41ca6a = tail call %struct.Memory* @sub_44fa70.purge_persistent_owl_cache(%struct.State* nonnull %0, i64 %4931, %struct.Memory* %call2_41ca4e)
  %4936 = load i64, i64* %RBP.i, align 8
  %4937 = add i64 %4936, -24
  %4938 = load i64, i64* %3, align 8
  %4939 = add i64 %4938, 7
  store i64 %4939, i64* %3, align 8
  %4940 = inttoptr i64 %4937 to i32*
  store i32 21, i32* %4940, align 4
  %4941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4942 = bitcast %union.VectorReg* %4941 to i8*
  %4943 = bitcast %union.VectorReg* %4941 to <2 x i32>*
  %4944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %4945 = bitcast i64* %4944 to <2 x i32>*
  %4946 = bitcast %union.VectorReg* %4941 to float*
  %4947 = getelementptr inbounds i8, i8* %4942, i64 4
  %4948 = bitcast i8* %4947 to i32*
  %4949 = bitcast i64* %4944 to i32*
  %4950 = getelementptr inbounds i8, i8* %4942, i64 12
  %4951 = bitcast i8* %4950 to i32*
  %4952 = bitcast %union.VectorReg* %4941 to double*
  %4953 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4941, i64 0, i32 0, i32 0, i32 0, i64 0
  %4954 = bitcast i64* %4944 to double*
  %4955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4956 = bitcast %union.VectorReg* %4955 to double*
  %4957 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4955, i64 0, i32 0, i32 0, i32 0, i64 0
  %4958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %4959 = bitcast i64* %4958 to double*
  %4960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %4961 = bitcast %union.VectorReg* %4960 to double*
  %4962 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4960, i64 0, i32 0, i32 0, i32 0, i64 0
  %4963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %4964 = bitcast i64* %4963 to double*
  %4965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %4966 = bitcast %union.VectorReg* %4965 to double*
  %.pre229 = load i64, i64* %3, align 8
  br label %block_.L_41ca76

block_.L_41ca76:                                  ; preds = %block_.L_41d021, %block_.L_41ca6a
  %4967 = phi i64 [ %.pre229, %block_.L_41ca6a ], [ %6926, %block_.L_41d021 ]
  %MEMORY.43 = phi %struct.Memory* [ %call2_41ca6a, %block_.L_41ca6a ], [ %MEMORY.57, %block_.L_41d021 ]
  %4968 = load i64, i64* %RBP.i, align 8
  %4969 = add i64 %4968, -24
  %4970 = add i64 %4967, 7
  store i64 %4970, i64* %3, align 8
  %4971 = inttoptr i64 %4969 to i32*
  %4972 = load i32, i32* %4971, align 4
  %4973 = add i32 %4972, -400
  %4974 = icmp ult i32 %4972, 400
  %4975 = zext i1 %4974 to i8
  store i8 %4975, i8* %19, align 1
  %4976 = and i32 %4973, 255
  %4977 = tail call i32 @llvm.ctpop.i32(i32 %4976)
  %4978 = trunc i32 %4977 to i8
  %4979 = and i8 %4978, 1
  %4980 = xor i8 %4979, 1
  store i8 %4980, i8* %26, align 1
  %4981 = xor i32 %4972, 16
  %4982 = xor i32 %4981, %4973
  %4983 = lshr i32 %4982, 4
  %4984 = trunc i32 %4983 to i8
  %4985 = and i8 %4984, 1
  store i8 %4985, i8* %31, align 1
  %4986 = icmp eq i32 %4973, 0
  %4987 = zext i1 %4986 to i8
  store i8 %4987, i8* %34, align 1
  %4988 = lshr i32 %4973, 31
  %4989 = trunc i32 %4988 to i8
  store i8 %4989, i8* %37, align 1
  %4990 = lshr i32 %4972, 31
  %4991 = xor i32 %4988, %4990
  %4992 = add nuw nsw i32 %4991, %4990
  %4993 = icmp eq i32 %4992, 2
  %4994 = zext i1 %4993 to i8
  store i8 %4994, i8* %43, align 1
  %4995 = icmp ne i8 %4989, 0
  %4996 = xor i1 %4995, %4993
  %.v331 = select i1 %4996, i64 13, i64 1465
  %4997 = add i64 %4967, %.v331
  store i64 %4997, i64* %3, align 8
  br i1 %4996, label %block_41ca83, label %block_.L_41d02f

block_41ca83:                                     ; preds = %block_.L_41ca76
  %4998 = add i64 %4997, 4
  store i64 %4998, i64* %3, align 8
  %4999 = load i32, i32* %4971, align 4
  %5000 = sext i32 %4999 to i64
  store i64 %5000, i64* %RAX.i1555, align 8
  %5001 = add nsw i64 %5000, 12099168
  %5002 = add i64 %4997, 12
  store i64 %5002, i64* %3, align 8
  %5003 = inttoptr i64 %5001 to i8*
  %5004 = load i8, i8* %5003, align 1
  %5005 = zext i8 %5004 to i64
  store i64 %5005, i64* %RCX.i4050.pre-phi, align 8
  %5006 = zext i8 %5004 to i32
  %5007 = add nsw i32 %5006, -3
  %5008 = icmp ult i8 %5004, 3
  %5009 = zext i1 %5008 to i8
  store i8 %5009, i8* %19, align 1
  %5010 = and i32 %5007, 255
  %5011 = tail call i32 @llvm.ctpop.i32(i32 %5010)
  %5012 = trunc i32 %5011 to i8
  %5013 = and i8 %5012, 1
  %5014 = xor i8 %5013, 1
  store i8 %5014, i8* %26, align 1
  %5015 = xor i32 %5007, %5006
  %5016 = lshr i32 %5015, 4
  %5017 = trunc i32 %5016 to i8
  %5018 = and i8 %5017, 1
  store i8 %5018, i8* %31, align 1
  %5019 = icmp eq i32 %5007, 0
  %5020 = zext i1 %5019 to i8
  store i8 %5020, i8* %34, align 1
  %5021 = lshr i32 %5007, 31
  %5022 = trunc i32 %5021 to i8
  store i8 %5022, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v399 = select i1 %5019, i64 1433, i64 21
  %5023 = add i64 %4997, %.v399
  store i64 %5023, i64* %3, align 8
  br i1 %5019, label %block_.L_41d01c, label %block_41ca98

block_41ca98:                                     ; preds = %block_41ca83
  %5024 = add i64 %4968, -104
  store i64 %5024, i64* %RDI.i4254, align 8
  %5025 = zext i32 %4999 to i64
  %5026 = xor i64 %5025, %5000
  %5027 = trunc i64 %5026 to i32
  %5028 = and i64 %5026, 4294967295
  store i64 %5028, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  %5029 = and i32 %5027, 255
  %5030 = tail call i32 @llvm.ctpop.i32(i32 %5029)
  %5031 = trunc i32 %5030 to i8
  %5032 = and i8 %5031, 1
  %5033 = xor i8 %5032, 1
  store i8 %5033, i8* %26, align 1
  %5034 = icmp eq i32 %5027, 0
  %5035 = zext i1 %5034 to i8
  store i8 %5035, i8* %34, align 1
  %5036 = lshr i32 %5027, 31
  %5037 = trunc i32 %5036 to i8
  store i8 %5037, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %5038 = add i64 %4968, -92
  %5039 = add i64 %5023, 13
  store i64 %5039, i64* %3, align 8
  %5040 = inttoptr i64 %5038 to i32*
  store i32 0, i32* %5040, align 4
  %5041 = load i64, i64* %RBP.i, align 8
  %5042 = add i64 %5041, -96
  %5043 = load i64, i64* %3, align 8
  %5044 = add i64 %5043, 7
  store i64 %5044, i64* %3, align 8
  %5045 = inttoptr i64 %5042 to i32*
  store i32 0, i32* %5045, align 4
  %5046 = load i32, i32* %EAX.i4253, align 4
  %5047 = zext i32 %5046 to i64
  %5048 = load i64, i64* %3, align 8
  store i64 %5047, i64* %RSI.i4246, align 8
  store i64 %5047, i64* %RDX.i4244, align 8
  store i64 %5047, i64* %RCX.i4050.pre-phi, align 8
  store i64 %5047, i64* %R8.i3778, align 8
  %5049 = add i64 %5048, 116980
  %5050 = add i64 %5048, 14
  %5051 = load i64, i64* %6, align 8
  %5052 = add i64 %5051, -8
  %5053 = inttoptr i64 %5052 to i64*
  store i64 %5050, i64* %5053, align 8
  store i64 %5052, i64* %6, align 8
  store i64 %5049, i64* %3, align 8
  %call2_41cab5 = tail call %struct.Memory* @sub_4393a0.set_eyevalue(%struct.State* nonnull %0, i64 %5049, %struct.Memory* %MEMORY.43)
  %5054 = load i64, i64* %RBP.i, align 8
  %5055 = add i64 %5054, -24
  %5056 = load i64, i64* %3, align 8
  %5057 = add i64 %5056, 4
  store i64 %5057, i64* %3, align 8
  %5058 = inttoptr i64 %5055 to i32*
  %5059 = load i32, i32* %5058, align 4
  %5060 = sext i32 %5059 to i64
  store i64 %5060, i64* %RDI.i4254, align 8
  %5061 = add nsw i64 %5060, 12099168
  %5062 = add i64 %5056, 12
  store i64 %5062, i64* %3, align 8
  %5063 = inttoptr i64 %5061 to i8*
  %5064 = load i8, i8* %5063, align 1
  %5065 = zext i8 %5064 to i64
  store i64 %5065, i64* %RAX.i1555, align 8
  %5066 = zext i8 %5064 to i32
  store i8 0, i8* %19, align 1
  %5067 = tail call i32 @llvm.ctpop.i32(i32 %5066)
  %5068 = trunc i32 %5067 to i8
  %5069 = and i8 %5068, 1
  %5070 = xor i8 %5069, 1
  store i8 %5070, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5071 = icmp eq i8 %5064, 0
  %5072 = zext i1 %5071 to i8
  store i8 %5072, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v400 = select i1 %5071, i64 54, i64 21
  %5073 = add i64 %5056, %.v400
  store i64 %5073, i64* %3, align 8
  br i1 %5071, label %block_.L_41caf0, label %block_41cacf

block_41cacf:                                     ; preds = %block_41ca98
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %5074 = add i64 %5073, 14
  store i64 %5074, i64* %3, align 8
  %5075 = load i32, i32* %5058, align 4
  %5076 = sext i32 %5075 to i64
  %5077 = mul nsw i64 %5076, 76
  store i64 %5077, i64* %RCX.i4050.pre-phi, align 8
  %5078 = lshr i64 %5077, 63
  %5079 = add i64 %5077, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %5079, i64* %RAX.i1555, align 8
  %5080 = icmp ult i64 %5079, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5081 = icmp ult i64 %5079, %5077
  %5082 = or i1 %5080, %5081
  %5083 = zext i1 %5082 to i8
  store i8 %5083, i8* %19, align 1
  %5084 = trunc i64 %5079 to i32
  %5085 = and i32 %5084, 252
  %5086 = tail call i32 @llvm.ctpop.i32(i32 %5085)
  %5087 = trunc i32 %5086 to i8
  %5088 = and i8 %5087, 1
  %5089 = xor i8 %5088, 1
  store i8 %5089, i8* %26, align 1
  %5090 = xor i64 %5077, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5091 = xor i64 %5090, %5079
  %5092 = lshr i64 %5091, 4
  %5093 = trunc i64 %5092 to i8
  %5094 = and i8 %5093, 1
  store i8 %5094, i8* %31, align 1
  %5095 = icmp eq i64 %5079, 0
  %5096 = zext i1 %5095 to i8
  store i8 %5096, i8* %34, align 1
  %5097 = lshr i64 %5079, 63
  %5098 = trunc i64 %5097 to i8
  store i8 %5098, i8* %37, align 1
  %5099 = xor i64 %5097, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %5100 = xor i64 %5097, %5078
  %5101 = add nuw nsw i64 %5099, %5100
  %5102 = icmp eq i64 %5101, 2
  %5103 = zext i1 %5102 to i8
  store i8 %5103, i8* %43, align 1
  %5104 = add i64 %5077, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 8)
  %5105 = add i64 %5073, 24
  store i64 %5105, i64* %3, align 8
  %5106 = inttoptr i64 %5104 to i32*
  %5107 = load i32, i32* %5106, align 4
  %5108 = zext i32 %5107 to i64
  store i64 %5108, i64* %RDX.i4244, align 8
  %5109 = add i64 %5073, 27
  store i64 %5109, i64* %3, align 8
  %5110 = load i32, i32* %5058, align 4
  %5111 = sub i32 %5107, %5110
  %5112 = icmp ult i32 %5107, %5110
  %5113 = zext i1 %5112 to i8
  store i8 %5113, i8* %19, align 1
  %5114 = and i32 %5111, 255
  %5115 = tail call i32 @llvm.ctpop.i32(i32 %5114)
  %5116 = trunc i32 %5115 to i8
  %5117 = and i8 %5116, 1
  %5118 = xor i8 %5117, 1
  store i8 %5118, i8* %26, align 1
  %5119 = xor i32 %5110, %5107
  %5120 = xor i32 %5119, %5111
  %5121 = lshr i32 %5120, 4
  %5122 = trunc i32 %5121 to i8
  %5123 = and i8 %5122, 1
  store i8 %5123, i8* %31, align 1
  %5124 = icmp eq i32 %5111, 0
  %5125 = zext i1 %5124 to i8
  store i8 %5125, i8* %34, align 1
  %5126 = lshr i32 %5111, 31
  %5127 = trunc i32 %5126 to i8
  store i8 %5127, i8* %37, align 1
  %5128 = lshr i32 %5107, 31
  %5129 = lshr i32 %5110, 31
  %5130 = xor i32 %5129, %5128
  %5131 = xor i32 %5126, %5128
  %5132 = add nuw nsw i32 %5131, %5130
  %5133 = icmp eq i32 %5132, 2
  %5134 = zext i1 %5133 to i8
  store i8 %5134, i8* %43, align 1
  %.v401 = select i1 %5124, i64 38, i64 33
  %5135 = add i64 %5073, %.v401
  store i64 %5135, i64* %3, align 8
  br i1 %5124, label %block_.L_41caf5, label %block_.L_41caf0

block_.L_41caf0:                                  ; preds = %block_41cacf, %block_41ca98
  %5136 = phi i64 [ %5135, %block_41cacf ], [ %5073, %block_41ca98 ]
  %5137 = add i64 %5136, 1329
  br label %block_.L_41d021

block_.L_41caf5:                                  ; preds = %block_41cacf
  store i64 1, i64* %RDI.i4254, align 8
  %5138 = load i64, i64* %RBP.i, align 8
  %5139 = add i64 %5138, -104
  store i64 %5139, i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %5140 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5140, i64* %RCX.i4050.pre-phi, align 8
  %5141 = add i64 %5138, -24
  %5142 = add i64 %5135, 33
  store i64 %5142, i64* %3, align 8
  %5143 = inttoptr i64 %5141 to i32*
  %5144 = load i32, i32* %5143, align 4
  %5145 = sext i32 %5144 to i64
  %5146 = mul nsw i64 %5145, 76
  store i64 %5146, i64* %R8.i3778, align 8
  %5147 = lshr i64 %5146, 63
  %5148 = add i64 %5146, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %5148, i64* %R9.i3505, align 8
  %5149 = icmp ult i64 %5148, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5150 = icmp ult i64 %5148, %5146
  %5151 = or i1 %5149, %5150
  %5152 = zext i1 %5151 to i8
  store i8 %5152, i8* %19, align 1
  %5153 = trunc i64 %5148 to i32
  %5154 = and i32 %5153, 252
  %5155 = tail call i32 @llvm.ctpop.i32(i32 %5154)
  %5156 = trunc i32 %5155 to i8
  %5157 = and i8 %5156, 1
  %5158 = xor i8 %5157, 1
  store i8 %5158, i8* %26, align 1
  %5159 = xor i64 %5146, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5160 = xor i64 %5159, %5148
  %5161 = lshr i64 %5160, 4
  %5162 = trunc i64 %5161 to i8
  %5163 = and i8 %5162, 1
  store i8 %5163, i8* %31, align 1
  %5164 = icmp eq i64 %5148, 0
  %5165 = zext i1 %5164 to i8
  store i8 %5165, i8* %34, align 1
  %5166 = lshr i64 %5148, 63
  %5167 = trunc i64 %5166 to i8
  store i8 %5167, i8* %37, align 1
  %5168 = xor i64 %5166, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %5169 = xor i64 %5166, %5147
  %5170 = add nuw nsw i64 %5168, %5169
  %5171 = icmp eq i64 %5170, 2
  %5172 = zext i1 %5171 to i8
  store i8 %5172, i8* %43, align 1
  %5173 = add i64 %5146, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %5174 = add i64 %5135, 47
  store i64 %5174, i64* %3, align 8
  %5175 = inttoptr i64 %5173 to i32*
  %5176 = load i32, i32* %5175, align 4
  %5177 = sext i32 %5176 to i64
  %5178 = mul nsw i64 %5177, 104
  store i64 %5178, i64* %R8.i3778, align 8
  %5179 = lshr i64 %5178, 63
  %5180 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %5181 = add i64 %5178, %5180
  store i64 %5181, i64* %RCX.i4050.pre-phi, align 8
  %5182 = icmp ult i64 %5181, %5180
  %5183 = icmp ult i64 %5181, %5178
  %5184 = or i1 %5182, %5183
  %5185 = zext i1 %5184 to i8
  store i8 %5185, i8* %19, align 1
  %5186 = trunc i64 %5181 to i32
  %5187 = and i32 %5186, 255
  %5188 = tail call i32 @llvm.ctpop.i32(i32 %5187)
  %5189 = trunc i32 %5188 to i8
  %5190 = and i8 %5189, 1
  %5191 = xor i8 %5190, 1
  store i8 %5191, i8* %26, align 1
  %5192 = xor i64 %5178, %5180
  %5193 = xor i64 %5192, %5181
  %5194 = lshr i64 %5193, 4
  %5195 = trunc i64 %5194 to i8
  %5196 = and i8 %5195, 1
  store i8 %5196, i8* %31, align 1
  %5197 = icmp eq i64 %5181, 0
  %5198 = zext i1 %5197 to i8
  store i8 %5198, i8* %34, align 1
  %5199 = lshr i64 %5181, 63
  %5200 = trunc i64 %5199 to i8
  store i8 %5200, i8* %37, align 1
  %5201 = lshr i64 %5180, 63
  %5202 = xor i64 %5199, %5201
  %5203 = xor i64 %5199, %5179
  %5204 = add nuw nsw i64 %5202, %5203
  %5205 = icmp eq i64 %5204, 2
  %5206 = zext i1 %5205 to i8
  store i8 %5206, i8* %43, align 1
  %5207 = add i64 %5181, 56
  %5208 = add i64 %5135, 59
  store i64 %5208, i64* %3, align 8
  %5209 = inttoptr i64 %5207 to i32*
  %5210 = load i32, i32* %5209, align 4
  store i32 %5210, i32* %4325, align 1
  store float 0.000000e+00, float* %4327, align 1
  store float 0.000000e+00, float* %4328, align 1
  store float 0.000000e+00, float* %4330, align 1
  %5211 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5211, i64* %RCX.i4050.pre-phi, align 8
  %5212 = load i64, i64* %RBP.i, align 8
  %5213 = add i64 %5212, -24
  %5214 = add i64 %5135, 71
  store i64 %5214, i64* %3, align 8
  %5215 = inttoptr i64 %5213 to i32*
  %5216 = load i32, i32* %5215, align 4
  %5217 = sext i32 %5216 to i64
  %5218 = mul nsw i64 %5217, 76
  store i64 %5218, i64* %R8.i3778, align 8
  %5219 = lshr i64 %5218, 63
  %5220 = load i64, i64* %RAX.i1555, align 8
  %5221 = add i64 %5218, %5220
  store i64 %5221, i64* %RAX.i1555, align 8
  %5222 = icmp ult i64 %5221, %5220
  %5223 = icmp ult i64 %5221, %5218
  %5224 = or i1 %5222, %5223
  %5225 = zext i1 %5224 to i8
  store i8 %5225, i8* %19, align 1
  %5226 = trunc i64 %5221 to i32
  %5227 = and i32 %5226, 255
  %5228 = tail call i32 @llvm.ctpop.i32(i32 %5227)
  %5229 = trunc i32 %5228 to i8
  %5230 = and i8 %5229, 1
  %5231 = xor i8 %5230, 1
  store i8 %5231, i8* %26, align 1
  %5232 = xor i64 %5218, %5220
  %5233 = xor i64 %5232, %5221
  %5234 = lshr i64 %5233, 4
  %5235 = trunc i64 %5234 to i8
  %5236 = and i8 %5235, 1
  store i8 %5236, i8* %31, align 1
  %5237 = icmp eq i64 %5221, 0
  %5238 = zext i1 %5237 to i8
  store i8 %5238, i8* %34, align 1
  %5239 = lshr i64 %5221, 63
  %5240 = trunc i64 %5239 to i8
  store i8 %5240, i8* %37, align 1
  %5241 = lshr i64 %5220, 63
  %5242 = xor i64 %5239, %5241
  %5243 = xor i64 %5239, %5219
  %5244 = add nuw nsw i64 %5242, %5243
  %5245 = icmp eq i64 %5244, 2
  %5246 = zext i1 %5245 to i8
  store i8 %5246, i8* %43, align 1
  %5247 = add i64 %5221, 4
  %5248 = add i64 %5135, 82
  store i64 %5248, i64* %3, align 8
  %5249 = inttoptr i64 %5247 to i32*
  %5250 = load i32, i32* %5249, align 4
  %5251 = sext i32 %5250 to i64
  %5252 = mul nsw i64 %5251, 104
  store i64 %5252, i64* %RAX.i1555, align 8
  %5253 = lshr i64 %5252, 63
  %5254 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %5255 = add i64 %5252, %5254
  store i64 %5255, i64* %RCX.i4050.pre-phi, align 8
  %5256 = icmp ult i64 %5255, %5254
  %5257 = icmp ult i64 %5255, %5252
  %5258 = or i1 %5256, %5257
  %5259 = zext i1 %5258 to i8
  store i8 %5259, i8* %19, align 1
  %5260 = trunc i64 %5255 to i32
  %5261 = and i32 %5260, 255
  %5262 = tail call i32 @llvm.ctpop.i32(i32 %5261)
  %5263 = trunc i32 %5262 to i8
  %5264 = and i8 %5263, 1
  %5265 = xor i8 %5264, 1
  store i8 %5265, i8* %26, align 1
  %5266 = xor i64 %5252, %5254
  %5267 = xor i64 %5266, %5255
  %5268 = lshr i64 %5267, 4
  %5269 = trunc i64 %5268 to i8
  %5270 = and i8 %5269, 1
  store i8 %5270, i8* %31, align 1
  %5271 = icmp eq i64 %5255, 0
  %5272 = zext i1 %5271 to i8
  store i8 %5272, i8* %34, align 1
  %5273 = lshr i64 %5255, 63
  %5274 = trunc i64 %5273 to i8
  store i8 %5274, i8* %37, align 1
  %5275 = lshr i64 %5254, 63
  %5276 = xor i64 %5273, %5275
  %5277 = xor i64 %5273, %5253
  %5278 = add nuw nsw i64 %5276, %5277
  %5279 = icmp eq i64 %5278, 2
  %5280 = zext i1 %5279 to i8
  store i8 %5280, i8* %43, align 1
  %5281 = add i64 %5255, 72
  %5282 = add i64 %5135, 93
  store i64 %5282, i64* %3, align 8
  %5283 = inttoptr i64 %5281 to i32*
  %5284 = load i32, i32* %5283, align 4
  %5285 = add i32 %5284, -10
  %5286 = zext i32 %5285 to i64
  store i64 %5286, i64* %1740, align 8
  %5287 = icmp ult i32 %5284, 10
  %5288 = zext i1 %5287 to i8
  store i8 %5288, i8* %19, align 1
  %5289 = and i32 %5285, 255
  %5290 = tail call i32 @llvm.ctpop.i32(i32 %5289)
  %5291 = trunc i32 %5290 to i8
  %5292 = and i8 %5291, 1
  %5293 = xor i8 %5292, 1
  store i8 %5293, i8* %26, align 1
  %5294 = xor i32 %5285, %5284
  %5295 = lshr i32 %5294, 4
  %5296 = trunc i32 %5295 to i8
  %5297 = and i8 %5296, 1
  store i8 %5297, i8* %31, align 1
  %5298 = icmp eq i32 %5285, 0
  %5299 = zext i1 %5298 to i8
  store i8 %5299, i8* %34, align 1
  %5300 = lshr i32 %5285, 31
  %5301 = trunc i32 %5300 to i8
  store i8 %5301, i8* %37, align 1
  %5302 = lshr i32 %5284, 31
  %5303 = xor i32 %5300, %5302
  %5304 = add nuw nsw i32 %5303, %5302
  %5305 = icmp eq i32 %5304, 2
  %5306 = zext i1 %5305 to i8
  store i8 %5306, i8* %43, align 1
  %5307 = load <2 x i32>, <2 x i32>* %4943, align 1
  %5308 = load <2 x i32>, <2 x i32>* %4945, align 1
  %5309 = sitofp i32 %5285 to float
  store float %5309, float* %4946, align 1
  %5310 = extractelement <2 x i32> %5307, i32 1
  store i32 %5310, i32* %4948, align 1
  %5311 = extractelement <2 x i32> %5308, i32 0
  store i32 %5311, i32* %4949, align 1
  %5312 = extractelement <2 x i32> %5308, i32 1
  store i32 %5312, i32* %4951, align 1
  %5313 = add i64 %5135, 11867
  %5314 = add i64 %5135, 107
  %5315 = load i64, i64* %6, align 8
  %5316 = add i64 %5315, -8
  %5317 = inttoptr i64 %5316 to i64*
  store i64 %5314, i64* %5317, align 8
  store i64 %5316, i64* %6, align 8
  store i64 %5313, i64* %3, align 8
  %call2_41cb5b = tail call %struct.Memory* @sub_41f950.crude_dragon_weakness(%struct.State* nonnull %0, i64 %5313, %struct.Memory* %MEMORY.43)
  %5318 = load i64, i64* %3, align 8
  %5319 = add i64 %5318, ptrtoint (%G_0xc6400__rip__type* @G_0xc6400__rip_ to i64)
  %5320 = add i64 %5318, 8
  store i64 %5320, i64* %3, align 8
  %5321 = inttoptr i64 %5319 to i64*
  %5322 = load i64, i64* %5321, align 8
  store i64 %5322, i64* %4953, align 1
  store double 0.000000e+00, double* %4954, align 1
  %5323 = add i64 %5318, add (i64 ptrtoint (%G_0xc6400__rip__type* @G_0xc6400__rip_ to i64), i64 8)
  %5324 = add i64 %5318, 16
  store i64 %5324, i64* %3, align 8
  %5325 = inttoptr i64 %5323 to i64*
  %5326 = load i64, i64* %5325, align 8
  store i64 %5326, i64* %4957, align 1
  store double 0.000000e+00, double* %4959, align 1
  %5327 = add i64 %5318, add (i64 ptrtoint (%G_0xc6400__rip__type* @G_0xc6400__rip_ to i64), i64 16)
  %5328 = add i64 %5318, 24
  store i64 %5328, i64* %3, align 8
  %5329 = inttoptr i64 %5327 to i64*
  %5330 = load i64, i64* %5329, align 8
  store i64 %5330, i64* %4962, align 1
  store double 0.000000e+00, double* %4964, align 1
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %5331 = load <2 x float>, <2 x float>* %4331, align 1
  %5332 = extractelement <2 x float> %5331, i32 0
  %5333 = fpext float %5332 to double
  store double %5333, double* %92, align 1
  %5334 = load i64, i64* %RBP.i, align 8
  %5335 = add i64 %5334, -24
  %5336 = add i64 %5318, 42
  store i64 %5336, i64* %3, align 8
  %5337 = inttoptr i64 %5335 to i32*
  %5338 = load i32, i32* %5337, align 4
  %5339 = sext i32 %5338 to i64
  %5340 = mul nsw i64 %5339, 76
  store i64 %5340, i64* %RCX.i4050.pre-phi, align 8
  %5341 = lshr i64 %5340, 63
  %5342 = add i64 %5340, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %5342, i64* %RAX.i1555, align 8
  %5343 = icmp ult i64 %5342, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5344 = icmp ult i64 %5342, %5340
  %5345 = or i1 %5343, %5344
  %5346 = zext i1 %5345 to i8
  store i8 %5346, i8* %19, align 1
  %5347 = trunc i64 %5342 to i32
  %5348 = and i32 %5347, 252
  %5349 = tail call i32 @llvm.ctpop.i32(i32 %5348)
  %5350 = trunc i32 %5349 to i8
  %5351 = and i8 %5350, 1
  %5352 = xor i8 %5351, 1
  store i8 %5352, i8* %26, align 1
  %5353 = xor i64 %5340, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5354 = xor i64 %5353, %5342
  %5355 = lshr i64 %5354, 4
  %5356 = trunc i64 %5355 to i8
  %5357 = and i8 %5356, 1
  store i8 %5357, i8* %31, align 1
  %5358 = icmp eq i64 %5342, 0
  %5359 = zext i1 %5358 to i8
  store i8 %5359, i8* %34, align 1
  %5360 = lshr i64 %5342, 63
  %5361 = trunc i64 %5360 to i8
  store i8 %5361, i8* %37, align 1
  %5362 = xor i64 %5360, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %5363 = xor i64 %5360, %5341
  %5364 = add nuw nsw i64 %5362, %5363
  %5365 = icmp eq i64 %5364, 2
  %5366 = zext i1 %5365 to i8
  store i8 %5366, i8* %43, align 1
  %5367 = add i64 %5340, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 16)
  %5368 = add i64 %5318, 54
  store i64 %5368, i64* %3, align 8
  %5369 = inttoptr i64 %5367 to float*
  %5370 = load float, float* %5369, align 4
  %5371 = fpext float %5370 to double
  store double %5371, double* %4966, align 1
  %5372 = bitcast i64 %5330 to double
  %5373 = fmul double %5371, %5372
  store double %5373, double* %4961, align 1
  store i64 0, i64* %4963, align 1
  %5374 = load double, double* %4956, align 1
  %5375 = fsub double %5374, %5373
  store double %5375, double* %4956, align 1
  %5376 = add i64 %5318, 66
  store i64 %5376, i64* %3, align 8
  %5377 = load double, double* %4952, align 1
  %5378 = fcmp uno double %5375, %5377
  %5379 = bitcast double %5333 to i64
  br i1 %5378, label %5380, label %5390

; <label>:5380:                                   ; preds = %block_.L_41caf5
  %5381 = fadd double %5375, %5377
  %5382 = bitcast double %5381 to i64
  %5383 = and i64 %5382, 9221120237041090560
  %5384 = icmp eq i64 %5383, 9218868437227405312
  %5385 = and i64 %5382, 2251799813685247
  %5386 = icmp ne i64 %5385, 0
  %5387 = and i1 %5384, %5386
  br i1 %5387, label %5388, label %5396

; <label>:5388:                                   ; preds = %5380
  %5389 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5376, %struct.Memory* %MEMORY.43)
  %.pre275 = load i64, i64* %RBP.i, align 8
  %.pre276 = load i64, i64* %3, align 8
  %.pre277 = load i64, i64* %93, align 1
  br label %routine_ucomisd__xmm1___xmm2.exit2398

; <label>:5390:                                   ; preds = %block_.L_41caf5
  %5391 = fcmp ogt double %5375, %5377
  br i1 %5391, label %5396, label %5392

; <label>:5392:                                   ; preds = %5390
  %5393 = fcmp olt double %5375, %5377
  br i1 %5393, label %5396, label %5394

; <label>:5394:                                   ; preds = %5392
  %5395 = fcmp oeq double %5375, %5377
  br i1 %5395, label %5396, label %5400

; <label>:5396:                                   ; preds = %5394, %5392, %5390, %5380
  %5397 = phi i8 [ 0, %5390 ], [ 0, %5392 ], [ 1, %5394 ], [ 1, %5380 ]
  %5398 = phi i8 [ 0, %5390 ], [ 0, %5392 ], [ 0, %5394 ], [ 1, %5380 ]
  %5399 = phi i8 [ 0, %5390 ], [ 1, %5392 ], [ 0, %5394 ], [ 1, %5380 ]
  store i8 %5397, i8* %34, align 1
  store i8 %5398, i8* %26, align 1
  store i8 %5399, i8* %19, align 1
  br label %5400

; <label>:5400:                                   ; preds = %5396, %5394
  store i8 0, i8* %43, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %31, align 1
  br label %routine_ucomisd__xmm1___xmm2.exit2398

routine_ucomisd__xmm1___xmm2.exit2398:            ; preds = %5400, %5388
  %5401 = phi i64 [ %.pre277, %5388 ], [ %5379, %5400 ]
  %5402 = phi i64 [ %.pre276, %5388 ], [ %5376, %5400 ]
  %5403 = phi i64 [ %.pre275, %5388 ], [ %5334, %5400 ]
  %5404 = phi %struct.Memory* [ %5389, %5388 ], [ %MEMORY.43, %5400 ]
  %5405 = add i64 %5403, -968
  %5406 = add i64 %5402, 8
  store i64 %5406, i64* %3, align 8
  %5407 = inttoptr i64 %5405 to i64*
  store i64 %5401, i64* %5407, align 8
  %5408 = load i64, i64* %3, align 8
  %5409 = load i8, i8* %19, align 1
  %5410 = load i8, i8* %34, align 1
  %5411 = or i8 %5410, %5409
  %5412 = icmp ne i8 %5411, 0
  %.v499 = select i1 %5412, i64 69, i64 6
  %5413 = add i64 %5408, %.v499
  store i64 %5413, i64* %3, align 8
  br i1 %5412, label %block_.L_41cbef, label %block_41cbb0

block_41cbb0:                                     ; preds = %routine_ucomisd__xmm1___xmm2.exit2398
  %5414 = add i64 %5413, ptrtoint (%G_0xc63b8__rip__type* @G_0xc63b8__rip_ to i64)
  %5415 = add i64 %5413, 8
  store i64 %5415, i64* %3, align 8
  %5416 = inttoptr i64 %5414 to i64*
  %5417 = load i64, i64* %5416, align 8
  store i64 %5417, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %5418 = add i64 %5413, add (i64 ptrtoint (%G_0xc63b8__rip__type* @G_0xc63b8__rip_ to i64), i64 8)
  %5419 = add i64 %5413, 16
  store i64 %5419, i64* %3, align 8
  %5420 = inttoptr i64 %5418 to i64*
  %5421 = load i64, i64* %5420, align 8
  store i64 %5421, i64* %4953, align 1
  store double 0.000000e+00, double* %4954, align 1
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %5422 = load i64, i64* %RBP.i, align 8
  %5423 = add i64 %5422, -24
  %5424 = add i64 %5413, 30
  store i64 %5424, i64* %3, align 8
  %5425 = inttoptr i64 %5423 to i32*
  %5426 = load i32, i32* %5425, align 4
  %5427 = sext i32 %5426 to i64
  %5428 = mul nsw i64 %5427, 76
  store i64 %5428, i64* %RCX.i4050.pre-phi, align 8
  %5429 = lshr i64 %5428, 63
  %5430 = add i64 %5428, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %5430, i64* %RAX.i1555, align 8
  %5431 = icmp ult i64 %5430, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5432 = icmp ult i64 %5430, %5428
  %5433 = or i1 %5431, %5432
  %5434 = zext i1 %5433 to i8
  store i8 %5434, i8* %19, align 1
  %5435 = trunc i64 %5430 to i32
  %5436 = and i32 %5435, 252
  %5437 = tail call i32 @llvm.ctpop.i32(i32 %5436)
  %5438 = trunc i32 %5437 to i8
  %5439 = and i8 %5438, 1
  %5440 = xor i8 %5439, 1
  store i8 %5440, i8* %26, align 1
  %5441 = xor i64 %5428, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5442 = xor i64 %5441, %5430
  %5443 = lshr i64 %5442, 4
  %5444 = trunc i64 %5443 to i8
  %5445 = and i8 %5444, 1
  store i8 %5445, i8* %31, align 1
  %5446 = icmp eq i64 %5430, 0
  %5447 = zext i1 %5446 to i8
  store i8 %5447, i8* %34, align 1
  %5448 = lshr i64 %5430, 63
  %5449 = trunc i64 %5448 to i8
  store i8 %5449, i8* %37, align 1
  %5450 = xor i64 %5448, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %5451 = xor i64 %5448, %5429
  %5452 = add nuw nsw i64 %5450, %5451
  %5453 = icmp eq i64 %5452, 2
  %5454 = zext i1 %5453 to i8
  store i8 %5454, i8* %43, align 1
  %5455 = add i64 %5428, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 16)
  %5456 = add i64 %5413, 42
  store i64 %5456, i64* %3, align 8
  %5457 = inttoptr i64 %5455 to float*
  %5458 = load float, float* %5457, align 4
  %5459 = fpext float %5458 to double
  store double %5459, double* %4956, align 1
  %5460 = bitcast i64 %5421 to double
  %5461 = fmul double %5459, %5460
  store double %5461, double* %4952, align 1
  store i64 0, i64* %4944, align 1
  %5462 = bitcast i64 %5417 to double
  %5463 = fsub double %5462, %5461
  store double %5463, double* %92, align 1
  store i64 0, i64* %94, align 1
  %5464 = add i64 %5422, -976
  %5465 = add i64 %5413, 58
  store i64 %5465, i64* %3, align 8
  %5466 = inttoptr i64 %5464 to double*
  store double %5463, double* %5466, align 8
  %5467 = load i64, i64* %3, align 8
  %5468 = add i64 %5467, 26
  br label %block_.L_41cc04

block_.L_41cbef:                                  ; preds = %routine_ucomisd__xmm1___xmm2.exit2398
  %5469 = add i64 %5413, ptrtoint (%G_0xc6371__rip__type* @G_0xc6371__rip_ to i64)
  %5470 = add i64 %5413, 8
  store i64 %5470, i64* %3, align 8
  %5471 = inttoptr i64 %5469 to i64*
  %5472 = load i64, i64* %5471, align 8
  store i64 %5472, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %5473 = load i64, i64* %RBP.i, align 8
  %5474 = add i64 %5473, -976
  %5475 = add i64 %5413, 16
  store i64 %5475, i64* %3, align 8
  %5476 = inttoptr i64 %5474 to i64*
  store i64 %5472, i64* %5476, align 8
  %5477 = load i64, i64* %3, align 8
  %5478 = add i64 %5477, 5
  store i64 %5478, i64* %3, align 8
  br label %block_.L_41cc04

block_.L_41cc04:                                  ; preds = %block_.L_41cbef, %block_41cbb0
  %storemerge148 = phi i64 [ %5468, %block_41cbb0 ], [ %5478, %block_.L_41cbef ]
  %5479 = load i64, i64* %RBP.i, align 8
  %5480 = add i64 %5479, -976
  %5481 = add i64 %storemerge148, 8
  store i64 %5481, i64* %3, align 8
  %5482 = inttoptr i64 %5480 to i64*
  %5483 = load i64, i64* %5482, align 8
  store i64 %5483, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %5484 = add i64 %storemerge148, add (i64 ptrtoint (%G_0xc636c__rip__type* @G_0xc636c__rip_ to i64), i64 8)
  %5485 = add i64 %storemerge148, 16
  store i64 %5485, i64* %3, align 8
  %5486 = inttoptr i64 %5484 to double*
  %5487 = load double, double* %5486, align 8
  %5488 = bitcast i64 %5483 to double
  %5489 = fadd double %5487, %5488
  store double %5489, double* %4952, align 1
  store i64 0, i64* %4944, align 1
  %5490 = add i64 %5479, -968
  %5491 = add i64 %storemerge148, 28
  store i64 %5491, i64* %3, align 8
  %5492 = inttoptr i64 %5490 to i64*
  %5493 = load i64, i64* %5492, align 8
  store i64 %5493, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %5494 = add i64 %storemerge148, 32
  store i64 %5494, i64* %3, align 8
  %.cast149 = bitcast i64 %5493 to double
  %5495 = fcmp uno double %5489, %.cast149
  br i1 %5495, label %5496, label %5506

; <label>:5496:                                   ; preds = %block_.L_41cc04
  %5497 = fadd double %.cast149, %5489
  %5498 = bitcast double %5497 to i64
  %5499 = and i64 %5498, 9221120237041090560
  %5500 = icmp eq i64 %5499, 9218868437227405312
  %5501 = and i64 %5498, 2251799813685247
  %5502 = icmp ne i64 %5501, 0
  %5503 = and i1 %5500, %5502
  br i1 %5503, label %5504, label %5512

; <label>:5504:                                   ; preds = %5496
  %5505 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5494, %struct.Memory* %5404)
  %.pre278 = load i64, i64* %3, align 8
  br label %routine_ucomisd__xmm0___xmm1.exit2344

; <label>:5506:                                   ; preds = %block_.L_41cc04
  %5507 = fcmp ogt double %5489, %.cast149
  br i1 %5507, label %5512, label %5508

; <label>:5508:                                   ; preds = %5506
  %5509 = fcmp olt double %5489, %.cast149
  br i1 %5509, label %5512, label %5510

; <label>:5510:                                   ; preds = %5508
  %5511 = fcmp oeq double %5489, %.cast149
  br i1 %5511, label %5512, label %5516

; <label>:5512:                                   ; preds = %5510, %5508, %5506, %5496
  %5513 = phi i8 [ 0, %5506 ], [ 0, %5508 ], [ 1, %5510 ], [ 1, %5496 ]
  %5514 = phi i8 [ 0, %5506 ], [ 0, %5508 ], [ 0, %5510 ], [ 1, %5496 ]
  %5515 = phi i8 [ 0, %5506 ], [ 1, %5508 ], [ 0, %5510 ], [ 1, %5496 ]
  store i8 %5513, i8* %34, align 1
  store i8 %5514, i8* %26, align 1
  store i8 %5515, i8* %19, align 1
  br label %5516

; <label>:5516:                                   ; preds = %5512, %5510
  store i8 0, i8* %43, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %31, align 1
  br label %routine_ucomisd__xmm0___xmm1.exit2344

routine_ucomisd__xmm0___xmm1.exit2344:            ; preds = %5516, %5504
  %5517 = phi i64 [ %.pre278, %5504 ], [ %5494, %5516 ]
  %5518 = phi %struct.Memory* [ %5505, %5504 ], [ %5404, %5516 ]
  %5519 = load i8, i8* %19, align 1
  %5520 = load i8, i8* %34, align 1
  %5521 = or i8 %5520, %5519
  %5522 = icmp ne i8 %5521, 0
  %.v500 = select i1 %5522, i64 81, i64 6
  %5523 = add i64 %5517, %.v500
  store i64 %5523, i64* %3, align 8
  br i1 %5522, label %block_.L_41cc75, label %block_41cc2a

block_41cc2a:                                     ; preds = %routine_ucomisd__xmm0___xmm1.exit2344
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %5524 = load i64, i64* %RBP.i, align 8
  %5525 = add i64 %5524, -24
  %5526 = add i64 %5523, 14
  store i64 %5526, i64* %3, align 8
  %5527 = inttoptr i64 %5525 to i32*
  %5528 = load i32, i32* %5527, align 4
  %5529 = sext i32 %5528 to i64
  %5530 = mul nsw i64 %5529, 76
  store i64 %5530, i64* %RCX.i4050.pre-phi, align 8
  %5531 = lshr i64 %5530, 63
  %5532 = add i64 %5530, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %5532, i64* %RDX.i4244, align 8
  %5533 = icmp ult i64 %5532, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5534 = icmp ult i64 %5532, %5530
  %5535 = or i1 %5533, %5534
  %5536 = zext i1 %5535 to i8
  store i8 %5536, i8* %19, align 1
  %5537 = trunc i64 %5532 to i32
  %5538 = and i32 %5537, 252
  %5539 = tail call i32 @llvm.ctpop.i32(i32 %5538)
  %5540 = trunc i32 %5539 to i8
  %5541 = and i8 %5540, 1
  %5542 = xor i8 %5541, 1
  store i8 %5542, i8* %26, align 1
  %5543 = xor i64 %5530, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5544 = xor i64 %5543, %5532
  %5545 = lshr i64 %5544, 4
  %5546 = trunc i64 %5545 to i8
  %5547 = and i8 %5546, 1
  store i8 %5547, i8* %31, align 1
  %5548 = icmp eq i64 %5532, 0
  %5549 = zext i1 %5548 to i8
  store i8 %5549, i8* %34, align 1
  %5550 = lshr i64 %5532, 63
  %5551 = trunc i64 %5550 to i8
  store i8 %5551, i8* %37, align 1
  %5552 = xor i64 %5550, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %5553 = xor i64 %5550, %5531
  %5554 = add nuw nsw i64 %5552, %5553
  %5555 = icmp eq i64 %5554, 2
  %5556 = zext i1 %5555 to i8
  store i8 %5556, i8* %43, align 1
  %5557 = add i64 %5530, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 28)
  %5558 = add i64 %5523, 31
  store i64 %5558, i64* %3, align 8
  %5559 = inttoptr i64 %5557 to i32*
  store i32 4, i32* %5559, align 4
  %5560 = load i64, i64* %RBP.i, align 8
  %5561 = add i64 %5560, -24
  %5562 = load i64, i64* %3, align 8
  %5563 = add i64 %5562, 4
  store i64 %5563, i64* %3, align 8
  %5564 = inttoptr i64 %5561 to i32*
  %5565 = load i32, i32* %5564, align 4
  %5566 = sext i32 %5565 to i64
  %5567 = mul nsw i64 %5566, 76
  store i64 %5567, i64* %RCX.i4050.pre-phi, align 8
  %5568 = lshr i64 %5567, 63
  %5569 = load i64, i64* %RAX.i1555, align 8
  %5570 = add i64 %5567, %5569
  store i64 %5570, i64* %RDX.i4244, align 8
  %5571 = icmp ult i64 %5570, %5569
  %5572 = icmp ult i64 %5570, %5567
  %5573 = or i1 %5571, %5572
  %5574 = zext i1 %5573 to i8
  store i8 %5574, i8* %19, align 1
  %5575 = trunc i64 %5570 to i32
  %5576 = and i32 %5575, 255
  %5577 = tail call i32 @llvm.ctpop.i32(i32 %5576)
  %5578 = trunc i32 %5577 to i8
  %5579 = and i8 %5578, 1
  %5580 = xor i8 %5579, 1
  store i8 %5580, i8* %26, align 1
  %5581 = xor i64 %5567, %5569
  %5582 = xor i64 %5581, %5570
  %5583 = lshr i64 %5582, 4
  %5584 = trunc i64 %5583 to i8
  %5585 = and i8 %5584, 1
  store i8 %5585, i8* %31, align 1
  %5586 = icmp eq i64 %5570, 0
  %5587 = zext i1 %5586 to i8
  store i8 %5587, i8* %34, align 1
  %5588 = lshr i64 %5570, 63
  %5589 = trunc i64 %5588 to i8
  store i8 %5589, i8* %37, align 1
  %5590 = lshr i64 %5569, 63
  %5591 = xor i64 %5588, %5590
  %5592 = xor i64 %5588, %5568
  %5593 = add nuw nsw i64 %5591, %5592
  %5594 = icmp eq i64 %5593, 2
  %5595 = zext i1 %5594 to i8
  store i8 %5595, i8* %43, align 1
  %5596 = add i64 %5570, 32
  %5597 = add i64 %5562, 21
  store i64 %5597, i64* %3, align 8
  %5598 = inttoptr i64 %5596 to i32*
  store i32 0, i32* %5598, align 4
  %5599 = load i64, i64* %RBP.i, align 8
  %5600 = add i64 %5599, -24
  %5601 = load i64, i64* %3, align 8
  %5602 = add i64 %5601, 4
  store i64 %5602, i64* %3, align 8
  %5603 = inttoptr i64 %5600 to i32*
  %5604 = load i32, i32* %5603, align 4
  %5605 = sext i32 %5604 to i64
  %5606 = mul nsw i64 %5605, 76
  store i64 %5606, i64* %RCX.i4050.pre-phi, align 8
  %5607 = lshr i64 %5606, 63
  %5608 = load i64, i64* %RAX.i1555, align 8
  %5609 = add i64 %5606, %5608
  store i64 %5609, i64* %RAX.i1555, align 8
  %5610 = icmp ult i64 %5609, %5608
  %5611 = icmp ult i64 %5609, %5606
  %5612 = or i1 %5610, %5611
  %5613 = zext i1 %5612 to i8
  store i8 %5613, i8* %19, align 1
  %5614 = trunc i64 %5609 to i32
  %5615 = and i32 %5614, 255
  %5616 = tail call i32 @llvm.ctpop.i32(i32 %5615)
  %5617 = trunc i32 %5616 to i8
  %5618 = and i8 %5617, 1
  %5619 = xor i8 %5618, 1
  store i8 %5619, i8* %26, align 1
  %5620 = xor i64 %5606, %5608
  %5621 = xor i64 %5620, %5609
  %5622 = lshr i64 %5621, 4
  %5623 = trunc i64 %5622 to i8
  %5624 = and i8 %5623, 1
  store i8 %5624, i8* %31, align 1
  %5625 = icmp eq i64 %5609, 0
  %5626 = zext i1 %5625 to i8
  store i8 %5626, i8* %34, align 1
  %5627 = lshr i64 %5609, 63
  %5628 = trunc i64 %5627 to i8
  store i8 %5628, i8* %37, align 1
  %5629 = lshr i64 %5608, 63
  %5630 = xor i64 %5627, %5629
  %5631 = xor i64 %5627, %5607
  %5632 = add nuw nsw i64 %5630, %5631
  %5633 = icmp eq i64 %5632, 2
  %5634 = zext i1 %5633 to i8
  store i8 %5634, i8* %43, align 1
  %5635 = add i64 %5609, 48
  %5636 = add i64 %5601, 18
  store i64 %5636, i64* %3, align 8
  %5637 = inttoptr i64 %5635 to i32*
  store i32 0, i32* %5637, align 4
  %5638 = load i64, i64* %3, align 8
  %5639 = add i64 %5638, 935
  br label %block_.L_41d017

block_.L_41cc75:                                  ; preds = %routine_ucomisd__xmm0___xmm1.exit2344
  store i64 3, i64* %RDI.i4254, align 8
  %5640 = load i64, i64* %RBP.i, align 8
  %5641 = add i64 %5640, -108
  %5642 = add i64 %5523, 12
  store i64 %5642, i64* %3, align 8
  %5643 = inttoptr i64 %5641 to i32*
  store i32 0, i32* %5643, align 4
  %5644 = load i64, i64* %RBP.i, align 8
  %5645 = add i64 %5644, -112
  %5646 = load i64, i64* %3, align 8
  %5647 = add i64 %5646, 7
  store i64 %5647, i64* %3, align 8
  %5648 = inttoptr i64 %5645 to i32*
  store i32 0, i32* %5648, align 4
  %5649 = load i64, i64* %RBP.i, align 8
  %5650 = add i64 %5649, -116
  %5651 = load i64, i64* %3, align 8
  %5652 = add i64 %5651, 7
  store i64 %5652, i64* %3, align 8
  %5653 = inttoptr i64 %5650 to i32*
  store i32 0, i32* %5653, align 4
  %5654 = load i64, i64* %3, align 8
  %5655 = add i64 %5654, 390849
  %5656 = add i64 %5654, 5
  %5657 = load i64, i64* %6, align 8
  %5658 = add i64 %5657, -8
  %5659 = inttoptr i64 %5658 to i64*
  store i64 %5656, i64* %5659, align 8
  store i64 %5658, i64* %6, align 8
  store i64 %5655, i64* %3, align 8
  %call2_41cc8f = tail call %struct.Memory* @sub_47c350.start_timer(%struct.State* nonnull %0, i64 %5655, %struct.Memory* %5518)
  %5660 = load i64, i64* %RBP.i, align 8
  %5661 = add i64 %5660, -92
  %5662 = load i64, i64* %3, align 8
  store i64 %5661, i64* %RSI.i4246, align 8
  %5663 = add i64 %5660, -116
  store i64 %5663, i64* %RCX.i4050.pre-phi, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %5664 = add i64 %5660, -24
  %5665 = add i64 %5662, 21
  store i64 %5665, i64* %3, align 8
  %5666 = inttoptr i64 %5664 to i32*
  %5667 = load i32, i32* %5666, align 4
  %5668 = zext i32 %5667 to i64
  store i64 %5668, i64* %RDI.i4254, align 8
  %5669 = add i64 %5662, 25
  store i64 %5669, i64* %3, align 8
  %5670 = load i32, i32* %5666, align 4
  %5671 = sext i32 %5670 to i64
  %5672 = mul nsw i64 %5671, 76
  %5673 = add i64 %5672, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5674 = lshr i64 %5673, 63
  %5675 = add i64 %5672, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 40)
  store i64 %5675, i64* %RAX.i1555, align 8
  %5676 = icmp ugt i64 %5673, -41
  %5677 = zext i1 %5676 to i8
  store i8 %5677, i8* %19, align 1
  %5678 = trunc i64 %5675 to i32
  %5679 = and i32 %5678, 252
  %5680 = tail call i32 @llvm.ctpop.i32(i32 %5679)
  %5681 = trunc i32 %5680 to i8
  %5682 = and i8 %5681, 1
  %5683 = xor i8 %5682, 1
  store i8 %5683, i8* %26, align 1
  %5684 = xor i64 %5675, %5673
  %5685 = lshr i64 %5684, 4
  %5686 = trunc i64 %5685 to i8
  %5687 = and i8 %5686, 1
  store i8 %5687, i8* %31, align 1
  %5688 = icmp eq i64 %5675, 0
  %5689 = zext i1 %5688 to i8
  store i8 %5689, i8* %34, align 1
  %5690 = lshr i64 %5675, 63
  %5691 = trunc i64 %5690 to i8
  store i8 %5691, i8* %37, align 1
  %5692 = xor i64 %5690, %5674
  %5693 = add nuw nsw i64 %5692, %5690
  %5694 = icmp eq i64 %5693, 2
  %5695 = zext i1 %5694 to i8
  store i8 %5695, i8* %43, align 1
  store i64 %5675, i64* %RDX.i4244, align 8
  %5696 = add i64 %5662, 171132
  %5697 = add i64 %5662, 44
  %5698 = load i64, i64* %6, align 8
  %5699 = add i64 %5698, -8
  %5700 = inttoptr i64 %5699 to i64*
  store i64 %5697, i64* %5700, align 8
  store i64 %5699, i64* %6, align 8
  store i64 %5696, i64* %3, align 8
  %call2_41ccbb = tail call %struct.Memory* @sub_446910.owl_attack(%struct.State* nonnull %0, i64 %5696, %struct.Memory* %call2_41cc8f)
  %5701 = load i64, i64* %RBP.i, align 8
  %5702 = add i64 %5701, -108
  %5703 = load i32, i32* %EAX.i4253, align 4
  %5704 = load i64, i64* %3, align 8
  %5705 = add i64 %5704, 3
  store i64 %5705, i64* %3, align 8
  %5706 = inttoptr i64 %5702 to i32*
  store i32 %5703, i32* %5706, align 4
  %5707 = load i64, i64* %RBP.i, align 8
  %5708 = add i64 %5707, -108
  %5709 = load i64, i64* %3, align 8
  %5710 = add i64 %5709, 4
  store i64 %5710, i64* %3, align 8
  %5711 = inttoptr i64 %5708 to i32*
  %5712 = load i32, i32* %5711, align 4
  store i8 0, i8* %19, align 1
  %5713 = and i32 %5712, 255
  %5714 = tail call i32 @llvm.ctpop.i32(i32 %5713)
  %5715 = trunc i32 %5714 to i8
  %5716 = and i8 %5715, 1
  %5717 = xor i8 %5716, 1
  store i8 %5717, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5718 = icmp eq i32 %5712, 0
  %5719 = zext i1 %5718 to i8
  store i8 %5719, i8* %34, align 1
  %5720 = lshr i32 %5712, 31
  %5721 = trunc i32 %5720 to i8
  store i8 %5721, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v402 = select i1 %5718, i64 571, i64 10
  %5722 = add i64 %5709, %.v402
  %5723 = add i64 %5722, 10
  store i64 %5723, i64* %3, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  br i1 %5718, label %block_.L_41cefe, label %block_41cccd

block_41cccd:                                     ; preds = %block_.L_41cc75
  %5724 = add i64 %5707, -92
  %5725 = add i64 %5722, 13
  store i64 %5725, i64* %3, align 8
  %5726 = inttoptr i64 %5724 to i32*
  %5727 = load i32, i32* %5726, align 4
  %5728 = zext i32 %5727 to i64
  store i64 %5728, i64* %RCX.i4050.pre-phi, align 8
  %5729 = add i64 %5707, -24
  %5730 = add i64 %5722, 17
  store i64 %5730, i64* %3, align 8
  %5731 = inttoptr i64 %5729 to i32*
  %5732 = load i32, i32* %5731, align 4
  %5733 = sext i32 %5732 to i64
  %5734 = mul nsw i64 %5733, 76
  store i64 %5734, i64* %RDX.i4244, align 8
  %5735 = lshr i64 %5734, 63
  %5736 = add i64 %5734, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %5736, i64* %RSI.i4246, align 8
  %5737 = icmp ult i64 %5736, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5738 = icmp ult i64 %5736, %5734
  %5739 = or i1 %5737, %5738
  %5740 = zext i1 %5739 to i8
  store i8 %5740, i8* %19, align 1
  %5741 = trunc i64 %5736 to i32
  %5742 = and i32 %5741, 252
  %5743 = tail call i32 @llvm.ctpop.i32(i32 %5742)
  %5744 = trunc i32 %5743 to i8
  %5745 = and i8 %5744, 1
  %5746 = xor i8 %5745, 1
  store i8 %5746, i8* %26, align 1
  %5747 = xor i64 %5734, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %5748 = xor i64 %5747, %5736
  %5749 = lshr i64 %5748, 4
  %5750 = trunc i64 %5749 to i8
  %5751 = and i8 %5750, 1
  store i8 %5751, i8* %31, align 1
  %5752 = icmp eq i64 %5736, 0
  %5753 = zext i1 %5752 to i8
  store i8 %5753, i8* %34, align 1
  %5754 = lshr i64 %5736, 63
  %5755 = trunc i64 %5754 to i8
  store i8 %5755, i8* %37, align 1
  %5756 = xor i64 %5754, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %5757 = xor i64 %5754, %5735
  %5758 = add nuw nsw i64 %5756, %5757
  %5759 = icmp eq i64 %5758, 2
  %5760 = zext i1 %5759 to i8
  store i8 %5760, i8* %43, align 1
  %5761 = add i64 %5734, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 32)
  %5762 = add i64 %5722, 30
  store i64 %5762, i64* %3, align 8
  %5763 = inttoptr i64 %5761 to i32*
  store i32 %5727, i32* %5763, align 4
  %5764 = load i64, i64* %RBP.i, align 8
  %5765 = add i64 %5764, -108
  %5766 = load i64, i64* %3, align 8
  %5767 = add i64 %5766, 3
  store i64 %5767, i64* %3, align 8
  %5768 = inttoptr i64 %5765 to i32*
  %5769 = load i32, i32* %5768, align 4
  %5770 = zext i32 %5769 to i64
  store i64 %5770, i64* %RCX.i4050.pre-phi, align 8
  %5771 = add i64 %5764, -24
  %5772 = add i64 %5766, 7
  store i64 %5772, i64* %3, align 8
  %5773 = inttoptr i64 %5771 to i32*
  %5774 = load i32, i32* %5773, align 4
  %5775 = sext i32 %5774 to i64
  %5776 = mul nsw i64 %5775, 76
  store i64 %5776, i64* %RDX.i4244, align 8
  %5777 = lshr i64 %5776, 63
  %5778 = load i64, i64* %RAX.i1555, align 8
  %5779 = add i64 %5776, %5778
  store i64 %5779, i64* %RSI.i4246, align 8
  %5780 = icmp ult i64 %5779, %5778
  %5781 = icmp ult i64 %5779, %5776
  %5782 = or i1 %5780, %5781
  %5783 = zext i1 %5782 to i8
  store i8 %5783, i8* %19, align 1
  %5784 = trunc i64 %5779 to i32
  %5785 = and i32 %5784, 255
  %5786 = tail call i32 @llvm.ctpop.i32(i32 %5785)
  %5787 = trunc i32 %5786 to i8
  %5788 = and i8 %5787, 1
  %5789 = xor i8 %5788, 1
  store i8 %5789, i8* %26, align 1
  %5790 = xor i64 %5776, %5778
  %5791 = xor i64 %5790, %5779
  %5792 = lshr i64 %5791, 4
  %5793 = trunc i64 %5792 to i8
  %5794 = and i8 %5793, 1
  store i8 %5794, i8* %31, align 1
  %5795 = icmp eq i64 %5779, 0
  %5796 = zext i1 %5795 to i8
  store i8 %5796, i8* %34, align 1
  %5797 = lshr i64 %5779, 63
  %5798 = trunc i64 %5797 to i8
  store i8 %5798, i8* %37, align 1
  %5799 = lshr i64 %5778, 63
  %5800 = xor i64 %5797, %5799
  %5801 = xor i64 %5797, %5777
  %5802 = add nuw nsw i64 %5800, %5801
  %5803 = icmp eq i64 %5802, 2
  %5804 = zext i1 %5803 to i8
  store i8 %5804, i8* %43, align 1
  %5805 = add i64 %5779, 36
  %5806 = add i64 %5766, 20
  store i64 %5806, i64* %3, align 8
  %5807 = inttoptr i64 %5805 to i32*
  store i32 %5769, i32* %5807, align 4
  %5808 = load i64, i64* %RBP.i, align 8
  %5809 = add i64 %5808, -116
  %5810 = load i64, i64* %3, align 8
  %5811 = add i64 %5810, 3
  store i64 %5811, i64* %3, align 8
  %5812 = inttoptr i64 %5809 to i32*
  %5813 = load i32, i32* %5812, align 4
  %5814 = zext i32 %5813 to i64
  store i64 %5814, i64* %RCX.i4050.pre-phi, align 8
  %5815 = add i64 %5808, -24
  %5816 = add i64 %5810, 7
  store i64 %5816, i64* %3, align 8
  %5817 = inttoptr i64 %5815 to i32*
  %5818 = load i32, i32* %5817, align 4
  %5819 = sext i32 %5818 to i64
  %5820 = mul nsw i64 %5819, 76
  store i64 %5820, i64* %RDX.i4244, align 8
  %5821 = lshr i64 %5820, 63
  %5822 = load i64, i64* %RAX.i1555, align 8
  %5823 = add i64 %5820, %5822
  store i64 %5823, i64* %RAX.i1555, align 8
  %5824 = icmp ult i64 %5823, %5822
  %5825 = icmp ult i64 %5823, %5820
  %5826 = or i1 %5824, %5825
  %5827 = zext i1 %5826 to i8
  store i8 %5827, i8* %19, align 1
  %5828 = trunc i64 %5823 to i32
  %5829 = and i32 %5828, 255
  %5830 = tail call i32 @llvm.ctpop.i32(i32 %5829)
  %5831 = trunc i32 %5830 to i8
  %5832 = and i8 %5831, 1
  %5833 = xor i8 %5832, 1
  store i8 %5833, i8* %26, align 1
  %5834 = xor i64 %5820, %5822
  %5835 = xor i64 %5834, %5823
  %5836 = lshr i64 %5835, 4
  %5837 = trunc i64 %5836 to i8
  %5838 = and i8 %5837, 1
  store i8 %5838, i8* %31, align 1
  %5839 = icmp eq i64 %5823, 0
  %5840 = zext i1 %5839 to i8
  store i8 %5840, i8* %34, align 1
  %5841 = lshr i64 %5823, 63
  %5842 = trunc i64 %5841 to i8
  store i8 %5842, i8* %37, align 1
  %5843 = lshr i64 %5822, 63
  %5844 = xor i64 %5841, %5843
  %5845 = xor i64 %5841, %5821
  %5846 = add nuw nsw i64 %5844, %5845
  %5847 = icmp eq i64 %5846, 2
  %5848 = zext i1 %5847 to i8
  store i8 %5848, i8* %43, align 1
  %5849 = add i64 %5823, 68
  %5850 = add i64 %5810, 17
  store i64 %5850, i64* %3, align 8
  %5851 = inttoptr i64 %5849 to i32*
  store i32 %5813, i32* %5851, align 4
  %5852 = load i64, i64* %RBP.i, align 8
  %5853 = add i64 %5852, -92
  %5854 = load i64, i64* %3, align 8
  %5855 = add i64 %5854, 4
  store i64 %5855, i64* %3, align 8
  %5856 = inttoptr i64 %5853 to i32*
  %5857 = load i32, i32* %5856, align 4
  store i8 0, i8* %19, align 1
  %5858 = and i32 %5857, 255
  %5859 = tail call i32 @llvm.ctpop.i32(i32 %5858)
  %5860 = trunc i32 %5859 to i8
  %5861 = and i8 %5860, 1
  %5862 = xor i8 %5861, 1
  store i8 %5862, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5863 = icmp eq i32 %5857, 0
  %5864 = zext i1 %5863 to i8
  store i8 %5864, i8* %34, align 1
  %5865 = lshr i32 %5857, 31
  %5866 = trunc i32 %5865 to i8
  store i8 %5866, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v403 = select i1 %5863, i64 409, i64 10
  %5867 = add i64 %5854, %.v403
  store i64 %5867, i64* %3, align 8
  br i1 %5863, label %block_.L_41cea9, label %block_41cd1a

block_41cd1a:                                     ; preds = %block_41cccd
  %5868 = add i64 %5852, -96
  store i64 %5868, i64* %RSI.i4246, align 8
  %5869 = add i64 %5852, -116
  store i64 %5869, i64* %RCX.i4050.pre-phi, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %5870 = add i64 %5867, 25
  store i64 %5870, i64* %3, align 8
  %5871 = inttoptr i64 %5869 to i32*
  store i32 0, i32* %5871, align 4
  %5872 = load i64, i64* %RBP.i, align 8
  %5873 = add i64 %5872, -24
  %5874 = load i64, i64* %3, align 8
  %5875 = add i64 %5874, 3
  store i64 %5875, i64* %3, align 8
  %5876 = inttoptr i64 %5873 to i32*
  %5877 = load i32, i32* %5876, align 4
  %5878 = zext i32 %5877 to i64
  store i64 %5878, i64* %RDI.i4254, align 8
  %5879 = add i64 %5874, 7
  store i64 %5879, i64* %3, align 8
  %5880 = load i32, i32* %5876, align 4
  %5881 = sext i32 %5880 to i64
  %5882 = mul nsw i64 %5881, 76
  %5883 = load i64, i64* %RAX.i1555, align 8
  %5884 = add i64 %5882, %5883
  %5885 = lshr i64 %5884, 63
  %5886 = add i64 %5884, 56
  store i64 %5886, i64* %RAX.i1555, align 8
  %5887 = icmp ugt i64 %5884, -57
  %5888 = zext i1 %5887 to i8
  store i8 %5888, i8* %19, align 1
  %5889 = trunc i64 %5886 to i32
  %5890 = and i32 %5889, 255
  %5891 = tail call i32 @llvm.ctpop.i32(i32 %5890)
  %5892 = trunc i32 %5891 to i8
  %5893 = and i8 %5892, 1
  %5894 = xor i8 %5893, 1
  store i8 %5894, i8* %26, align 1
  %5895 = xor i64 %5884, 16
  %5896 = xor i64 %5895, %5886
  %5897 = lshr i64 %5896, 4
  %5898 = trunc i64 %5897 to i8
  %5899 = and i8 %5898, 1
  store i8 %5899, i8* %31, align 1
  %5900 = icmp eq i64 %5886, 0
  %5901 = zext i1 %5900 to i8
  store i8 %5901, i8* %34, align 1
  %5902 = lshr i64 %5886, 63
  %5903 = trunc i64 %5902 to i8
  store i8 %5903, i8* %37, align 1
  %5904 = xor i64 %5902, %5885
  %5905 = add nuw nsw i64 %5904, %5902
  %5906 = icmp eq i64 %5905, 2
  %5907 = zext i1 %5906 to i8
  store i8 %5907, i8* %43, align 1
  store i64 %5886, i64* %RDX.i4244, align 8
  %5908 = add i64 %5874, 187789
  %5909 = add i64 %5874, 26
  %5910 = load i64, i64* %6, align 8
  %5911 = add i64 %5910, -8
  %5912 = inttoptr i64 %5911 to i64*
  store i64 %5909, i64* %5912, align 8
  store i64 %5911, i64* %6, align 8
  store i64 %5908, i64* %3, align 8
  %call2_41cd48 = tail call %struct.Memory* @sub_44aac0.owl_defend(%struct.State* nonnull %0, i64 %5908, %struct.Memory* %call2_41ccbb)
  %5913 = load i64, i64* %RBP.i, align 8
  %5914 = add i64 %5913, -112
  %5915 = load i32, i32* %EAX.i4253, align 4
  %5916 = load i64, i64* %3, align 8
  %5917 = add i64 %5916, 3
  store i64 %5917, i64* %3, align 8
  %5918 = inttoptr i64 %5914 to i32*
  store i32 %5915, i32* %5918, align 4
  %5919 = load i64, i64* %RBP.i, align 8
  %5920 = add i64 %5919, -112
  %5921 = load i64, i64* %3, align 8
  %5922 = add i64 %5921, 4
  store i64 %5922, i64* %3, align 8
  %5923 = inttoptr i64 %5920 to i32*
  %5924 = load i32, i32* %5923, align 4
  store i8 0, i8* %19, align 1
  %5925 = and i32 %5924, 255
  %5926 = tail call i32 @llvm.ctpop.i32(i32 %5925)
  %5927 = trunc i32 %5926 to i8
  %5928 = and i8 %5927, 1
  %5929 = xor i8 %5928, 1
  store i8 %5929, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5930 = icmp eq i32 %5924, 0
  %5931 = zext i1 %5930 to i8
  store i8 %5931, i8* %34, align 1
  %5932 = lshr i32 %5924, 31
  %5933 = trunc i32 %5932 to i8
  store i8 %5933, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v404 = select i1 %5930, i64 340, i64 10
  %5934 = add i64 %5921, %.v404
  store i64 %5934, i64* %3, align 8
  br i1 %5930, label %block_.L_41cea4, label %block_41cd5a

block_41cd5a:                                     ; preds = %block_41cd1a
  %5935 = add i64 %5919, -96
  %5936 = add i64 %5934, 4
  store i64 %5936, i64* %3, align 8
  %5937 = inttoptr i64 %5935 to i32*
  %5938 = load i32, i32* %5937, align 4
  store i8 0, i8* %19, align 1
  %5939 = and i32 %5938, 255
  %5940 = tail call i32 @llvm.ctpop.i32(i32 %5939)
  %5941 = trunc i32 %5940 to i8
  %5942 = and i8 %5941, 1
  %5943 = xor i8 %5942, 1
  store i8 %5943, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %5944 = icmp eq i32 %5938, 0
  %5945 = zext i1 %5944 to i8
  store i8 %5945, i8* %34, align 1
  %5946 = lshr i32 %5938, 31
  %5947 = trunc i32 %5946 to i8
  store i8 %5947, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v405 = select i1 %5944, i64 116, i64 10
  %5948 = add i64 %5934, %.v405
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  store i64 2, i64* %RCX.i4050.pre-phi, align 8
  store i64 1, i64* %RDX.i4244, align 8
  %5949 = add i64 %5919, -108
  %5950 = add i64 %5948, 24
  store i64 %5950, i64* %3, align 8
  %5951 = inttoptr i64 %5949 to i32*
  %5952 = load i32, i32* %5951, align 4
  %5953 = add i32 %5952, -3
  %5954 = icmp ult i32 %5952, 3
  %5955 = zext i1 %5954 to i8
  store i8 %5955, i8* %19, align 1
  %5956 = and i32 %5953, 255
  %5957 = tail call i32 @llvm.ctpop.i32(i32 %5956)
  %5958 = trunc i32 %5957 to i8
  %5959 = and i8 %5958, 1
  %5960 = xor i8 %5959, 1
  store i8 %5960, i8* %26, align 1
  %5961 = xor i32 %5953, %5952
  %5962 = lshr i32 %5961, 4
  %5963 = trunc i32 %5962 to i8
  %5964 = and i8 %5963, 1
  store i8 %5964, i8* %31, align 1
  %5965 = icmp eq i32 %5953, 0
  %5966 = zext i1 %5965 to i8
  store i8 %5966, i8* %34, align 1
  %5967 = lshr i32 %5953, 31
  %5968 = trunc i32 %5967 to i8
  store i8 %5968, i8* %37, align 1
  %5969 = lshr i32 %5952, 31
  %5970 = xor i32 %5967, %5969
  %5971 = add nuw nsw i32 %5970, %5969
  %5972 = icmp eq i32 %5971, 2
  %5973 = zext i1 %5972 to i8
  store i8 %5973, i8* %43, align 1
  %5974 = select i1 %5965, i64 1, i64 2
  store i64 %5974, i64* %RCX.i4050.pre-phi, align 8
  %5975 = add i64 %5919, -24
  %5976 = add i64 %5948, 31
  store i64 %5976, i64* %3, align 8
  %5977 = inttoptr i64 %5975 to i32*
  %5978 = load i32, i32* %5977, align 4
  %5979 = sext i32 %5978 to i64
  %5980 = add i64 %5948, 35
  store i64 %5980, i64* %3, align 8
  %5981 = sext i32 %5978 to i128
  %5982 = and i128 %5981, -18446744073709551616
  %5983 = zext i64 %5979 to i128
  %5984 = or i128 %5982, %5983
  %5985 = mul nsw i128 %5984, 76
  %5986 = trunc i128 %5985 to i64
  store i64 %5986, i64* %RSI.i4246, align 8
  %5987 = sext i64 %5986 to i128
  %5988 = icmp ne i128 %5987, %5985
  %5989 = zext i1 %5988 to i8
  store i8 %5989, i8* %19, align 1
  %5990 = trunc i128 %5985 to i32
  %5991 = and i32 %5990, 252
  %5992 = tail call i32 @llvm.ctpop.i32(i32 %5991)
  %5993 = trunc i32 %5992 to i8
  %5994 = and i8 %5993, 1
  %5995 = xor i8 %5994, 1
  store i8 %5995, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  %5996 = lshr i64 %5986, 63
  %5997 = trunc i64 %5996 to i8
  store i8 %5997, i8* %37, align 1
  store i8 %5989, i8* %43, align 1
  %5998 = trunc i64 %5974 to i32
  %5999 = add i64 %5986, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  br i1 %5944, label %block_.L_41cdce, label %block_41cd64

block_41cd64:                                     ; preds = %block_41cd5a
  store i64 %5999, i64* %RDI.i4254, align 8
  %6000 = icmp ult i64 %5999, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6001 = icmp ult i64 %5999, %5986
  %6002 = or i1 %6000, %6001
  %6003 = zext i1 %6002 to i8
  store i8 %6003, i8* %19, align 1
  %6004 = trunc i64 %5999 to i32
  %6005 = and i32 %6004, 252
  %6006 = tail call i32 @llvm.ctpop.i32(i32 %6005)
  %6007 = trunc i32 %6006 to i8
  %6008 = and i8 %6007, 1
  %6009 = xor i8 %6008, 1
  store i8 %6009, i8* %26, align 1
  %6010 = xor i64 %5986, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6011 = xor i64 %6010, %5999
  %6012 = lshr i64 %6011, 4
  %6013 = trunc i64 %6012 to i8
  %6014 = and i8 %6013, 1
  store i8 %6014, i8* %31, align 1
  %6015 = icmp eq i64 %5999, 0
  %6016 = zext i1 %6015 to i8
  store i8 %6016, i8* %34, align 1
  %6017 = lshr i64 %5999, 63
  %6018 = trunc i64 %6017 to i8
  store i8 %6018, i8* %37, align 1
  %6019 = xor i64 %6017, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6020 = xor i64 %6017, %5996
  %6021 = add nuw nsw i64 %6019, %6020
  %6022 = icmp eq i64 %6021, 2
  %6023 = zext i1 %6022 to i8
  store i8 %6023, i8* %43, align 1
  %6024 = add i64 %5986, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 28)
  %6025 = add i64 %5948, 44
  store i64 %6025, i64* %3, align 8
  %6026 = inttoptr i64 %6024 to i32*
  store i32 %5998, i32* %6026, align 4
  %6027 = load i64, i64* %RBP.i, align 8
  %6028 = add i64 %6027, -96
  %6029 = load i64, i64* %3, align 8
  %6030 = add i64 %6029, 3
  store i64 %6030, i64* %3, align 8
  %6031 = inttoptr i64 %6028 to i32*
  %6032 = load i32, i32* %6031, align 4
  %6033 = zext i32 %6032 to i64
  store i64 %6033, i64* %RCX.i4050.pre-phi, align 8
  %6034 = add i64 %6027, -24
  %6035 = add i64 %6029, 7
  store i64 %6035, i64* %3, align 8
  %6036 = inttoptr i64 %6034 to i32*
  %6037 = load i32, i32* %6036, align 4
  %6038 = sext i32 %6037 to i64
  %6039 = mul nsw i64 %6038, 76
  store i64 %6039, i64* %RSI.i4246, align 8
  %6040 = lshr i64 %6039, 63
  %6041 = load i64, i64* %RAX.i1555, align 8
  %6042 = add i64 %6039, %6041
  store i64 %6042, i64* %RDI.i4254, align 8
  %6043 = icmp ult i64 %6042, %6041
  %6044 = icmp ult i64 %6042, %6039
  %6045 = or i1 %6043, %6044
  %6046 = zext i1 %6045 to i8
  store i8 %6046, i8* %19, align 1
  %6047 = trunc i64 %6042 to i32
  %6048 = and i32 %6047, 255
  %6049 = tail call i32 @llvm.ctpop.i32(i32 %6048)
  %6050 = trunc i32 %6049 to i8
  %6051 = and i8 %6050, 1
  %6052 = xor i8 %6051, 1
  store i8 %6052, i8* %26, align 1
  %6053 = xor i64 %6039, %6041
  %6054 = xor i64 %6053, %6042
  %6055 = lshr i64 %6054, 4
  %6056 = trunc i64 %6055 to i8
  %6057 = and i8 %6056, 1
  store i8 %6057, i8* %31, align 1
  %6058 = icmp eq i64 %6042, 0
  %6059 = zext i1 %6058 to i8
  store i8 %6059, i8* %34, align 1
  %6060 = lshr i64 %6042, 63
  %6061 = trunc i64 %6060 to i8
  store i8 %6061, i8* %37, align 1
  %6062 = lshr i64 %6041, 63
  %6063 = xor i64 %6060, %6062
  %6064 = xor i64 %6060, %6040
  %6065 = add nuw nsw i64 %6063, %6064
  %6066 = icmp eq i64 %6065, 2
  %6067 = zext i1 %6066 to i8
  store i8 %6067, i8* %43, align 1
  %6068 = add i64 %6042, 48
  %6069 = add i64 %6029, 20
  store i64 %6069, i64* %3, align 8
  %6070 = inttoptr i64 %6068 to i32*
  store i32 %6032, i32* %6070, align 4
  %6071 = load i64, i64* %RBP.i, align 8
  %6072 = add i64 %6071, -112
  %6073 = load i64, i64* %3, align 8
  %6074 = add i64 %6073, 3
  store i64 %6074, i64* %3, align 8
  %6075 = inttoptr i64 %6072 to i32*
  %6076 = load i32, i32* %6075, align 4
  %6077 = zext i32 %6076 to i64
  store i64 %6077, i64* %RCX.i4050.pre-phi, align 8
  %6078 = add i64 %6071, -24
  %6079 = add i64 %6073, 7
  store i64 %6079, i64* %3, align 8
  %6080 = inttoptr i64 %6078 to i32*
  %6081 = load i32, i32* %6080, align 4
  %6082 = sext i32 %6081 to i64
  %6083 = mul nsw i64 %6082, 76
  store i64 %6083, i64* %RSI.i4246, align 8
  %6084 = lshr i64 %6083, 63
  %6085 = load i64, i64* %RAX.i1555, align 8
  %6086 = add i64 %6083, %6085
  store i64 %6086, i64* %RDI.i4254, align 8
  %6087 = icmp ult i64 %6086, %6085
  %6088 = icmp ult i64 %6086, %6083
  %6089 = or i1 %6087, %6088
  %6090 = zext i1 %6089 to i8
  store i8 %6090, i8* %19, align 1
  %6091 = trunc i64 %6086 to i32
  %6092 = and i32 %6091, 255
  %6093 = tail call i32 @llvm.ctpop.i32(i32 %6092)
  %6094 = trunc i32 %6093 to i8
  %6095 = and i8 %6094, 1
  %6096 = xor i8 %6095, 1
  store i8 %6096, i8* %26, align 1
  %6097 = xor i64 %6083, %6085
  %6098 = xor i64 %6097, %6086
  %6099 = lshr i64 %6098, 4
  %6100 = trunc i64 %6099 to i8
  %6101 = and i8 %6100, 1
  store i8 %6101, i8* %31, align 1
  %6102 = icmp eq i64 %6086, 0
  %6103 = zext i1 %6102 to i8
  store i8 %6103, i8* %34, align 1
  %6104 = lshr i64 %6086, 63
  %6105 = trunc i64 %6104 to i8
  store i8 %6105, i8* %37, align 1
  %6106 = lshr i64 %6085, 63
  %6107 = xor i64 %6104, %6106
  %6108 = xor i64 %6104, %6084
  %6109 = add nuw nsw i64 %6107, %6108
  %6110 = icmp eq i64 %6109, 2
  %6111 = zext i1 %6110 to i8
  store i8 %6111, i8* %43, align 1
  %6112 = add i64 %6086, 52
  %6113 = add i64 %6073, 20
  store i64 %6113, i64* %3, align 8
  %6114 = inttoptr i64 %6112 to i32*
  store i32 %6076, i32* %6114, align 4
  %6115 = load i64, i64* %RBP.i, align 8
  %6116 = add i64 %6115, -116
  %6117 = load i64, i64* %3, align 8
  %6118 = add i64 %6117, 3
  store i64 %6118, i64* %3, align 8
  %6119 = inttoptr i64 %6116 to i32*
  %6120 = load i32, i32* %6119, align 4
  %6121 = zext i32 %6120 to i64
  store i64 %6121, i64* %RCX.i4050.pre-phi, align 8
  %6122 = add i64 %6115, -24
  %6123 = add i64 %6117, 7
  store i64 %6123, i64* %3, align 8
  %6124 = inttoptr i64 %6122 to i32*
  %6125 = load i32, i32* %6124, align 4
  %6126 = sext i32 %6125 to i64
  %6127 = mul nsw i64 %6126, 76
  store i64 %6127, i64* %RSI.i4246, align 8
  %6128 = lshr i64 %6127, 63
  %6129 = load i64, i64* %RAX.i1555, align 8
  %6130 = add i64 %6127, %6129
  store i64 %6130, i64* %RAX.i1555, align 8
  %6131 = icmp ult i64 %6130, %6129
  %6132 = icmp ult i64 %6130, %6127
  %6133 = or i1 %6131, %6132
  %6134 = zext i1 %6133 to i8
  store i8 %6134, i8* %19, align 1
  %6135 = trunc i64 %6130 to i32
  %6136 = and i32 %6135, 255
  %6137 = tail call i32 @llvm.ctpop.i32(i32 %6136)
  %6138 = trunc i32 %6137 to i8
  %6139 = and i8 %6138, 1
  %6140 = xor i8 %6139, 1
  store i8 %6140, i8* %26, align 1
  %6141 = xor i64 %6127, %6129
  %6142 = xor i64 %6141, %6130
  %6143 = lshr i64 %6142, 4
  %6144 = trunc i64 %6143 to i8
  %6145 = and i8 %6144, 1
  store i8 %6145, i8* %31, align 1
  %6146 = icmp eq i64 %6130, 0
  %6147 = zext i1 %6146 to i8
  store i8 %6147, i8* %34, align 1
  %6148 = lshr i64 %6130, 63
  %6149 = trunc i64 %6148 to i8
  store i8 %6149, i8* %37, align 1
  %6150 = lshr i64 %6129, 63
  %6151 = xor i64 %6148, %6150
  %6152 = xor i64 %6148, %6128
  %6153 = add nuw nsw i64 %6151, %6152
  %6154 = icmp eq i64 %6153, 2
  %6155 = zext i1 %6154 to i8
  store i8 %6155, i8* %43, align 1
  %6156 = add i64 %6130, 72
  %6157 = add i64 %6117, 17
  store i64 %6157, i64* %3, align 8
  %6158 = inttoptr i64 %6156 to i32*
  store i32 %6120, i32* %6158, align 4
  %6159 = load i64, i64* %3, align 8
  %6160 = add i64 %6159, 214
  br label %block_.L_41ce9f

block_.L_41cdce:                                  ; preds = %block_41cd5a
  store i64 %5999, i64* %RAX.i1555, align 8
  %6161 = add i64 %5986, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 28)
  %6162 = add i64 %5948, 41
  store i64 %6162, i64* %3, align 8
  %6163 = inttoptr i64 %6161 to i32*
  store i32 %5998, i32* %6163, align 4
  %6164 = load i64, i64* %3, align 8
  %6165 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %6166 = and i32 %6165, 4096
  %6167 = zext i32 %6166 to i64
  store i64 %6167, i64* %RCX.i4050.pre-phi, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit320 = lshr exact i32 %6166, 12
  %6168 = trunc i32 %.lobit320 to i8
  %6169 = xor i8 %6168, 1
  store i8 %6169, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %6170 = icmp eq i8 %6169, 0
  %.v407 = select i1 %6170, i64 27, i64 22
  %6171 = add i64 %6164, %.v407
  store i64 %6171, i64* %3, align 8
  br i1 %6170, label %block_.L_41ce12, label %block_41ce0d

block_41ce0d:                                     ; preds = %block_.L_41cdce
  %6172 = add i64 %6171, 31
  store i64 %6172, i64* %3, align 8
  br label %block_.L_41ce2c

block_.L_41ce12:                                  ; preds = %block_.L_41cdce
  store i64 ptrtoint (%G__0x57afba_type* @G__0x57afba to i64), i64* %RDI.i4254, align 8
  %6173 = load i64, i64* %RBP.i, align 8
  %6174 = add i64 %6173, -24
  %6175 = add i64 %6171, 13
  store i64 %6175, i64* %3, align 8
  %6176 = inttoptr i64 %6174 to i32*
  %6177 = load i32, i32* %6176, align 4
  %6178 = zext i32 %6177 to i64
  store i64 %6178, i64* %RSI.i4246, align 8
  store i8 0, i8* %AL.i3758, align 1
  %6179 = add i64 %6171, 216990
  %6180 = add i64 %6171, 20
  %6181 = load i64, i64* %6, align 8
  %6182 = add i64 %6181, -8
  %6183 = inttoptr i64 %6182 to i64*
  store i64 %6180, i64* %6183, align 8
  store i64 %6182, i64* %6, align 8
  store i64 %6179, i64* %3, align 8
  %call2_41ce21 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %6179, %struct.Memory* %call2_41cd48)
  %6184 = load i64, i64* %RBP.i, align 8
  %6185 = add i64 %6184, -980
  %6186 = load i32, i32* %EAX.i4253, align 4
  %6187 = load i64, i64* %3, align 8
  %6188 = add i64 %6187, 6
  store i64 %6188, i64* %3, align 8
  %6189 = inttoptr i64 %6185 to i32*
  store i32 %6186, i32* %6189, align 4
  %.pre279 = load i64, i64* %3, align 8
  br label %block_.L_41ce2c

block_.L_41ce2c:                                  ; preds = %block_.L_41ce12, %block_41ce0d
  %6190 = phi i64 [ %.pre279, %block_.L_41ce12 ], [ %6172, %block_41ce0d ]
  %MEMORY.46 = phi %struct.Memory* [ %call2_41ce21, %block_.L_41ce12 ], [ %call2_41cd48, %block_41ce0d ]
  store i64 0, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i64 0, i64* %RDX.i4244, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i4050.pre-phi, align 8
  %6191 = load i64, i64* %RBP.i, align 8
  %6192 = add i64 %6191, -24
  %6193 = add i64 %6190, 18
  store i64 %6193, i64* %3, align 8
  %6194 = inttoptr i64 %6192 to i32*
  %6195 = load i32, i32* %6194, align 4
  %6196 = sext i32 %6195 to i64
  %6197 = mul nsw i64 %6196, 76
  store i64 %6197, i64* %RSI.i4246, align 8
  %6198 = lshr i64 %6197, 63
  %6199 = add i64 %6197, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %6199, i64* %RCX.i4050.pre-phi, align 8
  %6200 = icmp ult i64 %6199, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6201 = icmp ult i64 %6199, %6197
  %6202 = or i1 %6200, %6201
  %6203 = zext i1 %6202 to i8
  store i8 %6203, i8* %19, align 1
  %6204 = trunc i64 %6199 to i32
  %6205 = and i32 %6204, 252
  %6206 = tail call i32 @llvm.ctpop.i32(i32 %6205)
  %6207 = trunc i32 %6206 to i8
  %6208 = and i8 %6207, 1
  %6209 = xor i8 %6208, 1
  store i8 %6209, i8* %26, align 1
  %6210 = xor i64 %6197, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6211 = xor i64 %6210, %6199
  %6212 = lshr i64 %6211, 4
  %6213 = trunc i64 %6212 to i8
  %6214 = and i8 %6213, 1
  store i8 %6214, i8* %31, align 1
  %6215 = icmp eq i64 %6199, 0
  %6216 = zext i1 %6215 to i8
  store i8 %6216, i8* %34, align 1
  %6217 = lshr i64 %6199, 63
  %6218 = trunc i64 %6217 to i8
  store i8 %6218, i8* %37, align 1
  %6219 = xor i64 %6217, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6220 = xor i64 %6217, %6198
  %6221 = add nuw nsw i64 %6219, %6220
  %6222 = icmp eq i64 %6221, 2
  %6223 = zext i1 %6222 to i8
  store i8 %6223, i8* %43, align 1
  %6224 = add i64 %6197, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 32)
  %6225 = add i64 %6190, 28
  store i64 %6225, i64* %3, align 8
  %6226 = inttoptr i64 %6224 to i32*
  %6227 = load i32, i32* %6226, align 4
  %6228 = zext i32 %6227 to i64
  store i64 %6228, i64* %RDI.i4254, align 8
  %6229 = add i64 %6190, 31
  store i64 %6229, i64* %3, align 8
  %6230 = load i32, i32* %6194, align 4
  %6231 = zext i32 %6230 to i64
  store i64 %6231, i64* %RSI.i4246, align 8
  %6232 = add i64 %6190, 193940
  %6233 = add i64 %6190, 36
  %6234 = load i64, i64* %6, align 8
  %6235 = add i64 %6234, -8
  %6236 = inttoptr i64 %6235 to i64*
  store i64 %6233, i64* %6236, align 8
  store i64 %6235, i64* %6, align 8
  store i64 %6232, i64* %3, align 8
  %call2_41ce4b = tail call %struct.Memory* @sub_44c3c0.owl_does_defend(%struct.State* nonnull %0, i64 %6232, %struct.Memory* %MEMORY.46)
  %6237 = load i64, i64* %RBP.i, align 8
  %6238 = add i64 %6237, -112
  %6239 = load i32, i32* %EAX.i4253, align 4
  %6240 = load i64, i64* %3, align 8
  %6241 = add i64 %6240, 3
  store i64 %6241, i64* %3, align 8
  %6242 = inttoptr i64 %6238 to i32*
  store i32 %6239, i32* %6242, align 4
  %6243 = load i64, i64* %RBP.i, align 8
  %6244 = add i64 %6243, -112
  %6245 = load i64, i64* %3, align 8
  %6246 = add i64 %6245, 4
  store i64 %6246, i64* %3, align 8
  %6247 = inttoptr i64 %6244 to i32*
  %6248 = load i32, i32* %6247, align 4
  store i8 0, i8* %19, align 1
  %6249 = and i32 %6248, 255
  %6250 = tail call i32 @llvm.ctpop.i32(i32 %6249)
  %6251 = trunc i32 %6250 to i8
  %6252 = and i8 %6251, 1
  %6253 = xor i8 %6252, 1
  store i8 %6253, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %6254 = icmp eq i32 %6248, 0
  %6255 = zext i1 %6254 to i8
  store i8 %6255, i8* %34, align 1
  %6256 = lshr i32 %6248, 31
  %6257 = trunc i32 %6256 to i8
  store i8 %6257, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v408 = select i1 %6254, i64 71, i64 10
  %6258 = add i64 %6245, %.v408
  store i64 %6258, i64* %3, align 8
  br i1 %6254, label %block_.L_41ce9a, label %block_41ce5d

block_41ce5d:                                     ; preds = %block_.L_41ce2c
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %6259 = add i64 %6243, -24
  %6260 = add i64 %6258, 14
  store i64 %6260, i64* %3, align 8
  %6261 = inttoptr i64 %6259 to i32*
  %6262 = load i32, i32* %6261, align 4
  %6263 = sext i32 %6262 to i64
  %6264 = mul nsw i64 %6263, 76
  store i64 %6264, i64* %RCX.i4050.pre-phi, align 8
  %6265 = lshr i64 %6264, 63
  %6266 = add i64 %6264, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %6266, i64* %RDX.i4244, align 8
  %6267 = icmp ult i64 %6266, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6268 = icmp ult i64 %6266, %6264
  %6269 = or i1 %6267, %6268
  %6270 = zext i1 %6269 to i8
  store i8 %6270, i8* %19, align 1
  %6271 = trunc i64 %6266 to i32
  %6272 = and i32 %6271, 252
  %6273 = tail call i32 @llvm.ctpop.i32(i32 %6272)
  %6274 = trunc i32 %6273 to i8
  %6275 = and i8 %6274, 1
  %6276 = xor i8 %6275, 1
  store i8 %6276, i8* %26, align 1
  %6277 = xor i64 %6264, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6278 = xor i64 %6277, %6266
  %6279 = lshr i64 %6278, 4
  %6280 = trunc i64 %6279 to i8
  %6281 = and i8 %6280, 1
  store i8 %6281, i8* %31, align 1
  %6282 = icmp eq i64 %6266, 0
  %6283 = zext i1 %6282 to i8
  store i8 %6283, i8* %34, align 1
  %6284 = lshr i64 %6266, 63
  %6285 = trunc i64 %6284 to i8
  store i8 %6285, i8* %37, align 1
  %6286 = xor i64 %6284, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6287 = xor i64 %6284, %6265
  %6288 = add nuw nsw i64 %6286, %6287
  %6289 = icmp eq i64 %6288, 2
  %6290 = zext i1 %6289 to i8
  store i8 %6290, i8* %43, align 1
  %6291 = add i64 %6264, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 32)
  %6292 = add i64 %6258, 27
  store i64 %6292, i64* %3, align 8
  %6293 = inttoptr i64 %6291 to i32*
  %6294 = load i32, i32* %6293, align 4
  %6295 = zext i32 %6294 to i64
  store i64 %6295, i64* %RSI.i4246, align 8
  %6296 = add i64 %6258, 31
  store i64 %6296, i64* %3, align 8
  %6297 = load i32, i32* %6261, align 4
  %6298 = sext i32 %6297 to i64
  %6299 = mul nsw i64 %6298, 76
  store i64 %6299, i64* %RCX.i4050.pre-phi, align 8
  %6300 = lshr i64 %6299, 63
  %6301 = load i64, i64* %RAX.i1555, align 8
  %6302 = add i64 %6299, %6301
  store i64 %6302, i64* %RDX.i4244, align 8
  %6303 = icmp ult i64 %6302, %6301
  %6304 = icmp ult i64 %6302, %6299
  %6305 = or i1 %6303, %6304
  %6306 = zext i1 %6305 to i8
  store i8 %6306, i8* %19, align 1
  %6307 = trunc i64 %6302 to i32
  %6308 = and i32 %6307, 255
  %6309 = tail call i32 @llvm.ctpop.i32(i32 %6308)
  %6310 = trunc i32 %6309 to i8
  %6311 = and i8 %6310, 1
  %6312 = xor i8 %6311, 1
  store i8 %6312, i8* %26, align 1
  %6313 = xor i64 %6299, %6301
  %6314 = xor i64 %6313, %6302
  %6315 = lshr i64 %6314, 4
  %6316 = trunc i64 %6315 to i8
  %6317 = and i8 %6316, 1
  store i8 %6317, i8* %31, align 1
  %6318 = icmp eq i64 %6302, 0
  %6319 = zext i1 %6318 to i8
  store i8 %6319, i8* %34, align 1
  %6320 = lshr i64 %6302, 63
  %6321 = trunc i64 %6320 to i8
  store i8 %6321, i8* %37, align 1
  %6322 = lshr i64 %6301, 63
  %6323 = xor i64 %6320, %6322
  %6324 = xor i64 %6320, %6300
  %6325 = add nuw nsw i64 %6323, %6324
  %6326 = icmp eq i64 %6325, 2
  %6327 = zext i1 %6326 to i8
  store i8 %6327, i8* %43, align 1
  %6328 = add i64 %6302, 48
  %6329 = add i64 %6258, 44
  store i64 %6329, i64* %3, align 8
  %6330 = inttoptr i64 %6328 to i32*
  store i32 %6294, i32* %6330, align 4
  %6331 = load i64, i64* %RBP.i, align 8
  %6332 = add i64 %6331, -112
  %6333 = load i64, i64* %3, align 8
  %6334 = add i64 %6333, 3
  store i64 %6334, i64* %3, align 8
  %6335 = inttoptr i64 %6332 to i32*
  %6336 = load i32, i32* %6335, align 4
  %6337 = zext i32 %6336 to i64
  store i64 %6337, i64* %RSI.i4246, align 8
  %6338 = add i64 %6331, -24
  %6339 = add i64 %6333, 7
  store i64 %6339, i64* %3, align 8
  %6340 = inttoptr i64 %6338 to i32*
  %6341 = load i32, i32* %6340, align 4
  %6342 = sext i32 %6341 to i64
  %6343 = mul nsw i64 %6342, 76
  store i64 %6343, i64* %RCX.i4050.pre-phi, align 8
  %6344 = lshr i64 %6343, 63
  %6345 = load i64, i64* %RAX.i1555, align 8
  %6346 = add i64 %6343, %6345
  store i64 %6346, i64* %RAX.i1555, align 8
  %6347 = icmp ult i64 %6346, %6345
  %6348 = icmp ult i64 %6346, %6343
  %6349 = or i1 %6347, %6348
  %6350 = zext i1 %6349 to i8
  store i8 %6350, i8* %19, align 1
  %6351 = trunc i64 %6346 to i32
  %6352 = and i32 %6351, 255
  %6353 = tail call i32 @llvm.ctpop.i32(i32 %6352)
  %6354 = trunc i32 %6353 to i8
  %6355 = and i8 %6354, 1
  %6356 = xor i8 %6355, 1
  store i8 %6356, i8* %26, align 1
  %6357 = xor i64 %6343, %6345
  %6358 = xor i64 %6357, %6346
  %6359 = lshr i64 %6358, 4
  %6360 = trunc i64 %6359 to i8
  %6361 = and i8 %6360, 1
  store i8 %6361, i8* %31, align 1
  %6362 = icmp eq i64 %6346, 0
  %6363 = zext i1 %6362 to i8
  store i8 %6363, i8* %34, align 1
  %6364 = lshr i64 %6346, 63
  %6365 = trunc i64 %6364 to i8
  store i8 %6365, i8* %37, align 1
  %6366 = lshr i64 %6345, 63
  %6367 = xor i64 %6364, %6366
  %6368 = xor i64 %6364, %6344
  %6369 = add nuw nsw i64 %6367, %6368
  %6370 = icmp eq i64 %6369, 2
  %6371 = zext i1 %6370 to i8
  store i8 %6371, i8* %43, align 1
  %6372 = add i64 %6346, 52
  %6373 = add i64 %6333, 17
  store i64 %6373, i64* %3, align 8
  %6374 = inttoptr i64 %6372 to i32*
  store i32 %6336, i32* %6374, align 4
  %.pre280 = load i64, i64* %3, align 8
  br label %block_.L_41ce9a

block_.L_41ce9a:                                  ; preds = %block_41ce5d, %block_.L_41ce2c
  %6375 = phi i64 [ %.pre280, %block_41ce5d ], [ %6258, %block_.L_41ce2c ]
  %6376 = add i64 %6375, 5
  store i64 %6376, i64* %3, align 8
  br label %block_.L_41ce9f

block_.L_41ce9f:                                  ; preds = %block_.L_41ce9a, %block_41cd64
  %storemerge151 = phi i64 [ %6160, %block_41cd64 ], [ %6376, %block_.L_41ce9a ]
  %MEMORY.48 = phi %struct.Memory* [ %call2_41cd48, %block_41cd64 ], [ %call2_41ce4b, %block_.L_41ce9a ]
  %6377 = add i64 %storemerge151, 5
  store i64 %6377, i64* %3, align 8
  %.pre281.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_41cea4

block_.L_41cea4:                                  ; preds = %block_.L_41ce9f, %block_41cd1a
  %.pre281 = phi i64 [ %5919, %block_41cd1a ], [ %.pre281.pre, %block_.L_41ce9f ]
  %6378 = phi i64 [ %5934, %block_41cd1a ], [ %6377, %block_.L_41ce9f ]
  %MEMORY.49 = phi %struct.Memory* [ %call2_41cd48, %block_41cd1a ], [ %MEMORY.48, %block_.L_41ce9f ]
  %6379 = add i64 %6378, 5
  store i64 %6379, i64* %3, align 8
  br label %block_.L_41cea9

block_.L_41cea9:                                  ; preds = %block_.L_41cea4, %block_41cccd
  %6380 = phi i64 [ %5867, %block_41cccd ], [ %6379, %block_.L_41cea4 ]
  %6381 = phi i64 [ %5852, %block_41cccd ], [ %.pre281, %block_.L_41cea4 ]
  %MEMORY.50 = phi %struct.Memory* [ %call2_41ccbb, %block_41cccd ], [ %MEMORY.49, %block_.L_41cea4 ]
  %6382 = add i64 %6381, -112
  %6383 = add i64 %6380, 4
  store i64 %6383, i64* %3, align 8
  %6384 = inttoptr i64 %6382 to i32*
  %6385 = load i32, i32* %6384, align 4
  store i8 0, i8* %19, align 1
  %6386 = and i32 %6385, 255
  %6387 = tail call i32 @llvm.ctpop.i32(i32 %6386)
  %6388 = trunc i32 %6387 to i8
  %6389 = and i8 %6388, 1
  %6390 = xor i8 %6389, 1
  store i8 %6390, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %6391 = icmp eq i32 %6385, 0
  %6392 = zext i1 %6391 to i8
  store i8 %6392, i8* %34, align 1
  %6393 = lshr i32 %6385, 31
  %6394 = trunc i32 %6393 to i8
  store i8 %6394, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v406 = select i1 %6391, i64 10, i64 80
  %6395 = add i64 %6380, %.v406
  store i64 %6395, i64* %3, align 8
  br i1 %6391, label %block_41ceb3, label %block_.L_41cef9

block_41ceb3:                                     ; preds = %block_.L_41cea9
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %6396 = add i64 %6381, -24
  %6397 = add i64 %6395, 14
  store i64 %6397, i64* %3, align 8
  %6398 = inttoptr i64 %6396 to i32*
  %6399 = load i32, i32* %6398, align 4
  %6400 = sext i32 %6399 to i64
  %6401 = mul nsw i64 %6400, 76
  store i64 %6401, i64* %RCX.i4050.pre-phi, align 8
  %6402 = lshr i64 %6401, 63
  %6403 = add i64 %6401, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %6403, i64* %RDX.i4244, align 8
  %6404 = icmp ult i64 %6403, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6405 = icmp ult i64 %6403, %6401
  %6406 = or i1 %6404, %6405
  %6407 = zext i1 %6406 to i8
  store i8 %6407, i8* %19, align 1
  %6408 = trunc i64 %6403 to i32
  %6409 = and i32 %6408, 252
  %6410 = tail call i32 @llvm.ctpop.i32(i32 %6409)
  %6411 = trunc i32 %6410 to i8
  %6412 = and i8 %6411, 1
  %6413 = xor i8 %6412, 1
  store i8 %6413, i8* %26, align 1
  %6414 = xor i64 %6401, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6415 = xor i64 %6414, %6403
  %6416 = lshr i64 %6415, 4
  %6417 = trunc i64 %6416 to i8
  %6418 = and i8 %6417, 1
  store i8 %6418, i8* %31, align 1
  %6419 = icmp eq i64 %6403, 0
  %6420 = zext i1 %6419 to i8
  store i8 %6420, i8* %34, align 1
  %6421 = lshr i64 %6403, 63
  %6422 = trunc i64 %6421 to i8
  store i8 %6422, i8* %37, align 1
  %6423 = xor i64 %6421, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6424 = xor i64 %6421, %6402
  %6425 = add nuw nsw i64 %6423, %6424
  %6426 = icmp eq i64 %6425, 2
  %6427 = zext i1 %6426 to i8
  store i8 %6427, i8* %43, align 1
  %6428 = add i64 %6401, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 28)
  %6429 = add i64 %6395, 31
  store i64 %6429, i64* %3, align 8
  %6430 = inttoptr i64 %6428 to i32*
  store i32 0, i32* %6430, align 4
  %6431 = load i64, i64* %RBP.i, align 8
  %6432 = add i64 %6431, -24
  %6433 = load i64, i64* %3, align 8
  %6434 = add i64 %6433, 4
  store i64 %6434, i64* %3, align 8
  %6435 = inttoptr i64 %6432 to i32*
  %6436 = load i32, i32* %6435, align 4
  %6437 = sext i32 %6436 to i64
  %6438 = mul nsw i64 %6437, 76
  store i64 %6438, i64* %RCX.i4050.pre-phi, align 8
  %6439 = lshr i64 %6438, 63
  %6440 = load i64, i64* %RAX.i1555, align 8
  %6441 = add i64 %6438, %6440
  store i64 %6441, i64* %RDX.i4244, align 8
  %6442 = icmp ult i64 %6441, %6440
  %6443 = icmp ult i64 %6441, %6438
  %6444 = or i1 %6442, %6443
  %6445 = zext i1 %6444 to i8
  store i8 %6445, i8* %19, align 1
  %6446 = trunc i64 %6441 to i32
  %6447 = and i32 %6446, 255
  %6448 = tail call i32 @llvm.ctpop.i32(i32 %6447)
  %6449 = trunc i32 %6448 to i8
  %6450 = and i8 %6449, 1
  %6451 = xor i8 %6450, 1
  store i8 %6451, i8* %26, align 1
  %6452 = xor i64 %6438, %6440
  %6453 = xor i64 %6452, %6441
  %6454 = lshr i64 %6453, 4
  %6455 = trunc i64 %6454 to i8
  %6456 = and i8 %6455, 1
  store i8 %6456, i8* %31, align 1
  %6457 = icmp eq i64 %6441, 0
  %6458 = zext i1 %6457 to i8
  store i8 %6458, i8* %34, align 1
  %6459 = lshr i64 %6441, 63
  %6460 = trunc i64 %6459 to i8
  store i8 %6460, i8* %37, align 1
  %6461 = lshr i64 %6440, 63
  %6462 = xor i64 %6459, %6461
  %6463 = xor i64 %6459, %6439
  %6464 = add nuw nsw i64 %6462, %6463
  %6465 = icmp eq i64 %6464, 2
  %6466 = zext i1 %6465 to i8
  store i8 %6466, i8* %43, align 1
  %6467 = add i64 %6441, 48
  %6468 = add i64 %6433, 21
  store i64 %6468, i64* %3, align 8
  %6469 = inttoptr i64 %6467 to i32*
  store i32 0, i32* %6469, align 4
  %6470 = load i64, i64* %RBP.i, align 8
  %6471 = add i64 %6470, -24
  %6472 = load i64, i64* %3, align 8
  %6473 = add i64 %6472, 4
  store i64 %6473, i64* %3, align 8
  %6474 = inttoptr i64 %6471 to i32*
  %6475 = load i32, i32* %6474, align 4
  %6476 = sext i32 %6475 to i64
  %6477 = mul nsw i64 %6476, 76
  store i64 %6477, i64* %RCX.i4050.pre-phi, align 8
  %6478 = lshr i64 %6477, 63
  %6479 = load i64, i64* %RAX.i1555, align 8
  %6480 = add i64 %6477, %6479
  store i64 %6480, i64* %RAX.i1555, align 8
  %6481 = icmp ult i64 %6480, %6479
  %6482 = icmp ult i64 %6480, %6477
  %6483 = or i1 %6481, %6482
  %6484 = zext i1 %6483 to i8
  store i8 %6484, i8* %19, align 1
  %6485 = trunc i64 %6480 to i32
  %6486 = and i32 %6485, 255
  %6487 = tail call i32 @llvm.ctpop.i32(i32 %6486)
  %6488 = trunc i32 %6487 to i8
  %6489 = and i8 %6488, 1
  %6490 = xor i8 %6489, 1
  store i8 %6490, i8* %26, align 1
  %6491 = xor i64 %6477, %6479
  %6492 = xor i64 %6491, %6480
  %6493 = lshr i64 %6492, 4
  %6494 = trunc i64 %6493 to i8
  %6495 = and i8 %6494, 1
  store i8 %6495, i8* %31, align 1
  %6496 = icmp eq i64 %6480, 0
  %6497 = zext i1 %6496 to i8
  store i8 %6497, i8* %34, align 1
  %6498 = lshr i64 %6480, 63
  %6499 = trunc i64 %6498 to i8
  store i8 %6499, i8* %37, align 1
  %6500 = lshr i64 %6479, 63
  %6501 = xor i64 %6498, %6500
  %6502 = xor i64 %6498, %6478
  %6503 = add nuw nsw i64 %6501, %6502
  %6504 = icmp eq i64 %6503, 2
  %6505 = zext i1 %6504 to i8
  store i8 %6505, i8* %43, align 1
  %6506 = add i64 %6480, 52
  %6507 = add i64 %6472, 18
  store i64 %6507, i64* %3, align 8
  %6508 = inttoptr i64 %6506 to i32*
  store i32 0, i32* %6508, align 4
  %.pre282 = load i64, i64* %3, align 8
  br label %block_.L_41cef9

block_.L_41cef9:                                  ; preds = %block_.L_41cea9, %block_41ceb3
  %6509 = phi i64 [ %.pre282, %block_41ceb3 ], [ %6395, %block_.L_41cea9 ]
  %6510 = add i64 %6509, 281
  store i64 %6510, i64* %3, align 8
  br label %block_.L_41d012

block_.L_41cefe:                                  ; preds = %block_.L_41cc75
  %6511 = add i64 %5707, -24
  %6512 = add i64 %5722, 14
  store i64 %6512, i64* %3, align 8
  %6513 = inttoptr i64 %6511 to i32*
  %6514 = load i32, i32* %6513, align 4
  %6515 = sext i32 %6514 to i64
  %6516 = mul nsw i64 %6515, 76
  store i64 %6516, i64* %RCX.i4050.pre-phi, align 8
  %6517 = lshr i64 %6516, 63
  %6518 = add i64 %6516, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %6518, i64* %RAX.i1555, align 8
  %6519 = icmp ult i64 %6518, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6520 = icmp ult i64 %6518, %6516
  %6521 = or i1 %6519, %6520
  %6522 = zext i1 %6521 to i8
  store i8 %6522, i8* %19, align 1
  %6523 = trunc i64 %6518 to i32
  %6524 = and i32 %6523, 252
  %6525 = tail call i32 @llvm.ctpop.i32(i32 %6524)
  %6526 = trunc i32 %6525 to i8
  %6527 = and i8 %6526, 1
  %6528 = xor i8 %6527, 1
  store i8 %6528, i8* %26, align 1
  %6529 = xor i64 %6516, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6530 = xor i64 %6529, %6518
  %6531 = lshr i64 %6530, 4
  %6532 = trunc i64 %6531 to i8
  %6533 = and i8 %6532, 1
  store i8 %6533, i8* %31, align 1
  %6534 = icmp eq i64 %6518, 0
  %6535 = zext i1 %6534 to i8
  store i8 %6535, i8* %34, align 1
  %6536 = lshr i64 %6518, 63
  %6537 = trunc i64 %6536 to i8
  store i8 %6537, i8* %37, align 1
  %6538 = xor i64 %6536, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6539 = xor i64 %6536, %6517
  %6540 = add nuw nsw i64 %6538, %6539
  %6541 = icmp eq i64 %6540, 2
  %6542 = zext i1 %6541 to i8
  store i8 %6542, i8* %43, align 1
  %6543 = add i64 %6516, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 40)
  %6544 = add i64 %5722, 25
  store i64 %6544, i64* %3, align 8
  %6545 = inttoptr i64 %6543 to i32*
  %6546 = load i32, i32* %6545, align 4
  store i8 0, i8* %19, align 1
  %6547 = and i32 %6546, 255
  %6548 = tail call i32 @llvm.ctpop.i32(i32 %6547)
  %6549 = trunc i32 %6548 to i8
  %6550 = and i8 %6549, 1
  %6551 = xor i8 %6550, 1
  store i8 %6551, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %6552 = icmp eq i32 %6546, 0
  %6553 = zext i1 %6552 to i8
  store i8 %6553, i8* %34, align 1
  %6554 = lshr i32 %6546, 31
  %6555 = trunc i32 %6554 to i8
  store i8 %6555, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v409 = select i1 %6552, i64 31, i64 167
  %6556 = add i64 %5722, %.v409
  store i64 %6556, i64* %3, align 8
  br i1 %6552, label %block_41cf1d, label %block_.L_41cfa5

block_41cf1d:                                     ; preds = %block_.L_41cefe
  %6557 = add i64 %5707, -96
  store i64 %6557, i64* %RSI.i4246, align 8
  %6558 = add i64 %5707, -116
  store i64 %6558, i64* %RCX.i4050.pre-phi, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %6559 = add i64 %6556, 25
  store i64 %6559, i64* %3, align 8
  %6560 = inttoptr i64 %6558 to i32*
  store i32 0, i32* %6560, align 4
  %6561 = load i64, i64* %RBP.i, align 8
  %6562 = add i64 %6561, -24
  %6563 = load i64, i64* %3, align 8
  %6564 = add i64 %6563, 3
  store i64 %6564, i64* %3, align 8
  %6565 = inttoptr i64 %6562 to i32*
  %6566 = load i32, i32* %6565, align 4
  %6567 = zext i32 %6566 to i64
  store i64 %6567, i64* %RDI.i4254, align 8
  %6568 = add i64 %6563, 7
  store i64 %6568, i64* %3, align 8
  %6569 = load i32, i32* %6565, align 4
  %6570 = sext i32 %6569 to i64
  %6571 = mul nsw i64 %6570, 76
  %6572 = load i64, i64* %RAX.i1555, align 8
  %6573 = add i64 %6571, %6572
  %6574 = lshr i64 %6573, 63
  %6575 = add i64 %6573, 56
  store i64 %6575, i64* %RAX.i1555, align 8
  %6576 = icmp ugt i64 %6573, -57
  %6577 = zext i1 %6576 to i8
  store i8 %6577, i8* %19, align 1
  %6578 = trunc i64 %6575 to i32
  %6579 = and i32 %6578, 255
  %6580 = tail call i32 @llvm.ctpop.i32(i32 %6579)
  %6581 = trunc i32 %6580 to i8
  %6582 = and i8 %6581, 1
  %6583 = xor i8 %6582, 1
  store i8 %6583, i8* %26, align 1
  %6584 = xor i64 %6573, 16
  %6585 = xor i64 %6584, %6575
  %6586 = lshr i64 %6585, 4
  %6587 = trunc i64 %6586 to i8
  %6588 = and i8 %6587, 1
  store i8 %6588, i8* %31, align 1
  %6589 = icmp eq i64 %6575, 0
  %6590 = zext i1 %6589 to i8
  store i8 %6590, i8* %34, align 1
  %6591 = lshr i64 %6575, 63
  %6592 = trunc i64 %6591 to i8
  store i8 %6592, i8* %37, align 1
  %6593 = xor i64 %6591, %6574
  %6594 = add nuw nsw i64 %6593, %6591
  %6595 = icmp eq i64 %6594, 2
  %6596 = zext i1 %6595 to i8
  store i8 %6596, i8* %43, align 1
  store i64 %6575, i64* %RDX.i4244, align 8
  %6597 = add i64 %6563, 187274
  %6598 = add i64 %6563, 26
  %6599 = load i64, i64* %6, align 8
  %6600 = add i64 %6599, -8
  %6601 = inttoptr i64 %6600 to i64*
  store i64 %6598, i64* %6601, align 8
  store i64 %6600, i64* %6, align 8
  store i64 %6597, i64* %3, align 8
  %call2_41cf4b = tail call %struct.Memory* @sub_44aac0.owl_defend(%struct.State* nonnull %0, i64 %6597, %struct.Memory* %call2_41ccbb)
  %6602 = load i64, i64* %RBP.i, align 8
  %6603 = add i64 %6602, -112
  %6604 = load i32, i32* %EAX.i4253, align 4
  %6605 = load i64, i64* %3, align 8
  %6606 = add i64 %6605, 3
  store i64 %6606, i64* %3, align 8
  %6607 = inttoptr i64 %6603 to i32*
  store i32 %6604, i32* %6607, align 4
  %6608 = load i64, i64* %RBP.i, align 8
  %6609 = add i64 %6608, -112
  %6610 = load i64, i64* %3, align 8
  %6611 = add i64 %6610, 4
  store i64 %6611, i64* %3, align 8
  %6612 = inttoptr i64 %6609 to i32*
  %6613 = load i32, i32* %6612, align 4
  store i8 0, i8* %19, align 1
  %6614 = and i32 %6613, 255
  %6615 = tail call i32 @llvm.ctpop.i32(i32 %6614)
  %6616 = trunc i32 %6615 to i8
  %6617 = and i8 %6616, 1
  %6618 = xor i8 %6617, 1
  store i8 %6618, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %6619 = icmp eq i32 %6613, 0
  %6620 = zext i1 %6619 to i8
  store i8 %6620, i8* %34, align 1
  %6621 = lshr i32 %6613, 31
  %6622 = trunc i32 %6621 to i8
  store i8 %6622, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v410 = select i1 %6619, i64 77, i64 10
  %6623 = add i64 %6610, %.v410
  store i64 %6623, i64* %3, align 8
  br i1 %6619, label %block_.L_41cfa0, label %block_41cf5d

block_41cf5d:                                     ; preds = %block_41cf1d
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %6624 = add i64 %6608, -96
  %6625 = add i64 %6623, 13
  store i64 %6625, i64* %3, align 8
  %6626 = inttoptr i64 %6624 to i32*
  %6627 = load i32, i32* %6626, align 4
  %6628 = zext i32 %6627 to i64
  store i64 %6628, i64* %RCX.i4050.pre-phi, align 8
  %6629 = add i64 %6608, -24
  %6630 = add i64 %6623, 17
  store i64 %6630, i64* %3, align 8
  %6631 = inttoptr i64 %6629 to i32*
  %6632 = load i32, i32* %6631, align 4
  %6633 = sext i32 %6632 to i64
  %6634 = mul nsw i64 %6633, 76
  store i64 %6634, i64* %RDX.i4244, align 8
  %6635 = lshr i64 %6634, 63
  %6636 = add i64 %6634, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %6636, i64* %RSI.i4246, align 8
  %6637 = icmp ult i64 %6636, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6638 = icmp ult i64 %6636, %6634
  %6639 = or i1 %6637, %6638
  %6640 = zext i1 %6639 to i8
  store i8 %6640, i8* %19, align 1
  %6641 = trunc i64 %6636 to i32
  %6642 = and i32 %6641, 252
  %6643 = tail call i32 @llvm.ctpop.i32(i32 %6642)
  %6644 = trunc i32 %6643 to i8
  %6645 = and i8 %6644, 1
  %6646 = xor i8 %6645, 1
  store i8 %6646, i8* %26, align 1
  %6647 = xor i64 %6634, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6648 = xor i64 %6647, %6636
  %6649 = lshr i64 %6648, 4
  %6650 = trunc i64 %6649 to i8
  %6651 = and i8 %6650, 1
  store i8 %6651, i8* %31, align 1
  %6652 = icmp eq i64 %6636, 0
  %6653 = zext i1 %6652 to i8
  store i8 %6653, i8* %34, align 1
  %6654 = lshr i64 %6636, 63
  %6655 = trunc i64 %6654 to i8
  store i8 %6655, i8* %37, align 1
  %6656 = xor i64 %6654, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6657 = xor i64 %6654, %6635
  %6658 = add nuw nsw i64 %6656, %6657
  %6659 = icmp eq i64 %6658, 2
  %6660 = zext i1 %6659 to i8
  store i8 %6660, i8* %43, align 1
  %6661 = add i64 %6634, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 48)
  %6662 = add i64 %6623, 30
  store i64 %6662, i64* %3, align 8
  %6663 = inttoptr i64 %6661 to i32*
  store i32 %6627, i32* %6663, align 4
  %6664 = load i64, i64* %RBP.i, align 8
  %6665 = add i64 %6664, -112
  %6666 = load i64, i64* %3, align 8
  %6667 = add i64 %6666, 3
  store i64 %6667, i64* %3, align 8
  %6668 = inttoptr i64 %6665 to i32*
  %6669 = load i32, i32* %6668, align 4
  %6670 = zext i32 %6669 to i64
  store i64 %6670, i64* %RCX.i4050.pre-phi, align 8
  %6671 = add i64 %6664, -24
  %6672 = add i64 %6666, 7
  store i64 %6672, i64* %3, align 8
  %6673 = inttoptr i64 %6671 to i32*
  %6674 = load i32, i32* %6673, align 4
  %6675 = sext i32 %6674 to i64
  %6676 = mul nsw i64 %6675, 76
  store i64 %6676, i64* %RDX.i4244, align 8
  %6677 = lshr i64 %6676, 63
  %6678 = load i64, i64* %RAX.i1555, align 8
  %6679 = add i64 %6676, %6678
  store i64 %6679, i64* %RSI.i4246, align 8
  %6680 = icmp ult i64 %6679, %6678
  %6681 = icmp ult i64 %6679, %6676
  %6682 = or i1 %6680, %6681
  %6683 = zext i1 %6682 to i8
  store i8 %6683, i8* %19, align 1
  %6684 = trunc i64 %6679 to i32
  %6685 = and i32 %6684, 255
  %6686 = tail call i32 @llvm.ctpop.i32(i32 %6685)
  %6687 = trunc i32 %6686 to i8
  %6688 = and i8 %6687, 1
  %6689 = xor i8 %6688, 1
  store i8 %6689, i8* %26, align 1
  %6690 = xor i64 %6676, %6678
  %6691 = xor i64 %6690, %6679
  %6692 = lshr i64 %6691, 4
  %6693 = trunc i64 %6692 to i8
  %6694 = and i8 %6693, 1
  store i8 %6694, i8* %31, align 1
  %6695 = icmp eq i64 %6679, 0
  %6696 = zext i1 %6695 to i8
  store i8 %6696, i8* %34, align 1
  %6697 = lshr i64 %6679, 63
  %6698 = trunc i64 %6697 to i8
  store i8 %6698, i8* %37, align 1
  %6699 = lshr i64 %6678, 63
  %6700 = xor i64 %6697, %6699
  %6701 = xor i64 %6697, %6677
  %6702 = add nuw nsw i64 %6700, %6701
  %6703 = icmp eq i64 %6702, 2
  %6704 = zext i1 %6703 to i8
  store i8 %6704, i8* %43, align 1
  %6705 = add i64 %6679, 52
  %6706 = add i64 %6666, 20
  store i64 %6706, i64* %3, align 8
  %6707 = inttoptr i64 %6705 to i32*
  store i32 %6669, i32* %6707, align 4
  %6708 = load i64, i64* %RBP.i, align 8
  %6709 = add i64 %6708, -116
  %6710 = load i64, i64* %3, align 8
  %6711 = add i64 %6710, 3
  store i64 %6711, i64* %3, align 8
  %6712 = inttoptr i64 %6709 to i32*
  %6713 = load i32, i32* %6712, align 4
  %6714 = zext i32 %6713 to i64
  store i64 %6714, i64* %RCX.i4050.pre-phi, align 8
  %6715 = add i64 %6708, -24
  %6716 = add i64 %6710, 7
  store i64 %6716, i64* %3, align 8
  %6717 = inttoptr i64 %6715 to i32*
  %6718 = load i32, i32* %6717, align 4
  %6719 = sext i32 %6718 to i64
  %6720 = mul nsw i64 %6719, 76
  store i64 %6720, i64* %RDX.i4244, align 8
  %6721 = lshr i64 %6720, 63
  %6722 = load i64, i64* %RAX.i1555, align 8
  %6723 = add i64 %6720, %6722
  store i64 %6723, i64* %RAX.i1555, align 8
  %6724 = icmp ult i64 %6723, %6722
  %6725 = icmp ult i64 %6723, %6720
  %6726 = or i1 %6724, %6725
  %6727 = zext i1 %6726 to i8
  store i8 %6727, i8* %19, align 1
  %6728 = trunc i64 %6723 to i32
  %6729 = and i32 %6728, 255
  %6730 = tail call i32 @llvm.ctpop.i32(i32 %6729)
  %6731 = trunc i32 %6730 to i8
  %6732 = and i8 %6731, 1
  %6733 = xor i8 %6732, 1
  store i8 %6733, i8* %26, align 1
  %6734 = xor i64 %6720, %6722
  %6735 = xor i64 %6734, %6723
  %6736 = lshr i64 %6735, 4
  %6737 = trunc i64 %6736 to i8
  %6738 = and i8 %6737, 1
  store i8 %6738, i8* %31, align 1
  %6739 = icmp eq i64 %6723, 0
  %6740 = zext i1 %6739 to i8
  store i8 %6740, i8* %34, align 1
  %6741 = lshr i64 %6723, 63
  %6742 = trunc i64 %6741 to i8
  store i8 %6742, i8* %37, align 1
  %6743 = lshr i64 %6722, 63
  %6744 = xor i64 %6741, %6743
  %6745 = xor i64 %6741, %6721
  %6746 = add nuw nsw i64 %6744, %6745
  %6747 = icmp eq i64 %6746, 2
  %6748 = zext i1 %6747 to i8
  store i8 %6748, i8* %43, align 1
  %6749 = add i64 %6723, 72
  %6750 = add i64 %6710, 17
  store i64 %6750, i64* %3, align 8
  %6751 = inttoptr i64 %6749 to i32*
  store i32 %6713, i32* %6751, align 4
  %.pre283 = load i64, i64* %3, align 8
  %.pre284.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_41cfa0

block_.L_41cfa0:                                  ; preds = %block_41cf5d, %block_41cf1d
  %.pre284 = phi i64 [ %.pre284.pre, %block_41cf5d ], [ %6608, %block_41cf1d ]
  %6752 = phi i64 [ %.pre283, %block_41cf5d ], [ %6623, %block_41cf1d ]
  %6753 = add i64 %6752, 5
  store i64 %6753, i64* %3, align 8
  br label %block_.L_41cfa5

block_.L_41cfa5:                                  ; preds = %block_.L_41cefe, %block_.L_41cfa0
  %6754 = phi i64 [ %5707, %block_.L_41cefe ], [ %.pre284, %block_.L_41cfa0 ]
  %6755 = phi i64 [ %6556, %block_.L_41cefe ], [ %6753, %block_.L_41cfa0 ]
  %MEMORY.53 = phi %struct.Memory* [ %call2_41ccbb, %block_.L_41cefe ], [ %call2_41cf4b, %block_.L_41cfa0 ]
  store i64 3, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57aff0_type* @G__0x57aff0 to i64), i64* %RSI.i4246, align 8
  %6756 = add i64 %6755, add (i64 ptrtoint (%G_0xc5fa4__rip__type* @G_0xc5fa4__rip_ to i64), i64 15)
  %6757 = add i64 %6755, 23
  store i64 %6757, i64* %3, align 8
  %6758 = inttoptr i64 %6756 to i64*
  %6759 = load i64, i64* %6758, align 8
  store i64 %6759, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %6760 = add i64 %6754, -24
  %6761 = add i64 %6755, 37
  store i64 %6761, i64* %3, align 8
  %6762 = inttoptr i64 %6760 to i32*
  %6763 = load i32, i32* %6762, align 4
  %6764 = sext i32 %6763 to i64
  %6765 = mul nsw i64 %6764, 76
  store i64 %6765, i64* %RCX.i4050.pre-phi, align 8
  %6766 = lshr i64 %6765, 63
  %6767 = add i64 %6765, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %6767, i64* %RDX.i4244, align 8
  %6768 = icmp ult i64 %6767, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6769 = icmp ult i64 %6767, %6765
  %6770 = or i1 %6768, %6769
  %6771 = zext i1 %6770 to i8
  store i8 %6771, i8* %19, align 1
  %6772 = trunc i64 %6767 to i32
  %6773 = and i32 %6772, 252
  %6774 = tail call i32 @llvm.ctpop.i32(i32 %6773)
  %6775 = trunc i32 %6774 to i8
  %6776 = and i8 %6775, 1
  %6777 = xor i8 %6776, 1
  store i8 %6777, i8* %26, align 1
  %6778 = xor i64 %6765, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %6779 = xor i64 %6778, %6767
  %6780 = lshr i64 %6779, 4
  %6781 = trunc i64 %6780 to i8
  %6782 = and i8 %6781, 1
  store i8 %6782, i8* %31, align 1
  %6783 = icmp eq i64 %6767, 0
  %6784 = zext i1 %6783 to i8
  store i8 %6784, i8* %34, align 1
  %6785 = lshr i64 %6767, 63
  %6786 = trunc i64 %6785 to i8
  store i8 %6786, i8* %37, align 1
  %6787 = xor i64 %6785, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %6788 = xor i64 %6785, %6766
  %6789 = add nuw nsw i64 %6787, %6788
  %6790 = icmp eq i64 %6789, 2
  %6791 = zext i1 %6790 to i8
  store i8 %6791, i8* %43, align 1
  %6792 = add i64 %6765, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 28)
  %6793 = add i64 %6755, 54
  store i64 %6793, i64* %3, align 8
  %6794 = inttoptr i64 %6792 to i32*
  store i32 1, i32* %6794, align 4
  %6795 = load i64, i64* %RBP.i, align 8
  %6796 = add i64 %6795, -24
  %6797 = load i64, i64* %3, align 8
  %6798 = add i64 %6797, 4
  store i64 %6798, i64* %3, align 8
  %6799 = inttoptr i64 %6796 to i32*
  %6800 = load i32, i32* %6799, align 4
  %6801 = sext i32 %6800 to i64
  %6802 = mul nsw i64 %6801, 76
  store i64 %6802, i64* %RCX.i4050.pre-phi, align 8
  %6803 = lshr i64 %6802, 63
  %6804 = load i64, i64* %RAX.i1555, align 8
  %6805 = add i64 %6802, %6804
  store i64 %6805, i64* %RDX.i4244, align 8
  %6806 = icmp ult i64 %6805, %6804
  %6807 = icmp ult i64 %6805, %6802
  %6808 = or i1 %6806, %6807
  %6809 = zext i1 %6808 to i8
  store i8 %6809, i8* %19, align 1
  %6810 = trunc i64 %6805 to i32
  %6811 = and i32 %6810, 255
  %6812 = tail call i32 @llvm.ctpop.i32(i32 %6811)
  %6813 = trunc i32 %6812 to i8
  %6814 = and i8 %6813, 1
  %6815 = xor i8 %6814, 1
  store i8 %6815, i8* %26, align 1
  %6816 = xor i64 %6802, %6804
  %6817 = xor i64 %6816, %6805
  %6818 = lshr i64 %6817, 4
  %6819 = trunc i64 %6818 to i8
  %6820 = and i8 %6819, 1
  store i8 %6820, i8* %31, align 1
  %6821 = icmp eq i64 %6805, 0
  %6822 = zext i1 %6821 to i8
  store i8 %6822, i8* %34, align 1
  %6823 = lshr i64 %6805, 63
  %6824 = trunc i64 %6823 to i8
  store i8 %6824, i8* %37, align 1
  %6825 = lshr i64 %6804, 63
  %6826 = xor i64 %6823, %6825
  %6827 = xor i64 %6823, %6803
  %6828 = add nuw nsw i64 %6826, %6827
  %6829 = icmp eq i64 %6828, 2
  %6830 = zext i1 %6829 to i8
  store i8 %6830, i8* %43, align 1
  %6831 = add i64 %6805, 32
  %6832 = add i64 %6797, 21
  store i64 %6832, i64* %3, align 8
  %6833 = inttoptr i64 %6831 to i32*
  store i32 0, i32* %6833, align 4
  %6834 = load i64, i64* %RBP.i, align 8
  %6835 = add i64 %6834, -24
  %6836 = load i64, i64* %3, align 8
  %6837 = add i64 %6836, 4
  store i64 %6837, i64* %3, align 8
  %6838 = inttoptr i64 %6835 to i32*
  %6839 = load i32, i32* %6838, align 4
  %6840 = sext i32 %6839 to i64
  %6841 = mul nsw i64 %6840, 76
  store i64 %6841, i64* %RCX.i4050.pre-phi, align 8
  %6842 = lshr i64 %6841, 63
  %6843 = load i64, i64* %RAX.i1555, align 8
  %6844 = add i64 %6841, %6843
  store i64 %6844, i64* %RAX.i1555, align 8
  %6845 = icmp ult i64 %6844, %6843
  %6846 = icmp ult i64 %6844, %6841
  %6847 = or i1 %6845, %6846
  %6848 = zext i1 %6847 to i8
  store i8 %6848, i8* %19, align 1
  %6849 = trunc i64 %6844 to i32
  %6850 = and i32 %6849, 255
  %6851 = tail call i32 @llvm.ctpop.i32(i32 %6850)
  %6852 = trunc i32 %6851 to i8
  %6853 = and i8 %6852, 1
  %6854 = xor i8 %6853, 1
  store i8 %6854, i8* %26, align 1
  %6855 = xor i64 %6841, %6843
  %6856 = xor i64 %6855, %6844
  %6857 = lshr i64 %6856, 4
  %6858 = trunc i64 %6857 to i8
  %6859 = and i8 %6858, 1
  store i8 %6859, i8* %31, align 1
  %6860 = icmp eq i64 %6844, 0
  %6861 = zext i1 %6860 to i8
  store i8 %6861, i8* %34, align 1
  %6862 = lshr i64 %6844, 63
  %6863 = trunc i64 %6862 to i8
  store i8 %6863, i8* %37, align 1
  %6864 = lshr i64 %6843, 63
  %6865 = xor i64 %6862, %6864
  %6866 = xor i64 %6862, %6842
  %6867 = add nuw nsw i64 %6865, %6866
  %6868 = icmp eq i64 %6867, 2
  %6869 = zext i1 %6868 to i8
  store i8 %6869, i8* %43, align 1
  %6870 = add i64 %6844, 36
  %6871 = add i64 %6836, 18
  store i64 %6871, i64* %3, align 8
  %6872 = inttoptr i64 %6870 to i32*
  store i32 0, i32* %6872, align 4
  %6873 = load i64, i64* %RBP.i, align 8
  %6874 = add i64 %6873, -24
  %6875 = load i64, i64* %3, align 8
  %6876 = add i64 %6875, 3
  store i64 %6876, i64* %3, align 8
  %6877 = inttoptr i64 %6874 to i32*
  %6878 = load i32, i32* %6877, align 4
  %6879 = zext i32 %6878 to i64
  store i64 %6879, i64* %RDX.i4244, align 8
  %6880 = add i64 %6875, 390094
  %6881 = add i64 %6875, 8
  %6882 = load i64, i64* %6, align 8
  %6883 = add i64 %6882, -8
  %6884 = inttoptr i64 %6883 to i64*
  store i64 %6881, i64* %6884, align 8
  store i64 %6883, i64* %6, align 8
  store i64 %6880, i64* %3, align 8
  %call2_41d005 = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %6880, %struct.Memory* %MEMORY.53)
  %6885 = load i64, i64* %RBP.i, align 8
  %6886 = add i64 %6885, -992
  %6887 = load i64, i64* %3, align 8
  %6888 = add i64 %6887, 8
  store i64 %6888, i64* %3, align 8
  %6889 = load i64, i64* %93, align 1
  %6890 = inttoptr i64 %6886 to i64*
  store i64 %6889, i64* %6890, align 8
  %.pre285 = load i64, i64* %3, align 8
  br label %block_.L_41d012

block_.L_41d012:                                  ; preds = %block_.L_41cfa5, %block_.L_41cef9
  %6891 = phi i64 [ %.pre285, %block_.L_41cfa5 ], [ %6510, %block_.L_41cef9 ]
  %MEMORY.54 = phi %struct.Memory* [ %call2_41d005, %block_.L_41cfa5 ], [ %MEMORY.50, %block_.L_41cef9 ]
  %6892 = add i64 %6891, 5
  store i64 %6892, i64* %3, align 8
  br label %block_.L_41d017

block_.L_41d017:                                  ; preds = %block_.L_41d012, %block_41cc2a
  %storemerge150 = phi i64 [ %5639, %block_41cc2a ], [ %6892, %block_.L_41d012 ]
  %MEMORY.55 = phi %struct.Memory* [ %5518, %block_41cc2a ], [ %MEMORY.54, %block_.L_41d012 ]
  %6893 = add i64 %storemerge150, 5
  store i64 %6893, i64* %3, align 8
  br label %block_.L_41d01c

block_.L_41d01c:                                  ; preds = %block_.L_41d017, %block_41ca83
  %6894 = phi i64 [ %5023, %block_41ca83 ], [ %6893, %block_.L_41d017 ]
  %MEMORY.56 = phi %struct.Memory* [ %MEMORY.43, %block_41ca83 ], [ %MEMORY.55, %block_.L_41d017 ]
  %6895 = add i64 %6894, 5
  store i64 %6895, i64* %3, align 8
  br label %block_.L_41d021

block_.L_41d021:                                  ; preds = %block_.L_41d01c, %block_.L_41caf0
  %storemerge147 = phi i64 [ %5137, %block_.L_41caf0 ], [ %6895, %block_.L_41d01c ]
  %MEMORY.57 = phi %struct.Memory* [ %MEMORY.43, %block_.L_41caf0 ], [ %MEMORY.56, %block_.L_41d01c ]
  %6896 = load i64, i64* %RBP.i, align 8
  %6897 = add i64 %6896, -24
  %6898 = add i64 %storemerge147, 3
  store i64 %6898, i64* %3, align 8
  %6899 = inttoptr i64 %6897 to i32*
  %6900 = load i32, i32* %6899, align 4
  %6901 = add i32 %6900, 1
  %6902 = zext i32 %6901 to i64
  store i64 %6902, i64* %RAX.i1555, align 8
  %6903 = icmp eq i32 %6900, -1
  %6904 = icmp eq i32 %6901, 0
  %6905 = or i1 %6903, %6904
  %6906 = zext i1 %6905 to i8
  store i8 %6906, i8* %19, align 1
  %6907 = and i32 %6901, 255
  %6908 = tail call i32 @llvm.ctpop.i32(i32 %6907)
  %6909 = trunc i32 %6908 to i8
  %6910 = and i8 %6909, 1
  %6911 = xor i8 %6910, 1
  store i8 %6911, i8* %26, align 1
  %6912 = xor i32 %6901, %6900
  %6913 = lshr i32 %6912, 4
  %6914 = trunc i32 %6913 to i8
  %6915 = and i8 %6914, 1
  store i8 %6915, i8* %31, align 1
  %6916 = zext i1 %6904 to i8
  store i8 %6916, i8* %34, align 1
  %6917 = lshr i32 %6901, 31
  %6918 = trunc i32 %6917 to i8
  store i8 %6918, i8* %37, align 1
  %6919 = lshr i32 %6900, 31
  %6920 = xor i32 %6917, %6919
  %6921 = add nuw nsw i32 %6920, %6917
  %6922 = icmp eq i32 %6921, 2
  %6923 = zext i1 %6922 to i8
  store i8 %6923, i8* %43, align 1
  %6924 = add i64 %storemerge147, 9
  store i64 %6924, i64* %3, align 8
  store i32 %6901, i32* %6899, align 4
  %6925 = load i64, i64* %3, align 8
  %6926 = add i64 %6925, -1460
  store i64 %6926, i64* %3, align 8
  br label %block_.L_41ca76

block_.L_41d02f:                                  ; preds = %block_.L_41ca76
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57b00f_type* @G__0x57b00f to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %6927 = add i64 %4997, add (i64 ptrtoint (%G_0xc5f18__rip__type* @G_0xc5f18__rip_ to i64), i64 17)
  %6928 = add i64 %4997, 25
  store i64 %6928, i64* %3, align 8
  %6929 = inttoptr i64 %6927 to i64*
  %6930 = load i64, i64* %6929, align 8
  store i64 %6930, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %6931 = add i64 %4997, 390049
  %6932 = add i64 %4997, 30
  %6933 = load i64, i64* %6, align 8
  %6934 = add i64 %6933, -8
  %6935 = inttoptr i64 %6934 to i64*
  store i64 %6932, i64* %6935, align 8
  store i64 %6934, i64* %6, align 8
  store i64 %6931, i64* %3, align 8
  %call2_41d048 = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %6931, %struct.Memory* %MEMORY.43)
  %6936 = load i64, i64* %RBP.i, align 8
  %6937 = add i64 %6936, -24
  %6938 = load i64, i64* %3, align 8
  %6939 = add i64 %6938, 7
  store i64 %6939, i64* %3, align 8
  %6940 = inttoptr i64 %6937 to i32*
  store i32 21, i32* %6940, align 4
  %6941 = load i64, i64* %RBP.i, align 8
  %6942 = add i64 %6941, -1000
  %6943 = load i64, i64* %3, align 8
  %6944 = add i64 %6943, 8
  store i64 %6944, i64* %3, align 8
  %6945 = load i64, i64* %93, align 1
  %6946 = inttoptr i64 %6942 to i64*
  store i64 %6945, i64* %6946, align 8
  %.pre230 = load i64, i64* %3, align 8
  br label %block_.L_41d05c

block_.L_41d05c:                                  ; preds = %block_.L_41d17f, %block_.L_41d02f
  %6947 = phi i64 [ %7407, %block_.L_41d17f ], [ %.pre230, %block_.L_41d02f ]
  %6948 = load i64, i64* %RBP.i, align 8
  %6949 = add i64 %6948, -24
  %6950 = add i64 %6947, 7
  store i64 %6950, i64* %3, align 8
  %6951 = inttoptr i64 %6949 to i32*
  %6952 = load i32, i32* %6951, align 4
  %6953 = add i32 %6952, -400
  %6954 = icmp ult i32 %6952, 400
  %6955 = zext i1 %6954 to i8
  store i8 %6955, i8* %19, align 1
  %6956 = and i32 %6953, 255
  %6957 = tail call i32 @llvm.ctpop.i32(i32 %6956)
  %6958 = trunc i32 %6957 to i8
  %6959 = and i8 %6958, 1
  %6960 = xor i8 %6959, 1
  store i8 %6960, i8* %26, align 1
  %6961 = xor i32 %6952, 16
  %6962 = xor i32 %6961, %6953
  %6963 = lshr i32 %6962, 4
  %6964 = trunc i32 %6963 to i8
  %6965 = and i8 %6964, 1
  store i8 %6965, i8* %31, align 1
  %6966 = icmp eq i32 %6953, 0
  %6967 = zext i1 %6966 to i8
  store i8 %6967, i8* %34, align 1
  %6968 = lshr i32 %6953, 31
  %6969 = trunc i32 %6968 to i8
  store i8 %6969, i8* %37, align 1
  %6970 = lshr i32 %6952, 31
  %6971 = xor i32 %6968, %6970
  %6972 = add nuw nsw i32 %6971, %6970
  %6973 = icmp eq i32 %6972, 2
  %6974 = zext i1 %6973 to i8
  store i8 %6974, i8* %43, align 1
  %6975 = icmp ne i8 %6969, 0
  %6976 = xor i1 %6975, %6973
  %.v332 = select i1 %6976, i64 13, i64 310
  %6977 = add i64 %6947, %.v332
  store i64 %6977, i64* %3, align 8
  br i1 %6976, label %block_41d069, label %block_.L_41d192

block_41d069:                                     ; preds = %block_.L_41d05c
  %6978 = add i64 %6977, 4
  store i64 %6978, i64* %3, align 8
  %6979 = load i32, i32* %6951, align 4
  %6980 = sext i32 %6979 to i64
  store i64 %6980, i64* %RAX.i1555, align 8
  %6981 = add nsw i64 %6980, 12099168
  %6982 = add i64 %6977, 12
  store i64 %6982, i64* %3, align 8
  %6983 = inttoptr i64 %6981 to i8*
  %6984 = load i8, i8* %6983, align 1
  %6985 = zext i8 %6984 to i64
  store i64 %6985, i64* %RCX.i4050.pre-phi, align 8
  %6986 = zext i8 %6984 to i32
  %6987 = add nsw i32 %6986, -3
  %6988 = icmp ult i8 %6984, 3
  %6989 = zext i1 %6988 to i8
  store i8 %6989, i8* %19, align 1
  %6990 = and i32 %6987, 255
  %6991 = tail call i32 @llvm.ctpop.i32(i32 %6990)
  %6992 = trunc i32 %6991 to i8
  %6993 = and i8 %6992, 1
  %6994 = xor i8 %6993, 1
  store i8 %6994, i8* %26, align 1
  %6995 = xor i32 %6987, %6986
  %6996 = lshr i32 %6995, 4
  %6997 = trunc i32 %6996 to i8
  %6998 = and i8 %6997, 1
  store i8 %6998, i8* %31, align 1
  %6999 = icmp eq i32 %6987, 0
  %7000 = zext i1 %6999 to i8
  store i8 %7000, i8* %34, align 1
  %7001 = lshr i32 %6987, 31
  %7002 = trunc i32 %7001 to i8
  store i8 %7002, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v393 = select i1 %6999, i64 278, i64 21
  %7003 = add i64 %6977, %.v393
  store i64 %7003, i64* %3, align 8
  br i1 %6999, label %block_.L_41d17f, label %block_41d07e

block_41d07e:                                     ; preds = %block_41d069
  %7004 = add i64 %7003, 4
  store i64 %7004, i64* %3, align 8
  %7005 = load i32, i32* %6951, align 4
  %7006 = sext i32 %7005 to i64
  store i64 %7006, i64* %RAX.i1555, align 8
  %7007 = add nsw i64 %7006, 12099168
  %7008 = add i64 %7003, 12
  store i64 %7008, i64* %3, align 8
  %7009 = inttoptr i64 %7007 to i8*
  %7010 = load i8, i8* %7009, align 1
  %7011 = zext i8 %7010 to i64
  store i64 %7011, i64* %RCX.i4050.pre-phi, align 8
  %7012 = zext i8 %7010 to i32
  %7013 = add nsw i32 %7012, -1
  %7014 = icmp eq i8 %7010, 0
  %7015 = zext i1 %7014 to i8
  store i8 %7015, i8* %19, align 1
  %7016 = and i32 %7013, 255
  %7017 = tail call i32 @llvm.ctpop.i32(i32 %7016)
  %7018 = trunc i32 %7017 to i8
  %7019 = and i8 %7018, 1
  %7020 = xor i8 %7019, 1
  store i8 %7020, i8* %26, align 1
  %7021 = xor i32 %7013, %7012
  %7022 = lshr i32 %7021, 4
  %7023 = trunc i32 %7022 to i8
  %7024 = and i8 %7023, 1
  store i8 %7024, i8* %31, align 1
  %7025 = icmp eq i32 %7013, 0
  %7026 = zext i1 %7025 to i8
  store i8 %7026, i8* %34, align 1
  %7027 = lshr i32 %7013, 31
  %7028 = trunc i32 %7027 to i8
  store i8 %7028, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v394 = select i1 %7025, i64 42, i64 21
  %7029 = add i64 %7003, %.v394
  store i64 %7029, i64* %3, align 8
  br i1 %7025, label %block_.L_41d0a8, label %block_41d093

block_41d093:                                     ; preds = %block_41d07e
  %7030 = add i64 %7029, 4
  store i64 %7030, i64* %3, align 8
  %7031 = load i32, i32* %6951, align 4
  %7032 = sext i32 %7031 to i64
  store i64 %7032, i64* %RAX.i1555, align 8
  %7033 = add nsw i64 %7032, 12099168
  %7034 = add i64 %7029, 12
  store i64 %7034, i64* %3, align 8
  %7035 = inttoptr i64 %7033 to i8*
  %7036 = load i8, i8* %7035, align 1
  %7037 = zext i8 %7036 to i64
  store i64 %7037, i64* %RCX.i4050.pre-phi, align 8
  %7038 = zext i8 %7036 to i32
  %7039 = add nsw i32 %7038, -2
  %7040 = icmp ult i8 %7036, 2
  %7041 = zext i1 %7040 to i8
  store i8 %7041, i8* %19, align 1
  %7042 = and i32 %7039, 255
  %7043 = tail call i32 @llvm.ctpop.i32(i32 %7042)
  %7044 = trunc i32 %7043 to i8
  %7045 = and i8 %7044, 1
  %7046 = xor i8 %7045, 1
  store i8 %7046, i8* %26, align 1
  %7047 = xor i32 %7039, %7038
  %7048 = lshr i32 %7047, 4
  %7049 = trunc i32 %7048 to i8
  %7050 = and i8 %7049, 1
  store i8 %7050, i8* %31, align 1
  %7051 = icmp eq i32 %7039, 0
  %7052 = zext i1 %7051 to i8
  store i8 %7052, i8* %34, align 1
  %7053 = lshr i32 %7039, 31
  %7054 = trunc i32 %7053 to i8
  store i8 %7054, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v395 = select i1 %7051, i64 21, i64 231
  %7055 = add i64 %7029, %.v395
  store i64 %7055, i64* %3, align 8
  br i1 %7051, label %block_.L_41d0a8, label %block_.L_41d17a

block_.L_41d0a8:                                  ; preds = %block_41d093, %block_41d07e
  %7056 = phi i64 [ %7055, %block_41d093 ], [ %7029, %block_41d07e ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %7057 = add i64 %7056, 14
  store i64 %7057, i64* %3, align 8
  %7058 = load i32, i32* %6951, align 4
  %7059 = sext i32 %7058 to i64
  %7060 = mul nsw i64 %7059, 76
  store i64 %7060, i64* %RCX.i4050.pre-phi, align 8
  %7061 = lshr i64 %7060, 63
  %7062 = add i64 %7060, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7062, i64* %RAX.i1555, align 8
  %7063 = icmp ult i64 %7062, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7064 = icmp ult i64 %7062, %7060
  %7065 = or i1 %7063, %7064
  %7066 = zext i1 %7065 to i8
  store i8 %7066, i8* %19, align 1
  %7067 = trunc i64 %7062 to i32
  %7068 = and i32 %7067, 252
  %7069 = tail call i32 @llvm.ctpop.i32(i32 %7068)
  %7070 = trunc i32 %7069 to i8
  %7071 = and i8 %7070, 1
  %7072 = xor i8 %7071, 1
  store i8 %7072, i8* %26, align 1
  %7073 = xor i64 %7060, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7074 = xor i64 %7073, %7062
  %7075 = lshr i64 %7074, 4
  %7076 = trunc i64 %7075 to i8
  %7077 = and i8 %7076, 1
  store i8 %7077, i8* %31, align 1
  %7078 = icmp eq i64 %7062, 0
  %7079 = zext i1 %7078 to i8
  store i8 %7079, i8* %34, align 1
  %7080 = lshr i64 %7062, 63
  %7081 = trunc i64 %7080 to i8
  store i8 %7081, i8* %37, align 1
  %7082 = xor i64 %7080, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7083 = xor i64 %7080, %7061
  %7084 = add nuw nsw i64 %7082, %7083
  %7085 = icmp eq i64 %7084, 2
  %7086 = zext i1 %7085 to i8
  store i8 %7086, i8* %43, align 1
  %7087 = add i64 %7060, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 28)
  %7088 = add i64 %7056, 25
  store i64 %7088, i64* %3, align 8
  %7089 = inttoptr i64 %7087 to i32*
  %7090 = load i32, i32* %7089, align 4
  %7091 = add i32 %7090, -4
  %7092 = icmp ult i32 %7090, 4
  %7093 = zext i1 %7092 to i8
  store i8 %7093, i8* %19, align 1
  %7094 = and i32 %7091, 255
  %7095 = tail call i32 @llvm.ctpop.i32(i32 %7094)
  %7096 = trunc i32 %7095 to i8
  %7097 = and i8 %7096, 1
  %7098 = xor i8 %7097, 1
  store i8 %7098, i8* %26, align 1
  %7099 = xor i32 %7091, %7090
  %7100 = lshr i32 %7099, 4
  %7101 = trunc i32 %7100 to i8
  %7102 = and i8 %7101, 1
  store i8 %7102, i8* %31, align 1
  %7103 = icmp eq i32 %7091, 0
  %7104 = zext i1 %7103 to i8
  store i8 %7104, i8* %34, align 1
  %7105 = lshr i32 %7091, 31
  %7106 = trunc i32 %7105 to i8
  store i8 %7106, i8* %37, align 1
  %7107 = lshr i32 %7090, 31
  %7108 = xor i32 %7105, %7107
  %7109 = add nuw nsw i32 %7108, %7107
  %7110 = icmp eq i32 %7109, 2
  %7111 = zext i1 %7110 to i8
  store i8 %7111, i8* %43, align 1
  %.v396 = select i1 %7103, i64 77, i64 31
  %7112 = add i64 %7056, %.v396
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %7113 = load i64, i64* %RBP.i, align 8
  %7114 = add i64 %7113, -24
  %7115 = add i64 %7112, 14
  store i64 %7115, i64* %3, align 8
  %7116 = inttoptr i64 %7114 to i32*
  %7117 = load i32, i32* %7116, align 4
  %7118 = sext i32 %7117 to i64
  %7119 = add i64 %7112, 18
  store i64 %7119, i64* %3, align 8
  %7120 = sext i32 %7117 to i128
  %7121 = and i128 %7120, -18446744073709551616
  %7122 = zext i64 %7118 to i128
  %7123 = or i128 %7121, %7122
  %7124 = mul nsw i128 %7123, 76
  %7125 = trunc i128 %7124 to i64
  store i64 %7125, i64* %RCX.i4050.pre-phi, align 8
  %7126 = sext i64 %7125 to i128
  %7127 = icmp ne i128 %7126, %7124
  %7128 = zext i1 %7127 to i8
  store i8 %7128, i8* %19, align 1
  %7129 = trunc i128 %7124 to i32
  %7130 = and i32 %7129, 252
  %7131 = tail call i32 @llvm.ctpop.i32(i32 %7130)
  %7132 = trunc i32 %7131 to i8
  %7133 = and i8 %7132, 1
  %7134 = xor i8 %7133, 1
  store i8 %7134, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  %7135 = lshr i64 %7125, 63
  %7136 = trunc i64 %7135 to i8
  store i8 %7136, i8* %37, align 1
  store i8 %7128, i8* %43, align 1
  %7137 = add i64 %7125, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  br i1 %7103, label %block_.L_41d0f5, label %block_41d0c7

block_41d0c7:                                     ; preds = %block_.L_41d0a8
  store i64 %7137, i64* %RDX.i4244, align 8
  %7138 = icmp ult i64 %7137, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7139 = icmp ult i64 %7137, %7125
  %7140 = or i1 %7138, %7139
  %7141 = zext i1 %7140 to i8
  store i8 %7141, i8* %19, align 1
  %7142 = trunc i64 %7137 to i32
  %7143 = and i32 %7142, 252
  %7144 = tail call i32 @llvm.ctpop.i32(i32 %7143)
  %7145 = trunc i32 %7144 to i8
  %7146 = and i8 %7145, 1
  %7147 = xor i8 %7146, 1
  store i8 %7147, i8* %26, align 1
  %7148 = xor i64 %7125, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7149 = xor i64 %7148, %7137
  %7150 = lshr i64 %7149, 4
  %7151 = trunc i64 %7150 to i8
  %7152 = and i8 %7151, 1
  store i8 %7152, i8* %31, align 1
  %7153 = icmp eq i64 %7137, 0
  %7154 = zext i1 %7153 to i8
  store i8 %7154, i8* %34, align 1
  %7155 = lshr i64 %7137, 63
  %7156 = trunc i64 %7155 to i8
  store i8 %7156, i8* %37, align 1
  %7157 = xor i64 %7155, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7158 = xor i64 %7155, %7135
  %7159 = add nuw nsw i64 %7157, %7158
  %7160 = icmp eq i64 %7159, 2
  %7161 = zext i1 %7160 to i8
  store i8 %7161, i8* %43, align 1
  %7162 = add i64 %7125, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 28)
  %7163 = add i64 %7112, 27
  store i64 %7163, i64* %3, align 8
  %7164 = inttoptr i64 %7162 to i32*
  %7165 = load i32, i32* %7164, align 4
  %7166 = zext i32 %7165 to i64
  store i64 %7166, i64* %RSI.i4246, align 8
  %7167 = add i64 %7112, 31
  store i64 %7167, i64* %3, align 8
  %7168 = load i32, i32* %7116, align 4
  %7169 = sext i32 %7168 to i64
  %7170 = mul nsw i64 %7169, 76
  store i64 %7170, i64* %RCX.i4050.pre-phi, align 8
  %7171 = lshr i64 %7170, 63
  %7172 = add i64 %7170, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7172, i64* %RAX.i1555, align 8
  %7173 = icmp ult i64 %7172, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7174 = icmp ult i64 %7172, %7170
  %7175 = or i1 %7173, %7174
  %7176 = zext i1 %7175 to i8
  store i8 %7176, i8* %19, align 1
  %7177 = trunc i64 %7172 to i32
  %7178 = and i32 %7177, 252
  %7179 = tail call i32 @llvm.ctpop.i32(i32 %7178)
  %7180 = trunc i32 %7179 to i8
  %7181 = and i8 %7180, 1
  %7182 = xor i8 %7181, 1
  store i8 %7182, i8* %26, align 1
  %7183 = xor i64 %7170, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7184 = xor i64 %7183, %7172
  %7185 = lshr i64 %7184, 4
  %7186 = trunc i64 %7185 to i8
  %7187 = and i8 %7186, 1
  store i8 %7187, i8* %31, align 1
  %7188 = icmp eq i64 %7172, 0
  %7189 = zext i1 %7188 to i8
  store i8 %7189, i8* %34, align 1
  %7190 = lshr i64 %7172, 63
  %7191 = trunc i64 %7190 to i8
  store i8 %7191, i8* %37, align 1
  %7192 = xor i64 %7190, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7193 = xor i64 %7190, %7171
  %7194 = add nuw nsw i64 %7192, %7193
  %7195 = icmp eq i64 %7194, 2
  %7196 = zext i1 %7195 to i8
  store i8 %7196, i8* %43, align 1
  %7197 = add i64 %7170, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %7198 = add i64 %7112, 41
  store i64 %7198, i64* %3, align 8
  %7199 = inttoptr i64 %7197 to i32*
  store i32 %7165, i32* %7199, align 4
  %7200 = load i64, i64* %3, align 8
  %7201 = add i64 %7200, 133
  br label %block_.L_41d175

block_.L_41d0f5:                                  ; preds = %block_.L_41d0a8
  store i64 %7137, i64* %RAX.i1555, align 8
  %7202 = icmp ult i64 %7137, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7203 = icmp ult i64 %7137, %7125
  %7204 = or i1 %7202, %7203
  %7205 = zext i1 %7204 to i8
  store i8 %7205, i8* %19, align 1
  %7206 = trunc i64 %7137 to i32
  %7207 = and i32 %7206, 252
  %7208 = tail call i32 @llvm.ctpop.i32(i32 %7207)
  %7209 = trunc i32 %7208 to i8
  %7210 = and i8 %7209, 1
  %7211 = xor i8 %7210, 1
  store i8 %7211, i8* %26, align 1
  %7212 = xor i64 %7125, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7213 = xor i64 %7212, %7137
  %7214 = lshr i64 %7213, 4
  %7215 = trunc i64 %7214 to i8
  %7216 = and i8 %7215, 1
  store i8 %7216, i8* %31, align 1
  %7217 = icmp eq i64 %7137, 0
  %7218 = zext i1 %7217 to i8
  store i8 %7218, i8* %34, align 1
  %7219 = lshr i64 %7137, 63
  %7220 = trunc i64 %7219 to i8
  store i8 %7220, i8* %37, align 1
  %7221 = xor i64 %7219, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7222 = xor i64 %7219, %7135
  %7223 = add nuw nsw i64 %7221, %7222
  %7224 = icmp eq i64 %7223, 2
  %7225 = zext i1 %7224 to i8
  store i8 %7225, i8* %43, align 1
  %7226 = add i64 %7125, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 20)
  %7227 = add i64 %7112, 25
  store i64 %7227, i64* %3, align 8
  %7228 = inttoptr i64 %7226 to i32*
  %7229 = load i32, i32* %7228, align 4
  store i8 0, i8* %19, align 1
  %7230 = and i32 %7229, 255
  %7231 = tail call i32 @llvm.ctpop.i32(i32 %7230)
  %7232 = trunc i32 %7231 to i8
  %7233 = and i8 %7232, 1
  %7234 = xor i8 %7233, 1
  store i8 %7234, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7235 = icmp eq i32 %7229, 0
  %7236 = zext i1 %7235 to i8
  store i8 %7236, i8* %34, align 1
  %7237 = lshr i32 %7229, 31
  %7238 = trunc i32 %7237 to i8
  store i8 %7238, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v397 = select i1 %7235, i64 62, i64 31
  %7239 = add i64 %7112, %.v397
  store i64 %7239, i64* %3, align 8
  br i1 %7235, label %block_.L_41d133, label %block_41d114

block_41d114:                                     ; preds = %block_.L_41d0f5
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %7240 = add i64 %7239, 14
  store i64 %7240, i64* %3, align 8
  %7241 = load i32, i32* %7116, align 4
  %7242 = sext i32 %7241 to i64
  %7243 = mul nsw i64 %7242, 76
  store i64 %7243, i64* %RCX.i4050.pre-phi, align 8
  %7244 = lshr i64 %7243, 63
  %7245 = add i64 %7243, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7245, i64* %RAX.i1555, align 8
  %7246 = icmp ult i64 %7245, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7247 = icmp ult i64 %7245, %7243
  %7248 = or i1 %7246, %7247
  %7249 = zext i1 %7248 to i8
  store i8 %7249, i8* %19, align 1
  %7250 = trunc i64 %7245 to i32
  %7251 = and i32 %7250, 252
  %7252 = tail call i32 @llvm.ctpop.i32(i32 %7251)
  %7253 = trunc i32 %7252 to i8
  %7254 = and i8 %7253, 1
  %7255 = xor i8 %7254, 1
  store i8 %7255, i8* %26, align 1
  %7256 = xor i64 %7243, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7257 = xor i64 %7256, %7245
  %7258 = lshr i64 %7257, 4
  %7259 = trunc i64 %7258 to i8
  %7260 = and i8 %7259, 1
  store i8 %7260, i8* %31, align 1
  %7261 = icmp eq i64 %7245, 0
  %7262 = zext i1 %7261 to i8
  store i8 %7262, i8* %34, align 1
  %7263 = lshr i64 %7245, 63
  %7264 = trunc i64 %7263 to i8
  store i8 %7264, i8* %37, align 1
  %7265 = xor i64 %7263, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7266 = xor i64 %7263, %7244
  %7267 = add nuw nsw i64 %7265, %7266
  %7268 = icmp eq i64 %7267, 2
  %7269 = zext i1 %7268 to i8
  store i8 %7269, i8* %43, align 1
  %7270 = add i64 %7243, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 20)
  %7271 = add i64 %7239, 25
  store i64 %7271, i64* %3, align 8
  %7272 = inttoptr i64 %7270 to i32*
  %7273 = load i32, i32* %7272, align 4
  %7274 = add i32 %7273, -2
  %7275 = icmp ult i32 %7273, 2
  %7276 = zext i1 %7275 to i8
  store i8 %7276, i8* %19, align 1
  %7277 = and i32 %7274, 255
  %7278 = tail call i32 @llvm.ctpop.i32(i32 %7277)
  %7279 = trunc i32 %7278 to i8
  %7280 = and i8 %7279, 1
  %7281 = xor i8 %7280, 1
  store i8 %7281, i8* %26, align 1
  %7282 = xor i32 %7274, %7273
  %7283 = lshr i32 %7282, 4
  %7284 = trunc i32 %7283 to i8
  %7285 = and i8 %7284, 1
  store i8 %7285, i8* %31, align 1
  %7286 = icmp eq i32 %7274, 0
  %7287 = zext i1 %7286 to i8
  store i8 %7287, i8* %34, align 1
  %7288 = lshr i32 %7274, 31
  %7289 = trunc i32 %7288 to i8
  store i8 %7289, i8* %37, align 1
  %7290 = lshr i32 %7273, 31
  %7291 = xor i32 %7288, %7290
  %7292 = add nuw nsw i32 %7291, %7290
  %7293 = icmp eq i32 %7292, 2
  %7294 = zext i1 %7293 to i8
  store i8 %7294, i8* %43, align 1
  %.v398 = select i1 %7286, i64 31, i64 64
  %7295 = add i64 %7239, %.v398
  store i64 %7295, i64* %3, align 8
  br i1 %7286, label %block_41d114.block_.L_41d133_crit_edge, label %block_.L_41d154

block_41d114.block_.L_41d133_crit_edge:           ; preds = %block_41d114
  %.pre272 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41d133

block_.L_41d133:                                  ; preds = %block_41d114.block_.L_41d133_crit_edge, %block_.L_41d0f5
  %7296 = phi i64 [ %.pre272, %block_41d114.block_.L_41d133_crit_edge ], [ %7113, %block_.L_41d0f5 ]
  %7297 = phi i64 [ %7295, %block_41d114.block_.L_41d133_crit_edge ], [ %7239, %block_.L_41d0f5 ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %7298 = add i64 %7296, -24
  %7299 = add i64 %7297, 14
  store i64 %7299, i64* %3, align 8
  %7300 = inttoptr i64 %7298 to i32*
  %7301 = load i32, i32* %7300, align 4
  %7302 = sext i32 %7301 to i64
  %7303 = mul nsw i64 %7302, 76
  store i64 %7303, i64* %RCX.i4050.pre-phi, align 8
  %7304 = lshr i64 %7303, 63
  %7305 = add i64 %7303, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7305, i64* %RAX.i1555, align 8
  %7306 = icmp ult i64 %7305, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7307 = icmp ult i64 %7305, %7303
  %7308 = or i1 %7306, %7307
  %7309 = zext i1 %7308 to i8
  store i8 %7309, i8* %19, align 1
  %7310 = trunc i64 %7305 to i32
  %7311 = and i32 %7310, 252
  %7312 = tail call i32 @llvm.ctpop.i32(i32 %7311)
  %7313 = trunc i32 %7312 to i8
  %7314 = and i8 %7313, 1
  %7315 = xor i8 %7314, 1
  store i8 %7315, i8* %26, align 1
  %7316 = xor i64 %7303, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7317 = xor i64 %7316, %7305
  %7318 = lshr i64 %7317, 4
  %7319 = trunc i64 %7318 to i8
  %7320 = and i8 %7319, 1
  store i8 %7320, i8* %31, align 1
  %7321 = icmp eq i64 %7305, 0
  %7322 = zext i1 %7321 to i8
  store i8 %7322, i8* %34, align 1
  %7323 = lshr i64 %7305, 63
  %7324 = trunc i64 %7323 to i8
  store i8 %7324, i8* %37, align 1
  %7325 = xor i64 %7323, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7326 = xor i64 %7323, %7304
  %7327 = add nuw nsw i64 %7325, %7326
  %7328 = icmp eq i64 %7327, 2
  %7329 = zext i1 %7328 to i8
  store i8 %7329, i8* %43, align 1
  %7330 = add i64 %7303, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %7331 = add i64 %7297, 28
  store i64 %7331, i64* %3, align 8
  %7332 = inttoptr i64 %7330 to i32*
  store i32 3, i32* %7332, align 4
  %7333 = load i64, i64* %3, align 8
  %7334 = add i64 %7333, 33
  store i64 %7334, i64* %3, align 8
  br label %block_.L_41d170

block_.L_41d154:                                  ; preds = %block_41d114
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %7335 = load i64, i64* %RBP.i, align 8
  %7336 = add i64 %7335, -24
  %7337 = add i64 %7295, 14
  store i64 %7337, i64* %3, align 8
  %7338 = inttoptr i64 %7336 to i32*
  %7339 = load i32, i32* %7338, align 4
  %7340 = sext i32 %7339 to i64
  %7341 = mul nsw i64 %7340, 76
  store i64 %7341, i64* %RCX.i4050.pre-phi, align 8
  %7342 = lshr i64 %7341, 63
  %7343 = add i64 %7341, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7343, i64* %RAX.i1555, align 8
  %7344 = icmp ult i64 %7343, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7345 = icmp ult i64 %7343, %7341
  %7346 = or i1 %7344, %7345
  %7347 = zext i1 %7346 to i8
  store i8 %7347, i8* %19, align 1
  %7348 = trunc i64 %7343 to i32
  %7349 = and i32 %7348, 252
  %7350 = tail call i32 @llvm.ctpop.i32(i32 %7349)
  %7351 = trunc i32 %7350 to i8
  %7352 = and i8 %7351, 1
  %7353 = xor i8 %7352, 1
  store i8 %7353, i8* %26, align 1
  %7354 = xor i64 %7341, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7355 = xor i64 %7354, %7343
  %7356 = lshr i64 %7355, 4
  %7357 = trunc i64 %7356 to i8
  %7358 = and i8 %7357, 1
  store i8 %7358, i8* %31, align 1
  %7359 = icmp eq i64 %7343, 0
  %7360 = zext i1 %7359 to i8
  store i8 %7360, i8* %34, align 1
  %7361 = lshr i64 %7343, 63
  %7362 = trunc i64 %7361 to i8
  store i8 %7362, i8* %37, align 1
  %7363 = xor i64 %7361, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7364 = xor i64 %7361, %7342
  %7365 = add nuw nsw i64 %7363, %7364
  %7366 = icmp eq i64 %7365, 2
  %7367 = zext i1 %7366 to i8
  store i8 %7367, i8* %43, align 1
  %7368 = add i64 %7341, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %7369 = add i64 %7295, 28
  store i64 %7369, i64* %3, align 8
  %7370 = inttoptr i64 %7368 to i32*
  store i32 1, i32* %7370, align 4
  %.pre273 = load i64, i64* %3, align 8
  br label %block_.L_41d170

block_.L_41d170:                                  ; preds = %block_.L_41d154, %block_.L_41d133
  %7371 = phi i64 [ %.pre273, %block_.L_41d154 ], [ %7334, %block_.L_41d133 ]
  %7372 = add i64 %7371, 5
  store i64 %7372, i64* %3, align 8
  br label %block_.L_41d175

block_.L_41d175:                                  ; preds = %block_.L_41d170, %block_41d0c7
  %storemerge153 = phi i64 [ %7201, %block_41d0c7 ], [ %7372, %block_.L_41d170 ]
  %7373 = add i64 %storemerge153, 5
  store i64 %7373, i64* %3, align 8
  %.pre274.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_41d17a

block_.L_41d17a:                                  ; preds = %block_41d093, %block_.L_41d175
  %.pre274 = phi i64 [ %.pre274.pre, %block_.L_41d175 ], [ %6948, %block_41d093 ]
  %7374 = phi i64 [ %7373, %block_.L_41d175 ], [ %7055, %block_41d093 ]
  %7375 = add i64 %7374, 5
  store i64 %7375, i64* %3, align 8
  br label %block_.L_41d17f

block_.L_41d17f:                                  ; preds = %block_.L_41d17a, %block_41d069
  %7376 = phi i64 [ %.pre274, %block_.L_41d17a ], [ %6948, %block_41d069 ]
  %7377 = phi i64 [ %7375, %block_.L_41d17a ], [ %7003, %block_41d069 ]
  %7378 = add i64 %7376, -24
  %7379 = add i64 %7377, 8
  store i64 %7379, i64* %3, align 8
  %7380 = inttoptr i64 %7378 to i32*
  %7381 = load i32, i32* %7380, align 4
  %7382 = add i32 %7381, 1
  %7383 = zext i32 %7382 to i64
  store i64 %7383, i64* %RAX.i1555, align 8
  %7384 = icmp eq i32 %7381, -1
  %7385 = icmp eq i32 %7382, 0
  %7386 = or i1 %7384, %7385
  %7387 = zext i1 %7386 to i8
  store i8 %7387, i8* %19, align 1
  %7388 = and i32 %7382, 255
  %7389 = tail call i32 @llvm.ctpop.i32(i32 %7388)
  %7390 = trunc i32 %7389 to i8
  %7391 = and i8 %7390, 1
  %7392 = xor i8 %7391, 1
  store i8 %7392, i8* %26, align 1
  %7393 = xor i32 %7382, %7381
  %7394 = lshr i32 %7393, 4
  %7395 = trunc i32 %7394 to i8
  %7396 = and i8 %7395, 1
  store i8 %7396, i8* %31, align 1
  %7397 = zext i1 %7385 to i8
  store i8 %7397, i8* %34, align 1
  %7398 = lshr i32 %7382, 31
  %7399 = trunc i32 %7398 to i8
  store i8 %7399, i8* %37, align 1
  %7400 = lshr i32 %7381, 31
  %7401 = xor i32 %7398, %7400
  %7402 = add nuw nsw i32 %7401, %7398
  %7403 = icmp eq i32 %7402, 2
  %7404 = zext i1 %7403 to i8
  store i8 %7404, i8* %43, align 1
  %7405 = add i64 %7377, 14
  store i64 %7405, i64* %3, align 8
  store i32 %7382, i32* %7380, align 4
  %7406 = load i64, i64* %3, align 8
  %7407 = add i64 %7406, -305
  store i64 %7407, i64* %3, align 8
  br label %block_.L_41d05c

block_.L_41d192:                                  ; preds = %block_.L_41d05c
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57b01d_type* @G__0x57b01d to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %7408 = add i64 %6977, add (i64 ptrtoint (%G_0xc5db5__rip__type* @G_0xc5db5__rip_ to i64), i64 17)
  %7409 = add i64 %6977, 25
  store i64 %7409, i64* %3, align 8
  %7410 = inttoptr i64 %7408 to i64*
  %7411 = load i64, i64* %7410, align 8
  store i64 %7411, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %7412 = add i64 %6977, 389694
  %7413 = add i64 %6977, 30
  %7414 = load i64, i64* %6, align 8
  %7415 = add i64 %7414, -8
  %7416 = inttoptr i64 %7415 to i64*
  store i64 %7413, i64* %7416, align 8
  store i64 %7415, i64* %6, align 8
  store i64 %7412, i64* %3, align 8
  %call2_41d1ab = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %7412, %struct.Memory* %call2_41d048)
  %7417 = load i64, i64* %RBP.i, align 8
  %7418 = add i64 %7417, -24
  %7419 = load i64, i64* %3, align 8
  %7420 = add i64 %7419, 7
  store i64 %7420, i64* %3, align 8
  %7421 = inttoptr i64 %7418 to i32*
  store i32 21, i32* %7421, align 4
  %7422 = load i64, i64* %RBP.i, align 8
  %7423 = add i64 %7422, -1008
  %7424 = load i64, i64* %3, align 8
  %7425 = add i64 %7424, 8
  store i64 %7425, i64* %3, align 8
  %7426 = load i64, i64* %93, align 1
  %7427 = inttoptr i64 %7423 to i64*
  store i64 %7426, i64* %7427, align 8
  %.pre231 = load i64, i64* %3, align 8
  br label %block_.L_41d1bf

block_.L_41d1bf:                                  ; preds = %block_.L_41d229, %block_.L_41d192
  %7428 = phi i64 [ %.pre231, %block_.L_41d192 ], [ %7627, %block_.L_41d229 ]
  %MEMORY.65 = phi %struct.Memory* [ %call2_41d1ab, %block_.L_41d192 ], [ %MEMORY.66, %block_.L_41d229 ]
  %7429 = load i64, i64* %RBP.i, align 8
  %7430 = add i64 %7429, -24
  %7431 = add i64 %7428, 7
  store i64 %7431, i64* %3, align 8
  %7432 = inttoptr i64 %7430 to i32*
  %7433 = load i32, i32* %7432, align 4
  %7434 = add i32 %7433, -400
  %7435 = icmp ult i32 %7433, 400
  %7436 = zext i1 %7435 to i8
  store i8 %7436, i8* %19, align 1
  %7437 = and i32 %7434, 255
  %7438 = tail call i32 @llvm.ctpop.i32(i32 %7437)
  %7439 = trunc i32 %7438 to i8
  %7440 = and i8 %7439, 1
  %7441 = xor i8 %7440, 1
  store i8 %7441, i8* %26, align 1
  %7442 = xor i32 %7433, 16
  %7443 = xor i32 %7442, %7434
  %7444 = lshr i32 %7443, 4
  %7445 = trunc i32 %7444 to i8
  %7446 = and i8 %7445, 1
  store i8 %7446, i8* %31, align 1
  %7447 = icmp eq i32 %7434, 0
  %7448 = zext i1 %7447 to i8
  store i8 %7448, i8* %34, align 1
  %7449 = lshr i32 %7434, 31
  %7450 = trunc i32 %7449 to i8
  store i8 %7450, i8* %37, align 1
  %7451 = lshr i32 %7433, 31
  %7452 = xor i32 %7449, %7451
  %7453 = add nuw nsw i32 %7452, %7451
  %7454 = icmp eq i32 %7453, 2
  %7455 = zext i1 %7454 to i8
  store i8 %7455, i8* %43, align 1
  %7456 = icmp ne i8 %7450, 0
  %7457 = xor i1 %7456, %7454
  %.v333 = select i1 %7457, i64 13, i64 125
  %7458 = add i64 %7428, %.v333
  store i64 %7458, i64* %3, align 8
  br i1 %7457, label %block_41d1cc, label %block_.L_41d23c

block_41d1cc:                                     ; preds = %block_.L_41d1bf
  %7459 = add i64 %7458, 4
  store i64 %7459, i64* %3, align 8
  %7460 = load i32, i32* %7432, align 4
  %7461 = sext i32 %7460 to i64
  store i64 %7461, i64* %RAX.i1555, align 8
  %7462 = add nsw i64 %7461, 12099168
  %7463 = add i64 %7458, 12
  store i64 %7463, i64* %3, align 8
  %7464 = inttoptr i64 %7462 to i8*
  %7465 = load i8, i8* %7464, align 1
  %7466 = zext i8 %7465 to i64
  store i64 %7466, i64* %RCX.i4050.pre-phi, align 8
  %7467 = zext i8 %7465 to i32
  %7468 = add nsw i32 %7467, -3
  %7469 = icmp ult i8 %7465, 3
  %7470 = zext i1 %7469 to i8
  store i8 %7470, i8* %19, align 1
  %7471 = and i32 %7468, 255
  %7472 = tail call i32 @llvm.ctpop.i32(i32 %7471)
  %7473 = trunc i32 %7472 to i8
  %7474 = and i8 %7473, 1
  %7475 = xor i8 %7474, 1
  store i8 %7475, i8* %26, align 1
  %7476 = xor i32 %7468, %7467
  %7477 = lshr i32 %7476, 4
  %7478 = trunc i32 %7477 to i8
  %7479 = and i8 %7478, 1
  store i8 %7479, i8* %31, align 1
  %7480 = icmp eq i32 %7468, 0
  %7481 = zext i1 %7480 to i8
  store i8 %7481, i8* %34, align 1
  %7482 = lshr i32 %7468, 31
  %7483 = trunc i32 %7482 to i8
  store i8 %7483, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v392 = select i1 %7480, i64 93, i64 21
  %7484 = add i64 %7458, %.v392
  store i64 %7484, i64* %3, align 8
  br i1 %7480, label %block_.L_41d229, label %block_41d1e1

block_41d1e1:                                     ; preds = %block_41d1cc
  store i64 76, i64* %RAX.i1555, align 8
  store i64 76, i64* %RDX.i4244, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i4050.pre-phi, align 8
  %7485 = add i64 %7484, 21
  store i64 %7485, i64* %3, align 8
  %7486 = load i32, i32* %7432, align 4
  %7487 = sext i32 %7486 to i64
  %7488 = mul nsw i64 %7487, 76
  store i64 %7488, i64* %RSI.i4246, align 8
  %7489 = lshr i64 %7488, 63
  %7490 = add i64 %7488, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7490, i64* %RDI.i4254, align 8
  %7491 = icmp ult i64 %7490, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7492 = icmp ult i64 %7490, %7488
  %7493 = or i1 %7491, %7492
  %7494 = zext i1 %7493 to i8
  store i8 %7494, i8* %19, align 1
  %7495 = trunc i64 %7490 to i32
  %7496 = and i32 %7495, 252
  %7497 = tail call i32 @llvm.ctpop.i32(i32 %7496)
  %7498 = trunc i32 %7497 to i8
  %7499 = and i8 %7498, 1
  %7500 = xor i8 %7499, 1
  store i8 %7500, i8* %26, align 1
  %7501 = xor i64 %7488, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7502 = xor i64 %7501, %7490
  %7503 = lshr i64 %7502, 4
  %7504 = trunc i64 %7503 to i8
  %7505 = and i8 %7504, 1
  store i8 %7505, i8* %31, align 1
  %7506 = icmp eq i64 %7490, 0
  %7507 = zext i1 %7506 to i8
  store i8 %7507, i8* %34, align 1
  %7508 = lshr i64 %7490, 63
  %7509 = trunc i64 %7508 to i8
  store i8 %7509, i8* %37, align 1
  %7510 = xor i64 %7508, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7511 = xor i64 %7508, %7489
  %7512 = add nuw nsw i64 %7510, %7511
  %7513 = icmp eq i64 %7512, 2
  %7514 = zext i1 %7513 to i8
  store i8 %7514, i8* %43, align 1
  %7515 = add i64 %7429, -128
  %7516 = add i64 %7484, 35
  store i64 %7516, i64* %3, align 8
  %7517 = inttoptr i64 %7515 to i64*
  store i64 %7490, i64* %7517, align 8
  %7518 = load i64, i64* %RBP.i, align 8
  %7519 = add i64 %7518, -24
  %7520 = load i64, i64* %3, align 8
  %7521 = add i64 %7520, 4
  store i64 %7521, i64* %3, align 8
  %7522 = inttoptr i64 %7519 to i32*
  %7523 = load i32, i32* %7522, align 4
  %7524 = sext i32 %7523 to i64
  %7525 = mul nsw i64 %7524, 76
  store i64 %7525, i64* %RSI.i4246, align 8
  %7526 = lshr i64 %7525, 63
  %7527 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %7528 = add i64 %7525, %7527
  store i64 %7528, i64* %RDI.i4254, align 8
  %7529 = icmp ult i64 %7528, %7527
  %7530 = icmp ult i64 %7528, %7525
  %7531 = or i1 %7529, %7530
  %7532 = zext i1 %7531 to i8
  store i8 %7532, i8* %19, align 1
  %7533 = trunc i64 %7528 to i32
  %7534 = and i32 %7533, 255
  %7535 = tail call i32 @llvm.ctpop.i32(i32 %7534)
  %7536 = trunc i32 %7535 to i8
  %7537 = and i8 %7536, 1
  %7538 = xor i8 %7537, 1
  store i8 %7538, i8* %26, align 1
  %7539 = xor i64 %7525, %7527
  %7540 = xor i64 %7539, %7528
  %7541 = lshr i64 %7540, 4
  %7542 = trunc i64 %7541 to i8
  %7543 = and i8 %7542, 1
  store i8 %7543, i8* %31, align 1
  %7544 = icmp eq i64 %7528, 0
  %7545 = zext i1 %7544 to i8
  store i8 %7545, i8* %34, align 1
  %7546 = lshr i64 %7528, 63
  %7547 = trunc i64 %7546 to i8
  store i8 %7547, i8* %37, align 1
  %7548 = lshr i64 %7527, 63
  %7549 = xor i64 %7546, %7548
  %7550 = xor i64 %7546, %7526
  %7551 = add nuw nsw i64 %7549, %7550
  %7552 = icmp eq i64 %7551, 2
  %7553 = zext i1 %7552 to i8
  store i8 %7553, i8* %43, align 1
  %7554 = add i64 %7518, -128
  %7555 = add i64 %7520, 18
  store i64 %7555, i64* %3, align 8
  %7556 = inttoptr i64 %7554 to i64*
  %7557 = load i64, i64* %7556, align 8
  store i64 %7557, i64* %RSI.i4246, align 8
  %7558 = add i64 %7557, 8
  %7559 = add i64 %7520, 22
  store i64 %7559, i64* %3, align 8
  %7560 = inttoptr i64 %7558 to i32*
  %7561 = load i32, i32* %7560, align 4
  %7562 = sext i32 %7561 to i64
  %7563 = mul nsw i64 %7562, 76
  %7564 = lshr i64 %7563, 63
  %7565 = add i64 %7563, %7527
  store i64 %7565, i64* %RCX.i4050.pre-phi, align 8
  %7566 = icmp ult i64 %7565, %7527
  %7567 = icmp ult i64 %7565, %7563
  %7568 = or i1 %7566, %7567
  %7569 = zext i1 %7568 to i8
  store i8 %7569, i8* %19, align 1
  %7570 = trunc i64 %7565 to i32
  %7571 = and i32 %7570, 255
  %7572 = tail call i32 @llvm.ctpop.i32(i32 %7571)
  %7573 = trunc i32 %7572 to i8
  %7574 = and i8 %7573, 1
  %7575 = xor i8 %7574, 1
  store i8 %7575, i8* %26, align 1
  %7576 = xor i64 %7563, %7527
  %7577 = xor i64 %7576, %7565
  %7578 = lshr i64 %7577, 4
  %7579 = trunc i64 %7578 to i8
  %7580 = and i8 %7579, 1
  store i8 %7580, i8* %31, align 1
  %7581 = icmp eq i64 %7565, 0
  %7582 = zext i1 %7581 to i8
  store i8 %7582, i8* %34, align 1
  %7583 = lshr i64 %7565, 63
  %7584 = trunc i64 %7583 to i8
  store i8 %7584, i8* %37, align 1
  %7585 = xor i64 %7583, %7548
  %7586 = xor i64 %7583, %7564
  %7587 = add nuw nsw i64 %7585, %7586
  %7588 = icmp eq i64 %7587, 2
  %7589 = zext i1 %7588 to i8
  store i8 %7589, i8* %43, align 1
  store i64 %7565, i64* %RSI.i4246, align 8
  %7590 = add i64 %7520, -114964
  %7591 = add i64 %7520, 37
  %7592 = load i64, i64* %6, align 8
  %7593 = add i64 %7592, -8
  %7594 = inttoptr i64 %7593 to i64*
  store i64 %7591, i64* %7594, align 8
  store i64 %7593, i64* %6, align 8
  store i64 %7590, i64* %3, align 8
  %7595 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %MEMORY.65)
  %.pre270 = load i64, i64* %3, align 8
  %.pre271 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41d229

block_.L_41d229:                                  ; preds = %block_41d1e1, %block_41d1cc
  %7596 = phi i64 [ %7429, %block_41d1cc ], [ %.pre271, %block_41d1e1 ]
  %7597 = phi i64 [ %7484, %block_41d1cc ], [ %.pre270, %block_41d1e1 ]
  %MEMORY.66 = phi %struct.Memory* [ %MEMORY.65, %block_41d1cc ], [ %7595, %block_41d1e1 ]
  %7598 = add i64 %7596, -24
  %7599 = add i64 %7597, 8
  store i64 %7599, i64* %3, align 8
  %7600 = inttoptr i64 %7598 to i32*
  %7601 = load i32, i32* %7600, align 4
  %7602 = add i32 %7601, 1
  %7603 = zext i32 %7602 to i64
  store i64 %7603, i64* %RAX.i1555, align 8
  %7604 = icmp eq i32 %7601, -1
  %7605 = icmp eq i32 %7602, 0
  %7606 = or i1 %7604, %7605
  %7607 = zext i1 %7606 to i8
  store i8 %7607, i8* %19, align 1
  %7608 = and i32 %7602, 255
  %7609 = tail call i32 @llvm.ctpop.i32(i32 %7608)
  %7610 = trunc i32 %7609 to i8
  %7611 = and i8 %7610, 1
  %7612 = xor i8 %7611, 1
  store i8 %7612, i8* %26, align 1
  %7613 = xor i32 %7602, %7601
  %7614 = lshr i32 %7613, 4
  %7615 = trunc i32 %7614 to i8
  %7616 = and i8 %7615, 1
  store i8 %7616, i8* %31, align 1
  %7617 = zext i1 %7605 to i8
  store i8 %7617, i8* %34, align 1
  %7618 = lshr i32 %7602, 31
  %7619 = trunc i32 %7618 to i8
  store i8 %7619, i8* %37, align 1
  %7620 = lshr i32 %7601, 31
  %7621 = xor i32 %7618, %7620
  %7622 = add nuw nsw i32 %7621, %7618
  %7623 = icmp eq i32 %7622, 2
  %7624 = zext i1 %7623 to i8
  store i8 %7624, i8* %43, align 1
  %7625 = add i64 %7597, 14
  store i64 %7625, i64* %3, align 8
  store i32 %7602, i32* %7600, align 4
  %7626 = load i64, i64* %3, align 8
  %7627 = add i64 %7626, -120
  store i64 %7627, i64* %3, align 8
  br label %block_.L_41d1bf

block_.L_41d23c:                                  ; preds = %block_.L_41d1bf
  %7628 = add i64 %7458, -59404
  %7629 = add i64 %7458, 5
  %7630 = load i64, i64* %6, align 8
  %7631 = add i64 %7630, -8
  %7632 = inttoptr i64 %7631 to i64*
  store i64 %7629, i64* %7632, align 8
  store i64 %7631, i64* %6, align 8
  store i64 %7628, i64* %3, align 8
  %call2_41d23c = tail call %struct.Memory* @sub_40ea30.get_last_move(%struct.State* nonnull %0, i64 %7628, %struct.Memory* %MEMORY.65)
  %7633 = load i64, i64* %RBP.i, align 8
  %7634 = add i64 %7633, -36
  %7635 = load i32, i32* %EAX.i4253, align 4
  %7636 = load i64, i64* %3, align 8
  %7637 = add i64 %7636, 3
  store i64 %7637, i64* %3, align 8
  %7638 = inttoptr i64 %7634 to i32*
  store i32 %7635, i32* %7638, align 4
  %7639 = load i64, i64* %RBP.i, align 8
  %7640 = add i64 %7639, -36
  %7641 = load i64, i64* %3, align 8
  %7642 = add i64 %7641, 4
  store i64 %7642, i64* %3, align 8
  %7643 = inttoptr i64 %7640 to i32*
  %7644 = load i32, i32* %7643, align 4
  store i8 0, i8* %19, align 1
  %7645 = and i32 %7644, 255
  %7646 = tail call i32 @llvm.ctpop.i32(i32 %7645)
  %7647 = trunc i32 %7646 to i8
  %7648 = and i8 %7647, 1
  %7649 = xor i8 %7648, 1
  store i8 %7649, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7650 = icmp eq i32 %7644, 0
  %7651 = zext i1 %7650 to i8
  store i8 %7651, i8* %34, align 1
  %7652 = lshr i32 %7644, 31
  %7653 = trunc i32 %7652 to i8
  store i8 %7653, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v334 = select i1 %7650, i64 117, i64 10
  %7654 = add i64 %7641, %.v334
  store i64 %7654, i64* %3, align 8
  br i1 %7650, label %block_.L_41d2b9, label %block_41d24e

block_41d24e:                                     ; preds = %block_.L_41d23c
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %7655 = add i64 %7654, 14
  store i64 %7655, i64* %3, align 8
  %7656 = load i32, i32* %7643, align 4
  %7657 = sext i32 %7656 to i64
  %7658 = mul nsw i64 %7657, 76
  store i64 %7658, i64* %RCX.i4050.pre-phi, align 8
  %7659 = lshr i64 %7658, 63
  %7660 = add i64 %7658, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7660, i64* %RAX.i1555, align 8
  %7661 = icmp ult i64 %7660, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7662 = icmp ult i64 %7660, %7658
  %7663 = or i1 %7661, %7662
  %7664 = zext i1 %7663 to i8
  store i8 %7664, i8* %19, align 1
  %7665 = trunc i64 %7660 to i32
  %7666 = and i32 %7665, 252
  %7667 = tail call i32 @llvm.ctpop.i32(i32 %7666)
  %7668 = trunc i32 %7667 to i8
  %7669 = and i8 %7668, 1
  %7670 = xor i8 %7669, 1
  store i8 %7670, i8* %26, align 1
  %7671 = xor i64 %7658, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7672 = xor i64 %7671, %7660
  %7673 = lshr i64 %7672, 4
  %7674 = trunc i64 %7673 to i8
  %7675 = and i8 %7674, 1
  store i8 %7675, i8* %31, align 1
  %7676 = icmp eq i64 %7660, 0
  %7677 = zext i1 %7676 to i8
  store i8 %7677, i8* %34, align 1
  %7678 = lshr i64 %7660, 63
  %7679 = trunc i64 %7678 to i8
  store i8 %7679, i8* %37, align 1
  %7680 = xor i64 %7678, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7681 = xor i64 %7678, %7659
  %7682 = add nuw nsw i64 %7680, %7681
  %7683 = icmp eq i64 %7682, 2
  %7684 = zext i1 %7683 to i8
  store i8 %7684, i8* %43, align 1
  %7685 = add i64 %7658, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %7686 = add i64 %7654, 25
  store i64 %7686, i64* %3, align 8
  %7687 = inttoptr i64 %7685 to i32*
  %7688 = load i32, i32* %7687, align 4
  store i8 0, i8* %19, align 1
  %7689 = and i32 %7688, 255
  %7690 = tail call i32 @llvm.ctpop.i32(i32 %7689)
  %7691 = trunc i32 %7690 to i8
  %7692 = and i8 %7691, 1
  %7693 = xor i8 %7692, 1
  store i8 %7693, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7694 = icmp eq i32 %7688, 0
  %7695 = zext i1 %7694 to i8
  store i8 %7695, i8* %34, align 1
  %7696 = lshr i32 %7688, 31
  %7697 = trunc i32 %7696 to i8
  store i8 %7697, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v335 = select i1 %7694, i64 31, i64 107
  %7698 = add i64 %7654, %.v335
  store i64 %7698, i64* %3, align 8
  br i1 %7694, label %block_41d26d, label %block_.L_41d2b9

block_41d26d:                                     ; preds = %block_41d24e
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %7699 = add i64 %7698, 14
  store i64 %7699, i64* %3, align 8
  %7700 = load i32, i32* %7643, align 4
  %7701 = sext i32 %7700 to i64
  %7702 = mul nsw i64 %7701, 76
  store i64 %7702, i64* %RCX.i4050.pre-phi, align 8
  %7703 = lshr i64 %7702, 63
  %7704 = add i64 %7702, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7704, i64* %RAX.i1555, align 8
  %7705 = icmp ult i64 %7704, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7706 = icmp ult i64 %7704, %7702
  %7707 = or i1 %7705, %7706
  %7708 = zext i1 %7707 to i8
  store i8 %7708, i8* %19, align 1
  %7709 = trunc i64 %7704 to i32
  %7710 = and i32 %7709, 252
  %7711 = tail call i32 @llvm.ctpop.i32(i32 %7710)
  %7712 = trunc i32 %7711 to i8
  %7713 = and i8 %7712, 1
  %7714 = xor i8 %7713, 1
  store i8 %7714, i8* %26, align 1
  %7715 = xor i64 %7702, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7716 = xor i64 %7715, %7704
  %7717 = lshr i64 %7716, 4
  %7718 = trunc i64 %7717 to i8
  %7719 = and i8 %7718, 1
  store i8 %7719, i8* %31, align 1
  %7720 = icmp eq i64 %7704, 0
  %7721 = zext i1 %7720 to i8
  store i8 %7721, i8* %34, align 1
  %7722 = lshr i64 %7704, 63
  %7723 = trunc i64 %7722 to i8
  store i8 %7723, i8* %37, align 1
  %7724 = xor i64 %7722, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7725 = xor i64 %7722, %7703
  %7726 = add nuw nsw i64 %7724, %7725
  %7727 = icmp eq i64 %7726, 2
  %7728 = zext i1 %7727 to i8
  store i8 %7728, i8* %43, align 1
  %7729 = add i64 %7702, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 8)
  %7730 = add i64 %7698, 24
  store i64 %7730, i64* %3, align 8
  %7731 = inttoptr i64 %7729 to i32*
  %7732 = load i32, i32* %7731, align 4
  %7733 = zext i32 %7732 to i64
  store i64 %7733, i64* %RDX.i4244, align 8
  store i32 %7732, i32* bitcast (%G_0xab0ed0_type* @G_0xab0ed0 to i32*), align 8
  %7734 = add i64 %7639, -20
  %7735 = add i64 %7698, 35
  store i64 %7735, i64* %3, align 8
  %7736 = inttoptr i64 %7734 to i32*
  %7737 = load i32, i32* %7736, align 4
  store i8 0, i8* %19, align 1
  %7738 = and i32 %7737, 255
  %7739 = tail call i32 @llvm.ctpop.i32(i32 %7738)
  %7740 = trunc i32 %7739 to i8
  %7741 = and i8 %7740, 1
  %7742 = xor i8 %7741, 1
  store i8 %7742, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7743 = icmp eq i32 %7737, 0
  %7744 = zext i1 %7743 to i8
  store i8 %7744, i8* %34, align 1
  %7745 = lshr i32 %7737, 31
  %7746 = trunc i32 %7745 to i8
  store i8 %7746, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v391 = select i1 %7743, i64 71, i64 41
  %7747 = add i64 %7698, %.v391
  store i64 %7747, i64* %3, align 8
  br i1 %7743, label %block_.L_41d2b4, label %block_41d296

block_41d296:                                     ; preds = %block_41d26d
  store i64 ptrtoint (%G__0x57b02e_type* @G__0x57b02e to i64), i64* %RDI.i4254, align 8
  store i64 %7733, i64* %RSI.i4246, align 8
  store i8 0, i8* %AL.i3758, align 1
  %7748 = add i64 %7747, 215834
  %7749 = add i64 %7747, 24
  %7750 = load i64, i64* %6, align 8
  %7751 = add i64 %7750, -8
  %7752 = inttoptr i64 %7751 to i64*
  store i64 %7749, i64* %7752, align 8
  store i64 %7751, i64* %6, align 8
  store i64 %7748, i64* %3, align 8
  %call2_41d2a9 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %7748, %struct.Memory* %call2_41d23c)
  %7753 = load i64, i64* %RBP.i, align 8
  %7754 = add i64 %7753, -1012
  %7755 = load i32, i32* %EAX.i4253, align 4
  %7756 = load i64, i64* %3, align 8
  %7757 = add i64 %7756, 6
  store i64 %7757, i64* %3, align 8
  %7758 = inttoptr i64 %7754 to i32*
  store i32 %7755, i32* %7758, align 4
  %.pre232 = load i64, i64* %3, align 8
  br label %block_.L_41d2b4

block_.L_41d2b4:                                  ; preds = %block_41d296, %block_41d26d
  %7759 = phi i64 [ %7747, %block_41d26d ], [ %.pre232, %block_41d296 ]
  %MEMORY.67 = phi %struct.Memory* [ %call2_41d23c, %block_41d26d ], [ %call2_41d2a9, %block_41d296 ]
  %7760 = add i64 %7759, 16
  store i64 %7760, i64* %3, align 8
  %.pre233 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41d2c4

block_.L_41d2b9:                                  ; preds = %block_41d24e, %block_.L_41d23c
  %7761 = phi i64 [ %7698, %block_41d24e ], [ %7654, %block_.L_41d23c ]
  %7762 = add i64 %7761, 11
  store i64 %7762, i64* %3, align 8
  store i32 0, i32* bitcast (%G_0xab0ed0_type* @G_0xab0ed0 to i32*), align 8
  br label %block_.L_41d2c4

block_.L_41d2c4:                                  ; preds = %block_.L_41d2b9, %block_.L_41d2b4
  %7763 = phi i64 [ %7762, %block_.L_41d2b9 ], [ %7760, %block_.L_41d2b4 ]
  %7764 = phi i64 [ %7639, %block_.L_41d2b9 ], [ %.pre233, %block_.L_41d2b4 ]
  %MEMORY.69 = phi %struct.Memory* [ %call2_41d23c, %block_.L_41d2b9 ], [ %MEMORY.67, %block_.L_41d2b4 ]
  %7765 = add i64 %7764, -24
  %7766 = add i64 %7763, 7
  store i64 %7766, i64* %3, align 8
  %7767 = inttoptr i64 %7765 to i32*
  store i32 21, i32* %7767, align 4
  %R10.i1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11.i1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %.pre234 = load i64, i64* %3, align 8
  br label %block_.L_41d2cb

block_.L_41d2cb:                                  ; preds = %block_.L_41d6db, %block_.L_41d2c4
  %7768 = phi i64 [ %.pre234, %block_.L_41d2c4 ], [ %9084, %block_.L_41d6db ]
  %MEMORY.70 = phi %struct.Memory* [ %MEMORY.69, %block_.L_41d2c4 ], [ %MEMORY.80, %block_.L_41d6db ]
  %7769 = load i64, i64* %RBP.i, align 8
  %7770 = add i64 %7769, -24
  %7771 = add i64 %7768, 7
  store i64 %7771, i64* %3, align 8
  %7772 = inttoptr i64 %7770 to i32*
  %7773 = load i32, i32* %7772, align 4
  %7774 = add i32 %7773, -400
  %7775 = icmp ult i32 %7773, 400
  %7776 = zext i1 %7775 to i8
  store i8 %7776, i8* %19, align 1
  %7777 = and i32 %7774, 255
  %7778 = tail call i32 @llvm.ctpop.i32(i32 %7777)
  %7779 = trunc i32 %7778 to i8
  %7780 = and i8 %7779, 1
  %7781 = xor i8 %7780, 1
  store i8 %7781, i8* %26, align 1
  %7782 = xor i32 %7773, 16
  %7783 = xor i32 %7782, %7774
  %7784 = lshr i32 %7783, 4
  %7785 = trunc i32 %7784 to i8
  %7786 = and i8 %7785, 1
  store i8 %7786, i8* %31, align 1
  %7787 = icmp eq i32 %7774, 0
  %7788 = zext i1 %7787 to i8
  store i8 %7788, i8* %34, align 1
  %7789 = lshr i32 %7774, 31
  %7790 = trunc i32 %7789 to i8
  store i8 %7790, i8* %37, align 1
  %7791 = lshr i32 %7773, 31
  %7792 = xor i32 %7789, %7791
  %7793 = add nuw nsw i32 %7792, %7791
  %7794 = icmp eq i32 %7793, 2
  %7795 = zext i1 %7794 to i8
  store i8 %7795, i8* %43, align 1
  %7796 = icmp ne i8 %7790, 0
  %7797 = xor i1 %7796, %7794
  %.v336 = select i1 %7797, i64 13, i64 1059
  %7798 = add i64 %7768, %.v336
  store i64 %7798, i64* %3, align 8
  br i1 %7797, label %block_41d2d8, label %block_.L_41d6ee

block_41d2d8:                                     ; preds = %block_.L_41d2cb
  %7799 = add i64 %7798, 4
  store i64 %7799, i64* %3, align 8
  %7800 = load i32, i32* %7772, align 4
  %7801 = sext i32 %7800 to i64
  store i64 %7801, i64* %RAX.i1555, align 8
  %7802 = add nsw i64 %7801, 12099168
  %7803 = add i64 %7798, 12
  store i64 %7803, i64* %3, align 8
  %7804 = inttoptr i64 %7802 to i8*
  %7805 = load i8, i8* %7804, align 1
  %7806 = zext i8 %7805 to i64
  store i64 %7806, i64* %RCX.i4050.pre-phi, align 8
  %7807 = zext i8 %7805 to i32
  %7808 = add nsw i32 %7807, -3
  %7809 = icmp ult i8 %7805, 3
  %7810 = zext i1 %7809 to i8
  store i8 %7810, i8* %19, align 1
  %7811 = and i32 %7808, 255
  %7812 = tail call i32 @llvm.ctpop.i32(i32 %7811)
  %7813 = trunc i32 %7812 to i8
  %7814 = and i8 %7813, 1
  %7815 = xor i8 %7814, 1
  store i8 %7815, i8* %26, align 1
  %7816 = xor i32 %7808, %7807
  %7817 = lshr i32 %7816, 4
  %7818 = trunc i32 %7817 to i8
  %7819 = and i8 %7818, 1
  store i8 %7819, i8* %31, align 1
  %7820 = icmp eq i32 %7808, 0
  %7821 = zext i1 %7820 to i8
  store i8 %7821, i8* %34, align 1
  %7822 = lshr i32 %7808, 31
  %7823 = trunc i32 %7822 to i8
  store i8 %7823, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v377 = select i1 %7820, i64 1027, i64 21
  %7824 = add i64 %7798, %.v377
  store i64 %7824, i64* %3, align 8
  br i1 %7820, label %block_.L_41d6db, label %block_41d2ed

block_41d2ed:                                     ; preds = %block_41d2d8
  %7825 = add i64 %7824, 4
  store i64 %7825, i64* %3, align 8
  %7826 = load i32, i32* %7772, align 4
  %7827 = sext i32 %7826 to i64
  store i64 %7827, i64* %RAX.i1555, align 8
  %7828 = add nsw i64 %7827, 12099168
  %7829 = add i64 %7824, 12
  store i64 %7829, i64* %3, align 8
  %7830 = inttoptr i64 %7828 to i8*
  %7831 = load i8, i8* %7830, align 1
  %7832 = zext i8 %7831 to i64
  store i64 %7832, i64* %RCX.i4050.pre-phi, align 8
  %7833 = zext i8 %7831 to i32
  store i8 0, i8* %19, align 1
  %7834 = tail call i32 @llvm.ctpop.i32(i32 %7833)
  %7835 = trunc i32 %7834 to i8
  %7836 = and i8 %7835, 1
  %7837 = xor i8 %7836, 1
  store i8 %7837, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %7838 = icmp eq i8 %7831, 0
  %7839 = zext i1 %7838 to i8
  store i8 %7839, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v378 = select i1 %7838, i64 1006, i64 21
  %7840 = add i64 %7824, %.v378
  store i64 %7840, i64* %3, align 8
  br i1 %7838, label %block_.L_41d6db, label %block_41d302

block_41d302:                                     ; preds = %block_41d2ed
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %7841 = add i64 %7840, 14
  store i64 %7841, i64* %3, align 8
  %7842 = load i32, i32* %7772, align 4
  %7843 = sext i32 %7842 to i64
  %7844 = mul nsw i64 %7843, 76
  store i64 %7844, i64* %RCX.i4050.pre-phi, align 8
  %7845 = lshr i64 %7844, 63
  %7846 = add i64 %7844, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7846, i64* %RAX.i1555, align 8
  %7847 = icmp ult i64 %7846, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7848 = icmp ult i64 %7846, %7844
  %7849 = or i1 %7847, %7848
  %7850 = zext i1 %7849 to i8
  store i8 %7850, i8* %19, align 1
  %7851 = trunc i64 %7846 to i32
  %7852 = and i32 %7851, 252
  %7853 = tail call i32 @llvm.ctpop.i32(i32 %7852)
  %7854 = trunc i32 %7853 to i8
  %7855 = and i8 %7854, 1
  %7856 = xor i8 %7855, 1
  store i8 %7856, i8* %26, align 1
  %7857 = xor i64 %7844, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7858 = xor i64 %7857, %7846
  %7859 = lshr i64 %7858, 4
  %7860 = trunc i64 %7859 to i8
  %7861 = and i8 %7860, 1
  store i8 %7861, i8* %31, align 1
  %7862 = icmp eq i64 %7846, 0
  %7863 = zext i1 %7862 to i8
  store i8 %7863, i8* %34, align 1
  %7864 = lshr i64 %7846, 63
  %7865 = trunc i64 %7864 to i8
  store i8 %7865, i8* %37, align 1
  %7866 = xor i64 %7864, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7867 = xor i64 %7864, %7845
  %7868 = add nuw nsw i64 %7866, %7867
  %7869 = icmp eq i64 %7868, 2
  %7870 = zext i1 %7869 to i8
  store i8 %7870, i8* %43, align 1
  %7871 = add i64 %7844, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 8)
  %7872 = add i64 %7840, 24
  store i64 %7872, i64* %3, align 8
  %7873 = inttoptr i64 %7871 to i32*
  %7874 = load i32, i32* %7873, align 4
  %7875 = zext i32 %7874 to i64
  store i64 %7875, i64* %RDX.i4244, align 8
  %7876 = add i64 %7840, 27
  store i64 %7876, i64* %3, align 8
  %7877 = load i32, i32* %7772, align 4
  %7878 = sub i32 %7874, %7877
  %7879 = icmp ult i32 %7874, %7877
  %7880 = zext i1 %7879 to i8
  store i8 %7880, i8* %19, align 1
  %7881 = and i32 %7878, 255
  %7882 = tail call i32 @llvm.ctpop.i32(i32 %7881)
  %7883 = trunc i32 %7882 to i8
  %7884 = and i8 %7883, 1
  %7885 = xor i8 %7884, 1
  store i8 %7885, i8* %26, align 1
  %7886 = xor i32 %7877, %7874
  %7887 = xor i32 %7886, %7878
  %7888 = lshr i32 %7887, 4
  %7889 = trunc i32 %7888 to i8
  %7890 = and i8 %7889, 1
  store i8 %7890, i8* %31, align 1
  %7891 = icmp eq i32 %7878, 0
  %7892 = zext i1 %7891 to i8
  store i8 %7892, i8* %34, align 1
  %7893 = lshr i32 %7878, 31
  %7894 = trunc i32 %7893 to i8
  store i8 %7894, i8* %37, align 1
  %7895 = lshr i32 %7874, 31
  %7896 = lshr i32 %7877, 31
  %7897 = xor i32 %7896, %7895
  %7898 = xor i32 %7893, %7895
  %7899 = add nuw nsw i32 %7898, %7897
  %7900 = icmp eq i32 %7899, 2
  %7901 = zext i1 %7900 to i8
  store i8 %7901, i8* %43, align 1
  %.v379 = select i1 %7891, i64 33, i64 985
  %7902 = add i64 %7840, %.v379
  store i64 %7902, i64* %3, align 8
  br i1 %7891, label %block_41d323, label %block_.L_41d6db

block_41d323:                                     ; preds = %block_41d302
  %7903 = load i64, i64* %RBP.i, align 8
  %7904 = add i64 %7903, -136
  store i64 %7904, i64* %RDI.i4254, align 8
  store i64 0, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i64 0, i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i64 0, i64* %RCX.i4050.pre-phi, align 8
  store i64 0, i64* %R8.i3778, align 8
  %7905 = add i64 %7902, 114813
  %7906 = add i64 %7902, 23
  %7907 = load i64, i64* %6, align 8
  %7908 = add i64 %7907, -8
  %7909 = inttoptr i64 %7908 to i64*
  store i64 %7906, i64* %7909, align 8
  store i64 %7908, i64* %6, align 8
  store i64 %7905, i64* %3, align 8
  %call2_41d335 = tail call %struct.Memory* @sub_4393a0.set_eyevalue(%struct.State* nonnull %0, i64 %7905, %struct.Memory* %MEMORY.70)
  %7910 = load i64, i64* %3, align 8
  store i64 1, i64* %RDI.i4254, align 8
  %7911 = load i64, i64* %RBP.i, align 8
  %7912 = add i64 %7911, -136
  store i64 %7912, i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %R9.i3505, align 8
  %7913 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %7913, i64* %R10.i1425, align 8
  %7914 = add i64 %7911, -24
  %7915 = add i64 %7910, 36
  store i64 %7915, i64* %3, align 8
  %7916 = inttoptr i64 %7914 to i32*
  %7917 = load i32, i32* %7916, align 4
  %7918 = sext i32 %7917 to i64
  %7919 = mul nsw i64 %7918, 76
  store i64 %7919, i64* %R11.i1423, align 8
  %7920 = lshr i64 %7919, 63
  %7921 = add i64 %7919, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %7921, i64* %RBX.i1304, align 8
  %7922 = icmp ult i64 %7921, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7923 = icmp ult i64 %7921, %7919
  %7924 = or i1 %7922, %7923
  %7925 = zext i1 %7924 to i8
  store i8 %7925, i8* %19, align 1
  %7926 = trunc i64 %7921 to i32
  %7927 = and i32 %7926, 252
  %7928 = tail call i32 @llvm.ctpop.i32(i32 %7927)
  %7929 = trunc i32 %7928 to i8
  %7930 = and i8 %7929, 1
  %7931 = xor i8 %7930, 1
  store i8 %7931, i8* %26, align 1
  %7932 = xor i64 %7919, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %7933 = xor i64 %7932, %7921
  %7934 = lshr i64 %7933, 4
  %7935 = trunc i64 %7934 to i8
  %7936 = and i8 %7935, 1
  store i8 %7936, i8* %31, align 1
  %7937 = icmp eq i64 %7921, 0
  %7938 = zext i1 %7937 to i8
  store i8 %7938, i8* %34, align 1
  %7939 = lshr i64 %7921, 63
  %7940 = trunc i64 %7939 to i8
  store i8 %7940, i8* %37, align 1
  %7941 = xor i64 %7939, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %7942 = xor i64 %7939, %7920
  %7943 = add nuw nsw i64 %7941, %7942
  %7944 = icmp eq i64 %7943, 2
  %7945 = zext i1 %7944 to i8
  store i8 %7945, i8* %43, align 1
  %7946 = add i64 %7919, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %7947 = add i64 %7910, 50
  store i64 %7947, i64* %3, align 8
  %7948 = inttoptr i64 %7946 to i32*
  %7949 = load i32, i32* %7948, align 4
  %7950 = sext i32 %7949 to i64
  %7951 = mul nsw i64 %7950, 104
  store i64 %7951, i64* %R11.i1423, align 8
  %7952 = lshr i64 %7951, 63
  %7953 = load i64, i64* %R10.i1425, align 8
  %7954 = add i64 %7951, %7953
  store i64 %7954, i64* %R10.i1425, align 8
  %7955 = icmp ult i64 %7954, %7953
  %7956 = icmp ult i64 %7954, %7951
  %7957 = or i1 %7955, %7956
  %7958 = zext i1 %7957 to i8
  store i8 %7958, i8* %19, align 1
  %7959 = trunc i64 %7954 to i32
  %7960 = and i32 %7959, 255
  %7961 = tail call i32 @llvm.ctpop.i32(i32 %7960)
  %7962 = trunc i32 %7961 to i8
  %7963 = and i8 %7962, 1
  %7964 = xor i8 %7963, 1
  store i8 %7964, i8* %26, align 1
  %7965 = xor i64 %7951, %7953
  %7966 = xor i64 %7965, %7954
  %7967 = lshr i64 %7966, 4
  %7968 = trunc i64 %7967 to i8
  %7969 = and i8 %7968, 1
  store i8 %7969, i8* %31, align 1
  %7970 = icmp eq i64 %7954, 0
  %7971 = zext i1 %7970 to i8
  store i8 %7971, i8* %34, align 1
  %7972 = lshr i64 %7954, 63
  %7973 = trunc i64 %7972 to i8
  store i8 %7973, i8* %37, align 1
  %7974 = lshr i64 %7953, 63
  %7975 = xor i64 %7972, %7974
  %7976 = xor i64 %7972, %7952
  %7977 = add nuw nsw i64 %7975, %7976
  %7978 = icmp eq i64 %7977, 2
  %7979 = zext i1 %7978 to i8
  store i8 %7979, i8* %43, align 1
  %7980 = add i64 %7954, 56
  %7981 = add i64 %7910, 63
  store i64 %7981, i64* %3, align 8
  %7982 = inttoptr i64 %7980 to i32*
  %7983 = load i32, i32* %7982, align 4
  store i32 %7983, i32* %4325, align 1
  store float 0.000000e+00, float* %4327, align 1
  store float 0.000000e+00, float* %4328, align 1
  store float 0.000000e+00, float* %4330, align 1
  %7984 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %7984, i64* %R10.i1425, align 8
  %7985 = load i64, i64* %RBP.i, align 8
  %7986 = add i64 %7985, -24
  %7987 = add i64 %7910, 75
  store i64 %7987, i64* %3, align 8
  %7988 = inttoptr i64 %7986 to i32*
  %7989 = load i32, i32* %7988, align 4
  %7990 = sext i32 %7989 to i64
  %7991 = mul nsw i64 %7990, 76
  store i64 %7991, i64* %R11.i1423, align 8
  %7992 = lshr i64 %7991, 63
  %7993 = load i64, i64* %R9.i3505, align 8
  %7994 = add i64 %7991, %7993
  store i64 %7994, i64* %R9.i3505, align 8
  %7995 = icmp ult i64 %7994, %7993
  %7996 = icmp ult i64 %7994, %7991
  %7997 = or i1 %7995, %7996
  %7998 = zext i1 %7997 to i8
  store i8 %7998, i8* %19, align 1
  %7999 = trunc i64 %7994 to i32
  %8000 = and i32 %7999, 255
  %8001 = tail call i32 @llvm.ctpop.i32(i32 %8000)
  %8002 = trunc i32 %8001 to i8
  %8003 = and i8 %8002, 1
  %8004 = xor i8 %8003, 1
  store i8 %8004, i8* %26, align 1
  %8005 = xor i64 %7991, %7993
  %8006 = xor i64 %8005, %7994
  %8007 = lshr i64 %8006, 4
  %8008 = trunc i64 %8007 to i8
  %8009 = and i8 %8008, 1
  store i8 %8009, i8* %31, align 1
  %8010 = icmp eq i64 %7994, 0
  %8011 = zext i1 %8010 to i8
  store i8 %8011, i8* %34, align 1
  %8012 = lshr i64 %7994, 63
  %8013 = trunc i64 %8012 to i8
  store i8 %8013, i8* %37, align 1
  %8014 = lshr i64 %7993, 63
  %8015 = xor i64 %8012, %8014
  %8016 = xor i64 %8012, %7992
  %8017 = add nuw nsw i64 %8015, %8016
  %8018 = icmp eq i64 %8017, 2
  %8019 = zext i1 %8018 to i8
  store i8 %8019, i8* %43, align 1
  %8020 = add i64 %7994, 4
  %8021 = add i64 %7910, 86
  store i64 %8021, i64* %3, align 8
  %8022 = inttoptr i64 %8020 to i32*
  %8023 = load i32, i32* %8022, align 4
  %8024 = sext i32 %8023 to i64
  %8025 = mul nsw i64 %8024, 104
  store i64 %8025, i64* %R9.i3505, align 8
  %8026 = lshr i64 %8025, 63
  %8027 = load i64, i64* %R10.i1425, align 8
  %8028 = add i64 %8025, %8027
  store i64 %8028, i64* %R10.i1425, align 8
  %8029 = icmp ult i64 %8028, %8027
  %8030 = icmp ult i64 %8028, %8025
  %8031 = or i1 %8029, %8030
  %8032 = zext i1 %8031 to i8
  store i8 %8032, i8* %19, align 1
  %8033 = trunc i64 %8028 to i32
  %8034 = and i32 %8033, 255
  %8035 = tail call i32 @llvm.ctpop.i32(i32 %8034)
  %8036 = trunc i32 %8035 to i8
  %8037 = and i8 %8036, 1
  %8038 = xor i8 %8037, 1
  store i8 %8038, i8* %26, align 1
  %8039 = xor i64 %8025, %8027
  %8040 = xor i64 %8039, %8028
  %8041 = lshr i64 %8040, 4
  %8042 = trunc i64 %8041 to i8
  %8043 = and i8 %8042, 1
  store i8 %8043, i8* %31, align 1
  %8044 = icmp eq i64 %8028, 0
  %8045 = zext i1 %8044 to i8
  store i8 %8045, i8* %34, align 1
  %8046 = lshr i64 %8028, 63
  %8047 = trunc i64 %8046 to i8
  store i8 %8047, i8* %37, align 1
  %8048 = lshr i64 %8027, 63
  %8049 = xor i64 %8046, %8048
  %8050 = xor i64 %8046, %8026
  %8051 = add nuw nsw i64 %8049, %8050
  %8052 = icmp eq i64 %8051, 2
  %8053 = zext i1 %8052 to i8
  store i8 %8053, i8* %43, align 1
  %8054 = add i64 %8028, 72
  %8055 = add i64 %7910, 97
  store i64 %8055, i64* %3, align 8
  %8056 = inttoptr i64 %8054 to i32*
  %8057 = load i32, i32* %8056, align 4
  %8058 = add i32 %8057, -10
  %8059 = zext i32 %8058 to i64
  store i64 %8059, i64* %RAX.i1555, align 8
  %8060 = icmp ult i32 %8057, 10
  %8061 = zext i1 %8060 to i8
  store i8 %8061, i8* %19, align 1
  %8062 = and i32 %8058, 255
  %8063 = tail call i32 @llvm.ctpop.i32(i32 %8062)
  %8064 = trunc i32 %8063 to i8
  %8065 = and i8 %8064, 1
  %8066 = xor i8 %8065, 1
  store i8 %8066, i8* %26, align 1
  %8067 = xor i32 %8058, %8057
  %8068 = lshr i32 %8067, 4
  %8069 = trunc i32 %8068 to i8
  %8070 = and i8 %8069, 1
  store i8 %8070, i8* %31, align 1
  %8071 = icmp eq i32 %8058, 0
  %8072 = zext i1 %8071 to i8
  store i8 %8072, i8* %34, align 1
  %8073 = lshr i32 %8058, 31
  %8074 = trunc i32 %8073 to i8
  store i8 %8074, i8* %37, align 1
  %8075 = lshr i32 %8057, 31
  %8076 = xor i32 %8073, %8075
  %8077 = add nuw nsw i32 %8076, %8075
  %8078 = icmp eq i32 %8077, 2
  %8079 = zext i1 %8078 to i8
  store i8 %8079, i8* %43, align 1
  %8080 = load <2 x i32>, <2 x i32>* %4943, align 1
  %8081 = load <2 x i32>, <2 x i32>* %4945, align 1
  %8082 = sitofp i32 %8058 to float
  store float %8082, float* %4946, align 1
  %8083 = extractelement <2 x i32> %8080, i32 1
  store i32 %8083, i32* %4948, align 1
  %8084 = extractelement <2 x i32> %8081, i32 0
  store i32 %8084, i32* %4949, align 1
  %8085 = extractelement <2 x i32> %8081, i32 1
  store i32 %8085, i32* %4951, align 1
  %8086 = add i64 %7910, 9750
  %8087 = add i64 %7910, 109
  %8088 = load i64, i64* %6, align 8
  %8089 = add i64 %8088, -8
  %8090 = inttoptr i64 %8089 to i64*
  store i64 %8087, i64* %8090, align 8
  store i64 %8089, i64* %6, align 8
  store i64 %8086, i64* %3, align 8
  %call2_41d3a2 = tail call %struct.Memory* @sub_41f950.crude_dragon_weakness(%struct.State* nonnull %0, i64 %8086, %struct.Memory* %MEMORY.70)
  %8091 = load i64, i64* %3, align 8
  %8092 = add i64 %8091, ptrtoint (%G_0xc5bb9__rip__type* @G_0xc5bb9__rip_ to i64)
  %8093 = add i64 %8091, 8
  store i64 %8093, i64* %3, align 8
  %8094 = inttoptr i64 %8092 to i64*
  %8095 = load i64, i64* %8094, align 8
  store i64 %8095, i64* %4953, align 1
  store double 0.000000e+00, double* %4954, align 1
  %8096 = add i64 %8091, add (i64 ptrtoint (%G_0xc5bb9__rip__type* @G_0xc5bb9__rip_ to i64), i64 8)
  %8097 = add i64 %8091, 16
  store i64 %8097, i64* %3, align 8
  %8098 = inttoptr i64 %8096 to i64*
  %8099 = load i64, i64* %8098, align 8
  store i64 %8099, i64* %4957, align 1
  store double 0.000000e+00, double* %4959, align 1
  %8100 = add i64 %8091, add (i64 ptrtoint (%G_0xc5bb9__rip__type* @G_0xc5bb9__rip_ to i64), i64 16)
  %8101 = add i64 %8091, 24
  store i64 %8101, i64* %3, align 8
  %8102 = inttoptr i64 %8100 to i64*
  %8103 = load i64, i64* %8102, align 8
  store i64 %8103, i64* %4962, align 1
  store double 0.000000e+00, double* %4964, align 1
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RSI.i4246, align 8
  %8104 = load <2 x float>, <2 x float>* %4331, align 1
  %8105 = extractelement <2 x float> %8104, i32 0
  %8106 = fpext float %8105 to double
  store double %8106, double* %92, align 1
  %8107 = load i64, i64* %RBP.i, align 8
  %8108 = add i64 %8107, -24
  %8109 = add i64 %8091, 42
  store i64 %8109, i64* %3, align 8
  %8110 = inttoptr i64 %8108 to i32*
  %8111 = load i32, i32* %8110, align 4
  %8112 = sext i32 %8111 to i64
  %8113 = mul nsw i64 %8112, 76
  store i64 %8113, i64* %R9.i3505, align 8
  %8114 = lshr i64 %8113, 63
  %8115 = add i64 %8113, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %8115, i64* %RSI.i4246, align 8
  %8116 = icmp ult i64 %8115, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8117 = icmp ult i64 %8115, %8113
  %8118 = or i1 %8116, %8117
  %8119 = zext i1 %8118 to i8
  store i8 %8119, i8* %19, align 1
  %8120 = trunc i64 %8115 to i32
  %8121 = and i32 %8120, 252
  %8122 = tail call i32 @llvm.ctpop.i32(i32 %8121)
  %8123 = trunc i32 %8122 to i8
  %8124 = and i8 %8123, 1
  %8125 = xor i8 %8124, 1
  store i8 %8125, i8* %26, align 1
  %8126 = xor i64 %8113, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8127 = xor i64 %8126, %8115
  %8128 = lshr i64 %8127, 4
  %8129 = trunc i64 %8128 to i8
  %8130 = and i8 %8129, 1
  store i8 %8130, i8* %31, align 1
  %8131 = icmp eq i64 %8115, 0
  %8132 = zext i1 %8131 to i8
  store i8 %8132, i8* %34, align 1
  %8133 = lshr i64 %8115, 63
  %8134 = trunc i64 %8133 to i8
  store i8 %8134, i8* %37, align 1
  %8135 = xor i64 %8133, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %8136 = xor i64 %8133, %8114
  %8137 = add nuw nsw i64 %8135, %8136
  %8138 = icmp eq i64 %8137, 2
  %8139 = zext i1 %8138 to i8
  store i8 %8139, i8* %43, align 1
  %8140 = add i64 %8113, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 16)
  %8141 = add i64 %8091, 54
  store i64 %8141, i64* %3, align 8
  %8142 = inttoptr i64 %8140 to float*
  %8143 = load float, float* %8142, align 4
  %8144 = fpext float %8143 to double
  store double %8144, double* %4966, align 1
  %8145 = bitcast i64 %8103 to double
  %8146 = fmul double %8144, %8145
  store double %8146, double* %4961, align 1
  store i64 0, i64* %4963, align 1
  %8147 = load double, double* %4956, align 1
  %8148 = fsub double %8147, %8146
  store double %8148, double* %4956, align 1
  %8149 = add i64 %8091, 66
  store i64 %8149, i64* %3, align 8
  %8150 = load double, double* %4952, align 1
  %8151 = fcmp uno double %8148, %8150
  %8152 = bitcast double %8106 to i64
  br i1 %8151, label %8153, label %8163

; <label>:8153:                                   ; preds = %block_41d323
  %8154 = fadd double %8148, %8150
  %8155 = bitcast double %8154 to i64
  %8156 = and i64 %8155, 9221120237041090560
  %8157 = icmp eq i64 %8156, 9218868437227405312
  %8158 = and i64 %8155, 2251799813685247
  %8159 = icmp ne i64 %8158, 0
  %8160 = and i1 %8157, %8159
  br i1 %8160, label %8161, label %8169

; <label>:8161:                                   ; preds = %8153
  %8162 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8149, %struct.Memory* %MEMORY.70)
  %.pre262 = load i64, i64* %RBP.i, align 8
  %.pre263 = load i64, i64* %3, align 8
  %.pre264 = load i64, i64* %93, align 1
  br label %routine_ucomisd__xmm1___xmm2.exit

; <label>:8163:                                   ; preds = %block_41d323
  %8164 = fcmp ogt double %8148, %8150
  br i1 %8164, label %8169, label %8165

; <label>:8165:                                   ; preds = %8163
  %8166 = fcmp olt double %8148, %8150
  br i1 %8166, label %8169, label %8167

; <label>:8167:                                   ; preds = %8165
  %8168 = fcmp oeq double %8148, %8150
  br i1 %8168, label %8169, label %8173

; <label>:8169:                                   ; preds = %8167, %8165, %8163, %8153
  %8170 = phi i8 [ 0, %8163 ], [ 0, %8165 ], [ 1, %8167 ], [ 1, %8153 ]
  %8171 = phi i8 [ 0, %8163 ], [ 0, %8165 ], [ 0, %8167 ], [ 1, %8153 ]
  %8172 = phi i8 [ 0, %8163 ], [ 1, %8165 ], [ 0, %8167 ], [ 1, %8153 ]
  store i8 %8170, i8* %34, align 1
  store i8 %8171, i8* %26, align 1
  store i8 %8172, i8* %19, align 1
  br label %8173

; <label>:8173:                                   ; preds = %8169, %8167
  store i8 0, i8* %43, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %31, align 1
  br label %routine_ucomisd__xmm1___xmm2.exit

routine_ucomisd__xmm1___xmm2.exit:                ; preds = %8173, %8161
  %8174 = phi i64 [ %.pre264, %8161 ], [ %8152, %8173 ]
  %8175 = phi i64 [ %.pre263, %8161 ], [ %8149, %8173 ]
  %8176 = phi i64 [ %.pre262, %8161 ], [ %8107, %8173 ]
  %8177 = phi %struct.Memory* [ %8162, %8161 ], [ %MEMORY.70, %8173 ]
  %8178 = add i64 %8176, -1024
  %8179 = add i64 %8175, 8
  store i64 %8179, i64* %3, align 8
  %8180 = inttoptr i64 %8178 to i64*
  store i64 %8174, i64* %8180, align 8
  %8181 = load i64, i64* %3, align 8
  %8182 = load i8, i8* %19, align 1
  %8183 = load i8, i8* %34, align 1
  %8184 = or i8 %8183, %8182
  %8185 = icmp ne i8 %8184, 0
  %.v497 = select i1 %8185, i64 69, i64 6
  %8186 = add i64 %8181, %.v497
  store i64 %8186, i64* %3, align 8
  br i1 %8185, label %block_.L_41d436, label %block_41d3f7

block_41d3f7:                                     ; preds = %routine_ucomisd__xmm1___xmm2.exit
  %8187 = add i64 %8186, ptrtoint (%G_0xc5b71__rip__type* @G_0xc5b71__rip_ to i64)
  %8188 = add i64 %8186, 8
  store i64 %8188, i64* %3, align 8
  %8189 = inttoptr i64 %8187 to i64*
  %8190 = load i64, i64* %8189, align 8
  store i64 %8190, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %8191 = add i64 %8186, add (i64 ptrtoint (%G_0xc5b71__rip__type* @G_0xc5b71__rip_ to i64), i64 8)
  %8192 = add i64 %8186, 16
  store i64 %8192, i64* %3, align 8
  %8193 = inttoptr i64 %8191 to i64*
  %8194 = load i64, i64* %8193, align 8
  store i64 %8194, i64* %4953, align 1
  store double 0.000000e+00, double* %4954, align 1
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %8195 = load i64, i64* %RBP.i, align 8
  %8196 = add i64 %8195, -24
  %8197 = add i64 %8186, 30
  store i64 %8197, i64* %3, align 8
  %8198 = inttoptr i64 %8196 to i32*
  %8199 = load i32, i32* %8198, align 4
  %8200 = sext i32 %8199 to i64
  %8201 = mul nsw i64 %8200, 76
  store i64 %8201, i64* %RCX.i4050.pre-phi, align 8
  %8202 = lshr i64 %8201, 63
  %8203 = add i64 %8201, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %8203, i64* %RAX.i1555, align 8
  %8204 = icmp ult i64 %8203, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8205 = icmp ult i64 %8203, %8201
  %8206 = or i1 %8204, %8205
  %8207 = zext i1 %8206 to i8
  store i8 %8207, i8* %19, align 1
  %8208 = trunc i64 %8203 to i32
  %8209 = and i32 %8208, 252
  %8210 = tail call i32 @llvm.ctpop.i32(i32 %8209)
  %8211 = trunc i32 %8210 to i8
  %8212 = and i8 %8211, 1
  %8213 = xor i8 %8212, 1
  store i8 %8213, i8* %26, align 1
  %8214 = xor i64 %8201, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8215 = xor i64 %8214, %8203
  %8216 = lshr i64 %8215, 4
  %8217 = trunc i64 %8216 to i8
  %8218 = and i8 %8217, 1
  store i8 %8218, i8* %31, align 1
  %8219 = icmp eq i64 %8203, 0
  %8220 = zext i1 %8219 to i8
  store i8 %8220, i8* %34, align 1
  %8221 = lshr i64 %8203, 63
  %8222 = trunc i64 %8221 to i8
  store i8 %8222, i8* %37, align 1
  %8223 = xor i64 %8221, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %8224 = xor i64 %8221, %8202
  %8225 = add nuw nsw i64 %8223, %8224
  %8226 = icmp eq i64 %8225, 2
  %8227 = zext i1 %8226 to i8
  store i8 %8227, i8* %43, align 1
  %8228 = add i64 %8201, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 16)
  %8229 = add i64 %8186, 42
  store i64 %8229, i64* %3, align 8
  %8230 = inttoptr i64 %8228 to float*
  %8231 = load float, float* %8230, align 4
  %8232 = fpext float %8231 to double
  store double %8232, double* %4956, align 1
  %8233 = bitcast i64 %8194 to double
  %8234 = fmul double %8232, %8233
  store double %8234, double* %4952, align 1
  store i64 0, i64* %4944, align 1
  %8235 = bitcast i64 %8190 to double
  %8236 = fsub double %8235, %8234
  store double %8236, double* %92, align 1
  store i64 0, i64* %94, align 1
  %8237 = add i64 %8195, -1032
  %8238 = add i64 %8186, 58
  store i64 %8238, i64* %3, align 8
  %8239 = inttoptr i64 %8237 to double*
  store double %8236, double* %8239, align 8
  %8240 = load i64, i64* %3, align 8
  %8241 = add i64 %8240, 26
  br label %block_.L_41d44b

block_.L_41d436:                                  ; preds = %routine_ucomisd__xmm1___xmm2.exit
  %8242 = add i64 %8186, ptrtoint (%G_0xc5b2a__rip__type* @G_0xc5b2a__rip_ to i64)
  %8243 = add i64 %8186, 8
  store i64 %8243, i64* %3, align 8
  %8244 = inttoptr i64 %8242 to i64*
  %8245 = load i64, i64* %8244, align 8
  store i64 %8245, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %8246 = load i64, i64* %RBP.i, align 8
  %8247 = add i64 %8246, -1032
  %8248 = add i64 %8186, 16
  store i64 %8248, i64* %3, align 8
  %8249 = inttoptr i64 %8247 to i64*
  store i64 %8245, i64* %8249, align 8
  %8250 = load i64, i64* %3, align 8
  %8251 = add i64 %8250, 5
  store i64 %8251, i64* %3, align 8
  br label %block_.L_41d44b

block_.L_41d44b:                                  ; preds = %block_.L_41d436, %block_41d3f7
  %storemerge154 = phi i64 [ %8241, %block_41d3f7 ], [ %8251, %block_.L_41d436 ]
  %8252 = load i64, i64* %RBP.i, align 8
  %8253 = add i64 %8252, -1032
  %8254 = add i64 %storemerge154, 8
  store i64 %8254, i64* %3, align 8
  %8255 = inttoptr i64 %8253 to i64*
  %8256 = load i64, i64* %8255, align 8
  store i64 %8256, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %8257 = add i64 %storemerge154, add (i64 ptrtoint (%G_0xc5b25__rip__type* @G_0xc5b25__rip_ to i64), i64 8)
  %8258 = add i64 %storemerge154, 16
  store i64 %8258, i64* %3, align 8
  %8259 = inttoptr i64 %8257 to double*
  %8260 = load double, double* %8259, align 8
  %8261 = bitcast i64 %8256 to double
  %8262 = fadd double %8260, %8261
  store double %8262, double* %4952, align 1
  store i64 0, i64* %4944, align 1
  %8263 = add i64 %8252, -1024
  %8264 = add i64 %storemerge154, 28
  store i64 %8264, i64* %3, align 8
  %8265 = inttoptr i64 %8263 to i64*
  %8266 = load i64, i64* %8265, align 8
  store i64 %8266, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %8267 = add i64 %storemerge154, 32
  store i64 %8267, i64* %3, align 8
  %.cast156 = bitcast i64 %8266 to double
  %8268 = fcmp uno double %8262, %.cast156
  br i1 %8268, label %8269, label %8279

; <label>:8269:                                   ; preds = %block_.L_41d44b
  %8270 = fadd double %.cast156, %8262
  %8271 = bitcast double %8270 to i64
  %8272 = and i64 %8271, 9221120237041090560
  %8273 = icmp eq i64 %8272, 9218868437227405312
  %8274 = and i64 %8271, 2251799813685247
  %8275 = icmp ne i64 %8274, 0
  %8276 = and i1 %8273, %8275
  br i1 %8276, label %8277, label %8285

; <label>:8277:                                   ; preds = %8269
  %8278 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8267, %struct.Memory* %8177)
  %.pre265 = load i64, i64* %3, align 8
  %.pre266 = load i64, i64* %RBP.i, align 8
  br label %routine_ucomisd__xmm0___xmm1.exit

; <label>:8279:                                   ; preds = %block_.L_41d44b
  %8280 = fcmp ogt double %8262, %.cast156
  br i1 %8280, label %8285, label %8281

; <label>:8281:                                   ; preds = %8279
  %8282 = fcmp olt double %8262, %.cast156
  br i1 %8282, label %8285, label %8283

; <label>:8283:                                   ; preds = %8281
  %8284 = fcmp oeq double %8262, %.cast156
  br i1 %8284, label %8285, label %8289

; <label>:8285:                                   ; preds = %8283, %8281, %8279, %8269
  %8286 = phi i8 [ 0, %8279 ], [ 0, %8281 ], [ 1, %8283 ], [ 1, %8269 ]
  %8287 = phi i8 [ 0, %8279 ], [ 0, %8281 ], [ 0, %8283 ], [ 1, %8269 ]
  %8288 = phi i8 [ 0, %8279 ], [ 1, %8281 ], [ 0, %8283 ], [ 1, %8269 ]
  store i8 %8286, i8* %34, align 1
  store i8 %8287, i8* %26, align 1
  store i8 %8288, i8* %19, align 1
  br label %8289

; <label>:8289:                                   ; preds = %8285, %8283
  store i8 0, i8* %43, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %31, align 1
  br label %routine_ucomisd__xmm0___xmm1.exit

routine_ucomisd__xmm0___xmm1.exit:                ; preds = %8289, %8277
  %8290 = phi i64 [ %.pre266, %8277 ], [ %8252, %8289 ]
  %8291 = phi i64 [ %.pre265, %8277 ], [ %8267, %8289 ]
  %8292 = phi %struct.Memory* [ %8278, %8277 ], [ %8177, %8289 ]
  %8293 = load i8, i8* %19, align 1
  %8294 = load i8, i8* %34, align 1
  %8295 = or i8 %8294, %8293
  %8296 = icmp ne i8 %8295, 0
  %.v498 = select i1 %8296, i64 81, i64 6
  %8297 = add i64 %8291, %.v498
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %8298 = add i64 %8290, -24
  %8299 = add i64 %8297, 14
  store i64 %8299, i64* %3, align 8
  %8300 = inttoptr i64 %8298 to i32*
  %8301 = load i32, i32* %8300, align 4
  %8302 = sext i32 %8301 to i64
  %8303 = mul nsw i64 %8302, 76
  store i64 %8303, i64* %RCX.i4050.pre-phi, align 8
  %8304 = lshr i64 %8303, 63
  %8305 = add i64 %8297, 24
  store i64 %8305, i64* %3, align 8
  %8306 = add i64 %8303, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %8306, i64* %RDX.i4244, align 8
  %8307 = icmp ult i64 %8306, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8308 = icmp ult i64 %8306, %8303
  %8309 = or i1 %8307, %8308
  %8310 = zext i1 %8309 to i8
  store i8 %8310, i8* %19, align 1
  %8311 = trunc i64 %8306 to i32
  %8312 = and i32 %8311, 252
  %8313 = tail call i32 @llvm.ctpop.i32(i32 %8312)
  %8314 = trunc i32 %8313 to i8
  %8315 = and i8 %8314, 1
  %8316 = xor i8 %8315, 1
  store i8 %8316, i8* %26, align 1
  %8317 = xor i64 %8303, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8318 = xor i64 %8317, %8306
  %8319 = lshr i64 %8318, 4
  %8320 = trunc i64 %8319 to i8
  %8321 = and i8 %8320, 1
  store i8 %8321, i8* %31, align 1
  %8322 = icmp eq i64 %8306, 0
  %8323 = zext i1 %8322 to i8
  store i8 %8323, i8* %34, align 1
  %8324 = lshr i64 %8306, 63
  %8325 = trunc i64 %8324 to i8
  store i8 %8325, i8* %37, align 1
  %8326 = xor i64 %8324, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %8327 = xor i64 %8324, %8304
  %8328 = add nuw nsw i64 %8326, %8327
  %8329 = icmp eq i64 %8328, 2
  %8330 = zext i1 %8329 to i8
  store i8 %8330, i8* %43, align 1
  br i1 %8296, label %block_.L_41d4bc, label %block_41d471

block_41d471:                                     ; preds = %routine_ucomisd__xmm0___xmm1.exit
  %8331 = add i64 %8303, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 24)
  %8332 = add i64 %8297, 31
  store i64 %8332, i64* %3, align 8
  %8333 = inttoptr i64 %8331 to i32*
  store i32 4, i32* %8333, align 4
  %8334 = load i64, i64* %RBP.i, align 8
  %8335 = add i64 %8334, -24
  %8336 = load i64, i64* %3, align 8
  %8337 = add i64 %8336, 4
  store i64 %8337, i64* %3, align 8
  %8338 = inttoptr i64 %8335 to i32*
  %8339 = load i32, i32* %8338, align 4
  %8340 = sext i32 %8339 to i64
  %8341 = mul nsw i64 %8340, 76
  store i64 %8341, i64* %RCX.i4050.pre-phi, align 8
  %8342 = lshr i64 %8341, 63
  %8343 = load i64, i64* %RAX.i1555, align 8
  %8344 = add i64 %8341, %8343
  store i64 %8344, i64* %RDX.i4244, align 8
  %8345 = icmp ult i64 %8344, %8343
  %8346 = icmp ult i64 %8344, %8341
  %8347 = or i1 %8345, %8346
  %8348 = zext i1 %8347 to i8
  store i8 %8348, i8* %19, align 1
  %8349 = trunc i64 %8344 to i32
  %8350 = and i32 %8349, 255
  %8351 = tail call i32 @llvm.ctpop.i32(i32 %8350)
  %8352 = trunc i32 %8351 to i8
  %8353 = and i8 %8352, 1
  %8354 = xor i8 %8353, 1
  store i8 %8354, i8* %26, align 1
  %8355 = xor i64 %8341, %8343
  %8356 = xor i64 %8355, %8344
  %8357 = lshr i64 %8356, 4
  %8358 = trunc i64 %8357 to i8
  %8359 = and i8 %8358, 1
  store i8 %8359, i8* %31, align 1
  %8360 = icmp eq i64 %8344, 0
  %8361 = zext i1 %8360 to i8
  store i8 %8361, i8* %34, align 1
  %8362 = lshr i64 %8344, 63
  %8363 = trunc i64 %8362 to i8
  store i8 %8363, i8* %37, align 1
  %8364 = lshr i64 %8343, 63
  %8365 = xor i64 %8362, %8364
  %8366 = xor i64 %8362, %8342
  %8367 = add nuw nsw i64 %8365, %8366
  %8368 = icmp eq i64 %8367, 2
  %8369 = zext i1 %8368 to i8
  store i8 %8369, i8* %43, align 1
  %8370 = add i64 %8344, 44
  %8371 = add i64 %8336, 21
  store i64 %8371, i64* %3, align 8
  %8372 = inttoptr i64 %8370 to i32*
  store i32 0, i32* %8372, align 4
  %8373 = load i64, i64* %RBP.i, align 8
  %8374 = add i64 %8373, -24
  %8375 = load i64, i64* %3, align 8
  %8376 = add i64 %8375, 4
  store i64 %8376, i64* %3, align 8
  %8377 = inttoptr i64 %8374 to i32*
  %8378 = load i32, i32* %8377, align 4
  %8379 = sext i32 %8378 to i64
  %8380 = mul nsw i64 %8379, 76
  store i64 %8380, i64* %RCX.i4050.pre-phi, align 8
  %8381 = lshr i64 %8380, 63
  %8382 = load i64, i64* %RAX.i1555, align 8
  %8383 = add i64 %8380, %8382
  store i64 %8383, i64* %RAX.i1555, align 8
  %8384 = icmp ult i64 %8383, %8382
  %8385 = icmp ult i64 %8383, %8380
  %8386 = or i1 %8384, %8385
  %8387 = zext i1 %8386 to i8
  store i8 %8387, i8* %19, align 1
  %8388 = trunc i64 %8383 to i32
  %8389 = and i32 %8388, 255
  %8390 = tail call i32 @llvm.ctpop.i32(i32 %8389)
  %8391 = trunc i32 %8390 to i8
  %8392 = and i8 %8391, 1
  %8393 = xor i8 %8392, 1
  store i8 %8393, i8* %26, align 1
  %8394 = xor i64 %8380, %8382
  %8395 = xor i64 %8394, %8383
  %8396 = lshr i64 %8395, 4
  %8397 = trunc i64 %8396 to i8
  %8398 = and i8 %8397, 1
  store i8 %8398, i8* %31, align 1
  %8399 = icmp eq i64 %8383, 0
  %8400 = zext i1 %8399 to i8
  store i8 %8400, i8* %34, align 1
  %8401 = lshr i64 %8383, 63
  %8402 = trunc i64 %8401 to i8
  store i8 %8402, i8* %37, align 1
  %8403 = lshr i64 %8382, 63
  %8404 = xor i64 %8401, %8403
  %8405 = xor i64 %8401, %8381
  %8406 = add nuw nsw i64 %8404, %8405
  %8407 = icmp eq i64 %8406, 2
  %8408 = zext i1 %8407 to i8
  store i8 %8408, i8* %43, align 1
  %8409 = add i64 %8383, 60
  %8410 = add i64 %8375, 18
  store i64 %8410, i64* %3, align 8
  %8411 = inttoptr i64 %8409 to i32*
  store i32 0, i32* %8411, align 4
  %8412 = load i64, i64* %3, align 8
  %8413 = add i64 %8412, 543
  store i64 %8413, i64* %3, align 8
  br label %block_.L_41d6d6

block_.L_41d4bc:                                  ; preds = %routine_ucomisd__xmm0___xmm1.exit
  %8414 = add i64 %8303, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 36)
  %8415 = add i64 %8297, 27
  store i64 %8415, i64* %3, align 8
  %8416 = inttoptr i64 %8414 to i32*
  %8417 = load i32, i32* %8416, align 4
  %8418 = zext i32 %8417 to i64
  store i64 %8418, i64* %RSI.i4246, align 8
  %8419 = add i64 %8290, -140
  %8420 = add i64 %8297, 33
  store i64 %8420, i64* %3, align 8
  %8421 = inttoptr i64 %8419 to i32*
  store i32 %8417, i32* %8421, align 4
  %8422 = load i64, i64* %RBP.i, align 8
  %8423 = add i64 %8422, -24
  %8424 = load i64, i64* %3, align 8
  %8425 = add i64 %8424, 4
  store i64 %8425, i64* %3, align 8
  %8426 = inttoptr i64 %8423 to i32*
  %8427 = load i32, i32* %8426, align 4
  %8428 = sext i32 %8427 to i64
  %8429 = mul nsw i64 %8428, 76
  store i64 %8429, i64* %RCX.i4050.pre-phi, align 8
  %8430 = lshr i64 %8429, 63
  %8431 = load i64, i64* %RAX.i1555, align 8
  %8432 = add i64 %8429, %8431
  store i64 %8432, i64* %RAX.i1555, align 8
  %8433 = icmp ult i64 %8432, %8431
  %8434 = icmp ult i64 %8432, %8429
  %8435 = or i1 %8433, %8434
  %8436 = zext i1 %8435 to i8
  store i8 %8436, i8* %19, align 1
  %8437 = trunc i64 %8432 to i32
  %8438 = and i32 %8437, 255
  %8439 = tail call i32 @llvm.ctpop.i32(i32 %8438)
  %8440 = trunc i32 %8439 to i8
  %8441 = and i8 %8440, 1
  %8442 = xor i8 %8441, 1
  store i8 %8442, i8* %26, align 1
  %8443 = xor i64 %8429, %8431
  %8444 = xor i64 %8443, %8432
  %8445 = lshr i64 %8444, 4
  %8446 = trunc i64 %8445 to i8
  %8447 = and i8 %8446, 1
  store i8 %8447, i8* %31, align 1
  %8448 = icmp eq i64 %8432, 0
  %8449 = zext i1 %8448 to i8
  store i8 %8449, i8* %34, align 1
  %8450 = lshr i64 %8432, 63
  %8451 = trunc i64 %8450 to i8
  store i8 %8451, i8* %37, align 1
  %8452 = lshr i64 %8431, 63
  %8453 = xor i64 %8450, %8452
  %8454 = xor i64 %8450, %8430
  %8455 = add nuw nsw i64 %8453, %8454
  %8456 = icmp eq i64 %8455, 2
  %8457 = zext i1 %8456 to i8
  store i8 %8457, i8* %43, align 1
  %8458 = add i64 %8432, 52
  %8459 = add i64 %8424, 14
  store i64 %8459, i64* %3, align 8
  %8460 = inttoptr i64 %8458 to i32*
  %8461 = load i32, i32* %8460, align 4
  %8462 = zext i32 %8461 to i64
  store i64 %8462, i64* %RSI.i4246, align 8
  %8463 = add i64 %8422, -144
  %8464 = add i64 %8424, 20
  store i64 %8464, i64* %3, align 8
  %8465 = inttoptr i64 %8463 to i32*
  store i32 %8461, i32* %8465, align 4
  %8466 = load i64, i64* %3, align 8
  %8467 = load i32, i32* bitcast (%G_0x7ae448_type* @G_0x7ae448 to i32*), align 8
  %8468 = add i32 %8467, -8
  %8469 = icmp ult i32 %8467, 8
  %8470 = zext i1 %8469 to i8
  store i8 %8470, i8* %19, align 1
  %8471 = and i32 %8468, 255
  %8472 = tail call i32 @llvm.ctpop.i32(i32 %8471)
  %8473 = trunc i32 %8472 to i8
  %8474 = and i8 %8473, 1
  %8475 = xor i8 %8474, 1
  store i8 %8475, i8* %26, align 1
  %8476 = xor i32 %8468, %8467
  %8477 = lshr i32 %8476, 4
  %8478 = trunc i32 %8477 to i8
  %8479 = and i8 %8478, 1
  store i8 %8479, i8* %31, align 1
  %8480 = icmp eq i32 %8468, 0
  %8481 = zext i1 %8480 to i8
  store i8 %8481, i8* %34, align 1
  %8482 = lshr i32 %8468, 31
  %8483 = trunc i32 %8482 to i8
  store i8 %8483, i8* %37, align 1
  %8484 = lshr i32 %8467, 31
  %8485 = xor i32 %8482, %8484
  %8486 = add nuw nsw i32 %8485, %8484
  %8487 = icmp eq i32 %8486, 2
  %8488 = zext i1 %8487 to i8
  store i8 %8488, i8* %43, align 1
  %8489 = icmp ne i8 %8483, 0
  %8490 = xor i1 %8489, %8487
  %.v380 = select i1 %8490, i64 446, i64 14
  %8491 = add i64 %8466, %.v380
  store i64 %8491, i64* %3, align 8
  br i1 %8490, label %block_.L_41d6af, label %block_41d4ff

block_41d4ff:                                     ; preds = %block_.L_41d4bc
  %8492 = load i32, i32* bitcast (%G_0xab0fb4_type* @G_0xab0fb4 to i32*), align 8
  store i8 0, i8* %19, align 1
  %8493 = and i32 %8492, 255
  %8494 = tail call i32 @llvm.ctpop.i32(i32 %8493)
  %8495 = trunc i32 %8494 to i8
  %8496 = and i8 %8495, 1
  %8497 = xor i8 %8496, 1
  store i8 %8497, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8498 = icmp eq i32 %8492, 0
  %8499 = zext i1 %8498 to i8
  store i8 %8499, i8* %34, align 1
  %8500 = lshr i32 %8492, 31
  %8501 = trunc i32 %8500 to i8
  store i8 %8501, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v381 = select i1 %8498, i64 14, i64 432
  %8502 = add i64 %8491, %.v381
  store i64 %8502, i64* %3, align 8
  br i1 %8498, label %block_41d50d, label %block_.L_41d6af

block_41d50d:                                     ; preds = %block_41d4ff
  %8503 = load i32, i32* bitcast (%G_0xab0fc4_type* @G_0xab0fc4 to i32*), align 8
  store i8 0, i8* %19, align 1
  %8504 = and i32 %8503, 255
  %8505 = tail call i32 @llvm.ctpop.i32(i32 %8504)
  %8506 = trunc i32 %8505 to i8
  %8507 = and i8 %8506, 1
  %8508 = xor i8 %8507, 1
  store i8 %8508, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8509 = icmp eq i32 %8503, 0
  %8510 = zext i1 %8509 to i8
  store i8 %8510, i8* %34, align 1
  %8511 = lshr i32 %8503, 31
  %8512 = trunc i32 %8511 to i8
  store i8 %8512, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v382 = select i1 %8509, i64 14, i64 52
  %8513 = add i64 %8502, %.v382
  store i64 %8513, i64* %3, align 8
  br i1 %8509, label %block_41d51b, label %block_.L_41d541

block_41d51b:                                     ; preds = %block_41d50d
  %8514 = load i32, i32* bitcast (%G_0xab0ed0_type* @G_0xab0ed0 to i32*), align 8
  store i8 0, i8* %19, align 1
  %8515 = and i32 %8514, 255
  %8516 = tail call i32 @llvm.ctpop.i32(i32 %8515)
  %8517 = trunc i32 %8516 to i8
  %8518 = and i8 %8517, 1
  %8519 = xor i8 %8518, 1
  store i8 %8519, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8520 = icmp eq i32 %8514, 0
  %8521 = zext i1 %8520 to i8
  store i8 %8521, i8* %34, align 1
  %8522 = lshr i32 %8514, 31
  %8523 = trunc i32 %8522 to i8
  store i8 %8523, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v389 = select i1 %8520, i64 404, i64 14
  %8524 = add i64 %8513, %.v389
  store i64 %8524, i64* %3, align 8
  br i1 %8520, label %block_.L_41d6af, label %block_41d529

block_41d529:                                     ; preds = %block_41d51b
  %8525 = load i64, i64* %RBP.i, align 8
  %8526 = add i64 %8525, -24
  %8527 = add i64 %8524, 3
  store i64 %8527, i64* %3, align 8
  %8528 = inttoptr i64 %8526 to i32*
  %8529 = load i32, i32* %8528, align 4
  %8530 = zext i32 %8529 to i64
  store i64 %8530, i64* %RDI.i4254, align 8
  %8531 = zext i32 %8514 to i64
  store i64 %8531, i64* %RSI.i4246, align 8
  %8532 = add i64 %8524, 9991
  %8533 = add i64 %8524, 15
  %8534 = load i64, i64* %6, align 8
  %8535 = add i64 %8534, -8
  %8536 = inttoptr i64 %8535 to i64*
  store i64 %8533, i64* %8536, align 8
  store i64 %8535, i64* %6, align 8
  store i64 %8532, i64* %3, align 8
  %call2_41d533 = tail call %struct.Memory* @sub_41fc30.is_same_dragon(%struct.State* nonnull %0, i64 %8532, %struct.Memory* %8292)
  %8537 = load i32, i32* %EAX.i4253, align 4
  %8538 = load i64, i64* %3, align 8
  store i8 0, i8* %19, align 1
  %8539 = and i32 %8537, 255
  %8540 = tail call i32 @llvm.ctpop.i32(i32 %8539)
  %8541 = trunc i32 %8540 to i8
  %8542 = and i8 %8541, 1
  %8543 = xor i8 %8542, 1
  store i8 %8543, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8544 = icmp eq i32 %8537, 0
  %8545 = zext i1 %8544 to i8
  store i8 %8545, i8* %34, align 1
  %8546 = lshr i32 %8537, 31
  %8547 = trunc i32 %8546 to i8
  store i8 %8547, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v390 = select i1 %8544, i64 375, i64 9
  %8548 = add i64 %8538, %.v390
  store i64 %8548, i64* %3, align 8
  br i1 %8544, label %block_.L_41d6af, label %block_.L_41d541

block_.L_41d541:                                  ; preds = %block_41d50d, %block_41d529
  %8549 = phi i64 [ %8513, %block_41d50d ], [ %8548, %block_41d529 ]
  %MEMORY.72 = phi %struct.Memory* [ %8292, %block_41d50d ], [ %call2_41d533, %block_41d529 ]
  %8550 = load i64, i64* %RBP.i, align 8
  %8551 = add i64 %8550, -140
  %8552 = add i64 %8549, 7
  store i64 %8552, i64* %3, align 8
  %8553 = inttoptr i64 %8551 to i32*
  %8554 = load i32, i32* %8553, align 4
  store i8 0, i8* %19, align 1
  %8555 = and i32 %8554, 255
  %8556 = tail call i32 @llvm.ctpop.i32(i32 %8555)
  %8557 = trunc i32 %8556 to i8
  %8558 = and i8 %8557, 1
  %8559 = xor i8 %8558, 1
  store i8 %8559, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8560 = icmp eq i32 %8554, 0
  %8561 = zext i1 %8560 to i8
  store i8 %8561, i8* %34, align 1
  %8562 = lshr i32 %8554, 31
  %8563 = trunc i32 %8562 to i8
  store i8 %8563, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v383 = select i1 %8560, i64 200, i64 13
  %8564 = add i64 %8549, %.v383
  store i64 %8564, i64* %3, align 8
  br i1 %8560, label %block_.L_41d609, label %block_41d54e

block_41d54e:                                     ; preds = %block_.L_41d541
  %8565 = add i64 %8550, -144
  %8566 = add i64 %8564, 7
  store i64 %8566, i64* %3, align 8
  %8567 = inttoptr i64 %8565 to i32*
  %8568 = load i32, i32* %8567, align 4
  store i8 0, i8* %19, align 1
  %8569 = and i32 %8568, 255
  %8570 = tail call i32 @llvm.ctpop.i32(i32 %8569)
  %8571 = trunc i32 %8570 to i8
  %8572 = and i8 %8571, 1
  %8573 = xor i8 %8572, 1
  store i8 %8573, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8574 = icmp eq i32 %8568, 0
  %8575 = zext i1 %8574 to i8
  store i8 %8575, i8* %34, align 1
  %8576 = lshr i32 %8568, 31
  %8577 = trunc i32 %8576 to i8
  store i8 %8577, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v384 = select i1 %8574, i64 13, i64 187
  %8578 = add i64 %8564, %.v384
  store i64 %8578, i64* %3, align 8
  br i1 %8574, label %block_41d55b, label %block_.L_41d609

block_41d55b:                                     ; preds = %block_41d54e
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %8579 = add i64 %8550, -24
  %8580 = add i64 %8578, 14
  store i64 %8580, i64* %3, align 8
  %8581 = inttoptr i64 %8579 to i32*
  %8582 = load i32, i32* %8581, align 4
  %8583 = sext i32 %8582 to i64
  %8584 = mul nsw i64 %8583, 76
  store i64 %8584, i64* %RCX.i4050.pre-phi, align 8
  %8585 = lshr i64 %8584, 63
  %8586 = add i64 %8584, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %8586, i64* %RAX.i1555, align 8
  %8587 = icmp ult i64 %8586, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8588 = icmp ult i64 %8586, %8584
  %8589 = or i1 %8587, %8588
  %8590 = zext i1 %8589 to i8
  store i8 %8590, i8* %19, align 1
  %8591 = trunc i64 %8586 to i32
  %8592 = and i32 %8591, 252
  %8593 = tail call i32 @llvm.ctpop.i32(i32 %8592)
  %8594 = trunc i32 %8593 to i8
  %8595 = and i8 %8594, 1
  %8596 = xor i8 %8595, 1
  store i8 %8596, i8* %26, align 1
  %8597 = xor i64 %8584, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8598 = xor i64 %8597, %8586
  %8599 = lshr i64 %8598, 4
  %8600 = trunc i64 %8599 to i8
  %8601 = and i8 %8600, 1
  store i8 %8601, i8* %31, align 1
  %8602 = icmp eq i64 %8586, 0
  %8603 = zext i1 %8602 to i8
  store i8 %8603, i8* %34, align 1
  %8604 = lshr i64 %8586, 63
  %8605 = trunc i64 %8604 to i8
  store i8 %8605, i8* %37, align 1
  %8606 = xor i64 %8604, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %8607 = xor i64 %8604, %8585
  %8608 = add nuw nsw i64 %8606, %8607
  %8609 = icmp eq i64 %8608, 2
  %8610 = zext i1 %8609 to i8
  store i8 %8610, i8* %43, align 1
  %8611 = add i64 %8584, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 32)
  %8612 = add i64 %8578, 25
  store i64 %8612, i64* %3, align 8
  %8613 = inttoptr i64 %8611 to i32*
  %8614 = load i32, i32* %8613, align 4
  store i8 0, i8* %19, align 1
  %8615 = and i32 %8614, 255
  %8616 = tail call i32 @llvm.ctpop.i32(i32 %8615)
  %8617 = trunc i32 %8616 to i8
  %8618 = and i8 %8617, 1
  %8619 = xor i8 %8618, 1
  store i8 %8619, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8620 = icmp eq i32 %8614, 0
  %8621 = zext i1 %8620 to i8
  store i8 %8621, i8* %34, align 1
  %8622 = lshr i32 %8614, 31
  %8623 = trunc i32 %8622 to i8
  store i8 %8623, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v387 = select i1 %8620, i64 174, i64 31
  %8624 = add i64 %8578, %.v387
  store i64 %8624, i64* %3, align 8
  br i1 %8620, label %block_.L_41d609, label %block_41d57a

block_41d57a:                                     ; preds = %block_41d55b
  %8625 = add i64 %8550, -148
  store i64 %8625, i64* %RSI.i4246, align 8
  %8626 = add i64 %8550, -152
  store i64 %8626, i64* %RDX.i4244, align 8
  %8627 = add i64 %8624, 17
  store i64 %8627, i64* %3, align 8
  %8628 = load i32, i32* %8581, align 4
  %8629 = zext i32 %8628 to i64
  store i64 %8629, i64* %RDI.i4254, align 8
  %8630 = add i64 %8624, 186422
  %8631 = add i64 %8624, 22
  %8632 = load i64, i64* %6, align 8
  %8633 = add i64 %8632, -8
  %8634 = inttoptr i64 %8633 to i64*
  store i64 %8631, i64* %8634, align 8
  store i64 %8633, i64* %6, align 8
  store i64 %8630, i64* %3, align 8
  %call2_41d58b = tail call %struct.Memory* @sub_44adb0.owl_threaten_defense(%struct.State* nonnull %0, i64 %8630, %struct.Memory* %MEMORY.72)
  %8635 = load i32, i32* %EAX.i4253, align 4
  %8636 = load i64, i64* %3, align 8
  store i8 0, i8* %19, align 1
  %8637 = and i32 %8635, 255
  %8638 = tail call i32 @llvm.ctpop.i32(i32 %8637)
  %8639 = trunc i32 %8638 to i8
  %8640 = and i8 %8639, 1
  %8641 = xor i8 %8640, 1
  store i8 %8641, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8642 = icmp eq i32 %8635, 0
  %8643 = zext i1 %8642 to i8
  store i8 %8643, i8* %34, align 1
  %8644 = lshr i32 %8635, 31
  %8645 = trunc i32 %8644 to i8
  store i8 %8645, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v388 = select i1 %8642, i64 88, i64 9
  %8646 = add i64 %8636, %.v388
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %8647 = load i64, i64* %RBP.i, align 8
  %8648 = add i64 %8647, -24
  %8649 = add i64 %8646, 14
  store i64 %8649, i64* %3, align 8
  %8650 = inttoptr i64 %8648 to i32*
  %8651 = load i32, i32* %8650, align 4
  %8652 = sext i32 %8651 to i64
  %8653 = add i64 %8646, 18
  store i64 %8653, i64* %3, align 8
  %8654 = sext i32 %8651 to i128
  %8655 = and i128 %8654, -18446744073709551616
  %8656 = zext i64 %8652 to i128
  %8657 = or i128 %8655, %8656
  %8658 = mul nsw i128 %8657, 76
  %8659 = trunc i128 %8658 to i64
  store i64 %8659, i64* %RCX.i4050.pre-phi, align 8
  %8660 = sext i64 %8659 to i128
  %8661 = icmp ne i128 %8660, %8658
  %8662 = zext i1 %8661 to i8
  store i8 %8662, i8* %19, align 1
  %8663 = trunc i128 %8658 to i32
  %8664 = and i32 %8663, 252
  %8665 = tail call i32 @llvm.ctpop.i32(i32 %8664)
  %8666 = trunc i32 %8665 to i8
  %8667 = and i8 %8666, 1
  %8668 = xor i8 %8667, 1
  store i8 %8668, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  %8669 = lshr i64 %8659, 63
  %8670 = trunc i64 %8669 to i8
  store i8 %8670, i8* %37, align 1
  store i8 %8662, i8* %43, align 1
  %8671 = add i64 %8659, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  br i1 %8642, label %block_.L_41d5e8, label %block_41d599

block_41d599:                                     ; preds = %block_41d57a
  store i64 %8671, i64* %RDX.i4244, align 8
  %8672 = icmp ult i64 %8671, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8673 = icmp ult i64 %8671, %8659
  %8674 = or i1 %8672, %8673
  %8675 = zext i1 %8674 to i8
  store i8 %8675, i8* %19, align 1
  %8676 = trunc i64 %8671 to i32
  %8677 = and i32 %8676, 252
  %8678 = tail call i32 @llvm.ctpop.i32(i32 %8677)
  %8679 = trunc i32 %8678 to i8
  %8680 = and i8 %8679, 1
  %8681 = xor i8 %8680, 1
  store i8 %8681, i8* %26, align 1
  %8682 = xor i64 %8659, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8683 = xor i64 %8682, %8671
  %8684 = lshr i64 %8683, 4
  %8685 = trunc i64 %8684 to i8
  %8686 = and i8 %8685, 1
  store i8 %8686, i8* %31, align 1
  %8687 = icmp eq i64 %8671, 0
  %8688 = zext i1 %8687 to i8
  store i8 %8688, i8* %34, align 1
  %8689 = lshr i64 %8671, 63
  %8690 = trunc i64 %8689 to i8
  store i8 %8690, i8* %37, align 1
  %8691 = xor i64 %8689, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %8692 = xor i64 %8689, %8669
  %8693 = add nuw nsw i64 %8691, %8692
  %8694 = icmp eq i64 %8693, 2
  %8695 = zext i1 %8694 to i8
  store i8 %8695, i8* %43, align 1
  %8696 = add i64 %8659, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 24)
  %8697 = add i64 %8646, 31
  store i64 %8697, i64* %3, align 8
  %8698 = inttoptr i64 %8696 to i32*
  store i32 12, i32* %8698, align 4
  %8699 = load i64, i64* %RBP.i, align 8
  %8700 = add i64 %8699, -148
  %8701 = load i64, i64* %3, align 8
  %8702 = add i64 %8701, 6
  store i64 %8702, i64* %3, align 8
  %8703 = inttoptr i64 %8700 to i32*
  %8704 = load i32, i32* %8703, align 4
  %8705 = zext i32 %8704 to i64
  store i64 %8705, i64* %RSI.i4246, align 8
  %8706 = add i64 %8699, -24
  %8707 = add i64 %8701, 10
  store i64 %8707, i64* %3, align 8
  %8708 = inttoptr i64 %8706 to i32*
  %8709 = load i32, i32* %8708, align 4
  %8710 = sext i32 %8709 to i64
  %8711 = mul nsw i64 %8710, 76
  store i64 %8711, i64* %RCX.i4050.pre-phi, align 8
  %8712 = lshr i64 %8711, 63
  %8713 = load i64, i64* %RAX.i1555, align 8
  %8714 = add i64 %8711, %8713
  store i64 %8714, i64* %RDX.i4244, align 8
  %8715 = icmp ult i64 %8714, %8713
  %8716 = icmp ult i64 %8714, %8711
  %8717 = or i1 %8715, %8716
  %8718 = zext i1 %8717 to i8
  store i8 %8718, i8* %19, align 1
  %8719 = trunc i64 %8714 to i32
  %8720 = and i32 %8719, 255
  %8721 = tail call i32 @llvm.ctpop.i32(i32 %8720)
  %8722 = trunc i32 %8721 to i8
  %8723 = and i8 %8722, 1
  %8724 = xor i8 %8723, 1
  store i8 %8724, i8* %26, align 1
  %8725 = xor i64 %8711, %8713
  %8726 = xor i64 %8725, %8714
  %8727 = lshr i64 %8726, 4
  %8728 = trunc i64 %8727 to i8
  %8729 = and i8 %8728, 1
  store i8 %8729, i8* %31, align 1
  %8730 = icmp eq i64 %8714, 0
  %8731 = zext i1 %8730 to i8
  store i8 %8731, i8* %34, align 1
  %8732 = lshr i64 %8714, 63
  %8733 = trunc i64 %8732 to i8
  store i8 %8733, i8* %37, align 1
  %8734 = lshr i64 %8713, 63
  %8735 = xor i64 %8732, %8734
  %8736 = xor i64 %8732, %8712
  %8737 = add nuw nsw i64 %8735, %8736
  %8738 = icmp eq i64 %8737, 2
  %8739 = zext i1 %8738 to i8
  store i8 %8739, i8* %43, align 1
  %8740 = add i64 %8714, 48
  %8741 = add i64 %8701, 23
  store i64 %8741, i64* %3, align 8
  %8742 = inttoptr i64 %8740 to i32*
  store i32 %8704, i32* %8742, align 4
  %8743 = load i64, i64* %RBP.i, align 8
  %8744 = add i64 %8743, -152
  %8745 = load i64, i64* %3, align 8
  %8746 = add i64 %8745, 6
  store i64 %8746, i64* %3, align 8
  %8747 = inttoptr i64 %8744 to i32*
  %8748 = load i32, i32* %8747, align 4
  %8749 = zext i32 %8748 to i64
  store i64 %8749, i64* %RSI.i4246, align 8
  %8750 = add i64 %8743, -24
  %8751 = add i64 %8745, 10
  store i64 %8751, i64* %3, align 8
  %8752 = inttoptr i64 %8750 to i32*
  %8753 = load i32, i32* %8752, align 4
  %8754 = sext i32 %8753 to i64
  %8755 = mul nsw i64 %8754, 76
  store i64 %8755, i64* %RCX.i4050.pre-phi, align 8
  %8756 = lshr i64 %8755, 63
  %8757 = load i64, i64* %RAX.i1555, align 8
  %8758 = add i64 %8755, %8757
  store i64 %8758, i64* %RAX.i1555, align 8
  %8759 = icmp ult i64 %8758, %8757
  %8760 = icmp ult i64 %8758, %8755
  %8761 = or i1 %8759, %8760
  %8762 = zext i1 %8761 to i8
  store i8 %8762, i8* %19, align 1
  %8763 = trunc i64 %8758 to i32
  %8764 = and i32 %8763, 255
  %8765 = tail call i32 @llvm.ctpop.i32(i32 %8764)
  %8766 = trunc i32 %8765 to i8
  %8767 = and i8 %8766, 1
  %8768 = xor i8 %8767, 1
  store i8 %8768, i8* %26, align 1
  %8769 = xor i64 %8755, %8757
  %8770 = xor i64 %8769, %8758
  %8771 = lshr i64 %8770, 4
  %8772 = trunc i64 %8771 to i8
  %8773 = and i8 %8772, 1
  store i8 %8773, i8* %31, align 1
  %8774 = icmp eq i64 %8758, 0
  %8775 = zext i1 %8774 to i8
  store i8 %8775, i8* %34, align 1
  %8776 = lshr i64 %8758, 63
  %8777 = trunc i64 %8776 to i8
  store i8 %8777, i8* %37, align 1
  %8778 = lshr i64 %8757, 63
  %8779 = xor i64 %8776, %8778
  %8780 = xor i64 %8776, %8756
  %8781 = add nuw nsw i64 %8779, %8780
  %8782 = icmp eq i64 %8781, 2
  %8783 = zext i1 %8782 to i8
  store i8 %8783, i8* %43, align 1
  %8784 = add i64 %8758, 60
  %8785 = add i64 %8745, 20
  store i64 %8785, i64* %3, align 8
  %8786 = inttoptr i64 %8784 to i32*
  store i32 %8748, i32* %8786, align 4
  %8787 = load i64, i64* %3, align 8
  %8788 = add i64 %8787, 33
  store i64 %8788, i64* %3, align 8
  br label %block_.L_41d604

block_.L_41d5e8:                                  ; preds = %block_41d57a
  store i64 %8671, i64* %RAX.i1555, align 8
  %8789 = icmp ult i64 %8671, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8790 = icmp ult i64 %8671, %8659
  %8791 = or i1 %8789, %8790
  %8792 = zext i1 %8791 to i8
  store i8 %8792, i8* %19, align 1
  %8793 = trunc i64 %8671 to i32
  %8794 = and i32 %8793, 252
  %8795 = tail call i32 @llvm.ctpop.i32(i32 %8794)
  %8796 = trunc i32 %8795 to i8
  %8797 = and i8 %8796, 1
  %8798 = xor i8 %8797, 1
  store i8 %8798, i8* %26, align 1
  %8799 = xor i64 %8659, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8800 = xor i64 %8799, %8671
  %8801 = lshr i64 %8800, 4
  %8802 = trunc i64 %8801 to i8
  %8803 = and i8 %8802, 1
  store i8 %8803, i8* %31, align 1
  %8804 = icmp eq i64 %8671, 0
  %8805 = zext i1 %8804 to i8
  store i8 %8805, i8* %34, align 1
  %8806 = lshr i64 %8671, 63
  %8807 = trunc i64 %8806 to i8
  store i8 %8807, i8* %37, align 1
  %8808 = xor i64 %8806, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %8809 = xor i64 %8806, %8669
  %8810 = add nuw nsw i64 %8808, %8809
  %8811 = icmp eq i64 %8810, 2
  %8812 = zext i1 %8811 to i8
  store i8 %8812, i8* %43, align 1
  %8813 = add i64 %8659, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 24)
  %8814 = add i64 %8646, 28
  store i64 %8814, i64* %3, align 8
  %8815 = inttoptr i64 %8813 to i32*
  store i32 0, i32* %8815, align 4
  %.pre267 = load i64, i64* %3, align 8
  br label %block_.L_41d604

block_.L_41d604:                                  ; preds = %block_.L_41d5e8, %block_41d599
  %8816 = phi i64 [ %.pre267, %block_.L_41d5e8 ], [ %8788, %block_41d599 ]
  %8817 = add i64 %8816, 166
  br label %block_.L_41d6aa

block_.L_41d609:                                  ; preds = %block_41d54e, %block_41d55b, %block_.L_41d541
  %8818 = phi i64 [ %8624, %block_41d55b ], [ %8578, %block_41d54e ], [ %8564, %block_.L_41d541 ]
  %8819 = add i64 %8818, 7
  store i64 %8819, i64* %3, align 8
  %8820 = load i32, i32* %8553, align 4
  store i8 0, i8* %19, align 1
  %8821 = and i32 %8820, 255
  %8822 = tail call i32 @llvm.ctpop.i32(i32 %8821)
  %8823 = trunc i32 %8822 to i8
  %8824 = and i8 %8823, 1
  %8825 = xor i8 %8824, 1
  store i8 %8825, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8826 = icmp eq i32 %8820, 0
  %8827 = zext i1 %8826 to i8
  store i8 %8827, i8* %34, align 1
  %8828 = lshr i32 %8820, 31
  %8829 = trunc i32 %8828 to i8
  store i8 %8829, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v385 = select i1 %8826, i64 13, i64 156
  %8830 = add i64 %8818, %.v385
  store i64 %8830, i64* %3, align 8
  br i1 %8826, label %block_41d616, label %block_.L_41d6a5

block_41d616:                                     ; preds = %block_.L_41d609
  %8831 = add i64 %8550, -156
  store i64 %8831, i64* %RSI.i4246, align 8
  %8832 = add i64 %8550, -160
  store i64 %8832, i64* %RDX.i4244, align 8
  %8833 = add i64 %8550, -24
  %8834 = add i64 %8830, 17
  store i64 %8834, i64* %3, align 8
  %8835 = inttoptr i64 %8833 to i32*
  %8836 = load i32, i32* %8835, align 4
  %8837 = zext i32 %8836 to i64
  store i64 %8837, i64* %RDI.i4254, align 8
  %8838 = add i64 %8830, 183770
  %8839 = add i64 %8830, 22
  %8840 = load i64, i64* %6, align 8
  %8841 = add i64 %8840, -8
  %8842 = inttoptr i64 %8841 to i64*
  store i64 %8839, i64* %8842, align 8
  store i64 %8841, i64* %6, align 8
  store i64 %8838, i64* %3, align 8
  %call2_41d627 = tail call %struct.Memory* @sub_44a3f0.owl_threaten_attack(%struct.State* nonnull %0, i64 %8838, %struct.Memory* %MEMORY.72)
  %8843 = load i32, i32* %EAX.i4253, align 4
  %8844 = load i64, i64* %3, align 8
  store i8 0, i8* %19, align 1
  %8845 = and i32 %8843, 255
  %8846 = tail call i32 @llvm.ctpop.i32(i32 %8845)
  %8847 = trunc i32 %8846 to i8
  %8848 = and i8 %8847, 1
  %8849 = xor i8 %8848, 1
  store i8 %8849, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %8850 = icmp eq i32 %8843, 0
  %8851 = zext i1 %8850 to i8
  store i8 %8851, i8* %34, align 1
  %8852 = lshr i32 %8843, 31
  %8853 = trunc i32 %8852 to i8
  store i8 %8853, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v386 = select i1 %8850, i64 88, i64 9
  %8854 = add i64 %8844, %.v386
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %8855 = load i64, i64* %RBP.i, align 8
  %8856 = add i64 %8855, -24
  %8857 = add i64 %8854, 14
  store i64 %8857, i64* %3, align 8
  %8858 = inttoptr i64 %8856 to i32*
  %8859 = load i32, i32* %8858, align 4
  %8860 = sext i32 %8859 to i64
  %8861 = add i64 %8854, 18
  store i64 %8861, i64* %3, align 8
  %8862 = sext i32 %8859 to i128
  %8863 = and i128 %8862, -18446744073709551616
  %8864 = zext i64 %8860 to i128
  %8865 = or i128 %8863, %8864
  %8866 = mul nsw i128 %8865, 76
  %8867 = trunc i128 %8866 to i64
  store i64 %8867, i64* %RCX.i4050.pre-phi, align 8
  %8868 = sext i64 %8867 to i128
  %8869 = icmp ne i128 %8868, %8866
  %8870 = zext i1 %8869 to i8
  store i8 %8870, i8* %19, align 1
  %8871 = trunc i128 %8866 to i32
  %8872 = and i32 %8871, 252
  %8873 = tail call i32 @llvm.ctpop.i32(i32 %8872)
  %8874 = trunc i32 %8873 to i8
  %8875 = and i8 %8874, 1
  %8876 = xor i8 %8875, 1
  store i8 %8876, i8* %26, align 1
  store i8 0, i8* %31, align 1
  store i8 0, i8* %34, align 1
  %8877 = lshr i64 %8867, 63
  %8878 = trunc i64 %8877 to i8
  store i8 %8878, i8* %37, align 1
  store i8 %8870, i8* %43, align 1
  %8879 = add i64 %8867, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  br i1 %8850, label %block_.L_41d684, label %block_41d635

block_41d635:                                     ; preds = %block_41d616
  store i64 %8879, i64* %RDX.i4244, align 8
  %8880 = icmp ult i64 %8879, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8881 = icmp ult i64 %8879, %8867
  %8882 = or i1 %8880, %8881
  %8883 = zext i1 %8882 to i8
  store i8 %8883, i8* %19, align 1
  %8884 = trunc i64 %8879 to i32
  %8885 = and i32 %8884, 252
  %8886 = tail call i32 @llvm.ctpop.i32(i32 %8885)
  %8887 = trunc i32 %8886 to i8
  %8888 = and i8 %8887, 1
  %8889 = xor i8 %8888, 1
  store i8 %8889, i8* %26, align 1
  %8890 = xor i64 %8867, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8891 = xor i64 %8890, %8879
  %8892 = lshr i64 %8891, 4
  %8893 = trunc i64 %8892 to i8
  %8894 = and i8 %8893, 1
  store i8 %8894, i8* %31, align 1
  %8895 = icmp eq i64 %8879, 0
  %8896 = zext i1 %8895 to i8
  store i8 %8896, i8* %34, align 1
  %8897 = lshr i64 %8879, 63
  %8898 = trunc i64 %8897 to i8
  store i8 %8898, i8* %37, align 1
  %8899 = xor i64 %8897, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %8900 = xor i64 %8897, %8877
  %8901 = add nuw nsw i64 %8899, %8900
  %8902 = icmp eq i64 %8901, 2
  %8903 = zext i1 %8902 to i8
  store i8 %8903, i8* %43, align 1
  %8904 = add i64 %8867, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 24)
  %8905 = add i64 %8854, 31
  store i64 %8905, i64* %3, align 8
  %8906 = inttoptr i64 %8904 to i32*
  store i32 11, i32* %8906, align 4
  %8907 = load i64, i64* %RBP.i, align 8
  %8908 = add i64 %8907, -156
  %8909 = load i64, i64* %3, align 8
  %8910 = add i64 %8909, 6
  store i64 %8910, i64* %3, align 8
  %8911 = inttoptr i64 %8908 to i32*
  %8912 = load i32, i32* %8911, align 4
  %8913 = zext i32 %8912 to i64
  store i64 %8913, i64* %RSI.i4246, align 8
  %8914 = add i64 %8907, -24
  %8915 = add i64 %8909, 10
  store i64 %8915, i64* %3, align 8
  %8916 = inttoptr i64 %8914 to i32*
  %8917 = load i32, i32* %8916, align 4
  %8918 = sext i32 %8917 to i64
  %8919 = mul nsw i64 %8918, 76
  store i64 %8919, i64* %RCX.i4050.pre-phi, align 8
  %8920 = lshr i64 %8919, 63
  %8921 = load i64, i64* %RAX.i1555, align 8
  %8922 = add i64 %8919, %8921
  store i64 %8922, i64* %RDX.i4244, align 8
  %8923 = icmp ult i64 %8922, %8921
  %8924 = icmp ult i64 %8922, %8919
  %8925 = or i1 %8923, %8924
  %8926 = zext i1 %8925 to i8
  store i8 %8926, i8* %19, align 1
  %8927 = trunc i64 %8922 to i32
  %8928 = and i32 %8927, 255
  %8929 = tail call i32 @llvm.ctpop.i32(i32 %8928)
  %8930 = trunc i32 %8929 to i8
  %8931 = and i8 %8930, 1
  %8932 = xor i8 %8931, 1
  store i8 %8932, i8* %26, align 1
  %8933 = xor i64 %8919, %8921
  %8934 = xor i64 %8933, %8922
  %8935 = lshr i64 %8934, 4
  %8936 = trunc i64 %8935 to i8
  %8937 = and i8 %8936, 1
  store i8 %8937, i8* %31, align 1
  %8938 = icmp eq i64 %8922, 0
  %8939 = zext i1 %8938 to i8
  store i8 %8939, i8* %34, align 1
  %8940 = lshr i64 %8922, 63
  %8941 = trunc i64 %8940 to i8
  store i8 %8941, i8* %37, align 1
  %8942 = lshr i64 %8921, 63
  %8943 = xor i64 %8940, %8942
  %8944 = xor i64 %8940, %8920
  %8945 = add nuw nsw i64 %8943, %8944
  %8946 = icmp eq i64 %8945, 2
  %8947 = zext i1 %8946 to i8
  store i8 %8947, i8* %43, align 1
  %8948 = add i64 %8922, 32
  %8949 = add i64 %8909, 23
  store i64 %8949, i64* %3, align 8
  %8950 = inttoptr i64 %8948 to i32*
  store i32 %8912, i32* %8950, align 4
  %8951 = load i64, i64* %RBP.i, align 8
  %8952 = add i64 %8951, -160
  %8953 = load i64, i64* %3, align 8
  %8954 = add i64 %8953, 6
  store i64 %8954, i64* %3, align 8
  %8955 = inttoptr i64 %8952 to i32*
  %8956 = load i32, i32* %8955, align 4
  %8957 = zext i32 %8956 to i64
  store i64 %8957, i64* %RSI.i4246, align 8
  %8958 = add i64 %8951, -24
  %8959 = add i64 %8953, 10
  store i64 %8959, i64* %3, align 8
  %8960 = inttoptr i64 %8958 to i32*
  %8961 = load i32, i32* %8960, align 4
  %8962 = sext i32 %8961 to i64
  %8963 = mul nsw i64 %8962, 76
  store i64 %8963, i64* %RCX.i4050.pre-phi, align 8
  %8964 = lshr i64 %8963, 63
  %8965 = load i64, i64* %RAX.i1555, align 8
  %8966 = add i64 %8963, %8965
  store i64 %8966, i64* %RAX.i1555, align 8
  %8967 = icmp ult i64 %8966, %8965
  %8968 = icmp ult i64 %8966, %8963
  %8969 = or i1 %8967, %8968
  %8970 = zext i1 %8969 to i8
  store i8 %8970, i8* %19, align 1
  %8971 = trunc i64 %8966 to i32
  %8972 = and i32 %8971, 255
  %8973 = tail call i32 @llvm.ctpop.i32(i32 %8972)
  %8974 = trunc i32 %8973 to i8
  %8975 = and i8 %8974, 1
  %8976 = xor i8 %8975, 1
  store i8 %8976, i8* %26, align 1
  %8977 = xor i64 %8963, %8965
  %8978 = xor i64 %8977, %8966
  %8979 = lshr i64 %8978, 4
  %8980 = trunc i64 %8979 to i8
  %8981 = and i8 %8980, 1
  store i8 %8981, i8* %31, align 1
  %8982 = icmp eq i64 %8966, 0
  %8983 = zext i1 %8982 to i8
  store i8 %8983, i8* %34, align 1
  %8984 = lshr i64 %8966, 63
  %8985 = trunc i64 %8984 to i8
  store i8 %8985, i8* %37, align 1
  %8986 = lshr i64 %8965, 63
  %8987 = xor i64 %8984, %8986
  %8988 = xor i64 %8984, %8964
  %8989 = add nuw nsw i64 %8987, %8988
  %8990 = icmp eq i64 %8989, 2
  %8991 = zext i1 %8990 to i8
  store i8 %8991, i8* %43, align 1
  %8992 = add i64 %8966, 44
  %8993 = add i64 %8953, 20
  store i64 %8993, i64* %3, align 8
  %8994 = inttoptr i64 %8992 to i32*
  store i32 %8956, i32* %8994, align 4
  %8995 = load i64, i64* %3, align 8
  %8996 = add i64 %8995, 33
  store i64 %8996, i64* %3, align 8
  br label %block_.L_41d6a0

block_.L_41d684:                                  ; preds = %block_41d616
  store i64 %8879, i64* %RAX.i1555, align 8
  %8997 = icmp ult i64 %8879, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %8998 = icmp ult i64 %8879, %8867
  %8999 = or i1 %8997, %8998
  %9000 = zext i1 %8999 to i8
  store i8 %9000, i8* %19, align 1
  %9001 = trunc i64 %8879 to i32
  %9002 = and i32 %9001, 252
  %9003 = tail call i32 @llvm.ctpop.i32(i32 %9002)
  %9004 = trunc i32 %9003 to i8
  %9005 = and i8 %9004, 1
  %9006 = xor i8 %9005, 1
  store i8 %9006, i8* %26, align 1
  %9007 = xor i64 %8867, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %9008 = xor i64 %9007, %8879
  %9009 = lshr i64 %9008, 4
  %9010 = trunc i64 %9009 to i8
  %9011 = and i8 %9010, 1
  store i8 %9011, i8* %31, align 1
  %9012 = icmp eq i64 %8879, 0
  %9013 = zext i1 %9012 to i8
  store i8 %9013, i8* %34, align 1
  %9014 = lshr i64 %8879, 63
  %9015 = trunc i64 %9014 to i8
  store i8 %9015, i8* %37, align 1
  %9016 = xor i64 %9014, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %9017 = xor i64 %9014, %8877
  %9018 = add nuw nsw i64 %9016, %9017
  %9019 = icmp eq i64 %9018, 2
  %9020 = zext i1 %9019 to i8
  store i8 %9020, i8* %43, align 1
  %9021 = add i64 %8867, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 24)
  %9022 = add i64 %8854, 28
  store i64 %9022, i64* %3, align 8
  %9023 = inttoptr i64 %9021 to i32*
  store i32 1, i32* %9023, align 4
  %.pre268 = load i64, i64* %3, align 8
  br label %block_.L_41d6a0

block_.L_41d6a0:                                  ; preds = %block_.L_41d684, %block_41d635
  %9024 = phi i64 [ %.pre268, %block_.L_41d684 ], [ %8996, %block_41d635 ]
  %9025 = add i64 %9024, 5
  store i64 %9025, i64* %3, align 8
  br label %block_.L_41d6a5

block_.L_41d6a5:                                  ; preds = %block_.L_41d609, %block_.L_41d6a0
  %9026 = phi i64 [ %8830, %block_.L_41d609 ], [ %9025, %block_.L_41d6a0 ]
  %MEMORY.76 = phi %struct.Memory* [ %MEMORY.72, %block_.L_41d609 ], [ %call2_41d627, %block_.L_41d6a0 ]
  %9027 = add i64 %9026, 5
  store i64 %9027, i64* %3, align 8
  br label %block_.L_41d6aa

block_.L_41d6aa:                                  ; preds = %block_.L_41d6a5, %block_.L_41d604
  %storemerge157 = phi i64 [ %8817, %block_.L_41d604 ], [ %9027, %block_.L_41d6a5 ]
  %MEMORY.77 = phi %struct.Memory* [ %call2_41d58b, %block_.L_41d604 ], [ %MEMORY.76, %block_.L_41d6a5 ]
  %9028 = add i64 %storemerge157, 5
  store i64 %9028, i64* %3, align 8
  br label %block_.L_41d6af

block_.L_41d6af:                                  ; preds = %block_41d4ff, %block_.L_41d6aa, %block_41d529, %block_41d51b, %block_.L_41d4bc
  %9029 = phi i64 [ %8491, %block_.L_41d4bc ], [ %8502, %block_41d4ff ], [ %9028, %block_.L_41d6aa ], [ %8524, %block_41d51b ], [ %8548, %block_41d529 ]
  %MEMORY.78 = phi %struct.Memory* [ %8292, %block_.L_41d4bc ], [ %8292, %block_41d4ff ], [ %MEMORY.77, %block_.L_41d6aa ], [ %8292, %block_41d51b ], [ %call2_41d533, %block_41d529 ]
  store i64 3, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57b04d_type* @G__0x57b04d to i64), i64* %RSI.i4246, align 8
  %9030 = add i64 %9029, add (i64 ptrtoint (%G_0xc589a__rip__type* @G_0xc589a__rip_ to i64), i64 15)
  %9031 = add i64 %9029, 23
  store i64 %9031, i64* %3, align 8
  %9032 = inttoptr i64 %9030 to i64*
  %9033 = load i64, i64* %9032, align 8
  store i64 %9033, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %9034 = load i64, i64* %RBP.i, align 8
  %9035 = add i64 %9034, -24
  %9036 = add i64 %9029, 26
  store i64 %9036, i64* %3, align 8
  %9037 = inttoptr i64 %9035 to i32*
  %9038 = load i32, i32* %9037, align 4
  %9039 = zext i32 %9038 to i64
  store i64 %9039, i64* %RDX.i4244, align 8
  %9040 = add i64 %9029, 388385
  %9041 = add i64 %9029, 31
  %9042 = load i64, i64* %6, align 8
  %9043 = add i64 %9042, -8
  %9044 = inttoptr i64 %9043 to i64*
  store i64 %9041, i64* %9044, align 8
  store i64 %9043, i64* %6, align 8
  store i64 %9040, i64* %3, align 8
  %call2_41d6c9 = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %9040, %struct.Memory* %MEMORY.78)
  %9045 = load i64, i64* %RBP.i, align 8
  %9046 = add i64 %9045, -1040
  %9047 = load i64, i64* %3, align 8
  %9048 = add i64 %9047, 8
  store i64 %9048, i64* %3, align 8
  %9049 = load i64, i64* %93, align 1
  %9050 = inttoptr i64 %9046 to i64*
  store i64 %9049, i64* %9050, align 8
  %.pre269 = load i64, i64* %3, align 8
  br label %block_.L_41d6d6

block_.L_41d6d6:                                  ; preds = %block_.L_41d6af, %block_41d471
  %9051 = phi i64 [ %.pre269, %block_.L_41d6af ], [ %8413, %block_41d471 ]
  %MEMORY.79 = phi %struct.Memory* [ %call2_41d6c9, %block_.L_41d6af ], [ %8292, %block_41d471 ]
  %9052 = add i64 %9051, 5
  store i64 %9052, i64* %3, align 8
  br label %block_.L_41d6db

block_.L_41d6db:                                  ; preds = %block_41d302, %block_.L_41d6d6, %block_41d2ed, %block_41d2d8
  %9053 = phi i64 [ %7824, %block_41d2d8 ], [ %7840, %block_41d2ed ], [ %7902, %block_41d302 ], [ %9052, %block_.L_41d6d6 ]
  %MEMORY.80 = phi %struct.Memory* [ %MEMORY.70, %block_41d2d8 ], [ %MEMORY.70, %block_41d2ed ], [ %MEMORY.70, %block_41d302 ], [ %MEMORY.79, %block_.L_41d6d6 ]
  %9054 = load i64, i64* %RBP.i, align 8
  %9055 = add i64 %9054, -24
  %9056 = add i64 %9053, 8
  store i64 %9056, i64* %3, align 8
  %9057 = inttoptr i64 %9055 to i32*
  %9058 = load i32, i32* %9057, align 4
  %9059 = add i32 %9058, 1
  %9060 = zext i32 %9059 to i64
  store i64 %9060, i64* %RAX.i1555, align 8
  %9061 = icmp eq i32 %9058, -1
  %9062 = icmp eq i32 %9059, 0
  %9063 = or i1 %9061, %9062
  %9064 = zext i1 %9063 to i8
  store i8 %9064, i8* %19, align 1
  %9065 = and i32 %9059, 255
  %9066 = tail call i32 @llvm.ctpop.i32(i32 %9065)
  %9067 = trunc i32 %9066 to i8
  %9068 = and i8 %9067, 1
  %9069 = xor i8 %9068, 1
  store i8 %9069, i8* %26, align 1
  %9070 = xor i32 %9059, %9058
  %9071 = lshr i32 %9070, 4
  %9072 = trunc i32 %9071 to i8
  %9073 = and i8 %9072, 1
  store i8 %9073, i8* %31, align 1
  %9074 = zext i1 %9062 to i8
  store i8 %9074, i8* %34, align 1
  %9075 = lshr i32 %9059, 31
  %9076 = trunc i32 %9075 to i8
  store i8 %9076, i8* %37, align 1
  %9077 = lshr i32 %9058, 31
  %9078 = xor i32 %9075, %9077
  %9079 = add nuw nsw i32 %9078, %9075
  %9080 = icmp eq i32 %9079, 2
  %9081 = zext i1 %9080 to i8
  store i8 %9081, i8* %43, align 1
  %9082 = add i64 %9053, 14
  store i64 %9082, i64* %3, align 8
  store i32 %9059, i32* %9057, align 4
  %9083 = load i64, i64* %3, align 8
  %9084 = add i64 %9083, -1054
  store i64 %9084, i64* %3, align 8
  br label %block_.L_41d2cb

block_.L_41d6ee:                                  ; preds = %block_.L_41d2cb
  %9085 = add i64 %7798, 7
  store i64 %9085, i64* %3, align 8
  store i32 21, i32* %7772, align 4
  %.pre235 = load i64, i64* %3, align 8
  br label %block_.L_41d6f5

block_.L_41d6f5:                                  ; preds = %block_.L_41d765, %block_.L_41d6ee
  %9086 = phi i64 [ %.pre235, %block_.L_41d6ee ], [ %9285, %block_.L_41d765 ]
  %MEMORY.81 = phi %struct.Memory* [ %MEMORY.70, %block_.L_41d6ee ], [ %MEMORY.82, %block_.L_41d765 ]
  %9087 = load i64, i64* %RBP.i, align 8
  %9088 = add i64 %9087, -24
  %9089 = add i64 %9086, 7
  store i64 %9089, i64* %3, align 8
  %9090 = inttoptr i64 %9088 to i32*
  %9091 = load i32, i32* %9090, align 4
  %9092 = add i32 %9091, -400
  %9093 = icmp ult i32 %9091, 400
  %9094 = zext i1 %9093 to i8
  store i8 %9094, i8* %19, align 1
  %9095 = and i32 %9092, 255
  %9096 = tail call i32 @llvm.ctpop.i32(i32 %9095)
  %9097 = trunc i32 %9096 to i8
  %9098 = and i8 %9097, 1
  %9099 = xor i8 %9098, 1
  store i8 %9099, i8* %26, align 1
  %9100 = xor i32 %9091, 16
  %9101 = xor i32 %9100, %9092
  %9102 = lshr i32 %9101, 4
  %9103 = trunc i32 %9102 to i8
  %9104 = and i8 %9103, 1
  store i8 %9104, i8* %31, align 1
  %9105 = icmp eq i32 %9092, 0
  %9106 = zext i1 %9105 to i8
  store i8 %9106, i8* %34, align 1
  %9107 = lshr i32 %9092, 31
  %9108 = trunc i32 %9107 to i8
  store i8 %9108, i8* %37, align 1
  %9109 = lshr i32 %9091, 31
  %9110 = xor i32 %9107, %9109
  %9111 = add nuw nsw i32 %9110, %9109
  %9112 = icmp eq i32 %9111, 2
  %9113 = zext i1 %9112 to i8
  store i8 %9113, i8* %43, align 1
  %9114 = icmp ne i8 %9108, 0
  %9115 = xor i1 %9114, %9112
  %.v337 = select i1 %9115, i64 13, i64 131
  %9116 = add i64 %9086, %.v337
  store i64 %9116, i64* %3, align 8
  br i1 %9115, label %block_41d702, label %block_.L_41d778

block_41d702:                                     ; preds = %block_.L_41d6f5
  %9117 = add i64 %9116, 4
  store i64 %9117, i64* %3, align 8
  %9118 = load i32, i32* %9090, align 4
  %9119 = sext i32 %9118 to i64
  store i64 %9119, i64* %RAX.i1555, align 8
  %9120 = add nsw i64 %9119, 12099168
  %9121 = add i64 %9116, 12
  store i64 %9121, i64* %3, align 8
  %9122 = inttoptr i64 %9120 to i8*
  %9123 = load i8, i8* %9122, align 1
  %9124 = zext i8 %9123 to i64
  store i64 %9124, i64* %RCX.i4050.pre-phi, align 8
  %9125 = zext i8 %9123 to i32
  %9126 = add nsw i32 %9125, -3
  %9127 = icmp ult i8 %9123, 3
  %9128 = zext i1 %9127 to i8
  store i8 %9128, i8* %19, align 1
  %9129 = and i32 %9126, 255
  %9130 = tail call i32 @llvm.ctpop.i32(i32 %9129)
  %9131 = trunc i32 %9130 to i8
  %9132 = and i8 %9131, 1
  %9133 = xor i8 %9132, 1
  store i8 %9133, i8* %26, align 1
  %9134 = xor i32 %9126, %9125
  %9135 = lshr i32 %9134, 4
  %9136 = trunc i32 %9135 to i8
  %9137 = and i8 %9136, 1
  store i8 %9137, i8* %31, align 1
  %9138 = icmp eq i32 %9126, 0
  %9139 = zext i1 %9138 to i8
  store i8 %9139, i8* %34, align 1
  %9140 = lshr i32 %9126, 31
  %9141 = trunc i32 %9140 to i8
  store i8 %9141, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v376 = select i1 %9138, i64 99, i64 21
  %9142 = add i64 %9116, %.v376
  store i64 %9142, i64* %3, align 8
  br i1 %9138, label %block_.L_41d765, label %block_41d717

block_41d717:                                     ; preds = %block_41d702
  store i64 76, i64* %RAX.i1555, align 8
  store i64 76, i64* %RDX.i4244, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i4050.pre-phi, align 8
  %9143 = add i64 %9142, 21
  store i64 %9143, i64* %3, align 8
  %9144 = load i32, i32* %9090, align 4
  %9145 = sext i32 %9144 to i64
  %9146 = mul nsw i64 %9145, 76
  store i64 %9146, i64* %RSI.i4246, align 8
  %9147 = lshr i64 %9146, 63
  %9148 = add i64 %9146, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %9148, i64* %RDI.i4254, align 8
  %9149 = icmp ult i64 %9148, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %9150 = icmp ult i64 %9148, %9146
  %9151 = or i1 %9149, %9150
  %9152 = zext i1 %9151 to i8
  store i8 %9152, i8* %19, align 1
  %9153 = trunc i64 %9148 to i32
  %9154 = and i32 %9153, 252
  %9155 = tail call i32 @llvm.ctpop.i32(i32 %9154)
  %9156 = trunc i32 %9155 to i8
  %9157 = and i8 %9156, 1
  %9158 = xor i8 %9157, 1
  store i8 %9158, i8* %26, align 1
  %9159 = xor i64 %9146, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %9160 = xor i64 %9159, %9148
  %9161 = lshr i64 %9160, 4
  %9162 = trunc i64 %9161 to i8
  %9163 = and i8 %9162, 1
  store i8 %9163, i8* %31, align 1
  %9164 = icmp eq i64 %9148, 0
  %9165 = zext i1 %9164 to i8
  store i8 %9165, i8* %34, align 1
  %9166 = lshr i64 %9148, 63
  %9167 = trunc i64 %9166 to i8
  store i8 %9167, i8* %37, align 1
  %9168 = xor i64 %9166, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %9169 = xor i64 %9166, %9147
  %9170 = add nuw nsw i64 %9168, %9169
  %9171 = icmp eq i64 %9170, 2
  %9172 = zext i1 %9171 to i8
  store i8 %9172, i8* %43, align 1
  %9173 = add i64 %9087, -168
  %9174 = add i64 %9142, 38
  store i64 %9174, i64* %3, align 8
  %9175 = inttoptr i64 %9173 to i64*
  store i64 %9148, i64* %9175, align 8
  %9176 = load i64, i64* %RBP.i, align 8
  %9177 = add i64 %9176, -24
  %9178 = load i64, i64* %3, align 8
  %9179 = add i64 %9178, 4
  store i64 %9179, i64* %3, align 8
  %9180 = inttoptr i64 %9177 to i32*
  %9181 = load i32, i32* %9180, align 4
  %9182 = sext i32 %9181 to i64
  %9183 = mul nsw i64 %9182, 76
  store i64 %9183, i64* %RSI.i4246, align 8
  %9184 = lshr i64 %9183, 63
  %9185 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %9186 = add i64 %9183, %9185
  store i64 %9186, i64* %RDI.i4254, align 8
  %9187 = icmp ult i64 %9186, %9185
  %9188 = icmp ult i64 %9186, %9183
  %9189 = or i1 %9187, %9188
  %9190 = zext i1 %9189 to i8
  store i8 %9190, i8* %19, align 1
  %9191 = trunc i64 %9186 to i32
  %9192 = and i32 %9191, 255
  %9193 = tail call i32 @llvm.ctpop.i32(i32 %9192)
  %9194 = trunc i32 %9193 to i8
  %9195 = and i8 %9194, 1
  %9196 = xor i8 %9195, 1
  store i8 %9196, i8* %26, align 1
  %9197 = xor i64 %9183, %9185
  %9198 = xor i64 %9197, %9186
  %9199 = lshr i64 %9198, 4
  %9200 = trunc i64 %9199 to i8
  %9201 = and i8 %9200, 1
  store i8 %9201, i8* %31, align 1
  %9202 = icmp eq i64 %9186, 0
  %9203 = zext i1 %9202 to i8
  store i8 %9203, i8* %34, align 1
  %9204 = lshr i64 %9186, 63
  %9205 = trunc i64 %9204 to i8
  store i8 %9205, i8* %37, align 1
  %9206 = lshr i64 %9185, 63
  %9207 = xor i64 %9204, %9206
  %9208 = xor i64 %9204, %9184
  %9209 = add nuw nsw i64 %9207, %9208
  %9210 = icmp eq i64 %9209, 2
  %9211 = zext i1 %9210 to i8
  store i8 %9211, i8* %43, align 1
  %9212 = add i64 %9176, -168
  %9213 = add i64 %9178, 21
  store i64 %9213, i64* %3, align 8
  %9214 = inttoptr i64 %9212 to i64*
  %9215 = load i64, i64* %9214, align 8
  store i64 %9215, i64* %RSI.i4246, align 8
  %9216 = add i64 %9215, 8
  %9217 = add i64 %9178, 25
  store i64 %9217, i64* %3, align 8
  %9218 = inttoptr i64 %9216 to i32*
  %9219 = load i32, i32* %9218, align 4
  %9220 = sext i32 %9219 to i64
  %9221 = mul nsw i64 %9220, 76
  %9222 = lshr i64 %9221, 63
  %9223 = add i64 %9221, %9185
  store i64 %9223, i64* %RCX.i4050.pre-phi, align 8
  %9224 = icmp ult i64 %9223, %9185
  %9225 = icmp ult i64 %9223, %9221
  %9226 = or i1 %9224, %9225
  %9227 = zext i1 %9226 to i8
  store i8 %9227, i8* %19, align 1
  %9228 = trunc i64 %9223 to i32
  %9229 = and i32 %9228, 255
  %9230 = tail call i32 @llvm.ctpop.i32(i32 %9229)
  %9231 = trunc i32 %9230 to i8
  %9232 = and i8 %9231, 1
  %9233 = xor i8 %9232, 1
  store i8 %9233, i8* %26, align 1
  %9234 = xor i64 %9221, %9185
  %9235 = xor i64 %9234, %9223
  %9236 = lshr i64 %9235, 4
  %9237 = trunc i64 %9236 to i8
  %9238 = and i8 %9237, 1
  store i8 %9238, i8* %31, align 1
  %9239 = icmp eq i64 %9223, 0
  %9240 = zext i1 %9239 to i8
  store i8 %9240, i8* %34, align 1
  %9241 = lshr i64 %9223, 63
  %9242 = trunc i64 %9241 to i8
  store i8 %9242, i8* %37, align 1
  %9243 = xor i64 %9241, %9206
  %9244 = xor i64 %9241, %9222
  %9245 = add nuw nsw i64 %9243, %9244
  %9246 = icmp eq i64 %9245, 2
  %9247 = zext i1 %9246 to i8
  store i8 %9247, i8* %43, align 1
  store i64 %9223, i64* %RSI.i4246, align 8
  %9248 = add i64 %9178, -116301
  %9249 = add i64 %9178, 40
  %9250 = load i64, i64* %6, align 8
  %9251 = add i64 %9250, -8
  %9252 = inttoptr i64 %9251 to i64*
  store i64 %9249, i64* %9252, align 8
  store i64 %9251, i64* %6, align 8
  store i64 %9248, i64* %3, align 8
  %9253 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %MEMORY.81)
  %.pre260 = load i64, i64* %3, align 8
  %.pre261 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41d765

block_.L_41d765:                                  ; preds = %block_41d717, %block_41d702
  %9254 = phi i64 [ %9087, %block_41d702 ], [ %.pre261, %block_41d717 ]
  %9255 = phi i64 [ %9142, %block_41d702 ], [ %.pre260, %block_41d717 ]
  %MEMORY.82 = phi %struct.Memory* [ %MEMORY.81, %block_41d702 ], [ %9253, %block_41d717 ]
  %9256 = add i64 %9254, -24
  %9257 = add i64 %9255, 8
  store i64 %9257, i64* %3, align 8
  %9258 = inttoptr i64 %9256 to i32*
  %9259 = load i32, i32* %9258, align 4
  %9260 = add i32 %9259, 1
  %9261 = zext i32 %9260 to i64
  store i64 %9261, i64* %RAX.i1555, align 8
  %9262 = icmp eq i32 %9259, -1
  %9263 = icmp eq i32 %9260, 0
  %9264 = or i1 %9262, %9263
  %9265 = zext i1 %9264 to i8
  store i8 %9265, i8* %19, align 1
  %9266 = and i32 %9260, 255
  %9267 = tail call i32 @llvm.ctpop.i32(i32 %9266)
  %9268 = trunc i32 %9267 to i8
  %9269 = and i8 %9268, 1
  %9270 = xor i8 %9269, 1
  store i8 %9270, i8* %26, align 1
  %9271 = xor i32 %9260, %9259
  %9272 = lshr i32 %9271, 4
  %9273 = trunc i32 %9272 to i8
  %9274 = and i8 %9273, 1
  store i8 %9274, i8* %31, align 1
  %9275 = zext i1 %9263 to i8
  store i8 %9275, i8* %34, align 1
  %9276 = lshr i32 %9260, 31
  %9277 = trunc i32 %9276 to i8
  store i8 %9277, i8* %37, align 1
  %9278 = lshr i32 %9259, 31
  %9279 = xor i32 %9276, %9278
  %9280 = add nuw nsw i32 %9279, %9276
  %9281 = icmp eq i32 %9280, 2
  %9282 = zext i1 %9281 to i8
  store i8 %9282, i8* %43, align 1
  %9283 = add i64 %9255, 14
  store i64 %9283, i64* %3, align 8
  store i32 %9260, i32* %9258, align 4
  %9284 = load i64, i64* %3, align 8
  %9285 = add i64 %9284, -126
  store i64 %9285, i64* %3, align 8
  br label %block_.L_41d6f5

block_.L_41d778:                                  ; preds = %block_.L_41d6f5
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57b06c_type* @G__0x57b06c to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9286 = add i64 %9116, add (i64 ptrtoint (%G_0xc57cf__rip__type* @G_0xc57cf__rip_ to i64), i64 17)
  %9287 = add i64 %9116, 25
  store i64 %9287, i64* %3, align 8
  %9288 = inttoptr i64 %9286 to i64*
  %9289 = load i64, i64* %9288, align 8
  store i64 %9289, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %9290 = add i64 %9116, 388184
  %9291 = add i64 %9116, 30
  %9292 = load i64, i64* %6, align 8
  %9293 = add i64 %9292, -8
  %9294 = inttoptr i64 %9293 to i64*
  store i64 %9291, i64* %9294, align 8
  store i64 %9293, i64* %6, align 8
  store i64 %9290, i64* %3, align 8
  %call2_41d791 = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %9290, %struct.Memory* %MEMORY.81)
  %9295 = load i64, i64* %RBP.i, align 8
  %9296 = add i64 %9295, -32
  %9297 = load i64, i64* %3, align 8
  %9298 = add i64 %9297, 7
  store i64 %9298, i64* %3, align 8
  %9299 = inttoptr i64 %9296 to i32*
  store i32 0, i32* %9299, align 4
  %9300 = load i64, i64* %RBP.i, align 8
  %9301 = add i64 %9300, -1048
  %9302 = load i64, i64* %3, align 8
  %9303 = add i64 %9302, 8
  store i64 %9303, i64* %3, align 8
  %9304 = load i64, i64* %93, align 1
  %9305 = inttoptr i64 %9301 to i64*
  store i64 %9304, i64* %9305, align 8
  %.pre236 = load i64, i64* %3, align 8
  br label %block_.L_41d7a5

block_.L_41d7a5:                                  ; preds = %block_.L_41d8ac, %block_.L_41d778
  %9306 = phi i64 [ %.pre236, %block_.L_41d778 ], [ %9695, %block_.L_41d8ac ]
  %MEMORY.83 = phi %struct.Memory* [ %call2_41d791, %block_.L_41d778 ], [ %MEMORY.86, %block_.L_41d8ac ]
  %9307 = load i64, i64* %RBP.i, align 8
  %9308 = add i64 %9307, -32
  %9309 = add i64 %9306, 3
  store i64 %9309, i64* %3, align 8
  %9310 = inttoptr i64 %9308 to i32*
  %9311 = load i32, i32* %9310, align 4
  %9312 = zext i32 %9311 to i64
  store i64 %9312, i64* %RAX.i1555, align 8
  %9313 = load i32, i32* bitcast (%G_0xb54cec_type* @G_0xb54cec to i32*), align 8
  %9314 = sub i32 %9311, %9313
  %9315 = icmp ult i32 %9311, %9313
  %9316 = zext i1 %9315 to i8
  store i8 %9316, i8* %19, align 1
  %9317 = and i32 %9314, 255
  %9318 = tail call i32 @llvm.ctpop.i32(i32 %9317)
  %9319 = trunc i32 %9318 to i8
  %9320 = and i8 %9319, 1
  %9321 = xor i8 %9320, 1
  store i8 %9321, i8* %26, align 1
  %9322 = xor i32 %9313, %9311
  %9323 = xor i32 %9322, %9314
  %9324 = lshr i32 %9323, 4
  %9325 = trunc i32 %9324 to i8
  %9326 = and i8 %9325, 1
  store i8 %9326, i8* %31, align 1
  %9327 = icmp eq i32 %9314, 0
  %9328 = zext i1 %9327 to i8
  store i8 %9328, i8* %34, align 1
  %9329 = lshr i32 %9314, 31
  %9330 = trunc i32 %9329 to i8
  store i8 %9330, i8* %37, align 1
  %9331 = lshr i32 %9311, 31
  %9332 = lshr i32 %9313, 31
  %9333 = xor i32 %9332, %9331
  %9334 = xor i32 %9329, %9331
  %9335 = add nuw nsw i32 %9334, %9333
  %9336 = icmp eq i32 %9335, 2
  %9337 = zext i1 %9336 to i8
  store i8 %9337, i8* %43, align 1
  %9338 = icmp ne i8 %9330, 0
  %9339 = xor i1 %9338, %9336
  %.v338 = select i1 %9339, i64 16, i64 282
  %9340 = add i64 %9306, %.v338
  store i64 %9340, i64* %3, align 8
  br i1 %9339, label %block_41d7b5, label %block_.L_41d8bf

block_41d7b5:                                     ; preds = %block_.L_41d7a5
  store i64 0, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %9341 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %9341, i64* %RCX.i4050.pre-phi, align 8
  %9342 = add i64 %9340, 14
  store i64 %9342, i64* %3, align 8
  %9343 = load i32, i32* %9310, align 4
  %9344 = sext i32 %9343 to i64
  %9345 = mul nsw i64 %9344, 104
  store i64 %9345, i64* %RDX.i4244, align 8
  %9346 = lshr i64 %9345, 63
  %9347 = add i64 %9345, %9341
  store i64 %9347, i64* %RCX.i4050.pre-phi, align 8
  %9348 = icmp ult i64 %9347, %9341
  %9349 = icmp ult i64 %9347, %9345
  %9350 = or i1 %9348, %9349
  %9351 = zext i1 %9350 to i8
  store i8 %9351, i8* %19, align 1
  %9352 = trunc i64 %9347 to i32
  %9353 = and i32 %9352, 255
  %9354 = tail call i32 @llvm.ctpop.i32(i32 %9353)
  %9355 = trunc i32 %9354 to i8
  %9356 = and i8 %9355, 1
  %9357 = xor i8 %9356, 1
  store i8 %9357, i8* %26, align 1
  %9358 = xor i64 %9345, %9341
  %9359 = xor i64 %9358, %9347
  %9360 = lshr i64 %9359, 4
  %9361 = trunc i64 %9360 to i8
  %9362 = and i8 %9361, 1
  store i8 %9362, i8* %31, align 1
  %9363 = icmp eq i64 %9347, 0
  %9364 = zext i1 %9363 to i8
  store i8 %9364, i8* %34, align 1
  %9365 = lshr i64 %9347, 63
  %9366 = trunc i64 %9365 to i8
  store i8 %9366, i8* %37, align 1
  %9367 = lshr i64 %9341, 63
  %9368 = xor i64 %9365, %9367
  %9369 = xor i64 %9365, %9346
  %9370 = add nuw nsw i64 %9368, %9369
  %9371 = icmp eq i64 %9370, 2
  %9372 = zext i1 %9371 to i8
  store i8 %9372, i8* %43, align 1
  %9373 = inttoptr i64 %9347 to i32*
  %9374 = add i64 %9340, 23
  store i64 %9374, i64* %3, align 8
  %9375 = load i32, i32* %9373, align 4
  %9376 = zext i32 %9375 to i64
  store i64 %9376, i64* %RDI.i4254, align 8
  store i64 %9341, i64* %RCX.i4050.pre-phi, align 8
  %9377 = load i64, i64* %RBP.i, align 8
  %9378 = add i64 %9377, -32
  %9379 = add i64 %9340, 35
  store i64 %9379, i64* %3, align 8
  %9380 = inttoptr i64 %9378 to i32*
  %9381 = load i32, i32* %9380, align 4
  %9382 = sext i32 %9381 to i64
  %9383 = mul nsw i64 %9382, 104
  %9384 = add i64 %9383, %9341
  %9385 = lshr i64 %9384, 63
  %9386 = add i64 %9384, 100
  store i64 %9386, i64* %RCX.i4050.pre-phi, align 8
  %9387 = icmp ugt i64 %9384, -101
  %9388 = zext i1 %9387 to i8
  store i8 %9388, i8* %19, align 1
  %9389 = trunc i64 %9386 to i32
  %9390 = and i32 %9389, 255
  %9391 = tail call i32 @llvm.ctpop.i32(i32 %9390)
  %9392 = trunc i32 %9391 to i8
  %9393 = and i8 %9392, 1
  %9394 = xor i8 %9393, 1
  store i8 %9394, i8* %26, align 1
  %9395 = xor i64 %9386, %9384
  %9396 = lshr i64 %9395, 4
  %9397 = trunc i64 %9396 to i8
  %9398 = and i8 %9397, 1
  store i8 %9398, i8* %31, align 1
  %9399 = icmp eq i64 %9386, 0
  %9400 = zext i1 %9399 to i8
  store i8 %9400, i8* %34, align 1
  %9401 = lshr i64 %9386, 63
  %9402 = trunc i64 %9401 to i8
  store i8 %9402, i8* %37, align 1
  %9403 = xor i64 %9401, %9385
  %9404 = add nuw nsw i64 %9403, %9401
  %9405 = icmp eq i64 %9404, 2
  %9406 = zext i1 %9405 to i8
  store i8 %9406, i8* %43, align 1
  %9407 = load i32, i32* %EAX.i4253, align 4
  %9408 = zext i32 %9407 to i64
  store i64 %9408, i64* %RSI.i4246, align 8
  store i64 %9408, i64* %RDX.i4244, align 8
  %9409 = add i64 %9340, 360475
  %9410 = add i64 %9340, 55
  %9411 = load i64, i64* %6, align 8
  %9412 = add i64 %9411, -8
  %9413 = inttoptr i64 %9412 to i64*
  store i64 %9410, i64* %9413, align 8
  store i64 %9412, i64* %6, align 8
  store i64 %9409, i64* %3, align 8
  %call2_41d7e7 = tail call %struct.Memory* @sub_4757d0.compute_surroundings(%struct.State* nonnull %0, i64 %9409, %struct.Memory* %MEMORY.83)
  %9414 = load i64, i64* %3, align 8
  %9415 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %9415, i64* %RCX.i4050.pre-phi, align 8
  %9416 = load i64, i64* %RBP.i, align 8
  %9417 = add i64 %9416, -32
  %9418 = add i64 %9414, 12
  store i64 %9418, i64* %3, align 8
  %9419 = inttoptr i64 %9417 to i32*
  %9420 = load i32, i32* %9419, align 4
  %9421 = sext i32 %9420 to i64
  %9422 = mul nsw i64 %9421, 104
  store i64 %9422, i64* %R8.i3778, align 8
  %9423 = add i64 %9422, %9415
  store i64 %9423, i64* %RCX.i4050.pre-phi, align 8
  %9424 = add i64 %9423, 96
  %9425 = load i32, i32* %EAX.i4253, align 4
  %9426 = add i64 %9414, 22
  store i64 %9426, i64* %3, align 8
  %9427 = inttoptr i64 %9424 to i32*
  store i32 %9425, i32* %9427, align 4
  %9428 = load i64, i64* %3, align 8
  %9429 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %9430 = and i32 %9429, 32
  %9431 = zext i32 %9430 to i64
  store i64 %9431, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  %9432 = tail call i32 @llvm.ctpop.i32(i32 %9430)
  %9433 = trunc i32 %9432 to i8
  %9434 = xor i8 %9433, 1
  store i8 %9434, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9435 = icmp eq i32 %9430, 0
  %.lobit319 = lshr exact i32 %9430, 5
  %9436 = trunc i32 %.lobit319 to i8
  %9437 = xor i8 %9436, 1
  store i8 %9437, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v373 = select i1 %9435, i64 170, i64 19
  %9438 = add i64 %9428, %.v373
  store i64 %9438, i64* %3, align 8
  br i1 %9435, label %block_.L_41d8ac, label %block_41d815

block_41d815:                                     ; preds = %block_41d7b5
  %9439 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %9439, i64* %RAX.i1555, align 8
  %9440 = load i64, i64* %RBP.i, align 8
  %9441 = add i64 %9440, -32
  %9442 = add i64 %9438, 12
  store i64 %9442, i64* %3, align 8
  %9443 = inttoptr i64 %9441 to i32*
  %9444 = load i32, i32* %9443, align 4
  %9445 = sext i32 %9444 to i64
  %9446 = mul nsw i64 %9445, 104
  store i64 %9446, i64* %RCX.i4050.pre-phi, align 8
  %9447 = lshr i64 %9446, 63
  %9448 = add i64 %9446, %9439
  store i64 %9448, i64* %RAX.i1555, align 8
  %9449 = icmp ult i64 %9448, %9439
  %9450 = icmp ult i64 %9448, %9446
  %9451 = or i1 %9449, %9450
  %9452 = zext i1 %9451 to i8
  store i8 %9452, i8* %19, align 1
  %9453 = trunc i64 %9448 to i32
  %9454 = and i32 %9453, 255
  %9455 = tail call i32 @llvm.ctpop.i32(i32 %9454)
  %9456 = trunc i32 %9455 to i8
  %9457 = and i8 %9456, 1
  %9458 = xor i8 %9457, 1
  store i8 %9458, i8* %26, align 1
  %9459 = xor i64 %9446, %9439
  %9460 = xor i64 %9459, %9448
  %9461 = lshr i64 %9460, 4
  %9462 = trunc i64 %9461 to i8
  %9463 = and i8 %9462, 1
  store i8 %9463, i8* %31, align 1
  %9464 = icmp eq i64 %9448, 0
  %9465 = zext i1 %9464 to i8
  store i8 %9465, i8* %34, align 1
  %9466 = lshr i64 %9448, 63
  %9467 = trunc i64 %9466 to i8
  store i8 %9467, i8* %37, align 1
  %9468 = lshr i64 %9439, 63
  %9469 = xor i64 %9466, %9468
  %9470 = xor i64 %9466, %9447
  %9471 = add nuw nsw i64 %9469, %9470
  %9472 = icmp eq i64 %9471, 2
  %9473 = zext i1 %9472 to i8
  store i8 %9473, i8* %43, align 1
  %9474 = add i64 %9448, 96
  %9475 = add i64 %9438, 23
  store i64 %9475, i64* %3, align 8
  %9476 = inttoptr i64 %9474 to i32*
  %9477 = load i32, i32* %9476, align 4
  %9478 = add i32 %9477, -1
  %9479 = icmp eq i32 %9477, 0
  %9480 = zext i1 %9479 to i8
  store i8 %9480, i8* %19, align 1
  %9481 = and i32 %9478, 255
  %9482 = tail call i32 @llvm.ctpop.i32(i32 %9481)
  %9483 = trunc i32 %9482 to i8
  %9484 = and i8 %9483, 1
  %9485 = xor i8 %9484, 1
  store i8 %9485, i8* %26, align 1
  %9486 = xor i32 %9478, %9477
  %9487 = lshr i32 %9486, 4
  %9488 = trunc i32 %9487 to i8
  %9489 = and i8 %9488, 1
  store i8 %9489, i8* %31, align 1
  %9490 = icmp eq i32 %9478, 0
  %9491 = zext i1 %9490 to i8
  store i8 %9491, i8* %34, align 1
  %9492 = lshr i32 %9478, 31
  %9493 = trunc i32 %9492 to i8
  store i8 %9493, i8* %37, align 1
  %9494 = lshr i32 %9477, 31
  %9495 = xor i32 %9492, %9494
  %9496 = add nuw nsw i32 %9495, %9494
  %9497 = icmp eq i32 %9496, 2
  %9498 = zext i1 %9497 to i8
  store i8 %9498, i8* %43, align 1
  %.v374 = select i1 %9490, i64 29, i64 73
  %9499 = add i64 %9438, %.v374
  store i64 %9499, i64* %3, align 8
  br i1 %9490, label %block_41d832, label %block_.L_41d85e

block_41d832:                                     ; preds = %block_41d815
  store i64 ptrtoint (%G__0x57b082_type* @G__0x57b082 to i64), i64* %RDI.i4254, align 8
  %9500 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %9500, i64* %RAX.i1555, align 8
  %9501 = load i64, i64* %RBP.i, align 8
  %9502 = add i64 %9501, -32
  %9503 = add i64 %9499, 22
  store i64 %9503, i64* %3, align 8
  %9504 = inttoptr i64 %9502 to i32*
  %9505 = load i32, i32* %9504, align 4
  %9506 = sext i32 %9505 to i64
  %9507 = mul nsw i64 %9506, 104
  store i64 %9507, i64* %RCX.i4050.pre-phi, align 8
  %9508 = lshr i64 %9507, 63
  %9509 = add i64 %9507, %9500
  store i64 %9509, i64* %RAX.i1555, align 8
  %9510 = icmp ult i64 %9509, %9500
  %9511 = icmp ult i64 %9509, %9507
  %9512 = or i1 %9510, %9511
  %9513 = zext i1 %9512 to i8
  store i8 %9513, i8* %19, align 1
  %9514 = trunc i64 %9509 to i32
  %9515 = and i32 %9514, 255
  %9516 = tail call i32 @llvm.ctpop.i32(i32 %9515)
  %9517 = trunc i32 %9516 to i8
  %9518 = and i8 %9517, 1
  %9519 = xor i8 %9518, 1
  store i8 %9519, i8* %26, align 1
  %9520 = xor i64 %9507, %9500
  %9521 = xor i64 %9520, %9509
  %9522 = lshr i64 %9521, 4
  %9523 = trunc i64 %9522 to i8
  %9524 = and i8 %9523, 1
  store i8 %9524, i8* %31, align 1
  %9525 = icmp eq i64 %9509, 0
  %9526 = zext i1 %9525 to i8
  store i8 %9526, i8* %34, align 1
  %9527 = lshr i64 %9509, 63
  %9528 = trunc i64 %9527 to i8
  store i8 %9528, i8* %37, align 1
  %9529 = lshr i64 %9500, 63
  %9530 = xor i64 %9527, %9529
  %9531 = xor i64 %9527, %9508
  %9532 = add nuw nsw i64 %9530, %9531
  %9533 = icmp eq i64 %9532, 2
  %9534 = zext i1 %9533 to i8
  store i8 %9534, i8* %43, align 1
  %9535 = inttoptr i64 %9509 to i32*
  %9536 = add i64 %9499, 31
  store i64 %9536, i64* %3, align 8
  %9537 = load i32, i32* %9535, align 4
  %9538 = zext i32 %9537 to i64
  store i64 %9538, i64* %RSI.i4246, align 8
  store i8 0, i8* %AL.i3758, align 1
  %9539 = add i64 %9499, 214398
  %9540 = add i64 %9499, 38
  %9541 = load i64, i64* %6, align 8
  %9542 = add i64 %9541, -8
  %9543 = inttoptr i64 %9542 to i64*
  store i64 %9540, i64* %9543, align 8
  store i64 %9542, i64* %6, align 8
  store i64 %9539, i64* %3, align 8
  %call2_41d853 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %9539, %struct.Memory* %MEMORY.83)
  %9544 = load i64, i64* %RBP.i, align 8
  %9545 = add i64 %9544, -1052
  %9546 = load i32, i32* %EAX.i4253, align 4
  %9547 = load i64, i64* %3, align 8
  %9548 = add i64 %9547, 6
  store i64 %9548, i64* %3, align 8
  %9549 = inttoptr i64 %9545 to i32*
  store i32 %9546, i32* %9549, align 4
  %.pre258 = load i64, i64* %3, align 8
  br label %block_.L_41d85e

block_.L_41d85e:                                  ; preds = %block_41d815, %block_41d832
  %9550 = phi i64 [ %.pre258, %block_41d832 ], [ %9499, %block_41d815 ]
  %9551 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %9551, i64* %RAX.i1555, align 8
  %9552 = load i64, i64* %RBP.i, align 8
  %9553 = add i64 %9552, -32
  %9554 = add i64 %9550, 12
  store i64 %9554, i64* %3, align 8
  %9555 = inttoptr i64 %9553 to i32*
  %9556 = load i32, i32* %9555, align 4
  %9557 = sext i32 %9556 to i64
  %9558 = mul nsw i64 %9557, 104
  store i64 %9558, i64* %RCX.i4050.pre-phi, align 8
  %9559 = lshr i64 %9558, 63
  %9560 = add i64 %9558, %9551
  store i64 %9560, i64* %RAX.i1555, align 8
  %9561 = icmp ult i64 %9560, %9551
  %9562 = icmp ult i64 %9560, %9558
  %9563 = or i1 %9561, %9562
  %9564 = zext i1 %9563 to i8
  store i8 %9564, i8* %19, align 1
  %9565 = trunc i64 %9560 to i32
  %9566 = and i32 %9565, 255
  %9567 = tail call i32 @llvm.ctpop.i32(i32 %9566)
  %9568 = trunc i32 %9567 to i8
  %9569 = and i8 %9568, 1
  %9570 = xor i8 %9569, 1
  store i8 %9570, i8* %26, align 1
  %9571 = xor i64 %9558, %9551
  %9572 = xor i64 %9571, %9560
  %9573 = lshr i64 %9572, 4
  %9574 = trunc i64 %9573 to i8
  %9575 = and i8 %9574, 1
  store i8 %9575, i8* %31, align 1
  %9576 = icmp eq i64 %9560, 0
  %9577 = zext i1 %9576 to i8
  store i8 %9577, i8* %34, align 1
  %9578 = lshr i64 %9560, 63
  %9579 = trunc i64 %9578 to i8
  store i8 %9579, i8* %37, align 1
  %9580 = lshr i64 %9551, 63
  %9581 = xor i64 %9578, %9580
  %9582 = xor i64 %9578, %9559
  %9583 = add nuw nsw i64 %9581, %9582
  %9584 = icmp eq i64 %9583, 2
  %9585 = zext i1 %9584 to i8
  store i8 %9585, i8* %43, align 1
  %9586 = add i64 %9560, 96
  %9587 = add i64 %9550, 23
  store i64 %9587, i64* %3, align 8
  %9588 = inttoptr i64 %9586 to i32*
  %9589 = load i32, i32* %9588, align 4
  %9590 = add i32 %9589, -2
  %9591 = icmp ult i32 %9589, 2
  %9592 = zext i1 %9591 to i8
  store i8 %9592, i8* %19, align 1
  %9593 = and i32 %9590, 255
  %9594 = tail call i32 @llvm.ctpop.i32(i32 %9593)
  %9595 = trunc i32 %9594 to i8
  %9596 = and i8 %9595, 1
  %9597 = xor i8 %9596, 1
  store i8 %9597, i8* %26, align 1
  %9598 = xor i32 %9590, %9589
  %9599 = lshr i32 %9598, 4
  %9600 = trunc i32 %9599 to i8
  %9601 = and i8 %9600, 1
  store i8 %9601, i8* %31, align 1
  %9602 = icmp eq i32 %9590, 0
  %9603 = zext i1 %9602 to i8
  store i8 %9603, i8* %34, align 1
  %9604 = lshr i32 %9590, 31
  %9605 = trunc i32 %9604 to i8
  store i8 %9605, i8* %37, align 1
  %9606 = lshr i32 %9589, 31
  %9607 = xor i32 %9604, %9606
  %9608 = add nuw nsw i32 %9607, %9606
  %9609 = icmp eq i32 %9608, 2
  %9610 = zext i1 %9609 to i8
  store i8 %9610, i8* %43, align 1
  %.v375 = select i1 %9602, i64 29, i64 73
  %9611 = add i64 %9550, %.v375
  store i64 %9611, i64* %3, align 8
  br i1 %9602, label %block_41d87b, label %block_.L_41d8a7

block_41d87b:                                     ; preds = %block_.L_41d85e
  store i64 ptrtoint (%G__0x57b07b_type* @G__0x57b07b to i64), i64* %RDI.i4254, align 8
  %9612 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %9612, i64* %RAX.i1555, align 8
  %9613 = load i64, i64* %RBP.i, align 8
  %9614 = add i64 %9613, -32
  %9615 = add i64 %9611, 22
  store i64 %9615, i64* %3, align 8
  %9616 = inttoptr i64 %9614 to i32*
  %9617 = load i32, i32* %9616, align 4
  %9618 = sext i32 %9617 to i64
  %9619 = mul nsw i64 %9618, 104
  store i64 %9619, i64* %RCX.i4050.pre-phi, align 8
  %9620 = lshr i64 %9619, 63
  %9621 = add i64 %9619, %9612
  store i64 %9621, i64* %RAX.i1555, align 8
  %9622 = icmp ult i64 %9621, %9612
  %9623 = icmp ult i64 %9621, %9619
  %9624 = or i1 %9622, %9623
  %9625 = zext i1 %9624 to i8
  store i8 %9625, i8* %19, align 1
  %9626 = trunc i64 %9621 to i32
  %9627 = and i32 %9626, 255
  %9628 = tail call i32 @llvm.ctpop.i32(i32 %9627)
  %9629 = trunc i32 %9628 to i8
  %9630 = and i8 %9629, 1
  %9631 = xor i8 %9630, 1
  store i8 %9631, i8* %26, align 1
  %9632 = xor i64 %9619, %9612
  %9633 = xor i64 %9632, %9621
  %9634 = lshr i64 %9633, 4
  %9635 = trunc i64 %9634 to i8
  %9636 = and i8 %9635, 1
  store i8 %9636, i8* %31, align 1
  %9637 = icmp eq i64 %9621, 0
  %9638 = zext i1 %9637 to i8
  store i8 %9638, i8* %34, align 1
  %9639 = lshr i64 %9621, 63
  %9640 = trunc i64 %9639 to i8
  store i8 %9640, i8* %37, align 1
  %9641 = lshr i64 %9612, 63
  %9642 = xor i64 %9639, %9641
  %9643 = xor i64 %9639, %9620
  %9644 = add nuw nsw i64 %9642, %9643
  %9645 = icmp eq i64 %9644, 2
  %9646 = zext i1 %9645 to i8
  store i8 %9646, i8* %43, align 1
  %9647 = inttoptr i64 %9621 to i32*
  %9648 = add i64 %9611, 31
  store i64 %9648, i64* %3, align 8
  %9649 = load i32, i32* %9647, align 4
  %9650 = zext i32 %9649 to i64
  store i64 %9650, i64* %RSI.i4246, align 8
  store i8 0, i8* %AL.i3758, align 1
  %9651 = add i64 %9611, 214325
  %9652 = add i64 %9611, 38
  %9653 = load i64, i64* %6, align 8
  %9654 = add i64 %9653, -8
  %9655 = inttoptr i64 %9654 to i64*
  store i64 %9652, i64* %9655, align 8
  store i64 %9654, i64* %6, align 8
  store i64 %9651, i64* %3, align 8
  %call2_41d89c = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %9651, %struct.Memory* %MEMORY.83)
  %9656 = load i64, i64* %RBP.i, align 8
  %9657 = add i64 %9656, -1056
  %9658 = load i32, i32* %EAX.i4253, align 4
  %9659 = load i64, i64* %3, align 8
  %9660 = add i64 %9659, 6
  store i64 %9660, i64* %3, align 8
  %9661 = inttoptr i64 %9657 to i32*
  store i32 %9658, i32* %9661, align 4
  %.pre259 = load i64, i64* %3, align 8
  br label %block_.L_41d8a7

block_.L_41d8a7:                                  ; preds = %block_.L_41d85e, %block_41d87b
  %9662 = phi i64 [ %9611, %block_.L_41d85e ], [ %.pre259, %block_41d87b ]
  %MEMORY.85 = phi %struct.Memory* [ %MEMORY.83, %block_.L_41d85e ], [ %call2_41d89c, %block_41d87b ]
  %9663 = add i64 %9662, 5
  store i64 %9663, i64* %3, align 8
  br label %block_.L_41d8ac

block_.L_41d8ac:                                  ; preds = %block_.L_41d8a7, %block_41d7b5
  %9664 = phi i64 [ %9438, %block_41d7b5 ], [ %9663, %block_.L_41d8a7 ]
  %MEMORY.86 = phi %struct.Memory* [ %MEMORY.83, %block_41d7b5 ], [ %MEMORY.85, %block_.L_41d8a7 ]
  %9665 = load i64, i64* %RBP.i, align 8
  %9666 = add i64 %9665, -32
  %9667 = add i64 %9664, 8
  store i64 %9667, i64* %3, align 8
  %9668 = inttoptr i64 %9666 to i32*
  %9669 = load i32, i32* %9668, align 4
  %9670 = add i32 %9669, 1
  %9671 = zext i32 %9670 to i64
  store i64 %9671, i64* %RAX.i1555, align 8
  %9672 = icmp eq i32 %9669, -1
  %9673 = icmp eq i32 %9670, 0
  %9674 = or i1 %9672, %9673
  %9675 = zext i1 %9674 to i8
  store i8 %9675, i8* %19, align 1
  %9676 = and i32 %9670, 255
  %9677 = tail call i32 @llvm.ctpop.i32(i32 %9676)
  %9678 = trunc i32 %9677 to i8
  %9679 = and i8 %9678, 1
  %9680 = xor i8 %9679, 1
  store i8 %9680, i8* %26, align 1
  %9681 = xor i32 %9670, %9669
  %9682 = lshr i32 %9681, 4
  %9683 = trunc i32 %9682 to i8
  %9684 = and i8 %9683, 1
  store i8 %9684, i8* %31, align 1
  %9685 = zext i1 %9673 to i8
  store i8 %9685, i8* %34, align 1
  %9686 = lshr i32 %9670, 31
  %9687 = trunc i32 %9686 to i8
  store i8 %9687, i8* %37, align 1
  %9688 = lshr i32 %9669, 31
  %9689 = xor i32 %9686, %9688
  %9690 = add nuw nsw i32 %9689, %9686
  %9691 = icmp eq i32 %9690, 2
  %9692 = zext i1 %9691 to i8
  store i8 %9692, i8* %43, align 1
  %9693 = add i64 %9664, 14
  store i64 %9693, i64* %3, align 8
  store i32 %9670, i32* %9668, align 4
  %9694 = load i64, i64* %3, align 8
  %9695 = add i64 %9694, -277
  store i64 %9695, i64* %3, align 8
  br label %block_.L_41d7a5

block_.L_41d8bf:                                  ; preds = %block_.L_41d7a5
  %9696 = add i64 %9340, 7
  store i64 %9696, i64* %3, align 8
  store i32 0, i32* %9310, align 4
  %.pre237 = load i64, i64* %3, align 8
  br label %block_.L_41d8c6

block_.L_41d8c6:                                  ; preds = %block_.L_41db4a, %block_.L_41d8bf
  %9697 = phi i64 [ %.pre237, %block_.L_41d8bf ], [ %10617, %block_.L_41db4a ]
  %9698 = load i64, i64* %RBP.i, align 8
  %9699 = add i64 %9698, -32
  %9700 = add i64 %9697, 3
  store i64 %9700, i64* %3, align 8
  %9701 = inttoptr i64 %9699 to i32*
  %9702 = load i32, i32* %9701, align 4
  %9703 = zext i32 %9702 to i64
  store i64 %9703, i64* %RAX.i1555, align 8
  %9704 = load i32, i32* bitcast (%G_0xb54cec_type* @G_0xb54cec to i32*), align 8
  %9705 = sub i32 %9702, %9704
  %9706 = icmp ult i32 %9702, %9704
  %9707 = zext i1 %9706 to i8
  store i8 %9707, i8* %19, align 1
  %9708 = and i32 %9705, 255
  %9709 = tail call i32 @llvm.ctpop.i32(i32 %9708)
  %9710 = trunc i32 %9709 to i8
  %9711 = and i8 %9710, 1
  %9712 = xor i8 %9711, 1
  store i8 %9712, i8* %26, align 1
  %9713 = xor i32 %9704, %9702
  %9714 = xor i32 %9713, %9705
  %9715 = lshr i32 %9714, 4
  %9716 = trunc i32 %9715 to i8
  %9717 = and i8 %9716, 1
  store i8 %9717, i8* %31, align 1
  %9718 = icmp eq i32 %9705, 0
  %9719 = zext i1 %9718 to i8
  store i8 %9719, i8* %34, align 1
  %9720 = lshr i32 %9705, 31
  %9721 = trunc i32 %9720 to i8
  store i8 %9721, i8* %37, align 1
  %9722 = lshr i32 %9702, 31
  %9723 = lshr i32 %9704, 31
  %9724 = xor i32 %9723, %9722
  %9725 = xor i32 %9720, %9722
  %9726 = add nuw nsw i32 %9725, %9724
  %9727 = icmp eq i32 %9726, 2
  %9728 = zext i1 %9727 to i8
  store i8 %9728, i8* %43, align 1
  %9729 = icmp ne i8 %9721, 0
  %9730 = xor i1 %9729, %9727
  %.v339 = select i1 %9730, i64 16, i64 663
  %9731 = add i64 %9697, %.v339
  store i64 %9731, i64* %3, align 8
  br i1 %9730, label %block_41d8d6, label %block_.L_41db5d

block_41d8d6:                                     ; preds = %block_.L_41d8c6
  %9732 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %9732, i64* %RAX.i1555, align 8
  %9733 = add i64 %9731, 12
  store i64 %9733, i64* %3, align 8
  %9734 = load i32, i32* %9701, align 4
  %9735 = sext i32 %9734 to i64
  %9736 = mul nsw i64 %9735, 104
  store i64 %9736, i64* %RCX.i4050.pre-phi, align 8
  %9737 = lshr i64 %9736, 63
  %9738 = add i64 %9736, %9732
  store i64 %9738, i64* %RAX.i1555, align 8
  %9739 = icmp ult i64 %9738, %9732
  %9740 = icmp ult i64 %9738, %9736
  %9741 = or i1 %9739, %9740
  %9742 = zext i1 %9741 to i8
  store i8 %9742, i8* %19, align 1
  %9743 = trunc i64 %9738 to i32
  %9744 = and i32 %9743, 255
  %9745 = tail call i32 @llvm.ctpop.i32(i32 %9744)
  %9746 = trunc i32 %9745 to i8
  %9747 = and i8 %9746, 1
  %9748 = xor i8 %9747, 1
  store i8 %9748, i8* %26, align 1
  %9749 = xor i64 %9736, %9732
  %9750 = xor i64 %9749, %9738
  %9751 = lshr i64 %9750, 4
  %9752 = trunc i64 %9751 to i8
  %9753 = and i8 %9752, 1
  store i8 %9753, i8* %31, align 1
  %9754 = icmp eq i64 %9738, 0
  %9755 = zext i1 %9754 to i8
  store i8 %9755, i8* %34, align 1
  %9756 = lshr i64 %9738, 63
  %9757 = trunc i64 %9756 to i8
  store i8 %9757, i8* %37, align 1
  %9758 = lshr i64 %9732, 63
  %9759 = xor i64 %9756, %9758
  %9760 = xor i64 %9756, %9737
  %9761 = add nuw nsw i64 %9759, %9760
  %9762 = icmp eq i64 %9761, 2
  %9763 = zext i1 %9762 to i8
  store i8 %9763, i8* %43, align 1
  %9764 = inttoptr i64 %9738 to i32*
  %9765 = add i64 %9731, 21
  store i64 %9765, i64* %3, align 8
  %9766 = load i32, i32* %9764, align 4
  %9767 = zext i32 %9766 to i64
  store i64 %9767, i64* %RDX.i4244, align 8
  %9768 = add i64 %9698, -176
  %9769 = add i64 %9731, 27
  store i64 %9769, i64* %3, align 8
  %9770 = inttoptr i64 %9768 to i32*
  store i32 %9766, i32* %9770, align 4
  %9771 = load i64, i64* %3, align 8
  %9772 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %9772, i64* %RAX.i1555, align 8
  %9773 = load i64, i64* %RBP.i, align 8
  %9774 = add i64 %9773, -32
  %9775 = add i64 %9771, 12
  store i64 %9775, i64* %3, align 8
  %9776 = inttoptr i64 %9774 to i32*
  %9777 = load i32, i32* %9776, align 4
  %9778 = sext i32 %9777 to i64
  %9779 = mul nsw i64 %9778, 104
  store i64 %9779, i64* %RCX.i4050.pre-phi, align 8
  %9780 = add i64 %9779, %9772
  %9781 = lshr i64 %9780, 63
  %9782 = add i64 %9780, 76
  store i64 %9782, i64* %RAX.i1555, align 8
  %9783 = icmp ugt i64 %9780, -77
  %9784 = zext i1 %9783 to i8
  store i8 %9784, i8* %19, align 1
  %9785 = trunc i64 %9782 to i32
  %9786 = and i32 %9785, 255
  %9787 = tail call i32 @llvm.ctpop.i32(i32 %9786)
  %9788 = trunc i32 %9787 to i8
  %9789 = and i8 %9788, 1
  %9790 = xor i8 %9789, 1
  store i8 %9790, i8* %26, align 1
  %9791 = xor i64 %9782, %9780
  %9792 = lshr i64 %9791, 4
  %9793 = trunc i64 %9792 to i8
  %9794 = and i8 %9793, 1
  store i8 %9794, i8* %31, align 1
  %9795 = icmp eq i64 %9782, 0
  %9796 = zext i1 %9795 to i8
  store i8 %9796, i8* %34, align 1
  %9797 = lshr i64 %9782, 63
  %9798 = trunc i64 %9797 to i8
  store i8 %9798, i8* %37, align 1
  %9799 = xor i64 %9797, %9781
  %9800 = add nuw nsw i64 %9799, %9797
  %9801 = icmp eq i64 %9800, 2
  %9802 = zext i1 %9801 to i8
  store i8 %9802, i8* %43, align 1
  %9803 = add i64 %9773, -184
  %9804 = add i64 %9771, 30
  store i64 %9804, i64* %3, align 8
  %9805 = inttoptr i64 %9803 to i64*
  store i64 %9782, i64* %9805, align 8
  %9806 = load i64, i64* %RBP.i, align 8
  %9807 = add i64 %9806, -184
  %9808 = load i64, i64* %3, align 8
  %9809 = add i64 %9808, 7
  store i64 %9809, i64* %3, align 8
  %9810 = inttoptr i64 %9807 to i64*
  %9811 = load i64, i64* %9810, align 8
  store i64 %9811, i64* %RDI.i4254, align 8
  %9812 = add i64 %9808, 120577
  %9813 = add i64 %9808, 12
  %9814 = load i64, i64* %6, align 8
  %9815 = add i64 %9814, -8
  %9816 = inttoptr i64 %9815 to i64*
  store i64 %9813, i64* %9816, align 8
  store i64 %9815, i64* %6, align 8
  store i64 %9812, i64* %3, align 8
  %call2_41d916 = tail call %struct.Memory* @sub_43b010.max_eyes(%struct.State* nonnull %0, i64 %9812, %struct.Memory* %MEMORY.83)
  %9817 = load i64, i64* %RBP.i, align 8
  %9818 = add i64 %9817, -184
  %9819 = load i64, i64* %3, align 8
  %9820 = add i64 %9819, 7
  store i64 %9820, i64* %3, align 8
  %9821 = inttoptr i64 %9818 to i64*
  %9822 = load i64, i64* %9821, align 8
  store i64 %9822, i64* %RDI.i4254, align 8
  %9823 = add i64 %9817, -1060
  %9824 = load i32, i32* %EAX.i4253, align 4
  %9825 = add i64 %9819, 13
  store i64 %9825, i64* %3, align 8
  %9826 = inttoptr i64 %9823 to i32*
  store i32 %9824, i32* %9826, align 4
  %9827 = load i64, i64* %3, align 8
  %9828 = add i64 %9827, 123336
  %9829 = add i64 %9827, 5
  %9830 = load i64, i64* %6, align 8
  %9831 = add i64 %9830, -8
  %9832 = inttoptr i64 %9831 to i64*
  store i64 %9829, i64* %9832, align 8
  store i64 %9831, i64* %6, align 8
  store i64 %9828, i64* %3, align 8
  %call2_41d928 = tail call %struct.Memory* @sub_43baf0.min_eyes(%struct.State* nonnull %0, i64 %9828, %struct.Memory* %MEMORY.83)
  %9833 = load i64, i64* %RBP.i, align 8
  %9834 = add i64 %9833, -1060
  %9835 = load i64, i64* %3, align 8
  %9836 = add i64 %9835, 6
  store i64 %9836, i64* %3, align 8
  %9837 = inttoptr i64 %9834 to i32*
  %9838 = load i32, i32* %9837, align 4
  %9839 = load i32, i32* %EAX.i4253, align 4
  %9840 = add i32 %9839, %9838
  %9841 = zext i32 %9840 to i64
  store i64 %9841, i64* %RDX.i4244, align 8
  %9842 = icmp ult i32 %9840, %9838
  %9843 = icmp ult i32 %9840, %9839
  %9844 = or i1 %9842, %9843
  %9845 = zext i1 %9844 to i8
  store i8 %9845, i8* %19, align 1
  %9846 = and i32 %9840, 255
  %9847 = tail call i32 @llvm.ctpop.i32(i32 %9846)
  %9848 = trunc i32 %9847 to i8
  %9849 = and i8 %9848, 1
  %9850 = xor i8 %9849, 1
  store i8 %9850, i8* %26, align 1
  %9851 = xor i32 %9839, %9838
  %9852 = xor i32 %9851, %9840
  %9853 = lshr i32 %9852, 4
  %9854 = trunc i32 %9853 to i8
  %9855 = and i8 %9854, 1
  store i8 %9855, i8* %31, align 1
  %9856 = icmp eq i32 %9840, 0
  %9857 = zext i1 %9856 to i8
  store i8 %9857, i8* %34, align 1
  %9858 = lshr i32 %9840, 31
  %9859 = trunc i32 %9858 to i8
  store i8 %9859, i8* %37, align 1
  %9860 = lshr i32 %9838, 31
  %9861 = lshr i32 %9839, 31
  %9862 = xor i32 %9858, %9860
  %9863 = xor i32 %9858, %9861
  %9864 = add nuw nsw i32 %9862, %9863
  %9865 = icmp eq i32 %9864, 2
  %9866 = zext i1 %9865 to i8
  store i8 %9866, i8* %43, align 1
  %9867 = add i64 %9833, -172
  %9868 = add i64 %9835, 14
  store i64 %9868, i64* %3, align 8
  %9869 = inttoptr i64 %9867 to i32*
  store i32 %9840, i32* %9869, align 4
  %9870 = load i64, i64* %RBP.i, align 8
  %9871 = add i64 %9870, -176
  %9872 = load i64, i64* %3, align 8
  %9873 = add i64 %9872, 6
  store i64 %9873, i64* %3, align 8
  %9874 = inttoptr i64 %9871 to i32*
  %9875 = load i32, i32* %9874, align 4
  %9876 = zext i32 %9875 to i64
  store i64 %9876, i64* %RDI.i4254, align 8
  %9877 = add i64 %9872, 9333
  %9878 = add i64 %9872, 11
  %9879 = load i64, i64* %6, align 8
  %9880 = add i64 %9879, -8
  %9881 = inttoptr i64 %9880 to i64*
  store i64 %9878, i64* %9881, align 8
  store i64 %9880, i64* %6, align 8
  store i64 %9877, i64* %3, align 8
  %call2_41d941 = tail call %struct.Memory* @sub_41fdb0.dragon_looks_inessential(%struct.State* nonnull %0, i64 %9877, %struct.Memory* %MEMORY.83)
  %9882 = load i32, i32* %EAX.i4253, align 4
  %9883 = load i64, i64* %3, align 8
  store i8 0, i8* %19, align 1
  %9884 = and i32 %9882, 255
  %9885 = tail call i32 @llvm.ctpop.i32(i32 %9884)
  %9886 = trunc i32 %9885 to i8
  %9887 = and i8 %9886, 1
  %9888 = xor i8 %9887, 1
  store i8 %9888, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %9889 = icmp eq i32 %9882, 0
  %9890 = zext i1 %9889 to i8
  store i8 %9890, i8* %34, align 1
  %9891 = lshr i32 %9882, 31
  %9892 = trunc i32 %9891 to i8
  store i8 %9892, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v364 = select i1 %9889, i64 40, i64 9
  %9893 = add i64 %9883, %.v364
  store i64 %9893, i64* %3, align 8
  br i1 %9889, label %block_.L_41d96e, label %block_41d94f

block_41d94f:                                     ; preds = %block_41d8d6
  %9894 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %9894, i64* %RAX.i1555, align 8
  %9895 = load i64, i64* %RBP.i, align 8
  %9896 = add i64 %9895, -32
  %9897 = add i64 %9893, 12
  store i64 %9897, i64* %3, align 8
  %9898 = inttoptr i64 %9896 to i32*
  %9899 = load i32, i32* %9898, align 4
  %9900 = sext i32 %9899 to i64
  %9901 = mul nsw i64 %9900, 104
  store i64 %9901, i64* %RCX.i4050.pre-phi, align 8
  %9902 = lshr i64 %9901, 63
  %9903 = add i64 %9901, %9894
  store i64 %9903, i64* %RAX.i1555, align 8
  %9904 = icmp ult i64 %9903, %9894
  %9905 = icmp ult i64 %9903, %9901
  %9906 = or i1 %9904, %9905
  %9907 = zext i1 %9906 to i8
  store i8 %9907, i8* %19, align 1
  %9908 = trunc i64 %9903 to i32
  %9909 = and i32 %9908, 255
  %9910 = tail call i32 @llvm.ctpop.i32(i32 %9909)
  %9911 = trunc i32 %9910 to i8
  %9912 = and i8 %9911, 1
  %9913 = xor i8 %9912, 1
  store i8 %9913, i8* %26, align 1
  %9914 = xor i64 %9901, %9894
  %9915 = xor i64 %9914, %9903
  %9916 = lshr i64 %9915, 4
  %9917 = trunc i64 %9916 to i8
  %9918 = and i8 %9917, 1
  store i8 %9918, i8* %31, align 1
  %9919 = icmp eq i64 %9903, 0
  %9920 = zext i1 %9919 to i8
  store i8 %9920, i8* %34, align 1
  %9921 = lshr i64 %9903, 63
  %9922 = trunc i64 %9921 to i8
  store i8 %9922, i8* %37, align 1
  %9923 = lshr i64 %9894, 63
  %9924 = xor i64 %9921, %9923
  %9925 = xor i64 %9921, %9902
  %9926 = add nuw nsw i64 %9924, %9925
  %9927 = icmp eq i64 %9926, 2
  %9928 = zext i1 %9927 to i8
  store i8 %9928, i8* %43, align 1
  %9929 = add i64 %9903, 60
  %9930 = add i64 %9893, 26
  store i64 %9930, i64* %3, align 8
  %9931 = inttoptr i64 %9929 to i32*
  store i32 5, i32* %9931, align 4
  %9932 = load i64, i64* %3, align 8
  %9933 = add i64 %9932, 481
  br label %block_.L_41db4a

block_.L_41d96e:                                  ; preds = %block_41d8d6
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i4050.pre-phi, align 8
  %9934 = load i64, i64* %RBP.i, align 8
  %9935 = add i64 %9934, -176
  %9936 = add i64 %9893, 27
  store i64 %9936, i64* %3, align 8
  %9937 = inttoptr i64 %9935 to i32*
  %9938 = load i32, i32* %9937, align 4
  %9939 = sext i32 %9938 to i64
  %9940 = mul nsw i64 %9939, 76
  store i64 %9940, i64* %RDX.i4244, align 8
  %9941 = lshr i64 %9940, 63
  %9942 = add i64 %9940, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %9942, i64* %RCX.i4050.pre-phi, align 8
  %9943 = icmp ult i64 %9942, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %9944 = icmp ult i64 %9942, %9940
  %9945 = or i1 %9943, %9944
  %9946 = zext i1 %9945 to i8
  store i8 %9946, i8* %19, align 1
  %9947 = trunc i64 %9942 to i32
  %9948 = and i32 %9947, 252
  %9949 = tail call i32 @llvm.ctpop.i32(i32 %9948)
  %9950 = trunc i32 %9949 to i8
  %9951 = and i8 %9950, 1
  %9952 = xor i8 %9951, 1
  store i8 %9952, i8* %26, align 1
  %9953 = xor i64 %9940, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %9954 = xor i64 %9953, %9942
  %9955 = lshr i64 %9954, 4
  %9956 = trunc i64 %9955 to i8
  %9957 = and i8 %9956, 1
  store i8 %9957, i8* %31, align 1
  %9958 = icmp eq i64 %9942, 0
  %9959 = zext i1 %9958 to i8
  store i8 %9959, i8* %34, align 1
  %9960 = lshr i64 %9942, 63
  %9961 = trunc i64 %9960 to i8
  store i8 %9961, i8* %37, align 1
  %9962 = xor i64 %9960, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %9963 = xor i64 %9960, %9941
  %9964 = add nuw nsw i64 %9962, %9963
  %9965 = icmp eq i64 %9964, 2
  %9966 = zext i1 %9965 to i8
  store i8 %9966, i8* %43, align 1
  %9967 = add i64 %9940, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 12)
  %9968 = add i64 %9893, 37
  store i64 %9968, i64* %3, align 8
  %9969 = inttoptr i64 %9967 to i32*
  %9970 = load i32, i32* %9969, align 4
  %9971 = zext i32 %9970 to i64
  store i64 %9971, i64* %RSI.i4246, align 8
  %9972 = add i64 %9893, 44
  store i64 %9972, i64* %3, align 8
  %9973 = load i32, i32* %9937, align 4
  %9974 = sext i32 %9973 to i64
  %9975 = mul nsw i64 %9974, 380
  store i64 %9975, i64* %RCX.i4050.pre-phi, align 8
  %9976 = lshr i64 %9975, 63
  %9977 = load i64, i64* %RAX.i1555, align 8
  %9978 = add i64 %9975, %9977
  store i64 %9978, i64* %RAX.i1555, align 8
  %9979 = icmp ult i64 %9978, %9977
  %9980 = icmp ult i64 %9978, %9975
  %9981 = or i1 %9979, %9980
  %9982 = zext i1 %9981 to i8
  store i8 %9982, i8* %19, align 1
  %9983 = trunc i64 %9978 to i32
  %9984 = and i32 %9983, 255
  %9985 = tail call i32 @llvm.ctpop.i32(i32 %9984)
  %9986 = trunc i32 %9985 to i8
  %9987 = and i8 %9986, 1
  %9988 = xor i8 %9987, 1
  store i8 %9988, i8* %26, align 1
  %9989 = xor i64 %9975, %9977
  %9990 = xor i64 %9989, %9978
  %9991 = lshr i64 %9990, 4
  %9992 = trunc i64 %9991 to i8
  %9993 = and i8 %9992, 1
  store i8 %9993, i8* %31, align 1
  %9994 = icmp eq i64 %9978, 0
  %9995 = zext i1 %9994 to i8
  store i8 %9995, i8* %34, align 1
  %9996 = lshr i64 %9978, 63
  %9997 = trunc i64 %9996 to i8
  store i8 %9997, i8* %37, align 1
  %9998 = lshr i64 %9977, 63
  %9999 = xor i64 %9996, %9998
  %10000 = xor i64 %9996, %9976
  %10001 = add nuw nsw i64 %9999, %10000
  %10002 = icmp eq i64 %10001, 2
  %10003 = zext i1 %10002 to i8
  store i8 %10003, i8* %43, align 1
  %10004 = add i64 %9978, 4
  %10005 = add i64 %9893, 57
  store i64 %10005, i64* %3, align 8
  %10006 = inttoptr i64 %10004 to i32*
  %10007 = load i32, i32* %10006, align 4
  %10008 = sub i32 %9970, %10007
  %10009 = icmp ult i32 %9970, %10007
  %10010 = zext i1 %10009 to i8
  store i8 %10010, i8* %19, align 1
  %10011 = and i32 %10008, 255
  %10012 = tail call i32 @llvm.ctpop.i32(i32 %10011)
  %10013 = trunc i32 %10012 to i8
  %10014 = and i8 %10013, 1
  %10015 = xor i8 %10014, 1
  store i8 %10015, i8* %26, align 1
  %10016 = xor i32 %10007, %9970
  %10017 = xor i32 %10016, %10008
  %10018 = lshr i32 %10017, 4
  %10019 = trunc i32 %10018 to i8
  %10020 = and i8 %10019, 1
  store i8 %10020, i8* %31, align 1
  %10021 = icmp eq i32 %10008, 0
  %10022 = zext i1 %10021 to i8
  store i8 %10022, i8* %34, align 1
  %10023 = lshr i32 %10008, 31
  %10024 = trunc i32 %10023 to i8
  store i8 %10024, i8* %37, align 1
  %10025 = lshr i32 %9970, 31
  %10026 = lshr i32 %10007, 31
  %10027 = xor i32 %10026, %10025
  %10028 = xor i32 %10023, %10025
  %10029 = add nuw nsw i32 %10028, %10027
  %10030 = icmp eq i32 %10029, 2
  %10031 = zext i1 %10030 to i8
  store i8 %10031, i8* %43, align 1
  %.v365 = select i1 %10021, i64 63, i64 171
  %10032 = add i64 %9893, %.v365
  store i64 %10032, i64* %3, align 8
  br i1 %10021, label %block_41d9ad, label %block_.L_41d96e.block_.L_41da19_crit_edge

block_.L_41d96e.block_.L_41da19_crit_edge:        ; preds = %block_.L_41d96e
  %.pre255 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41da19

block_41d9ad:                                     ; preds = %block_.L_41d96e
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %10033 = load i64, i64* %RBP.i, align 8
  %10034 = add i64 %10033, -176
  %10035 = add i64 %10032, 17
  store i64 %10035, i64* %3, align 8
  %10036 = inttoptr i64 %10034 to i32*
  %10037 = load i32, i32* %10036, align 4
  %10038 = sext i32 %10037 to i64
  %10039 = mul nsw i64 %10038, 380
  store i64 %10039, i64* %RCX.i4050.pre-phi, align 8
  %10040 = lshr i64 %10039, 63
  %10041 = add i64 %10039, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %10041, i64* %RAX.i1555, align 8
  %10042 = icmp ult i64 %10041, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %10043 = icmp ult i64 %10041, %10039
  %10044 = or i1 %10042, %10043
  %10045 = zext i1 %10044 to i8
  store i8 %10045, i8* %19, align 1
  %10046 = trunc i64 %10041 to i32
  %10047 = and i32 %10046, 252
  %10048 = tail call i32 @llvm.ctpop.i32(i32 %10047)
  %10049 = trunc i32 %10048 to i8
  %10050 = and i8 %10049, 1
  %10051 = xor i8 %10050, 1
  store i8 %10051, i8* %26, align 1
  %10052 = xor i64 %10039, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %10053 = xor i64 %10052, %10041
  %10054 = lshr i64 %10053, 4
  %10055 = trunc i64 %10054 to i8
  %10056 = and i8 %10055, 1
  store i8 %10056, i8* %31, align 1
  %10057 = icmp eq i64 %10041, 0
  %10058 = zext i1 %10057 to i8
  store i8 %10058, i8* %34, align 1
  %10059 = lshr i64 %10041, 63
  %10060 = trunc i64 %10059 to i8
  store i8 %10060, i8* %37, align 1
  %10061 = xor i64 %10059, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %10062 = xor i64 %10059, %10040
  %10063 = add nuw nsw i64 %10061, %10062
  %10064 = icmp eq i64 %10063, 2
  %10065 = zext i1 %10064 to i8
  store i8 %10065, i8* %43, align 1
  %10066 = add i64 %10039, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 100)
  %10067 = add i64 %10032, 31
  store i64 %10067, i64* %3, align 8
  %10068 = inttoptr i64 %10066 to i32*
  %10069 = load i32, i32* %10068, align 4
  store i8 0, i8* %19, align 1
  %10070 = and i32 %10069, 255
  %10071 = tail call i32 @llvm.ctpop.i32(i32 %10070)
  %10072 = trunc i32 %10071 to i8
  %10073 = and i8 %10072, 1
  %10074 = xor i8 %10073, 1
  store i8 %10074, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10075 = icmp eq i32 %10069, 0
  %10076 = zext i1 %10075 to i8
  store i8 %10076, i8* %34, align 1
  %10077 = lshr i32 %10069, 31
  %10078 = trunc i32 %10077 to i8
  store i8 %10078, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v371 = select i1 %10075, i64 108, i64 37
  %10079 = add i64 %10032, %.v371
  store i64 %10079, i64* %3, align 8
  br i1 %10075, label %block_.L_41da19, label %block_41d9d2

block_41d9d2:                                     ; preds = %block_41d9ad
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %10080 = add i64 %10079, 17
  store i64 %10080, i64* %3, align 8
  %10081 = load i32, i32* %10036, align 4
  %10082 = sext i32 %10081 to i64
  %10083 = mul nsw i64 %10082, 380
  store i64 %10083, i64* %RCX.i4050.pre-phi, align 8
  %10084 = lshr i64 %10083, 63
  %10085 = add i64 %10083, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %10085, i64* %RAX.i1555, align 8
  %10086 = icmp ult i64 %10085, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %10087 = icmp ult i64 %10085, %10083
  %10088 = or i1 %10086, %10087
  %10089 = zext i1 %10088 to i8
  store i8 %10089, i8* %19, align 1
  %10090 = trunc i64 %10085 to i32
  %10091 = and i32 %10090, 252
  %10092 = tail call i32 @llvm.ctpop.i32(i32 %10091)
  %10093 = trunc i32 %10092 to i8
  %10094 = and i8 %10093, 1
  %10095 = xor i8 %10094, 1
  store i8 %10095, i8* %26, align 1
  %10096 = xor i64 %10083, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %10097 = xor i64 %10096, %10085
  %10098 = lshr i64 %10097, 4
  %10099 = trunc i64 %10098 to i8
  %10100 = and i8 %10099, 1
  store i8 %10100, i8* %31, align 1
  %10101 = icmp eq i64 %10085, 0
  %10102 = zext i1 %10101 to i8
  store i8 %10102, i8* %34, align 1
  %10103 = lshr i64 %10085, 63
  %10104 = trunc i64 %10103 to i8
  store i8 %10104, i8* %37, align 1
  %10105 = xor i64 %10103, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %10106 = xor i64 %10103, %10084
  %10107 = add nuw nsw i64 %10105, %10106
  %10108 = icmp eq i64 %10107, 2
  %10109 = zext i1 %10108 to i8
  store i8 %10109, i8* %43, align 1
  %10110 = add i64 %10083, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 180)
  %10111 = add i64 %10079, 34
  store i64 %10111, i64* %3, align 8
  %10112 = inttoptr i64 %10110 to i32*
  %10113 = load i32, i32* %10112, align 4
  store i8 0, i8* %19, align 1
  %10114 = and i32 %10113, 255
  %10115 = tail call i32 @llvm.ctpop.i32(i32 %10114)
  %10116 = trunc i32 %10115 to i8
  %10117 = and i8 %10116, 1
  %10118 = xor i8 %10117, 1
  store i8 %10118, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10119 = icmp eq i32 %10113, 0
  %10120 = zext i1 %10119 to i8
  store i8 %10120, i8* %34, align 1
  %10121 = lshr i32 %10113, 31
  %10122 = trunc i32 %10121 to i8
  store i8 %10122, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v372 = select i1 %10119, i64 40, i64 71
  %10123 = add i64 %10079, %.v372
  store i64 %10123, i64* %3, align 8
  br i1 %10119, label %block_41d9fa, label %block_.L_41da19

block_41d9fa:                                     ; preds = %block_41d9d2
  %10124 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %10124, i64* %RAX.i1555, align 8
  %10125 = add i64 %10033, -32
  %10126 = add i64 %10123, 12
  store i64 %10126, i64* %3, align 8
  %10127 = inttoptr i64 %10125 to i32*
  %10128 = load i32, i32* %10127, align 4
  %10129 = sext i32 %10128 to i64
  %10130 = mul nsw i64 %10129, 104
  store i64 %10130, i64* %RCX.i4050.pre-phi, align 8
  %10131 = lshr i64 %10130, 63
  %10132 = add i64 %10130, %10124
  store i64 %10132, i64* %RAX.i1555, align 8
  %10133 = icmp ult i64 %10132, %10124
  %10134 = icmp ult i64 %10132, %10130
  %10135 = or i1 %10133, %10134
  %10136 = zext i1 %10135 to i8
  store i8 %10136, i8* %19, align 1
  %10137 = trunc i64 %10132 to i32
  %10138 = and i32 %10137, 255
  %10139 = tail call i32 @llvm.ctpop.i32(i32 %10138)
  %10140 = trunc i32 %10139 to i8
  %10141 = and i8 %10140, 1
  %10142 = xor i8 %10141, 1
  store i8 %10142, i8* %26, align 1
  %10143 = xor i64 %10130, %10124
  %10144 = xor i64 %10143, %10132
  %10145 = lshr i64 %10144, 4
  %10146 = trunc i64 %10145 to i8
  %10147 = and i8 %10146, 1
  store i8 %10147, i8* %31, align 1
  %10148 = icmp eq i64 %10132, 0
  %10149 = zext i1 %10148 to i8
  store i8 %10149, i8* %34, align 1
  %10150 = lshr i64 %10132, 63
  %10151 = trunc i64 %10150 to i8
  store i8 %10151, i8* %37, align 1
  %10152 = lshr i64 %10124, 63
  %10153 = xor i64 %10150, %10152
  %10154 = xor i64 %10150, %10131
  %10155 = add nuw nsw i64 %10153, %10154
  %10156 = icmp eq i64 %10155, 2
  %10157 = zext i1 %10156 to i8
  store i8 %10157, i8* %43, align 1
  %10158 = add i64 %10132, 60
  %10159 = add i64 %10123, 26
  store i64 %10159, i64* %3, align 8
  %10160 = inttoptr i64 %10158 to i32*
  store i32 6, i32* %10160, align 4
  %10161 = load i64, i64* %3, align 8
  %10162 = add i64 %10161, 305
  br label %block_.L_41db45

block_.L_41da19:                                  ; preds = %block_41d9d2, %block_.L_41d96e.block_.L_41da19_crit_edge, %block_41d9ad
  %10163 = phi i64 [ %10033, %block_41d9d2 ], [ %10033, %block_41d9ad ], [ %.pre255, %block_.L_41d96e.block_.L_41da19_crit_edge ]
  %10164 = phi i64 [ %10123, %block_41d9d2 ], [ %10079, %block_41d9ad ], [ %10032, %block_.L_41d96e.block_.L_41da19_crit_edge ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %10165 = add i64 %10163, -176
  %10166 = add i64 %10164, 17
  store i64 %10166, i64* %3, align 8
  %10167 = inttoptr i64 %10165 to i32*
  %10168 = load i32, i32* %10167, align 4
  %10169 = sext i32 %10168 to i64
  %10170 = mul nsw i64 %10169, 76
  store i64 %10170, i64* %RCX.i4050.pre-phi, align 8
  %10171 = lshr i64 %10170, 63
  %10172 = add i64 %10170, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %10172, i64* %RAX.i1555, align 8
  %10173 = icmp ult i64 %10172, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10174 = icmp ult i64 %10172, %10170
  %10175 = or i1 %10173, %10174
  %10176 = zext i1 %10175 to i8
  store i8 %10176, i8* %19, align 1
  %10177 = trunc i64 %10172 to i32
  %10178 = and i32 %10177, 252
  %10179 = tail call i32 @llvm.ctpop.i32(i32 %10178)
  %10180 = trunc i32 %10179 to i8
  %10181 = and i8 %10180, 1
  %10182 = xor i8 %10181, 1
  store i8 %10182, i8* %26, align 1
  %10183 = xor i64 %10170, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10184 = xor i64 %10183, %10172
  %10185 = lshr i64 %10184, 4
  %10186 = trunc i64 %10185 to i8
  %10187 = and i8 %10186, 1
  store i8 %10187, i8* %31, align 1
  %10188 = icmp eq i64 %10172, 0
  %10189 = zext i1 %10188 to i8
  store i8 %10189, i8* %34, align 1
  %10190 = lshr i64 %10172, 63
  %10191 = trunc i64 %10190 to i8
  store i8 %10191, i8* %37, align 1
  %10192 = xor i64 %10190, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %10193 = xor i64 %10190, %10171
  %10194 = add nuw nsw i64 %10192, %10193
  %10195 = icmp eq i64 %10194, 2
  %10196 = zext i1 %10195 to i8
  store i8 %10196, i8* %43, align 1
  %10197 = add i64 %10170, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 28)
  %10198 = add i64 %10164, 28
  store i64 %10198, i64* %3, align 8
  %10199 = inttoptr i64 %10197 to i32*
  %10200 = load i32, i32* %10199, align 4
  store i8 0, i8* %19, align 1
  %10201 = and i32 %10200, 255
  %10202 = tail call i32 @llvm.ctpop.i32(i32 %10201)
  %10203 = trunc i32 %10202 to i8
  %10204 = and i8 %10203, 1
  %10205 = xor i8 %10204, 1
  store i8 %10205, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10206 = icmp eq i32 %10200, 0
  %10207 = zext i1 %10206 to i8
  store i8 %10207, i8* %34, align 1
  %10208 = lshr i32 %10200, 31
  %10209 = trunc i32 %10208 to i8
  store i8 %10209, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v366 = select i1 %10206, i64 34, i64 65
  %10210 = add i64 %10164, %.v366
  store i64 %10210, i64* %3, align 8
  br i1 %10206, label %block_41da3b, label %block_.L_41da5a

block_41da3b:                                     ; preds = %block_.L_41da19
  %10211 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %10211, i64* %RAX.i1555, align 8
  %10212 = add i64 %10163, -32
  %10213 = add i64 %10210, 12
  store i64 %10213, i64* %3, align 8
  %10214 = inttoptr i64 %10212 to i32*
  %10215 = load i32, i32* %10214, align 4
  %10216 = sext i32 %10215 to i64
  %10217 = mul nsw i64 %10216, 104
  store i64 %10217, i64* %RCX.i4050.pre-phi, align 8
  %10218 = lshr i64 %10217, 63
  %10219 = add i64 %10217, %10211
  store i64 %10219, i64* %RAX.i1555, align 8
  %10220 = icmp ult i64 %10219, %10211
  %10221 = icmp ult i64 %10219, %10217
  %10222 = or i1 %10220, %10221
  %10223 = zext i1 %10222 to i8
  store i8 %10223, i8* %19, align 1
  %10224 = trunc i64 %10219 to i32
  %10225 = and i32 %10224, 255
  %10226 = tail call i32 @llvm.ctpop.i32(i32 %10225)
  %10227 = trunc i32 %10226 to i8
  %10228 = and i8 %10227, 1
  %10229 = xor i8 %10228, 1
  store i8 %10229, i8* %26, align 1
  %10230 = xor i64 %10217, %10211
  %10231 = xor i64 %10230, %10219
  %10232 = lshr i64 %10231, 4
  %10233 = trunc i64 %10232 to i8
  %10234 = and i8 %10233, 1
  store i8 %10234, i8* %31, align 1
  %10235 = icmp eq i64 %10219, 0
  %10236 = zext i1 %10235 to i8
  store i8 %10236, i8* %34, align 1
  %10237 = lshr i64 %10219, 63
  %10238 = trunc i64 %10237 to i8
  store i8 %10238, i8* %37, align 1
  %10239 = lshr i64 %10211, 63
  %10240 = xor i64 %10237, %10239
  %10241 = xor i64 %10237, %10218
  %10242 = add nuw nsw i64 %10240, %10241
  %10243 = icmp eq i64 %10242, 2
  %10244 = zext i1 %10243 to i8
  store i8 %10244, i8* %43, align 1
  %10245 = add i64 %10219, 60
  %10246 = add i64 %10210, 26
  store i64 %10246, i64* %3, align 8
  %10247 = inttoptr i64 %10245 to i32*
  store i32 0, i32* %10247, align 4
  %10248 = load i64, i64* %3, align 8
  %10249 = add i64 %10248, 235
  br label %block_.L_41db40

block_.L_41da5a:                                  ; preds = %block_.L_41da19
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %10250 = add i64 %10210, 17
  store i64 %10250, i64* %3, align 8
  %10251 = load i32, i32* %10167, align 4
  %10252 = sext i32 %10251 to i64
  %10253 = mul nsw i64 %10252, 76
  store i64 %10253, i64* %RCX.i4050.pre-phi, align 8
  %10254 = lshr i64 %10253, 63
  %10255 = add i64 %10253, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %10255, i64* %RAX.i1555, align 8
  %10256 = icmp ult i64 %10255, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10257 = icmp ult i64 %10255, %10253
  %10258 = or i1 %10256, %10257
  %10259 = zext i1 %10258 to i8
  store i8 %10259, i8* %19, align 1
  %10260 = trunc i64 %10255 to i32
  %10261 = and i32 %10260, 252
  %10262 = tail call i32 @llvm.ctpop.i32(i32 %10261)
  %10263 = trunc i32 %10262 to i8
  %10264 = and i8 %10263, 1
  %10265 = xor i8 %10264, 1
  store i8 %10265, i8* %26, align 1
  %10266 = xor i64 %10253, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10267 = xor i64 %10266, %10255
  %10268 = lshr i64 %10267, 4
  %10269 = trunc i64 %10268 to i8
  %10270 = and i8 %10269, 1
  store i8 %10270, i8* %31, align 1
  %10271 = icmp eq i64 %10255, 0
  %10272 = zext i1 %10271 to i8
  store i8 %10272, i8* %34, align 1
  %10273 = lshr i64 %10255, 63
  %10274 = trunc i64 %10273 to i8
  store i8 %10274, i8* %37, align 1
  %10275 = xor i64 %10273, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %10276 = xor i64 %10273, %10254
  %10277 = add nuw nsw i64 %10275, %10276
  %10278 = icmp eq i64 %10277, 2
  %10279 = zext i1 %10278 to i8
  store i8 %10279, i8* %43, align 1
  %10280 = add i64 %10253, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 28)
  %10281 = add i64 %10210, 28
  store i64 %10281, i64* %3, align 8
  %10282 = inttoptr i64 %10280 to i32*
  %10283 = load i32, i32* %10282, align 4
  %10284 = add i32 %10283, -2
  %10285 = icmp ult i32 %10283, 2
  %10286 = zext i1 %10285 to i8
  store i8 %10286, i8* %19, align 1
  %10287 = and i32 %10284, 255
  %10288 = tail call i32 @llvm.ctpop.i32(i32 %10287)
  %10289 = trunc i32 %10288 to i8
  %10290 = and i8 %10289, 1
  %10291 = xor i8 %10290, 1
  store i8 %10291, i8* %26, align 1
  %10292 = xor i32 %10284, %10283
  %10293 = lshr i32 %10292, 4
  %10294 = trunc i32 %10293 to i8
  %10295 = and i8 %10294, 1
  store i8 %10295, i8* %31, align 1
  %10296 = icmp eq i32 %10284, 0
  %10297 = zext i1 %10296 to i8
  store i8 %10297, i8* %34, align 1
  %10298 = lshr i32 %10284, 31
  %10299 = trunc i32 %10298 to i8
  store i8 %10299, i8* %37, align 1
  %10300 = lshr i32 %10283, 31
  %10301 = xor i32 %10298, %10300
  %10302 = add nuw nsw i32 %10301, %10300
  %10303 = icmp eq i32 %10302, 2
  %10304 = zext i1 %10303 to i8
  store i8 %10304, i8* %43, align 1
  %.v367 = select i1 %10296, i64 34, i64 65
  %10305 = add i64 %10210, %.v367
  store i64 %10305, i64* %3, align 8
  br i1 %10296, label %block_41da7c, label %block_.L_41da9b

block_41da7c:                                     ; preds = %block_.L_41da5a
  %10306 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %10306, i64* %RAX.i1555, align 8
  %10307 = load i64, i64* %RBP.i, align 8
  %10308 = add i64 %10307, -32
  %10309 = add i64 %10305, 12
  store i64 %10309, i64* %3, align 8
  %10310 = inttoptr i64 %10308 to i32*
  %10311 = load i32, i32* %10310, align 4
  %10312 = sext i32 %10311 to i64
  %10313 = mul nsw i64 %10312, 104
  store i64 %10313, i64* %RCX.i4050.pre-phi, align 8
  %10314 = lshr i64 %10313, 63
  %10315 = add i64 %10313, %10306
  store i64 %10315, i64* %RAX.i1555, align 8
  %10316 = icmp ult i64 %10315, %10306
  %10317 = icmp ult i64 %10315, %10313
  %10318 = or i1 %10316, %10317
  %10319 = zext i1 %10318 to i8
  store i8 %10319, i8* %19, align 1
  %10320 = trunc i64 %10315 to i32
  %10321 = and i32 %10320, 255
  %10322 = tail call i32 @llvm.ctpop.i32(i32 %10321)
  %10323 = trunc i32 %10322 to i8
  %10324 = and i8 %10323, 1
  %10325 = xor i8 %10324, 1
  store i8 %10325, i8* %26, align 1
  %10326 = xor i64 %10313, %10306
  %10327 = xor i64 %10326, %10315
  %10328 = lshr i64 %10327, 4
  %10329 = trunc i64 %10328 to i8
  %10330 = and i8 %10329, 1
  store i8 %10330, i8* %31, align 1
  %10331 = icmp eq i64 %10315, 0
  %10332 = zext i1 %10331 to i8
  store i8 %10332, i8* %34, align 1
  %10333 = lshr i64 %10315, 63
  %10334 = trunc i64 %10333 to i8
  store i8 %10334, i8* %37, align 1
  %10335 = lshr i64 %10306, 63
  %10336 = xor i64 %10333, %10335
  %10337 = xor i64 %10333, %10314
  %10338 = add nuw nsw i64 %10336, %10337
  %10339 = icmp eq i64 %10338, 2
  %10340 = zext i1 %10339 to i8
  store i8 %10340, i8* %43, align 1
  %10341 = add i64 %10315, 60
  %10342 = add i64 %10305, 26
  store i64 %10342, i64* %3, align 8
  %10343 = inttoptr i64 %10341 to i32*
  store i32 2, i32* %10343, align 4
  %10344 = load i64, i64* %3, align 8
  %10345 = add i64 %10344, 165
  br label %block_.L_41db3b

block_.L_41da9b:                                  ; preds = %block_.L_41da5a
  %10346 = load i64, i64* %RBP.i, align 8
  %10347 = add i64 %10346, -176
  %10348 = add i64 %10305, 6
  store i64 %10348, i64* %3, align 8
  %10349 = inttoptr i64 %10347 to i32*
  %10350 = load i32, i32* %10349, align 4
  %10351 = zext i32 %10350 to i64
  store i64 %10351, i64* %RDI.i4254, align 8
  %10352 = add i64 %10305, 9109
  %10353 = add i64 %10305, 11
  %10354 = load i64, i64* %6, align 8
  %10355 = add i64 %10354, -8
  %10356 = inttoptr i64 %10355 to i64*
  store i64 %10353, i64* %10356, align 8
  store i64 %10355, i64* %6, align 8
  store i64 %10352, i64* %3, align 8
  %call2_41daa1 = tail call %struct.Memory* @sub_41fe30.dragon_invincible(%struct.State* nonnull %0, i64 %10352, %struct.Memory* %MEMORY.83)
  %10357 = load i32, i32* %EAX.i4253, align 4
  %10358 = load i64, i64* %3, align 8
  store i8 0, i8* %19, align 1
  %10359 = and i32 %10357, 255
  %10360 = tail call i32 @llvm.ctpop.i32(i32 %10359)
  %10361 = trunc i32 %10360 to i8
  %10362 = and i8 %10361, 1
  %10363 = xor i8 %10362, 1
  store i8 %10363, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10364 = icmp eq i32 %10357, 0
  %10365 = zext i1 %10364 to i8
  store i8 %10365, i8* %34, align 1
  %10366 = lshr i32 %10357, 31
  %10367 = trunc i32 %10366 to i8
  store i8 %10367, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v368 = select i1 %10364, i64 40, i64 9
  %10368 = add i64 %10358, %.v368
  store i64 %10368, i64* %3, align 8
  br i1 %10364, label %block_.L_41dace, label %block_41daaf

block_41daaf:                                     ; preds = %block_.L_41da9b
  %10369 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %10369, i64* %RAX.i1555, align 8
  %10370 = load i64, i64* %RBP.i, align 8
  %10371 = add i64 %10370, -32
  %10372 = add i64 %10368, 12
  store i64 %10372, i64* %3, align 8
  %10373 = inttoptr i64 %10371 to i32*
  %10374 = load i32, i32* %10373, align 4
  %10375 = sext i32 %10374 to i64
  %10376 = mul nsw i64 %10375, 104
  store i64 %10376, i64* %RCX.i4050.pre-phi, align 8
  %10377 = lshr i64 %10376, 63
  %10378 = add i64 %10376, %10369
  store i64 %10378, i64* %RAX.i1555, align 8
  %10379 = icmp ult i64 %10378, %10369
  %10380 = icmp ult i64 %10378, %10376
  %10381 = or i1 %10379, %10380
  %10382 = zext i1 %10381 to i8
  store i8 %10382, i8* %19, align 1
  %10383 = trunc i64 %10378 to i32
  %10384 = and i32 %10383, 255
  %10385 = tail call i32 @llvm.ctpop.i32(i32 %10384)
  %10386 = trunc i32 %10385 to i8
  %10387 = and i8 %10386, 1
  %10388 = xor i8 %10387, 1
  store i8 %10388, i8* %26, align 1
  %10389 = xor i64 %10376, %10369
  %10390 = xor i64 %10389, %10378
  %10391 = lshr i64 %10390, 4
  %10392 = trunc i64 %10391 to i8
  %10393 = and i8 %10392, 1
  store i8 %10393, i8* %31, align 1
  %10394 = icmp eq i64 %10378, 0
  %10395 = zext i1 %10394 to i8
  store i8 %10395, i8* %34, align 1
  %10396 = lshr i64 %10378, 63
  %10397 = trunc i64 %10396 to i8
  store i8 %10397, i8* %37, align 1
  %10398 = lshr i64 %10369, 63
  %10399 = xor i64 %10396, %10398
  %10400 = xor i64 %10396, %10377
  %10401 = add nuw nsw i64 %10399, %10400
  %10402 = icmp eq i64 %10401, 2
  %10403 = zext i1 %10402 to i8
  store i8 %10403, i8* %43, align 1
  %10404 = add i64 %10378, 60
  %10405 = add i64 %10368, 26
  store i64 %10405, i64* %3, align 8
  %10406 = inttoptr i64 %10404 to i32*
  store i32 9, i32* %10406, align 4
  %10407 = load i64, i64* %3, align 8
  %10408 = add i64 %10407, 109
  br label %block_.L_41db36

block_.L_41dace:                                  ; preds = %block_.L_41da9b
  %10409 = load i64, i64* %RBP.i, align 8
  %10410 = add i64 %10409, -172
  %10411 = add i64 %10368, 7
  store i64 %10411, i64* %3, align 8
  %10412 = inttoptr i64 %10410 to i32*
  %10413 = load i32, i32* %10412, align 4
  %10414 = add i32 %10413, -6
  %10415 = icmp ult i32 %10413, 6
  %10416 = zext i1 %10415 to i8
  store i8 %10416, i8* %19, align 1
  %10417 = and i32 %10414, 255
  %10418 = tail call i32 @llvm.ctpop.i32(i32 %10417)
  %10419 = trunc i32 %10418 to i8
  %10420 = and i8 %10419, 1
  %10421 = xor i8 %10420, 1
  store i8 %10421, i8* %26, align 1
  %10422 = xor i32 %10414, %10413
  %10423 = lshr i32 %10422, 4
  %10424 = trunc i32 %10423 to i8
  %10425 = and i8 %10424, 1
  store i8 %10425, i8* %31, align 1
  %10426 = icmp eq i32 %10414, 0
  %10427 = zext i1 %10426 to i8
  store i8 %10427, i8* %34, align 1
  %10428 = lshr i32 %10414, 31
  %10429 = trunc i32 %10428 to i8
  store i8 %10429, i8* %37, align 1
  %10430 = lshr i32 %10413, 31
  %10431 = xor i32 %10428, %10430
  %10432 = add nuw nsw i32 %10431, %10430
  %10433 = icmp eq i32 %10432, 2
  %10434 = zext i1 %10433 to i8
  store i8 %10434, i8* %43, align 1
  %10435 = icmp ne i8 %10429, 0
  %10436 = xor i1 %10435, %10433
  %.v369 = select i1 %10436, i64 13, i64 42
  %10437 = add i64 %10368, %.v369
  store i64 %10437, i64* %3, align 8
  br i1 %10436, label %block_41dadb, label %block_.L_41daf8

block_41dadb:                                     ; preds = %block_.L_41dace
  %10438 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %10438, i64* %RAX.i1555, align 8
  %10439 = add i64 %10409, -32
  %10440 = add i64 %10437, 12
  store i64 %10440, i64* %3, align 8
  %10441 = inttoptr i64 %10439 to i32*
  %10442 = load i32, i32* %10441, align 4
  %10443 = sext i32 %10442 to i64
  %10444 = mul nsw i64 %10443, 104
  store i64 %10444, i64* %RCX.i4050.pre-phi, align 8
  %10445 = lshr i64 %10444, 63
  %10446 = add i64 %10444, %10438
  store i64 %10446, i64* %RAX.i1555, align 8
  %10447 = icmp ult i64 %10446, %10438
  %10448 = icmp ult i64 %10446, %10444
  %10449 = or i1 %10447, %10448
  %10450 = zext i1 %10449 to i8
  store i8 %10450, i8* %19, align 1
  %10451 = trunc i64 %10446 to i32
  %10452 = and i32 %10451, 255
  %10453 = tail call i32 @llvm.ctpop.i32(i32 %10452)
  %10454 = trunc i32 %10453 to i8
  %10455 = and i8 %10454, 1
  %10456 = xor i8 %10455, 1
  store i8 %10456, i8* %26, align 1
  %10457 = xor i64 %10444, %10438
  %10458 = xor i64 %10457, %10446
  %10459 = lshr i64 %10458, 4
  %10460 = trunc i64 %10459 to i8
  %10461 = and i8 %10460, 1
  store i8 %10461, i8* %31, align 1
  %10462 = icmp eq i64 %10446, 0
  %10463 = zext i1 %10462 to i8
  store i8 %10463, i8* %34, align 1
  %10464 = lshr i64 %10446, 63
  %10465 = trunc i64 %10464 to i8
  store i8 %10465, i8* %37, align 1
  %10466 = lshr i64 %10438, 63
  %10467 = xor i64 %10464, %10466
  %10468 = xor i64 %10464, %10445
  %10469 = add nuw nsw i64 %10467, %10468
  %10470 = icmp eq i64 %10469, 2
  %10471 = zext i1 %10470 to i8
  store i8 %10471, i8* %43, align 1
  %10472 = add i64 %10446, 52
  %10473 = add i64 %10437, 23
  store i64 %10473, i64* %3, align 8
  %10474 = inttoptr i64 %10472 to i32*
  %10475 = load i32, i32* %10474, align 4
  %10476 = add i32 %10475, -20
  %10477 = icmp ult i32 %10475, 20
  %10478 = zext i1 %10477 to i8
  store i8 %10478, i8* %19, align 1
  %10479 = and i32 %10476, 255
  %10480 = tail call i32 @llvm.ctpop.i32(i32 %10479)
  %10481 = trunc i32 %10480 to i8
  %10482 = and i8 %10481, 1
  %10483 = xor i8 %10482, 1
  store i8 %10483, i8* %26, align 1
  %10484 = xor i32 %10475, 16
  %10485 = xor i32 %10484, %10476
  %10486 = lshr i32 %10485, 4
  %10487 = trunc i32 %10486 to i8
  %10488 = and i8 %10487, 1
  store i8 %10488, i8* %31, align 1
  %10489 = icmp eq i32 %10476, 0
  %10490 = zext i1 %10489 to i8
  store i8 %10490, i8* %34, align 1
  %10491 = lshr i32 %10476, 31
  %10492 = trunc i32 %10491 to i8
  store i8 %10492, i8* %37, align 1
  %10493 = lshr i32 %10475, 31
  %10494 = xor i32 %10491, %10493
  %10495 = add nuw nsw i32 %10494, %10493
  %10496 = icmp eq i32 %10495, 2
  %10497 = zext i1 %10496 to i8
  store i8 %10497, i8* %43, align 1
  %10498 = icmp ne i8 %10492, 0
  %10499 = xor i1 %10498, %10496
  %10500 = or i1 %10489, %10499
  %.v370 = select i1 %10500, i64 60, i64 29
  %10501 = add i64 %10437, %.v370
  store i64 %10501, i64* %3, align 8
  br i1 %10500, label %block_.L_41db17, label %block_41dadb.block_.L_41daf8_crit_edge

block_41dadb.block_.L_41daf8_crit_edge:           ; preds = %block_41dadb
  %.pre256 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41daf8

block_.L_41daf8:                                  ; preds = %block_41dadb.block_.L_41daf8_crit_edge, %block_.L_41dace
  %10502 = phi i64 [ %10409, %block_.L_41dace ], [ %.pre256, %block_41dadb.block_.L_41daf8_crit_edge ]
  %10503 = phi i64 [ %10437, %block_.L_41dace ], [ %10501, %block_41dadb.block_.L_41daf8_crit_edge ]
  %10504 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %10504, i64* %RAX.i1555, align 8
  %10505 = add i64 %10502, -32
  %10506 = add i64 %10503, 12
  store i64 %10506, i64* %3, align 8
  %10507 = inttoptr i64 %10505 to i32*
  %10508 = load i32, i32* %10507, align 4
  %10509 = sext i32 %10508 to i64
  %10510 = mul nsw i64 %10509, 104
  store i64 %10510, i64* %RCX.i4050.pre-phi, align 8
  %10511 = lshr i64 %10510, 63
  %10512 = add i64 %10510, %10504
  store i64 %10512, i64* %RAX.i1555, align 8
  %10513 = icmp ult i64 %10512, %10504
  %10514 = icmp ult i64 %10512, %10510
  %10515 = or i1 %10513, %10514
  %10516 = zext i1 %10515 to i8
  store i8 %10516, i8* %19, align 1
  %10517 = trunc i64 %10512 to i32
  %10518 = and i32 %10517, 255
  %10519 = tail call i32 @llvm.ctpop.i32(i32 %10518)
  %10520 = trunc i32 %10519 to i8
  %10521 = and i8 %10520, 1
  %10522 = xor i8 %10521, 1
  store i8 %10522, i8* %26, align 1
  %10523 = xor i64 %10510, %10504
  %10524 = xor i64 %10523, %10512
  %10525 = lshr i64 %10524, 4
  %10526 = trunc i64 %10525 to i8
  %10527 = and i8 %10526, 1
  store i8 %10527, i8* %31, align 1
  %10528 = icmp eq i64 %10512, 0
  %10529 = zext i1 %10528 to i8
  store i8 %10529, i8* %34, align 1
  %10530 = lshr i64 %10512, 63
  %10531 = trunc i64 %10530 to i8
  store i8 %10531, i8* %37, align 1
  %10532 = lshr i64 %10504, 63
  %10533 = xor i64 %10530, %10532
  %10534 = xor i64 %10530, %10511
  %10535 = add nuw nsw i64 %10533, %10534
  %10536 = icmp eq i64 %10535, 2
  %10537 = zext i1 %10536 to i8
  store i8 %10537, i8* %43, align 1
  %10538 = add i64 %10512, 60
  %10539 = add i64 %10503, 26
  store i64 %10539, i64* %3, align 8
  %10540 = inttoptr i64 %10538 to i32*
  store i32 8, i32* %10540, align 4
  %10541 = load i64, i64* %3, align 8
  %10542 = add i64 %10541, 31
  store i64 %10542, i64* %3, align 8
  br label %block_.L_41db31

block_.L_41db17:                                  ; preds = %block_41dadb
  %10543 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %10543, i64* %RAX.i1555, align 8
  %10544 = load i64, i64* %RBP.i, align 8
  %10545 = add i64 %10544, -32
  %10546 = add i64 %10501, 12
  store i64 %10546, i64* %3, align 8
  %10547 = inttoptr i64 %10545 to i32*
  %10548 = load i32, i32* %10547, align 4
  %10549 = sext i32 %10548 to i64
  %10550 = mul nsw i64 %10549, 104
  store i64 %10550, i64* %RCX.i4050.pre-phi, align 8
  %10551 = lshr i64 %10550, 63
  %10552 = add i64 %10550, %10543
  store i64 %10552, i64* %RAX.i1555, align 8
  %10553 = icmp ult i64 %10552, %10543
  %10554 = icmp ult i64 %10552, %10550
  %10555 = or i1 %10553, %10554
  %10556 = zext i1 %10555 to i8
  store i8 %10556, i8* %19, align 1
  %10557 = trunc i64 %10552 to i32
  %10558 = and i32 %10557, 255
  %10559 = tail call i32 @llvm.ctpop.i32(i32 %10558)
  %10560 = trunc i32 %10559 to i8
  %10561 = and i8 %10560, 1
  %10562 = xor i8 %10561, 1
  store i8 %10562, i8* %26, align 1
  %10563 = xor i64 %10550, %10543
  %10564 = xor i64 %10563, %10552
  %10565 = lshr i64 %10564, 4
  %10566 = trunc i64 %10565 to i8
  %10567 = and i8 %10566, 1
  store i8 %10567, i8* %31, align 1
  %10568 = icmp eq i64 %10552, 0
  %10569 = zext i1 %10568 to i8
  store i8 %10569, i8* %34, align 1
  %10570 = lshr i64 %10552, 63
  %10571 = trunc i64 %10570 to i8
  store i8 %10571, i8* %37, align 1
  %10572 = lshr i64 %10543, 63
  %10573 = xor i64 %10570, %10572
  %10574 = xor i64 %10570, %10551
  %10575 = add nuw nsw i64 %10573, %10574
  %10576 = icmp eq i64 %10575, 2
  %10577 = zext i1 %10576 to i8
  store i8 %10577, i8* %43, align 1
  %10578 = add i64 %10552, 60
  %10579 = add i64 %10501, 26
  store i64 %10579, i64* %3, align 8
  %10580 = inttoptr i64 %10578 to i32*
  store i32 1, i32* %10580, align 4
  %.pre257 = load i64, i64* %3, align 8
  br label %block_.L_41db31

block_.L_41db31:                                  ; preds = %block_.L_41db17, %block_.L_41daf8
  %10581 = phi i64 [ %.pre257, %block_.L_41db17 ], [ %10542, %block_.L_41daf8 ]
  %10582 = add i64 %10581, 5
  store i64 %10582, i64* %3, align 8
  br label %block_.L_41db36

block_.L_41db36:                                  ; preds = %block_.L_41db31, %block_41daaf
  %storemerge163 = phi i64 [ %10408, %block_41daaf ], [ %10582, %block_.L_41db31 ]
  %10583 = add i64 %storemerge163, 5
  store i64 %10583, i64* %3, align 8
  br label %block_.L_41db3b

block_.L_41db3b:                                  ; preds = %block_.L_41db36, %block_41da7c
  %storemerge162 = phi i64 [ %10345, %block_41da7c ], [ %10583, %block_.L_41db36 ]
  %10584 = add i64 %storemerge162, 5
  store i64 %10584, i64* %3, align 8
  br label %block_.L_41db40

block_.L_41db40:                                  ; preds = %block_.L_41db3b, %block_41da3b
  %storemerge161 = phi i64 [ %10249, %block_41da3b ], [ %10584, %block_.L_41db3b ]
  %10585 = add i64 %storemerge161, 5
  store i64 %10585, i64* %3, align 8
  br label %block_.L_41db45

block_.L_41db45:                                  ; preds = %block_.L_41db40, %block_41d9fa
  %storemerge160 = phi i64 [ %10162, %block_41d9fa ], [ %10585, %block_.L_41db40 ]
  %10586 = add i64 %storemerge160, 5
  store i64 %10586, i64* %3, align 8
  br label %block_.L_41db4a

block_.L_41db4a:                                  ; preds = %block_.L_41db45, %block_41d94f
  %storemerge159 = phi i64 [ %9933, %block_41d94f ], [ %10586, %block_.L_41db45 ]
  %10587 = load i64, i64* %RBP.i, align 8
  %10588 = add i64 %10587, -32
  %10589 = add i64 %storemerge159, 8
  store i64 %10589, i64* %3, align 8
  %10590 = inttoptr i64 %10588 to i32*
  %10591 = load i32, i32* %10590, align 4
  %10592 = add i32 %10591, 1
  %10593 = zext i32 %10592 to i64
  store i64 %10593, i64* %RAX.i1555, align 8
  %10594 = icmp eq i32 %10591, -1
  %10595 = icmp eq i32 %10592, 0
  %10596 = or i1 %10594, %10595
  %10597 = zext i1 %10596 to i8
  store i8 %10597, i8* %19, align 1
  %10598 = and i32 %10592, 255
  %10599 = tail call i32 @llvm.ctpop.i32(i32 %10598)
  %10600 = trunc i32 %10599 to i8
  %10601 = and i8 %10600, 1
  %10602 = xor i8 %10601, 1
  store i8 %10602, i8* %26, align 1
  %10603 = xor i32 %10592, %10591
  %10604 = lshr i32 %10603, 4
  %10605 = trunc i32 %10604 to i8
  %10606 = and i8 %10605, 1
  store i8 %10606, i8* %31, align 1
  %10607 = zext i1 %10595 to i8
  store i8 %10607, i8* %34, align 1
  %10608 = lshr i32 %10592, 31
  %10609 = trunc i32 %10608 to i8
  store i8 %10609, i8* %37, align 1
  %10610 = lshr i32 %10591, 31
  %10611 = xor i32 %10608, %10610
  %10612 = add nuw nsw i32 %10611, %10608
  %10613 = icmp eq i32 %10612, 2
  %10614 = zext i1 %10613 to i8
  store i8 %10614, i8* %43, align 1
  %10615 = add i64 %storemerge159, 14
  store i64 %10615, i64* %3, align 8
  store i32 %10592, i32* %10590, align 4
  %10616 = load i64, i64* %3, align 8
  %10617 = add i64 %10616, -658
  store i64 %10617, i64* %3, align 8
  br label %block_.L_41d8c6

block_.L_41db5d:                                  ; preds = %block_.L_41d8c6
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57b0a2_type* @G__0x57b0a2 to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %10618 = add i64 %9731, add (i64 ptrtoint (%G_0xc53ea__rip__type* @G_0xc53ea__rip_ to i64), i64 17)
  %10619 = add i64 %9731, 25
  store i64 %10619, i64* %3, align 8
  %10620 = inttoptr i64 %10618 to i64*
  %10621 = load i64, i64* %10620, align 8
  store i64 %10621, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %10622 = add i64 %9731, 387187
  %10623 = add i64 %9731, 30
  %10624 = load i64, i64* %6, align 8
  %10625 = add i64 %10624, -8
  %10626 = inttoptr i64 %10625 to i64*
  store i64 %10623, i64* %10626, align 8
  store i64 %10625, i64* %6, align 8
  store i64 %10622, i64* %3, align 8
  %call2_41db76 = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %10622, %struct.Memory* %MEMORY.83)
  %10627 = load i64, i64* %3, align 8
  %10628 = load i32, i32* bitcast (%G_0x7ae44c_type* @G_0x7ae44c to i32*), align 8
  store i8 0, i8* %19, align 1
  %10629 = and i32 %10628, 255
  %10630 = tail call i32 @llvm.ctpop.i32(i32 %10629)
  %10631 = trunc i32 %10630 to i8
  %10632 = and i8 %10631, 1
  %10633 = xor i8 %10632, 1
  store i8 %10633, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10634 = icmp eq i32 %10628, 0
  %10635 = zext i1 %10634 to i8
  store i8 %10635, i8* %34, align 1
  %10636 = lshr i32 %10628, 31
  %10637 = trunc i32 %10636 to i8
  store i8 %10637, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %10638 = load i64, i64* %RBP.i, align 8
  %10639 = add i64 %10638, -1072
  %10640 = add i64 %10627, 16
  store i64 %10640, i64* %3, align 8
  %10641 = load i64, i64* %93, align 1
  %10642 = inttoptr i64 %10639 to i64*
  store i64 %10641, i64* %10642, align 8
  %10643 = load i64, i64* %3, align 8
  %10644 = load i8, i8* %34, align 1
  %10645 = icmp ne i8 %10644, 0
  %.v496 = select i1 %10645, i64 33, i64 6
  %10646 = add i64 %10643, %.v496
  store i64 %10646, i64* %3, align 8
  %cmpBr_41db8b = icmp eq i8 %10644, 1
  br i1 %cmpBr_41db8b, label %block_.L_41dbac, label %block_41db91

block_41db91:                                     ; preds = %block_.L_41db5d
  %10647 = load i32, i32* bitcast (%G_0x7ae448_type* @G_0x7ae448 to i32*), align 8
  %10648 = add i32 %10647, -8
  %10649 = icmp ult i32 %10647, 8
  %10650 = zext i1 %10649 to i8
  store i8 %10650, i8* %19, align 1
  %10651 = and i32 %10648, 255
  %10652 = tail call i32 @llvm.ctpop.i32(i32 %10651)
  %10653 = trunc i32 %10652 to i8
  %10654 = and i8 %10653, 1
  %10655 = xor i8 %10654, 1
  store i8 %10655, i8* %26, align 1
  %10656 = xor i32 %10648, %10647
  %10657 = lshr i32 %10656, 4
  %10658 = trunc i32 %10657 to i8
  %10659 = and i8 %10658, 1
  store i8 %10659, i8* %31, align 1
  %10660 = icmp eq i32 %10648, 0
  %10661 = zext i1 %10660 to i8
  store i8 %10661, i8* %34, align 1
  %10662 = lshr i32 %10648, 31
  %10663 = trunc i32 %10662 to i8
  store i8 %10663, i8* %37, align 1
  %10664 = lshr i32 %10647, 31
  %10665 = xor i32 %10662, %10664
  %10666 = add nuw nsw i32 %10665, %10664
  %10667 = icmp eq i32 %10666, 2
  %10668 = zext i1 %10667 to i8
  store i8 %10668, i8* %43, align 1
  %10669 = icmp ne i8 %10663, 0
  %10670 = xor i1 %10669, %10667
  %.v340 = select i1 %10670, i64 27, i64 14
  %10671 = add i64 %10646, %.v340
  store i64 %10671, i64* %3, align 8
  br i1 %10670, label %block_.L_41dbac, label %block_41db9f

block_41db9f:                                     ; preds = %block_41db91
  %10672 = load i64, i64* %RBP.i, align 8
  %10673 = add i64 %10672, -12
  %10674 = add i64 %10671, 3
  store i64 %10674, i64* %3, align 8
  %10675 = inttoptr i64 %10673 to i32*
  %10676 = load i32, i32* %10675, align 4
  %10677 = zext i32 %10676 to i64
  store i64 %10677, i64* %RDI.i4254, align 8
  %10678 = add i64 %10671, 338417
  %10679 = add i64 %10671, 8
  %10680 = load i64, i64* %6, align 8
  %10681 = add i64 %10680, -8
  %10682 = inttoptr i64 %10681 to i64*
  store i64 %10679, i64* %10682, align 8
  store i64 %10681, i64* %6, align 8
  store i64 %10678, i64* %3, align 8
  %call2_41dba2 = tail call %struct.Memory* @sub_470590.new_semeai(%struct.State* nonnull %0, i64 %10678, %struct.Memory* %call2_41db76)
  %10683 = load i64, i64* %3, align 8
  %10684 = add i64 %10683, 13
  store i64 %10684, i64* %3, align 8
  br label %block_.L_41dbb4

block_.L_41dbac:                                  ; preds = %block_41db91, %block_.L_41db5d
  %10685 = phi i64 [ %10671, %block_41db91 ], [ %10646, %block_.L_41db5d ]
  %10686 = load i64, i64* %RBP.i, align 8
  %10687 = add i64 %10686, -12
  %10688 = add i64 %10685, 3
  store i64 %10688, i64* %3, align 8
  %10689 = inttoptr i64 %10687 to i32*
  %10690 = load i32, i32* %10689, align 4
  %10691 = zext i32 %10690 to i64
  store i64 %10691, i64* %RDI.i4254, align 8
  %10692 = add i64 %10685, 331524
  %10693 = add i64 %10685, 8
  %10694 = load i64, i64* %6, align 8
  %10695 = add i64 %10694, -8
  %10696 = inttoptr i64 %10695 to i64*
  store i64 %10693, i64* %10696, align 8
  store i64 %10695, i64* %6, align 8
  store i64 %10692, i64* %3, align 8
  %call2_41dbaf = tail call %struct.Memory* @sub_46eab0.semeai(%struct.State* nonnull %0, i64 %10692, %struct.Memory* %call2_41db76)
  %.pre238 = load i64, i64* %3, align 8
  br label %block_.L_41dbb4

block_.L_41dbb4:                                  ; preds = %block_.L_41dbac, %block_41db9f
  %10697 = phi i64 [ %.pre238, %block_.L_41dbac ], [ %10684, %block_41db9f ]
  %MEMORY.97 = phi %struct.Memory* [ %call2_41dbaf, %block_.L_41dbac ], [ %call2_41dba2, %block_41db9f ]
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57b0b9_type* @G__0x57b0b9 to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %10698 = add i64 %10697, add (i64 ptrtoint (%G_0xc5393__rip__type* @G_0xc5393__rip_ to i64), i64 17)
  %10699 = add i64 %10697, 25
  store i64 %10699, i64* %3, align 8
  %10700 = inttoptr i64 %10698 to i64*
  %10701 = load i64, i64* %10700, align 8
  store i64 %10701, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %10702 = add i64 %10697, 387100
  %10703 = add i64 %10697, 30
  %10704 = load i64, i64* %6, align 8
  %10705 = add i64 %10704, -8
  %10706 = inttoptr i64 %10705 to i64*
  store i64 %10703, i64* %10706, align 8
  store i64 %10705, i64* %6, align 8
  store i64 %10702, i64* %3, align 8
  %call2_41dbcd = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %10702, %struct.Memory* %MEMORY.97)
  %10707 = load i64, i64* %RBP.i, align 8
  %10708 = add i64 %10707, -24
  %10709 = load i64, i64* %3, align 8
  %10710 = add i64 %10709, 7
  store i64 %10710, i64* %3, align 8
  %10711 = inttoptr i64 %10708 to i32*
  store i32 21, i32* %10711, align 4
  %10712 = load i64, i64* %RBP.i, align 8
  %10713 = add i64 %10712, -1080
  %10714 = load i64, i64* %3, align 8
  %10715 = add i64 %10714, 8
  store i64 %10715, i64* %3, align 8
  %10716 = load i64, i64* %93, align 1
  %10717 = inttoptr i64 %10713 to i64*
  store i64 %10716, i64* %10717, align 8
  %.pre239 = load i64, i64* %3, align 8
  br label %block_.L_41dbe1

block_.L_41dbe1:                                  ; preds = %block_.L_41dc3a, %block_.L_41dbb4
  %10718 = phi i64 [ %10911, %block_.L_41dc3a ], [ %.pre239, %block_.L_41dbb4 ]
  %10719 = load i64, i64* %RBP.i, align 8
  %10720 = add i64 %10719, -24
  %10721 = add i64 %10718, 7
  store i64 %10721, i64* %3, align 8
  %10722 = inttoptr i64 %10720 to i32*
  %10723 = load i32, i32* %10722, align 4
  %10724 = add i32 %10723, -400
  %10725 = icmp ult i32 %10723, 400
  %10726 = zext i1 %10725 to i8
  store i8 %10726, i8* %19, align 1
  %10727 = and i32 %10724, 255
  %10728 = tail call i32 @llvm.ctpop.i32(i32 %10727)
  %10729 = trunc i32 %10728 to i8
  %10730 = and i8 %10729, 1
  %10731 = xor i8 %10730, 1
  store i8 %10731, i8* %26, align 1
  %10732 = xor i32 %10723, 16
  %10733 = xor i32 %10732, %10724
  %10734 = lshr i32 %10733, 4
  %10735 = trunc i32 %10734 to i8
  %10736 = and i8 %10735, 1
  store i8 %10736, i8* %31, align 1
  %10737 = icmp eq i32 %10724, 0
  %10738 = zext i1 %10737 to i8
  store i8 %10738, i8* %34, align 1
  %10739 = lshr i32 %10724, 31
  %10740 = trunc i32 %10739 to i8
  store i8 %10740, i8* %37, align 1
  %10741 = lshr i32 %10723, 31
  %10742 = xor i32 %10739, %10741
  %10743 = add nuw nsw i32 %10742, %10741
  %10744 = icmp eq i32 %10743, 2
  %10745 = zext i1 %10744 to i8
  store i8 %10745, i8* %43, align 1
  %10746 = icmp ne i8 %10740, 0
  %10747 = xor i1 %10746, %10744
  %.v341 = select i1 %10747, i64 13, i64 108
  %10748 = add i64 %10718, %.v341
  store i64 %10748, i64* %3, align 8
  br i1 %10747, label %block_41dbee, label %block_.L_41dc4d

block_41dbee:                                     ; preds = %block_.L_41dbe1
  %10749 = add i64 %10748, 4
  store i64 %10749, i64* %3, align 8
  %10750 = load i32, i32* %10722, align 4
  %10751 = sext i32 %10750 to i64
  store i64 %10751, i64* %RAX.i1555, align 8
  %10752 = add nsw i64 %10751, 12099168
  %10753 = add i64 %10748, 12
  store i64 %10753, i64* %3, align 8
  %10754 = inttoptr i64 %10752 to i8*
  %10755 = load i8, i8* %10754, align 1
  %10756 = zext i8 %10755 to i64
  store i64 %10756, i64* %RCX.i4050.pre-phi, align 8
  %10757 = zext i8 %10755 to i32
  %10758 = add nsw i32 %10757, -3
  %10759 = icmp ult i8 %10755, 3
  %10760 = zext i1 %10759 to i8
  store i8 %10760, i8* %19, align 1
  %10761 = and i32 %10758, 255
  %10762 = tail call i32 @llvm.ctpop.i32(i32 %10761)
  %10763 = trunc i32 %10762 to i8
  %10764 = and i8 %10763, 1
  %10765 = xor i8 %10764, 1
  store i8 %10765, i8* %26, align 1
  %10766 = xor i32 %10758, %10757
  %10767 = lshr i32 %10766, 4
  %10768 = trunc i32 %10767 to i8
  %10769 = and i8 %10768, 1
  store i8 %10769, i8* %31, align 1
  %10770 = icmp eq i32 %10758, 0
  %10771 = zext i1 %10770 to i8
  store i8 %10771, i8* %34, align 1
  %10772 = lshr i32 %10758, 31
  %10773 = trunc i32 %10772 to i8
  store i8 %10773, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v363 = select i1 %10770, i64 76, i64 21
  %10774 = add i64 %10748, %.v363
  store i64 %10774, i64* %3, align 8
  br i1 %10770, label %block_.L_41dc3a, label %block_41dc03

block_41dc03:                                     ; preds = %block_41dbee
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %10775 = add i64 %10774, 14
  store i64 %10775, i64* %3, align 8
  %10776 = load i32, i32* %10722, align 4
  %10777 = sext i32 %10776 to i64
  %10778 = mul nsw i64 %10777, 76
  store i64 %10778, i64* %RCX.i4050.pre-phi, align 8
  %10779 = lshr i64 %10778, 63
  %10780 = add i64 %10778, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %10780, i64* %RDX.i4244, align 8
  %10781 = icmp ult i64 %10780, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10782 = icmp ult i64 %10780, %10778
  %10783 = or i1 %10781, %10782
  %10784 = zext i1 %10783 to i8
  store i8 %10784, i8* %19, align 1
  %10785 = trunc i64 %10780 to i32
  %10786 = and i32 %10785, 252
  %10787 = tail call i32 @llvm.ctpop.i32(i32 %10786)
  %10788 = trunc i32 %10787 to i8
  %10789 = and i8 %10788, 1
  %10790 = xor i8 %10789, 1
  store i8 %10790, i8* %26, align 1
  %10791 = xor i64 %10778, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %10792 = xor i64 %10791, %10780
  %10793 = lshr i64 %10792, 4
  %10794 = trunc i64 %10793 to i8
  %10795 = and i8 %10794, 1
  store i8 %10795, i8* %31, align 1
  %10796 = icmp eq i64 %10780, 0
  %10797 = zext i1 %10796 to i8
  store i8 %10797, i8* %34, align 1
  %10798 = lshr i64 %10780, 63
  %10799 = trunc i64 %10798 to i8
  store i8 %10799, i8* %37, align 1
  %10800 = xor i64 %10798, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %10801 = xor i64 %10798, %10779
  %10802 = add nuw nsw i64 %10800, %10801
  %10803 = icmp eq i64 %10802, 2
  %10804 = zext i1 %10803 to i8
  store i8 %10804, i8* %43, align 1
  %10805 = add i64 %10778, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 8)
  %10806 = add i64 %10774, 28
  store i64 %10806, i64* %3, align 8
  %10807 = inttoptr i64 %10805 to i32*
  %10808 = load i32, i32* %10807, align 4
  %10809 = sext i32 %10808 to i64
  %10810 = mul nsw i64 %10809, 76
  store i64 %10810, i64* %RCX.i4050.pre-phi, align 8
  %10811 = lshr i64 %10810, 63
  %10812 = load i64, i64* %RAX.i1555, align 8
  %10813 = add i64 %10810, %10812
  store i64 %10813, i64* %RDX.i4244, align 8
  %10814 = icmp ult i64 %10813, %10812
  %10815 = icmp ult i64 %10813, %10810
  %10816 = or i1 %10814, %10815
  %10817 = zext i1 %10816 to i8
  store i8 %10817, i8* %19, align 1
  %10818 = trunc i64 %10813 to i32
  %10819 = and i32 %10818, 255
  %10820 = tail call i32 @llvm.ctpop.i32(i32 %10819)
  %10821 = trunc i32 %10820 to i8
  %10822 = and i8 %10821, 1
  %10823 = xor i8 %10822, 1
  store i8 %10823, i8* %26, align 1
  %10824 = xor i64 %10810, %10812
  %10825 = xor i64 %10824, %10813
  %10826 = lshr i64 %10825, 4
  %10827 = trunc i64 %10826 to i8
  %10828 = and i8 %10827, 1
  store i8 %10828, i8* %31, align 1
  %10829 = icmp eq i64 %10813, 0
  %10830 = zext i1 %10829 to i8
  store i8 %10830, i8* %34, align 1
  %10831 = lshr i64 %10813, 63
  %10832 = trunc i64 %10831 to i8
  store i8 %10832, i8* %37, align 1
  %10833 = lshr i64 %10812, 63
  %10834 = xor i64 %10831, %10833
  %10835 = xor i64 %10831, %10811
  %10836 = add nuw nsw i64 %10834, %10835
  %10837 = icmp eq i64 %10836, 2
  %10838 = zext i1 %10837 to i8
  store i8 %10838, i8* %43, align 1
  %10839 = add i64 %10813, 64
  %10840 = add i64 %10774, 41
  store i64 %10840, i64* %3, align 8
  %10841 = inttoptr i64 %10839 to i32*
  %10842 = load i32, i32* %10841, align 4
  %10843 = zext i32 %10842 to i64
  store i64 %10843, i64* %RSI.i4246, align 8
  %10844 = load i64, i64* %RBP.i, align 8
  %10845 = add i64 %10844, -24
  %10846 = add i64 %10774, 45
  store i64 %10846, i64* %3, align 8
  %10847 = inttoptr i64 %10845 to i32*
  %10848 = load i32, i32* %10847, align 4
  %10849 = sext i32 %10848 to i64
  %10850 = mul nsw i64 %10849, 76
  store i64 %10850, i64* %RCX.i4050.pre-phi, align 8
  %10851 = lshr i64 %10850, 63
  %10852 = add i64 %10850, %10812
  store i64 %10852, i64* %RAX.i1555, align 8
  %10853 = icmp ult i64 %10852, %10812
  %10854 = icmp ult i64 %10852, %10850
  %10855 = or i1 %10853, %10854
  %10856 = zext i1 %10855 to i8
  store i8 %10856, i8* %19, align 1
  %10857 = trunc i64 %10852 to i32
  %10858 = and i32 %10857, 255
  %10859 = tail call i32 @llvm.ctpop.i32(i32 %10858)
  %10860 = trunc i32 %10859 to i8
  %10861 = and i8 %10860, 1
  %10862 = xor i8 %10861, 1
  store i8 %10862, i8* %26, align 1
  %10863 = xor i64 %10850, %10812
  %10864 = xor i64 %10863, %10852
  %10865 = lshr i64 %10864, 4
  %10866 = trunc i64 %10865 to i8
  %10867 = and i8 %10866, 1
  store i8 %10867, i8* %31, align 1
  %10868 = icmp eq i64 %10852, 0
  %10869 = zext i1 %10868 to i8
  store i8 %10869, i8* %34, align 1
  %10870 = lshr i64 %10852, 63
  %10871 = trunc i64 %10870 to i8
  store i8 %10871, i8* %37, align 1
  %10872 = xor i64 %10870, %10833
  %10873 = xor i64 %10870, %10851
  %10874 = add nuw nsw i64 %10872, %10873
  %10875 = icmp eq i64 %10874, 2
  %10876 = zext i1 %10875 to i8
  store i8 %10876, i8* %43, align 1
  %10877 = add i64 %10852, 64
  %10878 = add i64 %10774, 55
  store i64 %10878, i64* %3, align 8
  %10879 = inttoptr i64 %10877 to i32*
  store i32 %10842, i32* %10879, align 4
  %.pre253 = load i64, i64* %3, align 8
  %.pre254 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41dc3a

block_.L_41dc3a:                                  ; preds = %block_41dc03, %block_41dbee
  %10880 = phi i64 [ %.pre254, %block_41dc03 ], [ %10719, %block_41dbee ]
  %10881 = phi i64 [ %.pre253, %block_41dc03 ], [ %10774, %block_41dbee ]
  %10882 = add i64 %10880, -24
  %10883 = add i64 %10881, 8
  store i64 %10883, i64* %3, align 8
  %10884 = inttoptr i64 %10882 to i32*
  %10885 = load i32, i32* %10884, align 4
  %10886 = add i32 %10885, 1
  %10887 = zext i32 %10886 to i64
  store i64 %10887, i64* %RAX.i1555, align 8
  %10888 = icmp eq i32 %10885, -1
  %10889 = icmp eq i32 %10886, 0
  %10890 = or i1 %10888, %10889
  %10891 = zext i1 %10890 to i8
  store i8 %10891, i8* %19, align 1
  %10892 = and i32 %10886, 255
  %10893 = tail call i32 @llvm.ctpop.i32(i32 %10892)
  %10894 = trunc i32 %10893 to i8
  %10895 = and i8 %10894, 1
  %10896 = xor i8 %10895, 1
  store i8 %10896, i8* %26, align 1
  %10897 = xor i32 %10886, %10885
  %10898 = lshr i32 %10897, 4
  %10899 = trunc i32 %10898 to i8
  %10900 = and i8 %10899, 1
  store i8 %10900, i8* %31, align 1
  %10901 = zext i1 %10889 to i8
  store i8 %10901, i8* %34, align 1
  %10902 = lshr i32 %10886, 31
  %10903 = trunc i32 %10902 to i8
  store i8 %10903, i8* %37, align 1
  %10904 = lshr i32 %10885, 31
  %10905 = xor i32 %10902, %10904
  %10906 = add nuw nsw i32 %10905, %10902
  %10907 = icmp eq i32 %10906, 2
  %10908 = zext i1 %10907 to i8
  store i8 %10908, i8* %43, align 1
  %10909 = add i64 %10881, 14
  store i64 %10909, i64* %3, align 8
  store i32 %10886, i32* %10884, align 4
  %10910 = load i64, i64* %3, align 8
  %10911 = add i64 %10910, -103
  store i64 %10911, i64* %3, align 8
  br label %block_.L_41dbe1

block_.L_41dc4d:                                  ; preds = %block_.L_41dbe1
  %10912 = add i64 %10748, 7
  store i64 %10912, i64* %3, align 8
  store i32 21, i32* %10722, align 4
  %.pre240 = load i64, i64* %3, align 8
  br label %block_.L_41dc54

block_.L_41dc54:                                  ; preds = %block_.L_41de01, %block_.L_41dc4d
  %10913 = phi i64 [ %.pre240, %block_.L_41dc4d ], [ %11420, %block_.L_41de01 ]
  %MEMORY.100 = phi %struct.Memory* [ %call2_41dbcd, %block_.L_41dc4d ], [ %MEMORY.106, %block_.L_41de01 ]
  %10914 = load i64, i64* %RBP.i, align 8
  %10915 = add i64 %10914, -24
  %10916 = add i64 %10913, 7
  store i64 %10916, i64* %3, align 8
  %10917 = inttoptr i64 %10915 to i32*
  %10918 = load i32, i32* %10917, align 4
  %10919 = add i32 %10918, -400
  %10920 = icmp ult i32 %10918, 400
  %10921 = zext i1 %10920 to i8
  store i8 %10921, i8* %19, align 1
  %10922 = and i32 %10919, 255
  %10923 = tail call i32 @llvm.ctpop.i32(i32 %10922)
  %10924 = trunc i32 %10923 to i8
  %10925 = and i8 %10924, 1
  %10926 = xor i8 %10925, 1
  store i8 %10926, i8* %26, align 1
  %10927 = xor i32 %10918, 16
  %10928 = xor i32 %10927, %10919
  %10929 = lshr i32 %10928, 4
  %10930 = trunc i32 %10929 to i8
  %10931 = and i8 %10930, 1
  store i8 %10931, i8* %31, align 1
  %10932 = icmp eq i32 %10919, 0
  %10933 = zext i1 %10932 to i8
  store i8 %10933, i8* %34, align 1
  %10934 = lshr i32 %10919, 31
  %10935 = trunc i32 %10934 to i8
  store i8 %10935, i8* %37, align 1
  %10936 = lshr i32 %10918, 31
  %10937 = xor i32 %10934, %10936
  %10938 = add nuw nsw i32 %10937, %10936
  %10939 = icmp eq i32 %10938, 2
  %10940 = zext i1 %10939 to i8
  store i8 %10940, i8* %43, align 1
  %10941 = icmp ne i8 %10935, 0
  %10942 = xor i1 %10941, %10939
  %.v342 = select i1 %10942, i64 13, i64 448
  %10943 = add i64 %10913, %.v342
  store i64 %10943, i64* %3, align 8
  br i1 %10942, label %block_41dc61, label %block_.L_41de14

block_41dc61:                                     ; preds = %block_.L_41dc54
  %10944 = add i64 %10943, 4
  store i64 %10944, i64* %3, align 8
  %10945 = load i32, i32* %10917, align 4
  %10946 = sext i32 %10945 to i64
  store i64 %10946, i64* %RAX.i1555, align 8
  %10947 = add nsw i64 %10946, 12099168
  %10948 = add i64 %10943, 12
  store i64 %10948, i64* %3, align 8
  %10949 = inttoptr i64 %10947 to i8*
  %10950 = load i8, i8* %10949, align 1
  %10951 = zext i8 %10950 to i64
  store i64 %10951, i64* %RCX.i4050.pre-phi, align 8
  %10952 = zext i8 %10950 to i32
  %10953 = add nsw i32 %10952, -3
  %10954 = icmp ult i8 %10950, 3
  %10955 = zext i1 %10954 to i8
  store i8 %10955, i8* %19, align 1
  %10956 = and i32 %10953, 255
  %10957 = tail call i32 @llvm.ctpop.i32(i32 %10956)
  %10958 = trunc i32 %10957 to i8
  %10959 = and i8 %10958, 1
  %10960 = xor i8 %10959, 1
  store i8 %10960, i8* %26, align 1
  %10961 = xor i32 %10953, %10952
  %10962 = lshr i32 %10961, 4
  %10963 = trunc i32 %10962 to i8
  %10964 = and i8 %10963, 1
  store i8 %10964, i8* %31, align 1
  %10965 = icmp eq i32 %10953, 0
  %10966 = zext i1 %10965 to i8
  store i8 %10966, i8* %34, align 1
  %10967 = lshr i32 %10953, 31
  %10968 = trunc i32 %10967 to i8
  store i8 %10968, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v353 = select i1 %10965, i64 416, i64 21
  %10969 = add i64 %10943, %.v353
  store i64 %10969, i64* %3, align 8
  br i1 %10965, label %block_.L_41de01, label %block_41dc76

block_41dc76:                                     ; preds = %block_41dc61
  %10970 = add i64 %10969, 3
  store i64 %10970, i64* %3, align 8
  %10971 = load i32, i32* %10917, align 4
  %10972 = zext i32 %10971 to i64
  store i64 %10972, i64* %RDI.i4254, align 8
  %10973 = add i64 %10969, 6
  store i64 %10973, i64* %3, align 8
  %10974 = load i32, i32* %10917, align 4
  %10975 = zext i32 %10974 to i64
  store i64 %10975, i64* %RSI.i4246, align 8
  %10976 = add i64 %10969, 435322
  %10977 = add i64 %10969, 11
  %10978 = load i64, i64* %6, align 8
  %10979 = add i64 %10978, -8
  %10980 = inttoptr i64 %10979 to i64*
  store i64 %10977, i64* %10980, align 8
  store i64 %10979, i64* %6, align 8
  store i64 %10976, i64* %3, align 8
  %call2_41dc7c = tail call %struct.Memory* @sub_4880f0.is_worm_origin(%struct.State* nonnull %0, i64 %10976, %struct.Memory* %MEMORY.100)
  %10981 = load i32, i32* %EAX.i4253, align 4
  %10982 = load i64, i64* %3, align 8
  store i8 0, i8* %19, align 1
  %10983 = and i32 %10981, 255
  %10984 = tail call i32 @llvm.ctpop.i32(i32 %10983)
  %10985 = trunc i32 %10984 to i8
  %10986 = and i8 %10985, 1
  %10987 = xor i8 %10986, 1
  store i8 %10987, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %10988 = icmp eq i32 %10981, 0
  %10989 = zext i1 %10988 to i8
  store i8 %10989, i8* %34, align 1
  %10990 = lshr i32 %10981, 31
  %10991 = trunc i32 %10990 to i8
  store i8 %10991, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v354 = select i1 %10988, i64 379, i64 9
  %10992 = add i64 %10982, %.v354
  store i64 %10992, i64* %3, align 8
  br i1 %10988, label %block_.L_41ddfc, label %block_41dc8a

block_41dc8a:                                     ; preds = %block_41dc76
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %10993 = load i64, i64* %RBP.i, align 8
  %10994 = add i64 %10993, -24
  %10995 = add i64 %10992, 14
  store i64 %10995, i64* %3, align 8
  %10996 = inttoptr i64 %10994 to i32*
  %10997 = load i32, i32* %10996, align 4
  %10998 = sext i32 %10997 to i64
  %10999 = mul nsw i64 %10998, 380
  store i64 %10999, i64* %RCX.i4050.pre-phi, align 8
  %11000 = lshr i64 %10999, 63
  %11001 = add i64 %10999, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %11001, i64* %RAX.i1555, align 8
  %11002 = icmp ult i64 %11001, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11003 = icmp ult i64 %11001, %10999
  %11004 = or i1 %11002, %11003
  %11005 = zext i1 %11004 to i8
  store i8 %11005, i8* %19, align 1
  %11006 = trunc i64 %11001 to i32
  %11007 = and i32 %11006, 252
  %11008 = tail call i32 @llvm.ctpop.i32(i32 %11007)
  %11009 = trunc i32 %11008 to i8
  %11010 = and i8 %11009, 1
  %11011 = xor i8 %11010, 1
  store i8 %11011, i8* %26, align 1
  %11012 = xor i64 %10999, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11013 = xor i64 %11012, %11001
  %11014 = lshr i64 %11013, 4
  %11015 = trunc i64 %11014 to i8
  %11016 = and i8 %11015, 1
  store i8 %11016, i8* %31, align 1
  %11017 = icmp eq i64 %11001, 0
  %11018 = zext i1 %11017 to i8
  store i8 %11018, i8* %34, align 1
  %11019 = lshr i64 %11001, 63
  %11020 = trunc i64 %11019 to i8
  store i8 %11020, i8* %37, align 1
  %11021 = xor i64 %11019, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %11022 = xor i64 %11019, %11000
  %11023 = add nuw nsw i64 %11021, %11022
  %11024 = icmp eq i64 %11023, 2
  %11025 = zext i1 %11024 to i8
  store i8 %11025, i8* %43, align 1
  %11026 = add i64 %10999, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 100)
  %11027 = add i64 %10992, 28
  store i64 %11027, i64* %3, align 8
  %11028 = inttoptr i64 %11026 to i32*
  %11029 = load i32, i32* %11028, align 4
  store i8 0, i8* %19, align 1
  %11030 = and i32 %11029, 255
  %11031 = tail call i32 @llvm.ctpop.i32(i32 %11030)
  %11032 = trunc i32 %11031 to i8
  %11033 = and i8 %11032, 1
  %11034 = xor i8 %11033, 1
  store i8 %11034, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11035 = icmp eq i32 %11029, 0
  %11036 = zext i1 %11035 to i8
  store i8 %11036, i8* %34, align 1
  %11037 = lshr i32 %11029, 31
  %11038 = trunc i32 %11037 to i8
  store i8 %11038, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v355 = select i1 %11035, i64 370, i64 34
  %11039 = add i64 %10992, %.v355
  store i64 %11039, i64* %3, align 8
  br i1 %11035, label %block_.L_41ddfc, label %block_41dcac

block_41dcac:                                     ; preds = %block_41dc8a
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %11040 = add i64 %11039, 14
  store i64 %11040, i64* %3, align 8
  %11041 = load i32, i32* %10996, align 4
  %11042 = sext i32 %11041 to i64
  %11043 = mul nsw i64 %11042, 380
  store i64 %11043, i64* %RCX.i4050.pre-phi, align 8
  %11044 = lshr i64 %11043, 63
  %11045 = add i64 %11043, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %11045, i64* %RAX.i1555, align 8
  %11046 = icmp ult i64 %11045, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11047 = icmp ult i64 %11045, %11043
  %11048 = or i1 %11046, %11047
  %11049 = zext i1 %11048 to i8
  store i8 %11049, i8* %19, align 1
  %11050 = trunc i64 %11045 to i32
  %11051 = and i32 %11050, 252
  %11052 = tail call i32 @llvm.ctpop.i32(i32 %11051)
  %11053 = trunc i32 %11052 to i8
  %11054 = and i8 %11053, 1
  %11055 = xor i8 %11054, 1
  store i8 %11055, i8* %26, align 1
  %11056 = xor i64 %11043, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11057 = xor i64 %11056, %11045
  %11058 = lshr i64 %11057, 4
  %11059 = trunc i64 %11058 to i8
  %11060 = and i8 %11059, 1
  store i8 %11060, i8* %31, align 1
  %11061 = icmp eq i64 %11045, 0
  %11062 = zext i1 %11061 to i8
  store i8 %11062, i8* %34, align 1
  %11063 = lshr i64 %11045, 63
  %11064 = trunc i64 %11063 to i8
  store i8 %11064, i8* %37, align 1
  %11065 = xor i64 %11063, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %11066 = xor i64 %11063, %11044
  %11067 = add nuw nsw i64 %11065, %11066
  %11068 = icmp eq i64 %11067, 2
  %11069 = zext i1 %11068 to i8
  store i8 %11069, i8* %43, align 1
  %11070 = add i64 %11043, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 180)
  %11071 = add i64 %11039, 31
  store i64 %11071, i64* %3, align 8
  %11072 = inttoptr i64 %11070 to i32*
  %11073 = load i32, i32* %11072, align 4
  store i8 0, i8* %19, align 1
  %11074 = and i32 %11073, 255
  %11075 = tail call i32 @llvm.ctpop.i32(i32 %11074)
  %11076 = trunc i32 %11075 to i8
  %11077 = and i8 %11076, 1
  %11078 = xor i8 %11077, 1
  store i8 %11078, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11079 = icmp eq i32 %11073, 0
  %11080 = zext i1 %11079 to i8
  store i8 %11080, i8* %34, align 1
  %11081 = lshr i32 %11073, 31
  %11082 = trunc i32 %11081 to i8
  store i8 %11082, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v356 = select i1 %11079, i64 336, i64 37
  %11083 = add i64 %11039, %.v356
  store i64 %11083, i64* %3, align 8
  br i1 %11079, label %block_.L_41ddfc, label %block_41dcd1

block_41dcd1:                                     ; preds = %block_41dcac
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %11084 = add i64 %11083, 14
  store i64 %11084, i64* %3, align 8
  %11085 = load i32, i32* %10996, align 4
  %11086 = sext i32 %11085 to i64
  %11087 = mul nsw i64 %11086, 380
  store i64 %11087, i64* %RCX.i4050.pre-phi, align 8
  %11088 = lshr i64 %11087, 63
  %11089 = add i64 %11087, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %11089, i64* %RAX.i1555, align 8
  %11090 = icmp ult i64 %11089, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11091 = icmp ult i64 %11089, %11087
  %11092 = or i1 %11090, %11091
  %11093 = zext i1 %11092 to i8
  store i8 %11093, i8* %19, align 1
  %11094 = trunc i64 %11089 to i32
  %11095 = and i32 %11094, 252
  %11096 = tail call i32 @llvm.ctpop.i32(i32 %11095)
  %11097 = trunc i32 %11096 to i8
  %11098 = and i8 %11097, 1
  %11099 = xor i8 %11098, 1
  store i8 %11099, i8* %26, align 1
  %11100 = xor i64 %11087, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11101 = xor i64 %11100, %11089
  %11102 = lshr i64 %11101, 4
  %11103 = trunc i64 %11102 to i8
  %11104 = and i8 %11103, 1
  store i8 %11104, i8* %31, align 1
  %11105 = icmp eq i64 %11089, 0
  %11106 = zext i1 %11105 to i8
  store i8 %11106, i8* %34, align 1
  %11107 = lshr i64 %11089, 63
  %11108 = trunc i64 %11107 to i8
  store i8 %11108, i8* %37, align 1
  %11109 = xor i64 %11107, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %11110 = xor i64 %11107, %11088
  %11111 = add nuw nsw i64 %11109, %11110
  %11112 = icmp eq i64 %11111, 2
  %11113 = zext i1 %11112 to i8
  store i8 %11113, i8* %43, align 1
  %11114 = add i64 %11087, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 48)
  %11115 = add i64 %11083, 28
  store i64 %11115, i64* %3, align 8
  %11116 = inttoptr i64 %11114 to i32*
  %11117 = load i32, i32* %11116, align 4
  store i8 0, i8* %19, align 1
  %11118 = and i32 %11117, 255
  %11119 = tail call i32 @llvm.ctpop.i32(i32 %11118)
  %11120 = trunc i32 %11119 to i8
  %11121 = and i8 %11120, 1
  %11122 = xor i8 %11121, 1
  store i8 %11122, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11123 = icmp eq i32 %11117, 0
  %11124 = zext i1 %11123 to i8
  store i8 %11124, i8* %34, align 1
  %11125 = lshr i32 %11117, 31
  %11126 = trunc i32 %11125 to i8
  store i8 %11126, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v357 = select i1 %11123, i64 34, i64 299
  %11127 = add i64 %11083, %.v357
  store i64 %11127, i64* %3, align 8
  br i1 %11123, label %block_41dcf3, label %block_.L_41ddfc

block_41dcf3:                                     ; preds = %block_41dcd1
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %11128 = add i64 %10993, -832
  store i64 %11128, i64* %RSI.i4246, align 8
  %11129 = add i64 %10993, -844
  %11130 = add i64 %11127, 19
  store i64 %11130, i64* %3, align 8
  %11131 = inttoptr i64 %11129 to i32*
  store i32 0, i32* %11131, align 4
  %11132 = load i64, i64* %RBP.i, align 8
  %11133 = add i64 %11132, -24
  %11134 = load i64, i64* %3, align 8
  %11135 = add i64 %11134, 3
  store i64 %11135, i64* %3, align 8
  %11136 = inttoptr i64 %11133 to i32*
  %11137 = load i32, i32* %11136, align 4
  %11138 = zext i32 %11137 to i64
  store i64 %11138, i64* %RDI.i4254, align 8
  %11139 = add i64 %11134, -40518
  %11140 = add i64 %11134, 8
  %11141 = load i64, i64* %6, align 8
  %11142 = add i64 %11141, -8
  %11143 = inttoptr i64 %11142 to i64*
  store i64 %11140, i64* %11143, align 8
  store i64 %11142, i64* %6, align 8
  store i64 %11139, i64* %3, align 8
  %call2_41dd09 = tail call %struct.Memory* @sub_413ec0.extended_chainlinks(%struct.State* nonnull %0, i64 %11139, %struct.Memory* %MEMORY.100)
  %11144 = load i64, i64* %RBP.i, align 8
  %11145 = add i64 %11144, -836
  %11146 = load i32, i32* %EAX.i4253, align 4
  %11147 = load i64, i64* %3, align 8
  %11148 = add i64 %11147, 6
  store i64 %11148, i64* %3, align 8
  %11149 = inttoptr i64 %11145 to i32*
  store i32 %11146, i32* %11149, align 4
  %11150 = load i64, i64* %RBP.i, align 8
  %11151 = add i64 %11150, -840
  %11152 = load i64, i64* %3, align 8
  %11153 = add i64 %11152, 10
  store i64 %11153, i64* %3, align 8
  %11154 = inttoptr i64 %11151 to i32*
  store i32 0, i32* %11154, align 4
  %.pre247 = load i64, i64* %3, align 8
  br label %block_.L_41dd1e

block_.L_41dd1e:                                  ; preds = %block_.L_41dd69, %block_41dcf3
  %11155 = phi i64 [ %11279, %block_.L_41dd69 ], [ %.pre247, %block_41dcf3 ]
  %11156 = load i64, i64* %RBP.i, align 8
  %11157 = add i64 %11156, -840
  %11158 = add i64 %11155, 6
  store i64 %11158, i64* %3, align 8
  %11159 = inttoptr i64 %11157 to i32*
  %11160 = load i32, i32* %11159, align 4
  %11161 = zext i32 %11160 to i64
  store i64 %11161, i64* %RAX.i1555, align 8
  %11162 = add i64 %11156, -836
  %11163 = add i64 %11155, 12
  store i64 %11163, i64* %3, align 8
  %11164 = inttoptr i64 %11162 to i32*
  %11165 = load i32, i32* %11164, align 4
  %11166 = sub i32 %11160, %11165
  %11167 = icmp ult i32 %11160, %11165
  %11168 = zext i1 %11167 to i8
  store i8 %11168, i8* %19, align 1
  %11169 = and i32 %11166, 255
  %11170 = tail call i32 @llvm.ctpop.i32(i32 %11169)
  %11171 = trunc i32 %11170 to i8
  %11172 = and i8 %11171, 1
  %11173 = xor i8 %11172, 1
  store i8 %11173, i8* %26, align 1
  %11174 = xor i32 %11165, %11160
  %11175 = xor i32 %11174, %11166
  %11176 = lshr i32 %11175, 4
  %11177 = trunc i32 %11176 to i8
  %11178 = and i8 %11177, 1
  store i8 %11178, i8* %31, align 1
  %11179 = icmp eq i32 %11166, 0
  %11180 = zext i1 %11179 to i8
  store i8 %11180, i8* %34, align 1
  %11181 = lshr i32 %11166, 31
  %11182 = trunc i32 %11181 to i8
  store i8 %11182, i8* %37, align 1
  %11183 = lshr i32 %11160, 31
  %11184 = lshr i32 %11165, 31
  %11185 = xor i32 %11184, %11183
  %11186 = xor i32 %11181, %11183
  %11187 = add nuw nsw i32 %11186, %11185
  %11188 = icmp eq i32 %11187, 2
  %11189 = zext i1 %11188 to i8
  store i8 %11189, i8* %43, align 1
  %11190 = icmp ne i8 %11182, 0
  %11191 = xor i1 %11190, %11188
  %.v358 = select i1 %11191, i64 18, i64 100
  %11192 = add i64 %11155, %.v358
  store i64 %11192, i64* %3, align 8
  br i1 %11191, label %block_41dd30, label %block_.L_41dd82.loopexit

block_41dd30:                                     ; preds = %block_.L_41dd1e
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %11193 = add i64 %11192, 17
  store i64 %11193, i64* %3, align 8
  %11194 = load i32, i32* %11159, align 4
  %11195 = sext i32 %11194 to i64
  store i64 %11195, i64* %RCX.i4050.pre-phi, align 8
  %11196 = shl nsw i64 %11195, 2
  %11197 = add i64 %11156, -832
  %11198 = add i64 %11197, %11196
  %11199 = add i64 %11192, 25
  store i64 %11199, i64* %3, align 8
  %11200 = inttoptr i64 %11198 to i32*
  %11201 = load i32, i32* %11200, align 4
  %11202 = sext i32 %11201 to i64
  %11203 = mul nsw i64 %11202, 76
  store i64 %11203, i64* %RCX.i4050.pre-phi, align 8
  %11204 = lshr i64 %11203, 63
  %11205 = add i64 %11203, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %11205, i64* %RAX.i1555, align 8
  %11206 = icmp ult i64 %11205, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11207 = icmp ult i64 %11205, %11203
  %11208 = or i1 %11206, %11207
  %11209 = zext i1 %11208 to i8
  store i8 %11209, i8* %19, align 1
  %11210 = trunc i64 %11205 to i32
  %11211 = and i32 %11210, 252
  %11212 = tail call i32 @llvm.ctpop.i32(i32 %11211)
  %11213 = trunc i32 %11212 to i8
  %11214 = and i8 %11213, 1
  %11215 = xor i8 %11214, 1
  store i8 %11215, i8* %26, align 1
  %11216 = xor i64 %11203, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11217 = xor i64 %11216, %11205
  %11218 = lshr i64 %11217, 4
  %11219 = trunc i64 %11218 to i8
  %11220 = and i8 %11219, 1
  store i8 %11220, i8* %31, align 1
  %11221 = icmp eq i64 %11205, 0
  %11222 = zext i1 %11221 to i8
  store i8 %11222, i8* %34, align 1
  %11223 = lshr i64 %11205, 63
  %11224 = trunc i64 %11223 to i8
  store i8 %11224, i8* %37, align 1
  %11225 = xor i64 %11223, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %11226 = xor i64 %11223, %11204
  %11227 = add nuw nsw i64 %11225, %11226
  %11228 = icmp eq i64 %11227, 2
  %11229 = zext i1 %11228 to i8
  store i8 %11229, i8* %43, align 1
  %11230 = add i64 %11203, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 64)
  %11231 = add i64 %11192, 36
  store i64 %11231, i64* %3, align 8
  %11232 = inttoptr i64 %11230 to i32*
  %11233 = load i32, i32* %11232, align 4
  store i8 0, i8* %19, align 1
  %11234 = and i32 %11233, 255
  %11235 = tail call i32 @llvm.ctpop.i32(i32 %11234)
  %11236 = trunc i32 %11235 to i8
  %11237 = and i8 %11236, 1
  %11238 = xor i8 %11237, 1
  store i8 %11238, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11239 = icmp eq i32 %11233, 0
  %11240 = zext i1 %11239 to i8
  store i8 %11240, i8* %34, align 1
  %11241 = lshr i32 %11233, 31
  %11242 = trunc i32 %11241 to i8
  store i8 %11242, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v362 = select i1 %11239, i64 57, i64 42
  %11243 = add i64 %11192, %.v362
  store i64 %11243, i64* %3, align 8
  %11244 = load i64, i64* %RBP.i, align 8
  br i1 %11239, label %block_.L_41dd69, label %block_41dd5a

block_41dd5a:                                     ; preds = %block_41dd30
  %11245 = add i64 %11244, -844
  %11246 = add i64 %11243, 10
  store i64 %11246, i64* %3, align 8
  %11247 = inttoptr i64 %11245 to i32*
  store i32 1, i32* %11247, align 4
  %11248 = load i64, i64* %3, align 8
  %11249 = add i64 %11248, 30
  store i64 %11249, i64* %3, align 8
  %.pre248 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41dd82

block_.L_41dd69:                                  ; preds = %block_41dd30
  %11250 = add i64 %11244, -840
  %11251 = add i64 %11243, 11
  store i64 %11251, i64* %3, align 8
  %11252 = inttoptr i64 %11250 to i32*
  %11253 = load i32, i32* %11252, align 4
  %11254 = add i32 %11253, 1
  %11255 = zext i32 %11254 to i64
  store i64 %11255, i64* %RAX.i1555, align 8
  %11256 = icmp eq i32 %11253, -1
  %11257 = icmp eq i32 %11254, 0
  %11258 = or i1 %11256, %11257
  %11259 = zext i1 %11258 to i8
  store i8 %11259, i8* %19, align 1
  %11260 = and i32 %11254, 255
  %11261 = tail call i32 @llvm.ctpop.i32(i32 %11260)
  %11262 = trunc i32 %11261 to i8
  %11263 = and i8 %11262, 1
  %11264 = xor i8 %11263, 1
  store i8 %11264, i8* %26, align 1
  %11265 = xor i32 %11254, %11253
  %11266 = lshr i32 %11265, 4
  %11267 = trunc i32 %11266 to i8
  %11268 = and i8 %11267, 1
  store i8 %11268, i8* %31, align 1
  %11269 = zext i1 %11257 to i8
  store i8 %11269, i8* %34, align 1
  %11270 = lshr i32 %11254, 31
  %11271 = trunc i32 %11270 to i8
  store i8 %11271, i8* %37, align 1
  %11272 = lshr i32 %11253, 31
  %11273 = xor i32 %11270, %11272
  %11274 = add nuw nsw i32 %11273, %11270
  %11275 = icmp eq i32 %11274, 2
  %11276 = zext i1 %11275 to i8
  store i8 %11276, i8* %43, align 1
  %11277 = add i64 %11243, 20
  store i64 %11277, i64* %3, align 8
  store i32 %11254, i32* %11252, align 4
  %11278 = load i64, i64* %3, align 8
  %11279 = add i64 %11278, -95
  store i64 %11279, i64* %3, align 8
  br label %block_.L_41dd1e

block_.L_41dd82.loopexit:                         ; preds = %block_.L_41dd1e
  br label %block_.L_41dd82

block_.L_41dd82:                                  ; preds = %block_.L_41dd82.loopexit, %block_41dd5a
  %11280 = phi i64 [ %11249, %block_41dd5a ], [ %11192, %block_.L_41dd82.loopexit ]
  %11281 = phi i64 [ %.pre248, %block_41dd5a ], [ %11156, %block_.L_41dd82.loopexit ]
  %11282 = add i64 %11281, -844
  %11283 = add i64 %11280, 7
  store i64 %11283, i64* %3, align 8
  %11284 = inttoptr i64 %11282 to i32*
  %11285 = load i32, i32* %11284, align 4
  store i8 0, i8* %19, align 1
  %11286 = and i32 %11285, 255
  %11287 = tail call i32 @llvm.ctpop.i32(i32 %11286)
  %11288 = trunc i32 %11287 to i8
  %11289 = and i8 %11288, 1
  %11290 = xor i8 %11289, 1
  store i8 %11290, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11291 = icmp eq i32 %11285, 0
  %11292 = zext i1 %11291 to i8
  store i8 %11292, i8* %34, align 1
  %11293 = lshr i32 %11285, 31
  %11294 = trunc i32 %11293 to i8
  store i8 %11294, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v359 = select i1 %11291, i64 13, i64 117
  %11295 = add i64 %11280, %.v359
  store i64 %11295, i64* %3, align 8
  br i1 %11291, label %block_41dd8f, label %block_.L_41ddf7

block_41dd8f:                                     ; preds = %block_.L_41dd82
  %11296 = add i64 %11281, -836
  %11297 = add i64 %11295, 7
  store i64 %11297, i64* %3, align 8
  %11298 = inttoptr i64 %11296 to i32*
  %11299 = load i32, i32* %11298, align 4
  store i8 0, i8* %19, align 1
  %11300 = and i32 %11299, 255
  %11301 = tail call i32 @llvm.ctpop.i32(i32 %11300)
  %11302 = trunc i32 %11301 to i8
  %11303 = and i8 %11302, 1
  %11304 = xor i8 %11303, 1
  store i8 %11304, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11305 = icmp eq i32 %11299, 0
  %11306 = zext i1 %11305 to i8
  store i8 %11306, i8* %34, align 1
  %11307 = lshr i32 %11299, 31
  %11308 = trunc i32 %11307 to i8
  store i8 %11308, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11309 = icmp ne i8 %11308, 0
  %11310 = or i1 %11305, %11309
  %.v360 = select i1 %11310, i64 104, i64 13
  %11311 = add i64 %11295, %.v360
  store i64 %11311, i64* %3, align 8
  br i1 %11310, label %block_.L_41ddf7, label %block_41dd9c

block_41dd9c:                                     ; preds = %block_41dd8f
  %11312 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %11313 = and i32 %11312, 1024
  %11314 = zext i32 %11313 to i64
  store i64 %11314, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit318 = lshr exact i32 %11313, 10
  %11315 = trunc i32 %.lobit318 to i8
  %11316 = xor i8 %11315, 1
  store i8 %11316, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11317 = icmp eq i8 %11316, 0
  %.v361 = select i1 %11317, i64 26, i64 21
  %11318 = add i64 %11311, %.v361
  store i64 %11318, i64* %3, align 8
  br i1 %11317, label %block_.L_41ddb6, label %block_41ddb1

block_41ddb1:                                     ; preds = %block_41dd9c
  %11319 = add i64 %11318, 31
  store i64 %11319, i64* %3, align 8
  br label %block_.L_41ddd0

block_.L_41ddb6:                                  ; preds = %block_41dd9c
  store i64 ptrtoint (%G__0x57b0c9_type* @G__0x57b0c9 to i64), i64* %RDI.i4254, align 8
  %11320 = add i64 %11281, -24
  %11321 = add i64 %11318, 13
  store i64 %11321, i64* %3, align 8
  %11322 = inttoptr i64 %11320 to i32*
  %11323 = load i32, i32* %11322, align 4
  %11324 = zext i32 %11323 to i64
  store i64 %11324, i64* %RSI.i4246, align 8
  store i8 0, i8* %AL.i3758, align 1
  %11325 = add i64 %11318, 212986
  %11326 = add i64 %11318, 20
  %11327 = load i64, i64* %6, align 8
  %11328 = add i64 %11327, -8
  %11329 = inttoptr i64 %11328 to i64*
  store i64 %11326, i64* %11329, align 8
  store i64 %11328, i64* %6, align 8
  store i64 %11325, i64* %3, align 8
  %call2_41ddc5 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %11325, %struct.Memory* %MEMORY.100)
  %11330 = load i64, i64* %RBP.i, align 8
  %11331 = add i64 %11330, -1084
  %11332 = load i32, i32* %EAX.i4253, align 4
  %11333 = load i64, i64* %3, align 8
  %11334 = add i64 %11333, 6
  store i64 %11334, i64* %3, align 8
  %11335 = inttoptr i64 %11331 to i32*
  store i32 %11332, i32* %11335, align 4
  %.pre249 = load i64, i64* %3, align 8
  %.pre250 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41ddd0

block_.L_41ddd0:                                  ; preds = %block_.L_41ddb6, %block_41ddb1
  %11336 = phi i64 [ %.pre250, %block_.L_41ddb6 ], [ %11281, %block_41ddb1 ]
  %11337 = phi i64 [ %.pre249, %block_.L_41ddb6 ], [ %11319, %block_41ddb1 ]
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %11338 = add i64 %11336, -24
  %11339 = add i64 %11337, 14
  store i64 %11339, i64* %3, align 8
  %11340 = inttoptr i64 %11338 to i32*
  %11341 = load i32, i32* %11340, align 4
  %11342 = sext i32 %11341 to i64
  %11343 = mul nsw i64 %11342, 380
  store i64 %11343, i64* %RCX.i4050.pre-phi, align 8
  %11344 = lshr i64 %11343, 63
  %11345 = add i64 %11343, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %11345, i64* %RAX.i1555, align 8
  %11346 = icmp ult i64 %11345, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11347 = icmp ult i64 %11345, %11343
  %11348 = or i1 %11346, %11347
  %11349 = zext i1 %11348 to i8
  store i8 %11349, i8* %19, align 1
  %11350 = trunc i64 %11345 to i32
  %11351 = and i32 %11350, 252
  %11352 = tail call i32 @llvm.ctpop.i32(i32 %11351)
  %11353 = trunc i32 %11352 to i8
  %11354 = and i8 %11353, 1
  %11355 = xor i8 %11354, 1
  store i8 %11355, i8* %26, align 1
  %11356 = xor i64 %11343, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11357 = xor i64 %11356, %11345
  %11358 = lshr i64 %11357, 4
  %11359 = trunc i64 %11358 to i8
  %11360 = and i8 %11359, 1
  store i8 %11360, i8* %31, align 1
  %11361 = icmp eq i64 %11345, 0
  %11362 = zext i1 %11361 to i8
  store i8 %11362, i8* %34, align 1
  %11363 = lshr i64 %11345, 63
  %11364 = trunc i64 %11363 to i8
  store i8 %11364, i8* %37, align 1
  %11365 = xor i64 %11363, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %11366 = xor i64 %11363, %11344
  %11367 = add nuw nsw i64 %11365, %11366
  %11368 = icmp eq i64 %11367, 2
  %11369 = zext i1 %11368 to i8
  store i8 %11369, i8* %43, align 1
  %11370 = add i64 %11343, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 48)
  %11371 = add i64 %11337, 31
  store i64 %11371, i64* %3, align 8
  %11372 = inttoptr i64 %11370 to i32*
  store i32 1, i32* %11372, align 4
  %11373 = load i64, i64* %RBP.i, align 8
  %11374 = add i64 %11373, -24
  %11375 = load i64, i64* %3, align 8
  %11376 = add i64 %11375, 3
  store i64 %11376, i64* %3, align 8
  %11377 = inttoptr i64 %11374 to i32*
  %11378 = load i32, i32* %11377, align 4
  %11379 = zext i32 %11378 to i64
  store i64 %11379, i64* %RDI.i4254, align 8
  %11380 = add i64 %11375, 435857
  %11381 = add i64 %11375, 8
  %11382 = load i64, i64* %6, align 8
  %11383 = add i64 %11382, -8
  %11384 = inttoptr i64 %11383 to i64*
  store i64 %11381, i64* %11384, align 8
  store i64 %11383, i64* %6, align 8
  store i64 %11380, i64* %3, align 8
  %call2_41ddf2 = tail call %struct.Memory* @sub_488480.propagate_worm(%struct.State* nonnull %0, i64 %11380, %struct.Memory* %MEMORY.100)
  %.pre251 = load i64, i64* %3, align 8
  br label %block_.L_41ddf7

block_.L_41ddf7:                                  ; preds = %block_.L_41dd82, %block_.L_41ddd0, %block_41dd8f
  %11385 = phi i64 [ %11295, %block_.L_41dd82 ], [ %11311, %block_41dd8f ], [ %.pre251, %block_.L_41ddd0 ]
  %MEMORY.104 = phi %struct.Memory* [ %MEMORY.100, %block_.L_41dd82 ], [ %MEMORY.100, %block_41dd8f ], [ %call2_41ddf2, %block_.L_41ddd0 ]
  %11386 = add i64 %11385, 5
  store i64 %11386, i64* %3, align 8
  br label %block_.L_41ddfc

block_.L_41ddfc:                                  ; preds = %block_41dcd1, %block_.L_41ddf7, %block_41dcac, %block_41dc8a, %block_41dc76
  %11387 = phi i64 [ %10992, %block_41dc76 ], [ %11039, %block_41dc8a ], [ %11083, %block_41dcac ], [ %11127, %block_41dcd1 ], [ %11386, %block_.L_41ddf7 ]
  %MEMORY.105 = phi %struct.Memory* [ %MEMORY.100, %block_41dc76 ], [ %MEMORY.100, %block_41dc8a ], [ %MEMORY.100, %block_41dcac ], [ %MEMORY.100, %block_41dcd1 ], [ %MEMORY.104, %block_.L_41ddf7 ]
  %11388 = add i64 %11387, 5
  store i64 %11388, i64* %3, align 8
  %.pre252 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41de01

block_.L_41de01:                                  ; preds = %block_.L_41ddfc, %block_41dc61
  %11389 = phi i64 [ %10914, %block_41dc61 ], [ %.pre252, %block_.L_41ddfc ]
  %11390 = phi i64 [ %10969, %block_41dc61 ], [ %11388, %block_.L_41ddfc ]
  %MEMORY.106 = phi %struct.Memory* [ %MEMORY.100, %block_41dc61 ], [ %MEMORY.105, %block_.L_41ddfc ]
  %11391 = add i64 %11389, -24
  %11392 = add i64 %11390, 8
  store i64 %11392, i64* %3, align 8
  %11393 = inttoptr i64 %11391 to i32*
  %11394 = load i32, i32* %11393, align 4
  %11395 = add i32 %11394, 1
  %11396 = zext i32 %11395 to i64
  store i64 %11396, i64* %RAX.i1555, align 8
  %11397 = icmp eq i32 %11394, -1
  %11398 = icmp eq i32 %11395, 0
  %11399 = or i1 %11397, %11398
  %11400 = zext i1 %11399 to i8
  store i8 %11400, i8* %19, align 1
  %11401 = and i32 %11395, 255
  %11402 = tail call i32 @llvm.ctpop.i32(i32 %11401)
  %11403 = trunc i32 %11402 to i8
  %11404 = and i8 %11403, 1
  %11405 = xor i8 %11404, 1
  store i8 %11405, i8* %26, align 1
  %11406 = xor i32 %11395, %11394
  %11407 = lshr i32 %11406, 4
  %11408 = trunc i32 %11407 to i8
  %11409 = and i8 %11408, 1
  store i8 %11409, i8* %31, align 1
  %11410 = zext i1 %11398 to i8
  store i8 %11410, i8* %34, align 1
  %11411 = lshr i32 %11395, 31
  %11412 = trunc i32 %11411 to i8
  store i8 %11412, i8* %37, align 1
  %11413 = lshr i32 %11394, 31
  %11414 = xor i32 %11411, %11413
  %11415 = add nuw nsw i32 %11414, %11411
  %11416 = icmp eq i32 %11415, 2
  %11417 = zext i1 %11416 to i8
  store i8 %11417, i8* %43, align 1
  %11418 = add i64 %11390, 14
  store i64 %11418, i64* %3, align 8
  store i32 %11395, i32* %11393, align 4
  %11419 = load i64, i64* %3, align 8
  %11420 = add i64 %11419, -443
  store i64 %11420, i64* %3, align 8
  br label %block_.L_41dc54

block_.L_41de14:                                  ; preds = %block_.L_41dc54
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57b0ee_type* @G__0x57b0ee to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %11421 = add i64 %10943, add (i64 ptrtoint (%G_0xc5133__rip__type* @G_0xc5133__rip_ to i64), i64 17)
  %11422 = add i64 %10943, 25
  store i64 %11422, i64* %3, align 8
  %11423 = inttoptr i64 %11421 to i64*
  %11424 = load i64, i64* %11423, align 8
  store i64 %11424, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %11425 = add i64 %10943, 386492
  %11426 = add i64 %10943, 30
  %11427 = load i64, i64* %6, align 8
  %11428 = add i64 %11427, -8
  %11429 = inttoptr i64 %11428 to i64*
  store i64 %11426, i64* %11429, align 8
  store i64 %11428, i64* %6, align 8
  store i64 %11425, i64* %3, align 8
  %call2_41de2d = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %11425, %struct.Memory* %MEMORY.100)
  %11430 = load i64, i64* %RBP.i, align 8
  %11431 = add i64 %11430, -24
  %11432 = load i64, i64* %3, align 8
  %11433 = add i64 %11432, 7
  store i64 %11433, i64* %3, align 8
  %11434 = inttoptr i64 %11431 to i32*
  store i32 21, i32* %11434, align 4
  %11435 = load i64, i64* %RBP.i, align 8
  %11436 = add i64 %11435, -1096
  %11437 = load i64, i64* %3, align 8
  %11438 = add i64 %11437, 8
  store i64 %11438, i64* %3, align 8
  %11439 = load i64, i64* %93, align 1
  %11440 = inttoptr i64 %11436 to i64*
  store i64 %11439, i64* %11440, align 8
  %.pre241 = load i64, i64* %3, align 8
  br label %block_.L_41de41

block_.L_41de41:                                  ; preds = %block_.L_41df9e, %block_.L_41de14
  %11441 = phi i64 [ %.pre241, %block_.L_41de14 ], [ %11909, %block_.L_41df9e ]
  %MEMORY.107 = phi %struct.Memory* [ %call2_41de2d, %block_.L_41de14 ], [ %MEMORY.112, %block_.L_41df9e ]
  %11442 = load i64, i64* %RBP.i, align 8
  %11443 = add i64 %11442, -24
  %11444 = add i64 %11441, 7
  store i64 %11444, i64* %3, align 8
  %11445 = inttoptr i64 %11443 to i32*
  %11446 = load i32, i32* %11445, align 4
  %11447 = add i32 %11446, -400
  %11448 = icmp ult i32 %11446, 400
  %11449 = zext i1 %11448 to i8
  store i8 %11449, i8* %19, align 1
  %11450 = and i32 %11447, 255
  %11451 = tail call i32 @llvm.ctpop.i32(i32 %11450)
  %11452 = trunc i32 %11451 to i8
  %11453 = and i8 %11452, 1
  %11454 = xor i8 %11453, 1
  store i8 %11454, i8* %26, align 1
  %11455 = xor i32 %11446, 16
  %11456 = xor i32 %11455, %11447
  %11457 = lshr i32 %11456, 4
  %11458 = trunc i32 %11457 to i8
  %11459 = and i8 %11458, 1
  store i8 %11459, i8* %31, align 1
  %11460 = icmp eq i32 %11447, 0
  %11461 = zext i1 %11460 to i8
  store i8 %11461, i8* %34, align 1
  %11462 = lshr i32 %11447, 31
  %11463 = trunc i32 %11462 to i8
  store i8 %11463, i8* %37, align 1
  %11464 = lshr i32 %11446, 31
  %11465 = xor i32 %11462, %11464
  %11466 = add nuw nsw i32 %11465, %11464
  %11467 = icmp eq i32 %11466, 2
  %11468 = zext i1 %11467 to i8
  store i8 %11468, i8* %43, align 1
  %11469 = icmp ne i8 %11463, 0
  %11470 = xor i1 %11469, %11467
  %.v343 = select i1 %11470, i64 13, i64 368
  %11471 = add i64 %11441, %.v343
  store i64 %11471, i64* %3, align 8
  br i1 %11470, label %block_41de4e, label %block_.L_41dfb1

block_41de4e:                                     ; preds = %block_.L_41de41
  %11472 = add i64 %11471, 4
  store i64 %11472, i64* %3, align 8
  %11473 = load i32, i32* %11445, align 4
  %11474 = sext i32 %11473 to i64
  store i64 %11474, i64* %RAX.i1555, align 8
  %11475 = add nsw i64 %11474, 12099168
  %11476 = add i64 %11471, 12
  store i64 %11476, i64* %3, align 8
  %11477 = inttoptr i64 %11475 to i8*
  %11478 = load i8, i8* %11477, align 1
  %11479 = zext i8 %11478 to i64
  store i64 %11479, i64* %RCX.i4050.pre-phi, align 8
  %11480 = zext i8 %11478 to i32
  %11481 = add nsw i32 %11480, -3
  %11482 = icmp ult i8 %11478, 3
  %11483 = zext i1 %11482 to i8
  store i8 %11483, i8* %19, align 1
  %11484 = and i32 %11481, 255
  %11485 = tail call i32 @llvm.ctpop.i32(i32 %11484)
  %11486 = trunc i32 %11485 to i8
  %11487 = and i8 %11486, 1
  %11488 = xor i8 %11487, 1
  store i8 %11488, i8* %26, align 1
  %11489 = xor i32 %11481, %11480
  %11490 = lshr i32 %11489, 4
  %11491 = trunc i32 %11490 to i8
  %11492 = and i8 %11491, 1
  store i8 %11492, i8* %31, align 1
  %11493 = icmp eq i32 %11481, 0
  %11494 = zext i1 %11493 to i8
  store i8 %11494, i8* %34, align 1
  %11495 = lshr i32 %11481, 31
  %11496 = trunc i32 %11495 to i8
  store i8 %11496, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v347 = select i1 %11493, i64 336, i64 21
  %11497 = add i64 %11471, %.v347
  store i64 %11497, i64* %3, align 8
  br i1 %11493, label %block_.L_41df9e, label %block_41de63

block_41de63:                                     ; preds = %block_41de4e
  %11498 = add i64 %11497, 4
  store i64 %11498, i64* %3, align 8
  %11499 = load i32, i32* %11445, align 4
  %11500 = sext i32 %11499 to i64
  store i64 %11500, i64* %RAX.i1555, align 8
  %11501 = add nsw i64 %11500, 12099168
  %11502 = add i64 %11497, 12
  store i64 %11502, i64* %3, align 8
  %11503 = inttoptr i64 %11501 to i8*
  %11504 = load i8, i8* %11503, align 1
  %11505 = zext i8 %11504 to i64
  store i64 %11505, i64* %RCX.i4050.pre-phi, align 8
  %11506 = zext i8 %11504 to i32
  store i8 0, i8* %19, align 1
  %11507 = tail call i32 @llvm.ctpop.i32(i32 %11506)
  %11508 = trunc i32 %11507 to i8
  %11509 = and i8 %11508, 1
  %11510 = xor i8 %11509, 1
  store i8 %11510, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11511 = icmp eq i8 %11504, 0
  %11512 = zext i1 %11511 to i8
  store i8 %11512, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v348 = select i1 %11511, i64 315, i64 21
  %11513 = add i64 %11497, %.v348
  store i64 %11513, i64* %3, align 8
  br i1 %11511, label %block_.L_41df9e, label %block_41de78

block_41de78:                                     ; preds = %block_41de63
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %11514 = add i64 %11513, 14
  store i64 %11514, i64* %3, align 8
  %11515 = load i32, i32* %11445, align 4
  %11516 = sext i32 %11515 to i64
  %11517 = mul nsw i64 %11516, 76
  store i64 %11517, i64* %RCX.i4050.pre-phi, align 8
  %11518 = lshr i64 %11517, 63
  %11519 = add i64 %11517, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %11519, i64* %RAX.i1555, align 8
  %11520 = icmp ult i64 %11519, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11521 = icmp ult i64 %11519, %11517
  %11522 = or i1 %11520, %11521
  %11523 = zext i1 %11522 to i8
  store i8 %11523, i8* %19, align 1
  %11524 = trunc i64 %11519 to i32
  %11525 = and i32 %11524, 252
  %11526 = tail call i32 @llvm.ctpop.i32(i32 %11525)
  %11527 = trunc i32 %11526 to i8
  %11528 = and i8 %11527, 1
  %11529 = xor i8 %11528, 1
  store i8 %11529, i8* %26, align 1
  %11530 = xor i64 %11517, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11531 = xor i64 %11530, %11519
  %11532 = lshr i64 %11531, 4
  %11533 = trunc i64 %11532 to i8
  %11534 = and i8 %11533, 1
  store i8 %11534, i8* %31, align 1
  %11535 = icmp eq i64 %11519, 0
  %11536 = zext i1 %11535 to i8
  store i8 %11536, i8* %34, align 1
  %11537 = lshr i64 %11519, 63
  %11538 = trunc i64 %11537 to i8
  store i8 %11538, i8* %37, align 1
  %11539 = xor i64 %11537, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %11540 = xor i64 %11537, %11518
  %11541 = add nuw nsw i64 %11539, %11540
  %11542 = icmp eq i64 %11541, 2
  %11543 = zext i1 %11542 to i8
  store i8 %11543, i8* %43, align 1
  %11544 = add i64 %11517, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 8)
  %11545 = add i64 %11513, 24
  store i64 %11545, i64* %3, align 8
  %11546 = inttoptr i64 %11544 to i32*
  %11547 = load i32, i32* %11546, align 4
  %11548 = zext i32 %11547 to i64
  store i64 %11548, i64* %RDX.i4244, align 8
  %11549 = add i64 %11513, 27
  store i64 %11549, i64* %3, align 8
  %11550 = load i32, i32* %11445, align 4
  %11551 = sub i32 %11547, %11550
  %11552 = icmp ult i32 %11547, %11550
  %11553 = zext i1 %11552 to i8
  store i8 %11553, i8* %19, align 1
  %11554 = and i32 %11551, 255
  %11555 = tail call i32 @llvm.ctpop.i32(i32 %11554)
  %11556 = trunc i32 %11555 to i8
  %11557 = and i8 %11556, 1
  %11558 = xor i8 %11557, 1
  store i8 %11558, i8* %26, align 1
  %11559 = xor i32 %11550, %11547
  %11560 = xor i32 %11559, %11551
  %11561 = lshr i32 %11560, 4
  %11562 = trunc i32 %11561 to i8
  %11563 = and i8 %11562, 1
  store i8 %11563, i8* %31, align 1
  %11564 = icmp eq i32 %11551, 0
  %11565 = zext i1 %11564 to i8
  store i8 %11565, i8* %34, align 1
  %11566 = lshr i32 %11551, 31
  %11567 = trunc i32 %11566 to i8
  store i8 %11567, i8* %37, align 1
  %11568 = lshr i32 %11547, 31
  %11569 = lshr i32 %11550, 31
  %11570 = xor i32 %11569, %11568
  %11571 = xor i32 %11566, %11568
  %11572 = add nuw nsw i32 %11571, %11570
  %11573 = icmp eq i32 %11572, 2
  %11574 = zext i1 %11573 to i8
  store i8 %11574, i8* %43, align 1
  %.v349 = select i1 %11564, i64 33, i64 294
  %11575 = add i64 %11513, %.v349
  store i64 %11575, i64* %3, align 8
  br i1 %11564, label %block_41de99, label %block_.L_41df9e

block_41de99:                                     ; preds = %block_41de78
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %11576 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %11576, i64* %RCX.i4050.pre-phi, align 8
  %11577 = load i64, i64* %RBP.i, align 8
  %11578 = add i64 %11577, -24
  %11579 = add i64 %11575, 22
  store i64 %11579, i64* %3, align 8
  %11580 = inttoptr i64 %11578 to i32*
  %11581 = load i32, i32* %11580, align 4
  %11582 = sext i32 %11581 to i64
  %11583 = mul nsw i64 %11582, 76
  store i64 %11583, i64* %RDX.i4244, align 8
  %11584 = lshr i64 %11583, 63
  %11585 = add i64 %11583, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %11585, i64* %RAX.i1555, align 8
  %11586 = icmp ult i64 %11585, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11587 = icmp ult i64 %11585, %11583
  %11588 = or i1 %11586, %11587
  %11589 = zext i1 %11588 to i8
  store i8 %11589, i8* %19, align 1
  %11590 = trunc i64 %11585 to i32
  %11591 = and i32 %11590, 252
  %11592 = tail call i32 @llvm.ctpop.i32(i32 %11591)
  %11593 = trunc i32 %11592 to i8
  %11594 = and i8 %11593, 1
  %11595 = xor i8 %11594, 1
  store i8 %11595, i8* %26, align 1
  %11596 = xor i64 %11583, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11597 = xor i64 %11596, %11585
  %11598 = lshr i64 %11597, 4
  %11599 = trunc i64 %11598 to i8
  %11600 = and i8 %11599, 1
  store i8 %11600, i8* %31, align 1
  %11601 = icmp eq i64 %11585, 0
  %11602 = zext i1 %11601 to i8
  store i8 %11602, i8* %34, align 1
  %11603 = lshr i64 %11585, 63
  %11604 = trunc i64 %11603 to i8
  store i8 %11604, i8* %37, align 1
  %11605 = xor i64 %11603, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %11606 = xor i64 %11603, %11584
  %11607 = add nuw nsw i64 %11605, %11606
  %11608 = icmp eq i64 %11607, 2
  %11609 = zext i1 %11608 to i8
  store i8 %11609, i8* %43, align 1
  %11610 = add i64 %11583, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %11611 = add i64 %11575, 33
  store i64 %11611, i64* %3, align 8
  %11612 = inttoptr i64 %11610 to i32*
  %11613 = load i32, i32* %11612, align 4
  %11614 = sext i32 %11613 to i64
  %11615 = mul nsw i64 %11614, 104
  store i64 %11615, i64* %RAX.i1555, align 8
  %11616 = lshr i64 %11615, 63
  %11617 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %11618 = add i64 %11615, %11617
  store i64 %11618, i64* %RCX.i4050.pre-phi, align 8
  %11619 = icmp ult i64 %11618, %11617
  %11620 = icmp ult i64 %11618, %11615
  %11621 = or i1 %11619, %11620
  %11622 = zext i1 %11621 to i8
  store i8 %11622, i8* %19, align 1
  %11623 = trunc i64 %11618 to i32
  %11624 = and i32 %11623, 255
  %11625 = tail call i32 @llvm.ctpop.i32(i32 %11624)
  %11626 = trunc i32 %11625 to i8
  %11627 = and i8 %11626, 1
  %11628 = xor i8 %11627, 1
  store i8 %11628, i8* %26, align 1
  %11629 = xor i64 %11615, %11617
  %11630 = xor i64 %11629, %11618
  %11631 = lshr i64 %11630, 4
  %11632 = trunc i64 %11631 to i8
  %11633 = and i8 %11632, 1
  store i8 %11633, i8* %31, align 1
  %11634 = icmp eq i64 %11618, 0
  %11635 = zext i1 %11634 to i8
  store i8 %11635, i8* %34, align 1
  %11636 = lshr i64 %11618, 63
  %11637 = trunc i64 %11636 to i8
  store i8 %11637, i8* %37, align 1
  %11638 = lshr i64 %11617, 63
  %11639 = xor i64 %11636, %11638
  %11640 = xor i64 %11636, %11616
  %11641 = add nuw nsw i64 %11639, %11640
  %11642 = icmp eq i64 %11641, 2
  %11643 = zext i1 %11642 to i8
  store i8 %11643, i8* %43, align 1
  %11644 = add i64 %11618, 60
  %11645 = add i64 %11575, 44
  store i64 %11645, i64* %3, align 8
  %11646 = inttoptr i64 %11644 to i32*
  %11647 = load i32, i32* %11646, align 4
  %11648 = add i32 %11647, -2
  %11649 = icmp ult i32 %11647, 2
  %11650 = zext i1 %11649 to i8
  store i8 %11650, i8* %19, align 1
  %11651 = and i32 %11648, 255
  %11652 = tail call i32 @llvm.ctpop.i32(i32 %11651)
  %11653 = trunc i32 %11652 to i8
  %11654 = and i8 %11653, 1
  %11655 = xor i8 %11654, 1
  store i8 %11655, i8* %26, align 1
  %11656 = xor i32 %11648, %11647
  %11657 = lshr i32 %11656, 4
  %11658 = trunc i32 %11657 to i8
  %11659 = and i8 %11658, 1
  store i8 %11659, i8* %31, align 1
  %11660 = icmp eq i32 %11648, 0
  %11661 = zext i1 %11660 to i8
  store i8 %11661, i8* %34, align 1
  %11662 = lshr i32 %11648, 31
  %11663 = trunc i32 %11662 to i8
  store i8 %11663, i8* %37, align 1
  %11664 = lshr i32 %11647, 31
  %11665 = xor i32 %11662, %11664
  %11666 = add nuw nsw i32 %11665, %11664
  %11667 = icmp eq i32 %11666, 2
  %11668 = zext i1 %11667 to i8
  store i8 %11668, i8* %43, align 1
  %.v350 = select i1 %11660, i64 50, i64 261
  %11669 = add i64 %11575, %.v350
  store i64 %11669, i64* %3, align 8
  br i1 %11660, label %block_41decb, label %block_.L_41df9e

block_41decb:                                     ; preds = %block_41de99
  %11670 = load i64, i64* %RBP.i, align 8
  %11671 = add i64 %11670, -24
  %11672 = add i64 %11669, 3
  store i64 %11672, i64* %3, align 8
  %11673 = inttoptr i64 %11671 to i32*
  %11674 = load i32, i32* %11673, align 4
  %11675 = zext i32 %11674 to i64
  store i64 %11675, i64* %RDI.i4254, align 8
  %11676 = add i64 %11669, 8837
  %11677 = add i64 %11669, 8
  %11678 = load i64, i64* %6, align 8
  %11679 = add i64 %11678, -8
  %11680 = inttoptr i64 %11679 to i64*
  store i64 %11677, i64* %11680, align 8
  store i64 %11679, i64* %6, align 8
  store i64 %11676, i64* %3, align 8
  %call2_41dece = tail call %struct.Memory* @sub_420150.first_worm_in_dragon(%struct.State* nonnull %0, i64 %11676, %struct.Memory* %MEMORY.107)
  %11681 = load i64, i64* %RBP.i, align 8
  %11682 = add i64 %11681, -848
  %11683 = load i32, i32* %EAX.i4253, align 4
  %11684 = load i64, i64* %3, align 8
  %11685 = add i64 %11684, 6
  store i64 %11685, i64* %3, align 8
  %11686 = inttoptr i64 %11682 to i32*
  store i32 %11683, i32* %11686, align 4
  %.pre243 = load i64, i64* %3, align 8
  br label %block_.L_41ded9

block_.L_41ded9:                                  ; preds = %block_.L_41df10, %block_41decb
  %11687 = phi i64 [ %11763, %block_.L_41df10 ], [ %.pre243, %block_41decb ]
  %11688 = load i64, i64* %RBP.i, align 8
  %11689 = add i64 %11688, -848
  %11690 = add i64 %11687, 7
  store i64 %11690, i64* %3, align 8
  %11691 = inttoptr i64 %11689 to i32*
  %11692 = load i32, i32* %11691, align 4
  store i8 0, i8* %19, align 1
  %11693 = and i32 %11692, 255
  %11694 = tail call i32 @llvm.ctpop.i32(i32 %11693)
  %11695 = trunc i32 %11694 to i8
  %11696 = and i8 %11695, 1
  %11697 = xor i8 %11696, 1
  store i8 %11697, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11698 = icmp eq i32 %11692, 0
  %11699 = zext i1 %11698 to i8
  store i8 %11699, i8* %34, align 1
  %11700 = lshr i32 %11692, 31
  %11701 = trunc i32 %11700 to i8
  store i8 %11701, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v317 = select i1 %11698, i64 82, i64 13
  %11702 = add i64 %11687, %.v317
  store i64 %11702, i64* %3, align 8
  br i1 %11698, label %block_.L_41df2b.loopexit, label %block_41dee6

block_41dee6:                                     ; preds = %block_.L_41ded9
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1555, align 8
  %11703 = add i64 %11702, 17
  store i64 %11703, i64* %3, align 8
  %11704 = load i32, i32* %11691, align 4
  %11705 = sext i32 %11704 to i64
  %11706 = mul nsw i64 %11705, 380
  store i64 %11706, i64* %RCX.i4050.pre-phi, align 8
  %11707 = lshr i64 %11706, 63
  %11708 = add i64 %11706, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %11708, i64* %RAX.i1555, align 8
  %11709 = icmp ult i64 %11708, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11710 = icmp ult i64 %11708, %11706
  %11711 = or i1 %11709, %11710
  %11712 = zext i1 %11711 to i8
  store i8 %11712, i8* %19, align 1
  %11713 = trunc i64 %11708 to i32
  %11714 = and i32 %11713, 252
  %11715 = tail call i32 @llvm.ctpop.i32(i32 %11714)
  %11716 = trunc i32 %11715 to i8
  %11717 = and i8 %11716, 1
  %11718 = xor i8 %11717, 1
  store i8 %11718, i8* %26, align 1
  %11719 = xor i64 %11706, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %11720 = xor i64 %11719, %11708
  %11721 = lshr i64 %11720, 4
  %11722 = trunc i64 %11721 to i8
  %11723 = and i8 %11722, 1
  store i8 %11723, i8* %31, align 1
  %11724 = icmp eq i64 %11708, 0
  %11725 = zext i1 %11724 to i8
  store i8 %11725, i8* %34, align 1
  %11726 = lshr i64 %11708, 63
  %11727 = trunc i64 %11726 to i8
  store i8 %11727, i8* %37, align 1
  %11728 = xor i64 %11726, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %11729 = xor i64 %11726, %11707
  %11730 = add nuw nsw i64 %11728, %11729
  %11731 = icmp eq i64 %11730, 2
  %11732 = zext i1 %11731 to i8
  store i8 %11732, i8* %43, align 1
  %11733 = add i64 %11706, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 48)
  %11734 = add i64 %11702, 31
  store i64 %11734, i64* %3, align 8
  %11735 = inttoptr i64 %11733 to i32*
  %11736 = load i32, i32* %11735, align 4
  store i8 0, i8* %19, align 1
  %11737 = and i32 %11736, 255
  %11738 = tail call i32 @llvm.ctpop.i32(i32 %11737)
  %11739 = trunc i32 %11738 to i8
  %11740 = and i8 %11739, 1
  %11741 = xor i8 %11740, 1
  store i8 %11741, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11742 = icmp eq i32 %11736, 0
  %11743 = zext i1 %11742 to i8
  store i8 %11743, i8* %34, align 1
  %11744 = lshr i32 %11736, 31
  %11745 = trunc i32 %11744 to i8
  store i8 %11745, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v = select i1 %11742, i64 37, i64 42
  %11746 = add i64 %11702, %.v
  store i64 %11746, i64* %3, align 8
  br i1 %11742, label %block_41df0b, label %block_.L_41df10

block_41df0b:                                     ; preds = %block_41dee6
  %11747 = add i64 %11746, 32
  store i64 %11747, i64* %3, align 8
  br label %block_.L_41df2b

block_.L_41df10:                                  ; preds = %block_41dee6
  %11748 = add i64 %11746, 11
  store i64 %11748, i64* %3, align 8
  %11749 = load i32, i32* %11691, align 4
  %11750 = zext i32 %11749 to i64
  store i64 %11750, i64* %RDI.i4254, align 8
  %11751 = add i64 %11746, 8816
  %11752 = add i64 %11746, 16
  %11753 = load i64, i64* %6, align 8
  %11754 = add i64 %11753, -8
  %11755 = inttoptr i64 %11754 to i64*
  store i64 %11752, i64* %11755, align 8
  store i64 %11754, i64* %6, align 8
  store i64 %11751, i64* %3, align 8
  %call2_41df1b = tail call %struct.Memory* @sub_420180.next_worm_in_dragon(%struct.State* nonnull %0, i64 %11751, %struct.Memory* %MEMORY.107)
  %11756 = load i64, i64* %RBP.i, align 8
  %11757 = add i64 %11756, -848
  %11758 = load i32, i32* %EAX.i4253, align 4
  %11759 = load i64, i64* %3, align 8
  %11760 = add i64 %11759, 6
  store i64 %11760, i64* %3, align 8
  %11761 = inttoptr i64 %11757 to i32*
  store i32 %11758, i32* %11761, align 4
  %11762 = load i64, i64* %3, align 8
  %11763 = add i64 %11762, -77
  store i64 %11763, i64* %3, align 8
  br label %block_.L_41ded9

block_.L_41df2b.loopexit:                         ; preds = %block_.L_41ded9
  br label %block_.L_41df2b

block_.L_41df2b:                                  ; preds = %block_.L_41df2b.loopexit, %block_41df0b
  %11764 = phi i64 [ %11747, %block_41df0b ], [ %11702, %block_.L_41df2b.loopexit ]
  %11765 = add i64 %11764, 7
  store i64 %11765, i64* %3, align 8
  %11766 = load i32, i32* %11691, align 4
  store i8 0, i8* %19, align 1
  %11767 = and i32 %11766, 255
  %11768 = tail call i32 @llvm.ctpop.i32(i32 %11767)
  %11769 = trunc i32 %11768 to i8
  %11770 = and i8 %11769, 1
  %11771 = xor i8 %11770, 1
  store i8 %11771, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %11772 = icmp eq i32 %11766, 0
  %11773 = zext i1 %11772 to i8
  store i8 %11773, i8* %34, align 1
  %11774 = lshr i32 %11766, 31
  %11775 = trunc i32 %11774 to i8
  store i8 %11775, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v351 = select i1 %11772, i64 13, i64 110
  %11776 = add i64 %11764, %.v351
  store i64 %11776, i64* %3, align 8
  br i1 %11772, label %block_41df38, label %block_.L_41df99

block_41df38:                                     ; preds = %block_.L_41df2b
  %11777 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %11778 = and i32 %11777, 32
  %11779 = zext i32 %11778 to i64
  store i64 %11779, i64* %RAX.i1555, align 8
  store i8 0, i8* %19, align 1
  %11780 = tail call i32 @llvm.ctpop.i32(i32 %11778)
  %11781 = trunc i32 %11780 to i8
  %11782 = xor i8 %11781, 1
  store i8 %11782, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %.lobit316 = lshr exact i32 %11778, 5
  %11783 = trunc i32 %.lobit316 to i8
  %11784 = xor i8 %11783, 1
  store i8 %11784, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %11785 = icmp eq i8 %11784, 0
  %.v352 = select i1 %11785, i64 24, i64 19
  %11786 = add i64 %11776, %.v352
  store i64 %11786, i64* %3, align 8
  br i1 %11785, label %block_.L_41df50, label %block_41df4b

block_41df4b:                                     ; preds = %block_41df38
  %11787 = add i64 %11786, 31
  store i64 %11787, i64* %3, align 8
  br label %block_.L_41df6a

block_.L_41df50:                                  ; preds = %block_41df38
  store i64 ptrtoint (%G__0x57b10b_type* @G__0x57b10b to i64), i64* %RDI.i4254, align 8
  %11788 = add i64 %11688, -24
  %11789 = add i64 %11786, 13
  store i64 %11789, i64* %3, align 8
  %11790 = inttoptr i64 %11788 to i32*
  %11791 = load i32, i32* %11790, align 4
  %11792 = zext i32 %11791 to i64
  store i64 %11792, i64* %RSI.i4246, align 8
  store i8 0, i8* %AL.i3758, align 1
  %11793 = add i64 %11786, 212576
  %11794 = add i64 %11786, 20
  %11795 = load i64, i64* %6, align 8
  %11796 = add i64 %11795, -8
  %11797 = inttoptr i64 %11796 to i64*
  store i64 %11794, i64* %11797, align 8
  store i64 %11796, i64* %6, align 8
  store i64 %11793, i64* %3, align 8
  %call2_41df5f = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %11793, %struct.Memory* %MEMORY.107)
  %11798 = load i64, i64* %RBP.i, align 8
  %11799 = add i64 %11798, -1100
  %11800 = load i32, i32* %EAX.i4253, align 4
  %11801 = load i64, i64* %3, align 8
  %11802 = add i64 %11801, 6
  store i64 %11802, i64* %3, align 8
  %11803 = inttoptr i64 %11799 to i32*
  store i32 %11800, i32* %11803, align 4
  %.pre244 = load i64, i64* %3, align 8
  %.pre245 = load i64, i64* %RBP.i, align 8
  br label %block_.L_41df6a

block_.L_41df6a:                                  ; preds = %block_.L_41df50, %block_41df4b
  %11804 = phi i64 [ %.pre245, %block_.L_41df50 ], [ %11688, %block_41df4b ]
  %11805 = phi i64 [ %.pre244, %block_.L_41df50 ], [ %11787, %block_41df4b ]
  %MEMORY.110 = phi %struct.Memory* [ %call2_41df5f, %block_.L_41df50 ], [ %MEMORY.107, %block_41df4b ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %11806 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %11806, i64* %RCX.i4050.pre-phi, align 8
  %11807 = add i64 %11804, -24
  %11808 = add i64 %11805, 22
  store i64 %11808, i64* %3, align 8
  %11809 = inttoptr i64 %11807 to i32*
  %11810 = load i32, i32* %11809, align 4
  %11811 = sext i32 %11810 to i64
  %11812 = mul nsw i64 %11811, 76
  store i64 %11812, i64* %RDX.i4244, align 8
  %11813 = lshr i64 %11812, 63
  %11814 = add i64 %11812, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %11814, i64* %RAX.i1555, align 8
  %11815 = icmp ult i64 %11814, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11816 = icmp ult i64 %11814, %11812
  %11817 = or i1 %11815, %11816
  %11818 = zext i1 %11817 to i8
  store i8 %11818, i8* %19, align 1
  %11819 = trunc i64 %11814 to i32
  %11820 = and i32 %11819, 252
  %11821 = tail call i32 @llvm.ctpop.i32(i32 %11820)
  %11822 = trunc i32 %11821 to i8
  %11823 = and i8 %11822, 1
  %11824 = xor i8 %11823, 1
  store i8 %11824, i8* %26, align 1
  %11825 = xor i64 %11812, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %11826 = xor i64 %11825, %11814
  %11827 = lshr i64 %11826, 4
  %11828 = trunc i64 %11827 to i8
  %11829 = and i8 %11828, 1
  store i8 %11829, i8* %31, align 1
  %11830 = icmp eq i64 %11814, 0
  %11831 = zext i1 %11830 to i8
  store i8 %11831, i8* %34, align 1
  %11832 = lshr i64 %11814, 63
  %11833 = trunc i64 %11832 to i8
  store i8 %11833, i8* %37, align 1
  %11834 = xor i64 %11832, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %11835 = xor i64 %11832, %11813
  %11836 = add nuw nsw i64 %11834, %11835
  %11837 = icmp eq i64 %11836, 2
  %11838 = zext i1 %11837 to i8
  store i8 %11838, i8* %43, align 1
  %11839 = add i64 %11812, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %11840 = add i64 %11805, 33
  store i64 %11840, i64* %3, align 8
  %11841 = inttoptr i64 %11839 to i32*
  %11842 = load i32, i32* %11841, align 4
  %11843 = sext i32 %11842 to i64
  %11844 = mul nsw i64 %11843, 104
  store i64 %11844, i64* %RAX.i1555, align 8
  %11845 = lshr i64 %11844, 63
  %11846 = load i64, i64* %RCX.i4050.pre-phi, align 8
  %11847 = add i64 %11844, %11846
  store i64 %11847, i64* %RCX.i4050.pre-phi, align 8
  %11848 = icmp ult i64 %11847, %11846
  %11849 = icmp ult i64 %11847, %11844
  %11850 = or i1 %11848, %11849
  %11851 = zext i1 %11850 to i8
  store i8 %11851, i8* %19, align 1
  %11852 = trunc i64 %11847 to i32
  %11853 = and i32 %11852, 255
  %11854 = tail call i32 @llvm.ctpop.i32(i32 %11853)
  %11855 = trunc i32 %11854 to i8
  %11856 = and i8 %11855, 1
  %11857 = xor i8 %11856, 1
  store i8 %11857, i8* %26, align 1
  %11858 = xor i64 %11844, %11846
  %11859 = xor i64 %11858, %11847
  %11860 = lshr i64 %11859, 4
  %11861 = trunc i64 %11860 to i8
  %11862 = and i8 %11861, 1
  store i8 %11862, i8* %31, align 1
  %11863 = icmp eq i64 %11847, 0
  %11864 = zext i1 %11863 to i8
  store i8 %11864, i8* %34, align 1
  %11865 = lshr i64 %11847, 63
  %11866 = trunc i64 %11865 to i8
  store i8 %11866, i8* %37, align 1
  %11867 = lshr i64 %11846, 63
  %11868 = xor i64 %11865, %11867
  %11869 = xor i64 %11865, %11845
  %11870 = add nuw nsw i64 %11868, %11869
  %11871 = icmp eq i64 %11870, 2
  %11872 = zext i1 %11871 to i8
  store i8 %11872, i8* %43, align 1
  %11873 = add i64 %11847, 60
  %11874 = add i64 %11805, 47
  store i64 %11874, i64* %3, align 8
  %11875 = inttoptr i64 %11873 to i32*
  store i32 5, i32* %11875, align 4
  %.pre246 = load i64, i64* %3, align 8
  br label %block_.L_41df99

block_.L_41df99:                                  ; preds = %block_.L_41df2b, %block_.L_41df6a
  %11876 = phi i64 [ %11776, %block_.L_41df2b ], [ %.pre246, %block_.L_41df6a ]
  %MEMORY.111 = phi %struct.Memory* [ %MEMORY.107, %block_.L_41df2b ], [ %MEMORY.110, %block_.L_41df6a ]
  %11877 = add i64 %11876, 5
  store i64 %11877, i64* %3, align 8
  br label %block_.L_41df9e

block_.L_41df9e:                                  ; preds = %block_41de99, %block_41de78, %block_.L_41df99, %block_41de63, %block_41de4e
  %11878 = phi i64 [ %11497, %block_41de4e ], [ %11513, %block_41de63 ], [ %11575, %block_41de78 ], [ %11669, %block_41de99 ], [ %11877, %block_.L_41df99 ]
  %MEMORY.112 = phi %struct.Memory* [ %MEMORY.107, %block_41de4e ], [ %MEMORY.107, %block_41de63 ], [ %MEMORY.107, %block_41de78 ], [ %MEMORY.107, %block_41de99 ], [ %MEMORY.111, %block_.L_41df99 ]
  %11879 = load i64, i64* %RBP.i, align 8
  %11880 = add i64 %11879, -24
  %11881 = add i64 %11878, 8
  store i64 %11881, i64* %3, align 8
  %11882 = inttoptr i64 %11880 to i32*
  %11883 = load i32, i32* %11882, align 4
  %11884 = add i32 %11883, 1
  %11885 = zext i32 %11884 to i64
  store i64 %11885, i64* %RAX.i1555, align 8
  %11886 = icmp eq i32 %11883, -1
  %11887 = icmp eq i32 %11884, 0
  %11888 = or i1 %11886, %11887
  %11889 = zext i1 %11888 to i8
  store i8 %11889, i8* %19, align 1
  %11890 = and i32 %11884, 255
  %11891 = tail call i32 @llvm.ctpop.i32(i32 %11890)
  %11892 = trunc i32 %11891 to i8
  %11893 = and i8 %11892, 1
  %11894 = xor i8 %11893, 1
  store i8 %11894, i8* %26, align 1
  %11895 = xor i32 %11884, %11883
  %11896 = lshr i32 %11895, 4
  %11897 = trunc i32 %11896 to i8
  %11898 = and i8 %11897, 1
  store i8 %11898, i8* %31, align 1
  %11899 = zext i1 %11887 to i8
  store i8 %11899, i8* %34, align 1
  %11900 = lshr i32 %11884, 31
  %11901 = trunc i32 %11900 to i8
  store i8 %11901, i8* %37, align 1
  %11902 = lshr i32 %11883, 31
  %11903 = xor i32 %11900, %11902
  %11904 = add nuw nsw i32 %11903, %11900
  %11905 = icmp eq i32 %11904, 2
  %11906 = zext i1 %11905 to i8
  store i8 %11906, i8* %43, align 1
  %11907 = add i64 %11878, 14
  store i64 %11907, i64* %3, align 8
  store i32 %11884, i32* %11882, align 4
  %11908 = load i64, i64* %3, align 8
  %11909 = add i64 %11908, -363
  store i64 %11909, i64* %3, align 8
  br label %block_.L_41de41

block_.L_41dfb1:                                  ; preds = %block_.L_41de41
  store i64 2, i64* %RDI.i4254, align 8
  store i64 ptrtoint (%G__0x57b132_type* @G__0x57b132 to i64), i64* %RSI.i4246, align 8
  store i64 0, i64* %RDX.i4244, align 8
  store i8 0, i8* %19, align 1
  store i8 1, i8* %26, align 1
  store i8 1, i8* %34, align 1
  store i8 0, i8* %37, align 1
  store i8 0, i8* %43, align 1
  store i8 0, i8* %31, align 1
  %11910 = add i64 %11471, add (i64 ptrtoint (%G_0xc4f96__rip__type* @G_0xc4f96__rip_ to i64), i64 17)
  %11911 = add i64 %11471, 25
  store i64 %11911, i64* %3, align 8
  %11912 = inttoptr i64 %11910 to i64*
  %11913 = load i64, i64* %11912, align 8
  store i64 %11913, i64* %93, align 1
  store double 0.000000e+00, double* %95, align 1
  %11914 = add i64 %11471, 386079
  %11915 = add i64 %11471, 30
  %11916 = load i64, i64* %6, align 8
  %11917 = add i64 %11916, -8
  %11918 = inttoptr i64 %11917 to i64*
  store i64 %11915, i64* %11918, align 8
  store i64 %11917, i64* %6, align 8
  store i64 %11914, i64* %3, align 8
  %call2_41dfca = tail call %struct.Memory* @sub_47c3d0.time_report(%struct.State* nonnull %0, i64 %11914, %struct.Memory* %MEMORY.107)
  %11919 = load i64, i64* %3, align 8
  store i32 0, i32* bitcast (%G_0xaaf054_type* @G_0xaaf054 to i32*), align 8
  store i32 0, i32* bitcast (%G_0xaaf058_type* @G_0xaaf058 to i32*), align 8
  %11920 = load i64, i64* %RBP.i, align 8
  %11921 = add i64 %11920, -32
  %11922 = add i64 %11919, 29
  store i64 %11922, i64* %3, align 8
  %11923 = inttoptr i64 %11921 to i32*
  store i32 0, i32* %11923, align 4
  %11924 = load i64, i64* %RBP.i, align 8
  %11925 = add i64 %11924, -1112
  %11926 = load i64, i64* %3, align 8
  %11927 = add i64 %11926, 8
  store i64 %11927, i64* %3, align 8
  %11928 = load i64, i64* %93, align 1
  %11929 = inttoptr i64 %11925 to i64*
  store i64 %11928, i64* %11929, align 8
  %.pre242 = load i64, i64* %3, align 8
  br label %block_.L_41dff4

block_.L_41dff4:                                  ; preds = %block_.L_41e091, %block_.L_41dfb1
  %11930 = phi i64 [ %12221, %block_.L_41e091 ], [ %.pre242, %block_.L_41dfb1 ]
  %11931 = load i64, i64* %RBP.i, align 8
  %11932 = add i64 %11931, -32
  %11933 = add i64 %11930, 3
  store i64 %11933, i64* %3, align 8
  %11934 = inttoptr i64 %11932 to i32*
  %11935 = load i32, i32* %11934, align 4
  %11936 = zext i32 %11935 to i64
  store i64 %11936, i64* %RAX.i1555, align 8
  %11937 = load i32, i32* bitcast (%G_0xb54cec_type* @G_0xb54cec to i32*), align 8
  %11938 = sub i32 %11935, %11937
  %11939 = icmp ult i32 %11935, %11937
  %11940 = zext i1 %11939 to i8
  store i8 %11940, i8* %19, align 1
  %11941 = and i32 %11938, 255
  %11942 = tail call i32 @llvm.ctpop.i32(i32 %11941)
  %11943 = trunc i32 %11942 to i8
  %11944 = and i8 %11943, 1
  %11945 = xor i8 %11944, 1
  store i8 %11945, i8* %26, align 1
  %11946 = xor i32 %11937, %11935
  %11947 = xor i32 %11946, %11938
  %11948 = lshr i32 %11947, 4
  %11949 = trunc i32 %11948 to i8
  %11950 = and i8 %11949, 1
  store i8 %11950, i8* %31, align 1
  %11951 = icmp eq i32 %11938, 0
  %11952 = zext i1 %11951 to i8
  store i8 %11952, i8* %34, align 1
  %11953 = lshr i32 %11938, 31
  %11954 = trunc i32 %11953 to i8
  store i8 %11954, i8* %37, align 1
  %11955 = lshr i32 %11935, 31
  %11956 = lshr i32 %11937, 31
  %11957 = xor i32 %11956, %11955
  %11958 = xor i32 %11953, %11955
  %11959 = add nuw nsw i32 %11958, %11957
  %11960 = icmp eq i32 %11959, 2
  %11961 = zext i1 %11960 to i8
  store i8 %11961, i8* %43, align 1
  %11962 = icmp ne i8 %11954, 0
  %11963 = xor i1 %11962, %11960
  %.v344 = select i1 %11963, i64 16, i64 176
  %11964 = add i64 %11930, %.v344
  store i64 %11964, i64* %3, align 8
  br i1 %11963, label %block_41e004, label %block_.L_41e0a4.loopexit

block_41e004:                                     ; preds = %block_.L_41dff4
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %11965 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %11965, i64* %RCX.i4050.pre-phi, align 8
  %11966 = add i64 %11964, 22
  store i64 %11966, i64* %3, align 8
  %11967 = load i32, i32* %11934, align 4
  %11968 = sext i32 %11967 to i64
  %11969 = mul nsw i64 %11968, 104
  store i64 %11969, i64* %RDX.i4244, align 8
  %11970 = lshr i64 %11969, 63
  %11971 = add i64 %11969, %11965
  store i64 %11971, i64* %RCX.i4050.pre-phi, align 8
  %11972 = icmp ult i64 %11971, %11965
  %11973 = icmp ult i64 %11971, %11969
  %11974 = or i1 %11972, %11973
  %11975 = zext i1 %11974 to i8
  store i8 %11975, i8* %19, align 1
  %11976 = trunc i64 %11971 to i32
  %11977 = and i32 %11976, 255
  %11978 = tail call i32 @llvm.ctpop.i32(i32 %11977)
  %11979 = trunc i32 %11978 to i8
  %11980 = and i8 %11979, 1
  %11981 = xor i8 %11980, 1
  store i8 %11981, i8* %26, align 1
  %11982 = xor i64 %11969, %11965
  %11983 = xor i64 %11982, %11971
  %11984 = lshr i64 %11983, 4
  %11985 = trunc i64 %11984 to i8
  %11986 = and i8 %11985, 1
  store i8 %11986, i8* %31, align 1
  %11987 = icmp eq i64 %11971, 0
  %11988 = zext i1 %11987 to i8
  store i8 %11988, i8* %34, align 1
  %11989 = lshr i64 %11971, 63
  %11990 = trunc i64 %11989 to i8
  store i8 %11990, i8* %37, align 1
  %11991 = lshr i64 %11965, 63
  %11992 = xor i64 %11989, %11991
  %11993 = xor i64 %11989, %11970
  %11994 = add nuw nsw i64 %11992, %11993
  %11995 = icmp eq i64 %11994, 2
  %11996 = zext i1 %11995 to i8
  store i8 %11996, i8* %43, align 1
  %11997 = inttoptr i64 %11971 to i32*
  %11998 = add i64 %11964, 32
  store i64 %11998, i64* %3, align 8
  %11999 = load i32, i32* %11997, align 4
  %12000 = sext i32 %11999 to i64
  %12001 = mul nsw i64 %12000, 76
  store i64 %12001, i64* %RCX.i4050.pre-phi, align 8
  %12002 = lshr i64 %12001, 63
  %12003 = load i64, i64* %RAX.i1555, align 8
  %12004 = add i64 %12001, %12003
  store i64 %12004, i64* %RAX.i1555, align 8
  %12005 = icmp ult i64 %12004, %12003
  %12006 = icmp ult i64 %12004, %12001
  %12007 = or i1 %12005, %12006
  %12008 = zext i1 %12007 to i8
  store i8 %12008, i8* %19, align 1
  %12009 = trunc i64 %12004 to i32
  %12010 = and i32 %12009, 255
  %12011 = tail call i32 @llvm.ctpop.i32(i32 %12010)
  %12012 = trunc i32 %12011 to i8
  %12013 = and i8 %12012, 1
  %12014 = xor i8 %12013, 1
  store i8 %12014, i8* %26, align 1
  %12015 = xor i64 %12001, %12003
  %12016 = xor i64 %12015, %12004
  %12017 = lshr i64 %12016, 4
  %12018 = trunc i64 %12017 to i8
  %12019 = and i8 %12018, 1
  store i8 %12019, i8* %31, align 1
  %12020 = icmp eq i64 %12004, 0
  %12021 = zext i1 %12020 to i8
  store i8 %12021, i8* %34, align 1
  %12022 = lshr i64 %12004, 63
  %12023 = trunc i64 %12022 to i8
  store i8 %12023, i8* %37, align 1
  %12024 = lshr i64 %12003, 63
  %12025 = xor i64 %12022, %12024
  %12026 = xor i64 %12022, %12002
  %12027 = add nuw nsw i64 %12025, %12026
  %12028 = icmp eq i64 %12027, 2
  %12029 = zext i1 %12028 to i8
  store i8 %12029, i8* %43, align 1
  %12030 = add i64 %12004, 20
  %12031 = add i64 %11964, 43
  store i64 %12031, i64* %3, align 8
  %12032 = inttoptr i64 %12030 to i32*
  %12033 = load i32, i32* %12032, align 4
  store i8 0, i8* %19, align 1
  %12034 = and i32 %12033, 255
  %12035 = tail call i32 @llvm.ctpop.i32(i32 %12034)
  %12036 = trunc i32 %12035 to i8
  %12037 = and i8 %12036, 1
  %12038 = xor i8 %12037, 1
  store i8 %12038, i8* %26, align 1
  store i8 0, i8* %31, align 1
  %12039 = icmp eq i32 %12033, 0
  %12040 = zext i1 %12039 to i8
  store i8 %12040, i8* %34, align 1
  %12041 = lshr i32 %12033, 31
  %12042 = trunc i32 %12041 to i8
  store i8 %12042, i8* %37, align 1
  store i8 0, i8* %43, align 1
  %.v345 = select i1 %12039, i64 141, i64 49
  %12043 = add i64 %11964, %.v345
  store i64 %12043, i64* %3, align 8
  br i1 %12039, label %block_.L_41e091, label %block_41e035

block_41e035:                                     ; preds = %block_41e004
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1555, align 8
  %12044 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %12044, i64* %RCX.i4050.pre-phi, align 8
  %12045 = load i64, i64* %RBP.i, align 8
  %12046 = add i64 %12045, -32
  %12047 = add i64 %12043, 22
  store i64 %12047, i64* %3, align 8
  %12048 = inttoptr i64 %12046 to i32*
  %12049 = load i32, i32* %12048, align 4
  %12050 = sext i32 %12049 to i64
  %12051 = mul nsw i64 %12050, 104
  store i64 %12051, i64* %RDX.i4244, align 8
  %12052 = lshr i64 %12051, 63
  %12053 = add i64 %12051, %12044
  store i64 %12053, i64* %RCX.i4050.pre-phi, align 8
  %12054 = icmp ult i64 %12053, %12044
  %12055 = icmp ult i64 %12053, %12051
  %12056 = or i1 %12054, %12055
  %12057 = zext i1 %12056 to i8
  store i8 %12057, i8* %19, align 1
  %12058 = trunc i64 %12053 to i32
  %12059 = and i32 %12058, 255
  %12060 = tail call i32 @llvm.ctpop.i32(i32 %12059)
  %12061 = trunc i32 %12060 to i8
  %12062 = and i8 %12061, 1
  %12063 = xor i8 %12062, 1
  store i8 %12063, i8* %26, align 1
  %12064 = xor i64 %12051, %12044
  %12065 = xor i64 %12064, %12053
  %12066 = lshr i64 %12065, 4
  %12067 = trunc i64 %12066 to i8
  %12068 = and i8 %12067, 1
  store i8 %12068, i8* %31, align 1
  %12069 = icmp eq i64 %12053, 0
  %12070 = zext i1 %12069 to i8
  store i8 %12070, i8* %34, align 1
  %12071 = lshr i64 %12053, 63
  %12072 = trunc i64 %12071 to i8
  store i8 %12072, i8* %37, align 1
  %12073 = lshr i64 %12044, 63
  %12074 = xor i64 %12071, %12073
  %12075 = xor i64 %12071, %12052
  %12076 = add nuw nsw i64 %12074, %12075
  %12077 = icmp eq i64 %12076, 2
  %12078 = zext i1 %12077 to i8
  store i8 %12078, i8* %43, align 1
  %12079 = inttoptr i64 %12053 to i32*
  %12080 = add i64 %12043, 32
  store i64 %12080, i64* %3, align 8
  %12081 = load i32, i32* %12079, align 4
  %12082 = sext i32 %12081 to i64
  %12083 = mul nsw i64 %12082, 76
  store i64 %12083, i64* %RCX.i4050.pre-phi, align 8
  %12084 = lshr i64 %12083, 63
  %12085 = load i64, i64* %RAX.i1555, align 8
  %12086 = add i64 %12083, %12085
  store i64 %12086, i64* %RAX.i1555, align 8
  %12087 = icmp ult i64 %12086, %12085
  %12088 = icmp ult i64 %12086, %12083
  %12089 = or i1 %12087, %12088
  %12090 = zext i1 %12089 to i8
  store i8 %12090, i8* %19, align 1
  %12091 = trunc i64 %12086 to i32
  %12092 = and i32 %12091, 255
  %12093 = tail call i32 @llvm.ctpop.i32(i32 %12092)
  %12094 = trunc i32 %12093 to i8
  %12095 = and i8 %12094, 1
  %12096 = xor i8 %12095, 1
  store i8 %12096, i8* %26, align 1
  %12097 = xor i64 %12083, %12085
  %12098 = xor i64 %12097, %12086
  %12099 = lshr i64 %12098, 4
  %12100 = trunc i64 %12099 to i8
  %12101 = and i8 %12100, 1
  store i8 %12101, i8* %31, align 1
  %12102 = icmp eq i64 %12086, 0
  %12103 = zext i1 %12102 to i8
  store i8 %12103, i8* %34, align 1
  %12104 = lshr i64 %12086, 63
  %12105 = trunc i64 %12104 to i8
  store i8 %12105, i8* %37, align 1
  %12106 = lshr i64 %12085, 63
  %12107 = xor i64 %12104, %12106
  %12108 = xor i64 %12104, %12084
  %12109 = add nuw nsw i64 %12107, %12108
  %12110 = icmp eq i64 %12109, 2
  %12111 = zext i1 %12110 to i8
  store i8 %12111, i8* %43, align 1
  %12112 = inttoptr i64 %12086 to i32*
  %12113 = add i64 %12043, 42
  store i64 %12113, i64* %3, align 8
  %12114 = load i32, i32* %12112, align 4
  %12115 = add i32 %12114, -1
  %12116 = icmp eq i32 %12114, 0
  %12117 = zext i1 %12116 to i8
  store i8 %12117, i8* %19, align 1
  %12118 = and i32 %12115, 255
  %12119 = tail call i32 @llvm.ctpop.i32(i32 %12118)
  %12120 = trunc i32 %12119 to i8
  %12121 = and i8 %12120, 1
  %12122 = xor i8 %12121, 1
  store i8 %12122, i8* %26, align 1
  %12123 = xor i32 %12115, %12114
  %12124 = lshr i32 %12123, 4
  %12125 = trunc i32 %12124 to i8
  %12126 = and i8 %12125, 1
  store i8 %12126, i8* %31, align 1
  %12127 = icmp eq i32 %12115, 0
  %12128 = zext i1 %12127 to i8
  store i8 %12128, i8* %34, align 1
  %12129 = lshr i32 %12115, 31
  %12130 = trunc i32 %12129 to i8
  store i8 %12130, i8* %37, align 1
  %12131 = lshr i32 %12114, 31
  %12132 = xor i32 %12129, %12131
  %12133 = add nuw nsw i32 %12132, %12131
  %12134 = icmp eq i32 %12133, 2
  %12135 = zext i1 %12134 to i8
  store i8 %12135, i8* %43, align 1
  %.v346 = select i1 %12127, i64 48, i64 70
  %12136 = add i64 %12043, %.v346
  %12137 = add i64 %12136, 7
  store i64 %12137, i64* %3, align 8
  br i1 %12127, label %block_41e065, label %block_.L_41e07b

block_41e065:                                     ; preds = %block_41e035
  %12138 = load i32, i32* bitcast (%G_0xaaf054_type* @G_0xaaf054 to i32*), align 8
  %12139 = add i32 %12138, 1
  %12140 = zext i32 %12139 to i64
  store i64 %12140, i64* %RAX.i1555, align 8
  %12141 = icmp eq i32 %12138, -1
  %12142 = icmp eq i32 %12139, 0
  %12143 = or i1 %12141, %12142
  %12144 = zext i1 %12143 to i8
  store i8 %12144, i8* %19, align 1
  %12145 = and i32 %12139, 255
  %12146 = tail call i32 @llvm.ctpop.i32(i32 %12145)
  %12147 = trunc i32 %12146 to i8
  %12148 = and i8 %12147, 1
  %12149 = xor i8 %12148, 1
  store i8 %12149, i8* %26, align 1
  %12150 = xor i32 %12139, %12138
  %12151 = lshr i32 %12150, 4
  %12152 = trunc i32 %12151 to i8
  %12153 = and i8 %12152, 1
  store i8 %12153, i8* %31, align 1
  %12154 = zext i1 %12142 to i8
  store i8 %12154, i8* %34, align 1
  %12155 = lshr i32 %12139, 31
  %12156 = trunc i32 %12155 to i8
  store i8 %12156, i8* %37, align 1
  %12157 = lshr i32 %12138, 31
  %12158 = xor i32 %12155, %12157
  %12159 = add nuw nsw i32 %12158, %12155
  %12160 = icmp eq i32 %12159, 2
  %12161 = zext i1 %12160 to i8
  store i8 %12161, i8* %43, align 1
  store i32 %12139, i32* bitcast (%G_0xaaf054_type* @G_0xaaf054 to i32*), align 8
  %12162 = add i64 %12136, 39
  store i64 %12162, i64* %3, align 8
  br label %block_.L_41e08c

block_.L_41e07b:                                  ; preds = %block_41e035
  %12163 = load i32, i32* bitcast (%G_0xaaf058_type* @G_0xaaf058 to i32*), align 8
  %12164 = add i32 %12163, 1
  %12165 = zext i32 %12164 to i64
  store i64 %12165, i64* %RAX.i1555, align 8
  %12166 = icmp eq i32 %12163, -1
  %12167 = icmp eq i32 %12164, 0
  %12168 = or i1 %12166, %12167
  %12169 = zext i1 %12168 to i8
  store i8 %12169, i8* %19, align 1
  %12170 = and i32 %12164, 255
  %12171 = tail call i32 @llvm.ctpop.i32(i32 %12170)
  %12172 = trunc i32 %12171 to i8
  %12173 = and i8 %12172, 1
  %12174 = xor i8 %12173, 1
  store i8 %12174, i8* %26, align 1
  %12175 = xor i32 %12164, %12163
  %12176 = lshr i32 %12175, 4
  %12177 = trunc i32 %12176 to i8
  %12178 = and i8 %12177, 1
  store i8 %12178, i8* %31, align 1
  %12179 = zext i1 %12167 to i8
  store i8 %12179, i8* %34, align 1
  %12180 = lshr i32 %12164, 31
  %12181 = trunc i32 %12180 to i8
  store i8 %12181, i8* %37, align 1
  %12182 = lshr i32 %12163, 31
  %12183 = xor i32 %12180, %12182
  %12184 = add nuw nsw i32 %12183, %12180
  %12185 = icmp eq i32 %12184, 2
  %12186 = zext i1 %12185 to i8
  store i8 %12186, i8* %43, align 1
  %12187 = add i64 %12136, 17
  store i64 %12187, i64* %3, align 8
  store i32 %12164, i32* bitcast (%G_0xaaf058_type* @G_0xaaf058 to i32*), align 8
  br label %block_.L_41e08c

block_.L_41e08c:                                  ; preds = %block_.L_41e07b, %block_41e065
  %12188 = phi i64 [ %12187, %block_.L_41e07b ], [ %12162, %block_41e065 ]
  %12189 = add i64 %12188, 5
  store i64 %12189, i64* %3, align 8
  br label %block_.L_41e091

block_.L_41e091:                                  ; preds = %block_.L_41e08c, %block_41e004
  %12190 = phi i64 [ %12189, %block_.L_41e08c ], [ %12043, %block_41e004 ]
  %12191 = load i64, i64* %RBP.i, align 8
  %12192 = add i64 %12191, -32
  %12193 = add i64 %12190, 8
  store i64 %12193, i64* %3, align 8
  %12194 = inttoptr i64 %12192 to i32*
  %12195 = load i32, i32* %12194, align 4
  %12196 = add i32 %12195, 1
  %12197 = zext i32 %12196 to i64
  store i64 %12197, i64* %RAX.i1555, align 8
  %12198 = icmp eq i32 %12195, -1
  %12199 = icmp eq i32 %12196, 0
  %12200 = or i1 %12198, %12199
  %12201 = zext i1 %12200 to i8
  store i8 %12201, i8* %19, align 1
  %12202 = and i32 %12196, 255
  %12203 = tail call i32 @llvm.ctpop.i32(i32 %12202)
  %12204 = trunc i32 %12203 to i8
  %12205 = and i8 %12204, 1
  %12206 = xor i8 %12205, 1
  store i8 %12206, i8* %26, align 1
  %12207 = xor i32 %12196, %12195
  %12208 = lshr i32 %12207, 4
  %12209 = trunc i32 %12208 to i8
  %12210 = and i8 %12209, 1
  store i8 %12210, i8* %31, align 1
  %12211 = zext i1 %12199 to i8
  store i8 %12211, i8* %34, align 1
  %12212 = lshr i32 %12196, 31
  %12213 = trunc i32 %12212 to i8
  store i8 %12213, i8* %37, align 1
  %12214 = lshr i32 %12195, 31
  %12215 = xor i32 %12212, %12214
  %12216 = add nuw nsw i32 %12215, %12212
  %12217 = icmp eq i32 %12216, 2
  %12218 = zext i1 %12217 to i8
  store i8 %12218, i8* %43, align 1
  %12219 = add i64 %12190, 14
  store i64 %12219, i64* %3, align 8
  store i32 %12196, i32* %12194, align 4
  %12220 = load i64, i64* %3, align 8
  %12221 = add i64 %12220, -171
  store i64 %12221, i64* %3, align 8
  br label %block_.L_41dff4

block_.L_41e0a4.loopexit:                         ; preds = %block_.L_41dff4
  br label %block_.L_41e0a4

block_.L_41e0a4:                                  ; preds = %block_.L_41e0a4.loopexit, %block_41ca65
  %12222 = phi i64 [ %4930, %block_41ca65 ], [ %11964, %block_.L_41e0a4.loopexit ]
  %MEMORY.116 = phi %struct.Memory* [ %call2_41ca4e, %block_41ca65 ], [ %call2_41dfca, %block_.L_41e0a4.loopexit ]
  %12223 = load i64, i64* %6, align 8
  %12224 = add i64 %12223, 1128
  store i64 %12224, i64* %6, align 8
  %12225 = icmp ugt i64 %12223, -1129
  %12226 = zext i1 %12225 to i8
  store i8 %12226, i8* %19, align 1
  %12227 = trunc i64 %12224 to i32
  %12228 = and i32 %12227, 255
  %12229 = tail call i32 @llvm.ctpop.i32(i32 %12228)
  %12230 = trunc i32 %12229 to i8
  %12231 = and i8 %12230, 1
  %12232 = xor i8 %12231, 1
  store i8 %12232, i8* %26, align 1
  %12233 = xor i64 %12224, %12223
  %12234 = lshr i64 %12233, 4
  %12235 = trunc i64 %12234 to i8
  %12236 = and i8 %12235, 1
  store i8 %12236, i8* %31, align 1
  %12237 = icmp eq i64 %12224, 0
  %12238 = zext i1 %12237 to i8
  store i8 %12238, i8* %34, align 1
  %12239 = lshr i64 %12224, 63
  %12240 = trunc i64 %12239 to i8
  store i8 %12240, i8* %37, align 1
  %12241 = lshr i64 %12223, 63
  %12242 = xor i64 %12239, %12241
  %12243 = add nuw nsw i64 %12242, %12239
  %12244 = icmp eq i64 %12243, 2
  %12245 = zext i1 %12244 to i8
  store i8 %12245, i8* %43, align 1
  %12246 = add i64 %12222, 8
  store i64 %12246, i64* %3, align 8
  %12247 = add i64 %12223, 1136
  %12248 = inttoptr i64 %12224 to i64*
  %12249 = load i64, i64* %12248, align 8
  store i64 %12249, i64* %RBX.i1304, align 8
  store i64 %12247, i64* %6, align 8
  %12250 = add i64 %12222, 9
  store i64 %12250, i64* %3, align 8
  %12251 = add i64 %12223, 1144
  %12252 = inttoptr i64 %12247 to i64*
  %12253 = load i64, i64* %12252, align 8
  store i64 %12253, i64* %RBP.i, align 8
  store i64 %12251, i64* %6, align 8
  %12254 = add i64 %12222, 10
  store i64 %12254, i64* %3, align 8
  %12255 = inttoptr i64 %12251 to i64*
  %12256 = load i64, i64* %12255, align 8
  store i64 %12256, i64* %3, align 8
  %12257 = add i64 %12223, 1152
  store i64 %12257, i64* %6, align 8
  ret %struct.Memory* %MEMORY.116
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %RBX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x468___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -1128
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 1128
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %28
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -20
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.start_timer(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0xaaf050(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 11
  store i64 %4, i64* %PC, align 8
  store i32 0, i32* bitcast (%G_0xaaf050_type* @G_0xaaf050 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.initialize_dragon_data(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb01180___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb9a0a0___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__edx___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RDX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.make_domains(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57ae9c___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57ae9c_type* @G__0x57ae9c to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc72fb__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc72fb__rip__type* @G_0xc72fb__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.time_report(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x358__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -856
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.find_connections(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57aeb3___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57aeb3_type* @G__0x57aeb3 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc72d0__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc72d0__rip__type* @G_0xc72d0__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x7ae454(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x7ae454_type* @G_0x7ae454 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x360__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -864
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41be1e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x15__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 21, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x190__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -400
  %10 = icmp ult i32 %8, 400
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41bdf8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rax_1____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -3
  %8 = icmp ult i32 %4, 3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41bde5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb01180___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x24___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 36
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x5____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = add i32 %7, -5
  %9 = icmp ult i32 %7, 5
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %8, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %8, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %8, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %7, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41bd5a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x18__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -24
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.is_ko_point(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41bd43(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x4__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41bd55(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb01180___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.dragon_eye(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bd5a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb9a0a0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = add i32 %7, -4
  %9 = icmp ult i32 %7, 4
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %8, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %8, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %8, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %7, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41bde0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41bdc9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41bddb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bde0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bde5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bdea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -24
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41bcb2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57aece___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57aece_type* @G__0x57aece to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc714f__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc714f__rip__type* @G_0xc714f__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x368__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -872
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.initialize_supplementary_dragon_data(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c0bb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41c0a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb0eff0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x17c___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 380
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41bea7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41bea7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x20__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41beac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c0ad(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x20__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x28__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xb4__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41beed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41bf01(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41bf0c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.add_lunch(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb4bd20___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x8__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0fe0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___rax___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x54__rcx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41bff7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x24__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x24__rax____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %RAX, align 8
  %6 = add i64 %5, 36
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_41bff7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c0a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x10__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x10__rax____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %RAX, align 8
  %6 = add i64 %5, 16
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c0a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb0eff0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x28__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x17c___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 380
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rcx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x54__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 84
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xab0f28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c050(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c09e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57aeeb___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57aeeb_type* @G__0x57aeeb to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R8, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__r8____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x28__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x17c___r8___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 380
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %R8, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x24__rax____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 36
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x0___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  store i8 0, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.gprintf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x36c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -876
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c0a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c0a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41be2a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb45500___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb45500_type* @G__0xb45500 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.find_half_and_false_eyes(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.modify_eye_spaces(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c37f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c132(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c371(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c24f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x38__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x3c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x40__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb01180___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb45500___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb45500_type* @G__0xb45500 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = bitcast i64* %RSP to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 1, i32* %4, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d__0x8__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 8
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x370__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -880
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.compute_eyes(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xab0f24___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 2
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %.lobit = lshr exact i32 %7, 1
  %13 = trunc i32 %.lobit to i8
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c1cc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c1fe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x38__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x374__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -884
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.eyevalue_to_string(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57af1a___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57af1a_type* @G__0x57af1a to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x374__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -884
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x378__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -888
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -56
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x10__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 16
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x14__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 20
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x40__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x18__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 24
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.propagate_eye(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c36c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x48__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x4c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -76
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x50__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb9a0a0___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x37c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -892
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c2e9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c31b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x48__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x380__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -896
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57af35___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57af35_type* @G__0x57af35 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x380__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -896
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x384__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -900
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x48__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -76
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x50__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c10b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.analyze_false_eye_territory(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c80f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c3b2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c801(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c5ca(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x1c__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 1, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x24___rsi___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 36
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rdi____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.find_eye_dragons(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -2
  %8 = icmp ult i32 %4, 2
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c446(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c46e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57ad9b___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57ad9b_type* @G__0x57ad9b to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xfb___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 251, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57af50___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57af50_type* @G__0x57af50 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4294967295, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.abortgo(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c481(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c49e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57af5f___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57af5f_type* @G__0x57af5f to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x388__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -904
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x10___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 16
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -17
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.eye_move_urgency(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb4bd20___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0fe0___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x4c___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 76
  store i64 %6, i64* %RDI, align 8
  %7 = icmp ugt i64 %3, -77
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x38c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -908
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x38c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -908
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ESI, align 4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c547(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb01180___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb01180_type* @G__0xb01180 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x24___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 36
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x18__rcx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x50__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 80
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0fe0___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rsi___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__rdi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___rsi___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x4c___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 76
  store i64 %6, i64* %RDX, align 8
  %7 = icmp ugt i64 %3, -77
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x10___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 16
  store i64 %6, i64* %RCX, align 8
  %7 = icmp ugt i64 %3, -17
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0fe0___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rdi___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdi___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RSI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x4c___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 76
  store i64 %6, i64* %RSI, align 8
  %7 = icmp ugt i64 %3, -77
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x398__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -920
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x398__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -920
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.add_eyevalues(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c7fc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x1c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x3a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -928
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3a0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -928
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x3a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -932
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3a4__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -932
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c678(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c6a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x10a___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 266, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57af95___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57af95_type* @G__0x57af95 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c6b3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c6d0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -936
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -940
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x3ac__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -940
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41c779(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb9a0a0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb9a0a0_type* @G__0xb9a0a0 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi__MINUS0x3b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -952
  %5 = load i64, i64* %RSI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x3b8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -952
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c38b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c8b6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41c84d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c8a3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x8__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__esi___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RSI, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.compute_escape(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___r8___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %R8, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x48__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 72
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c8a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c816(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.resegment_initial_influence(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.compute_refined_dragon_weaknesses(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0xb54cec___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0xb54cec_type* @G_0xb54cec to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c915(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0fe0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x20__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_0x40__rax____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RAX, align 8
  %6 = add i64 %5, 64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm0__0x44__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 68
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c8c7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41c9ac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41c999(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41c994(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41c994(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.compute_crude_status(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x14__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 20
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c999(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c99e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c91c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41ca30(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41ca1d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4c___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 76, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x58__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x8__rsi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.memcpy_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ca22(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41c9b3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.find_neighbor_dragons(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57afa4___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57afa4_type* @G__0x57afa4 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc6512__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc6512__rip__type* @G_0xc6512__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x3c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -960
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41ca6a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41e0a4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.purge_persistent_owl_cache(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41d02f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d01c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x68__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.set_eyevalue(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rdi_1____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41caf0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41caf5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d021(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x68__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -104
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R9, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__r9____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___r8___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %R8, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_0x38__rcx____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RCX, align 8
  %6 = add i64 %5, 56
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x48__rcx____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 72
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0xa___r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, -10
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp ult i32 %5, 10
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %8, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, %5
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %5, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__r10d___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.crude_dragon_weakness(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc6400__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc6400__rip__type* @G_0xc6400__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc6400__rip____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc6400__rip__type* @G_0xc6400__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc6400__rip____xmm3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc6400__rip__type* @G_0xc6400__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd__xmm0___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = extractelement <2 x float> %7, i32 0
  %9 = fpext float %8 to double
  %10 = bitcast %union.VectorReg* %3 to double*
  store double %9, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd_0x10__rax____xmm4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to float*
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm4___xmm3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subsd__xmm3___xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fsub double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomisd__xmm1___xmm2(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %4 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %3 to double*
  %10 = load double, double* %9, align 1
  %11 = fcmp uno double %8, %10
  br i1 %11, label %12, label %22

; <label>:12:                                     ; preds = %block_400488
  %13 = fadd double %8, %10
  %14 = bitcast double %13 to i64
  %15 = and i64 %14, 9221120237041090560
  %16 = icmp eq i64 %15, 9218868437227405312
  %17 = and i64 %14, 2251799813685247
  %18 = icmp ne i64 %17, 0
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %12
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:22:                                     ; preds = %block_400488
  %23 = fcmp ogt double %8, %10
  br i1 %23, label %28, label %24

; <label>:24:                                     ; preds = %22
  %25 = fcmp olt double %8, %10
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp oeq double %8, %10
  br i1 %27, label %28, label %35

; <label>:28:                                     ; preds = %26, %24, %22, %12
  %29 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 1, %26 ], [ 1, %12 ]
  %30 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 0, %26 ], [ 1, %12 ]
  %31 = phi i8 [ 0, %22 ], [ 1, %24 ], [ 0, %26 ], [ 1, %12 ]
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %31, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %28, %26
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %35, %20
  %39 = phi %struct.Memory* [ %21, %20 ], [ %2, %35 ]
  ret %struct.Memory* %39
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x3c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -968
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_41cbef(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc63b8__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc63b8__rip__type* @G_0xc63b8__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc63b8__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc63b8__rip__type* @G_0xc63b8__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd_0x10__rax____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to float*
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulsd__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fmul double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subsd__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast [32 x %union.VectorReg]* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fsub double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x3d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -976
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41cc04(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc6371__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc6371__rip__type* @G_0xc6371__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x3d0__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -976
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc636c__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc636c__rip__type* @G_0xc636c__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd__xmm0___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fadd double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x3c8__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -968
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomisd__xmm0___xmm1(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %4 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast [32 x %union.VectorReg]* %3 to double*
  %10 = load double, double* %9, align 1
  %11 = fcmp uno double %8, %10
  br i1 %11, label %12, label %22

; <label>:12:                                     ; preds = %block_400488
  %13 = fadd double %8, %10
  %14 = bitcast double %13 to i64
  %15 = and i64 %14, 9221120237041090560
  %16 = icmp eq i64 %15, 9218868437227405312
  %17 = and i64 %14, 2251799813685247
  %18 = icmp ne i64 %17, 0
  %19 = and i1 %16, %18
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %12
  %21 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:22:                                     ; preds = %block_400488
  %23 = fcmp ogt double %8, %10
  br i1 %23, label %28, label %24

; <label>:24:                                     ; preds = %22
  %25 = fcmp olt double %8, %10
  br i1 %25, label %28, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp oeq double %8, %10
  br i1 %27, label %28, label %35

; <label>:28:                                     ; preds = %26, %24, %22, %12
  %29 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 1, %26 ], [ 1, %12 ]
  %30 = phi i8 [ 0, %22 ], [ 0, %24 ], [ 0, %26 ], [ 1, %12 ]
  %31 = phi i8 [ 0, %22 ], [ 1, %24 ], [ 0, %26 ], [ 1, %12 ]
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %30, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %31, i8* %34, align 1
  br label %35

; <label>:35:                                     ; preds = %28, %26
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %38, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %35, %20
  %39 = phi %struct.Memory* [ %21, %20 ], [ %2, %35 ]
  ret %struct.Memory* %39
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_41cc75(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4__0x1c__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 4, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x20__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x30__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d017(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x6c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x70__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x74__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -116
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x5c__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x74__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -116
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x28___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 40
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -41
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_attack(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -108
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x6c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41cefe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RSI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x20__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 32
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x24__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 36
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x74__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -116
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x44__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 68
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41cea9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x60__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x38___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 56
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -57
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_defend(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x70__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -112
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x70__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41cea4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41cdce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3__MINUS0x6c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -108
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -3
  %10 = icmp ult i32 %8, 3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cmovel__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  %11 = load i64, i64* %RCX, align 8
  %12 = select i1 %10, i64 %5, i64 %11
  %13 = and i64 %12, 4294967295
  store i64 %13, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x1c__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RDI, align 8
  %5 = add i64 %4, 28
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x30__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RDI, align 8
  %5 = add i64 %4, 48
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x70__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x34__rdi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %4 = load i64, i64* %RDI, align 8
  %5 = add i64 %4, 52
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x48__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 72
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ce9f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x1c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 28
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xab0f24___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_andl__0x1000___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 4096
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8, align 1
  %.lobit = lshr exact i64 %6, 12
  %9 = trunc i64 %.lobit to i8
  %10 = xor i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41ce12(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ce2c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57afba___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57afba_type* @G__0x57afba to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -980
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x20__rcx____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_does_defend(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41ce9a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x30__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 48
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x70__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x34__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 52
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41cea4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41cea9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41cef9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x1c__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x30__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x34__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d012(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x28__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41cfa5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41cfa0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x30__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 48
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x34__rsi_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 52
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41cfa5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57aff0___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57aff0_type* @G__0x57aff0 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5fa4__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5fa4__rip__type* @G_0xc5fa4__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__0x1c__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x24__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x18__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x3e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -992
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d01c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ca76(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b00f___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b00f_type* @G__0x57b00f to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5f18__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5f18__rip__type* @G_0xc5f18__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x3e8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1000
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41d192(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d17f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d0a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d17a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__0x1c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d0f5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x1c__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 64
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d175(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x14__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d133(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__0x14__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d154(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3__0x40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 3, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d170(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__0x40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d17a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d17f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d184(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d05c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b01d___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b01d_type* @G__0x57b01d to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5db5__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5db5__rip__type* @G_0xc5db5__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x3f0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1008
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41d23c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d229(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0x80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x80__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d22e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d1bf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.get_last_move(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d2b9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x24__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x40__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d2b9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__0xab0ed0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0xab0ed0_type* @G_0xab0ed0 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x14__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -20
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d2b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b02e___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b02e_type* @G__0x57b02e to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xab0ed0___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0ed0_type* @G_0xab0ed0 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x3f4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1012
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d2c4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0xab0ed0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 11
  store i64 %4, i64* %PC, align 8
  store i32 0, i32* bitcast (%G_0xab0ed0_type* @G_0xab0ed0 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41d6ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d6db(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d6db(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x88__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x88__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb4bd20___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0fe0___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___r11___r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R11, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %R11, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r9___rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r11___rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBX, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RBX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__rbx____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___r11___r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R11, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %R11, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r11___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R10, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_0x38__r10____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %R10, align 8
  %6 = add i64 %5, 56
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r11___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R11, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R9, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__r9____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___r9___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %R9, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r9___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R10, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x48__r10____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = add i64 %3, 72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0xa___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -10
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 10
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__eax___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5bb9__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5bb9__rip__type* @G_0xc5bb9__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5bb9__rip____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5bb9__rip__type* @G_0xc5bb9__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5bb9__rip____xmm3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5bb9__rip__type* @G_0xc5bb9__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb4bd20___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x18__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___r9___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %R9, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r9___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RSI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd_0x10__rsi____xmm4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %4 = load i64, i64* %RSI, align 8
  %5 = add i64 %4, 16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 5
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to float*
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x400__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1024
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_41d436(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5b71__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5b71__rip__type* @G_0xc5b71__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5b71__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5b71__rip__type* @G_0xc5b71__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x408__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1032
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d44b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5b2a__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5b2a__rip__type* @G_0xc5b2a__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x408__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1032
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5b25__rip____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5b25__rip__type* @G_0xc5b25__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_MINUS0x400__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1024
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %8, i64* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to double*
  store double 0.000000e+00, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_41d4bc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4__0x18__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 4, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x2c__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x3c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d6d6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -140
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x34__rax____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -144
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x8__0x7ae448(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x7ae448_type* @G_0x7ae448 to i32*), align 8
  %6 = add i32 %5, -8
  %7 = icmp ult i32 %5, 8
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i32 %6, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i32 %6, %5
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i32 %6, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %6, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %5, 31
  %28 = xor i32 %24, %27
  %29 = add nuw nsw i32 %28, %27
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_41d6af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xab0fb4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0fb4_type* @G_0xab0fb4 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d6af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xab0fc4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0fc4_type* @G_0xab0fc4 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d541(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xab0ed0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0ed0_type* @G_0xab0ed0 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d6af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.is_same_dragon(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x8c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d609(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -144
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d609(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x94__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x98__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_threaten_defense(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d5e8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xc__0x18__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 12, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x94__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -148
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x98__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x3c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 60
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d604(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x18__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d6aa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d6a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x9c__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xa0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_threaten_attack(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d684(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xb__0x18__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 11, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x9c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -156
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x20__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 32
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xa0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__0x2c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 44
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d6a0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__0x18__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d6a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d6af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b04d___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b04d_type* @G__0x57b04d to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc589a__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc589a__rip__type* @G_0xc589a__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x410__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1040
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d6db(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d6e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d2cb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41d778(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d765(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0xa8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xa8__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d76a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d6f5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b06c___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b06c_type* @G__0x57b06c to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc57cf__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc57cf__rip__type* @G_0xc57cf__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x418__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1048
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41d8bf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x20__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rcx____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = bitcast i64* %RCX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x64___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 100
  store i64 %6, i64* %RCX, align 8
  %7 = icmp ugt i64 %3, -101
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.compute_surroundings(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x20__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0x60__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 96
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x20___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 32
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %.lobit = lshr exact i32 %7, 5
  %13 = trunc i32 %.lobit to i8
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d8ac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__0x60__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d85e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b082___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b082_type* @G__0x57b082 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x41c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1052
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__0x60__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41d8a7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b07b___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b07b_type* @G__0x57b07b to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x420__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1056
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d8ac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d8b1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d7a5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41db5d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xb0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -176
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x4c___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 76
  store i64 %6, i64* %RAX, align 8
  %7 = icmp ugt i64 %3, -77
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xb8__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.max_eyes(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x424__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1060
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.min_eyes(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x424__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1060
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = add i32 %5, %9
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = icmp ult i32 %10, %9
  %13 = icmp ult i32 %10, %5
  %14 = or i1 %12, %13
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %10, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i64 %6, %4
  %24 = trunc i64 %23 to i32
  %25 = xor i32 %24, %10
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %10, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %10, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %9, 31
  %37 = lshr i32 %5, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -172
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xb0__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.dragon_looks_inessential(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41d96e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x5__0x3c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 5, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41db4a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xb0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xb0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x4__rax____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %RAX, align 8
  %6 = add i64 %5, 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41da19(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x64__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 100
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41da19(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x6__0x3c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 6, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41db45(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x1c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41da5a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41db40(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__0x1c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41da9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2__0x3c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41db3b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.dragon_invincible(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41dace(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x9__0x3c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 9, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41db36(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x6__MINUS0xac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -172
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -6
  %10 = icmp ult i32 %8, 6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41daf8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x14__0x34__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -20
  %10 = icmp ult i32 %8, 20
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41db17(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x8__0x3c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 8, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41db31(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__0x3c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41db4f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41d8c6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b0a2___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b0a2_type* @G__0x57b0a2 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc53ea__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc53ea__rip__type* @G_0xc53ea__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x7ae44c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x7ae44c_type* @G_0x7ae44c to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x430__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1072
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41dbac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_41dbac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.new_semeai(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41dbb4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.semeai(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b0b9___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b0b9_type* @G__0x57b0b9 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5393__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5393__rip__type* @G_0xc5393__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x438__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1080
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41dc4d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41dc3a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x8__rdx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x40__rdx____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41dc3f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41dbe1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41de14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41de01(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.is_worm_origin(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41ddfc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x30__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41ddfc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x340__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x34c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -844
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.extended_chainlinks(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x344__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -836
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x348__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -840
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x348__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -840
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x344__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -836
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41dd82(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x348__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -840
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x340__rbp__rcx_4____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -832
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41dd69(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x34c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -844
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41dd82(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41dd6e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x348__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -840
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41dd1e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x34c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -844
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41ddf7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x344__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -836
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_41ddf7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_andl__0x400___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 5
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 1024
  store i64 %6, i64* %RAX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8, align 1
  %.lobit = lshr exact i64 %6, 10
  %9 = trunc i64 %.lobit to i8
  %10 = xor i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41ddb6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ddd0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b0c9___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b0c9_type* @G__0x57b0c9 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x43c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1084
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__0x30__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.propagate_worm(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ddfc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41de01(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41de06(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41dc54(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b0ee___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b0ee_type* @G__0x57b0ee to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc5133__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc5133__rip__type* @G_0xc5133__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x448__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1096
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41dfb1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41df9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41df9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__0x3c__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.first_worm_in_dragon(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x350__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -848
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x350__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -848
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41df2b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x350__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -848
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41df10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41df2b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41df15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x350__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -848
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.next_worm_in_dragon(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41ded9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41df99(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41df50(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41df6a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b10b___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b10b_type* @G__0x57b10b to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x44c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1100
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x5__0x3c__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 60
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 5, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41df9e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41dfa3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41de41(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57b132___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57b132_type* @G__0x57b132 to i64), i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0xc4f96__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0xc4f96__rip__type* @G_0xc4f96__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0xaaf054(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 11
  store i64 %4, i64* %PC, align 8
  store i32 0, i32* bitcast (%G_0xaaf054_type* @G_0xaaf054 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0xaaf058(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 11
  store i64 %4, i64* %PC, align 8
  store i32 0, i32* bitcast (%G_0xaaf058_type* @G_0xaaf058 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd__xmm0__MINUS0x458__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1112
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  %8 = load i64, i64* %7, align 1
  %9 = inttoptr i64 %4 to i64*
  store i64 %8, i64* %9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_41e0a4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq___rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RCX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = sext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_41e091(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = add i32 %7, -1
  %9 = icmp eq i32 %7, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %8, %7
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %8, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %8, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %7, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_41e07b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xaaf054___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xaaf054_type* @G_0xaaf054 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0xaaf054(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0xaaf054_type* @G_0xaaf054 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41e08c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xaaf058___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xaaf058_type* @G_0xaaf058 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0xaaf058(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0xaaf058_type* @G_0xaaf058 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41e091(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41e096(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_41dff4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x468___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 1128
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -1129
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBX, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
