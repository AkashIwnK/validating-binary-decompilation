; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x7ae438_type = type <{ [4 x i8] }>
%G_0x7ae43c_type = type <{ [4 x i8] }>
%G_0x7ae448_type = type <{ [1 x i8] }>
%G_0x7ae450_type = type <{ [4 x i8] }>
%G_0xab0eec_type = type <{ [4 x i8] }>
%G_0xab0ef8_type = type <{ [8 x i8] }>
%G_0xab0f24_type = type <{ [4 x i8] }>
%G_0xab0f28_type = type <{ [1 x i8] }>
%G_0xac22d0_type = type <{ [4 x i8] }>
%G_0xac22d4_type = type <{ [4 x i8] }>
%G_0xac22d8_type = type <{ [8 x i8] }>
%G_0xac22e0_type = type <{ [4 x i8] }>
%G_0xb54ce4_type = type <{ [4 x i8] }>
%G_0xb6e910_type = type <{ [4 x i8] }>
%G__0x443270_type = type <{ [8 x i8] }>
%G__0x57dd2e_type = type <{ [8 x i8] }>
%G__0x57de24_type = type <{ [8 x i8] }>
%G__0x57de3a_type = type <{ [8 x i8] }>
%G__0x57de55_type = type <{ [8 x i8] }>
%G__0x57de70_type = type <{ [8 x i8] }>
%G__0x57de94_type = type <{ [8 x i8] }>
%G__0x57deb7_type = type <{ [8 x i8] }>
%G__0x57dee3_type = type <{ [8 x i8] }>
%G__0x57deea_type = type <{ [8 x i8] }>
%G__0x57deff_type = type <{ [8 x i8] }>
%G__0x57df14_type = type <{ [8 x i8] }>
%G__0x57df28_type = type <{ [8 x i8] }>
%G__0x57df47_type = type <{ [8 x i8] }>
%G__0x57df65_type = type <{ [8 x i8] }>
%G__0x57df6f_type = type <{ [8 x i8] }>
%G__0x57df7f_type = type <{ [8 x i8] }>
%G__0x57df94_type = type <{ [8 x i8] }>
%G__0x57dfa7_type = type <{ [8 x i8] }>
%G__0x57dfbc_type = type <{ [8 x i8] }>
%G__0x57dfcd_type = type <{ [8 x i8] }>
%G__0x57dfe1_type = type <{ [8 x i8] }>
%G__0x57dfe6_type = type <{ [8 x i8] }>
%G__0x919b70_type = type <{ [8 x i8] }>
%G__0x92aa50_type = type <{ [8 x i8] }>
%G__0x941118_type = type <{ [8 x i8] }>
%G__0xac22f0_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x7ae438 = local_unnamed_addr global %G_0x7ae438_type zeroinitializer
@G_0x7ae43c = local_unnamed_addr global %G_0x7ae43c_type zeroinitializer
@G_0x7ae448 = local_unnamed_addr global %G_0x7ae448_type zeroinitializer
@G_0x7ae450 = local_unnamed_addr global %G_0x7ae450_type zeroinitializer
@G_0xab0eec = local_unnamed_addr global %G_0xab0eec_type zeroinitializer
@G_0xab0ef8 = local_unnamed_addr global %G_0xab0ef8_type zeroinitializer
@G_0xab0f24 = local_unnamed_addr global %G_0xab0f24_type zeroinitializer
@G_0xab0f28 = local_unnamed_addr global %G_0xab0f28_type zeroinitializer
@G_0xac22d0 = local_unnamed_addr global %G_0xac22d0_type zeroinitializer
@G_0xac22d4 = local_unnamed_addr global %G_0xac22d4_type zeroinitializer
@G_0xac22d8 = local_unnamed_addr global %G_0xac22d8_type zeroinitializer
@G_0xac22e0 = local_unnamed_addr global %G_0xac22e0_type zeroinitializer
@G_0xb54ce4 = local_unnamed_addr global %G_0xb54ce4_type zeroinitializer
@G_0xb6e910 = local_unnamed_addr global %G_0xb6e910_type zeroinitializer
@G__0x443270 = global %G__0x443270_type zeroinitializer
@G__0x57dd2e = global %G__0x57dd2e_type zeroinitializer
@G__0x57de24 = global %G__0x57de24_type zeroinitializer
@G__0x57de3a = global %G__0x57de3a_type zeroinitializer
@G__0x57de55 = global %G__0x57de55_type zeroinitializer
@G__0x57de70 = global %G__0x57de70_type zeroinitializer
@G__0x57de94 = global %G__0x57de94_type zeroinitializer
@G__0x57deb7 = global %G__0x57deb7_type zeroinitializer
@G__0x57dee3 = global %G__0x57dee3_type zeroinitializer
@G__0x57deea = global %G__0x57deea_type zeroinitializer
@G__0x57deff = global %G__0x57deff_type zeroinitializer
@G__0x57df14 = global %G__0x57df14_type zeroinitializer
@G__0x57df28 = global %G__0x57df28_type zeroinitializer
@G__0x57df47 = global %G__0x57df47_type zeroinitializer
@G__0x57df65 = global %G__0x57df65_type zeroinitializer
@G__0x57df6f = global %G__0x57df6f_type zeroinitializer
@G__0x57df7f = global %G__0x57df7f_type zeroinitializer
@G__0x57df94 = global %G__0x57df94_type zeroinitializer
@G__0x57dfa7 = global %G__0x57dfa7_type zeroinitializer
@G__0x57dfbc = global %G__0x57dfbc_type zeroinitializer
@G__0x57dfcd = global %G__0x57dfcd_type zeroinitializer
@G__0x57dfe1 = global %G__0x57dfe1_type zeroinitializer
@G__0x57dfe6 = global %G__0x57dfe6_type zeroinitializer
@G__0x919b70 = global %G__0x919b70_type zeroinitializer
@G__0x92aa50 = global %G__0x92aa50_type zeroinitializer
@G__0x941118 = global %G__0x941118_type zeroinitializer
@G__0xac22f0 = global %G__0xac22f0_type zeroinitializer

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64)

declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_452090.abortgo(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_417ee0.get_read_result2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_451db0.gprintf(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_418320.sgf_trace2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_441720.owl_find_lunches(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_441ef0.owl_determine_life(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_42fb50.matchpat(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_43baf0.min_eyes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_43b010.max_eyes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_443630.owl_escape_route(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_443670.owl_shapes(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_443730.get_next_move_from_list(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_46bc30.safe_move(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_443f90.semeai_move_value(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_444230.owl_add_move(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_444490.find_semeai_backfilling_move(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4141e0.find_origin(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_40f780.countlib(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_45db40.attack(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4445e0.close_pattern_list(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_40d930.semeai_trymove(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_409930.dump_stack(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4447c0.push_owl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4449e0.owl_update_goal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_444ba0.owl_update_boundary_marks(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_43edf0.do_owl_analyze_semeai(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_444d50.pop_owl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_40dd60.popgo(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @do_owl_analyze_semeai(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15.i655 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %12 = load i64, i64* %R15.i655, align 8
  %13 = add i64 %10, 5
  store i64 %13, i64* %3, align 8
  %14 = add i64 %7, -16
  %15 = inttoptr i64 %14 to i64*
  store i64 %12, i64* %15, align 8
  %R14.i1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %16 = load i64, i64* %R14.i1302, align 8
  %17 = load i64, i64* %3, align 8
  %18 = add i64 %17, 2
  store i64 %18, i64* %3, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %16, i64* %20, align 8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %RBX.i3528 = getelementptr inbounds %union.anon, %union.anon* %21, i64 0, i32 0
  %22 = load i64, i64* %RBX.i3528, align 8
  %23 = load i64, i64* %3, align 8
  %24 = add i64 %23, 1
  store i64 %24, i64* %3, align 8
  %25 = add i64 %7, -32
  %26 = inttoptr i64 %25 to i64*
  store i64 %22, i64* %26, align 8
  %27 = load i64, i64* %3, align 8
  %28 = add i64 %7, -3608
  store i64 %28, i64* %6, align 8
  %29 = icmp ult i64 %25, 3576
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %30, i8* %31, align 1
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33)
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %37, i8* %38, align 1
  %39 = xor i64 %25, 16
  %40 = xor i64 %39, %28
  %41 = lshr i64 %40, 4
  %42 = trunc i64 %41 to i8
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %43, i8* %44, align 1
  %45 = icmp eq i64 %28, 0
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %46, i8* %47, align 1
  %48 = lshr i64 %28, 63
  %49 = trunc i64 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %49, i8* %50, align 1
  %51 = lshr i64 %25, 63
  %52 = xor i64 %48, %51
  %53 = add nuw nsw i64 %52, %51
  %54 = icmp eq i64 %53, 2
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %55, i8* %56, align 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %RAX.i3798 = getelementptr inbounds %union.anon, %union.anon* %57, i64 0, i32 0
  %58 = load i64, i64* %RBP.i, align 8
  %59 = add i64 %58, 40
  %60 = add i64 %27, 10
  store i64 %60, i64* %3, align 8
  %61 = inttoptr i64 %59 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RAX.i3798, align 8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D.i4438 = bitcast %union.anon* %64 to i32*
  %65 = getelementptr inbounds %union.anon, %union.anon* %64, i64 0, i32 0
  %66 = add i64 %58, 32
  %67 = add i64 %27, 14
  store i64 %67, i64* %3, align 8
  %68 = inttoptr i64 %66 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i64
  store i64 %70, i64* %65, align 8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11.i4436 = getelementptr inbounds %union.anon, %union.anon* %71, i64 0, i32 0
  %72 = add i64 %58, 24
  %73 = add i64 %27, 18
  store i64 %73, i64* %3, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %R11.i4436, align 8
  %76 = add i64 %58, 16
  %77 = add i64 %27, 22
  store i64 %77, i64* %3, align 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %RBX.i3528, align 8
  store i64 ptrtoint (%G__0x57de24_type* @G__0x57de24 to i64), i64* %R14.i1302, align 8
  %R15D.i4428 = bitcast %union.anon* %11 to i32*
  store i64 3, i64* %R15.i655, align 8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI.i4425 = bitcast %union.anon* %80 to i32*
  %81 = add i64 %58, -28
  %82 = load i32, i32* %EDI.i4425, align 4
  %83 = add i64 %27, 41
  store i64 %83, i64* %3, align 8
  %84 = inttoptr i64 %81 to i32*
  store i32 %82, i32* %84, align 4
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI.i4422 = bitcast %union.anon* %85 to i32*
  %86 = load i64, i64* %RBP.i, align 8
  %87 = add i64 %86, -32
  %88 = load i32, i32* %ESI.i4422, align 4
  %89 = load i64, i64* %3, align 8
  %90 = add i64 %89, 3
  store i64 %90, i64* %3, align 8
  %91 = inttoptr i64 %87 to i32*
  store i32 %88, i32* %91, align 4
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %RDX.i4419 = getelementptr inbounds %union.anon, %union.anon* %92, i64 0, i32 0
  %93 = load i64, i64* %RBP.i, align 8
  %94 = add i64 %93, -40
  %95 = load i64, i64* %RDX.i4419, align 8
  %96 = load i64, i64* %3, align 8
  %97 = add i64 %96, 4
  store i64 %97, i64* %3, align 8
  %98 = inttoptr i64 %94 to i64*
  store i64 %95, i64* %98, align 8
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i4416 = getelementptr inbounds %union.anon, %union.anon* %99, i64 0, i32 0
  %100 = load i64, i64* %RBP.i, align 8
  %101 = add i64 %100, -48
  %102 = load i64, i64* %RCX.i4416, align 8
  %103 = load i64, i64* %3, align 8
  %104 = add i64 %103, 4
  store i64 %104, i64* %3, align 8
  %105 = inttoptr i64 %101 to i64*
  store i64 %102, i64* %105, align 8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D.i4413 = bitcast %union.anon* %106 to i32*
  %107 = load i64, i64* %RBP.i, align 8
  %108 = add i64 %107, -52
  %109 = load i32, i32* %R8D.i4413, align 4
  %110 = load i64, i64* %3, align 8
  %111 = add i64 %110, 4
  store i64 %111, i64* %3, align 8
  %112 = inttoptr i64 %108 to i32*
  store i32 %109, i32* %112, align 4
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9.i4411 = getelementptr inbounds %union.anon, %union.anon* %113, i64 0, i32 0
  %114 = load i64, i64* %RBP.i, align 8
  %115 = add i64 %114, -64
  %116 = load i64, i64* %R9.i4411, align 8
  %117 = load i64, i64* %3, align 8
  %118 = add i64 %117, 4
  store i64 %118, i64* %3, align 8
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119, align 8
  %120 = load i64, i64* %RBP.i, align 8
  %121 = add i64 %120, -72
  %122 = load i64, i64* %RBX.i3528, align 8
  %123 = load i64, i64* %3, align 8
  %124 = add i64 %123, 4
  store i64 %124, i64* %3, align 8
  %125 = inttoptr i64 %121 to i64*
  store i64 %122, i64* %125, align 8
  %126 = load i64, i64* %RBP.i, align 8
  %127 = add i64 %126, -80
  %128 = load i64, i64* %R11.i4436, align 8
  %129 = load i64, i64* %3, align 8
  %130 = add i64 %129, 4
  store i64 %130, i64* %3, align 8
  %131 = inttoptr i64 %127 to i64*
  store i64 %128, i64* %131, align 8
  %132 = load i64, i64* %RBP.i, align 8
  %133 = add i64 %132, -84
  %134 = load i32, i32* %R10D.i4438, align 4
  %135 = load i64, i64* %3, align 8
  %136 = add i64 %135, 4
  store i64 %136, i64* %3, align 8
  %137 = inttoptr i64 %133 to i32*
  store i32 %134, i32* %137, align 4
  %EAX.i4398 = bitcast %union.anon* %57 to i32*
  %138 = load i64, i64* %RBP.i, align 8
  %139 = add i64 %138, -88
  %140 = load i32, i32* %EAX.i4398, align 4
  %141 = load i64, i64* %3, align 8
  %142 = add i64 %141, 3
  store i64 %142, i64* %3, align 8
  %143 = inttoptr i64 %139 to i32*
  store i32 %140, i32* %143, align 4
  %144 = load i64, i64* %RBP.i, align 8
  %145 = add i64 %144, -28
  %146 = load i64, i64* %3, align 8
  %147 = add i64 %146, 4
  store i64 %147, i64* %3, align 8
  %148 = inttoptr i64 %145 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = sext i32 %149 to i64
  store i64 %150, i64* %RCX.i4416, align 8
  %151 = add nsw i64 %150, 12099168
  %152 = add i64 %146, 12
  store i64 %152, i64* %3, align 8
  %153 = inttoptr i64 %151 to i8*
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i64
  store i64 %155, i64* %RAX.i3798, align 8
  %156 = add i64 %144, -92
  %157 = zext i8 %154 to i32
  %158 = add i64 %146, 15
  store i64 %158, i64* %3, align 8
  %159 = inttoptr i64 %156 to i32*
  store i32 %157, i32* %159, align 4
  %160 = load i32, i32* %R15D.i4428, align 4
  %161 = load i64, i64* %RBP.i, align 8
  %162 = add i64 %161, -92
  %163 = load i64, i64* %3, align 8
  %164 = add i64 %163, 4
  store i64 %164, i64* %3, align 8
  %165 = inttoptr i64 %162 to i32*
  %166 = load i32, i32* %165, align 4
  %167 = sub i32 %160, %166
  %168 = zext i32 %167 to i64
  store i64 %168, i64* %R15.i655, align 8
  %169 = icmp ult i32 %160, %166
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %31, align 1
  %171 = and i32 %167, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171)
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %38, align 1
  %176 = xor i32 %166, %160
  %177 = xor i32 %176, %167
  %178 = lshr i32 %177, 4
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %44, align 1
  %181 = icmp eq i32 %167, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %47, align 1
  %183 = lshr i32 %167, 31
  %184 = trunc i32 %183 to i8
  store i8 %184, i8* %50, align 1
  %185 = add i64 %161, -96
  %186 = add i64 %163, 8
  store i64 %186, i64* %3, align 8
  %187 = inttoptr i64 %185 to i32*
  store i32 %167, i32* %187, align 4
  %188 = load i64, i64* %RBP.i, align 8
  %189 = add i64 %188, -1236
  %190 = load i64, i64* %3, align 8
  %191 = add i64 %190, 10
  store i64 %191, i64* %3, align 8
  %192 = inttoptr i64 %189 to i32*
  store i32 0, i32* %192, align 4
  %193 = load i64, i64* %RBP.i, align 8
  %194 = add i64 %193, -1240
  %195 = load i64, i64* %3, align 8
  %196 = add i64 %195, 10
  store i64 %196, i64* %3, align 8
  %197 = inttoptr i64 %194 to i32*
  store i32 0, i32* %197, align 4
  %198 = load i64, i64* %RBP.i, align 8
  %199 = add i64 %198, -1244
  %200 = load i64, i64* %3, align 8
  %201 = add i64 %200, 10
  store i64 %201, i64* %3, align 8
  %202 = inttoptr i64 %199 to i32*
  store i32 0, i32* %202, align 4
  %203 = load i64, i64* %RBP.i, align 8
  %204 = add i64 %203, -1248
  %205 = load i64, i64* %3, align 8
  %206 = add i64 %205, 10
  store i64 %206, i64* %3, align 8
  %207 = inttoptr i64 %204 to i32*
  store i32 0, i32* %207, align 4
  %208 = load i64, i64* %RBP.i, align 8
  %209 = add i64 %208, -1252
  %210 = load i64, i64* %3, align 8
  %211 = add i64 %210, 10
  store i64 %211, i64* %3, align 8
  %212 = inttoptr i64 %209 to i32*
  store i32 0, i32* %212, align 4
  %213 = load i64, i64* %3, align 8
  %214 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i64 %214, i64* %RCX.i4416, align 8
  %215 = load i64, i64* %RBP.i, align 8
  %216 = add i64 %215, -1688
  %217 = add i64 %213, 15
  store i64 %217, i64* %3, align 8
  %218 = inttoptr i64 %216 to i64*
  store i64 %214, i64* %218, align 8
  %219 = load i64, i64* %3, align 8
  %220 = load i32, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  %221 = load i64, i64* %RBP.i, align 8
  %222 = add i64 %221, -1692
  %223 = add i64 %219, 13
  store i64 %223, i64* %3, align 8
  %224 = inttoptr i64 %222 to i32*
  store i32 %220, i32* %224, align 4
  %225 = load i64, i64* %RBP.i, align 8
  %226 = add i64 %225, -1700
  %227 = load i64, i64* %3, align 8
  %228 = add i64 %227, 10
  store i64 %228, i64* %3, align 8
  %229 = inttoptr i64 %226 to i32*
  store i32 3, i32* %229, align 4
  %230 = load i64, i64* %RBP.i, align 8
  %231 = add i64 %230, -1704
  %232 = load i64, i64* %3, align 8
  %233 = add i64 %232, 10
  store i64 %233, i64* %3, align 8
  %234 = inttoptr i64 %231 to i32*
  store i32 3, i32* %234, align 4
  %235 = load i64, i64* %RBP.i, align 8
  %236 = add i64 %235, -1708
  %237 = load i64, i64* %3, align 8
  %238 = add i64 %237, 10
  store i64 %238, i64* %3, align 8
  %239 = inttoptr i64 %236 to i32*
  store i32 0, i32* %239, align 4
  %240 = load i64, i64* %RBP.i, align 8
  %241 = add i64 %240, -1712
  %242 = load i64, i64* %3, align 8
  %243 = add i64 %242, 10
  store i64 %243, i64* %3, align 8
  %244 = inttoptr i64 %241 to i32*
  store i32 3, i32* %244, align 4
  %245 = load i64, i64* %RBP.i, align 8
  %246 = add i64 %245, -1716
  %247 = load i64, i64* %3, align 8
  %248 = add i64 %247, 10
  store i64 %248, i64* %3, align 8
  %249 = inttoptr i64 %246 to i32*
  store i32 3, i32* %249, align 4
  %250 = load i64, i64* %RBP.i, align 8
  %251 = add i64 %250, -1720
  %252 = load i64, i64* %3, align 8
  %253 = add i64 %252, 10
  store i64 %253, i64* %3, align 8
  %254 = inttoptr i64 %251 to i32*
  store i32 -1, i32* %254, align 4
  %255 = load i64, i64* %3, align 8
  %256 = load i32, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  %257 = add i32 %256, -1
  %258 = zext i32 %257 to i64
  store i64 %258, i64* %RAX.i3798, align 8
  %259 = icmp eq i32 %256, 0
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %31, align 1
  %261 = and i32 %257, 255
  %262 = tail call i32 @llvm.ctpop.i32(i32 %261)
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = xor i8 %264, 1
  store i8 %265, i8* %38, align 1
  %266 = xor i32 %257, %256
  %267 = lshr i32 %266, 4
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  store i8 %269, i8* %44, align 1
  %270 = icmp eq i32 %257, 0
  %271 = zext i1 %270 to i8
  store i8 %271, i8* %47, align 1
  %272 = lshr i32 %257, 31
  %273 = trunc i32 %272 to i8
  store i8 %273, i8* %50, align 1
  %274 = lshr i32 %256, 31
  %275 = xor i32 %272, %274
  %276 = add nuw nsw i32 %275, %274
  %277 = icmp eq i32 %276, 2
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %56, align 1
  %279 = load i64, i64* %RBP.i, align 8
  %280 = add i64 %279, -1732
  %281 = add i64 %255, 16
  store i64 %281, i64* %3, align 8
  %282 = inttoptr i64 %280 to i32*
  store i32 %257, i32* %282, align 4
  %283 = load i64, i64* %RBP.i, align 8
  %284 = add i64 %283, -1744
  %285 = load i64, i64* %R14.i1302, align 8
  %286 = load i64, i64* %3, align 8
  %287 = add i64 %286, 7
  store i64 %287, i64* %3, align 8
  %288 = inttoptr i64 %284 to i64*
  store i64 %285, i64* %288, align 8
  %289 = load i64, i64* %RBP.i, align 8
  %290 = add i64 %289, -28
  %291 = load i64, i64* %3, align 8
  %292 = add i64 %291, 3
  store i64 %292, i64* %3, align 8
  %293 = inttoptr i64 %290 to i32*
  %294 = load i32, i32* %293, align 4
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %RAX.i3798, align 8
  %296 = add i64 %289, -1748
  %297 = add i64 %291, 9
  store i64 %297, i64* %3, align 8
  %298 = inttoptr i64 %296 to i32*
  store i32 %294, i32* %298, align 4
  %299 = load i64, i64* %RBP.i, align 8
  %300 = add i64 %299, -32
  %301 = load i64, i64* %3, align 8
  %302 = add i64 %301, 3
  store i64 %302, i64* %3, align 8
  %303 = inttoptr i64 %300 to i32*
  %304 = load i32, i32* %303, align 4
  %305 = zext i32 %304 to i64
  store i64 %305, i64* %RAX.i3798, align 8
  %306 = add i64 %299, -1752
  %307 = add i64 %301, 9
  store i64 %307, i64* %3, align 8
  %308 = inttoptr i64 %306 to i32*
  store i32 %304, i32* %308, align 4
  %309 = load i64, i64* %RBP.i, align 8
  %310 = add i64 %309, -80
  %311 = load i64, i64* %3, align 8
  %312 = add i64 %311, 5
  store i64 %312, i64* %3, align 8
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313, align 8
  store i8 0, i8* %31, align 1
  %315 = trunc i64 %314 to i32
  %316 = and i32 %315, 255
  %317 = tail call i32 @llvm.ctpop.i32(i32 %316)
  %318 = trunc i32 %317 to i8
  %319 = and i8 %318, 1
  %320 = xor i8 %319, 1
  store i8 %320, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %321 = icmp eq i64 %314, 0
  %322 = zext i1 %321 to i8
  store i8 %322, i8* %47, align 1
  %323 = lshr i64 %314, 63
  %324 = trunc i64 %323 to i8
  store i8 %324, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v486 = select i1 %321, i64 11, i64 22
  %325 = add i64 %311, %.v486
  store i64 %325, i64* %3, align 8
  br i1 %321, label %block_43ef19, label %block_.L_43ef24

block_43ef19:                                     ; preds = %entry
  %326 = add i64 %309, -1736
  store i64 %326, i64* %RAX.i3798, align 8
  %327 = add i64 %325, 11
  store i64 %327, i64* %3, align 8
  store i64 %326, i64* %313, align 8
  %.pre = load i64, i64* %RBP.i, align 8
  %.pre352 = load i64, i64* %3, align 8
  br label %block_.L_43ef24

block_.L_43ef24:                                  ; preds = %entry, %block_43ef19
  %328 = phi i64 [ %.pre352, %block_43ef19 ], [ %325, %entry ]
  %329 = phi i64 [ %.pre, %block_43ef19 ], [ %309, %entry ]
  %330 = add i64 %329, -512
  %331 = add i64 %328, 10
  store i64 %331, i64* %3, align 8
  %332 = inttoptr i64 %330 to i32*
  store i32 0, i32* %332, align 4
  %333 = load i64, i64* %RBP.i, align 8
  %334 = add i64 %333, -544
  %335 = load i64, i64* %3, align 8
  %336 = add i64 %335, 10
  store i64 %336, i64* %3, align 8
  %337 = inttoptr i64 %334 to i32*
  store i32 0, i32* %337, align 4
  %338 = load i64, i64* %3, align 8
  %339 = load i32, i32* bitcast (%G_0xac22d4_type* @G_0xac22d4 to i32*), align 8
  %340 = add i32 %339, 1
  store i32 %340, i32* bitcast (%G_0xac22d4_type* @G_0xac22d4 to i32*), align 8
  %341 = load i32, i32* bitcast (%G_0xac22d0_type* @G_0xac22d0 to i32*), align 8
  %342 = add i32 %341, 1
  %343 = zext i32 %342 to i64
  store i64 %343, i64* %RAX.i3798, align 8
  %344 = icmp eq i32 %341, -1
  %345 = icmp eq i32 %342, 0
  %346 = or i1 %344, %345
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %31, align 1
  %348 = and i32 %342, 255
  %349 = tail call i32 @llvm.ctpop.i32(i32 %348)
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  %352 = xor i8 %351, 1
  store i8 %352, i8* %38, align 1
  %353 = xor i32 %342, %341
  %354 = lshr i32 %353, 4
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  store i8 %356, i8* %44, align 1
  %357 = zext i1 %345 to i8
  store i8 %357, i8* %47, align 1
  %358 = lshr i32 %342, 31
  %359 = trunc i32 %358 to i8
  store i8 %359, i8* %50, align 1
  %360 = lshr i32 %341, 31
  %361 = xor i32 %358, %360
  %362 = add nuw nsw i32 %361, %358
  %363 = icmp eq i32 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %56, align 1
  store i32 %342, i32* bitcast (%G_0xac22d0_type* @G_0xac22d0 to i32*), align 8
  %365 = load i64, i64* %RBP.i, align 8
  %366 = add i64 %365, -28
  %367 = add i64 %338, 38
  store i64 %367, i64* %3, align 8
  %368 = inttoptr i64 %366 to i32*
  %369 = load i32, i32* %368, align 4
  %370 = sext i32 %369 to i64
  store i64 %370, i64* %RCX.i4416, align 8
  %371 = add nsw i64 %370, 12099168
  %372 = add i64 %338, 46
  store i64 %372, i64* %3, align 8
  %373 = inttoptr i64 %371 to i8*
  %374 = load i8, i8* %373, align 1
  %375 = zext i8 %374 to i64
  store i64 %375, i64* %RAX.i3798, align 8
  %376 = add i64 %365, -40
  %377 = add i64 %338, 50
  store i64 %377, i64* %3, align 8
  %378 = inttoptr i64 %376 to i64*
  %379 = load i64, i64* %378, align 8
  store i64 %379, i64* %RCX.i4416, align 8
  %380 = zext i8 %374 to i32
  %381 = add i64 %379, 1200
  %382 = add i64 %338, 56
  store i64 %382, i64* %3, align 8
  %383 = inttoptr i64 %381 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = sub i32 %380, %384
  %386 = icmp ult i32 %380, %384
  %387 = zext i1 %386 to i8
  store i8 %387, i8* %31, align 1
  %388 = and i32 %385, 255
  %389 = tail call i32 @llvm.ctpop.i32(i32 %388)
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = xor i8 %391, 1
  store i8 %392, i8* %38, align 1
  %393 = xor i32 %384, %380
  %394 = xor i32 %393, %385
  %395 = lshr i32 %394, 4
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  store i8 %397, i8* %44, align 1
  %398 = icmp eq i32 %385, 0
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %47, align 1
  %400 = lshr i32 %385, 31
  %401 = trunc i32 %400 to i8
  store i8 %401, i8* %50, align 1
  %402 = lshr i32 %384, 31
  %403 = add nuw nsw i32 %400, %402
  %404 = icmp eq i32 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %56, align 1
  %.v487 = select i1 %398, i64 62, i64 67
  %406 = add i64 %338, %.v487
  store i64 %406, i64* %3, align 8
  br i1 %398, label %block_43ef76, label %block_.L_43ef7b

block_43ef76:                                     ; preds = %block_.L_43ef24
  %407 = add i64 %406, 45
  store i64 %407, i64* %3, align 8
  br label %block_.L_43efa3

block_.L_43ef7b:                                  ; preds = %block_.L_43ef24
  %RDI.i4289 = getelementptr inbounds %union.anon, %union.anon* %80, i64 0, i32 0
  store i64 ptrtoint (%G__0x57dd2e_type* @G__0x57dd2e to i64), i64* %RDI.i4289, align 8
  %RSI.i4287 = getelementptr inbounds %union.anon, %union.anon* %85, i64 0, i32 0
  store i64 356, i64* %RSI.i4287, align 8
  store i64 ptrtoint (%G__0x57de3a_type* @G__0x57de3a to i64), i64* %RDX.i4419, align 8
  store i64 4294967295, i64* %RAX.i3798, align 8
  store i64 4294967295, i64* %RCX.i4416, align 8
  %408 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  store i64 4294967295, i64* %408, align 8
  %409 = add i64 %406, 78101
  %410 = add i64 %406, 40
  %411 = load i64, i64* %6, align 8
  %412 = add i64 %411, -8
  %413 = inttoptr i64 %412 to i64*
  store i64 %410, i64* %413, align 8
  store i64 %412, i64* %6, align 8
  store i64 %409, i64* %3, align 8
  %call2_43ef9e = tail call %struct.Memory* @sub_452090.abortgo(%struct.State* nonnull %0, i64 %409, %struct.Memory* %2)
  %.pre353 = load i64, i64* %RBP.i, align 8
  %.pre354 = load i64, i64* %3, align 8
  br label %block_.L_43efa3

block_.L_43efa3:                                  ; preds = %block_.L_43ef7b, %block_43ef76
  %414 = phi i64 [ %.pre354, %block_.L_43ef7b ], [ %407, %block_43ef76 ]
  %415 = phi i64 [ %.pre353, %block_.L_43ef7b ], [ %365, %block_43ef76 ]
  %MEMORY.1 = phi %struct.Memory* [ %call2_43ef9e, %block_.L_43ef7b ], [ %2, %block_43ef76 ]
  %416 = add i64 %415, -32
  %417 = add i64 %414, 4
  store i64 %417, i64* %3, align 8
  %418 = inttoptr i64 %416 to i32*
  %419 = load i32, i32* %418, align 4
  %420 = sext i32 %419 to i64
  store i64 %420, i64* %RAX.i3798, align 8
  %421 = add nsw i64 %420, 12099168
  %422 = add i64 %414, 12
  store i64 %422, i64* %3, align 8
  %423 = inttoptr i64 %421 to i8*
  %424 = load i8, i8* %423, align 1
  %425 = zext i8 %424 to i64
  store i64 %425, i64* %RCX.i4416, align 8
  %426 = add i64 %415, -48
  %427 = add i64 %414, 16
  store i64 %427, i64* %3, align 8
  %428 = inttoptr i64 %426 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %RAX.i3798, align 8
  %ECX.i4264 = bitcast %union.anon* %99 to i32*
  %430 = zext i8 %424 to i32
  %431 = add i64 %429, 1200
  %432 = add i64 %414, 22
  store i64 %432, i64* %3, align 8
  %433 = inttoptr i64 %431 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = sub i32 %430, %434
  %436 = icmp ult i32 %430, %434
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %31, align 1
  %438 = and i32 %435, 255
  %439 = tail call i32 @llvm.ctpop.i32(i32 %438)
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  %442 = xor i8 %441, 1
  store i8 %442, i8* %38, align 1
  %443 = xor i32 %434, %430
  %444 = xor i32 %443, %435
  %445 = lshr i32 %444, 4
  %446 = trunc i32 %445 to i8
  %447 = and i8 %446, 1
  store i8 %447, i8* %44, align 1
  %448 = icmp eq i32 %435, 0
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %47, align 1
  %450 = lshr i32 %435, 31
  %451 = trunc i32 %450 to i8
  store i8 %451, i8* %50, align 1
  %452 = lshr i32 %434, 31
  %453 = add nuw nsw i32 %450, %452
  %454 = icmp eq i32 %453, 2
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %56, align 1
  %.v488 = select i1 %448, i64 28, i64 33
  %456 = add i64 %414, %.v488
  store i64 %456, i64* %3, align 8
  br i1 %448, label %block_43efbf, label %block_.L_43efc4

block_43efbf:                                     ; preds = %block_.L_43efa3
  %457 = add i64 %456, 45
  store i64 %457, i64* %3, align 8
  br label %block_.L_43efec

block_.L_43efc4:                                  ; preds = %block_.L_43efa3
  %RDI.i4260 = getelementptr inbounds %union.anon, %union.anon* %80, i64 0, i32 0
  store i64 ptrtoint (%G__0x57dd2e_type* @G__0x57dd2e to i64), i64* %RDI.i4260, align 8
  %RSI.i4258 = getelementptr inbounds %union.anon, %union.anon* %85, i64 0, i32 0
  store i64 357, i64* %RSI.i4258, align 8
  store i64 ptrtoint (%G__0x57de55_type* @G__0x57de55 to i64), i64* %RDX.i4419, align 8
  store i64 4294967295, i64* %RAX.i3798, align 8
  store i64 4294967295, i64* %RCX.i4416, align 8
  %458 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  store i64 4294967295, i64* %458, align 8
  %459 = add i64 %456, 78028
  %460 = add i64 %456, 40
  %461 = load i64, i64* %6, align 8
  %462 = add i64 %461, -8
  %463 = inttoptr i64 %462 to i64*
  store i64 %460, i64* %463, align 8
  store i64 %462, i64* %6, align 8
  store i64 %459, i64* %3, align 8
  %call2_43efe7 = tail call %struct.Memory* @sub_452090.abortgo(%struct.State* nonnull %0, i64 %459, %struct.Memory* %MEMORY.1)
  %.pre355 = load i64, i64* %3, align 8
  br label %block_.L_43efec

block_.L_43efec:                                  ; preds = %block_.L_43efc4, %block_43efbf
  %464 = phi i64 [ %.pre355, %block_.L_43efc4 ], [ %457, %block_43efbf ]
  %MEMORY.2 = phi %struct.Memory* [ %call2_43efe7, %block_.L_43efc4 ], [ %MEMORY.1, %block_43efbf ]
  %465 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %466 = zext i32 %465 to i64
  store i64 %466, i64* %RAX.i3798, align 8
  %467 = load i32, i32* bitcast (%G_0xb6e910_type* @G_0xb6e910 to i32*), align 8
  %468 = sub i32 %465, %467
  %469 = icmp ult i32 %465, %467
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %31, align 1
  %471 = and i32 %468, 255
  %472 = tail call i32 @llvm.ctpop.i32(i32 %471)
  %473 = trunc i32 %472 to i8
  %474 = and i8 %473, 1
  %475 = xor i8 %474, 1
  store i8 %475, i8* %38, align 1
  %476 = xor i32 %467, %465
  %477 = xor i32 %476, %468
  %478 = lshr i32 %477, 4
  %479 = trunc i32 %478 to i8
  %480 = and i8 %479, 1
  store i8 %480, i8* %44, align 1
  %481 = icmp eq i32 %468, 0
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %47, align 1
  %483 = lshr i32 %468, 31
  %484 = trunc i32 %483 to i8
  store i8 %484, i8* %50, align 1
  %485 = lshr i32 %465, 31
  %486 = lshr i32 %467, 31
  %487 = xor i32 %486, %485
  %488 = xor i32 %483, %485
  %489 = add nuw nsw i32 %488, %487
  %490 = icmp eq i32 %489, 2
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %56, align 1
  %492 = icmp ne i8 %484, 0
  %493 = xor i1 %492, %490
  %.demorgan = or i1 %481, %493
  %.v489 = select i1 %.demorgan, i64 20, i64 798
  %494 = add i64 %464, %.v489
  store i64 %494, i64* %3, align 8
  br i1 %.demorgan, label %block_43f000, label %block_.L_43f30a

block_43f000:                                     ; preds = %block_.L_43efec
  %495 = load i32, i32* bitcast (%G_0x7ae43c_type* @G_0x7ae43c to i32*), align 8
  %496 = and i32 %495, 1024
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %498 = icmp eq i32 %496, 0
  %.lobit475 = lshr exact i32 %496, 10
  %499 = trunc i32 %.lobit475 to i8
  %500 = xor i8 %499, 1
  store i8 %500, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v637 = select i1 %498, i64 778, i64 21
  %501 = add i64 %494, %.v637
  store i64 %501, i64* %3, align 8
  br i1 %498, label %block_.L_43f30a, label %block_43f015

block_43f015:                                     ; preds = %block_43f000
  %502 = load i64, i64* %RBP.i, align 8
  %503 = add i64 %502, -84
  %504 = add i64 %501, 4
  store i64 %504, i64* %3, align 8
  %505 = inttoptr i64 %503 to i32*
  %506 = load i32, i32* %505, align 4
  store i8 0, i8* %31, align 1
  %507 = and i32 %506, 255
  %508 = tail call i32 @llvm.ctpop.i32(i32 %507)
  %509 = trunc i32 %508 to i8
  %510 = and i8 %509, 1
  %511 = xor i8 %510, 1
  store i8 %511, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %512 = icmp eq i32 %506, 0
  %513 = zext i1 %512 to i8
  store i8 %513, i8* %47, align 1
  %514 = lshr i32 %506, 31
  %515 = trunc i32 %514 to i8
  store i8 %515, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v638 = select i1 %512, i64 10, i64 757
  %516 = add i64 %501, %.v638
  store i64 %516, i64* %3, align 8
  br i1 %512, label %block_43f01f, label %block_.L_43f30a

block_43f01f:                                     ; preds = %block_43f015
  %517 = add i64 %502, -88
  %518 = add i64 %516, 4
  store i64 %518, i64* %3, align 8
  %519 = inttoptr i64 %517 to i32*
  %520 = load i32, i32* %519, align 4
  store i8 0, i8* %31, align 1
  %521 = and i32 %520, 255
  %522 = tail call i32 @llvm.ctpop.i32(i32 %521)
  %523 = trunc i32 %522 to i8
  %524 = and i8 %523, 1
  %525 = xor i8 %524, 1
  store i8 %525, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %526 = icmp eq i32 %520, 0
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %47, align 1
  %528 = lshr i32 %520, 31
  %529 = trunc i32 %528 to i8
  store i8 %529, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v639 = select i1 %526, i64 747, i64 10
  %530 = add i64 %516, %.v639
  store i64 %530, i64* %3, align 8
  br i1 %526, label %block_.L_43f30a, label %block_43f029

block_43f029:                                     ; preds = %block_43f01f
  %RDI.i4227 = getelementptr inbounds %union.anon, %union.anon* %80, i64 0, i32 0
  store i64 2, i64* %RDI.i4227, align 8
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %531 = add i64 %502, -28
  store i64 %531, i64* %RCX.i4416, align 8
  %R8.i4219 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  %532 = add i64 %502, -32
  store i64 %532, i64* %R8.i4219, align 8
  %533 = add i64 %502, -1728
  store i64 %533, i64* %R9.i4411, align 8
  %RSI.i4213 = getelementptr inbounds %union.anon, %union.anon* %85, i64 0, i32 0
  store i64 0, i64* %RSI.i4213, align 8
  store i64 0, i64* %RDX.i4419, align 8
  %534 = add i64 %530, -160073
  %535 = add i64 %530, 31
  %536 = load i64, i64* %6, align 8
  %537 = add i64 %536, -8
  %538 = inttoptr i64 %537 to i64*
  store i64 %535, i64* %538, align 8
  store i64 %537, i64* %6, align 8
  store i64 %534, i64* %3, align 8
  %call2_43f043 = tail call %struct.Memory* @sub_417ee0.get_read_result2(%struct.State* nonnull %0, i64 %534, %struct.Memory* %MEMORY.2)
  %539 = load i32, i32* %EAX.i4398, align 4
  %540 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %541 = and i32 %539, 255
  %542 = tail call i32 @llvm.ctpop.i32(i32 %541)
  %543 = trunc i32 %542 to i8
  %544 = and i8 %543, 1
  %545 = xor i8 %544, 1
  store i8 %545, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %546 = icmp eq i32 %539, 0
  %547 = zext i1 %546 to i8
  store i8 %547, i8* %47, align 1
  %548 = lshr i32 %539, 31
  %549 = trunc i32 %548 to i8
  store i8 %549, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v640 = select i1 %546, i64 701, i64 9
  %550 = add i64 %540, %.v640
  store i64 %550, i64* %3, align 8
  br i1 %546, label %block_.L_43f305, label %block_43f051

block_43f051:                                     ; preds = %block_43f029
  %551 = load i64, i64* %RBP.i, align 8
  %552 = add i64 %551, -1728
  %553 = add i64 %550, 7
  store i64 %553, i64* %3, align 8
  %554 = inttoptr i64 %552 to i64*
  %555 = load i64, i64* %554, align 8
  store i64 %555, i64* %RAX.i3798, align 8
  %556 = add i64 %555, 4
  %557 = add i64 %550, 10
  store i64 %557, i64* %3, align 8
  %558 = inttoptr i64 %556 to i32*
  %559 = load i32, i32* %558, align 4
  %560 = lshr i32 %559, 24
  %561 = and i32 %560, 15
  %562 = zext i32 %561 to i64
  store i64 %562, i64* %RCX.i4416, align 8
  %563 = icmp eq i32 %561, 0
  %564 = zext i1 %563 to i8
  store i8 0, i8* %31, align 1
  %565 = tail call i32 @llvm.ctpop.i32(i32 %561)
  %566 = trunc i32 %565 to i8
  %567 = and i8 %566, 1
  %568 = xor i8 %567, 1
  store i8 %568, i8* %38, align 1
  store i8 0, i8* %44, align 1
  store i8 %564, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v641 = select i1 %563, i64 50, i64 25
  %569 = add i64 %550, %.v641
  store i64 %569, i64* %3, align 8
  br i1 %563, label %block_.L_43f083, label %block_43f06a

block_43f06a:                                     ; preds = %block_43f051
  %570 = add i64 %569, 7
  store i64 %570, i64* %3, align 8
  %571 = load i64, i64* %554, align 8
  store i64 %571, i64* %RAX.i3798, align 8
  %572 = add i64 %571, 4
  %573 = add i64 %569, 10
  store i64 %573, i64* %3, align 8
  %574 = inttoptr i64 %572 to i32*
  %575 = load i32, i32* %574, align 4
  %576 = lshr i32 %575, 10
  %577 = and i32 %576, 255
  %578 = tail call i32 @llvm.ctpop.i32(i32 %577)
  %579 = trunc i32 %578 to i8
  %580 = and i8 %579, 1
  %581 = xor i8 %580, 1
  %582 = and i32 %576, 1023
  %583 = zext i32 %582 to i64
  store i64 %583, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 %581, i8* %38, align 1
  %584 = icmp eq i32 %582, 0
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %586 = add i64 %551, -80
  %587 = add i64 %569, 23
  store i64 %587, i64* %3, align 8
  %588 = inttoptr i64 %586 to i64*
  %589 = load i64, i64* %588, align 8
  store i64 %589, i64* %RAX.i3798, align 8
  %590 = add i64 %569, 25
  store i64 %590, i64* %3, align 8
  %591 = inttoptr i64 %589 to i32*
  store i32 %582, i32* %591, align 4
  %.pre356 = load i64, i64* %RBP.i, align 8
  %.pre357 = load i64, i64* %3, align 8
  br label %block_.L_43f083

block_.L_43f083:                                  ; preds = %block_43f06a, %block_43f051
  %592 = phi i64 [ %.pre357, %block_43f06a ], [ %569, %block_43f051 ]
  %593 = phi i64 [ %.pre356, %block_43f06a ], [ %551, %block_43f051 ]
  %594 = add i64 %593, -1728
  %595 = add i64 %592, 7
  store i64 %595, i64* %3, align 8
  %596 = inttoptr i64 %594 to i64*
  %597 = load i64, i64* %596, align 8
  store i64 %597, i64* %RAX.i3798, align 8
  %598 = add i64 %597, 4
  %599 = add i64 %592, 10
  store i64 %599, i64* %3, align 8
  %600 = inttoptr i64 %598 to i32*
  %601 = load i32, i32* %600, align 4
  %602 = lshr i32 %601, 24
  %603 = and i32 %602, 15
  %604 = zext i32 %603 to i64
  store i64 %604, i64* %RCX.i4416, align 8
  %605 = icmp eq i32 %603, 0
  %606 = zext i1 %605 to i8
  %607 = add nsw i32 %603, -1
  store i8 %606, i8* %31, align 1
  %608 = and i32 %607, 255
  %609 = tail call i32 @llvm.ctpop.i32(i32 %608)
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  %612 = xor i8 %611, 1
  store i8 %612, i8* %38, align 1
  %613 = lshr i32 %607, 4
  %614 = trunc i32 %613 to i8
  %615 = and i8 %614, 1
  store i8 %615, i8* %44, align 1
  %616 = icmp eq i32 %607, 0
  %617 = zext i1 %616 to i8
  store i8 %617, i8* %47, align 1
  %618 = lshr i32 %607, 31
  %619 = trunc i32 %618 to i8
  store i8 %619, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v642 = select i1 %616, i64 25, i64 81
  %620 = add i64 %592, %.v642
  store i64 %620, i64* %3, align 8
  br i1 %616, label %block_43f09c, label %block_.L_43f0d4

block_43f09c:                                     ; preds = %block_.L_43f083
  %621 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %31, align 1
  %622 = and i32 %621, 255
  %623 = tail call i32 @llvm.ctpop.i32(i32 %622)
  %624 = trunc i32 %623 to i8
  %625 = and i8 %624, 1
  %626 = xor i8 %625, 1
  store i8 %626, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %627 = icmp eq i32 %621, 0
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %47, align 1
  %629 = lshr i32 %621, 31
  %630 = trunc i32 %629 to i8
  store i8 %630, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v654 = select i1 %627, i64 14, i64 19
  %631 = add i64 %620, %.v654
  store i64 %631, i64* %3, align 8
  br i1 %627, label %block_43f0aa, label %block_.L_43f0af

block_43f0aa:                                     ; preds = %block_43f09c
  %632 = add i64 %631, 37
  store i64 %632, i64* %3, align 8
  br label %block_.L_43f0cf

block_.L_43f0af:                                  ; preds = %block_43f09c
  store i64 ptrtoint (%G__0x57de70_type* @G__0x57de70 to i64), i64* %RDI.i4227, align 8
  %633 = add i64 %593, -1732
  %634 = add i64 %631, 16
  store i64 %634, i64* %3, align 8
  %635 = inttoptr i64 %633 to i32*
  %636 = load i32, i32* %635, align 4
  %637 = zext i32 %636 to i64
  store i64 %637, i64* %RSI.i4213, align 8
  %638 = add i64 %593, -28
  %639 = add i64 %631, 19
  store i64 %639, i64* %3, align 8
  %640 = inttoptr i64 %638 to i32*
  %641 = load i32, i32* %640, align 4
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RDX.i4419, align 8
  %AL.i4150 = bitcast %union.anon* %57 to i8*
  store i8 0, i8* %AL.i4150, align 1
  %643 = add i64 %631, 77057
  %644 = add i64 %631, 26
  %645 = load i64, i64* %6, align 8
  %646 = add i64 %645, -8
  %647 = inttoptr i64 %646 to i64*
  store i64 %644, i64* %647, align 8
  store i64 %646, i64* %6, align 8
  store i64 %643, i64* %3, align 8
  %call2_43f0c4 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %643, %struct.Memory* %call2_43f043)
  %648 = load i64, i64* %RBP.i, align 8
  %649 = add i64 %648, -3396
  %650 = load i32, i32* %EAX.i4398, align 4
  %651 = load i64, i64* %3, align 8
  %652 = add i64 %651, 6
  store i64 %652, i64* %3, align 8
  %653 = inttoptr i64 %649 to i32*
  store i32 %650, i32* %653, align 4
  %.pre358 = load i64, i64* %3, align 8
  br label %block_.L_43f0cf

block_.L_43f0cf:                                  ; preds = %block_.L_43f0af, %block_43f0aa
  %654 = phi i64 [ %.pre358, %block_.L_43f0af ], [ %632, %block_43f0aa ]
  %MEMORY.4 = phi %struct.Memory* [ %call2_43f0c4, %block_.L_43f0af ], [ %call2_43f043, %block_43f0aa ]
  %655 = add i64 %654, 177
  br label %block_.L_43f180

block_.L_43f0d4:                                  ; preds = %block_.L_43f083
  %656 = add i64 %620, 7
  store i64 %656, i64* %3, align 8
  %657 = load i64, i64* %596, align 8
  store i64 %657, i64* %RAX.i3798, align 8
  %658 = add i64 %657, 4
  %659 = add i64 %620, 10
  store i64 %659, i64* %3, align 8
  %660 = inttoptr i64 %658 to i32*
  %661 = load i32, i32* %660, align 4
  %662 = lshr i32 %661, 24
  %663 = and i32 %662, 15
  %664 = zext i32 %663 to i64
  store i64 %664, i64* %RCX.i4416, align 8
  %665 = icmp eq i32 %663, 0
  %666 = zext i1 %665 to i8
  store i8 0, i8* %31, align 1
  %667 = tail call i32 @llvm.ctpop.i32(i32 %663)
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = xor i8 %669, 1
  store i8 %670, i8* %38, align 1
  store i8 0, i8* %44, align 1
  store i8 %666, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v643 = select i1 %665, i64 25, i64 81
  %671 = add i64 %620, %.v643
  store i64 %671, i64* %3, align 8
  br i1 %665, label %block_43f0ed, label %block_.L_43f125

block_43f0ed:                                     ; preds = %block_.L_43f0d4
  %672 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %31, align 1
  %673 = and i32 %672, 255
  %674 = tail call i32 @llvm.ctpop.i32(i32 %673)
  %675 = trunc i32 %674 to i8
  %676 = and i8 %675, 1
  %677 = xor i8 %676, 1
  store i8 %677, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %678 = icmp eq i32 %672, 0
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %47, align 1
  %680 = lshr i32 %672, 31
  %681 = trunc i32 %680 to i8
  store i8 %681, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v653 = select i1 %678, i64 14, i64 19
  %682 = add i64 %671, %.v653
  store i64 %682, i64* %3, align 8
  br i1 %678, label %block_43f0fb, label %block_.L_43f100

block_43f0fb:                                     ; preds = %block_43f0ed
  %683 = add i64 %682, 37
  store i64 %683, i64* %3, align 8
  br label %block_.L_43f120

block_.L_43f100:                                  ; preds = %block_43f0ed
  store i64 ptrtoint (%G__0x57de94_type* @G__0x57de94 to i64), i64* %RDI.i4227, align 8
  %684 = add i64 %593, -1732
  %685 = add i64 %682, 16
  store i64 %685, i64* %3, align 8
  %686 = inttoptr i64 %684 to i32*
  %687 = load i32, i32* %686, align 4
  %688 = zext i32 %687 to i64
  store i64 %688, i64* %RSI.i4213, align 8
  %689 = add i64 %593, -28
  %690 = add i64 %682, 19
  store i64 %690, i64* %3, align 8
  %691 = inttoptr i64 %689 to i32*
  %692 = load i32, i32* %691, align 4
  %693 = zext i32 %692 to i64
  store i64 %693, i64* %RDX.i4419, align 8
  %AL.i4119 = bitcast %union.anon* %57 to i8*
  store i8 0, i8* %AL.i4119, align 1
  %694 = add i64 %682, 76976
  %695 = add i64 %682, 26
  %696 = load i64, i64* %6, align 8
  %697 = add i64 %696, -8
  %698 = inttoptr i64 %697 to i64*
  store i64 %695, i64* %698, align 8
  store i64 %697, i64* %6, align 8
  store i64 %694, i64* %3, align 8
  %call2_43f115 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %694, %struct.Memory* %call2_43f043)
  %699 = load i64, i64* %RBP.i, align 8
  %700 = add i64 %699, -3400
  %701 = load i32, i32* %EAX.i4398, align 4
  %702 = load i64, i64* %3, align 8
  %703 = add i64 %702, 6
  store i64 %703, i64* %3, align 8
  %704 = inttoptr i64 %700 to i32*
  store i32 %701, i32* %704, align 4
  %.pre359 = load i64, i64* %3, align 8
  br label %block_.L_43f120

block_.L_43f120:                                  ; preds = %block_.L_43f100, %block_43f0fb
  %705 = phi i64 [ %.pre359, %block_.L_43f100 ], [ %683, %block_43f0fb ]
  %MEMORY.5 = phi %struct.Memory* [ %call2_43f115, %block_.L_43f100 ], [ %call2_43f043, %block_43f0fb ]
  %706 = add i64 %705, 91
  br label %block_.L_43f17b

block_.L_43f125:                                  ; preds = %block_.L_43f0d4
  %707 = add i64 %671, 7
  store i64 %707, i64* %3, align 8
  %708 = load i64, i64* %596, align 8
  store i64 %708, i64* %RAX.i3798, align 8
  %709 = add i64 %708, 4
  %710 = add i64 %671, 10
  store i64 %710, i64* %3, align 8
  %711 = inttoptr i64 %709 to i32*
  %712 = load i32, i32* %711, align 4
  %713 = lshr i32 %712, 24
  %714 = and i32 %713, 15
  %715 = zext i32 %714 to i64
  store i64 %715, i64* %RCX.i4416, align 8
  %716 = add nsw i32 %714, -7
  %717 = icmp ult i32 %714, 7
  %718 = zext i1 %717 to i8
  store i8 %718, i8* %31, align 1
  %719 = and i32 %716, 255
  %720 = tail call i32 @llvm.ctpop.i32(i32 %719)
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  %723 = xor i8 %722, 1
  store i8 %723, i8* %38, align 1
  %724 = lshr i32 %716, 4
  %725 = trunc i32 %724 to i8
  %726 = and i8 %725, 1
  store i8 %726, i8* %44, align 1
  %727 = icmp eq i32 %716, 0
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %47, align 1
  %729 = lshr i32 %716, 31
  %730 = trunc i32 %729 to i8
  store i8 %730, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v644 = select i1 %727, i64 25, i64 81
  %731 = add i64 %671, %.v644
  store i64 %731, i64* %3, align 8
  br i1 %727, label %block_43f13e, label %block_.L_43f176

block_43f13e:                                     ; preds = %block_.L_43f125
  %732 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %31, align 1
  %733 = and i32 %732, 255
  %734 = tail call i32 @llvm.ctpop.i32(i32 %733)
  %735 = trunc i32 %734 to i8
  %736 = and i8 %735, 1
  %737 = xor i8 %736, 1
  store i8 %737, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %738 = icmp eq i32 %732, 0
  %739 = zext i1 %738 to i8
  store i8 %739, i8* %47, align 1
  %740 = lshr i32 %732, 31
  %741 = trunc i32 %740 to i8
  store i8 %741, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v652 = select i1 %738, i64 14, i64 19
  %742 = add i64 %731, %.v652
  store i64 %742, i64* %3, align 8
  br i1 %738, label %block_43f14c, label %block_.L_43f151

block_43f14c:                                     ; preds = %block_43f13e
  %743 = add i64 %742, 37
  store i64 %743, i64* %3, align 8
  br label %block_.L_43f171

block_.L_43f151:                                  ; preds = %block_43f13e
  store i64 ptrtoint (%G__0x57deb7_type* @G__0x57deb7 to i64), i64* %RDI.i4227, align 8
  %744 = add i64 %593, -1732
  %745 = add i64 %742, 16
  store i64 %745, i64* %3, align 8
  %746 = inttoptr i64 %744 to i32*
  %747 = load i32, i32* %746, align 4
  %748 = zext i32 %747 to i64
  store i64 %748, i64* %RSI.i4213, align 8
  %749 = add i64 %593, -28
  %750 = add i64 %742, 19
  store i64 %750, i64* %3, align 8
  %751 = inttoptr i64 %749 to i32*
  %752 = load i32, i32* %751, align 4
  %753 = zext i32 %752 to i64
  store i64 %753, i64* %RDX.i4419, align 8
  %AL.i4088 = bitcast %union.anon* %57 to i8*
  store i8 0, i8* %AL.i4088, align 1
  %754 = add i64 %742, 76895
  %755 = add i64 %742, 26
  %756 = load i64, i64* %6, align 8
  %757 = add i64 %756, -8
  %758 = inttoptr i64 %757 to i64*
  store i64 %755, i64* %758, align 8
  store i64 %757, i64* %6, align 8
  store i64 %754, i64* %3, align 8
  %call2_43f166 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %754, %struct.Memory* %call2_43f043)
  %759 = load i64, i64* %RBP.i, align 8
  %760 = add i64 %759, -3404
  %761 = load i32, i32* %EAX.i4398, align 4
  %762 = load i64, i64* %3, align 8
  %763 = add i64 %762, 6
  store i64 %763, i64* %3, align 8
  %764 = inttoptr i64 %760 to i32*
  store i32 %761, i32* %764, align 4
  %.pre360 = load i64, i64* %3, align 8
  br label %block_.L_43f171

block_.L_43f171:                                  ; preds = %block_.L_43f151, %block_43f14c
  %765 = phi i64 [ %.pre360, %block_.L_43f151 ], [ %743, %block_43f14c ]
  %MEMORY.6 = phi %struct.Memory* [ %call2_43f166, %block_.L_43f151 ], [ %call2_43f043, %block_43f14c ]
  %766 = add i64 %765, 5
  store i64 %766, i64* %3, align 8
  br label %block_.L_43f176

block_.L_43f176:                                  ; preds = %block_.L_43f125, %block_.L_43f171
  %767 = phi i64 [ %731, %block_.L_43f125 ], [ %766, %block_.L_43f171 ]
  %MEMORY.7 = phi %struct.Memory* [ %call2_43f043, %block_.L_43f125 ], [ %MEMORY.6, %block_.L_43f171 ]
  %768 = add i64 %767, 5
  store i64 %768, i64* %3, align 8
  br label %block_.L_43f17b

block_.L_43f17b:                                  ; preds = %block_.L_43f176, %block_.L_43f120
  %storemerge184 = phi i64 [ %706, %block_.L_43f120 ], [ %768, %block_.L_43f176 ]
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.5, %block_.L_43f120 ], [ %MEMORY.7, %block_.L_43f176 ]
  %769 = add i64 %storemerge184, 5
  store i64 %769, i64* %3, align 8
  br label %block_.L_43f180

block_.L_43f180:                                  ; preds = %block_.L_43f17b, %block_.L_43f0cf
  %storemerge = phi i64 [ %655, %block_.L_43f0cf ], [ %769, %block_.L_43f17b ]
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.4, %block_.L_43f0cf ], [ %MEMORY.8, %block_.L_43f17b ]
  %770 = load i64, i64* %RBP.i, align 8
  %771 = add i64 %770, -1728
  %772 = add i64 %storemerge, 7
  store i64 %772, i64* %3, align 8
  %773 = inttoptr i64 %771 to i64*
  %774 = load i64, i64* %773, align 8
  store i64 %774, i64* %RAX.i3798, align 8
  %775 = add i64 %774, 4
  %776 = add i64 %storemerge, 10
  store i64 %776, i64* %3, align 8
  %777 = inttoptr i64 %775 to i32*
  %778 = load i32, i32* %777, align 4
  %779 = lshr i32 %778, 20
  %780 = and i32 %779, 15
  %781 = zext i32 %780 to i64
  store i64 %781, i64* %RCX.i4416, align 8
  %782 = icmp eq i32 %780, 0
  %783 = zext i1 %782 to i8
  %784 = add nsw i32 %780, -1
  store i8 %783, i8* %31, align 1
  %785 = and i32 %784, 255
  %786 = tail call i32 @llvm.ctpop.i32(i32 %785)
  %787 = trunc i32 %786 to i8
  %788 = and i8 %787, 1
  %789 = xor i8 %788, 1
  store i8 %789, i8* %38, align 1
  %790 = lshr i32 %784, 4
  %791 = trunc i32 %790 to i8
  %792 = and i8 %791, 1
  store i8 %792, i8* %44, align 1
  %793 = icmp eq i32 %784, 0
  %794 = zext i1 %793 to i8
  store i8 %794, i8* %47, align 1
  %795 = lshr i32 %784, 31
  %796 = trunc i32 %795 to i8
  store i8 %796, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v645 = select i1 %793, i64 25, i64 81
  %797 = add i64 %storemerge, %.v645
  store i64 %797, i64* %3, align 8
  br i1 %793, label %block_43f199, label %block_.L_43f1d1

block_43f199:                                     ; preds = %block_.L_43f180
  %798 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %31, align 1
  %799 = and i32 %798, 255
  %800 = tail call i32 @llvm.ctpop.i32(i32 %799)
  %801 = trunc i32 %800 to i8
  %802 = and i8 %801, 1
  %803 = xor i8 %802, 1
  store i8 %803, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %804 = icmp eq i32 %798, 0
  %805 = zext i1 %804 to i8
  store i8 %805, i8* %47, align 1
  %806 = lshr i32 %798, 31
  %807 = trunc i32 %806 to i8
  store i8 %807, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v651 = select i1 %804, i64 14, i64 19
  %808 = add i64 %797, %.v651
  store i64 %808, i64* %3, align 8
  br i1 %804, label %block_43f1a7, label %block_.L_43f1ac

block_43f1a7:                                     ; preds = %block_43f199
  %809 = add i64 %808, 37
  store i64 %809, i64* %3, align 8
  br label %block_.L_43f1cc

block_.L_43f1ac:                                  ; preds = %block_43f199
  store i64 ptrtoint (%G__0x57de70_type* @G__0x57de70 to i64), i64* %RDI.i4227, align 8
  %810 = add i64 %770, -1732
  %811 = add i64 %808, 16
  store i64 %811, i64* %3, align 8
  %812 = inttoptr i64 %810 to i32*
  %813 = load i32, i32* %812, align 4
  %814 = zext i32 %813 to i64
  store i64 %814, i64* %RSI.i4213, align 8
  %815 = add i64 %770, -32
  %816 = add i64 %808, 19
  store i64 %816, i64* %3, align 8
  %817 = inttoptr i64 %815 to i32*
  %818 = load i32, i32* %817, align 4
  %819 = zext i32 %818 to i64
  store i64 %819, i64* %RDX.i4419, align 8
  %AL.i4055 = bitcast %union.anon* %57 to i8*
  store i8 0, i8* %AL.i4055, align 1
  %820 = add i64 %808, 76804
  %821 = add i64 %808, 26
  %822 = load i64, i64* %6, align 8
  %823 = add i64 %822, -8
  %824 = inttoptr i64 %823 to i64*
  store i64 %821, i64* %824, align 8
  store i64 %823, i64* %6, align 8
  store i64 %820, i64* %3, align 8
  %call2_43f1c1 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %820, %struct.Memory* %MEMORY.9)
  %825 = load i64, i64* %RBP.i, align 8
  %826 = add i64 %825, -3408
  %827 = load i32, i32* %EAX.i4398, align 4
  %828 = load i64, i64* %3, align 8
  %829 = add i64 %828, 6
  store i64 %829, i64* %3, align 8
  %830 = inttoptr i64 %826 to i32*
  store i32 %827, i32* %830, align 4
  %.pre361 = load i64, i64* %3, align 8
  br label %block_.L_43f1cc

block_.L_43f1cc:                                  ; preds = %block_.L_43f1ac, %block_43f1a7
  %831 = phi i64 [ %.pre361, %block_.L_43f1ac ], [ %809, %block_43f1a7 ]
  %MEMORY.10 = phi %struct.Memory* [ %call2_43f1c1, %block_.L_43f1ac ], [ %MEMORY.9, %block_43f1a7 ]
  %832 = add i64 %831, 177
  br label %block_.L_43f27d

block_.L_43f1d1:                                  ; preds = %block_.L_43f180
  %833 = add i64 %797, 7
  store i64 %833, i64* %3, align 8
  %834 = load i64, i64* %773, align 8
  store i64 %834, i64* %RAX.i3798, align 8
  %835 = add i64 %834, 4
  %836 = add i64 %797, 10
  store i64 %836, i64* %3, align 8
  %837 = inttoptr i64 %835 to i32*
  %838 = load i32, i32* %837, align 4
  %839 = lshr i32 %838, 20
  %840 = and i32 %839, 15
  %841 = zext i32 %840 to i64
  store i64 %841, i64* %RCX.i4416, align 8
  %842 = icmp eq i32 %840, 0
  %843 = zext i1 %842 to i8
  store i8 0, i8* %31, align 1
  %844 = tail call i32 @llvm.ctpop.i32(i32 %840)
  %845 = trunc i32 %844 to i8
  %846 = and i8 %845, 1
  %847 = xor i8 %846, 1
  store i8 %847, i8* %38, align 1
  store i8 0, i8* %44, align 1
  store i8 %843, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v646 = select i1 %842, i64 25, i64 81
  %848 = add i64 %797, %.v646
  store i64 %848, i64* %3, align 8
  br i1 %842, label %block_43f1ea, label %block_.L_43f222

block_43f1ea:                                     ; preds = %block_.L_43f1d1
  %849 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %31, align 1
  %850 = and i32 %849, 255
  %851 = tail call i32 @llvm.ctpop.i32(i32 %850)
  %852 = trunc i32 %851 to i8
  %853 = and i8 %852, 1
  %854 = xor i8 %853, 1
  store i8 %854, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %855 = icmp eq i32 %849, 0
  %856 = zext i1 %855 to i8
  store i8 %856, i8* %47, align 1
  %857 = lshr i32 %849, 31
  %858 = trunc i32 %857 to i8
  store i8 %858, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v650 = select i1 %855, i64 14, i64 19
  %859 = add i64 %848, %.v650
  store i64 %859, i64* %3, align 8
  br i1 %855, label %block_43f1f8, label %block_.L_43f1fd

block_43f1f8:                                     ; preds = %block_43f1ea
  %860 = add i64 %859, 37
  store i64 %860, i64* %3, align 8
  br label %block_.L_43f21d

block_.L_43f1fd:                                  ; preds = %block_43f1ea
  store i64 ptrtoint (%G__0x57de94_type* @G__0x57de94 to i64), i64* %RDI.i4227, align 8
  %861 = add i64 %770, -1732
  %862 = add i64 %859, 16
  store i64 %862, i64* %3, align 8
  %863 = inttoptr i64 %861 to i32*
  %864 = load i32, i32* %863, align 4
  %865 = zext i32 %864 to i64
  store i64 %865, i64* %RSI.i4213, align 8
  %866 = add i64 %770, -32
  %867 = add i64 %859, 19
  store i64 %867, i64* %3, align 8
  %868 = inttoptr i64 %866 to i32*
  %869 = load i32, i32* %868, align 4
  %870 = zext i32 %869 to i64
  store i64 %870, i64* %RDX.i4419, align 8
  %AL.i4024 = bitcast %union.anon* %57 to i8*
  store i8 0, i8* %AL.i4024, align 1
  %871 = add i64 %859, 76723
  %872 = add i64 %859, 26
  %873 = load i64, i64* %6, align 8
  %874 = add i64 %873, -8
  %875 = inttoptr i64 %874 to i64*
  store i64 %872, i64* %875, align 8
  store i64 %874, i64* %6, align 8
  store i64 %871, i64* %3, align 8
  %call2_43f212 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %871, %struct.Memory* %MEMORY.9)
  %876 = load i64, i64* %RBP.i, align 8
  %877 = add i64 %876, -3412
  %878 = load i32, i32* %EAX.i4398, align 4
  %879 = load i64, i64* %3, align 8
  %880 = add i64 %879, 6
  store i64 %880, i64* %3, align 8
  %881 = inttoptr i64 %877 to i32*
  store i32 %878, i32* %881, align 4
  %.pre362 = load i64, i64* %3, align 8
  br label %block_.L_43f21d

block_.L_43f21d:                                  ; preds = %block_.L_43f1fd, %block_43f1f8
  %882 = phi i64 [ %.pre362, %block_.L_43f1fd ], [ %860, %block_43f1f8 ]
  %MEMORY.11 = phi %struct.Memory* [ %call2_43f212, %block_.L_43f1fd ], [ %MEMORY.9, %block_43f1f8 ]
  %883 = add i64 %882, 91
  br label %block_.L_43f278

block_.L_43f222:                                  ; preds = %block_.L_43f1d1
  %884 = add i64 %848, 7
  store i64 %884, i64* %3, align 8
  %885 = load i64, i64* %773, align 8
  store i64 %885, i64* %RAX.i3798, align 8
  %886 = add i64 %885, 4
  %887 = add i64 %848, 10
  store i64 %887, i64* %3, align 8
  %888 = inttoptr i64 %886 to i32*
  %889 = load i32, i32* %888, align 4
  %890 = lshr i32 %889, 20
  %891 = and i32 %890, 15
  %892 = zext i32 %891 to i64
  store i64 %892, i64* %RCX.i4416, align 8
  %893 = add nsw i32 %891, -7
  %894 = icmp ult i32 %891, 7
  %895 = zext i1 %894 to i8
  store i8 %895, i8* %31, align 1
  %896 = and i32 %893, 255
  %897 = tail call i32 @llvm.ctpop.i32(i32 %896)
  %898 = trunc i32 %897 to i8
  %899 = and i8 %898, 1
  %900 = xor i8 %899, 1
  store i8 %900, i8* %38, align 1
  %901 = lshr i32 %893, 4
  %902 = trunc i32 %901 to i8
  %903 = and i8 %902, 1
  store i8 %903, i8* %44, align 1
  %904 = icmp eq i32 %893, 0
  %905 = zext i1 %904 to i8
  store i8 %905, i8* %47, align 1
  %906 = lshr i32 %893, 31
  %907 = trunc i32 %906 to i8
  store i8 %907, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v647 = select i1 %904, i64 25, i64 81
  %908 = add i64 %848, %.v647
  store i64 %908, i64* %3, align 8
  br i1 %904, label %block_43f23b, label %block_.L_43f273

block_43f23b:                                     ; preds = %block_.L_43f222
  %909 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %31, align 1
  %910 = and i32 %909, 255
  %911 = tail call i32 @llvm.ctpop.i32(i32 %910)
  %912 = trunc i32 %911 to i8
  %913 = and i8 %912, 1
  %914 = xor i8 %913, 1
  store i8 %914, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %915 = icmp eq i32 %909, 0
  %916 = zext i1 %915 to i8
  store i8 %916, i8* %47, align 1
  %917 = lshr i32 %909, 31
  %918 = trunc i32 %917 to i8
  store i8 %918, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v649 = select i1 %915, i64 14, i64 19
  %919 = add i64 %908, %.v649
  store i64 %919, i64* %3, align 8
  br i1 %915, label %block_43f249, label %block_.L_43f24e

block_43f249:                                     ; preds = %block_43f23b
  %920 = add i64 %919, 37
  store i64 %920, i64* %3, align 8
  br label %block_.L_43f26e

block_.L_43f24e:                                  ; preds = %block_43f23b
  store i64 ptrtoint (%G__0x57deb7_type* @G__0x57deb7 to i64), i64* %RDI.i4227, align 8
  %921 = add i64 %770, -1732
  %922 = add i64 %919, 16
  store i64 %922, i64* %3, align 8
  %923 = inttoptr i64 %921 to i32*
  %924 = load i32, i32* %923, align 4
  %925 = zext i32 %924 to i64
  store i64 %925, i64* %RSI.i4213, align 8
  %926 = add i64 %770, -32
  %927 = add i64 %919, 19
  store i64 %927, i64* %3, align 8
  %928 = inttoptr i64 %926 to i32*
  %929 = load i32, i32* %928, align 4
  %930 = zext i32 %929 to i64
  store i64 %930, i64* %RDX.i4419, align 8
  %AL.i3993 = bitcast %union.anon* %57 to i8*
  store i8 0, i8* %AL.i3993, align 1
  %931 = add i64 %919, 76642
  %932 = add i64 %919, 26
  %933 = load i64, i64* %6, align 8
  %934 = add i64 %933, -8
  %935 = inttoptr i64 %934 to i64*
  store i64 %932, i64* %935, align 8
  store i64 %934, i64* %6, align 8
  store i64 %931, i64* %3, align 8
  %call2_43f263 = tail call %struct.Memory* @sub_451db0.gprintf(%struct.State* nonnull %0, i64 %931, %struct.Memory* %MEMORY.9)
  %936 = load i64, i64* %RBP.i, align 8
  %937 = add i64 %936, -3416
  %938 = load i32, i32* %EAX.i4398, align 4
  %939 = load i64, i64* %3, align 8
  %940 = add i64 %939, 6
  store i64 %940, i64* %3, align 8
  %941 = inttoptr i64 %937 to i32*
  store i32 %938, i32* %941, align 4
  %.pre363 = load i64, i64* %3, align 8
  br label %block_.L_43f26e

block_.L_43f26e:                                  ; preds = %block_.L_43f24e, %block_43f249
  %942 = phi i64 [ %.pre363, %block_.L_43f24e ], [ %920, %block_43f249 ]
  %MEMORY.12 = phi %struct.Memory* [ %call2_43f263, %block_.L_43f24e ], [ %MEMORY.9, %block_43f249 ]
  %943 = add i64 %942, 5
  store i64 %943, i64* %3, align 8
  br label %block_.L_43f273

block_.L_43f273:                                  ; preds = %block_.L_43f222, %block_.L_43f26e
  %944 = phi i64 [ %908, %block_.L_43f222 ], [ %943, %block_.L_43f26e ]
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.9, %block_.L_43f222 ], [ %MEMORY.12, %block_.L_43f26e ]
  %945 = add i64 %944, 5
  store i64 %945, i64* %3, align 8
  br label %block_.L_43f278

block_.L_43f278:                                  ; preds = %block_.L_43f273, %block_.L_43f21d
  %storemerge183 = phi i64 [ %883, %block_.L_43f21d ], [ %945, %block_.L_43f273 ]
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.11, %block_.L_43f21d ], [ %MEMORY.13, %block_.L_43f273 ]
  %946 = add i64 %storemerge183, 5
  store i64 %946, i64* %3, align 8
  br label %block_.L_43f27d

block_.L_43f27d:                                  ; preds = %block_.L_43f278, %block_.L_43f1cc
  %storemerge181 = phi i64 [ %832, %block_.L_43f1cc ], [ %946, %block_.L_43f278 ]
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.10, %block_.L_43f1cc ], [ %MEMORY.14, %block_.L_43f278 ]
  %947 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i8 0, i8* %31, align 1
  %948 = trunc i64 %947 to i32
  %949 = and i32 %948, 255
  %950 = tail call i32 @llvm.ctpop.i32(i32 %949)
  %951 = trunc i32 %950 to i8
  %952 = and i8 %951, 1
  %953 = xor i8 %952, 1
  store i8 %953, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %954 = icmp eq i64 %947, 0
  %955 = zext i1 %954 to i8
  store i8 %955, i8* %47, align 1
  %956 = lshr i64 %947, 63
  %957 = trunc i64 %956 to i8
  store i8 %957, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v648 = select i1 %954, i64 87, i64 15
  %958 = add i64 %storemerge181, %.v648
  store i64 %958, i64* %3, align 8
  br i1 %954, label %block_.L_43f2d4, label %block_43f28c

block_43f28c:                                     ; preds = %block_.L_43f27d
  store i64 ptrtoint (%G__0x57dee3_type* @G__0x57dee3 to i64), i64* %R9.i4411, align 8
  %959 = load i64, i64* %RBP.i, align 8
  %960 = add i64 %959, -1744
  %961 = add i64 %958, 17
  store i64 %961, i64* %3, align 8
  %962 = inttoptr i64 %960 to i64*
  %963 = load i64, i64* %962, align 8
  store i64 %963, i64* %RDI.i4227, align 8
  %964 = add i64 %959, -1748
  %965 = add i64 %958, 23
  store i64 %965, i64* %3, align 8
  %966 = inttoptr i64 %964 to i32*
  %967 = load i32, i32* %966, align 4
  %968 = zext i32 %967 to i64
  store i64 %968, i64* %RSI.i4213, align 8
  %969 = add i64 %959, -1752
  %970 = add i64 %958, 29
  store i64 %970, i64* %3, align 8
  %971 = inttoptr i64 %969 to i32*
  %972 = load i32, i32* %971, align 4
  %973 = zext i32 %972 to i64
  store i64 %973, i64* %RDX.i4419, align 8
  %974 = add i64 %959, -1728
  %975 = add i64 %958, 36
  store i64 %975, i64* %3, align 8
  %976 = inttoptr i64 %974 to i64*
  %977 = load i64, i64* %976, align 8
  store i64 %977, i64* %RAX.i3798, align 8
  %978 = add i64 %977, 4
  %979 = add i64 %958, 39
  store i64 %979, i64* %3, align 8
  %980 = inttoptr i64 %978 to i32*
  %981 = load i32, i32* %980, align 4
  %982 = lshr i32 %981, 10
  %983 = and i32 %982, 255
  %984 = tail call i32 @llvm.ctpop.i32(i32 %983)
  %985 = trunc i32 %984 to i8
  %986 = and i8 %985, 1
  %987 = xor i8 %986, 1
  %988 = and i32 %982, 1023
  %989 = zext i32 %988 to i64
  store i64 %989, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 %987, i8* %38, align 1
  %990 = icmp eq i32 %988, 0
  %991 = zext i1 %990 to i8
  store i8 %991, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %992 = add i64 %958, 55
  store i64 %992, i64* %3, align 8
  %993 = load i64, i64* %976, align 8
  store i64 %993, i64* %RAX.i3798, align 8
  %994 = add i64 %993, 4
  %995 = add i64 %958, 59
  store i64 %995, i64* %3, align 8
  %996 = inttoptr i64 %994 to i32*
  %997 = load i32, i32* %996, align 4
  %998 = lshr i32 %997, 24
  %999 = and i32 %998, 15
  %1000 = zext i32 %999 to i64
  store i64 %1000, i64* %R8.i4219, align 8
  store i8 0, i8* %31, align 1
  %1001 = tail call i32 @llvm.ctpop.i32(i32 %999)
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  store i8 %1004, i8* %38, align 1
  %1005 = icmp eq i32 %999, 0
  %1006 = zext i1 %1005 to i8
  store i8 %1006, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %1007 = add i64 %958, -159596
  %1008 = add i64 %958, 72
  %1009 = load i64, i64* %6, align 8
  %1010 = add i64 %1009, -8
  %1011 = inttoptr i64 %1010 to i64*
  store i64 %1008, i64* %1011, align 8
  store i64 %1010, i64* %6, align 8
  store i64 %1007, i64* %3, align 8
  %call2_43f2cf = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %1007, %struct.Memory* %MEMORY.15)
  %.pre364 = load i64, i64* %3, align 8
  br label %block_.L_43f2d4

block_.L_43f2d4:                                  ; preds = %block_43f28c, %block_.L_43f27d
  %1012 = phi i64 [ %958, %block_.L_43f27d ], [ %.pre364, %block_43f28c ]
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.15, %block_.L_43f27d ], [ %call2_43f2cf, %block_43f28c ]
  %1013 = load i64, i64* %RBP.i, align 8
  %1014 = add i64 %1013, -1728
  %1015 = add i64 %1012, 7
  store i64 %1015, i64* %3, align 8
  %1016 = inttoptr i64 %1014 to i64*
  %1017 = load i64, i64* %1016, align 8
  store i64 %1017, i64* %RAX.i3798, align 8
  %1018 = add i64 %1017, 4
  %1019 = add i64 %1012, 10
  store i64 %1019, i64* %3, align 8
  %1020 = inttoptr i64 %1018 to i32*
  %1021 = load i32, i32* %1020, align 4
  %1022 = lshr i32 %1021, 24
  %1023 = and i32 %1022, 15
  %1024 = zext i32 %1023 to i64
  store i64 %1024, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %1025 = tail call i32 @llvm.ctpop.i32(i32 %1023)
  %1026 = trunc i32 %1025 to i8
  %1027 = and i8 %1026, 1
  %1028 = xor i8 %1027, 1
  store i8 %1028, i8* %38, align 1
  %1029 = icmp eq i32 %1023, 0
  %1030 = zext i1 %1029 to i8
  store i8 %1030, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %1031 = add i64 %1013, -64
  %1032 = add i64 %1012, 20
  store i64 %1032, i64* %3, align 8
  %1033 = inttoptr i64 %1031 to i64*
  %1034 = load i64, i64* %1033, align 8
  store i64 %1034, i64* %RAX.i3798, align 8
  %1035 = add i64 %1012, 22
  store i64 %1035, i64* %3, align 8
  %1036 = inttoptr i64 %1034 to i32*
  store i32 %1023, i32* %1036, align 4
  %1037 = load i64, i64* %RBP.i, align 8
  %1038 = add i64 %1037, -1728
  %1039 = load i64, i64* %3, align 8
  %1040 = add i64 %1039, 7
  store i64 %1040, i64* %3, align 8
  %1041 = inttoptr i64 %1038 to i64*
  %1042 = load i64, i64* %1041, align 8
  store i64 %1042, i64* %RAX.i3798, align 8
  %1043 = add i64 %1042, 4
  %1044 = add i64 %1039, 10
  store i64 %1044, i64* %3, align 8
  %1045 = inttoptr i64 %1043 to i32*
  %1046 = load i32, i32* %1045, align 4
  %1047 = lshr i32 %1046, 20
  %1048 = and i32 %1047, 15
  %1049 = zext i32 %1048 to i64
  store i64 %1049, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %1050 = tail call i32 @llvm.ctpop.i32(i32 %1048)
  %1051 = trunc i32 %1050 to i8
  %1052 = and i8 %1051, 1
  %1053 = xor i8 %1052, 1
  store i8 %1053, i8* %38, align 1
  %1054 = icmp eq i32 %1048, 0
  %1055 = zext i1 %1054 to i8
  store i8 %1055, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %1056 = add i64 %1037, -72
  %1057 = add i64 %1039, 20
  store i64 %1057, i64* %3, align 8
  %1058 = inttoptr i64 %1056 to i64*
  %1059 = load i64, i64* %1058, align 8
  store i64 %1059, i64* %RAX.i3798, align 8
  %1060 = add i64 %1039, 22
  store i64 %1060, i64* %3, align 8
  %1061 = inttoptr i64 %1059 to i32*
  store i32 %1048, i32* %1061, align 4
  br label %block_.L_441708

block_.L_43f305:                                  ; preds = %block_43f029
  %1062 = add i64 %550, 16
  store i64 %1062, i64* %3, align 8
  br label %block_.L_43f315

block_.L_43f30a:                                  ; preds = %block_43f015, %block_.L_43efec, %block_43f01f, %block_43f000
  %1063 = phi i64 [ %530, %block_43f01f ], [ %516, %block_43f015 ], [ %501, %block_43f000 ], [ %494, %block_.L_43efec ]
  %1064 = load i64, i64* %RBP.i, align 8
  %1065 = add i64 %1064, -1728
  %1066 = add i64 %1063, 11
  store i64 %1066, i64* %3, align 8
  %1067 = inttoptr i64 %1065 to i64*
  store i64 0, i64* %1067, align 8
  %.pre365 = load i64, i64* %3, align 8
  br label %block_.L_43f315

block_.L_43f315:                                  ; preds = %block_.L_43f30a, %block_.L_43f305
  %1068 = phi i64 [ %.pre365, %block_.L_43f30a ], [ %1062, %block_.L_43f305 ]
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.2, %block_.L_43f30a ], [ %call2_43f043, %block_.L_43f305 ]
  %1069 = load i64, i64* %RBP.i, align 8
  %1070 = add i64 %1069, -768
  %1071 = add i64 %1068, 10
  store i64 %1071, i64* %3, align 8
  %1072 = inttoptr i64 %1070 to i32*
  store i32 0, i32* %1072, align 4
  %1073 = load i64, i64* %RBP.i, align 8
  %1074 = add i64 %1073, -800
  %1075 = load i64, i64* %3, align 8
  %1076 = add i64 %1075, 10
  store i64 %1076, i64* %3, align 8
  %1077 = inttoptr i64 %1074 to i32*
  store i32 0, i32* %1077, align 4
  %1078 = load i64, i64* %RBP.i, align 8
  %1079 = add i64 %1078, -832
  %1080 = load i64, i64* %3, align 8
  %1081 = add i64 %1080, 10
  store i64 %1081, i64* %3, align 8
  %1082 = inttoptr i64 %1079 to i32*
  store i32 0, i32* %1082, align 4
  %1083 = load i64, i64* %3, align 8
  store i64 0, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i32 0, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  %1084 = load i64, i64* %RBP.i, align 8
  %1085 = add i64 %1084, -1668
  %1086 = add i64 %1083, 33
  store i64 %1086, i64* %3, align 8
  %1087 = inttoptr i64 %1085 to i32*
  store i32 0, i32* %1087, align 4
  %.pre366 = load i64, i64* %3, align 8
  br label %block_.L_43f354

block_.L_43f354:                                  ; preds = %block_43f361, %block_.L_43f315
  %1088 = phi i64 [ %1300, %block_43f361 ], [ %.pre366, %block_.L_43f315 ]
  %1089 = load i64, i64* %RBP.i, align 8
  %1090 = add i64 %1089, -1668
  %1091 = add i64 %1088, 7
  store i64 %1091, i64* %3, align 8
  %1092 = inttoptr i64 %1090 to i32*
  %1093 = load i32, i32* %1092, align 4
  %1094 = add i32 %1093, -6
  %1095 = icmp ult i32 %1093, 6
  %1096 = zext i1 %1095 to i8
  store i8 %1096, i8* %31, align 1
  %1097 = and i32 %1094, 255
  %1098 = tail call i32 @llvm.ctpop.i32(i32 %1097)
  %1099 = trunc i32 %1098 to i8
  %1100 = and i8 %1099, 1
  %1101 = xor i8 %1100, 1
  store i8 %1101, i8* %38, align 1
  %1102 = xor i32 %1094, %1093
  %1103 = lshr i32 %1102, 4
  %1104 = trunc i32 %1103 to i8
  %1105 = and i8 %1104, 1
  store i8 %1105, i8* %44, align 1
  %1106 = icmp eq i32 %1094, 0
  %1107 = zext i1 %1106 to i8
  store i8 %1107, i8* %47, align 1
  %1108 = lshr i32 %1094, 31
  %1109 = trunc i32 %1108 to i8
  store i8 %1109, i8* %50, align 1
  %1110 = lshr i32 %1093, 31
  %1111 = xor i32 %1108, %1110
  %1112 = add nuw nsw i32 %1111, %1110
  %1113 = icmp eq i32 %1112, 2
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %56, align 1
  %1115 = icmp ne i8 %1109, 0
  %1116 = xor i1 %1115, %1113
  %.v490 = select i1 %1116, i64 13, i64 133
  %1117 = add i64 %1088, %.v490
  store i64 %1117, i64* %3, align 8
  br i1 %1116, label %block_43f361, label %block_.L_43f3d9

block_43f361:                                     ; preds = %block_.L_43f354
  %1118 = add i64 %1089, -736
  store i64 %1118, i64* %RAX.i3798, align 8
  %1119 = add i64 %1117, 14
  store i64 %1119, i64* %3, align 8
  %1120 = load i32, i32* %1092, align 4
  %1121 = sext i32 %1120 to i64
  %1122 = shl nsw i64 %1121, 5
  store i64 %1122, i64* %RCX.i4416, align 8
  %1123 = add i64 %1122, %1118
  store i64 %1123, i64* %RDX.i4419, align 8
  %1124 = icmp ult i64 %1123, %1118
  %1125 = icmp ult i64 %1123, %1122
  %1126 = or i1 %1124, %1125
  %1127 = zext i1 %1126 to i8
  store i8 %1127, i8* %31, align 1
  %1128 = trunc i64 %1123 to i32
  %1129 = and i32 %1128, 255
  %1130 = tail call i32 @llvm.ctpop.i32(i32 %1129)
  %1131 = trunc i32 %1130 to i8
  %1132 = and i8 %1131, 1
  %1133 = xor i8 %1132, 1
  store i8 %1133, i8* %38, align 1
  %1134 = xor i64 %1118, %1123
  %1135 = lshr i64 %1134, 4
  %1136 = trunc i64 %1135 to i8
  %1137 = and i8 %1136, 1
  store i8 %1137, i8* %44, align 1
  %1138 = icmp eq i64 %1123, 0
  %1139 = zext i1 %1138 to i8
  store i8 %1139, i8* %47, align 1
  %1140 = lshr i64 %1123, 63
  %1141 = trunc i64 %1140 to i8
  store i8 %1141, i8* %50, align 1
  %1142 = lshr i64 %1118, 63
  %1143 = lshr i64 %1121, 58
  %1144 = and i64 %1143, 1
  %1145 = xor i64 %1140, %1142
  %1146 = xor i64 %1140, %1144
  %1147 = add nuw nsw i64 %1145, %1146
  %1148 = icmp eq i64 %1147, 2
  %1149 = zext i1 %1148 to i8
  store i8 %1149, i8* %56, align 1
  %1150 = inttoptr i64 %1123 to i32*
  %1151 = add i64 %1117, 30
  store i64 %1151, i64* %3, align 8
  store i32 0, i32* %1150, align 4
  %1152 = load i64, i64* %RBP.i, align 8
  %1153 = add i64 %1152, -1668
  %1154 = load i64, i64* %3, align 8
  %1155 = add i64 %1154, 7
  store i64 %1155, i64* %3, align 8
  %1156 = inttoptr i64 %1153 to i32*
  %1157 = load i32, i32* %1156, align 4
  %1158 = sext i32 %1157 to i64
  %1159 = shl nsw i64 %1158, 5
  store i64 %1159, i64* %RCX.i4416, align 8
  %1160 = load i64, i64* %RAX.i3798, align 8
  %1161 = add i64 %1159, %1160
  store i64 %1161, i64* %RDX.i4419, align 8
  %1162 = icmp ult i64 %1161, %1160
  %1163 = icmp ult i64 %1161, %1159
  %1164 = or i1 %1162, %1163
  %1165 = zext i1 %1164 to i8
  store i8 %1165, i8* %31, align 1
  %1166 = trunc i64 %1161 to i32
  %1167 = and i32 %1166, 255
  %1168 = tail call i32 @llvm.ctpop.i32(i32 %1167)
  %1169 = trunc i32 %1168 to i8
  %1170 = and i8 %1169, 1
  %1171 = xor i8 %1170, 1
  store i8 %1171, i8* %38, align 1
  %1172 = xor i64 %1160, %1161
  %1173 = lshr i64 %1172, 4
  %1174 = trunc i64 %1173 to i8
  %1175 = and i8 %1174, 1
  store i8 %1175, i8* %44, align 1
  %1176 = icmp eq i64 %1161, 0
  %1177 = zext i1 %1176 to i8
  store i8 %1177, i8* %47, align 1
  %1178 = lshr i64 %1161, 63
  %1179 = trunc i64 %1178 to i8
  store i8 %1179, i8* %50, align 1
  %1180 = lshr i64 %1160, 63
  %1181 = lshr i64 %1158, 58
  %1182 = and i64 %1181, 1
  %1183 = xor i64 %1178, %1180
  %1184 = xor i64 %1178, %1182
  %1185 = add nuw nsw i64 %1183, %1184
  %1186 = icmp eq i64 %1185, 2
  %1187 = zext i1 %1186 to i8
  store i8 %1187, i8* %56, align 1
  %1188 = add i64 %1161, 4
  %1189 = add i64 %1154, 24
  store i64 %1189, i64* %3, align 8
  %1190 = inttoptr i64 %1188 to i32*
  store i32 -1, i32* %1190, align 4
  %1191 = load i64, i64* %RBP.i, align 8
  %1192 = add i64 %1191, -1668
  %1193 = load i64, i64* %3, align 8
  %1194 = add i64 %1193, 7
  store i64 %1194, i64* %3, align 8
  %1195 = inttoptr i64 %1192 to i32*
  %1196 = load i32, i32* %1195, align 4
  %1197 = sext i32 %1196 to i64
  %1198 = shl nsw i64 %1197, 5
  store i64 %1198, i64* %RCX.i4416, align 8
  %1199 = load i64, i64* %RAX.i3798, align 8
  %1200 = add i64 %1198, %1199
  store i64 %1200, i64* %RDX.i4419, align 8
  %1201 = icmp ult i64 %1200, %1199
  %1202 = icmp ult i64 %1200, %1198
  %1203 = or i1 %1201, %1202
  %1204 = zext i1 %1203 to i8
  store i8 %1204, i8* %31, align 1
  %1205 = trunc i64 %1200 to i32
  %1206 = and i32 %1205, 255
  %1207 = tail call i32 @llvm.ctpop.i32(i32 %1206)
  %1208 = trunc i32 %1207 to i8
  %1209 = and i8 %1208, 1
  %1210 = xor i8 %1209, 1
  store i8 %1210, i8* %38, align 1
  %1211 = xor i64 %1199, %1200
  %1212 = lshr i64 %1211, 4
  %1213 = trunc i64 %1212 to i8
  %1214 = and i8 %1213, 1
  store i8 %1214, i8* %44, align 1
  %1215 = icmp eq i64 %1200, 0
  %1216 = zext i1 %1215 to i8
  store i8 %1216, i8* %47, align 1
  %1217 = lshr i64 %1200, 63
  %1218 = trunc i64 %1217 to i8
  store i8 %1218, i8* %50, align 1
  %1219 = lshr i64 %1199, 63
  %1220 = lshr i64 %1197, 58
  %1221 = and i64 %1220, 1
  %1222 = xor i64 %1217, %1219
  %1223 = xor i64 %1217, %1221
  %1224 = add nuw nsw i64 %1222, %1223
  %1225 = icmp eq i64 %1224, 2
  %1226 = zext i1 %1225 to i8
  store i8 %1226, i8* %56, align 1
  %1227 = add i64 %1200, 8
  %1228 = add i64 %1193, 25
  store i64 %1228, i64* %3, align 8
  %1229 = inttoptr i64 %1227 to i64*
  store i64 0, i64* %1229, align 8
  %1230 = load i64, i64* %RBP.i, align 8
  %1231 = add i64 %1230, -1668
  %1232 = load i64, i64* %3, align 8
  %1233 = add i64 %1232, 7
  store i64 %1233, i64* %3, align 8
  %1234 = inttoptr i64 %1231 to i32*
  %1235 = load i32, i32* %1234, align 4
  %1236 = sext i32 %1235 to i64
  %1237 = shl nsw i64 %1236, 5
  store i64 %1237, i64* %RCX.i4416, align 8
  %1238 = load i64, i64* %RAX.i3798, align 8
  %1239 = add i64 %1237, %1238
  store i64 %1239, i64* %RAX.i3798, align 8
  %1240 = icmp ult i64 %1239, %1238
  %1241 = icmp ult i64 %1239, %1237
  %1242 = or i1 %1240, %1241
  %1243 = zext i1 %1242 to i8
  store i8 %1243, i8* %31, align 1
  %1244 = trunc i64 %1239 to i32
  %1245 = and i32 %1244, 255
  %1246 = tail call i32 @llvm.ctpop.i32(i32 %1245)
  %1247 = trunc i32 %1246 to i8
  %1248 = and i8 %1247, 1
  %1249 = xor i8 %1248, 1
  store i8 %1249, i8* %38, align 1
  %1250 = xor i64 %1238, %1239
  %1251 = lshr i64 %1250, 4
  %1252 = trunc i64 %1251 to i8
  %1253 = and i8 %1252, 1
  store i8 %1253, i8* %44, align 1
  %1254 = icmp eq i64 %1239, 0
  %1255 = zext i1 %1254 to i8
  store i8 %1255, i8* %47, align 1
  %1256 = lshr i64 %1239, 63
  %1257 = trunc i64 %1256 to i8
  store i8 %1257, i8* %50, align 1
  %1258 = lshr i64 %1238, 63
  %1259 = lshr i64 %1236, 58
  %1260 = and i64 %1259, 1
  %1261 = xor i64 %1256, %1258
  %1262 = xor i64 %1256, %1260
  %1263 = add nuw nsw i64 %1261, %1262
  %1264 = icmp eq i64 %1263, 2
  %1265 = zext i1 %1264 to i8
  store i8 %1265, i8* %56, align 1
  %1266 = add i64 %1239, 16
  %1267 = add i64 %1232, 21
  store i64 %1267, i64* %3, align 8
  %1268 = inttoptr i64 %1266 to i32*
  store i32 2, i32* %1268, align 4
  %1269 = load i64, i64* %RBP.i, align 8
  %1270 = add i64 %1269, -1668
  %1271 = load i64, i64* %3, align 8
  %1272 = add i64 %1271, 6
  store i64 %1272, i64* %3, align 8
  %1273 = inttoptr i64 %1270 to i32*
  %1274 = load i32, i32* %1273, align 4
  %1275 = add i32 %1274, 1
  %1276 = zext i32 %1275 to i64
  store i64 %1276, i64* %RAX.i3798, align 8
  %1277 = icmp eq i32 %1274, -1
  %1278 = icmp eq i32 %1275, 0
  %1279 = or i1 %1277, %1278
  %1280 = zext i1 %1279 to i8
  store i8 %1280, i8* %31, align 1
  %1281 = and i32 %1275, 255
  %1282 = tail call i32 @llvm.ctpop.i32(i32 %1281)
  %1283 = trunc i32 %1282 to i8
  %1284 = and i8 %1283, 1
  %1285 = xor i8 %1284, 1
  store i8 %1285, i8* %38, align 1
  %1286 = xor i32 %1275, %1274
  %1287 = lshr i32 %1286, 4
  %1288 = trunc i32 %1287 to i8
  %1289 = and i8 %1288, 1
  store i8 %1289, i8* %44, align 1
  %1290 = zext i1 %1278 to i8
  store i8 %1290, i8* %47, align 1
  %1291 = lshr i32 %1275, 31
  %1292 = trunc i32 %1291 to i8
  store i8 %1292, i8* %50, align 1
  %1293 = lshr i32 %1274, 31
  %1294 = xor i32 %1291, %1293
  %1295 = add nuw nsw i32 %1294, %1291
  %1296 = icmp eq i32 %1295, 2
  %1297 = zext i1 %1296 to i8
  store i8 %1297, i8* %56, align 1
  %1298 = add i64 %1271, 15
  store i64 %1298, i64* %3, align 8
  store i32 %1275, i32* %1273, align 4
  %1299 = load i64, i64* %3, align 8
  %1300 = add i64 %1299, -128
  store i64 %1300, i64* %3, align 8
  br label %block_.L_43f354

block_.L_43f3d9:                                  ; preds = %block_.L_43f354
  %1301 = add i64 %1089, -96
  %1302 = add i64 %1117, 3
  store i64 %1302, i64* %3, align 8
  %1303 = inttoptr i64 %1301 to i32*
  %1304 = load i32, i32* %1303, align 4
  %1305 = zext i32 %1304 to i64
  store i64 %1305, i64* %RAX.i3798, align 8
  %1306 = add i64 %1089, -32
  %1307 = add i64 %1117, 7
  store i64 %1307, i64* %3, align 8
  %1308 = inttoptr i64 %1306 to i32*
  %1309 = load i32, i32* %1308, align 4
  %1310 = sext i32 %1309 to i64
  store i64 %1310, i64* %RCX.i4416, align 8
  %1311 = add nsw i64 %1310, 12099168
  %1312 = add i64 %1117, 15
  store i64 %1312, i64* %3, align 8
  %1313 = inttoptr i64 %1311 to i8*
  %1314 = load i8, i8* %1313, align 1
  %1315 = zext i8 %1314 to i64
  store i64 %1315, i64* %RDX.i4419, align 8
  %1316 = zext i8 %1314 to i32
  %1317 = sub i32 %1304, %1316
  %1318 = icmp ult i32 %1304, %1316
  %1319 = zext i1 %1318 to i8
  store i8 %1319, i8* %31, align 1
  %1320 = and i32 %1317, 255
  %1321 = tail call i32 @llvm.ctpop.i32(i32 %1320)
  %1322 = trunc i32 %1321 to i8
  %1323 = and i8 %1322, 1
  %1324 = xor i8 %1323, 1
  store i8 %1324, i8* %38, align 1
  %1325 = xor i32 %1316, %1304
  %1326 = xor i32 %1325, %1317
  %1327 = lshr i32 %1326, 4
  %1328 = trunc i32 %1327 to i8
  %1329 = and i8 %1328, 1
  store i8 %1329, i8* %44, align 1
  %1330 = icmp eq i32 %1317, 0
  %1331 = zext i1 %1330 to i8
  store i8 %1331, i8* %47, align 1
  %1332 = lshr i32 %1317, 31
  %1333 = trunc i32 %1332 to i8
  store i8 %1333, i8* %50, align 1
  %1334 = lshr i32 %1304, 31
  %1335 = xor i32 %1332, %1334
  %1336 = add nuw nsw i32 %1335, %1334
  %1337 = icmp eq i32 %1336, 2
  %1338 = zext i1 %1337 to i8
  store i8 %1338, i8* %56, align 1
  %.v491 = select i1 %1330, i64 23, i64 28
  %1339 = add i64 %1117, %.v491
  store i64 %1339, i64* %3, align 8
  br i1 %1330, label %block_43f3f0, label %block_.L_43f3f5

block_43f3f0:                                     ; preds = %block_.L_43f3d9
  %1340 = add i64 %1339, 45
  store i64 %1340, i64* %3, align 8
  %.pre464 = getelementptr inbounds %union.anon, %union.anon* %85, i64 0, i32 0
  %.pre465 = getelementptr inbounds %union.anon, %union.anon* %80, i64 0, i32 0
  br label %block_.L_43f41d

block_.L_43f3f5:                                  ; preds = %block_.L_43f3d9
  %RDI.i3826 = getelementptr inbounds %union.anon, %union.anon* %80, i64 0, i32 0
  store i64 ptrtoint (%G__0x57dd2e_type* @G__0x57dd2e to i64), i64* %RDI.i3826, align 8
  %RSI.i3824 = getelementptr inbounds %union.anon, %union.anon* %85, i64 0, i32 0
  store i64 412, i64* %RSI.i3824, align 8
  store i64 ptrtoint (%G__0x57deea_type* @G__0x57deea to i64), i64* %RDX.i4419, align 8
  store i64 4294967295, i64* %RAX.i3798, align 8
  store i64 4294967295, i64* %RCX.i4416, align 8
  %1341 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  store i64 4294967295, i64* %1341, align 8
  %1342 = add i64 %1339, 76955
  %1343 = add i64 %1339, 40
  %1344 = load i64, i64* %6, align 8
  %1345 = add i64 %1344, -8
  %1346 = inttoptr i64 %1345 to i64*
  store i64 %1343, i64* %1346, align 8
  store i64 %1345, i64* %6, align 8
  store i64 %1342, i64* %3, align 8
  %call2_43f418 = tail call %struct.Memory* @sub_452090.abortgo(%struct.State* nonnull %0, i64 %1342, %struct.Memory* %MEMORY.18)
  %.pre367 = load i64, i64* %3, align 8
  %.pre368 = load i64, i64* %RBP.i, align 8
  br label %block_.L_43f41d

block_.L_43f41d:                                  ; preds = %block_.L_43f3f5, %block_43f3f0
  %RDI.i3802.pre-phi = phi i64* [ %RDI.i3826, %block_.L_43f3f5 ], [ %.pre465, %block_43f3f0 ]
  %RSI.i3811.pre-phi = phi i64* [ %RSI.i3824, %block_.L_43f3f5 ], [ %.pre464, %block_43f3f0 ]
  %1347 = phi i64 [ %.pre368, %block_.L_43f3f5 ], [ %1089, %block_43f3f0 ]
  %1348 = phi i64 [ %.pre367, %block_.L_43f3f5 ], [ %1340, %block_43f3f0 ]
  %MEMORY.20 = phi %struct.Memory* [ %call2_43f418, %block_.L_43f3f5 ], [ %MEMORY.18, %block_43f3f0 ]
  store i64 0, i64* %RSI.i3811.pre-phi, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 400, i64* %RAX.i3798, align 8
  store i64 400, i64* %RDX.i4419, align 8
  %1349 = add i64 %1347, -1664
  store i64 %1349, i64* %RDI.i3802.pre-phi, align 8
  %1350 = add i64 %1348, -254893
  %1351 = add i64 %1348, 21
  %1352 = load i64, i64* %6, align 8
  %1353 = add i64 %1352, -8
  %1354 = inttoptr i64 %1353 to i64*
  store i64 %1351, i64* %1354, align 8
  store i64 %1353, i64* %6, align 8
  store i64 %1350, i64* %3, align 8
  %1355 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %MEMORY.20)
  %1356 = load i64, i64* %RBP.i, align 8
  %1357 = add i64 %1356, -88
  %1358 = load i64, i64* %3, align 8
  %1359 = add i64 %1358, 4
  store i64 %1359, i64* %3, align 8
  %1360 = inttoptr i64 %1357 to i32*
  %1361 = load i32, i32* %1360, align 4
  store i8 0, i8* %31, align 1
  %1362 = and i32 %1361, 255
  %1363 = tail call i32 @llvm.ctpop.i32(i32 %1362)
  %1364 = trunc i32 %1363 to i8
  %1365 = and i8 %1364, 1
  %1366 = xor i8 %1365, 1
  store i8 %1366, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %1367 = icmp eq i32 %1361, 0
  %1368 = zext i1 %1367 to i8
  store i8 %1368, i8* %47, align 1
  %1369 = lshr i32 %1361, 31
  %1370 = trunc i32 %1369 to i8
  store i8 %1370, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v492 = select i1 %1367, i64 5271, i64 10
  %1371 = add i64 %1358, %.v492
  store i64 %1371, i64* %3, align 8
  br i1 %1367, label %block_.L_4408c9, label %block_43f43c

block_43f43c:                                     ; preds = %block_.L_43f41d
  %1372 = add i64 %1356, -40
  %1373 = add i64 %1371, 4
  store i64 %1373, i64* %3, align 8
  %1374 = inttoptr i64 %1372 to i64*
  %1375 = load i64, i64* %1374, align 8
  store i64 %1375, i64* %RDI.i3802.pre-phi, align 8
  %1376 = add i64 %1371, 8932
  %1377 = add i64 %1371, 9
  %1378 = load i64, i64* %6, align 8
  %1379 = add i64 %1378, -8
  %1380 = inttoptr i64 %1379 to i64*
  store i64 %1377, i64* %1380, align 8
  store i64 %1379, i64* %6, align 8
  store i64 %1376, i64* %3, align 8
  %call2_43f440 = tail call %struct.Memory* @sub_441720.owl_find_lunches(%struct.State* nonnull %0, i64 %1376, %struct.Memory* %1355)
  %1381 = load i64, i64* %RBP.i, align 8
  %1382 = add i64 %1381, -48
  %1383 = load i64, i64* %3, align 8
  %1384 = add i64 %1383, 4
  store i64 %1384, i64* %3, align 8
  %1385 = inttoptr i64 %1382 to i64*
  %1386 = load i64, i64* %1385, align 8
  store i64 %1386, i64* %RDI.i3802.pre-phi, align 8
  %1387 = add i64 %1383, 8923
  %1388 = add i64 %1383, 9
  %1389 = load i64, i64* %6, align 8
  %1390 = add i64 %1389, -8
  %1391 = inttoptr i64 %1390 to i64*
  store i64 %1388, i64* %1391, align 8
  store i64 %1390, i64* %6, align 8
  store i64 %1387, i64* %3, align 8
  %call2_43f449 = tail call %struct.Memory* @sub_441720.owl_find_lunches(%struct.State* nonnull %0, i64 %1387, %struct.Memory* %call2_43f440)
  %1392 = load i64, i64* %RBP.i, align 8
  %1393 = add i64 %1392, -1668
  %1394 = load i64, i64* %3, align 8
  %1395 = add i64 %1394, 10
  store i64 %1395, i64* %3, align 8
  %1396 = inttoptr i64 %1393 to i32*
  store i32 0, i32* %1396, align 4
  %.pre369 = load i64, i64* %3, align 8
  br label %block_.L_43f458

block_.L_43f458:                                  ; preds = %block_.L_43f4b8, %block_43f43c
  %1397 = phi i64 [ %1524, %block_.L_43f4b8 ], [ %.pre369, %block_43f43c ]
  %1398 = load i64, i64* %RBP.i, align 8
  %1399 = add i64 %1398, -1668
  %1400 = add i64 %1397, 7
  store i64 %1400, i64* %3, align 8
  %1401 = inttoptr i64 %1399 to i32*
  %1402 = load i32, i32* %1401, align 4
  %1403 = add i32 %1402, -10
  %1404 = icmp ult i32 %1402, 10
  %1405 = zext i1 %1404 to i8
  store i8 %1405, i8* %31, align 1
  %1406 = and i32 %1403, 255
  %1407 = tail call i32 @llvm.ctpop.i32(i32 %1406)
  %1408 = trunc i32 %1407 to i8
  %1409 = and i8 %1408, 1
  %1410 = xor i8 %1409, 1
  store i8 %1410, i8* %38, align 1
  %1411 = xor i32 %1403, %1402
  %1412 = lshr i32 %1411, 4
  %1413 = trunc i32 %1412 to i8
  %1414 = and i8 %1413, 1
  store i8 %1414, i8* %44, align 1
  %1415 = icmp eq i32 %1403, 0
  %1416 = zext i1 %1415 to i8
  store i8 %1416, i8* %47, align 1
  %1417 = lshr i32 %1403, 31
  %1418 = trunc i32 %1417 to i8
  store i8 %1418, i8* %50, align 1
  %1419 = lshr i32 %1402, 31
  %1420 = xor i32 %1417, %1419
  %1421 = add nuw nsw i32 %1420, %1419
  %1422 = icmp eq i32 %1421, 2
  %1423 = zext i1 %1422 to i8
  store i8 %1423, i8* %56, align 1
  %1424 = icmp ne i8 %1418, 0
  %1425 = xor i1 %1424, %1422
  %.v493 = select i1 %1425, i64 13, i64 121
  %1426 = add i64 %1397, %.v493
  store i64 %1426, i64* %3, align 8
  br i1 %1425, label %block_43f465, label %block_.L_43f4d1

block_43f465:                                     ; preds = %block_.L_43f458
  %1427 = add i64 %1398, -40
  %1428 = add i64 %1426, 4
  store i64 %1428, i64* %3, align 8
  %1429 = inttoptr i64 %1427 to i64*
  %1430 = load i64, i64* %1429, align 8
  store i64 %1430, i64* %RAX.i3798, align 8
  %1431 = add i64 %1426, 11
  store i64 %1431, i64* %3, align 8
  %1432 = load i32, i32* %1401, align 4
  %1433 = sext i32 %1432 to i64
  store i64 %1433, i64* %RCX.i4416, align 8
  %1434 = shl nsw i64 %1433, 2
  %1435 = add i64 %1430, 34804
  %1436 = add i64 %1435, %1434
  %1437 = add i64 %1426, 19
  store i64 %1437, i64* %3, align 8
  %1438 = inttoptr i64 %1436 to i32*
  %1439 = load i32, i32* %1438, align 4
  store i8 0, i8* %31, align 1
  %1440 = and i32 %1439, 255
  %1441 = tail call i32 @llvm.ctpop.i32(i32 %1440)
  %1442 = trunc i32 %1441 to i8
  %1443 = and i8 %1442, 1
  %1444 = xor i8 %1443, 1
  store i8 %1444, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %1445 = icmp eq i32 %1439, 0
  %1446 = zext i1 %1445 to i8
  store i8 %1446, i8* %47, align 1
  %1447 = lshr i32 %1439, 31
  %1448 = trunc i32 %1447 to i8
  store i8 %1448, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v635 = select i1 %1445, i64 83, i64 25
  %1449 = add i64 %1426, %.v635
  store i64 %1449, i64* %3, align 8
  br i1 %1445, label %block_.L_43f4b8, label %block_43f47e

block_43f47e:                                     ; preds = %block_43f465
  %1450 = add i64 %1398, -48
  %1451 = add i64 %1449, 4
  store i64 %1451, i64* %3, align 8
  %1452 = inttoptr i64 %1450 to i64*
  %1453 = load i64, i64* %1452, align 8
  store i64 %1453, i64* %RAX.i3798, align 8
  %1454 = add i64 %1449, 8
  store i64 %1454, i64* %3, align 8
  %1455 = load i64, i64* %1429, align 8
  store i64 %1455, i64* %RCX.i4416, align 8
  %1456 = add i64 %1449, 15
  store i64 %1456, i64* %3, align 8
  %1457 = load i32, i32* %1401, align 4
  %1458 = sext i32 %1457 to i64
  store i64 %1458, i64* %RDX.i4419, align 8
  %1459 = shl nsw i64 %1458, 2
  %1460 = add i64 %1455, 34804
  %1461 = add i64 %1460, %1459
  %1462 = add i64 %1449, 23
  store i64 %1462, i64* %3, align 8
  %1463 = inttoptr i64 %1461 to i32*
  %1464 = load i32, i32* %1463, align 4
  %1465 = sext i32 %1464 to i64
  store i64 %1465, i64* %RCX.i4416, align 8
  %1466 = add i64 %1453, %1465
  %1467 = add i64 %1449, 27
  store i64 %1467, i64* %3, align 8
  %1468 = inttoptr i64 %1466 to i8*
  %1469 = load i8, i8* %1468, align 1
  %1470 = sext i8 %1469 to i64
  %1471 = and i64 %1470, 4294967295
  store i64 %1471, i64* %RSI.i3811.pre-phi, align 8
  %1472 = sext i8 %1469 to i32
  store i8 0, i8* %31, align 1
  %1473 = and i32 %1472, 255
  %1474 = tail call i32 @llvm.ctpop.i32(i32 %1473)
  %1475 = trunc i32 %1474 to i8
  %1476 = and i8 %1475, 1
  %1477 = xor i8 %1476, 1
  store i8 %1477, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %1478 = icmp eq i8 %1469, 0
  %1479 = zext i1 %1478 to i8
  store i8 %1479, i8* %47, align 1
  %1480 = lshr i32 %1472, 31
  %1481 = trunc i32 %1480 to i8
  store i8 %1481, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v636 = select i1 %1478, i64 58, i64 36
  %1482 = add i64 %1449, %.v636
  store i64 %1482, i64* %3, align 8
  br i1 %1478, label %block_.L_43f4b8, label %block_43f4a2

block_43f4a2:                                     ; preds = %block_43f47e
  %1483 = add i64 %1482, 4
  store i64 %1483, i64* %3, align 8
  %1484 = load i64, i64* %1429, align 8
  store i64 %1484, i64* %RAX.i3798, align 8
  %1485 = add i64 %1482, 11
  store i64 %1485, i64* %3, align 8
  %1486 = load i32, i32* %1401, align 4
  %1487 = sext i32 %1486 to i64
  store i64 %1487, i64* %RCX.i4416, align 8
  %1488 = shl nsw i64 %1487, 2
  %1489 = add i64 %1484, 34804
  %1490 = add i64 %1489, %1488
  %1491 = add i64 %1482, 22
  store i64 %1491, i64* %3, align 8
  %1492 = inttoptr i64 %1490 to i32*
  store i32 0, i32* %1492, align 4
  %.pre422 = load i64, i64* %3, align 8
  %.pre423 = load i64, i64* %RBP.i, align 8
  br label %block_.L_43f4b8

block_.L_43f4b8:                                  ; preds = %block_43f4a2, %block_43f47e, %block_43f465
  %1493 = phi i64 [ %.pre423, %block_43f4a2 ], [ %1398, %block_43f47e ], [ %1398, %block_43f465 ]
  %1494 = phi i64 [ %.pre422, %block_43f4a2 ], [ %1482, %block_43f47e ], [ %1449, %block_43f465 ]
  %1495 = add i64 %1493, -1668
  %1496 = add i64 %1494, 11
  store i64 %1496, i64* %3, align 8
  %1497 = inttoptr i64 %1495 to i32*
  %1498 = load i32, i32* %1497, align 4
  %1499 = add i32 %1498, 1
  %1500 = zext i32 %1499 to i64
  store i64 %1500, i64* %RAX.i3798, align 8
  %1501 = icmp eq i32 %1498, -1
  %1502 = icmp eq i32 %1499, 0
  %1503 = or i1 %1501, %1502
  %1504 = zext i1 %1503 to i8
  store i8 %1504, i8* %31, align 1
  %1505 = and i32 %1499, 255
  %1506 = tail call i32 @llvm.ctpop.i32(i32 %1505)
  %1507 = trunc i32 %1506 to i8
  %1508 = and i8 %1507, 1
  %1509 = xor i8 %1508, 1
  store i8 %1509, i8* %38, align 1
  %1510 = xor i32 %1499, %1498
  %1511 = lshr i32 %1510, 4
  %1512 = trunc i32 %1511 to i8
  %1513 = and i8 %1512, 1
  store i8 %1513, i8* %44, align 1
  %1514 = zext i1 %1502 to i8
  store i8 %1514, i8* %47, align 1
  %1515 = lshr i32 %1499, 31
  %1516 = trunc i32 %1515 to i8
  store i8 %1516, i8* %50, align 1
  %1517 = lshr i32 %1498, 31
  %1518 = xor i32 %1515, %1517
  %1519 = add nuw nsw i32 %1518, %1515
  %1520 = icmp eq i32 %1519, 2
  %1521 = zext i1 %1520 to i8
  store i8 %1521, i8* %56, align 1
  %1522 = add i64 %1494, 20
  store i64 %1522, i64* %3, align 8
  store i32 %1499, i32* %1497, align 4
  %1523 = load i64, i64* %3, align 8
  %1524 = add i64 %1523, -116
  store i64 %1524, i64* %3, align 8
  br label %block_.L_43f458

block_.L_43f4d1:                                  ; preds = %block_.L_43f458
  store i64 1, i64* %RCX.i4416, align 8
  %1525 = add i64 %1398, -1760
  store i64 %1525, i64* %R9.i4411, align 8
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 0, i64* %RDX.i4419, align 8
  %R8.i3721 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  %1526 = add i64 %1398, -192
  store i64 %1526, i64* %R8.i3721, align 8
  %1527 = add i64 %1398, -40
  %1528 = add i64 %1426, 27
  store i64 %1528, i64* %3, align 8
  %1529 = inttoptr i64 %1527 to i64*
  %1530 = load i64, i64* %1529, align 8
  store i64 %1530, i64* %RDI.i3802.pre-phi, align 8
  %1531 = add i64 %1398, -48
  %1532 = add i64 %1426, 31
  store i64 %1532, i64* %3, align 8
  %1533 = inttoptr i64 %1531 to i64*
  %1534 = load i64, i64* %1533, align 8
  store i64 %1534, i64* %RSI.i3811.pre-phi, align 8
  %1535 = add i64 %1398, -52
  %1536 = add i64 %1426, 34
  store i64 %1536, i64* %3, align 8
  %1537 = inttoptr i64 %1535 to i32*
  %1538 = load i32, i32* %1537, align 4
  %1539 = zext i32 %1538 to i64
  store i64 %1539, i64* %RAX.i3798, align 8
  %1540 = add i64 %1398, -3424
  %1541 = add i64 %1426, 41
  store i64 %1541, i64* %3, align 8
  %1542 = inttoptr i64 %1540 to i64*
  store i64 0, i64* %1542, align 8
  %1543 = load i32, i32* %EAX.i4398, align 4
  %1544 = zext i32 %1543 to i64
  %1545 = load i64, i64* %3, align 8
  store i64 %1544, i64* %RDX.i4419, align 8
  %1546 = bitcast i64* %6 to i64**
  %1547 = load i64*, i64** %1546, align 8
  %1548 = add i64 %1545, 10
  store i64 %1548, i64* %3, align 8
  store i64 0, i64* %1547, align 8
  %1549 = load i64, i64* %6, align 8
  %1550 = add i64 %1549, 8
  %1551 = load i64, i64* %3, align 8
  %1552 = add i64 %1551, 9
  store i64 %1552, i64* %3, align 8
  %1553 = inttoptr i64 %1550 to i64*
  store i64 0, i64* %1553, align 8
  %1554 = load i64, i64* %3, align 8
  %1555 = add i64 %1554, 10723
  %1556 = add i64 %1554, 5
  %1557 = load i64, i64* %6, align 8
  %1558 = add i64 %1557, -8
  %1559 = inttoptr i64 %1558 to i64*
  store i64 %1556, i64* %1559, align 8
  store i64 %1558, i64* %6, align 8
  store i64 %1555, i64* %3, align 8
  %call2_43f50d = tail call %struct.Memory* @sub_441ef0.owl_determine_life(%struct.State* nonnull %0, i64 %1555, %struct.Memory* %call2_43f449)
  %1560 = load i64, i64* %3, align 8
  %1561 = load i32, i32* bitcast (%G_0x7ae448_type* @G_0x7ae448 to i32*), align 8
  %1562 = add i32 %1561, -9
  %1563 = icmp ult i32 %1561, 9
  %1564 = zext i1 %1563 to i8
  store i8 %1564, i8* %31, align 1
  %1565 = and i32 %1562, 255
  %1566 = tail call i32 @llvm.ctpop.i32(i32 %1565)
  %1567 = trunc i32 %1566 to i8
  %1568 = and i8 %1567, 1
  %1569 = xor i8 %1568, 1
  store i8 %1569, i8* %38, align 1
  %1570 = xor i32 %1562, %1561
  %1571 = lshr i32 %1570, 4
  %1572 = trunc i32 %1571 to i8
  %1573 = and i8 %1572, 1
  store i8 %1573, i8* %44, align 1
  %1574 = icmp eq i32 %1562, 0
  %1575 = zext i1 %1574 to i8
  store i8 %1575, i8* %47, align 1
  %1576 = lshr i32 %1562, 31
  %1577 = trunc i32 %1576 to i8
  store i8 %1577, i8* %50, align 1
  %1578 = lshr i32 %1561, 31
  %1579 = xor i32 %1576, %1578
  %1580 = add nuw nsw i32 %1579, %1578
  %1581 = icmp eq i32 %1580, 2
  %1582 = zext i1 %1581 to i8
  store i8 %1582, i8* %56, align 1
  %1583 = icmp ne i8 %1577, 0
  %1584 = xor i1 %1583, %1581
  %.v494 = select i1 %1584, i64 225, i64 14
  %1585 = add i64 %1560, %.v494
  store i64 %1585, i64* %3, align 8
  br i1 %1584, label %block_.L_43f5f3, label %block_43f520

block_43f520:                                     ; preds = %block_.L_43f4d1
  store i64 ptrtoint (%G__0x443270_type* @G__0x443270 to i64), i64* %RDI.i3802.pre-phi, align 8
  store i64 ptrtoint (%G__0x941118_type* @G__0x941118 to i64), i64* %RDX.i4419, align 8
  %1586 = load i64, i64* %RBP.i, align 8
  %1587 = add i64 %1586, -192
  store i64 %1587, i64* %RAX.i3798, align 8
  store i64 ptrtoint (%G__0xac22f0_type* @G__0xac22f0 to i64), i64* %RCX.i4416, align 8
  store i64 0, i64* %RSI.i3811.pre-phi, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 400, i64* %R8.i3721, align 8
  store i64 400, i64* %R9.i4411, align 8
  %1588 = add i64 %1586, -40
  %1589 = add i64 %1585, 52
  store i64 %1589, i64* %3, align 8
  %1590 = inttoptr i64 %1588 to i64*
  %1591 = load i64, i64* %1590, align 8
  store i64 %1591, i64* %65, align 8
  store i64 %1591, i64* bitcast (%G_0xac22d8_type* @G_0xac22d8 to i64*), align 8
  store i32 0, i32* bitcast (%G_0xac22e0_type* @G_0xac22e0 to i32*), align 8
  %1592 = add i64 %1586, -3432
  %1593 = add i64 %1585, 78
  store i64 %1593, i64* %3, align 8
  %1594 = inttoptr i64 %1592 to i64*
  store i64 ptrtoint (%G__0x443270_type* @G__0x443270 to i64), i64* %1594, align 8
  %1595 = load i64, i64* %RCX.i4416, align 8
  %1596 = load i64, i64* %3, align 8
  store i64 %1595, i64* %RDI.i3802.pre-phi, align 8
  %1597 = load i64, i64* %RBP.i, align 8
  %1598 = add i64 %1597, -3440
  %1599 = load i64, i64* %RDX.i4419, align 8
  %1600 = add i64 %1596, 10
  store i64 %1600, i64* %3, align 8
  %1601 = inttoptr i64 %1598 to i64*
  store i64 %1599, i64* %1601, align 8
  %1602 = load i64, i64* %R9.i4411, align 8
  %1603 = load i64, i64* %3, align 8
  store i64 %1602, i64* %RDX.i4419, align 8
  %1604 = load i64, i64* %RBP.i, align 8
  %1605 = add i64 %1604, -3448
  %1606 = load i64, i64* %RAX.i3798, align 8
  %1607 = add i64 %1603, 10
  store i64 %1607, i64* %3, align 8
  %1608 = inttoptr i64 %1605 to i64*
  store i64 %1606, i64* %1608, align 8
  %1609 = load i64, i64* %3, align 8
  %1610 = add i64 %1609, -255250
  %1611 = add i64 %1609, 5
  %1612 = load i64, i64* %6, align 8
  %1613 = add i64 %1612, -8
  %1614 = inttoptr i64 %1613 to i64*
  store i64 %1611, i64* %1614, align 8
  store i64 %1613, i64* %6, align 8
  store i64 %1610, i64* %3, align 8
  %1615 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %call2_43f50d)
  %1616 = load i64, i64* %RBP.i, align 8
  %1617 = add i64 %1616, -96
  %1618 = load i64, i64* %3, align 8
  %1619 = add i64 %1618, 3
  store i64 %1619, i64* %3, align 8
  %1620 = inttoptr i64 %1617 to i32*
  %1621 = load i32, i32* %1620, align 4
  %1622 = zext i32 %1621 to i64
  store i64 %1622, i64* %RSI.i3811.pre-phi, align 8
  %1623 = add i64 %1616, -3448
  %1624 = add i64 %1618, 10
  store i64 %1624, i64* %3, align 8
  %1625 = inttoptr i64 %1623 to i64*
  %1626 = load i64, i64* %1625, align 8
  store i64 %1626, i64* %RAX.i3798, align 8
  %1627 = add i64 %1616, -40
  %1628 = add i64 %1618, 14
  store i64 %1628, i64* %3, align 8
  %1629 = inttoptr i64 %1627 to i64*
  %1630 = load i64, i64* %1629, align 8
  store i64 %1630, i64* %R8.i3721, align 8
  %1631 = add i64 %1616, -3432
  %1632 = add i64 %1618, 21
  store i64 %1632, i64* %3, align 8
  %1633 = inttoptr i64 %1631 to i64*
  %1634 = load i64, i64* %1633, align 8
  store i64 %1634, i64* %RDI.i3802.pre-phi, align 8
  %1635 = add i64 %1616, -3440
  %1636 = add i64 %1618, 28
  store i64 %1636, i64* %3, align 8
  %1637 = inttoptr i64 %1635 to i64*
  %1638 = load i64, i64* %1637, align 8
  store i64 %1638, i64* %RDX.i4419, align 8
  store i64 %1626, i64* %RCX.i4416, align 8
  %1639 = add i64 %1618, -64055
  %1640 = add i64 %1618, 36
  %1641 = load i64, i64* %6, align 8
  %1642 = add i64 %1641, -8
  %1643 = inttoptr i64 %1642 to i64*
  store i64 %1640, i64* %1643, align 8
  store i64 %1642, i64* %6, align 8
  store i64 %1639, i64* %3, align 8
  %call2_43f5a6 = tail call %struct.Memory* @sub_42fb50.matchpat(%struct.State* nonnull %0, i64 %1639, %struct.Memory* %1615)
  %1644 = load i64, i64* %RBP.i, align 8
  %1645 = add i64 %1644, -1759
  %1646 = load i64, i64* %3, align 8
  %1647 = add i64 %1646, 7
  store i64 %1647, i64* %3, align 8
  %1648 = inttoptr i64 %1645 to i8*
  %1649 = load i8, i8* %1648, align 1
  %1650 = zext i8 %1649 to i64
  store i64 %1650, i64* %RSI.i3811.pre-phi, align 8
  %1651 = zext i8 %1649 to i32
  %1652 = load i32, i32* bitcast (%G_0xac22e0_type* @G_0xac22e0 to i32*), align 8
  %1653 = sub i32 %1651, %1652
  %1654 = icmp ult i32 %1651, %1652
  %1655 = zext i1 %1654 to i8
  store i8 %1655, i8* %31, align 1
  %1656 = and i32 %1653, 255
  %1657 = tail call i32 @llvm.ctpop.i32(i32 %1656)
  %1658 = trunc i32 %1657 to i8
  %1659 = and i8 %1658, 1
  %1660 = xor i8 %1659, 1
  store i8 %1660, i8* %38, align 1
  %1661 = xor i32 %1652, %1651
  %1662 = xor i32 %1661, %1653
  %1663 = lshr i32 %1662, 4
  %1664 = trunc i32 %1663 to i8
  %1665 = and i8 %1664, 1
  store i8 %1665, i8* %44, align 1
  %1666 = icmp eq i32 %1653, 0
  %1667 = zext i1 %1666 to i8
  store i8 %1667, i8* %47, align 1
  %1668 = lshr i32 %1653, 31
  %1669 = trunc i32 %1668 to i8
  store i8 %1669, i8* %50, align 1
  %1670 = lshr i32 %1652, 31
  %1671 = add nuw nsw i32 %1668, %1670
  %1672 = icmp eq i32 %1671, 2
  %1673 = zext i1 %1672 to i8
  store i8 %1673, i8* %56, align 1
  %1674 = icmp ne i8 %1669, 0
  %1675 = xor i1 %1674, %1672
  %1676 = or i1 %1666, %1675
  %.v495 = select i1 %1676, i64 49, i64 20
  %1677 = add i64 %1646, %.v495
  store i64 %1677, i64* %3, align 8
  br i1 %1676, label %block_.L_43f5dc, label %block_43f5bf

block_43f5bf:                                     ; preds = %block_43f520
  %1678 = zext i32 %1652 to i64
  store i64 %1678, i64* %RAX.i3798, align 8
  %1679 = add i64 %1677, 14
  store i64 %1679, i64* %3, align 8
  %1680 = load i8, i8* %1648, align 1
  %1681 = zext i8 %1680 to i32
  %1682 = zext i8 %1680 to i32
  %1683 = sub i32 %1682, %1652
  %1684 = zext i32 %1683 to i64
  store i64 %1684, i64* %RCX.i4416, align 8
  %1685 = icmp ult i32 %1682, %1652
  %1686 = zext i1 %1685 to i8
  store i8 %1686, i8* %31, align 1
  %1687 = and i32 %1683, 255
  %1688 = tail call i32 @llvm.ctpop.i32(i32 %1687)
  %1689 = trunc i32 %1688 to i8
  %1690 = and i8 %1689, 1
  %1691 = xor i8 %1690, 1
  store i8 %1691, i8* %38, align 1
  %1692 = xor i32 %1652, %1681
  %1693 = xor i32 %1692, %1683
  %1694 = lshr i32 %1693, 4
  %1695 = trunc i32 %1694 to i8
  %1696 = and i8 %1695, 1
  store i8 %1696, i8* %44, align 1
  %1697 = icmp eq i32 %1683, 0
  %1698 = zext i1 %1697 to i8
  store i8 %1698, i8* %47, align 1
  %1699 = lshr i32 %1683, 31
  %1700 = trunc i32 %1699 to i8
  store i8 %1700, i8* %50, align 1
  %1701 = add nuw nsw i32 %1699, %1670
  %1702 = icmp eq i32 %1701, 2
  %1703 = zext i1 %1702 to i8
  store i8 %1703, i8* %56, align 1
  %DL.i3622 = bitcast %union.anon* %92 to i8*
  %1704 = trunc i32 %1683 to i8
  store i8 %1704, i8* %DL.i3622, align 1
  %1705 = add i64 %1677, 24
  store i64 %1705, i64* %3, align 8
  store i8 %1704, i8* %1648, align 1
  %1706 = load i64, i64* %3, align 8
  %1707 = add i64 %1706, 23
  store i64 %1707, i64* %3, align 8
  br label %block_.L_43f5ee

block_.L_43f5dc:                                  ; preds = %block_43f520
  %1708 = add i64 %1677, 7
  store i64 %1708, i64* %3, align 8
  %1709 = load i8, i8* %1648, align 1
  %1710 = zext i8 %1709 to i64
  %1711 = zext i8 %1709 to i32
  store i64 %1710, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  %1712 = tail call i32 @llvm.ctpop.i32(i32 %1711)
  %1713 = trunc i32 %1712 to i8
  %1714 = and i8 %1713, 1
  %1715 = xor i8 %1714, 1
  store i8 %1715, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %1716 = icmp eq i8 %1709, 0
  %1717 = zext i1 %1716 to i8
  store i8 %1717, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %CL.i3610 = bitcast %union.anon* %99 to i8*
  store i8 %1709, i8* %CL.i3610, align 1
  %1718 = add i64 %1677, 18
  store i64 %1718, i64* %3, align 8
  store i8 %1709, i8* %1648, align 1
  %.pre370 = load i64, i64* %3, align 8
  br label %block_.L_43f5ee

block_.L_43f5ee:                                  ; preds = %block_.L_43f5dc, %block_43f5bf
  %1719 = phi i64 [ %.pre370, %block_.L_43f5dc ], [ %1707, %block_43f5bf ]
  %1720 = add i64 %1719, 5
  store i64 %1720, i64* %3, align 8
  br label %block_.L_43f5f3

block_.L_43f5f3:                                  ; preds = %block_.L_43f5ee, %block_.L_43f4d1
  %1721 = phi i64 [ %1585, %block_.L_43f4d1 ], [ %1720, %block_.L_43f5ee ]
  %MEMORY.24 = phi %struct.Memory* [ %call2_43f50d, %block_.L_43f4d1 ], [ %call2_43f5a6, %block_.L_43f5ee ]
  store i64 1, i64* %RCX.i4416, align 8
  %1722 = load i64, i64* %RBP.i, align 8
  %1723 = add i64 %1722, -1768
  store i64 %1723, i64* %R9.i4411, align 8
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 0, i64* %RDX.i4419, align 8
  %1724 = add i64 %1722, -288
  store i64 %1724, i64* %R8.i3721, align 8
  %1725 = add i64 %1722, -48
  %1726 = add i64 %1721, 27
  store i64 %1726, i64* %3, align 8
  %1727 = inttoptr i64 %1725 to i64*
  %1728 = load i64, i64* %1727, align 8
  store i64 %1728, i64* %RDI.i3802.pre-phi, align 8
  %1729 = add i64 %1722, -40
  %1730 = add i64 %1721, 31
  store i64 %1730, i64* %3, align 8
  %1731 = inttoptr i64 %1729 to i64*
  %1732 = load i64, i64* %1731, align 8
  store i64 %1732, i64* %RSI.i3811.pre-phi, align 8
  %1733 = add i64 %1722, -52
  %1734 = add i64 %1721, 34
  store i64 %1734, i64* %3, align 8
  %1735 = inttoptr i64 %1733 to i32*
  %1736 = load i32, i32* %1735, align 4
  %1737 = zext i32 %1736 to i64
  store i64 %1737, i64* %RAX.i3798, align 8
  %1738 = add i64 %1722, -3456
  %1739 = add i64 %1721, 41
  store i64 %1739, i64* %3, align 8
  %1740 = inttoptr i64 %1738 to i64*
  store i64 0, i64* %1740, align 8
  %1741 = load i32, i32* %EAX.i4398, align 4
  %1742 = zext i32 %1741 to i64
  %1743 = load i64, i64* %3, align 8
  store i64 %1742, i64* %RDX.i4419, align 8
  %1744 = load i64*, i64** %1546, align 8
  %1745 = add i64 %1743, 10
  store i64 %1745, i64* %3, align 8
  store i64 0, i64* %1744, align 8
  %1746 = load i64, i64* %6, align 8
  %1747 = add i64 %1746, 8
  %1748 = load i64, i64* %3, align 8
  %1749 = add i64 %1748, 9
  store i64 %1749, i64* %3, align 8
  %1750 = inttoptr i64 %1747 to i64*
  store i64 0, i64* %1750, align 8
  %1751 = load i64, i64* %3, align 8
  %1752 = add i64 %1751, 10433
  %1753 = add i64 %1751, 5
  %1754 = load i64, i64* %6, align 8
  %1755 = add i64 %1754, -8
  %1756 = inttoptr i64 %1755 to i64*
  store i64 %1753, i64* %1756, align 8
  store i64 %1755, i64* %6, align 8
  store i64 %1752, i64* %3, align 8
  %call2_43f62f = tail call %struct.Memory* @sub_441ef0.owl_determine_life(%struct.State* nonnull %0, i64 %1752, %struct.Memory* %MEMORY.24)
  %1757 = load i64, i64* %3, align 8
  %1758 = load i32, i32* bitcast (%G_0x7ae448_type* @G_0x7ae448 to i32*), align 8
  %1759 = add i32 %1758, -9
  %1760 = icmp ult i32 %1758, 9
  %1761 = zext i1 %1760 to i8
  store i8 %1761, i8* %31, align 1
  %1762 = and i32 %1759, 255
  %1763 = tail call i32 @llvm.ctpop.i32(i32 %1762)
  %1764 = trunc i32 %1763 to i8
  %1765 = and i8 %1764, 1
  %1766 = xor i8 %1765, 1
  store i8 %1766, i8* %38, align 1
  %1767 = xor i32 %1759, %1758
  %1768 = lshr i32 %1767, 4
  %1769 = trunc i32 %1768 to i8
  %1770 = and i8 %1769, 1
  store i8 %1770, i8* %44, align 1
  %1771 = icmp eq i32 %1759, 0
  %1772 = zext i1 %1771 to i8
  store i8 %1772, i8* %47, align 1
  %1773 = lshr i32 %1759, 31
  %1774 = trunc i32 %1773 to i8
  store i8 %1774, i8* %50, align 1
  %1775 = lshr i32 %1758, 31
  %1776 = xor i32 %1773, %1775
  %1777 = add nuw nsw i32 %1776, %1775
  %1778 = icmp eq i32 %1777, 2
  %1779 = zext i1 %1778 to i8
  store i8 %1779, i8* %56, align 1
  %1780 = icmp ne i8 %1774, 0
  %1781 = xor i1 %1780, %1778
  %.v496 = select i1 %1781, i64 214, i64 14
  %1782 = add i64 %1757, %.v496
  store i64 %1782, i64* %3, align 8
  br i1 %1781, label %block_.L_43f70a, label %block_43f642

block_43f642:                                     ; preds = %block_.L_43f5f3
  store i64 ptrtoint (%G__0x443270_type* @G__0x443270 to i64), i64* %RDI.i3802.pre-phi, align 8
  store i64 ptrtoint (%G__0x941118_type* @G__0x941118 to i64), i64* %RDX.i4419, align 8
  %1783 = load i64, i64* %RBP.i, align 8
  %1784 = add i64 %1783, -288
  store i64 %1784, i64* %RAX.i3798, align 8
  store i64 ptrtoint (%G__0xac22f0_type* @G__0xac22f0 to i64), i64* %RCX.i4416, align 8
  store i64 0, i64* %RSI.i3811.pre-phi, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 400, i64* %R8.i3721, align 8
  store i64 400, i64* %R9.i4411, align 8
  %1785 = add i64 %1783, -48
  %1786 = add i64 %1782, 52
  store i64 %1786, i64* %3, align 8
  %1787 = inttoptr i64 %1785 to i64*
  %1788 = load i64, i64* %1787, align 8
  store i64 %1788, i64* %65, align 8
  store i64 %1788, i64* bitcast (%G_0xac22d8_type* @G_0xac22d8 to i64*), align 8
  store i32 0, i32* bitcast (%G_0xac22e0_type* @G_0xac22e0 to i32*), align 8
  %1789 = add i64 %1783, -3464
  %1790 = add i64 %1782, 78
  store i64 %1790, i64* %3, align 8
  %1791 = inttoptr i64 %1789 to i64*
  store i64 ptrtoint (%G__0x443270_type* @G__0x443270 to i64), i64* %1791, align 8
  %1792 = load i64, i64* %RCX.i4416, align 8
  %1793 = load i64, i64* %3, align 8
  store i64 %1792, i64* %RDI.i3802.pre-phi, align 8
  %1794 = load i64, i64* %RBP.i, align 8
  %1795 = add i64 %1794, -3472
  %1796 = load i64, i64* %RDX.i4419, align 8
  %1797 = add i64 %1793, 10
  store i64 %1797, i64* %3, align 8
  %1798 = inttoptr i64 %1795 to i64*
  store i64 %1796, i64* %1798, align 8
  %1799 = load i64, i64* %R9.i4411, align 8
  %1800 = load i64, i64* %3, align 8
  store i64 %1799, i64* %RDX.i4419, align 8
  %1801 = load i64, i64* %RBP.i, align 8
  %1802 = add i64 %1801, -3480
  %1803 = load i64, i64* %RAX.i3798, align 8
  %1804 = add i64 %1800, 10
  store i64 %1804, i64* %3, align 8
  %1805 = inttoptr i64 %1802 to i64*
  store i64 %1803, i64* %1805, align 8
  %1806 = load i64, i64* %3, align 8
  %1807 = add i64 %1806, -255540
  %1808 = add i64 %1806, 5
  %1809 = load i64, i64* %6, align 8
  %1810 = add i64 %1809, -8
  %1811 = inttoptr i64 %1810 to i64*
  store i64 %1808, i64* %1811, align 8
  store i64 %1810, i64* %6, align 8
  store i64 %1807, i64* %3, align 8
  %1812 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %call2_43f62f)
  %1813 = load i64, i64* %RBP.i, align 8
  %1814 = add i64 %1813, -96
  %1815 = load i64, i64* %3, align 8
  %1816 = add i64 %1815, 3
  store i64 %1816, i64* %3, align 8
  %1817 = inttoptr i64 %1814 to i32*
  %1818 = load i32, i32* %1817, align 4
  %1819 = zext i32 %1818 to i64
  store i64 %1819, i64* %RSI.i3811.pre-phi, align 8
  %1820 = add i64 %1813, -3480
  %1821 = add i64 %1815, 10
  store i64 %1821, i64* %3, align 8
  %1822 = inttoptr i64 %1820 to i64*
  %1823 = load i64, i64* %1822, align 8
  store i64 %1823, i64* %RAX.i3798, align 8
  %1824 = add i64 %1813, -40
  %1825 = add i64 %1815, 14
  store i64 %1825, i64* %3, align 8
  %1826 = inttoptr i64 %1824 to i64*
  %1827 = load i64, i64* %1826, align 8
  store i64 %1827, i64* %R8.i3721, align 8
  %1828 = add i64 %1813, -3464
  %1829 = add i64 %1815, 21
  store i64 %1829, i64* %3, align 8
  %1830 = inttoptr i64 %1828 to i64*
  %1831 = load i64, i64* %1830, align 8
  store i64 %1831, i64* %RDI.i3802.pre-phi, align 8
  %1832 = add i64 %1813, -3472
  %1833 = add i64 %1815, 28
  store i64 %1833, i64* %3, align 8
  %1834 = inttoptr i64 %1832 to i64*
  %1835 = load i64, i64* %1834, align 8
  store i64 %1835, i64* %RDX.i4419, align 8
  store i64 %1823, i64* %RCX.i4416, align 8
  %1836 = add i64 %1815, -64345
  %1837 = add i64 %1815, 36
  %1838 = load i64, i64* %6, align 8
  %1839 = add i64 %1838, -8
  %1840 = inttoptr i64 %1839 to i64*
  store i64 %1837, i64* %1840, align 8
  store i64 %1839, i64* %6, align 8
  store i64 %1836, i64* %3, align 8
  %call2_43f6c8 = tail call %struct.Memory* @sub_42fb50.matchpat(%struct.State* nonnull %0, i64 %1836, %struct.Memory* %1812)
  %1841 = load i64, i64* %RBP.i, align 8
  %1842 = add i64 %1841, -1767
  %1843 = load i64, i64* %3, align 8
  %1844 = add i64 %1843, 7
  store i64 %1844, i64* %3, align 8
  %1845 = inttoptr i64 %1842 to i8*
  %1846 = load i8, i8* %1845, align 1
  %1847 = zext i8 %1846 to i64
  store i64 %1847, i64* %RSI.i3811.pre-phi, align 8
  %1848 = zext i8 %1846 to i32
  %1849 = load i32, i32* bitcast (%G_0xac22e0_type* @G_0xac22e0 to i32*), align 8
  %1850 = sub i32 %1848, %1849
  %1851 = icmp ult i32 %1848, %1849
  %1852 = zext i1 %1851 to i8
  store i8 %1852, i8* %31, align 1
  %1853 = and i32 %1850, 255
  %1854 = tail call i32 @llvm.ctpop.i32(i32 %1853)
  %1855 = trunc i32 %1854 to i8
  %1856 = and i8 %1855, 1
  %1857 = xor i8 %1856, 1
  store i8 %1857, i8* %38, align 1
  %1858 = xor i32 %1849, %1848
  %1859 = xor i32 %1858, %1850
  %1860 = lshr i32 %1859, 4
  %1861 = trunc i32 %1860 to i8
  %1862 = and i8 %1861, 1
  store i8 %1862, i8* %44, align 1
  %1863 = icmp eq i32 %1850, 0
  %1864 = zext i1 %1863 to i8
  store i8 %1864, i8* %47, align 1
  %1865 = lshr i32 %1850, 31
  %1866 = trunc i32 %1865 to i8
  store i8 %1866, i8* %50, align 1
  %1867 = lshr i32 %1849, 31
  %1868 = add nuw nsw i32 %1865, %1867
  %1869 = icmp eq i32 %1868, 2
  %1870 = zext i1 %1869 to i8
  store i8 %1870, i8* %56, align 1
  %1871 = icmp ne i8 %1866, 0
  %1872 = xor i1 %1871, %1869
  %1873 = or i1 %1863, %1872
  %.v497 = select i1 %1873, i64 49, i64 20
  %1874 = add i64 %1843, %.v497
  store i64 %1874, i64* %3, align 8
  br i1 %1873, label %block_.L_43f6fe, label %block_43f6e1

block_43f6e1:                                     ; preds = %block_43f642
  %1875 = zext i32 %1849 to i64
  store i64 %1875, i64* %RAX.i3798, align 8
  %1876 = add i64 %1874, 14
  store i64 %1876, i64* %3, align 8
  %1877 = load i8, i8* %1845, align 1
  %1878 = zext i8 %1877 to i32
  %1879 = zext i8 %1877 to i32
  %1880 = sub i32 %1879, %1849
  %1881 = zext i32 %1880 to i64
  store i64 %1881, i64* %RCX.i4416, align 8
  %1882 = icmp ult i32 %1879, %1849
  %1883 = zext i1 %1882 to i8
  store i8 %1883, i8* %31, align 1
  %1884 = and i32 %1880, 255
  %1885 = tail call i32 @llvm.ctpop.i32(i32 %1884)
  %1886 = trunc i32 %1885 to i8
  %1887 = and i8 %1886, 1
  %1888 = xor i8 %1887, 1
  store i8 %1888, i8* %38, align 1
  %1889 = xor i32 %1849, %1878
  %1890 = xor i32 %1889, %1880
  %1891 = lshr i32 %1890, 4
  %1892 = trunc i32 %1891 to i8
  %1893 = and i8 %1892, 1
  store i8 %1893, i8* %44, align 1
  %1894 = icmp eq i32 %1880, 0
  %1895 = zext i1 %1894 to i8
  store i8 %1895, i8* %47, align 1
  %1896 = lshr i32 %1880, 31
  %1897 = trunc i32 %1896 to i8
  store i8 %1897, i8* %50, align 1
  %1898 = add nuw nsw i32 %1896, %1867
  %1899 = icmp eq i32 %1898, 2
  %1900 = zext i1 %1899 to i8
  store i8 %1900, i8* %56, align 1
  %DL.i3493 = bitcast %union.anon* %92 to i8*
  %1901 = trunc i32 %1880 to i8
  store i8 %1901, i8* %DL.i3493, align 1
  %1902 = add i64 %1874, 24
  store i64 %1902, i64* %3, align 8
  store i8 %1901, i8* %1845, align 1
  %1903 = load i64, i64* %3, align 8
  %1904 = add i64 %1903, 12
  store i64 %1904, i64* %3, align 8
  br label %block_.L_43f705

block_.L_43f6fe:                                  ; preds = %block_43f642
  %1905 = add i64 %1874, 7
  store i64 %1905, i64* %3, align 8
  store i8 0, i8* %1845, align 1
  %.pre371 = load i64, i64* %3, align 8
  br label %block_.L_43f705

block_.L_43f705:                                  ; preds = %block_.L_43f6fe, %block_43f6e1
  %1906 = phi i64 [ %.pre371, %block_.L_43f6fe ], [ %1904, %block_43f6e1 ]
  %1907 = add i64 %1906, 5
  store i64 %1907, i64* %3, align 8
  br label %block_.L_43f70a

block_.L_43f70a:                                  ; preds = %block_.L_43f705, %block_.L_43f5f3
  %1908 = phi i64 [ %1782, %block_.L_43f5f3 ], [ %1907, %block_.L_43f705 ]
  %MEMORY.26 = phi %struct.Memory* [ %call2_43f62f, %block_.L_43f5f3 ], [ %call2_43f6c8, %block_.L_43f705 ]
  %1909 = load i64, i64* %RBP.i, align 8
  %1910 = add i64 %1909, -1760
  store i64 %1910, i64* %RDI.i3802.pre-phi, align 8
  %1911 = add i64 %1908, -15386
  %1912 = add i64 %1908, 12
  %1913 = load i64, i64* %6, align 8
  %1914 = add i64 %1913, -8
  %1915 = inttoptr i64 %1914 to i64*
  store i64 %1912, i64* %1915, align 8
  store i64 %1914, i64* %6, align 8
  store i64 %1911, i64* %3, align 8
  %call2_43f711 = tail call %struct.Memory* @sub_43baf0.min_eyes(%struct.State* nonnull %0, i64 %1911, %struct.Memory* %MEMORY.26)
  %1916 = load i32, i32* %EAX.i4398, align 4
  %1917 = load i64, i64* %3, align 8
  %1918 = add i32 %1916, -2
  %1919 = icmp ult i32 %1916, 2
  %1920 = zext i1 %1919 to i8
  store i8 %1920, i8* %31, align 1
  %1921 = and i32 %1918, 255
  %1922 = tail call i32 @llvm.ctpop.i32(i32 %1921)
  %1923 = trunc i32 %1922 to i8
  %1924 = and i8 %1923, 1
  %1925 = xor i8 %1924, 1
  store i8 %1925, i8* %38, align 1
  %1926 = xor i32 %1918, %1916
  %1927 = lshr i32 %1926, 4
  %1928 = trunc i32 %1927 to i8
  %1929 = and i8 %1928, 1
  store i8 %1929, i8* %44, align 1
  %1930 = icmp eq i32 %1918, 0
  %1931 = zext i1 %1930 to i8
  store i8 %1931, i8* %47, align 1
  %1932 = lshr i32 %1918, 31
  %1933 = trunc i32 %1932 to i8
  store i8 %1933, i8* %50, align 1
  %1934 = lshr i32 %1916, 31
  %1935 = xor i32 %1932, %1934
  %1936 = add nuw nsw i32 %1935, %1934
  %1937 = icmp eq i32 %1936, 2
  %1938 = zext i1 %1937 to i8
  store i8 %1938, i8* %56, align 1
  %1939 = icmp ne i8 %1933, 0
  %1940 = xor i1 %1939, %1937
  %.v498 = select i1 %1940, i64 316, i64 9
  %1941 = add i64 %1917, %.v498
  store i64 %1941, i64* %3, align 8
  br i1 %1940, label %block_.L_43f852, label %block_43f71f

block_43f71f:                                     ; preds = %block_.L_43f70a
  %1942 = load i64, i64* %RBP.i, align 8
  %1943 = add i64 %1942, -1768
  store i64 %1943, i64* %RDI.i3802.pre-phi, align 8
  %1944 = add i64 %1941, -18191
  %1945 = add i64 %1941, 12
  %1946 = load i64, i64* %6, align 8
  %1947 = add i64 %1946, -8
  %1948 = inttoptr i64 %1947 to i64*
  store i64 %1945, i64* %1948, align 8
  store i64 %1947, i64* %6, align 8
  store i64 %1944, i64* %3, align 8
  %call2_43f726 = tail call %struct.Memory* @sub_43b010.max_eyes(%struct.State* nonnull %0, i64 %1944, %struct.Memory* %call2_43f711)
  %1949 = load i32, i32* %EAX.i4398, align 4
  %1950 = load i64, i64* %3, align 8
  %1951 = add i32 %1949, -2
  %1952 = icmp ult i32 %1949, 2
  %1953 = zext i1 %1952 to i8
  store i8 %1953, i8* %31, align 1
  %1954 = and i32 %1951, 255
  %1955 = tail call i32 @llvm.ctpop.i32(i32 %1954)
  %1956 = trunc i32 %1955 to i8
  %1957 = and i8 %1956, 1
  %1958 = xor i8 %1957, 1
  store i8 %1958, i8* %38, align 1
  %1959 = xor i32 %1951, %1949
  %1960 = lshr i32 %1959, 4
  %1961 = trunc i32 %1960 to i8
  %1962 = and i8 %1961, 1
  store i8 %1962, i8* %44, align 1
  %1963 = icmp eq i32 %1951, 0
  %1964 = zext i1 %1963 to i8
  store i8 %1964, i8* %47, align 1
  %1965 = lshr i32 %1951, 31
  %1966 = trunc i32 %1965 to i8
  store i8 %1966, i8* %50, align 1
  %1967 = lshr i32 %1949, 31
  %1968 = xor i32 %1965, %1967
  %1969 = add nuw nsw i32 %1968, %1967
  %1970 = icmp eq i32 %1969, 2
  %1971 = zext i1 %1970 to i8
  store i8 %1971, i8* %56, align 1
  %1972 = icmp ne i8 %1966, 0
  %1973 = xor i1 %1972, %1970
  %.v499 = select i1 %1973, i64 9, i64 295
  %1974 = add i64 %1950, %.v499
  store i64 %1974, i64* %3, align 8
  br i1 %1973, label %block_43f734, label %block_.L_43f852

block_43f734:                                     ; preds = %block_43f71f
  %1975 = load i64, i64* %RBP.i, align 8
  %1976 = add i64 %1975, -1768
  store i64 %1976, i64* %RDI.i3802.pre-phi, align 8
  %1977 = add i64 %1975, -64
  %1978 = add i64 %1974, 11
  store i64 %1978, i64* %3, align 8
  %1979 = inttoptr i64 %1977 to i64*
  %1980 = load i64, i64* %1979, align 8
  store i64 %1980, i64* %RAX.i3798, align 8
  %1981 = add i64 %1974, 17
  store i64 %1981, i64* %3, align 8
  %1982 = inttoptr i64 %1980 to i32*
  store i32 1, i32* %1982, align 4
  %1983 = load i64, i64* %RBP.i, align 8
  %1984 = add i64 %1983, -72
  %1985 = load i64, i64* %3, align 8
  %1986 = add i64 %1985, 4
  store i64 %1986, i64* %3, align 8
  %1987 = inttoptr i64 %1984 to i64*
  %1988 = load i64, i64* %1987, align 8
  store i64 %1988, i64* %RAX.i3798, align 8
  %1989 = add i64 %1985, 10
  store i64 %1989, i64* %3, align 8
  %1990 = inttoptr i64 %1988 to i32*
  store i32 0, i32* %1990, align 4
  %1991 = load i64, i64* %RBP.i, align 8
  %1992 = add i64 %1991, -80
  %1993 = load i64, i64* %3, align 8
  %1994 = add i64 %1993, 4
  store i64 %1994, i64* %3, align 8
  %1995 = inttoptr i64 %1992 to i64*
  %1996 = load i64, i64* %1995, align 8
  store i64 %1996, i64* %RAX.i3798, align 8
  %1997 = add i64 %1993, 10
  store i64 %1997, i64* %3, align 8
  %1998 = inttoptr i64 %1996 to i32*
  store i32 0, i32* %1998, align 4
  %1999 = load i64, i64* %RBP.i, align 8
  %2000 = add i64 %1999, -1688
  %2001 = load i64, i64* %3, align 8
  %2002 = add i64 %2001, 7
  store i64 %2002, i64* %3, align 8
  %2003 = inttoptr i64 %2000 to i64*
  %2004 = load i64, i64* %2003, align 8
  store i64 %2004, i64* %RAX.i3798, align 8
  store i64 %2004, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %2005 = add i64 %1999, -1692
  %2006 = add i64 %2001, 21
  store i64 %2006, i64* %3, align 8
  %2007 = inttoptr i64 %2005 to i32*
  %2008 = load i32, i32* %2007, align 4
  %2009 = zext i32 %2008 to i64
  store i64 %2009, i64* %RCX.i4416, align 8
  store i32 %2008, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  %2010 = add i64 %2001, -18249
  %2011 = add i64 %2001, 33
  %2012 = load i64, i64* %6, align 8
  %2013 = add i64 %2012, -8
  %2014 = inttoptr i64 %2013 to i64*
  store i64 %2011, i64* %2014, align 8
  store i64 %2013, i64* %6, align 8
  store i64 %2010, i64* %3, align 8
  %call2_43f775 = tail call %struct.Memory* @sub_43b010.max_eyes(%struct.State* nonnull %0, i64 %2010, %struct.Memory* %call2_43f726)
  %2015 = load i32, i32* %EAX.i4398, align 4
  %2016 = load i64, i64* %3, align 8
  %2017 = icmp eq i32 %2015, 0
  %.v631 = select i1 %2017, i64 9, i64 71
  %2018 = add i64 %2016, %.v631
  %2019 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i8 0, i8* %31, align 1
  %2020 = trunc i64 %2019 to i32
  %2021 = and i32 %2020, 255
  %2022 = tail call i32 @llvm.ctpop.i32(i32 %2021)
  %2023 = trunc i32 %2022 to i8
  %2024 = and i8 %2023, 1
  %2025 = xor i8 %2024, 1
  store i8 %2025, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2026 = icmp eq i64 %2019, 0
  %2027 = zext i1 %2026 to i8
  store i8 %2027, i8* %47, align 1
  %2028 = lshr i64 %2019, 63
  %2029 = trunc i64 %2028 to i8
  store i8 %2029, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v632 = select i1 %2026, i64 57, i64 15
  %2030 = add i64 %2018, %.v632
  store i64 %2030, i64* %3, align 8
  br i1 %2017, label %block_43f783, label %block_.L_43f7c1

block_43f783:                                     ; preds = %block_43f734
  br i1 %2026, label %block_.L_43f7bc, label %block_43f792

block_43f792:                                     ; preds = %block_43f783
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 1, i64* %R8.i3721, align 8
  store i64 ptrtoint (%G__0x57deff_type* @G__0x57deff to i64), i64* %R9.i4411, align 8
  %2031 = load i64, i64* %RBP.i, align 8
  %2032 = add i64 %2031, -1744
  %2033 = add i64 %2030, 25
  store i64 %2033, i64* %3, align 8
  %2034 = inttoptr i64 %2032 to i64*
  %2035 = load i64, i64* %2034, align 8
  store i64 %2035, i64* %RDI.i3802.pre-phi, align 8
  %2036 = add i64 %2031, -1748
  %2037 = add i64 %2030, 31
  store i64 %2037, i64* %3, align 8
  %2038 = inttoptr i64 %2036 to i32*
  %2039 = load i32, i32* %2038, align 4
  %2040 = zext i32 %2039 to i64
  store i64 %2040, i64* %RSI.i3811.pre-phi, align 8
  %2041 = add i64 %2031, -1752
  %2042 = add i64 %2030, 37
  store i64 %2042, i64* %3, align 8
  %2043 = inttoptr i64 %2041 to i32*
  %2044 = load i32, i32* %2043, align 4
  %2045 = zext i32 %2044 to i64
  store i64 %2045, i64* %RDX.i4419, align 8
  %2046 = add i64 %2030, -160882
  %2047 = add i64 %2030, 42
  %2048 = load i64, i64* %6, align 8
  %2049 = add i64 %2048, -8
  %2050 = inttoptr i64 %2049 to i64*
  store i64 %2047, i64* %2050, align 8
  store i64 %2049, i64* %6, align 8
  store i64 %2046, i64* %3, align 8
  %call2_43f7b7 = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %2046, %struct.Memory* %call2_43f775)
  %.pre372 = load i64, i64* %3, align 8
  br label %block_.L_43f7bc

block_.L_43f7bc:                                  ; preds = %block_43f792, %block_43f783
  %2051 = phi i64 [ %2030, %block_43f783 ], [ %.pre372, %block_43f792 ]
  %MEMORY.27 = phi %struct.Memory* [ %call2_43f775, %block_43f783 ], [ %call2_43f7b7, %block_43f792 ]
  %2052 = add i64 %2051, 67
  br label %block_.L_43f7ff

block_.L_43f7c1:                                  ; preds = %block_43f734
  br i1 %2026, label %block_.L_43f7fa, label %block_43f7d0

block_43f7d0:                                     ; preds = %block_.L_43f7c1
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 1, i64* %R8.i3721, align 8
  store i64 ptrtoint (%G__0x57df14_type* @G__0x57df14 to i64), i64* %R9.i4411, align 8
  %2053 = load i64, i64* %RBP.i, align 8
  %2054 = add i64 %2053, -1744
  %2055 = add i64 %2030, 25
  store i64 %2055, i64* %3, align 8
  %2056 = inttoptr i64 %2054 to i64*
  %2057 = load i64, i64* %2056, align 8
  store i64 %2057, i64* %RDI.i3802.pre-phi, align 8
  %2058 = add i64 %2053, -1748
  %2059 = add i64 %2030, 31
  store i64 %2059, i64* %3, align 8
  %2060 = inttoptr i64 %2058 to i32*
  %2061 = load i32, i32* %2060, align 4
  %2062 = zext i32 %2061 to i64
  store i64 %2062, i64* %RSI.i3811.pre-phi, align 8
  %2063 = add i64 %2053, -1752
  %2064 = add i64 %2030, 37
  store i64 %2064, i64* %3, align 8
  %2065 = inttoptr i64 %2063 to i32*
  %2066 = load i32, i32* %2065, align 4
  %2067 = zext i32 %2066 to i64
  store i64 %2067, i64* %RDX.i4419, align 8
  %2068 = add i64 %2030, -160944
  %2069 = add i64 %2030, 42
  %2070 = load i64, i64* %6, align 8
  %2071 = add i64 %2070, -8
  %2072 = inttoptr i64 %2071 to i64*
  store i64 %2069, i64* %2072, align 8
  store i64 %2071, i64* %6, align 8
  store i64 %2068, i64* %3, align 8
  %call2_43f7f5 = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %2068, %struct.Memory* %call2_43f775)
  %.pre373 = load i64, i64* %3, align 8
  br label %block_.L_43f7fa

block_.L_43f7fa:                                  ; preds = %block_43f7d0, %block_.L_43f7c1
  %2073 = phi i64 [ %2030, %block_.L_43f7c1 ], [ %.pre373, %block_43f7d0 ]
  %MEMORY.28 = phi %struct.Memory* [ %call2_43f775, %block_.L_43f7c1 ], [ %call2_43f7f5, %block_43f7d0 ]
  %2074 = add i64 %2073, 5
  store i64 %2074, i64* %3, align 8
  br label %block_.L_43f7ff

block_.L_43f7ff:                                  ; preds = %block_.L_43f7fa, %block_.L_43f7bc
  %storemerge189 = phi i64 [ %2052, %block_.L_43f7bc ], [ %2074, %block_.L_43f7fa ]
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.27, %block_.L_43f7bc ], [ %MEMORY.28, %block_.L_43f7fa ]
  %2075 = load i64, i64* %RBP.i, align 8
  %2076 = add i64 %2075, -80
  %2077 = add i64 %storemerge189, 10
  store i64 %2077, i64* %3, align 8
  %2078 = inttoptr i64 %2076 to i64*
  %2079 = load i64, i64* %2078, align 8
  store i8 0, i8* %31, align 1
  %2080 = trunc i64 %2079 to i32
  %2081 = and i32 %2080, 255
  %2082 = tail call i32 @llvm.ctpop.i32(i32 %2081)
  %2083 = trunc i32 %2082 to i8
  %2084 = and i8 %2083, 1
  %2085 = xor i8 %2084, 1
  store i8 %2085, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2086 = icmp eq i64 %2079, 0
  %2087 = zext i1 %2086 to i8
  store i8 %2087, i8* %47, align 1
  %2088 = lshr i64 %2079, 63
  %2089 = trunc i64 %2088 to i8
  store i8 %2089, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v633 = select i1 %2086, i64 26, i64 16
  %2090 = add i64 %storemerge189, %.v633
  store i64 %2090, i64* %3, align 8
  br i1 %2086, label %block_.L_43f819, label %block_43f80f

block_43f80f:                                     ; preds = %block_.L_43f7ff
  %2091 = add i64 %2090, 4
  store i64 %2091, i64* %3, align 8
  %2092 = load i64, i64* %2078, align 8
  store i64 %2092, i64* %RAX.i3798, align 8
  %2093 = add i64 %2090, 10
  store i64 %2093, i64* %3, align 8
  %2094 = inttoptr i64 %2092 to i32*
  store i32 0, i32* %2094, align 4
  %.pre374 = load i64, i64* %RBP.i, align 8
  %.pre375 = load i64, i64* %3, align 8
  br label %block_.L_43f819

block_.L_43f819:                                  ; preds = %block_43f80f, %block_.L_43f7ff
  %2095 = phi i64 [ %.pre375, %block_43f80f ], [ %2090, %block_.L_43f7ff ]
  %2096 = phi i64 [ %.pre374, %block_43f80f ], [ %2075, %block_.L_43f7ff ]
  %2097 = add i64 %2096, -1728
  %2098 = add i64 %2095, 8
  store i64 %2098, i64* %3, align 8
  %2099 = inttoptr i64 %2097 to i64*
  %2100 = load i64, i64* %2099, align 8
  store i8 0, i8* %31, align 1
  %2101 = trunc i64 %2100 to i32
  %2102 = and i32 %2101, 255
  %2103 = tail call i32 @llvm.ctpop.i32(i32 %2102)
  %2104 = trunc i32 %2103 to i8
  %2105 = and i8 %2104, 1
  %2106 = xor i8 %2105, 1
  store i8 %2106, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2107 = icmp eq i64 %2100, 0
  %2108 = zext i1 %2107 to i8
  store i8 %2108, i8* %47, align 1
  %2109 = lshr i64 %2100, 63
  %2110 = trunc i64 %2109 to i8
  store i8 %2110, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v634 = select i1 %2107, i64 52, i64 14
  %2111 = add i64 %2095, %.v634
  store i64 %2111, i64* %3, align 8
  br i1 %2107, label %block_.L_441708, label %block_43f827

block_43f827:                                     ; preds = %block_.L_43f819
  %2112 = add i64 %2111, 7
  store i64 %2112, i64* %3, align 8
  %2113 = load i64, i64* %2099, align 8
  store i64 %2113, i64* %RAX.i3798, align 8
  %2114 = add i64 %2113, 4
  %2115 = add i64 %2111, 10
  store i64 %2115, i64* %3, align 8
  %2116 = inttoptr i64 %2114 to i32*
  %2117 = load i32, i32* %2116, align 4
  %2118 = and i32 %2117, 1023
  %2119 = or i32 %2118, 553648128
  %2120 = zext i32 %2119 to i64
  store i64 %2120, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %2121 = and i32 %2117, 255
  %2122 = tail call i32 @llvm.ctpop.i32(i32 %2121)
  %2123 = trunc i32 %2122 to i8
  %2124 = and i8 %2123, 1
  %2125 = xor i8 %2124, 1
  store i8 %2125, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %2126 = add i64 %2111, 35
  store i64 %2126, i64* %3, align 8
  %2127 = load i64, i64* %2099, align 8
  store i64 %2127, i64* %RAX.i3798, align 8
  %2128 = add i64 %2127, 4
  %2129 = add i64 %2111, 38
  store i64 %2129, i64* %3, align 8
  %2130 = inttoptr i64 %2128 to i32*
  store i32 %2119, i32* %2130, align 4
  br label %block_.L_441708

block_.L_43f852:                                  ; preds = %block_43f71f, %block_.L_43f70a
  %2131 = phi i64 [ %1941, %block_.L_43f70a ], [ %1974, %block_43f71f ]
  %MEMORY.32 = phi %struct.Memory* [ %call2_43f711, %block_.L_43f70a ], [ %call2_43f726, %block_43f71f ]
  %2132 = load i64, i64* %RBP.i, align 8
  %2133 = add i64 %2132, -1760
  store i64 %2133, i64* %RDI.i3802.pre-phi, align 8
  %2134 = add i64 %2131, -15714
  %2135 = add i64 %2131, 12
  %2136 = load i64, i64* %6, align 8
  %2137 = add i64 %2136, -8
  %2138 = inttoptr i64 %2137 to i64*
  store i64 %2135, i64* %2138, align 8
  store i64 %2137, i64* %6, align 8
  store i64 %2134, i64* %3, align 8
  %call2_43f859 = tail call %struct.Memory* @sub_43baf0.min_eyes(%struct.State* nonnull %0, i64 %2134, %struct.Memory* %MEMORY.32)
  %2139 = load i32, i32* %EAX.i4398, align 4
  %2140 = load i64, i64* %3, align 8
  %2141 = add i32 %2139, -2
  %2142 = icmp ult i32 %2139, 2
  %2143 = zext i1 %2142 to i8
  store i8 %2143, i8* %31, align 1
  %2144 = and i32 %2141, 255
  %2145 = tail call i32 @llvm.ctpop.i32(i32 %2144)
  %2146 = trunc i32 %2145 to i8
  %2147 = and i8 %2146, 1
  %2148 = xor i8 %2147, 1
  store i8 %2148, i8* %38, align 1
  %2149 = xor i32 %2141, %2139
  %2150 = lshr i32 %2149, 4
  %2151 = trunc i32 %2150 to i8
  %2152 = and i8 %2151, 1
  store i8 %2152, i8* %44, align 1
  %2153 = icmp eq i32 %2141, 0
  %2154 = zext i1 %2153 to i8
  store i8 %2154, i8* %47, align 1
  %2155 = lshr i32 %2141, 31
  %2156 = trunc i32 %2155 to i8
  store i8 %2156, i8* %50, align 1
  %2157 = lshr i32 %2139, 31
  %2158 = xor i32 %2155, %2157
  %2159 = add nuw nsw i32 %2158, %2157
  %2160 = icmp eq i32 %2159, 2
  %2161 = zext i1 %2160 to i8
  store i8 %2161, i8* %56, align 1
  %2162 = icmp ne i8 %2156, 0
  %2163 = xor i1 %2162, %2160
  %.v500 = select i1 %2163, i64 9, i64 41
  %2164 = add i64 %2140, %.v500
  store i64 %2164, i64* %3, align 8
  br i1 %2163, label %block_43f867, label %block_.L_43f887

block_43f867:                                     ; preds = %block_.L_43f852
  %2165 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %2166 = add i32 %2165, -2
  %2167 = icmp ult i32 %2165, 2
  %2168 = zext i1 %2167 to i8
  store i8 %2168, i8* %31, align 1
  %2169 = and i32 %2166, 255
  %2170 = tail call i32 @llvm.ctpop.i32(i32 %2169)
  %2171 = trunc i32 %2170 to i8
  %2172 = and i8 %2171, 1
  %2173 = xor i8 %2172, 1
  store i8 %2173, i8* %38, align 1
  %2174 = xor i32 %2166, %2165
  %2175 = lshr i32 %2174, 4
  %2176 = trunc i32 %2175 to i8
  %2177 = and i8 %2176, 1
  store i8 %2177, i8* %44, align 1
  %2178 = icmp eq i32 %2166, 0
  %2179 = zext i1 %2178 to i8
  store i8 %2179, i8* %47, align 1
  %2180 = lshr i32 %2166, 31
  %2181 = trunc i32 %2180 to i8
  store i8 %2181, i8* %50, align 1
  %2182 = lshr i32 %2165, 31
  %2183 = xor i32 %2180, %2182
  %2184 = add nuw nsw i32 %2183, %2182
  %2185 = icmp eq i32 %2184, 2
  %2186 = zext i1 %2185 to i8
  store i8 %2186, i8* %56, align 1
  %2187 = icmp ne i8 %2181, 0
  %2188 = xor i1 %2187, %2185
  %2189 = or i1 %2178, %2188
  %.v629 = select i1 %2189, i64 907, i64 14
  %2190 = add i64 %2164, %.v629
  store i64 %2190, i64* %3, align 8
  br i1 %2189, label %block_.L_43fbf2, label %block_43f875

block_43f875:                                     ; preds = %block_43f867
  %2191 = load i64, i64* %RBP.i, align 8
  %2192 = add i64 %2191, -40
  %2193 = add i64 %2190, 4
  store i64 %2193, i64* %3, align 8
  %2194 = inttoptr i64 %2192 to i64*
  %2195 = load i64, i64* %2194, align 8
  store i64 %2195, i64* %RDI.i3802.pre-phi, align 8
  %2196 = add i64 %2190, 15803
  %2197 = add i64 %2190, 9
  %2198 = load i64, i64* %6, align 8
  %2199 = add i64 %2198, -8
  %2200 = inttoptr i64 %2199 to i64*
  store i64 %2197, i64* %2200, align 8
  store i64 %2199, i64* %6, align 8
  store i64 %2196, i64* %3, align 8
  %call2_43f879 = tail call %struct.Memory* @sub_443630.owl_escape_route(%struct.State* nonnull %0, i64 %2196, %struct.Memory* %call2_43f859)
  %2201 = load i32, i32* %EAX.i4398, align 4
  %2202 = load i64, i64* %3, align 8
  %2203 = add i32 %2201, -5
  %2204 = icmp ult i32 %2201, 5
  %2205 = zext i1 %2204 to i8
  store i8 %2205, i8* %31, align 1
  %2206 = and i32 %2203, 255
  %2207 = tail call i32 @llvm.ctpop.i32(i32 %2206)
  %2208 = trunc i32 %2207 to i8
  %2209 = and i8 %2208, 1
  %2210 = xor i8 %2209, 1
  store i8 %2210, i8* %38, align 1
  %2211 = xor i32 %2203, %2201
  %2212 = lshr i32 %2211, 4
  %2213 = trunc i32 %2212 to i8
  %2214 = and i8 %2213, 1
  store i8 %2214, i8* %44, align 1
  %2215 = icmp eq i32 %2203, 0
  %2216 = zext i1 %2215 to i8
  store i8 %2216, i8* %47, align 1
  %2217 = lshr i32 %2203, 31
  %2218 = trunc i32 %2217 to i8
  store i8 %2218, i8* %50, align 1
  %2219 = lshr i32 %2201, 31
  %2220 = xor i32 %2217, %2219
  %2221 = add nuw nsw i32 %2220, %2219
  %2222 = icmp eq i32 %2221, 2
  %2223 = zext i1 %2222 to i8
  store i8 %2223, i8* %56, align 1
  %2224 = icmp ne i8 %2218, 0
  %2225 = xor i1 %2224, %2222
  %.v630 = select i1 %2225, i64 884, i64 9
  %2226 = add i64 %2202, %.v630
  store i64 %2226, i64* %3, align 8
  br i1 %2225, label %block_.L_43fbf2, label %block_.L_43f887

block_.L_43f887:                                  ; preds = %block_.L_43f852, %block_43f875
  %2227 = phi i64 [ %2164, %block_.L_43f852 ], [ %2226, %block_43f875 ]
  %MEMORY.33 = phi %struct.Memory* [ %call2_43f859, %block_.L_43f852 ], [ %call2_43f879, %block_43f875 ]
  %2228 = load i64, i64* %RBP.i, align 8
  %2229 = add i64 %2228, -1768
  store i64 %2229, i64* %RDI.i3802.pre-phi, align 8
  %2230 = add i64 %2227, -18551
  %2231 = add i64 %2227, 12
  %2232 = load i64, i64* %6, align 8
  %2233 = add i64 %2232, -8
  %2234 = inttoptr i64 %2233 to i64*
  store i64 %2231, i64* %2234, align 8
  store i64 %2233, i64* %6, align 8
  store i64 %2230, i64* %3, align 8
  %call2_43f88e = tail call %struct.Memory* @sub_43b010.max_eyes(%struct.State* nonnull %0, i64 %2230, %struct.Memory* %MEMORY.33)
  %2235 = load i32, i32* %EAX.i4398, align 4
  %2236 = load i64, i64* %3, align 8
  %2237 = add i32 %2235, -2
  %2238 = icmp ult i32 %2235, 2
  %2239 = zext i1 %2238 to i8
  store i8 %2239, i8* %31, align 1
  %2240 = and i32 %2237, 255
  %2241 = tail call i32 @llvm.ctpop.i32(i32 %2240)
  %2242 = trunc i32 %2241 to i8
  %2243 = and i8 %2242, 1
  %2244 = xor i8 %2243, 1
  store i8 %2244, i8* %38, align 1
  %2245 = xor i32 %2237, %2235
  %2246 = lshr i32 %2245, 4
  %2247 = trunc i32 %2246 to i8
  %2248 = and i8 %2247, 1
  store i8 %2248, i8* %44, align 1
  %2249 = icmp eq i32 %2237, 0
  %2250 = zext i1 %2249 to i8
  store i8 %2250, i8* %47, align 1
  %2251 = lshr i32 %2237, 31
  %2252 = trunc i32 %2251 to i8
  store i8 %2252, i8* %50, align 1
  %2253 = lshr i32 %2235, 31
  %2254 = xor i32 %2251, %2253
  %2255 = add nuw nsw i32 %2254, %2253
  %2256 = icmp eq i32 %2255, 2
  %2257 = zext i1 %2256 to i8
  store i8 %2257, i8* %56, align 1
  %2258 = icmp ne i8 %2252, 0
  %2259 = xor i1 %2258, %2256
  %.v501 = select i1 %2259, i64 9, i64 295
  %2260 = add i64 %2236, %.v501
  %2261 = load i64, i64* %RBP.i, align 8
  %2262 = add i64 %2261, -1768
  %2263 = add i64 %2260, 7
  store i64 %2263, i64* %3, align 8
  store i64 %2262, i64* %RDI.i3802.pre-phi, align 8
  br i1 %2259, label %block_43f89c, label %block_.L_43f9ba

block_43f89c:                                     ; preds = %block_.L_43f887
  %2264 = add i64 %2261, -64
  %2265 = add i64 %2260, 11
  store i64 %2265, i64* %3, align 8
  %2266 = inttoptr i64 %2264 to i64*
  %2267 = load i64, i64* %2266, align 8
  store i64 %2267, i64* %RAX.i3798, align 8
  %2268 = add i64 %2260, 17
  store i64 %2268, i64* %3, align 8
  %2269 = inttoptr i64 %2267 to i32*
  store i32 1, i32* %2269, align 4
  %2270 = load i64, i64* %RBP.i, align 8
  %2271 = add i64 %2270, -72
  %2272 = load i64, i64* %3, align 8
  %2273 = add i64 %2272, 4
  store i64 %2273, i64* %3, align 8
  %2274 = inttoptr i64 %2271 to i64*
  %2275 = load i64, i64* %2274, align 8
  store i64 %2275, i64* %RAX.i3798, align 8
  %2276 = add i64 %2272, 10
  store i64 %2276, i64* %3, align 8
  %2277 = inttoptr i64 %2275 to i32*
  store i32 0, i32* %2277, align 4
  %2278 = load i64, i64* %RBP.i, align 8
  %2279 = add i64 %2278, -80
  %2280 = load i64, i64* %3, align 8
  %2281 = add i64 %2280, 4
  store i64 %2281, i64* %3, align 8
  %2282 = inttoptr i64 %2279 to i64*
  %2283 = load i64, i64* %2282, align 8
  store i64 %2283, i64* %RAX.i3798, align 8
  %2284 = add i64 %2280, 10
  store i64 %2284, i64* %3, align 8
  %2285 = inttoptr i64 %2283 to i32*
  store i32 0, i32* %2285, align 4
  %2286 = load i64, i64* %RBP.i, align 8
  %2287 = add i64 %2286, -1688
  %2288 = load i64, i64* %3, align 8
  %2289 = add i64 %2288, 7
  store i64 %2289, i64* %3, align 8
  %2290 = inttoptr i64 %2287 to i64*
  %2291 = load i64, i64* %2290, align 8
  store i64 %2291, i64* %RAX.i3798, align 8
  store i64 %2291, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %2292 = add i64 %2286, -1692
  %2293 = add i64 %2288, 21
  store i64 %2293, i64* %3, align 8
  %2294 = inttoptr i64 %2292 to i32*
  %2295 = load i32, i32* %2294, align 4
  %2296 = zext i32 %2295 to i64
  store i64 %2296, i64* %RCX.i4416, align 8
  store i32 %2295, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  %2297 = add i64 %2288, -18609
  %2298 = add i64 %2288, 33
  %2299 = load i64, i64* %6, align 8
  %2300 = add i64 %2299, -8
  %2301 = inttoptr i64 %2300 to i64*
  store i64 %2298, i64* %2301, align 8
  store i64 %2300, i64* %6, align 8
  store i64 %2297, i64* %3, align 8
  %call2_43f8dd = tail call %struct.Memory* @sub_43b010.max_eyes(%struct.State* nonnull %0, i64 %2297, %struct.Memory* %call2_43f88e)
  %2302 = load i32, i32* %EAX.i4398, align 4
  %2303 = load i64, i64* %3, align 8
  %2304 = icmp eq i32 %2302, 0
  %.v625 = select i1 %2304, i64 9, i64 71
  %2305 = add i64 %2303, %.v625
  %2306 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i8 0, i8* %31, align 1
  %2307 = trunc i64 %2306 to i32
  %2308 = and i32 %2307, 255
  %2309 = tail call i32 @llvm.ctpop.i32(i32 %2308)
  %2310 = trunc i32 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = xor i8 %2311, 1
  store i8 %2312, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2313 = icmp eq i64 %2306, 0
  %2314 = zext i1 %2313 to i8
  store i8 %2314, i8* %47, align 1
  %2315 = lshr i64 %2306, 63
  %2316 = trunc i64 %2315 to i8
  store i8 %2316, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v626 = select i1 %2313, i64 57, i64 15
  %2317 = add i64 %2305, %.v626
  store i64 %2317, i64* %3, align 8
  br i1 %2304, label %block_43f8eb, label %block_.L_43f929

block_43f8eb:                                     ; preds = %block_43f89c
  br i1 %2313, label %block_.L_43f924, label %block_43f8fa

block_43f8fa:                                     ; preds = %block_43f8eb
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 1, i64* %R8.i3721, align 8
  store i64 ptrtoint (%G__0x57df28_type* @G__0x57df28 to i64), i64* %R9.i4411, align 8
  %2318 = load i64, i64* %RBP.i, align 8
  %2319 = add i64 %2318, -1744
  %2320 = add i64 %2317, 25
  store i64 %2320, i64* %3, align 8
  %2321 = inttoptr i64 %2319 to i64*
  %2322 = load i64, i64* %2321, align 8
  store i64 %2322, i64* %RDI.i3802.pre-phi, align 8
  %2323 = add i64 %2318, -1748
  %2324 = add i64 %2317, 31
  store i64 %2324, i64* %3, align 8
  %2325 = inttoptr i64 %2323 to i32*
  %2326 = load i32, i32* %2325, align 4
  %2327 = zext i32 %2326 to i64
  store i64 %2327, i64* %RSI.i3811.pre-phi, align 8
  %2328 = add i64 %2318, -1752
  %2329 = add i64 %2317, 37
  store i64 %2329, i64* %3, align 8
  %2330 = inttoptr i64 %2328 to i32*
  %2331 = load i32, i32* %2330, align 4
  %2332 = zext i32 %2331 to i64
  store i64 %2332, i64* %RDX.i4419, align 8
  %2333 = add i64 %2317, -161242
  %2334 = add i64 %2317, 42
  %2335 = load i64, i64* %6, align 8
  %2336 = add i64 %2335, -8
  %2337 = inttoptr i64 %2336 to i64*
  store i64 %2334, i64* %2337, align 8
  store i64 %2336, i64* %6, align 8
  store i64 %2333, i64* %3, align 8
  %call2_43f91f = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %2333, %struct.Memory* %call2_43f8dd)
  %.pre384 = load i64, i64* %3, align 8
  br label %block_.L_43f924

block_.L_43f924:                                  ; preds = %block_43f8fa, %block_43f8eb
  %2338 = phi i64 [ %2317, %block_43f8eb ], [ %.pre384, %block_43f8fa ]
  %MEMORY.34 = phi %struct.Memory* [ %call2_43f8dd, %block_43f8eb ], [ %call2_43f91f, %block_43f8fa ]
  %2339 = add i64 %2338, 67
  br label %block_.L_43f967

block_.L_43f929:                                  ; preds = %block_43f89c
  br i1 %2313, label %block_.L_43f962, label %block_43f938

block_43f938:                                     ; preds = %block_.L_43f929
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 1, i64* %R8.i3721, align 8
  store i64 ptrtoint (%G__0x57df47_type* @G__0x57df47 to i64), i64* %R9.i4411, align 8
  %2340 = load i64, i64* %RBP.i, align 8
  %2341 = add i64 %2340, -1744
  %2342 = add i64 %2317, 25
  store i64 %2342, i64* %3, align 8
  %2343 = inttoptr i64 %2341 to i64*
  %2344 = load i64, i64* %2343, align 8
  store i64 %2344, i64* %RDI.i3802.pre-phi, align 8
  %2345 = add i64 %2340, -1748
  %2346 = add i64 %2317, 31
  store i64 %2346, i64* %3, align 8
  %2347 = inttoptr i64 %2345 to i32*
  %2348 = load i32, i32* %2347, align 4
  %2349 = zext i32 %2348 to i64
  store i64 %2349, i64* %RSI.i3811.pre-phi, align 8
  %2350 = add i64 %2340, -1752
  %2351 = add i64 %2317, 37
  store i64 %2351, i64* %3, align 8
  %2352 = inttoptr i64 %2350 to i32*
  %2353 = load i32, i32* %2352, align 4
  %2354 = zext i32 %2353 to i64
  store i64 %2354, i64* %RDX.i4419, align 8
  %2355 = add i64 %2317, -161304
  %2356 = add i64 %2317, 42
  %2357 = load i64, i64* %6, align 8
  %2358 = add i64 %2357, -8
  %2359 = inttoptr i64 %2358 to i64*
  store i64 %2356, i64* %2359, align 8
  store i64 %2358, i64* %6, align 8
  store i64 %2355, i64* %3, align 8
  %call2_43f95d = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %2355, %struct.Memory* %call2_43f8dd)
  %.pre385 = load i64, i64* %3, align 8
  br label %block_.L_43f962

block_.L_43f962:                                  ; preds = %block_43f938, %block_.L_43f929
  %2360 = phi i64 [ %2317, %block_.L_43f929 ], [ %.pre385, %block_43f938 ]
  %MEMORY.35 = phi %struct.Memory* [ %call2_43f8dd, %block_.L_43f929 ], [ %call2_43f95d, %block_43f938 ]
  %2361 = add i64 %2360, 5
  store i64 %2361, i64* %3, align 8
  br label %block_.L_43f967

block_.L_43f967:                                  ; preds = %block_.L_43f962, %block_.L_43f924
  %storemerge191 = phi i64 [ %2339, %block_.L_43f924 ], [ %2361, %block_.L_43f962 ]
  %MEMORY.36 = phi %struct.Memory* [ %MEMORY.34, %block_.L_43f924 ], [ %MEMORY.35, %block_.L_43f962 ]
  %2362 = load i64, i64* %RBP.i, align 8
  %2363 = add i64 %2362, -80
  %2364 = add i64 %storemerge191, 10
  store i64 %2364, i64* %3, align 8
  %2365 = inttoptr i64 %2363 to i64*
  %2366 = load i64, i64* %2365, align 8
  store i8 0, i8* %31, align 1
  %2367 = trunc i64 %2366 to i32
  %2368 = and i32 %2367, 255
  %2369 = tail call i32 @llvm.ctpop.i32(i32 %2368)
  %2370 = trunc i32 %2369 to i8
  %2371 = and i8 %2370, 1
  %2372 = xor i8 %2371, 1
  store i8 %2372, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2373 = icmp eq i64 %2366, 0
  %2374 = zext i1 %2373 to i8
  store i8 %2374, i8* %47, align 1
  %2375 = lshr i64 %2366, 63
  %2376 = trunc i64 %2375 to i8
  store i8 %2376, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v627 = select i1 %2373, i64 26, i64 16
  %2377 = add i64 %storemerge191, %.v627
  store i64 %2377, i64* %3, align 8
  br i1 %2373, label %block_.L_43f981, label %block_43f977

block_43f977:                                     ; preds = %block_.L_43f967
  %2378 = add i64 %2377, 4
  store i64 %2378, i64* %3, align 8
  %2379 = load i64, i64* %2365, align 8
  store i64 %2379, i64* %RAX.i3798, align 8
  %2380 = add i64 %2377, 10
  store i64 %2380, i64* %3, align 8
  %2381 = inttoptr i64 %2379 to i32*
  store i32 0, i32* %2381, align 4
  %.pre386 = load i64, i64* %RBP.i, align 8
  %.pre387 = load i64, i64* %3, align 8
  br label %block_.L_43f981

block_.L_43f981:                                  ; preds = %block_43f977, %block_.L_43f967
  %2382 = phi i64 [ %.pre387, %block_43f977 ], [ %2377, %block_.L_43f967 ]
  %2383 = phi i64 [ %.pre386, %block_43f977 ], [ %2362, %block_.L_43f967 ]
  %2384 = add i64 %2383, -1728
  %2385 = add i64 %2382, 8
  store i64 %2385, i64* %3, align 8
  %2386 = inttoptr i64 %2384 to i64*
  %2387 = load i64, i64* %2386, align 8
  store i8 0, i8* %31, align 1
  %2388 = trunc i64 %2387 to i32
  %2389 = and i32 %2388, 255
  %2390 = tail call i32 @llvm.ctpop.i32(i32 %2389)
  %2391 = trunc i32 %2390 to i8
  %2392 = and i8 %2391, 1
  %2393 = xor i8 %2392, 1
  store i8 %2393, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2394 = icmp eq i64 %2387, 0
  %2395 = zext i1 %2394 to i8
  store i8 %2395, i8* %47, align 1
  %2396 = lshr i64 %2387, 63
  %2397 = trunc i64 %2396 to i8
  store i8 %2397, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v628 = select i1 %2394, i64 52, i64 14
  %2398 = add i64 %2382, %.v628
  store i64 %2398, i64* %3, align 8
  br i1 %2394, label %block_.L_441708, label %block_43f98f

block_43f98f:                                     ; preds = %block_.L_43f981
  %2399 = add i64 %2398, 7
  store i64 %2399, i64* %3, align 8
  %2400 = load i64, i64* %2386, align 8
  store i64 %2400, i64* %RAX.i3798, align 8
  %2401 = add i64 %2400, 4
  %2402 = add i64 %2398, 10
  store i64 %2402, i64* %3, align 8
  %2403 = inttoptr i64 %2401 to i32*
  %2404 = load i32, i32* %2403, align 4
  %2405 = and i32 %2404, 1023
  %2406 = or i32 %2405, 553648128
  %2407 = zext i32 %2406 to i64
  store i64 %2407, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %2408 = and i32 %2404, 255
  %2409 = tail call i32 @llvm.ctpop.i32(i32 %2408)
  %2410 = trunc i32 %2409 to i8
  %2411 = and i8 %2410, 1
  %2412 = xor i8 %2411, 1
  store i8 %2412, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %2413 = add i64 %2398, 35
  store i64 %2413, i64* %3, align 8
  %2414 = load i64, i64* %2386, align 8
  store i64 %2414, i64* %RAX.i3798, align 8
  %2415 = add i64 %2414, 4
  %2416 = add i64 %2398, 38
  store i64 %2416, i64* %3, align 8
  %2417 = inttoptr i64 %2415 to i32*
  store i32 %2406, i32* %2417, align 4
  br label %block_.L_441708

block_.L_43f9ba:                                  ; preds = %block_.L_43f887
  %2418 = add i64 %2260, -16074
  %2419 = add i64 %2260, 12
  %2420 = load i64, i64* %6, align 8
  %2421 = add i64 %2420, -8
  %2422 = inttoptr i64 %2421 to i64*
  store i64 %2419, i64* %2422, align 8
  store i64 %2421, i64* %6, align 8
  store i64 %2418, i64* %3, align 8
  %call2_43f9c1 = tail call %struct.Memory* @sub_43baf0.min_eyes(%struct.State* nonnull %0, i64 %2418, %struct.Memory* %call2_43f88e)
  %2423 = load i32, i32* %EAX.i4398, align 4
  %2424 = load i64, i64* %3, align 8
  %2425 = add i32 %2423, -2
  %2426 = icmp ult i32 %2423, 2
  %2427 = zext i1 %2426 to i8
  store i8 %2427, i8* %31, align 1
  %2428 = and i32 %2425, 255
  %2429 = tail call i32 @llvm.ctpop.i32(i32 %2428)
  %2430 = trunc i32 %2429 to i8
  %2431 = and i8 %2430, 1
  %2432 = xor i8 %2431, 1
  store i8 %2432, i8* %38, align 1
  %2433 = xor i32 %2425, %2423
  %2434 = lshr i32 %2433, 4
  %2435 = trunc i32 %2434 to i8
  %2436 = and i8 %2435, 1
  store i8 %2436, i8* %44, align 1
  %2437 = icmp eq i32 %2425, 0
  %2438 = zext i1 %2437 to i8
  store i8 %2438, i8* %47, align 1
  %2439 = lshr i32 %2425, 31
  %2440 = trunc i32 %2439 to i8
  store i8 %2440, i8* %50, align 1
  %2441 = lshr i32 %2423, 31
  %2442 = xor i32 %2439, %2441
  %2443 = add nuw nsw i32 %2442, %2441
  %2444 = icmp eq i32 %2443, 2
  %2445 = zext i1 %2444 to i8
  store i8 %2445, i8* %56, align 1
  %2446 = icmp ne i8 %2440, 0
  %2447 = xor i1 %2446, %2444
  %.v502 = select i1 %2447, i64 213, i64 9
  %2448 = add i64 %2424, %.v502
  store i64 %2448, i64* %3, align 8
  %2449 = load i64, i64* %RBP.i, align 8
  br i1 %2447, label %block_.L_43fa9b, label %block_43f9cf

block_43f9cf:                                     ; preds = %block_.L_43f9ba
  %2450 = add i64 %2449, -64
  %2451 = add i64 %2448, 4
  store i64 %2451, i64* %3, align 8
  %2452 = inttoptr i64 %2450 to i64*
  %2453 = load i64, i64* %2452, align 8
  store i64 %2453, i64* %RAX.i3798, align 8
  %2454 = add i64 %2448, 10
  store i64 %2454, i64* %3, align 8
  %2455 = inttoptr i64 %2453 to i32*
  store i32 1, i32* %2455, align 4
  %2456 = load i64, i64* %RBP.i, align 8
  %2457 = add i64 %2456, -72
  %2458 = load i64, i64* %3, align 8
  %2459 = add i64 %2458, 4
  store i64 %2459, i64* %3, align 8
  %2460 = inttoptr i64 %2457 to i64*
  %2461 = load i64, i64* %2460, align 8
  store i64 %2461, i64* %RAX.i3798, align 8
  %2462 = add i64 %2458, 10
  store i64 %2462, i64* %3, align 8
  %2463 = inttoptr i64 %2461 to i32*
  store i32 1, i32* %2463, align 4
  %2464 = load i64, i64* %RBP.i, align 8
  %2465 = add i64 %2464, -80
  %2466 = load i64, i64* %3, align 8
  %2467 = add i64 %2466, 4
  store i64 %2467, i64* %3, align 8
  %2468 = inttoptr i64 %2465 to i64*
  %2469 = load i64, i64* %2468, align 8
  store i64 %2469, i64* %RAX.i3798, align 8
  %2470 = add i64 %2466, 10
  store i64 %2470, i64* %3, align 8
  %2471 = inttoptr i64 %2469 to i32*
  store i32 0, i32* %2471, align 4
  %2472 = load i64, i64* %RBP.i, align 8
  %2473 = add i64 %2472, -1688
  %2474 = load i64, i64* %3, align 8
  %2475 = add i64 %2474, 7
  store i64 %2475, i64* %3, align 8
  %2476 = inttoptr i64 %2473 to i64*
  %2477 = load i64, i64* %2476, align 8
  store i64 %2477, i64* %RAX.i3798, align 8
  store i64 %2477, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %2478 = add i64 %2472, -1692
  %2479 = add i64 %2474, 21
  store i64 %2479, i64* %3, align 8
  %2480 = inttoptr i64 %2478 to i32*
  %2481 = load i32, i32* %2480, align 4
  %2482 = zext i32 %2481 to i64
  store i64 %2482, i64* %RCX.i4416, align 8
  store i32 %2481, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  store i8 0, i8* %31, align 1
  %2483 = trunc i64 %2477 to i32
  %2484 = and i32 %2483, 255
  %2485 = tail call i32 @llvm.ctpop.i32(i32 %2484)
  %2486 = trunc i32 %2485 to i8
  %2487 = and i8 %2486, 1
  %2488 = xor i8 %2487, 1
  store i8 %2488, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2489 = icmp eq i64 %2477, 0
  %2490 = zext i1 %2489 to i8
  store i8 %2490, i8* %47, align 1
  %2491 = lshr i64 %2477, 63
  %2492 = trunc i64 %2491 to i8
  store i8 %2492, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v503 = select i1 %2489, i64 85, i64 43
  %2493 = add i64 %2474, %.v503
  store i64 %2493, i64* %3, align 8
  br i1 %2489, label %block_.L_43fa42, label %block_43fa18

block_43fa18:                                     ; preds = %block_43f9cf
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 1, i64* %R8.i3721, align 8
  store i64 ptrtoint (%G__0x57df65_type* @G__0x57df65 to i64), i64* %R9.i4411, align 8
  %2494 = add i64 %2472, -1744
  %2495 = add i64 %2493, 25
  store i64 %2495, i64* %3, align 8
  %2496 = inttoptr i64 %2494 to i64*
  %2497 = load i64, i64* %2496, align 8
  store i64 %2497, i64* %RDI.i3802.pre-phi, align 8
  %2498 = add i64 %2472, -1748
  %2499 = add i64 %2493, 31
  store i64 %2499, i64* %3, align 8
  %2500 = inttoptr i64 %2498 to i32*
  %2501 = load i32, i32* %2500, align 4
  %2502 = zext i32 %2501 to i64
  store i64 %2502, i64* %RSI.i3811.pre-phi, align 8
  %2503 = add i64 %2472, -1752
  %2504 = add i64 %2493, 37
  store i64 %2504, i64* %3, align 8
  %2505 = inttoptr i64 %2503 to i32*
  %2506 = load i32, i32* %2505, align 4
  %2507 = zext i32 %2506 to i64
  store i64 %2507, i64* %RDX.i4419, align 8
  %2508 = add i64 %2493, -161528
  %2509 = add i64 %2493, 42
  %2510 = load i64, i64* %6, align 8
  %2511 = add i64 %2510, -8
  %2512 = inttoptr i64 %2511 to i64*
  store i64 %2509, i64* %2512, align 8
  store i64 %2511, i64* %6, align 8
  store i64 %2508, i64* %3, align 8
  %call2_43fa3d = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %2508, %struct.Memory* %call2_43f9c1)
  %.pre376 = load i64, i64* %3, align 8
  %.pre377 = load i64, i64* %RBP.i, align 8
  br label %block_.L_43fa42

block_.L_43fa42:                                  ; preds = %block_43fa18, %block_43f9cf
  %2513 = phi i64 [ %2472, %block_43f9cf ], [ %.pre377, %block_43fa18 ]
  %2514 = phi i64 [ %2493, %block_43f9cf ], [ %.pre376, %block_43fa18 ]
  %MEMORY.39 = phi %struct.Memory* [ %call2_43f9c1, %block_43f9cf ], [ %call2_43fa3d, %block_43fa18 ]
  %2515 = add i64 %2513, -80
  %2516 = add i64 %2514, 10
  store i64 %2516, i64* %3, align 8
  %2517 = inttoptr i64 %2515 to i64*
  %2518 = load i64, i64* %2517, align 8
  store i8 0, i8* %31, align 1
  %2519 = trunc i64 %2518 to i32
  %2520 = and i32 %2519, 255
  %2521 = tail call i32 @llvm.ctpop.i32(i32 %2520)
  %2522 = trunc i32 %2521 to i8
  %2523 = and i8 %2522, 1
  %2524 = xor i8 %2523, 1
  store i8 %2524, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2525 = icmp eq i64 %2518, 0
  %2526 = zext i1 %2525 to i8
  store i8 %2526, i8* %47, align 1
  %2527 = lshr i64 %2518, 63
  %2528 = trunc i64 %2527 to i8
  store i8 %2528, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v504 = select i1 %2525, i64 26, i64 16
  %2529 = add i64 %2514, %.v504
  store i64 %2529, i64* %3, align 8
  br i1 %2525, label %block_.L_43fa5c, label %block_43fa52

block_43fa52:                                     ; preds = %block_.L_43fa42
  %2530 = add i64 %2529, 4
  store i64 %2530, i64* %3, align 8
  %2531 = load i64, i64* %2517, align 8
  store i64 %2531, i64* %RAX.i3798, align 8
  %2532 = add i64 %2529, 10
  store i64 %2532, i64* %3, align 8
  %2533 = inttoptr i64 %2531 to i32*
  store i32 0, i32* %2533, align 4
  %.pre378 = load i64, i64* %RBP.i, align 8
  %.pre379 = load i64, i64* %3, align 8
  br label %block_.L_43fa5c

block_.L_43fa5c:                                  ; preds = %block_43fa52, %block_.L_43fa42
  %2534 = phi i64 [ %.pre379, %block_43fa52 ], [ %2529, %block_.L_43fa42 ]
  %2535 = phi i64 [ %.pre378, %block_43fa52 ], [ %2513, %block_.L_43fa42 ]
  %2536 = add i64 %2535, -1728
  %2537 = add i64 %2534, 8
  store i64 %2537, i64* %3, align 8
  %2538 = inttoptr i64 %2536 to i64*
  %2539 = load i64, i64* %2538, align 8
  store i8 0, i8* %31, align 1
  %2540 = trunc i64 %2539 to i32
  %2541 = and i32 %2540, 255
  %2542 = tail call i32 @llvm.ctpop.i32(i32 %2541)
  %2543 = trunc i32 %2542 to i8
  %2544 = and i8 %2543, 1
  %2545 = xor i8 %2544, 1
  store i8 %2545, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2546 = icmp eq i64 %2539, 0
  %2547 = zext i1 %2546 to i8
  store i8 %2547, i8* %47, align 1
  %2548 = lshr i64 %2539, 63
  %2549 = trunc i64 %2548 to i8
  store i8 %2549, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v505 = select i1 %2546, i64 58, i64 14
  %2550 = add i64 %2534, %.v505
  store i64 %2550, i64* %3, align 8
  br i1 %2546, label %block_.L_441708, label %block_43fa6a

block_43fa6a:                                     ; preds = %block_.L_43fa5c
  %2551 = add i64 %2550, 7
  store i64 %2551, i64* %3, align 8
  %2552 = load i64, i64* %2538, align 8
  store i64 %2552, i64* %RAX.i3798, align 8
  %2553 = add i64 %2552, 4
  %2554 = add i64 %2550, 10
  store i64 %2554, i64* %3, align 8
  %2555 = inttoptr i64 %2553 to i32*
  %2556 = load i32, i32* %2555, align 4
  %2557 = and i32 %2556, 1023
  %2558 = or i32 %2557, 554696704
  %2559 = zext i32 %2558 to i64
  store i64 %2559, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %2560 = and i32 %2556, 255
  %2561 = tail call i32 @llvm.ctpop.i32(i32 %2560)
  %2562 = trunc i32 %2561 to i8
  %2563 = and i8 %2562, 1
  %2564 = xor i8 %2563, 1
  store i8 %2564, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %2565 = add i64 %2550, 41
  store i64 %2565, i64* %3, align 8
  %2566 = load i64, i64* %2538, align 8
  store i64 %2566, i64* %RAX.i3798, align 8
  %2567 = add i64 %2566, 4
  %2568 = add i64 %2550, 44
  store i64 %2568, i64* %3, align 8
  %2569 = inttoptr i64 %2567 to i32*
  store i32 %2558, i32* %2569, align 4
  br label %block_.L_441708

block_.L_43fa9b:                                  ; preds = %block_.L_43f9ba
  %2570 = add i64 %2449, -288
  %2571 = add i64 %2448, 7
  store i64 %2571, i64* %3, align 8
  %2572 = inttoptr i64 %2570 to i32*
  %2573 = load i32, i32* %2572, align 4
  store i8 0, i8* %31, align 1
  %2574 = and i32 %2573, 255
  %2575 = tail call i32 @llvm.ctpop.i32(i32 %2574)
  %2576 = trunc i32 %2575 to i8
  %2577 = and i8 %2576, 1
  %2578 = xor i8 %2577, 1
  store i8 %2578, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2579 = icmp eq i32 %2573, 0
  %2580 = zext i1 %2579 to i8
  store i8 %2580, i8* %47, align 1
  %2581 = lshr i32 %2573, 31
  %2582 = trunc i32 %2581 to i8
  store i8 %2582, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v506 = select i1 %2579, i64 328, i64 13
  %2583 = add i64 %2448, %.v506
  store i64 %2583, i64* %3, align 8
  br i1 %2579, label %block_.L_43fbe3, label %block_43faa8

block_43faa8:                                     ; preds = %block_.L_43fa9b
  %2584 = add i64 %2449, -1768
  store i64 %2584, i64* %RDI.i3802.pre-phi, align 8
  %2585 = add i64 %2449, -64
  %2586 = add i64 %2583, 11
  store i64 %2586, i64* %3, align 8
  %2587 = inttoptr i64 %2585 to i64*
  %2588 = load i64, i64* %2587, align 8
  store i64 %2588, i64* %RAX.i3798, align 8
  %2589 = add i64 %2583, 17
  store i64 %2589, i64* %3, align 8
  %2590 = inttoptr i64 %2588 to i32*
  store i32 1, i32* %2590, align 4
  %2591 = load i64, i64* %RBP.i, align 8
  %2592 = add i64 %2591, -72
  %2593 = load i64, i64* %3, align 8
  %2594 = add i64 %2593, 4
  store i64 %2594, i64* %3, align 8
  %2595 = inttoptr i64 %2592 to i64*
  %2596 = load i64, i64* %2595, align 8
  store i64 %2596, i64* %RAX.i3798, align 8
  %2597 = add i64 %2593, 10
  store i64 %2597, i64* %3, align 8
  %2598 = inttoptr i64 %2596 to i32*
  store i32 0, i32* %2598, align 4
  %2599 = load i64, i64* %RBP.i, align 8
  %2600 = add i64 %2599, -288
  %2601 = load i64, i64* %3, align 8
  %2602 = add i64 %2601, 6
  store i64 %2602, i64* %3, align 8
  %2603 = inttoptr i64 %2600 to i32*
  %2604 = load i32, i32* %2603, align 4
  %2605 = zext i32 %2604 to i64
  store i64 %2605, i64* %RCX.i4416, align 8
  %2606 = add i64 %2599, -80
  %2607 = add i64 %2601, 10
  store i64 %2607, i64* %3, align 8
  %2608 = inttoptr i64 %2606 to i64*
  %2609 = load i64, i64* %2608, align 8
  store i64 %2609, i64* %RAX.i3798, align 8
  %2610 = add i64 %2601, 12
  store i64 %2610, i64* %3, align 8
  %2611 = inttoptr i64 %2609 to i32*
  store i32 %2604, i32* %2611, align 4
  %2612 = load i64, i64* %RBP.i, align 8
  %2613 = add i64 %2612, -1688
  %2614 = load i64, i64* %3, align 8
  %2615 = add i64 %2614, 7
  store i64 %2615, i64* %3, align 8
  %2616 = inttoptr i64 %2613 to i64*
  %2617 = load i64, i64* %2616, align 8
  store i64 %2617, i64* %RAX.i3798, align 8
  store i64 %2617, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %2618 = add i64 %2612, -1692
  %2619 = add i64 %2614, 21
  store i64 %2619, i64* %3, align 8
  %2620 = inttoptr i64 %2618 to i32*
  %2621 = load i32, i32* %2620, align 4
  %2622 = zext i32 %2621 to i64
  store i64 %2622, i64* %RCX.i4416, align 8
  store i32 %2621, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  %2623 = add i64 %2614, -16351
  %2624 = add i64 %2614, 33
  %2625 = load i64, i64* %6, align 8
  %2626 = add i64 %2625, -8
  %2627 = inttoptr i64 %2626 to i64*
  store i64 %2624, i64* %2627, align 8
  store i64 %2626, i64* %6, align 8
  store i64 %2623, i64* %3, align 8
  %call2_43faeb = tail call %struct.Memory* @sub_43baf0.min_eyes(%struct.State* nonnull %0, i64 %2623, %struct.Memory* %call2_43f9c1)
  %2628 = load i32, i32* %EAX.i4398, align 4
  %2629 = load i64, i64* %3, align 8
  %2630 = icmp eq i32 %2628, 0
  %.v507 = select i1 %2630, i64 9, i64 75
  %2631 = add i64 %2629, %.v507
  %2632 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i8 0, i8* %31, align 1
  %2633 = trunc i64 %2632 to i32
  %2634 = and i32 %2633, 255
  %2635 = tail call i32 @llvm.ctpop.i32(i32 %2634)
  %2636 = trunc i32 %2635 to i8
  %2637 = and i8 %2636, 1
  %2638 = xor i8 %2637, 1
  store i8 %2638, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2639 = icmp eq i64 %2632, 0
  %2640 = zext i1 %2639 to i8
  store i8 %2640, i8* %47, align 1
  %2641 = lshr i64 %2632, 63
  %2642 = trunc i64 %2641 to i8
  store i8 %2642, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v508 = select i1 %2639, i64 61, i64 15
  %2643 = add i64 %2631, %.v508
  store i64 %2643, i64* %3, align 8
  br i1 %2630, label %block_43faf9, label %block_.L_43fb3b

block_43faf9:                                     ; preds = %block_43faa8
  br i1 %2639, label %block_.L_43fb36, label %block_43fb08

block_43fb08:                                     ; preds = %block_43faf9
  store i64 1, i64* %R8.i3721, align 8
  store i64 ptrtoint (%G__0x57df28_type* @G__0x57df28 to i64), i64* %R9.i4411, align 8
  %2644 = load i64, i64* %RBP.i, align 8
  %2645 = add i64 %2644, -1744
  %2646 = add i64 %2643, 23
  store i64 %2646, i64* %3, align 8
  %2647 = inttoptr i64 %2645 to i64*
  %2648 = load i64, i64* %2647, align 8
  store i64 %2648, i64* %RDI.i3802.pre-phi, align 8
  %2649 = add i64 %2644, -1748
  %2650 = add i64 %2643, 29
  store i64 %2650, i64* %3, align 8
  %2651 = inttoptr i64 %2649 to i32*
  %2652 = load i32, i32* %2651, align 4
  %2653 = zext i32 %2652 to i64
  store i64 %2653, i64* %RSI.i3811.pre-phi, align 8
  %2654 = add i64 %2644, -1752
  %2655 = add i64 %2643, 35
  store i64 %2655, i64* %3, align 8
  %2656 = inttoptr i64 %2654 to i32*
  %2657 = load i32, i32* %2656, align 4
  %2658 = zext i32 %2657 to i64
  store i64 %2658, i64* %RDX.i4419, align 8
  %2659 = add i64 %2644, -288
  %2660 = add i64 %2643, 41
  store i64 %2660, i64* %3, align 8
  %2661 = inttoptr i64 %2659 to i32*
  %2662 = load i32, i32* %2661, align 4
  %2663 = zext i32 %2662 to i64
  store i64 %2663, i64* %RCX.i4416, align 8
  %2664 = add i64 %2643, -161768
  %2665 = add i64 %2643, 46
  %2666 = load i64, i64* %6, align 8
  %2667 = add i64 %2666, -8
  %2668 = inttoptr i64 %2667 to i64*
  store i64 %2665, i64* %2668, align 8
  store i64 %2667, i64* %6, align 8
  store i64 %2664, i64* %3, align 8
  %call2_43fb31 = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %2664, %struct.Memory* %call2_43faeb)
  %.pre380 = load i64, i64* %3, align 8
  br label %block_.L_43fb36

block_.L_43fb36:                                  ; preds = %block_43fb08, %block_43faf9
  %2669 = phi i64 [ %2643, %block_43faf9 ], [ %.pre380, %block_43fb08 ]
  %MEMORY.42 = phi %struct.Memory* [ %call2_43faeb, %block_43faf9 ], [ %call2_43fb31, %block_43fb08 ]
  %2670 = add i64 %2669, 71
  br label %block_.L_43fb7d

block_.L_43fb3b:                                  ; preds = %block_43faa8
  br i1 %2639, label %block_.L_43fb78, label %block_43fb4a

block_43fb4a:                                     ; preds = %block_.L_43fb3b
  store i64 1, i64* %R8.i3721, align 8
  store i64 ptrtoint (%G__0x57df47_type* @G__0x57df47 to i64), i64* %R9.i4411, align 8
  %2671 = load i64, i64* %RBP.i, align 8
  %2672 = add i64 %2671, -1744
  %2673 = add i64 %2643, 23
  store i64 %2673, i64* %3, align 8
  %2674 = inttoptr i64 %2672 to i64*
  %2675 = load i64, i64* %2674, align 8
  store i64 %2675, i64* %RDI.i3802.pre-phi, align 8
  %2676 = add i64 %2671, -1748
  %2677 = add i64 %2643, 29
  store i64 %2677, i64* %3, align 8
  %2678 = inttoptr i64 %2676 to i32*
  %2679 = load i32, i32* %2678, align 4
  %2680 = zext i32 %2679 to i64
  store i64 %2680, i64* %RSI.i3811.pre-phi, align 8
  %2681 = add i64 %2671, -1752
  %2682 = add i64 %2643, 35
  store i64 %2682, i64* %3, align 8
  %2683 = inttoptr i64 %2681 to i32*
  %2684 = load i32, i32* %2683, align 4
  %2685 = zext i32 %2684 to i64
  store i64 %2685, i64* %RDX.i4419, align 8
  %2686 = add i64 %2671, -288
  %2687 = add i64 %2643, 41
  store i64 %2687, i64* %3, align 8
  %2688 = inttoptr i64 %2686 to i32*
  %2689 = load i32, i32* %2688, align 4
  %2690 = zext i32 %2689 to i64
  store i64 %2690, i64* %RCX.i4416, align 8
  %2691 = add i64 %2643, -161834
  %2692 = add i64 %2643, 46
  %2693 = load i64, i64* %6, align 8
  %2694 = add i64 %2693, -8
  %2695 = inttoptr i64 %2694 to i64*
  store i64 %2692, i64* %2695, align 8
  store i64 %2694, i64* %6, align 8
  store i64 %2691, i64* %3, align 8
  %call2_43fb73 = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %2691, %struct.Memory* %call2_43faeb)
  %.pre381 = load i64, i64* %3, align 8
  br label %block_.L_43fb78

block_.L_43fb78:                                  ; preds = %block_43fb4a, %block_.L_43fb3b
  %2696 = phi i64 [ %2643, %block_.L_43fb3b ], [ %.pre381, %block_43fb4a ]
  %MEMORY.43 = phi %struct.Memory* [ %call2_43faeb, %block_.L_43fb3b ], [ %call2_43fb73, %block_43fb4a ]
  %2697 = add i64 %2696, 5
  store i64 %2697, i64* %3, align 8
  br label %block_.L_43fb7d

block_.L_43fb7d:                                  ; preds = %block_.L_43fb78, %block_.L_43fb36
  %storemerge194 = phi i64 [ %2670, %block_.L_43fb36 ], [ %2697, %block_.L_43fb78 ]
  %MEMORY.44 = phi %struct.Memory* [ %MEMORY.42, %block_.L_43fb36 ], [ %MEMORY.43, %block_.L_43fb78 ]
  %2698 = load i64, i64* %RBP.i, align 8
  %2699 = add i64 %2698, -80
  %2700 = add i64 %storemerge194, 10
  store i64 %2700, i64* %3, align 8
  %2701 = inttoptr i64 %2699 to i64*
  %2702 = load i64, i64* %2701, align 8
  store i8 0, i8* %31, align 1
  %2703 = trunc i64 %2702 to i32
  %2704 = and i32 %2703, 255
  %2705 = tail call i32 @llvm.ctpop.i32(i32 %2704)
  %2706 = trunc i32 %2705 to i8
  %2707 = and i8 %2706, 1
  %2708 = xor i8 %2707, 1
  store i8 %2708, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2709 = icmp eq i64 %2702, 0
  %2710 = zext i1 %2709 to i8
  store i8 %2710, i8* %47, align 1
  %2711 = lshr i64 %2702, 63
  %2712 = trunc i64 %2711 to i8
  store i8 %2712, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v509 = select i1 %2709, i64 28, i64 16
  %2713 = add i64 %storemerge194, %.v509
  store i64 %2713, i64* %3, align 8
  br i1 %2709, label %block_.L_43fb99, label %block_43fb8d

block_43fb8d:                                     ; preds = %block_.L_43fb7d
  %2714 = add i64 %2698, -288
  %2715 = add i64 %2713, 6
  store i64 %2715, i64* %3, align 8
  %2716 = inttoptr i64 %2714 to i32*
  %2717 = load i32, i32* %2716, align 4
  %2718 = zext i32 %2717 to i64
  store i64 %2718, i64* %RAX.i3798, align 8
  %2719 = add i64 %2713, 10
  store i64 %2719, i64* %3, align 8
  %2720 = load i64, i64* %2701, align 8
  store i64 %2720, i64* %RCX.i4416, align 8
  %2721 = add i64 %2713, 12
  store i64 %2721, i64* %3, align 8
  %2722 = inttoptr i64 %2720 to i32*
  store i32 %2717, i32* %2722, align 4
  %.pre382 = load i64, i64* %RBP.i, align 8
  %.pre383 = load i64, i64* %3, align 8
  br label %block_.L_43fb99

block_.L_43fb99:                                  ; preds = %block_43fb8d, %block_.L_43fb7d
  %2723 = phi i64 [ %.pre383, %block_43fb8d ], [ %2713, %block_.L_43fb7d ]
  %2724 = phi i64 [ %.pre382, %block_43fb8d ], [ %2698, %block_.L_43fb7d ]
  %2725 = add i64 %2724, -1728
  %2726 = add i64 %2723, 8
  store i64 %2726, i64* %3, align 8
  %2727 = inttoptr i64 %2725 to i64*
  %2728 = load i64, i64* %2727, align 8
  store i8 0, i8* %31, align 1
  %2729 = trunc i64 %2728 to i32
  %2730 = and i32 %2729, 255
  %2731 = tail call i32 @llvm.ctpop.i32(i32 %2730)
  %2732 = trunc i32 %2731 to i8
  %2733 = and i8 %2732, 1
  %2734 = xor i8 %2733, 1
  store i8 %2734, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2735 = icmp eq i64 %2728, 0
  %2736 = zext i1 %2735 to i8
  store i8 %2736, i8* %47, align 1
  %2737 = lshr i64 %2728, 63
  %2738 = trunc i64 %2737 to i8
  store i8 %2738, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v510 = select i1 %2735, i64 69, i64 14
  %2739 = add i64 %2723, %.v510
  store i64 %2739, i64* %3, align 8
  br i1 %2735, label %block_.L_441708, label %block_43fba7

block_43fba7:                                     ; preds = %block_.L_43fb99
  %2740 = add i64 %2739, 7
  store i64 %2740, i64* %3, align 8
  %2741 = load i64, i64* %2727, align 8
  store i64 %2741, i64* %RAX.i3798, align 8
  %2742 = add i64 %2741, 4
  %2743 = add i64 %2739, 10
  store i64 %2743, i64* %3, align 8
  %2744 = inttoptr i64 %2742 to i32*
  %2745 = load i32, i32* %2744, align 4
  %2746 = and i32 %2745, 1023
  %2747 = or i32 %2746, 553648128
  %2748 = zext i32 %2747 to i64
  store i64 %2748, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %2749 = and i32 %2745, 255
  %2750 = tail call i32 @llvm.ctpop.i32(i32 %2749)
  %2751 = trunc i32 %2750 to i8
  %2752 = and i8 %2751, 1
  %2753 = xor i8 %2752, 1
  store i8 %2753, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %2754 = add i64 %2724, -288
  %2755 = add i64 %2739, 34
  store i64 %2755, i64* %3, align 8
  %2756 = inttoptr i64 %2754 to i32*
  %2757 = load i32, i32* %2756, align 4
  %2758 = shl i32 %2757, 10
  %2759 = and i32 %2758, 1047552
  %2760 = zext i32 %2759 to i64
  store i64 %2760, i64* %RDX.i4419, align 8
  %2761 = or i32 %2759, %2747
  %2762 = zext i32 %2761 to i64
  store i64 %2762, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %2763 = and i32 %2745, 255
  %2764 = tail call i32 @llvm.ctpop.i32(i32 %2763)
  %2765 = trunc i32 %2764 to i8
  %2766 = and i8 %2765, 1
  %2767 = xor i8 %2766, 1
  store i8 %2767, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %2768 = load i64, i64* %RBP.i, align 8
  %2769 = add i64 %2768, -1728
  %2770 = add i64 %2739, 52
  store i64 %2770, i64* %3, align 8
  %2771 = inttoptr i64 %2769 to i64*
  %2772 = load i64, i64* %2771, align 8
  store i64 %2772, i64* %RAX.i3798, align 8
  %2773 = add i64 %2772, 4
  %2774 = add i64 %2739, 55
  store i64 %2774, i64* %3, align 8
  %2775 = inttoptr i64 %2773 to i32*
  store i32 %2761, i32* %2775, align 4
  br label %block_.L_441708

block_.L_43fbe3:                                  ; preds = %block_.L_43fa9b
  %2776 = add i64 %2583, 15
  store i64 %2776, i64* %3, align 8
  br label %block_.L_43fbf2

block_.L_43fbf2:                                  ; preds = %block_.L_43fbe3, %block_43f875, %block_43f867
  %2777 = phi i64 [ %2776, %block_.L_43fbe3 ], [ %2190, %block_43f867 ], [ %2226, %block_43f875 ]
  %MEMORY.47 = phi %struct.Memory* [ %call2_43f9c1, %block_.L_43fbe3 ], [ %call2_43f859, %block_43f867 ], [ %call2_43f879, %block_43f875 ]
  %2778 = load i64, i64* %RBP.i, align 8
  %2779 = add i64 %2778, -1768
  store i64 %2779, i64* %RDI.i3802.pre-phi, align 8
  %2780 = add i64 %2777, -16642
  %2781 = add i64 %2777, 12
  %2782 = load i64, i64* %6, align 8
  %2783 = add i64 %2782, -8
  %2784 = inttoptr i64 %2783 to i64*
  store i64 %2781, i64* %2784, align 8
  store i64 %2783, i64* %6, align 8
  store i64 %2780, i64* %3, align 8
  %call2_43fbf9 = tail call %struct.Memory* @sub_43baf0.min_eyes(%struct.State* nonnull %0, i64 %2780, %struct.Memory* %MEMORY.47)
  %2785 = load i32, i32* %EAX.i4398, align 4
  %2786 = load i64, i64* %3, align 8
  %2787 = add i32 %2785, -2
  %2788 = icmp ult i32 %2785, 2
  %2789 = zext i1 %2788 to i8
  store i8 %2789, i8* %31, align 1
  %2790 = and i32 %2787, 255
  %2791 = tail call i32 @llvm.ctpop.i32(i32 %2790)
  %2792 = trunc i32 %2791 to i8
  %2793 = and i8 %2792, 1
  %2794 = xor i8 %2793, 1
  store i8 %2794, i8* %38, align 1
  %2795 = xor i32 %2787, %2785
  %2796 = lshr i32 %2795, 4
  %2797 = trunc i32 %2796 to i8
  %2798 = and i8 %2797, 1
  store i8 %2798, i8* %44, align 1
  %2799 = icmp eq i32 %2787, 0
  %2800 = zext i1 %2799 to i8
  store i8 %2800, i8* %47, align 1
  %2801 = lshr i32 %2787, 31
  %2802 = trunc i32 %2801 to i8
  store i8 %2802, i8* %50, align 1
  %2803 = lshr i32 %2785, 31
  %2804 = xor i32 %2801, %2803
  %2805 = add nuw nsw i32 %2804, %2803
  %2806 = icmp eq i32 %2805, 2
  %2807 = zext i1 %2806 to i8
  store i8 %2807, i8* %56, align 1
  %2808 = icmp ne i8 %2802, 0
  %2809 = xor i1 %2808, %2806
  %.v511 = select i1 %2809, i64 9, i64 27
  %2810 = add i64 %2786, %.v511
  store i64 %2810, i64* %3, align 8
  br i1 %2809, label %block_43fc07, label %block_.L_43fc19

block_43fc07:                                     ; preds = %block_.L_43fbf2
  %2811 = load i64, i64* %RBP.i, align 8
  %2812 = add i64 %2811, -48
  %2813 = add i64 %2810, 4
  store i64 %2813, i64* %3, align 8
  %2814 = inttoptr i64 %2812 to i64*
  %2815 = load i64, i64* %2814, align 8
  store i64 %2815, i64* %RDI.i3802.pre-phi, align 8
  %2816 = add i64 %2810, 14889
  %2817 = add i64 %2810, 9
  %2818 = load i64, i64* %6, align 8
  %2819 = add i64 %2818, -8
  %2820 = inttoptr i64 %2819 to i64*
  store i64 %2817, i64* %2820, align 8
  store i64 %2819, i64* %6, align 8
  store i64 %2816, i64* %3, align 8
  %call2_43fc0b = tail call %struct.Memory* @sub_443630.owl_escape_route(%struct.State* nonnull %0, i64 %2816, %struct.Memory* %call2_43fbf9)
  %2821 = load i32, i32* %EAX.i4398, align 4
  %2822 = load i64, i64* %3, align 8
  %2823 = add i32 %2821, -5
  %2824 = icmp ult i32 %2821, 5
  %2825 = zext i1 %2824 to i8
  store i8 %2825, i8* %31, align 1
  %2826 = and i32 %2823, 255
  %2827 = tail call i32 @llvm.ctpop.i32(i32 %2826)
  %2828 = trunc i32 %2827 to i8
  %2829 = and i8 %2828, 1
  %2830 = xor i8 %2829, 1
  store i8 %2830, i8* %38, align 1
  %2831 = xor i32 %2823, %2821
  %2832 = lshr i32 %2831, 4
  %2833 = trunc i32 %2832 to i8
  %2834 = and i8 %2833, 1
  store i8 %2834, i8* %44, align 1
  %2835 = icmp eq i32 %2823, 0
  %2836 = zext i1 %2835 to i8
  store i8 %2836, i8* %47, align 1
  %2837 = lshr i32 %2823, 31
  %2838 = trunc i32 %2837 to i8
  store i8 %2838, i8* %50, align 1
  %2839 = lshr i32 %2821, 31
  %2840 = xor i32 %2837, %2839
  %2841 = add nuw nsw i32 %2840, %2839
  %2842 = icmp eq i32 %2841, 2
  %2843 = zext i1 %2842 to i8
  store i8 %2843, i8* %56, align 1
  %2844 = icmp ne i8 %2838, 0
  %2845 = xor i1 %2844, %2842
  %.v624 = select i1 %2845, i64 688, i64 9
  %2846 = add i64 %2822, %.v624
  store i64 %2846, i64* %3, align 8
  br i1 %2845, label %block_43fc07.block_.L_43fec0_crit_edge, label %block_.L_43fc19

block_43fc07.block_.L_43fec0_crit_edge:           ; preds = %block_43fc07
  %.pre398 = load i64, i64* %RBP.i, align 8
  br label %block_.L_43fec0

block_.L_43fc19:                                  ; preds = %block_.L_43fbf2, %block_43fc07
  %2847 = phi i64 [ %2810, %block_.L_43fbf2 ], [ %2846, %block_43fc07 ]
  %MEMORY.48 = phi %struct.Memory* [ %call2_43fbf9, %block_.L_43fbf2 ], [ %call2_43fc0b, %block_43fc07 ]
  %2848 = load i64, i64* %RBP.i, align 8
  %2849 = add i64 %2848, -1760
  store i64 %2849, i64* %RDI.i3802.pre-phi, align 8
  %2850 = add i64 %2847, -19465
  %2851 = add i64 %2847, 12
  %2852 = load i64, i64* %6, align 8
  %2853 = add i64 %2852, -8
  %2854 = inttoptr i64 %2853 to i64*
  store i64 %2851, i64* %2854, align 8
  store i64 %2853, i64* %6, align 8
  store i64 %2850, i64* %3, align 8
  %call2_43fc20 = tail call %struct.Memory* @sub_43b010.max_eyes(%struct.State* nonnull %0, i64 %2850, %struct.Memory* %MEMORY.48)
  %2855 = load i32, i32* %EAX.i4398, align 4
  %2856 = load i64, i64* %3, align 8
  %2857 = add i32 %2855, -2
  %2858 = icmp ult i32 %2855, 2
  %2859 = zext i1 %2858 to i8
  store i8 %2859, i8* %31, align 1
  %2860 = and i32 %2857, 255
  %2861 = tail call i32 @llvm.ctpop.i32(i32 %2860)
  %2862 = trunc i32 %2861 to i8
  %2863 = and i8 %2862, 1
  %2864 = xor i8 %2863, 1
  store i8 %2864, i8* %38, align 1
  %2865 = xor i32 %2857, %2855
  %2866 = lshr i32 %2865, 4
  %2867 = trunc i32 %2866 to i8
  %2868 = and i8 %2867, 1
  store i8 %2868, i8* %44, align 1
  %2869 = icmp eq i32 %2857, 0
  %2870 = zext i1 %2869 to i8
  store i8 %2870, i8* %47, align 1
  %2871 = lshr i32 %2857, 31
  %2872 = trunc i32 %2871 to i8
  store i8 %2872, i8* %50, align 1
  %2873 = lshr i32 %2855, 31
  %2874 = xor i32 %2871, %2873
  %2875 = add nuw nsw i32 %2874, %2873
  %2876 = icmp eq i32 %2875, 2
  %2877 = zext i1 %2876 to i8
  store i8 %2877, i8* %56, align 1
  %2878 = icmp ne i8 %2872, 0
  %2879 = xor i1 %2878, %2876
  %.v512 = select i1 %2879, i64 9, i64 185
  %2880 = add i64 %2856, %.v512
  store i64 %2880, i64* %3, align 8
  %2881 = load i64, i64* %RBP.i, align 8
  br i1 %2879, label %block_43fc2e, label %block_.L_43fcde

block_43fc2e:                                     ; preds = %block_.L_43fc19
  %2882 = add i64 %2881, -64
  %2883 = add i64 %2880, 4
  store i64 %2883, i64* %3, align 8
  %2884 = inttoptr i64 %2882 to i64*
  %2885 = load i64, i64* %2884, align 8
  store i64 %2885, i64* %RAX.i3798, align 8
  %2886 = add i64 %2880, 10
  store i64 %2886, i64* %3, align 8
  %2887 = inttoptr i64 %2885 to i32*
  store i32 0, i32* %2887, align 4
  %2888 = load i64, i64* %RBP.i, align 8
  %2889 = add i64 %2888, -72
  %2890 = load i64, i64* %3, align 8
  %2891 = add i64 %2890, 4
  store i64 %2891, i64* %3, align 8
  %2892 = inttoptr i64 %2889 to i64*
  %2893 = load i64, i64* %2892, align 8
  store i64 %2893, i64* %RAX.i3798, align 8
  %2894 = add i64 %2890, 10
  store i64 %2894, i64* %3, align 8
  %2895 = inttoptr i64 %2893 to i32*
  store i32 1, i32* %2895, align 4
  %2896 = load i64, i64* %RBP.i, align 8
  %2897 = add i64 %2896, -80
  %2898 = load i64, i64* %3, align 8
  %2899 = add i64 %2898, 4
  store i64 %2899, i64* %3, align 8
  %2900 = inttoptr i64 %2897 to i64*
  %2901 = load i64, i64* %2900, align 8
  store i64 %2901, i64* %RAX.i3798, align 8
  %2902 = add i64 %2898, 10
  store i64 %2902, i64* %3, align 8
  %2903 = inttoptr i64 %2901 to i32*
  store i32 0, i32* %2903, align 4
  %2904 = load i64, i64* %RBP.i, align 8
  %2905 = add i64 %2904, -1688
  %2906 = load i64, i64* %3, align 8
  %2907 = add i64 %2906, 7
  store i64 %2907, i64* %3, align 8
  %2908 = inttoptr i64 %2905 to i64*
  %2909 = load i64, i64* %2908, align 8
  store i64 %2909, i64* %RAX.i3798, align 8
  store i64 %2909, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %2910 = add i64 %2904, -1692
  %2911 = add i64 %2906, 21
  store i64 %2911, i64* %3, align 8
  %2912 = inttoptr i64 %2910 to i32*
  %2913 = load i32, i32* %2912, align 4
  %2914 = zext i32 %2913 to i64
  store i64 %2914, i64* %RCX.i4416, align 8
  store i32 %2913, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  store i8 0, i8* %31, align 1
  %2915 = trunc i64 %2909 to i32
  %2916 = and i32 %2915, 255
  %2917 = tail call i32 @llvm.ctpop.i32(i32 %2916)
  %2918 = trunc i32 %2917 to i8
  %2919 = and i8 %2918, 1
  %2920 = xor i8 %2919, 1
  store i8 %2920, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2921 = icmp eq i64 %2909, 0
  %2922 = zext i1 %2921 to i8
  store i8 %2922, i8* %47, align 1
  %2923 = lshr i64 %2909, 63
  %2924 = trunc i64 %2923 to i8
  store i8 %2924, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v622 = select i1 %2921, i64 84, i64 43
  %2925 = add i64 %2906, %.v622
  store i64 %2925, i64* %3, align 8
  br i1 %2921, label %block_.L_43fca0, label %block_43fc77

block_43fc77:                                     ; preds = %block_43fc2e
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 ptrtoint (%G__0x57df6f_type* @G__0x57df6f to i64), i64* %R9.i4411, align 8
  %2926 = add i64 %2904, -1744
  %2927 = add i64 %2925, 19
  store i64 %2927, i64* %3, align 8
  %2928 = inttoptr i64 %2926 to i64*
  %2929 = load i64, i64* %2928, align 8
  store i64 %2929, i64* %RDI.i3802.pre-phi, align 8
  %2930 = add i64 %2904, -1748
  %2931 = add i64 %2925, 25
  store i64 %2931, i64* %3, align 8
  %2932 = inttoptr i64 %2930 to i32*
  %2933 = load i32, i32* %2932, align 4
  %2934 = zext i32 %2933 to i64
  store i64 %2934, i64* %RSI.i3811.pre-phi, align 8
  %2935 = add i64 %2904, -1752
  %2936 = add i64 %2925, 31
  store i64 %2936, i64* %3, align 8
  %2937 = inttoptr i64 %2935 to i32*
  %2938 = load i32, i32* %2937, align 4
  %2939 = zext i32 %2938 to i64
  store i64 %2939, i64* %RDX.i4419, align 8
  store i64 0, i64* %RCX.i4416, align 8
  store i64 0, i64* %R8.i3721, align 8
  %2940 = add i64 %2925, -162135
  %2941 = add i64 %2925, 41
  %2942 = load i64, i64* %6, align 8
  %2943 = add i64 %2942, -8
  %2944 = inttoptr i64 %2943 to i64*
  store i64 %2941, i64* %2944, align 8
  store i64 %2943, i64* %6, align 8
  store i64 %2940, i64* %3, align 8
  %call2_43fc9b = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %2940, %struct.Memory* %call2_43fc20)
  %.pre396 = load i64, i64* %3, align 8
  %.pre397 = load i64, i64* %RBP.i, align 8
  br label %block_.L_43fca0

block_.L_43fca0:                                  ; preds = %block_43fc77, %block_43fc2e
  %2945 = phi i64 [ %2904, %block_43fc2e ], [ %.pre397, %block_43fc77 ]
  %2946 = phi i64 [ %2925, %block_43fc2e ], [ %.pre396, %block_43fc77 ]
  %MEMORY.49 = phi %struct.Memory* [ %call2_43fc20, %block_43fc2e ], [ %call2_43fc9b, %block_43fc77 ]
  %2947 = add i64 %2945, -1728
  %2948 = add i64 %2946, 13
  store i64 %2948, i64* %3, align 8
  %2949 = inttoptr i64 %2947 to i64*
  %2950 = load i64, i64* %2949, align 8
  store i8 0, i8* %31, align 1
  %2951 = trunc i64 %2950 to i32
  %2952 = and i32 %2951, 255
  %2953 = tail call i32 @llvm.ctpop.i32(i32 %2952)
  %2954 = trunc i32 %2953 to i8
  %2955 = and i8 %2954, 1
  %2956 = xor i8 %2955, 1
  store i8 %2956, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %2957 = icmp eq i64 %2950, 0
  %2958 = zext i1 %2957 to i8
  store i8 %2958, i8* %47, align 1
  %2959 = lshr i64 %2950, 63
  %2960 = trunc i64 %2959 to i8
  store i8 %2960, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v623 = select i1 %2957, i64 57, i64 19
  %2961 = add i64 %2946, %.v623
  store i64 %2961, i64* %3, align 8
  br i1 %2957, label %block_.L_441708, label %block_43fcb3

block_43fcb3:                                     ; preds = %block_.L_43fca0
  %2962 = add i64 %2961, 7
  store i64 %2962, i64* %3, align 8
  %2963 = load i64, i64* %2949, align 8
  store i64 %2963, i64* %RAX.i3798, align 8
  %2964 = add i64 %2963, 4
  %2965 = add i64 %2961, 10
  store i64 %2965, i64* %3, align 8
  %2966 = inttoptr i64 %2964 to i32*
  %2967 = load i32, i32* %2966, align 4
  %2968 = and i32 %2967, 1023
  %2969 = or i32 %2968, 537919488
  %2970 = zext i32 %2969 to i64
  store i64 %2970, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %2971 = and i32 %2967, 255
  %2972 = tail call i32 @llvm.ctpop.i32(i32 %2971)
  %2973 = trunc i32 %2972 to i8
  %2974 = and i8 %2973, 1
  %2975 = xor i8 %2974, 1
  store i8 %2975, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %2976 = add i64 %2961, 35
  store i64 %2976, i64* %3, align 8
  %2977 = load i64, i64* %2949, align 8
  store i64 %2977, i64* %RAX.i3798, align 8
  %2978 = add i64 %2977, 4
  %2979 = add i64 %2961, 38
  store i64 %2979, i64* %3, align 8
  %2980 = inttoptr i64 %2978 to i32*
  store i32 %2969, i32* %2980, align 4
  br label %block_.L_441708

block_.L_43fcde:                                  ; preds = %block_.L_43fc19
  %2981 = add i64 %2881, -1760
  store i64 %2981, i64* %RDI.i3802.pre-phi, align 8
  %2982 = add i64 %2880, -16878
  %2983 = add i64 %2880, 12
  %2984 = load i64, i64* %6, align 8
  %2985 = add i64 %2984, -8
  %2986 = inttoptr i64 %2985 to i64*
  store i64 %2983, i64* %2986, align 8
  store i64 %2985, i64* %6, align 8
  store i64 %2982, i64* %3, align 8
  %call2_43fce5 = tail call %struct.Memory* @sub_43baf0.min_eyes(%struct.State* nonnull %0, i64 %2982, %struct.Memory* %call2_43fc20)
  %2987 = load i32, i32* %EAX.i4398, align 4
  %2988 = load i64, i64* %3, align 8
  %2989 = add i32 %2987, -2
  %2990 = icmp ult i32 %2987, 2
  %2991 = zext i1 %2990 to i8
  store i8 %2991, i8* %31, align 1
  %2992 = and i32 %2989, 255
  %2993 = tail call i32 @llvm.ctpop.i32(i32 %2992)
  %2994 = trunc i32 %2993 to i8
  %2995 = and i8 %2994, 1
  %2996 = xor i8 %2995, 1
  store i8 %2996, i8* %38, align 1
  %2997 = xor i32 %2989, %2987
  %2998 = lshr i32 %2997, 4
  %2999 = trunc i32 %2998 to i8
  %3000 = and i8 %2999, 1
  store i8 %3000, i8* %44, align 1
  %3001 = icmp eq i32 %2989, 0
  %3002 = zext i1 %3001 to i8
  store i8 %3002, i8* %47, align 1
  %3003 = lshr i32 %2989, 31
  %3004 = trunc i32 %3003 to i8
  store i8 %3004, i8* %50, align 1
  %3005 = lshr i32 %2987, 31
  %3006 = xor i32 %3003, %3005
  %3007 = add nuw nsw i32 %3006, %3005
  %3008 = icmp eq i32 %3007, 2
  %3009 = zext i1 %3008 to i8
  store i8 %3009, i8* %56, align 1
  %3010 = icmp ne i8 %3004, 0
  %3011 = xor i1 %3010, %3008
  %.v513 = select i1 %3011, i64 213, i64 9
  %3012 = add i64 %2988, %.v513
  store i64 %3012, i64* %3, align 8
  %3013 = load i64, i64* %RBP.i, align 8
  br i1 %3011, label %block_.L_43fdbf, label %block_43fcf3

block_43fcf3:                                     ; preds = %block_.L_43fcde
  %3014 = add i64 %3013, -64
  %3015 = add i64 %3012, 4
  store i64 %3015, i64* %3, align 8
  %3016 = inttoptr i64 %3014 to i64*
  %3017 = load i64, i64* %3016, align 8
  store i64 %3017, i64* %RAX.i3798, align 8
  %3018 = add i64 %3012, 10
  store i64 %3018, i64* %3, align 8
  %3019 = inttoptr i64 %3017 to i32*
  store i32 1, i32* %3019, align 4
  %3020 = load i64, i64* %RBP.i, align 8
  %3021 = add i64 %3020, -72
  %3022 = load i64, i64* %3, align 8
  %3023 = add i64 %3022, 4
  store i64 %3023, i64* %3, align 8
  %3024 = inttoptr i64 %3021 to i64*
  %3025 = load i64, i64* %3024, align 8
  store i64 %3025, i64* %RAX.i3798, align 8
  %3026 = add i64 %3022, 10
  store i64 %3026, i64* %3, align 8
  %3027 = inttoptr i64 %3025 to i32*
  store i32 1, i32* %3027, align 4
  %3028 = load i64, i64* %RBP.i, align 8
  %3029 = add i64 %3028, -80
  %3030 = load i64, i64* %3, align 8
  %3031 = add i64 %3030, 4
  store i64 %3031, i64* %3, align 8
  %3032 = inttoptr i64 %3029 to i64*
  %3033 = load i64, i64* %3032, align 8
  store i64 %3033, i64* %RAX.i3798, align 8
  %3034 = add i64 %3030, 10
  store i64 %3034, i64* %3, align 8
  %3035 = inttoptr i64 %3033 to i32*
  store i32 0, i32* %3035, align 4
  %3036 = load i64, i64* %RBP.i, align 8
  %3037 = add i64 %3036, -1688
  %3038 = load i64, i64* %3, align 8
  %3039 = add i64 %3038, 7
  store i64 %3039, i64* %3, align 8
  %3040 = inttoptr i64 %3037 to i64*
  %3041 = load i64, i64* %3040, align 8
  store i64 %3041, i64* %RAX.i3798, align 8
  store i64 %3041, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %3042 = add i64 %3036, -1692
  %3043 = add i64 %3038, 21
  store i64 %3043, i64* %3, align 8
  %3044 = inttoptr i64 %3042 to i32*
  %3045 = load i32, i32* %3044, align 4
  %3046 = zext i32 %3045 to i64
  store i64 %3046, i64* %RCX.i4416, align 8
  store i32 %3045, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  store i8 0, i8* %31, align 1
  %3047 = trunc i64 %3041 to i32
  %3048 = and i32 %3047, 255
  %3049 = tail call i32 @llvm.ctpop.i32(i32 %3048)
  %3050 = trunc i32 %3049 to i8
  %3051 = and i8 %3050, 1
  %3052 = xor i8 %3051, 1
  store i8 %3052, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3053 = icmp eq i64 %3041, 0
  %3054 = zext i1 %3053 to i8
  store i8 %3054, i8* %47, align 1
  %3055 = lshr i64 %3041, 63
  %3056 = trunc i64 %3055 to i8
  store i8 %3056, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v514 = select i1 %3053, i64 85, i64 43
  %3057 = add i64 %3038, %.v514
  store i64 %3057, i64* %3, align 8
  br i1 %3053, label %block_.L_43fd66, label %block_43fd3c

block_43fd3c:                                     ; preds = %block_43fcf3
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 1, i64* %R8.i3721, align 8
  store i64 ptrtoint (%G__0x57df65_type* @G__0x57df65 to i64), i64* %R9.i4411, align 8
  %3058 = add i64 %3036, -1744
  %3059 = add i64 %3057, 25
  store i64 %3059, i64* %3, align 8
  %3060 = inttoptr i64 %3058 to i64*
  %3061 = load i64, i64* %3060, align 8
  store i64 %3061, i64* %RDI.i3802.pre-phi, align 8
  %3062 = add i64 %3036, -1748
  %3063 = add i64 %3057, 31
  store i64 %3063, i64* %3, align 8
  %3064 = inttoptr i64 %3062 to i32*
  %3065 = load i32, i32* %3064, align 4
  %3066 = zext i32 %3065 to i64
  store i64 %3066, i64* %RSI.i3811.pre-phi, align 8
  %3067 = add i64 %3036, -1752
  %3068 = add i64 %3057, 37
  store i64 %3068, i64* %3, align 8
  %3069 = inttoptr i64 %3067 to i32*
  %3070 = load i32, i32* %3069, align 4
  %3071 = zext i32 %3070 to i64
  store i64 %3071, i64* %RDX.i4419, align 8
  %3072 = add i64 %3057, -162332
  %3073 = add i64 %3057, 42
  %3074 = load i64, i64* %6, align 8
  %3075 = add i64 %3074, -8
  %3076 = inttoptr i64 %3075 to i64*
  store i64 %3073, i64* %3076, align 8
  store i64 %3075, i64* %6, align 8
  store i64 %3072, i64* %3, align 8
  %call2_43fd61 = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %3072, %struct.Memory* %call2_43fce5)
  %.pre388 = load i64, i64* %3, align 8
  %.pre389 = load i64, i64* %RBP.i, align 8
  br label %block_.L_43fd66

block_.L_43fd66:                                  ; preds = %block_43fd3c, %block_43fcf3
  %3077 = phi i64 [ %3036, %block_43fcf3 ], [ %.pre389, %block_43fd3c ]
  %3078 = phi i64 [ %3057, %block_43fcf3 ], [ %.pre388, %block_43fd3c ]
  %MEMORY.51 = phi %struct.Memory* [ %call2_43fce5, %block_43fcf3 ], [ %call2_43fd61, %block_43fd3c ]
  %3079 = add i64 %3077, -80
  %3080 = add i64 %3078, 10
  store i64 %3080, i64* %3, align 8
  %3081 = inttoptr i64 %3079 to i64*
  %3082 = load i64, i64* %3081, align 8
  store i8 0, i8* %31, align 1
  %3083 = trunc i64 %3082 to i32
  %3084 = and i32 %3083, 255
  %3085 = tail call i32 @llvm.ctpop.i32(i32 %3084)
  %3086 = trunc i32 %3085 to i8
  %3087 = and i8 %3086, 1
  %3088 = xor i8 %3087, 1
  store i8 %3088, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3089 = icmp eq i64 %3082, 0
  %3090 = zext i1 %3089 to i8
  store i8 %3090, i8* %47, align 1
  %3091 = lshr i64 %3082, 63
  %3092 = trunc i64 %3091 to i8
  store i8 %3092, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v515 = select i1 %3089, i64 26, i64 16
  %3093 = add i64 %3078, %.v515
  store i64 %3093, i64* %3, align 8
  br i1 %3089, label %block_.L_43fd80, label %block_43fd76

block_43fd76:                                     ; preds = %block_.L_43fd66
  %3094 = add i64 %3093, 4
  store i64 %3094, i64* %3, align 8
  %3095 = load i64, i64* %3081, align 8
  store i64 %3095, i64* %RAX.i3798, align 8
  %3096 = add i64 %3093, 10
  store i64 %3096, i64* %3, align 8
  %3097 = inttoptr i64 %3095 to i32*
  store i32 0, i32* %3097, align 4
  %.pre390 = load i64, i64* %RBP.i, align 8
  %.pre391 = load i64, i64* %3, align 8
  br label %block_.L_43fd80

block_.L_43fd80:                                  ; preds = %block_43fd76, %block_.L_43fd66
  %3098 = phi i64 [ %.pre391, %block_43fd76 ], [ %3093, %block_.L_43fd66 ]
  %3099 = phi i64 [ %.pre390, %block_43fd76 ], [ %3077, %block_.L_43fd66 ]
  %3100 = add i64 %3099, -1728
  %3101 = add i64 %3098, 8
  store i64 %3101, i64* %3, align 8
  %3102 = inttoptr i64 %3100 to i64*
  %3103 = load i64, i64* %3102, align 8
  store i8 0, i8* %31, align 1
  %3104 = trunc i64 %3103 to i32
  %3105 = and i32 %3104, 255
  %3106 = tail call i32 @llvm.ctpop.i32(i32 %3105)
  %3107 = trunc i32 %3106 to i8
  %3108 = and i8 %3107, 1
  %3109 = xor i8 %3108, 1
  store i8 %3109, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3110 = icmp eq i64 %3103, 0
  %3111 = zext i1 %3110 to i8
  store i8 %3111, i8* %47, align 1
  %3112 = lshr i64 %3103, 63
  %3113 = trunc i64 %3112 to i8
  store i8 %3113, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v516 = select i1 %3110, i64 58, i64 14
  %3114 = add i64 %3098, %.v516
  store i64 %3114, i64* %3, align 8
  br i1 %3110, label %block_.L_441708, label %block_43fd8e

block_43fd8e:                                     ; preds = %block_.L_43fd80
  %3115 = add i64 %3114, 7
  store i64 %3115, i64* %3, align 8
  %3116 = load i64, i64* %3102, align 8
  store i64 %3116, i64* %RAX.i3798, align 8
  %3117 = add i64 %3116, 4
  %3118 = add i64 %3114, 10
  store i64 %3118, i64* %3, align 8
  %3119 = inttoptr i64 %3117 to i32*
  %3120 = load i32, i32* %3119, align 4
  %3121 = and i32 %3120, 1023
  %3122 = or i32 %3121, 554696704
  %3123 = zext i32 %3122 to i64
  store i64 %3123, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %3124 = and i32 %3120, 255
  %3125 = tail call i32 @llvm.ctpop.i32(i32 %3124)
  %3126 = trunc i32 %3125 to i8
  %3127 = and i8 %3126, 1
  %3128 = xor i8 %3127, 1
  store i8 %3128, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %3129 = add i64 %3114, 41
  store i64 %3129, i64* %3, align 8
  %3130 = load i64, i64* %3102, align 8
  store i64 %3130, i64* %RAX.i3798, align 8
  %3131 = add i64 %3130, 4
  %3132 = add i64 %3114, 44
  store i64 %3132, i64* %3, align 8
  %3133 = inttoptr i64 %3131 to i32*
  store i32 %3122, i32* %3133, align 4
  br label %block_.L_441708

block_.L_43fdbf:                                  ; preds = %block_.L_43fcde
  %3134 = add i64 %3013, -192
  %3135 = add i64 %3012, 7
  store i64 %3135, i64* %3, align 8
  %3136 = inttoptr i64 %3134 to i32*
  %3137 = load i32, i32* %3136, align 4
  store i8 0, i8* %31, align 1
  %3138 = and i32 %3137, 255
  %3139 = tail call i32 @llvm.ctpop.i32(i32 %3138)
  %3140 = trunc i32 %3139 to i8
  %3141 = and i8 %3140, 1
  %3142 = xor i8 %3141, 1
  store i8 %3142, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3143 = icmp eq i32 %3137, 0
  %3144 = zext i1 %3143 to i8
  store i8 %3144, i8* %47, align 1
  %3145 = lshr i32 %3137, 31
  %3146 = trunc i32 %3145 to i8
  store i8 %3146, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v517 = select i1 %3143, i64 242, i64 13
  %3147 = add i64 %3012, %.v517
  store i64 %3147, i64* %3, align 8
  br i1 %3143, label %block_.L_43feb1, label %block_43fdcc

block_43fdcc:                                     ; preds = %block_.L_43fdbf
  %3148 = add i64 %3013, -64
  %3149 = add i64 %3147, 4
  store i64 %3149, i64* %3, align 8
  %3150 = inttoptr i64 %3148 to i64*
  %3151 = load i64, i64* %3150, align 8
  store i64 %3151, i64* %RAX.i3798, align 8
  %3152 = add i64 %3147, 10
  store i64 %3152, i64* %3, align 8
  %3153 = inttoptr i64 %3151 to i32*
  store i32 1, i32* %3153, align 4
  %3154 = load i64, i64* %RBP.i, align 8
  %3155 = add i64 %3154, -72
  %3156 = load i64, i64* %3, align 8
  %3157 = add i64 %3156, 4
  store i64 %3157, i64* %3, align 8
  %3158 = inttoptr i64 %3155 to i64*
  %3159 = load i64, i64* %3158, align 8
  store i64 %3159, i64* %RAX.i3798, align 8
  %3160 = add i64 %3156, 10
  store i64 %3160, i64* %3, align 8
  %3161 = inttoptr i64 %3159 to i32*
  store i32 1, i32* %3161, align 4
  %3162 = load i64, i64* %RBP.i, align 8
  %3163 = add i64 %3162, -192
  %3164 = load i64, i64* %3, align 8
  %3165 = add i64 %3164, 6
  store i64 %3165, i64* %3, align 8
  %3166 = inttoptr i64 %3163 to i32*
  %3167 = load i32, i32* %3166, align 4
  %3168 = zext i32 %3167 to i64
  store i64 %3168, i64* %RCX.i4416, align 8
  %3169 = add i64 %3162, -80
  %3170 = add i64 %3164, 10
  store i64 %3170, i64* %3, align 8
  %3171 = inttoptr i64 %3169 to i64*
  %3172 = load i64, i64* %3171, align 8
  store i64 %3172, i64* %RAX.i3798, align 8
  %3173 = add i64 %3164, 12
  store i64 %3173, i64* %3, align 8
  %3174 = inttoptr i64 %3172 to i32*
  store i32 %3167, i32* %3174, align 4
  %3175 = load i64, i64* %RBP.i, align 8
  %3176 = add i64 %3175, -1688
  %3177 = load i64, i64* %3, align 8
  %3178 = add i64 %3177, 7
  store i64 %3178, i64* %3, align 8
  %3179 = inttoptr i64 %3176 to i64*
  %3180 = load i64, i64* %3179, align 8
  store i64 %3180, i64* %RAX.i3798, align 8
  store i64 %3180, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %3181 = add i64 %3175, -1692
  %3182 = add i64 %3177, 21
  store i64 %3182, i64* %3, align 8
  %3183 = inttoptr i64 %3181 to i32*
  %3184 = load i32, i32* %3183, align 4
  %3185 = zext i32 %3184 to i64
  store i64 %3185, i64* %RCX.i4416, align 8
  store i32 %3184, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  store i8 0, i8* %31, align 1
  %3186 = trunc i64 %3180 to i32
  %3187 = and i32 %3186, 255
  %3188 = tail call i32 @llvm.ctpop.i32(i32 %3187)
  %3189 = trunc i32 %3188 to i8
  %3190 = and i8 %3189, 1
  %3191 = xor i8 %3190, 1
  store i8 %3191, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3192 = icmp eq i64 %3180, 0
  %3193 = zext i1 %3192 to i8
  store i8 %3193, i8* %47, align 1
  %3194 = lshr i64 %3180, 63
  %3195 = trunc i64 %3194 to i8
  store i8 %3195, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v518 = select i1 %3192, i64 89, i64 43
  %3196 = add i64 %3177, %.v518
  store i64 %3196, i64* %3, align 8
  br i1 %3192, label %block_.L_43fe45, label %block_43fe17

block_43fe17:                                     ; preds = %block_43fdcc
  store i64 1, i64* %R8.i3721, align 8
  store i64 ptrtoint (%G__0x57df65_type* @G__0x57df65 to i64), i64* %R9.i4411, align 8
  %3197 = add i64 %3175, -1744
  %3198 = add i64 %3196, 23
  store i64 %3198, i64* %3, align 8
  %3199 = inttoptr i64 %3197 to i64*
  %3200 = load i64, i64* %3199, align 8
  store i64 %3200, i64* %RDI.i3802.pre-phi, align 8
  %3201 = add i64 %3175, -1748
  %3202 = add i64 %3196, 29
  store i64 %3202, i64* %3, align 8
  %3203 = inttoptr i64 %3201 to i32*
  %3204 = load i32, i32* %3203, align 4
  %3205 = zext i32 %3204 to i64
  store i64 %3205, i64* %RSI.i3811.pre-phi, align 8
  %3206 = add i64 %3175, -1752
  %3207 = add i64 %3196, 35
  store i64 %3207, i64* %3, align 8
  %3208 = inttoptr i64 %3206 to i32*
  %3209 = load i32, i32* %3208, align 4
  %3210 = zext i32 %3209 to i64
  store i64 %3210, i64* %RDX.i4419, align 8
  %3211 = add i64 %3175, -192
  %3212 = add i64 %3196, 41
  store i64 %3212, i64* %3, align 8
  %3213 = inttoptr i64 %3211 to i32*
  %3214 = load i32, i32* %3213, align 4
  %3215 = zext i32 %3214 to i64
  store i64 %3215, i64* %RCX.i4416, align 8
  %3216 = add i64 %3196, -162551
  %3217 = add i64 %3196, 46
  %3218 = load i64, i64* %6, align 8
  %3219 = add i64 %3218, -8
  %3220 = inttoptr i64 %3219 to i64*
  store i64 %3217, i64* %3220, align 8
  store i64 %3219, i64* %6, align 8
  store i64 %3216, i64* %3, align 8
  %call2_43fe40 = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %3216, %struct.Memory* %call2_43fce5)
  %.pre392 = load i64, i64* %3, align 8
  %.pre393 = load i64, i64* %RBP.i, align 8
  br label %block_.L_43fe45

block_.L_43fe45:                                  ; preds = %block_43fe17, %block_43fdcc
  %3221 = phi i64 [ %3175, %block_43fdcc ], [ %.pre393, %block_43fe17 ]
  %3222 = phi i64 [ %3196, %block_43fdcc ], [ %.pre392, %block_43fe17 ]
  %MEMORY.54 = phi %struct.Memory* [ %call2_43fce5, %block_43fdcc ], [ %call2_43fe40, %block_43fe17 ]
  %3223 = add i64 %3221, -80
  %3224 = add i64 %3222, 10
  store i64 %3224, i64* %3, align 8
  %3225 = inttoptr i64 %3223 to i64*
  %3226 = load i64, i64* %3225, align 8
  store i8 0, i8* %31, align 1
  %3227 = trunc i64 %3226 to i32
  %3228 = and i32 %3227, 255
  %3229 = tail call i32 @llvm.ctpop.i32(i32 %3228)
  %3230 = trunc i32 %3229 to i8
  %3231 = and i8 %3230, 1
  %3232 = xor i8 %3231, 1
  store i8 %3232, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3233 = icmp eq i64 %3226, 0
  %3234 = zext i1 %3233 to i8
  store i8 %3234, i8* %47, align 1
  %3235 = lshr i64 %3226, 63
  %3236 = trunc i64 %3235 to i8
  store i8 %3236, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v519 = select i1 %3233, i64 28, i64 16
  %3237 = add i64 %3222, %.v519
  store i64 %3237, i64* %3, align 8
  br i1 %3233, label %block_.L_43fe61, label %block_43fe55

block_43fe55:                                     ; preds = %block_.L_43fe45
  %3238 = add i64 %3221, -192
  %3239 = add i64 %3237, 6
  store i64 %3239, i64* %3, align 8
  %3240 = inttoptr i64 %3238 to i32*
  %3241 = load i32, i32* %3240, align 4
  %3242 = zext i32 %3241 to i64
  store i64 %3242, i64* %RAX.i3798, align 8
  %3243 = add i64 %3237, 10
  store i64 %3243, i64* %3, align 8
  %3244 = load i64, i64* %3225, align 8
  store i64 %3244, i64* %RCX.i4416, align 8
  %3245 = add i64 %3237, 12
  store i64 %3245, i64* %3, align 8
  %3246 = inttoptr i64 %3244 to i32*
  store i32 %3241, i32* %3246, align 4
  %.pre394 = load i64, i64* %RBP.i, align 8
  %.pre395 = load i64, i64* %3, align 8
  br label %block_.L_43fe61

block_.L_43fe61:                                  ; preds = %block_43fe55, %block_.L_43fe45
  %3247 = phi i64 [ %.pre395, %block_43fe55 ], [ %3237, %block_.L_43fe45 ]
  %3248 = phi i64 [ %.pre394, %block_43fe55 ], [ %3221, %block_.L_43fe45 ]
  %3249 = add i64 %3248, -1728
  %3250 = add i64 %3247, 8
  store i64 %3250, i64* %3, align 8
  %3251 = inttoptr i64 %3249 to i64*
  %3252 = load i64, i64* %3251, align 8
  store i8 0, i8* %31, align 1
  %3253 = trunc i64 %3252 to i32
  %3254 = and i32 %3253, 255
  %3255 = tail call i32 @llvm.ctpop.i32(i32 %3254)
  %3256 = trunc i32 %3255 to i8
  %3257 = and i8 %3256, 1
  %3258 = xor i8 %3257, 1
  store i8 %3258, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3259 = icmp eq i64 %3252, 0
  %3260 = zext i1 %3259 to i8
  store i8 %3260, i8* %47, align 1
  %3261 = lshr i64 %3252, 63
  %3262 = trunc i64 %3261 to i8
  store i8 %3262, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v520 = select i1 %3259, i64 75, i64 14
  %3263 = add i64 %3247, %.v520
  store i64 %3263, i64* %3, align 8
  br i1 %3259, label %block_.L_441708, label %block_43fe6f

block_43fe6f:                                     ; preds = %block_.L_43fe61
  %3264 = add i64 %3263, 7
  store i64 %3264, i64* %3, align 8
  %3265 = load i64, i64* %3251, align 8
  store i64 %3265, i64* %RAX.i3798, align 8
  %3266 = add i64 %3265, 4
  %3267 = add i64 %3263, 10
  store i64 %3267, i64* %3, align 8
  %3268 = inttoptr i64 %3266 to i32*
  %3269 = load i32, i32* %3268, align 4
  %3270 = and i32 %3269, 1023
  %3271 = or i32 %3270, 554696704
  %3272 = zext i32 %3271 to i64
  store i64 %3272, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %3273 = and i32 %3269, 255
  %3274 = tail call i32 @llvm.ctpop.i32(i32 %3273)
  %3275 = trunc i32 %3274 to i8
  %3276 = and i8 %3275, 1
  %3277 = xor i8 %3276, 1
  store i8 %3277, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %3278 = add i64 %3248, -192
  %3279 = add i64 %3263, 40
  store i64 %3279, i64* %3, align 8
  %3280 = inttoptr i64 %3278 to i32*
  %3281 = load i32, i32* %3280, align 4
  %3282 = shl i32 %3281, 10
  %3283 = and i32 %3282, 1047552
  %3284 = zext i32 %3283 to i64
  store i64 %3284, i64* %RDX.i4419, align 8
  %3285 = or i32 %3283, %3271
  %3286 = zext i32 %3285 to i64
  store i64 %3286, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %3287 = and i32 %3269, 255
  %3288 = tail call i32 @llvm.ctpop.i32(i32 %3287)
  %3289 = trunc i32 %3288 to i8
  %3290 = and i8 %3289, 1
  %3291 = xor i8 %3290, 1
  store i8 %3291, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %3292 = load i64, i64* %RBP.i, align 8
  %3293 = add i64 %3292, -1728
  %3294 = add i64 %3263, 58
  store i64 %3294, i64* %3, align 8
  %3295 = inttoptr i64 %3293 to i64*
  %3296 = load i64, i64* %3295, align 8
  store i64 %3296, i64* %RAX.i3798, align 8
  %3297 = add i64 %3296, 4
  %3298 = add i64 %3263, 61
  store i64 %3298, i64* %3, align 8
  %3299 = inttoptr i64 %3297 to i32*
  store i32 %3285, i32* %3299, align 4
  br label %block_.L_441708

block_.L_43feb1:                                  ; preds = %block_.L_43fdbf
  %3300 = add i64 %3147, 15
  store i64 %3300, i64* %3, align 8
  br label %block_.L_43fec0

block_.L_43fec0:                                  ; preds = %block_43fc07.block_.L_43fec0_crit_edge, %block_.L_43feb1
  %3301 = phi i64 [ %3300, %block_.L_43feb1 ], [ %2846, %block_43fc07.block_.L_43fec0_crit_edge ]
  %3302 = phi i64 [ %3013, %block_.L_43feb1 ], [ %.pre398, %block_43fc07.block_.L_43fec0_crit_edge ]
  %MEMORY.57 = phi %struct.Memory* [ %call2_43fce5, %block_.L_43feb1 ], [ %call2_43fc0b, %block_43fc07.block_.L_43fec0_crit_edge ]
  %3303 = add i64 %3302, -544
  store i64 %3303, i64* %RDI.i3802.pre-phi, align 8
  store i64 ptrtoint (%G__0x92aa50_type* @G__0x92aa50 to i64), i64* %R8.i3721, align 8
  %3304 = add i64 %3302, -384
  store i64 %3304, i64* %RSI.i3811.pre-phi, align 8
  %3305 = add i64 %3302, -92
  %3306 = add i64 %3301, 27
  store i64 %3306, i64* %3, align 8
  %3307 = inttoptr i64 %3305 to i32*
  %3308 = load i32, i32* %3307, align 4
  %3309 = zext i32 %3308 to i64
  store i64 %3309, i64* %RDX.i4419, align 8
  %3310 = add i64 %3302, -40
  %3311 = add i64 %3301, 31
  store i64 %3311, i64* %3, align 8
  %3312 = inttoptr i64 %3310 to i64*
  %3313 = load i64, i64* %3312, align 8
  store i64 %3313, i64* %RCX.i4416, align 8
  %3314 = add i64 %3301, 14256
  %3315 = add i64 %3301, 36
  %3316 = load i64, i64* %6, align 8
  %3317 = add i64 %3316, -8
  %3318 = inttoptr i64 %3317 to i64*
  store i64 %3315, i64* %3318, align 8
  store i64 %3317, i64* %6, align 8
  store i64 %3314, i64* %3, align 8
  %call2_43fedf = tail call %struct.Memory* @sub_443670.owl_shapes(%struct.State* nonnull %0, i64 %3314, %struct.Memory* %MEMORY.57)
  %3319 = load i64, i64* %RBP.i, align 8
  %3320 = add i64 %3319, -1668
  %3321 = load i64, i64* %3, align 8
  %3322 = add i64 %3321, 10
  store i64 %3322, i64* %3, align 8
  %3323 = inttoptr i64 %3320 to i32*
  store i32 0, i32* %3323, align 4
  %.pre399 = load i64, i64* %3, align 8
  br label %block_.L_43feee

block_.L_43feee:                                  ; preds = %block_.L_43ff24, %block_.L_43fec0
  %3324 = phi i64 [ %3409, %block_.L_43ff24 ], [ %.pre399, %block_.L_43fec0 ]
  %3325 = load i64, i64* %RBP.i, align 8
  %3326 = add i64 %3325, -1668
  %3327 = add i64 %3324, 7
  store i64 %3327, i64* %3, align 8
  %3328 = inttoptr i64 %3326 to i32*
  %3329 = load i32, i32* %3328, align 4
  %3330 = add i32 %3329, -2
  %3331 = icmp ult i32 %3329, 2
  %3332 = zext i1 %3331 to i8
  store i8 %3332, i8* %31, align 1
  %3333 = and i32 %3330, 255
  %3334 = tail call i32 @llvm.ctpop.i32(i32 %3333)
  %3335 = trunc i32 %3334 to i8
  %3336 = and i8 %3335, 1
  %3337 = xor i8 %3336, 1
  store i8 %3337, i8* %38, align 1
  %3338 = xor i32 %3330, %3329
  %3339 = lshr i32 %3338, 4
  %3340 = trunc i32 %3339 to i8
  %3341 = and i8 %3340, 1
  store i8 %3341, i8* %44, align 1
  %3342 = icmp eq i32 %3330, 0
  %3343 = zext i1 %3342 to i8
  store i8 %3343, i8* %47, align 1
  %3344 = lshr i32 %3330, 31
  %3345 = trunc i32 %3344 to i8
  store i8 %3345, i8* %50, align 1
  %3346 = lshr i32 %3329, 31
  %3347 = xor i32 %3344, %3346
  %3348 = add nuw nsw i32 %3347, %3346
  %3349 = icmp eq i32 %3348, 2
  %3350 = zext i1 %3349 to i8
  store i8 %3350, i8* %56, align 1
  %3351 = icmp ne i8 %3345, 0
  %3352 = xor i1 %3351, %3349
  %.v521 = select i1 %3352, i64 13, i64 79
  %3353 = add i64 %3324, %.v521
  store i64 %3353, i64* %3, align 8
  br i1 %3352, label %block_43fefb, label %block_.L_43ff3d.loopexit

block_43fefb:                                     ; preds = %block_.L_43feee
  %3354 = add i64 %3325, -544
  store i64 %3354, i64* %RDI.i3802.pre-phi, align 8
  store i64 1, i64* %RCX.i4416, align 8
  %3355 = add i64 %3325, -384
  store i64 %3355, i64* %RDX.i4419, align 8
  %3356 = add i64 %3325, -92
  %3357 = add i64 %3353, 22
  store i64 %3357, i64* %3, align 8
  %3358 = inttoptr i64 %3356 to i32*
  %3359 = load i32, i32* %3358, align 4
  %3360 = zext i32 %3359 to i64
  store i64 %3360, i64* %RSI.i3811.pre-phi, align 8
  %3361 = add i64 %3353, 14389
  %3362 = add i64 %3353, 27
  %3363 = load i64, i64* %6, align 8
  %3364 = add i64 %3363, -8
  %3365 = inttoptr i64 %3364 to i64*
  store i64 %3362, i64* %3365, align 8
  store i64 %3364, i64* %6, align 8
  store i64 %3361, i64* %3, align 8
  %call2_43ff11 = tail call %struct.Memory* @sub_443730.get_next_move_from_list(%struct.State* nonnull %0, i64 %3361, %struct.Memory* %call2_43fedf)
  %3366 = load i32, i32* %EAX.i4398, align 4
  %3367 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %3368 = and i32 %3366, 255
  %3369 = tail call i32 @llvm.ctpop.i32(i32 %3368)
  %3370 = trunc i32 %3369 to i8
  %3371 = and i8 %3370, 1
  %3372 = xor i8 %3371, 1
  store i8 %3372, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3373 = icmp eq i32 %3366, 0
  %3374 = zext i1 %3373 to i8
  store i8 %3374, i8* %47, align 1
  %3375 = lshr i32 %3366, 31
  %3376 = trunc i32 %3375 to i8
  store i8 %3376, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v621 = select i1 %3373, i64 9, i64 14
  %3377 = add i64 %3367, %.v621
  store i64 %3377, i64* %3, align 8
  br i1 %3373, label %block_43ff1f, label %block_.L_43ff24

block_43ff1f:                                     ; preds = %block_43fefb
  %3378 = add i64 %3377, 30
  store i64 %3378, i64* %3, align 8
  %.pre400 = load i64, i64* %RBP.i, align 8
  br label %block_.L_43ff3d

block_.L_43ff24:                                  ; preds = %block_43fefb
  %3379 = load i64, i64* %RBP.i, align 8
  %3380 = add i64 %3379, -1668
  %3381 = add i64 %3377, 11
  store i64 %3381, i64* %3, align 8
  %3382 = inttoptr i64 %3380 to i32*
  %3383 = load i32, i32* %3382, align 4
  %3384 = add i32 %3383, 1
  %3385 = zext i32 %3384 to i64
  store i64 %3385, i64* %RAX.i3798, align 8
  %3386 = icmp eq i32 %3383, -1
  %3387 = icmp eq i32 %3384, 0
  %3388 = or i1 %3386, %3387
  %3389 = zext i1 %3388 to i8
  store i8 %3389, i8* %31, align 1
  %3390 = and i32 %3384, 255
  %3391 = tail call i32 @llvm.ctpop.i32(i32 %3390)
  %3392 = trunc i32 %3391 to i8
  %3393 = and i8 %3392, 1
  %3394 = xor i8 %3393, 1
  store i8 %3394, i8* %38, align 1
  %3395 = xor i32 %3384, %3383
  %3396 = lshr i32 %3395, 4
  %3397 = trunc i32 %3396 to i8
  %3398 = and i8 %3397, 1
  store i8 %3398, i8* %44, align 1
  %3399 = zext i1 %3387 to i8
  store i8 %3399, i8* %47, align 1
  %3400 = lshr i32 %3384, 31
  %3401 = trunc i32 %3400 to i8
  store i8 %3401, i8* %50, align 1
  %3402 = lshr i32 %3383, 31
  %3403 = xor i32 %3400, %3402
  %3404 = add nuw nsw i32 %3403, %3400
  %3405 = icmp eq i32 %3404, 2
  %3406 = zext i1 %3405 to i8
  store i8 %3406, i8* %56, align 1
  %3407 = add i64 %3377, 20
  store i64 %3407, i64* %3, align 8
  store i32 %3384, i32* %3382, align 4
  %3408 = load i64, i64* %3, align 8
  %3409 = add i64 %3408, -74
  store i64 %3409, i64* %3, align 8
  br label %block_.L_43feee

block_.L_43ff3d.loopexit:                         ; preds = %block_.L_43feee
  br label %block_.L_43ff3d

block_.L_43ff3d:                                  ; preds = %block_.L_43ff3d.loopexit, %block_43ff1f
  %3410 = phi i64 [ %3378, %block_43ff1f ], [ %3353, %block_.L_43ff3d.loopexit ]
  %3411 = phi i64 [ %.pre400, %block_43ff1f ], [ %3325, %block_.L_43ff3d.loopexit ]
  %3412 = add i64 %3411, -512
  store i64 %3412, i64* %RDI.i3802.pre-phi, align 8
  store i64 ptrtoint (%G__0x919b70_type* @G__0x919b70 to i64), i64* %R8.i3721, align 8
  %3413 = add i64 %3411, -480
  store i64 %3413, i64* %RSI.i3811.pre-phi, align 8
  %3414 = add i64 %3411, -92
  %3415 = add i64 %3410, 27
  store i64 %3415, i64* %3, align 8
  %3416 = inttoptr i64 %3414 to i32*
  %3417 = load i32, i32* %3416, align 4
  %3418 = zext i32 %3417 to i64
  store i64 %3418, i64* %RDX.i4419, align 8
  %3419 = add i64 %3411, -48
  %3420 = add i64 %3410, 31
  store i64 %3420, i64* %3, align 8
  %3421 = inttoptr i64 %3419 to i64*
  %3422 = load i64, i64* %3421, align 8
  store i64 %3422, i64* %RCX.i4416, align 8
  %3423 = add i64 %3410, 14131
  %3424 = add i64 %3410, 36
  %3425 = load i64, i64* %6, align 8
  %3426 = add i64 %3425, -8
  %3427 = inttoptr i64 %3426 to i64*
  store i64 %3424, i64* %3427, align 8
  store i64 %3426, i64* %6, align 8
  store i64 %3423, i64* %3, align 8
  %call2_43ff5c = tail call %struct.Memory* @sub_443670.owl_shapes(%struct.State* nonnull %0, i64 %3423, %struct.Memory* %call2_43fedf)
  %3428 = load i64, i64* %RBP.i, align 8
  %3429 = add i64 %3428, -1668
  %3430 = load i64, i64* %3, align 8
  %3431 = add i64 %3430, 10
  store i64 %3431, i64* %3, align 8
  %3432 = inttoptr i64 %3429 to i32*
  store i32 0, i32* %3432, align 4
  %.pre401 = load i64, i64* %3, align 8
  br label %block_.L_43ff6b

block_.L_43ff6b:                                  ; preds = %block_.L_43ffa1, %block_.L_43ff3d
  %3433 = phi i64 [ %3518, %block_.L_43ffa1 ], [ %.pre401, %block_.L_43ff3d ]
  %3434 = load i64, i64* %RBP.i, align 8
  %3435 = add i64 %3434, -1668
  %3436 = add i64 %3433, 7
  store i64 %3436, i64* %3, align 8
  %3437 = inttoptr i64 %3435 to i32*
  %3438 = load i32, i32* %3437, align 4
  %3439 = add i32 %3438, -2
  %3440 = icmp ult i32 %3438, 2
  %3441 = zext i1 %3440 to i8
  store i8 %3441, i8* %31, align 1
  %3442 = and i32 %3439, 255
  %3443 = tail call i32 @llvm.ctpop.i32(i32 %3442)
  %3444 = trunc i32 %3443 to i8
  %3445 = and i8 %3444, 1
  %3446 = xor i8 %3445, 1
  store i8 %3446, i8* %38, align 1
  %3447 = xor i32 %3439, %3438
  %3448 = lshr i32 %3447, 4
  %3449 = trunc i32 %3448 to i8
  %3450 = and i8 %3449, 1
  store i8 %3450, i8* %44, align 1
  %3451 = icmp eq i32 %3439, 0
  %3452 = zext i1 %3451 to i8
  store i8 %3452, i8* %47, align 1
  %3453 = lshr i32 %3439, 31
  %3454 = trunc i32 %3453 to i8
  store i8 %3454, i8* %50, align 1
  %3455 = lshr i32 %3438, 31
  %3456 = xor i32 %3453, %3455
  %3457 = add nuw nsw i32 %3456, %3455
  %3458 = icmp eq i32 %3457, 2
  %3459 = zext i1 %3458 to i8
  store i8 %3459, i8* %56, align 1
  %3460 = icmp ne i8 %3454, 0
  %3461 = xor i1 %3460, %3458
  %.v522 = select i1 %3461, i64 13, i64 79
  %3462 = add i64 %3433, %.v522
  store i64 %3462, i64* %3, align 8
  br i1 %3461, label %block_43ff78, label %block_.L_43ffba.loopexit

block_43ff78:                                     ; preds = %block_.L_43ff6b
  %3463 = add i64 %3434, -512
  store i64 %3463, i64* %RDI.i3802.pre-phi, align 8
  store i64 1, i64* %RCX.i4416, align 8
  %3464 = add i64 %3434, -480
  store i64 %3464, i64* %RDX.i4419, align 8
  %3465 = add i64 %3434, -92
  %3466 = add i64 %3462, 22
  store i64 %3466, i64* %3, align 8
  %3467 = inttoptr i64 %3465 to i32*
  %3468 = load i32, i32* %3467, align 4
  %3469 = zext i32 %3468 to i64
  store i64 %3469, i64* %RSI.i3811.pre-phi, align 8
  %3470 = add i64 %3462, 14264
  %3471 = add i64 %3462, 27
  %3472 = load i64, i64* %6, align 8
  %3473 = add i64 %3472, -8
  %3474 = inttoptr i64 %3473 to i64*
  store i64 %3471, i64* %3474, align 8
  store i64 %3473, i64* %6, align 8
  store i64 %3470, i64* %3, align 8
  %call2_43ff8e = tail call %struct.Memory* @sub_443730.get_next_move_from_list(%struct.State* nonnull %0, i64 %3470, %struct.Memory* %call2_43ff5c)
  %3475 = load i32, i32* %EAX.i4398, align 4
  %3476 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %3477 = and i32 %3475, 255
  %3478 = tail call i32 @llvm.ctpop.i32(i32 %3477)
  %3479 = trunc i32 %3478 to i8
  %3480 = and i8 %3479, 1
  %3481 = xor i8 %3480, 1
  store i8 %3481, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3482 = icmp eq i32 %3475, 0
  %3483 = zext i1 %3482 to i8
  store i8 %3483, i8* %47, align 1
  %3484 = lshr i32 %3475, 31
  %3485 = trunc i32 %3484 to i8
  store i8 %3485, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v620 = select i1 %3482, i64 9, i64 14
  %3486 = add i64 %3476, %.v620
  store i64 %3486, i64* %3, align 8
  br i1 %3482, label %block_43ff9c, label %block_.L_43ffa1

block_43ff9c:                                     ; preds = %block_43ff78
  %3487 = add i64 %3486, 30
  store i64 %3487, i64* %3, align 8
  %.pre402 = load i64, i64* %RBP.i, align 8
  br label %block_.L_43ffba

block_.L_43ffa1:                                  ; preds = %block_43ff78
  %3488 = load i64, i64* %RBP.i, align 8
  %3489 = add i64 %3488, -1668
  %3490 = add i64 %3486, 11
  store i64 %3490, i64* %3, align 8
  %3491 = inttoptr i64 %3489 to i32*
  %3492 = load i32, i32* %3491, align 4
  %3493 = add i32 %3492, 1
  %3494 = zext i32 %3493 to i64
  store i64 %3494, i64* %RAX.i3798, align 8
  %3495 = icmp eq i32 %3492, -1
  %3496 = icmp eq i32 %3493, 0
  %3497 = or i1 %3495, %3496
  %3498 = zext i1 %3497 to i8
  store i8 %3498, i8* %31, align 1
  %3499 = and i32 %3493, 255
  %3500 = tail call i32 @llvm.ctpop.i32(i32 %3499)
  %3501 = trunc i32 %3500 to i8
  %3502 = and i8 %3501, 1
  %3503 = xor i8 %3502, 1
  store i8 %3503, i8* %38, align 1
  %3504 = xor i32 %3493, %3492
  %3505 = lshr i32 %3504, 4
  %3506 = trunc i32 %3505 to i8
  %3507 = and i8 %3506, 1
  store i8 %3507, i8* %44, align 1
  %3508 = zext i1 %3496 to i8
  store i8 %3508, i8* %47, align 1
  %3509 = lshr i32 %3493, 31
  %3510 = trunc i32 %3509 to i8
  store i8 %3510, i8* %50, align 1
  %3511 = lshr i32 %3492, 31
  %3512 = xor i32 %3509, %3511
  %3513 = add nuw nsw i32 %3512, %3509
  %3514 = icmp eq i32 %3513, 2
  %3515 = zext i1 %3514 to i8
  store i8 %3515, i8* %56, align 1
  %3516 = add i64 %3486, 20
  store i64 %3516, i64* %3, align 8
  store i32 %3493, i32* %3491, align 4
  %3517 = load i64, i64* %3, align 8
  %3518 = add i64 %3517, -74
  store i64 %3518, i64* %3, align 8
  br label %block_.L_43ff6b

block_.L_43ffba.loopexit:                         ; preds = %block_.L_43ff6b
  br label %block_.L_43ffba

block_.L_43ffba:                                  ; preds = %block_.L_43ffba.loopexit, %block_43ff9c
  %3519 = phi i64 [ %3487, %block_43ff9c ], [ %3462, %block_.L_43ffba.loopexit ]
  %3520 = phi i64 [ %.pre402, %block_43ff9c ], [ %3434, %block_.L_43ffba.loopexit ]
  %3521 = add i64 %3520, -1668
  %3522 = add i64 %3519, 10
  store i64 %3522, i64* %3, align 8
  %3523 = inttoptr i64 %3521 to i32*
  store i32 0, i32* %3523, align 4
  %AL.i2654 = bitcast %union.anon* %57 to i8*
  %CL.i2655 = bitcast %union.anon* %99 to i8*
  %DL.i2633 = bitcast %union.anon* %92 to i8*
  %3524 = bitcast i64* %6 to i32**
  %.pre403 = load i64, i64* %3, align 8
  br label %block_.L_43ffc4

block_.L_43ffc4:                                  ; preds = %block_.L_4400f2, %block_.L_43ffba
  %3525 = phi i64 [ %.pre403, %block_.L_43ffba ], [ %4162, %block_.L_4400f2 ]
  %MEMORY.62 = phi %struct.Memory* [ %call2_43ff5c, %block_.L_43ffba ], [ %call2_4401bd, %block_.L_4400f2 ]
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i8 0, i8* %CL.i2655, align 1
  %3526 = load i64, i64* %RBP.i, align 8
  %3527 = add i64 %3526, -1668
  %3528 = add i64 %3525, 11
  store i64 %3528, i64* %3, align 8
  %3529 = inttoptr i64 %3527 to i32*
  %3530 = load i32, i32* %3529, align 4
  %3531 = add i32 %3530, -2
  %3532 = icmp ult i32 %3530, 2
  %3533 = zext i1 %3532 to i8
  store i8 %3533, i8* %31, align 1
  %3534 = and i32 %3531, 255
  %3535 = tail call i32 @llvm.ctpop.i32(i32 %3534)
  %3536 = trunc i32 %3535 to i8
  %3537 = and i8 %3536, 1
  %3538 = xor i8 %3537, 1
  store i8 %3538, i8* %38, align 1
  %3539 = xor i32 %3531, %3530
  %3540 = lshr i32 %3539, 4
  %3541 = trunc i32 %3540 to i8
  %3542 = and i8 %3541, 1
  store i8 %3542, i8* %44, align 1
  %3543 = icmp eq i32 %3531, 0
  %3544 = zext i1 %3543 to i8
  store i8 %3544, i8* %47, align 1
  %3545 = lshr i32 %3531, 31
  %3546 = trunc i32 %3545 to i8
  store i8 %3546, i8* %50, align 1
  %3547 = lshr i32 %3530, 31
  %3548 = xor i32 %3545, %3547
  %3549 = add nuw nsw i32 %3548, %3547
  %3550 = icmp eq i32 %3549, 2
  %3551 = zext i1 %3550 to i8
  store i8 %3551, i8* %56, align 1
  %3552 = add i64 %3526, -3481
  %3553 = add i64 %3525, 17
  store i64 %3553, i64* %3, align 8
  %3554 = inttoptr i64 %3552 to i8*
  store i8 0, i8* %3554, align 1
  %3555 = load i64, i64* %3, align 8
  %3556 = add i64 %3555, 39
  %3557 = add i64 %3555, 6
  %3558 = load i8, i8* %50, align 1
  %3559 = icmp ne i8 %3558, 0
  %3560 = load i8, i8* %56, align 1
  %3561 = icmp ne i8 %3560, 0
  %3562 = xor i1 %3559, %3561
  %3563 = select i1 %3562, i64 %3557, i64 %3556
  store i64 %3563, i64* %3, align 8
  br i1 %3562, label %block_43ffdb, label %block_.L_43fffc

block_43ffdb:                                     ; preds = %block_.L_43ffc4
  %3564 = load i64, i64* %RBP.i, align 8
  %3565 = add i64 %3564, -192
  store i64 %3565, i64* %RAX.i3798, align 8
  %3566 = add i64 %3564, -1668
  %3567 = add i64 %3563, 14
  store i64 %3567, i64* %3, align 8
  %3568 = inttoptr i64 %3566 to i32*
  %3569 = load i32, i32* %3568, align 4
  %3570 = sext i32 %3569 to i64
  %3571 = shl nsw i64 %3570, 5
  store i64 %3571, i64* %RCX.i4416, align 8
  %3572 = add i64 %3571, %3565
  store i64 %3572, i64* %RAX.i3798, align 8
  %3573 = icmp ult i64 %3572, %3565
  %3574 = icmp ult i64 %3572, %3571
  %3575 = or i1 %3573, %3574
  %3576 = zext i1 %3575 to i8
  store i8 %3576, i8* %31, align 1
  %3577 = trunc i64 %3572 to i32
  %3578 = and i32 %3577, 255
  %3579 = tail call i32 @llvm.ctpop.i32(i32 %3578)
  %3580 = trunc i32 %3579 to i8
  %3581 = and i8 %3580, 1
  %3582 = xor i8 %3581, 1
  store i8 %3582, i8* %38, align 1
  %3583 = xor i64 %3565, %3572
  %3584 = lshr i64 %3583, 4
  %3585 = trunc i64 %3584 to i8
  %3586 = and i8 %3585, 1
  store i8 %3586, i8* %44, align 1
  %3587 = icmp eq i64 %3572, 0
  %3588 = zext i1 %3587 to i8
  store i8 %3588, i8* %47, align 1
  %3589 = lshr i64 %3572, 63
  %3590 = trunc i64 %3589 to i8
  store i8 %3590, i8* %50, align 1
  %3591 = lshr i64 %3565, 63
  %3592 = lshr i64 %3570, 58
  %3593 = and i64 %3592, 1
  %3594 = xor i64 %3589, %3591
  %3595 = xor i64 %3589, %3593
  %3596 = add nuw nsw i64 %3594, %3595
  %3597 = icmp eq i64 %3596, 2
  %3598 = zext i1 %3597 to i8
  store i8 %3598, i8* %56, align 1
  %3599 = inttoptr i64 %3572 to i32*
  %3600 = add i64 %3563, 24
  store i64 %3600, i64* %3, align 8
  %3601 = load i32, i32* %3599, align 4
  store i8 0, i8* %31, align 1
  %3602 = and i32 %3601, 255
  %3603 = tail call i32 @llvm.ctpop.i32(i32 %3602)
  %3604 = trunc i32 %3603 to i8
  %3605 = and i8 %3604, 1
  %3606 = xor i8 %3605, 1
  store i8 %3606, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3607 = icmp eq i32 %3601, 0
  %3608 = zext i1 %3607 to i8
  store i8 %3608, i8* %47, align 1
  %3609 = lshr i32 %3601, 31
  %3610 = trunc i32 %3609 to i8
  store i8 %3610, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %3611 = xor i1 %3607, true
  %3612 = zext i1 %3611 to i8
  store i8 %3612, i8* %DL.i2633, align 1
  %3613 = add i64 %3564, -3481
  %3614 = add i64 %3563, 33
  store i64 %3614, i64* %3, align 8
  %3615 = inttoptr i64 %3613 to i8*
  store i8 %3612, i8* %3615, align 1
  %.pre404 = load i64, i64* %3, align 8
  br label %block_.L_43fffc

block_.L_43fffc:                                  ; preds = %block_.L_43ffc4, %block_43ffdb
  %3616 = phi i64 [ %3556, %block_.L_43ffc4 ], [ %.pre404, %block_43ffdb ]
  %3617 = load i64, i64* %RBP.i, align 8
  %3618 = add i64 %3617, -3481
  %3619 = add i64 %3616, 6
  store i64 %3619, i64* %3, align 8
  %3620 = inttoptr i64 %3618 to i8*
  %3621 = load i8, i8* %3620, align 1
  store i8 %3621, i8* %AL.i2654, align 1
  %3622 = and i8 %3621, 1
  store i8 0, i8* %31, align 1
  %3623 = zext i8 %3622 to i32
  %3624 = tail call i32 @llvm.ctpop.i32(i32 %3623)
  %3625 = trunc i32 %3624 to i8
  %3626 = xor i8 %3625, 1
  store i8 %3626, i8* %38, align 1
  %3627 = xor i8 %3622, 1
  store i8 %3627, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %3628 = icmp eq i8 %3627, 0
  %.v = select i1 %3628, i64 19, i64 14
  %3629 = add i64 %3616, %.v
  store i64 %3629, i64* %3, align 8
  br i1 %3628, label %block_.L_44000f, label %block_44000a

block_44000a:                                     ; preds = %block_.L_43fffc
  %3630 = add i64 %3617, -1668
  %3631 = add i64 %3629, 470
  store i64 %3631, i64* %3, align 8
  %3632 = inttoptr i64 %3630 to i32*
  store i32 0, i32* %3632, align 4
  %.pre405 = load i64, i64* %3, align 8
  br label %block_.L_4401e0

block_.L_44000f:                                  ; preds = %block_.L_43fffc
  %3633 = add i64 %3617, -192
  store i64 %3633, i64* %RAX.i3798, align 8
  %3634 = add i64 %3617, -1668
  %3635 = add i64 %3629, 14
  store i64 %3635, i64* %3, align 8
  %3636 = inttoptr i64 %3634 to i32*
  %3637 = load i32, i32* %3636, align 4
  %3638 = sext i32 %3637 to i64
  %3639 = shl nsw i64 %3638, 5
  store i64 %3639, i64* %RCX.i4416, align 8
  %3640 = add i64 %3639, %3633
  store i64 %3640, i64* %RAX.i3798, align 8
  %3641 = icmp ult i64 %3640, %3633
  %3642 = icmp ult i64 %3640, %3639
  %3643 = or i1 %3641, %3642
  %3644 = zext i1 %3643 to i8
  store i8 %3644, i8* %31, align 1
  %3645 = trunc i64 %3640 to i32
  %3646 = and i32 %3645, 255
  %3647 = tail call i32 @llvm.ctpop.i32(i32 %3646)
  %3648 = trunc i32 %3647 to i8
  %3649 = and i8 %3648, 1
  %3650 = xor i8 %3649, 1
  store i8 %3650, i8* %38, align 1
  %3651 = xor i64 %3633, %3640
  %3652 = lshr i64 %3651, 4
  %3653 = trunc i64 %3652 to i8
  %3654 = and i8 %3653, 1
  store i8 %3654, i8* %44, align 1
  %3655 = icmp eq i64 %3640, 0
  %3656 = zext i1 %3655 to i8
  store i8 %3656, i8* %47, align 1
  %3657 = lshr i64 %3640, 63
  %3658 = trunc i64 %3657 to i8
  store i8 %3658, i8* %50, align 1
  %3659 = lshr i64 %3633, 63
  %3660 = lshr i64 %3638, 58
  %3661 = and i64 %3660, 1
  %3662 = xor i64 %3657, %3659
  %3663 = xor i64 %3657, %3661
  %3664 = add nuw nsw i64 %3662, %3663
  %3665 = icmp eq i64 %3664, 2
  %3666 = zext i1 %3665 to i8
  store i8 %3666, i8* %56, align 1
  %3667 = inttoptr i64 %3640 to i32*
  %3668 = add i64 %3629, 23
  store i64 %3668, i64* %3, align 8
  %3669 = load i32, i32* %3667, align 4
  %3670 = zext i32 %3669 to i64
  store i64 %3670, i64* %RDI.i3802.pre-phi, align 8
  %3671 = add i64 %3617, -48
  %3672 = add i64 %3629, 27
  store i64 %3672, i64* %3, align 8
  %3673 = inttoptr i64 %3671 to i64*
  %3674 = load i64, i64* %3673, align 8
  store i64 %3674, i64* %RSI.i3811.pre-phi, align 8
  %3675 = add i64 %3629, 16001
  %3676 = add i64 %3629, 32
  %3677 = load i64, i64* %6, align 8
  %3678 = add i64 %3677, -8
  %3679 = inttoptr i64 %3678 to i64*
  store i64 %3676, i64* %3679, align 8
  store i64 %3678, i64* %6, align 8
  store i64 %3675, i64* %3, align 8
  %call2_44002a = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %3675, %struct.Memory* %MEMORY.62)
  %3680 = load i32, i32* %EAX.i4398, align 4
  %3681 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %3682 = and i32 %3680, 255
  %3683 = tail call i32 @llvm.ctpop.i32(i32 %3682)
  %3684 = trunc i32 %3683 to i8
  %3685 = and i8 %3684, 1
  %3686 = xor i8 %3685, 1
  store i8 %3686, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3687 = icmp eq i32 %3680, 0
  %3688 = zext i1 %3687 to i8
  store i8 %3688, i8* %47, align 1
  %3689 = lshr i32 %3680, 31
  %3690 = trunc i32 %3689 to i8
  store i8 %3690, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v616 = select i1 %3687, i64 195, i64 9
  %3691 = add i64 %3681, %.v616
  store i64 %3691, i64* %3, align 8
  br i1 %3687, label %block_.L_4400f2, label %block_440038

block_440038:                                     ; preds = %block_.L_44000f
  %3692 = load i64, i64* %RBP.i, align 8
  %3693 = add i64 %3692, -192
  store i64 %3693, i64* %RAX.i3798, align 8
  %3694 = add i64 %3692, -1668
  %3695 = add i64 %3691, 14
  store i64 %3695, i64* %3, align 8
  %3696 = inttoptr i64 %3694 to i32*
  %3697 = load i32, i32* %3696, align 4
  %3698 = sext i32 %3697 to i64
  %3699 = shl nsw i64 %3698, 5
  store i64 %3699, i64* %RCX.i4416, align 8
  %3700 = add i64 %3699, %3693
  store i64 %3700, i64* %RAX.i3798, align 8
  %3701 = icmp ult i64 %3700, %3693
  %3702 = icmp ult i64 %3700, %3699
  %3703 = or i1 %3701, %3702
  %3704 = zext i1 %3703 to i8
  store i8 %3704, i8* %31, align 1
  %3705 = trunc i64 %3700 to i32
  %3706 = and i32 %3705, 255
  %3707 = tail call i32 @llvm.ctpop.i32(i32 %3706)
  %3708 = trunc i32 %3707 to i8
  %3709 = and i8 %3708, 1
  %3710 = xor i8 %3709, 1
  store i8 %3710, i8* %38, align 1
  %3711 = xor i64 %3693, %3700
  %3712 = lshr i64 %3711, 4
  %3713 = trunc i64 %3712 to i8
  %3714 = and i8 %3713, 1
  store i8 %3714, i8* %44, align 1
  %3715 = icmp eq i64 %3700, 0
  %3716 = zext i1 %3715 to i8
  store i8 %3716, i8* %47, align 1
  %3717 = lshr i64 %3700, 63
  %3718 = trunc i64 %3717 to i8
  store i8 %3718, i8* %50, align 1
  %3719 = lshr i64 %3693, 63
  %3720 = lshr i64 %3698, 58
  %3721 = and i64 %3720, 1
  %3722 = xor i64 %3717, %3719
  %3723 = xor i64 %3717, %3721
  %3724 = add nuw nsw i64 %3722, %3723
  %3725 = icmp eq i64 %3724, 2
  %3726 = zext i1 %3725 to i8
  store i8 %3726, i8* %56, align 1
  %3727 = inttoptr i64 %3700 to i32*
  %3728 = add i64 %3691, 23
  store i64 %3728, i64* %3, align 8
  %3729 = load i32, i32* %3727, align 4
  %3730 = zext i32 %3729 to i64
  store i64 %3730, i64* %RDI.i3802.pre-phi, align 8
  %3731 = add i64 %3692, -40
  %3732 = add i64 %3691, 27
  store i64 %3732, i64* %3, align 8
  %3733 = inttoptr i64 %3731 to i64*
  %3734 = load i64, i64* %3733, align 8
  store i64 %3734, i64* %RSI.i3811.pre-phi, align 8
  %3735 = add i64 %3691, 15960
  %3736 = add i64 %3691, 32
  %3737 = load i64, i64* %6, align 8
  %3738 = add i64 %3737, -8
  %3739 = inttoptr i64 %3738 to i64*
  store i64 %3736, i64* %3739, align 8
  store i64 %3738, i64* %6, align 8
  store i64 %3735, i64* %3, align 8
  %call2_440053 = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %3735, %struct.Memory* %MEMORY.62)
  %3740 = load i32, i32* %EAX.i4398, align 4
  %3741 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %3742 = and i32 %3740, 255
  %3743 = tail call i32 @llvm.ctpop.i32(i32 %3742)
  %3744 = trunc i32 %3743 to i8
  %3745 = and i8 %3744, 1
  %3746 = xor i8 %3745, 1
  store i8 %3746, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3747 = icmp eq i32 %3740, 0
  %3748 = zext i1 %3747 to i8
  store i8 %3748, i8* %47, align 1
  %3749 = lshr i32 %3740, 31
  %3750 = trunc i32 %3749 to i8
  store i8 %3750, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v617 = select i1 %3747, i64 9, i64 79
  %3751 = add i64 %3741, %.v617
  %3752 = load i64, i64* %RBP.i, align 8
  %3753 = add i64 %3752, -192
  store i64 %3753, i64* %RAX.i3798, align 8
  %3754 = add i64 %3752, -1668
  %3755 = add i64 %3751, 14
  store i64 %3755, i64* %3, align 8
  %3756 = inttoptr i64 %3754 to i32*
  %3757 = load i32, i32* %3756, align 4
  %3758 = sext i32 %3757 to i64
  %3759 = shl nsw i64 %3758, 5
  store i64 %3759, i64* %RCX.i4416, align 8
  %3760 = add i64 %3759, %3753
  store i64 %3760, i64* %RAX.i3798, align 8
  %3761 = icmp ult i64 %3760, %3753
  %3762 = icmp ult i64 %3760, %3759
  %3763 = or i1 %3761, %3762
  %3764 = zext i1 %3763 to i8
  store i8 %3764, i8* %31, align 1
  %3765 = trunc i64 %3760 to i32
  %3766 = and i32 %3765, 255
  %3767 = tail call i32 @llvm.ctpop.i32(i32 %3766)
  %3768 = trunc i32 %3767 to i8
  %3769 = and i8 %3768, 1
  %3770 = xor i8 %3769, 1
  store i8 %3770, i8* %38, align 1
  %3771 = xor i64 %3753, %3760
  %3772 = lshr i64 %3771, 4
  %3773 = trunc i64 %3772 to i8
  %3774 = and i8 %3773, 1
  store i8 %3774, i8* %44, align 1
  %3775 = icmp eq i64 %3760, 0
  %3776 = zext i1 %3775 to i8
  store i8 %3776, i8* %47, align 1
  %3777 = lshr i64 %3760, 63
  %3778 = trunc i64 %3777 to i8
  store i8 %3778, i8* %50, align 1
  %3779 = lshr i64 %3753, 63
  %3780 = lshr i64 %3758, 58
  %3781 = and i64 %3780, 1
  %3782 = xor i64 %3777, %3779
  %3783 = xor i64 %3777, %3781
  %3784 = add nuw nsw i64 %3782, %3783
  %3785 = icmp eq i64 %3784, 2
  %3786 = zext i1 %3785 to i8
  store i8 %3786, i8* %56, align 1
  %3787 = inttoptr i64 %3760 to i32*
  %3788 = add i64 %3751, 23
  store i64 %3788, i64* %3, align 8
  %3789 = load i32, i32* %3787, align 4
  %3790 = zext i32 %3789 to i64
  store i64 %3790, i64* %RDI.i3802.pre-phi, align 8
  %3791 = add i64 %3752, -92
  %3792 = add i64 %3751, 26
  store i64 %3792, i64* %3, align 8
  %3793 = inttoptr i64 %3791 to i32*
  %3794 = load i32, i32* %3793, align 4
  %3795 = zext i32 %3794 to i64
  store i64 %3795, i64* %RSI.i3811.pre-phi, align 8
  br i1 %3747, label %block_440061, label %block_.L_4400a7

block_440061:                                     ; preds = %block_440038
  %3796 = add i64 %3751, 179151
  %3797 = add i64 %3751, 31
  %3798 = load i64, i64* %6, align 8
  %3799 = add i64 %3798, -8
  %3800 = inttoptr i64 %3799 to i64*
  store i64 %3797, i64* %3800, align 8
  store i64 %3799, i64* %6, align 8
  store i64 %3796, i64* %3, align 8
  %call2_44007b = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %3796, %struct.Memory* %MEMORY.62)
  %3801 = load i32, i32* %EAX.i4398, align 4
  %3802 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %3803 = and i32 %3801, 255
  %3804 = tail call i32 @llvm.ctpop.i32(i32 %3803)
  %3805 = trunc i32 %3804 to i8
  %3806 = and i8 %3805, 1
  %3807 = xor i8 %3806, 1
  store i8 %3807, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3808 = icmp eq i32 %3801, 0
  %3809 = zext i1 %3808 to i8
  store i8 %3809, i8* %47, align 1
  %3810 = lshr i32 %3801, 31
  %3811 = trunc i32 %3810 to i8
  store i8 %3811, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v619 = select i1 %3808, i64 24, i64 9
  %3812 = add i64 %3802, %.v619
  store i64 %3812, i64* %3, align 8
  %3813 = load i64, i64* %RBP.i, align 8
  br i1 %3808, label %block_.L_440098, label %block_440089

block_440089:                                     ; preds = %block_440061
  %3814 = add i64 %3813, -1236
  %3815 = add i64 %3812, 10
  store i64 %3815, i64* %3, align 8
  %3816 = inttoptr i64 %3814 to i32*
  store i32 1, i32* %3816, align 4
  %3817 = load i64, i64* %3, align 8
  %3818 = add i64 %3817, 15
  store i64 %3818, i64* %3, align 8
  br label %block_.L_4400a2

block_.L_440098:                                  ; preds = %block_440061
  %3819 = add i64 %3813, -1240
  %3820 = add i64 %3812, 10
  store i64 %3820, i64* %3, align 8
  %3821 = inttoptr i64 %3819 to i32*
  store i32 1, i32* %3821, align 4
  %.pre420 = load i64, i64* %3, align 8
  br label %block_.L_4400a2

block_.L_4400a2:                                  ; preds = %block_.L_440098, %block_440089
  %3822 = phi i64 [ %.pre420, %block_.L_440098 ], [ %3818, %block_440089 ]
  %3823 = add i64 %3822, 75
  br label %block_.L_4400ed

block_.L_4400a7:                                  ; preds = %block_440038
  %3824 = add i64 %3751, 179081
  %3825 = add i64 %3751, 31
  %3826 = load i64, i64* %6, align 8
  %3827 = add i64 %3826, -8
  %3828 = inttoptr i64 %3827 to i64*
  store i64 %3825, i64* %3828, align 8
  store i64 %3827, i64* %6, align 8
  store i64 %3824, i64* %3, align 8
  %call2_4400c1 = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %3824, %struct.Memory* %MEMORY.62)
  %3829 = load i32, i32* %EAX.i4398, align 4
  %3830 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %3831 = and i32 %3829, 255
  %3832 = tail call i32 @llvm.ctpop.i32(i32 %3831)
  %3833 = trunc i32 %3832 to i8
  %3834 = and i8 %3833, 1
  %3835 = xor i8 %3834, 1
  store i8 %3835, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %3836 = icmp eq i32 %3829, 0
  %3837 = zext i1 %3836 to i8
  store i8 %3837, i8* %47, align 1
  %3838 = lshr i32 %3829, 31
  %3839 = trunc i32 %3838 to i8
  store i8 %3839, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v618 = select i1 %3836, i64 24, i64 9
  %3840 = add i64 %3830, %.v618
  store i64 %3840, i64* %3, align 8
  %3841 = load i64, i64* %RBP.i, align 8
  br i1 %3836, label %block_.L_4400de, label %block_4400cf

block_4400cf:                                     ; preds = %block_.L_4400a7
  %3842 = add i64 %3841, -1244
  %3843 = add i64 %3840, 10
  store i64 %3843, i64* %3, align 8
  %3844 = inttoptr i64 %3842 to i32*
  store i32 1, i32* %3844, align 4
  %3845 = load i64, i64* %3, align 8
  %3846 = add i64 %3845, 15
  store i64 %3846, i64* %3, align 8
  br label %block_.L_4400e8

block_.L_4400de:                                  ; preds = %block_.L_4400a7
  %3847 = add i64 %3841, -1248
  %3848 = add i64 %3840, 10
  store i64 %3848, i64* %3, align 8
  %3849 = inttoptr i64 %3847 to i32*
  store i32 1, i32* %3849, align 4
  %.pre421 = load i64, i64* %3, align 8
  br label %block_.L_4400e8

block_.L_4400e8:                                  ; preds = %block_.L_4400de, %block_4400cf
  %3850 = phi i64 [ %.pre421, %block_.L_4400de ], [ %3846, %block_4400cf ]
  %3851 = add i64 %3850, 5
  store i64 %3851, i64* %3, align 8
  br label %block_.L_4400ed

block_.L_4400ed:                                  ; preds = %block_.L_4400e8, %block_.L_4400a2
  %storemerge288 = phi i64 [ %3823, %block_.L_4400a2 ], [ %3851, %block_.L_4400e8 ]
  %3852 = add i64 %storemerge288, 5
  store i64 %3852, i64* %3, align 8
  br label %block_.L_4400f2

block_.L_4400f2:                                  ; preds = %block_.L_4400ed, %block_.L_44000f
  %3853 = phi i64 [ %3852, %block_.L_4400ed ], [ %3691, %block_.L_44000f ]
  %3854 = load i64, i64* %RBP.i, align 8
  %3855 = add i64 %3854, -192
  store i64 %3855, i64* %RAX.i3798, align 8
  %3856 = add i64 %3854, -1668
  %3857 = add i64 %3853, 14
  store i64 %3857, i64* %3, align 8
  %3858 = inttoptr i64 %3856 to i32*
  %3859 = load i32, i32* %3858, align 4
  %3860 = sext i32 %3859 to i64
  %3861 = shl nsw i64 %3860, 5
  store i64 %3861, i64* %RCX.i4416, align 8
  %3862 = add i64 %3861, %3855
  store i64 %3862, i64* %RDX.i4419, align 8
  %3863 = icmp ult i64 %3862, %3855
  %3864 = icmp ult i64 %3862, %3861
  %3865 = or i1 %3863, %3864
  %3866 = zext i1 %3865 to i8
  store i8 %3866, i8* %31, align 1
  %3867 = trunc i64 %3862 to i32
  %3868 = and i32 %3867, 255
  %3869 = tail call i32 @llvm.ctpop.i32(i32 %3868)
  %3870 = trunc i32 %3869 to i8
  %3871 = and i8 %3870, 1
  %3872 = xor i8 %3871, 1
  store i8 %3872, i8* %38, align 1
  %3873 = xor i64 %3855, %3862
  %3874 = lshr i64 %3873, 4
  %3875 = trunc i64 %3874 to i8
  %3876 = and i8 %3875, 1
  store i8 %3876, i8* %44, align 1
  %3877 = icmp eq i64 %3862, 0
  %3878 = zext i1 %3877 to i8
  store i8 %3878, i8* %47, align 1
  %3879 = lshr i64 %3862, 63
  %3880 = trunc i64 %3879 to i8
  store i8 %3880, i8* %50, align 1
  %3881 = lshr i64 %3855, 63
  %3882 = lshr i64 %3860, 58
  %3883 = and i64 %3882, 1
  %3884 = xor i64 %3879, %3881
  %3885 = xor i64 %3879, %3883
  %3886 = add nuw nsw i64 %3884, %3885
  %3887 = icmp eq i64 %3886, 2
  %3888 = zext i1 %3887 to i8
  store i8 %3888, i8* %56, align 1
  %3889 = inttoptr i64 %3862 to i32*
  %3890 = add i64 %3853, 27
  store i64 %3890, i64* %3, align 8
  %3891 = load i32, i32* %3889, align 4
  %3892 = sext i32 %3891 to i64
  store i64 %3892, i64* %RCX.i4416, align 8
  %3893 = add nsw i64 %3892, -1664
  %3894 = add i64 %3893, %3854
  %3895 = add i64 %3853, 35
  store i64 %3895, i64* %3, align 8
  %3896 = inttoptr i64 %3894 to i8*
  store i8 1, i8* %3896, align 1
  %3897 = load i64, i64* %RBP.i, align 8
  %3898 = add i64 %3897, -1668
  %3899 = load i64, i64* %3, align 8
  %3900 = add i64 %3899, 7
  store i64 %3900, i64* %3, align 8
  %3901 = inttoptr i64 %3898 to i32*
  %3902 = load i32, i32* %3901, align 4
  %3903 = sext i32 %3902 to i64
  %3904 = shl nsw i64 %3903, 5
  store i64 %3904, i64* %RCX.i4416, align 8
  %3905 = load i64, i64* %RAX.i3798, align 8
  %3906 = add i64 %3904, %3905
  store i64 %3906, i64* %RDX.i4419, align 8
  %3907 = icmp ult i64 %3906, %3905
  %3908 = icmp ult i64 %3906, %3904
  %3909 = or i1 %3907, %3908
  %3910 = zext i1 %3909 to i8
  store i8 %3910, i8* %31, align 1
  %3911 = trunc i64 %3906 to i32
  %3912 = and i32 %3911, 255
  %3913 = tail call i32 @llvm.ctpop.i32(i32 %3912)
  %3914 = trunc i32 %3913 to i8
  %3915 = and i8 %3914, 1
  %3916 = xor i8 %3915, 1
  store i8 %3916, i8* %38, align 1
  %3917 = xor i64 %3905, %3906
  %3918 = lshr i64 %3917, 4
  %3919 = trunc i64 %3918 to i8
  %3920 = and i8 %3919, 1
  store i8 %3920, i8* %44, align 1
  %3921 = icmp eq i64 %3906, 0
  %3922 = zext i1 %3921 to i8
  store i8 %3922, i8* %47, align 1
  %3923 = lshr i64 %3906, 63
  %3924 = trunc i64 %3923 to i8
  store i8 %3924, i8* %50, align 1
  %3925 = lshr i64 %3905, 63
  %3926 = lshr i64 %3903, 58
  %3927 = and i64 %3926, 1
  %3928 = xor i64 %3923, %3925
  %3929 = xor i64 %3923, %3927
  %3930 = add nuw nsw i64 %3928, %3929
  %3931 = icmp eq i64 %3930, 2
  %3932 = zext i1 %3931 to i8
  store i8 %3932, i8* %56, align 1
  %3933 = inttoptr i64 %3906 to i32*
  %3934 = add i64 %3899, 19
  store i64 %3934, i64* %3, align 8
  %3935 = load i32, i32* %3933, align 4
  %3936 = zext i32 %3935 to i64
  store i64 %3936, i64* %RDI.i3802.pre-phi, align 8
  %3937 = add i64 %3897, -40
  %3938 = add i64 %3899, 23
  store i64 %3938, i64* %3, align 8
  %3939 = inttoptr i64 %3937 to i64*
  %3940 = load i64, i64* %3939, align 8
  store i64 %3940, i64* %RSI.i3811.pre-phi, align 8
  %3941 = add i64 %3897, -48
  %3942 = add i64 %3899, 27
  store i64 %3942, i64* %3, align 8
  %3943 = inttoptr i64 %3941 to i64*
  %3944 = load i64, i64* %3943, align 8
  store i64 %3944, i64* %RDX.i4419, align 8
  %3945 = add i64 %3899, 34
  store i64 %3945, i64* %3, align 8
  %3946 = load i32, i32* %3901, align 4
  %3947 = sext i32 %3946 to i64
  %3948 = shl nsw i64 %3947, 5
  store i64 %3948, i64* %RCX.i4416, align 8
  %3949 = add i64 %3948, %3905
  store i64 %3949, i64* %RAX.i3798, align 8
  %3950 = icmp ult i64 %3949, %3905
  %3951 = icmp ult i64 %3949, %3948
  %3952 = or i1 %3950, %3951
  %3953 = zext i1 %3952 to i8
  store i8 %3953, i8* %31, align 1
  %3954 = trunc i64 %3949 to i32
  %3955 = and i32 %3954, 255
  %3956 = tail call i32 @llvm.ctpop.i32(i32 %3955)
  %3957 = trunc i32 %3956 to i8
  %3958 = and i8 %3957, 1
  %3959 = xor i8 %3958, 1
  store i8 %3959, i8* %38, align 1
  %3960 = xor i64 %3905, %3949
  %3961 = lshr i64 %3960, 4
  %3962 = trunc i64 %3961 to i8
  %3963 = and i8 %3962, 1
  store i8 %3963, i8* %44, align 1
  %3964 = icmp eq i64 %3949, 0
  %3965 = zext i1 %3964 to i8
  store i8 %3965, i8* %47, align 1
  %3966 = lshr i64 %3949, 63
  %3967 = trunc i64 %3966 to i8
  store i8 %3967, i8* %50, align 1
  %3968 = lshr i64 %3947, 58
  %3969 = and i64 %3968, 1
  %3970 = xor i64 %3966, %3925
  %3971 = xor i64 %3966, %3969
  %3972 = add nuw nsw i64 %3970, %3971
  %3973 = icmp eq i64 %3972, 2
  %3974 = zext i1 %3973 to i8
  store i8 %3974, i8* %56, align 1
  %3975 = add i64 %3949, 4
  %3976 = add i64 %3899, 44
  store i64 %3976, i64* %3, align 8
  %3977 = inttoptr i64 %3975 to i32*
  %3978 = load i32, i32* %3977, align 4
  %3979 = zext i32 %3978 to i64
  store i64 %3979, i64* %RCX.i4416, align 8
  %3980 = add i64 %3899, 15995
  %3981 = add i64 %3899, 49
  %3982 = load i64, i64* %6, align 8
  %3983 = add i64 %3982, -8
  %3984 = inttoptr i64 %3983 to i64*
  store i64 %3981, i64* %3984, align 8
  store i64 %3983, i64* %6, align 8
  store i64 %3980, i64* %3, align 8
  %call2_440141 = tail call %struct.Memory* @sub_443f90.semeai_move_value(%struct.State* nonnull %0, i64 %3980, %struct.Memory* %MEMORY.62)
  %3985 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x57df7f_type* @G__0x57df7f to i64), i64* %RCX.i4416, align 8
  store i64 0, i64* %RDI.i3802.pre-phi, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %3986 = load i64, i64* %RBP.i, align 8
  %3987 = add i64 %3986, -192
  store i64 %3987, i64* %RDX.i4419, align 8
  %3988 = add i64 %3986, -736
  store i64 %3988, i64* %RSI.i3811.pre-phi, align 8
  %3989 = add i64 %3986, -1696
  %3990 = load i32, i32* %EAX.i4398, align 4
  %3991 = add i64 %3985, 32
  store i64 %3991, i64* %3, align 8
  %3992 = inttoptr i64 %3989 to i32*
  store i32 %3990, i32* %3992, align 4
  %3993 = load i64, i64* %RBP.i, align 8
  %3994 = add i64 %3993, -1668
  %3995 = load i64, i64* %3, align 8
  %3996 = add i64 %3995, 7
  store i64 %3996, i64* %3, align 8
  %3997 = inttoptr i64 %3994 to i32*
  %3998 = load i32, i32* %3997, align 4
  %3999 = sext i32 %3998 to i64
  %4000 = shl nsw i64 %3999, 5
  store i64 %4000, i64* %R8.i3721, align 8
  %4001 = load i64, i64* %RDX.i4419, align 8
  %4002 = add i64 %4000, %4001
  store i64 %4002, i64* %R9.i4411, align 8
  %4003 = icmp ult i64 %4002, %4001
  %4004 = icmp ult i64 %4002, %4000
  %4005 = or i1 %4003, %4004
  %4006 = zext i1 %4005 to i8
  store i8 %4006, i8* %31, align 1
  %4007 = trunc i64 %4002 to i32
  %4008 = and i32 %4007, 255
  %4009 = tail call i32 @llvm.ctpop.i32(i32 %4008)
  %4010 = trunc i32 %4009 to i8
  %4011 = and i8 %4010, 1
  %4012 = xor i8 %4011, 1
  store i8 %4012, i8* %38, align 1
  %4013 = xor i64 %4001, %4002
  %4014 = lshr i64 %4013, 4
  %4015 = trunc i64 %4014 to i8
  %4016 = and i8 %4015, 1
  store i8 %4016, i8* %44, align 1
  %4017 = icmp eq i64 %4002, 0
  %4018 = zext i1 %4017 to i8
  store i8 %4018, i8* %47, align 1
  %4019 = lshr i64 %4002, 63
  %4020 = trunc i64 %4019 to i8
  store i8 %4020, i8* %50, align 1
  %4021 = lshr i64 %4001, 63
  %4022 = lshr i64 %3999, 58
  %4023 = and i64 %4022, 1
  %4024 = xor i64 %4019, %4021
  %4025 = xor i64 %4019, %4023
  %4026 = add nuw nsw i64 %4024, %4025
  %4027 = icmp eq i64 %4026, 2
  %4028 = zext i1 %4027 to i8
  store i8 %4028, i8* %56, align 1
  %4029 = inttoptr i64 %4002 to i32*
  %4030 = add i64 %3995, 20
  store i64 %4030, i64* %3, align 8
  %4031 = load i32, i32* %4029, align 4
  %4032 = zext i32 %4031 to i64
  store i64 %4032, i64* %RAX.i3798, align 8
  %4033 = add i64 %3993, -1696
  %4034 = add i64 %3995, 27
  store i64 %4034, i64* %3, align 8
  %4035 = inttoptr i64 %4033 to i32*
  %4036 = load i32, i32* %4035, align 4
  %4037 = zext i32 %4036 to i64
  store i64 %4037, i64* %65, align 8
  %4038 = add i64 %3995, 34
  store i64 %4038, i64* %3, align 8
  %4039 = load i32, i32* %3997, align 4
  %4040 = sext i32 %4039 to i64
  %4041 = shl nsw i64 %4040, 5
  store i64 %4041, i64* %R8.i3721, align 8
  %4042 = add i64 %4041, %4001
  store i64 %4042, i64* %R9.i4411, align 8
  %4043 = icmp ult i64 %4042, %4001
  %4044 = icmp ult i64 %4042, %4041
  %4045 = or i1 %4043, %4044
  %4046 = zext i1 %4045 to i8
  store i8 %4046, i8* %31, align 1
  %4047 = trunc i64 %4042 to i32
  %4048 = and i32 %4047, 255
  %4049 = tail call i32 @llvm.ctpop.i32(i32 %4048)
  %4050 = trunc i32 %4049 to i8
  %4051 = and i8 %4050, 1
  %4052 = xor i8 %4051, 1
  store i8 %4052, i8* %38, align 1
  %4053 = xor i64 %4001, %4042
  %4054 = lshr i64 %4053, 4
  %4055 = trunc i64 %4054 to i8
  %4056 = and i8 %4055, 1
  store i8 %4056, i8* %44, align 1
  %4057 = icmp eq i64 %4042, 0
  %4058 = zext i1 %4057 to i8
  store i8 %4058, i8* %47, align 1
  %4059 = lshr i64 %4042, 63
  %4060 = trunc i64 %4059 to i8
  store i8 %4060, i8* %50, align 1
  %4061 = lshr i64 %4040, 58
  %4062 = and i64 %4061, 1
  %4063 = xor i64 %4059, %4021
  %4064 = xor i64 %4059, %4062
  %4065 = add nuw nsw i64 %4063, %4064
  %4066 = icmp eq i64 %4065, 2
  %4067 = zext i1 %4066 to i8
  store i8 %4067, i8* %56, align 1
  %4068 = add i64 %4042, 16
  %4069 = add i64 %3995, 48
  store i64 %4069, i64* %3, align 8
  %4070 = inttoptr i64 %4068 to i32*
  %4071 = load i32, i32* %4070, align 4
  %4072 = zext i32 %4071 to i64
  store i64 %4072, i64* %R8.i3721, align 8
  %4073 = load i64, i64* %RBP.i, align 8
  %4074 = add i64 %4073, -1668
  %4075 = add i64 %3995, 55
  store i64 %4075, i64* %3, align 8
  %4076 = inttoptr i64 %4074 to i32*
  %4077 = load i32, i32* %4076, align 4
  %4078 = sext i32 %4077 to i64
  %4079 = shl nsw i64 %4078, 5
  store i64 %4079, i64* %R9.i4411, align 8
  %4080 = load i64, i64* %RDX.i4419, align 8
  %4081 = add i64 %4079, %4080
  store i64 %4081, i64* %RDX.i4419, align 8
  %4082 = icmp ult i64 %4081, %4080
  %4083 = icmp ult i64 %4081, %4079
  %4084 = or i1 %4082, %4083
  %4085 = zext i1 %4084 to i8
  store i8 %4085, i8* %31, align 1
  %4086 = trunc i64 %4081 to i32
  %4087 = and i32 %4086, 255
  %4088 = tail call i32 @llvm.ctpop.i32(i32 %4087)
  %4089 = trunc i32 %4088 to i8
  %4090 = and i8 %4089, 1
  %4091 = xor i8 %4090, 1
  store i8 %4091, i8* %38, align 1
  %4092 = xor i64 %4080, %4081
  %4093 = lshr i64 %4092, 4
  %4094 = trunc i64 %4093 to i8
  %4095 = and i8 %4094, 1
  store i8 %4095, i8* %44, align 1
  %4096 = icmp eq i64 %4081, 0
  %4097 = zext i1 %4096 to i8
  store i8 %4097, i8* %47, align 1
  %4098 = lshr i64 %4081, 63
  %4099 = trunc i64 %4098 to i8
  store i8 %4099, i8* %50, align 1
  %4100 = lshr i64 %4080, 63
  %4101 = lshr i64 %4078, 58
  %4102 = and i64 %4101, 1
  %4103 = xor i64 %4098, %4100
  %4104 = xor i64 %4098, %4102
  %4105 = add nuw nsw i64 %4103, %4104
  %4106 = icmp eq i64 %4105, 2
  %4107 = zext i1 %4106 to i8
  store i8 %4107, i8* %56, align 1
  %4108 = add i64 %4081, 20
  %4109 = add i64 %3995, 66
  store i64 %4109, i64* %3, align 8
  %4110 = inttoptr i64 %4108 to i32*
  %4111 = load i32, i32* %4110, align 4
  %4112 = zext i32 %4111 to i64
  store i64 %4112, i64* %R9.i4411, align 8
  %4113 = add i64 %4073, -3488
  %4114 = load i32, i32* %EDI.i4425, align 4
  %4115 = add i64 %3995, 72
  store i64 %4115, i64* %3, align 8
  %4116 = inttoptr i64 %4113 to i32*
  store i32 %4114, i32* %4116, align 4
  %4117 = load i64, i64* %RSI.i3811.pre-phi, align 8
  %4118 = load i64, i64* %3, align 8
  store i64 %4117, i64* %RDI.i3802.pre-phi, align 8
  %4119 = load i32, i32* %EAX.i4398, align 4
  %4120 = zext i32 %4119 to i64
  store i64 %4120, i64* %RSI.i3811.pre-phi, align 8
  %4121 = load i32, i32* %R10D.i4438, align 4
  %4122 = zext i32 %4121 to i64
  store i64 %4122, i64* %RDX.i4419, align 8
  %4123 = load i32*, i32** %3524, align 8
  %4124 = add i64 %4118, 15
  store i64 %4124, i64* %3, align 8
  store i32 0, i32* %4123, align 4
  %4125 = load i64, i64* %3, align 8
  %4126 = add i64 %4125, 16499
  %4127 = add i64 %4125, 5
  %4128 = load i64, i64* %6, align 8
  %4129 = add i64 %4128, -8
  %4130 = inttoptr i64 %4129 to i64*
  store i64 %4127, i64* %4130, align 8
  store i64 %4129, i64* %6, align 8
  store i64 %4126, i64* %3, align 8
  %call2_4401bd = tail call %struct.Memory* @sub_444230.owl_add_move(%struct.State* nonnull %0, i64 %4126, %struct.Memory* %call2_440141)
  %4131 = load i64, i64* %RBP.i, align 8
  %4132 = add i64 %4131, -1668
  %4133 = load i64, i64* %3, align 8
  %4134 = add i64 %4133, 6
  store i64 %4134, i64* %3, align 8
  %4135 = inttoptr i64 %4132 to i32*
  %4136 = load i32, i32* %4135, align 4
  %4137 = add i32 %4136, 1
  %4138 = zext i32 %4137 to i64
  store i64 %4138, i64* %RAX.i3798, align 8
  %4139 = icmp eq i32 %4136, -1
  %4140 = icmp eq i32 %4137, 0
  %4141 = or i1 %4139, %4140
  %4142 = zext i1 %4141 to i8
  store i8 %4142, i8* %31, align 1
  %4143 = and i32 %4137, 255
  %4144 = tail call i32 @llvm.ctpop.i32(i32 %4143)
  %4145 = trunc i32 %4144 to i8
  %4146 = and i8 %4145, 1
  %4147 = xor i8 %4146, 1
  store i8 %4147, i8* %38, align 1
  %4148 = xor i32 %4137, %4136
  %4149 = lshr i32 %4148, 4
  %4150 = trunc i32 %4149 to i8
  %4151 = and i8 %4150, 1
  store i8 %4151, i8* %44, align 1
  %4152 = zext i1 %4140 to i8
  store i8 %4152, i8* %47, align 1
  %4153 = lshr i32 %4137, 31
  %4154 = trunc i32 %4153 to i8
  store i8 %4154, i8* %50, align 1
  %4155 = lshr i32 %4136, 31
  %4156 = xor i32 %4153, %4155
  %4157 = add nuw nsw i32 %4156, %4153
  %4158 = icmp eq i32 %4157, 2
  %4159 = zext i1 %4158 to i8
  store i8 %4159, i8* %56, align 1
  %4160 = add i64 %4133, 15
  store i64 %4160, i64* %3, align 8
  store i32 %4137, i32* %4135, align 4
  %4161 = load i64, i64* %3, align 8
  %4162 = add i64 %4161, -525
  store i64 %4162, i64* %3, align 8
  br label %block_.L_43ffc4

block_.L_4401e0:                                  ; preds = %block_.L_44036c, %block_44000a
  %4163 = phi i64 [ %.pre405, %block_44000a ], [ %4873, %block_.L_44036c ]
  %MEMORY.68 = phi %struct.Memory* [ %MEMORY.62, %block_44000a ], [ %call2_440417, %block_.L_44036c ]
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i8 0, i8* %CL.i2655, align 1
  %4164 = load i64, i64* %RBP.i, align 8
  %4165 = add i64 %4164, -1668
  %4166 = add i64 %4163, 11
  store i64 %4166, i64* %3, align 8
  %4167 = inttoptr i64 %4165 to i32*
  %4168 = load i32, i32* %4167, align 4
  %4169 = add i32 %4168, -2
  %4170 = icmp ult i32 %4168, 2
  %4171 = zext i1 %4170 to i8
  store i8 %4171, i8* %31, align 1
  %4172 = and i32 %4169, 255
  %4173 = tail call i32 @llvm.ctpop.i32(i32 %4172)
  %4174 = trunc i32 %4173 to i8
  %4175 = and i8 %4174, 1
  %4176 = xor i8 %4175, 1
  store i8 %4176, i8* %38, align 1
  %4177 = xor i32 %4169, %4168
  %4178 = lshr i32 %4177, 4
  %4179 = trunc i32 %4178 to i8
  %4180 = and i8 %4179, 1
  store i8 %4180, i8* %44, align 1
  %4181 = icmp eq i32 %4169, 0
  %4182 = zext i1 %4181 to i8
  store i8 %4182, i8* %47, align 1
  %4183 = lshr i32 %4169, 31
  %4184 = trunc i32 %4183 to i8
  store i8 %4184, i8* %50, align 1
  %4185 = lshr i32 %4168, 31
  %4186 = xor i32 %4183, %4185
  %4187 = add nuw nsw i32 %4186, %4185
  %4188 = icmp eq i32 %4187, 2
  %4189 = zext i1 %4188 to i8
  store i8 %4189, i8* %56, align 1
  %4190 = add i64 %4164, -3489
  %4191 = add i64 %4163, 17
  store i64 %4191, i64* %3, align 8
  %4192 = inttoptr i64 %4190 to i8*
  store i8 0, i8* %4192, align 1
  %4193 = load i64, i64* %3, align 8
  %4194 = add i64 %4193, 39
  %4195 = add i64 %4193, 6
  %4196 = load i8, i8* %50, align 1
  %4197 = icmp ne i8 %4196, 0
  %4198 = load i8, i8* %56, align 1
  %4199 = icmp ne i8 %4198, 0
  %4200 = xor i1 %4197, %4199
  %4201 = select i1 %4200, i64 %4195, i64 %4194
  store i64 %4201, i64* %3, align 8
  br i1 %4200, label %block_4401f7, label %block_.L_440218

block_4401f7:                                     ; preds = %block_.L_4401e0
  %4202 = load i64, i64* %RBP.i, align 8
  %4203 = add i64 %4202, -288
  store i64 %4203, i64* %RAX.i3798, align 8
  %4204 = add i64 %4202, -1668
  %4205 = add i64 %4201, 14
  store i64 %4205, i64* %3, align 8
  %4206 = inttoptr i64 %4204 to i32*
  %4207 = load i32, i32* %4206, align 4
  %4208 = sext i32 %4207 to i64
  %4209 = shl nsw i64 %4208, 5
  store i64 %4209, i64* %RCX.i4416, align 8
  %4210 = add i64 %4209, %4203
  store i64 %4210, i64* %RAX.i3798, align 8
  %4211 = icmp ult i64 %4210, %4203
  %4212 = icmp ult i64 %4210, %4209
  %4213 = or i1 %4211, %4212
  %4214 = zext i1 %4213 to i8
  store i8 %4214, i8* %31, align 1
  %4215 = trunc i64 %4210 to i32
  %4216 = and i32 %4215, 255
  %4217 = tail call i32 @llvm.ctpop.i32(i32 %4216)
  %4218 = trunc i32 %4217 to i8
  %4219 = and i8 %4218, 1
  %4220 = xor i8 %4219, 1
  store i8 %4220, i8* %38, align 1
  %4221 = xor i64 %4203, %4210
  %4222 = lshr i64 %4221, 4
  %4223 = trunc i64 %4222 to i8
  %4224 = and i8 %4223, 1
  store i8 %4224, i8* %44, align 1
  %4225 = icmp eq i64 %4210, 0
  %4226 = zext i1 %4225 to i8
  store i8 %4226, i8* %47, align 1
  %4227 = lshr i64 %4210, 63
  %4228 = trunc i64 %4227 to i8
  store i8 %4228, i8* %50, align 1
  %4229 = lshr i64 %4203, 63
  %4230 = lshr i64 %4208, 58
  %4231 = and i64 %4230, 1
  %4232 = xor i64 %4227, %4229
  %4233 = xor i64 %4227, %4231
  %4234 = add nuw nsw i64 %4232, %4233
  %4235 = icmp eq i64 %4234, 2
  %4236 = zext i1 %4235 to i8
  store i8 %4236, i8* %56, align 1
  %4237 = inttoptr i64 %4210 to i32*
  %4238 = add i64 %4201, 24
  store i64 %4238, i64* %3, align 8
  %4239 = load i32, i32* %4237, align 4
  store i8 0, i8* %31, align 1
  %4240 = and i32 %4239, 255
  %4241 = tail call i32 @llvm.ctpop.i32(i32 %4240)
  %4242 = trunc i32 %4241 to i8
  %4243 = and i8 %4242, 1
  %4244 = xor i8 %4243, 1
  store i8 %4244, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %4245 = icmp eq i32 %4239, 0
  %4246 = zext i1 %4245 to i8
  store i8 %4246, i8* %47, align 1
  %4247 = lshr i32 %4239, 31
  %4248 = trunc i32 %4247 to i8
  store i8 %4248, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %4249 = xor i1 %4245, true
  %4250 = zext i1 %4249 to i8
  store i8 %4250, i8* %DL.i2633, align 1
  %4251 = add i64 %4202, -3489
  %4252 = add i64 %4201, 33
  store i64 %4252, i64* %3, align 8
  %4253 = inttoptr i64 %4251 to i8*
  store i8 %4250, i8* %4253, align 1
  %.pre406 = load i64, i64* %3, align 8
  br label %block_.L_440218

block_.L_440218:                                  ; preds = %block_.L_4401e0, %block_4401f7
  %4254 = phi i64 [ %4194, %block_.L_4401e0 ], [ %.pre406, %block_4401f7 ]
  %4255 = load i64, i64* %RBP.i, align 8
  %4256 = add i64 %4255, -3489
  %4257 = add i64 %4254, 6
  store i64 %4257, i64* %3, align 8
  %4258 = inttoptr i64 %4256 to i8*
  %4259 = load i8, i8* %4258, align 1
  store i8 %4259, i8* %AL.i2654, align 1
  %4260 = and i8 %4259, 1
  store i8 0, i8* %31, align 1
  %4261 = zext i8 %4260 to i32
  %4262 = tail call i32 @llvm.ctpop.i32(i32 %4261)
  %4263 = trunc i32 %4262 to i8
  %4264 = xor i8 %4263, 1
  store i8 %4264, i8* %38, align 1
  %4265 = xor i8 %4260, 1
  store i8 %4265, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %4266 = icmp eq i8 %4265, 0
  %.v476 = select i1 %4266, i64 19, i64 14
  %4267 = add i64 %4254, %.v476
  store i64 %4267, i64* %3, align 8
  br i1 %4266, label %block_.L_44022b, label %block_440226

block_440226:                                     ; preds = %block_.L_440218
  %4268 = add i64 %4255, -1668
  %4269 = add i64 %4267, 532
  store i64 %4269, i64* %3, align 8
  %4270 = inttoptr i64 %4268 to i32*
  store i32 0, i32* %4270, align 4
  %R11D.i1854 = bitcast %union.anon* %71 to i32*
  %.pre407 = load i64, i64* %3, align 8
  br label %block_.L_44043a

block_.L_44022b:                                  ; preds = %block_.L_440218
  %4271 = add i64 %4255, -288
  store i64 %4271, i64* %RAX.i3798, align 8
  %4272 = add i64 %4255, -1668
  %4273 = add i64 %4267, 14
  store i64 %4273, i64* %3, align 8
  %4274 = inttoptr i64 %4272 to i32*
  %4275 = load i32, i32* %4274, align 4
  %4276 = sext i32 %4275 to i64
  %4277 = shl nsw i64 %4276, 5
  store i64 %4277, i64* %RCX.i4416, align 8
  %4278 = add i64 %4277, %4271
  store i64 %4278, i64* %RAX.i3798, align 8
  %4279 = icmp ult i64 %4278, %4271
  %4280 = icmp ult i64 %4278, %4277
  %4281 = or i1 %4279, %4280
  %4282 = zext i1 %4281 to i8
  store i8 %4282, i8* %31, align 1
  %4283 = trunc i64 %4278 to i32
  %4284 = and i32 %4283, 255
  %4285 = tail call i32 @llvm.ctpop.i32(i32 %4284)
  %4286 = trunc i32 %4285 to i8
  %4287 = and i8 %4286, 1
  %4288 = xor i8 %4287, 1
  store i8 %4288, i8* %38, align 1
  %4289 = xor i64 %4271, %4278
  %4290 = lshr i64 %4289, 4
  %4291 = trunc i64 %4290 to i8
  %4292 = and i8 %4291, 1
  store i8 %4292, i8* %44, align 1
  %4293 = icmp eq i64 %4278, 0
  %4294 = zext i1 %4293 to i8
  store i8 %4294, i8* %47, align 1
  %4295 = lshr i64 %4278, 63
  %4296 = trunc i64 %4295 to i8
  store i8 %4296, i8* %50, align 1
  %4297 = lshr i64 %4271, 63
  %4298 = lshr i64 %4276, 58
  %4299 = and i64 %4298, 1
  %4300 = xor i64 %4295, %4297
  %4301 = xor i64 %4295, %4299
  %4302 = add nuw nsw i64 %4300, %4301
  %4303 = icmp eq i64 %4302, 2
  %4304 = zext i1 %4303 to i8
  store i8 %4304, i8* %56, align 1
  %4305 = inttoptr i64 %4278 to i32*
  %4306 = add i64 %4267, 23
  store i64 %4306, i64* %3, align 8
  %4307 = load i32, i32* %4305, align 4
  %4308 = zext i32 %4307 to i64
  store i64 %4308, i64* %RDI.i3802.pre-phi, align 8
  %4309 = add i64 %4255, -48
  %4310 = add i64 %4267, 27
  store i64 %4310, i64* %3, align 8
  %4311 = inttoptr i64 %4309 to i64*
  %4312 = load i64, i64* %4311, align 8
  store i64 %4312, i64* %RSI.i3811.pre-phi, align 8
  %4313 = add i64 %4267, 15461
  %4314 = add i64 %4267, 32
  %4315 = load i64, i64* %6, align 8
  %4316 = add i64 %4315, -8
  %4317 = inttoptr i64 %4316 to i64*
  store i64 %4314, i64* %4317, align 8
  store i64 %4316, i64* %6, align 8
  store i64 %4313, i64* %3, align 8
  %call2_440246 = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %4313, %struct.Memory* %MEMORY.68)
  %4318 = load i32, i32* %EAX.i4398, align 4
  %4319 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %4320 = and i32 %4318, 255
  %4321 = tail call i32 @llvm.ctpop.i32(i32 %4320)
  %4322 = trunc i32 %4321 to i8
  %4323 = and i8 %4322, 1
  %4324 = xor i8 %4323, 1
  store i8 %4324, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %4325 = icmp eq i32 %4318, 0
  %4326 = zext i1 %4325 to i8
  store i8 %4326, i8* %47, align 1
  %4327 = lshr i32 %4318, 31
  %4328 = trunc i32 %4327 to i8
  store i8 %4328, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v611 = select i1 %4325, i64 195, i64 9
  %4329 = add i64 %4319, %.v611
  store i64 %4329, i64* %3, align 8
  br i1 %4325, label %block_.L_44030e, label %block_440254

block_440254:                                     ; preds = %block_.L_44022b
  %4330 = load i64, i64* %RBP.i, align 8
  %4331 = add i64 %4330, -288
  store i64 %4331, i64* %RAX.i3798, align 8
  %4332 = add i64 %4330, -1668
  %4333 = add i64 %4329, 14
  store i64 %4333, i64* %3, align 8
  %4334 = inttoptr i64 %4332 to i32*
  %4335 = load i32, i32* %4334, align 4
  %4336 = sext i32 %4335 to i64
  %4337 = shl nsw i64 %4336, 5
  store i64 %4337, i64* %RCX.i4416, align 8
  %4338 = add i64 %4337, %4331
  store i64 %4338, i64* %RAX.i3798, align 8
  %4339 = icmp ult i64 %4338, %4331
  %4340 = icmp ult i64 %4338, %4337
  %4341 = or i1 %4339, %4340
  %4342 = zext i1 %4341 to i8
  store i8 %4342, i8* %31, align 1
  %4343 = trunc i64 %4338 to i32
  %4344 = and i32 %4343, 255
  %4345 = tail call i32 @llvm.ctpop.i32(i32 %4344)
  %4346 = trunc i32 %4345 to i8
  %4347 = and i8 %4346, 1
  %4348 = xor i8 %4347, 1
  store i8 %4348, i8* %38, align 1
  %4349 = xor i64 %4331, %4338
  %4350 = lshr i64 %4349, 4
  %4351 = trunc i64 %4350 to i8
  %4352 = and i8 %4351, 1
  store i8 %4352, i8* %44, align 1
  %4353 = icmp eq i64 %4338, 0
  %4354 = zext i1 %4353 to i8
  store i8 %4354, i8* %47, align 1
  %4355 = lshr i64 %4338, 63
  %4356 = trunc i64 %4355 to i8
  store i8 %4356, i8* %50, align 1
  %4357 = lshr i64 %4331, 63
  %4358 = lshr i64 %4336, 58
  %4359 = and i64 %4358, 1
  %4360 = xor i64 %4355, %4357
  %4361 = xor i64 %4355, %4359
  %4362 = add nuw nsw i64 %4360, %4361
  %4363 = icmp eq i64 %4362, 2
  %4364 = zext i1 %4363 to i8
  store i8 %4364, i8* %56, align 1
  %4365 = inttoptr i64 %4338 to i32*
  %4366 = add i64 %4329, 23
  store i64 %4366, i64* %3, align 8
  %4367 = load i32, i32* %4365, align 4
  %4368 = zext i32 %4367 to i64
  store i64 %4368, i64* %RDI.i3802.pre-phi, align 8
  %4369 = add i64 %4330, -40
  %4370 = add i64 %4329, 27
  store i64 %4370, i64* %3, align 8
  %4371 = inttoptr i64 %4369 to i64*
  %4372 = load i64, i64* %4371, align 8
  store i64 %4372, i64* %RSI.i3811.pre-phi, align 8
  %4373 = add i64 %4329, 15420
  %4374 = add i64 %4329, 32
  %4375 = load i64, i64* %6, align 8
  %4376 = add i64 %4375, -8
  %4377 = inttoptr i64 %4376 to i64*
  store i64 %4374, i64* %4377, align 8
  store i64 %4376, i64* %6, align 8
  store i64 %4373, i64* %3, align 8
  %call2_44026f = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %4373, %struct.Memory* %MEMORY.68)
  %4378 = load i32, i32* %EAX.i4398, align 4
  %4379 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %4380 = and i32 %4378, 255
  %4381 = tail call i32 @llvm.ctpop.i32(i32 %4380)
  %4382 = trunc i32 %4381 to i8
  %4383 = and i8 %4382, 1
  %4384 = xor i8 %4383, 1
  store i8 %4384, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %4385 = icmp eq i32 %4378, 0
  %4386 = zext i1 %4385 to i8
  store i8 %4386, i8* %47, align 1
  %4387 = lshr i32 %4378, 31
  %4388 = trunc i32 %4387 to i8
  store i8 %4388, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v612 = select i1 %4385, i64 9, i64 79
  %4389 = add i64 %4379, %.v612
  %4390 = load i64, i64* %RBP.i, align 8
  %4391 = add i64 %4390, -288
  store i64 %4391, i64* %RAX.i3798, align 8
  %4392 = add i64 %4390, -1668
  %4393 = add i64 %4389, 14
  store i64 %4393, i64* %3, align 8
  %4394 = inttoptr i64 %4392 to i32*
  %4395 = load i32, i32* %4394, align 4
  %4396 = sext i32 %4395 to i64
  %4397 = shl nsw i64 %4396, 5
  store i64 %4397, i64* %RCX.i4416, align 8
  %4398 = add i64 %4397, %4391
  store i64 %4398, i64* %RAX.i3798, align 8
  %4399 = icmp ult i64 %4398, %4391
  %4400 = icmp ult i64 %4398, %4397
  %4401 = or i1 %4399, %4400
  %4402 = zext i1 %4401 to i8
  store i8 %4402, i8* %31, align 1
  %4403 = trunc i64 %4398 to i32
  %4404 = and i32 %4403, 255
  %4405 = tail call i32 @llvm.ctpop.i32(i32 %4404)
  %4406 = trunc i32 %4405 to i8
  %4407 = and i8 %4406, 1
  %4408 = xor i8 %4407, 1
  store i8 %4408, i8* %38, align 1
  %4409 = xor i64 %4391, %4398
  %4410 = lshr i64 %4409, 4
  %4411 = trunc i64 %4410 to i8
  %4412 = and i8 %4411, 1
  store i8 %4412, i8* %44, align 1
  %4413 = icmp eq i64 %4398, 0
  %4414 = zext i1 %4413 to i8
  store i8 %4414, i8* %47, align 1
  %4415 = lshr i64 %4398, 63
  %4416 = trunc i64 %4415 to i8
  store i8 %4416, i8* %50, align 1
  %4417 = lshr i64 %4391, 63
  %4418 = lshr i64 %4396, 58
  %4419 = and i64 %4418, 1
  %4420 = xor i64 %4415, %4417
  %4421 = xor i64 %4415, %4419
  %4422 = add nuw nsw i64 %4420, %4421
  %4423 = icmp eq i64 %4422, 2
  %4424 = zext i1 %4423 to i8
  store i8 %4424, i8* %56, align 1
  %4425 = inttoptr i64 %4398 to i32*
  %4426 = add i64 %4389, 23
  store i64 %4426, i64* %3, align 8
  %4427 = load i32, i32* %4425, align 4
  %4428 = zext i32 %4427 to i64
  store i64 %4428, i64* %RDI.i3802.pre-phi, align 8
  %4429 = add i64 %4390, -92
  %4430 = add i64 %4389, 26
  store i64 %4430, i64* %3, align 8
  %4431 = inttoptr i64 %4429 to i32*
  %4432 = load i32, i32* %4431, align 4
  %4433 = zext i32 %4432 to i64
  store i64 %4433, i64* %RSI.i3811.pre-phi, align 8
  br i1 %4385, label %block_44027d, label %block_.L_4402c3

block_44027d:                                     ; preds = %block_440254
  %4434 = add i64 %4389, 178611
  %4435 = add i64 %4389, 31
  %4436 = load i64, i64* %6, align 8
  %4437 = add i64 %4436, -8
  %4438 = inttoptr i64 %4437 to i64*
  store i64 %4435, i64* %4438, align 8
  store i64 %4437, i64* %6, align 8
  store i64 %4434, i64* %3, align 8
  %call2_440297 = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %4434, %struct.Memory* %MEMORY.68)
  %4439 = load i32, i32* %EAX.i4398, align 4
  %4440 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %4441 = and i32 %4439, 255
  %4442 = tail call i32 @llvm.ctpop.i32(i32 %4441)
  %4443 = trunc i32 %4442 to i8
  %4444 = and i8 %4443, 1
  %4445 = xor i8 %4444, 1
  store i8 %4445, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %4446 = icmp eq i32 %4439, 0
  %4447 = zext i1 %4446 to i8
  store i8 %4447, i8* %47, align 1
  %4448 = lshr i32 %4439, 31
  %4449 = trunc i32 %4448 to i8
  store i8 %4449, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v615 = select i1 %4446, i64 24, i64 9
  %4450 = add i64 %4440, %.v615
  store i64 %4450, i64* %3, align 8
  %4451 = load i64, i64* %RBP.i, align 8
  br i1 %4446, label %block_.L_4402b4, label %block_4402a5

block_4402a5:                                     ; preds = %block_44027d
  %4452 = add i64 %4451, -1236
  %4453 = add i64 %4450, 10
  store i64 %4453, i64* %3, align 8
  %4454 = inttoptr i64 %4452 to i32*
  store i32 1, i32* %4454, align 4
  %4455 = load i64, i64* %3, align 8
  %4456 = add i64 %4455, 15
  store i64 %4456, i64* %3, align 8
  br label %block_.L_4402be

block_.L_4402b4:                                  ; preds = %block_44027d
  %4457 = add i64 %4451, -1240
  %4458 = add i64 %4450, 10
  store i64 %4458, i64* %3, align 8
  %4459 = inttoptr i64 %4457 to i32*
  store i32 1, i32* %4459, align 4
  %.pre417 = load i64, i64* %3, align 8
  br label %block_.L_4402be

block_.L_4402be:                                  ; preds = %block_.L_4402b4, %block_4402a5
  %4460 = phi i64 [ %.pre417, %block_.L_4402b4 ], [ %4456, %block_4402a5 ]
  %4461 = add i64 %4460, 75
  br label %block_.L_440309

block_.L_4402c3:                                  ; preds = %block_440254
  %4462 = add i64 %4389, 178541
  %4463 = add i64 %4389, 31
  %4464 = load i64, i64* %6, align 8
  %4465 = add i64 %4464, -8
  %4466 = inttoptr i64 %4465 to i64*
  store i64 %4463, i64* %4466, align 8
  store i64 %4465, i64* %6, align 8
  store i64 %4462, i64* %3, align 8
  %call2_4402dd = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %4462, %struct.Memory* %MEMORY.68)
  %4467 = load i32, i32* %EAX.i4398, align 4
  %4468 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %4469 = and i32 %4467, 255
  %4470 = tail call i32 @llvm.ctpop.i32(i32 %4469)
  %4471 = trunc i32 %4470 to i8
  %4472 = and i8 %4471, 1
  %4473 = xor i8 %4472, 1
  store i8 %4473, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %4474 = icmp eq i32 %4467, 0
  %4475 = zext i1 %4474 to i8
  store i8 %4475, i8* %47, align 1
  %4476 = lshr i32 %4467, 31
  %4477 = trunc i32 %4476 to i8
  store i8 %4477, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v613 = select i1 %4474, i64 24, i64 9
  %4478 = add i64 %4468, %.v613
  store i64 %4478, i64* %3, align 8
  %4479 = load i64, i64* %RBP.i, align 8
  br i1 %4474, label %block_.L_4402fa, label %block_4402eb

block_4402eb:                                     ; preds = %block_.L_4402c3
  %4480 = add i64 %4479, -1244
  %4481 = add i64 %4478, 10
  store i64 %4481, i64* %3, align 8
  %4482 = inttoptr i64 %4480 to i32*
  store i32 1, i32* %4482, align 4
  %4483 = load i64, i64* %3, align 8
  %4484 = add i64 %4483, 15
  store i64 %4484, i64* %3, align 8
  br label %block_.L_440304

block_.L_4402fa:                                  ; preds = %block_.L_4402c3
  %4485 = add i64 %4479, -1248
  %4486 = add i64 %4478, 10
  store i64 %4486, i64* %3, align 8
  %4487 = inttoptr i64 %4485 to i32*
  store i32 1, i32* %4487, align 4
  %.pre418 = load i64, i64* %3, align 8
  br label %block_.L_440304

block_.L_440304:                                  ; preds = %block_.L_4402fa, %block_4402eb
  %4488 = phi i64 [ %.pre418, %block_.L_4402fa ], [ %4484, %block_4402eb ]
  %4489 = add i64 %4488, 5
  store i64 %4489, i64* %3, align 8
  br label %block_.L_440309

block_.L_440309:                                  ; preds = %block_.L_440304, %block_.L_4402be
  %storemerge277 = phi i64 [ %4461, %block_.L_4402be ], [ %4489, %block_.L_440304 ]
  %4490 = add i64 %storemerge277, 5
  store i64 %4490, i64* %3, align 8
  br label %block_.L_44030e

block_.L_44030e:                                  ; preds = %block_.L_440309, %block_.L_44022b
  %4491 = phi i64 [ %4490, %block_.L_440309 ], [ %4329, %block_.L_44022b ]
  %4492 = load i64, i64* %RBP.i, align 8
  %4493 = add i64 %4492, -288
  store i64 %4493, i64* %RAX.i3798, align 8
  %4494 = add i64 %4492, -1668
  %4495 = add i64 %4491, 14
  store i64 %4495, i64* %3, align 8
  %4496 = inttoptr i64 %4494 to i32*
  %4497 = load i32, i32* %4496, align 4
  %4498 = sext i32 %4497 to i64
  %4499 = shl nsw i64 %4498, 5
  store i64 %4499, i64* %RCX.i4416, align 8
  %4500 = add i64 %4499, %4493
  store i64 %4500, i64* %RDX.i4419, align 8
  %4501 = icmp ult i64 %4500, %4493
  %4502 = icmp ult i64 %4500, %4499
  %4503 = or i1 %4501, %4502
  %4504 = zext i1 %4503 to i8
  store i8 %4504, i8* %31, align 1
  %4505 = trunc i64 %4500 to i32
  %4506 = and i32 %4505, 255
  %4507 = tail call i32 @llvm.ctpop.i32(i32 %4506)
  %4508 = trunc i32 %4507 to i8
  %4509 = and i8 %4508, 1
  %4510 = xor i8 %4509, 1
  store i8 %4510, i8* %38, align 1
  %4511 = xor i64 %4493, %4500
  %4512 = lshr i64 %4511, 4
  %4513 = trunc i64 %4512 to i8
  %4514 = and i8 %4513, 1
  store i8 %4514, i8* %44, align 1
  %4515 = icmp eq i64 %4500, 0
  %4516 = zext i1 %4515 to i8
  store i8 %4516, i8* %47, align 1
  %4517 = lshr i64 %4500, 63
  %4518 = trunc i64 %4517 to i8
  store i8 %4518, i8* %50, align 1
  %4519 = lshr i64 %4493, 63
  %4520 = lshr i64 %4498, 58
  %4521 = and i64 %4520, 1
  %4522 = xor i64 %4517, %4519
  %4523 = xor i64 %4517, %4521
  %4524 = add nuw nsw i64 %4522, %4523
  %4525 = icmp eq i64 %4524, 2
  %4526 = zext i1 %4525 to i8
  store i8 %4526, i8* %56, align 1
  %4527 = inttoptr i64 %4500 to i32*
  %4528 = add i64 %4491, 27
  store i64 %4528, i64* %3, align 8
  %4529 = load i32, i32* %4527, align 4
  %4530 = sext i32 %4529 to i64
  store i64 %4530, i64* %RCX.i4416, align 8
  %4531 = add nsw i64 %4530, -1664
  %4532 = add i64 %4531, %4492
  %4533 = add i64 %4491, 35
  store i64 %4533, i64* %3, align 8
  %4534 = inttoptr i64 %4532 to i8*
  store i8 1, i8* %4534, align 1
  %4535 = load i64, i64* %RBP.i, align 8
  %4536 = add i64 %4535, -1668
  %4537 = load i64, i64* %3, align 8
  %4538 = add i64 %4537, 7
  store i64 %4538, i64* %3, align 8
  %4539 = inttoptr i64 %4536 to i32*
  %4540 = load i32, i32* %4539, align 4
  %4541 = sext i32 %4540 to i64
  %4542 = shl nsw i64 %4541, 5
  store i64 %4542, i64* %RCX.i4416, align 8
  %4543 = load i64, i64* %RAX.i3798, align 8
  %4544 = add i64 %4542, %4543
  store i64 %4544, i64* %RAX.i3798, align 8
  %4545 = icmp ult i64 %4544, %4543
  %4546 = icmp ult i64 %4544, %4542
  %4547 = or i1 %4545, %4546
  %4548 = zext i1 %4547 to i8
  store i8 %4548, i8* %31, align 1
  %4549 = trunc i64 %4544 to i32
  %4550 = and i32 %4549, 255
  %4551 = tail call i32 @llvm.ctpop.i32(i32 %4550)
  %4552 = trunc i32 %4551 to i8
  %4553 = and i8 %4552, 1
  %4554 = xor i8 %4553, 1
  store i8 %4554, i8* %38, align 1
  %4555 = xor i64 %4543, %4544
  %4556 = lshr i64 %4555, 4
  %4557 = trunc i64 %4556 to i8
  %4558 = and i8 %4557, 1
  store i8 %4558, i8* %44, align 1
  %4559 = icmp eq i64 %4544, 0
  %4560 = zext i1 %4559 to i8
  store i8 %4560, i8* %47, align 1
  %4561 = lshr i64 %4544, 63
  %4562 = trunc i64 %4561 to i8
  store i8 %4562, i8* %50, align 1
  %4563 = lshr i64 %4543, 63
  %4564 = lshr i64 %4541, 58
  %4565 = and i64 %4564, 1
  %4566 = xor i64 %4561, %4563
  %4567 = xor i64 %4561, %4565
  %4568 = add nuw nsw i64 %4566, %4567
  %4569 = icmp eq i64 %4568, 2
  %4570 = zext i1 %4569 to i8
  store i8 %4570, i8* %56, align 1
  %4571 = inttoptr i64 %4544 to i32*
  %4572 = add i64 %4537, 16
  store i64 %4572, i64* %3, align 8
  %4573 = load i32, i32* %4571, align 4
  %4574 = zext i32 %4573 to i64
  store i64 %4574, i64* %RDI.i3802.pre-phi, align 8
  %4575 = add i64 %4535, -40
  %4576 = add i64 %4537, 20
  store i64 %4576, i64* %3, align 8
  %4577 = inttoptr i64 %4575 to i64*
  %4578 = load i64, i64* %4577, align 8
  store i64 %4578, i64* %RSI.i3811.pre-phi, align 8
  %4579 = add i64 %4537, 15199
  %4580 = add i64 %4537, 25
  %4581 = load i64, i64* %6, align 8
  %4582 = add i64 %4581, -8
  %4583 = inttoptr i64 %4582 to i64*
  store i64 %4580, i64* %4583, align 8
  store i64 %4582, i64* %6, align 8
  store i64 %4579, i64* %3, align 8
  %call2_440345 = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %4579, %struct.Memory* %MEMORY.68)
  %4584 = load i32, i32* %EAX.i4398, align 4
  %4585 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %4586 = and i32 %4584, 255
  %4587 = tail call i32 @llvm.ctpop.i32(i32 %4586)
  %4588 = trunc i32 %4587 to i8
  %4589 = and i8 %4588, 1
  %4590 = xor i8 %4589, 1
  store i8 %4590, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %4591 = icmp eq i32 %4584, 0
  %4592 = zext i1 %4591 to i8
  store i8 %4592, i8* %47, align 1
  %4593 = lshr i32 %4584, 31
  %4594 = trunc i32 %4593 to i8
  store i8 %4594, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v614 = select i1 %4591, i64 24, i64 9
  %4595 = add i64 %4585, %.v614
  %4596 = load i64, i64* %RBP.i, align 8
  %4597 = add i64 %4596, -1680
  %4598 = add i64 %4595, 10
  store i64 %4598, i64* %3, align 8
  %4599 = inttoptr i64 %4597 to i32*
  br i1 %4591, label %block_.L_440362, label %block_440353

block_440353:                                     ; preds = %block_.L_44030e
  store i32 2, i32* %4599, align 4
  %4600 = load i64, i64* %3, align 8
  %4601 = add i64 %4600, 15
  store i64 %4601, i64* %3, align 8
  br label %block_.L_44036c

block_.L_440362:                                  ; preds = %block_.L_44030e
  store i32 0, i32* %4599, align 4
  %.pre419 = load i64, i64* %3, align 8
  br label %block_.L_44036c

block_.L_44036c:                                  ; preds = %block_.L_440362, %block_440353
  %4602 = phi i64 [ %.pre419, %block_.L_440362 ], [ %4601, %block_440353 ]
  %4603 = load i64, i64* %RBP.i, align 8
  %4604 = add i64 %4603, -288
  store i64 %4604, i64* %RAX.i3798, align 8
  %4605 = add i64 %4603, -1668
  %4606 = add i64 %4602, 14
  store i64 %4606, i64* %3, align 8
  %4607 = inttoptr i64 %4605 to i32*
  %4608 = load i32, i32* %4607, align 4
  %4609 = sext i32 %4608 to i64
  %4610 = shl nsw i64 %4609, 5
  store i64 %4610, i64* %RCX.i4416, align 8
  %4611 = add i64 %4610, %4604
  store i64 %4611, i64* %RDX.i4419, align 8
  %4612 = icmp ult i64 %4611, %4604
  %4613 = icmp ult i64 %4611, %4610
  %4614 = or i1 %4612, %4613
  %4615 = zext i1 %4614 to i8
  store i8 %4615, i8* %31, align 1
  %4616 = trunc i64 %4611 to i32
  %4617 = and i32 %4616, 255
  %4618 = tail call i32 @llvm.ctpop.i32(i32 %4617)
  %4619 = trunc i32 %4618 to i8
  %4620 = and i8 %4619, 1
  %4621 = xor i8 %4620, 1
  store i8 %4621, i8* %38, align 1
  %4622 = xor i64 %4604, %4611
  %4623 = lshr i64 %4622, 4
  %4624 = trunc i64 %4623 to i8
  %4625 = and i8 %4624, 1
  store i8 %4625, i8* %44, align 1
  %4626 = icmp eq i64 %4611, 0
  %4627 = zext i1 %4626 to i8
  store i8 %4627, i8* %47, align 1
  %4628 = lshr i64 %4611, 63
  %4629 = trunc i64 %4628 to i8
  store i8 %4629, i8* %50, align 1
  %4630 = lshr i64 %4604, 63
  %4631 = lshr i64 %4609, 58
  %4632 = and i64 %4631, 1
  %4633 = xor i64 %4628, %4630
  %4634 = xor i64 %4628, %4632
  %4635 = add nuw nsw i64 %4633, %4634
  %4636 = icmp eq i64 %4635, 2
  %4637 = zext i1 %4636 to i8
  store i8 %4637, i8* %56, align 1
  %4638 = inttoptr i64 %4611 to i32*
  %4639 = add i64 %4602, 26
  store i64 %4639, i64* %3, align 8
  %4640 = load i32, i32* %4638, align 4
  %4641 = zext i32 %4640 to i64
  store i64 %4641, i64* %RDI.i3802.pre-phi, align 8
  %4642 = add i64 %4603, -40
  %4643 = add i64 %4602, 30
  store i64 %4643, i64* %3, align 8
  %4644 = inttoptr i64 %4642 to i64*
  %4645 = load i64, i64* %4644, align 8
  store i64 %4645, i64* %RSI.i3811.pre-phi, align 8
  %4646 = add i64 %4603, -48
  %4647 = add i64 %4602, 34
  store i64 %4647, i64* %3, align 8
  %4648 = inttoptr i64 %4646 to i64*
  %4649 = load i64, i64* %4648, align 8
  store i64 %4649, i64* %RDX.i4419, align 8
  %4650 = add i64 %4602, 41
  store i64 %4650, i64* %3, align 8
  %4651 = load i32, i32* %4607, align 4
  %4652 = sext i32 %4651 to i64
  %4653 = shl nsw i64 %4652, 5
  store i64 %4653, i64* %RCX.i4416, align 8
  %4654 = load i64, i64* %RAX.i3798, align 8
  %4655 = add i64 %4653, %4654
  store i64 %4655, i64* %RAX.i3798, align 8
  %4656 = icmp ult i64 %4655, %4654
  %4657 = icmp ult i64 %4655, %4653
  %4658 = or i1 %4656, %4657
  %4659 = zext i1 %4658 to i8
  store i8 %4659, i8* %31, align 1
  %4660 = trunc i64 %4655 to i32
  %4661 = and i32 %4660, 255
  %4662 = tail call i32 @llvm.ctpop.i32(i32 %4661)
  %4663 = trunc i32 %4662 to i8
  %4664 = and i8 %4663, 1
  %4665 = xor i8 %4664, 1
  store i8 %4665, i8* %38, align 1
  %4666 = xor i64 %4654, %4655
  %4667 = lshr i64 %4666, 4
  %4668 = trunc i64 %4667 to i8
  %4669 = and i8 %4668, 1
  store i8 %4669, i8* %44, align 1
  %4670 = icmp eq i64 %4655, 0
  %4671 = zext i1 %4670 to i8
  store i8 %4671, i8* %47, align 1
  %4672 = lshr i64 %4655, 63
  %4673 = trunc i64 %4672 to i8
  store i8 %4673, i8* %50, align 1
  %4674 = lshr i64 %4654, 63
  %4675 = lshr i64 %4652, 58
  %4676 = and i64 %4675, 1
  %4677 = xor i64 %4672, %4674
  %4678 = xor i64 %4672, %4676
  %4679 = add nuw nsw i64 %4677, %4678
  %4680 = icmp eq i64 %4679, 2
  %4681 = zext i1 %4680 to i8
  store i8 %4681, i8* %56, align 1
  %4682 = add i64 %4655, 4
  %4683 = add i64 %4602, 51
  store i64 %4683, i64* %3, align 8
  %4684 = inttoptr i64 %4682 to i32*
  %4685 = load i32, i32* %4684, align 4
  %4686 = zext i32 %4685 to i64
  store i64 %4686, i64* %RCX.i4416, align 8
  %4687 = add i64 %4602, 15396
  %4688 = add i64 %4602, 56
  %4689 = load i64, i64* %6, align 8
  %4690 = add i64 %4689, -8
  %4691 = inttoptr i64 %4690 to i64*
  store i64 %4688, i64* %4691, align 8
  store i64 %4690, i64* %6, align 8
  store i64 %4687, i64* %3, align 8
  %call2_44039f = tail call %struct.Memory* @sub_443f90.semeai_move_value(%struct.State* nonnull %0, i64 %4687, %struct.Memory* %call2_440345)
  %4692 = load i64, i64* %3, align 8
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %4693 = load i64, i64* %RBP.i, align 8
  %4694 = add i64 %4693, -288
  store i64 %4694, i64* %RDX.i4419, align 8
  %4695 = add i64 %4693, -736
  store i64 %4695, i64* %RDI.i3802.pre-phi, align 8
  %4696 = add i64 %4693, -1696
  %4697 = load i32, i32* %EAX.i4398, align 4
  %4698 = add i64 %4692, 22
  store i64 %4698, i64* %3, align 8
  %4699 = inttoptr i64 %4696 to i32*
  store i32 %4697, i32* %4699, align 4
  %4700 = load i64, i64* %RBP.i, align 8
  %4701 = add i64 %4700, -1668
  %4702 = load i64, i64* %3, align 8
  %4703 = add i64 %4702, 7
  store i64 %4703, i64* %3, align 8
  %4704 = inttoptr i64 %4701 to i32*
  %4705 = load i32, i32* %4704, align 4
  %4706 = sext i32 %4705 to i64
  %4707 = shl nsw i64 %4706, 5
  store i64 %4707, i64* %RSI.i3811.pre-phi, align 8
  %4708 = load i64, i64* %RDX.i4419, align 8
  %4709 = add i64 %4707, %4708
  store i64 %4709, i64* %R8.i3721, align 8
  %4710 = icmp ult i64 %4709, %4708
  %4711 = icmp ult i64 %4709, %4707
  %4712 = or i1 %4710, %4711
  %4713 = zext i1 %4712 to i8
  store i8 %4713, i8* %31, align 1
  %4714 = trunc i64 %4709 to i32
  %4715 = and i32 %4714, 255
  %4716 = tail call i32 @llvm.ctpop.i32(i32 %4715)
  %4717 = trunc i32 %4716 to i8
  %4718 = and i8 %4717, 1
  %4719 = xor i8 %4718, 1
  store i8 %4719, i8* %38, align 1
  %4720 = xor i64 %4708, %4709
  %4721 = lshr i64 %4720, 4
  %4722 = trunc i64 %4721 to i8
  %4723 = and i8 %4722, 1
  store i8 %4723, i8* %44, align 1
  %4724 = icmp eq i64 %4709, 0
  %4725 = zext i1 %4724 to i8
  store i8 %4725, i8* %47, align 1
  %4726 = lshr i64 %4709, 63
  %4727 = trunc i64 %4726 to i8
  store i8 %4727, i8* %50, align 1
  %4728 = lshr i64 %4708, 63
  %4729 = lshr i64 %4706, 58
  %4730 = and i64 %4729, 1
  %4731 = xor i64 %4726, %4728
  %4732 = xor i64 %4726, %4730
  %4733 = add nuw nsw i64 %4731, %4732
  %4734 = icmp eq i64 %4733, 2
  %4735 = zext i1 %4734 to i8
  store i8 %4735, i8* %56, align 1
  %4736 = inttoptr i64 %4709 to i32*
  %4737 = add i64 %4702, 20
  store i64 %4737, i64* %3, align 8
  %4738 = load i32, i32* %4736, align 4
  %4739 = zext i32 %4738 to i64
  store i64 %4739, i64* %RSI.i3811.pre-phi, align 8
  %4740 = add i64 %4700, -1696
  %4741 = add i64 %4702, 26
  store i64 %4741, i64* %3, align 8
  %4742 = inttoptr i64 %4740 to i32*
  %4743 = load i32, i32* %4742, align 4
  %4744 = zext i32 %4743 to i64
  store i64 %4744, i64* %RAX.i3798, align 8
  %4745 = add i64 %4702, 33
  store i64 %4745, i64* %3, align 8
  %4746 = load i32, i32* %4704, align 4
  %4747 = sext i32 %4746 to i64
  %4748 = shl nsw i64 %4747, 5
  store i64 %4748, i64* %R8.i3721, align 8
  %4749 = add i64 %4748, %4708
  store i64 %4749, i64* %R9.i4411, align 8
  %4750 = icmp ult i64 %4749, %4708
  %4751 = icmp ult i64 %4749, %4748
  %4752 = or i1 %4750, %4751
  %4753 = zext i1 %4752 to i8
  store i8 %4753, i8* %31, align 1
  %4754 = trunc i64 %4749 to i32
  %4755 = and i32 %4754, 255
  %4756 = tail call i32 @llvm.ctpop.i32(i32 %4755)
  %4757 = trunc i32 %4756 to i8
  %4758 = and i8 %4757, 1
  %4759 = xor i8 %4758, 1
  store i8 %4759, i8* %38, align 1
  %4760 = xor i64 %4708, %4749
  %4761 = lshr i64 %4760, 4
  %4762 = trunc i64 %4761 to i8
  %4763 = and i8 %4762, 1
  store i8 %4763, i8* %44, align 1
  %4764 = icmp eq i64 %4749, 0
  %4765 = zext i1 %4764 to i8
  store i8 %4765, i8* %47, align 1
  %4766 = lshr i64 %4749, 63
  %4767 = trunc i64 %4766 to i8
  store i8 %4767, i8* %50, align 1
  %4768 = lshr i64 %4747, 58
  %4769 = and i64 %4768, 1
  %4770 = xor i64 %4766, %4728
  %4771 = xor i64 %4766, %4769
  %4772 = add nuw nsw i64 %4770, %4771
  %4773 = icmp eq i64 %4772, 2
  %4774 = zext i1 %4773 to i8
  store i8 %4774, i8* %56, align 1
  %4775 = add i64 %4749, 8
  %4776 = add i64 %4702, 47
  store i64 %4776, i64* %3, align 8
  %4777 = inttoptr i64 %4775 to i64*
  %4778 = load i64, i64* %4777, align 8
  store i64 %4778, i64* %R8.i3721, align 8
  %4779 = load i64, i64* %RBP.i, align 8
  %4780 = add i64 %4779, -1680
  %4781 = add i64 %4702, 54
  store i64 %4781, i64* %3, align 8
  %4782 = inttoptr i64 %4780 to i32*
  %4783 = load i32, i32* %4782, align 4
  %4784 = zext i32 %4783 to i64
  store i64 %4784, i64* %65, align 8
  %4785 = add i64 %4779, -1668
  %4786 = add i64 %4702, 61
  store i64 %4786, i64* %3, align 8
  %4787 = inttoptr i64 %4785 to i32*
  %4788 = load i32, i32* %4787, align 4
  %4789 = sext i32 %4788 to i64
  %4790 = shl nsw i64 %4789, 5
  store i64 %4790, i64* %R9.i4411, align 8
  %4791 = load i64, i64* %RDX.i4419, align 8
  %4792 = add i64 %4790, %4791
  store i64 %4792, i64* %RDX.i4419, align 8
  %4793 = icmp ult i64 %4792, %4791
  %4794 = icmp ult i64 %4792, %4790
  %4795 = or i1 %4793, %4794
  %4796 = zext i1 %4795 to i8
  store i8 %4796, i8* %31, align 1
  %4797 = trunc i64 %4792 to i32
  %4798 = and i32 %4797, 255
  %4799 = tail call i32 @llvm.ctpop.i32(i32 %4798)
  %4800 = trunc i32 %4799 to i8
  %4801 = and i8 %4800, 1
  %4802 = xor i8 %4801, 1
  store i8 %4802, i8* %38, align 1
  %4803 = xor i64 %4791, %4792
  %4804 = lshr i64 %4803, 4
  %4805 = trunc i64 %4804 to i8
  %4806 = and i8 %4805, 1
  store i8 %4806, i8* %44, align 1
  %4807 = icmp eq i64 %4792, 0
  %4808 = zext i1 %4807 to i8
  store i8 %4808, i8* %47, align 1
  %4809 = lshr i64 %4792, 63
  %4810 = trunc i64 %4809 to i8
  store i8 %4810, i8* %50, align 1
  %4811 = lshr i64 %4791, 63
  %4812 = lshr i64 %4789, 58
  %4813 = and i64 %4812, 1
  %4814 = xor i64 %4809, %4811
  %4815 = xor i64 %4809, %4813
  %4816 = add nuw nsw i64 %4814, %4815
  %4817 = icmp eq i64 %4816, 2
  %4818 = zext i1 %4817 to i8
  store i8 %4818, i8* %56, align 1
  %4819 = add i64 %4792, 20
  %4820 = add i64 %4702, 72
  store i64 %4820, i64* %3, align 8
  %4821 = inttoptr i64 %4819 to i32*
  %4822 = load i32, i32* %4821, align 4
  %4823 = zext i32 %4822 to i64
  store i64 %4823, i64* %R9.i4411, align 8
  %4824 = load i32, i32* %EAX.i4398, align 4
  %4825 = zext i32 %4824 to i64
  store i64 %4825, i64* %RDX.i4419, align 8
  %4826 = add i64 %4779, -3496
  %4827 = load i32, i32* %ECX.i4264, align 4
  %4828 = add i64 %4702, 80
  store i64 %4828, i64* %3, align 8
  %4829 = inttoptr i64 %4826 to i32*
  store i32 %4827, i32* %4829, align 4
  %4830 = load i64, i64* %R8.i3721, align 8
  %4831 = load i64, i64* %3, align 8
  store i64 %4830, i64* %RCX.i4416, align 8
  %4832 = load i32, i32* %R10D.i4438, align 4
  %4833 = zext i32 %4832 to i64
  store i64 %4833, i64* %R8.i3721, align 8
  %4834 = load i32*, i32** %3524, align 8
  %4835 = add i64 %4831, 13
  store i64 %4835, i64* %3, align 8
  store i32 0, i32* %4834, align 4
  %4836 = load i64, i64* %3, align 8
  %4837 = add i64 %4836, 15897
  %4838 = add i64 %4836, 5
  %4839 = load i64, i64* %6, align 8
  %4840 = add i64 %4839, -8
  %4841 = inttoptr i64 %4840 to i64*
  store i64 %4838, i64* %4841, align 8
  store i64 %4840, i64* %6, align 8
  store i64 %4837, i64* %3, align 8
  %call2_440417 = tail call %struct.Memory* @sub_444230.owl_add_move(%struct.State* nonnull %0, i64 %4837, %struct.Memory* %call2_44039f)
  %4842 = load i64, i64* %RBP.i, align 8
  %4843 = add i64 %4842, -1668
  %4844 = load i64, i64* %3, align 8
  %4845 = add i64 %4844, 6
  store i64 %4845, i64* %3, align 8
  %4846 = inttoptr i64 %4843 to i32*
  %4847 = load i32, i32* %4846, align 4
  %4848 = add i32 %4847, 1
  %4849 = zext i32 %4848 to i64
  store i64 %4849, i64* %RAX.i3798, align 8
  %4850 = icmp eq i32 %4847, -1
  %4851 = icmp eq i32 %4848, 0
  %4852 = or i1 %4850, %4851
  %4853 = zext i1 %4852 to i8
  store i8 %4853, i8* %31, align 1
  %4854 = and i32 %4848, 255
  %4855 = tail call i32 @llvm.ctpop.i32(i32 %4854)
  %4856 = trunc i32 %4855 to i8
  %4857 = and i8 %4856, 1
  %4858 = xor i8 %4857, 1
  store i8 %4858, i8* %38, align 1
  %4859 = xor i32 %4848, %4847
  %4860 = lshr i32 %4859, 4
  %4861 = trunc i32 %4860 to i8
  %4862 = and i8 %4861, 1
  store i8 %4862, i8* %44, align 1
  %4863 = zext i1 %4851 to i8
  store i8 %4863, i8* %47, align 1
  %4864 = lshr i32 %4848, 31
  %4865 = trunc i32 %4864 to i8
  store i8 %4865, i8* %50, align 1
  %4866 = lshr i32 %4847, 31
  %4867 = xor i32 %4864, %4866
  %4868 = add nuw nsw i32 %4867, %4864
  %4869 = icmp eq i32 %4868, 2
  %4870 = zext i1 %4869 to i8
  store i8 %4870, i8* %56, align 1
  %4871 = add i64 %4844, 15
  store i64 %4871, i64* %3, align 8
  store i32 %4848, i32* %4846, align 4
  %4872 = load i64, i64* %3, align 8
  %4873 = add i64 %4872, -587
  store i64 %4873, i64* %3, align 8
  br label %block_.L_4401e0

block_.L_44043a:                                  ; preds = %block_.L_440568, %block_440226
  %4874 = phi i64 [ %.pre407, %block_440226 ], [ %5546, %block_.L_440568 ]
  %MEMORY.75 = phi %struct.Memory* [ %MEMORY.68, %block_440226 ], [ %call2_44063d, %block_.L_440568 ]
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i8 0, i8* %CL.i2655, align 1
  %4875 = load i64, i64* %RBP.i, align 8
  %4876 = add i64 %4875, -1668
  %4877 = add i64 %4874, 11
  store i64 %4877, i64* %3, align 8
  %4878 = inttoptr i64 %4876 to i32*
  %4879 = load i32, i32* %4878, align 4
  %4880 = add i32 %4879, -2
  %4881 = icmp ult i32 %4879, 2
  %4882 = zext i1 %4881 to i8
  store i8 %4882, i8* %31, align 1
  %4883 = and i32 %4880, 255
  %4884 = tail call i32 @llvm.ctpop.i32(i32 %4883)
  %4885 = trunc i32 %4884 to i8
  %4886 = and i8 %4885, 1
  %4887 = xor i8 %4886, 1
  store i8 %4887, i8* %38, align 1
  %4888 = xor i32 %4880, %4879
  %4889 = lshr i32 %4888, 4
  %4890 = trunc i32 %4889 to i8
  %4891 = and i8 %4890, 1
  store i8 %4891, i8* %44, align 1
  %4892 = icmp eq i32 %4880, 0
  %4893 = zext i1 %4892 to i8
  store i8 %4893, i8* %47, align 1
  %4894 = lshr i32 %4880, 31
  %4895 = trunc i32 %4894 to i8
  store i8 %4895, i8* %50, align 1
  %4896 = lshr i32 %4879, 31
  %4897 = xor i32 %4894, %4896
  %4898 = add nuw nsw i32 %4897, %4896
  %4899 = icmp eq i32 %4898, 2
  %4900 = zext i1 %4899 to i8
  store i8 %4900, i8* %56, align 1
  %4901 = add i64 %4875, -3497
  %4902 = add i64 %4874, 17
  store i64 %4902, i64* %3, align 8
  %4903 = inttoptr i64 %4901 to i8*
  store i8 0, i8* %4903, align 1
  %4904 = load i64, i64* %3, align 8
  %4905 = add i64 %4904, 39
  %4906 = add i64 %4904, 6
  %4907 = load i8, i8* %50, align 1
  %4908 = icmp ne i8 %4907, 0
  %4909 = load i8, i8* %56, align 1
  %4910 = icmp ne i8 %4909, 0
  %4911 = xor i1 %4908, %4910
  %4912 = select i1 %4911, i64 %4906, i64 %4905
  store i64 %4912, i64* %3, align 8
  br i1 %4911, label %block_440451, label %block_.L_440472

block_440451:                                     ; preds = %block_.L_44043a
  %4913 = load i64, i64* %RBP.i, align 8
  %4914 = add i64 %4913, -384
  store i64 %4914, i64* %RAX.i3798, align 8
  %4915 = add i64 %4913, -1668
  %4916 = add i64 %4912, 14
  store i64 %4916, i64* %3, align 8
  %4917 = inttoptr i64 %4915 to i32*
  %4918 = load i32, i32* %4917, align 4
  %4919 = sext i32 %4918 to i64
  %4920 = shl nsw i64 %4919, 5
  store i64 %4920, i64* %RCX.i4416, align 8
  %4921 = add i64 %4920, %4914
  store i64 %4921, i64* %RAX.i3798, align 8
  %4922 = icmp ult i64 %4921, %4914
  %4923 = icmp ult i64 %4921, %4920
  %4924 = or i1 %4922, %4923
  %4925 = zext i1 %4924 to i8
  store i8 %4925, i8* %31, align 1
  %4926 = trunc i64 %4921 to i32
  %4927 = and i32 %4926, 255
  %4928 = tail call i32 @llvm.ctpop.i32(i32 %4927)
  %4929 = trunc i32 %4928 to i8
  %4930 = and i8 %4929, 1
  %4931 = xor i8 %4930, 1
  store i8 %4931, i8* %38, align 1
  %4932 = xor i64 %4914, %4921
  %4933 = lshr i64 %4932, 4
  %4934 = trunc i64 %4933 to i8
  %4935 = and i8 %4934, 1
  store i8 %4935, i8* %44, align 1
  %4936 = icmp eq i64 %4921, 0
  %4937 = zext i1 %4936 to i8
  store i8 %4937, i8* %47, align 1
  %4938 = lshr i64 %4921, 63
  %4939 = trunc i64 %4938 to i8
  store i8 %4939, i8* %50, align 1
  %4940 = lshr i64 %4914, 63
  %4941 = lshr i64 %4919, 58
  %4942 = and i64 %4941, 1
  %4943 = xor i64 %4938, %4940
  %4944 = xor i64 %4938, %4942
  %4945 = add nuw nsw i64 %4943, %4944
  %4946 = icmp eq i64 %4945, 2
  %4947 = zext i1 %4946 to i8
  store i8 %4947, i8* %56, align 1
  %4948 = inttoptr i64 %4921 to i32*
  %4949 = add i64 %4912, 24
  store i64 %4949, i64* %3, align 8
  %4950 = load i32, i32* %4948, align 4
  store i8 0, i8* %31, align 1
  %4951 = and i32 %4950, 255
  %4952 = tail call i32 @llvm.ctpop.i32(i32 %4951)
  %4953 = trunc i32 %4952 to i8
  %4954 = and i8 %4953, 1
  %4955 = xor i8 %4954, 1
  store i8 %4955, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %4956 = icmp eq i32 %4950, 0
  %4957 = zext i1 %4956 to i8
  store i8 %4957, i8* %47, align 1
  %4958 = lshr i32 %4950, 31
  %4959 = trunc i32 %4958 to i8
  store i8 %4959, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %4960 = xor i1 %4956, true
  %4961 = zext i1 %4960 to i8
  store i8 %4961, i8* %DL.i2633, align 1
  %4962 = add i64 %4913, -3497
  %4963 = add i64 %4912, 33
  store i64 %4963, i64* %3, align 8
  %4964 = inttoptr i64 %4962 to i8*
  store i8 %4961, i8* %4964, align 1
  %.pre408 = load i64, i64* %3, align 8
  br label %block_.L_440472

block_.L_440472:                                  ; preds = %block_.L_44043a, %block_440451
  %4965 = phi i64 [ %4905, %block_.L_44043a ], [ %.pre408, %block_440451 ]
  %4966 = load i64, i64* %RBP.i, align 8
  %4967 = add i64 %4966, -3497
  %4968 = add i64 %4965, 6
  store i64 %4968, i64* %3, align 8
  %4969 = inttoptr i64 %4967 to i8*
  %4970 = load i8, i8* %4969, align 1
  store i8 %4970, i8* %AL.i2654, align 1
  %4971 = and i8 %4970, 1
  store i8 0, i8* %31, align 1
  %4972 = zext i8 %4971 to i32
  %4973 = tail call i32 @llvm.ctpop.i32(i32 %4972)
  %4974 = trunc i32 %4973 to i8
  %4975 = xor i8 %4974, 1
  store i8 %4975, i8* %38, align 1
  %4976 = xor i8 %4971, 1
  store i8 %4976, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %4977 = icmp eq i8 %4976, 0
  %.v477 = select i1 %4977, i64 19, i64 14
  %4978 = add i64 %4965, %.v477
  store i64 %4978, i64* %3, align 8
  br i1 %4977, label %block_.L_440485, label %block_440480

block_440480:                                     ; preds = %block_.L_440472
  %4979 = add i64 %4966, -1668
  %4980 = add i64 %4978, 480
  store i64 %4980, i64* %3, align 8
  %4981 = inttoptr i64 %4979 to i32*
  store i32 0, i32* %4981, align 4
  %.pre409 = load i64, i64* %3, align 8
  br label %block_.L_440660

block_.L_440485:                                  ; preds = %block_.L_440472
  %4982 = add i64 %4966, -384
  store i64 %4982, i64* %RAX.i3798, align 8
  %4983 = add i64 %4966, -1668
  %4984 = add i64 %4978, 14
  store i64 %4984, i64* %3, align 8
  %4985 = inttoptr i64 %4983 to i32*
  %4986 = load i32, i32* %4985, align 4
  %4987 = sext i32 %4986 to i64
  %4988 = shl nsw i64 %4987, 5
  store i64 %4988, i64* %RCX.i4416, align 8
  %4989 = add i64 %4988, %4982
  store i64 %4989, i64* %RAX.i3798, align 8
  %4990 = icmp ult i64 %4989, %4982
  %4991 = icmp ult i64 %4989, %4988
  %4992 = or i1 %4990, %4991
  %4993 = zext i1 %4992 to i8
  store i8 %4993, i8* %31, align 1
  %4994 = trunc i64 %4989 to i32
  %4995 = and i32 %4994, 255
  %4996 = tail call i32 @llvm.ctpop.i32(i32 %4995)
  %4997 = trunc i32 %4996 to i8
  %4998 = and i8 %4997, 1
  %4999 = xor i8 %4998, 1
  store i8 %4999, i8* %38, align 1
  %5000 = xor i64 %4982, %4989
  %5001 = lshr i64 %5000, 4
  %5002 = trunc i64 %5001 to i8
  %5003 = and i8 %5002, 1
  store i8 %5003, i8* %44, align 1
  %5004 = icmp eq i64 %4989, 0
  %5005 = zext i1 %5004 to i8
  store i8 %5005, i8* %47, align 1
  %5006 = lshr i64 %4989, 63
  %5007 = trunc i64 %5006 to i8
  store i8 %5007, i8* %50, align 1
  %5008 = lshr i64 %4982, 63
  %5009 = lshr i64 %4987, 58
  %5010 = and i64 %5009, 1
  %5011 = xor i64 %5006, %5008
  %5012 = xor i64 %5006, %5010
  %5013 = add nuw nsw i64 %5011, %5012
  %5014 = icmp eq i64 %5013, 2
  %5015 = zext i1 %5014 to i8
  store i8 %5015, i8* %56, align 1
  %5016 = inttoptr i64 %4989 to i32*
  %5017 = add i64 %4978, 23
  store i64 %5017, i64* %3, align 8
  %5018 = load i32, i32* %5016, align 4
  %5019 = zext i32 %5018 to i64
  store i64 %5019, i64* %RDI.i3802.pre-phi, align 8
  %5020 = add i64 %4966, -48
  %5021 = add i64 %4978, 27
  store i64 %5021, i64* %3, align 8
  %5022 = inttoptr i64 %5020 to i64*
  %5023 = load i64, i64* %5022, align 8
  store i64 %5023, i64* %RSI.i3811.pre-phi, align 8
  %5024 = add i64 %4978, 14859
  %5025 = add i64 %4978, 32
  %5026 = load i64, i64* %6, align 8
  %5027 = add i64 %5026, -8
  %5028 = inttoptr i64 %5027 to i64*
  store i64 %5025, i64* %5028, align 8
  store i64 %5027, i64* %6, align 8
  store i64 %5024, i64* %3, align 8
  %call2_4404a0 = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %5024, %struct.Memory* %MEMORY.75)
  %5029 = load i32, i32* %EAX.i4398, align 4
  %5030 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %5031 = and i32 %5029, 255
  %5032 = tail call i32 @llvm.ctpop.i32(i32 %5031)
  %5033 = trunc i32 %5032 to i8
  %5034 = and i8 %5033, 1
  %5035 = xor i8 %5034, 1
  store i8 %5035, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5036 = icmp eq i32 %5029, 0
  %5037 = zext i1 %5036 to i8
  store i8 %5037, i8* %47, align 1
  %5038 = lshr i32 %5029, 31
  %5039 = trunc i32 %5038 to i8
  store i8 %5039, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v607 = select i1 %5036, i64 195, i64 9
  %5040 = add i64 %5030, %.v607
  store i64 %5040, i64* %3, align 8
  br i1 %5036, label %block_.L_440568, label %block_4404ae

block_4404ae:                                     ; preds = %block_.L_440485
  %5041 = load i64, i64* %RBP.i, align 8
  %5042 = add i64 %5041, -384
  store i64 %5042, i64* %RAX.i3798, align 8
  %5043 = add i64 %5041, -1668
  %5044 = add i64 %5040, 14
  store i64 %5044, i64* %3, align 8
  %5045 = inttoptr i64 %5043 to i32*
  %5046 = load i32, i32* %5045, align 4
  %5047 = sext i32 %5046 to i64
  %5048 = shl nsw i64 %5047, 5
  store i64 %5048, i64* %RCX.i4416, align 8
  %5049 = add i64 %5048, %5042
  store i64 %5049, i64* %RAX.i3798, align 8
  %5050 = icmp ult i64 %5049, %5042
  %5051 = icmp ult i64 %5049, %5048
  %5052 = or i1 %5050, %5051
  %5053 = zext i1 %5052 to i8
  store i8 %5053, i8* %31, align 1
  %5054 = trunc i64 %5049 to i32
  %5055 = and i32 %5054, 255
  %5056 = tail call i32 @llvm.ctpop.i32(i32 %5055)
  %5057 = trunc i32 %5056 to i8
  %5058 = and i8 %5057, 1
  %5059 = xor i8 %5058, 1
  store i8 %5059, i8* %38, align 1
  %5060 = xor i64 %5042, %5049
  %5061 = lshr i64 %5060, 4
  %5062 = trunc i64 %5061 to i8
  %5063 = and i8 %5062, 1
  store i8 %5063, i8* %44, align 1
  %5064 = icmp eq i64 %5049, 0
  %5065 = zext i1 %5064 to i8
  store i8 %5065, i8* %47, align 1
  %5066 = lshr i64 %5049, 63
  %5067 = trunc i64 %5066 to i8
  store i8 %5067, i8* %50, align 1
  %5068 = lshr i64 %5042, 63
  %5069 = lshr i64 %5047, 58
  %5070 = and i64 %5069, 1
  %5071 = xor i64 %5066, %5068
  %5072 = xor i64 %5066, %5070
  %5073 = add nuw nsw i64 %5071, %5072
  %5074 = icmp eq i64 %5073, 2
  %5075 = zext i1 %5074 to i8
  store i8 %5075, i8* %56, align 1
  %5076 = inttoptr i64 %5049 to i32*
  %5077 = add i64 %5040, 23
  store i64 %5077, i64* %3, align 8
  %5078 = load i32, i32* %5076, align 4
  %5079 = zext i32 %5078 to i64
  store i64 %5079, i64* %RDI.i3802.pre-phi, align 8
  %5080 = add i64 %5041, -40
  %5081 = add i64 %5040, 27
  store i64 %5081, i64* %3, align 8
  %5082 = inttoptr i64 %5080 to i64*
  %5083 = load i64, i64* %5082, align 8
  store i64 %5083, i64* %RSI.i3811.pre-phi, align 8
  %5084 = add i64 %5040, 14818
  %5085 = add i64 %5040, 32
  %5086 = load i64, i64* %6, align 8
  %5087 = add i64 %5086, -8
  %5088 = inttoptr i64 %5087 to i64*
  store i64 %5085, i64* %5088, align 8
  store i64 %5087, i64* %6, align 8
  store i64 %5084, i64* %3, align 8
  %call2_4404c9 = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %5084, %struct.Memory* %MEMORY.75)
  %5089 = load i32, i32* %EAX.i4398, align 4
  %5090 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %5091 = and i32 %5089, 255
  %5092 = tail call i32 @llvm.ctpop.i32(i32 %5091)
  %5093 = trunc i32 %5092 to i8
  %5094 = and i8 %5093, 1
  %5095 = xor i8 %5094, 1
  store i8 %5095, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5096 = icmp eq i32 %5089, 0
  %5097 = zext i1 %5096 to i8
  store i8 %5097, i8* %47, align 1
  %5098 = lshr i32 %5089, 31
  %5099 = trunc i32 %5098 to i8
  store i8 %5099, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v608 = select i1 %5096, i64 9, i64 79
  %5100 = add i64 %5090, %.v608
  %5101 = load i64, i64* %RBP.i, align 8
  %5102 = add i64 %5101, -384
  store i64 %5102, i64* %RAX.i3798, align 8
  %5103 = add i64 %5101, -1668
  %5104 = add i64 %5100, 14
  store i64 %5104, i64* %3, align 8
  %5105 = inttoptr i64 %5103 to i32*
  %5106 = load i32, i32* %5105, align 4
  %5107 = sext i32 %5106 to i64
  %5108 = shl nsw i64 %5107, 5
  store i64 %5108, i64* %RCX.i4416, align 8
  %5109 = add i64 %5108, %5102
  store i64 %5109, i64* %RAX.i3798, align 8
  %5110 = icmp ult i64 %5109, %5102
  %5111 = icmp ult i64 %5109, %5108
  %5112 = or i1 %5110, %5111
  %5113 = zext i1 %5112 to i8
  store i8 %5113, i8* %31, align 1
  %5114 = trunc i64 %5109 to i32
  %5115 = and i32 %5114, 255
  %5116 = tail call i32 @llvm.ctpop.i32(i32 %5115)
  %5117 = trunc i32 %5116 to i8
  %5118 = and i8 %5117, 1
  %5119 = xor i8 %5118, 1
  store i8 %5119, i8* %38, align 1
  %5120 = xor i64 %5102, %5109
  %5121 = lshr i64 %5120, 4
  %5122 = trunc i64 %5121 to i8
  %5123 = and i8 %5122, 1
  store i8 %5123, i8* %44, align 1
  %5124 = icmp eq i64 %5109, 0
  %5125 = zext i1 %5124 to i8
  store i8 %5125, i8* %47, align 1
  %5126 = lshr i64 %5109, 63
  %5127 = trunc i64 %5126 to i8
  store i8 %5127, i8* %50, align 1
  %5128 = lshr i64 %5102, 63
  %5129 = lshr i64 %5107, 58
  %5130 = and i64 %5129, 1
  %5131 = xor i64 %5126, %5128
  %5132 = xor i64 %5126, %5130
  %5133 = add nuw nsw i64 %5131, %5132
  %5134 = icmp eq i64 %5133, 2
  %5135 = zext i1 %5134 to i8
  store i8 %5135, i8* %56, align 1
  %5136 = inttoptr i64 %5109 to i32*
  %5137 = add i64 %5100, 23
  store i64 %5137, i64* %3, align 8
  %5138 = load i32, i32* %5136, align 4
  %5139 = zext i32 %5138 to i64
  store i64 %5139, i64* %RDI.i3802.pre-phi, align 8
  %5140 = add i64 %5101, -92
  %5141 = add i64 %5100, 26
  store i64 %5141, i64* %3, align 8
  %5142 = inttoptr i64 %5140 to i32*
  %5143 = load i32, i32* %5142, align 4
  %5144 = zext i32 %5143 to i64
  store i64 %5144, i64* %RSI.i3811.pre-phi, align 8
  br i1 %5096, label %block_4404d7, label %block_.L_44051d

block_4404d7:                                     ; preds = %block_4404ae
  %5145 = add i64 %5100, 178009
  %5146 = add i64 %5100, 31
  %5147 = load i64, i64* %6, align 8
  %5148 = add i64 %5147, -8
  %5149 = inttoptr i64 %5148 to i64*
  store i64 %5146, i64* %5149, align 8
  store i64 %5148, i64* %6, align 8
  store i64 %5145, i64* %3, align 8
  %call2_4404f1 = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %5145, %struct.Memory* %MEMORY.75)
  %5150 = load i32, i32* %EAX.i4398, align 4
  %5151 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %5152 = and i32 %5150, 255
  %5153 = tail call i32 @llvm.ctpop.i32(i32 %5152)
  %5154 = trunc i32 %5153 to i8
  %5155 = and i8 %5154, 1
  %5156 = xor i8 %5155, 1
  store i8 %5156, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5157 = icmp eq i32 %5150, 0
  %5158 = zext i1 %5157 to i8
  store i8 %5158, i8* %47, align 1
  %5159 = lshr i32 %5150, 31
  %5160 = trunc i32 %5159 to i8
  store i8 %5160, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v610 = select i1 %5157, i64 24, i64 9
  %5161 = add i64 %5151, %.v610
  store i64 %5161, i64* %3, align 8
  %5162 = load i64, i64* %RBP.i, align 8
  br i1 %5157, label %block_.L_44050e, label %block_4404ff

block_4404ff:                                     ; preds = %block_4404d7
  %5163 = add i64 %5162, -1236
  %5164 = add i64 %5161, 10
  store i64 %5164, i64* %3, align 8
  %5165 = inttoptr i64 %5163 to i32*
  store i32 1, i32* %5165, align 4
  %5166 = load i64, i64* %3, align 8
  %5167 = add i64 %5166, 15
  store i64 %5167, i64* %3, align 8
  br label %block_.L_440518

block_.L_44050e:                                  ; preds = %block_4404d7
  %5168 = add i64 %5162, -1240
  %5169 = add i64 %5161, 10
  store i64 %5169, i64* %3, align 8
  %5170 = inttoptr i64 %5168 to i32*
  store i32 1, i32* %5170, align 4
  %.pre415 = load i64, i64* %3, align 8
  br label %block_.L_440518

block_.L_440518:                                  ; preds = %block_.L_44050e, %block_4404ff
  %5171 = phi i64 [ %.pre415, %block_.L_44050e ], [ %5167, %block_4404ff ]
  %5172 = add i64 %5171, 75
  br label %block_.L_440563

block_.L_44051d:                                  ; preds = %block_4404ae
  %5173 = add i64 %5100, 177939
  %5174 = add i64 %5100, 31
  %5175 = load i64, i64* %6, align 8
  %5176 = add i64 %5175, -8
  %5177 = inttoptr i64 %5176 to i64*
  store i64 %5174, i64* %5177, align 8
  store i64 %5176, i64* %6, align 8
  store i64 %5173, i64* %3, align 8
  %call2_440537 = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %5173, %struct.Memory* %MEMORY.75)
  %5178 = load i32, i32* %EAX.i4398, align 4
  %5179 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %5180 = and i32 %5178, 255
  %5181 = tail call i32 @llvm.ctpop.i32(i32 %5180)
  %5182 = trunc i32 %5181 to i8
  %5183 = and i8 %5182, 1
  %5184 = xor i8 %5183, 1
  store i8 %5184, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5185 = icmp eq i32 %5178, 0
  %5186 = zext i1 %5185 to i8
  store i8 %5186, i8* %47, align 1
  %5187 = lshr i32 %5178, 31
  %5188 = trunc i32 %5187 to i8
  store i8 %5188, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v609 = select i1 %5185, i64 24, i64 9
  %5189 = add i64 %5179, %.v609
  store i64 %5189, i64* %3, align 8
  %5190 = load i64, i64* %RBP.i, align 8
  br i1 %5185, label %block_.L_440554, label %block_440545

block_440545:                                     ; preds = %block_.L_44051d
  %5191 = add i64 %5190, -1244
  %5192 = add i64 %5189, 10
  store i64 %5192, i64* %3, align 8
  %5193 = inttoptr i64 %5191 to i32*
  store i32 1, i32* %5193, align 4
  %5194 = load i64, i64* %3, align 8
  %5195 = add i64 %5194, 15
  store i64 %5195, i64* %3, align 8
  br label %block_.L_44055e

block_.L_440554:                                  ; preds = %block_.L_44051d
  %5196 = add i64 %5190, -1248
  %5197 = add i64 %5189, 10
  store i64 %5197, i64* %3, align 8
  %5198 = inttoptr i64 %5196 to i32*
  store i32 1, i32* %5198, align 4
  %.pre416 = load i64, i64* %3, align 8
  br label %block_.L_44055e

block_.L_44055e:                                  ; preds = %block_.L_440554, %block_440545
  %5199 = phi i64 [ %.pre416, %block_.L_440554 ], [ %5195, %block_440545 ]
  %5200 = add i64 %5199, 5
  store i64 %5200, i64* %3, align 8
  br label %block_.L_440563

block_.L_440563:                                  ; preds = %block_.L_44055e, %block_.L_440518
  %storemerge266 = phi i64 [ %5172, %block_.L_440518 ], [ %5200, %block_.L_44055e ]
  %5201 = add i64 %storemerge266, 5
  store i64 %5201, i64* %3, align 8
  br label %block_.L_440568

block_.L_440568:                                  ; preds = %block_.L_440563, %block_.L_440485
  %5202 = phi i64 [ %5201, %block_.L_440563 ], [ %5040, %block_.L_440485 ]
  %5203 = load i64, i64* %RBP.i, align 8
  %5204 = add i64 %5203, -384
  store i64 %5204, i64* %RAX.i3798, align 8
  %5205 = add i64 %5203, -1668
  %5206 = add i64 %5202, 14
  store i64 %5206, i64* %3, align 8
  %5207 = inttoptr i64 %5205 to i32*
  %5208 = load i32, i32* %5207, align 4
  %5209 = sext i32 %5208 to i64
  %5210 = shl nsw i64 %5209, 5
  store i64 %5210, i64* %RCX.i4416, align 8
  %5211 = add i64 %5210, %5204
  store i64 %5211, i64* %RDX.i4419, align 8
  %5212 = icmp ult i64 %5211, %5204
  %5213 = icmp ult i64 %5211, %5210
  %5214 = or i1 %5212, %5213
  %5215 = zext i1 %5214 to i8
  store i8 %5215, i8* %31, align 1
  %5216 = trunc i64 %5211 to i32
  %5217 = and i32 %5216, 255
  %5218 = tail call i32 @llvm.ctpop.i32(i32 %5217)
  %5219 = trunc i32 %5218 to i8
  %5220 = and i8 %5219, 1
  %5221 = xor i8 %5220, 1
  store i8 %5221, i8* %38, align 1
  %5222 = xor i64 %5204, %5211
  %5223 = lshr i64 %5222, 4
  %5224 = trunc i64 %5223 to i8
  %5225 = and i8 %5224, 1
  store i8 %5225, i8* %44, align 1
  %5226 = icmp eq i64 %5211, 0
  %5227 = zext i1 %5226 to i8
  store i8 %5227, i8* %47, align 1
  %5228 = lshr i64 %5211, 63
  %5229 = trunc i64 %5228 to i8
  store i8 %5229, i8* %50, align 1
  %5230 = lshr i64 %5204, 63
  %5231 = lshr i64 %5209, 58
  %5232 = and i64 %5231, 1
  %5233 = xor i64 %5228, %5230
  %5234 = xor i64 %5228, %5232
  %5235 = add nuw nsw i64 %5233, %5234
  %5236 = icmp eq i64 %5235, 2
  %5237 = zext i1 %5236 to i8
  store i8 %5237, i8* %56, align 1
  %5238 = inttoptr i64 %5211 to i32*
  %5239 = add i64 %5202, 27
  store i64 %5239, i64* %3, align 8
  %5240 = load i32, i32* %5238, align 4
  %5241 = sext i32 %5240 to i64
  store i64 %5241, i64* %RCX.i4416, align 8
  %5242 = add nsw i64 %5241, -1664
  %5243 = add i64 %5242, %5203
  %5244 = add i64 %5202, 35
  store i64 %5244, i64* %3, align 8
  %5245 = inttoptr i64 %5243 to i8*
  store i8 1, i8* %5245, align 1
  %5246 = load i64, i64* %RBP.i, align 8
  %5247 = add i64 %5246, -1668
  %5248 = load i64, i64* %3, align 8
  %5249 = add i64 %5248, 7
  store i64 %5249, i64* %3, align 8
  %5250 = inttoptr i64 %5247 to i32*
  %5251 = load i32, i32* %5250, align 4
  %5252 = sext i32 %5251 to i64
  %5253 = shl nsw i64 %5252, 5
  store i64 %5253, i64* %RCX.i4416, align 8
  %5254 = load i64, i64* %RAX.i3798, align 8
  %5255 = add i64 %5253, %5254
  store i64 %5255, i64* %RDX.i4419, align 8
  %5256 = icmp ult i64 %5255, %5254
  %5257 = icmp ult i64 %5255, %5253
  %5258 = or i1 %5256, %5257
  %5259 = zext i1 %5258 to i8
  store i8 %5259, i8* %31, align 1
  %5260 = trunc i64 %5255 to i32
  %5261 = and i32 %5260, 255
  %5262 = tail call i32 @llvm.ctpop.i32(i32 %5261)
  %5263 = trunc i32 %5262 to i8
  %5264 = and i8 %5263, 1
  %5265 = xor i8 %5264, 1
  store i8 %5265, i8* %38, align 1
  %5266 = xor i64 %5254, %5255
  %5267 = lshr i64 %5266, 4
  %5268 = trunc i64 %5267 to i8
  %5269 = and i8 %5268, 1
  store i8 %5269, i8* %44, align 1
  %5270 = icmp eq i64 %5255, 0
  %5271 = zext i1 %5270 to i8
  store i8 %5271, i8* %47, align 1
  %5272 = lshr i64 %5255, 63
  %5273 = trunc i64 %5272 to i8
  store i8 %5273, i8* %50, align 1
  %5274 = lshr i64 %5254, 63
  %5275 = lshr i64 %5252, 58
  %5276 = and i64 %5275, 1
  %5277 = xor i64 %5272, %5274
  %5278 = xor i64 %5272, %5276
  %5279 = add nuw nsw i64 %5277, %5278
  %5280 = icmp eq i64 %5279, 2
  %5281 = zext i1 %5280 to i8
  store i8 %5281, i8* %56, align 1
  %5282 = inttoptr i64 %5255 to i32*
  %5283 = add i64 %5248, 19
  store i64 %5283, i64* %3, align 8
  %5284 = load i32, i32* %5282, align 4
  %5285 = zext i32 %5284 to i64
  store i64 %5285, i64* %RDI.i3802.pre-phi, align 8
  %5286 = add i64 %5246, -40
  %5287 = add i64 %5248, 23
  store i64 %5287, i64* %3, align 8
  %5288 = inttoptr i64 %5286 to i64*
  %5289 = load i64, i64* %5288, align 8
  store i64 %5289, i64* %RSI.i3811.pre-phi, align 8
  %5290 = add i64 %5246, -48
  %5291 = add i64 %5248, 27
  store i64 %5291, i64* %3, align 8
  %5292 = inttoptr i64 %5290 to i64*
  %5293 = load i64, i64* %5292, align 8
  store i64 %5293, i64* %RDX.i4419, align 8
  %5294 = add i64 %5248, 34
  store i64 %5294, i64* %3, align 8
  %5295 = load i32, i32* %5250, align 4
  %5296 = sext i32 %5295 to i64
  %5297 = shl nsw i64 %5296, 5
  store i64 %5297, i64* %RCX.i4416, align 8
  %5298 = add i64 %5297, %5254
  store i64 %5298, i64* %RAX.i3798, align 8
  %5299 = icmp ult i64 %5298, %5254
  %5300 = icmp ult i64 %5298, %5297
  %5301 = or i1 %5299, %5300
  %5302 = zext i1 %5301 to i8
  store i8 %5302, i8* %31, align 1
  %5303 = trunc i64 %5298 to i32
  %5304 = and i32 %5303, 255
  %5305 = tail call i32 @llvm.ctpop.i32(i32 %5304)
  %5306 = trunc i32 %5305 to i8
  %5307 = and i8 %5306, 1
  %5308 = xor i8 %5307, 1
  store i8 %5308, i8* %38, align 1
  %5309 = xor i64 %5254, %5298
  %5310 = lshr i64 %5309, 4
  %5311 = trunc i64 %5310 to i8
  %5312 = and i8 %5311, 1
  store i8 %5312, i8* %44, align 1
  %5313 = icmp eq i64 %5298, 0
  %5314 = zext i1 %5313 to i8
  store i8 %5314, i8* %47, align 1
  %5315 = lshr i64 %5298, 63
  %5316 = trunc i64 %5315 to i8
  store i8 %5316, i8* %50, align 1
  %5317 = lshr i64 %5296, 58
  %5318 = and i64 %5317, 1
  %5319 = xor i64 %5315, %5274
  %5320 = xor i64 %5315, %5318
  %5321 = add nuw nsw i64 %5319, %5320
  %5322 = icmp eq i64 %5321, 2
  %5323 = zext i1 %5322 to i8
  store i8 %5323, i8* %56, align 1
  %5324 = add i64 %5298, 4
  %5325 = add i64 %5248, 44
  store i64 %5325, i64* %3, align 8
  %5326 = inttoptr i64 %5324 to i32*
  %5327 = load i32, i32* %5326, align 4
  %5328 = zext i32 %5327 to i64
  store i64 %5328, i64* %RCX.i4416, align 8
  %5329 = add i64 %5248, 14853
  %5330 = add i64 %5248, 49
  %5331 = load i64, i64* %6, align 8
  %5332 = add i64 %5331, -8
  %5333 = inttoptr i64 %5332 to i64*
  store i64 %5330, i64* %5333, align 8
  store i64 %5332, i64* %6, align 8
  store i64 %5329, i64* %3, align 8
  %call2_4405b7 = tail call %struct.Memory* @sub_443f90.semeai_move_value(%struct.State* nonnull %0, i64 %5329, %struct.Memory* %MEMORY.75)
  %5334 = load i64, i64* %3, align 8
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %5335 = load i64, i64* %RBP.i, align 8
  %5336 = add i64 %5335, -384
  store i64 %5336, i64* %RDX.i4419, align 8
  %5337 = add i64 %5335, -736
  store i64 %5337, i64* %RDI.i3802.pre-phi, align 8
  %5338 = add i64 %5335, -1696
  %5339 = load i32, i32* %EAX.i4398, align 4
  %5340 = add i64 %5334, 22
  store i64 %5340, i64* %3, align 8
  %5341 = inttoptr i64 %5338 to i32*
  store i32 %5339, i32* %5341, align 4
  %5342 = load i64, i64* %RBP.i, align 8
  %5343 = add i64 %5342, -1668
  %5344 = load i64, i64* %3, align 8
  %5345 = add i64 %5344, 7
  store i64 %5345, i64* %3, align 8
  %5346 = inttoptr i64 %5343 to i32*
  %5347 = load i32, i32* %5346, align 4
  %5348 = sext i32 %5347 to i64
  %5349 = shl nsw i64 %5348, 5
  store i64 %5349, i64* %RSI.i3811.pre-phi, align 8
  %5350 = load i64, i64* %RDX.i4419, align 8
  %5351 = add i64 %5349, %5350
  store i64 %5351, i64* %R8.i3721, align 8
  %5352 = icmp ult i64 %5351, %5350
  %5353 = icmp ult i64 %5351, %5349
  %5354 = or i1 %5352, %5353
  %5355 = zext i1 %5354 to i8
  store i8 %5355, i8* %31, align 1
  %5356 = trunc i64 %5351 to i32
  %5357 = and i32 %5356, 255
  %5358 = tail call i32 @llvm.ctpop.i32(i32 %5357)
  %5359 = trunc i32 %5358 to i8
  %5360 = and i8 %5359, 1
  %5361 = xor i8 %5360, 1
  store i8 %5361, i8* %38, align 1
  %5362 = xor i64 %5350, %5351
  %5363 = lshr i64 %5362, 4
  %5364 = trunc i64 %5363 to i8
  %5365 = and i8 %5364, 1
  store i8 %5365, i8* %44, align 1
  %5366 = icmp eq i64 %5351, 0
  %5367 = zext i1 %5366 to i8
  store i8 %5367, i8* %47, align 1
  %5368 = lshr i64 %5351, 63
  %5369 = trunc i64 %5368 to i8
  store i8 %5369, i8* %50, align 1
  %5370 = lshr i64 %5350, 63
  %5371 = lshr i64 %5348, 58
  %5372 = and i64 %5371, 1
  %5373 = xor i64 %5368, %5370
  %5374 = xor i64 %5368, %5372
  %5375 = add nuw nsw i64 %5373, %5374
  %5376 = icmp eq i64 %5375, 2
  %5377 = zext i1 %5376 to i8
  store i8 %5377, i8* %56, align 1
  %5378 = inttoptr i64 %5351 to i32*
  %5379 = add i64 %5344, 20
  store i64 %5379, i64* %3, align 8
  %5380 = load i32, i32* %5378, align 4
  %5381 = zext i32 %5380 to i64
  store i64 %5381, i64* %RSI.i3811.pre-phi, align 8
  %5382 = add i64 %5342, -1696
  %5383 = add i64 %5344, 26
  store i64 %5383, i64* %3, align 8
  %5384 = inttoptr i64 %5382 to i32*
  %5385 = load i32, i32* %5384, align 4
  %5386 = zext i32 %5385 to i64
  store i64 %5386, i64* %RAX.i3798, align 8
  %5387 = add i64 %5344, 33
  store i64 %5387, i64* %3, align 8
  %5388 = load i32, i32* %5346, align 4
  %5389 = sext i32 %5388 to i64
  %5390 = shl nsw i64 %5389, 5
  store i64 %5390, i64* %R8.i3721, align 8
  %5391 = add i64 %5390, %5350
  store i64 %5391, i64* %R9.i4411, align 8
  %5392 = icmp ult i64 %5391, %5350
  %5393 = icmp ult i64 %5391, %5390
  %5394 = or i1 %5392, %5393
  %5395 = zext i1 %5394 to i8
  store i8 %5395, i8* %31, align 1
  %5396 = trunc i64 %5391 to i32
  %5397 = and i32 %5396, 255
  %5398 = tail call i32 @llvm.ctpop.i32(i32 %5397)
  %5399 = trunc i32 %5398 to i8
  %5400 = and i8 %5399, 1
  %5401 = xor i8 %5400, 1
  store i8 %5401, i8* %38, align 1
  %5402 = xor i64 %5350, %5391
  %5403 = lshr i64 %5402, 4
  %5404 = trunc i64 %5403 to i8
  %5405 = and i8 %5404, 1
  store i8 %5405, i8* %44, align 1
  %5406 = icmp eq i64 %5391, 0
  %5407 = zext i1 %5406 to i8
  store i8 %5407, i8* %47, align 1
  %5408 = lshr i64 %5391, 63
  %5409 = trunc i64 %5408 to i8
  store i8 %5409, i8* %50, align 1
  %5410 = lshr i64 %5389, 58
  %5411 = and i64 %5410, 1
  %5412 = xor i64 %5408, %5370
  %5413 = xor i64 %5408, %5411
  %5414 = add nuw nsw i64 %5412, %5413
  %5415 = icmp eq i64 %5414, 2
  %5416 = zext i1 %5415 to i8
  store i8 %5416, i8* %56, align 1
  %5417 = add i64 %5391, 8
  %5418 = add i64 %5344, 47
  store i64 %5418, i64* %3, align 8
  %5419 = inttoptr i64 %5417 to i64*
  %5420 = load i64, i64* %5419, align 8
  store i64 %5420, i64* %R8.i3721, align 8
  %5421 = load i64, i64* %RBP.i, align 8
  %5422 = add i64 %5421, -1668
  %5423 = add i64 %5344, 54
  store i64 %5423, i64* %3, align 8
  %5424 = inttoptr i64 %5422 to i32*
  %5425 = load i32, i32* %5424, align 4
  %5426 = sext i32 %5425 to i64
  %5427 = shl nsw i64 %5426, 5
  store i64 %5427, i64* %R9.i4411, align 8
  %5428 = load i64, i64* %RDX.i4419, align 8
  %5429 = add i64 %5427, %5428
  store i64 %5429, i64* %65, align 8
  %5430 = icmp ult i64 %5429, %5428
  %5431 = icmp ult i64 %5429, %5427
  %5432 = or i1 %5430, %5431
  %5433 = zext i1 %5432 to i8
  store i8 %5433, i8* %31, align 1
  %5434 = trunc i64 %5429 to i32
  %5435 = and i32 %5434, 255
  %5436 = tail call i32 @llvm.ctpop.i32(i32 %5435)
  %5437 = trunc i32 %5436 to i8
  %5438 = and i8 %5437, 1
  %5439 = xor i8 %5438, 1
  store i8 %5439, i8* %38, align 1
  %5440 = xor i64 %5428, %5429
  %5441 = lshr i64 %5440, 4
  %5442 = trunc i64 %5441 to i8
  %5443 = and i8 %5442, 1
  store i8 %5443, i8* %44, align 1
  %5444 = icmp eq i64 %5429, 0
  %5445 = zext i1 %5444 to i8
  store i8 %5445, i8* %47, align 1
  %5446 = lshr i64 %5429, 63
  %5447 = trunc i64 %5446 to i8
  store i8 %5447, i8* %50, align 1
  %5448 = lshr i64 %5428, 63
  %5449 = lshr i64 %5426, 58
  %5450 = and i64 %5449, 1
  %5451 = xor i64 %5446, %5448
  %5452 = xor i64 %5446, %5450
  %5453 = add nuw nsw i64 %5451, %5452
  %5454 = icmp eq i64 %5453, 2
  %5455 = zext i1 %5454 to i8
  store i8 %5455, i8* %56, align 1
  %5456 = add i64 %5429, 16
  %5457 = add i64 %5344, 68
  store i64 %5457, i64* %3, align 8
  %5458 = inttoptr i64 %5456 to i32*
  %5459 = load i32, i32* %5458, align 4
  %5460 = zext i32 %5459 to i64
  store i64 %5460, i64* %R11.i4436, align 8
  %5461 = add i64 %5344, 75
  store i64 %5461, i64* %3, align 8
  %5462 = load i32, i32* %5424, align 4
  %5463 = sext i32 %5462 to i64
  %5464 = shl nsw i64 %5463, 5
  store i64 %5464, i64* %R9.i4411, align 8
  %5465 = add i64 %5464, %5428
  store i64 %5465, i64* %RDX.i4419, align 8
  %5466 = icmp ult i64 %5465, %5428
  %5467 = icmp ult i64 %5465, %5464
  %5468 = or i1 %5466, %5467
  %5469 = zext i1 %5468 to i8
  store i8 %5469, i8* %31, align 1
  %5470 = trunc i64 %5465 to i32
  %5471 = and i32 %5470, 255
  %5472 = tail call i32 @llvm.ctpop.i32(i32 %5471)
  %5473 = trunc i32 %5472 to i8
  %5474 = and i8 %5473, 1
  %5475 = xor i8 %5474, 1
  store i8 %5475, i8* %38, align 1
  %5476 = xor i64 %5428, %5465
  %5477 = lshr i64 %5476, 4
  %5478 = trunc i64 %5477 to i8
  %5479 = and i8 %5478, 1
  store i8 %5479, i8* %44, align 1
  %5480 = icmp eq i64 %5465, 0
  %5481 = zext i1 %5480 to i8
  store i8 %5481, i8* %47, align 1
  %5482 = lshr i64 %5465, 63
  %5483 = trunc i64 %5482 to i8
  store i8 %5483, i8* %50, align 1
  %5484 = lshr i64 %5463, 58
  %5485 = and i64 %5484, 1
  %5486 = xor i64 %5482, %5448
  %5487 = xor i64 %5482, %5485
  %5488 = add nuw nsw i64 %5486, %5487
  %5489 = icmp eq i64 %5488, 2
  %5490 = zext i1 %5489 to i8
  store i8 %5490, i8* %56, align 1
  %5491 = add i64 %5465, 20
  %5492 = add i64 %5344, 86
  store i64 %5492, i64* %3, align 8
  %5493 = inttoptr i64 %5491 to i32*
  %5494 = load i32, i32* %5493, align 4
  %5495 = zext i32 %5494 to i64
  store i64 %5495, i64* %R9.i4411, align 8
  %5496 = load i32, i32* %EAX.i4398, align 4
  %5497 = zext i32 %5496 to i64
  store i64 %5497, i64* %RDX.i4419, align 8
  %5498 = load i64, i64* %RBP.i, align 8
  %5499 = add i64 %5498, -3504
  %5500 = load i32, i32* %ECX.i4264, align 4
  %5501 = add i64 %5344, 94
  store i64 %5501, i64* %3, align 8
  %5502 = inttoptr i64 %5499 to i32*
  store i32 %5500, i32* %5502, align 4
  %5503 = load i64, i64* %R8.i3721, align 8
  %5504 = load i64, i64* %3, align 8
  store i64 %5503, i64* %RCX.i4416, align 8
  %5505 = load i32, i32* %R11D.i1854, align 4
  %5506 = zext i32 %5505 to i64
  store i64 %5506, i64* %R8.i3721, align 8
  %5507 = load i32*, i32** %3524, align 8
  %5508 = add i64 %5504, 13
  store i64 %5508, i64* %3, align 8
  store i32 0, i32* %5507, align 4
  %5509 = load i64, i64* %3, align 8
  %5510 = add i64 %5509, 15347
  %5511 = add i64 %5509, 5
  %5512 = load i64, i64* %6, align 8
  %5513 = add i64 %5512, -8
  %5514 = inttoptr i64 %5513 to i64*
  store i64 %5511, i64* %5514, align 8
  store i64 %5513, i64* %6, align 8
  store i64 %5510, i64* %3, align 8
  %call2_44063d = tail call %struct.Memory* @sub_444230.owl_add_move(%struct.State* nonnull %0, i64 %5510, %struct.Memory* %call2_4405b7)
  %5515 = load i64, i64* %RBP.i, align 8
  %5516 = add i64 %5515, -1668
  %5517 = load i64, i64* %3, align 8
  %5518 = add i64 %5517, 6
  store i64 %5518, i64* %3, align 8
  %5519 = inttoptr i64 %5516 to i32*
  %5520 = load i32, i32* %5519, align 4
  %5521 = add i32 %5520, 1
  %5522 = zext i32 %5521 to i64
  store i64 %5522, i64* %RAX.i3798, align 8
  %5523 = icmp eq i32 %5520, -1
  %5524 = icmp eq i32 %5521, 0
  %5525 = or i1 %5523, %5524
  %5526 = zext i1 %5525 to i8
  store i8 %5526, i8* %31, align 1
  %5527 = and i32 %5521, 255
  %5528 = tail call i32 @llvm.ctpop.i32(i32 %5527)
  %5529 = trunc i32 %5528 to i8
  %5530 = and i8 %5529, 1
  %5531 = xor i8 %5530, 1
  store i8 %5531, i8* %38, align 1
  %5532 = xor i32 %5521, %5520
  %5533 = lshr i32 %5532, 4
  %5534 = trunc i32 %5533 to i8
  %5535 = and i8 %5534, 1
  store i8 %5535, i8* %44, align 1
  %5536 = zext i1 %5524 to i8
  store i8 %5536, i8* %47, align 1
  %5537 = lshr i32 %5521, 31
  %5538 = trunc i32 %5537 to i8
  store i8 %5538, i8* %50, align 1
  %5539 = lshr i32 %5520, 31
  %5540 = xor i32 %5537, %5539
  %5541 = add nuw nsw i32 %5540, %5537
  %5542 = icmp eq i32 %5541, 2
  %5543 = zext i1 %5542 to i8
  store i8 %5543, i8* %56, align 1
  %5544 = add i64 %5517, 15
  store i64 %5544, i64* %3, align 8
  store i32 %5521, i32* %5519, align 4
  %5545 = load i64, i64* %3, align 8
  %5546 = add i64 %5545, -535
  store i64 %5546, i64* %3, align 8
  br label %block_.L_44043a

block_.L_440660:                                  ; preds = %block_.L_4407ec, %block_440480
  %5547 = phi i64 [ %.pre409, %block_440480 ], [ %6268, %block_.L_4407ec ]
  %MEMORY.81 = phi %struct.Memory* [ %MEMORY.75, %block_440480 ], [ %call2_440897, %block_.L_4407ec ]
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i8 0, i8* %CL.i2655, align 1
  %5548 = load i64, i64* %RBP.i, align 8
  %5549 = add i64 %5548, -1668
  %5550 = add i64 %5547, 11
  store i64 %5550, i64* %3, align 8
  %5551 = inttoptr i64 %5549 to i32*
  %5552 = load i32, i32* %5551, align 4
  %5553 = add i32 %5552, -2
  %5554 = icmp ult i32 %5552, 2
  %5555 = zext i1 %5554 to i8
  store i8 %5555, i8* %31, align 1
  %5556 = and i32 %5553, 255
  %5557 = tail call i32 @llvm.ctpop.i32(i32 %5556)
  %5558 = trunc i32 %5557 to i8
  %5559 = and i8 %5558, 1
  %5560 = xor i8 %5559, 1
  store i8 %5560, i8* %38, align 1
  %5561 = xor i32 %5553, %5552
  %5562 = lshr i32 %5561, 4
  %5563 = trunc i32 %5562 to i8
  %5564 = and i8 %5563, 1
  store i8 %5564, i8* %44, align 1
  %5565 = icmp eq i32 %5553, 0
  %5566 = zext i1 %5565 to i8
  store i8 %5566, i8* %47, align 1
  %5567 = lshr i32 %5553, 31
  %5568 = trunc i32 %5567 to i8
  store i8 %5568, i8* %50, align 1
  %5569 = lshr i32 %5552, 31
  %5570 = xor i32 %5567, %5569
  %5571 = add nuw nsw i32 %5570, %5569
  %5572 = icmp eq i32 %5571, 2
  %5573 = zext i1 %5572 to i8
  store i8 %5573, i8* %56, align 1
  %5574 = add i64 %5548, -3505
  %5575 = add i64 %5547, 17
  store i64 %5575, i64* %3, align 8
  %5576 = inttoptr i64 %5574 to i8*
  store i8 0, i8* %5576, align 1
  %5577 = load i64, i64* %3, align 8
  %5578 = add i64 %5577, 39
  %5579 = add i64 %5577, 6
  %5580 = load i8, i8* %50, align 1
  %5581 = icmp ne i8 %5580, 0
  %5582 = load i8, i8* %56, align 1
  %5583 = icmp ne i8 %5582, 0
  %5584 = xor i1 %5581, %5583
  %5585 = select i1 %5584, i64 %5579, i64 %5578
  store i64 %5585, i64* %3, align 8
  br i1 %5584, label %block_440677, label %block_.L_440698

block_440677:                                     ; preds = %block_.L_440660
  %5586 = load i64, i64* %RBP.i, align 8
  %5587 = add i64 %5586, -480
  store i64 %5587, i64* %RAX.i3798, align 8
  %5588 = add i64 %5586, -1668
  %5589 = add i64 %5585, 14
  store i64 %5589, i64* %3, align 8
  %5590 = inttoptr i64 %5588 to i32*
  %5591 = load i32, i32* %5590, align 4
  %5592 = sext i32 %5591 to i64
  %5593 = shl nsw i64 %5592, 5
  store i64 %5593, i64* %RCX.i4416, align 8
  %5594 = add i64 %5593, %5587
  store i64 %5594, i64* %RAX.i3798, align 8
  %5595 = icmp ult i64 %5594, %5587
  %5596 = icmp ult i64 %5594, %5593
  %5597 = or i1 %5595, %5596
  %5598 = zext i1 %5597 to i8
  store i8 %5598, i8* %31, align 1
  %5599 = trunc i64 %5594 to i32
  %5600 = and i32 %5599, 255
  %5601 = tail call i32 @llvm.ctpop.i32(i32 %5600)
  %5602 = trunc i32 %5601 to i8
  %5603 = and i8 %5602, 1
  %5604 = xor i8 %5603, 1
  store i8 %5604, i8* %38, align 1
  %5605 = xor i64 %5587, %5594
  %5606 = lshr i64 %5605, 4
  %5607 = trunc i64 %5606 to i8
  %5608 = and i8 %5607, 1
  store i8 %5608, i8* %44, align 1
  %5609 = icmp eq i64 %5594, 0
  %5610 = zext i1 %5609 to i8
  store i8 %5610, i8* %47, align 1
  %5611 = lshr i64 %5594, 63
  %5612 = trunc i64 %5611 to i8
  store i8 %5612, i8* %50, align 1
  %5613 = lshr i64 %5587, 63
  %5614 = lshr i64 %5592, 58
  %5615 = and i64 %5614, 1
  %5616 = xor i64 %5611, %5613
  %5617 = xor i64 %5611, %5615
  %5618 = add nuw nsw i64 %5616, %5617
  %5619 = icmp eq i64 %5618, 2
  %5620 = zext i1 %5619 to i8
  store i8 %5620, i8* %56, align 1
  %5621 = inttoptr i64 %5594 to i32*
  %5622 = add i64 %5585, 24
  store i64 %5622, i64* %3, align 8
  %5623 = load i32, i32* %5621, align 4
  store i8 0, i8* %31, align 1
  %5624 = and i32 %5623, 255
  %5625 = tail call i32 @llvm.ctpop.i32(i32 %5624)
  %5626 = trunc i32 %5625 to i8
  %5627 = and i8 %5626, 1
  %5628 = xor i8 %5627, 1
  store i8 %5628, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5629 = icmp eq i32 %5623, 0
  %5630 = zext i1 %5629 to i8
  store i8 %5630, i8* %47, align 1
  %5631 = lshr i32 %5623, 31
  %5632 = trunc i32 %5631 to i8
  store i8 %5632, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %5633 = xor i1 %5629, true
  %5634 = zext i1 %5633 to i8
  store i8 %5634, i8* %DL.i2633, align 1
  %5635 = add i64 %5586, -3505
  %5636 = add i64 %5585, 33
  store i64 %5636, i64* %3, align 8
  %5637 = inttoptr i64 %5635 to i8*
  store i8 %5634, i8* %5637, align 1
  %.pre410 = load i64, i64* %3, align 8
  br label %block_.L_440698

block_.L_440698:                                  ; preds = %block_.L_440660, %block_440677
  %5638 = phi i64 [ %5578, %block_.L_440660 ], [ %.pre410, %block_440677 ]
  %5639 = load i64, i64* %RBP.i, align 8
  %5640 = add i64 %5639, -3505
  %5641 = add i64 %5638, 6
  store i64 %5641, i64* %3, align 8
  %5642 = inttoptr i64 %5640 to i8*
  %5643 = load i8, i8* %5642, align 1
  store i8 %5643, i8* %AL.i2654, align 1
  %5644 = and i8 %5643, 1
  store i8 0, i8* %31, align 1
  %5645 = zext i8 %5644 to i32
  %5646 = tail call i32 @llvm.ctpop.i32(i32 %5645)
  %5647 = trunc i32 %5646 to i8
  %5648 = xor i8 %5647, 1
  store i8 %5648, i8* %38, align 1
  %5649 = xor i8 %5644, 1
  store i8 %5649, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %5650 = icmp eq i8 %5649, 0
  %.v478 = select i1 %5650, i64 19, i64 14
  %5651 = add i64 %5638, %.v478
  store i64 %5651, i64* %3, align 8
  br i1 %5650, label %block_.L_4406ab, label %block_4406a6

block_4406a6:                                     ; preds = %block_.L_440698
  %5652 = add i64 %5639, -736
  %5653 = add i64 %5651, 529
  store i64 %5653, i64* %3, align 8
  %5654 = inttoptr i64 %5652 to i32*
  %5655 = load i32, i32* %5654, align 4
  store i8 0, i8* %31, align 1
  %5656 = and i32 %5655, 255
  %5657 = tail call i32 @llvm.ctpop.i32(i32 %5656)
  %5658 = trunc i32 %5657 to i8
  %5659 = and i8 %5658, 1
  %5660 = xor i8 %5659, 1
  store i8 %5660, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5661 = icmp eq i32 %5655, 0
  %5662 = zext i1 %5661 to i8
  store i8 %5662, i8* %47, align 1
  %5663 = lshr i32 %5655, 31
  %5664 = trunc i32 %5663 to i8
  store i8 %5664, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v523 = select i1 %5661, i64 535, i64 542
  %5665 = add i64 %5651, %.v523
  store i64 %5665, i64* %3, align 8
  br i1 %5661, label %block_4408bd, label %block_.L_4408c4

block_.L_4406ab:                                  ; preds = %block_.L_440698
  %5666 = add i64 %5639, -480
  store i64 %5666, i64* %RAX.i3798, align 8
  %5667 = add i64 %5639, -1668
  %5668 = add i64 %5651, 14
  store i64 %5668, i64* %3, align 8
  %5669 = inttoptr i64 %5667 to i32*
  %5670 = load i32, i32* %5669, align 4
  %5671 = sext i32 %5670 to i64
  %5672 = shl nsw i64 %5671, 5
  store i64 %5672, i64* %RCX.i4416, align 8
  %5673 = add i64 %5672, %5666
  store i64 %5673, i64* %RAX.i3798, align 8
  %5674 = icmp ult i64 %5673, %5666
  %5675 = icmp ult i64 %5673, %5672
  %5676 = or i1 %5674, %5675
  %5677 = zext i1 %5676 to i8
  store i8 %5677, i8* %31, align 1
  %5678 = trunc i64 %5673 to i32
  %5679 = and i32 %5678, 255
  %5680 = tail call i32 @llvm.ctpop.i32(i32 %5679)
  %5681 = trunc i32 %5680 to i8
  %5682 = and i8 %5681, 1
  %5683 = xor i8 %5682, 1
  store i8 %5683, i8* %38, align 1
  %5684 = xor i64 %5666, %5673
  %5685 = lshr i64 %5684, 4
  %5686 = trunc i64 %5685 to i8
  %5687 = and i8 %5686, 1
  store i8 %5687, i8* %44, align 1
  %5688 = icmp eq i64 %5673, 0
  %5689 = zext i1 %5688 to i8
  store i8 %5689, i8* %47, align 1
  %5690 = lshr i64 %5673, 63
  %5691 = trunc i64 %5690 to i8
  store i8 %5691, i8* %50, align 1
  %5692 = lshr i64 %5666, 63
  %5693 = lshr i64 %5671, 58
  %5694 = and i64 %5693, 1
  %5695 = xor i64 %5690, %5692
  %5696 = xor i64 %5690, %5694
  %5697 = add nuw nsw i64 %5695, %5696
  %5698 = icmp eq i64 %5697, 2
  %5699 = zext i1 %5698 to i8
  store i8 %5699, i8* %56, align 1
  %5700 = inttoptr i64 %5673 to i32*
  %5701 = add i64 %5651, 23
  store i64 %5701, i64* %3, align 8
  %5702 = load i32, i32* %5700, align 4
  %5703 = zext i32 %5702 to i64
  store i64 %5703, i64* %RDI.i3802.pre-phi, align 8
  %5704 = add i64 %5639, -48
  %5705 = add i64 %5651, 27
  store i64 %5705, i64* %3, align 8
  %5706 = inttoptr i64 %5704 to i64*
  %5707 = load i64, i64* %5706, align 8
  store i64 %5707, i64* %RSI.i3811.pre-phi, align 8
  %5708 = add i64 %5651, 14309
  %5709 = add i64 %5651, 32
  %5710 = load i64, i64* %6, align 8
  %5711 = add i64 %5710, -8
  %5712 = inttoptr i64 %5711 to i64*
  store i64 %5709, i64* %5712, align 8
  store i64 %5711, i64* %6, align 8
  store i64 %5708, i64* %3, align 8
  %call2_4406c6 = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %5708, %struct.Memory* %MEMORY.81)
  %5713 = load i32, i32* %EAX.i4398, align 4
  %5714 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %5715 = and i32 %5713, 255
  %5716 = tail call i32 @llvm.ctpop.i32(i32 %5715)
  %5717 = trunc i32 %5716 to i8
  %5718 = and i8 %5717, 1
  %5719 = xor i8 %5718, 1
  store i8 %5719, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5720 = icmp eq i32 %5713, 0
  %5721 = zext i1 %5720 to i8
  store i8 %5721, i8* %47, align 1
  %5722 = lshr i32 %5713, 31
  %5723 = trunc i32 %5722 to i8
  store i8 %5723, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v602 = select i1 %5720, i64 195, i64 9
  %5724 = add i64 %5714, %.v602
  store i64 %5724, i64* %3, align 8
  br i1 %5720, label %block_.L_44078e, label %block_4406d4

block_4406d4:                                     ; preds = %block_.L_4406ab
  %5725 = load i64, i64* %RBP.i, align 8
  %5726 = add i64 %5725, -480
  store i64 %5726, i64* %RAX.i3798, align 8
  %5727 = add i64 %5725, -1668
  %5728 = add i64 %5724, 14
  store i64 %5728, i64* %3, align 8
  %5729 = inttoptr i64 %5727 to i32*
  %5730 = load i32, i32* %5729, align 4
  %5731 = sext i32 %5730 to i64
  %5732 = shl nsw i64 %5731, 5
  store i64 %5732, i64* %RCX.i4416, align 8
  %5733 = add i64 %5732, %5726
  store i64 %5733, i64* %RAX.i3798, align 8
  %5734 = icmp ult i64 %5733, %5726
  %5735 = icmp ult i64 %5733, %5732
  %5736 = or i1 %5734, %5735
  %5737 = zext i1 %5736 to i8
  store i8 %5737, i8* %31, align 1
  %5738 = trunc i64 %5733 to i32
  %5739 = and i32 %5738, 255
  %5740 = tail call i32 @llvm.ctpop.i32(i32 %5739)
  %5741 = trunc i32 %5740 to i8
  %5742 = and i8 %5741, 1
  %5743 = xor i8 %5742, 1
  store i8 %5743, i8* %38, align 1
  %5744 = xor i64 %5726, %5733
  %5745 = lshr i64 %5744, 4
  %5746 = trunc i64 %5745 to i8
  %5747 = and i8 %5746, 1
  store i8 %5747, i8* %44, align 1
  %5748 = icmp eq i64 %5733, 0
  %5749 = zext i1 %5748 to i8
  store i8 %5749, i8* %47, align 1
  %5750 = lshr i64 %5733, 63
  %5751 = trunc i64 %5750 to i8
  store i8 %5751, i8* %50, align 1
  %5752 = lshr i64 %5726, 63
  %5753 = lshr i64 %5731, 58
  %5754 = and i64 %5753, 1
  %5755 = xor i64 %5750, %5752
  %5756 = xor i64 %5750, %5754
  %5757 = add nuw nsw i64 %5755, %5756
  %5758 = icmp eq i64 %5757, 2
  %5759 = zext i1 %5758 to i8
  store i8 %5759, i8* %56, align 1
  %5760 = inttoptr i64 %5733 to i32*
  %5761 = add i64 %5724, 23
  store i64 %5761, i64* %3, align 8
  %5762 = load i32, i32* %5760, align 4
  %5763 = zext i32 %5762 to i64
  store i64 %5763, i64* %RDI.i3802.pre-phi, align 8
  %5764 = add i64 %5725, -40
  %5765 = add i64 %5724, 27
  store i64 %5765, i64* %3, align 8
  %5766 = inttoptr i64 %5764 to i64*
  %5767 = load i64, i64* %5766, align 8
  store i64 %5767, i64* %RSI.i3811.pre-phi, align 8
  %5768 = add i64 %5724, 14268
  %5769 = add i64 %5724, 32
  %5770 = load i64, i64* %6, align 8
  %5771 = add i64 %5770, -8
  %5772 = inttoptr i64 %5771 to i64*
  store i64 %5769, i64* %5772, align 8
  store i64 %5771, i64* %6, align 8
  store i64 %5768, i64* %3, align 8
  %call2_4406ef = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %5768, %struct.Memory* %MEMORY.81)
  %5773 = load i32, i32* %EAX.i4398, align 4
  %5774 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %5775 = and i32 %5773, 255
  %5776 = tail call i32 @llvm.ctpop.i32(i32 %5775)
  %5777 = trunc i32 %5776 to i8
  %5778 = and i8 %5777, 1
  %5779 = xor i8 %5778, 1
  store i8 %5779, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5780 = icmp eq i32 %5773, 0
  %5781 = zext i1 %5780 to i8
  store i8 %5781, i8* %47, align 1
  %5782 = lshr i32 %5773, 31
  %5783 = trunc i32 %5782 to i8
  store i8 %5783, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v603 = select i1 %5780, i64 9, i64 79
  %5784 = add i64 %5774, %.v603
  %5785 = load i64, i64* %RBP.i, align 8
  %5786 = add i64 %5785, -480
  store i64 %5786, i64* %RAX.i3798, align 8
  %5787 = add i64 %5785, -1668
  %5788 = add i64 %5784, 14
  store i64 %5788, i64* %3, align 8
  %5789 = inttoptr i64 %5787 to i32*
  %5790 = load i32, i32* %5789, align 4
  %5791 = sext i32 %5790 to i64
  %5792 = shl nsw i64 %5791, 5
  store i64 %5792, i64* %RCX.i4416, align 8
  %5793 = add i64 %5792, %5786
  store i64 %5793, i64* %RAX.i3798, align 8
  %5794 = icmp ult i64 %5793, %5786
  %5795 = icmp ult i64 %5793, %5792
  %5796 = or i1 %5794, %5795
  %5797 = zext i1 %5796 to i8
  store i8 %5797, i8* %31, align 1
  %5798 = trunc i64 %5793 to i32
  %5799 = and i32 %5798, 255
  %5800 = tail call i32 @llvm.ctpop.i32(i32 %5799)
  %5801 = trunc i32 %5800 to i8
  %5802 = and i8 %5801, 1
  %5803 = xor i8 %5802, 1
  store i8 %5803, i8* %38, align 1
  %5804 = xor i64 %5786, %5793
  %5805 = lshr i64 %5804, 4
  %5806 = trunc i64 %5805 to i8
  %5807 = and i8 %5806, 1
  store i8 %5807, i8* %44, align 1
  %5808 = icmp eq i64 %5793, 0
  %5809 = zext i1 %5808 to i8
  store i8 %5809, i8* %47, align 1
  %5810 = lshr i64 %5793, 63
  %5811 = trunc i64 %5810 to i8
  store i8 %5811, i8* %50, align 1
  %5812 = lshr i64 %5786, 63
  %5813 = lshr i64 %5791, 58
  %5814 = and i64 %5813, 1
  %5815 = xor i64 %5810, %5812
  %5816 = xor i64 %5810, %5814
  %5817 = add nuw nsw i64 %5815, %5816
  %5818 = icmp eq i64 %5817, 2
  %5819 = zext i1 %5818 to i8
  store i8 %5819, i8* %56, align 1
  %5820 = inttoptr i64 %5793 to i32*
  %5821 = add i64 %5784, 23
  store i64 %5821, i64* %3, align 8
  %5822 = load i32, i32* %5820, align 4
  %5823 = zext i32 %5822 to i64
  store i64 %5823, i64* %RDI.i3802.pre-phi, align 8
  %5824 = add i64 %5785, -92
  %5825 = add i64 %5784, 26
  store i64 %5825, i64* %3, align 8
  %5826 = inttoptr i64 %5824 to i32*
  %5827 = load i32, i32* %5826, align 4
  %5828 = zext i32 %5827 to i64
  store i64 %5828, i64* %RSI.i3811.pre-phi, align 8
  br i1 %5780, label %block_4406fd, label %block_.L_440743

block_4406fd:                                     ; preds = %block_4406d4
  %5829 = add i64 %5784, 177459
  %5830 = add i64 %5784, 31
  %5831 = load i64, i64* %6, align 8
  %5832 = add i64 %5831, -8
  %5833 = inttoptr i64 %5832 to i64*
  store i64 %5830, i64* %5833, align 8
  store i64 %5832, i64* %6, align 8
  store i64 %5829, i64* %3, align 8
  %call2_440717 = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %5829, %struct.Memory* %MEMORY.81)
  %5834 = load i32, i32* %EAX.i4398, align 4
  %5835 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %5836 = and i32 %5834, 255
  %5837 = tail call i32 @llvm.ctpop.i32(i32 %5836)
  %5838 = trunc i32 %5837 to i8
  %5839 = and i8 %5838, 1
  %5840 = xor i8 %5839, 1
  store i8 %5840, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5841 = icmp eq i32 %5834, 0
  %5842 = zext i1 %5841 to i8
  store i8 %5842, i8* %47, align 1
  %5843 = lshr i32 %5834, 31
  %5844 = trunc i32 %5843 to i8
  store i8 %5844, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v606 = select i1 %5841, i64 24, i64 9
  %5845 = add i64 %5835, %.v606
  store i64 %5845, i64* %3, align 8
  %5846 = load i64, i64* %RBP.i, align 8
  br i1 %5841, label %block_.L_440734, label %block_440725

block_440725:                                     ; preds = %block_4406fd
  %5847 = add i64 %5846, -1236
  %5848 = add i64 %5845, 10
  store i64 %5848, i64* %3, align 8
  %5849 = inttoptr i64 %5847 to i32*
  store i32 1, i32* %5849, align 4
  %5850 = load i64, i64* %3, align 8
  %5851 = add i64 %5850, 15
  store i64 %5851, i64* %3, align 8
  br label %block_.L_44073e

block_.L_440734:                                  ; preds = %block_4406fd
  %5852 = add i64 %5846, -1240
  %5853 = add i64 %5845, 10
  store i64 %5853, i64* %3, align 8
  %5854 = inttoptr i64 %5852 to i32*
  store i32 1, i32* %5854, align 4
  %.pre412 = load i64, i64* %3, align 8
  br label %block_.L_44073e

block_.L_44073e:                                  ; preds = %block_.L_440734, %block_440725
  %5855 = phi i64 [ %.pre412, %block_.L_440734 ], [ %5851, %block_440725 ]
  %5856 = add i64 %5855, 75
  br label %block_.L_440789

block_.L_440743:                                  ; preds = %block_4406d4
  %5857 = add i64 %5784, 177389
  %5858 = add i64 %5784, 31
  %5859 = load i64, i64* %6, align 8
  %5860 = add i64 %5859, -8
  %5861 = inttoptr i64 %5860 to i64*
  store i64 %5858, i64* %5861, align 8
  store i64 %5860, i64* %6, align 8
  store i64 %5857, i64* %3, align 8
  %call2_44075d = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %5857, %struct.Memory* %MEMORY.81)
  %5862 = load i32, i32* %EAX.i4398, align 4
  %5863 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %5864 = and i32 %5862, 255
  %5865 = tail call i32 @llvm.ctpop.i32(i32 %5864)
  %5866 = trunc i32 %5865 to i8
  %5867 = and i8 %5866, 1
  %5868 = xor i8 %5867, 1
  store i8 %5868, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5869 = icmp eq i32 %5862, 0
  %5870 = zext i1 %5869 to i8
  store i8 %5870, i8* %47, align 1
  %5871 = lshr i32 %5862, 31
  %5872 = trunc i32 %5871 to i8
  store i8 %5872, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v604 = select i1 %5869, i64 24, i64 9
  %5873 = add i64 %5863, %.v604
  store i64 %5873, i64* %3, align 8
  %5874 = load i64, i64* %RBP.i, align 8
  br i1 %5869, label %block_.L_44077a, label %block_44076b

block_44076b:                                     ; preds = %block_.L_440743
  %5875 = add i64 %5874, -1244
  %5876 = add i64 %5873, 10
  store i64 %5876, i64* %3, align 8
  %5877 = inttoptr i64 %5875 to i32*
  store i32 1, i32* %5877, align 4
  %5878 = load i64, i64* %3, align 8
  %5879 = add i64 %5878, 15
  store i64 %5879, i64* %3, align 8
  br label %block_.L_440784

block_.L_44077a:                                  ; preds = %block_.L_440743
  %5880 = add i64 %5874, -1248
  %5881 = add i64 %5873, 10
  store i64 %5881, i64* %3, align 8
  %5882 = inttoptr i64 %5880 to i32*
  store i32 1, i32* %5882, align 4
  %.pre413 = load i64, i64* %3, align 8
  br label %block_.L_440784

block_.L_440784:                                  ; preds = %block_.L_44077a, %block_44076b
  %5883 = phi i64 [ %.pre413, %block_.L_44077a ], [ %5879, %block_44076b ]
  %5884 = add i64 %5883, 5
  store i64 %5884, i64* %3, align 8
  br label %block_.L_440789

block_.L_440789:                                  ; preds = %block_.L_440784, %block_.L_44073e
  %storemerge255 = phi i64 [ %5856, %block_.L_44073e ], [ %5884, %block_.L_440784 ]
  %5885 = add i64 %storemerge255, 5
  store i64 %5885, i64* %3, align 8
  br label %block_.L_44078e

block_.L_44078e:                                  ; preds = %block_.L_440789, %block_.L_4406ab
  %5886 = phi i64 [ %5885, %block_.L_440789 ], [ %5724, %block_.L_4406ab ]
  %5887 = load i64, i64* %RBP.i, align 8
  %5888 = add i64 %5887, -480
  store i64 %5888, i64* %RAX.i3798, align 8
  %5889 = add i64 %5887, -1668
  %5890 = add i64 %5886, 14
  store i64 %5890, i64* %3, align 8
  %5891 = inttoptr i64 %5889 to i32*
  %5892 = load i32, i32* %5891, align 4
  %5893 = sext i32 %5892 to i64
  %5894 = shl nsw i64 %5893, 5
  store i64 %5894, i64* %RCX.i4416, align 8
  %5895 = add i64 %5894, %5888
  store i64 %5895, i64* %RDX.i4419, align 8
  %5896 = icmp ult i64 %5895, %5888
  %5897 = icmp ult i64 %5895, %5894
  %5898 = or i1 %5896, %5897
  %5899 = zext i1 %5898 to i8
  store i8 %5899, i8* %31, align 1
  %5900 = trunc i64 %5895 to i32
  %5901 = and i32 %5900, 255
  %5902 = tail call i32 @llvm.ctpop.i32(i32 %5901)
  %5903 = trunc i32 %5902 to i8
  %5904 = and i8 %5903, 1
  %5905 = xor i8 %5904, 1
  store i8 %5905, i8* %38, align 1
  %5906 = xor i64 %5888, %5895
  %5907 = lshr i64 %5906, 4
  %5908 = trunc i64 %5907 to i8
  %5909 = and i8 %5908, 1
  store i8 %5909, i8* %44, align 1
  %5910 = icmp eq i64 %5895, 0
  %5911 = zext i1 %5910 to i8
  store i8 %5911, i8* %47, align 1
  %5912 = lshr i64 %5895, 63
  %5913 = trunc i64 %5912 to i8
  store i8 %5913, i8* %50, align 1
  %5914 = lshr i64 %5888, 63
  %5915 = lshr i64 %5893, 58
  %5916 = and i64 %5915, 1
  %5917 = xor i64 %5912, %5914
  %5918 = xor i64 %5912, %5916
  %5919 = add nuw nsw i64 %5917, %5918
  %5920 = icmp eq i64 %5919, 2
  %5921 = zext i1 %5920 to i8
  store i8 %5921, i8* %56, align 1
  %5922 = inttoptr i64 %5895 to i32*
  %5923 = add i64 %5886, 27
  store i64 %5923, i64* %3, align 8
  %5924 = load i32, i32* %5922, align 4
  %5925 = sext i32 %5924 to i64
  store i64 %5925, i64* %RCX.i4416, align 8
  %5926 = add nsw i64 %5925, -1664
  %5927 = add i64 %5926, %5887
  %5928 = add i64 %5886, 35
  store i64 %5928, i64* %3, align 8
  %5929 = inttoptr i64 %5927 to i8*
  store i8 1, i8* %5929, align 1
  %5930 = load i64, i64* %RBP.i, align 8
  %5931 = add i64 %5930, -1668
  %5932 = load i64, i64* %3, align 8
  %5933 = add i64 %5932, 7
  store i64 %5933, i64* %3, align 8
  %5934 = inttoptr i64 %5931 to i32*
  %5935 = load i32, i32* %5934, align 4
  %5936 = sext i32 %5935 to i64
  %5937 = shl nsw i64 %5936, 5
  store i64 %5937, i64* %RCX.i4416, align 8
  %5938 = load i64, i64* %RAX.i3798, align 8
  %5939 = add i64 %5937, %5938
  store i64 %5939, i64* %RAX.i3798, align 8
  %5940 = icmp ult i64 %5939, %5938
  %5941 = icmp ult i64 %5939, %5937
  %5942 = or i1 %5940, %5941
  %5943 = zext i1 %5942 to i8
  store i8 %5943, i8* %31, align 1
  %5944 = trunc i64 %5939 to i32
  %5945 = and i32 %5944, 255
  %5946 = tail call i32 @llvm.ctpop.i32(i32 %5945)
  %5947 = trunc i32 %5946 to i8
  %5948 = and i8 %5947, 1
  %5949 = xor i8 %5948, 1
  store i8 %5949, i8* %38, align 1
  %5950 = xor i64 %5938, %5939
  %5951 = lshr i64 %5950, 4
  %5952 = trunc i64 %5951 to i8
  %5953 = and i8 %5952, 1
  store i8 %5953, i8* %44, align 1
  %5954 = icmp eq i64 %5939, 0
  %5955 = zext i1 %5954 to i8
  store i8 %5955, i8* %47, align 1
  %5956 = lshr i64 %5939, 63
  %5957 = trunc i64 %5956 to i8
  store i8 %5957, i8* %50, align 1
  %5958 = lshr i64 %5938, 63
  %5959 = lshr i64 %5936, 58
  %5960 = and i64 %5959, 1
  %5961 = xor i64 %5956, %5958
  %5962 = xor i64 %5956, %5960
  %5963 = add nuw nsw i64 %5961, %5962
  %5964 = icmp eq i64 %5963, 2
  %5965 = zext i1 %5964 to i8
  store i8 %5965, i8* %56, align 1
  %5966 = inttoptr i64 %5939 to i32*
  %5967 = add i64 %5932, 16
  store i64 %5967, i64* %3, align 8
  %5968 = load i32, i32* %5966, align 4
  %5969 = zext i32 %5968 to i64
  store i64 %5969, i64* %RDI.i3802.pre-phi, align 8
  %5970 = add i64 %5930, -40
  %5971 = add i64 %5932, 20
  store i64 %5971, i64* %3, align 8
  %5972 = inttoptr i64 %5970 to i64*
  %5973 = load i64, i64* %5972, align 8
  store i64 %5973, i64* %RSI.i3811.pre-phi, align 8
  %5974 = add i64 %5932, 14047
  %5975 = add i64 %5932, 25
  %5976 = load i64, i64* %6, align 8
  %5977 = add i64 %5976, -8
  %5978 = inttoptr i64 %5977 to i64*
  store i64 %5975, i64* %5978, align 8
  store i64 %5977, i64* %6, align 8
  store i64 %5974, i64* %3, align 8
  %call2_4407c5 = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %5974, %struct.Memory* %MEMORY.81)
  %5979 = load i32, i32* %EAX.i4398, align 4
  %5980 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %5981 = and i32 %5979, 255
  %5982 = tail call i32 @llvm.ctpop.i32(i32 %5981)
  %5983 = trunc i32 %5982 to i8
  %5984 = and i8 %5983, 1
  %5985 = xor i8 %5984, 1
  store i8 %5985, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %5986 = icmp eq i32 %5979, 0
  %5987 = zext i1 %5986 to i8
  store i8 %5987, i8* %47, align 1
  %5988 = lshr i32 %5979, 31
  %5989 = trunc i32 %5988 to i8
  store i8 %5989, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v605 = select i1 %5986, i64 24, i64 9
  %5990 = add i64 %5980, %.v605
  %5991 = load i64, i64* %RBP.i, align 8
  %5992 = add i64 %5991, -1680
  %5993 = add i64 %5990, 10
  store i64 %5993, i64* %3, align 8
  %5994 = inttoptr i64 %5992 to i32*
  br i1 %5986, label %block_.L_4407e2, label %block_4407d3

block_4407d3:                                     ; preds = %block_.L_44078e
  store i32 2, i32* %5994, align 4
  %5995 = load i64, i64* %3, align 8
  %5996 = add i64 %5995, 15
  store i64 %5996, i64* %3, align 8
  br label %block_.L_4407ec

block_.L_4407e2:                                  ; preds = %block_.L_44078e
  store i32 0, i32* %5994, align 4
  %.pre414 = load i64, i64* %3, align 8
  br label %block_.L_4407ec

block_.L_4407ec:                                  ; preds = %block_.L_4407e2, %block_4407d3
  %5997 = phi i64 [ %.pre414, %block_.L_4407e2 ], [ %5996, %block_4407d3 ]
  %5998 = load i64, i64* %RBP.i, align 8
  %5999 = add i64 %5998, -480
  store i64 %5999, i64* %RAX.i3798, align 8
  %6000 = add i64 %5998, -1668
  %6001 = add i64 %5997, 14
  store i64 %6001, i64* %3, align 8
  %6002 = inttoptr i64 %6000 to i32*
  %6003 = load i32, i32* %6002, align 4
  %6004 = sext i32 %6003 to i64
  %6005 = shl nsw i64 %6004, 5
  store i64 %6005, i64* %RCX.i4416, align 8
  %6006 = add i64 %6005, %5999
  store i64 %6006, i64* %RDX.i4419, align 8
  %6007 = icmp ult i64 %6006, %5999
  %6008 = icmp ult i64 %6006, %6005
  %6009 = or i1 %6007, %6008
  %6010 = zext i1 %6009 to i8
  store i8 %6010, i8* %31, align 1
  %6011 = trunc i64 %6006 to i32
  %6012 = and i32 %6011, 255
  %6013 = tail call i32 @llvm.ctpop.i32(i32 %6012)
  %6014 = trunc i32 %6013 to i8
  %6015 = and i8 %6014, 1
  %6016 = xor i8 %6015, 1
  store i8 %6016, i8* %38, align 1
  %6017 = xor i64 %5999, %6006
  %6018 = lshr i64 %6017, 4
  %6019 = trunc i64 %6018 to i8
  %6020 = and i8 %6019, 1
  store i8 %6020, i8* %44, align 1
  %6021 = icmp eq i64 %6006, 0
  %6022 = zext i1 %6021 to i8
  store i8 %6022, i8* %47, align 1
  %6023 = lshr i64 %6006, 63
  %6024 = trunc i64 %6023 to i8
  store i8 %6024, i8* %50, align 1
  %6025 = lshr i64 %5999, 63
  %6026 = lshr i64 %6004, 58
  %6027 = and i64 %6026, 1
  %6028 = xor i64 %6023, %6025
  %6029 = xor i64 %6023, %6027
  %6030 = add nuw nsw i64 %6028, %6029
  %6031 = icmp eq i64 %6030, 2
  %6032 = zext i1 %6031 to i8
  store i8 %6032, i8* %56, align 1
  %6033 = inttoptr i64 %6006 to i32*
  %6034 = add i64 %5997, 26
  store i64 %6034, i64* %3, align 8
  %6035 = load i32, i32* %6033, align 4
  %6036 = zext i32 %6035 to i64
  store i64 %6036, i64* %RDI.i3802.pre-phi, align 8
  %6037 = add i64 %5998, -40
  %6038 = add i64 %5997, 30
  store i64 %6038, i64* %3, align 8
  %6039 = inttoptr i64 %6037 to i64*
  %6040 = load i64, i64* %6039, align 8
  store i64 %6040, i64* %RSI.i3811.pre-phi, align 8
  %6041 = add i64 %5998, -48
  %6042 = add i64 %5997, 34
  store i64 %6042, i64* %3, align 8
  %6043 = inttoptr i64 %6041 to i64*
  %6044 = load i64, i64* %6043, align 8
  store i64 %6044, i64* %RDX.i4419, align 8
  %6045 = add i64 %5997, 41
  store i64 %6045, i64* %3, align 8
  %6046 = load i32, i32* %6002, align 4
  %6047 = sext i32 %6046 to i64
  %6048 = shl nsw i64 %6047, 5
  store i64 %6048, i64* %RCX.i4416, align 8
  %6049 = load i64, i64* %RAX.i3798, align 8
  %6050 = add i64 %6048, %6049
  store i64 %6050, i64* %RAX.i3798, align 8
  %6051 = icmp ult i64 %6050, %6049
  %6052 = icmp ult i64 %6050, %6048
  %6053 = or i1 %6051, %6052
  %6054 = zext i1 %6053 to i8
  store i8 %6054, i8* %31, align 1
  %6055 = trunc i64 %6050 to i32
  %6056 = and i32 %6055, 255
  %6057 = tail call i32 @llvm.ctpop.i32(i32 %6056)
  %6058 = trunc i32 %6057 to i8
  %6059 = and i8 %6058, 1
  %6060 = xor i8 %6059, 1
  store i8 %6060, i8* %38, align 1
  %6061 = xor i64 %6049, %6050
  %6062 = lshr i64 %6061, 4
  %6063 = trunc i64 %6062 to i8
  %6064 = and i8 %6063, 1
  store i8 %6064, i8* %44, align 1
  %6065 = icmp eq i64 %6050, 0
  %6066 = zext i1 %6065 to i8
  store i8 %6066, i8* %47, align 1
  %6067 = lshr i64 %6050, 63
  %6068 = trunc i64 %6067 to i8
  store i8 %6068, i8* %50, align 1
  %6069 = lshr i64 %6049, 63
  %6070 = lshr i64 %6047, 58
  %6071 = and i64 %6070, 1
  %6072 = xor i64 %6067, %6069
  %6073 = xor i64 %6067, %6071
  %6074 = add nuw nsw i64 %6072, %6073
  %6075 = icmp eq i64 %6074, 2
  %6076 = zext i1 %6075 to i8
  store i8 %6076, i8* %56, align 1
  %6077 = add i64 %6050, 4
  %6078 = add i64 %5997, 51
  store i64 %6078, i64* %3, align 8
  %6079 = inttoptr i64 %6077 to i32*
  %6080 = load i32, i32* %6079, align 4
  %6081 = zext i32 %6080 to i64
  store i64 %6081, i64* %RCX.i4416, align 8
  %6082 = add i64 %5997, 14244
  %6083 = add i64 %5997, 56
  %6084 = load i64, i64* %6, align 8
  %6085 = add i64 %6084, -8
  %6086 = inttoptr i64 %6085 to i64*
  store i64 %6083, i64* %6086, align 8
  store i64 %6085, i64* %6, align 8
  store i64 %6082, i64* %3, align 8
  %call2_44081f = tail call %struct.Memory* @sub_443f90.semeai_move_value(%struct.State* nonnull %0, i64 %6082, %struct.Memory* %call2_4407c5)
  %6087 = load i64, i64* %3, align 8
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %6088 = load i64, i64* %RBP.i, align 8
  %6089 = add i64 %6088, -480
  store i64 %6089, i64* %RDX.i4419, align 8
  %6090 = add i64 %6088, -736
  store i64 %6090, i64* %RDI.i3802.pre-phi, align 8
  %6091 = add i64 %6088, -1696
  %6092 = load i32, i32* %EAX.i4398, align 4
  %6093 = add i64 %6087, 22
  store i64 %6093, i64* %3, align 8
  %6094 = inttoptr i64 %6091 to i32*
  store i32 %6092, i32* %6094, align 4
  %6095 = load i64, i64* %RBP.i, align 8
  %6096 = add i64 %6095, -1668
  %6097 = load i64, i64* %3, align 8
  %6098 = add i64 %6097, 7
  store i64 %6098, i64* %3, align 8
  %6099 = inttoptr i64 %6096 to i32*
  %6100 = load i32, i32* %6099, align 4
  %6101 = sext i32 %6100 to i64
  %6102 = shl nsw i64 %6101, 5
  store i64 %6102, i64* %RSI.i3811.pre-phi, align 8
  %6103 = load i64, i64* %RDX.i4419, align 8
  %6104 = add i64 %6102, %6103
  store i64 %6104, i64* %R8.i3721, align 8
  %6105 = icmp ult i64 %6104, %6103
  %6106 = icmp ult i64 %6104, %6102
  %6107 = or i1 %6105, %6106
  %6108 = zext i1 %6107 to i8
  store i8 %6108, i8* %31, align 1
  %6109 = trunc i64 %6104 to i32
  %6110 = and i32 %6109, 255
  %6111 = tail call i32 @llvm.ctpop.i32(i32 %6110)
  %6112 = trunc i32 %6111 to i8
  %6113 = and i8 %6112, 1
  %6114 = xor i8 %6113, 1
  store i8 %6114, i8* %38, align 1
  %6115 = xor i64 %6103, %6104
  %6116 = lshr i64 %6115, 4
  %6117 = trunc i64 %6116 to i8
  %6118 = and i8 %6117, 1
  store i8 %6118, i8* %44, align 1
  %6119 = icmp eq i64 %6104, 0
  %6120 = zext i1 %6119 to i8
  store i8 %6120, i8* %47, align 1
  %6121 = lshr i64 %6104, 63
  %6122 = trunc i64 %6121 to i8
  store i8 %6122, i8* %50, align 1
  %6123 = lshr i64 %6103, 63
  %6124 = lshr i64 %6101, 58
  %6125 = and i64 %6124, 1
  %6126 = xor i64 %6121, %6123
  %6127 = xor i64 %6121, %6125
  %6128 = add nuw nsw i64 %6126, %6127
  %6129 = icmp eq i64 %6128, 2
  %6130 = zext i1 %6129 to i8
  store i8 %6130, i8* %56, align 1
  %6131 = inttoptr i64 %6104 to i32*
  %6132 = add i64 %6097, 20
  store i64 %6132, i64* %3, align 8
  %6133 = load i32, i32* %6131, align 4
  %6134 = zext i32 %6133 to i64
  store i64 %6134, i64* %RSI.i3811.pre-phi, align 8
  %6135 = add i64 %6095, -1696
  %6136 = add i64 %6097, 26
  store i64 %6136, i64* %3, align 8
  %6137 = inttoptr i64 %6135 to i32*
  %6138 = load i32, i32* %6137, align 4
  %6139 = zext i32 %6138 to i64
  store i64 %6139, i64* %RAX.i3798, align 8
  %6140 = add i64 %6097, 33
  store i64 %6140, i64* %3, align 8
  %6141 = load i32, i32* %6099, align 4
  %6142 = sext i32 %6141 to i64
  %6143 = shl nsw i64 %6142, 5
  store i64 %6143, i64* %R8.i3721, align 8
  %6144 = add i64 %6143, %6103
  store i64 %6144, i64* %R9.i4411, align 8
  %6145 = icmp ult i64 %6144, %6103
  %6146 = icmp ult i64 %6144, %6143
  %6147 = or i1 %6145, %6146
  %6148 = zext i1 %6147 to i8
  store i8 %6148, i8* %31, align 1
  %6149 = trunc i64 %6144 to i32
  %6150 = and i32 %6149, 255
  %6151 = tail call i32 @llvm.ctpop.i32(i32 %6150)
  %6152 = trunc i32 %6151 to i8
  %6153 = and i8 %6152, 1
  %6154 = xor i8 %6153, 1
  store i8 %6154, i8* %38, align 1
  %6155 = xor i64 %6103, %6144
  %6156 = lshr i64 %6155, 4
  %6157 = trunc i64 %6156 to i8
  %6158 = and i8 %6157, 1
  store i8 %6158, i8* %44, align 1
  %6159 = icmp eq i64 %6144, 0
  %6160 = zext i1 %6159 to i8
  store i8 %6160, i8* %47, align 1
  %6161 = lshr i64 %6144, 63
  %6162 = trunc i64 %6161 to i8
  store i8 %6162, i8* %50, align 1
  %6163 = lshr i64 %6142, 58
  %6164 = and i64 %6163, 1
  %6165 = xor i64 %6161, %6123
  %6166 = xor i64 %6161, %6164
  %6167 = add nuw nsw i64 %6165, %6166
  %6168 = icmp eq i64 %6167, 2
  %6169 = zext i1 %6168 to i8
  store i8 %6169, i8* %56, align 1
  %6170 = add i64 %6144, 8
  %6171 = add i64 %6097, 47
  store i64 %6171, i64* %3, align 8
  %6172 = inttoptr i64 %6170 to i64*
  %6173 = load i64, i64* %6172, align 8
  store i64 %6173, i64* %R8.i3721, align 8
  %6174 = load i64, i64* %RBP.i, align 8
  %6175 = add i64 %6174, -1680
  %6176 = add i64 %6097, 54
  store i64 %6176, i64* %3, align 8
  %6177 = inttoptr i64 %6175 to i32*
  %6178 = load i32, i32* %6177, align 4
  %6179 = zext i32 %6178 to i64
  store i64 %6179, i64* %65, align 8
  %6180 = add i64 %6174, -1668
  %6181 = add i64 %6097, 61
  store i64 %6181, i64* %3, align 8
  %6182 = inttoptr i64 %6180 to i32*
  %6183 = load i32, i32* %6182, align 4
  %6184 = sext i32 %6183 to i64
  %6185 = shl nsw i64 %6184, 5
  store i64 %6185, i64* %R9.i4411, align 8
  %6186 = load i64, i64* %RDX.i4419, align 8
  %6187 = add i64 %6185, %6186
  store i64 %6187, i64* %RDX.i4419, align 8
  %6188 = icmp ult i64 %6187, %6186
  %6189 = icmp ult i64 %6187, %6185
  %6190 = or i1 %6188, %6189
  %6191 = zext i1 %6190 to i8
  store i8 %6191, i8* %31, align 1
  %6192 = trunc i64 %6187 to i32
  %6193 = and i32 %6192, 255
  %6194 = tail call i32 @llvm.ctpop.i32(i32 %6193)
  %6195 = trunc i32 %6194 to i8
  %6196 = and i8 %6195, 1
  %6197 = xor i8 %6196, 1
  store i8 %6197, i8* %38, align 1
  %6198 = xor i64 %6186, %6187
  %6199 = lshr i64 %6198, 4
  %6200 = trunc i64 %6199 to i8
  %6201 = and i8 %6200, 1
  store i8 %6201, i8* %44, align 1
  %6202 = icmp eq i64 %6187, 0
  %6203 = zext i1 %6202 to i8
  store i8 %6203, i8* %47, align 1
  %6204 = lshr i64 %6187, 63
  %6205 = trunc i64 %6204 to i8
  store i8 %6205, i8* %50, align 1
  %6206 = lshr i64 %6186, 63
  %6207 = lshr i64 %6184, 58
  %6208 = and i64 %6207, 1
  %6209 = xor i64 %6204, %6206
  %6210 = xor i64 %6204, %6208
  %6211 = add nuw nsw i64 %6209, %6210
  %6212 = icmp eq i64 %6211, 2
  %6213 = zext i1 %6212 to i8
  store i8 %6213, i8* %56, align 1
  %6214 = add i64 %6187, 20
  %6215 = add i64 %6097, 72
  store i64 %6215, i64* %3, align 8
  %6216 = inttoptr i64 %6214 to i32*
  %6217 = load i32, i32* %6216, align 4
  %6218 = zext i32 %6217 to i64
  store i64 %6218, i64* %R9.i4411, align 8
  %6219 = load i32, i32* %EAX.i4398, align 4
  %6220 = zext i32 %6219 to i64
  store i64 %6220, i64* %RDX.i4419, align 8
  %6221 = add i64 %6174, -3512
  %6222 = load i32, i32* %ECX.i4264, align 4
  %6223 = add i64 %6097, 80
  store i64 %6223, i64* %3, align 8
  %6224 = inttoptr i64 %6221 to i32*
  store i32 %6222, i32* %6224, align 4
  %6225 = load i64, i64* %R8.i3721, align 8
  %6226 = load i64, i64* %3, align 8
  store i64 %6225, i64* %RCX.i4416, align 8
  %6227 = load i32, i32* %R10D.i4438, align 4
  %6228 = zext i32 %6227 to i64
  store i64 %6228, i64* %R8.i3721, align 8
  %6229 = load i32*, i32** %3524, align 8
  %6230 = add i64 %6226, 13
  store i64 %6230, i64* %3, align 8
  store i32 0, i32* %6229, align 4
  %6231 = load i64, i64* %3, align 8
  %6232 = add i64 %6231, 14745
  %6233 = add i64 %6231, 5
  %6234 = load i64, i64* %6, align 8
  %6235 = add i64 %6234, -8
  %6236 = inttoptr i64 %6235 to i64*
  store i64 %6233, i64* %6236, align 8
  store i64 %6235, i64* %6, align 8
  store i64 %6232, i64* %3, align 8
  %call2_440897 = tail call %struct.Memory* @sub_444230.owl_add_move(%struct.State* nonnull %0, i64 %6232, %struct.Memory* %call2_44081f)
  %6237 = load i64, i64* %RBP.i, align 8
  %6238 = add i64 %6237, -1668
  %6239 = load i64, i64* %3, align 8
  %6240 = add i64 %6239, 6
  store i64 %6240, i64* %3, align 8
  %6241 = inttoptr i64 %6238 to i32*
  %6242 = load i32, i32* %6241, align 4
  %6243 = add i32 %6242, 1
  %6244 = zext i32 %6243 to i64
  store i64 %6244, i64* %RAX.i3798, align 8
  %6245 = icmp eq i32 %6242, -1
  %6246 = icmp eq i32 %6243, 0
  %6247 = or i1 %6245, %6246
  %6248 = zext i1 %6247 to i8
  store i8 %6248, i8* %31, align 1
  %6249 = and i32 %6243, 255
  %6250 = tail call i32 @llvm.ctpop.i32(i32 %6249)
  %6251 = trunc i32 %6250 to i8
  %6252 = and i8 %6251, 1
  %6253 = xor i8 %6252, 1
  store i8 %6253, i8* %38, align 1
  %6254 = xor i32 %6243, %6242
  %6255 = lshr i32 %6254, 4
  %6256 = trunc i32 %6255 to i8
  %6257 = and i8 %6256, 1
  store i8 %6257, i8* %44, align 1
  %6258 = zext i1 %6246 to i8
  store i8 %6258, i8* %47, align 1
  %6259 = lshr i32 %6243, 31
  %6260 = trunc i32 %6259 to i8
  store i8 %6260, i8* %50, align 1
  %6261 = lshr i32 %6242, 31
  %6262 = xor i32 %6259, %6261
  %6263 = add nuw nsw i32 %6262, %6259
  %6264 = icmp eq i32 %6263, 2
  %6265 = zext i1 %6264 to i8
  store i8 %6265, i8* %56, align 1
  %6266 = add i64 %6239, 15
  store i64 %6266, i64* %3, align 8
  store i32 %6243, i32* %6241, align 4
  %6267 = load i64, i64* %3, align 8
  %6268 = add i64 %6267, -587
  store i64 %6268, i64* %3, align 8
  br label %block_.L_440660

block_4408bd:                                     ; preds = %block_4406a6
  %6269 = add i64 %5639, -88
  %6270 = add i64 %5665, 7
  store i64 %6270, i64* %3, align 8
  %6271 = inttoptr i64 %6269 to i32*
  store i32 0, i32* %6271, align 4
  %.pre411 = load i64, i64* %3, align 8
  %.pre424.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_4408c4

block_.L_4408c4:                                  ; preds = %block_4406a6, %block_4408bd
  %.pre424 = phi i64 [ %.pre424.pre, %block_4408bd ], [ %5639, %block_4406a6 ]
  %6272 = phi i64 [ %.pre411, %block_4408bd ], [ %5665, %block_4406a6 ]
  %6273 = add i64 %6272, 5
  store i64 %6273, i64* %3, align 8
  br label %block_.L_4408c9

block_.L_4408c9:                                  ; preds = %block_.L_4408c4, %block_.L_43f41d
  %6274 = phi i64 [ %1371, %block_.L_43f41d ], [ %6273, %block_.L_4408c4 ]
  %6275 = phi i64 [ %1356, %block_.L_43f41d ], [ %.pre424, %block_.L_4408c4 ]
  %MEMORY.89 = phi %struct.Memory* [ %1355, %block_.L_43f41d ], [ %MEMORY.81, %block_.L_4408c4 ]
  %6276 = add i64 %6275, -1236
  %6277 = add i64 %6274, 7
  store i64 %6277, i64* %3, align 8
  %6278 = inttoptr i64 %6276 to i32*
  %6279 = load i32, i32* %6278, align 4
  store i8 0, i8* %31, align 1
  %6280 = and i32 %6279, 255
  %6281 = tail call i32 @llvm.ctpop.i32(i32 %6280)
  %6282 = trunc i32 %6281 to i8
  %6283 = and i8 %6282, 1
  %6284 = xor i8 %6283, 1
  store i8 %6284, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6285 = icmp eq i32 %6279, 0
  %6286 = zext i1 %6285 to i8
  store i8 %6286, i8* %47, align 1
  %6287 = lshr i32 %6279, 31
  %6288 = trunc i32 %6287 to i8
  store i8 %6288, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v524 = select i1 %6285, i64 13, i64 558
  %6289 = add i64 %6274, %.v524
  store i64 %6289, i64* %3, align 8
  br i1 %6285, label %block_4408d6, label %block_.L_440af7

block_4408d6:                                     ; preds = %block_.L_4408c9
  %6290 = add i64 %6275, -732
  %6291 = add i64 %6289, 7
  store i64 %6291, i64* %3, align 8
  %6292 = inttoptr i64 %6290 to i32*
  %6293 = load i32, i32* %6292, align 4
  %6294 = add i32 %6293, -100
  %6295 = icmp ult i32 %6293, 100
  %6296 = zext i1 %6295 to i8
  store i8 %6296, i8* %31, align 1
  %6297 = and i32 %6294, 255
  %6298 = tail call i32 @llvm.ctpop.i32(i32 %6297)
  %6299 = trunc i32 %6298 to i8
  %6300 = and i8 %6299, 1
  %6301 = xor i8 %6300, 1
  store i8 %6301, i8* %38, align 1
  %6302 = xor i32 %6294, %6293
  %6303 = lshr i32 %6302, 4
  %6304 = trunc i32 %6303 to i8
  %6305 = and i8 %6304, 1
  store i8 %6305, i8* %44, align 1
  %6306 = icmp eq i32 %6294, 0
  %6307 = zext i1 %6306 to i8
  store i8 %6307, i8* %47, align 1
  %6308 = lshr i32 %6294, 31
  %6309 = trunc i32 %6308 to i8
  store i8 %6309, i8* %50, align 1
  %6310 = lshr i32 %6293, 31
  %6311 = xor i32 %6308, %6310
  %6312 = add nuw nsw i32 %6311, %6310
  %6313 = icmp eq i32 %6312, 2
  %6314 = zext i1 %6313 to i8
  store i8 %6314, i8* %56, align 1
  %6315 = icmp ne i8 %6309, 0
  %6316 = xor i1 %6315, %6313
  %.v591 = select i1 %6316, i64 13, i64 545
  %6317 = add i64 %6289, %.v591
  store i64 %6317, i64* %3, align 8
  br i1 %6316, label %block_4408e3, label %block_.L_440af7

block_4408e3:                                     ; preds = %block_4408d6
  %6318 = add i64 %6275, -1672
  %6319 = add i64 %6317, 10
  store i64 %6319, i64* %3, align 8
  %6320 = inttoptr i64 %6318 to i32*
  store i32 0, i32* %6320, align 4
  %AL.i1506 = bitcast %union.anon* %57 to i8*
  %CL.i1507 = bitcast %union.anon* %99 to i8*
  %.pre425 = load i64, i64* %3, align 8
  br label %block_.L_4408ed

block_.L_4408ed:                                  ; preds = %block_440972, %block_4408e3
  %6321 = phi i64 [ %.pre425, %block_4408e3 ], [ %6504, %block_440972 ]
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i8 0, i8* %CL.i1507, align 1
  %6322 = load i64, i64* %RBP.i, align 8
  %6323 = add i64 %6322, -1236
  %6324 = add i64 %6321, 11
  store i64 %6324, i64* %3, align 8
  %6325 = inttoptr i64 %6323 to i32*
  %6326 = load i32, i32* %6325, align 4
  store i8 0, i8* %31, align 1
  %6327 = and i32 %6326, 255
  %6328 = tail call i32 @llvm.ctpop.i32(i32 %6327)
  %6329 = trunc i32 %6328 to i8
  %6330 = and i8 %6329, 1
  %6331 = xor i8 %6330, 1
  store i8 %6331, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6332 = icmp eq i32 %6326, 0
  %6333 = zext i1 %6332 to i8
  store i8 %6333, i8* %47, align 1
  %6334 = lshr i32 %6326, 31
  %6335 = trunc i32 %6334 to i8
  store i8 %6335, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %6336 = add i64 %6322, -3513
  %6337 = add i64 %6321, 17
  store i64 %6337, i64* %3, align 8
  %6338 = inttoptr i64 %6336 to i8*
  store i8 0, i8* %6338, align 1
  %6339 = load i64, i64* %3, align 8
  %6340 = add i64 %6339, 28
  %6341 = add i64 %6339, 6
  %6342 = load i8, i8* %47, align 1
  %6343 = icmp eq i8 %6342, 0
  %6344 = select i1 %6343, i64 %6340, i64 %6341
  store i64 %6344, i64* %3, align 8
  br i1 %6343, label %block_.L_44091a, label %block_440904

block_440904:                                     ; preds = %block_.L_4408ed
  %6345 = load i64, i64* %RBP.i, align 8
  %6346 = add i64 %6345, -1672
  %6347 = add i64 %6344, 6
  store i64 %6347, i64* %3, align 8
  %6348 = inttoptr i64 %6346 to i32*
  %6349 = load i32, i32* %6348, align 4
  %6350 = zext i32 %6349 to i64
  store i64 %6350, i64* %RAX.i3798, align 8
  %6351 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %6352 = sub i32 %6349, %6351
  %6353 = icmp ult i32 %6349, %6351
  %6354 = zext i1 %6353 to i8
  store i8 %6354, i8* %31, align 1
  %6355 = and i32 %6352, 255
  %6356 = tail call i32 @llvm.ctpop.i32(i32 %6355)
  %6357 = trunc i32 %6356 to i8
  %6358 = and i8 %6357, 1
  %6359 = xor i8 %6358, 1
  store i8 %6359, i8* %38, align 1
  %6360 = xor i32 %6351, %6349
  %6361 = xor i32 %6360, %6352
  %6362 = lshr i32 %6361, 4
  %6363 = trunc i32 %6362 to i8
  %6364 = and i8 %6363, 1
  store i8 %6364, i8* %44, align 1
  %6365 = icmp eq i32 %6352, 0
  %6366 = zext i1 %6365 to i8
  store i8 %6366, i8* %47, align 1
  %6367 = lshr i32 %6352, 31
  %6368 = trunc i32 %6367 to i8
  store i8 %6368, i8* %50, align 1
  %6369 = lshr i32 %6349, 31
  %6370 = lshr i32 %6351, 31
  %6371 = xor i32 %6370, %6369
  %6372 = xor i32 %6367, %6369
  %6373 = add nuw nsw i32 %6372, %6371
  %6374 = icmp eq i32 %6373, 2
  %6375 = zext i1 %6374 to i8
  store i8 %6375, i8* %56, align 1
  %6376 = icmp ne i8 %6368, 0
  %6377 = xor i1 %6374, %6376
  %6378 = zext i1 %6377 to i8
  store i8 %6378, i8* %CL.i1507, align 1
  %6379 = add i64 %6345, -3513
  %6380 = add i64 %6344, 22
  store i64 %6380, i64* %3, align 8
  %6381 = inttoptr i64 %6379 to i8*
  store i8 %6378, i8* %6381, align 1
  %.pre426 = load i64, i64* %3, align 8
  br label %block_.L_44091a

block_.L_44091a:                                  ; preds = %block_440904, %block_.L_4408ed
  %6382 = phi i64 [ %.pre426, %block_440904 ], [ %6340, %block_.L_4408ed ]
  %6383 = load i64, i64* %RBP.i, align 8
  %6384 = add i64 %6383, -3513
  %6385 = add i64 %6382, 6
  store i64 %6385, i64* %3, align 8
  %6386 = inttoptr i64 %6384 to i8*
  %6387 = load i8, i8* %6386, align 1
  store i8 %6387, i8* %AL.i1506, align 1
  %6388 = and i8 %6387, 1
  store i8 0, i8* %31, align 1
  %6389 = zext i8 %6388 to i32
  %6390 = tail call i32 @llvm.ctpop.i32(i32 %6389)
  %6391 = trunc i32 %6390 to i8
  %6392 = xor i8 %6391, 1
  store i8 %6392, i8* %38, align 1
  %6393 = xor i8 %6388, 1
  store i8 %6393, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %6394 = icmp eq i8 %6393, 0
  %.v592 = select i1 %6394, i64 19, i64 14
  %6395 = add i64 %6382, %.v592
  store i64 %6395, i64* %3, align 8
  br i1 %6394, label %block_.L_44092d, label %block_440928

block_440928:                                     ; preds = %block_.L_44091a
  %6396 = add i64 %6395, 463
  store i64 %6396, i64* %3, align 8
  br label %block_.L_440af7

block_.L_44092d:                                  ; preds = %block_.L_44091a
  %6397 = add i64 %6383, -1676
  %6398 = add i64 %6395, 10
  store i64 %6398, i64* %3, align 8
  %6399 = inttoptr i64 %6397 to i32*
  store i32 0, i32* %6399, align 4
  %.pre427 = load i64, i64* %3, align 8
  br label %block_.L_440937

block_.L_440937:                                  ; preds = %block_.L_440ac0, %block_.L_44092d
  %6400 = phi i64 [ %.pre427, %block_.L_44092d ], [ %6841, %block_.L_440ac0 ]
  store i64 0, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i8 0, i8* %CL.i1507, align 1
  %6401 = load i64, i64* %RBP.i, align 8
  %6402 = add i64 %6401, -1236
  %6403 = add i64 %6400, 11
  store i64 %6403, i64* %3, align 8
  %6404 = inttoptr i64 %6402 to i32*
  %6405 = load i32, i32* %6404, align 4
  store i8 0, i8* %31, align 1
  %6406 = and i32 %6405, 255
  %6407 = tail call i32 @llvm.ctpop.i32(i32 %6406)
  %6408 = trunc i32 %6407 to i8
  %6409 = and i8 %6408, 1
  %6410 = xor i8 %6409, 1
  store i8 %6410, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6411 = icmp eq i32 %6405, 0
  %6412 = zext i1 %6411 to i8
  store i8 %6412, i8* %47, align 1
  %6413 = lshr i32 %6405, 31
  %6414 = trunc i32 %6413 to i8
  store i8 %6414, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %6415 = add i64 %6401, -3514
  %6416 = add i64 %6400, 17
  store i64 %6416, i64* %3, align 8
  %6417 = inttoptr i64 %6415 to i8*
  store i8 0, i8* %6417, align 1
  %6418 = load i64, i64* %3, align 8
  %6419 = add i64 %6418, 28
  %6420 = add i64 %6418, 6
  %6421 = load i8, i8* %47, align 1
  %6422 = icmp eq i8 %6421, 0
  %6423 = select i1 %6422, i64 %6419, i64 %6420
  store i64 %6423, i64* %3, align 8
  br i1 %6422, label %block_.L_440964, label %block_44094e

block_44094e:                                     ; preds = %block_.L_440937
  %6424 = load i64, i64* %RBP.i, align 8
  %6425 = add i64 %6424, -1676
  %6426 = add i64 %6423, 6
  store i64 %6426, i64* %3, align 8
  %6427 = inttoptr i64 %6425 to i32*
  %6428 = load i32, i32* %6427, align 4
  %6429 = zext i32 %6428 to i64
  store i64 %6429, i64* %RAX.i3798, align 8
  %6430 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %6431 = sub i32 %6428, %6430
  %6432 = icmp ult i32 %6428, %6430
  %6433 = zext i1 %6432 to i8
  store i8 %6433, i8* %31, align 1
  %6434 = and i32 %6431, 255
  %6435 = tail call i32 @llvm.ctpop.i32(i32 %6434)
  %6436 = trunc i32 %6435 to i8
  %6437 = and i8 %6436, 1
  %6438 = xor i8 %6437, 1
  store i8 %6438, i8* %38, align 1
  %6439 = xor i32 %6430, %6428
  %6440 = xor i32 %6439, %6431
  %6441 = lshr i32 %6440, 4
  %6442 = trunc i32 %6441 to i8
  %6443 = and i8 %6442, 1
  store i8 %6443, i8* %44, align 1
  %6444 = icmp eq i32 %6431, 0
  %6445 = zext i1 %6444 to i8
  store i8 %6445, i8* %47, align 1
  %6446 = lshr i32 %6431, 31
  %6447 = trunc i32 %6446 to i8
  store i8 %6447, i8* %50, align 1
  %6448 = lshr i32 %6428, 31
  %6449 = lshr i32 %6430, 31
  %6450 = xor i32 %6449, %6448
  %6451 = xor i32 %6446, %6448
  %6452 = add nuw nsw i32 %6451, %6450
  %6453 = icmp eq i32 %6452, 2
  %6454 = zext i1 %6453 to i8
  store i8 %6454, i8* %56, align 1
  %6455 = icmp ne i8 %6447, 0
  %6456 = xor i1 %6453, %6455
  %6457 = zext i1 %6456 to i8
  store i8 %6457, i8* %CL.i1507, align 1
  %6458 = add i64 %6424, -3514
  %6459 = add i64 %6423, 22
  store i64 %6459, i64* %3, align 8
  %6460 = inttoptr i64 %6458 to i8*
  store i8 %6457, i8* %6460, align 1
  %.pre428 = load i64, i64* %3, align 8
  br label %block_.L_440964

block_.L_440964:                                  ; preds = %block_44094e, %block_.L_440937
  %6461 = phi i64 [ %.pre428, %block_44094e ], [ %6419, %block_.L_440937 ]
  %6462 = load i64, i64* %RBP.i, align 8
  %6463 = add i64 %6462, -3514
  %6464 = add i64 %6461, 6
  store i64 %6464, i64* %3, align 8
  %6465 = inttoptr i64 %6463 to i8*
  %6466 = load i8, i8* %6465, align 1
  store i8 %6466, i8* %AL.i1506, align 1
  %6467 = and i8 %6466, 1
  store i8 0, i8* %31, align 1
  %6468 = zext i8 %6467 to i32
  %6469 = tail call i32 @llvm.ctpop.i32(i32 %6468)
  %6470 = trunc i32 %6469 to i8
  %6471 = xor i8 %6470, 1
  store i8 %6471, i8* %38, align 1
  %6472 = xor i8 %6467, 1
  store i8 %6472, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %6473 = icmp eq i8 %6472, 0
  %.v485 = select i1 %6473, i64 19, i64 14
  %6474 = add i64 %6461, %.v485
  store i64 %6474, i64* %3, align 8
  %6475 = add i64 %6462, -1672
  br i1 %6473, label %block_.L_440977, label %block_440972

block_440972:                                     ; preds = %block_.L_440964
  %6476 = add i64 %6474, 370
  store i64 %6476, i64* %3, align 8
  %6477 = inttoptr i64 %6475 to i32*
  %6478 = load i32, i32* %6477, align 4
  %6479 = add i32 %6478, 1
  %6480 = zext i32 %6479 to i64
  store i64 %6480, i64* %RAX.i3798, align 8
  %6481 = icmp eq i32 %6478, -1
  %6482 = icmp eq i32 %6479, 0
  %6483 = or i1 %6481, %6482
  %6484 = zext i1 %6483 to i8
  store i8 %6484, i8* %31, align 1
  %6485 = and i32 %6479, 255
  %6486 = tail call i32 @llvm.ctpop.i32(i32 %6485)
  %6487 = trunc i32 %6486 to i8
  %6488 = and i8 %6487, 1
  %6489 = xor i8 %6488, 1
  store i8 %6489, i8* %38, align 1
  %6490 = xor i32 %6479, %6478
  %6491 = lshr i32 %6490, 4
  %6492 = trunc i32 %6491 to i8
  %6493 = and i8 %6492, 1
  store i8 %6493, i8* %44, align 1
  %6494 = zext i1 %6482 to i8
  store i8 %6494, i8* %47, align 1
  %6495 = lshr i32 %6479, 31
  %6496 = trunc i32 %6495 to i8
  store i8 %6496, i8* %50, align 1
  %6497 = lshr i32 %6478, 31
  %6498 = xor i32 %6495, %6497
  %6499 = add nuw nsw i32 %6498, %6495
  %6500 = icmp eq i32 %6499, 2
  %6501 = zext i1 %6500 to i8
  store i8 %6501, i8* %56, align 1
  %6502 = add i64 %6474, 379
  store i64 %6502, i64* %3, align 8
  store i32 %6479, i32* %6477, align 4
  %6503 = load i64, i64* %3, align 8
  %6504 = add i64 %6503, -512
  store i64 %6504, i64* %3, align 8
  br label %block_.L_4408ed

block_.L_440977:                                  ; preds = %block_.L_440964
  %6505 = add i64 %6474, 7
  store i64 %6505, i64* %3, align 8
  %6506 = inttoptr i64 %6475 to i32*
  %6507 = load i32, i32* %6506, align 4
  %6508 = mul i32 %6507, 20
  %6509 = add i32 %6508, 21
  %6510 = zext i32 %6509 to i64
  store i64 %6510, i64* %RAX.i3798, align 8
  %6511 = icmp ugt i32 %6508, -22
  %6512 = zext i1 %6511 to i8
  store i8 %6512, i8* %31, align 1
  %6513 = and i32 %6509, 253
  %6514 = tail call i32 @llvm.ctpop.i32(i32 %6513)
  %6515 = trunc i32 %6514 to i8
  %6516 = and i8 %6515, 1
  %6517 = xor i8 %6516, 1
  store i8 %6517, i8* %38, align 1
  %6518 = xor i32 %6508, 16
  %6519 = xor i32 %6518, %6509
  %6520 = lshr i32 %6519, 4
  %6521 = trunc i32 %6520 to i8
  %6522 = and i8 %6521, 1
  store i8 %6522, i8* %44, align 1
  store i8 0, i8* %47, align 1
  %6523 = lshr i32 %6509, 31
  %6524 = trunc i32 %6523 to i8
  store i8 %6524, i8* %50, align 1
  %6525 = lshr i32 %6508, 31
  %6526 = xor i32 %6523, %6525
  %6527 = add nuw nsw i32 %6526, %6523
  %6528 = icmp eq i32 %6527, 2
  %6529 = zext i1 %6528 to i8
  store i8 %6529, i8* %56, align 1
  %6530 = add i64 %6462, -1676
  %6531 = add i64 %6474, 16
  store i64 %6531, i64* %3, align 8
  %6532 = inttoptr i64 %6530 to i32*
  %6533 = load i32, i32* %6532, align 4
  %6534 = add i32 %6533, %6509
  %6535 = zext i32 %6534 to i64
  store i64 %6535, i64* %RAX.i3798, align 8
  %6536 = icmp ult i32 %6534, %6509
  %6537 = icmp ult i32 %6534, %6533
  %6538 = or i1 %6536, %6537
  %6539 = zext i1 %6538 to i8
  store i8 %6539, i8* %31, align 1
  %6540 = and i32 %6534, 255
  %6541 = tail call i32 @llvm.ctpop.i32(i32 %6540)
  %6542 = trunc i32 %6541 to i8
  %6543 = and i8 %6542, 1
  %6544 = xor i8 %6543, 1
  store i8 %6544, i8* %38, align 1
  %6545 = xor i32 %6533, %6509
  %6546 = xor i32 %6545, %6534
  %6547 = lshr i32 %6546, 4
  %6548 = trunc i32 %6547 to i8
  %6549 = and i8 %6548, 1
  store i8 %6549, i8* %44, align 1
  %6550 = icmp eq i32 %6534, 0
  %6551 = zext i1 %6550 to i8
  store i8 %6551, i8* %47, align 1
  %6552 = lshr i32 %6534, 31
  %6553 = trunc i32 %6552 to i8
  store i8 %6553, i8* %50, align 1
  %6554 = lshr i32 %6533, 31
  %6555 = xor i32 %6552, %6523
  %6556 = xor i32 %6552, %6554
  %6557 = add nuw nsw i32 %6555, %6556
  %6558 = icmp eq i32 %6557, 2
  %6559 = zext i1 %6558 to i8
  store i8 %6559, i8* %56, align 1
  %6560 = add i64 %6462, -1772
  %6561 = add i64 %6474, 22
  store i64 %6561, i64* %3, align 8
  %6562 = inttoptr i64 %6560 to i32*
  store i32 %6534, i32* %6562, align 4
  %6563 = load i64, i64* %RBP.i, align 8
  %6564 = add i64 %6563, -1772
  %6565 = load i64, i64* %3, align 8
  %6566 = add i64 %6565, 7
  store i64 %6566, i64* %3, align 8
  %6567 = inttoptr i64 %6564 to i32*
  %6568 = load i32, i32* %6567, align 4
  %6569 = sext i32 %6568 to i64
  store i64 %6569, i64* %RCX.i4416, align 8
  %6570 = add nsw i64 %6569, 12099168
  %6571 = add i64 %6565, 15
  store i64 %6571, i64* %3, align 8
  %6572 = inttoptr i64 %6570 to i8*
  %6573 = load i8, i8* %6572, align 1
  %6574 = zext i8 %6573 to i64
  store i64 %6574, i64* %RAX.i3798, align 8
  %6575 = zext i8 %6573 to i32
  store i8 0, i8* %31, align 1
  %6576 = tail call i32 @llvm.ctpop.i32(i32 %6575)
  %6577 = trunc i32 %6576 to i8
  %6578 = and i8 %6577, 1
  %6579 = xor i8 %6578, 1
  store i8 %6579, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6580 = icmp eq i8 %6573, 0
  %6581 = zext i1 %6580 to i8
  store i8 %6581, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v593 = select i1 %6580, i64 24, i64 307
  %6582 = add i64 %6565, %.v593
  store i64 %6582, i64* %3, align 8
  br i1 %6580, label %block_4409a5, label %block_.L_440ac0

block_4409a5:                                     ; preds = %block_.L_440977
  %6583 = add i64 %6582, 7
  store i64 %6583, i64* %3, align 8
  %6584 = load i32, i32* %6567, align 4
  %6585 = sext i32 %6584 to i64
  store i64 %6585, i64* %RAX.i3798, align 8
  %6586 = add nsw i64 %6585, -1664
  %6587 = add i64 %6586, %6563
  %6588 = add i64 %6582, 15
  store i64 %6588, i64* %3, align 8
  %6589 = inttoptr i64 %6587 to i8*
  %6590 = load i8, i8* %6589, align 1
  store i8 0, i8* %31, align 1
  %6591 = zext i8 %6590 to i32
  %6592 = tail call i32 @llvm.ctpop.i32(i32 %6591)
  %6593 = trunc i32 %6592 to i8
  %6594 = and i8 %6593, 1
  %6595 = xor i8 %6594, 1
  store i8 %6595, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6596 = icmp eq i8 %6590, 0
  %6597 = zext i1 %6596 to i8
  store i8 %6597, i8* %47, align 1
  %6598 = lshr i8 %6590, 7
  store i8 %6598, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v594 = select i1 %6596, i64 21, i64 283
  %6599 = add i64 %6582, %.v594
  store i64 %6599, i64* %3, align 8
  br i1 %6596, label %block_4409ba, label %block_.L_440ac0

block_4409ba:                                     ; preds = %block_4409a5
  %6600 = add i64 %6599, 6
  store i64 %6600, i64* %3, align 8
  %6601 = load i32, i32* %6567, align 4
  %6602 = zext i32 %6601 to i64
  store i64 %6602, i64* %RDI.i3802.pre-phi, align 8
  %6603 = add i64 %6563, -48
  %6604 = add i64 %6599, 10
  store i64 %6604, i64* %3, align 8
  %6605 = inttoptr i64 %6603 to i64*
  %6606 = load i64, i64* %6605, align 8
  store i64 %6606, i64* %RSI.i3811.pre-phi, align 8
  %6607 = add i64 %6599, 13526
  %6608 = add i64 %6599, 15
  %6609 = load i64, i64* %6, align 8
  %6610 = add i64 %6609, -8
  %6611 = inttoptr i64 %6610 to i64*
  store i64 %6608, i64* %6611, align 8
  store i64 %6610, i64* %6, align 8
  store i64 %6607, i64* %3, align 8
  %call2_4409c4 = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %6607, %struct.Memory* %MEMORY.89)
  %6612 = load i32, i32* %EAX.i4398, align 4
  %6613 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %6614 = and i32 %6612, 255
  %6615 = tail call i32 @llvm.ctpop.i32(i32 %6614)
  %6616 = trunc i32 %6615 to i8
  %6617 = and i8 %6616, 1
  %6618 = xor i8 %6617, 1
  store i8 %6618, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6619 = icmp eq i32 %6612, 0
  %6620 = zext i1 %6619 to i8
  store i8 %6620, i8* %47, align 1
  %6621 = lshr i32 %6612, 31
  %6622 = trunc i32 %6621 to i8
  store i8 %6622, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v595 = select i1 %6619, i64 242, i64 9
  %6623 = add i64 %6613, %.v595
  store i64 %6623, i64* %3, align 8
  br i1 %6619, label %block_.L_440abb, label %block_4409d2

block_4409d2:                                     ; preds = %block_4409ba
  %6624 = load i64, i64* %RBP.i, align 8
  %6625 = add i64 %6624, -1772
  %6626 = add i64 %6623, 6
  store i64 %6626, i64* %3, align 8
  %6627 = inttoptr i64 %6625 to i32*
  %6628 = load i32, i32* %6627, align 4
  %6629 = zext i32 %6628 to i64
  store i64 %6629, i64* %RDI.i3802.pre-phi, align 8
  %6630 = add i64 %6624, -40
  %6631 = add i64 %6623, 10
  store i64 %6631, i64* %3, align 8
  %6632 = inttoptr i64 %6630 to i64*
  %6633 = load i64, i64* %6632, align 8
  store i64 %6633, i64* %RSI.i3811.pre-phi, align 8
  %6634 = add i64 %6623, 13502
  %6635 = add i64 %6623, 15
  %6636 = load i64, i64* %6, align 8
  %6637 = add i64 %6636, -8
  %6638 = inttoptr i64 %6637 to i64*
  store i64 %6635, i64* %6638, align 8
  store i64 %6637, i64* %6, align 8
  store i64 %6634, i64* %3, align 8
  %call2_4409dc = tail call %struct.Memory* @sub_443e90.liberty_of_goal(%struct.State* nonnull %0, i64 %6634, %struct.Memory* %MEMORY.89)
  %6639 = load i32, i32* %EAX.i4398, align 4
  %6640 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %6641 = and i32 %6639, 255
  %6642 = tail call i32 @llvm.ctpop.i32(i32 %6641)
  %6643 = trunc i32 %6642 to i8
  %6644 = and i8 %6643, 1
  %6645 = xor i8 %6644, 1
  store i8 %6645, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6646 = icmp eq i32 %6639, 0
  %6647 = zext i1 %6646 to i8
  store i8 %6647, i8* %47, align 1
  %6648 = lshr i32 %6639, 31
  %6649 = trunc i32 %6648 to i8
  store i8 %6649, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v596 = select i1 %6646, i64 9, i64 148
  %6650 = add i64 %6640, %.v596
  %6651 = load i64, i64* %RBP.i, align 8
  %6652 = add i64 %6651, -1772
  %6653 = add i64 %6650, 6
  store i64 %6653, i64* %3, align 8
  %6654 = inttoptr i64 %6652 to i32*
  %6655 = load i32, i32* %6654, align 4
  %6656 = zext i32 %6655 to i64
  store i64 %6656, i64* %RDI.i3802.pre-phi, align 8
  %6657 = add i64 %6651, -92
  %6658 = add i64 %6650, 9
  store i64 %6658, i64* %3, align 8
  %6659 = inttoptr i64 %6657 to i32*
  %6660 = load i32, i32* %6659, align 4
  %6661 = zext i32 %6660 to i64
  store i64 %6661, i64* %RSI.i3811.pre-phi, align 8
  br i1 %6646, label %block_4409ea, label %block_.L_440a75

block_4409ea:                                     ; preds = %block_4409d2
  %6662 = add i64 %6650, 176710
  %6663 = add i64 %6650, 14
  %6664 = load i64, i64* %6, align 8
  %6665 = add i64 %6664, -8
  %6666 = inttoptr i64 %6665 to i64*
  store i64 %6663, i64* %6666, align 8
  store i64 %6665, i64* %6, align 8
  store i64 %6662, i64* %3, align 8
  %call2_4409f3 = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %6662, %struct.Memory* %MEMORY.89)
  %6667 = load i32, i32* %EAX.i4398, align 4
  %6668 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %6669 = and i32 %6667, 255
  %6670 = tail call i32 @llvm.ctpop.i32(i32 %6669)
  %6671 = trunc i32 %6670 to i8
  %6672 = and i8 %6671, 1
  %6673 = xor i8 %6672, 1
  store i8 %6673, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6674 = icmp eq i32 %6667, 0
  %6675 = zext i1 %6674 to i8
  store i8 %6675, i8* %47, align 1
  %6676 = lshr i32 %6667, 31
  %6677 = trunc i32 %6676 to i8
  store i8 %6677, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v598 = select i1 %6674, i64 36, i64 9
  %6678 = add i64 %6668, %.v598
  store i64 %6678, i64* %3, align 8
  %6679 = load i64, i64* %RBP.i, align 8
  %6680 = add i64 %6679, -1236
  br i1 %6674, label %block_.L_440a1c, label %block_440a01

block_440a01:                                     ; preds = %block_4409ea
  %6681 = add i64 %6678, 10
  store i64 %6681, i64* %3, align 8
  %6682 = inttoptr i64 %6680 to i32*
  store i32 1, i32* %6682, align 4
  %6683 = load i64, i64* %RBP.i, align 8
  %6684 = add i64 %6683, -1772
  %6685 = load i64, i64* %3, align 8
  %6686 = add i64 %6685, 6
  store i64 %6686, i64* %3, align 8
  %6687 = inttoptr i64 %6684 to i32*
  %6688 = load i32, i32* %6687, align 4
  %6689 = zext i32 %6688 to i64
  store i64 %6689, i64* %RAX.i3798, align 8
  %6690 = add i64 %6683, -768
  %6691 = add i64 %6685, 12
  store i64 %6691, i64* %3, align 8
  %6692 = inttoptr i64 %6690 to i32*
  store i32 %6688, i32* %6692, align 4
  %6693 = load i64, i64* %3, align 8
  %6694 = add i64 %6693, 89
  br label %block_.L_440a70

block_.L_440a1c:                                  ; preds = %block_4409ea
  %6695 = add i64 %6678, 7
  store i64 %6695, i64* %3, align 8
  %6696 = inttoptr i64 %6680 to i32*
  %6697 = load i32, i32* %6696, align 4
  store i8 0, i8* %31, align 1
  %6698 = and i32 %6697, 255
  %6699 = tail call i32 @llvm.ctpop.i32(i32 %6698)
  %6700 = trunc i32 %6699 to i8
  %6701 = and i8 %6700, 1
  %6702 = xor i8 %6701, 1
  store i8 %6702, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6703 = icmp eq i32 %6697, 0
  %6704 = zext i1 %6703 to i8
  store i8 %6704, i8* %47, align 1
  %6705 = lshr i32 %6697, 31
  %6706 = trunc i32 %6705 to i8
  store i8 %6706, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v599 = select i1 %6703, i64 13, i64 79
  %6707 = add i64 %6678, %.v599
  store i64 %6707, i64* %3, align 8
  br i1 %6703, label %block_440a29, label %block_.L_440a6b

block_440a29:                                     ; preds = %block_.L_440a1c
  %6708 = add i64 %6679, -1252
  %6709 = add i64 %6707, 7
  store i64 %6709, i64* %3, align 8
  %6710 = inttoptr i64 %6708 to i32*
  %6711 = load i32, i32* %6710, align 4
  store i8 0, i8* %31, align 1
  %6712 = and i32 %6711, 255
  %6713 = tail call i32 @llvm.ctpop.i32(i32 %6712)
  %6714 = trunc i32 %6713 to i8
  %6715 = and i8 %6714, 1
  %6716 = xor i8 %6715, 1
  store i8 %6716, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6717 = icmp eq i32 %6711, 0
  %6718 = zext i1 %6717 to i8
  store i8 %6718, i8* %47, align 1
  %6719 = lshr i32 %6711, 31
  %6720 = trunc i32 %6719 to i8
  store i8 %6720, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v600 = select i1 %6717, i64 13, i64 61
  %6721 = add i64 %6707, %.v600
  store i64 %6721, i64* %3, align 8
  br i1 %6717, label %block_440a36, label %block_.L_440a66

block_440a36:                                     ; preds = %block_440a29
  %6722 = add i64 %6679, -32
  %6723 = add i64 %6721, 3
  store i64 %6723, i64* %3, align 8
  %6724 = inttoptr i64 %6722 to i32*
  %6725 = load i32, i32* %6724, align 4
  %6726 = zext i32 %6725 to i64
  store i64 %6726, i64* %RDI.i3802.pre-phi, align 8
  %6727 = add i64 %6679, -1772
  %6728 = add i64 %6721, 9
  store i64 %6728, i64* %3, align 8
  %6729 = inttoptr i64 %6727 to i32*
  %6730 = load i32, i32* %6729, align 4
  %6731 = zext i32 %6730 to i64
  store i64 %6731, i64* %RSI.i3811.pre-phi, align 8
  %6732 = add i64 %6721, 14938
  %6733 = add i64 %6721, 14
  %6734 = load i64, i64* %6, align 8
  %6735 = add i64 %6734, -8
  %6736 = inttoptr i64 %6735 to i64*
  store i64 %6733, i64* %6736, align 8
  store i64 %6735, i64* %6, align 8
  store i64 %6732, i64* %3, align 8
  %call2_440a3f = tail call %struct.Memory* @sub_444490.find_semeai_backfilling_move(%struct.State* nonnull %0, i64 %6732, %struct.Memory* %MEMORY.89)
  %6737 = load i64, i64* %RBP.i, align 8
  %6738 = add i64 %6737, -832
  %6739 = load i32, i32* %EAX.i4398, align 4
  %6740 = load i64, i64* %3, align 8
  %6741 = add i64 %6740, 6
  store i64 %6741, i64* %3, align 8
  %6742 = inttoptr i64 %6738 to i32*
  store i32 %6739, i32* %6742, align 4
  %6743 = load i64, i64* %RBP.i, align 8
  %6744 = add i64 %6743, -832
  %6745 = load i64, i64* %3, align 8
  %6746 = add i64 %6745, 7
  store i64 %6746, i64* %3, align 8
  %6747 = inttoptr i64 %6744 to i32*
  %6748 = load i32, i32* %6747, align 4
  store i8 0, i8* %31, align 1
  %6749 = and i32 %6748, 255
  %6750 = tail call i32 @llvm.ctpop.i32(i32 %6749)
  %6751 = trunc i32 %6750 to i8
  %6752 = and i8 %6751, 1
  %6753 = xor i8 %6752, 1
  store i8 %6753, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6754 = icmp eq i32 %6748, 0
  %6755 = zext i1 %6754 to i8
  store i8 %6755, i8* %47, align 1
  %6756 = lshr i32 %6748, 31
  %6757 = trunc i32 %6756 to i8
  store i8 %6757, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v601 = select i1 %6754, i64 23, i64 13
  %6758 = add i64 %6745, %.v601
  store i64 %6758, i64* %3, align 8
  br i1 %6754, label %block_.L_440a61, label %block_440a57

block_440a57:                                     ; preds = %block_440a36
  %6759 = add i64 %6743, -1252
  %6760 = add i64 %6758, 10
  store i64 %6760, i64* %3, align 8
  %6761 = inttoptr i64 %6759 to i32*
  store i32 1, i32* %6761, align 4
  %.pre429 = load i64, i64* %3, align 8
  br label %block_.L_440a61

block_.L_440a61:                                  ; preds = %block_440a57, %block_440a36
  %6762 = phi i64 [ %.pre429, %block_440a57 ], [ %6758, %block_440a36 ]
  %6763 = add i64 %6762, 5
  store i64 %6763, i64* %3, align 8
  br label %block_.L_440a66

block_.L_440a66:                                  ; preds = %block_440a29, %block_.L_440a61
  %6764 = phi i64 [ %6763, %block_.L_440a61 ], [ %6721, %block_440a29 ]
  %6765 = add i64 %6764, 5
  store i64 %6765, i64* %3, align 8
  br label %block_.L_440a6b

block_.L_440a6b:                                  ; preds = %block_.L_440a1c, %block_.L_440a66
  %6766 = phi i64 [ %6765, %block_.L_440a66 ], [ %6707, %block_.L_440a1c ]
  %6767 = add i64 %6766, 5
  store i64 %6767, i64* %3, align 8
  br label %block_.L_440a70

block_.L_440a70:                                  ; preds = %block_.L_440a6b, %block_440a01
  %storemerge250 = phi i64 [ %6694, %block_440a01 ], [ %6767, %block_.L_440a6b ]
  %6768 = add i64 %storemerge250, 70
  br label %block_.L_440ab6

block_.L_440a75:                                  ; preds = %block_4409d2
  %6769 = add i64 %6650, 176571
  %6770 = add i64 %6650, 14
  %6771 = load i64, i64* %6, align 8
  %6772 = add i64 %6771, -8
  %6773 = inttoptr i64 %6772 to i64*
  store i64 %6770, i64* %6773, align 8
  store i64 %6772, i64* %6, align 8
  store i64 %6769, i64* %3, align 8
  %call2_440a7e = tail call %struct.Memory* @sub_46bc30.safe_move(%struct.State* nonnull %0, i64 %6769, %struct.Memory* %MEMORY.89)
  %6774 = load i32, i32* %EAX.i4398, align 4
  %6775 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %6776 = and i32 %6774, 255
  %6777 = tail call i32 @llvm.ctpop.i32(i32 %6776)
  %6778 = trunc i32 %6777 to i8
  %6779 = and i8 %6778, 1
  %6780 = xor i8 %6779, 1
  store i8 %6780, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %6781 = icmp eq i32 %6774, 0
  %6782 = zext i1 %6781 to i8
  store i8 %6782, i8* %47, align 1
  %6783 = lshr i32 %6774, 31
  %6784 = trunc i32 %6783 to i8
  store i8 %6784, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v597 = select i1 %6781, i64 36, i64 9
  %6785 = add i64 %6775, %.v597
  store i64 %6785, i64* %3, align 8
  %6786 = load i64, i64* %RBP.i, align 8
  br i1 %6781, label %block_.L_440aa7, label %block_440a8c

block_440a8c:                                     ; preds = %block_.L_440a75
  %6787 = add i64 %6786, -1244
  %6788 = add i64 %6785, 10
  store i64 %6788, i64* %3, align 8
  %6789 = inttoptr i64 %6787 to i32*
  store i32 1, i32* %6789, align 4
  %6790 = load i64, i64* %RBP.i, align 8
  %6791 = add i64 %6790, -1772
  %6792 = load i64, i64* %3, align 8
  %6793 = add i64 %6792, 6
  store i64 %6793, i64* %3, align 8
  %6794 = inttoptr i64 %6791 to i32*
  %6795 = load i32, i32* %6794, align 4
  %6796 = zext i32 %6795 to i64
  store i64 %6796, i64* %RAX.i3798, align 8
  %6797 = add i64 %6790, -800
  %6798 = add i64 %6792, 12
  store i64 %6798, i64* %3, align 8
  %6799 = inttoptr i64 %6797 to i32*
  store i32 %6795, i32* %6799, align 4
  %6800 = load i64, i64* %3, align 8
  %6801 = add i64 %6800, 15
  store i64 %6801, i64* %3, align 8
  br label %block_.L_440ab1

block_.L_440aa7:                                  ; preds = %block_.L_440a75
  %6802 = add i64 %6786, -1248
  %6803 = add i64 %6785, 10
  store i64 %6803, i64* %3, align 8
  %6804 = inttoptr i64 %6802 to i32*
  store i32 1, i32* %6804, align 4
  %.pre430 = load i64, i64* %3, align 8
  br label %block_.L_440ab1

block_.L_440ab1:                                  ; preds = %block_.L_440aa7, %block_440a8c
  %6805 = phi i64 [ %.pre430, %block_.L_440aa7 ], [ %6801, %block_440a8c ]
  %6806 = add i64 %6805, 5
  store i64 %6806, i64* %3, align 8
  br label %block_.L_440ab6

block_.L_440ab6:                                  ; preds = %block_.L_440ab1, %block_.L_440a70
  %storemerge251 = phi i64 [ %6768, %block_.L_440a70 ], [ %6806, %block_.L_440ab1 ]
  %6807 = add i64 %storemerge251, 5
  store i64 %6807, i64* %3, align 8
  br label %block_.L_440abb

block_.L_440abb:                                  ; preds = %block_.L_440ab6, %block_4409ba
  %6808 = phi i64 [ %6807, %block_.L_440ab6 ], [ %6623, %block_4409ba ]
  %6809 = add i64 %6808, 5
  store i64 %6809, i64* %3, align 8
  %.pre431 = load i64, i64* %RBP.i, align 8
  br label %block_.L_440ac0

block_.L_440ac0:                                  ; preds = %block_4409a5, %block_.L_440977, %block_.L_440abb
  %6810 = phi i64 [ %.pre431, %block_.L_440abb ], [ %6563, %block_4409a5 ], [ %6563, %block_.L_440977 ]
  %6811 = phi i64 [ %6809, %block_.L_440abb ], [ %6599, %block_4409a5 ], [ %6582, %block_.L_440977 ]
  %6812 = add i64 %6810, -1676
  %6813 = add i64 %6811, 11
  store i64 %6813, i64* %3, align 8
  %6814 = inttoptr i64 %6812 to i32*
  %6815 = load i32, i32* %6814, align 4
  %6816 = add i32 %6815, 1
  %6817 = zext i32 %6816 to i64
  store i64 %6817, i64* %RAX.i3798, align 8
  %6818 = icmp eq i32 %6815, -1
  %6819 = icmp eq i32 %6816, 0
  %6820 = or i1 %6818, %6819
  %6821 = zext i1 %6820 to i8
  store i8 %6821, i8* %31, align 1
  %6822 = and i32 %6816, 255
  %6823 = tail call i32 @llvm.ctpop.i32(i32 %6822)
  %6824 = trunc i32 %6823 to i8
  %6825 = and i8 %6824, 1
  %6826 = xor i8 %6825, 1
  store i8 %6826, i8* %38, align 1
  %6827 = xor i32 %6816, %6815
  %6828 = lshr i32 %6827, 4
  %6829 = trunc i32 %6828 to i8
  %6830 = and i8 %6829, 1
  store i8 %6830, i8* %44, align 1
  %6831 = zext i1 %6819 to i8
  store i8 %6831, i8* %47, align 1
  %6832 = lshr i32 %6816, 31
  %6833 = trunc i32 %6832 to i8
  store i8 %6833, i8* %50, align 1
  %6834 = lshr i32 %6815, 31
  %6835 = xor i32 %6832, %6834
  %6836 = add nuw nsw i32 %6835, %6832
  %6837 = icmp eq i32 %6836, 2
  %6838 = zext i1 %6837 to i8
  store i8 %6838, i8* %56, align 1
  %6839 = add i64 %6811, 20
  store i64 %6839, i64* %3, align 8
  store i32 %6816, i32* %6814, align 4
  %6840 = load i64, i64* %3, align 8
  %6841 = add i64 %6840, -413
  store i64 %6841, i64* %3, align 8
  br label %block_.L_440937

block_.L_440af7:                                  ; preds = %block_.L_4408c9, %block_4408d6, %block_440928
  %6842 = phi i64 [ %6275, %block_.L_4408c9 ], [ %6275, %block_4408d6 ], [ %6383, %block_440928 ]
  %6843 = phi i64 [ %6289, %block_.L_4408c9 ], [ %6317, %block_4408d6 ], [ %6396, %block_440928 ]
  store i64 0, i64* %RSI.i3811.pre-phi, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 1600, i64* %RAX.i3798, align 8
  store i64 1600, i64* %RDX.i4419, align 8
  %6844 = add i64 %6842, -3376
  store i64 %6844, i64* %RCX.i4416, align 8
  store i64 %6844, i64* %RDI.i3802.pre-phi, align 8
  %6845 = add i64 %6843, -260743
  %6846 = add i64 %6843, 24
  %6847 = load i64, i64* %6, align 8
  %6848 = add i64 %6847, -8
  %6849 = inttoptr i64 %6848 to i64*
  store i64 %6846, i64* %6849, align 8
  store i64 %6848, i64* %6, align 8
  store i64 %6845, i64* %3, align 8
  %6850 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %MEMORY.89)
  %6851 = load i64, i64* %RBP.i, align 8
  %6852 = add i64 %6851, -1672
  %6853 = load i64, i64* %3, align 8
  %6854 = add i64 %6853, 10
  store i64 %6854, i64* %3, align 8
  %6855 = inttoptr i64 %6852 to i32*
  store i32 0, i32* %6855, align 4
  %.pre432 = load i64, i64* %3, align 8
  br label %block_.L_440b19

block_.L_440b19:                                  ; preds = %block_.L_440df9, %block_.L_440af7
  %6856 = phi i64 [ %.pre432, %block_.L_440af7 ], [ %7788, %block_.L_440df9 ]
  %6857 = load i64, i64* %RBP.i, align 8
  %6858 = add i64 %6857, -1672
  %6859 = add i64 %6856, 6
  store i64 %6859, i64* %3, align 8
  %6860 = inttoptr i64 %6858 to i32*
  %6861 = load i32, i32* %6860, align 4
  %6862 = zext i32 %6861 to i64
  store i64 %6862, i64* %RAX.i3798, align 8
  %6863 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %6864 = sub i32 %6861, %6863
  %6865 = icmp ult i32 %6861, %6863
  %6866 = zext i1 %6865 to i8
  store i8 %6866, i8* %31, align 1
  %6867 = and i32 %6864, 255
  %6868 = tail call i32 @llvm.ctpop.i32(i32 %6867)
  %6869 = trunc i32 %6868 to i8
  %6870 = and i8 %6869, 1
  %6871 = xor i8 %6870, 1
  store i8 %6871, i8* %38, align 1
  %6872 = xor i32 %6863, %6861
  %6873 = xor i32 %6872, %6864
  %6874 = lshr i32 %6873, 4
  %6875 = trunc i32 %6874 to i8
  %6876 = and i8 %6875, 1
  store i8 %6876, i8* %44, align 1
  %6877 = icmp eq i32 %6864, 0
  %6878 = zext i1 %6877 to i8
  store i8 %6878, i8* %47, align 1
  %6879 = lshr i32 %6864, 31
  %6880 = trunc i32 %6879 to i8
  store i8 %6880, i8* %50, align 1
  %6881 = lshr i32 %6861, 31
  %6882 = lshr i32 %6863, 31
  %6883 = xor i32 %6882, %6881
  %6884 = xor i32 %6879, %6881
  %6885 = add nuw nsw i32 %6884, %6883
  %6886 = icmp eq i32 %6885, 2
  %6887 = zext i1 %6886 to i8
  store i8 %6887, i8* %56, align 1
  %6888 = icmp ne i8 %6880, 0
  %6889 = xor i1 %6888, %6886
  %.v525 = select i1 %6889, i64 19, i64 761
  %6890 = add i64 %6856, %.v525
  store i64 %6890, i64* %3, align 8
  br i1 %6889, label %block_440b2c, label %block_.L_440e12

block_440b2c:                                     ; preds = %block_.L_440b19
  %6891 = add i64 %6857, -1676
  %6892 = add i64 %6890, 10
  store i64 %6892, i64* %3, align 8
  %6893 = inttoptr i64 %6891 to i32*
  store i32 0, i32* %6893, align 4
  %.pre456 = load i64, i64* %3, align 8
  br label %block_.L_440b36

block_.L_440b36:                                  ; preds = %block_.L_440de0, %block_440b2c
  %6894 = phi i64 [ %.pre456, %block_440b2c ], [ %7759, %block_.L_440de0 ]
  %6895 = load i64, i64* %RBP.i, align 8
  %6896 = add i64 %6895, -1676
  %6897 = add i64 %6894, 6
  store i64 %6897, i64* %3, align 8
  %6898 = inttoptr i64 %6896 to i32*
  %6899 = load i32, i32* %6898, align 4
  %6900 = zext i32 %6899 to i64
  store i64 %6900, i64* %RAX.i3798, align 8
  %6901 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %6902 = sub i32 %6899, %6901
  %6903 = icmp ult i32 %6899, %6901
  %6904 = zext i1 %6903 to i8
  store i8 %6904, i8* %31, align 1
  %6905 = and i32 %6902, 255
  %6906 = tail call i32 @llvm.ctpop.i32(i32 %6905)
  %6907 = trunc i32 %6906 to i8
  %6908 = and i8 %6907, 1
  %6909 = xor i8 %6908, 1
  store i8 %6909, i8* %38, align 1
  %6910 = xor i32 %6901, %6899
  %6911 = xor i32 %6910, %6902
  %6912 = lshr i32 %6911, 4
  %6913 = trunc i32 %6912 to i8
  %6914 = and i8 %6913, 1
  store i8 %6914, i8* %44, align 1
  %6915 = icmp eq i32 %6902, 0
  %6916 = zext i1 %6915 to i8
  store i8 %6916, i8* %47, align 1
  %6917 = lshr i32 %6902, 31
  %6918 = trunc i32 %6917 to i8
  store i8 %6918, i8* %50, align 1
  %6919 = lshr i32 %6899, 31
  %6920 = lshr i32 %6901, 31
  %6921 = xor i32 %6920, %6919
  %6922 = xor i32 %6917, %6919
  %6923 = add nuw nsw i32 %6922, %6921
  %6924 = icmp eq i32 %6923, 2
  %6925 = zext i1 %6924 to i8
  store i8 %6925, i8* %56, align 1
  %6926 = icmp ne i8 %6918, 0
  %6927 = xor i1 %6926, %6924
  %.v484 = select i1 %6927, i64 19, i64 707
  %6928 = add i64 %6894, %.v484
  store i64 %6928, i64* %3, align 8
  %6929 = add i64 %6895, -1672
  br i1 %6927, label %block_440b49, label %block_.L_440df9

block_440b49:                                     ; preds = %block_.L_440b36
  %6930 = add i64 %6928, 7
  store i64 %6930, i64* %3, align 8
  %6931 = inttoptr i64 %6929 to i32*
  %6932 = load i32, i32* %6931, align 4
  %6933 = mul i32 %6932, 20
  %6934 = add i32 %6933, 21
  %6935 = zext i32 %6934 to i64
  store i64 %6935, i64* %RAX.i3798, align 8
  %6936 = icmp ugt i32 %6933, -22
  %6937 = zext i1 %6936 to i8
  store i8 %6937, i8* %31, align 1
  %6938 = and i32 %6934, 253
  %6939 = tail call i32 @llvm.ctpop.i32(i32 %6938)
  %6940 = trunc i32 %6939 to i8
  %6941 = and i8 %6940, 1
  %6942 = xor i8 %6941, 1
  store i8 %6942, i8* %38, align 1
  %6943 = xor i32 %6933, 16
  %6944 = xor i32 %6943, %6934
  %6945 = lshr i32 %6944, 4
  %6946 = trunc i32 %6945 to i8
  %6947 = and i8 %6946, 1
  store i8 %6947, i8* %44, align 1
  store i8 0, i8* %47, align 1
  %6948 = lshr i32 %6934, 31
  %6949 = trunc i32 %6948 to i8
  store i8 %6949, i8* %50, align 1
  %6950 = lshr i32 %6933, 31
  %6951 = xor i32 %6948, %6950
  %6952 = add nuw nsw i32 %6951, %6948
  %6953 = icmp eq i32 %6952, 2
  %6954 = zext i1 %6953 to i8
  store i8 %6954, i8* %56, align 1
  %6955 = add i64 %6928, 16
  store i64 %6955, i64* %3, align 8
  %6956 = load i32, i32* %6898, align 4
  %6957 = add i32 %6956, %6934
  %6958 = zext i32 %6957 to i64
  store i64 %6958, i64* %RAX.i3798, align 8
  %6959 = icmp ult i32 %6957, %6934
  %6960 = icmp ult i32 %6957, %6956
  %6961 = or i1 %6959, %6960
  %6962 = zext i1 %6961 to i8
  store i8 %6962, i8* %31, align 1
  %6963 = and i32 %6957, 255
  %6964 = tail call i32 @llvm.ctpop.i32(i32 %6963)
  %6965 = trunc i32 %6964 to i8
  %6966 = and i8 %6965, 1
  %6967 = xor i8 %6966, 1
  store i8 %6967, i8* %38, align 1
  %6968 = xor i32 %6956, %6934
  %6969 = xor i32 %6968, %6957
  %6970 = lshr i32 %6969, 4
  %6971 = trunc i32 %6970 to i8
  %6972 = and i8 %6971, 1
  store i8 %6972, i8* %44, align 1
  %6973 = icmp eq i32 %6957, 0
  %6974 = zext i1 %6973 to i8
  store i8 %6974, i8* %47, align 1
  %6975 = lshr i32 %6957, 31
  %6976 = trunc i32 %6975 to i8
  store i8 %6976, i8* %50, align 1
  %6977 = lshr i32 %6956, 31
  %6978 = xor i32 %6975, %6948
  %6979 = xor i32 %6975, %6977
  %6980 = add nuw nsw i32 %6978, %6979
  %6981 = icmp eq i32 %6980, 2
  %6982 = zext i1 %6981 to i8
  store i8 %6982, i8* %56, align 1
  %6983 = add i64 %6895, -3388
  %6984 = add i64 %6928, 22
  store i64 %6984, i64* %3, align 8
  %6985 = inttoptr i64 %6983 to i32*
  store i32 %6957, i32* %6985, align 4
  %6986 = load i64, i64* %RBP.i, align 8
  %6987 = add i64 %6986, -48
  %6988 = load i64, i64* %3, align 8
  %6989 = add i64 %6988, 4
  store i64 %6989, i64* %3, align 8
  %6990 = inttoptr i64 %6987 to i64*
  %6991 = load i64, i64* %6990, align 8
  store i64 %6991, i64* %RCX.i4416, align 8
  %6992 = add i64 %6986, -3388
  %6993 = add i64 %6988, 11
  store i64 %6993, i64* %3, align 8
  %6994 = inttoptr i64 %6992 to i32*
  %6995 = load i32, i32* %6994, align 4
  %6996 = sext i32 %6995 to i64
  store i64 %6996, i64* %RDX.i4419, align 8
  %6997 = add i64 %6991, %6996
  %6998 = add i64 %6988, 15
  store i64 %6998, i64* %3, align 8
  %6999 = inttoptr i64 %6997 to i8*
  %7000 = load i8, i8* %6999, align 1
  %7001 = sext i8 %7000 to i64
  %7002 = and i64 %7001, 4294967295
  store i64 %7002, i64* %RAX.i3798, align 8
  %7003 = sext i8 %7000 to i32
  store i8 0, i8* %31, align 1
  %7004 = and i32 %7003, 255
  %7005 = tail call i32 @llvm.ctpop.i32(i32 %7004)
  %7006 = trunc i32 %7005 to i8
  %7007 = and i8 %7006, 1
  %7008 = xor i8 %7007, 1
  store i8 %7008, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7009 = icmp eq i8 %7000, 0
  %7010 = zext i1 %7009 to i8
  store i8 %7010, i8* %47, align 1
  %7011 = lshr i32 %7003, 31
  %7012 = trunc i32 %7011 to i8
  store i8 %7012, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v575 = select i1 %7009, i64 641, i64 24
  %7013 = add i64 %6988, %.v575
  store i64 %7013, i64* %3, align 8
  br i1 %7009, label %block_.L_440de0, label %block_440b77

block_440b77:                                     ; preds = %block_440b49
  %7014 = add i64 %7013, 7
  store i64 %7014, i64* %3, align 8
  %7015 = load i32, i32* %6994, align 4
  %7016 = sext i32 %7015 to i64
  store i64 %7016, i64* %RAX.i3798, align 8
  %7017 = add nsw i64 %7016, 12099168
  %7018 = add i64 %7013, 15
  store i64 %7018, i64* %3, align 8
  %7019 = inttoptr i64 %7017 to i8*
  %7020 = load i8, i8* %7019, align 1
  %7021 = zext i8 %7020 to i64
  store i64 %7021, i64* %RCX.i4416, align 8
  %7022 = zext i8 %7020 to i32
  %7023 = add i64 %6986, -96
  %7024 = add i64 %7013, 18
  store i64 %7024, i64* %3, align 8
  %7025 = inttoptr i64 %7023 to i32*
  %7026 = load i32, i32* %7025, align 4
  %7027 = sub i32 %7022, %7026
  %7028 = icmp ult i32 %7022, %7026
  %7029 = zext i1 %7028 to i8
  store i8 %7029, i8* %31, align 1
  %7030 = and i32 %7027, 255
  %7031 = tail call i32 @llvm.ctpop.i32(i32 %7030)
  %7032 = trunc i32 %7031 to i8
  %7033 = and i8 %7032, 1
  %7034 = xor i8 %7033, 1
  store i8 %7034, i8* %38, align 1
  %7035 = xor i32 %7026, %7022
  %7036 = xor i32 %7035, %7027
  %7037 = lshr i32 %7036, 4
  %7038 = trunc i32 %7037 to i8
  %7039 = and i8 %7038, 1
  store i8 %7039, i8* %44, align 1
  %7040 = icmp eq i32 %7027, 0
  %7041 = zext i1 %7040 to i8
  store i8 %7041, i8* %47, align 1
  %7042 = lshr i32 %7027, 31
  %7043 = trunc i32 %7042 to i8
  store i8 %7043, i8* %50, align 1
  %7044 = lshr i32 %7026, 31
  %7045 = add nuw nsw i32 %7042, %7044
  %7046 = icmp eq i32 %7045, 2
  %7047 = zext i1 %7046 to i8
  store i8 %7047, i8* %56, align 1
  %.v576 = select i1 %7040, i64 24, i64 617
  %7048 = add i64 %7013, %.v576
  store i64 %7048, i64* %3, align 8
  br i1 %7040, label %block_440b8f, label %block_.L_440de0

block_440b8f:                                     ; preds = %block_440b77
  %7049 = add i64 %7048, 6
  store i64 %7049, i64* %3, align 8
  %7050 = load i32, i32* %6994, align 4
  %7051 = zext i32 %7050 to i64
  store i64 %7051, i64* %RDI.i3802.pre-phi, align 8
  %7052 = add i64 %7048, -182703
  %7053 = add i64 %7048, 11
  %7054 = load i64, i64* %6, align 8
  %7055 = add i64 %7054, -8
  %7056 = inttoptr i64 %7055 to i64*
  store i64 %7053, i64* %7056, align 8
  store i64 %7055, i64* %6, align 8
  store i64 %7052, i64* %3, align 8
  %call2_440b95 = tail call %struct.Memory* @sub_4141e0.find_origin(%struct.State* nonnull %0, i64 %7052, %struct.Memory* %6850)
  %7057 = load i64, i64* %RBP.i, align 8
  %7058 = add i64 %7057, -3380
  %7059 = load i32, i32* %EAX.i4398, align 4
  %7060 = load i64, i64* %3, align 8
  %7061 = add i64 %7060, 6
  store i64 %7061, i64* %3, align 8
  %7062 = inttoptr i64 %7058 to i32*
  store i32 %7059, i32* %7062, align 4
  %7063 = load i64, i64* %RBP.i, align 8
  %7064 = add i64 %7063, -3380
  %7065 = load i64, i64* %3, align 8
  %7066 = add i64 %7065, 7
  store i64 %7066, i64* %3, align 8
  %7067 = inttoptr i64 %7064 to i32*
  %7068 = load i32, i32* %7067, align 4
  %7069 = sext i32 %7068 to i64
  store i64 %7069, i64* %RCX.i4416, align 8
  %7070 = shl nsw i64 %7069, 2
  %7071 = add i64 %7063, -3376
  %7072 = add i64 %7071, %7070
  %7073 = add i64 %7065, 15
  store i64 %7073, i64* %3, align 8
  %7074 = inttoptr i64 %7072 to i32*
  %7075 = load i32, i32* %7074, align 4
  store i8 0, i8* %31, align 1
  %7076 = and i32 %7075, 255
  %7077 = tail call i32 @llvm.ctpop.i32(i32 %7076)
  %7078 = trunc i32 %7077 to i8
  %7079 = and i8 %7078, 1
  %7080 = xor i8 %7079, 1
  store i8 %7080, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7081 = icmp eq i32 %7075, 0
  %7082 = zext i1 %7081 to i8
  store i8 %7082, i8* %47, align 1
  %7083 = lshr i32 %7075, 31
  %7084 = trunc i32 %7083 to i8
  store i8 %7084, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v577 = select i1 %7081, i64 21, i64 571
  %7085 = add i64 %7065, %.v577
  store i64 %7085, i64* %3, align 8
  br i1 %7081, label %block_440bb5, label %block_.L_440ddb

block_440bb5:                                     ; preds = %block_440b8f
  %7086 = add i64 %7063, -3388
  %7087 = add i64 %7085, 6
  store i64 %7087, i64* %3, align 8
  %7088 = inttoptr i64 %7086 to i32*
  %7089 = load i32, i32* %7088, align 4
  %7090 = add i32 %7089, 20
  %7091 = zext i32 %7090 to i64
  store i64 %7091, i64* %RAX.i3798, align 8
  %7092 = icmp ugt i32 %7089, -21
  %7093 = zext i1 %7092 to i8
  store i8 %7093, i8* %31, align 1
  %7094 = and i32 %7090, 255
  %7095 = tail call i32 @llvm.ctpop.i32(i32 %7094)
  %7096 = trunc i32 %7095 to i8
  %7097 = and i8 %7096, 1
  %7098 = xor i8 %7097, 1
  store i8 %7098, i8* %38, align 1
  %7099 = xor i32 %7089, 16
  %7100 = xor i32 %7099, %7090
  %7101 = lshr i32 %7100, 4
  %7102 = trunc i32 %7101 to i8
  %7103 = and i8 %7102, 1
  store i8 %7103, i8* %44, align 1
  %7104 = icmp eq i32 %7090, 0
  %7105 = zext i1 %7104 to i8
  store i8 %7105, i8* %47, align 1
  %7106 = lshr i32 %7090, 31
  %7107 = trunc i32 %7106 to i8
  store i8 %7107, i8* %50, align 1
  %7108 = lshr i32 %7089, 31
  %7109 = xor i32 %7106, %7108
  %7110 = add nuw nsw i32 %7109, %7106
  %7111 = icmp eq i32 %7110, 2
  %7112 = zext i1 %7111 to i8
  store i8 %7112, i8* %56, align 1
  %7113 = sext i32 %7090 to i64
  store i64 %7113, i64* %RCX.i4416, align 8
  %7114 = add nsw i64 %7113, 12099168
  %7115 = add i64 %7085, 20
  store i64 %7115, i64* %3, align 8
  %7116 = inttoptr i64 %7114 to i8*
  %7117 = load i8, i8* %7116, align 1
  %7118 = zext i8 %7117 to i64
  store i64 %7118, i64* %RAX.i3798, align 8
  %7119 = zext i8 %7117 to i32
  %7120 = add nsw i32 %7119, -3
  %7121 = icmp ult i8 %7117, 3
  %7122 = zext i1 %7121 to i8
  store i8 %7122, i8* %31, align 1
  %7123 = and i32 %7120, 255
  %7124 = tail call i32 @llvm.ctpop.i32(i32 %7123)
  %7125 = trunc i32 %7124 to i8
  %7126 = and i8 %7125, 1
  %7127 = xor i8 %7126, 1
  store i8 %7127, i8* %38, align 1
  %7128 = xor i32 %7120, %7119
  %7129 = lshr i32 %7128, 4
  %7130 = trunc i32 %7129 to i8
  %7131 = and i8 %7130, 1
  store i8 %7131, i8* %44, align 1
  %7132 = icmp eq i32 %7120, 0
  %7133 = zext i1 %7132 to i8
  store i8 %7133, i8* %47, align 1
  %7134 = lshr i32 %7120, 31
  %7135 = trunc i32 %7134 to i8
  store i8 %7135, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v578 = select i1 %7132, i64 58, i64 29
  %7136 = add i64 %7085, %.v578
  store i64 %7136, i64* %3, align 8
  br i1 %7132, label %block_.L_440bef, label %block_440bd2

block_440bd2:                                     ; preds = %block_440bb5
  %7137 = add i64 %7063, -40
  %7138 = add i64 %7136, 4
  store i64 %7138, i64* %3, align 8
  %7139 = inttoptr i64 %7137 to i64*
  %7140 = load i64, i64* %7139, align 8
  store i64 %7140, i64* %RAX.i3798, align 8
  %7141 = add i64 %7136, 10
  store i64 %7141, i64* %3, align 8
  %7142 = load i32, i32* %7088, align 4
  %7143 = add i32 %7142, 20
  %7144 = zext i32 %7143 to i64
  store i64 %7144, i64* %RCX.i4416, align 8
  %7145 = icmp ugt i32 %7142, -21
  %7146 = zext i1 %7145 to i8
  store i8 %7146, i8* %31, align 1
  %7147 = and i32 %7143, 255
  %7148 = tail call i32 @llvm.ctpop.i32(i32 %7147)
  %7149 = trunc i32 %7148 to i8
  %7150 = and i8 %7149, 1
  %7151 = xor i8 %7150, 1
  store i8 %7151, i8* %38, align 1
  %7152 = xor i32 %7142, 16
  %7153 = xor i32 %7152, %7143
  %7154 = lshr i32 %7153, 4
  %7155 = trunc i32 %7154 to i8
  %7156 = and i8 %7155, 1
  store i8 %7156, i8* %44, align 1
  %7157 = icmp eq i32 %7143, 0
  %7158 = zext i1 %7157 to i8
  store i8 %7158, i8* %47, align 1
  %7159 = lshr i32 %7143, 31
  %7160 = trunc i32 %7159 to i8
  store i8 %7160, i8* %50, align 1
  %7161 = lshr i32 %7142, 31
  %7162 = xor i32 %7159, %7161
  %7163 = add nuw nsw i32 %7162, %7159
  %7164 = icmp eq i32 %7163, 2
  %7165 = zext i1 %7164 to i8
  store i8 %7165, i8* %56, align 1
  %7166 = sext i32 %7143 to i64
  store i64 %7166, i64* %RDX.i4419, align 8
  %7167 = add i64 %7140, %7166
  %7168 = add i64 %7136, 20
  store i64 %7168, i64* %3, align 8
  %7169 = inttoptr i64 %7167 to i8*
  %7170 = load i8, i8* %7169, align 1
  %7171 = sext i8 %7170 to i64
  %7172 = and i64 %7171, 4294967295
  store i64 %7172, i64* %RCX.i4416, align 8
  %7173 = sext i8 %7170 to i32
  store i8 0, i8* %31, align 1
  %7174 = and i32 %7173, 255
  %7175 = tail call i32 @llvm.ctpop.i32(i32 %7174)
  %7176 = trunc i32 %7175 to i8
  %7177 = and i8 %7176, 1
  %7178 = xor i8 %7177, 1
  store i8 %7178, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7179 = icmp eq i8 %7170, 0
  %7180 = zext i1 %7179 to i8
  store i8 %7180, i8* %47, align 1
  %7181 = lshr i32 %7173, 31
  %7182 = trunc i32 %7181 to i8
  store i8 %7182, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v579 = select i1 %7179, i64 29, i64 203
  %7183 = add i64 %7136, %.v579
  store i64 %7183, i64* %3, align 8
  br i1 %7179, label %block_.L_440bef, label %block_.L_440c9d

block_.L_440bef:                                  ; preds = %block_440bd2, %block_440bb5
  %7184 = phi i64 [ %7183, %block_440bd2 ], [ %7136, %block_440bb5 ]
  %7185 = add i64 %7184, 6
  store i64 %7185, i64* %3, align 8
  %7186 = load i32, i32* %7088, align 4
  %7187 = add i32 %7186, -1
  %7188 = zext i32 %7187 to i64
  store i64 %7188, i64* %RAX.i3798, align 8
  %7189 = icmp eq i32 %7186, 0
  %7190 = zext i1 %7189 to i8
  store i8 %7190, i8* %31, align 1
  %7191 = and i32 %7187, 255
  %7192 = tail call i32 @llvm.ctpop.i32(i32 %7191)
  %7193 = trunc i32 %7192 to i8
  %7194 = and i8 %7193, 1
  %7195 = xor i8 %7194, 1
  store i8 %7195, i8* %38, align 1
  %7196 = xor i32 %7187, %7186
  %7197 = lshr i32 %7196, 4
  %7198 = trunc i32 %7197 to i8
  %7199 = and i8 %7198, 1
  store i8 %7199, i8* %44, align 1
  %7200 = icmp eq i32 %7187, 0
  %7201 = zext i1 %7200 to i8
  store i8 %7201, i8* %47, align 1
  %7202 = lshr i32 %7187, 31
  %7203 = trunc i32 %7202 to i8
  store i8 %7203, i8* %50, align 1
  %7204 = lshr i32 %7186, 31
  %7205 = xor i32 %7202, %7204
  %7206 = add nuw nsw i32 %7205, %7204
  %7207 = icmp eq i32 %7206, 2
  %7208 = zext i1 %7207 to i8
  store i8 %7208, i8* %56, align 1
  %7209 = sext i32 %7187 to i64
  store i64 %7209, i64* %RCX.i4416, align 8
  %7210 = add nsw i64 %7209, 12099168
  %7211 = add i64 %7184, 20
  store i64 %7211, i64* %3, align 8
  %7212 = inttoptr i64 %7210 to i8*
  %7213 = load i8, i8* %7212, align 1
  %7214 = zext i8 %7213 to i64
  store i64 %7214, i64* %RAX.i3798, align 8
  %7215 = zext i8 %7213 to i32
  %7216 = add nsw i32 %7215, -3
  %7217 = icmp ult i8 %7213, 3
  %7218 = zext i1 %7217 to i8
  store i8 %7218, i8* %31, align 1
  %7219 = and i32 %7216, 255
  %7220 = tail call i32 @llvm.ctpop.i32(i32 %7219)
  %7221 = trunc i32 %7220 to i8
  %7222 = and i8 %7221, 1
  %7223 = xor i8 %7222, 1
  store i8 %7223, i8* %38, align 1
  %7224 = xor i32 %7216, %7215
  %7225 = lshr i32 %7224, 4
  %7226 = trunc i32 %7225 to i8
  %7227 = and i8 %7226, 1
  store i8 %7227, i8* %44, align 1
  %7228 = icmp eq i32 %7216, 0
  %7229 = zext i1 %7228 to i8
  store i8 %7229, i8* %47, align 1
  %7230 = lshr i32 %7216, 31
  %7231 = trunc i32 %7230 to i8
  store i8 %7231, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v585 = select i1 %7228, i64 58, i64 29
  %7232 = add i64 %7184, %.v585
  store i64 %7232, i64* %3, align 8
  br i1 %7228, label %block_.L_440c29, label %block_440c0c

block_440c0c:                                     ; preds = %block_.L_440bef
  %7233 = add i64 %7063, -40
  %7234 = add i64 %7232, 4
  store i64 %7234, i64* %3, align 8
  %7235 = inttoptr i64 %7233 to i64*
  %7236 = load i64, i64* %7235, align 8
  store i64 %7236, i64* %RAX.i3798, align 8
  %7237 = add i64 %7232, 10
  store i64 %7237, i64* %3, align 8
  %7238 = load i32, i32* %7088, align 4
  %7239 = add i32 %7238, -1
  %7240 = zext i32 %7239 to i64
  store i64 %7240, i64* %RCX.i4416, align 8
  %7241 = icmp eq i32 %7238, 0
  %7242 = zext i1 %7241 to i8
  store i8 %7242, i8* %31, align 1
  %7243 = and i32 %7239, 255
  %7244 = tail call i32 @llvm.ctpop.i32(i32 %7243)
  %7245 = trunc i32 %7244 to i8
  %7246 = and i8 %7245, 1
  %7247 = xor i8 %7246, 1
  store i8 %7247, i8* %38, align 1
  %7248 = xor i32 %7239, %7238
  %7249 = lshr i32 %7248, 4
  %7250 = trunc i32 %7249 to i8
  %7251 = and i8 %7250, 1
  store i8 %7251, i8* %44, align 1
  %7252 = icmp eq i32 %7239, 0
  %7253 = zext i1 %7252 to i8
  store i8 %7253, i8* %47, align 1
  %7254 = lshr i32 %7239, 31
  %7255 = trunc i32 %7254 to i8
  store i8 %7255, i8* %50, align 1
  %7256 = lshr i32 %7238, 31
  %7257 = xor i32 %7254, %7256
  %7258 = add nuw nsw i32 %7257, %7256
  %7259 = icmp eq i32 %7258, 2
  %7260 = zext i1 %7259 to i8
  store i8 %7260, i8* %56, align 1
  %7261 = sext i32 %7239 to i64
  store i64 %7261, i64* %RDX.i4419, align 8
  %7262 = add i64 %7236, %7261
  %7263 = add i64 %7232, 20
  store i64 %7263, i64* %3, align 8
  %7264 = inttoptr i64 %7262 to i8*
  %7265 = load i8, i8* %7264, align 1
  %7266 = sext i8 %7265 to i64
  %7267 = and i64 %7266, 4294967295
  store i64 %7267, i64* %RCX.i4416, align 8
  %7268 = sext i8 %7265 to i32
  store i8 0, i8* %31, align 1
  %7269 = and i32 %7268, 255
  %7270 = tail call i32 @llvm.ctpop.i32(i32 %7269)
  %7271 = trunc i32 %7270 to i8
  %7272 = and i8 %7271, 1
  %7273 = xor i8 %7272, 1
  store i8 %7273, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7274 = icmp eq i8 %7265, 0
  %7275 = zext i1 %7274 to i8
  store i8 %7275, i8* %47, align 1
  %7276 = lshr i32 %7268, 31
  %7277 = trunc i32 %7276 to i8
  store i8 %7277, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v586 = select i1 %7274, i64 29, i64 145
  %7278 = add i64 %7232, %.v586
  store i64 %7278, i64* %3, align 8
  br i1 %7274, label %block_.L_440c29, label %block_.L_440c9d

block_.L_440c29:                                  ; preds = %block_440c0c, %block_.L_440bef
  %7279 = phi i64 [ %7278, %block_440c0c ], [ %7232, %block_.L_440bef ]
  %7280 = add i64 %7279, 6
  store i64 %7280, i64* %3, align 8
  %7281 = load i32, i32* %7088, align 4
  %7282 = add i32 %7281, -20
  %7283 = zext i32 %7282 to i64
  store i64 %7283, i64* %RAX.i3798, align 8
  %7284 = icmp ult i32 %7281, 20
  %7285 = zext i1 %7284 to i8
  store i8 %7285, i8* %31, align 1
  %7286 = and i32 %7282, 255
  %7287 = tail call i32 @llvm.ctpop.i32(i32 %7286)
  %7288 = trunc i32 %7287 to i8
  %7289 = and i8 %7288, 1
  %7290 = xor i8 %7289, 1
  store i8 %7290, i8* %38, align 1
  %7291 = xor i32 %7281, 16
  %7292 = xor i32 %7291, %7282
  %7293 = lshr i32 %7292, 4
  %7294 = trunc i32 %7293 to i8
  %7295 = and i8 %7294, 1
  store i8 %7295, i8* %44, align 1
  %7296 = icmp eq i32 %7282, 0
  %7297 = zext i1 %7296 to i8
  store i8 %7297, i8* %47, align 1
  %7298 = lshr i32 %7282, 31
  %7299 = trunc i32 %7298 to i8
  store i8 %7299, i8* %50, align 1
  %7300 = lshr i32 %7281, 31
  %7301 = xor i32 %7298, %7300
  %7302 = add nuw nsw i32 %7301, %7300
  %7303 = icmp eq i32 %7302, 2
  %7304 = zext i1 %7303 to i8
  store i8 %7304, i8* %56, align 1
  %7305 = sext i32 %7282 to i64
  store i64 %7305, i64* %RCX.i4416, align 8
  %7306 = add nsw i64 %7305, 12099168
  %7307 = add i64 %7279, 20
  store i64 %7307, i64* %3, align 8
  %7308 = inttoptr i64 %7306 to i8*
  %7309 = load i8, i8* %7308, align 1
  %7310 = zext i8 %7309 to i64
  store i64 %7310, i64* %RAX.i3798, align 8
  %7311 = zext i8 %7309 to i32
  %7312 = add nsw i32 %7311, -3
  %7313 = icmp ult i8 %7309, 3
  %7314 = zext i1 %7313 to i8
  store i8 %7314, i8* %31, align 1
  %7315 = and i32 %7312, 255
  %7316 = tail call i32 @llvm.ctpop.i32(i32 %7315)
  %7317 = trunc i32 %7316 to i8
  %7318 = and i8 %7317, 1
  %7319 = xor i8 %7318, 1
  store i8 %7319, i8* %38, align 1
  %7320 = xor i32 %7312, %7311
  %7321 = lshr i32 %7320, 4
  %7322 = trunc i32 %7321 to i8
  %7323 = and i8 %7322, 1
  store i8 %7323, i8* %44, align 1
  %7324 = icmp eq i32 %7312, 0
  %7325 = zext i1 %7324 to i8
  store i8 %7325, i8* %47, align 1
  %7326 = lshr i32 %7312, 31
  %7327 = trunc i32 %7326 to i8
  store i8 %7327, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v587 = select i1 %7324, i64 58, i64 29
  %7328 = add i64 %7279, %.v587
  store i64 %7328, i64* %3, align 8
  br i1 %7324, label %block_.L_440c63, label %block_440c46

block_440c46:                                     ; preds = %block_.L_440c29
  %7329 = add i64 %7063, -40
  %7330 = add i64 %7328, 4
  store i64 %7330, i64* %3, align 8
  %7331 = inttoptr i64 %7329 to i64*
  %7332 = load i64, i64* %7331, align 8
  store i64 %7332, i64* %RAX.i3798, align 8
  %7333 = add i64 %7328, 10
  store i64 %7333, i64* %3, align 8
  %7334 = load i32, i32* %7088, align 4
  %7335 = add i32 %7334, -20
  %7336 = zext i32 %7335 to i64
  store i64 %7336, i64* %RCX.i4416, align 8
  %7337 = icmp ult i32 %7334, 20
  %7338 = zext i1 %7337 to i8
  store i8 %7338, i8* %31, align 1
  %7339 = and i32 %7335, 255
  %7340 = tail call i32 @llvm.ctpop.i32(i32 %7339)
  %7341 = trunc i32 %7340 to i8
  %7342 = and i8 %7341, 1
  %7343 = xor i8 %7342, 1
  store i8 %7343, i8* %38, align 1
  %7344 = xor i32 %7334, 16
  %7345 = xor i32 %7344, %7335
  %7346 = lshr i32 %7345, 4
  %7347 = trunc i32 %7346 to i8
  %7348 = and i8 %7347, 1
  store i8 %7348, i8* %44, align 1
  %7349 = icmp eq i32 %7335, 0
  %7350 = zext i1 %7349 to i8
  store i8 %7350, i8* %47, align 1
  %7351 = lshr i32 %7335, 31
  %7352 = trunc i32 %7351 to i8
  store i8 %7352, i8* %50, align 1
  %7353 = lshr i32 %7334, 31
  %7354 = xor i32 %7351, %7353
  %7355 = add nuw nsw i32 %7354, %7353
  %7356 = icmp eq i32 %7355, 2
  %7357 = zext i1 %7356 to i8
  store i8 %7357, i8* %56, align 1
  %7358 = sext i32 %7335 to i64
  store i64 %7358, i64* %RDX.i4419, align 8
  %7359 = add i64 %7332, %7358
  %7360 = add i64 %7328, 20
  store i64 %7360, i64* %3, align 8
  %7361 = inttoptr i64 %7359 to i8*
  %7362 = load i8, i8* %7361, align 1
  %7363 = sext i8 %7362 to i64
  %7364 = and i64 %7363, 4294967295
  store i64 %7364, i64* %RCX.i4416, align 8
  %7365 = sext i8 %7362 to i32
  store i8 0, i8* %31, align 1
  %7366 = and i32 %7365, 255
  %7367 = tail call i32 @llvm.ctpop.i32(i32 %7366)
  %7368 = trunc i32 %7367 to i8
  %7369 = and i8 %7368, 1
  %7370 = xor i8 %7369, 1
  store i8 %7370, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7371 = icmp eq i8 %7362, 0
  %7372 = zext i1 %7371 to i8
  store i8 %7372, i8* %47, align 1
  %7373 = lshr i32 %7365, 31
  %7374 = trunc i32 %7373 to i8
  store i8 %7374, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v588 = select i1 %7371, i64 29, i64 87
  %7375 = add i64 %7328, %.v588
  store i64 %7375, i64* %3, align 8
  br i1 %7371, label %block_.L_440c63, label %block_.L_440c9d

block_.L_440c63:                                  ; preds = %block_440c46, %block_.L_440c29
  %7376 = phi i64 [ %7375, %block_440c46 ], [ %7328, %block_.L_440c29 ]
  %7377 = add i64 %7376, 6
  store i64 %7377, i64* %3, align 8
  %7378 = load i32, i32* %7088, align 4
  %7379 = add i32 %7378, 1
  %7380 = zext i32 %7379 to i64
  store i64 %7380, i64* %RAX.i3798, align 8
  %7381 = icmp eq i32 %7378, -1
  %7382 = icmp eq i32 %7379, 0
  %7383 = or i1 %7381, %7382
  %7384 = zext i1 %7383 to i8
  store i8 %7384, i8* %31, align 1
  %7385 = and i32 %7379, 255
  %7386 = tail call i32 @llvm.ctpop.i32(i32 %7385)
  %7387 = trunc i32 %7386 to i8
  %7388 = and i8 %7387, 1
  %7389 = xor i8 %7388, 1
  store i8 %7389, i8* %38, align 1
  %7390 = xor i32 %7379, %7378
  %7391 = lshr i32 %7390, 4
  %7392 = trunc i32 %7391 to i8
  %7393 = and i8 %7392, 1
  store i8 %7393, i8* %44, align 1
  %7394 = zext i1 %7382 to i8
  store i8 %7394, i8* %47, align 1
  %7395 = lshr i32 %7379, 31
  %7396 = trunc i32 %7395 to i8
  store i8 %7396, i8* %50, align 1
  %7397 = lshr i32 %7378, 31
  %7398 = xor i32 %7395, %7397
  %7399 = add nuw nsw i32 %7398, %7395
  %7400 = icmp eq i32 %7399, 2
  %7401 = zext i1 %7400 to i8
  store i8 %7401, i8* %56, align 1
  %7402 = sext i32 %7379 to i64
  store i64 %7402, i64* %RCX.i4416, align 8
  %7403 = add nsw i64 %7402, 12099168
  %7404 = add i64 %7376, 20
  store i64 %7404, i64* %3, align 8
  %7405 = inttoptr i64 %7403 to i8*
  %7406 = load i8, i8* %7405, align 1
  %7407 = zext i8 %7406 to i64
  store i64 %7407, i64* %RAX.i3798, align 8
  %7408 = zext i8 %7406 to i32
  %7409 = add nsw i32 %7408, -3
  %7410 = icmp ult i8 %7406, 3
  %7411 = zext i1 %7410 to i8
  store i8 %7411, i8* %31, align 1
  %7412 = and i32 %7409, 255
  %7413 = tail call i32 @llvm.ctpop.i32(i32 %7412)
  %7414 = trunc i32 %7413 to i8
  %7415 = and i8 %7414, 1
  %7416 = xor i8 %7415, 1
  store i8 %7416, i8* %38, align 1
  %7417 = xor i32 %7409, %7408
  %7418 = lshr i32 %7417, 4
  %7419 = trunc i32 %7418 to i8
  %7420 = and i8 %7419, 1
  store i8 %7420, i8* %44, align 1
  %7421 = icmp eq i32 %7409, 0
  %7422 = zext i1 %7421 to i8
  store i8 %7422, i8* %47, align 1
  %7423 = lshr i32 %7409, 31
  %7424 = trunc i32 %7423 to i8
  store i8 %7424, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v589 = select i1 %7421, i64 376, i64 29
  %7425 = add i64 %7376, %.v589
  store i64 %7425, i64* %3, align 8
  br i1 %7421, label %block_.L_440ddb, label %block_440c80

block_440c80:                                     ; preds = %block_.L_440c63
  %7426 = add i64 %7063, -40
  %7427 = add i64 %7425, 4
  store i64 %7427, i64* %3, align 8
  %7428 = inttoptr i64 %7426 to i64*
  %7429 = load i64, i64* %7428, align 8
  store i64 %7429, i64* %RAX.i3798, align 8
  %7430 = add i64 %7425, 10
  store i64 %7430, i64* %3, align 8
  %7431 = load i32, i32* %7088, align 4
  %7432 = add i32 %7431, 1
  %7433 = zext i32 %7432 to i64
  store i64 %7433, i64* %RCX.i4416, align 8
  %7434 = icmp eq i32 %7431, -1
  %7435 = icmp eq i32 %7432, 0
  %7436 = or i1 %7434, %7435
  %7437 = zext i1 %7436 to i8
  store i8 %7437, i8* %31, align 1
  %7438 = and i32 %7432, 255
  %7439 = tail call i32 @llvm.ctpop.i32(i32 %7438)
  %7440 = trunc i32 %7439 to i8
  %7441 = and i8 %7440, 1
  %7442 = xor i8 %7441, 1
  store i8 %7442, i8* %38, align 1
  %7443 = xor i32 %7432, %7431
  %7444 = lshr i32 %7443, 4
  %7445 = trunc i32 %7444 to i8
  %7446 = and i8 %7445, 1
  store i8 %7446, i8* %44, align 1
  %7447 = zext i1 %7435 to i8
  store i8 %7447, i8* %47, align 1
  %7448 = lshr i32 %7432, 31
  %7449 = trunc i32 %7448 to i8
  store i8 %7449, i8* %50, align 1
  %7450 = lshr i32 %7431, 31
  %7451 = xor i32 %7448, %7450
  %7452 = add nuw nsw i32 %7451, %7448
  %7453 = icmp eq i32 %7452, 2
  %7454 = zext i1 %7453 to i8
  store i8 %7454, i8* %56, align 1
  %7455 = sext i32 %7432 to i64
  store i64 %7455, i64* %RDX.i4419, align 8
  %7456 = add i64 %7429, %7455
  %7457 = add i64 %7425, 20
  store i64 %7457, i64* %3, align 8
  %7458 = inttoptr i64 %7456 to i8*
  %7459 = load i8, i8* %7458, align 1
  %7460 = sext i8 %7459 to i64
  %7461 = and i64 %7460, 4294967295
  store i64 %7461, i64* %RCX.i4416, align 8
  %7462 = sext i8 %7459 to i32
  store i8 0, i8* %31, align 1
  %7463 = and i32 %7462, 255
  %7464 = tail call i32 @llvm.ctpop.i32(i32 %7463)
  %7465 = trunc i32 %7464 to i8
  %7466 = and i8 %7465, 1
  %7467 = xor i8 %7466, 1
  store i8 %7467, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7468 = icmp eq i8 %7459, 0
  %7469 = zext i1 %7468 to i8
  store i8 %7469, i8* %47, align 1
  %7470 = lshr i32 %7462, 31
  %7471 = trunc i32 %7470 to i8
  store i8 %7471, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v590 = select i1 %7468, i64 347, i64 29
  %7472 = add i64 %7425, %.v590
  store i64 %7472, i64* %3, align 8
  br i1 %7468, label %block_.L_440ddb, label %block_.L_440c9d

block_.L_440c9d:                                  ; preds = %block_440c46, %block_440c0c, %block_440bd2, %block_440c80
  %7473 = phi i64 [ %7472, %block_440c80 ], [ %7375, %block_440c46 ], [ %7278, %block_440c0c ], [ %7183, %block_440bd2 ]
  %7474 = add i64 %7473, 6
  store i64 %7474, i64* %3, align 8
  %7475 = load i32, i32* %7067, align 4
  %7476 = zext i32 %7475 to i64
  store i64 %7476, i64* %RDI.i3802.pre-phi, align 8
  %7477 = add i64 %7473, -202013
  %7478 = add i64 %7473, 11
  %7479 = load i64, i64* %6, align 8
  %7480 = add i64 %7479, -8
  %7481 = inttoptr i64 %7480 to i64*
  store i64 %7478, i64* %7481, align 8
  store i64 %7480, i64* %6, align 8
  store i64 %7477, i64* %3, align 8
  %call2_440ca3 = tail call %struct.Memory* @sub_40f780.countlib(%struct.State* nonnull %0, i64 %7477, %struct.Memory* %6850)
  %7482 = load i32, i32* %EAX.i4398, align 4
  %7483 = load i64, i64* %3, align 8
  %7484 = add i32 %7482, -3
  %7485 = icmp ult i32 %7482, 3
  %7486 = zext i1 %7485 to i8
  store i8 %7486, i8* %31, align 1
  %7487 = and i32 %7484, 255
  %7488 = tail call i32 @llvm.ctpop.i32(i32 %7487)
  %7489 = trunc i32 %7488 to i8
  %7490 = and i8 %7489, 1
  %7491 = xor i8 %7490, 1
  store i8 %7491, i8* %38, align 1
  %7492 = xor i32 %7484, %7482
  %7493 = lshr i32 %7492, 4
  %7494 = trunc i32 %7493 to i8
  %7495 = and i8 %7494, 1
  store i8 %7495, i8* %44, align 1
  %7496 = icmp eq i32 %7484, 0
  %7497 = zext i1 %7496 to i8
  store i8 %7497, i8* %47, align 1
  %7498 = lshr i32 %7484, 31
  %7499 = trunc i32 %7498 to i8
  store i8 %7499, i8* %50, align 1
  %7500 = lshr i32 %7482, 31
  %7501 = xor i32 %7498, %7500
  %7502 = add nuw nsw i32 %7501, %7500
  %7503 = icmp eq i32 %7502, 2
  %7504 = zext i1 %7503 to i8
  store i8 %7504, i8* %56, align 1
  %7505 = icmp ne i8 %7499, 0
  %7506 = xor i1 %7505, %7503
  %.v580 = select i1 %7506, i64 9, i64 284
  %7507 = add i64 %7483, %.v580
  store i64 %7507, i64* %3, align 8
  br i1 %7506, label %block_440cb1, label %block_.L_440dc4

block_440cb1:                                     ; preds = %block_.L_440c9d
  %7508 = load i64, i64* %RBP.i, align 8
  %7509 = add i64 %7508, -3384
  store i64 %7509, i64* %RSI.i3811.pre-phi, align 8
  %7510 = add i64 %7508, -3380
  %7511 = add i64 %7507, 13
  store i64 %7511, i64* %3, align 8
  %7512 = inttoptr i64 %7510 to i32*
  %7513 = load i32, i32* %7512, align 4
  %7514 = zext i32 %7513 to i64
  store i64 %7514, i64* %RDI.i3802.pre-phi, align 8
  %7515 = add i64 %7507, 118415
  %7516 = add i64 %7507, 18
  %7517 = load i64, i64* %6, align 8
  %7518 = add i64 %7517, -8
  %7519 = inttoptr i64 %7518 to i64*
  store i64 %7516, i64* %7519, align 8
  store i64 %7518, i64* %6, align 8
  store i64 %7515, i64* %3, align 8
  %call2_440cbe = tail call %struct.Memory* @sub_45db40.attack(%struct.State* nonnull %0, i64 %7515, %struct.Memory* %6850)
  %7520 = load i32, i32* %EAX.i4398, align 4
  %7521 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %7522 = and i32 %7520, 255
  %7523 = tail call i32 @llvm.ctpop.i32(i32 %7522)
  %7524 = trunc i32 %7523 to i8
  %7525 = and i8 %7524, 1
  %7526 = xor i8 %7525, 1
  store i8 %7526, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7527 = icmp eq i32 %7520, 0
  %7528 = zext i1 %7527 to i8
  store i8 %7528, i8* %47, align 1
  %7529 = lshr i32 %7520, 31
  %7530 = trunc i32 %7529 to i8
  store i8 %7530, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v581 = select i1 %7527, i64 257, i64 9
  %7531 = add i64 %7521, %.v581
  store i64 %7531, i64* %3, align 8
  br i1 %7527, label %block_.L_440dc4, label %block_440ccc

block_440ccc:                                     ; preds = %block_440cb1
  %7532 = load i64, i64* %RBP.i, align 8
  %7533 = add i64 %7532, -64
  %7534 = add i64 %7531, 4
  store i64 %7534, i64* %3, align 8
  %7535 = inttoptr i64 %7533 to i64*
  %7536 = load i64, i64* %7535, align 8
  store i64 %7536, i64* %RAX.i3798, align 8
  %7537 = add i64 %7531, 10
  store i64 %7537, i64* %3, align 8
  %7538 = inttoptr i64 %7536 to i32*
  store i32 1, i32* %7538, align 4
  %7539 = load i64, i64* %RBP.i, align 8
  %7540 = add i64 %7539, -72
  %7541 = load i64, i64* %3, align 8
  %7542 = add i64 %7541, 4
  store i64 %7542, i64* %3, align 8
  %7543 = inttoptr i64 %7540 to i64*
  %7544 = load i64, i64* %7543, align 8
  store i64 %7544, i64* %RAX.i3798, align 8
  %7545 = add i64 %7541, 10
  store i64 %7545, i64* %3, align 8
  %7546 = inttoptr i64 %7544 to i32*
  store i32 0, i32* %7546, align 4
  %7547 = load i64, i64* %RBP.i, align 8
  %7548 = add i64 %7547, -3384
  %7549 = load i64, i64* %3, align 8
  %7550 = add i64 %7549, 6
  store i64 %7550, i64* %3, align 8
  %7551 = inttoptr i64 %7548 to i32*
  %7552 = load i32, i32* %7551, align 4
  %7553 = zext i32 %7552 to i64
  store i64 %7553, i64* %RCX.i4416, align 8
  %7554 = add i64 %7547, -80
  %7555 = add i64 %7549, 10
  store i64 %7555, i64* %3, align 8
  %7556 = inttoptr i64 %7554 to i64*
  %7557 = load i64, i64* %7556, align 8
  store i64 %7557, i64* %RAX.i3798, align 8
  %7558 = add i64 %7549, 12
  store i64 %7558, i64* %3, align 8
  %7559 = inttoptr i64 %7557 to i32*
  store i32 %7552, i32* %7559, align 4
  %7560 = load i64, i64* %RBP.i, align 8
  %7561 = add i64 %7560, -1688
  %7562 = load i64, i64* %3, align 8
  %7563 = add i64 %7562, 7
  store i64 %7563, i64* %3, align 8
  %7564 = inttoptr i64 %7561 to i64*
  %7565 = load i64, i64* %7564, align 8
  store i64 %7565, i64* %RAX.i3798, align 8
  store i64 %7565, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %7566 = add i64 %7560, -1692
  %7567 = add i64 %7562, 21
  store i64 %7567, i64* %3, align 8
  %7568 = inttoptr i64 %7566 to i32*
  %7569 = load i32, i32* %7568, align 4
  %7570 = zext i32 %7569 to i64
  store i64 %7570, i64* %RCX.i4416, align 8
  store i32 %7569, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  store i8 0, i8* %31, align 1
  %7571 = trunc i64 %7565 to i32
  %7572 = and i32 %7571, 255
  %7573 = tail call i32 @llvm.ctpop.i32(i32 %7572)
  %7574 = trunc i32 %7573 to i8
  %7575 = and i8 %7574, 1
  %7576 = xor i8 %7575, 1
  store i8 %7576, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7577 = icmp eq i64 %7565, 0
  %7578 = zext i1 %7577 to i8
  store i8 %7578, i8* %47, align 1
  %7579 = lshr i64 %7565, 63
  %7580 = trunc i64 %7579 to i8
  store i8 %7580, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v582 = select i1 %7577, i64 89, i64 43
  %7581 = add i64 %7562, %.v582
  store i64 %7581, i64* %3, align 8
  br i1 %7577, label %block_.L_440d45, label %block_440d17

block_440d17:                                     ; preds = %block_440ccc
  %7582 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  store i64 1, i64* %7582, align 8
  store i64 ptrtoint (%G__0x57df94_type* @G__0x57df94 to i64), i64* %R9.i4411, align 8
  %7583 = add i64 %7560, -1744
  %7584 = add i64 %7581, 23
  store i64 %7584, i64* %3, align 8
  %7585 = inttoptr i64 %7583 to i64*
  %7586 = load i64, i64* %7585, align 8
  store i64 %7586, i64* %RDI.i3802.pre-phi, align 8
  %7587 = add i64 %7560, -1748
  %7588 = add i64 %7581, 29
  store i64 %7588, i64* %3, align 8
  %7589 = inttoptr i64 %7587 to i32*
  %7590 = load i32, i32* %7589, align 4
  %7591 = zext i32 %7590 to i64
  store i64 %7591, i64* %RSI.i3811.pre-phi, align 8
  %7592 = add i64 %7560, -1752
  %7593 = add i64 %7581, 35
  store i64 %7593, i64* %3, align 8
  %7594 = inttoptr i64 %7592 to i32*
  %7595 = load i32, i32* %7594, align 4
  %7596 = zext i32 %7595 to i64
  store i64 %7596, i64* %RDX.i4419, align 8
  %7597 = add i64 %7560, -3384
  %7598 = add i64 %7581, 41
  store i64 %7598, i64* %3, align 8
  %7599 = inttoptr i64 %7597 to i32*
  %7600 = load i32, i32* %7599, align 4
  %7601 = zext i32 %7600 to i64
  store i64 %7601, i64* %RCX.i4416, align 8
  %7602 = add i64 %7581, -166391
  %7603 = add i64 %7581, 46
  %7604 = load i64, i64* %6, align 8
  %7605 = add i64 %7604, -8
  %7606 = inttoptr i64 %7605 to i64*
  store i64 %7603, i64* %7606, align 8
  store i64 %7605, i64* %6, align 8
  store i64 %7602, i64* %3, align 8
  %call2_440d40 = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %7602, %struct.Memory* %6850)
  %.pre457 = load i64, i64* %RBP.i, align 8
  %.pre458 = load i64, i64* %3, align 8
  br label %block_.L_440d45

block_.L_440d45:                                  ; preds = %block_440d17, %block_440ccc
  %7607 = phi i64 [ %7581, %block_440ccc ], [ %.pre458, %block_440d17 ]
  %7608 = phi i64 [ %7560, %block_440ccc ], [ %.pre457, %block_440d17 ]
  %MEMORY.109 = phi %struct.Memory* [ %6850, %block_440ccc ], [ %call2_440d40, %block_440d17 ]
  %7609 = add i64 %7608, -544
  store i64 %7609, i64* %RSI.i3811.pre-phi, align 8
  %7610 = add i64 %7608, -92
  %7611 = add i64 %7607, 10
  store i64 %7611, i64* %3, align 8
  %7612 = inttoptr i64 %7610 to i32*
  %7613 = load i32, i32* %7612, align 4
  %7614 = zext i32 %7613 to i64
  store i64 %7614, i64* %RDI.i3802.pre-phi, align 8
  %7615 = add i64 %7607, 14491
  %7616 = add i64 %7607, 15
  %7617 = load i64, i64* %6, align 8
  %7618 = add i64 %7617, -8
  %7619 = inttoptr i64 %7618 to i64*
  store i64 %7616, i64* %7619, align 8
  store i64 %7618, i64* %6, align 8
  store i64 %7615, i64* %3, align 8
  %call2_440d4f = tail call %struct.Memory* @sub_4445e0.close_pattern_list(%struct.State* nonnull %0, i64 %7615, %struct.Memory* %MEMORY.109)
  %7620 = load i64, i64* %RBP.i, align 8
  %7621 = add i64 %7620, -512
  %7622 = load i64, i64* %3, align 8
  store i64 %7621, i64* %RSI.i3811.pre-phi, align 8
  %7623 = add i64 %7620, -92
  %7624 = add i64 %7622, 10
  store i64 %7624, i64* %3, align 8
  %7625 = inttoptr i64 %7623 to i32*
  %7626 = load i32, i32* %7625, align 4
  %7627 = zext i32 %7626 to i64
  store i64 %7627, i64* %RDI.i3802.pre-phi, align 8
  %7628 = add i64 %7622, 14476
  %7629 = add i64 %7622, 15
  %7630 = load i64, i64* %6, align 8
  %7631 = add i64 %7630, -8
  %7632 = inttoptr i64 %7631 to i64*
  store i64 %7629, i64* %7632, align 8
  store i64 %7631, i64* %6, align 8
  store i64 %7628, i64* %3, align 8
  %call2_440d5e = tail call %struct.Memory* @sub_4445e0.close_pattern_list(%struct.State* nonnull %0, i64 %7628, %struct.Memory* %call2_440d4f)
  %7633 = load i64, i64* %RBP.i, align 8
  %7634 = add i64 %7633, -80
  %7635 = load i64, i64* %3, align 8
  %7636 = add i64 %7635, 5
  store i64 %7636, i64* %3, align 8
  %7637 = inttoptr i64 %7634 to i64*
  %7638 = load i64, i64* %7637, align 8
  store i8 0, i8* %31, align 1
  %7639 = trunc i64 %7638 to i32
  %7640 = and i32 %7639, 255
  %7641 = tail call i32 @llvm.ctpop.i32(i32 %7640)
  %7642 = trunc i32 %7641 to i8
  %7643 = and i8 %7642, 1
  %7644 = xor i8 %7643, 1
  store i8 %7644, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7645 = icmp eq i64 %7638, 0
  %7646 = zext i1 %7645 to i8
  store i8 %7646, i8* %47, align 1
  %7647 = lshr i64 %7638, 63
  %7648 = trunc i64 %7647 to i8
  store i8 %7648, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v583 = select i1 %7645, i64 23, i64 11
  %7649 = add i64 %7635, %.v583
  store i64 %7649, i64* %3, align 8
  br i1 %7645, label %block_.L_440d7a, label %block_440d6e

block_440d6e:                                     ; preds = %block_.L_440d45
  %7650 = add i64 %7633, -3384
  %7651 = add i64 %7649, 6
  store i64 %7651, i64* %3, align 8
  %7652 = inttoptr i64 %7650 to i32*
  %7653 = load i32, i32* %7652, align 4
  %7654 = zext i32 %7653 to i64
  store i64 %7654, i64* %RAX.i3798, align 8
  %7655 = add i64 %7649, 10
  store i64 %7655, i64* %3, align 8
  %7656 = load i64, i64* %7637, align 8
  store i64 %7656, i64* %RCX.i4416, align 8
  %7657 = add i64 %7649, 12
  store i64 %7657, i64* %3, align 8
  %7658 = inttoptr i64 %7656 to i32*
  store i32 %7653, i32* %7658, align 4
  %.pre459 = load i64, i64* %RBP.i, align 8
  %.pre460 = load i64, i64* %3, align 8
  br label %block_.L_440d7a

block_.L_440d7a:                                  ; preds = %block_440d6e, %block_.L_440d45
  %7659 = phi i64 [ %.pre460, %block_440d6e ], [ %7649, %block_.L_440d45 ]
  %7660 = phi i64 [ %.pre459, %block_440d6e ], [ %7633, %block_.L_440d45 ]
  %7661 = add i64 %7660, -1728
  %7662 = add i64 %7659, 8
  store i64 %7662, i64* %3, align 8
  %7663 = inttoptr i64 %7661 to i64*
  %7664 = load i64, i64* %7663, align 8
  store i8 0, i8* %31, align 1
  %7665 = trunc i64 %7664 to i32
  %7666 = and i32 %7665, 255
  %7667 = tail call i32 @llvm.ctpop.i32(i32 %7666)
  %7668 = trunc i32 %7667 to i8
  %7669 = and i8 %7668, 1
  %7670 = xor i8 %7669, 1
  store i8 %7670, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7671 = icmp eq i64 %7664, 0
  %7672 = zext i1 %7671 to i8
  store i8 %7672, i8* %47, align 1
  %7673 = lshr i64 %7664, 63
  %7674 = trunc i64 %7673 to i8
  store i8 %7674, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v584 = select i1 %7671, i64 69, i64 14
  %7675 = add i64 %7659, %.v584
  store i64 %7675, i64* %3, align 8
  br i1 %7671, label %block_.L_441708, label %block_440d88

block_440d88:                                     ; preds = %block_.L_440d7a
  %7676 = add i64 %7675, 7
  store i64 %7676, i64* %3, align 8
  %7677 = load i64, i64* %7663, align 8
  store i64 %7677, i64* %RAX.i3798, align 8
  %7678 = add i64 %7677, 4
  %7679 = add i64 %7675, 10
  store i64 %7679, i64* %3, align 8
  %7680 = inttoptr i64 %7678 to i32*
  %7681 = load i32, i32* %7680, align 4
  %7682 = and i32 %7681, 1023
  %7683 = or i32 %7682, 553648128
  %7684 = zext i32 %7683 to i64
  store i64 %7684, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %7685 = and i32 %7681, 255
  %7686 = tail call i32 @llvm.ctpop.i32(i32 %7685)
  %7687 = trunc i32 %7686 to i8
  %7688 = and i8 %7687, 1
  %7689 = xor i8 %7688, 1
  store i8 %7689, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %7690 = add i64 %7660, -3384
  %7691 = add i64 %7675, 34
  store i64 %7691, i64* %3, align 8
  %7692 = inttoptr i64 %7690 to i32*
  %7693 = load i32, i32* %7692, align 4
  %7694 = shl i32 %7693, 10
  %7695 = and i32 %7694, 1047552
  %7696 = zext i32 %7695 to i64
  store i64 %7696, i64* %RDX.i4419, align 8
  %7697 = or i32 %7695, %7683
  %7698 = zext i32 %7697 to i64
  store i64 %7698, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %7699 = and i32 %7681, 255
  %7700 = tail call i32 @llvm.ctpop.i32(i32 %7699)
  %7701 = trunc i32 %7700 to i8
  %7702 = and i8 %7701, 1
  %7703 = xor i8 %7702, 1
  store i8 %7703, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %7704 = load i64, i64* %RBP.i, align 8
  %7705 = add i64 %7704, -1728
  %7706 = add i64 %7675, 52
  store i64 %7706, i64* %3, align 8
  %7707 = inttoptr i64 %7705 to i64*
  %7708 = load i64, i64* %7707, align 8
  store i64 %7708, i64* %RAX.i3798, align 8
  %7709 = add i64 %7708, 4
  %7710 = add i64 %7675, 55
  store i64 %7710, i64* %3, align 8
  %7711 = inttoptr i64 %7709 to i32*
  store i32 %7697, i32* %7711, align 4
  br label %block_.L_441708

block_.L_440dc4:                                  ; preds = %block_.L_440c9d, %block_440cb1
  %7712 = phi i64 [ %7507, %block_.L_440c9d ], [ %7531, %block_440cb1 ]
  %7713 = load i64, i64* %RBP.i, align 8
  %7714 = add i64 %7713, -3380
  %7715 = add i64 %7712, 7
  store i64 %7715, i64* %3, align 8
  %7716 = inttoptr i64 %7714 to i32*
  %7717 = load i32, i32* %7716, align 4
  %7718 = sext i32 %7717 to i64
  store i64 %7718, i64* %RAX.i3798, align 8
  %7719 = shl nsw i64 %7718, 2
  %7720 = add i64 %7713, -3376
  %7721 = add i64 %7720, %7719
  %7722 = add i64 %7712, 18
  store i64 %7722, i64* %3, align 8
  %7723 = inttoptr i64 %7721 to i32*
  store i32 1, i32* %7723, align 4
  %7724 = load i64, i64* %3, align 8
  %7725 = add i64 %7724, 5
  store i64 %7725, i64* %3, align 8
  %.pre461.pre = load i64, i64* %RBP.i, align 8
  br label %block_.L_440ddb

block_.L_440ddb:                                  ; preds = %block_440b8f, %block_.L_440dc4, %block_440c80, %block_.L_440c63
  %.pre461 = phi i64 [ %.pre461.pre, %block_.L_440dc4 ], [ %7063, %block_440c80 ], [ %7063, %block_.L_440c63 ], [ %7063, %block_440b8f ]
  %7726 = phi i64 [ %7725, %block_.L_440dc4 ], [ %7472, %block_440c80 ], [ %7425, %block_.L_440c63 ], [ %7085, %block_440b8f ]
  %7727 = add i64 %7726, 5
  store i64 %7727, i64* %3, align 8
  br label %block_.L_440de0

block_.L_440de0:                                  ; preds = %block_440b77, %block_.L_440ddb, %block_440b49
  %7728 = phi i64 [ %.pre461, %block_.L_440ddb ], [ %6986, %block_440b77 ], [ %6986, %block_440b49 ]
  %7729 = phi i64 [ %7727, %block_.L_440ddb ], [ %7048, %block_440b77 ], [ %7013, %block_440b49 ]
  %7730 = add i64 %7728, -1676
  %7731 = add i64 %7729, 11
  store i64 %7731, i64* %3, align 8
  %7732 = inttoptr i64 %7730 to i32*
  %7733 = load i32, i32* %7732, align 4
  %7734 = add i32 %7733, 1
  %7735 = zext i32 %7734 to i64
  store i64 %7735, i64* %RAX.i3798, align 8
  %7736 = icmp eq i32 %7733, -1
  %7737 = icmp eq i32 %7734, 0
  %7738 = or i1 %7736, %7737
  %7739 = zext i1 %7738 to i8
  store i8 %7739, i8* %31, align 1
  %7740 = and i32 %7734, 255
  %7741 = tail call i32 @llvm.ctpop.i32(i32 %7740)
  %7742 = trunc i32 %7741 to i8
  %7743 = and i8 %7742, 1
  %7744 = xor i8 %7743, 1
  store i8 %7744, i8* %38, align 1
  %7745 = xor i32 %7734, %7733
  %7746 = lshr i32 %7745, 4
  %7747 = trunc i32 %7746 to i8
  %7748 = and i8 %7747, 1
  store i8 %7748, i8* %44, align 1
  %7749 = zext i1 %7737 to i8
  store i8 %7749, i8* %47, align 1
  %7750 = lshr i32 %7734, 31
  %7751 = trunc i32 %7750 to i8
  store i8 %7751, i8* %50, align 1
  %7752 = lshr i32 %7733, 31
  %7753 = xor i32 %7750, %7752
  %7754 = add nuw nsw i32 %7753, %7750
  %7755 = icmp eq i32 %7754, 2
  %7756 = zext i1 %7755 to i8
  store i8 %7756, i8* %56, align 1
  %7757 = add i64 %7729, 20
  store i64 %7757, i64* %3, align 8
  store i32 %7734, i32* %7732, align 4
  %7758 = load i64, i64* %3, align 8
  %7759 = add i64 %7758, -702
  store i64 %7759, i64* %3, align 8
  br label %block_.L_440b36

block_.L_440df9:                                  ; preds = %block_.L_440b36
  %7760 = add i64 %6928, 11
  store i64 %7760, i64* %3, align 8
  %7761 = inttoptr i64 %6929 to i32*
  %7762 = load i32, i32* %7761, align 4
  %7763 = add i32 %7762, 1
  %7764 = zext i32 %7763 to i64
  store i64 %7764, i64* %RAX.i3798, align 8
  %7765 = icmp eq i32 %7762, -1
  %7766 = icmp eq i32 %7763, 0
  %7767 = or i1 %7765, %7766
  %7768 = zext i1 %7767 to i8
  store i8 %7768, i8* %31, align 1
  %7769 = and i32 %7763, 255
  %7770 = tail call i32 @llvm.ctpop.i32(i32 %7769)
  %7771 = trunc i32 %7770 to i8
  %7772 = and i8 %7771, 1
  %7773 = xor i8 %7772, 1
  store i8 %7773, i8* %38, align 1
  %7774 = xor i32 %7763, %7762
  %7775 = lshr i32 %7774, 4
  %7776 = trunc i32 %7775 to i8
  %7777 = and i8 %7776, 1
  store i8 %7777, i8* %44, align 1
  %7778 = zext i1 %7766 to i8
  store i8 %7778, i8* %47, align 1
  %7779 = lshr i32 %7763, 31
  %7780 = trunc i32 %7779 to i8
  store i8 %7780, i8* %50, align 1
  %7781 = lshr i32 %7762, 31
  %7782 = xor i32 %7779, %7781
  %7783 = add nuw nsw i32 %7782, %7779
  %7784 = icmp eq i32 %7783, 2
  %7785 = zext i1 %7784 to i8
  store i8 %7785, i8* %56, align 1
  %7786 = add i64 %6928, 20
  store i64 %7786, i64* %3, align 8
  store i32 %7763, i32* %7761, align 4
  %7787 = load i64, i64* %3, align 8
  %7788 = add i64 %7787, -756
  store i64 %7788, i64* %3, align 8
  br label %block_.L_440b19

block_.L_440e12:                                  ; preds = %block_.L_440b19
  %7789 = add i64 %6857, -1236
  %7790 = add i64 %6890, 7
  store i64 %7790, i64* %3, align 8
  %7791 = inttoptr i64 %7789 to i32*
  %7792 = load i32, i32* %7791, align 4
  store i8 0, i8* %31, align 1
  %7793 = and i32 %7792, 255
  %7794 = tail call i32 @llvm.ctpop.i32(i32 %7793)
  %7795 = trunc i32 %7794 to i8
  %7796 = and i8 %7795, 1
  %7797 = xor i8 %7796, 1
  store i8 %7797, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7798 = icmp eq i32 %7792, 0
  %7799 = zext i1 %7798 to i8
  store i8 %7799, i8* %47, align 1
  %7800 = lshr i32 %7792, 31
  %7801 = trunc i32 %7800 to i8
  store i8 %7801, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v526 = select i1 %7798, i64 129, i64 13
  %7802 = add i64 %6890, %.v526
  store i64 %7802, i64* %3, align 8
  br i1 %7798, label %block_.L_440e93, label %block_440e1f

block_440e1f:                                     ; preds = %block_.L_440e12
  %7803 = add i64 %6857, -768
  %7804 = add i64 %7802, 7
  store i64 %7804, i64* %3, align 8
  %7805 = inttoptr i64 %7803 to i32*
  %7806 = load i32, i32* %7805, align 4
  store i8 0, i8* %31, align 1
  %7807 = and i32 %7806, 255
  %7808 = tail call i32 @llvm.ctpop.i32(i32 %7807)
  %7809 = trunc i32 %7808 to i8
  %7810 = and i8 %7809, 1
  %7811 = xor i8 %7810, 1
  store i8 %7811, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7812 = icmp eq i32 %7806, 0
  %7813 = zext i1 %7812 to i8
  store i8 %7813, i8* %47, align 1
  %7814 = lshr i32 %7806, 31
  %7815 = trunc i32 %7814 to i8
  store i8 %7815, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v527 = select i1 %7812, i64 116, i64 13
  %7816 = add i64 %7802, %.v527
  store i64 %7816, i64* %3, align 8
  br i1 %7812, label %block_.L_440e93, label %block_440e2c

block_440e2c:                                     ; preds = %block_440e1f
  store i64 50, i64* %RCX.i4416, align 8
  %7817 = add i64 %7816, 11
  store i64 %7817, i64* %3, align 8
  %7818 = load i32, i32* %7805, align 4
  %7819 = zext i32 %7818 to i64
  store i64 %7819, i64* %RDI.i3802.pre-phi, align 8
  %7820 = add i64 %6857, -40
  %7821 = add i64 %7816, 15
  store i64 %7821, i64* %3, align 8
  %7822 = inttoptr i64 %7820 to i64*
  %7823 = load i64, i64* %7822, align 8
  store i64 %7823, i64* %RSI.i3811.pre-phi, align 8
  %7824 = add i64 %6857, -48
  %7825 = add i64 %7816, 19
  store i64 %7825, i64* %3, align 8
  %7826 = inttoptr i64 %7824 to i64*
  %7827 = load i64, i64* %7826, align 8
  store i64 %7827, i64* %RDX.i4419, align 8
  %7828 = add i64 %7816, 12644
  %7829 = add i64 %7816, 24
  %7830 = load i64, i64* %6, align 8
  %7831 = add i64 %7830, -8
  %7832 = inttoptr i64 %7831 to i64*
  store i64 %7829, i64* %7832, align 8
  store i64 %7831, i64* %6, align 8
  store i64 %7828, i64* %3, align 8
  %call2_440e3f = tail call %struct.Memory* @sub_443f90.semeai_move_value(%struct.State* nonnull %0, i64 %7828, %struct.Memory* %6850)
  %7833 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x57dfa7_type* @G__0x57dfa7 to i64), i64* %RCX.i4416, align 8
  store i64 0, i64* %RDI.i3802.pre-phi, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %7834 = load i64, i64* %RBP.i, align 8
  %7835 = add i64 %7834, -736
  store i64 %7835, i64* %RDX.i4419, align 8
  %7836 = add i64 %7834, -1696
  %7837 = load i32, i32* %EAX.i4398, align 4
  %7838 = add i64 %7833, 25
  store i64 %7838, i64* %3, align 8
  %7839 = inttoptr i64 %7836 to i32*
  store i32 %7837, i32* %7839, align 4
  %7840 = load i64, i64* %RBP.i, align 8
  %7841 = add i64 %7840, -768
  %7842 = load i64, i64* %3, align 8
  %7843 = add i64 %7842, 6
  store i64 %7843, i64* %3, align 8
  %7844 = inttoptr i64 %7841 to i32*
  %7845 = load i32, i32* %7844, align 4
  %7846 = zext i32 %7845 to i64
  store i64 %7846, i64* %RSI.i3811.pre-phi, align 8
  %7847 = add i64 %7840, -1696
  %7848 = add i64 %7842, 12
  store i64 %7848, i64* %3, align 8
  %7849 = inttoptr i64 %7847 to i32*
  %7850 = load i32, i32* %7849, align 4
  %7851 = zext i32 %7850 to i64
  store i64 %7851, i64* %RAX.i3798, align 8
  %7852 = add i64 %7840, -3520
  %7853 = load i32, i32* %EDI.i4425, align 4
  %7854 = add i64 %7842, 18
  store i64 %7854, i64* %3, align 8
  %7855 = inttoptr i64 %7852 to i32*
  store i32 %7853, i32* %7855, align 4
  %7856 = load i64, i64* %RDX.i4419, align 8
  %7857 = load i64, i64* %3, align 8
  store i64 %7856, i64* %RDI.i3802.pre-phi, align 8
  %7858 = load i32, i32* %EAX.i4398, align 4
  %7859 = zext i32 %7858 to i64
  store i64 %7859, i64* %RDX.i4419, align 8
  %7860 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  %7861 = load i64, i64* %RBP.i, align 8
  %7862 = add i64 %7861, -3520
  %7863 = add i64 %7857, 12
  store i64 %7863, i64* %3, align 8
  %7864 = inttoptr i64 %7862 to i32*
  %7865 = load i32, i32* %7864, align 4
  %7866 = zext i32 %7865 to i64
  store i64 %7866, i64* %7860, align 8
  %7867 = add i64 %7857, 19
  store i64 %7867, i64* %3, align 8
  %7868 = load i32, i32* %7864, align 4
  %7869 = zext i32 %7868 to i64
  store i64 %7869, i64* %R9.i4411, align 8
  %7870 = bitcast i64* %6 to i32**
  %7871 = load i32*, i32** %7870, align 8
  %7872 = add i64 %7857, 26
  store i64 %7872, i64* %3, align 8
  store i32 0, i32* %7871, align 4
  %7873 = load i64, i64* %3, align 8
  %7874 = add i64 %7873, 13223
  %7875 = add i64 %7873, 5
  %7876 = load i64, i64* %6, align 8
  %7877 = add i64 %7876, -8
  %7878 = inttoptr i64 %7877 to i64*
  store i64 %7875, i64* %7878, align 8
  store i64 %7877, i64* %6, align 8
  store i64 %7874, i64* %3, align 8
  %call2_440e89 = tail call %struct.Memory* @sub_444230.owl_add_move(%struct.State* nonnull %0, i64 %7874, %struct.Memory* %call2_440e3f)
  %7879 = load i64, i64* %3, align 8
  %7880 = add i64 %7879, 250
  br label %block_.L_440f88

block_.L_440e93:                                  ; preds = %block_440e1f, %block_.L_440e12
  %7881 = phi i64 [ %7816, %block_440e1f ], [ %7802, %block_.L_440e12 ]
  %7882 = add i64 %6857, -1252
  %7883 = add i64 %7881, 7
  store i64 %7883, i64* %3, align 8
  %7884 = inttoptr i64 %7882 to i32*
  %7885 = load i32, i32* %7884, align 4
  store i8 0, i8* %31, align 1
  %7886 = and i32 %7885, 255
  %7887 = tail call i32 @llvm.ctpop.i32(i32 %7886)
  %7888 = trunc i32 %7887 to i8
  %7889 = and i8 %7888, 1
  %7890 = xor i8 %7889, 1
  store i8 %7890, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7891 = icmp eq i32 %7885, 0
  %7892 = zext i1 %7891 to i8
  store i8 %7892, i8* %47, align 1
  %7893 = lshr i32 %7885, 31
  %7894 = trunc i32 %7893 to i8
  store i8 %7894, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v571 = select i1 %7891, i64 129, i64 13
  %7895 = add i64 %7881, %.v571
  store i64 %7895, i64* %3, align 8
  br i1 %7891, label %block_.L_440f14, label %block_440ea0

block_440ea0:                                     ; preds = %block_.L_440e93
  %7896 = add i64 %6857, -832
  %7897 = add i64 %7895, 7
  store i64 %7897, i64* %3, align 8
  %7898 = inttoptr i64 %7896 to i32*
  %7899 = load i32, i32* %7898, align 4
  store i8 0, i8* %31, align 1
  %7900 = and i32 %7899, 255
  %7901 = tail call i32 @llvm.ctpop.i32(i32 %7900)
  %7902 = trunc i32 %7901 to i8
  %7903 = and i8 %7902, 1
  %7904 = xor i8 %7903, 1
  store i8 %7904, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7905 = icmp eq i32 %7899, 0
  %7906 = zext i1 %7905 to i8
  store i8 %7906, i8* %47, align 1
  %7907 = lshr i32 %7899, 31
  %7908 = trunc i32 %7907 to i8
  store i8 %7908, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v572 = select i1 %7905, i64 116, i64 13
  %7909 = add i64 %7895, %.v572
  store i64 %7909, i64* %3, align 8
  br i1 %7905, label %block_.L_440f14, label %block_440ead

block_440ead:                                     ; preds = %block_440ea0
  store i64 50, i64* %RCX.i4416, align 8
  %7910 = add i64 %7909, 11
  store i64 %7910, i64* %3, align 8
  %7911 = load i32, i32* %7898, align 4
  %7912 = zext i32 %7911 to i64
  store i64 %7912, i64* %RDI.i3802.pre-phi, align 8
  %7913 = add i64 %6857, -40
  %7914 = add i64 %7909, 15
  store i64 %7914, i64* %3, align 8
  %7915 = inttoptr i64 %7913 to i64*
  %7916 = load i64, i64* %7915, align 8
  store i64 %7916, i64* %RSI.i3811.pre-phi, align 8
  %7917 = add i64 %6857, -48
  %7918 = add i64 %7909, 19
  store i64 %7918, i64* %3, align 8
  %7919 = inttoptr i64 %7917 to i64*
  %7920 = load i64, i64* %7919, align 8
  store i64 %7920, i64* %RDX.i4419, align 8
  %7921 = add i64 %7909, 12515
  %7922 = add i64 %7909, 24
  %7923 = load i64, i64* %6, align 8
  %7924 = add i64 %7923, -8
  %7925 = inttoptr i64 %7924 to i64*
  store i64 %7922, i64* %7925, align 8
  store i64 %7924, i64* %6, align 8
  store i64 %7921, i64* %3, align 8
  %call2_440ec0 = tail call %struct.Memory* @sub_443f90.semeai_move_value(%struct.State* nonnull %0, i64 %7921, %struct.Memory* %6850)
  %7926 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x57dfbc_type* @G__0x57dfbc to i64), i64* %RCX.i4416, align 8
  store i64 0, i64* %RDI.i3802.pre-phi, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %7927 = load i64, i64* %RBP.i, align 8
  %7928 = add i64 %7927, -736
  store i64 %7928, i64* %RDX.i4419, align 8
  %7929 = add i64 %7927, -1696
  %7930 = load i32, i32* %EAX.i4398, align 4
  %7931 = add i64 %7926, 25
  store i64 %7931, i64* %3, align 8
  %7932 = inttoptr i64 %7929 to i32*
  store i32 %7930, i32* %7932, align 4
  %7933 = load i64, i64* %RBP.i, align 8
  %7934 = add i64 %7933, -832
  %7935 = load i64, i64* %3, align 8
  %7936 = add i64 %7935, 6
  store i64 %7936, i64* %3, align 8
  %7937 = inttoptr i64 %7934 to i32*
  %7938 = load i32, i32* %7937, align 4
  %7939 = zext i32 %7938 to i64
  store i64 %7939, i64* %RSI.i3811.pre-phi, align 8
  %7940 = add i64 %7933, -1696
  %7941 = add i64 %7935, 12
  store i64 %7941, i64* %3, align 8
  %7942 = inttoptr i64 %7940 to i32*
  %7943 = load i32, i32* %7942, align 4
  %7944 = zext i32 %7943 to i64
  store i64 %7944, i64* %RAX.i3798, align 8
  %7945 = add i64 %7933, -3524
  %7946 = load i32, i32* %EDI.i4425, align 4
  %7947 = add i64 %7935, 18
  store i64 %7947, i64* %3, align 8
  %7948 = inttoptr i64 %7945 to i32*
  store i32 %7946, i32* %7948, align 4
  %7949 = load i64, i64* %RDX.i4419, align 8
  %7950 = load i64, i64* %3, align 8
  store i64 %7949, i64* %RDI.i3802.pre-phi, align 8
  %7951 = load i32, i32* %EAX.i4398, align 4
  %7952 = zext i32 %7951 to i64
  store i64 %7952, i64* %RDX.i4419, align 8
  %7953 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  %7954 = load i64, i64* %RBP.i, align 8
  %7955 = add i64 %7954, -3524
  %7956 = add i64 %7950, 12
  store i64 %7956, i64* %3, align 8
  %7957 = inttoptr i64 %7955 to i32*
  %7958 = load i32, i32* %7957, align 4
  %7959 = zext i32 %7958 to i64
  store i64 %7959, i64* %7953, align 8
  %7960 = add i64 %7950, 19
  store i64 %7960, i64* %3, align 8
  %7961 = load i32, i32* %7957, align 4
  %7962 = zext i32 %7961 to i64
  store i64 %7962, i64* %R9.i4411, align 8
  %7963 = bitcast i64* %6 to i32**
  %7964 = load i32*, i32** %7963, align 8
  %7965 = add i64 %7950, 26
  store i64 %7965, i64* %3, align 8
  store i32 0, i32* %7964, align 4
  %7966 = load i64, i64* %3, align 8
  %7967 = add i64 %7966, 13094
  %7968 = add i64 %7966, 5
  %7969 = load i64, i64* %6, align 8
  %7970 = add i64 %7969, -8
  %7971 = inttoptr i64 %7970 to i64*
  store i64 %7968, i64* %7971, align 8
  store i64 %7970, i64* %6, align 8
  store i64 %7967, i64* %3, align 8
  %call2_440f0a = tail call %struct.Memory* @sub_444230.owl_add_move(%struct.State* nonnull %0, i64 %7967, %struct.Memory* %call2_440ec0)
  %7972 = load i64, i64* %3, align 8
  %7973 = add i64 %7972, 116
  br label %block_.L_440f83

block_.L_440f14:                                  ; preds = %block_440ea0, %block_.L_440e93
  %7974 = phi i64 [ %7909, %block_440ea0 ], [ %7895, %block_.L_440e93 ]
  %7975 = add i64 %6857, -1244
  %7976 = add i64 %7974, 7
  store i64 %7976, i64* %3, align 8
  %7977 = inttoptr i64 %7975 to i32*
  %7978 = load i32, i32* %7977, align 4
  store i8 0, i8* %31, align 1
  %7979 = and i32 %7978, 255
  %7980 = tail call i32 @llvm.ctpop.i32(i32 %7979)
  %7981 = trunc i32 %7980 to i8
  %7982 = and i8 %7981, 1
  %7983 = xor i8 %7982, 1
  store i8 %7983, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7984 = icmp eq i32 %7978, 0
  %7985 = zext i1 %7984 to i8
  store i8 %7985, i8* %47, align 1
  %7986 = lshr i32 %7978, 31
  %7987 = trunc i32 %7986 to i8
  store i8 %7987, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v573 = select i1 %7984, i64 106, i64 13
  %7988 = add i64 %7974, %.v573
  store i64 %7988, i64* %3, align 8
  br i1 %7984, label %block_.L_440f7e, label %block_440f21

block_440f21:                                     ; preds = %block_.L_440f14
  %7989 = add i64 %6857, -800
  %7990 = add i64 %7988, 7
  store i64 %7990, i64* %3, align 8
  %7991 = inttoptr i64 %7989 to i32*
  %7992 = load i32, i32* %7991, align 4
  store i8 0, i8* %31, align 1
  %7993 = and i32 %7992, 255
  %7994 = tail call i32 @llvm.ctpop.i32(i32 %7993)
  %7995 = trunc i32 %7994 to i8
  %7996 = and i8 %7995, 1
  %7997 = xor i8 %7996, 1
  store i8 %7997, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %7998 = icmp eq i32 %7992, 0
  %7999 = zext i1 %7998 to i8
  store i8 %7999, i8* %47, align 1
  %8000 = lshr i32 %7992, 31
  %8001 = trunc i32 %8000 to i8
  store i8 %8001, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v574 = select i1 %7998, i64 93, i64 13
  %8002 = add i64 %7988, %.v574
  store i64 %8002, i64* %3, align 8
  br i1 %7998, label %block_.L_440f7e, label %block_440f2e

block_440f2e:                                     ; preds = %block_440f21
  store i64 10, i64* %RCX.i4416, align 8
  %8003 = add i64 %8002, 11
  store i64 %8003, i64* %3, align 8
  %8004 = load i32, i32* %7991, align 4
  %8005 = zext i32 %8004 to i64
  store i64 %8005, i64* %RDI.i3802.pre-phi, align 8
  %8006 = add i64 %6857, -40
  %8007 = add i64 %8002, 15
  store i64 %8007, i64* %3, align 8
  %8008 = inttoptr i64 %8006 to i64*
  %8009 = load i64, i64* %8008, align 8
  store i64 %8009, i64* %RSI.i3811.pre-phi, align 8
  %8010 = add i64 %6857, -48
  %8011 = add i64 %8002, 19
  store i64 %8011, i64* %3, align 8
  %8012 = inttoptr i64 %8010 to i64*
  %8013 = load i64, i64* %8012, align 8
  store i64 %8013, i64* %RDX.i4419, align 8
  %8014 = add i64 %8002, 12386
  %8015 = add i64 %8002, 24
  %8016 = load i64, i64* %6, align 8
  %8017 = add i64 %8016, -8
  %8018 = inttoptr i64 %8017 to i64*
  store i64 %8015, i64* %8018, align 8
  store i64 %8017, i64* %6, align 8
  store i64 %8014, i64* %3, align 8
  %call2_440f41 = tail call %struct.Memory* @sub_443f90.semeai_move_value(%struct.State* nonnull %0, i64 %8014, %struct.Memory* %6850)
  %8019 = load i64, i64* %3, align 8
  store i64 ptrtoint (%G__0x57dfcd_type* @G__0x57dfcd to i64), i64* %RCX.i4416, align 8
  %8020 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  store i64 1, i64* %8020, align 8
  store i64 0, i64* %R9.i4411, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %8021 = load i64, i64* %RBP.i, align 8
  %8022 = add i64 %8021, -736
  store i64 %8022, i64* %RDI.i3802.pre-phi, align 8
  %8023 = add i64 %8021, -1696
  %8024 = load i32, i32* %EAX.i4398, align 4
  %8025 = add i64 %8019, 32
  store i64 %8025, i64* %3, align 8
  %8026 = inttoptr i64 %8023 to i32*
  store i32 %8024, i32* %8026, align 4
  %8027 = load i64, i64* %RBP.i, align 8
  %8028 = add i64 %8027, -800
  %8029 = load i64, i64* %3, align 8
  %8030 = add i64 %8029, 6
  store i64 %8030, i64* %3, align 8
  %8031 = inttoptr i64 %8028 to i32*
  %8032 = load i32, i32* %8031, align 4
  %8033 = zext i32 %8032 to i64
  store i64 %8033, i64* %RSI.i3811.pre-phi, align 8
  %8034 = add i64 %8027, -1696
  %8035 = add i64 %8029, 12
  store i64 %8035, i64* %3, align 8
  %8036 = inttoptr i64 %8034 to i32*
  %8037 = load i32, i32* %8036, align 4
  %8038 = zext i32 %8037 to i64
  store i64 %8038, i64* %RDX.i4419, align 8
  %8039 = bitcast i64* %6 to i32**
  %8040 = load i32*, i32** %8039, align 8
  %8041 = add i64 %8029, 19
  store i64 %8041, i64* %3, align 8
  store i32 0, i32* %8040, align 4
  %8042 = load i64, i64* %3, align 8
  %8043 = add i64 %8042, 12983
  %8044 = add i64 %8042, 5
  %8045 = load i64, i64* %6, align 8
  %8046 = add i64 %8045, -8
  %8047 = inttoptr i64 %8046 to i64*
  store i64 %8044, i64* %8047, align 8
  store i64 %8046, i64* %6, align 8
  store i64 %8043, i64* %3, align 8
  %call2_440f79 = tail call %struct.Memory* @sub_444230.owl_add_move(%struct.State* nonnull %0, i64 %8043, %struct.Memory* %call2_440f41)
  %.pre433 = load i64, i64* %3, align 8
  br label %block_.L_440f7e

block_.L_440f7e:                                  ; preds = %block_440f2e, %block_440f21, %block_.L_440f14
  %8048 = phi i64 [ %7988, %block_.L_440f14 ], [ %8002, %block_440f21 ], [ %.pre433, %block_440f2e ]
  %MEMORY.117 = phi %struct.Memory* [ %6850, %block_.L_440f14 ], [ %6850, %block_440f21 ], [ %call2_440f79, %block_440f2e ]
  %8049 = add i64 %8048, 5
  store i64 %8049, i64* %3, align 8
  %.pre469 = getelementptr inbounds %union.anon, %union.anon* %106, i64 0, i32 0
  %.pre470 = bitcast i64* %6 to i32**
  br label %block_.L_440f83

block_.L_440f83:                                  ; preds = %block_.L_440f7e, %block_440ead
  %.pre467.pre-phi = phi i32** [ %.pre470, %block_.L_440f7e ], [ %7963, %block_440ead ]
  %.pre466.pre-phi = phi i64* [ %.pre469, %block_.L_440f7e ], [ %7953, %block_440ead ]
  %storemerge249 = phi i64 [ %8049, %block_.L_440f7e ], [ %7973, %block_440ead ]
  %MEMORY.118 = phi %struct.Memory* [ %MEMORY.117, %block_.L_440f7e ], [ %call2_440f0a, %block_440ead ]
  %8050 = add i64 %storemerge249, 5
  store i64 %8050, i64* %3, align 8
  br label %block_.L_440f88

block_.L_440f88:                                  ; preds = %block_.L_440f83, %block_440e2c
  %.pre-phi468 = phi i32** [ %.pre467.pre-phi, %block_.L_440f83 ], [ %7870, %block_440e2c ]
  %.pre-phi = phi i64* [ %.pre466.pre-phi, %block_.L_440f83 ], [ %7860, %block_440e2c ]
  %storemerge215 = phi i64 [ %8050, %block_.L_440f83 ], [ %7880, %block_440e2c ]
  %MEMORY.119 = phi %struct.Memory* [ %MEMORY.118, %block_.L_440f83 ], [ %call2_440e89, %block_440e2c ]
  %8051 = load i64, i64* %RBP.i, align 8
  %8052 = add i64 %8051, -1688
  %8053 = add i64 %storemerge215, 7
  store i64 %8053, i64* %3, align 8
  %8054 = inttoptr i64 %8052 to i64*
  %8055 = load i64, i64* %8054, align 8
  store i64 %8055, i64* %RAX.i3798, align 8
  store i64 %8055, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %8056 = add i64 %8051, -1692
  %8057 = add i64 %storemerge215, 21
  store i64 %8057, i64* %3, align 8
  %8058 = inttoptr i64 %8056 to i32*
  %8059 = load i32, i32* %8058, align 4
  %8060 = zext i32 %8059 to i64
  store i64 %8060, i64* %RCX.i4416, align 8
  store i32 %8059, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  %8061 = add i64 %8051, -1668
  %8062 = add i64 %storemerge215, 38
  store i64 %8062, i64* %3, align 8
  %8063 = inttoptr i64 %8061 to i32*
  store i32 0, i32* %8063, align 4
  %R11D.i713 = bitcast %union.anon* %71 to i32*
  %8064 = bitcast i64* %6 to i64**
  %EBX.i563 = bitcast %union.anon* %21 to i32*
  %.pre434 = load i64, i64* %3, align 8
  br label %block_.L_440fae

block_.L_440fae:                                  ; preds = %block_.L_4413e3, %block_.L_440f88
  %8065 = phi i64 [ %.pre434, %block_.L_440f88 ], [ %9267, %block_.L_4413e3 ]
  %MEMORY.120 = phi %struct.Memory* [ %MEMORY.119, %block_.L_440f88 ], [ %MEMORY.137, %block_.L_4413e3 ]
  %8066 = load i64, i64* %RBP.i, align 8
  %8067 = add i64 %8066, -1668
  %8068 = add i64 %8065, 7
  store i64 %8068, i64* %3, align 8
  %8069 = inttoptr i64 %8067 to i32*
  %8070 = load i32, i32* %8069, align 4
  %8071 = add i32 %8070, -6
  %8072 = icmp ult i32 %8070, 6
  %8073 = zext i1 %8072 to i8
  store i8 %8073, i8* %31, align 1
  %8074 = and i32 %8071, 255
  %8075 = tail call i32 @llvm.ctpop.i32(i32 %8074)
  %8076 = trunc i32 %8075 to i8
  %8077 = and i8 %8076, 1
  %8078 = xor i8 %8077, 1
  store i8 %8078, i8* %38, align 1
  %8079 = xor i32 %8071, %8070
  %8080 = lshr i32 %8079, 4
  %8081 = trunc i32 %8080 to i8
  %8082 = and i8 %8081, 1
  store i8 %8082, i8* %44, align 1
  %8083 = icmp eq i32 %8071, 0
  %8084 = zext i1 %8083 to i8
  store i8 %8084, i8* %47, align 1
  %8085 = lshr i32 %8071, 31
  %8086 = trunc i32 %8085 to i8
  store i8 %8086, i8* %50, align 1
  %8087 = lshr i32 %8070, 31
  %8088 = xor i32 %8085, %8087
  %8089 = add nuw nsw i32 %8088, %8087
  %8090 = icmp eq i32 %8089, 2
  %8091 = zext i1 %8090 to i8
  store i8 %8091, i8* %56, align 1
  %8092 = icmp ne i8 %8086, 0
  %8093 = xor i1 %8092, %8090
  %.v528 = select i1 %8093, i64 13, i64 1097
  %8094 = add i64 %8065, %.v528
  store i64 %8094, i64* %3, align 8
  br i1 %8093, label %block_440fbb, label %block_.L_4413f7

block_440fbb:                                     ; preds = %block_.L_440fae
  %8095 = add i64 %8066, -736
  store i64 %8095, i64* %RAX.i3798, align 8
  %8096 = add i64 %8094, 14
  store i64 %8096, i64* %3, align 8
  %8097 = load i32, i32* %8069, align 4
  %8098 = sext i32 %8097 to i64
  %8099 = shl nsw i64 %8098, 5
  store i64 %8099, i64* %RCX.i4416, align 8
  %8100 = add i64 %8099, %8095
  store i64 %8100, i64* %RAX.i3798, align 8
  %8101 = icmp ult i64 %8100, %8095
  %8102 = icmp ult i64 %8100, %8099
  %8103 = or i1 %8101, %8102
  %8104 = zext i1 %8103 to i8
  store i8 %8104, i8* %31, align 1
  %8105 = trunc i64 %8100 to i32
  %8106 = and i32 %8105, 255
  %8107 = tail call i32 @llvm.ctpop.i32(i32 %8106)
  %8108 = trunc i32 %8107 to i8
  %8109 = and i8 %8108, 1
  %8110 = xor i8 %8109, 1
  store i8 %8110, i8* %38, align 1
  %8111 = xor i64 %8095, %8100
  %8112 = lshr i64 %8111, 4
  %8113 = trunc i64 %8112 to i8
  %8114 = and i8 %8113, 1
  store i8 %8114, i8* %44, align 1
  %8115 = icmp eq i64 %8100, 0
  %8116 = zext i1 %8115 to i8
  store i8 %8116, i8* %47, align 1
  %8117 = lshr i64 %8100, 63
  %8118 = trunc i64 %8117 to i8
  store i8 %8118, i8* %50, align 1
  %8119 = lshr i64 %8095, 63
  %8120 = lshr i64 %8098, 58
  %8121 = and i64 %8120, 1
  %8122 = xor i64 %8117, %8119
  %8123 = xor i64 %8117, %8121
  %8124 = add nuw nsw i64 %8122, %8123
  %8125 = icmp eq i64 %8124, 2
  %8126 = zext i1 %8125 to i8
  store i8 %8126, i8* %56, align 1
  %8127 = inttoptr i64 %8100 to i32*
  %8128 = add i64 %8094, 23
  store i64 %8128, i64* %3, align 8
  %8129 = load i32, i32* %8127, align 4
  %8130 = zext i32 %8129 to i64
  store i64 %8130, i64* %RDX.i4419, align 8
  %8131 = add i64 %8066, -3392
  %8132 = add i64 %8094, 29
  store i64 %8132, i64* %3, align 8
  %8133 = inttoptr i64 %8131 to i32*
  store i32 %8129, i32* %8133, align 4
  %8134 = load i64, i64* %RBP.i, align 8
  %8135 = add i64 %8134, -1668
  %8136 = load i64, i64* %3, align 8
  %8137 = add i64 %8136, 7
  store i64 %8137, i64* %3, align 8
  %8138 = inttoptr i64 %8135 to i32*
  %8139 = load i32, i32* %8138, align 4
  %8140 = add i32 %8139, -2
  %8141 = icmp ult i32 %8139, 2
  %8142 = zext i1 %8141 to i8
  store i8 %8142, i8* %31, align 1
  %8143 = and i32 %8140, 255
  %8144 = tail call i32 @llvm.ctpop.i32(i32 %8143)
  %8145 = trunc i32 %8144 to i8
  %8146 = and i8 %8145, 1
  %8147 = xor i8 %8146, 1
  store i8 %8147, i8* %38, align 1
  %8148 = xor i32 %8140, %8139
  %8149 = lshr i32 %8148, 4
  %8150 = trunc i32 %8149 to i8
  %8151 = and i8 %8150, 1
  store i8 %8151, i8* %44, align 1
  %8152 = icmp eq i32 %8140, 0
  %8153 = zext i1 %8152 to i8
  store i8 %8153, i8* %47, align 1
  %8154 = lshr i32 %8140, 31
  %8155 = trunc i32 %8154 to i8
  store i8 %8155, i8* %50, align 1
  %8156 = lshr i32 %8139, 31
  %8157 = xor i32 %8154, %8156
  %8158 = add nuw nsw i32 %8157, %8156
  %8159 = icmp eq i32 %8158, 2
  %8160 = zext i1 %8159 to i8
  store i8 %8160, i8* %56, align 1
  %8161 = icmp ne i8 %8155, 0
  %8162 = xor i1 %8161, %8159
  %.demorgan479 = or i1 %8152, %8162
  %.v544 = select i1 %.demorgan479, i64 13, i64 67
  %8163 = add i64 %8136, %.v544
  store i64 %8163, i64* %3, align 8
  br i1 %.demorgan479, label %block_440fe5, label %block_.L_44101b

block_440fe5:                                     ; preds = %block_440fbb
  %8164 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %8165 = add i32 %8164, -6
  %8166 = icmp ult i32 %8164, 6
  %8167 = zext i1 %8166 to i8
  store i8 %8167, i8* %31, align 1
  %8168 = and i32 %8165, 255
  %8169 = tail call i32 @llvm.ctpop.i32(i32 %8168)
  %8170 = trunc i32 %8169 to i8
  %8171 = and i8 %8170, 1
  %8172 = xor i8 %8171, 1
  store i8 %8172, i8* %38, align 1
  %8173 = xor i32 %8165, %8164
  %8174 = lshr i32 %8173, 4
  %8175 = trunc i32 %8174 to i8
  %8176 = and i8 %8175, 1
  store i8 %8176, i8* %44, align 1
  %8177 = icmp eq i32 %8165, 0
  %8178 = zext i1 %8177 to i8
  store i8 %8178, i8* %47, align 1
  %8179 = lshr i32 %8165, 31
  %8180 = trunc i32 %8179 to i8
  store i8 %8180, i8* %50, align 1
  %8181 = lshr i32 %8164, 31
  %8182 = xor i32 %8179, %8181
  %8183 = add nuw nsw i32 %8182, %8181
  %8184 = icmp eq i32 %8183, 2
  %8185 = zext i1 %8184 to i8
  store i8 %8185, i8* %56, align 1
  %8186 = icmp ne i8 %8180, 0
  %8187 = xor i1 %8186, %8184
  %8188 = or i1 %8177, %8187
  %.v545 = select i1 %8188, i64 27, i64 14
  %8189 = add i64 %8163, %.v545
  store i64 %8189, i64* %3, align 8
  br i1 %8188, label %block_.L_441000, label %block_440ff3

block_440ff3:                                     ; preds = %block_440fe5
  %8190 = add i64 %8189, 7
  store i64 %8190, i64* %3, align 8
  %8191 = load i32, i32* %8138, align 4
  %8192 = add i32 %8191, -1
  %8193 = icmp eq i32 %8191, 0
  %8194 = zext i1 %8193 to i8
  store i8 %8194, i8* %31, align 1
  %8195 = and i32 %8192, 255
  %8196 = tail call i32 @llvm.ctpop.i32(i32 %8195)
  %8197 = trunc i32 %8196 to i8
  %8198 = and i8 %8197, 1
  %8199 = xor i8 %8198, 1
  store i8 %8199, i8* %38, align 1
  %8200 = xor i32 %8192, %8191
  %8201 = lshr i32 %8200, 4
  %8202 = trunc i32 %8201 to i8
  %8203 = and i8 %8202, 1
  store i8 %8203, i8* %44, align 1
  %8204 = icmp eq i32 %8192, 0
  %8205 = zext i1 %8204 to i8
  store i8 %8205, i8* %47, align 1
  %8206 = lshr i32 %8192, 31
  %8207 = trunc i32 %8206 to i8
  store i8 %8207, i8* %50, align 1
  %8208 = lshr i32 %8191, 31
  %8209 = xor i32 %8206, %8208
  %8210 = add nuw nsw i32 %8209, %8208
  %8211 = icmp eq i32 %8210, 2
  %8212 = zext i1 %8211 to i8
  store i8 %8212, i8* %56, align 1
  %8213 = icmp ne i8 %8207, 0
  %8214 = xor i1 %8213, %8211
  %.demorgan480 = or i1 %8204, %8214
  %.v546 = select i1 %.demorgan480, i64 13, i64 40
  %8215 = add i64 %8189, %.v546
  store i64 %8215, i64* %3, align 8
  br i1 %.demorgan480, label %block_.L_441000, label %block_.L_44101b

block_.L_441000:                                  ; preds = %block_440ff3, %block_440fe5
  %8216 = phi i64 [ %8215, %block_440ff3 ], [ %8189, %block_440fe5 ]
  %8217 = add i32 %8164, -12
  %8218 = icmp ult i32 %8164, 12
  %8219 = zext i1 %8218 to i8
  store i8 %8219, i8* %31, align 1
  %8220 = and i32 %8217, 255
  %8221 = tail call i32 @llvm.ctpop.i32(i32 %8220)
  %8222 = trunc i32 %8221 to i8
  %8223 = and i8 %8222, 1
  %8224 = xor i8 %8223, 1
  store i8 %8224, i8* %38, align 1
  %8225 = xor i32 %8217, %8164
  %8226 = lshr i32 %8225, 4
  %8227 = trunc i32 %8226 to i8
  %8228 = and i8 %8227, 1
  store i8 %8228, i8* %44, align 1
  %8229 = icmp eq i32 %8217, 0
  %8230 = zext i1 %8229 to i8
  store i8 %8230, i8* %47, align 1
  %8231 = lshr i32 %8217, 31
  %8232 = trunc i32 %8231 to i8
  store i8 %8232, i8* %50, align 1
  %8233 = xor i32 %8231, %8181
  %8234 = add nuw nsw i32 %8233, %8181
  %8235 = icmp eq i32 %8234, 2
  %8236 = zext i1 %8235 to i8
  store i8 %8236, i8* %56, align 1
  %8237 = icmp ne i8 %8232, 0
  %8238 = xor i1 %8237, %8235
  %8239 = or i1 %8229, %8238
  %.v547 = select i1 %8239, i64 32, i64 14
  %8240 = add i64 %8216, %.v547
  store i64 %8240, i64* %3, align 8
  br i1 %8239, label %block_.L_441020, label %block_44100e

block_44100e:                                     ; preds = %block_.L_441000
  %8241 = add i64 %8240, 7
  store i64 %8241, i64* %3, align 8
  %8242 = load i32, i32* %8138, align 4
  store i8 0, i8* %31, align 1
  %8243 = and i32 %8242, 255
  %8244 = tail call i32 @llvm.ctpop.i32(i32 %8243)
  %8245 = trunc i32 %8244 to i8
  %8246 = and i8 %8245, 1
  %8247 = xor i8 %8246, 1
  store i8 %8247, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8248 = icmp eq i32 %8242, 0
  %8249 = zext i1 %8248 to i8
  store i8 %8249, i8* %47, align 1
  %8250 = lshr i32 %8242, 31
  %8251 = trunc i32 %8250 to i8
  store i8 %8251, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %8252 = icmp ne i8 %8251, 0
  %8253 = or i1 %8248, %8252
  %.v548 = select i1 %8253, i64 18, i64 13
  %8254 = add i64 %8240, %.v548
  store i64 %8254, i64* %3, align 8
  br i1 %8253, label %block_.L_441020, label %block_.L_44101b

block_.L_44101b:                                  ; preds = %block_440ff3, %block_440fbb, %block_44100e
  %8255 = phi i64 [ %8254, %block_44100e ], [ %8215, %block_440ff3 ], [ %8163, %block_440fbb ]
  %8256 = add i64 %8255, 968
  br label %block_.L_4413e3

block_.L_441020:                                  ; preds = %block_44100e, %block_.L_441000
  %8257 = phi i64 [ %8254, %block_44100e ], [ %8240, %block_.L_441000 ]
  %8258 = add i64 %8134, -3392
  %8259 = add i64 %8257, 7
  store i64 %8259, i64* %3, align 8
  %8260 = inttoptr i64 %8258 to i32*
  %8261 = load i32, i32* %8260, align 4
  store i8 0, i8* %31, align 1
  %8262 = and i32 %8261, 255
  %8263 = tail call i32 @llvm.ctpop.i32(i32 %8262)
  %8264 = trunc i32 %8263 to i8
  %8265 = and i8 %8264, 1
  %8266 = xor i8 %8265, 1
  store i8 %8266, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8267 = icmp eq i32 %8261, 0
  %8268 = zext i1 %8267 to i8
  store i8 %8268, i8* %47, align 1
  %8269 = lshr i32 %8261, 31
  %8270 = trunc i32 %8269 to i8
  store i8 %8270, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v549 = select i1 %8267, i64 958, i64 13
  %8271 = add i64 %8257, %.v549
  store i64 %8271, i64* %3, align 8
  br i1 %8267, label %block_.L_4413de, label %block_44102d

block_44102d:                                     ; preds = %block_.L_441020
  %8272 = load i32, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  %8273 = zext i32 %8272 to i64
  store i64 %8273, i64* %RAX.i3798, align 8
  %8274 = load i32, i32* bitcast (%G_0x7ae450_type* @G_0x7ae450 to i32*), align 8
  %8275 = sub i32 %8272, %8274
  %8276 = icmp ult i32 %8272, %8274
  %8277 = zext i1 %8276 to i8
  store i8 %8277, i8* %31, align 1
  %8278 = and i32 %8275, 255
  %8279 = tail call i32 @llvm.ctpop.i32(i32 %8278)
  %8280 = trunc i32 %8279 to i8
  %8281 = and i8 %8280, 1
  %8282 = xor i8 %8281, 1
  store i8 %8282, i8* %38, align 1
  %8283 = xor i32 %8274, %8272
  %8284 = xor i32 %8283, %8275
  %8285 = lshr i32 %8284, 4
  %8286 = trunc i32 %8285 to i8
  %8287 = and i8 %8286, 1
  store i8 %8287, i8* %44, align 1
  %8288 = icmp eq i32 %8275, 0
  %8289 = zext i1 %8288 to i8
  store i8 %8289, i8* %47, align 1
  %8290 = lshr i32 %8275, 31
  %8291 = trunc i32 %8290 to i8
  store i8 %8291, i8* %50, align 1
  %8292 = lshr i32 %8272, 31
  %8293 = lshr i32 %8274, 31
  %8294 = xor i32 %8293, %8292
  %8295 = xor i32 %8290, %8292
  %8296 = add nuw nsw i32 %8295, %8294
  %8297 = icmp eq i32 %8296, 2
  %8298 = zext i1 %8297 to i8
  store i8 %8298, i8* %56, align 1
  %8299 = icmp ne i8 %8291, 0
  %8300 = xor i1 %8299, %8297
  %.v550 = select i1 %8300, i64 20, i64 945
  %8301 = add i64 %8271, %.v550
  store i64 %8301, i64* %3, align 8
  br i1 %8300, label %block_441041, label %block_.L_4413de

block_441041:                                     ; preds = %block_44102d
  %8302 = add i32 %8164, -100
  %8303 = icmp ult i32 %8164, 100
  %8304 = zext i1 %8303 to i8
  store i8 %8304, i8* %31, align 1
  %8305 = and i32 %8302, 255
  %8306 = tail call i32 @llvm.ctpop.i32(i32 %8305)
  %8307 = trunc i32 %8306 to i8
  %8308 = and i8 %8307, 1
  %8309 = xor i8 %8308, 1
  store i8 %8309, i8* %38, align 1
  %8310 = xor i32 %8302, %8164
  %8311 = lshr i32 %8310, 4
  %8312 = trunc i32 %8311 to i8
  %8313 = and i8 %8312, 1
  store i8 %8313, i8* %44, align 1
  %8314 = icmp eq i32 %8302, 0
  %8315 = zext i1 %8314 to i8
  store i8 %8315, i8* %47, align 1
  %8316 = lshr i32 %8302, 31
  %8317 = trunc i32 %8316 to i8
  store i8 %8317, i8* %50, align 1
  %8318 = xor i32 %8316, %8181
  %8319 = add nuw nsw i32 %8318, %8181
  %8320 = icmp eq i32 %8319, 2
  %8321 = zext i1 %8320 to i8
  store i8 %8321, i8* %56, align 1
  %8322 = icmp ne i8 %8317, 0
  %8323 = xor i1 %8322, %8320
  %.v551 = select i1 %8323, i64 14, i64 925
  %8324 = add i64 %8301, %.v551
  store i64 %8324, i64* %3, align 8
  br i1 %8323, label %block_44104f, label %block_.L_4413de

block_44104f:                                     ; preds = %block_441041
  %8325 = add i64 %8134, -736
  store i64 %8325, i64* %RAX.i3798, align 8
  %8326 = add i64 %8324, 13
  store i64 %8326, i64* %3, align 8
  %8327 = load i32, i32* %8260, align 4
  %8328 = zext i32 %8327 to i64
  store i64 %8328, i64* %RDI.i3802.pre-phi, align 8
  %8329 = add i64 %8134, -92
  %8330 = add i64 %8324, 16
  store i64 %8330, i64* %3, align 8
  %8331 = inttoptr i64 %8329 to i32*
  %8332 = load i32, i32* %8331, align 4
  %8333 = zext i32 %8332 to i64
  store i64 %8333, i64* %RSI.i3811.pre-phi, align 8
  %8334 = add i64 %8324, 23
  store i64 %8334, i64* %3, align 8
  %8335 = load i32, i32* %8138, align 4
  %8336 = sext i32 %8335 to i64
  %8337 = shl nsw i64 %8336, 5
  store i64 %8337, i64* %RCX.i4416, align 8
  %8338 = add i64 %8337, %8325
  store i64 %8338, i64* %RDX.i4419, align 8
  %8339 = icmp ult i64 %8338, %8325
  %8340 = icmp ult i64 %8338, %8337
  %8341 = or i1 %8339, %8340
  %8342 = zext i1 %8341 to i8
  store i8 %8342, i8* %31, align 1
  %8343 = trunc i64 %8338 to i32
  %8344 = and i32 %8343, 255
  %8345 = tail call i32 @llvm.ctpop.i32(i32 %8344)
  %8346 = trunc i32 %8345 to i8
  %8347 = and i8 %8346, 1
  %8348 = xor i8 %8347, 1
  store i8 %8348, i8* %38, align 1
  %8349 = xor i64 %8325, %8338
  %8350 = lshr i64 %8349, 4
  %8351 = trunc i64 %8350 to i8
  %8352 = and i8 %8351, 1
  store i8 %8352, i8* %44, align 1
  %8353 = icmp eq i64 %8338, 0
  %8354 = zext i1 %8353 to i8
  store i8 %8354, i8* %47, align 1
  %8355 = lshr i64 %8338, 63
  %8356 = trunc i64 %8355 to i8
  store i8 %8356, i8* %50, align 1
  %8357 = lshr i64 %8325, 63
  %8358 = lshr i64 %8336, 58
  %8359 = and i64 %8358, 1
  %8360 = xor i64 %8355, %8357
  %8361 = xor i64 %8355, %8359
  %8362 = add nuw nsw i64 %8360, %8361
  %8363 = icmp eq i64 %8362, 2
  %8364 = zext i1 %8363 to i8
  store i8 %8364, i8* %56, align 1
  %8365 = add i64 %8338, 8
  %8366 = add i64 %8324, 37
  store i64 %8366, i64* %3, align 8
  %8367 = inttoptr i64 %8365 to i64*
  %8368 = load i64, i64* %8367, align 8
  store i64 %8368, i64* %RDX.i4419, align 8
  %8369 = add i64 %8134, -28
  %8370 = add i64 %8324, 40
  store i64 %8370, i64* %3, align 8
  %8371 = inttoptr i64 %8369 to i32*
  %8372 = load i32, i32* %8371, align 4
  %8373 = zext i32 %8372 to i64
  store i64 %8373, i64* %RCX.i4416, align 8
  %8374 = add i64 %8134, -32
  %8375 = add i64 %8324, 44
  store i64 %8375, i64* %3, align 8
  %8376 = inttoptr i64 %8374 to i32*
  %8377 = load i32, i32* %8376, align 4
  %8378 = zext i32 %8377 to i64
  store i64 %8378, i64* %.pre-phi, align 8
  %8379 = load i64, i64* %RBP.i, align 8
  %8380 = add i64 %8379, -88
  %8381 = add i64 %8324, 48
  store i64 %8381, i64* %3, align 8
  %8382 = inttoptr i64 %8380 to i32*
  %8383 = load i32, i32* %8382, align 4
  %8384 = zext i32 %8383 to i64
  store i64 %8384, i64* %R9.i4411, align 8
  %8385 = add i64 %8379, -1668
  %8386 = add i64 %8324, 55
  store i64 %8386, i64* %3, align 8
  %8387 = inttoptr i64 %8385 to i32*
  %8388 = load i32, i32* %8387, align 4
  %8389 = sext i32 %8388 to i64
  %8390 = shl nsw i64 %8389, 5
  store i64 %8390, i64* %65, align 8
  %8391 = load i64, i64* %RAX.i3798, align 8
  %8392 = add i64 %8390, %8391
  store i64 %8392, i64* %RAX.i3798, align 8
  %8393 = icmp ult i64 %8392, %8391
  %8394 = icmp ult i64 %8392, %8390
  %8395 = or i1 %8393, %8394
  %8396 = zext i1 %8395 to i8
  store i8 %8396, i8* %31, align 1
  %8397 = trunc i64 %8392 to i32
  %8398 = and i32 %8397, 255
  %8399 = tail call i32 @llvm.ctpop.i32(i32 %8398)
  %8400 = trunc i32 %8399 to i8
  %8401 = and i8 %8400, 1
  %8402 = xor i8 %8401, 1
  store i8 %8402, i8* %38, align 1
  %8403 = xor i64 %8391, %8392
  %8404 = lshr i64 %8403, 4
  %8405 = trunc i64 %8404 to i8
  %8406 = and i8 %8405, 1
  store i8 %8406, i8* %44, align 1
  %8407 = icmp eq i64 %8392, 0
  %8408 = zext i1 %8407 to i8
  store i8 %8408, i8* %47, align 1
  %8409 = lshr i64 %8392, 63
  %8410 = trunc i64 %8409 to i8
  store i8 %8410, i8* %50, align 1
  %8411 = lshr i64 %8391, 63
  %8412 = lshr i64 %8389, 58
  %8413 = and i64 %8412, 1
  %8414 = xor i64 %8409, %8411
  %8415 = xor i64 %8409, %8413
  %8416 = add nuw nsw i64 %8414, %8415
  %8417 = icmp eq i64 %8416, 2
  %8418 = zext i1 %8417 to i8
  store i8 %8418, i8* %56, align 1
  %8419 = add i64 %8392, 4
  %8420 = add i64 %8324, 66
  store i64 %8420, i64* %3, align 8
  %8421 = inttoptr i64 %8419 to i32*
  %8422 = load i32, i32* %8421, align 4
  %8423 = zext i32 %8422 to i64
  store i64 %8423, i64* %R11.i4436, align 8
  %8424 = load i32*, i32** %.pre-phi468, align 8
  %8425 = add i64 %8324, 70
  store i64 %8425, i64* %3, align 8
  store i32 %8422, i32* %8424, align 4
  %8426 = load i64, i64* %3, align 8
  %8427 = add i64 %8426, -210789
  %8428 = add i64 %8426, 5
  %8429 = load i64, i64* %6, align 8
  %8430 = add i64 %8429, -8
  %8431 = inttoptr i64 %8430 to i64*
  store i64 %8428, i64* %8431, align 8
  store i64 %8430, i64* %6, align 8
  store i64 %8427, i64* %3, align 8
  %call2_441095 = tail call %struct.Memory* @sub_40d930.semeai_trymove(%struct.State* nonnull %0, i64 %8427, %struct.Memory* %MEMORY.120)
  %8432 = load i32, i32* %EAX.i4398, align 4
  %8433 = load i64, i64* %3, align 8
  store i8 0, i8* %31, align 1
  %8434 = and i32 %8432, 255
  %8435 = tail call i32 @llvm.ctpop.i32(i32 %8434)
  %8436 = trunc i32 %8435 to i8
  %8437 = and i8 %8436, 1
  %8438 = xor i8 %8437, 1
  store i8 %8438, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8439 = icmp eq i32 %8432, 0
  %8440 = zext i1 %8439 to i8
  store i8 %8440, i8* %47, align 1
  %8441 = lshr i32 %8432, 31
  %8442 = trunc i32 %8441 to i8
  store i8 %8442, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v552 = select i1 %8439, i64 836, i64 9
  %8443 = add i64 %8433, %.v552
  store i64 %8443, i64* %3, align 8
  br i1 %8439, label %block_.L_4413de, label %block_4410a3

block_4410a3:                                     ; preds = %block_44104f
  %8444 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %8445 = and i32 %8444, 64
  %8446 = zext i32 %8445 to i64
  store i64 %8446, i64* %RAX.i3798, align 8
  store i8 0, i8* %31, align 1
  %8447 = tail call i32 @llvm.ctpop.i32(i32 %8445)
  %8448 = trunc i32 %8447 to i8
  %8449 = xor i8 %8448, 1
  store i8 %8449, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8450 = icmp eq i32 %8445, 0
  %.lobit481 = lshr exact i32 %8445, 6
  %8451 = trunc i32 %.lobit481 to i8
  %8452 = xor i8 %8451, 1
  store i8 %8452, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v553 = select i1 %8450, i64 38, i64 19
  %8453 = add i64 %8443, %.v553
  store i64 %8453, i64* %3, align 8
  br i1 %8450, label %block_.L_4410c9, label %block_4410b6

block_4410b6:                                     ; preds = %block_4410a3
  %8454 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  store i8 0, i8* %31, align 1
  %8455 = and i32 %8454, 255
  %8456 = tail call i32 @llvm.ctpop.i32(i32 %8455)
  %8457 = trunc i32 %8456 to i8
  %8458 = and i8 %8457, 1
  %8459 = xor i8 %8458, 1
  store i8 %8459, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8460 = icmp eq i32 %8454, 0
  %8461 = zext i1 %8460 to i8
  store i8 %8461, i8* %47, align 1
  %8462 = lshr i32 %8454, 31
  %8463 = trunc i32 %8462 to i8
  store i8 %8463, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v554 = select i1 %8460, i64 19, i64 14
  %8464 = add i64 %8453, %.v554
  store i64 %8464, i64* %3, align 8
  br i1 %8460, label %block_.L_4410c9, label %block_4410c4

block_4410c4:                                     ; preds = %block_4410b6
  %8465 = add i64 %8464, -227220
  %8466 = add i64 %8464, 5
  %8467 = load i64, i64* %6, align 8
  %8468 = add i64 %8467, -8
  %8469 = inttoptr i64 %8468 to i64*
  store i64 %8466, i64* %8469, align 8
  store i64 %8468, i64* %6, align 8
  store i64 %8465, i64* %3, align 8
  %call2_4410c4 = tail call %struct.Memory* @sub_409930.dump_stack(%struct.State* nonnull %0, i64 %8465, %struct.Memory* %MEMORY.120)
  %.pre446 = load i64, i64* %3, align 8
  br label %block_.L_4410c9

block_.L_4410c9:                                  ; preds = %block_4410c4, %block_4410b6, %block_4410a3
  %8470 = phi i64 [ %.pre446, %block_4410c4 ], [ %8464, %block_4410b6 ], [ %8453, %block_4410a3 ]
  %8471 = load i64, i64* %RBP.i, align 8
  %8472 = add i64 %8471, -32
  %8473 = add i64 %8470, 4
  store i64 %8473, i64* %3, align 8
  %8474 = inttoptr i64 %8472 to i32*
  %8475 = load i32, i32* %8474, align 4
  %8476 = sext i32 %8475 to i64
  store i64 %8476, i64* %RAX.i3798, align 8
  %8477 = add nsw i64 %8476, 12099168
  %8478 = add i64 %8470, 12
  store i64 %8478, i64* %3, align 8
  %8479 = inttoptr i64 %8477 to i8*
  %8480 = load i8, i8* %8479, align 1
  %8481 = zext i8 %8480 to i64
  store i64 %8481, i64* %RCX.i4416, align 8
  %8482 = zext i8 %8480 to i32
  store i8 0, i8* %31, align 1
  %8483 = tail call i32 @llvm.ctpop.i32(i32 %8482)
  %8484 = trunc i32 %8483 to i8
  %8485 = and i8 %8484, 1
  %8486 = xor i8 %8485, 1
  store i8 %8486, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8487 = icmp eq i8 %8480, 0
  %8488 = zext i1 %8487 to i8
  store i8 %8488, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v555 = select i1 %8487, i64 21, i64 46
  %8489 = add i64 %8470, %.v555
  store i64 %8489, i64* %3, align 8
  br i1 %8487, label %block_4410de, label %block_.L_4410f7

block_4410de:                                     ; preds = %block_.L_4410c9
  %8490 = add i64 %8471, -1716
  %8491 = add i64 %8489, 10
  store i64 %8491, i64* %3, align 8
  %8492 = inttoptr i64 %8490 to i32*
  store i32 0, i32* %8492, align 4
  %8493 = load i64, i64* %RBP.i, align 8
  %8494 = add i64 %8493, -1712
  %8495 = load i64, i64* %3, align 8
  %8496 = add i64 %8495, 10
  store i64 %8496, i64* %3, align 8
  %8497 = inttoptr i64 %8494 to i32*
  store i32 1, i32* %8497, align 4
  %8498 = load i64, i64* %3, align 8
  %8499 = add i64 %8498, 311
  br label %block_.L_441229

block_.L_4410f7:                                  ; preds = %block_.L_4410c9
  %8500 = add i64 %8471, -88
  %8501 = add i64 %8489, 4
  store i64 %8501, i64* %3, align 8
  %8502 = inttoptr i64 %8500 to i32*
  %8503 = load i32, i32* %8502, align 4
  store i8 0, i8* %31, align 1
  %8504 = and i32 %8503, 255
  %8505 = tail call i32 @llvm.ctpop.i32(i32 %8504)
  %8506 = trunc i32 %8505 to i8
  %8507 = and i8 %8506, 1
  %8508 = xor i8 %8507, 1
  store i8 %8508, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8509 = icmp eq i32 %8503, 0
  %8510 = zext i1 %8509 to i8
  store i8 %8510, i8* %47, align 1
  %8511 = lshr i32 %8503, 31
  %8512 = trunc i32 %8511 to i8
  store i8 %8512, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v556 = select i1 %8509, i64 42, i64 10
  %8513 = add i64 %8489, %.v556
  store i64 %8513, i64* %3, align 8
  br i1 %8509, label %block_.L_441121, label %block_441101

block_441101:                                     ; preds = %block_.L_4410f7
  %8514 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %8515 = add i32 %8514, -13
  %8516 = icmp ult i32 %8514, 13
  %8517 = zext i1 %8516 to i8
  store i8 %8517, i8* %31, align 1
  %8518 = and i32 %8515, 255
  %8519 = tail call i32 @llvm.ctpop.i32(i32 %8518)
  %8520 = trunc i32 %8519 to i8
  %8521 = and i8 %8520, 1
  %8522 = xor i8 %8521, 1
  store i8 %8522, i8* %38, align 1
  %8523 = xor i32 %8515, %8514
  %8524 = lshr i32 %8523, 4
  %8525 = trunc i32 %8524 to i8
  %8526 = and i8 %8525, 1
  store i8 %8526, i8* %44, align 1
  %8527 = icmp eq i32 %8515, 0
  %8528 = zext i1 %8527 to i8
  store i8 %8528, i8* %47, align 1
  %8529 = lshr i32 %8515, 31
  %8530 = trunc i32 %8529 to i8
  store i8 %8530, i8* %50, align 1
  %8531 = lshr i32 %8514, 31
  %8532 = xor i32 %8529, %8531
  %8533 = add nuw nsw i32 %8532, %8531
  %8534 = icmp eq i32 %8533, 2
  %8535 = zext i1 %8534 to i8
  store i8 %8535, i8* %56, align 1
  %8536 = icmp ne i8 %8530, 0
  %8537 = xor i1 %8536, %8534
  %.demorgan482 = or i1 %8527, %8537
  %.v557 = select i1 %.demorgan482, i64 14, i64 32
  %8538 = add i64 %8513, %.v557
  store i64 %8538, i64* %3, align 8
  br i1 %.demorgan482, label %block_44110f, label %block_.L_441121

block_44110f:                                     ; preds = %block_441101
  %8539 = add i64 %8471, -40
  store i64 %8539, i64* %RDI.i3802.pre-phi, align 8
  %8540 = add i64 %8471, -48
  store i64 %8540, i64* %RSI.i3811.pre-phi, align 8
  %8541 = add i64 %8538, 14001
  %8542 = add i64 %8538, 13
  %8543 = load i64, i64* %6, align 8
  %8544 = add i64 %8543, -8
  %8545 = inttoptr i64 %8544 to i64*
  store i64 %8542, i64* %8545, align 8
  store i64 %8544, i64* %6, align 8
  store i64 %8541, i64* %3, align 8
  %call2_441117 = tail call %struct.Memory* @sub_4447c0.push_owl(%struct.State* nonnull %0, i64 %8541, %struct.Memory* %MEMORY.120)
  %8546 = load i64, i64* %3, align 8
  %8547 = add i64 %8546, 28
  store i64 %8547, i64* %3, align 8
  br label %block_.L_441138

block_.L_441121:                                  ; preds = %block_441101, %block_.L_4410f7
  %8548 = phi i64 [ %8538, %block_441101 ], [ %8513, %block_.L_4410f7 ]
  store i64 400, i64* %RAX.i3798, align 8
  store i64 400, i64* %RDX.i4419, align 8
  %8549 = add i64 %8471, -1232
  store i64 %8549, i64* %RDI.i3802.pre-phi, align 8
  %8550 = add i64 %8471, -40
  %8551 = add i64 %8548, 18
  store i64 %8551, i64* %3, align 8
  %8552 = inttoptr i64 %8550 to i64*
  %8553 = load i64, i64* %8552, align 8
  store i64 %8553, i64* %RSI.i3811.pre-phi, align 8
  %8554 = add i64 %8548, -262193
  %8555 = add i64 %8548, 23
  %8556 = load i64, i64* %6, align 8
  %8557 = add i64 %8556, -8
  %8558 = inttoptr i64 %8557 to i64*
  store i64 %8555, i64* %8558, align 8
  store i64 %8557, i64* %6, align 8
  store i64 %8554, i64* %3, align 8
  %8559 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %MEMORY.120)
  %.pre447 = load i64, i64* %3, align 8
  br label %block_.L_441138

block_.L_441138:                                  ; preds = %block_.L_441121, %block_44110f
  %8560 = phi i64 [ %.pre447, %block_.L_441121 ], [ %8547, %block_44110f ]
  %MEMORY.126 = phi %struct.Memory* [ %8559, %block_.L_441121 ], [ %MEMORY.120, %block_44110f ]
  store i64 1, i64* %RCX.i4416, align 8
  %8561 = load i64, i64* %RBP.i, align 8
  %8562 = add i64 %8561, -736
  store i64 %8562, i64* %RAX.i3798, align 8
  %8563 = add i64 %8561, -3392
  %8564 = add i64 %8560, 18
  store i64 %8564, i64* %3, align 8
  %8565 = inttoptr i64 %8563 to i32*
  %8566 = load i32, i32* %8565, align 4
  %8567 = zext i32 %8566 to i64
  store i64 %8567, i64* %RDI.i3802.pre-phi, align 8
  %8568 = add i64 %8561, -1668
  %8569 = add i64 %8560, 25
  store i64 %8569, i64* %3, align 8
  %8570 = inttoptr i64 %8568 to i32*
  %8571 = load i32, i32* %8570, align 4
  %8572 = sext i32 %8571 to i64
  %8573 = shl nsw i64 %8572, 5
  store i64 %8573, i64* %RDX.i4419, align 8
  %8574 = add i64 %8573, %8562
  store i64 %8574, i64* %RAX.i3798, align 8
  %8575 = icmp ult i64 %8574, %8562
  %8576 = icmp ult i64 %8574, %8573
  %8577 = or i1 %8575, %8576
  %8578 = zext i1 %8577 to i8
  store i8 %8578, i8* %31, align 1
  %8579 = trunc i64 %8574 to i32
  %8580 = and i32 %8579, 255
  %8581 = tail call i32 @llvm.ctpop.i32(i32 %8580)
  %8582 = trunc i32 %8581 to i8
  %8583 = and i8 %8582, 1
  %8584 = xor i8 %8583, 1
  store i8 %8584, i8* %38, align 1
  %8585 = xor i64 %8562, %8574
  %8586 = lshr i64 %8585, 4
  %8587 = trunc i64 %8586 to i8
  %8588 = and i8 %8587, 1
  store i8 %8588, i8* %44, align 1
  %8589 = icmp eq i64 %8574, 0
  %8590 = zext i1 %8589 to i8
  store i8 %8590, i8* %47, align 1
  %8591 = lshr i64 %8574, 63
  %8592 = trunc i64 %8591 to i8
  store i8 %8592, i8* %50, align 1
  %8593 = lshr i64 %8562, 63
  %8594 = lshr i64 %8572, 58
  %8595 = and i64 %8594, 1
  %8596 = xor i64 %8591, %8593
  %8597 = xor i64 %8591, %8595
  %8598 = add nuw nsw i64 %8596, %8597
  %8599 = icmp eq i64 %8598, 2
  %8600 = zext i1 %8599 to i8
  store i8 %8600, i8* %56, align 1
  %8601 = add i64 %8574, 16
  %8602 = add i64 %8560, 35
  store i64 %8602, i64* %3, align 8
  %8603 = inttoptr i64 %8601 to i32*
  %8604 = load i32, i32* %8603, align 4
  %8605 = zext i32 %8604 to i64
  store i64 %8605, i64* %RSI.i3811.pre-phi, align 8
  %8606 = add i64 %8561, -40
  %8607 = add i64 %8560, 39
  store i64 %8607, i64* %3, align 8
  %8608 = inttoptr i64 %8606 to i64*
  %8609 = load i64, i64* %8608, align 8
  store i64 %8609, i64* %RDX.i4419, align 8
  %8610 = add i64 %8560, 14504
  %8611 = add i64 %8560, 44
  %8612 = load i64, i64* %6, align 8
  %8613 = add i64 %8612, -8
  %8614 = inttoptr i64 %8613 to i64*
  store i64 %8611, i64* %8614, align 8
  store i64 %8613, i64* %6, align 8
  store i64 %8610, i64* %3, align 8
  %call2_44115f = tail call %struct.Memory* @sub_4449e0.owl_update_goal(%struct.State* nonnull %0, i64 %8610, %struct.Memory* %MEMORY.126)
  %8615 = load i64, i64* %RBP.i, align 8
  %8616 = add i64 %8615, -40
  %8617 = load i64, i64* %3, align 8
  %8618 = add i64 %8617, 4
  store i64 %8618, i64* %3, align 8
  %8619 = inttoptr i64 %8616 to i64*
  %8620 = load i64, i64* %8619, align 8
  store i64 %8620, i64* %RAX.i3798, align 8
  %8621 = add i64 %8620, 35404
  %8622 = add i64 %8617, 14
  store i64 %8622, i64* %3, align 8
  %8623 = inttoptr i64 %8621 to i32*
  store i32 0, i32* %8623, align 4
  %8624 = load i64, i64* %RBP.i, align 8
  %8625 = add i64 %8624, -3392
  %8626 = load i64, i64* %3, align 8
  %8627 = add i64 %8626, 6
  store i64 %8627, i64* %3, align 8
  %8628 = inttoptr i64 %8625 to i32*
  %8629 = load i32, i32* %8628, align 4
  %8630 = zext i32 %8629 to i64
  store i64 %8630, i64* %RDI.i3802.pre-phi, align 8
  %8631 = add i64 %8624, -40
  %8632 = add i64 %8626, 10
  store i64 %8632, i64* %3, align 8
  %8633 = inttoptr i64 %8631 to i64*
  %8634 = load i64, i64* %8633, align 8
  store i64 %8634, i64* %RSI.i3811.pre-phi, align 8
  %8635 = add i64 %8626, 14894
  %8636 = add i64 %8626, 15
  %8637 = load i64, i64* %6, align 8
  %8638 = add i64 %8637, -8
  %8639 = inttoptr i64 %8638 to i64*
  store i64 %8636, i64* %8639, align 8
  store i64 %8638, i64* %6, align 8
  store i64 %8635, i64* %3, align 8
  %call2_44117c = tail call %struct.Memory* @sub_444ba0.owl_update_boundary_marks(%struct.State* nonnull %0, i64 %8635, %struct.Memory* %call2_44115f)
  %8640 = load i64, i64* %RBP.i, align 8
  %8641 = add i64 %8640, -1716
  %8642 = load i64, i64* %3, align 8
  store i64 %8641, i64* %R9.i4411, align 8
  %8643 = add i64 %8640, -1712
  store i64 %8643, i64* %RAX.i3798, align 8
  store i64 0, i64* %RDX.i4419, align 8
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %8644 = add i64 %8640, -32
  %8645 = add i64 %8642, 23
  store i64 %8645, i64* %3, align 8
  %8646 = inttoptr i64 %8644 to i32*
  %8647 = load i32, i32* %8646, align 4
  %8648 = zext i32 %8647 to i64
  store i64 %8648, i64* %RDI.i3802.pre-phi, align 8
  %8649 = add i64 %8640, -28
  %8650 = add i64 %8642, 26
  store i64 %8650, i64* %3, align 8
  %8651 = inttoptr i64 %8649 to i32*
  %8652 = load i32, i32* %8651, align 4
  %8653 = zext i32 %8652 to i64
  store i64 %8653, i64* %RSI.i3811.pre-phi, align 8
  %8654 = add i64 %8640, -48
  %8655 = add i64 %8642, 30
  store i64 %8655, i64* %3, align 8
  %8656 = inttoptr i64 %8654 to i64*
  %8657 = load i64, i64* %8656, align 8
  store i64 %8657, i64* %.pre-phi, align 8
  %8658 = add i64 %8640, -40
  %8659 = add i64 %8642, 34
  store i64 %8659, i64* %3, align 8
  %8660 = inttoptr i64 %8658 to i64*
  %8661 = load i64, i64* %8660, align 8
  store i64 %8661, i64* %65, align 8
  %8662 = add i64 %8640, -52
  %8663 = add i64 %8642, 38
  store i64 %8663, i64* %3, align 8
  %8664 = inttoptr i64 %8662 to i32*
  %8665 = load i32, i32* %8664, align 4
  %8666 = zext i32 %8665 to i64
  store i64 %8666, i64* %R11.i4436, align 8
  %8667 = add i64 %8640, -88
  %8668 = add i64 %8642, 41
  store i64 %8668, i64* %3, align 8
  %8669 = inttoptr i64 %8667 to i32*
  %8670 = load i32, i32* %8669, align 4
  %8671 = zext i32 %8670 to i64
  store i64 %8671, i64* %RBX.i3528, align 8
  %8672 = load i64, i64* %RBP.i, align 8
  %8673 = add i64 %8672, -3536
  %8674 = add i64 %8642, 48
  store i64 %8674, i64* %3, align 8
  %8675 = inttoptr i64 %8673 to i64*
  store i64 0, i64* %8675, align 8
  %8676 = load i64, i64* %.pre-phi, align 8
  %8677 = load i64, i64* %3, align 8
  store i64 %8676, i64* %RDX.i4419, align 8
  %8678 = load i64, i64* %RBP.i, align 8
  %8679 = add i64 %8678, -3540
  %8680 = load i32, i32* %ECX.i4264, align 4
  %8681 = add i64 %8677, 9
  store i64 %8681, i64* %3, align 8
  %8682 = inttoptr i64 %8679 to i32*
  store i32 %8680, i32* %8682, align 4
  %8683 = load i64, i64* %65, align 8
  %8684 = load i64, i64* %3, align 8
  store i64 %8683, i64* %RCX.i4416, align 8
  %8685 = load i32, i32* %R11D.i713, align 4
  %8686 = zext i32 %8685 to i64
  store i64 %8686, i64* %.pre-phi, align 8
  %8687 = load i64*, i64** %8064, align 8
  %8688 = load i64, i64* %RAX.i3798, align 8
  %8689 = add i64 %8684, 10
  store i64 %8689, i64* %3, align 8
  store i64 %8688, i64* %8687, align 8
  %8690 = load i64, i64* %6, align 8
  %8691 = add i64 %8690, 8
  %8692 = load i64, i64* %3, align 8
  %8693 = add i64 %8692, 9
  store i64 %8693, i64* %3, align 8
  %8694 = inttoptr i64 %8691 to i64*
  store i64 0, i64* %8694, align 8
  %8695 = load i64, i64* %6, align 8
  %8696 = add i64 %8695, 16
  %8697 = load i64, i64* %3, align 8
  %8698 = add i64 %8697, 8
  store i64 %8698, i64* %3, align 8
  %8699 = inttoptr i64 %8696 to i32*
  store i32 0, i32* %8699, align 4
  %8700 = load i64, i64* %6, align 8
  %8701 = add i64 %8700, 24
  %8702 = load i32, i32* %EBX.i563, align 4
  %8703 = load i64, i64* %3, align 8
  %8704 = add i64 %8703, 4
  store i64 %8704, i64* %3, align 8
  %8705 = inttoptr i64 %8701 to i32*
  store i32 %8702, i32* %8705, align 4
  %8706 = load i64, i64* %3, align 8
  %8707 = add i64 %8706, -9193
  %8708 = add i64 %8706, 5
  %8709 = load i64, i64* %6, align 8
  %8710 = add i64 %8709, -8
  %8711 = inttoptr i64 %8710 to i64*
  store i64 %8708, i64* %8711, align 8
  store i64 %8710, i64* %6, align 8
  store i64 %8707, i64* %3, align 8
  %call2_4411d9 = tail call %struct.Memory* @sub_43edf0.do_owl_analyze_semeai(%struct.State* nonnull %0, i64 %8707, %struct.Memory* %call2_44117c)
  %8712 = load i64, i64* %RBP.i, align 8
  %8713 = add i64 %8712, -88
  %8714 = load i64, i64* %3, align 8
  %8715 = add i64 %8714, 4
  store i64 %8715, i64* %3, align 8
  %8716 = inttoptr i64 %8713 to i32*
  %8717 = load i32, i32* %8716, align 4
  store i8 0, i8* %31, align 1
  %8718 = and i32 %8717, 255
  %8719 = tail call i32 @llvm.ctpop.i32(i32 %8718)
  %8720 = trunc i32 %8719 to i8
  %8721 = and i8 %8720, 1
  %8722 = xor i8 %8721, 1
  store i8 %8722, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8723 = icmp eq i32 %8717, 0
  %8724 = zext i1 %8723 to i8
  store i8 %8724, i8* %47, align 1
  %8725 = lshr i32 %8717, 31
  %8726 = trunc i32 %8725 to i8
  store i8 %8726, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v558 = select i1 %8723, i64 47, i64 10
  %8727 = add i64 %8714, %.v558
  store i64 %8727, i64* %3, align 8
  br i1 %8723, label %block_.L_44120d, label %block_4411e8

block_4411e8:                                     ; preds = %block_.L_441138
  %8728 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %8729 = add i32 %8728, -13
  %8730 = icmp ult i32 %8728, 13
  %8731 = zext i1 %8730 to i8
  store i8 %8731, i8* %31, align 1
  %8732 = and i32 %8729, 255
  %8733 = tail call i32 @llvm.ctpop.i32(i32 %8732)
  %8734 = trunc i32 %8733 to i8
  %8735 = and i8 %8734, 1
  %8736 = xor i8 %8735, 1
  store i8 %8736, i8* %38, align 1
  %8737 = xor i32 %8729, %8728
  %8738 = lshr i32 %8737, 4
  %8739 = trunc i32 %8738 to i8
  %8740 = and i8 %8739, 1
  store i8 %8740, i8* %44, align 1
  %8741 = icmp eq i32 %8729, 0
  %8742 = zext i1 %8741 to i8
  store i8 %8742, i8* %47, align 1
  %8743 = lshr i32 %8729, 31
  %8744 = trunc i32 %8743 to i8
  store i8 %8744, i8* %50, align 1
  %8745 = lshr i32 %8728, 31
  %8746 = xor i32 %8743, %8745
  %8747 = add nuw nsw i32 %8746, %8745
  %8748 = icmp eq i32 %8747, 2
  %8749 = zext i1 %8748 to i8
  store i8 %8749, i8* %56, align 1
  %8750 = icmp ne i8 %8744, 0
  %8751 = xor i1 %8750, %8748
  %.demorgan483 = or i1 %8741, %8751
  %.v559 = select i1 %.demorgan483, i64 14, i64 37
  %8752 = add i64 %8727, %.v559
  store i64 %8752, i64* %3, align 8
  br i1 %.demorgan483, label %block_4411f6, label %block_.L_44120d

block_4411f6:                                     ; preds = %block_4411e8
  %8753 = add i64 %8712, -48
  store i64 %8753, i64* %RDI.i3802.pre-phi, align 8
  %8754 = add i64 %8752, 15194
  %8755 = add i64 %8752, 9
  %8756 = load i64, i64* %6, align 8
  %8757 = add i64 %8756, -8
  %8758 = inttoptr i64 %8757 to i64*
  store i64 %8755, i64* %8758, align 8
  store i64 %8757, i64* %6, align 8
  store i64 %8754, i64* %3, align 8
  %call2_4411fa = tail call %struct.Memory* @sub_444d50.pop_owl(%struct.State* nonnull %0, i64 %8754, %struct.Memory* %call2_4411d9)
  %8759 = load i64, i64* %RBP.i, align 8
  %8760 = add i64 %8759, -40
  %8761 = load i64, i64* %3, align 8
  store i64 %8760, i64* %RDI.i3802.pre-phi, align 8
  %8762 = add i64 %8761, 15185
  %8763 = add i64 %8761, 9
  %8764 = load i64, i64* %6, align 8
  %8765 = add i64 %8764, -8
  %8766 = inttoptr i64 %8765 to i64*
  store i64 %8763, i64* %8766, align 8
  store i64 %8765, i64* %6, align 8
  store i64 %8762, i64* %3, align 8
  %call2_441203 = tail call %struct.Memory* @sub_444d50.pop_owl(%struct.State* nonnull %0, i64 %8762, %struct.Memory* %call2_4411fa)
  %8767 = load i64, i64* %3, align 8
  %8768 = add i64 %8767, 28
  store i64 %8768, i64* %3, align 8
  br label %block_.L_441224

block_.L_44120d:                                  ; preds = %block_4411e8, %block_.L_441138
  %8769 = phi i64 [ %8752, %block_4411e8 ], [ %8727, %block_.L_441138 ]
  store i64 400, i64* %RAX.i3798, align 8
  store i64 400, i64* %RDX.i4419, align 8
  %8770 = add i64 %8712, -1232
  store i64 %8770, i64* %RSI.i3811.pre-phi, align 8
  %8771 = add i64 %8712, -40
  %8772 = add i64 %8769, 18
  store i64 %8772, i64* %3, align 8
  %8773 = inttoptr i64 %8771 to i64*
  %8774 = load i64, i64* %8773, align 8
  store i64 %8774, i64* %RDI.i3802.pre-phi, align 8
  %8775 = add i64 %8769, -262429
  %8776 = add i64 %8769, 23
  %8777 = load i64, i64* %6, align 8
  %8778 = add i64 %8777, -8
  %8779 = inttoptr i64 %8778 to i64*
  store i64 %8776, i64* %8779, align 8
  store i64 %8778, i64* %6, align 8
  store i64 %8775, i64* %3, align 8
  %8780 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %call2_4411d9)
  %.pre448 = load i64, i64* %3, align 8
  br label %block_.L_441224

block_.L_441224:                                  ; preds = %block_.L_44120d, %block_4411f6
  %8781 = phi i64 [ %.pre448, %block_.L_44120d ], [ %8768, %block_4411f6 ]
  %MEMORY.128 = phi %struct.Memory* [ %8780, %block_.L_44120d ], [ %call2_441203, %block_4411f6 ]
  %8782 = add i64 %8781, 5
  store i64 %8782, i64* %3, align 8
  br label %block_.L_441229

block_.L_441229:                                  ; preds = %block_.L_441224, %block_4410de
  %storemerge221 = phi i64 [ %8499, %block_4410de ], [ %8782, %block_.L_441224 ]
  %MEMORY.129 = phi %struct.Memory* [ %MEMORY.120, %block_4410de ], [ %MEMORY.128, %block_.L_441224 ]
  %8783 = add i64 %storemerge221, -210121
  %8784 = add i64 %storemerge221, 5
  %8785 = load i64, i64* %6, align 8
  %8786 = add i64 %8785, -8
  %8787 = inttoptr i64 %8786 to i64*
  store i64 %8784, i64* %8787, align 8
  store i64 %8786, i64* %6, align 8
  store i64 %8783, i64* %3, align 8
  %call2_441229 = tail call %struct.Memory* @sub_40dd60.popgo(%struct.State* nonnull %0, i64 %8783, %struct.Memory* %MEMORY.129)
  %8788 = load i64, i64* %RBP.i, align 8
  %8789 = add i64 %8788, -1716
  %8790 = load i64, i64* %3, align 8
  %8791 = add i64 %8790, 7
  store i64 %8791, i64* %3, align 8
  %8792 = inttoptr i64 %8789 to i32*
  %8793 = load i32, i32* %8792, align 4
  store i8 0, i8* %31, align 1
  %8794 = and i32 %8793, 255
  %8795 = tail call i32 @llvm.ctpop.i32(i32 %8794)
  %8796 = trunc i32 %8795 to i8
  %8797 = and i8 %8796, 1
  %8798 = xor i8 %8797, 1
  store i8 %8798, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8799 = icmp eq i32 %8793, 0
  %8800 = zext i1 %8799 to i8
  store i8 %8800, i8* %47, align 1
  %8801 = lshr i32 %8793, 31
  %8802 = trunc i32 %8801 to i8
  store i8 %8802, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v560 = select i1 %8799, i64 13, i64 261
  %8803 = add i64 %8790, %.v560
  store i64 %8803, i64* %3, align 8
  %8804 = add i64 %8788, -1712
  br i1 %8799, label %block_44123b, label %block_.L_441229.block_.L_441333_crit_edge

block_.L_441229.block_.L_441333_crit_edge:        ; preds = %block_.L_441229
  %.pre473 = inttoptr i64 %8804 to i32*
  br label %block_.L_441333

block_44123b:                                     ; preds = %block_.L_441229
  %8805 = add i64 %8803, 7
  store i64 %8805, i64* %3, align 8
  %8806 = inttoptr i64 %8804 to i32*
  %8807 = load i32, i32* %8806, align 4
  %8808 = add i32 %8807, -1
  %8809 = icmp eq i32 %8807, 0
  %8810 = zext i1 %8809 to i8
  store i8 %8810, i8* %31, align 1
  %8811 = and i32 %8808, 255
  %8812 = tail call i32 @llvm.ctpop.i32(i32 %8811)
  %8813 = trunc i32 %8812 to i8
  %8814 = and i8 %8813, 1
  %8815 = xor i8 %8814, 1
  store i8 %8815, i8* %38, align 1
  %8816 = xor i32 %8808, %8807
  %8817 = lshr i32 %8816, 4
  %8818 = trunc i32 %8817 to i8
  %8819 = and i8 %8818, 1
  store i8 %8819, i8* %44, align 1
  %8820 = icmp eq i32 %8808, 0
  %8821 = zext i1 %8820 to i8
  store i8 %8821, i8* %47, align 1
  %8822 = lshr i32 %8808, 31
  %8823 = trunc i32 %8822 to i8
  store i8 %8823, i8* %50, align 1
  %8824 = lshr i32 %8807, 31
  %8825 = xor i32 %8822, %8824
  %8826 = add nuw nsw i32 %8825, %8824
  %8827 = icmp eq i32 %8826, 2
  %8828 = zext i1 %8827 to i8
  store i8 %8828, i8* %56, align 1
  %.v567 = select i1 %8820, i64 13, i64 248
  %8829 = add i64 %8803, %.v567
  store i64 %8829, i64* %3, align 8
  br i1 %8820, label %block_441248, label %block_.L_441333

block_441248:                                     ; preds = %block_44123b
  %8830 = add i64 %8788, -64
  %8831 = add i64 %8829, 4
  store i64 %8831, i64* %3, align 8
  %8832 = inttoptr i64 %8830 to i64*
  %8833 = load i64, i64* %8832, align 8
  store i64 %8833, i64* %RAX.i3798, align 8
  %8834 = add i64 %8829, 10
  store i64 %8834, i64* %3, align 8
  %8835 = inttoptr i64 %8833 to i32*
  store i32 1, i32* %8835, align 4
  %8836 = load i64, i64* %RBP.i, align 8
  %8837 = add i64 %8836, -72
  %8838 = load i64, i64* %3, align 8
  %8839 = add i64 %8838, 4
  store i64 %8839, i64* %3, align 8
  %8840 = inttoptr i64 %8837 to i64*
  %8841 = load i64, i64* %8840, align 8
  store i64 %8841, i64* %RAX.i3798, align 8
  %8842 = add i64 %8838, 10
  store i64 %8842, i64* %3, align 8
  %8843 = inttoptr i64 %8841 to i32*
  store i32 0, i32* %8843, align 4
  %8844 = load i64, i64* %RBP.i, align 8
  %8845 = add i64 %8844, -3392
  %8846 = load i64, i64* %3, align 8
  %8847 = add i64 %8846, 6
  store i64 %8847, i64* %3, align 8
  %8848 = inttoptr i64 %8845 to i32*
  %8849 = load i32, i32* %8848, align 4
  %8850 = zext i32 %8849 to i64
  store i64 %8850, i64* %RCX.i4416, align 8
  %8851 = add i64 %8844, -80
  %8852 = add i64 %8846, 10
  store i64 %8852, i64* %3, align 8
  %8853 = inttoptr i64 %8851 to i64*
  %8854 = load i64, i64* %8853, align 8
  store i64 %8854, i64* %RAX.i3798, align 8
  %8855 = add i64 %8846, 12
  store i64 %8855, i64* %3, align 8
  %8856 = inttoptr i64 %8854 to i32*
  store i32 %8849, i32* %8856, align 4
  %8857 = load i64, i64* %3, align 8
  %8858 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i8 0, i8* %31, align 1
  %8859 = trunc i64 %8858 to i32
  %8860 = and i32 %8859, 255
  %8861 = tail call i32 @llvm.ctpop.i32(i32 %8860)
  %8862 = trunc i32 %8861 to i8
  %8863 = and i8 %8862, 1
  %8864 = xor i8 %8863, 1
  store i8 %8864, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8865 = icmp eq i64 %8858, 0
  %8866 = zext i1 %8865 to i8
  store i8 %8866, i8* %47, align 1
  %8867 = lshr i64 %8858, 63
  %8868 = trunc i64 %8867 to i8
  store i8 %8868, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v568 = select i1 %8865, i64 76, i64 15
  %8869 = add i64 %8857, %.v568
  store i64 %8869, i64* %3, align 8
  br i1 %8865, label %block_.L_4412b4, label %block_441277

block_441277:                                     ; preds = %block_441248
  store i64 1, i64* %.pre-phi, align 8
  %8870 = load i64, i64* %RBP.i, align 8
  %8871 = add i64 %8870, -736
  store i64 %8871, i64* %RAX.i3798, align 8
  %8872 = add i64 %8870, -1744
  %8873 = add i64 %8869, 20
  store i64 %8873, i64* %3, align 8
  %8874 = inttoptr i64 %8872 to i64*
  %8875 = load i64, i64* %8874, align 8
  store i64 %8875, i64* %RDI.i3802.pre-phi, align 8
  %8876 = add i64 %8870, -1748
  %8877 = add i64 %8869, 26
  store i64 %8877, i64* %3, align 8
  %8878 = inttoptr i64 %8876 to i32*
  %8879 = load i32, i32* %8878, align 4
  %8880 = zext i32 %8879 to i64
  store i64 %8880, i64* %RSI.i3811.pre-phi, align 8
  %8881 = add i64 %8870, -1752
  %8882 = add i64 %8869, 32
  store i64 %8882, i64* %3, align 8
  %8883 = inttoptr i64 %8881 to i32*
  %8884 = load i32, i32* %8883, align 4
  %8885 = zext i32 %8884 to i64
  store i64 %8885, i64* %RDX.i4419, align 8
  %8886 = add i64 %8870, -3392
  %8887 = add i64 %8869, 38
  store i64 %8887, i64* %3, align 8
  %8888 = inttoptr i64 %8886 to i32*
  %8889 = load i32, i32* %8888, align 4
  %8890 = zext i32 %8889 to i64
  store i64 %8890, i64* %RCX.i4416, align 8
  %8891 = add i64 %8870, -1668
  %8892 = add i64 %8869, 45
  store i64 %8892, i64* %3, align 8
  %8893 = inttoptr i64 %8891 to i32*
  %8894 = load i32, i32* %8893, align 4
  %8895 = sext i32 %8894 to i64
  %8896 = shl nsw i64 %8895, 5
  store i64 %8896, i64* %R9.i4411, align 8
  %8897 = add i64 %8896, %8871
  store i64 %8897, i64* %RAX.i3798, align 8
  %8898 = icmp ult i64 %8897, %8871
  %8899 = icmp ult i64 %8897, %8896
  %8900 = or i1 %8898, %8899
  %8901 = zext i1 %8900 to i8
  store i8 %8901, i8* %31, align 1
  %8902 = trunc i64 %8897 to i32
  %8903 = and i32 %8902, 255
  %8904 = tail call i32 @llvm.ctpop.i32(i32 %8903)
  %8905 = trunc i32 %8904 to i8
  %8906 = and i8 %8905, 1
  %8907 = xor i8 %8906, 1
  store i8 %8907, i8* %38, align 1
  %8908 = xor i64 %8871, %8897
  %8909 = lshr i64 %8908, 4
  %8910 = trunc i64 %8909 to i8
  %8911 = and i8 %8910, 1
  store i8 %8911, i8* %44, align 1
  %8912 = icmp eq i64 %8897, 0
  %8913 = zext i1 %8912 to i8
  store i8 %8913, i8* %47, align 1
  %8914 = lshr i64 %8897, 63
  %8915 = trunc i64 %8914 to i8
  store i8 %8915, i8* %50, align 1
  %8916 = lshr i64 %8871, 63
  %8917 = lshr i64 %8895, 58
  %8918 = and i64 %8917, 1
  %8919 = xor i64 %8914, %8916
  %8920 = xor i64 %8914, %8918
  %8921 = add nuw nsw i64 %8919, %8920
  %8922 = icmp eq i64 %8921, 2
  %8923 = zext i1 %8922 to i8
  store i8 %8923, i8* %56, align 1
  %8924 = add i64 %8897, 8
  %8925 = add i64 %8869, 56
  store i64 %8925, i64* %3, align 8
  %8926 = inttoptr i64 %8924 to i64*
  %8927 = load i64, i64* %8926, align 8
  store i64 %8927, i64* %R9.i4411, align 8
  %8928 = add i64 %8869, -167767
  %8929 = add i64 %8869, 61
  %8930 = load i64, i64* %6, align 8
  %8931 = add i64 %8930, -8
  %8932 = inttoptr i64 %8931 to i64*
  store i64 %8929, i64* %8932, align 8
  store i64 %8931, i64* %6, align 8
  store i64 %8928, i64* %3, align 8
  %call2_4412af = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %8928, %struct.Memory* %call2_441229)
  %.pre449 = load i64, i64* %3, align 8
  br label %block_.L_4412b4

block_.L_4412b4:                                  ; preds = %block_441277, %block_441248
  %8933 = phi i64 [ %8869, %block_441248 ], [ %.pre449, %block_441277 ]
  %MEMORY.130 = phi %struct.Memory* [ %call2_441229, %block_441248 ], [ %call2_4412af, %block_441277 ]
  %8934 = load i64, i64* %RBP.i, align 8
  %8935 = add i64 %8934, -544
  store i64 %8935, i64* %RSI.i3811.pre-phi, align 8
  %8936 = add i64 %8934, -92
  %8937 = add i64 %8933, 10
  store i64 %8937, i64* %3, align 8
  %8938 = inttoptr i64 %8936 to i32*
  %8939 = load i32, i32* %8938, align 4
  %8940 = zext i32 %8939 to i64
  store i64 %8940, i64* %RDI.i3802.pre-phi, align 8
  %8941 = add i64 %8933, 13100
  %8942 = add i64 %8933, 15
  %8943 = load i64, i64* %6, align 8
  %8944 = add i64 %8943, -8
  %8945 = inttoptr i64 %8944 to i64*
  store i64 %8942, i64* %8945, align 8
  store i64 %8944, i64* %6, align 8
  store i64 %8941, i64* %3, align 8
  %call2_4412be = tail call %struct.Memory* @sub_4445e0.close_pattern_list(%struct.State* nonnull %0, i64 %8941, %struct.Memory* %MEMORY.130)
  %8946 = load i64, i64* %RBP.i, align 8
  %8947 = add i64 %8946, -512
  %8948 = load i64, i64* %3, align 8
  store i64 %8947, i64* %RSI.i3811.pre-phi, align 8
  %8949 = add i64 %8946, -92
  %8950 = add i64 %8948, 10
  store i64 %8950, i64* %3, align 8
  %8951 = inttoptr i64 %8949 to i32*
  %8952 = load i32, i32* %8951, align 4
  %8953 = zext i32 %8952 to i64
  store i64 %8953, i64* %RDI.i3802.pre-phi, align 8
  %8954 = add i64 %8948, 13085
  %8955 = add i64 %8948, 15
  %8956 = load i64, i64* %6, align 8
  %8957 = add i64 %8956, -8
  %8958 = inttoptr i64 %8957 to i64*
  store i64 %8955, i64* %8958, align 8
  store i64 %8957, i64* %6, align 8
  store i64 %8954, i64* %3, align 8
  %call2_4412cd = tail call %struct.Memory* @sub_4445e0.close_pattern_list(%struct.State* nonnull %0, i64 %8954, %struct.Memory* %call2_4412be)
  %8959 = load i64, i64* %RBP.i, align 8
  %8960 = add i64 %8959, -80
  %8961 = load i64, i64* %3, align 8
  %8962 = add i64 %8961, 5
  store i64 %8962, i64* %3, align 8
  %8963 = inttoptr i64 %8960 to i64*
  %8964 = load i64, i64* %8963, align 8
  store i8 0, i8* %31, align 1
  %8965 = trunc i64 %8964 to i32
  %8966 = and i32 %8965, 255
  %8967 = tail call i32 @llvm.ctpop.i32(i32 %8966)
  %8968 = trunc i32 %8967 to i8
  %8969 = and i8 %8968, 1
  %8970 = xor i8 %8969, 1
  store i8 %8970, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8971 = icmp eq i64 %8964, 0
  %8972 = zext i1 %8971 to i8
  store i8 %8972, i8* %47, align 1
  %8973 = lshr i64 %8964, 63
  %8974 = trunc i64 %8973 to i8
  store i8 %8974, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v569 = select i1 %8971, i64 23, i64 11
  %8975 = add i64 %8961, %.v569
  store i64 %8975, i64* %3, align 8
  br i1 %8971, label %block_.L_4412e9, label %block_4412dd

block_4412dd:                                     ; preds = %block_.L_4412b4
  %8976 = add i64 %8959, -3392
  %8977 = add i64 %8975, 6
  store i64 %8977, i64* %3, align 8
  %8978 = inttoptr i64 %8976 to i32*
  %8979 = load i32, i32* %8978, align 4
  %8980 = zext i32 %8979 to i64
  store i64 %8980, i64* %RAX.i3798, align 8
  %8981 = add i64 %8975, 10
  store i64 %8981, i64* %3, align 8
  %8982 = load i64, i64* %8963, align 8
  store i64 %8982, i64* %RCX.i4416, align 8
  %8983 = add i64 %8975, 12
  store i64 %8983, i64* %3, align 8
  %8984 = inttoptr i64 %8982 to i32*
  store i32 %8979, i32* %8984, align 4
  %.pre450 = load i64, i64* %RBP.i, align 8
  %.pre451 = load i64, i64* %3, align 8
  br label %block_.L_4412e9

block_.L_4412e9:                                  ; preds = %block_4412dd, %block_.L_4412b4
  %8985 = phi i64 [ %.pre451, %block_4412dd ], [ %8975, %block_.L_4412b4 ]
  %8986 = phi i64 [ %.pre450, %block_4412dd ], [ %8959, %block_.L_4412b4 ]
  %8987 = add i64 %8986, -1728
  %8988 = add i64 %8985, 8
  store i64 %8988, i64* %3, align 8
  %8989 = inttoptr i64 %8987 to i64*
  %8990 = load i64, i64* %8989, align 8
  store i8 0, i8* %31, align 1
  %8991 = trunc i64 %8990 to i32
  %8992 = and i32 %8991, 255
  %8993 = tail call i32 @llvm.ctpop.i32(i32 %8992)
  %8994 = trunc i32 %8993 to i8
  %8995 = and i8 %8994, 1
  %8996 = xor i8 %8995, 1
  store i8 %8996, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %8997 = icmp eq i64 %8990, 0
  %8998 = zext i1 %8997 to i8
  store i8 %8998, i8* %47, align 1
  %8999 = lshr i64 %8990, 63
  %9000 = trunc i64 %8999 to i8
  store i8 %9000, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v570 = select i1 %8997, i64 69, i64 14
  %9001 = add i64 %8985, %.v570
  store i64 %9001, i64* %3, align 8
  br i1 %8997, label %block_.L_441708, label %block_4412f7

block_4412f7:                                     ; preds = %block_.L_4412e9
  %9002 = add i64 %9001, 7
  store i64 %9002, i64* %3, align 8
  %9003 = load i64, i64* %8989, align 8
  store i64 %9003, i64* %RAX.i3798, align 8
  %9004 = add i64 %9003, 4
  %9005 = add i64 %9001, 10
  store i64 %9005, i64* %3, align 8
  %9006 = inttoptr i64 %9004 to i32*
  %9007 = load i32, i32* %9006, align 4
  %9008 = and i32 %9007, 1023
  %9009 = or i32 %9008, 553648128
  %9010 = zext i32 %9009 to i64
  store i64 %9010, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9011 = and i32 %9007, 255
  %9012 = tail call i32 @llvm.ctpop.i32(i32 %9011)
  %9013 = trunc i32 %9012 to i8
  %9014 = and i8 %9013, 1
  %9015 = xor i8 %9014, 1
  store i8 %9015, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9016 = add i64 %8986, -3392
  %9017 = add i64 %9001, 34
  store i64 %9017, i64* %3, align 8
  %9018 = inttoptr i64 %9016 to i32*
  %9019 = load i32, i32* %9018, align 4
  %9020 = shl i32 %9019, 10
  %9021 = and i32 %9020, 1047552
  %9022 = zext i32 %9021 to i64
  store i64 %9022, i64* %RDX.i4419, align 8
  %9023 = or i32 %9021, %9009
  %9024 = zext i32 %9023 to i64
  store i64 %9024, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9025 = and i32 %9007, 255
  %9026 = tail call i32 @llvm.ctpop.i32(i32 %9025)
  %9027 = trunc i32 %9026 to i8
  %9028 = and i8 %9027, 1
  %9029 = xor i8 %9028, 1
  store i8 %9029, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9030 = load i64, i64* %RBP.i, align 8
  %9031 = add i64 %9030, -1728
  %9032 = add i64 %9001, 52
  store i64 %9032, i64* %3, align 8
  %9033 = inttoptr i64 %9031 to i64*
  %9034 = load i64, i64* %9033, align 8
  store i64 %9034, i64* %RAX.i3798, align 8
  %9035 = add i64 %9034, 4
  %9036 = add i64 %9001, 55
  store i64 %9036, i64* %3, align 8
  %9037 = inttoptr i64 %9035 to i32*
  store i32 %9023, i32* %9037, align 4
  br label %block_.L_441708

block_.L_441333:                                  ; preds = %block_44123b, %block_.L_441229.block_.L_441333_crit_edge
  %.pre-phi474 = phi i32* [ %.pre473, %block_.L_441229.block_.L_441333_crit_edge ], [ %8806, %block_44123b ]
  %9038 = phi i64 [ %8803, %block_.L_441229.block_.L_441333_crit_edge ], [ %8829, %block_44123b ]
  %9039 = add i64 %9038, 7
  store i64 %9039, i64* %3, align 8
  %9040 = load i32, i32* %.pre-phi474, align 4
  %9041 = add i32 %9040, -7
  %9042 = icmp ult i32 %9040, 7
  %9043 = zext i1 %9042 to i8
  store i8 %9043, i8* %31, align 1
  %9044 = and i32 %9041, 255
  %9045 = tail call i32 @llvm.ctpop.i32(i32 %9044)
  %9046 = trunc i32 %9045 to i8
  %9047 = and i8 %9046, 1
  %9048 = xor i8 %9047, 1
  store i8 %9048, i8* %38, align 1
  %9049 = xor i32 %9041, %9040
  %9050 = lshr i32 %9049, 4
  %9051 = trunc i32 %9050 to i8
  %9052 = and i8 %9051, 1
  store i8 %9052, i8* %44, align 1
  %9053 = icmp eq i32 %9041, 0
  %9054 = zext i1 %9053 to i8
  store i8 %9054, i8* %47, align 1
  %9055 = lshr i32 %9041, 31
  %9056 = trunc i32 %9055 to i8
  store i8 %9056, i8* %50, align 1
  %9057 = lshr i32 %9040, 31
  %9058 = xor i32 %9055, %9057
  %9059 = add nuw nsw i32 %9058, %9057
  %9060 = icmp eq i32 %9059, 2
  %9061 = zext i1 %9060 to i8
  store i8 %9061, i8* %56, align 1
  %.v561 = select i1 %9053, i64 13, i64 83
  %9062 = add i64 %9038, %.v561
  store i64 %9062, i64* %3, align 8
  br i1 %9053, label %block_441340, label %block_.L_441386

block_441340:                                     ; preds = %block_.L_441333
  %9063 = add i64 %9062, 7
  store i64 %9063, i64* %3, align 8
  %9064 = load i32, i32* %8792, align 4
  %9065 = add i32 %9064, -7
  %9066 = icmp ult i32 %9064, 7
  %9067 = zext i1 %9066 to i8
  store i8 %9067, i8* %31, align 1
  %9068 = and i32 %9065, 255
  %9069 = tail call i32 @llvm.ctpop.i32(i32 %9068)
  %9070 = trunc i32 %9069 to i8
  %9071 = and i8 %9070, 1
  %9072 = xor i8 %9071, 1
  store i8 %9072, i8* %38, align 1
  %9073 = xor i32 %9065, %9064
  %9074 = lshr i32 %9073, 4
  %9075 = trunc i32 %9074 to i8
  %9076 = and i8 %9075, 1
  store i8 %9076, i8* %44, align 1
  %9077 = icmp eq i32 %9065, 0
  %9078 = zext i1 %9077 to i8
  store i8 %9078, i8* %47, align 1
  %9079 = lshr i32 %9065, 31
  %9080 = trunc i32 %9079 to i8
  store i8 %9080, i8* %50, align 1
  %9081 = lshr i32 %9064, 31
  %9082 = xor i32 %9079, %9081
  %9083 = add nuw nsw i32 %9082, %9081
  %9084 = icmp eq i32 %9083, 2
  %9085 = zext i1 %9084 to i8
  store i8 %9085, i8* %56, align 1
  %.v565 = select i1 %9077, i64 13, i64 70
  %9086 = add i64 %9062, %.v565
  store i64 %9086, i64* %3, align 8
  br i1 %9077, label %block_44134d, label %block_.L_441386

block_44134d:                                     ; preds = %block_441340
  %9087 = add i64 %8788, -1700
  %9088 = add i64 %9086, 7
  store i64 %9088, i64* %3, align 8
  %9089 = inttoptr i64 %9087 to i32*
  %9090 = load i32, i32* %9089, align 4
  %9091 = add i32 %9090, -1
  %9092 = icmp eq i32 %9090, 0
  %9093 = zext i1 %9092 to i8
  store i8 %9093, i8* %31, align 1
  %9094 = and i32 %9091, 255
  %9095 = tail call i32 @llvm.ctpop.i32(i32 %9094)
  %9096 = trunc i32 %9095 to i8
  %9097 = and i8 %9096, 1
  %9098 = xor i8 %9097, 1
  store i8 %9098, i8* %38, align 1
  %9099 = xor i32 %9091, %9090
  %9100 = lshr i32 %9099, 4
  %9101 = trunc i32 %9100 to i8
  %9102 = and i8 %9101, 1
  store i8 %9102, i8* %44, align 1
  %9103 = icmp eq i32 %9091, 0
  %9104 = zext i1 %9103 to i8
  store i8 %9104, i8* %47, align 1
  %9105 = lshr i32 %9091, 31
  %9106 = trunc i32 %9105 to i8
  store i8 %9106, i8* %50, align 1
  %9107 = lshr i32 %9090, 31
  %9108 = xor i32 %9105, %9107
  %9109 = add nuw nsw i32 %9108, %9107
  %9110 = icmp eq i32 %9109, 2
  %9111 = zext i1 %9110 to i8
  store i8 %9111, i8* %56, align 1
  %.v566 = select i1 %9103, i64 57, i64 13
  %9112 = add i64 %9086, %.v566
  store i64 %9112, i64* %3, align 8
  br i1 %9103, label %block_.L_441386, label %block_44135a

block_44135a:                                     ; preds = %block_44134d
  %9113 = add i64 %9112, 10
  store i64 %9113, i64* %3, align 8
  store i32 7, i32* %9089, align 4
  %9114 = load i64, i64* %RBP.i, align 8
  %9115 = add i64 %9114, -1704
  %9116 = load i64, i64* %3, align 8
  %9117 = add i64 %9116, 10
  store i64 %9117, i64* %3, align 8
  %9118 = inttoptr i64 %9115 to i32*
  store i32 7, i32* %9118, align 4
  %9119 = load i64, i64* %RBP.i, align 8
  %9120 = add i64 %9119, -3392
  %9121 = load i64, i64* %3, align 8
  %9122 = add i64 %9121, 6
  store i64 %9122, i64* %3, align 8
  %9123 = inttoptr i64 %9120 to i32*
  %9124 = load i32, i32* %9123, align 4
  %9125 = zext i32 %9124 to i64
  store i64 %9125, i64* %RAX.i3798, align 8
  %9126 = add i64 %9119, -1708
  %9127 = add i64 %9121, 12
  store i64 %9127, i64* %3, align 8
  %9128 = inttoptr i64 %9126 to i32*
  store i32 %9124, i32* %9128, align 4
  %9129 = load i64, i64* %RBP.i, align 8
  %9130 = add i64 %9129, -1668
  %9131 = load i64, i64* %3, align 8
  %9132 = add i64 %9131, 6
  store i64 %9132, i64* %3, align 8
  %9133 = inttoptr i64 %9130 to i32*
  %9134 = load i32, i32* %9133, align 4
  %9135 = zext i32 %9134 to i64
  store i64 %9135, i64* %RAX.i3798, align 8
  %9136 = add i64 %9129, -1720
  %9137 = add i64 %9131, 12
  store i64 %9137, i64* %3, align 8
  %9138 = inttoptr i64 %9136 to i32*
  store i32 %9134, i32* %9138, align 4
  %.pre452 = load i64, i64* %RBP.i, align 8
  %.pre453 = load i64, i64* %3, align 8
  br label %block_.L_441386

block_.L_441386:                                  ; preds = %block_441340, %block_.L_441333, %block_44135a, %block_44134d
  %9139 = phi i64 [ %.pre453, %block_44135a ], [ %9112, %block_44134d ], [ %9086, %block_441340 ], [ %9062, %block_.L_441333 ]
  %9140 = phi i64 [ %.pre452, %block_44135a ], [ %8788, %block_44134d ], [ %8788, %block_441340 ], [ %8788, %block_.L_441333 ]
  %9141 = add i64 %9140, -1712
  %9142 = add i64 %9139, 7
  store i64 %9142, i64* %3, align 8
  %9143 = inttoptr i64 %9141 to i32*
  %9144 = load i32, i32* %9143, align 4
  store i8 0, i8* %31, align 1
  %9145 = and i32 %9144, 255
  %9146 = tail call i32 @llvm.ctpop.i32(i32 %9145)
  %9147 = trunc i32 %9146 to i8
  %9148 = and i8 %9147, 1
  %9149 = xor i8 %9148, 1
  store i8 %9149, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9150 = icmp eq i32 %9144, 0
  %9151 = zext i1 %9150 to i8
  store i8 %9151, i8* %47, align 1
  %9152 = lshr i32 %9144, 31
  %9153 = trunc i32 %9152 to i8
  store i8 %9153, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v562 = select i1 %9150, i64 13, i64 83
  %9154 = add i64 %9139, %.v562
  store i64 %9154, i64* %3, align 8
  br i1 %9150, label %block_441393, label %block_.L_4413d9

block_441393:                                     ; preds = %block_.L_441386
  %9155 = add i64 %9140, -1716
  %9156 = add i64 %9154, 7
  store i64 %9156, i64* %3, align 8
  %9157 = inttoptr i64 %9155 to i32*
  %9158 = load i32, i32* %9157, align 4
  %9159 = add i32 %9158, -1
  %9160 = icmp eq i32 %9158, 0
  %9161 = zext i1 %9160 to i8
  store i8 %9161, i8* %31, align 1
  %9162 = and i32 %9159, 255
  %9163 = tail call i32 @llvm.ctpop.i32(i32 %9162)
  %9164 = trunc i32 %9163 to i8
  %9165 = and i8 %9164, 1
  %9166 = xor i8 %9165, 1
  store i8 %9166, i8* %38, align 1
  %9167 = xor i32 %9159, %9158
  %9168 = lshr i32 %9167, 4
  %9169 = trunc i32 %9168 to i8
  %9170 = and i8 %9169, 1
  store i8 %9170, i8* %44, align 1
  %9171 = icmp eq i32 %9159, 0
  %9172 = zext i1 %9171 to i8
  store i8 %9172, i8* %47, align 1
  %9173 = lshr i32 %9159, 31
  %9174 = trunc i32 %9173 to i8
  store i8 %9174, i8* %50, align 1
  %9175 = lshr i32 %9158, 31
  %9176 = xor i32 %9173, %9175
  %9177 = add nuw nsw i32 %9176, %9175
  %9178 = icmp eq i32 %9177, 2
  %9179 = zext i1 %9178 to i8
  store i8 %9179, i8* %56, align 1
  %.v563 = select i1 %9171, i64 13, i64 70
  %9180 = add i64 %9154, %.v563
  store i64 %9180, i64* %3, align 8
  br i1 %9171, label %block_4413a0, label %block_.L_4413d9

block_4413a0:                                     ; preds = %block_441393
  %9181 = add i64 %9140, -1700
  %9182 = add i64 %9180, 7
  store i64 %9182, i64* %3, align 8
  %9183 = inttoptr i64 %9181 to i32*
  %9184 = load i32, i32* %9183, align 4
  %9185 = add i32 %9184, -3
  %9186 = icmp ult i32 %9184, 3
  %9187 = zext i1 %9186 to i8
  store i8 %9187, i8* %31, align 1
  %9188 = and i32 %9185, 255
  %9189 = tail call i32 @llvm.ctpop.i32(i32 %9188)
  %9190 = trunc i32 %9189 to i8
  %9191 = and i8 %9190, 1
  %9192 = xor i8 %9191, 1
  store i8 %9192, i8* %38, align 1
  %9193 = xor i32 %9185, %9184
  %9194 = lshr i32 %9193, 4
  %9195 = trunc i32 %9194 to i8
  %9196 = and i8 %9195, 1
  store i8 %9196, i8* %44, align 1
  %9197 = icmp eq i32 %9185, 0
  %9198 = zext i1 %9197 to i8
  store i8 %9198, i8* %47, align 1
  %9199 = lshr i32 %9185, 31
  %9200 = trunc i32 %9199 to i8
  store i8 %9200, i8* %50, align 1
  %9201 = lshr i32 %9184, 31
  %9202 = xor i32 %9199, %9201
  %9203 = add nuw nsw i32 %9202, %9201
  %9204 = icmp eq i32 %9203, 2
  %9205 = zext i1 %9204 to i8
  store i8 %9205, i8* %56, align 1
  %.v564 = select i1 %9197, i64 13, i64 57
  %9206 = add i64 %9180, %.v564
  store i64 %9206, i64* %3, align 8
  br i1 %9197, label %block_4413ad, label %block_.L_4413d9

block_4413ad:                                     ; preds = %block_4413a0
  %9207 = add i64 %9206, 10
  store i64 %9207, i64* %3, align 8
  store i32 0, i32* %9183, align 4
  %9208 = load i64, i64* %RBP.i, align 8
  %9209 = add i64 %9208, -1704
  %9210 = load i64, i64* %3, align 8
  %9211 = add i64 %9210, 10
  store i64 %9211, i64* %3, align 8
  %9212 = inttoptr i64 %9209 to i32*
  store i32 1, i32* %9212, align 4
  %9213 = load i64, i64* %RBP.i, align 8
  %9214 = add i64 %9213, -3392
  %9215 = load i64, i64* %3, align 8
  %9216 = add i64 %9215, 6
  store i64 %9216, i64* %3, align 8
  %9217 = inttoptr i64 %9214 to i32*
  %9218 = load i32, i32* %9217, align 4
  %9219 = zext i32 %9218 to i64
  store i64 %9219, i64* %RAX.i3798, align 8
  %9220 = add i64 %9213, -1708
  %9221 = add i64 %9215, 12
  store i64 %9221, i64* %3, align 8
  %9222 = inttoptr i64 %9220 to i32*
  store i32 %9218, i32* %9222, align 4
  %9223 = load i64, i64* %RBP.i, align 8
  %9224 = add i64 %9223, -1668
  %9225 = load i64, i64* %3, align 8
  %9226 = add i64 %9225, 6
  store i64 %9226, i64* %3, align 8
  %9227 = inttoptr i64 %9224 to i32*
  %9228 = load i32, i32* %9227, align 4
  %9229 = zext i32 %9228 to i64
  store i64 %9229, i64* %RAX.i3798, align 8
  %9230 = add i64 %9223, -1720
  %9231 = add i64 %9225, 12
  store i64 %9231, i64* %3, align 8
  %9232 = inttoptr i64 %9230 to i32*
  store i32 %9228, i32* %9232, align 4
  %.pre454 = load i64, i64* %3, align 8
  br label %block_.L_4413d9

block_.L_4413d9:                                  ; preds = %block_4413a0, %block_441393, %block_.L_441386, %block_4413ad
  %9233 = phi i64 [ %.pre454, %block_4413ad ], [ %9206, %block_4413a0 ], [ %9180, %block_441393 ], [ %9154, %block_.L_441386 ]
  %9234 = add i64 %9233, 5
  store i64 %9234, i64* %3, align 8
  br label %block_.L_4413de

block_.L_4413de:                                  ; preds = %block_441041, %block_44102d, %block_.L_4413d9, %block_44104f, %block_.L_441020
  %9235 = phi i64 [ %8271, %block_.L_441020 ], [ %8301, %block_44102d ], [ %8324, %block_441041 ], [ %8443, %block_44104f ], [ %9234, %block_.L_4413d9 ]
  %MEMORY.136 = phi %struct.Memory* [ %MEMORY.120, %block_.L_441020 ], [ %MEMORY.120, %block_44102d ], [ %MEMORY.120, %block_441041 ], [ %MEMORY.120, %block_44104f ], [ %call2_441229, %block_.L_4413d9 ]
  %9236 = add i64 %9235, 5
  store i64 %9236, i64* %3, align 8
  %.pre455 = load i64, i64* %RBP.i, align 8
  br label %block_.L_4413e3

block_.L_4413e3:                                  ; preds = %block_.L_4413de, %block_.L_44101b
  %9237 = phi i64 [ %8134, %block_.L_44101b ], [ %.pre455, %block_.L_4413de ]
  %storemerge217 = phi i64 [ %8256, %block_.L_44101b ], [ %9236, %block_.L_4413de ]
  %MEMORY.137 = phi %struct.Memory* [ %MEMORY.120, %block_.L_44101b ], [ %MEMORY.136, %block_.L_4413de ]
  %9238 = add i64 %9237, -1668
  %9239 = add i64 %storemerge217, 6
  store i64 %9239, i64* %3, align 8
  %9240 = inttoptr i64 %9238 to i32*
  %9241 = load i32, i32* %9240, align 4
  %9242 = add i32 %9241, 1
  %9243 = zext i32 %9242 to i64
  store i64 %9243, i64* %RAX.i3798, align 8
  %9244 = icmp eq i32 %9241, -1
  %9245 = icmp eq i32 %9242, 0
  %9246 = or i1 %9244, %9245
  %9247 = zext i1 %9246 to i8
  store i8 %9247, i8* %31, align 1
  %9248 = and i32 %9242, 255
  %9249 = tail call i32 @llvm.ctpop.i32(i32 %9248)
  %9250 = trunc i32 %9249 to i8
  %9251 = and i8 %9250, 1
  %9252 = xor i8 %9251, 1
  store i8 %9252, i8* %38, align 1
  %9253 = xor i32 %9242, %9241
  %9254 = lshr i32 %9253, 4
  %9255 = trunc i32 %9254 to i8
  %9256 = and i8 %9255, 1
  store i8 %9256, i8* %44, align 1
  %9257 = zext i1 %9245 to i8
  store i8 %9257, i8* %47, align 1
  %9258 = lshr i32 %9242, 31
  %9259 = trunc i32 %9258 to i8
  store i8 %9259, i8* %50, align 1
  %9260 = lshr i32 %9241, 31
  %9261 = xor i32 %9258, %9260
  %9262 = add nuw nsw i32 %9261, %9258
  %9263 = icmp eq i32 %9262, 2
  %9264 = zext i1 %9263 to i8
  store i8 %9264, i8* %56, align 1
  %9265 = add i64 %storemerge217, 15
  store i64 %9265, i64* %3, align 8
  store i32 %9242, i32* %9240, align 4
  %9266 = load i64, i64* %3, align 8
  %9267 = add i64 %9266, -1092
  store i64 %9267, i64* %3, align 8
  br label %block_.L_440fae

block_.L_4413f7:                                  ; preds = %block_.L_440fae
  %9268 = add i64 %8066, -544
  store i64 %9268, i64* %RSI.i3811.pre-phi, align 8
  %9269 = add i64 %8066, -92
  %9270 = add i64 %8094, 10
  store i64 %9270, i64* %3, align 8
  %9271 = inttoptr i64 %9269 to i32*
  %9272 = load i32, i32* %9271, align 4
  %9273 = zext i32 %9272 to i64
  store i64 %9273, i64* %RDI.i3802.pre-phi, align 8
  %9274 = add i64 %8094, 12777
  %9275 = add i64 %8094, 15
  %9276 = load i64, i64* %6, align 8
  %9277 = add i64 %9276, -8
  %9278 = inttoptr i64 %9277 to i64*
  store i64 %9275, i64* %9278, align 8
  store i64 %9277, i64* %6, align 8
  store i64 %9274, i64* %3, align 8
  %call2_441401 = tail call %struct.Memory* @sub_4445e0.close_pattern_list(%struct.State* nonnull %0, i64 %9274, %struct.Memory* %MEMORY.120)
  %9279 = load i64, i64* %RBP.i, align 8
  %9280 = add i64 %9279, -512
  %9281 = load i64, i64* %3, align 8
  store i64 %9280, i64* %RSI.i3811.pre-phi, align 8
  %9282 = add i64 %9279, -92
  %9283 = add i64 %9281, 10
  store i64 %9283, i64* %3, align 8
  %9284 = inttoptr i64 %9282 to i32*
  %9285 = load i32, i32* %9284, align 4
  %9286 = zext i32 %9285 to i64
  store i64 %9286, i64* %RDI.i3802.pre-phi, align 8
  %9287 = add i64 %9281, 12762
  %9288 = add i64 %9281, 15
  %9289 = load i64, i64* %6, align 8
  %9290 = add i64 %9289, -8
  %9291 = inttoptr i64 %9290 to i64*
  store i64 %9288, i64* %9291, align 8
  store i64 %9290, i64* %6, align 8
  store i64 %9287, i64* %3, align 8
  %call2_441410 = tail call %struct.Memory* @sub_4445e0.close_pattern_list(%struct.State* nonnull %0, i64 %9287, %struct.Memory* %call2_441401)
  %9292 = load i64, i64* %RBP.i, align 8
  %9293 = add i64 %9292, -1700
  %9294 = load i64, i64* %3, align 8
  %9295 = add i64 %9294, 7
  store i64 %9295, i64* %3, align 8
  %9296 = inttoptr i64 %9293 to i32*
  %9297 = load i32, i32* %9296, align 4
  %9298 = add i32 %9297, -3
  %9299 = icmp ult i32 %9297, 3
  %9300 = zext i1 %9299 to i8
  store i8 %9300, i8* %31, align 1
  %9301 = and i32 %9298, 255
  %9302 = tail call i32 @llvm.ctpop.i32(i32 %9301)
  %9303 = trunc i32 %9302 to i8
  %9304 = and i8 %9303, 1
  %9305 = xor i8 %9304, 1
  store i8 %9305, i8* %38, align 1
  %9306 = xor i32 %9298, %9297
  %9307 = lshr i32 %9306, 4
  %9308 = trunc i32 %9307 to i8
  %9309 = and i8 %9308, 1
  store i8 %9309, i8* %44, align 1
  %9310 = icmp eq i32 %9298, 0
  %9311 = zext i1 %9310 to i8
  store i8 %9311, i8* %47, align 1
  %9312 = lshr i32 %9298, 31
  %9313 = trunc i32 %9312 to i8
  store i8 %9313, i8* %50, align 1
  %9314 = lshr i32 %9297, 31
  %9315 = xor i32 %9312, %9314
  %9316 = add nuw nsw i32 %9315, %9314
  %9317 = icmp eq i32 %9316, 2
  %9318 = zext i1 %9317 to i8
  store i8 %9318, i8* %56, align 1
  %.v529 = select i1 %9310, i64 13, i64 199
  %9319 = add i64 %9294, %.v529
  store i64 %9319, i64* %3, align 8
  br i1 %9310, label %block_441422, label %block_.L_4414dc

block_441422:                                     ; preds = %block_.L_4413f7
  %9320 = add i64 %9292, -84
  %9321 = add i64 %9319, 4
  store i64 %9321, i64* %3, align 8
  %9322 = inttoptr i64 %9320 to i32*
  %9323 = load i32, i32* %9322, align 4
  %9324 = add i32 %9323, -1
  %9325 = icmp eq i32 %9323, 0
  %9326 = zext i1 %9325 to i8
  store i8 %9326, i8* %31, align 1
  %9327 = and i32 %9324, 255
  %9328 = tail call i32 @llvm.ctpop.i32(i32 %9327)
  %9329 = trunc i32 %9328 to i8
  %9330 = and i8 %9329, 1
  %9331 = xor i8 %9330, 1
  store i8 %9331, i8* %38, align 1
  %9332 = xor i32 %9324, %9323
  %9333 = lshr i32 %9332, 4
  %9334 = trunc i32 %9333 to i8
  %9335 = and i8 %9334, 1
  store i8 %9335, i8* %44, align 1
  %9336 = icmp eq i32 %9324, 0
  %9337 = zext i1 %9336 to i8
  store i8 %9337, i8* %47, align 1
  %9338 = lshr i32 %9324, 31
  %9339 = trunc i32 %9338 to i8
  store i8 %9339, i8* %50, align 1
  %9340 = lshr i32 %9323, 31
  %9341 = xor i32 %9338, %9340
  %9342 = add nuw nsw i32 %9341, %9340
  %9343 = icmp eq i32 %9342, 2
  %9344 = zext i1 %9343 to i8
  store i8 %9344, i8* %56, align 1
  %.v540 = select i1 %9336, i64 10, i64 186
  %9345 = add i64 %9319, %.v540
  store i64 %9345, i64* %3, align 8
  br i1 %9336, label %block_44142c, label %block_.L_4414dc

block_44142c:                                     ; preds = %block_441422
  %9346 = add i64 %9292, -64
  %9347 = add i64 %9345, 4
  store i64 %9347, i64* %3, align 8
  %9348 = inttoptr i64 %9346 to i64*
  %9349 = load i64, i64* %9348, align 8
  store i64 %9349, i64* %RAX.i3798, align 8
  %9350 = add i64 %9345, 10
  store i64 %9350, i64* %3, align 8
  %9351 = inttoptr i64 %9349 to i32*
  store i32 7, i32* %9351, align 4
  %9352 = load i64, i64* %RBP.i, align 8
  %9353 = add i64 %9352, -72
  %9354 = load i64, i64* %3, align 8
  %9355 = add i64 %9354, 4
  store i64 %9355, i64* %3, align 8
  %9356 = inttoptr i64 %9353 to i64*
  %9357 = load i64, i64* %9356, align 8
  store i64 %9357, i64* %RAX.i3798, align 8
  %9358 = add i64 %9354, 10
  store i64 %9358, i64* %3, align 8
  %9359 = inttoptr i64 %9357 to i32*
  store i32 7, i32* %9359, align 4
  %9360 = load i64, i64* %RBP.i, align 8
  %9361 = add i64 %9360, -80
  %9362 = load i64, i64* %3, align 8
  %9363 = add i64 %9362, 4
  store i64 %9363, i64* %3, align 8
  %9364 = inttoptr i64 %9361 to i64*
  %9365 = load i64, i64* %9364, align 8
  store i64 %9365, i64* %RAX.i3798, align 8
  %9366 = add i64 %9362, 10
  store i64 %9366, i64* %3, align 8
  %9367 = inttoptr i64 %9365 to i32*
  store i32 0, i32* %9367, align 4
  %9368 = load i64, i64* %3, align 8
  %9369 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i8 0, i8* %31, align 1
  %9370 = trunc i64 %9369 to i32
  %9371 = and i32 %9370, 255
  %9372 = tail call i32 @llvm.ctpop.i32(i32 %9371)
  %9373 = trunc i32 %9372 to i8
  %9374 = and i8 %9373, 1
  %9375 = xor i8 %9374, 1
  store i8 %9375, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9376 = icmp eq i64 %9369, 0
  %9377 = zext i1 %9376 to i8
  store i8 %9377, i8* %47, align 1
  %9378 = lshr i64 %9369, 63
  %9379 = trunc i64 %9378 to i8
  store i8 %9379, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v541 = select i1 %9376, i64 57, i64 15
  %9380 = add i64 %9368, %.v541
  store i64 %9380, i64* %3, align 8
  br i1 %9376, label %block_.L_441483, label %block_441459

block_441459:                                     ; preds = %block_44142c
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 7, i64* %.pre-phi, align 8
  store i64 ptrtoint (%G__0x57dfe1_type* @G__0x57dfe1 to i64), i64* %R9.i4411, align 8
  %9381 = load i64, i64* %RBP.i, align 8
  %9382 = add i64 %9381, -1744
  %9383 = add i64 %9380, 25
  store i64 %9383, i64* %3, align 8
  %9384 = inttoptr i64 %9382 to i64*
  %9385 = load i64, i64* %9384, align 8
  store i64 %9385, i64* %RDI.i3802.pre-phi, align 8
  %9386 = add i64 %9381, -1748
  %9387 = add i64 %9380, 31
  store i64 %9387, i64* %3, align 8
  %9388 = inttoptr i64 %9386 to i32*
  %9389 = load i32, i32* %9388, align 4
  %9390 = zext i32 %9389 to i64
  store i64 %9390, i64* %RSI.i3811.pre-phi, align 8
  %9391 = add i64 %9381, -1752
  %9392 = add i64 %9380, 37
  store i64 %9392, i64* %3, align 8
  %9393 = inttoptr i64 %9391 to i32*
  %9394 = load i32, i32* %9393, align 4
  %9395 = zext i32 %9394 to i64
  store i64 %9395, i64* %RDX.i4419, align 8
  %9396 = add i64 %9380, -168249
  %9397 = add i64 %9380, 42
  %9398 = load i64, i64* %6, align 8
  %9399 = add i64 %9398, -8
  %9400 = inttoptr i64 %9399 to i64*
  store i64 %9397, i64* %9400, align 8
  store i64 %9399, i64* %6, align 8
  store i64 %9396, i64* %3, align 8
  %call2_44147e = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %9396, %struct.Memory* %call2_441410)
  %.pre435 = load i64, i64* %3, align 8
  br label %block_.L_441483

block_.L_441483:                                  ; preds = %block_441459, %block_44142c
  %9401 = phi i64 [ %9380, %block_44142c ], [ %.pre435, %block_441459 ]
  %MEMORY.138 = phi %struct.Memory* [ %call2_441410, %block_44142c ], [ %call2_44147e, %block_441459 ]
  %9402 = load i64, i64* %RBP.i, align 8
  %9403 = add i64 %9402, -80
  %9404 = add i64 %9401, 10
  store i64 %9404, i64* %3, align 8
  %9405 = inttoptr i64 %9403 to i64*
  %9406 = load i64, i64* %9405, align 8
  store i8 0, i8* %31, align 1
  %9407 = trunc i64 %9406 to i32
  %9408 = and i32 %9407, 255
  %9409 = tail call i32 @llvm.ctpop.i32(i32 %9408)
  %9410 = trunc i32 %9409 to i8
  %9411 = and i8 %9410, 1
  %9412 = xor i8 %9411, 1
  store i8 %9412, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9413 = icmp eq i64 %9406, 0
  %9414 = zext i1 %9413 to i8
  store i8 %9414, i8* %47, align 1
  %9415 = lshr i64 %9406, 63
  %9416 = trunc i64 %9415 to i8
  store i8 %9416, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v542 = select i1 %9413, i64 26, i64 16
  %9417 = add i64 %9401, %.v542
  store i64 %9417, i64* %3, align 8
  br i1 %9413, label %block_.L_44149d, label %block_441493

block_441493:                                     ; preds = %block_.L_441483
  %9418 = add i64 %9417, 4
  store i64 %9418, i64* %3, align 8
  %9419 = load i64, i64* %9405, align 8
  store i64 %9419, i64* %RAX.i3798, align 8
  %9420 = add i64 %9417, 10
  store i64 %9420, i64* %3, align 8
  %9421 = inttoptr i64 %9419 to i32*
  store i32 0, i32* %9421, align 4
  %.pre436 = load i64, i64* %RBP.i, align 8
  %.pre437 = load i64, i64* %3, align 8
  br label %block_.L_44149d

block_.L_44149d:                                  ; preds = %block_441493, %block_.L_441483
  %9422 = phi i64 [ %.pre437, %block_441493 ], [ %9417, %block_.L_441483 ]
  %9423 = phi i64 [ %.pre436, %block_441493 ], [ %9402, %block_.L_441483 ]
  %9424 = add i64 %9423, -1728
  %9425 = add i64 %9422, 8
  store i64 %9425, i64* %3, align 8
  %9426 = inttoptr i64 %9424 to i64*
  %9427 = load i64, i64* %9426, align 8
  store i8 0, i8* %31, align 1
  %9428 = trunc i64 %9427 to i32
  %9429 = and i32 %9428, 255
  %9430 = tail call i32 @llvm.ctpop.i32(i32 %9429)
  %9431 = trunc i32 %9430 to i8
  %9432 = and i8 %9431, 1
  %9433 = xor i8 %9432, 1
  store i8 %9433, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9434 = icmp eq i64 %9427, 0
  %9435 = zext i1 %9434 to i8
  store i8 %9435, i8* %47, align 1
  %9436 = lshr i64 %9427, 63
  %9437 = trunc i64 %9436 to i8
  store i8 %9437, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v543 = select i1 %9434, i64 58, i64 14
  %9438 = add i64 %9422, %.v543
  store i64 %9438, i64* %3, align 8
  br i1 %9434, label %block_.L_441708, label %block_4414ab

block_4414ab:                                     ; preds = %block_.L_44149d
  %9439 = add i64 %9438, 7
  store i64 %9439, i64* %3, align 8
  %9440 = load i64, i64* %9426, align 8
  store i64 %9440, i64* %RAX.i3798, align 8
  %9441 = add i64 %9440, 4
  %9442 = add i64 %9438, 10
  store i64 %9442, i64* %3, align 8
  %9443 = inttoptr i64 %9441 to i32*
  %9444 = load i32, i32* %9443, align 4
  %9445 = and i32 %9444, 1023
  %9446 = or i32 %9445, 661651456
  %9447 = zext i32 %9446 to i64
  store i64 %9447, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9448 = and i32 %9444, 255
  %9449 = tail call i32 @llvm.ctpop.i32(i32 %9448)
  %9450 = trunc i32 %9449 to i8
  %9451 = and i8 %9450, 1
  %9452 = xor i8 %9451, 1
  store i8 %9452, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9453 = add i64 %9438, 41
  store i64 %9453, i64* %3, align 8
  %9454 = load i64, i64* %9426, align 8
  store i64 %9454, i64* %RAX.i3798, align 8
  %9455 = add i64 %9454, 4
  %9456 = add i64 %9438, 44
  store i64 %9456, i64* %3, align 8
  %9457 = inttoptr i64 %9455 to i32*
  store i32 %9446, i32* %9457, align 4
  br label %block_.L_441708

block_.L_4414dc:                                  ; preds = %block_441422, %block_.L_4413f7
  %9458 = phi i64 [ %9345, %block_441422 ], [ %9319, %block_.L_4413f7 ]
  %9459 = add i64 %9458, 7
  store i64 %9459, i64* %3, align 8
  %9460 = load i32, i32* %9296, align 4
  %9461 = add i32 %9460, -3
  %9462 = icmp ult i32 %9460, 3
  %9463 = zext i1 %9462 to i8
  store i8 %9463, i8* %31, align 1
  %9464 = and i32 %9461, 255
  %9465 = tail call i32 @llvm.ctpop.i32(i32 %9464)
  %9466 = trunc i32 %9465 to i8
  %9467 = and i8 %9466, 1
  %9468 = xor i8 %9467, 1
  store i8 %9468, i8* %38, align 1
  %9469 = xor i32 %9461, %9460
  %9470 = lshr i32 %9469, 4
  %9471 = trunc i32 %9470 to i8
  %9472 = and i8 %9471, 1
  store i8 %9472, i8* %44, align 1
  %9473 = icmp eq i32 %9461, 0
  %9474 = zext i1 %9473 to i8
  store i8 %9474, i8* %47, align 1
  %9475 = lshr i32 %9461, 31
  %9476 = trunc i32 %9475 to i8
  store i8 %9476, i8* %50, align 1
  %9477 = lshr i32 %9460, 31
  %9478 = xor i32 %9475, %9477
  %9479 = add nuw nsw i32 %9478, %9477
  %9480 = icmp eq i32 %9479, 2
  %9481 = zext i1 %9480 to i8
  store i8 %9481, i8* %56, align 1
  %.v530 = select i1 %9473, i64 13, i64 283
  %9482 = add i64 %9458, %.v530
  store i64 %9482, i64* %3, align 8
  br i1 %9473, label %block_4414e9, label %block_.L_4415f7

block_4414e9:                                     ; preds = %block_.L_4414dc
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 0, i64* %RCX.i4416, align 8
  store i64 1, i64* %RAX.i3798, align 8
  %9483 = add i64 %9292, -32
  %9484 = add i64 %9482, 12
  store i64 %9484, i64* %3, align 8
  %9485 = inttoptr i64 %9483 to i32*
  %9486 = load i32, i32* %9485, align 4
  %9487 = zext i32 %9486 to i64
  store i64 %9487, i64* %RDI.i3802.pre-phi, align 8
  %9488 = add i64 %9292, -28
  %9489 = add i64 %9482, 15
  store i64 %9489, i64* %3, align 8
  %9490 = inttoptr i64 %9488 to i32*
  %9491 = load i32, i32* %9490, align 4
  %9492 = zext i32 %9491 to i64
  store i64 %9492, i64* %RSI.i3811.pre-phi, align 8
  %9493 = add i64 %9292, -48
  %9494 = add i64 %9482, 19
  store i64 %9494, i64* %3, align 8
  %9495 = inttoptr i64 %9493 to i64*
  %9496 = load i64, i64* %9495, align 8
  store i64 %9496, i64* %RDX.i4419, align 8
  %9497 = add i64 %9292, -40
  %9498 = add i64 %9482, 23
  store i64 %9498, i64* %3, align 8
  %9499 = inttoptr i64 %9497 to i64*
  %9500 = load i64, i64* %9499, align 8
  store i64 %9500, i64* %.pre-phi, align 8
  %R9D.i243 = bitcast %union.anon* %113 to i32*
  %9501 = add i64 %9292, -52
  %9502 = add i64 %9482, 27
  store i64 %9502, i64* %3, align 8
  %9503 = inttoptr i64 %9501 to i32*
  %9504 = load i32, i32* %9503, align 4
  %9505 = zext i32 %9504 to i64
  store i64 %9505, i64* %R9.i4411, align 8
  %9506 = add i64 %9292, -72
  %9507 = add i64 %9482, 31
  store i64 %9507, i64* %3, align 8
  %9508 = inttoptr i64 %9506 to i64*
  %9509 = load i64, i64* %9508, align 8
  store i64 %9509, i64* %65, align 8
  %9510 = add i64 %9292, -64
  %9511 = add i64 %9482, 35
  store i64 %9511, i64* %3, align 8
  %9512 = inttoptr i64 %9510 to i64*
  %9513 = load i64, i64* %9512, align 8
  store i64 %9513, i64* %R11.i4436, align 8
  %9514 = add i64 %9292, -88
  %9515 = add i64 %9482, 38
  store i64 %9515, i64* %3, align 8
  %9516 = inttoptr i64 %9514 to i32*
  %9517 = load i32, i32* %9516, align 4
  %9518 = zext i32 %9517 to i64
  store i64 %9518, i64* %RBX.i3528, align 8
  %9519 = add i64 %9292, -3552
  %9520 = add i64 %9482, 45
  store i64 %9520, i64* %3, align 8
  %9521 = inttoptr i64 %9519 to i64*
  store i64 0, i64* %9521, align 8
  %9522 = load i64, i64* %.pre-phi, align 8
  %9523 = load i64, i64* %3, align 8
  store i64 %9522, i64* %RCX.i4416, align 8
  %9524 = load i32, i32* %R9D.i243, align 4
  %9525 = zext i32 %9524 to i64
  store i64 %9525, i64* %.pre-phi, align 8
  %9526 = load i64, i64* %65, align 8
  store i64 %9526, i64* %R9.i4411, align 8
  %9527 = load i64*, i64** %8064, align 8
  %9528 = load i64, i64* %R11.i4436, align 8
  %9529 = add i64 %9523, 13
  store i64 %9529, i64* %3, align 8
  store i64 %9528, i64* %9527, align 8
  %9530 = load i64, i64* %6, align 8
  %9531 = add i64 %9530, 8
  %9532 = load i64, i64* %3, align 8
  %9533 = add i64 %9532, 9
  store i64 %9533, i64* %3, align 8
  %9534 = inttoptr i64 %9531 to i64*
  store i64 0, i64* %9534, align 8
  %9535 = load i64, i64* %6, align 8
  %9536 = add i64 %9535, 16
  %9537 = load i64, i64* %3, align 8
  %9538 = add i64 %9537, 8
  store i64 %9538, i64* %3, align 8
  %9539 = inttoptr i64 %9536 to i32*
  store i32 1, i32* %9539, align 4
  %9540 = load i64, i64* %6, align 8
  %9541 = add i64 %9540, 24
  %9542 = load i32, i32* %EBX.i563, align 4
  %9543 = load i64, i64* %3, align 8
  %9544 = add i64 %9543, 4
  store i64 %9544, i64* %3, align 8
  %9545 = inttoptr i64 %9541 to i32*
  store i32 %9542, i32* %9545, align 4
  %9546 = load i64, i64* %RBP.i, align 8
  %9547 = add i64 %9546, -3556
  %9548 = load i32, i32* %EAX.i4398, align 4
  %9549 = load i64, i64* %3, align 8
  %9550 = add i64 %9549, 6
  store i64 %9550, i64* %3, align 8
  %9551 = inttoptr i64 %9547 to i32*
  store i32 %9548, i32* %9551, align 4
  %9552 = load i64, i64* %3, align 8
  %9553 = add i64 %9552, -10062
  %9554 = add i64 %9552, 5
  %9555 = load i64, i64* %6, align 8
  %9556 = add i64 %9555, -8
  %9557 = inttoptr i64 %9556 to i64*
  store i64 %9554, i64* %9557, align 8
  store i64 %9556, i64* %6, align 8
  store i64 %9553, i64* %3, align 8
  %call2_44153e = tail call %struct.Memory* @sub_43edf0.do_owl_analyze_semeai(%struct.State* nonnull %0, i64 %9553, %struct.Memory* %call2_441410)
  %9558 = load i64, i64* %3, align 8
  %9559 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i8 0, i8* %31, align 1
  %9560 = trunc i64 %9559 to i32
  %9561 = and i32 %9560, 255
  %9562 = tail call i32 @llvm.ctpop.i32(i32 %9561)
  %9563 = trunc i32 %9562 to i8
  %9564 = and i8 %9563, 1
  %9565 = xor i8 %9564, 1
  store i8 %9565, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9566 = icmp eq i64 %9559, 0
  %9567 = zext i1 %9566 to i8
  store i8 %9567, i8* %47, align 1
  %9568 = lshr i64 %9559, 63
  %9569 = trunc i64 %9568 to i8
  store i8 %9569, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v536 = select i1 %9566, i64 57, i64 15
  %9570 = add i64 %9558, %.v536
  store i64 %9570, i64* %3, align 8
  br i1 %9566, label %block_.L_44157c, label %block_441552

block_441552:                                     ; preds = %block_4414e9
  store i64 0, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  store i8 1, i8* %38, align 1
  store i8 1, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  store i64 3, i64* %.pre-phi, align 8
  store i64 ptrtoint (%G__0x57dfe6_type* @G__0x57dfe6 to i64), i64* %R9.i4411, align 8
  %9571 = load i64, i64* %RBP.i, align 8
  %9572 = add i64 %9571, -1744
  %9573 = add i64 %9570, 25
  store i64 %9573, i64* %3, align 8
  %9574 = inttoptr i64 %9572 to i64*
  %9575 = load i64, i64* %9574, align 8
  store i64 %9575, i64* %RDI.i3802.pre-phi, align 8
  %9576 = add i64 %9571, -1748
  %9577 = add i64 %9570, 31
  store i64 %9577, i64* %3, align 8
  %9578 = inttoptr i64 %9576 to i32*
  %9579 = load i32, i32* %9578, align 4
  %9580 = zext i32 %9579 to i64
  store i64 %9580, i64* %RSI.i3811.pre-phi, align 8
  %9581 = add i64 %9571, -1752
  %9582 = add i64 %9570, 37
  store i64 %9582, i64* %3, align 8
  %9583 = inttoptr i64 %9581 to i32*
  %9584 = load i32, i32* %9583, align 4
  %9585 = zext i32 %9584 to i64
  store i64 %9585, i64* %RDX.i4419, align 8
  %9586 = add i64 %9570, -168498
  %9587 = add i64 %9570, 42
  %9588 = load i64, i64* %6, align 8
  %9589 = add i64 %9588, -8
  %9590 = inttoptr i64 %9589 to i64*
  store i64 %9587, i64* %9590, align 8
  store i64 %9589, i64* %6, align 8
  store i64 %9586, i64* %3, align 8
  %call2_441577 = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %9586, %struct.Memory* %call2_44153e)
  %.pre438 = load i64, i64* %3, align 8
  br label %block_.L_44157c

block_.L_44157c:                                  ; preds = %block_441552, %block_4414e9
  %9591 = phi i64 [ %9570, %block_4414e9 ], [ %.pre438, %block_441552 ]
  %MEMORY.142 = phi %struct.Memory* [ %call2_44153e, %block_4414e9 ], [ %call2_441577, %block_441552 ]
  %9592 = load i64, i64* %RBP.i, align 8
  %9593 = add i64 %9592, -80
  %9594 = add i64 %9591, 4
  store i64 %9594, i64* %3, align 8
  %9595 = inttoptr i64 %9593 to i64*
  %9596 = load i64, i64* %9595, align 8
  store i64 %9596, i64* %RAX.i3798, align 8
  %9597 = add i64 %9591, 10
  store i64 %9597, i64* %3, align 8
  %9598 = inttoptr i64 %9596 to i32*
  store i32 0, i32* %9598, align 4
  %9599 = load i64, i64* %RBP.i, align 8
  %9600 = add i64 %9599, -64
  %9601 = load i64, i64* %3, align 8
  %9602 = add i64 %9601, 4
  store i64 %9602, i64* %3, align 8
  %9603 = inttoptr i64 %9600 to i64*
  %9604 = load i64, i64* %9603, align 8
  store i64 %9604, i64* %RAX.i3798, align 8
  %9605 = add i64 %9601, 7
  store i64 %9605, i64* %3, align 8
  %9606 = inttoptr i64 %9604 to i32*
  %9607 = load i32, i32* %9606, align 4
  store i8 0, i8* %31, align 1
  %9608 = and i32 %9607, 255
  %9609 = tail call i32 @llvm.ctpop.i32(i32 %9608)
  %9610 = trunc i32 %9609 to i8
  %9611 = and i8 %9610, 1
  %9612 = xor i8 %9611, 1
  store i8 %9612, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9613 = icmp eq i32 %9607, 0
  %9614 = zext i1 %9613 to i8
  store i8 %9614, i8* %47, align 1
  %9615 = lshr i32 %9607, 31
  %9616 = trunc i32 %9615 to i8
  store i8 %9616, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v537 = select i1 %9613, i64 34, i64 13
  %9617 = add i64 %9601, %.v537
  store i64 %9617, i64* %3, align 8
  br i1 %9613, label %block_.L_4415a8, label %block_441593

block_441593:                                     ; preds = %block_.L_44157c
  %9618 = add i64 %9599, -80
  %9619 = add i64 %9617, 5
  store i64 %9619, i64* %3, align 8
  %9620 = inttoptr i64 %9618 to i64*
  %9621 = load i64, i64* %9620, align 8
  store i8 0, i8* %31, align 1
  %9622 = trunc i64 %9621 to i32
  %9623 = and i32 %9622, 255
  %9624 = tail call i32 @llvm.ctpop.i32(i32 %9623)
  %9625 = trunc i32 %9624 to i8
  %9626 = and i8 %9625, 1
  %9627 = xor i8 %9626, 1
  store i8 %9627, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9628 = icmp eq i64 %9621, 0
  %9629 = zext i1 %9628 to i8
  store i8 %9629, i8* %47, align 1
  %9630 = lshr i64 %9621, 63
  %9631 = trunc i64 %9630 to i8
  store i8 %9631, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v538 = select i1 %9628, i64 21, i64 11
  %9632 = add i64 %9617, %.v538
  store i64 %9632, i64* %3, align 8
  br i1 %9628, label %block_.L_4415a8, label %block_44159e

block_44159e:                                     ; preds = %block_441593
  %9633 = add i64 %9632, 4
  store i64 %9633, i64* %3, align 8
  %9634 = load i64, i64* %9620, align 8
  store i64 %9634, i64* %RAX.i3798, align 8
  %9635 = add i64 %9632, 10
  store i64 %9635, i64* %3, align 8
  %9636 = inttoptr i64 %9634 to i32*
  store i32 0, i32* %9636, align 4
  %.pre439 = load i64, i64* %RBP.i, align 8
  %.pre440 = load i64, i64* %3, align 8
  br label %block_.L_4415a8

block_.L_4415a8:                                  ; preds = %block_44159e, %block_441593, %block_.L_44157c
  %9637 = phi i64 [ %.pre440, %block_44159e ], [ %9632, %block_441593 ], [ %9617, %block_.L_44157c ]
  %9638 = phi i64 [ %.pre439, %block_44159e ], [ %9599, %block_441593 ], [ %9599, %block_.L_44157c ]
  %9639 = add i64 %9638, -1728
  %9640 = add i64 %9637, 8
  store i64 %9640, i64* %3, align 8
  %9641 = inttoptr i64 %9639 to i64*
  %9642 = load i64, i64* %9641, align 8
  store i8 0, i8* %31, align 1
  %9643 = trunc i64 %9642 to i32
  %9644 = and i32 %9643, 255
  %9645 = tail call i32 @llvm.ctpop.i32(i32 %9644)
  %9646 = trunc i32 %9645 to i8
  %9647 = and i8 %9646, 1
  %9648 = xor i8 %9647, 1
  store i8 %9648, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9649 = icmp eq i64 %9642, 0
  %9650 = zext i1 %9649 to i8
  store i8 %9650, i8* %47, align 1
  %9651 = lshr i64 %9642, 63
  %9652 = trunc i64 %9651 to i8
  store i8 %9652, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v539 = select i1 %9649, i64 74, i64 14
  %9653 = add i64 %9637, %.v539
  store i64 %9653, i64* %3, align 8
  br i1 %9649, label %block_.L_441708, label %block_4415b6

block_4415b6:                                     ; preds = %block_.L_4415a8
  %9654 = add i64 %9653, 7
  store i64 %9654, i64* %3, align 8
  %9655 = load i64, i64* %9641, align 8
  store i64 %9655, i64* %RAX.i3798, align 8
  %9656 = add i64 %9655, 4
  %9657 = add i64 %9653, 10
  store i64 %9657, i64* %3, align 8
  %9658 = inttoptr i64 %9656 to i32*
  %9659 = load i32, i32* %9658, align 4
  %9660 = and i32 %9659, 1023
  %9661 = or i32 %9660, 536870912
  %9662 = zext i32 %9661 to i64
  store i64 %9662, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9663 = and i32 %9659, 255
  %9664 = tail call i32 @llvm.ctpop.i32(i32 %9663)
  %9665 = trunc i32 %9664 to i8
  %9666 = and i8 %9665, 1
  %9667 = xor i8 %9666, 1
  store i8 %9667, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9668 = add i64 %9638, -64
  %9669 = add i64 %9653, 26
  store i64 %9669, i64* %3, align 8
  %9670 = inttoptr i64 %9668 to i64*
  %9671 = load i64, i64* %9670, align 8
  store i64 %9671, i64* %RAX.i3798, align 8
  %9672 = add i64 %9653, 28
  store i64 %9672, i64* %3, align 8
  %9673 = inttoptr i64 %9671 to i32*
  %9674 = load i32, i32* %9673, align 4
  %9675 = shl i32 %9674, 24
  %9676 = and i32 %9675, 251658240
  %9677 = zext i32 %9676 to i64
  store i64 %9677, i64* %RDX.i4419, align 8
  %9678 = or i32 %9676, %9661
  %9679 = zext i32 %9678 to i64
  store i64 %9679, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9680 = and i32 %9659, 255
  %9681 = tail call i32 @llvm.ctpop.i32(i32 %9680)
  %9682 = trunc i32 %9681 to i8
  %9683 = and i8 %9682, 1
  %9684 = xor i8 %9683, 1
  store i8 %9684, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9685 = load i64, i64* %RBP.i, align 8
  %9686 = add i64 %9685, -72
  %9687 = add i64 %9653, 40
  store i64 %9687, i64* %3, align 8
  %9688 = inttoptr i64 %9686 to i64*
  %9689 = load i64, i64* %9688, align 8
  store i64 %9689, i64* %RAX.i3798, align 8
  %9690 = add i64 %9653, 42
  store i64 %9690, i64* %3, align 8
  %9691 = inttoptr i64 %9689 to i32*
  %9692 = load i32, i32* %9691, align 4
  %9693 = shl i32 %9692, 20
  %9694 = and i32 %9693, 15728640
  %9695 = zext i32 %9694 to i64
  store i64 %9695, i64* %RDX.i4419, align 8
  %9696 = or i32 %9694, %9678
  %9697 = zext i32 %9696 to i64
  store i64 %9697, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9698 = and i32 %9659, 255
  %9699 = tail call i32 @llvm.ctpop.i32(i32 %9698)
  %9700 = trunc i32 %9699 to i8
  %9701 = and i8 %9700, 1
  %9702 = xor i8 %9701, 1
  store i8 %9702, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9703 = add i64 %9685, -1728
  %9704 = add i64 %9653, 57
  store i64 %9704, i64* %3, align 8
  %9705 = inttoptr i64 %9703 to i64*
  %9706 = load i64, i64* %9705, align 8
  store i64 %9706, i64* %RAX.i3798, align 8
  %9707 = add i64 %9706, 4
  %9708 = add i64 %9653, 60
  store i64 %9708, i64* %3, align 8
  %9709 = inttoptr i64 %9707 to i32*
  store i32 %9696, i32* %9709, align 4
  br label %block_.L_441708

block_.L_4415f7:                                  ; preds = %block_.L_4414dc
  %9710 = add i64 %9482, 6
  store i64 %9710, i64* %3, align 8
  %9711 = load i32, i32* %9296, align 4
  %9712 = zext i32 %9711 to i64
  store i64 %9712, i64* %RAX.i3798, align 8
  %9713 = add i64 %9292, -64
  %9714 = add i64 %9482, 10
  store i64 %9714, i64* %3, align 8
  %9715 = inttoptr i64 %9713 to i64*
  %9716 = load i64, i64* %9715, align 8
  store i64 %9716, i64* %RCX.i4416, align 8
  %9717 = add i64 %9482, 12
  store i64 %9717, i64* %3, align 8
  %9718 = inttoptr i64 %9716 to i32*
  store i32 %9711, i32* %9718, align 4
  %9719 = load i64, i64* %RBP.i, align 8
  %9720 = add i64 %9719, -1704
  %9721 = load i64, i64* %3, align 8
  %9722 = add i64 %9721, 6
  store i64 %9722, i64* %3, align 8
  %9723 = inttoptr i64 %9720 to i32*
  %9724 = load i32, i32* %9723, align 4
  %9725 = zext i32 %9724 to i64
  store i64 %9725, i64* %RAX.i3798, align 8
  %9726 = add i64 %9719, -72
  %9727 = add i64 %9721, 10
  store i64 %9727, i64* %3, align 8
  %9728 = inttoptr i64 %9726 to i64*
  %9729 = load i64, i64* %9728, align 8
  store i64 %9729, i64* %RCX.i4416, align 8
  %9730 = add i64 %9721, 12
  store i64 %9730, i64* %3, align 8
  %9731 = inttoptr i64 %9729 to i32*
  store i32 %9724, i32* %9731, align 4
  %9732 = load i64, i64* %RBP.i, align 8
  %9733 = add i64 %9732, -1700
  %9734 = load i64, i64* %3, align 8
  %9735 = add i64 %9734, 7
  store i64 %9735, i64* %3, align 8
  %9736 = inttoptr i64 %9733 to i32*
  %9737 = load i32, i32* %9736, align 4
  store i8 0, i8* %31, align 1
  %9738 = and i32 %9737, 255
  %9739 = tail call i32 @llvm.ctpop.i32(i32 %9738)
  %9740 = trunc i32 %9739 to i8
  %9741 = and i8 %9740, 1
  %9742 = xor i8 %9741, 1
  store i8 %9742, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9743 = icmp eq i32 %9737, 0
  %9744 = zext i1 %9743 to i8
  store i8 %9744, i8* %47, align 1
  %9745 = lshr i32 %9737, 31
  %9746 = trunc i32 %9745 to i8
  store i8 %9746, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v531 = select i1 %9743, i64 13, i64 23
  %9747 = add i64 %9734, %.v531
  store i64 %9747, i64* %3, align 8
  br i1 %9743, label %block_44161c, label %block_.L_441626

block_44161c:                                     ; preds = %block_.L_4415f7
  %9748 = add i64 %9732, -1708
  %9749 = add i64 %9747, 10
  store i64 %9749, i64* %3, align 8
  %9750 = inttoptr i64 %9748 to i32*
  store i32 0, i32* %9750, align 4
  %.pre441 = load i64, i64* %RBP.i, align 8
  %.pre442 = load i64, i64* %3, align 8
  br label %block_.L_441626

block_.L_441626:                                  ; preds = %block_.L_4415f7, %block_44161c
  %9751 = phi i64 [ %.pre442, %block_44161c ], [ %9747, %block_.L_4415f7 ]
  %9752 = phi i64 [ %.pre441, %block_44161c ], [ %9732, %block_.L_4415f7 ]
  %9753 = add i64 %9752, -1708
  %9754 = add i64 %9751, 6
  store i64 %9754, i64* %3, align 8
  %9755 = inttoptr i64 %9753 to i32*
  %9756 = load i32, i32* %9755, align 4
  %9757 = zext i32 %9756 to i64
  store i64 %9757, i64* %RAX.i3798, align 8
  %9758 = add i64 %9752, -80
  %9759 = add i64 %9751, 10
  store i64 %9759, i64* %3, align 8
  %9760 = inttoptr i64 %9758 to i64*
  %9761 = load i64, i64* %9760, align 8
  store i64 %9761, i64* %RCX.i4416, align 8
  %9762 = add i64 %9751, 12
  store i64 %9762, i64* %3, align 8
  %9763 = inttoptr i64 %9761 to i32*
  store i32 %9756, i32* %9763, align 4
  %9764 = load i64, i64* %3, align 8
  %9765 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i8 0, i8* %31, align 1
  %9766 = trunc i64 %9765 to i32
  %9767 = and i32 %9766, 255
  %9768 = tail call i32 @llvm.ctpop.i32(i32 %9767)
  %9769 = trunc i32 %9768 to i8
  %9770 = and i8 %9769, 1
  %9771 = xor i8 %9770, 1
  store i8 %9771, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9772 = icmp eq i64 %9765, 0
  %9773 = zext i1 %9772 to i8
  store i8 %9773, i8* %47, align 1
  %9774 = lshr i64 %9765, 63
  %9775 = trunc i64 %9774 to i8
  store i8 %9775, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v532 = select i1 %9772, i64 77, i64 15
  %9776 = add i64 %9764, %.v532
  store i64 %9776, i64* %3, align 8
  br i1 %9772, label %block_.L_44167f, label %block_441641

block_441641:                                     ; preds = %block_.L_441626
  %9777 = load i64, i64* %RBP.i, align 8
  %9778 = add i64 %9777, -736
  store i64 %9778, i64* %RAX.i3798, align 8
  %9779 = add i64 %9777, -1744
  %9780 = add i64 %9776, 14
  store i64 %9780, i64* %3, align 8
  %9781 = inttoptr i64 %9779 to i64*
  %9782 = load i64, i64* %9781, align 8
  store i64 %9782, i64* %RDI.i3802.pre-phi, align 8
  %9783 = add i64 %9777, -1748
  %9784 = add i64 %9776, 20
  store i64 %9784, i64* %3, align 8
  %9785 = inttoptr i64 %9783 to i32*
  %9786 = load i32, i32* %9785, align 4
  %9787 = zext i32 %9786 to i64
  store i64 %9787, i64* %RSI.i3811.pre-phi, align 8
  %9788 = add i64 %9777, -1752
  %9789 = add i64 %9776, 26
  store i64 %9789, i64* %3, align 8
  %9790 = inttoptr i64 %9788 to i32*
  %9791 = load i32, i32* %9790, align 4
  %9792 = zext i32 %9791 to i64
  store i64 %9792, i64* %RDX.i4419, align 8
  %9793 = add i64 %9777, -1708
  %9794 = add i64 %9776, 32
  store i64 %9794, i64* %3, align 8
  %9795 = inttoptr i64 %9793 to i32*
  %9796 = load i32, i32* %9795, align 4
  %9797 = zext i32 %9796 to i64
  store i64 %9797, i64* %RCX.i4416, align 8
  %9798 = add i64 %9777, -1700
  %9799 = add i64 %9776, 39
  store i64 %9799, i64* %3, align 8
  %9800 = inttoptr i64 %9798 to i32*
  %9801 = load i32, i32* %9800, align 4
  %9802 = zext i32 %9801 to i64
  store i64 %9802, i64* %.pre-phi, align 8
  %9803 = add i64 %9777, -1720
  %9804 = add i64 %9776, 46
  store i64 %9804, i64* %3, align 8
  %9805 = inttoptr i64 %9803 to i32*
  %9806 = load i32, i32* %9805, align 4
  %9807 = sext i32 %9806 to i64
  %9808 = shl nsw i64 %9807, 5
  store i64 %9808, i64* %R9.i4411, align 8
  %9809 = add i64 %9808, %9778
  store i64 %9809, i64* %RAX.i3798, align 8
  %9810 = icmp ult i64 %9809, %9778
  %9811 = icmp ult i64 %9809, %9808
  %9812 = or i1 %9810, %9811
  %9813 = zext i1 %9812 to i8
  store i8 %9813, i8* %31, align 1
  %9814 = trunc i64 %9809 to i32
  %9815 = and i32 %9814, 255
  %9816 = tail call i32 @llvm.ctpop.i32(i32 %9815)
  %9817 = trunc i32 %9816 to i8
  %9818 = and i8 %9817, 1
  %9819 = xor i8 %9818, 1
  store i8 %9819, i8* %38, align 1
  %9820 = xor i64 %9778, %9809
  %9821 = lshr i64 %9820, 4
  %9822 = trunc i64 %9821 to i8
  %9823 = and i8 %9822, 1
  store i8 %9823, i8* %44, align 1
  %9824 = icmp eq i64 %9809, 0
  %9825 = zext i1 %9824 to i8
  store i8 %9825, i8* %47, align 1
  %9826 = lshr i64 %9809, 63
  %9827 = trunc i64 %9826 to i8
  store i8 %9827, i8* %50, align 1
  %9828 = lshr i64 %9778, 63
  %9829 = lshr i64 %9807, 58
  %9830 = and i64 %9829, 1
  %9831 = xor i64 %9826, %9828
  %9832 = xor i64 %9826, %9830
  %9833 = add nuw nsw i64 %9831, %9832
  %9834 = icmp eq i64 %9833, 2
  %9835 = zext i1 %9834 to i8
  store i8 %9835, i8* %56, align 1
  %9836 = add i64 %9809, 8
  %9837 = add i64 %9776, 57
  store i64 %9837, i64* %3, align 8
  %9838 = inttoptr i64 %9836 to i64*
  %9839 = load i64, i64* %9838, align 8
  store i64 %9839, i64* %R9.i4411, align 8
  %9840 = add i64 %9776, -168737
  %9841 = add i64 %9776, 62
  %9842 = load i64, i64* %6, align 8
  %9843 = add i64 %9842, -8
  %9844 = inttoptr i64 %9843 to i64*
  store i64 %9841, i64* %9844, align 8
  store i64 %9843, i64* %6, align 8
  store i64 %9840, i64* %3, align 8
  %call2_44167a = tail call %struct.Memory* @sub_418320.sgf_trace2(%struct.State* nonnull %0, i64 %9840, %struct.Memory* %call2_441410)
  %.pre443 = load i64, i64* %3, align 8
  br label %block_.L_44167f

block_.L_44167f:                                  ; preds = %block_441641, %block_.L_441626
  %9845 = phi i64 [ %9776, %block_.L_441626 ], [ %.pre443, %block_441641 ]
  %MEMORY.146 = phi %struct.Memory* [ %call2_441410, %block_.L_441626 ], [ %call2_44167a, %block_441641 ]
  %9846 = load i64, i64* %RBP.i, align 8
  %9847 = add i64 %9846, -1700
  %9848 = add i64 %9845, 12
  store i64 %9848, i64* %3, align 8
  %9849 = inttoptr i64 %9847 to i32*
  %9850 = load i32, i32* %9849, align 4
  store i8 0, i8* %31, align 1
  %9851 = and i32 %9850, 255
  %9852 = tail call i32 @llvm.ctpop.i32(i32 %9851)
  %9853 = trunc i32 %9852 to i8
  %9854 = and i8 %9853, 1
  %9855 = xor i8 %9854, 1
  store i8 %9855, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9856 = icmp eq i32 %9850, 0
  %9857 = zext i1 %9856 to i8
  store i8 %9857, i8* %47, align 1
  %9858 = lshr i32 %9850, 31
  %9859 = trunc i32 %9858 to i8
  store i8 %9859, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v533 = select i1 %9856, i64 41, i64 18
  %9860 = add i64 %9845, %.v533
  store i64 %9860, i64* %3, align 8
  br i1 %9856, label %block_.L_4416a8, label %block_441691

block_441691:                                     ; preds = %block_.L_44167f
  %9861 = add i64 %9846, -80
  %9862 = add i64 %9860, 5
  store i64 %9862, i64* %3, align 8
  %9863 = inttoptr i64 %9861 to i64*
  %9864 = load i64, i64* %9863, align 8
  store i8 0, i8* %31, align 1
  %9865 = trunc i64 %9864 to i32
  %9866 = and i32 %9865, 255
  %9867 = tail call i32 @llvm.ctpop.i32(i32 %9866)
  %9868 = trunc i32 %9867 to i8
  %9869 = and i8 %9868, 1
  %9870 = xor i8 %9869, 1
  store i8 %9870, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9871 = icmp eq i64 %9864, 0
  %9872 = zext i1 %9871 to i8
  store i8 %9872, i8* %47, align 1
  %9873 = lshr i64 %9864, 63
  %9874 = trunc i64 %9873 to i8
  store i8 %9874, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v534 = select i1 %9871, i64 23, i64 11
  %9875 = add i64 %9860, %.v534
  store i64 %9875, i64* %3, align 8
  br i1 %9871, label %block_.L_4416a8, label %block_44169c

block_44169c:                                     ; preds = %block_441691
  %9876 = add i64 %9846, -1708
  %9877 = add i64 %9875, 6
  store i64 %9877, i64* %3, align 8
  %9878 = inttoptr i64 %9876 to i32*
  %9879 = load i32, i32* %9878, align 4
  %9880 = zext i32 %9879 to i64
  store i64 %9880, i64* %RAX.i3798, align 8
  %9881 = add i64 %9875, 10
  store i64 %9881, i64* %3, align 8
  %9882 = load i64, i64* %9863, align 8
  store i64 %9882, i64* %RCX.i4416, align 8
  %9883 = add i64 %9875, 12
  store i64 %9883, i64* %3, align 8
  %9884 = inttoptr i64 %9882 to i32*
  store i32 %9879, i32* %9884, align 4
  %.pre444 = load i64, i64* %RBP.i, align 8
  %.pre445 = load i64, i64* %3, align 8
  br label %block_.L_4416a8

block_.L_4416a8:                                  ; preds = %block_44169c, %block_441691, %block_.L_44167f
  %9885 = phi i64 [ %.pre445, %block_44169c ], [ %9875, %block_441691 ], [ %9860, %block_.L_44167f ]
  %9886 = phi i64 [ %.pre444, %block_44169c ], [ %9846, %block_441691 ], [ %9846, %block_.L_44167f ]
  %9887 = add i64 %9886, -1728
  %9888 = add i64 %9885, 8
  store i64 %9888, i64* %3, align 8
  %9889 = inttoptr i64 %9887 to i64*
  %9890 = load i64, i64* %9889, align 8
  store i8 0, i8* %31, align 1
  %9891 = trunc i64 %9890 to i32
  %9892 = and i32 %9891, 255
  %9893 = tail call i32 @llvm.ctpop.i32(i32 %9892)
  %9894 = trunc i32 %9893 to i8
  %9895 = and i8 %9894, 1
  %9896 = xor i8 %9895, 1
  store i8 %9896, i8* %38, align 1
  store i8 0, i8* %44, align 1
  %9897 = icmp eq i64 %9890, 0
  %9898 = zext i1 %9897 to i8
  store i8 %9898, i8* %47, align 1
  %9899 = lshr i64 %9890, 63
  %9900 = trunc i64 %9899 to i8
  store i8 %9900, i8* %50, align 1
  store i8 0, i8* %56, align 1
  %.v535 = select i1 %9897, i64 91, i64 14
  %9901 = add i64 %9885, %.v535
  store i64 %9901, i64* %3, align 8
  br i1 %9897, label %block_.L_441708, label %block_4416b6

block_4416b6:                                     ; preds = %block_.L_4416a8
  %9902 = add i64 %9901, 7
  store i64 %9902, i64* %3, align 8
  %9903 = load i64, i64* %9889, align 8
  store i64 %9903, i64* %RAX.i3798, align 8
  %9904 = add i64 %9903, 4
  %9905 = add i64 %9901, 10
  store i64 %9905, i64* %3, align 8
  %9906 = inttoptr i64 %9904 to i32*
  %9907 = load i32, i32* %9906, align 4
  %9908 = and i32 %9907, 1023
  %9909 = or i32 %9908, 536870912
  %9910 = zext i32 %9909 to i64
  store i64 %9910, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9911 = and i32 %9907, 255
  %9912 = tail call i32 @llvm.ctpop.i32(i32 %9911)
  %9913 = trunc i32 %9912 to i8
  %9914 = and i8 %9913, 1
  %9915 = xor i8 %9914, 1
  store i8 %9915, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9916 = add i64 %9886, -1700
  %9917 = add i64 %9901, 28
  store i64 %9917, i64* %3, align 8
  %9918 = inttoptr i64 %9916 to i32*
  %9919 = load i32, i32* %9918, align 4
  %9920 = shl i32 %9919, 24
  %9921 = and i32 %9920, 251658240
  %9922 = zext i32 %9921 to i64
  store i64 %9922, i64* %RDX.i4419, align 8
  %9923 = or i32 %9921, %9909
  %9924 = zext i32 %9923 to i64
  store i64 %9924, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9925 = and i32 %9907, 255
  %9926 = tail call i32 @llvm.ctpop.i32(i32 %9925)
  %9927 = trunc i32 %9926 to i8
  %9928 = and i8 %9927, 1
  %9929 = xor i8 %9928, 1
  store i8 %9929, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9930 = load i64, i64* %RBP.i, align 8
  %9931 = add i64 %9930, -1704
  %9932 = add i64 %9901, 42
  store i64 %9932, i64* %3, align 8
  %9933 = inttoptr i64 %9931 to i32*
  %9934 = load i32, i32* %9933, align 4
  %9935 = shl i32 %9934, 20
  %9936 = and i32 %9935, 15728640
  %9937 = zext i32 %9936 to i64
  store i64 %9937, i64* %RDX.i4419, align 8
  %9938 = or i32 %9936, %9923
  %9939 = zext i32 %9938 to i64
  store i64 %9939, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9940 = and i32 %9907, 255
  %9941 = tail call i32 @llvm.ctpop.i32(i32 %9940)
  %9942 = trunc i32 %9941 to i8
  %9943 = and i8 %9942, 1
  %9944 = xor i8 %9943, 1
  store i8 %9944, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9945 = add i64 %9930, -1708
  %9946 = add i64 %9901, 56
  store i64 %9946, i64* %3, align 8
  %9947 = inttoptr i64 %9945 to i32*
  %9948 = load i32, i32* %9947, align 4
  %9949 = shl i32 %9948, 10
  %9950 = and i32 %9949, 1047552
  %9951 = zext i32 %9950 to i64
  store i64 %9951, i64* %RDX.i4419, align 8
  %9952 = or i32 %9950, %9938
  %9953 = zext i32 %9952 to i64
  store i64 %9953, i64* %RCX.i4416, align 8
  store i8 0, i8* %31, align 1
  %9954 = and i32 %9907, 255
  %9955 = tail call i32 @llvm.ctpop.i32(i32 %9954)
  %9956 = trunc i32 %9955 to i8
  %9957 = and i8 %9956, 1
  %9958 = xor i8 %9957, 1
  store i8 %9958, i8* %38, align 1
  store i8 0, i8* %47, align 1
  store i8 0, i8* %50, align 1
  store i8 0, i8* %56, align 1
  store i8 0, i8* %44, align 1
  %9959 = load i64, i64* %RBP.i, align 8
  %9960 = add i64 %9959, -1728
  %9961 = add i64 %9901, 74
  store i64 %9961, i64* %3, align 8
  %9962 = inttoptr i64 %9960 to i64*
  %9963 = load i64, i64* %9962, align 8
  store i64 %9963, i64* %RAX.i3798, align 8
  %9964 = add i64 %9963, 4
  %9965 = add i64 %9901, 77
  store i64 %9965, i64* %3, align 8
  %9966 = inttoptr i64 %9964 to i32*
  store i32 %9952, i32* %9966, align 4
  br label %block_.L_441708

block_.L_441708:                                  ; preds = %block_.L_4416a8, %block_4416b6, %block_.L_4415a8, %block_4415b6, %block_.L_44149d, %block_4414ab, %block_.L_4412e9, %block_4412f7, %block_.L_440d7a, %block_440d88, %block_.L_43fe61, %block_43fe6f, %block_.L_43fd80, %block_43fd8e, %block_.L_43fca0, %block_43fcb3, %block_.L_43fb99, %block_43fba7, %block_.L_43fa5c, %block_43fa6a, %block_.L_43f981, %block_43f98f, %block_.L_43f819, %block_43f827, %block_.L_43f2d4
  %.sink296 = phi i64 [ 9224, %block_.L_43f2d4 ], [ 7867, %block_43f827 ], [ 7867, %block_.L_43f819 ], [ 7507, %block_43f98f ], [ 7507, %block_.L_43f981 ], [ 7282, %block_43fa6a ], [ 7282, %block_.L_43fa5c ], [ 6954, %block_43fba7 ], [ 6954, %block_.L_43fb99 ], [ 6703, %block_43fcb3 ], [ 6703, %block_.L_43fca0 ], [ 6478, %block_43fd8e ], [ 6478, %block_.L_43fd80 ], [ 6236, %block_43fe6f ], [ 6236, %block_.L_43fe61 ], [ 2377, %block_440d88 ], [ 2377, %block_.L_440d7a ], [ 986, %block_4412f7 ], [ 986, %block_.L_4412e9 ], [ 561, %block_4414ab ], [ 561, %block_.L_44149d ], [ 278, %block_4415b6 ], [ 278, %block_.L_4415a8 ], [ 5, %block_4416b6 ], [ 5, %block_.L_4416a8 ]
  %MEMORY.149 = phi %struct.Memory* [ %MEMORY.16, %block_.L_43f2d4 ], [ %MEMORY.29, %block_43f827 ], [ %MEMORY.29, %block_.L_43f819 ], [ %MEMORY.36, %block_43f98f ], [ %MEMORY.36, %block_.L_43f981 ], [ %MEMORY.39, %block_43fa6a ], [ %MEMORY.39, %block_.L_43fa5c ], [ %MEMORY.44, %block_43fba7 ], [ %MEMORY.44, %block_.L_43fb99 ], [ %MEMORY.49, %block_43fcb3 ], [ %MEMORY.49, %block_.L_43fca0 ], [ %MEMORY.51, %block_43fd8e ], [ %MEMORY.51, %block_.L_43fd80 ], [ %MEMORY.54, %block_43fe6f ], [ %MEMORY.54, %block_.L_43fe61 ], [ %call2_440d5e, %block_440d88 ], [ %call2_440d5e, %block_.L_440d7a ], [ %call2_4412cd, %block_4412f7 ], [ %call2_4412cd, %block_.L_4412e9 ], [ %MEMORY.138, %block_4414ab ], [ %MEMORY.138, %block_.L_44149d ], [ %MEMORY.142, %block_4415b6 ], [ %MEMORY.142, %block_.L_4415a8 ], [ %MEMORY.146, %block_4416b6 ], [ %MEMORY.146, %block_.L_4416a8 ]
  %9967 = load i64, i64* %3, align 8
  %9968 = add i64 %9967, %.sink296
  %9969 = load i64, i64* %6, align 8
  %9970 = add i64 %9969, 3576
  store i64 %9970, i64* %6, align 8
  %9971 = icmp ugt i64 %9969, -3577
  %9972 = zext i1 %9971 to i8
  store i8 %9972, i8* %31, align 1
  %9973 = trunc i64 %9970 to i32
  %9974 = and i32 %9973, 255
  %9975 = tail call i32 @llvm.ctpop.i32(i32 %9974)
  %9976 = trunc i32 %9975 to i8
  %9977 = and i8 %9976, 1
  %9978 = xor i8 %9977, 1
  store i8 %9978, i8* %38, align 1
  %9979 = xor i64 %9969, 16
  %9980 = xor i64 %9979, %9970
  %9981 = lshr i64 %9980, 4
  %9982 = trunc i64 %9981 to i8
  %9983 = and i8 %9982, 1
  store i8 %9983, i8* %44, align 1
  %9984 = icmp eq i64 %9970, 0
  %9985 = zext i1 %9984 to i8
  store i8 %9985, i8* %47, align 1
  %9986 = lshr i64 %9970, 63
  %9987 = trunc i64 %9986 to i8
  store i8 %9987, i8* %50, align 1
  %9988 = lshr i64 %9969, 63
  %9989 = xor i64 %9986, %9988
  %9990 = add nuw nsw i64 %9989, %9986
  %9991 = icmp eq i64 %9990, 2
  %9992 = zext i1 %9991 to i8
  store i8 %9992, i8* %56, align 1
  %9993 = add i64 %9968, 8
  store i64 %9993, i64* %3, align 8
  %9994 = add i64 %9969, 3584
  %9995 = inttoptr i64 %9970 to i64*
  %9996 = load i64, i64* %9995, align 8
  store i64 %9996, i64* %RBX.i3528, align 8
  store i64 %9994, i64* %6, align 8
  %9997 = add i64 %9968, 10
  store i64 %9997, i64* %3, align 8
  %9998 = add i64 %9969, 3592
  %9999 = inttoptr i64 %9994 to i64*
  %10000 = load i64, i64* %9999, align 8
  store i64 %10000, i64* %R14.i1302, align 8
  store i64 %9998, i64* %6, align 8
  %10001 = add i64 %9968, 12
  store i64 %10001, i64* %3, align 8
  %10002 = add i64 %9969, 3600
  %10003 = inttoptr i64 %9998 to i64*
  %10004 = load i64, i64* %10003, align 8
  store i64 %10004, i64* %R15.i655, align 8
  store i64 %10002, i64* %6, align 8
  %10005 = add i64 %9968, 13
  store i64 %10005, i64* %3, align 8
  %10006 = add i64 %9969, 3608
  %10007 = inttoptr i64 %10002 to i64*
  %10008 = load i64, i64* %10007, align 8
  store i64 %10008, i64* %RBP.i, align 8
  store i64 %10006, i64* %6, align 8
  %10009 = add i64 %9968, 14
  store i64 %10009, i64* %3, align 8
  %10010 = inttoptr i64 %10006 to i64*
  %10011 = load i64, i64* %10010, align 8
  store i64 %10011, i64* %3, align 8
  %10012 = add i64 %9969, 3616
  store i64 %10012, i64* %6, align 8
  ret %struct.Memory* %MEMORY.149
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__r15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %3 = load i64, i64* %R15, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__r14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %3 = load i64, i64* %R14, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %RBX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0xdf8___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -3576
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 3576
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %29
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x28__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, 40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x20__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, 32
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x18__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, 24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x10__rbp____rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57de24___r14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57de24_type* @G__0x57de24 to i64), i64* %R14, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___r15d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 3, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r9__MINUS0x40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %R9, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rbx__MINUS0x48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %RBX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r11__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %R11, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -84
  %6 = load i32, i32* %R10D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x1c__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rcx_1____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x5c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -92
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x5c__rbp____r15d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R15D, align 4
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %6, -92
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %5, %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %4, align 8
  %14 = icmp ult i32 %5, %11
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %12, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %11, %5
  %24 = xor i32 %23, %12
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %12, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %5, 31
  %36 = lshr i32 %11, 31
  %37 = xor i32 %36, %35
  %38 = xor i32 %32, %35
  %39 = add nuw nsw i32 %38, %37
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r15d__MINUS0x60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0
  %R15D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -96
  %6 = load i32, i32* %R15D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x4d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x4d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x4dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1244
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x4e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x4e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0ef8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x698__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1688
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xab0eec___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x69c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1692
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3__MINUS0x6a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 3, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3__MINUS0x6a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 3, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x6ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1708
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3__MINUS0x6b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1712
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 3, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3__MINUS0x6b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1716
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 3, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0x6b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1720
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6c4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1732
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r14__MINUS0x6d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1744
  %5 = load i64, i64* %R14, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1748
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1752
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__0x0__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = trunc i64 %8 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43ef24(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x6c8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x200__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x220__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xac22d4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xac22d4_type* @G_0xac22d4 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0xac22d4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0xac22d4_type* @G_0xac22d4 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xac22d0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xac22d0_type* @G_0xac22d0 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__0xac22d0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0xac22d0_type* @G_0xac22d0 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x4b0__rcx____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RCX, align 8
  %6 = add i64 %5, 1200
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43ef7b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43efa3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57dd2e___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57dd2e_type* @G__0x57dd2e to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x164___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 356, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57de3a___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57de3a_type* @G__0x57de3a to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4294967295, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.abortgo(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x20__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rax_1____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x4b0__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RAX, align 8
  %6 = add i64 %5, 1200
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43efc4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43efec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x165___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 357, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57de55___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57de55_type* @G__0x57de55 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xb54ce4___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0xb6e910___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0xb6e910_type* @G_0xb6e910 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_43f30a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x7ae43c___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x7ae43c_type* @G_0x7ae43c to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_andl__0x400___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 5
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 1024
  store i64 %6, i64* %RAX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %8, align 1
  %.lobit = lshr exact i64 %6, 10
  %9 = trunc i64 %.lobit to i8
  %10 = xor i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10, i8* %11, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f30a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f30a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 2, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x1c__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x20__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x6c0__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1728
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.get_read_result2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f305(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x6c0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1728
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shrl__0x18___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = lshr i64 %3, 23
  %7 = trunc i64 %6 to i8
  %8 = and i8 %7, 1
  %9 = lshr i64 %3, 24
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 255
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %14, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %11, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0xf___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 15
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RCX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = icmp eq i32 %7, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f083(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shrl__0xa___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = lshr i64 %3, 9
  %7 = trunc i64 %6 to i8
  %8 = and i8 %7, 1
  %9 = lshr i64 %3, 10
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 4194303
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x3ff___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 1023
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %and.shrunk = trunc i64 %3 to i32
  %8 = and i32 %and.shrunk, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x50__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f0d4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0xab0f28(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0f28_type* @G_0xab0f28 to i32*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = and i32 %5, 255
  %8 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = icmp eq i32 %5, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %5, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f0af(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f0cf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57de70___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57de70_type* @G__0x57de70 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6c4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1732
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x0___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 2
  store i64 %5, i64* %PC, align 8
  store i8 0, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.gprintf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd44__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3396
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f180(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f125(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f100(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f120(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57de94___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57de94_type* @G__0x57de94 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd48__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3400
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f17b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x7___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -7
  %8 = icmp ult i32 %4, 7
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f176(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f151(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f171(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57deb7___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57deb7_type* @G__0x57deb7 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd4c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3404
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f176(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shrl__0x14___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = lshr i64 %3, 19
  %7 = trunc i64 %6 to i8
  %8 = and i8 %7, 1
  %9 = lshr i64 %3, 20
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 4095
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  store i8 %19, i8* %14, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %22 = icmp eq i32 %11, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %21, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f1d1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f1ac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f1cc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd50__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3408
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f27d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f222(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f1fd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f21d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3412
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f278(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f273(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f24e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f26e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3416
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f273(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__0x0__0xab0ef8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 9
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = trunc i64 %5 to i32
  %8 = and i32 %7, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i64 %5, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i64 %5, 63
  %19 = trunc i64 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f2d4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57dee3___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57dee3_type* @G__0x57dee3 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x6d0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1744
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6d4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1748
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6d8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1752
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rax____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shrl__0x18___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = lshr i32 %5, 23
  %9 = trunc i32 %8 to i8
  %10 = and i8 %9, 1
  %11 = lshr i32 %5, 24
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %4, align 8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  store i8 %18, i8* %14, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = icmp eq i32 %11, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %20, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0xf___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = and i32 %5, 15
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10, align 1
  %11 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = icmp eq i32 %8, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.sgf_trace2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x40__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x48__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_441708(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f315(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__MINUS0x6c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1728
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 11
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 0, i64* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x300__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -768
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x320__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -800
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x340__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__0xab0ef8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 12
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0xab0eec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 11
  store i64 %4, i64* %PC, align 8
  store i32 0, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x684__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x6__MINUS0x684__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -6
  %10 = icmp ult i32 %8, 6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43f3d9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x2e0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x684__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RCX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RDX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  store i32 0, i32* %4, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__0x4__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__0x8__rdx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 0, i64* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2__0x10__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x684__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x684__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1668
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f354(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x20__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rcx_1____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %EAX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f3f5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f41d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x19c___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 412, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57deea___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57deea_type* @G__0x57deea to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__esi___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RSI, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x190___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 400, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x680__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1664
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.memset_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4408c9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_find_lunches(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xa__MINUS0x684__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -10
  %10 = icmp ult i32 %8, 10
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43f4d1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x87f4__rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, 34804
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = and i32 %11, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = icmp eq i32 %11, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %11, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f4b8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x684__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x87f4__rcx__rdx_4____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, 34804
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsbl___rax__rcx_1____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i64
  %11 = and i64 %10, 4294967295
  store i64 %11, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x87f4__rax__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, 34804
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 11
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  store i32 0, i32* %10, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f4bd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f458(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x6e0__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1760
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xc0__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0xd60__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3424
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = bitcast i64* %RSP to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  store i64 0, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x0__0x8__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 9
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  store i64 0, i64* %7, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_determine_life(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x9__0x7ae448(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x7ae448_type* @G_0x7ae448 to i32*), align 8
  %6 = add i32 %5, -9
  %7 = icmp ult i32 %5, 9
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i32 %6, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i32 %6, %5
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i32 %6, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %6, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %5, 31
  %28 = xor i32 %24, %27
  %29 = add nuw nsw i32 %28, %27
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_43f5f3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x443270___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x443270_type* @G__0x443270 to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x941118___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x941118_type* @G__0x941118 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xc0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xac22f0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xac22f0_type* @G__0xac22f0 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x190___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 400, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__0xac22d8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 8
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* bitcast (%G_0xac22d8_type* @G_0xac22d8 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0xac22e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 11
  store i64 %4, i64* %PC, align 8
  store i32 0, i32* bitcast (%G_0xac22e0_type* @G_0xac22e0 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0xd68__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3432
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0xd70__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3440
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r9___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xd78__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3448
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x60__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -96
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd78__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3448
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd68__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3432
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd70__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3440
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.matchpat(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_MINUS0x6df__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1759
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0xac22e0___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0xac22e0_type* @G_0xac22e0 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_43f5dc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xac22e0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xac22e0_type* @G_0xac22e0 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_MINUS0x6df__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1759
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %4 to i32
  %10 = sub i32 %9, %5
  %11 = zext i32 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = icmp ult i32 %9, %5
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %10, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i64 %6, %4
  %22 = trunc i64 %21 to i32
  %23 = xor i32 %22, %10
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %10, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %10, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %9, 31
  %35 = lshr i32 %5, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl___dl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %CL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %DL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x6df__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1759
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f5ee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_MINUS0x6df__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1759
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = and i64 %3, 4294967295
  store i64 %7, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %6, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %6, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %6, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al___cl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %AL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %CL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x6df__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1759
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f5f3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x6e8__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1768
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x120__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0xd80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3456
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_43f70a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x120__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdi__MINUS0xd88__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3464
  %5 = load i64, i64* %RDI, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0xd90__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3472
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0xd98__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3480
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd98__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd88__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3464
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0xd90__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3472
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_MINUS0x6e7__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1767
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_43f6fe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_MINUS0x6e7__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1767
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0x6e7__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1767
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f705(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x0__MINUS0x6e7__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1767
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  store i8 0, i8* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f70a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x6e0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1760
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.min_eyes(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -2
  %8 = icmp ult i32 %4, 2
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_43f852(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x6e8__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1768
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.max_eyes(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43f852(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  store i32 1, i32* %4, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  store i32 0, i32* %4, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x698__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1688
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__0xab0ef8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 8
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* bitcast (%G_0xab0ef8_type* @G_0xab0ef8 to i64*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x69c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1692
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0xab0eec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0xab0eec_type* @G_0xab0eec to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f7c1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f7bc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__ecx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 1, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57deff___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57deff_type* @G__0x57deff to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f7ff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f7fa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57df14___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57df14_type* @G__0x57df14 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f804(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f819(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__0x0__MINUS0x6c0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1728
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = trunc i64 %8 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f84d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orl__0x20000000___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = or i64 %3, 536870912
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %RCX, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %16, align 1
  %17 = lshr i32 %7, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orl__0x1000000___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = or i64 %3, 16777216
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %RCX, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %16, align 1
  %17 = lshr i32 %7, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__0x4__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 4
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43f887(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__0xb54ce4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %6 = add i32 %5, -2
  %7 = icmp ult i32 %5, 2
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i32 %6, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i32 %6, %5
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i32 %6, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %6, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %5, 31
  %28 = xor i32 %24, %27
  %29 = add nuw nsw i32 %28, %27
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_43fbf2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_escape_route(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x5___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -5
  %8 = icmp ult i32 %4, 5
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_43fbf2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43f9ba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43f929(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f924(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57df28___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57df28_type* @G__0x57df28 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f967(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f962(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57df47___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57df47_type* @G__0x57df47 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43f96c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f981(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43f9b5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_43fa9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fa42(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57df65___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57df65_type* @G__0x57df65 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fa47(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fa5c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fa96(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orl__0x100000___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = or i64 %3, 1048576
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %RCX, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %16, align 1
  %17 = lshr i32 %7, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x120__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fbe3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x120__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43fb3b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fb36(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fb7d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fb78(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fb82(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fb99(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x120__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x50__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -80
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fbde(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x120__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x3ff___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 1023
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %and.shrunk = trunc i64 %3 to i32
  %8 = and i32 %and.shrunk, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = icmp eq i64 %6, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shll__0xa___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 10
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 22
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = icmp eq i32 %6, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %14, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = lshr i32 %.tr, 21
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  store i8 %20, i8* %17, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = load i32, i32* %EDX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = or i64 %6, %4
  %10 = trunc i64 %9 to i32
  %11 = and i64 %9, 4294967295
  store i64 %11, i64* %RCX, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = and i32 %10, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = icmp eq i32 %10, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i32 %10, 31
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fbe8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fbed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fbf2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43fc19(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_43fec0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43fcde(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fca0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57df6f___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57df6f_type* @G__0x57df6f to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fca5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fcd9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_43fdbf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fd66(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fd6b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fd80(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fdba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43feb1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fe45(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fe4a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43fe61(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_43feac(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xc0__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43feb6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43febb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43fec0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x220__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x92aa50___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x92aa50_type* @G__0x92aa50 to i64), i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x180__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_shapes(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x684__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43ff3d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x180__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.get_next_move_from_list(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43ff24(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43ff3d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43ff29(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43feee(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x200__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x919b70___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x919b70_type* @G__0x919b70 to i64), i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x1e0__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43ffba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x1e0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_43ffa1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43ffba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43ffa6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43ff6b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0xd99__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3481
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_43fffc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = and i32 %7, 255
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %15, align 1
  %16 = icmp eq i32 %7, 0
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %17, i8* %18, align 1
  %19 = lshr i32 %7, 31
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %22, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_setne__dl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %DL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0xd99__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3481
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0xd99__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3481
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_testb__0x1___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i8, i8* %AL, align 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = and i8 %4, 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i8 %7, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_44000f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4401d6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.liberty_of_goal(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4400f2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4400a7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.safe_move(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440098(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x4d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4400a2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x4d8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1240
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4400ed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4400de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x4dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1244
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4400e8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x4e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1248
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4400f2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq___rdx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RDX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = sext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x1__MINUS0x680__rbp__rcx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %3, -1664
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  store i8 1, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rdx____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = bitcast i64* %RDX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.semeai_move_value(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57df7f___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57df7f_type* @G__0x57df7f to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__edi___edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RDI, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xc0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x2e0__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1696
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x684__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %R8, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r8___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %R8, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R9, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___r9____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = bitcast i64* %R9 to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6a0__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1696
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x10__r9____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %R9, align 8
  %5 = add i64 %4, 16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x684__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %R9, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r9___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x14__rdx____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, 20
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0xda0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3488
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsi___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %R10D, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = bitcast i64* %RSP to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i32 0, i32* %4, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_add_move(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_43ffc4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0xda1__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3489
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_440218(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0xda1__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3489
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0xda1__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3489
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_44022b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440430(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_44030e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4402c3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4402b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4402be(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440309(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4402fa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440304(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_44030e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440362(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2__MINUS0x690__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1680
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_44036c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x690__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1680
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x120__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -288
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x2e0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x684__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RSI, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R8, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___r8____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = bitcast i64* %R8 to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6a0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1696
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__r9____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x690__rbp____r10d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1680
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xda8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3496
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r8___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r10d___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %R10D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4401e0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0xda9__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3497
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_440472(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x180__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0xda9__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3497
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0xda9__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3497
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440485(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440656(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440568(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_44051d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_44050e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440518(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440563(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440554(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_44055e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440568(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r9___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R10, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x10__r10____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %R10, align 8
  %5 = add i64 %4, 16
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xdb0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3504
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %R11D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_44043a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0xdb1__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3505
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_440698(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x1e0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -480
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__dl__MINUS0xdb1__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3505
  %6 = load i8, i8* %DL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0xdb1__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3505
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4406ab(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4408b0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_44078e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440743(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440734(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_44073e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440789(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_44077a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440784(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_44078e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4407e2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4407ec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xdb8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3512
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440660(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x2e0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4408c4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x58__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4408c9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x4d4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1236
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440af7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x64__MINUS0x2dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -732
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -100
  %10 = icmp ult i32 %8, 100
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_440af7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x688__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1672
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0xdb9__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3513
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_44091a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x688__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1672
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x7ae438___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_setl__cl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  %12 = xor i1 %8, %11
  %13 = zext i1 %12 to i8
  store i8 %13, i8* %CL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0xdb9__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3513
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_44092d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440af2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x68c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1676
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0xdba__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3514
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440964(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x68c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1676
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0xdba__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3514
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440977(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440ad9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0x14__MINUS0x688__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1672
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, 20
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967292
  store i64 %12, i64* %RAX, align 8
  %13 = mul i64 %9, 85899345920
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 252
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x15___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 21
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -22
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x68c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1676
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6ec__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1772
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x6ec__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1772
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440ac0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x6ec__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1772
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpb__0x0__MINUS0x680__rbp__rax_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %3, -1664
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %10 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = icmp eq i8 %10, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i8 %10, 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6ec__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1772
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440abb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440a75(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440a1c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6ec__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1772
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x300__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -768
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440a70(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440a6b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x4e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440a66(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6ec__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1772
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.find_semeai_backfilling_move(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x340__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -832
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x340__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440a61(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x4e4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1252
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440a66(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440a6b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440ab6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440aa7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x320__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -800
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440ab1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440abb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440ac0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440ac5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x68c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1676
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440937(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440ade(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x688__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1672
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4408ed(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440af7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x640___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1600, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xd30__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3376
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_440e12(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_440df9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd3c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3388
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd3c__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsbl___rcx__rdx_1____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i64
  %11 = and i64 %10, 4294967295
  store i64 %11, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440de0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd3c__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x60__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -96
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440de0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd3c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.find_origin(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3380
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd34__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3380
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xd30__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -3376
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 8
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12, align 1
  %13 = and i32 %11, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  %20 = icmp eq i32 %11, 0
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %21, i8* %22, align 1
  %23 = lshr i32 %11, 31
  %24 = trunc i32 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %24, i8* %25, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440ddb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd3c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x14___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 20
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -21
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -3
  %8 = icmp ult i32 %4, 3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440bef(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd3c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3388
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x14___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 20
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ugt i32 %6, -21
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsbl___rax__rdx_1____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = add i64 %4, %3
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i64
  %11 = and i64 %10, 4294967295
  store i64 %11, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_440c9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440c29(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x14___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -20
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 20
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440c63(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x14___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -20
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp ult i32 %6, 20
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440ddb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd34__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3380
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.countlib(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_440dc4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0xd38__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.attack(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440dc4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd38__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440d45(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57df94___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57df94_type* @G__0x57df94 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x220__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -544
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x5c__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -92
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.close_pattern_list(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x200__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -512
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440d7a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd38__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440dbf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd38__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3384
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd34__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3380
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0xd30__rbp__rax_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -3376
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 11
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  store i32 1, i32* %10, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440ddb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440de0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440de5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440b36(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440dfe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440b19(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440e93(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x300__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -768
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x32___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 50, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x300__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -768
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57dfa7___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57dfa7_type* @G__0x57dfa7 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x2e0__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -736
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x300__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -768
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0xdc0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3520
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc0__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3520
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc0__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3520
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440f88(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440f14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x340__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57dfbc___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57dfbc_type* @G__0x57dfbc to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x340__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -832
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0xdc4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3524
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc4__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3524
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc4__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3524
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440f83(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x4dc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1244
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_440f7e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x320__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -800
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xa___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 10, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x320__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -800
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57dfcd___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57dfcd_type* @G__0x57dfcd to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_xorl__r9d___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 0, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x320__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -800
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6a0__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1696
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4413f7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xd40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3392
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_44101b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x6__0xb54ce4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %6 = add i32 %5, -6
  %7 = icmp ult i32 %5, 6
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i32 %6, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i32 %6, %5
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i32 %6, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %6, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %5, 31
  %28 = xor i32 %24, %27
  %29 = add nuw nsw i32 %28, %27
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_441000(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x684__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xc__0xb54ce4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %6 = add i32 %5, -12
  %7 = icmp ult i32 %5, 12
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i32 %6, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i32 %6, %5
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i32 %6, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %6, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %5, 31
  %28 = xor i32 %24, %27
  %29 = add nuw nsw i32 %28, %27
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_441020(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x684__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4413e3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xd40__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4413de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x7ae450___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x7ae450_type* @G_0x7ae450 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4413de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x64__0xb54ce4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %6 = add i32 %5, -100
  %7 = icmp ult i32 %5, 100
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i32 %6, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i32 %6, %5
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i32 %6, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %6, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %5, 31
  %28 = xor i32 %24, %27
  %29 = add nuw nsw i32 %28, %27
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd40__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rdx____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x58__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -88
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x684__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1668
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %R10, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r10___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R10, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rax____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r11d____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0
  %R11D = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = bitcast i64* %RSP to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %R11D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.semeai_trymove(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xab0f24___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xab0f24_type* @G_0xab0f24 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0x40___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 64
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RAX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = xor i8 %10, 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11, i8* %12, align 1
  %.lobit = lshr exact i32 %7, 6
  %13 = trunc i32 %.lobit to i8
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4410c9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.dump_stack(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4410f7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x6b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1716
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x6b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1712
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_441229(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_441121(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xd__0xb54ce4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb54ce4_type* @G_0xb54ce4 to i32*), align 8
  %6 = add i32 %5, -13
  %7 = icmp ult i32 %5, 13
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i32 %6, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i32 %6, %5
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i32 %6, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %6, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %5, 31
  %28 = xor i32 %24, %27
  %29 = add nuw nsw i32 %28, %27
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_441121(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x28__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x30__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.push_owl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_441138(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x4d0__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.memcpy_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_shlq__0x5___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = shl i64 %3, 5
  store i64 %6, i64* %RDX, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8 = lshr i64 %3, 59
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  store i8 %10, i8* %7, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %12 = trunc i64 %6 to i32
  %13 = and i32 %12, 224
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %11, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %20 = icmp eq i64 %6, 0
  %21 = zext i1 %20 to i8
  store i8 %21, i8* %19, align 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %23 = lshr i64 %3, 58
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  store i8 %25, i8* %22, align 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %26, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x10__rax____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x28__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_update_goal(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x8a4c__rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 35404
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.owl_update_boundary_marks(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x6b4__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1716
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x6b0__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1712
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x30__rbp____r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____r11d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x58__rbp____ebx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -88
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RBX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rdx__MINUS0xdd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3536
  %5 = load i64, i64* %RDX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r8___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0xdd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3540
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = bitcast i64* %RSP to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__0x10__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ebx__0x18__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0
  %EBX = bitcast %union.anon* %3 to i32*
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = load i64, i64* %RSP, align 8
  %5 = add i64 %4, 24
  %6 = load i32, i32* %EBX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.do_owl_analyze_semeai(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_44120d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_44120d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x30__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.pop_owl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_441224(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x4d0__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.popgo(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x6b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1716
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_441333(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x6b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1712
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd40__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4412b4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__r9___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %R9, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0x8__rax____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4412e9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd40__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_44132e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd40__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3392
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x7__MINUS0x6b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1712
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -7
  %10 = icmp ult i32 %8, 7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_441386(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x7__MINUS0x6b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1716
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -7
  %10 = icmp ult i32 %8, 7
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x6a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_441386(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x7__MINUS0x6a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 7, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x7__MINUS0x6a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 7, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1708
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x6b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1720
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x6b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1712
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4413d9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x6b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1716
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3__MINUS0x6a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -3
  %10 = icmp ult i32 %8, 3
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x6a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x6a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4413de(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_440fae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4414dc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x54__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -84
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x7____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  store i32 7, i32* %4, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_441483(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x7___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 7, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57dfe1___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57dfe1_type* @G__0x57dfe1 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_441488(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_44149d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4414d7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orl__0x7000000___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = or i64 %3, 117440512
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %RCX, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %16, align 1
  %17 = lshr i32 %7, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_orl__0x700000___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  %6 = or i64 %3, 7340032
  %7 = trunc i64 %6 to i32
  %8 = and i64 %6, 4294967295
  store i64 %8, i64* %RCX, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %7, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %16, align 1
  %17 = lshr i32 %7, 31
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4415f7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -52
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x48__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x40__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0xde0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -3552
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %R10, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r11____rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = bitcast i64* %RSP to i64**
  %4 = load i64*, i64** %3, align 8
  %5 = load i64, i64* %R11, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__0x10__rsp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, 16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xde4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -3556
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_44157c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 3, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x57dfe6___r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x57dfe6_type* @G__0x57dfe6 to i64), i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4415a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4415f2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_andl__0xf___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = and i64 %3, 15
  %7 = trunc i64 %6 to i32
  store i64 %6, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = tail call i32 @llvm.ctpop.i32(i32 %7)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = icmp eq i32 %7, 0
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %19, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shll__0x18___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 24
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 8
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = icmp eq i32 %6, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %14, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = lshr i32 %.tr, 7
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  store i8 %20, i8* %17, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_shll__0x14___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %.tr = trunc i64 %3 to i32
  %6 = shl i32 %.tr, 20
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %RDX, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9 = lshr i64 %3, 12
  %10 = trunc i64 %9 to i8
  %11 = and i8 %10, 1
  store i8 %11, i8* %8, align 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %12, align 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = icmp eq i32 %6, 0
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %14, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = lshr i32 %.tr, 11
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  store i8 %20, i8* %17, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6a4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x40__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -64
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6a8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x48__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -72
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x6a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_441626(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6ac__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1708
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_44167f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6ac__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1708
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6a4__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1700
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x6b8__rbp____r9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1720
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %R9, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_441684(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4416a8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_441703(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6a4__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1700
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6a8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1704
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x6ac__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1708
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0xdf8___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 3576
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -3577
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBX, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__r14(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %R14, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__r15(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %R15, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
