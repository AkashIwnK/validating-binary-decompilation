; ModuleID = 'mcsema/test.proposed.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%__bss_start_type = type <{ [8 x i8] }>
%G_0x6cd68__rip__type = type <{ [8 x i8] }>
%G_0x6cea2__rip__type = type <{ [8 x i8] }>
%G_0x7ae438_type = type <{ [4 x i8] }>
%G_0xab0fe0_type = type <{ [8 x i8] }>
%G_0xb63050_type = type <{ [4 x i8] }>
%G__0x58192c_type = type <{ [8 x i8] }>
%G__0x5819e3_type = type <{ [8 x i8] }>
%G__0x5819f6_type = type <{ [8 x i8] }>
%G__0xb0eff0_type = type <{ [8 x i8] }>
%G__0xb44530_type = type <{ [8 x i8] }>
%G__0xb4bd20_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { i64 }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque

@__bss_start = local_unnamed_addr global %__bss_start_type zeroinitializer
@G_0x6cd68__rip_ = global %G_0x6cd68__rip__type zeroinitializer
@G_0x6cea2__rip_ = global %G_0x6cea2__rip__type zeroinitializer
@G_0x7ae438 = local_unnamed_addr global %G_0x7ae438_type zeroinitializer
@G_0xab0fe0 = local_unnamed_addr global %G_0xab0fe0_type zeroinitializer
@G_0xb63050 = local_unnamed_addr global %G_0xb63050_type zeroinitializer
@G__0x58192c = global %G__0x58192c_type zeroinitializer
@G__0x5819e3 = global %G__0x5819e3_type zeroinitializer
@G__0x5819f6 = global %G__0x5819f6_type zeroinitializer
@G__0xb0eff0 = global %G__0xb0eff0_type zeroinitializer
@G__0xb44530 = global %G__0xb44530_type zeroinitializer
@G__0xb4bd20 = global %G__0xb4bd20_type zeroinitializer

declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #0

declare extern_weak x86_64_sysvcc i64 @floor(i64)

declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64)

declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64)

declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr

declare %struct.Memory* @sub_41fc30.is_same_dragon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_415cb0.mark_string(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_452090.abortgo(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4011f0.ceil_plt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_423120.are_neighbor_dragons(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_474970.start_draw_board(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_474a20.draw_color_char(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_474da0.end_draw_board(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: alwaysinline
define %struct.Memory* @compute_surroundings(%struct.State* noalias, i64, %struct.Memory* noalias) local_unnamed_addr #1 {
entry:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP.i, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  %10 = load i64, i64* %3, align 8
  store i64 %8, i64* %RBP.i, align 8
  %11 = add i64 %7, -1240
  store i64 %11, i64* %6, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX.i1403 = bitcast %union.anon* %18 to i32*
  %RAX.i1404 = getelementptr inbounds %union.anon, %union.anon* %18, i64 0, i32 0
  store i64 0, i64* %RAX.i1404, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D.i = bitcast %union.anon* %19 to i32*
  %20 = getelementptr inbounds %union.anon, %union.anon* %19, i64 0, i32 0
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 400, i64* %21, align 8
  %R10.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %22 = add i64 %7, -1048
  store i64 %22, i64* %R10.i, align 8
  %R11.i = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %23 = add i64 %7, -648
  store i64 %23, i64* %R11.i, align 8
  store i64 3, i64* %20, align 8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI.i = bitcast %union.anon* %24 to i32*
  %25 = add i64 %7, -16
  %26 = load i32, i32* %EDI.i, align 4
  %27 = add i64 %10, 44
  store i64 %27, i64* %3, align 8
  %28 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %28, align 4
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI.i1650 = bitcast %union.anon* %29 to i32*
  %30 = load i64, i64* %RBP.i, align 8
  %31 = add i64 %30, -12
  %32 = load i32, i32* %ESI.i1650, align 4
  %33 = load i64, i64* %3, align 8
  %34 = add i64 %33, 3
  store i64 %34, i64* %3, align 8
  %35 = inttoptr i64 %31 to i32*
  store i32 %32, i32* %35, align 4
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX.i1677 = bitcast %union.anon* %36 to i32*
  %37 = load i64, i64* %RBP.i, align 8
  %38 = add i64 %37, -16
  %39 = load i32, i32* %EDX.i1677, align 4
  %40 = load i64, i64* %3, align 8
  %41 = add i64 %40, 3
  store i64 %41, i64* %3, align 8
  %42 = inttoptr i64 %38 to i32*
  store i32 %39, i32* %42, align 4
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %RCX.i1715 = getelementptr inbounds %union.anon, %union.anon* %43, i64 0, i32 0
  %44 = load i64, i64* %RBP.i, align 8
  %45 = add i64 %44, -24
  %46 = load i64, i64* %RCX.i1715, align 8
  %47 = load i64, i64* %3, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %3, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP.i, align 8
  %51 = add i64 %50, -212
  %52 = load i64, i64* %3, align 8
  %53 = add i64 %52, 10
  store i64 %53, i64* %3, align 8
  %54 = inttoptr i64 %51 to i32*
  store i32 0, i32* %54, align 4
  %55 = load i64, i64* %RBP.i, align 8
  %56 = add i64 %55, -216
  %57 = load i64, i64* %3, align 8
  %58 = add i64 %57, 10
  store i64 %58, i64* %3, align 8
  %59 = inttoptr i64 %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = load i64, i64* %RBP.i, align 8
  %61 = add i64 %60, -8
  %62 = load i64, i64* %3, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %3, align 8
  %64 = inttoptr i64 %61 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = sext i32 %65 to i64
  store i64 %66, i64* %RCX.i1715, align 8
  %RDX.i1921 = getelementptr inbounds %union.anon, %union.anon* %36, i64 0, i32 0
  %67 = add nsw i64 %66, 12099168
  %68 = add i64 %62, 12
  store i64 %68, i64* %3, align 8
  %69 = inttoptr i64 %67 to i8*
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i64
  store i64 %71, i64* %RDX.i1921, align 8
  %72 = add i64 %60, -228
  %73 = zext i8 %70 to i32
  %74 = add i64 %62, 18
  store i64 %74, i64* %3, align 8
  %75 = inttoptr i64 %72 to i32*
  store i32 %73, i32* %75, align 4
  %76 = load i32, i32* %R8D.i, align 4
  %77 = load i64, i64* %RBP.i, align 8
  %78 = add i64 %77, -228
  %79 = load i64, i64* %3, align 8
  %80 = add i64 %79, 7
  store i64 %80, i64* %3, align 8
  %81 = inttoptr i64 %78 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = sub i32 %76, %82
  %84 = zext i32 %83 to i64
  store i64 %84, i64* %20, align 8
  %85 = icmp ult i32 %76, %82
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %12, align 1
  %87 = and i32 %83, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87)
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %13, align 1
  %92 = xor i32 %82, %76
  %93 = xor i32 %92, %83
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  store i8 %96, i8* %14, align 1
  %97 = icmp eq i32 %83, 0
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %15, align 1
  %99 = lshr i32 %83, 31
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %16, align 1
  %101 = lshr i32 %76, 31
  %102 = lshr i32 %82, 31
  %103 = xor i32 %102, %101
  %104 = xor i32 %99, %101
  %105 = add nuw nsw i32 %104, %103
  %106 = icmp eq i32 %105, 2
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %17, align 1
  %108 = add i64 %77, -232
  %109 = add i64 %79, 14
  store i64 %109, i64* %3, align 8
  %110 = inttoptr i64 %108 to i32*
  store i32 %83, i32* %110, align 4
  %RDI.i2173 = getelementptr inbounds %union.anon, %union.anon* %24, i64 0, i32 0
  %111 = load i64, i64* %R11.i, align 8
  %112 = load i64, i64* %3, align 8
  store i64 %111, i64* %RDI.i2173, align 8
  %RSI.i2336 = getelementptr inbounds %union.anon, %union.anon* %29, i64 0, i32 0
  %113 = load i32, i32* %EAX.i1403, align 4
  %114 = zext i32 %113 to i64
  store i64 %114, i64* %RSI.i2336, align 8
  %115 = load i64, i64* %21, align 8
  store i64 %115, i64* %RDX.i1921, align 8
  %116 = load i64, i64* %RBP.i, align 8
  %117 = add i64 %116, -1152
  %118 = load i64, i64* %R10.i, align 8
  %119 = add i64 %112, 15
  store i64 %119, i64* %3, align 8
  %120 = inttoptr i64 %117 to i64*
  store i64 %118, i64* %120, align 8
  %121 = load i64, i64* %RBP.i, align 8
  %122 = add i64 %121, -1160
  %123 = load i64, i64* %21, align 8
  %124 = load i64, i64* %3, align 8
  %125 = add i64 %124, 7
  store i64 %125, i64* %3, align 8
  %126 = inttoptr i64 %122 to i64*
  store i64 %123, i64* %126, align 8
  %127 = load i64, i64* %RBP.i, align 8
  %128 = add i64 %127, -1164
  %129 = load i32, i32* %EAX.i1403, align 4
  %130 = load i64, i64* %3, align 8
  %131 = add i64 %130, 6
  store i64 %131, i64* %3, align 8
  %132 = inttoptr i64 %128 to i32*
  store i32 %129, i32* %132, align 4
  %133 = load i64, i64* %3, align 8
  %134 = add i64 %133, -477159
  %135 = add i64 %133, 5
  %136 = load i64, i64* %6, align 8
  %137 = add i64 %136, -8
  %138 = inttoptr i64 %137 to i64*
  store i64 %135, i64* %138, align 8
  store i64 %137, i64* %6, align 8
  store i64 %134, i64* %3, align 8
  %139 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  %140 = load i64, i64* %RBP.i, align 8
  %141 = add i64 %140, -1152
  %142 = load i64, i64* %3, align 8
  %143 = add i64 %142, 7
  store i64 %143, i64* %3, align 8
  %144 = inttoptr i64 %141 to i64*
  %145 = load i64, i64* %144, align 8
  store i64 %145, i64* %RDI.i2173, align 8
  %146 = add i64 %140, -1164
  %147 = add i64 %142, 13
  store i64 %147, i64* %3, align 8
  %148 = inttoptr i64 %146 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = zext i32 %149 to i64
  store i64 %150, i64* %RSI.i2336, align 8
  %151 = add i64 %140, -1160
  %152 = add i64 %142, 20
  store i64 %152, i64* %3, align 8
  %153 = inttoptr i64 %151 to i64*
  %154 = load i64, i64* %153, align 8
  store i64 %154, i64* %RDX.i1921, align 8
  %155 = add i64 %142, -477164
  %156 = add i64 %142, 25
  %157 = load i64, i64* %6, align 8
  %158 = add i64 %157, -8
  %159 = inttoptr i64 %158 to i64*
  store i64 %156, i64* %159, align 8
  store i64 %158, i64* %6, align 8
  store i64 %155, i64* %3, align 8
  %160 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %139)
  %161 = load i64, i64* %RBP.i, align 8
  %162 = add i64 %161, -48
  %163 = load i64, i64* %3, align 8
  %164 = add i64 %163, 7
  store i64 %164, i64* %3, align 8
  %165 = inttoptr i64 %162 to i32*
  store i32 21, i32* %165, align 4
  %ECX.i2918 = bitcast %union.anon* %43 to i32*
  %.pre = load i64, i64* %3, align 8
  br label %block_.L_47587c

block_.L_47587c:                                  ; preds = %block_.L_4758ea, %entry
  %166 = phi i64 [ %.pre, %entry ], [ %356, %block_.L_4758ea ]
  %167 = load i64, i64* %RBP.i, align 8
  %168 = add i64 %167, -48
  %169 = add i64 %166, 7
  store i64 %169, i64* %3, align 8
  %170 = inttoptr i64 %168 to i32*
  %171 = load i32, i32* %170, align 4
  %172 = add i32 %171, -400
  %173 = icmp ult i32 %171, 400
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %12, align 1
  %175 = and i32 %172, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175)
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %13, align 1
  %180 = xor i32 %171, 16
  %181 = xor i32 %180, %172
  %182 = lshr i32 %181, 4
  %183 = trunc i32 %182 to i8
  %184 = and i8 %183, 1
  store i8 %184, i8* %14, align 1
  %185 = icmp eq i32 %172, 0
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %15, align 1
  %187 = lshr i32 %172, 31
  %188 = trunc i32 %187 to i8
  store i8 %188, i8* %16, align 1
  %189 = lshr i32 %171, 31
  %190 = xor i32 %187, %189
  %191 = add nuw nsw i32 %190, %189
  %192 = icmp eq i32 %191, 2
  %193 = zext i1 %192 to i8
  store i8 %193, i8* %17, align 1
  %194 = icmp ne i8 %188, 0
  %195 = xor i1 %194, %192
  %.v366 = select i1 %195, i64 13, i64 129
  %196 = add i64 %166, %.v366
  store i64 %196, i64* %3, align 8
  br i1 %195, label %block_475889, label %block_.L_4758fd

block_475889:                                     ; preds = %block_.L_47587c
  %197 = add i64 %196, 4
  store i64 %197, i64* %3, align 8
  %198 = load i32, i32* %170, align 4
  %199 = sext i32 %198 to i64
  store i64 %199, i64* %RAX.i1404, align 8
  %200 = add nsw i64 %199, 12099168
  %201 = add i64 %196, 12
  store i64 %201, i64* %3, align 8
  %202 = inttoptr i64 %200 to i8*
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i64
  store i64 %204, i64* %RCX.i1715, align 8
  %205 = zext i8 %203 to i32
  %206 = add nsw i32 %205, -3
  %207 = icmp ult i8 %203, 3
  %208 = zext i1 %207 to i8
  store i8 %208, i8* %12, align 1
  %209 = and i32 %206, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209)
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %13, align 1
  %214 = xor i32 %206, %205
  %215 = lshr i32 %214, 4
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  store i8 %217, i8* %14, align 1
  %218 = icmp eq i32 %206, 0
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %15, align 1
  %220 = lshr i32 %206, 31
  %221 = trunc i32 %220 to i8
  store i8 %221, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v472 = select i1 %218, i64 97, i64 21
  %222 = add i64 %196, %.v472
  store i64 %222, i64* %3, align 8
  br i1 %218, label %block_.L_4758ea, label %block_47589e

block_47589e:                                     ; preds = %block_475889
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1404, align 8
  %223 = add i64 %222, 14
  store i64 %223, i64* %3, align 8
  %224 = load i32, i32* %170, align 4
  %225 = sext i32 %224 to i64
  %226 = mul nsw i64 %225, 380
  store i64 %226, i64* %RCX.i1715, align 8
  %227 = lshr i64 %226, 63
  %228 = add i64 %226, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %228, i64* %RAX.i1404, align 8
  %229 = icmp ult i64 %228, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %230 = icmp ult i64 %228, %226
  %231 = or i1 %229, %230
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %12, align 1
  %233 = trunc i64 %228 to i32
  %234 = and i32 %233, 252
  %235 = tail call i32 @llvm.ctpop.i32(i32 %234)
  %236 = trunc i32 %235 to i8
  %237 = and i8 %236, 1
  %238 = xor i8 %237, 1
  store i8 %238, i8* %13, align 1
  %239 = xor i64 %226, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %240 = xor i64 %239, %228
  %241 = lshr i64 %240, 4
  %242 = trunc i64 %241 to i8
  %243 = and i8 %242, 1
  store i8 %243, i8* %14, align 1
  %244 = icmp eq i64 %228, 0
  %245 = zext i1 %244 to i8
  store i8 %245, i8* %15, align 1
  %246 = lshr i64 %228, 63
  %247 = trunc i64 %246 to i8
  store i8 %247, i8* %16, align 1
  %248 = xor i64 %246, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %249 = xor i64 %246, %227
  %250 = add nuw nsw i64 %248, %249
  %251 = icmp eq i64 %250, 2
  %252 = zext i1 %251 to i8
  store i8 %252, i8* %17, align 1
  %253 = add i64 %226, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 12)
  %254 = add i64 %222, 27
  store i64 %254, i64* %3, align 8
  %255 = inttoptr i64 %253 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RDX.i1921, align 8
  %258 = add i64 %222, 30
  store i64 %258, i64* %3, align 8
  %259 = load i32, i32* %170, align 4
  %260 = sub i32 %256, %259
  %261 = icmp ult i32 %256, %259
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %12, align 1
  %263 = and i32 %260, 255
  %264 = tail call i32 @llvm.ctpop.i32(i32 %263)
  %265 = trunc i32 %264 to i8
  %266 = and i8 %265, 1
  %267 = xor i8 %266, 1
  store i8 %267, i8* %13, align 1
  %268 = xor i32 %259, %256
  %269 = xor i32 %268, %260
  %270 = lshr i32 %269, 4
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  store i8 %272, i8* %14, align 1
  %273 = icmp eq i32 %260, 0
  %274 = zext i1 %273 to i8
  store i8 %274, i8* %15, align 1
  %275 = lshr i32 %260, 31
  %276 = trunc i32 %275 to i8
  store i8 %276, i8* %16, align 1
  %277 = lshr i32 %256, 31
  %278 = lshr i32 %259, 31
  %279 = xor i32 %278, %277
  %280 = xor i32 %275, %277
  %281 = add nuw nsw i32 %280, %279
  %282 = icmp eq i32 %281, 2
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %17, align 1
  %.v473 = select i1 %273, i64 36, i64 76
  %284 = add i64 %222, %.v473
  store i64 %284, i64* %3, align 8
  br i1 %273, label %block_4758c2, label %block_.L_4758ea

block_4758c2:                                     ; preds = %block_47589e
  %285 = load i64, i64* %RBP.i, align 8
  %286 = add i64 %285, -48
  %287 = add i64 %284, 3
  store i64 %287, i64* %3, align 8
  %288 = inttoptr i64 %286 to i32*
  %289 = load i32, i32* %288, align 4
  %290 = zext i32 %289 to i64
  store i64 %290, i64* %RDI.i2173, align 8
  %291 = add i64 %285, -8
  %292 = add i64 %284, 6
  store i64 %292, i64* %3, align 8
  %293 = inttoptr i64 %291 to i32*
  %294 = load i32, i32* %293, align 4
  %295 = zext i32 %294 to i64
  store i64 %295, i64* %RSI.i2336, align 8
  %296 = add i64 %284, -351378
  %297 = add i64 %284, 11
  %298 = load i64, i64* %6, align 8
  %299 = add i64 %298, -8
  %300 = inttoptr i64 %299 to i64*
  store i64 %297, i64* %300, align 8
  store i64 %299, i64* %6, align 8
  store i64 %296, i64* %3, align 8
  %call2_4758c8 = tail call %struct.Memory* @sub_41fc30.is_same_dragon(%struct.State* nonnull %0, i64 %296, %struct.Memory* %160)
  %301 = load i32, i32* %EAX.i1403, align 4
  %302 = load i64, i64* %3, align 8
  store i8 0, i8* %12, align 1
  %303 = and i32 %301, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303)
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %308 = icmp eq i32 %301, 0
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %15, align 1
  %310 = lshr i32 %301, 31
  %311 = trunc i32 %310 to i8
  store i8 %311, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v474 = select i1 %308, i64 29, i64 9
  %312 = add i64 %302, %.v474
  store i64 %312, i64* %3, align 8
  br i1 %308, label %block_.L_4758ea, label %block_4758d6

block_4758d6:                                     ; preds = %block_4758c2
  store i64 1, i64* %RDX.i1921, align 8
  %313 = load i64, i64* %RBP.i, align 8
  %314 = add i64 %313, -640
  store i64 %314, i64* %RSI.i2336, align 8
  %315 = add i64 %313, -48
  %316 = add i64 %312, 15
  store i64 %316, i64* %3, align 8
  %317 = inttoptr i64 %315 to i32*
  %318 = load i32, i32* %317, align 4
  %319 = zext i32 %318 to i64
  store i64 %319, i64* %RDI.i2173, align 8
  %320 = add i64 %312, -392230
  %321 = add i64 %312, 20
  %322 = load i64, i64* %6, align 8
  %323 = add i64 %322, -8
  %324 = inttoptr i64 %323 to i64*
  store i64 %321, i64* %324, align 8
  store i64 %323, i64* %6, align 8
  store i64 %320, i64* %3, align 8
  %call2_4758e5 = tail call %struct.Memory* @sub_415cb0.mark_string(%struct.State* nonnull %0, i64 %320, %struct.Memory* %160)
  %.pre349 = load i64, i64* %3, align 8
  br label %block_.L_4758ea

block_.L_4758ea:                                  ; preds = %block_47589e, %block_4758d6, %block_4758c2, %block_475889
  %325 = phi i64 [ %.pre349, %block_4758d6 ], [ %312, %block_4758c2 ], [ %284, %block_47589e ], [ %222, %block_475889 ]
  %326 = load i64, i64* %RBP.i, align 8
  %327 = add i64 %326, -48
  %328 = add i64 %325, 8
  store i64 %328, i64* %3, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = add i32 %330, 1
  %332 = zext i32 %331 to i64
  store i64 %332, i64* %RAX.i1404, align 8
  %333 = icmp eq i32 %330, -1
  %334 = icmp eq i32 %331, 0
  %335 = or i1 %333, %334
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %12, align 1
  %337 = and i32 %331, 255
  %338 = tail call i32 @llvm.ctpop.i32(i32 %337)
  %339 = trunc i32 %338 to i8
  %340 = and i8 %339, 1
  %341 = xor i8 %340, 1
  store i8 %341, i8* %13, align 1
  %342 = xor i32 %331, %330
  %343 = lshr i32 %342, 4
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  store i8 %345, i8* %14, align 1
  %346 = zext i1 %334 to i8
  store i8 %346, i8* %15, align 1
  %347 = lshr i32 %331, 31
  %348 = trunc i32 %347 to i8
  store i8 %348, i8* %16, align 1
  %349 = lshr i32 %330, 31
  %350 = xor i32 %347, %349
  %351 = add nuw nsw i32 %350, %347
  %352 = icmp eq i32 %351, 2
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %17, align 1
  %354 = add i64 %325, 14
  store i64 %354, i64* %3, align 8
  store i32 %331, i32* %329, align 4
  %355 = load i64, i64* %3, align 8
  %356 = add i64 %355, -124
  store i64 %356, i64* %3, align 8
  br label %block_.L_47587c

block_.L_4758fd:                                  ; preds = %block_.L_47587c
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1404, align 8
  %357 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %357, i64* %RCX.i1715, align 8
  %358 = add i64 %167, -8
  %359 = add i64 %196, 22
  store i64 %359, i64* %3, align 8
  %360 = inttoptr i64 %358 to i32*
  %361 = load i32, i32* %360, align 4
  %362 = sext i32 %361 to i64
  %363 = mul nsw i64 %362, 76
  store i64 %363, i64* %RDX.i1921, align 8
  %364 = lshr i64 %363, 63
  %365 = add i64 %363, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %365, i64* %RAX.i1404, align 8
  %366 = icmp ult i64 %365, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %367 = icmp ult i64 %365, %363
  %368 = or i1 %366, %367
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %12, align 1
  %370 = trunc i64 %365 to i32
  %371 = and i32 %370, 252
  %372 = tail call i32 @llvm.ctpop.i32(i32 %371)
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  store i8 %375, i8* %13, align 1
  %376 = xor i64 %363, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %377 = xor i64 %376, %365
  %378 = lshr i64 %377, 4
  %379 = trunc i64 %378 to i8
  %380 = and i8 %379, 1
  store i8 %380, i8* %14, align 1
  %381 = icmp eq i64 %365, 0
  %382 = zext i1 %381 to i8
  store i8 %382, i8* %15, align 1
  %383 = lshr i64 %365, 63
  %384 = trunc i64 %383 to i8
  store i8 %384, i8* %16, align 1
  %385 = xor i64 %383, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %386 = xor i64 %383, %364
  %387 = add nuw nsw i64 %385, %386
  %388 = icmp eq i64 %387, 2
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %17, align 1
  %390 = add i64 %363, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %391 = add i64 %196, 33
  store i64 %391, i64* %3, align 8
  %392 = inttoptr i64 %390 to i32*
  %393 = load i32, i32* %392, align 4
  %394 = sext i32 %393 to i64
  %395 = mul nsw i64 %394, 104
  store i64 %395, i64* %RAX.i1404, align 8
  %396 = lshr i64 %395, 63
  %397 = load i64, i64* %RCX.i1715, align 8
  %398 = add i64 %395, %397
  store i64 %398, i64* %RCX.i1715, align 8
  %399 = icmp ult i64 %398, %397
  %400 = icmp ult i64 %398, %395
  %401 = or i1 %399, %400
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %12, align 1
  %403 = trunc i64 %398 to i32
  %404 = and i32 %403, 255
  %405 = tail call i32 @llvm.ctpop.i32(i32 %404)
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  store i8 %408, i8* %13, align 1
  %409 = xor i64 %395, %397
  %410 = xor i64 %409, %398
  %411 = lshr i64 %410, 4
  %412 = trunc i64 %411 to i8
  %413 = and i8 %412, 1
  store i8 %413, i8* %14, align 1
  %414 = icmp eq i64 %398, 0
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %15, align 1
  %416 = lshr i64 %398, 63
  %417 = trunc i64 %416 to i8
  store i8 %417, i8* %16, align 1
  %418 = lshr i64 %397, 63
  %419 = xor i64 %416, %418
  %420 = xor i64 %416, %396
  %421 = add nuw nsw i64 %419, %420
  %422 = icmp eq i64 %421, 2
  %423 = zext i1 %422 to i8
  store i8 %423, i8* %17, align 1
  %424 = add i64 %398, 48
  %425 = add i64 %196, 44
  store i64 %425, i64* %3, align 8
  %426 = inttoptr i64 %424 to i32*
  %427 = load i32, i32* %426, align 4
  store i8 0, i8* %12, align 1
  %428 = and i32 %427, 255
  %429 = tail call i32 @llvm.ctpop.i32(i32 %428)
  %430 = trunc i32 %429 to i8
  %431 = and i8 %430, 1
  %432 = xor i8 %431, 1
  store i8 %432, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %433 = icmp eq i32 %427, 0
  %434 = zext i1 %433 to i8
  store i8 %434, i8* %15, align 1
  %435 = lshr i32 %427, 31
  %436 = trunc i32 %435 to i8
  store i8 %436, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v367 = select i1 %433, i64 50, i64 62
  %437 = add i64 %196, %.v367
  store i64 %437, i64* %3, align 8
  %438 = load i64, i64* %RBP.i, align 8
  br i1 %433, label %block_47592f, label %block_.L_47593b

block_47592f:                                     ; preds = %block_.L_4758fd
  %439 = add i64 %438, -4
  %440 = add i64 %437, 7
  store i64 %440, i64* %3, align 8
  %441 = inttoptr i64 %439 to i32*
  store i32 0, i32* %441, align 4
  %442 = load i64, i64* %3, align 8
  %443 = add i64 %442, 5619
  store i64 %443, i64* %3, align 8
  br label %block_.L_476f29

block_.L_47593b:                                  ; preds = %block_.L_4758fd
  %444 = add i64 %438, -44
  %445 = add i64 %437, 7
  store i64 %445, i64* %3, align 8
  %446 = inttoptr i64 %444 to i32*
  store i32 0, i32* %446, align 4
  %.pre219 = load i64, i64* %3, align 8
  br label %block_.L_475942

block_.L_475942:                                  ; preds = %block_.L_475a7b, %block_.L_47593b
  %447 = phi i64 [ %.pre219, %block_.L_47593b ], [ %970, %block_.L_475a7b ]
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1404, align 8
  %448 = load i64, i64* %RBP.i, align 8
  %449 = add i64 %448, -44
  %450 = add i64 %447, 13
  store i64 %450, i64* %3, align 8
  %451 = inttoptr i64 %449 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  store i64 %453, i64* %RCX.i1715, align 8
  %454 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %454, i64* %RDX.i1921, align 8
  %455 = add i64 %448, -8
  %456 = add i64 %447, 25
  store i64 %456, i64* %3, align 8
  %457 = inttoptr i64 %455 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = sext i32 %458 to i64
  %460 = mul nsw i64 %459, 76
  store i64 %460, i64* %RSI.i2336, align 8
  %461 = lshr i64 %460, 63
  %462 = add i64 %460, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %462, i64* %RAX.i1404, align 8
  %463 = icmp ult i64 %462, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %464 = icmp ult i64 %462, %460
  %465 = or i1 %463, %464
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %12, align 1
  %467 = trunc i64 %462 to i32
  %468 = and i32 %467, 252
  %469 = tail call i32 @llvm.ctpop.i32(i32 %468)
  %470 = trunc i32 %469 to i8
  %471 = and i8 %470, 1
  %472 = xor i8 %471, 1
  store i8 %472, i8* %13, align 1
  %473 = xor i64 %460, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %474 = xor i64 %473, %462
  %475 = lshr i64 %474, 4
  %476 = trunc i64 %475 to i8
  %477 = and i8 %476, 1
  store i8 %477, i8* %14, align 1
  %478 = icmp eq i64 %462, 0
  %479 = zext i1 %478 to i8
  store i8 %479, i8* %15, align 1
  %480 = lshr i64 %462, 63
  %481 = trunc i64 %480 to i8
  store i8 %481, i8* %16, align 1
  %482 = xor i64 %480, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %483 = xor i64 %480, %461
  %484 = add nuw nsw i64 %482, %483
  %485 = icmp eq i64 %484, 2
  %486 = zext i1 %485 to i8
  store i8 %486, i8* %17, align 1
  %487 = add i64 %460, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %488 = add i64 %447, 36
  store i64 %488, i64* %3, align 8
  %489 = inttoptr i64 %487 to i32*
  %490 = load i32, i32* %489, align 4
  %491 = sext i32 %490 to i64
  %492 = mul nsw i64 %491, 104
  store i64 %492, i64* %RAX.i1404, align 8
  %493 = lshr i64 %492, 63
  %494 = load i64, i64* %RDX.i1921, align 8
  %495 = add i64 %492, %494
  store i64 %495, i64* %RDX.i1921, align 8
  %496 = icmp ult i64 %495, %494
  %497 = icmp ult i64 %495, %492
  %498 = or i1 %496, %497
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %12, align 1
  %500 = trunc i64 %495 to i32
  %501 = and i32 %500, 255
  %502 = tail call i32 @llvm.ctpop.i32(i32 %501)
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = xor i8 %504, 1
  store i8 %505, i8* %13, align 1
  %506 = xor i64 %492, %494
  %507 = xor i64 %506, %495
  %508 = lshr i64 %507, 4
  %509 = trunc i64 %508 to i8
  %510 = and i8 %509, 1
  store i8 %510, i8* %14, align 1
  %511 = icmp eq i64 %495, 0
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %15, align 1
  %513 = lshr i64 %495, 63
  %514 = trunc i64 %513 to i8
  store i8 %514, i8* %16, align 1
  %515 = lshr i64 %494, 63
  %516 = xor i64 %513, %515
  %517 = xor i64 %513, %493
  %518 = add nuw nsw i64 %516, %517
  %519 = icmp eq i64 %518, 2
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %17, align 1
  %521 = load i32, i32* %ECX.i2918, align 4
  %522 = add i64 %495, 44
  %523 = add i64 %447, 46
  store i64 %523, i64* %3, align 8
  %524 = inttoptr i64 %522 to i32*
  %525 = load i32, i32* %524, align 4
  %526 = sub i32 %521, %525
  %527 = icmp ult i32 %521, %525
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %12, align 1
  %529 = and i32 %526, 255
  %530 = tail call i32 @llvm.ctpop.i32(i32 %529)
  %531 = trunc i32 %530 to i8
  %532 = and i8 %531, 1
  %533 = xor i8 %532, 1
  store i8 %533, i8* %13, align 1
  %534 = xor i32 %525, %521
  %535 = xor i32 %534, %526
  %536 = lshr i32 %535, 4
  %537 = trunc i32 %536 to i8
  %538 = and i8 %537, 1
  store i8 %538, i8* %14, align 1
  %539 = icmp eq i32 %526, 0
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %15, align 1
  %541 = lshr i32 %526, 31
  %542 = trunc i32 %541 to i8
  store i8 %542, i8* %16, align 1
  %543 = lshr i32 %521, 31
  %544 = lshr i32 %525, 31
  %545 = xor i32 %544, %543
  %546 = xor i32 %541, %543
  %547 = add nuw nsw i32 %546, %545
  %548 = icmp eq i32 %547, 2
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %17, align 1
  %550 = icmp ne i8 %542, 0
  %551 = xor i1 %550, %548
  %.v368 = select i1 %551, i64 52, i64 332
  %552 = add i64 %447, %.v368
  store i64 %552, i64* %3, align 8
  br i1 %551, label %block_475976, label %block_.L_475a8e

block_475976:                                     ; preds = %block_.L_475942
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX.i1404, align 8
  %553 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %553, i64* %RCX.i1715, align 8
  store i64 %553, i64* %RDX.i1921, align 8
  %554 = load i64, i64* %RBP.i, align 8
  %555 = add i64 %554, -8
  %556 = add i64 %552, 30
  store i64 %556, i64* %3, align 8
  %557 = inttoptr i64 %555 to i32*
  %558 = load i32, i32* %557, align 4
  %559 = sext i32 %558 to i64
  %560 = mul nsw i64 %559, 76
  store i64 %560, i64* %RSI.i2336, align 8
  %561 = lshr i64 %560, 63
  %562 = add i64 %560, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  store i64 %562, i64* %RDI.i2173, align 8
  %563 = icmp ult i64 %562, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %564 = icmp ult i64 %562, %560
  %565 = or i1 %563, %564
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %12, align 1
  %567 = trunc i64 %562 to i32
  %568 = and i32 %567, 252
  %569 = tail call i32 @llvm.ctpop.i32(i32 %568)
  %570 = trunc i32 %569 to i8
  %571 = and i8 %570, 1
  %572 = xor i8 %571, 1
  store i8 %572, i8* %13, align 1
  %573 = xor i64 %560, ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64)
  %574 = xor i64 %573, %562
  %575 = lshr i64 %574, 4
  %576 = trunc i64 %575 to i8
  %577 = and i8 %576, 1
  store i8 %577, i8* %14, align 1
  %578 = icmp eq i64 %562, 0
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %15, align 1
  %580 = lshr i64 %562, 63
  %581 = trunc i64 %580 to i8
  store i8 %581, i8* %16, align 1
  %582 = xor i64 %580, lshr (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 63)
  %583 = xor i64 %580, %561
  %584 = add nuw nsw i64 %582, %583
  %585 = icmp eq i64 %584, 2
  %586 = zext i1 %585 to i8
  store i8 %586, i8* %17, align 1
  %587 = add i64 %560, add (i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64 4)
  %588 = add i64 %552, 44
  store i64 %588, i64* %3, align 8
  %589 = inttoptr i64 %587 to i32*
  %590 = load i32, i32* %589, align 4
  %591 = sext i32 %590 to i64
  %592 = mul nsw i64 %591, 104
  store i64 %592, i64* %RSI.i2336, align 8
  %593 = lshr i64 %592, 63
  %594 = load i64, i64* %RDX.i1921, align 8
  %595 = add i64 %592, %594
  store i64 %595, i64* %RDX.i1921, align 8
  %596 = icmp ult i64 %595, %594
  %597 = icmp ult i64 %595, %592
  %598 = or i1 %596, %597
  %599 = zext i1 %598 to i8
  store i8 %599, i8* %12, align 1
  %600 = trunc i64 %595 to i32
  %601 = and i32 %600, 255
  %602 = tail call i32 @llvm.ctpop.i32(i32 %601)
  %603 = trunc i32 %602 to i8
  %604 = and i8 %603, 1
  %605 = xor i8 %604, 1
  store i8 %605, i8* %13, align 1
  %606 = xor i64 %592, %594
  %607 = xor i64 %606, %595
  %608 = lshr i64 %607, 4
  %609 = trunc i64 %608 to i8
  %610 = and i8 %609, 1
  store i8 %610, i8* %14, align 1
  %611 = icmp eq i64 %595, 0
  %612 = zext i1 %611 to i8
  store i8 %612, i8* %15, align 1
  %613 = lshr i64 %595, 63
  %614 = trunc i64 %613 to i8
  store i8 %614, i8* %16, align 1
  %615 = lshr i64 %594, 63
  %616 = xor i64 %613, %615
  %617 = xor i64 %613, %593
  %618 = add nuw nsw i64 %616, %617
  %619 = icmp eq i64 %618, 2
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %17, align 1
  %621 = load i64, i64* %RBP.i, align 8
  %622 = add i64 %621, -44
  %623 = add i64 %552, 55
  store i64 %623, i64* %3, align 8
  %624 = inttoptr i64 %622 to i32*
  %625 = load i32, i32* %624, align 4
  %626 = sext i32 %625 to i64
  store i64 %626, i64* %RSI.i2336, align 8
  %627 = shl nsw i64 %626, 2
  %628 = add i64 %595, 4
  %629 = add i64 %628, %627
  %630 = add i64 %552, 60
  store i64 %630, i64* %3, align 8
  %631 = inttoptr i64 %629 to i32*
  %632 = load i32, i32* %631, align 4
  %633 = sext i32 %632 to i64
  %634 = mul nsw i64 %633, 104
  store i64 %634, i64* %RDX.i1921, align 8
  %635 = lshr i64 %634, 63
  %636 = load i64, i64* %RCX.i1715, align 8
  %637 = add i64 %634, %636
  store i64 %637, i64* %RCX.i1715, align 8
  %638 = icmp ult i64 %637, %636
  %639 = icmp ult i64 %637, %634
  %640 = or i1 %638, %639
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %12, align 1
  %642 = trunc i64 %637 to i32
  %643 = and i32 %642, 255
  %644 = tail call i32 @llvm.ctpop.i32(i32 %643)
  %645 = trunc i32 %644 to i8
  %646 = and i8 %645, 1
  %647 = xor i8 %646, 1
  store i8 %647, i8* %13, align 1
  %648 = xor i64 %634, %636
  %649 = xor i64 %648, %637
  %650 = lshr i64 %649, 4
  %651 = trunc i64 %650 to i8
  %652 = and i8 %651, 1
  store i8 %652, i8* %14, align 1
  %653 = icmp eq i64 %637, 0
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %15, align 1
  %655 = lshr i64 %637, 63
  %656 = trunc i64 %655 to i8
  store i8 %656, i8* %16, align 1
  %657 = lshr i64 %636, 63
  %658 = xor i64 %655, %657
  %659 = xor i64 %655, %635
  %660 = add nuw nsw i64 %658, %659
  %661 = icmp eq i64 %660, 2
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %17, align 1
  %663 = inttoptr i64 %637 to i32*
  %664 = add i64 %552, 70
  store i64 %664, i64* %3, align 8
  %665 = load i32, i32* %663, align 4
  %666 = sext i32 %665 to i64
  %667 = mul nsw i64 %666, 76
  store i64 %667, i64* %RCX.i1715, align 8
  %668 = lshr i64 %667, 63
  %669 = load i64, i64* %RAX.i1404, align 8
  %670 = add i64 %667, %669
  store i64 %670, i64* %RAX.i1404, align 8
  %671 = icmp ult i64 %670, %669
  %672 = icmp ult i64 %670, %667
  %673 = or i1 %671, %672
  %674 = zext i1 %673 to i8
  store i8 %674, i8* %12, align 1
  %675 = trunc i64 %670 to i32
  %676 = and i32 %675, 255
  %677 = tail call i32 @llvm.ctpop.i32(i32 %676)
  %678 = trunc i32 %677 to i8
  %679 = and i8 %678, 1
  %680 = xor i8 %679, 1
  store i8 %680, i8* %13, align 1
  %681 = xor i64 %667, %669
  %682 = xor i64 %681, %670
  %683 = lshr i64 %682, 4
  %684 = trunc i64 %683 to i8
  %685 = and i8 %684, 1
  store i8 %685, i8* %14, align 1
  %686 = icmp eq i64 %670, 0
  %687 = zext i1 %686 to i8
  store i8 %687, i8* %15, align 1
  %688 = lshr i64 %670, 63
  %689 = trunc i64 %688 to i8
  store i8 %689, i8* %16, align 1
  %690 = lshr i64 %669, 63
  %691 = xor i64 %688, %690
  %692 = xor i64 %688, %668
  %693 = add nuw nsw i64 %691, %692
  %694 = icmp eq i64 %693, 2
  %695 = zext i1 %694 to i8
  store i8 %695, i8* %17, align 1
  %696 = add i64 %670, 8
  %697 = add i64 %552, 81
  store i64 %697, i64* %3, align 8
  %698 = inttoptr i64 %696 to i32*
  %699 = load i32, i32* %698, align 4
  %700 = zext i32 %699 to i64
  store i64 %700, i64* %20, align 8
  %701 = load i64, i64* %RBP.i, align 8
  %702 = add i64 %701, -1044
  %703 = add i64 %552, 88
  store i64 %703, i64* %3, align 8
  %704 = inttoptr i64 %702 to i32*
  store i32 %699, i32* %704, align 4
  %705 = load i64, i64* %RBP.i, align 8
  %706 = add i64 %705, -1044
  %707 = load i64, i64* %3, align 8
  %708 = add i64 %707, 7
  store i64 %708, i64* %3, align 8
  %709 = inttoptr i64 %706 to i32*
  %710 = load i32, i32* %709, align 4
  %711 = sext i32 %710 to i64
  store i64 %711, i64* %RAX.i1404, align 8
  %712 = add nsw i64 %711, 12099168
  %713 = add i64 %707, 16
  store i64 %713, i64* %3, align 8
  %714 = inttoptr i64 %712 to i8*
  %715 = load i8, i8* %714, align 1
  %716 = zext i8 %715 to i64
  store i64 %716, i64* %20, align 8
  %717 = zext i8 %715 to i32
  %718 = add i64 %705, -228
  %719 = add i64 %707, 23
  store i64 %719, i64* %3, align 8
  %720 = inttoptr i64 %718 to i32*
  %721 = load i32, i32* %720, align 4
  %722 = sub i32 %717, %721
  %723 = icmp ult i32 %717, %721
  %724 = zext i1 %723 to i8
  store i8 %724, i8* %12, align 1
  %725 = and i32 %722, 255
  %726 = tail call i32 @llvm.ctpop.i32(i32 %725)
  %727 = trunc i32 %726 to i8
  %728 = and i8 %727, 1
  %729 = xor i8 %728, 1
  store i8 %729, i8* %13, align 1
  %730 = xor i32 %721, %717
  %731 = xor i32 %730, %722
  %732 = lshr i32 %731, 4
  %733 = trunc i32 %732 to i8
  %734 = and i8 %733, 1
  store i8 %734, i8* %14, align 1
  %735 = icmp eq i32 %722, 0
  %736 = zext i1 %735 to i8
  store i8 %736, i8* %15, align 1
  %737 = lshr i32 %722, 31
  %738 = trunc i32 %737 to i8
  store i8 %738, i8* %16, align 1
  %739 = lshr i32 %721, 31
  %740 = add nuw nsw i32 %737, %739
  %741 = icmp eq i32 %740, 2
  %742 = zext i1 %741 to i8
  store i8 %742, i8* %17, align 1
  %.v467 = select i1 %735, i64 173, i64 29
  %743 = add i64 %707, %.v467
  store i64 %743, i64* %3, align 8
  br i1 %735, label %block_.L_475a7b, label %block_4759eb

block_4759eb:                                     ; preds = %block_475976
  %744 = add i64 %705, -48
  %745 = add i64 %743, 7
  store i64 %745, i64* %3, align 8
  %746 = inttoptr i64 %744 to i32*
  store i32 21, i32* %746, align 4
  %.pre347 = load i64, i64* %3, align 8
  br label %block_.L_4759f2

block_.L_4759f2:                                  ; preds = %block_.L_475a63, %block_4759eb
  %747 = phi i64 [ %.pre347, %block_4759eb ], [ %937, %block_.L_475a63 ]
  %748 = load i64, i64* %RBP.i, align 8
  %749 = add i64 %748, -48
  %750 = add i64 %747, 7
  store i64 %750, i64* %3, align 8
  %751 = inttoptr i64 %749 to i32*
  %752 = load i32, i32* %751, align 4
  %753 = add i32 %752, -400
  %754 = icmp ult i32 %752, 400
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %12, align 1
  %756 = and i32 %753, 255
  %757 = tail call i32 @llvm.ctpop.i32(i32 %756)
  %758 = trunc i32 %757 to i8
  %759 = and i8 %758, 1
  %760 = xor i8 %759, 1
  store i8 %760, i8* %13, align 1
  %761 = xor i32 %752, 16
  %762 = xor i32 %761, %753
  %763 = lshr i32 %762, 4
  %764 = trunc i32 %763 to i8
  %765 = and i8 %764, 1
  store i8 %765, i8* %14, align 1
  %766 = icmp eq i32 %753, 0
  %767 = zext i1 %766 to i8
  store i8 %767, i8* %15, align 1
  %768 = lshr i32 %753, 31
  %769 = trunc i32 %768 to i8
  store i8 %769, i8* %16, align 1
  %770 = lshr i32 %752, 31
  %771 = xor i32 %768, %770
  %772 = add nuw nsw i32 %771, %770
  %773 = icmp eq i32 %772, 2
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %17, align 1
  %775 = icmp ne i8 %769, 0
  %776 = xor i1 %775, %773
  %.v468 = select i1 %776, i64 13, i64 132
  %777 = add i64 %747, %.v468
  store i64 %777, i64* %3, align 8
  br i1 %776, label %block_4759ff, label %block_.L_475a76

block_4759ff:                                     ; preds = %block_.L_4759f2
  %778 = add i64 %777, 4
  store i64 %778, i64* %3, align 8
  %779 = load i32, i32* %751, align 4
  %780 = sext i32 %779 to i64
  store i64 %780, i64* %RAX.i1404, align 8
  %781 = add nsw i64 %780, 12099168
  %782 = add i64 %777, 12
  store i64 %782, i64* %3, align 8
  %783 = inttoptr i64 %781 to i8*
  %784 = load i8, i8* %783, align 1
  %785 = zext i8 %784 to i64
  store i64 %785, i64* %RCX.i1715, align 8
  %786 = zext i8 %784 to i32
  %787 = add nsw i32 %786, -3
  %788 = icmp ult i8 %784, 3
  %789 = zext i1 %788 to i8
  store i8 %789, i8* %12, align 1
  %790 = and i32 %787, 255
  %791 = tail call i32 @llvm.ctpop.i32(i32 %790)
  %792 = trunc i32 %791 to i8
  %793 = and i8 %792, 1
  %794 = xor i8 %793, 1
  store i8 %794, i8* %13, align 1
  %795 = xor i32 %787, %786
  %796 = lshr i32 %795, 4
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  store i8 %798, i8* %14, align 1
  %799 = icmp eq i32 %787, 0
  %800 = zext i1 %799 to i8
  store i8 %800, i8* %15, align 1
  %801 = lshr i32 %787, 31
  %802 = trunc i32 %801 to i8
  store i8 %802, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v469 = select i1 %799, i64 100, i64 21
  %803 = add i64 %777, %.v469
  store i64 %803, i64* %3, align 8
  br i1 %799, label %block_.L_475a63, label %block_475a14

block_475a14:                                     ; preds = %block_4759ff
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX.i1404, align 8
  %804 = add i64 %803, 14
  store i64 %804, i64* %3, align 8
  %805 = load i32, i32* %751, align 4
  %806 = sext i32 %805 to i64
  %807 = mul nsw i64 %806, 380
  store i64 %807, i64* %RCX.i1715, align 8
  %808 = lshr i64 %807, 63
  %809 = add i64 %807, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  store i64 %809, i64* %RAX.i1404, align 8
  %810 = icmp ult i64 %809, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %811 = icmp ult i64 %809, %807
  %812 = or i1 %810, %811
  %813 = zext i1 %812 to i8
  store i8 %813, i8* %12, align 1
  %814 = trunc i64 %809 to i32
  %815 = and i32 %814, 252
  %816 = tail call i32 @llvm.ctpop.i32(i32 %815)
  %817 = trunc i32 %816 to i8
  %818 = and i8 %817, 1
  %819 = xor i8 %818, 1
  store i8 %819, i8* %13, align 1
  %820 = xor i64 %807, ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64)
  %821 = xor i64 %820, %809
  %822 = lshr i64 %821, 4
  %823 = trunc i64 %822 to i8
  %824 = and i8 %823, 1
  store i8 %824, i8* %14, align 1
  %825 = icmp eq i64 %809, 0
  %826 = zext i1 %825 to i8
  store i8 %826, i8* %15, align 1
  %827 = lshr i64 %809, 63
  %828 = trunc i64 %827 to i8
  store i8 %828, i8* %16, align 1
  %829 = xor i64 %827, lshr (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 63)
  %830 = xor i64 %827, %808
  %831 = add nuw nsw i64 %829, %830
  %832 = icmp eq i64 %831, 2
  %833 = zext i1 %832 to i8
  store i8 %833, i8* %17, align 1
  %834 = add i64 %807, add (i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64 12)
  %835 = add i64 %803, 27
  store i64 %835, i64* %3, align 8
  %836 = inttoptr i64 %834 to i32*
  %837 = load i32, i32* %836, align 4
  %838 = zext i32 %837 to i64
  store i64 %838, i64* %RDX.i1921, align 8
  %839 = add i64 %803, 30
  store i64 %839, i64* %3, align 8
  %840 = load i32, i32* %751, align 4
  %841 = sub i32 %837, %840
  %842 = icmp ult i32 %837, %840
  %843 = zext i1 %842 to i8
  store i8 %843, i8* %12, align 1
  %844 = and i32 %841, 255
  %845 = tail call i32 @llvm.ctpop.i32(i32 %844)
  %846 = trunc i32 %845 to i8
  %847 = and i8 %846, 1
  %848 = xor i8 %847, 1
  store i8 %848, i8* %13, align 1
  %849 = xor i32 %840, %837
  %850 = xor i32 %849, %841
  %851 = lshr i32 %850, 4
  %852 = trunc i32 %851 to i8
  %853 = and i8 %852, 1
  store i8 %853, i8* %14, align 1
  %854 = icmp eq i32 %841, 0
  %855 = zext i1 %854 to i8
  store i8 %855, i8* %15, align 1
  %856 = lshr i32 %841, 31
  %857 = trunc i32 %856 to i8
  store i8 %857, i8* %16, align 1
  %858 = lshr i32 %837, 31
  %859 = lshr i32 %840, 31
  %860 = xor i32 %859, %858
  %861 = xor i32 %856, %858
  %862 = add nuw nsw i32 %861, %860
  %863 = icmp eq i32 %862, 2
  %864 = zext i1 %863 to i8
  store i8 %864, i8* %17, align 1
  %.v470 = select i1 %854, i64 36, i64 79
  %865 = add i64 %803, %.v470
  store i64 %865, i64* %3, align 8
  br i1 %854, label %block_475a38, label %block_.L_475a63

block_475a38:                                     ; preds = %block_475a14
  %866 = load i64, i64* %RBP.i, align 8
  %867 = add i64 %866, -48
  %868 = add i64 %865, 3
  store i64 %868, i64* %3, align 8
  %869 = inttoptr i64 %867 to i32*
  %870 = load i32, i32* %869, align 4
  %871 = zext i32 %870 to i64
  store i64 %871, i64* %RDI.i2173, align 8
  %872 = add i64 %866, -1044
  %873 = add i64 %865, 9
  store i64 %873, i64* %3, align 8
  %874 = inttoptr i64 %872 to i32*
  %875 = load i32, i32* %874, align 4
  %876 = zext i32 %875 to i64
  store i64 %876, i64* %RSI.i2336, align 8
  %877 = add i64 %865, -351752
  %878 = add i64 %865, 14
  %879 = load i64, i64* %6, align 8
  %880 = add i64 %879, -8
  %881 = inttoptr i64 %880 to i64*
  store i64 %878, i64* %881, align 8
  store i64 %880, i64* %6, align 8
  store i64 %877, i64* %3, align 8
  %call2_475a41 = tail call %struct.Memory* @sub_41fc30.is_same_dragon(%struct.State* nonnull %0, i64 %877, %struct.Memory* %160)
  %882 = load i32, i32* %EAX.i1403, align 4
  %883 = load i64, i64* %3, align 8
  store i8 0, i8* %12, align 1
  %884 = and i32 %882, 255
  %885 = tail call i32 @llvm.ctpop.i32(i32 %884)
  %886 = trunc i32 %885 to i8
  %887 = and i8 %886, 1
  %888 = xor i8 %887, 1
  store i8 %888, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %889 = icmp eq i32 %882, 0
  %890 = zext i1 %889 to i8
  store i8 %890, i8* %15, align 1
  %891 = lshr i32 %882, 31
  %892 = trunc i32 %891 to i8
  store i8 %892, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v471 = select i1 %889, i64 29, i64 9
  %893 = add i64 %883, %.v471
  store i64 %893, i64* %3, align 8
  br i1 %889, label %block_.L_475a63, label %block_475a4f

block_475a4f:                                     ; preds = %block_475a38
  store i64 1, i64* %RDX.i1921, align 8
  %894 = load i64, i64* %RBP.i, align 8
  %895 = add i64 %894, -1040
  store i64 %895, i64* %RSI.i2336, align 8
  %896 = add i64 %894, -48
  %897 = add i64 %893, 15
  store i64 %897, i64* %3, align 8
  %898 = inttoptr i64 %896 to i32*
  %899 = load i32, i32* %898, align 4
  %900 = zext i32 %899 to i64
  store i64 %900, i64* %RDI.i2173, align 8
  %901 = add i64 %893, -392607
  %902 = add i64 %893, 20
  %903 = load i64, i64* %6, align 8
  %904 = add i64 %903, -8
  %905 = inttoptr i64 %904 to i64*
  store i64 %902, i64* %905, align 8
  store i64 %904, i64* %6, align 8
  store i64 %901, i64* %3, align 8
  %call2_475a5e = tail call %struct.Memory* @sub_415cb0.mark_string(%struct.State* nonnull %0, i64 %901, %struct.Memory* %160)
  %.pre348 = load i64, i64* %3, align 8
  br label %block_.L_475a63

block_.L_475a63:                                  ; preds = %block_475a14, %block_475a4f, %block_475a38, %block_4759ff
  %906 = phi i64 [ %.pre348, %block_475a4f ], [ %893, %block_475a38 ], [ %865, %block_475a14 ], [ %803, %block_4759ff ]
  %907 = load i64, i64* %RBP.i, align 8
  %908 = add i64 %907, -48
  %909 = add i64 %906, 8
  store i64 %909, i64* %3, align 8
  %910 = inttoptr i64 %908 to i32*
  %911 = load i32, i32* %910, align 4
  %912 = add i32 %911, 1
  %913 = zext i32 %912 to i64
  store i64 %913, i64* %RAX.i1404, align 8
  %914 = icmp eq i32 %911, -1
  %915 = icmp eq i32 %912, 0
  %916 = or i1 %914, %915
  %917 = zext i1 %916 to i8
  store i8 %917, i8* %12, align 1
  %918 = and i32 %912, 255
  %919 = tail call i32 @llvm.ctpop.i32(i32 %918)
  %920 = trunc i32 %919 to i8
  %921 = and i8 %920, 1
  %922 = xor i8 %921, 1
  store i8 %922, i8* %13, align 1
  %923 = xor i32 %912, %911
  %924 = lshr i32 %923, 4
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  store i8 %926, i8* %14, align 1
  %927 = zext i1 %915 to i8
  store i8 %927, i8* %15, align 1
  %928 = lshr i32 %912, 31
  %929 = trunc i32 %928 to i8
  store i8 %929, i8* %16, align 1
  %930 = lshr i32 %911, 31
  %931 = xor i32 %928, %930
  %932 = add nuw nsw i32 %931, %928
  %933 = icmp eq i32 %932, 2
  %934 = zext i1 %933 to i8
  store i8 %934, i8* %17, align 1
  %935 = add i64 %906, 14
  store i64 %935, i64* %3, align 8
  store i32 %912, i32* %910, align 4
  %936 = load i64, i64* %3, align 8
  %937 = add i64 %936, -127
  store i64 %937, i64* %3, align 8
  br label %block_.L_4759f2

block_.L_475a76:                                  ; preds = %block_.L_4759f2
  %938 = add i64 %777, 5
  store i64 %938, i64* %3, align 8
  br label %block_.L_475a7b

block_.L_475a7b:                                  ; preds = %block_.L_475a76, %block_475976
  %939 = phi i64 [ %705, %block_475976 ], [ %748, %block_.L_475a76 ]
  %940 = phi i64 [ %743, %block_475976 ], [ %938, %block_.L_475a76 ]
  %941 = add i64 %939, -44
  %942 = add i64 %940, 8
  store i64 %942, i64* %3, align 8
  %943 = inttoptr i64 %941 to i32*
  %944 = load i32, i32* %943, align 4
  %945 = add i32 %944, 1
  %946 = zext i32 %945 to i64
  store i64 %946, i64* %RAX.i1404, align 8
  %947 = icmp eq i32 %944, -1
  %948 = icmp eq i32 %945, 0
  %949 = or i1 %947, %948
  %950 = zext i1 %949 to i8
  store i8 %950, i8* %12, align 1
  %951 = and i32 %945, 255
  %952 = tail call i32 @llvm.ctpop.i32(i32 %951)
  %953 = trunc i32 %952 to i8
  %954 = and i8 %953, 1
  %955 = xor i8 %954, 1
  store i8 %955, i8* %13, align 1
  %956 = xor i32 %945, %944
  %957 = lshr i32 %956, 4
  %958 = trunc i32 %957 to i8
  %959 = and i8 %958, 1
  store i8 %959, i8* %14, align 1
  %960 = zext i1 %948 to i8
  store i8 %960, i8* %15, align 1
  %961 = lshr i32 %945, 31
  %962 = trunc i32 %961 to i8
  store i8 %962, i8* %16, align 1
  %963 = lshr i32 %944, 31
  %964 = xor i32 %961, %963
  %965 = add nuw nsw i32 %964, %961
  %966 = icmp eq i32 %965, 2
  %967 = zext i1 %966 to i8
  store i8 %967, i8* %17, align 1
  %968 = add i64 %940, 14
  store i64 %968, i64* %3, align 8
  store i32 %945, i32* %943, align 4
  %969 = load i64, i64* %3, align 8
  %970 = add i64 %969, -327
  store i64 %970, i64* %3, align 8
  br label %block_.L_475942

block_.L_475a8e:                                  ; preds = %block_.L_475942
  %971 = load i64, i64* %RBP.i, align 8
  %972 = add i64 %971, -12
  %973 = add i64 %552, 4
  store i64 %973, i64* %3, align 8
  %974 = inttoptr i64 %972 to i32*
  %975 = load i32, i32* %974, align 4
  store i8 0, i8* %12, align 1
  %976 = and i32 %975, 255
  %977 = tail call i32 @llvm.ctpop.i32(i32 %976)
  %978 = trunc i32 %977 to i8
  %979 = and i8 %978, 1
  %980 = xor i8 %979, 1
  store i8 %980, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %981 = icmp eq i32 %975, 0
  %982 = zext i1 %981 to i8
  store i8 %982, i8* %15, align 1
  %983 = lshr i32 %975, 31
  %984 = trunc i32 %983 to i8
  store i8 %984, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v369 = select i1 %981, i64 88, i64 10
  %985 = add i64 %552, %.v369
  store i64 %985, i64* %3, align 8
  br i1 %981, label %block_.L_475ae6, label %block_475a98

block_475a98:                                     ; preds = %block_.L_475a8e
  %986 = add i64 %985, 4
  store i64 %986, i64* %3, align 8
  %987 = load i32, i32* %974, align 4
  %988 = sext i32 %987 to i64
  store i64 %988, i64* %RAX.i1404, align 8
  %989 = add nsw i64 %988, 12099168
  %990 = add i64 %985, 12
  store i64 %990, i64* %3, align 8
  %991 = inttoptr i64 %989 to i8*
  %992 = load i8, i8* %991, align 1
  %993 = zext i8 %992 to i64
  store i64 %993, i64* %RCX.i1715, align 8
  %994 = zext i8 %992 to i32
  %995 = add nsw i32 %994, -3
  %996 = icmp ult i8 %992, 3
  %997 = zext i1 %996 to i8
  store i8 %997, i8* %12, align 1
  %998 = and i32 %995, 255
  %999 = tail call i32 @llvm.ctpop.i32(i32 %998)
  %1000 = trunc i32 %999 to i8
  %1001 = and i8 %1000, 1
  %1002 = xor i8 %1001, 1
  store i8 %1002, i8* %13, align 1
  %1003 = xor i32 %995, %994
  %1004 = lshr i32 %1003, 4
  %1005 = trunc i32 %1004 to i8
  %1006 = and i8 %1005, 1
  store i8 %1006, i8* %14, align 1
  %1007 = icmp eq i32 %995, 0
  %1008 = zext i1 %1007 to i8
  store i8 %1008, i8* %15, align 1
  %1009 = lshr i32 %995, 31
  %1010 = trunc i32 %1009 to i8
  store i8 %1010, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v370 = select i1 %1007, i64 26, i64 21
  %1011 = add i64 %985, %.v370
  store i64 %1011, i64* %3, align 8
  br i1 %1007, label %block_.L_475ab2, label %block_475aad

block_475aad:                                     ; preds = %block_475a98
  %1012 = add i64 %1011, 45
  store i64 %1012, i64* %3, align 8
  br label %block_.L_475ada

block_.L_475ab2:                                  ; preds = %block_475a98
  store i64 ptrtoint (%G__0x58192c_type* @G__0x58192c to i64), i64* %RDI.i2173, align 8
  store i64 124, i64* %RSI.i2336, align 8
  store i64 ptrtoint (%G__0x5819e3_type* @G__0x5819e3 to i64), i64* %RDX.i1921, align 8
  store i64 4294967295, i64* %RAX.i1404, align 8
  store i64 4294967295, i64* %RCX.i1715, align 8
  store i64 4294967295, i64* %20, align 8
  %1013 = add i64 %1011, -145954
  %1014 = add i64 %1011, 40
  %1015 = load i64, i64* %6, align 8
  %1016 = add i64 %1015, -8
  %1017 = inttoptr i64 %1016 to i64*
  store i64 %1014, i64* %1017, align 8
  store i64 %1016, i64* %6, align 8
  store i64 %1013, i64* %3, align 8
  %call2_475ad5 = tail call %struct.Memory* @sub_452090.abortgo(%struct.State* nonnull %0, i64 %1013, %struct.Memory* %160)
  %.pre220 = load i64, i64* %RBP.i, align 8
  %.pre221 = load i64, i64* %3, align 8
  br label %block_.L_475ada

block_.L_475ada:                                  ; preds = %block_.L_475ab2, %block_475aad
  %1018 = phi i64 [ %.pre221, %block_.L_475ab2 ], [ %1012, %block_475aad ]
  %1019 = phi i64 [ %.pre220, %block_.L_475ab2 ], [ %971, %block_475aad ]
  %MEMORY.6 = phi %struct.Memory* [ %call2_475ad5, %block_.L_475ab2 ], [ %160, %block_475aad ]
  %1020 = add i64 %1019, -12
  %1021 = add i64 %1018, 4
  store i64 %1021, i64* %3, align 8
  %1022 = inttoptr i64 %1020 to i32*
  %1023 = load i32, i32* %1022, align 4
  %1024 = sext i32 %1023 to i64
  store i64 %1024, i64* %RAX.i1404, align 8
  %1025 = add nsw i64 %1024, -1040
  %1026 = add i64 %1025, %1019
  %1027 = add i64 %1018, 12
  store i64 %1027, i64* %3, align 8
  %1028 = inttoptr i64 %1026 to i8*
  store i8 1, i8* %1028, align 1
  %.pre222 = load i64, i64* %RBP.i, align 8
  %.pre223 = load i64, i64* %3, align 8
  br label %block_.L_475ae6

block_.L_475ae6:                                  ; preds = %block_.L_475ada, %block_.L_475a8e
  %1029 = phi i64 [ %985, %block_.L_475a8e ], [ %.pre223, %block_.L_475ada ]
  %1030 = phi i64 [ %971, %block_.L_475a8e ], [ %.pre222, %block_.L_475ada ]
  %MEMORY.7 = phi %struct.Memory* [ %160, %block_.L_475a8e ], [ %MEMORY.6, %block_.L_475ada ]
  %1031 = add i64 %1030, -220
  %1032 = add i64 %1029, 10
  store i64 %1032, i64* %3, align 8
  %1033 = inttoptr i64 %1031 to i32*
  store i32 -1, i32* %1033, align 4
  %1034 = load i64, i64* %RBP.i, align 8
  %1035 = add i64 %1034, -36
  %1036 = load i64, i64* %3, align 8
  %1037 = add i64 %1036, 7
  store i64 %1037, i64* %3, align 8
  %1038 = inttoptr i64 %1035 to i32*
  store i32 0, i32* %1038, align 4
  %.pre224 = load i64, i64* %3, align 8
  br label %block_.L_475af7

block_.L_475af7:                                  ; preds = %block_.L_475b79, %block_.L_475ae6
  %1039 = phi i64 [ %1343, %block_.L_475b79 ], [ %.pre224, %block_.L_475ae6 ]
  %1040 = load i64, i64* %RBP.i, align 8
  %1041 = add i64 %1040, -36
  %1042 = add i64 %1039, 3
  store i64 %1042, i64* %3, align 8
  %1043 = inttoptr i64 %1041 to i32*
  %1044 = load i32, i32* %1043, align 4
  %1045 = zext i32 %1044 to i64
  store i64 %1045, i64* %RAX.i1404, align 8
  %1046 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %1047 = sub i32 %1044, %1046
  %1048 = icmp ult i32 %1044, %1046
  %1049 = zext i1 %1048 to i8
  store i8 %1049, i8* %12, align 1
  %1050 = and i32 %1047, 255
  %1051 = tail call i32 @llvm.ctpop.i32(i32 %1050)
  %1052 = trunc i32 %1051 to i8
  %1053 = and i8 %1052, 1
  %1054 = xor i8 %1053, 1
  store i8 %1054, i8* %13, align 1
  %1055 = xor i32 %1046, %1044
  %1056 = xor i32 %1055, %1047
  %1057 = lshr i32 %1056, 4
  %1058 = trunc i32 %1057 to i8
  %1059 = and i8 %1058, 1
  store i8 %1059, i8* %14, align 1
  %1060 = icmp eq i32 %1047, 0
  %1061 = zext i1 %1060 to i8
  store i8 %1061, i8* %15, align 1
  %1062 = lshr i32 %1047, 31
  %1063 = trunc i32 %1062 to i8
  store i8 %1063, i8* %16, align 1
  %1064 = lshr i32 %1044, 31
  %1065 = lshr i32 %1046, 31
  %1066 = xor i32 %1065, %1064
  %1067 = xor i32 %1062, %1064
  %1068 = add nuw nsw i32 %1067, %1066
  %1069 = icmp eq i32 %1068, 2
  %1070 = zext i1 %1069 to i8
  store i8 %1070, i8* %17, align 1
  %1071 = icmp ne i8 %1063, 0
  %1072 = xor i1 %1071, %1069
  %.v371 = select i1 %1072, i64 16, i64 149
  %1073 = add i64 %1039, %.v371
  store i64 %1073, i64* %3, align 8
  br i1 %1072, label %block_475b07, label %block_.L_475b8c.loopexit

block_475b07:                                     ; preds = %block_.L_475af7
  %1074 = add i64 %1040, -220
  %1075 = add i64 %1073, 7
  store i64 %1075, i64* %3, align 8
  %1076 = inttoptr i64 %1074 to i32*
  %1077 = load i32, i32* %1076, align 4
  %1078 = add i32 %1077, 1
  %1079 = icmp ne i32 %1077, -1
  %1080 = zext i1 %1079 to i8
  store i8 %1080, i8* %12, align 1
  %1081 = and i32 %1078, 255
  %1082 = tail call i32 @llvm.ctpop.i32(i32 %1081)
  %1083 = trunc i32 %1082 to i8
  %1084 = and i8 %1083, 1
  %1085 = xor i8 %1084, 1
  store i8 %1085, i8* %13, align 1
  %1086 = xor i32 %1077, 16
  %1087 = xor i32 %1086, %1078
  %1088 = lshr i32 %1087, 4
  %1089 = trunc i32 %1088 to i8
  %1090 = and i8 %1089, 1
  store i8 %1090, i8* %14, align 1
  %1091 = icmp eq i32 %1078, 0
  %1092 = zext i1 %1091 to i8
  store i8 %1092, i8* %15, align 1
  %1093 = lshr i32 %1078, 31
  %1094 = trunc i32 %1093 to i8
  store i8 %1094, i8* %16, align 1
  %1095 = lshr i32 %1077, 31
  %1096 = xor i32 %1095, 1
  %1097 = xor i32 %1093, %1095
  %1098 = add nuw nsw i32 %1097, %1096
  %1099 = icmp eq i32 %1098, 2
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %17, align 1
  %.v464 = select i1 %1091, i64 18, i64 13
  %1101 = add i64 %1073, %.v464
  store i64 %1101, i64* %3, align 8
  br i1 %1091, label %block_.L_475b19, label %block_475b14

block_475b14:                                     ; preds = %block_475b07
  %1102 = add i64 %1101, 120
  store i64 %1102, i64* %3, align 8
  br label %block_.L_475b8c

block_.L_475b19:                                  ; preds = %block_475b07
  %1103 = add i64 %1040, -40
  %1104 = add i64 %1101, 7
  store i64 %1104, i64* %3, align 8
  %1105 = inttoptr i64 %1103 to i32*
  store i32 0, i32* %1105, align 4
  %.pre345 = load i64, i64* %3, align 8
  br label %block_.L_475b20

block_.L_475b20:                                  ; preds = %block_.L_475b66, %block_.L_475b19
  %1106 = phi i64 [ %1311, %block_.L_475b66 ], [ %.pre345, %block_.L_475b19 ]
  %1107 = load i64, i64* %RBP.i, align 8
  %1108 = add i64 %1107, -40
  %1109 = add i64 %1106, 3
  store i64 %1109, i64* %3, align 8
  %1110 = inttoptr i64 %1108 to i32*
  %1111 = load i32, i32* %1110, align 4
  %1112 = zext i32 %1111 to i64
  store i64 %1112, i64* %RAX.i1404, align 8
  %1113 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %1114 = sub i32 %1111, %1113
  %1115 = icmp ult i32 %1111, %1113
  %1116 = zext i1 %1115 to i8
  store i8 %1116, i8* %12, align 1
  %1117 = and i32 %1114, 255
  %1118 = tail call i32 @llvm.ctpop.i32(i32 %1117)
  %1119 = trunc i32 %1118 to i8
  %1120 = and i8 %1119, 1
  %1121 = xor i8 %1120, 1
  store i8 %1121, i8* %13, align 1
  %1122 = xor i32 %1113, %1111
  %1123 = xor i32 %1122, %1114
  %1124 = lshr i32 %1123, 4
  %1125 = trunc i32 %1124 to i8
  %1126 = and i8 %1125, 1
  store i8 %1126, i8* %14, align 1
  %1127 = icmp eq i32 %1114, 0
  %1128 = zext i1 %1127 to i8
  store i8 %1128, i8* %15, align 1
  %1129 = lshr i32 %1114, 31
  %1130 = trunc i32 %1129 to i8
  store i8 %1130, i8* %16, align 1
  %1131 = lshr i32 %1111, 31
  %1132 = lshr i32 %1113, 31
  %1133 = xor i32 %1132, %1131
  %1134 = xor i32 %1129, %1131
  %1135 = add nuw nsw i32 %1134, %1133
  %1136 = icmp eq i32 %1135, 2
  %1137 = zext i1 %1136 to i8
  store i8 %1137, i8* %17, align 1
  %1138 = icmp ne i8 %1130, 0
  %1139 = xor i1 %1138, %1136
  %.v465 = select i1 %1139, i64 16, i64 89
  %1140 = add i64 %1106, %.v465
  store i64 %1140, i64* %3, align 8
  br i1 %1139, label %block_475b30, label %block_.L_475b79.loopexit

block_475b30:                                     ; preds = %block_.L_475b20
  %1141 = add i64 %1107, -36
  %1142 = add i64 %1140, 4
  store i64 %1142, i64* %3, align 8
  %1143 = inttoptr i64 %1141 to i32*
  %1144 = load i32, i32* %1143, align 4
  %1145 = mul i32 %1144, 20
  %1146 = add i32 %1145, 21
  %1147 = zext i32 %1146 to i64
  store i64 %1147, i64* %RAX.i1404, align 8
  %1148 = icmp ugt i32 %1145, -22
  %1149 = zext i1 %1148 to i8
  store i8 %1149, i8* %12, align 1
  %1150 = and i32 %1146, 253
  %1151 = tail call i32 @llvm.ctpop.i32(i32 %1150)
  %1152 = trunc i32 %1151 to i8
  %1153 = and i8 %1152, 1
  %1154 = xor i8 %1153, 1
  store i8 %1154, i8* %13, align 1
  %1155 = xor i32 %1145, 16
  %1156 = xor i32 %1155, %1146
  %1157 = lshr i32 %1156, 4
  %1158 = trunc i32 %1157 to i8
  %1159 = and i8 %1158, 1
  store i8 %1159, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %1160 = lshr i32 %1146, 31
  %1161 = trunc i32 %1160 to i8
  store i8 %1161, i8* %16, align 1
  %1162 = lshr i32 %1145, 31
  %1163 = xor i32 %1160, %1162
  %1164 = add nuw nsw i32 %1163, %1160
  %1165 = icmp eq i32 %1164, 2
  %1166 = zext i1 %1165 to i8
  store i8 %1166, i8* %17, align 1
  %1167 = add i64 %1140, 10
  store i64 %1167, i64* %3, align 8
  %1168 = load i32, i32* %1110, align 4
  %1169 = add i32 %1168, %1146
  %1170 = zext i32 %1169 to i64
  store i64 %1170, i64* %RAX.i1404, align 8
  %1171 = icmp ult i32 %1169, %1146
  %1172 = icmp ult i32 %1169, %1168
  %1173 = or i1 %1171, %1172
  %1174 = zext i1 %1173 to i8
  store i8 %1174, i8* %12, align 1
  %1175 = and i32 %1169, 255
  %1176 = tail call i32 @llvm.ctpop.i32(i32 %1175)
  %1177 = trunc i32 %1176 to i8
  %1178 = and i8 %1177, 1
  %1179 = xor i8 %1178, 1
  store i8 %1179, i8* %13, align 1
  %1180 = xor i32 %1168, %1146
  %1181 = xor i32 %1180, %1169
  %1182 = lshr i32 %1181, 4
  %1183 = trunc i32 %1182 to i8
  %1184 = and i8 %1183, 1
  store i8 %1184, i8* %14, align 1
  %1185 = icmp eq i32 %1169, 0
  %1186 = zext i1 %1185 to i8
  store i8 %1186, i8* %15, align 1
  %1187 = lshr i32 %1169, 31
  %1188 = trunc i32 %1187 to i8
  store i8 %1188, i8* %16, align 1
  %1189 = lshr i32 %1168, 31
  %1190 = xor i32 %1187, %1160
  %1191 = xor i32 %1187, %1189
  %1192 = add nuw nsw i32 %1190, %1191
  %1193 = icmp eq i32 %1192, 2
  %1194 = zext i1 %1193 to i8
  store i8 %1194, i8* %17, align 1
  %1195 = sext i32 %1169 to i64
  store i64 %1195, i64* %RCX.i1715, align 8
  %1196 = add nsw i64 %1195, -1040
  %1197 = add i64 %1196, %1107
  %1198 = add i64 %1140, 21
  store i64 %1198, i64* %3, align 8
  %1199 = inttoptr i64 %1197 to i8*
  %1200 = load i8, i8* %1199, align 1
  store i8 0, i8* %12, align 1
  %1201 = zext i8 %1200 to i32
  %1202 = tail call i32 @llvm.ctpop.i32(i32 %1201)
  %1203 = trunc i32 %1202 to i8
  %1204 = and i8 %1203, 1
  %1205 = xor i8 %1204, 1
  store i8 %1205, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %1206 = icmp eq i8 %1200, 0
  %1207 = zext i1 %1206 to i8
  store i8 %1207, i8* %15, align 1
  %1208 = lshr i8 %1200, 7
  store i8 %1208, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v466 = select i1 %1206, i64 54, i64 27
  %1209 = add i64 %1140, %.v466
  store i64 %1209, i64* %3, align 8
  %1210 = load i64, i64* %RBP.i, align 8
  br i1 %1206, label %block_.L_475b66, label %block_475b4b

block_475b4b:                                     ; preds = %block_475b30
  %1211 = add i64 %1210, -36
  %1212 = add i64 %1209, 4
  store i64 %1212, i64* %3, align 8
  %1213 = inttoptr i64 %1211 to i32*
  %1214 = load i32, i32* %1213, align 4
  %1215 = mul i32 %1214, 20
  %1216 = add i32 %1215, 21
  %1217 = zext i32 %1216 to i64
  store i64 %1217, i64* %RAX.i1404, align 8
  %1218 = icmp ugt i32 %1215, -22
  %1219 = zext i1 %1218 to i8
  store i8 %1219, i8* %12, align 1
  %1220 = and i32 %1216, 253
  %1221 = tail call i32 @llvm.ctpop.i32(i32 %1220)
  %1222 = trunc i32 %1221 to i8
  %1223 = and i8 %1222, 1
  %1224 = xor i8 %1223, 1
  store i8 %1224, i8* %13, align 1
  %1225 = xor i32 %1215, 16
  %1226 = xor i32 %1225, %1216
  %1227 = lshr i32 %1226, 4
  %1228 = trunc i32 %1227 to i8
  %1229 = and i8 %1228, 1
  store i8 %1229, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %1230 = lshr i32 %1216, 31
  %1231 = trunc i32 %1230 to i8
  store i8 %1231, i8* %16, align 1
  %1232 = lshr i32 %1215, 31
  %1233 = xor i32 %1230, %1232
  %1234 = add nuw nsw i32 %1233, %1230
  %1235 = icmp eq i32 %1234, 2
  %1236 = zext i1 %1235 to i8
  store i8 %1236, i8* %17, align 1
  %1237 = add i64 %1210, -40
  %1238 = add i64 %1209, 10
  store i64 %1238, i64* %3, align 8
  %1239 = inttoptr i64 %1237 to i32*
  %1240 = load i32, i32* %1239, align 4
  %1241 = add i32 %1240, %1216
  %1242 = zext i32 %1241 to i64
  store i64 %1242, i64* %RAX.i1404, align 8
  %1243 = icmp ult i32 %1241, %1216
  %1244 = icmp ult i32 %1241, %1240
  %1245 = or i1 %1243, %1244
  %1246 = zext i1 %1245 to i8
  store i8 %1246, i8* %12, align 1
  %1247 = and i32 %1241, 255
  %1248 = tail call i32 @llvm.ctpop.i32(i32 %1247)
  %1249 = trunc i32 %1248 to i8
  %1250 = and i8 %1249, 1
  %1251 = xor i8 %1250, 1
  store i8 %1251, i8* %13, align 1
  %1252 = xor i32 %1240, %1216
  %1253 = xor i32 %1252, %1241
  %1254 = lshr i32 %1253, 4
  %1255 = trunc i32 %1254 to i8
  %1256 = and i8 %1255, 1
  store i8 %1256, i8* %14, align 1
  %1257 = icmp eq i32 %1241, 0
  %1258 = zext i1 %1257 to i8
  store i8 %1258, i8* %15, align 1
  %1259 = lshr i32 %1241, 31
  %1260 = trunc i32 %1259 to i8
  store i8 %1260, i8* %16, align 1
  %1261 = lshr i32 %1240, 31
  %1262 = xor i32 %1259, %1230
  %1263 = xor i32 %1259, %1261
  %1264 = add nuw nsw i32 %1262, %1263
  %1265 = icmp eq i32 %1264, 2
  %1266 = zext i1 %1265 to i8
  store i8 %1266, i8* %17, align 1
  %1267 = add i64 %1210, -128
  %1268 = add i64 %1209, 13
  store i64 %1268, i64* %3, align 8
  %1269 = inttoptr i64 %1267 to i32*
  store i32 %1241, i32* %1269, align 4
  %1270 = load i64, i64* %RBP.i, align 8
  %1271 = add i64 %1270, -36
  %1272 = load i64, i64* %3, align 8
  %1273 = add i64 %1272, 3
  store i64 %1273, i64* %3, align 8
  %1274 = inttoptr i64 %1271 to i32*
  %1275 = load i32, i32* %1274, align 4
  %1276 = zext i32 %1275 to i64
  store i64 %1276, i64* %RAX.i1404, align 8
  %1277 = add i64 %1270, -220
  %1278 = add i64 %1272, 9
  store i64 %1278, i64* %3, align 8
  %1279 = inttoptr i64 %1277 to i32*
  store i32 %1275, i32* %1279, align 4
  %1280 = load i64, i64* %3, align 8
  %1281 = add i64 %1280, 24
  store i64 %1281, i64* %3, align 8
  %.pre346 = load i64, i64* %RBP.i, align 8
  br label %block_.L_475b79

block_.L_475b66:                                  ; preds = %block_475b30
  %1282 = add i64 %1210, -40
  %1283 = add i64 %1209, 8
  store i64 %1283, i64* %3, align 8
  %1284 = inttoptr i64 %1282 to i32*
  %1285 = load i32, i32* %1284, align 4
  %1286 = add i32 %1285, 1
  %1287 = zext i32 %1286 to i64
  store i64 %1287, i64* %RAX.i1404, align 8
  %1288 = icmp eq i32 %1285, -1
  %1289 = icmp eq i32 %1286, 0
  %1290 = or i1 %1288, %1289
  %1291 = zext i1 %1290 to i8
  store i8 %1291, i8* %12, align 1
  %1292 = and i32 %1286, 255
  %1293 = tail call i32 @llvm.ctpop.i32(i32 %1292)
  %1294 = trunc i32 %1293 to i8
  %1295 = and i8 %1294, 1
  %1296 = xor i8 %1295, 1
  store i8 %1296, i8* %13, align 1
  %1297 = xor i32 %1286, %1285
  %1298 = lshr i32 %1297, 4
  %1299 = trunc i32 %1298 to i8
  %1300 = and i8 %1299, 1
  store i8 %1300, i8* %14, align 1
  %1301 = zext i1 %1289 to i8
  store i8 %1301, i8* %15, align 1
  %1302 = lshr i32 %1286, 31
  %1303 = trunc i32 %1302 to i8
  store i8 %1303, i8* %16, align 1
  %1304 = lshr i32 %1285, 31
  %1305 = xor i32 %1302, %1304
  %1306 = add nuw nsw i32 %1305, %1302
  %1307 = icmp eq i32 %1306, 2
  %1308 = zext i1 %1307 to i8
  store i8 %1308, i8* %17, align 1
  %1309 = add i64 %1209, 14
  store i64 %1309, i64* %3, align 8
  store i32 %1286, i32* %1284, align 4
  %1310 = load i64, i64* %3, align 8
  %1311 = add i64 %1310, -84
  store i64 %1311, i64* %3, align 8
  br label %block_.L_475b20

block_.L_475b79.loopexit:                         ; preds = %block_.L_475b20
  br label %block_.L_475b79

block_.L_475b79:                                  ; preds = %block_.L_475b79.loopexit, %block_475b4b
  %1312 = phi i64 [ %.pre346, %block_475b4b ], [ %1107, %block_.L_475b79.loopexit ]
  %1313 = phi i64 [ %1281, %block_475b4b ], [ %1140, %block_.L_475b79.loopexit ]
  %1314 = add i64 %1312, -36
  %1315 = add i64 %1313, 8
  store i64 %1315, i64* %3, align 8
  %1316 = inttoptr i64 %1314 to i32*
  %1317 = load i32, i32* %1316, align 4
  %1318 = add i32 %1317, 1
  %1319 = zext i32 %1318 to i64
  store i64 %1319, i64* %RAX.i1404, align 8
  %1320 = icmp eq i32 %1317, -1
  %1321 = icmp eq i32 %1318, 0
  %1322 = or i1 %1320, %1321
  %1323 = zext i1 %1322 to i8
  store i8 %1323, i8* %12, align 1
  %1324 = and i32 %1318, 255
  %1325 = tail call i32 @llvm.ctpop.i32(i32 %1324)
  %1326 = trunc i32 %1325 to i8
  %1327 = and i8 %1326, 1
  %1328 = xor i8 %1327, 1
  store i8 %1328, i8* %13, align 1
  %1329 = xor i32 %1318, %1317
  %1330 = lshr i32 %1329, 4
  %1331 = trunc i32 %1330 to i8
  %1332 = and i8 %1331, 1
  store i8 %1332, i8* %14, align 1
  %1333 = zext i1 %1321 to i8
  store i8 %1333, i8* %15, align 1
  %1334 = lshr i32 %1318, 31
  %1335 = trunc i32 %1334 to i8
  store i8 %1335, i8* %16, align 1
  %1336 = lshr i32 %1317, 31
  %1337 = xor i32 %1334, %1336
  %1338 = add nuw nsw i32 %1337, %1334
  %1339 = icmp eq i32 %1338, 2
  %1340 = zext i1 %1339 to i8
  store i8 %1340, i8* %17, align 1
  %1341 = add i64 %1313, 14
  store i64 %1341, i64* %3, align 8
  store i32 %1318, i32* %1316, align 4
  %1342 = load i64, i64* %3, align 8
  %1343 = add i64 %1342, -144
  store i64 %1343, i64* %3, align 8
  br label %block_.L_475af7

block_.L_475b8c.loopexit:                         ; preds = %block_.L_475af7
  br label %block_.L_475b8c

block_.L_475b8c:                                  ; preds = %block_.L_475b8c.loopexit, %block_475b14
  %1344 = phi i64 [ %1102, %block_475b14 ], [ %1073, %block_.L_475b8c.loopexit ]
  %1345 = add i64 %1040, -224
  %1346 = add i64 %1344, 10
  store i64 %1346, i64* %3, align 8
  %1347 = inttoptr i64 %1345 to i32*
  store i32 -1, i32* %1347, align 4
  %1348 = load i64, i64* %3, align 8
  %1349 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %1350 = add i32 %1349, -1
  %1351 = zext i32 %1350 to i64
  store i64 %1351, i64* %RAX.i1404, align 8
  %1352 = icmp eq i32 %1349, 0
  %1353 = zext i1 %1352 to i8
  store i8 %1353, i8* %12, align 1
  %1354 = and i32 %1350, 255
  %1355 = tail call i32 @llvm.ctpop.i32(i32 %1354)
  %1356 = trunc i32 %1355 to i8
  %1357 = and i8 %1356, 1
  %1358 = xor i8 %1357, 1
  store i8 %1358, i8* %13, align 1
  %1359 = xor i32 %1350, %1349
  %1360 = lshr i32 %1359, 4
  %1361 = trunc i32 %1360 to i8
  %1362 = and i8 %1361, 1
  store i8 %1362, i8* %14, align 1
  %1363 = icmp eq i32 %1350, 0
  %1364 = zext i1 %1363 to i8
  store i8 %1364, i8* %15, align 1
  %1365 = lshr i32 %1350, 31
  %1366 = trunc i32 %1365 to i8
  store i8 %1366, i8* %16, align 1
  %1367 = lshr i32 %1349, 31
  %1368 = xor i32 %1365, %1367
  %1369 = add nuw nsw i32 %1368, %1367
  %1370 = icmp eq i32 %1369, 2
  %1371 = zext i1 %1370 to i8
  store i8 %1371, i8* %17, align 1
  %1372 = load i64, i64* %RBP.i, align 8
  %1373 = add i64 %1372, -36
  %1374 = add i64 %1348, 13
  store i64 %1374, i64* %3, align 8
  %1375 = inttoptr i64 %1373 to i32*
  store i32 %1350, i32* %1375, align 4
  %.pre225 = load i64, i64* %3, align 8
  br label %block_.L_475ba3

block_.L_475ba3:                                  ; preds = %block_.L_475c12, %block_.L_475b8c
  %1376 = phi i64 [ %1602, %block_.L_475c12 ], [ %.pre225, %block_.L_475b8c ]
  %1377 = load i64, i64* %RBP.i, align 8
  %1378 = add i64 %1377, -36
  %1379 = add i64 %1376, 4
  store i64 %1379, i64* %3, align 8
  %1380 = inttoptr i64 %1378 to i32*
  %1381 = load i32, i32* %1380, align 4
  store i8 0, i8* %12, align 1
  %1382 = and i32 %1381, 255
  %1383 = tail call i32 @llvm.ctpop.i32(i32 %1382)
  %1384 = trunc i32 %1383 to i8
  %1385 = and i8 %1384, 1
  %1386 = xor i8 %1385, 1
  store i8 %1386, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %1387 = icmp eq i32 %1381, 0
  %1388 = zext i1 %1387 to i8
  store i8 %1388, i8* %15, align 1
  %1389 = lshr i32 %1381, 31
  %1390 = trunc i32 %1389 to i8
  store i8 %1390, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %1391 = icmp ne i8 %1390, 0
  %.v = select i1 %1391, i64 126, i64 6
  %1392 = add i64 %1379, %.v
  store i64 %1392, i64* %3, align 8
  br i1 %1391, label %block_.L_475c25.loopexit, label %block_475bad

block_475bad:                                     ; preds = %block_.L_475ba3
  %1393 = add i64 %1377, -224
  %1394 = add i64 %1392, 7
  store i64 %1394, i64* %3, align 8
  %1395 = inttoptr i64 %1393 to i32*
  %1396 = load i32, i32* %1395, align 4
  %1397 = add i32 %1396, 1
  %1398 = icmp ne i32 %1396, -1
  %1399 = zext i1 %1398 to i8
  store i8 %1399, i8* %12, align 1
  %1400 = and i32 %1397, 255
  %1401 = tail call i32 @llvm.ctpop.i32(i32 %1400)
  %1402 = trunc i32 %1401 to i8
  %1403 = and i8 %1402, 1
  %1404 = xor i8 %1403, 1
  store i8 %1404, i8* %13, align 1
  %1405 = xor i32 %1396, 16
  %1406 = xor i32 %1405, %1397
  %1407 = lshr i32 %1406, 4
  %1408 = trunc i32 %1407 to i8
  %1409 = and i8 %1408, 1
  store i8 %1409, i8* %14, align 1
  %1410 = icmp eq i32 %1397, 0
  %1411 = zext i1 %1410 to i8
  store i8 %1411, i8* %15, align 1
  %1412 = lshr i32 %1397, 31
  %1413 = trunc i32 %1412 to i8
  store i8 %1413, i8* %16, align 1
  %1414 = lshr i32 %1396, 31
  %1415 = xor i32 %1414, 1
  %1416 = xor i32 %1412, %1414
  %1417 = add nuw nsw i32 %1416, %1415
  %1418 = icmp eq i32 %1417, 2
  %1419 = zext i1 %1418 to i8
  store i8 %1419, i8* %17, align 1
  %.v372 = select i1 %1410, i64 18, i64 13
  %1420 = add i64 %1392, %.v372
  store i64 %1420, i64* %3, align 8
  br i1 %1410, label %block_.L_475bbf, label %block_475bba

block_475bba:                                     ; preds = %block_475bad
  %1421 = add i64 %1420, 107
  store i64 %1421, i64* %3, align 8
  br label %block_.L_475c25

block_.L_475bbf:                                  ; preds = %block_475bad
  %1422 = add i64 %1377, -40
  %1423 = add i64 %1420, 7
  store i64 %1423, i64* %3, align 8
  %1424 = inttoptr i64 %1422 to i32*
  store i32 0, i32* %1424, align 4
  %.pre226 = load i64, i64* %3, align 8
  br label %block_.L_475bc6

block_.L_475bc6:                                  ; preds = %block_.L_475bff, %block_.L_475bbf
  %1425 = phi i64 [ %1569, %block_.L_475bff ], [ %.pre226, %block_.L_475bbf ]
  %1426 = load i64, i64* %RBP.i, align 8
  %1427 = add i64 %1426, -40
  %1428 = add i64 %1425, 3
  store i64 %1428, i64* %3, align 8
  %1429 = inttoptr i64 %1427 to i32*
  %1430 = load i32, i32* %1429, align 4
  %1431 = zext i32 %1430 to i64
  store i64 %1431, i64* %RAX.i1404, align 8
  %1432 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %1433 = sub i32 %1430, %1432
  %1434 = icmp ult i32 %1430, %1432
  %1435 = zext i1 %1434 to i8
  store i8 %1435, i8* %12, align 1
  %1436 = and i32 %1433, 255
  %1437 = tail call i32 @llvm.ctpop.i32(i32 %1436)
  %1438 = trunc i32 %1437 to i8
  %1439 = and i8 %1438, 1
  %1440 = xor i8 %1439, 1
  store i8 %1440, i8* %13, align 1
  %1441 = xor i32 %1432, %1430
  %1442 = xor i32 %1441, %1433
  %1443 = lshr i32 %1442, 4
  %1444 = trunc i32 %1443 to i8
  %1445 = and i8 %1444, 1
  store i8 %1445, i8* %14, align 1
  %1446 = icmp eq i32 %1433, 0
  %1447 = zext i1 %1446 to i8
  store i8 %1447, i8* %15, align 1
  %1448 = lshr i32 %1433, 31
  %1449 = trunc i32 %1448 to i8
  store i8 %1449, i8* %16, align 1
  %1450 = lshr i32 %1430, 31
  %1451 = lshr i32 %1432, 31
  %1452 = xor i32 %1451, %1450
  %1453 = xor i32 %1448, %1450
  %1454 = add nuw nsw i32 %1453, %1452
  %1455 = icmp eq i32 %1454, 2
  %1456 = zext i1 %1455 to i8
  store i8 %1456, i8* %17, align 1
  %1457 = icmp ne i8 %1449, 0
  %1458 = xor i1 %1457, %1455
  %.v462 = select i1 %1458, i64 16, i64 76
  %1459 = add i64 %1425, %.v462
  store i64 %1459, i64* %3, align 8
  br i1 %1458, label %block_475bd6, label %block_.L_475c12.loopexit

block_475bd6:                                     ; preds = %block_.L_475bc6
  %1460 = add i64 %1426, -36
  %1461 = add i64 %1459, 4
  store i64 %1461, i64* %3, align 8
  %1462 = inttoptr i64 %1460 to i32*
  %1463 = load i32, i32* %1462, align 4
  %1464 = mul i32 %1463, 20
  %1465 = add i32 %1464, 21
  %1466 = zext i32 %1465 to i64
  store i64 %1466, i64* %RAX.i1404, align 8
  %1467 = icmp ugt i32 %1464, -22
  %1468 = zext i1 %1467 to i8
  store i8 %1468, i8* %12, align 1
  %1469 = and i32 %1465, 253
  %1470 = tail call i32 @llvm.ctpop.i32(i32 %1469)
  %1471 = trunc i32 %1470 to i8
  %1472 = and i8 %1471, 1
  %1473 = xor i8 %1472, 1
  store i8 %1473, i8* %13, align 1
  %1474 = xor i32 %1464, 16
  %1475 = xor i32 %1474, %1465
  %1476 = lshr i32 %1475, 4
  %1477 = trunc i32 %1476 to i8
  %1478 = and i8 %1477, 1
  store i8 %1478, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %1479 = lshr i32 %1465, 31
  %1480 = trunc i32 %1479 to i8
  store i8 %1480, i8* %16, align 1
  %1481 = lshr i32 %1464, 31
  %1482 = xor i32 %1479, %1481
  %1483 = add nuw nsw i32 %1482, %1479
  %1484 = icmp eq i32 %1483, 2
  %1485 = zext i1 %1484 to i8
  store i8 %1485, i8* %17, align 1
  %1486 = add i64 %1459, 10
  store i64 %1486, i64* %3, align 8
  %1487 = load i32, i32* %1429, align 4
  %1488 = add i32 %1487, %1465
  %1489 = zext i32 %1488 to i64
  store i64 %1489, i64* %RAX.i1404, align 8
  %1490 = icmp ult i32 %1488, %1465
  %1491 = icmp ult i32 %1488, %1487
  %1492 = or i1 %1490, %1491
  %1493 = zext i1 %1492 to i8
  store i8 %1493, i8* %12, align 1
  %1494 = and i32 %1488, 255
  %1495 = tail call i32 @llvm.ctpop.i32(i32 %1494)
  %1496 = trunc i32 %1495 to i8
  %1497 = and i8 %1496, 1
  %1498 = xor i8 %1497, 1
  store i8 %1498, i8* %13, align 1
  %1499 = xor i32 %1487, %1465
  %1500 = xor i32 %1499, %1488
  %1501 = lshr i32 %1500, 4
  %1502 = trunc i32 %1501 to i8
  %1503 = and i8 %1502, 1
  store i8 %1503, i8* %14, align 1
  %1504 = icmp eq i32 %1488, 0
  %1505 = zext i1 %1504 to i8
  store i8 %1505, i8* %15, align 1
  %1506 = lshr i32 %1488, 31
  %1507 = trunc i32 %1506 to i8
  store i8 %1507, i8* %16, align 1
  %1508 = lshr i32 %1487, 31
  %1509 = xor i32 %1506, %1479
  %1510 = xor i32 %1506, %1508
  %1511 = add nuw nsw i32 %1509, %1510
  %1512 = icmp eq i32 %1511, 2
  %1513 = zext i1 %1512 to i8
  store i8 %1513, i8* %17, align 1
  %1514 = sext i32 %1488 to i64
  store i64 %1514, i64* %RCX.i1715, align 8
  %1515 = add nsw i64 %1514, -1040
  %1516 = add i64 %1515, %1426
  %1517 = add i64 %1459, 21
  store i64 %1517, i64* %3, align 8
  %1518 = inttoptr i64 %1516 to i8*
  %1519 = load i8, i8* %1518, align 1
  store i8 0, i8* %12, align 1
  %1520 = zext i8 %1519 to i32
  %1521 = tail call i32 @llvm.ctpop.i32(i32 %1520)
  %1522 = trunc i32 %1521 to i8
  %1523 = and i8 %1522, 1
  %1524 = xor i8 %1523, 1
  store i8 %1524, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %1525 = icmp eq i8 %1519, 0
  %1526 = zext i1 %1525 to i8
  store i8 %1526, i8* %15, align 1
  %1527 = lshr i8 %1519, 7
  store i8 %1527, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v463 = select i1 %1525, i64 41, i64 27
  %1528 = add i64 %1459, %.v463
  store i64 %1528, i64* %3, align 8
  %1529 = load i64, i64* %RBP.i, align 8
  br i1 %1525, label %block_.L_475bff, label %block_475bf1

block_475bf1:                                     ; preds = %block_475bd6
  %1530 = add i64 %1529, -36
  %1531 = add i64 %1528, 3
  store i64 %1531, i64* %3, align 8
  %1532 = inttoptr i64 %1530 to i32*
  %1533 = load i32, i32* %1532, align 4
  %1534 = zext i32 %1533 to i64
  store i64 %1534, i64* %RAX.i1404, align 8
  %1535 = add i64 %1529, -224
  %1536 = add i64 %1528, 9
  store i64 %1536, i64* %3, align 8
  %1537 = inttoptr i64 %1535 to i32*
  store i32 %1533, i32* %1537, align 4
  %1538 = load i64, i64* %3, align 8
  %1539 = add i64 %1538, 24
  store i64 %1539, i64* %3, align 8
  %.pre227 = load i64, i64* %RBP.i, align 8
  br label %block_.L_475c12

block_.L_475bff:                                  ; preds = %block_475bd6
  %1540 = add i64 %1529, -40
  %1541 = add i64 %1528, 8
  store i64 %1541, i64* %3, align 8
  %1542 = inttoptr i64 %1540 to i32*
  %1543 = load i32, i32* %1542, align 4
  %1544 = add i32 %1543, 1
  %1545 = zext i32 %1544 to i64
  store i64 %1545, i64* %RAX.i1404, align 8
  %1546 = icmp eq i32 %1543, -1
  %1547 = icmp eq i32 %1544, 0
  %1548 = or i1 %1546, %1547
  %1549 = zext i1 %1548 to i8
  store i8 %1549, i8* %12, align 1
  %1550 = and i32 %1544, 255
  %1551 = tail call i32 @llvm.ctpop.i32(i32 %1550)
  %1552 = trunc i32 %1551 to i8
  %1553 = and i8 %1552, 1
  %1554 = xor i8 %1553, 1
  store i8 %1554, i8* %13, align 1
  %1555 = xor i32 %1544, %1543
  %1556 = lshr i32 %1555, 4
  %1557 = trunc i32 %1556 to i8
  %1558 = and i8 %1557, 1
  store i8 %1558, i8* %14, align 1
  %1559 = zext i1 %1547 to i8
  store i8 %1559, i8* %15, align 1
  %1560 = lshr i32 %1544, 31
  %1561 = trunc i32 %1560 to i8
  store i8 %1561, i8* %16, align 1
  %1562 = lshr i32 %1543, 31
  %1563 = xor i32 %1560, %1562
  %1564 = add nuw nsw i32 %1563, %1560
  %1565 = icmp eq i32 %1564, 2
  %1566 = zext i1 %1565 to i8
  store i8 %1566, i8* %17, align 1
  %1567 = add i64 %1528, 14
  store i64 %1567, i64* %3, align 8
  store i32 %1544, i32* %1542, align 4
  %1568 = load i64, i64* %3, align 8
  %1569 = add i64 %1568, -71
  store i64 %1569, i64* %3, align 8
  br label %block_.L_475bc6

block_.L_475c12.loopexit:                         ; preds = %block_.L_475bc6
  br label %block_.L_475c12

block_.L_475c12:                                  ; preds = %block_.L_475c12.loopexit, %block_475bf1
  %1570 = phi i64 [ %.pre227, %block_475bf1 ], [ %1426, %block_.L_475c12.loopexit ]
  %1571 = phi i64 [ %1539, %block_475bf1 ], [ %1459, %block_.L_475c12.loopexit ]
  %1572 = add i64 %1570, -36
  %1573 = add i64 %1571, 8
  store i64 %1573, i64* %3, align 8
  %1574 = inttoptr i64 %1572 to i32*
  %1575 = load i32, i32* %1574, align 4
  %1576 = add i32 %1575, -1
  %1577 = zext i32 %1576 to i64
  store i64 %1577, i64* %RAX.i1404, align 8
  %1578 = icmp ne i32 %1575, 0
  %1579 = zext i1 %1578 to i8
  store i8 %1579, i8* %12, align 1
  %1580 = and i32 %1576, 255
  %1581 = tail call i32 @llvm.ctpop.i32(i32 %1580)
  %1582 = trunc i32 %1581 to i8
  %1583 = and i8 %1582, 1
  %1584 = xor i8 %1583, 1
  store i8 %1584, i8* %13, align 1
  %1585 = xor i32 %1575, 16
  %1586 = xor i32 %1585, %1576
  %1587 = lshr i32 %1586, 4
  %1588 = trunc i32 %1587 to i8
  %1589 = and i8 %1588, 1
  store i8 %1589, i8* %14, align 1
  %1590 = icmp eq i32 %1576, 0
  %1591 = zext i1 %1590 to i8
  store i8 %1591, i8* %15, align 1
  %1592 = lshr i32 %1576, 31
  %1593 = trunc i32 %1592 to i8
  store i8 %1593, i8* %16, align 1
  %1594 = lshr i32 %1575, 31
  %1595 = xor i32 %1592, %1594
  %1596 = xor i32 %1592, 1
  %1597 = add nuw nsw i32 %1595, %1596
  %1598 = icmp eq i32 %1597, 2
  %1599 = zext i1 %1598 to i8
  store i8 %1599, i8* %17, align 1
  %1600 = add i64 %1571, 14
  store i64 %1600, i64* %3, align 8
  store i32 %1576, i32* %1574, align 4
  %1601 = load i64, i64* %3, align 8
  %1602 = add i64 %1601, -125
  store i64 %1602, i64* %3, align 8
  br label %block_.L_475ba3

block_.L_475c25.loopexit:                         ; preds = %block_.L_475ba3
  br label %block_.L_475c25

block_.L_475c25:                                  ; preds = %block_.L_475c25.loopexit, %block_475bba
  %1603 = phi i64 [ %1421, %block_475bba ], [ %1392, %block_.L_475c25.loopexit ]
  %1604 = add i64 %1377, -212
  %1605 = add i64 %1603, 10
  store i64 %1605, i64* %3, align 8
  %1606 = inttoptr i64 %1604 to i32*
  store i32 1, i32* %1606, align 4
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %1609 = bitcast [32 x %union.VectorReg]* %1608 to i8*
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1611 = bitcast [32 x %union.VectorReg]* %1608 to i32*
  %1612 = getelementptr inbounds i8, i8* %1609, i64 4
  %1613 = bitcast i8* %1612 to i32*
  %1614 = bitcast i64* %1610 to i32*
  %1615 = getelementptr inbounds i8, i8* %1609, i64 12
  %1616 = bitcast i8* %1615 to i32*
  %1617 = bitcast [32 x %union.VectorReg]* %1608 to <2 x float>*
  %1618 = bitcast [32 x %union.VectorReg]* %1608 to <2 x i32>*
  %1619 = bitcast i64* %1610 to <2 x i32>*
  %1620 = bitcast [32 x %union.VectorReg]* %1608 to float*
  %1621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %1622 = bitcast %union.VectorReg* %1621 to i8*
  %1623 = bitcast %union.VectorReg* %1621 to <2 x i32>*
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %1625 = bitcast i64* %1624 to <2 x i32>*
  %1626 = bitcast %union.VectorReg* %1621 to float*
  %1627 = getelementptr inbounds i8, i8* %1622, i64 4
  %1628 = bitcast i8* %1627 to i32*
  %1629 = bitcast i64* %1624 to i32*
  %1630 = getelementptr inbounds i8, i8* %1622, i64 12
  %1631 = bitcast i8* %1630 to i32*
  %1632 = bitcast %union.VectorReg* %1621 to <2 x float>*
  %1633 = bitcast i8* %1612 to float*
  %1634 = bitcast i64* %1610 to float*
  %1635 = bitcast i8* %1615 to float*
  %1636 = bitcast %union.VectorReg* %1621 to i32*
  %1637 = bitcast i8* %1627 to float*
  %1638 = bitcast i64* %1624 to float*
  %1639 = bitcast i8* %1630 to float*
  %.pre228 = load i64, i64* %3, align 8
  %1640 = bitcast [32 x %union.VectorReg]* %1608 to <4 x i32>*
  br label %block_.L_475c2f

block_.L_475c2f:                                  ; preds = %block_.L_475ded, %block_.L_475c25
  %1641 = phi i64 [ %.pre228, %block_.L_475c25 ], [ %2501, %block_.L_475ded ]
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.7, %block_.L_475c25 ], [ %MEMORY.22, %block_.L_475ded ]
  store i64 20, i64* %RAX.i1404, align 8
  %1642 = load i64, i64* %RBP.i, align 8
  %1643 = add i64 %1642, -212
  %1644 = add i64 %1641, 11
  store i64 %1644, i64* %3, align 8
  %1645 = inttoptr i64 %1643 to i32*
  %1646 = load i32, i32* %1645, align 4
  %1647 = add i32 %1646, -1
  %1648 = zext i32 %1647 to i64
  store i64 %1648, i64* %RCX.i1715, align 8
  %1649 = icmp eq i32 %1646, 0
  %1650 = zext i1 %1649 to i8
  store i8 %1650, i8* %12, align 1
  %1651 = and i32 %1647, 255
  %1652 = tail call i32 @llvm.ctpop.i32(i32 %1651)
  %1653 = trunc i32 %1652 to i8
  %1654 = and i8 %1653, 1
  %1655 = xor i8 %1654, 1
  store i8 %1655, i8* %13, align 1
  %1656 = xor i32 %1647, %1646
  %1657 = lshr i32 %1656, 4
  %1658 = trunc i32 %1657 to i8
  %1659 = and i8 %1658, 1
  store i8 %1659, i8* %14, align 1
  %1660 = icmp eq i32 %1647, 0
  %1661 = zext i1 %1660 to i8
  store i8 %1661, i8* %15, align 1
  %1662 = lshr i32 %1647, 31
  %1663 = trunc i32 %1662 to i8
  store i8 %1663, i8* %16, align 1
  %1664 = lshr i32 %1646, 31
  %1665 = xor i32 %1662, %1664
  %1666 = add nuw nsw i32 %1665, %1664
  %1667 = icmp eq i32 %1666, 2
  %1668 = zext i1 %1667 to i8
  store i8 %1668, i8* %17, align 1
  %1669 = sext i32 %1647 to i64
  store i64 %1669, i64* %RDX.i1921, align 8
  %1670 = shl nsw i64 %1669, 2
  %1671 = add nsw i64 %1670, -128
  %1672 = add i64 %1671, %1642
  %1673 = add i64 %1641, 21
  store i64 %1673, i64* %3, align 8
  %1674 = inttoptr i64 %1672 to i32*
  %1675 = load i32, i32* %1674, align 4
  %1676 = zext i32 %1675 to i64
  store i64 %1676, i64* %RCX.i1715, align 8
  %1677 = add i64 %1642, -1168
  %1678 = add i64 %1641, 27
  store i64 %1678, i64* %3, align 8
  %1679 = inttoptr i64 %1677 to i32*
  store i32 20, i32* %1679, align 4
  %1680 = load i32, i32* %ECX.i2918, align 4
  %1681 = zext i32 %1680 to i64
  %1682 = load i64, i64* %3, align 8
  store i64 %1681, i64* %RAX.i1404, align 8
  %1683 = sext i32 %1680 to i64
  %1684 = lshr i64 %1683, 32
  store i64 %1684, i64* %1607, align 8
  %1685 = load i64, i64* %RBP.i, align 8
  %1686 = add i64 %1685, -1168
  %1687 = add i64 %1682, 9
  store i64 %1687, i64* %3, align 8
  %1688 = inttoptr i64 %1686 to i32*
  %1689 = load i32, i32* %1688, align 4
  %1690 = zext i32 %1689 to i64
  store i64 %1690, i64* %RCX.i1715, align 8
  %1691 = add i64 %1682, 11
  store i64 %1691, i64* %3, align 8
  %1692 = sext i32 %1689 to i64
  %1693 = shl nuw i64 %1684, 32
  %1694 = or i64 %1693, %1681
  %1695 = sdiv i64 %1694, %1692
  %1696 = shl i64 %1695, 32
  %1697 = ashr exact i64 %1696, 32
  %1698 = icmp eq i64 %1695, %1697
  br i1 %1698, label %1701, label %1699

; <label>:1699:                                   ; preds = %block_.L_475c2f
  %1700 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1691, %struct.Memory* %MEMORY.16)
  %.pre229 = load i64, i64* %RAX.i1404, align 8
  %.pre230 = load i64, i64* %3, align 8
  %.pre231 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2482

; <label>:1701:                                   ; preds = %block_.L_475c2f
  %1702 = srem i64 %1694, %1692
  %1703 = and i64 %1695, 4294967295
  store i64 %1703, i64* %RAX.i1404, align 8
  %1704 = and i64 %1702, 4294967295
  store i64 %1704, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit2482

routine_idivl__ecx.exit2482:                      ; preds = %1701, %1699
  %1705 = phi i64 [ %.pre231, %1699 ], [ %1685, %1701 ]
  %1706 = phi i64 [ %.pre230, %1699 ], [ %1691, %1701 ]
  %1707 = phi i64 [ %.pre229, %1699 ], [ %1703, %1701 ]
  %1708 = phi %struct.Memory* [ %1700, %1699 ], [ %MEMORY.16, %1701 ]
  %1709 = trunc i64 %1707 to i32
  %1710 = add i32 %1709, -1
  %1711 = zext i32 %1710 to i64
  store i64 %1711, i64* %RAX.i1404, align 8
  %1712 = icmp eq i32 %1709, 0
  %1713 = zext i1 %1712 to i8
  store i8 %1713, i8* %12, align 1
  %1714 = and i32 %1710, 255
  %1715 = tail call i32 @llvm.ctpop.i32(i32 %1714)
  %1716 = trunc i32 %1715 to i8
  %1717 = and i8 %1716, 1
  %1718 = xor i8 %1717, 1
  store i8 %1718, i8* %13, align 1
  %1719 = xor i32 %1710, %1709
  %1720 = lshr i32 %1719, 4
  %1721 = trunc i32 %1720 to i8
  %1722 = and i8 %1721, 1
  store i8 %1722, i8* %14, align 1
  %1723 = icmp eq i32 %1710, 0
  %1724 = zext i1 %1723 to i8
  store i8 %1724, i8* %15, align 1
  %1725 = lshr i32 %1710, 31
  %1726 = trunc i32 %1725 to i8
  store i8 %1726, i8* %16, align 1
  %1727 = lshr i32 %1709, 31
  %1728 = xor i32 %1725, %1727
  %1729 = add nuw nsw i32 %1728, %1727
  %1730 = icmp eq i32 %1729, 2
  %1731 = zext i1 %1730 to i8
  store i8 %1731, i8* %17, align 1
  %1732 = add i64 %1705, -224
  %1733 = add i64 %1706, 9
  store i64 %1733, i64* %3, align 8
  %1734 = inttoptr i64 %1732 to i32*
  %1735 = load i32, i32* %1734, align 4
  %1736 = sub i32 %1710, %1735
  %1737 = icmp ult i32 %1710, %1735
  %1738 = zext i1 %1737 to i8
  store i8 %1738, i8* %12, align 1
  %1739 = and i32 %1736, 255
  %1740 = tail call i32 @llvm.ctpop.i32(i32 %1739)
  %1741 = trunc i32 %1740 to i8
  %1742 = and i8 %1741, 1
  %1743 = xor i8 %1742, 1
  store i8 %1743, i8* %13, align 1
  %1744 = xor i32 %1735, %1710
  %1745 = xor i32 %1744, %1736
  %1746 = lshr i32 %1745, 4
  %1747 = trunc i32 %1746 to i8
  %1748 = and i8 %1747, 1
  store i8 %1748, i8* %14, align 1
  %1749 = icmp eq i32 %1736, 0
  %1750 = zext i1 %1749 to i8
  store i8 %1750, i8* %15, align 1
  %1751 = lshr i32 %1736, 31
  %1752 = trunc i32 %1751 to i8
  store i8 %1752, i8* %16, align 1
  %1753 = lshr i32 %1735, 31
  %1754 = xor i32 %1753, %1725
  %1755 = xor i32 %1751, %1725
  %1756 = add nuw nsw i32 %1755, %1754
  %1757 = icmp eq i32 %1756, 2
  %1758 = zext i1 %1757 to i8
  store i8 %1758, i8* %17, align 1
  %1759 = icmp ne i8 %1752, 0
  %1760 = xor i1 %1759, %1757
  %.v373 = select i1 %1760, i64 15, i64 445
  %1761 = add i64 %1706, %.v373
  store i64 %1761, i64* %3, align 8
  br i1 %1760, label %block_475c64, label %block_.L_475e12

block_475c64:                                     ; preds = %routine_idivl__ecx.exit2482
  store i64 20, i64* %RAX.i1404, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %1640, align 1
  %1762 = add i64 %1705, -1048
  %1763 = add i64 %1761, 18
  store i64 %1763, i64* %3, align 8
  %1764 = inttoptr i64 %1762 to i32*
  store i32 0, i32* %1764, align 4
  %1765 = load i64, i64* %RBP.i, align 8
  %1766 = add i64 %1765, -1052
  %1767 = load i64, i64* %3, align 8
  %1768 = add i64 %1767, 8
  store i64 %1768, i64* %3, align 8
  %1769 = load <2 x float>, <2 x float>* %1617, align 1
  %1770 = extractelement <2 x float> %1769, i32 0
  %1771 = inttoptr i64 %1766 to float*
  store float %1770, float* %1771, align 4
  %1772 = load i64, i64* %RBP.i, align 8
  %1773 = add i64 %1772, -212
  %1774 = load i64, i64* %3, align 8
  %1775 = add i64 %1774, 6
  store i64 %1775, i64* %3, align 8
  %1776 = inttoptr i64 %1773 to i32*
  %1777 = load i32, i32* %1776, align 4
  %1778 = add i32 %1777, -1
  %1779 = zext i32 %1778 to i64
  store i64 %1779, i64* %RCX.i1715, align 8
  %1780 = icmp eq i32 %1777, 0
  %1781 = zext i1 %1780 to i8
  store i8 %1781, i8* %12, align 1
  %1782 = and i32 %1778, 255
  %1783 = tail call i32 @llvm.ctpop.i32(i32 %1782)
  %1784 = trunc i32 %1783 to i8
  %1785 = and i8 %1784, 1
  %1786 = xor i8 %1785, 1
  store i8 %1786, i8* %13, align 1
  %1787 = xor i32 %1778, %1777
  %1788 = lshr i32 %1787, 4
  %1789 = trunc i32 %1788 to i8
  %1790 = and i8 %1789, 1
  store i8 %1790, i8* %14, align 1
  %1791 = icmp eq i32 %1778, 0
  %1792 = zext i1 %1791 to i8
  store i8 %1792, i8* %15, align 1
  %1793 = lshr i32 %1778, 31
  %1794 = trunc i32 %1793 to i8
  store i8 %1794, i8* %16, align 1
  %1795 = lshr i32 %1777, 31
  %1796 = xor i32 %1793, %1795
  %1797 = add nuw nsw i32 %1796, %1795
  %1798 = icmp eq i32 %1797, 2
  %1799 = zext i1 %1798 to i8
  store i8 %1799, i8* %17, align 1
  %1800 = sext i32 %1778 to i64
  store i64 %1800, i64* %RDX.i1921, align 8
  %1801 = shl nsw i64 %1800, 2
  %1802 = add nsw i64 %1801, -128
  %1803 = add i64 %1802, %1772
  %1804 = add i64 %1774, 16
  store i64 %1804, i64* %3, align 8
  %1805 = inttoptr i64 %1803 to i32*
  %1806 = load i32, i32* %1805, align 4
  %1807 = zext i32 %1806 to i64
  store i64 %1807, i64* %RCX.i1715, align 8
  %1808 = add i64 %1772, -1172
  %1809 = load i32, i32* %EAX.i1403, align 4
  %1810 = add i64 %1774, 22
  store i64 %1810, i64* %3, align 8
  %1811 = inttoptr i64 %1808 to i32*
  store i32 %1809, i32* %1811, align 4
  %1812 = load i32, i32* %ECX.i2918, align 4
  %1813 = zext i32 %1812 to i64
  %1814 = load i64, i64* %3, align 8
  store i64 %1813, i64* %RAX.i1404, align 8
  %1815 = sext i32 %1812 to i64
  %1816 = lshr i64 %1815, 32
  store i64 %1816, i64* %1607, align 8
  %1817 = load i64, i64* %RBP.i, align 8
  %1818 = add i64 %1817, -1172
  %1819 = add i64 %1814, 9
  store i64 %1819, i64* %3, align 8
  %1820 = inttoptr i64 %1818 to i32*
  %1821 = load i32, i32* %1820, align 4
  %1822 = zext i32 %1821 to i64
  store i64 %1822, i64* %RCX.i1715, align 8
  %1823 = add i64 %1814, 11
  store i64 %1823, i64* %3, align 8
  %1824 = sext i32 %1821 to i64
  %1825 = shl nuw i64 %1816, 32
  %1826 = or i64 %1825, %1813
  %1827 = sdiv i64 %1826, %1824
  %1828 = shl i64 %1827, 32
  %1829 = ashr exact i64 %1828, 32
  %1830 = icmp eq i64 %1827, %1829
  br i1 %1830, label %1833, label %1831

; <label>:1831:                                   ; preds = %block_475c64
  %1832 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1823, %struct.Memory* %1708)
  %.pre330 = load i64, i64* %RAX.i1404, align 8
  %.pre331 = load i64, i64* %3, align 8
  %.pre332 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2438

; <label>:1833:                                   ; preds = %block_475c64
  %1834 = srem i64 %1826, %1824
  %1835 = and i64 %1827, 4294967295
  store i64 %1835, i64* %RAX.i1404, align 8
  %1836 = and i64 %1834, 4294967295
  store i64 %1836, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit2438

routine_idivl__ecx.exit2438:                      ; preds = %1833, %1831
  %1837 = phi i64 [ %.pre332, %1831 ], [ %1817, %1833 ]
  %1838 = phi i64 [ %.pre331, %1831 ], [ %1823, %1833 ]
  %1839 = phi i64 [ %.pre330, %1831 ], [ %1835, %1833 ]
  %1840 = phi %struct.Memory* [ %1832, %1831 ], [ %1708, %1833 ]
  %1841 = trunc i64 %1839 to i32
  %1842 = add i32 %1841, -1
  %1843 = zext i32 %1842 to i64
  store i64 %1843, i64* %RAX.i1404, align 8
  %1844 = icmp eq i32 %1841, 0
  %1845 = zext i1 %1844 to i8
  store i8 %1845, i8* %12, align 1
  %1846 = and i32 %1842, 255
  %1847 = tail call i32 @llvm.ctpop.i32(i32 %1846)
  %1848 = trunc i32 %1847 to i8
  %1849 = and i8 %1848, 1
  %1850 = xor i8 %1849, 1
  store i8 %1850, i8* %13, align 1
  %1851 = xor i32 %1842, %1841
  %1852 = lshr i32 %1851, 4
  %1853 = trunc i32 %1852 to i8
  %1854 = and i8 %1853, 1
  store i8 %1854, i8* %14, align 1
  %1855 = icmp eq i32 %1842, 0
  %1856 = zext i1 %1855 to i8
  store i8 %1856, i8* %15, align 1
  %1857 = lshr i32 %1842, 31
  %1858 = trunc i32 %1857 to i8
  store i8 %1858, i8* %16, align 1
  %1859 = lshr i32 %1841, 31
  %1860 = xor i32 %1857, %1859
  %1861 = add nuw nsw i32 %1860, %1859
  %1862 = icmp eq i32 %1861, 2
  %1863 = zext i1 %1862 to i8
  store i8 %1863, i8* %17, align 1
  %1864 = add i64 %1837, -1056
  %1865 = add i64 %1838, 9
  store i64 %1865, i64* %3, align 8
  %1866 = inttoptr i64 %1864 to i32*
  store i32 %1842, i32* %1866, align 4
  %1867 = load i64, i64* %RBP.i, align 8
  %1868 = add i64 %1867, -212
  %1869 = load i64, i64* %3, align 8
  %1870 = add i64 %1869, 6
  store i64 %1870, i64* %3, align 8
  %1871 = inttoptr i64 %1868 to i32*
  %1872 = load i32, i32* %1871, align 4
  %1873 = add i32 %1872, -1
  %1874 = zext i32 %1873 to i64
  store i64 %1874, i64* %RAX.i1404, align 8
  %1875 = icmp eq i32 %1872, 0
  %1876 = zext i1 %1875 to i8
  store i8 %1876, i8* %12, align 1
  %1877 = and i32 %1873, 255
  %1878 = tail call i32 @llvm.ctpop.i32(i32 %1877)
  %1879 = trunc i32 %1878 to i8
  %1880 = and i8 %1879, 1
  %1881 = xor i8 %1880, 1
  store i8 %1881, i8* %13, align 1
  %1882 = xor i32 %1873, %1872
  %1883 = lshr i32 %1882, 4
  %1884 = trunc i32 %1883 to i8
  %1885 = and i8 %1884, 1
  store i8 %1885, i8* %14, align 1
  %1886 = icmp eq i32 %1873, 0
  %1887 = zext i1 %1886 to i8
  store i8 %1887, i8* %15, align 1
  %1888 = lshr i32 %1873, 31
  %1889 = trunc i32 %1888 to i8
  store i8 %1889, i8* %16, align 1
  %1890 = lshr i32 %1872, 31
  %1891 = xor i32 %1888, %1890
  %1892 = add nuw nsw i32 %1891, %1890
  %1893 = icmp eq i32 %1892, 2
  %1894 = zext i1 %1893 to i8
  store i8 %1894, i8* %17, align 1
  %1895 = sext i32 %1873 to i64
  store i64 %1895, i64* %RSI.i2336, align 8
  %1896 = shl nsw i64 %1895, 2
  %1897 = add nsw i64 %1896, -128
  %1898 = add i64 %1897, %1867
  %1899 = add i64 %1869, 16
  store i64 %1899, i64* %3, align 8
  %1900 = inttoptr i64 %1898 to i32*
  %1901 = load i32, i32* %1900, align 4
  %1902 = zext i32 %1901 to i64
  store i64 %1902, i64* %RAX.i1404, align 8
  %1903 = sext i32 %1901 to i64
  %1904 = lshr i64 %1903, 32
  store i64 %1904, i64* %1607, align 8
  %1905 = load i32, i32* %ECX.i2918, align 4
  %1906 = add i64 %1869, 19
  store i64 %1906, i64* %3, align 8
  %1907 = sext i32 %1905 to i64
  %1908 = shl nuw i64 %1904, 32
  %1909 = or i64 %1908, %1902
  %1910 = sdiv i64 %1909, %1907
  %1911 = shl i64 %1910, 32
  %1912 = ashr exact i64 %1911, 32
  %1913 = icmp eq i64 %1910, %1912
  br i1 %1913, label %1916, label %1914

; <label>:1914:                                   ; preds = %routine_idivl__ecx.exit2438
  %1915 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1906, %struct.Memory* %1840)
  %.pre333 = load i64, i64* %RDX.i1921, align 8
  %.pre334 = load i64, i64* %3, align 8
  %.pre335 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2415

; <label>:1916:                                   ; preds = %routine_idivl__ecx.exit2438
  %1917 = srem i64 %1909, %1907
  %1918 = and i64 %1910, 4294967295
  store i64 %1918, i64* %RAX.i1404, align 8
  %1919 = and i64 %1917, 4294967295
  store i64 %1919, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit2415

routine_idivl__ecx.exit2415:                      ; preds = %1916, %1914
  %1920 = phi i64 [ %.pre335, %1914 ], [ %1867, %1916 ]
  %1921 = phi i64 [ %.pre334, %1914 ], [ %1906, %1916 ]
  %1922 = phi i64 [ %.pre333, %1914 ], [ %1919, %1916 ]
  %1923 = phi %struct.Memory* [ %1915, %1914 ], [ %1840, %1916 ]
  %1924 = trunc i64 %1922 to i32
  %1925 = add i32 %1924, -1
  %1926 = zext i32 %1925 to i64
  store i64 %1926, i64* %RDX.i1921, align 8
  %1927 = icmp eq i32 %1924, 0
  %1928 = zext i1 %1927 to i8
  store i8 %1928, i8* %12, align 1
  %1929 = and i32 %1925, 255
  %1930 = tail call i32 @llvm.ctpop.i32(i32 %1929)
  %1931 = trunc i32 %1930 to i8
  %1932 = and i8 %1931, 1
  %1933 = xor i8 %1932, 1
  store i8 %1933, i8* %13, align 1
  %1934 = xor i32 %1925, %1924
  %1935 = lshr i32 %1934, 4
  %1936 = trunc i32 %1935 to i8
  %1937 = and i8 %1936, 1
  store i8 %1937, i8* %14, align 1
  %1938 = icmp eq i32 %1925, 0
  %1939 = zext i1 %1938 to i8
  store i8 %1939, i8* %15, align 1
  %1940 = lshr i32 %1925, 31
  %1941 = trunc i32 %1940 to i8
  store i8 %1941, i8* %16, align 1
  %1942 = lshr i32 %1924, 31
  %1943 = xor i32 %1940, %1942
  %1944 = add nuw nsw i32 %1943, %1942
  %1945 = icmp eq i32 %1944, 2
  %1946 = zext i1 %1945 to i8
  store i8 %1946, i8* %17, align 1
  %1947 = add i64 %1920, -1060
  %1948 = add i64 %1921, 9
  store i64 %1948, i64* %3, align 8
  %1949 = inttoptr i64 %1947 to i32*
  store i32 %1925, i32* %1949, align 4
  %1950 = load i64, i64* %RBP.i, align 8
  %1951 = add i64 %1950, -1056
  %1952 = load i64, i64* %3, align 8
  %1953 = add i64 %1952, 6
  store i64 %1953, i64* %3, align 8
  %1954 = inttoptr i64 %1951 to i32*
  %1955 = load i32, i32* %1954, align 4
  %1956 = add i32 %1955, 1
  %1957 = zext i32 %1956 to i64
  store i64 %1957, i64* %RDX.i1921, align 8
  %1958 = icmp eq i32 %1955, -1
  %1959 = icmp eq i32 %1956, 0
  %1960 = or i1 %1958, %1959
  %1961 = zext i1 %1960 to i8
  store i8 %1961, i8* %12, align 1
  %1962 = and i32 %1956, 255
  %1963 = tail call i32 @llvm.ctpop.i32(i32 %1962)
  %1964 = trunc i32 %1963 to i8
  %1965 = and i8 %1964, 1
  %1966 = xor i8 %1965, 1
  store i8 %1966, i8* %13, align 1
  %1967 = xor i32 %1956, %1955
  %1968 = lshr i32 %1967, 4
  %1969 = trunc i32 %1968 to i8
  %1970 = and i8 %1969, 1
  store i8 %1970, i8* %14, align 1
  %1971 = zext i1 %1959 to i8
  store i8 %1971, i8* %15, align 1
  %1972 = lshr i32 %1956, 31
  %1973 = trunc i32 %1972 to i8
  store i8 %1973, i8* %16, align 1
  %1974 = lshr i32 %1955, 31
  %1975 = xor i32 %1972, %1974
  %1976 = add nuw nsw i32 %1975, %1972
  %1977 = icmp eq i32 %1976, 2
  %1978 = zext i1 %1977 to i8
  store i8 %1978, i8* %17, align 1
  %1979 = add i64 %1950, -28
  %1980 = add i64 %1952, 12
  store i64 %1980, i64* %3, align 8
  %1981 = inttoptr i64 %1979 to i32*
  store i32 %1956, i32* %1981, align 4
  %.pre336 = load i64, i64* %3, align 8
  br label %block_.L_475cd0

block_.L_475cd0:                                  ; preds = %block_.L_475d95, %routine_idivl__ecx.exit2415
  %1982 = phi i64 [ %.pre336, %routine_idivl__ecx.exit2415 ], [ %2418, %block_.L_475d95 ]
  %MEMORY.17 = phi %struct.Memory* [ %1923, %routine_idivl__ecx.exit2415 ], [ %MEMORY.18, %block_.L_475d95 ]
  %1983 = load i64, i64* %RBP.i, align 8
  %1984 = add i64 %1983, -28
  %1985 = add i64 %1982, 3
  store i64 %1985, i64* %3, align 8
  %1986 = inttoptr i64 %1984 to i32*
  %1987 = load i32, i32* %1986, align 4
  %1988 = zext i32 %1987 to i64
  store i64 %1988, i64* %RAX.i1404, align 8
  %1989 = add i64 %1983, -224
  %1990 = add i64 %1982, 9
  store i64 %1990, i64* %3, align 8
  %1991 = inttoptr i64 %1989 to i32*
  %1992 = load i32, i32* %1991, align 4
  %1993 = sub i32 %1987, %1992
  %1994 = icmp ult i32 %1987, %1992
  %1995 = zext i1 %1994 to i8
  store i8 %1995, i8* %12, align 1
  %1996 = and i32 %1993, 255
  %1997 = tail call i32 @llvm.ctpop.i32(i32 %1996)
  %1998 = trunc i32 %1997 to i8
  %1999 = and i8 %1998, 1
  %2000 = xor i8 %1999, 1
  store i8 %2000, i8* %13, align 1
  %2001 = xor i32 %1992, %1987
  %2002 = xor i32 %2001, %1993
  %2003 = lshr i32 %2002, 4
  %2004 = trunc i32 %2003 to i8
  %2005 = and i8 %2004, 1
  store i8 %2005, i8* %14, align 1
  %2006 = icmp eq i32 %1993, 0
  %2007 = zext i1 %2006 to i8
  store i8 %2007, i8* %15, align 1
  %2008 = lshr i32 %1993, 31
  %2009 = trunc i32 %2008 to i8
  store i8 %2009, i8* %16, align 1
  %2010 = lshr i32 %1987, 31
  %2011 = lshr i32 %1992, 31
  %2012 = xor i32 %2011, %2010
  %2013 = xor i32 %2008, %2010
  %2014 = add nuw nsw i32 %2013, %2012
  %2015 = icmp eq i32 %2014, 2
  %2016 = zext i1 %2015 to i8
  store i8 %2016, i8* %17, align 1
  %2017 = icmp ne i8 %2009, 0
  %2018 = xor i1 %2017, %2015
  %.demorgan364 = or i1 %2006, %2018
  %.v457 = select i1 %.demorgan364, i64 15, i64 216
  %2019 = add i64 %1982, %.v457
  store i64 %2019, i64* %3, align 8
  br i1 %.demorgan364, label %block_475cdf, label %block_.L_475da8

block_475cdf:                                     ; preds = %block_.L_475cd0
  %2020 = add i64 %1983, -32
  %2021 = add i64 %2019, 7
  store i64 %2021, i64* %3, align 8
  %2022 = inttoptr i64 %2020 to i32*
  store i32 0, i32* %2022, align 4
  %.pre337 = load i64, i64* %3, align 8
  br label %block_.L_475ce6

block_.L_475ce6:                                  ; preds = %block_.L_475d82, %block_475cdf
  %2023 = phi i64 [ %.pre337, %block_475cdf ], [ %2389, %block_.L_475d82 ]
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.17, %block_475cdf ], [ %MEMORY.21, %block_.L_475d82 ]
  %2024 = load i64, i64* %RBP.i, align 8
  %2025 = add i64 %2024, -32
  %2026 = add i64 %2023, 3
  store i64 %2026, i64* %3, align 8
  %2027 = inttoptr i64 %2025 to i32*
  %2028 = load i32, i32* %2027, align 4
  %2029 = zext i32 %2028 to i64
  store i64 %2029, i64* %RAX.i1404, align 8
  %2030 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %2031 = sub i32 %2028, %2030
  %2032 = icmp ult i32 %2028, %2030
  %2033 = zext i1 %2032 to i8
  store i8 %2033, i8* %12, align 1
  %2034 = and i32 %2031, 255
  %2035 = tail call i32 @llvm.ctpop.i32(i32 %2034)
  %2036 = trunc i32 %2035 to i8
  %2037 = and i8 %2036, 1
  %2038 = xor i8 %2037, 1
  store i8 %2038, i8* %13, align 1
  %2039 = xor i32 %2030, %2028
  %2040 = xor i32 %2039, %2031
  %2041 = lshr i32 %2040, 4
  %2042 = trunc i32 %2041 to i8
  %2043 = and i8 %2042, 1
  store i8 %2043, i8* %14, align 1
  %2044 = icmp eq i32 %2031, 0
  %2045 = zext i1 %2044 to i8
  store i8 %2045, i8* %15, align 1
  %2046 = lshr i32 %2031, 31
  %2047 = trunc i32 %2046 to i8
  store i8 %2047, i8* %16, align 1
  %2048 = lshr i32 %2028, 31
  %2049 = lshr i32 %2030, 31
  %2050 = xor i32 %2049, %2048
  %2051 = xor i32 %2046, %2048
  %2052 = add nuw nsw i32 %2051, %2050
  %2053 = icmp eq i32 %2052, 2
  %2054 = zext i1 %2053 to i8
  store i8 %2054, i8* %17, align 1
  %2055 = icmp ne i8 %2047, 0
  %2056 = xor i1 %2055, %2053
  %.v365 = select i1 %2056, i64 16, i64 175
  %2057 = add i64 %2023, %.v365
  store i64 %2057, i64* %3, align 8
  %2058 = add i64 %2024, -28
  br i1 %2056, label %block_475cf6, label %block_.L_475d95

block_475cf6:                                     ; preds = %block_.L_475ce6
  %2059 = add i64 %2057, 4
  store i64 %2059, i64* %3, align 8
  %2060 = inttoptr i64 %2058 to i32*
  %2061 = load i32, i32* %2060, align 4
  %2062 = mul i32 %2061, 20
  %2063 = add i32 %2062, 21
  %2064 = zext i32 %2063 to i64
  store i64 %2064, i64* %RAX.i1404, align 8
  %2065 = icmp ugt i32 %2062, -22
  %2066 = zext i1 %2065 to i8
  store i8 %2066, i8* %12, align 1
  %2067 = and i32 %2063, 253
  %2068 = tail call i32 @llvm.ctpop.i32(i32 %2067)
  %2069 = trunc i32 %2068 to i8
  %2070 = and i8 %2069, 1
  %2071 = xor i8 %2070, 1
  store i8 %2071, i8* %13, align 1
  %2072 = xor i32 %2062, 16
  %2073 = xor i32 %2072, %2063
  %2074 = lshr i32 %2073, 4
  %2075 = trunc i32 %2074 to i8
  %2076 = and i8 %2075, 1
  store i8 %2076, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %2077 = lshr i32 %2063, 31
  %2078 = trunc i32 %2077 to i8
  store i8 %2078, i8* %16, align 1
  %2079 = lshr i32 %2062, 31
  %2080 = xor i32 %2077, %2079
  %2081 = add nuw nsw i32 %2080, %2077
  %2082 = icmp eq i32 %2081, 2
  %2083 = zext i1 %2082 to i8
  store i8 %2083, i8* %17, align 1
  %2084 = add i64 %2057, 10
  store i64 %2084, i64* %3, align 8
  %2085 = load i32, i32* %2027, align 4
  %2086 = add i32 %2085, %2063
  %2087 = zext i32 %2086 to i64
  store i64 %2087, i64* %RAX.i1404, align 8
  %2088 = icmp ult i32 %2086, %2063
  %2089 = icmp ult i32 %2086, %2085
  %2090 = or i1 %2088, %2089
  %2091 = zext i1 %2090 to i8
  store i8 %2091, i8* %12, align 1
  %2092 = and i32 %2086, 255
  %2093 = tail call i32 @llvm.ctpop.i32(i32 %2092)
  %2094 = trunc i32 %2093 to i8
  %2095 = and i8 %2094, 1
  %2096 = xor i8 %2095, 1
  store i8 %2096, i8* %13, align 1
  %2097 = xor i32 %2085, %2063
  %2098 = xor i32 %2097, %2086
  %2099 = lshr i32 %2098, 4
  %2100 = trunc i32 %2099 to i8
  %2101 = and i8 %2100, 1
  store i8 %2101, i8* %14, align 1
  %2102 = icmp eq i32 %2086, 0
  %2103 = zext i1 %2102 to i8
  store i8 %2103, i8* %15, align 1
  %2104 = lshr i32 %2086, 31
  %2105 = trunc i32 %2104 to i8
  store i8 %2105, i8* %16, align 1
  %2106 = lshr i32 %2085, 31
  %2107 = xor i32 %2104, %2077
  %2108 = xor i32 %2104, %2106
  %2109 = add nuw nsw i32 %2107, %2108
  %2110 = icmp eq i32 %2109, 2
  %2111 = zext i1 %2110 to i8
  store i8 %2111, i8* %17, align 1
  %2112 = sext i32 %2086 to i64
  store i64 %2112, i64* %RCX.i1715, align 8
  %2113 = add nsw i64 %2112, -1040
  %2114 = add i64 %2113, %2024
  %2115 = add i64 %2057, 21
  store i64 %2115, i64* %3, align 8
  %2116 = inttoptr i64 %2114 to i8*
  %2117 = load i8, i8* %2116, align 1
  store i8 0, i8* %12, align 1
  %2118 = zext i8 %2117 to i32
  %2119 = tail call i32 @llvm.ctpop.i32(i32 %2118)
  %2120 = trunc i32 %2119 to i8
  %2121 = and i8 %2120, 1
  %2122 = xor i8 %2121, 1
  store i8 %2122, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %2123 = icmp eq i8 %2117, 0
  %2124 = zext i1 %2123 to i8
  store i8 %2124, i8* %15, align 1
  %2125 = lshr i8 %2117, 7
  store i8 %2125, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v459 = select i1 %2123, i64 140, i64 27
  %2126 = add i64 %2057, %.v459
  store i64 %2126, i64* %3, align 8
  br i1 %2123, label %block_.L_475d82, label %block_475d11

block_475d11:                                     ; preds = %block_475cf6
  %2127 = load i64, i64* %RBP.i, align 8
  %2128 = add i64 %2127, -32
  %2129 = add i64 %2126, 3
  store i64 %2129, i64* %3, align 8
  %2130 = inttoptr i64 %2128 to i32*
  %2131 = load i32, i32* %2130, align 4
  %2132 = zext i32 %2131 to i64
  store i64 %2132, i64* %RAX.i1404, align 8
  %2133 = add i64 %2127, -1060
  %2134 = add i64 %2126, 9
  store i64 %2134, i64* %3, align 8
  %2135 = inttoptr i64 %2133 to i32*
  %2136 = load i32, i32* %2135, align 4
  %2137 = sub i32 %2131, %2136
  %2138 = zext i32 %2137 to i64
  store i64 %2138, i64* %RAX.i1404, align 8
  %2139 = icmp ult i32 %2131, %2136
  %2140 = zext i1 %2139 to i8
  store i8 %2140, i8* %12, align 1
  %2141 = and i32 %2137, 255
  %2142 = tail call i32 @llvm.ctpop.i32(i32 %2141)
  %2143 = trunc i32 %2142 to i8
  %2144 = and i8 %2143, 1
  %2145 = xor i8 %2144, 1
  store i8 %2145, i8* %13, align 1
  %2146 = xor i32 %2136, %2131
  %2147 = xor i32 %2146, %2137
  %2148 = lshr i32 %2147, 4
  %2149 = trunc i32 %2148 to i8
  %2150 = and i8 %2149, 1
  store i8 %2150, i8* %14, align 1
  %2151 = icmp eq i32 %2137, 0
  %2152 = zext i1 %2151 to i8
  store i8 %2152, i8* %15, align 1
  %2153 = lshr i32 %2137, 31
  %2154 = trunc i32 %2153 to i8
  store i8 %2154, i8* %16, align 1
  %2155 = lshr i32 %2131, 31
  %2156 = lshr i32 %2136, 31
  %2157 = xor i32 %2156, %2155
  %2158 = xor i32 %2153, %2155
  %2159 = add nuw nsw i32 %2158, %2157
  %2160 = icmp eq i32 %2159, 2
  %2161 = zext i1 %2160 to i8
  store i8 %2161, i8* %17, align 1
  %2162 = load <2 x i32>, <2 x i32>* %1618, align 1
  %2163 = load <2 x i32>, <2 x i32>* %1619, align 1
  %2164 = sitofp i32 %2137 to float
  store float %2164, float* %1620, align 1
  %2165 = extractelement <2 x i32> %2162, i32 1
  store i32 %2165, i32* %1613, align 1
  %2166 = extractelement <2 x i32> %2163, i32 0
  store i32 %2166, i32* %1614, align 1
  %2167 = extractelement <2 x i32> %2163, i32 1
  store i32 %2167, i32* %1616, align 1
  %2168 = add i64 %2127, -28
  %2169 = add i64 %2126, 16
  store i64 %2169, i64* %3, align 8
  %2170 = inttoptr i64 %2168 to i32*
  %2171 = load i32, i32* %2170, align 4
  %2172 = zext i32 %2171 to i64
  store i64 %2172, i64* %RAX.i1404, align 8
  %2173 = add i64 %2127, -1056
  %2174 = add i64 %2126, 22
  store i64 %2174, i64* %3, align 8
  %2175 = inttoptr i64 %2173 to i32*
  %2176 = load i32, i32* %2175, align 4
  %2177 = sub i32 %2171, %2176
  %2178 = zext i32 %2177 to i64
  store i64 %2178, i64* %RAX.i1404, align 8
  %2179 = icmp ult i32 %2171, %2176
  %2180 = zext i1 %2179 to i8
  store i8 %2180, i8* %12, align 1
  %2181 = and i32 %2177, 255
  %2182 = tail call i32 @llvm.ctpop.i32(i32 %2181)
  %2183 = trunc i32 %2182 to i8
  %2184 = and i8 %2183, 1
  %2185 = xor i8 %2184, 1
  store i8 %2185, i8* %13, align 1
  %2186 = xor i32 %2176, %2171
  %2187 = xor i32 %2186, %2177
  %2188 = lshr i32 %2187, 4
  %2189 = trunc i32 %2188 to i8
  %2190 = and i8 %2189, 1
  store i8 %2190, i8* %14, align 1
  %2191 = icmp eq i32 %2177, 0
  %2192 = zext i1 %2191 to i8
  store i8 %2192, i8* %15, align 1
  %2193 = lshr i32 %2177, 31
  %2194 = trunc i32 %2193 to i8
  store i8 %2194, i8* %16, align 1
  %2195 = lshr i32 %2171, 31
  %2196 = lshr i32 %2176, 31
  %2197 = xor i32 %2196, %2195
  %2198 = xor i32 %2193, %2195
  %2199 = add nuw nsw i32 %2198, %2197
  %2200 = icmp eq i32 %2199, 2
  %2201 = zext i1 %2200 to i8
  store i8 %2201, i8* %17, align 1
  %2202 = load <2 x i32>, <2 x i32>* %1623, align 1
  %2203 = load <2 x i32>, <2 x i32>* %1625, align 1
  %2204 = sitofp i32 %2177 to float
  store float %2204, float* %1626, align 1
  %2205 = extractelement <2 x i32> %2202, i32 1
  store i32 %2205, i32* %1628, align 1
  %2206 = extractelement <2 x i32> %2203, i32 0
  store i32 %2206, i32* %1629, align 1
  %2207 = extractelement <2 x i32> %2203, i32 1
  store i32 %2207, i32* %1631, align 1
  %2208 = load <2 x float>, <2 x float>* %1617, align 1
  %2209 = load <2 x i32>, <2 x i32>* %1619, align 1
  %2210 = load <2 x float>, <2 x float>* %1632, align 1
  %2211 = extractelement <2 x float> %2208, i32 0
  %2212 = extractelement <2 x float> %2210, i32 0
  %2213 = fdiv float %2211, %2212
  store float %2213, float* %1620, align 1
  %2214 = bitcast <2 x float> %2208 to <2 x i32>
  %2215 = extractelement <2 x i32> %2214, i32 1
  store i32 %2215, i32* %1613, align 1
  %2216 = extractelement <2 x i32> %2209, i32 0
  store i32 %2216, i32* %1614, align 1
  %2217 = extractelement <2 x i32> %2209, i32 1
  store i32 %2217, i32* %1616, align 1
  %2218 = load i64, i64* %RBP.i, align 8
  %2219 = add i64 %2218, -1064
  %2220 = add i64 %2126, 38
  store i64 %2220, i64* %3, align 8
  %2221 = load <2 x float>, <2 x float>* %1617, align 1
  %2222 = extractelement <2 x float> %2221, i32 0
  %2223 = inttoptr i64 %2219 to float*
  store float %2222, float* %2223, align 4
  %2224 = load i64, i64* %RBP.i, align 8
  %2225 = add i64 %2224, -1048
  %2226 = load i64, i64* %3, align 8
  %2227 = add i64 %2226, 7
  store i64 %2227, i64* %3, align 8
  %2228 = inttoptr i64 %2225 to i32*
  %2229 = load i32, i32* %2228, align 4
  store i8 0, i8* %12, align 1
  %2230 = and i32 %2229, 255
  %2231 = tail call i32 @llvm.ctpop.i32(i32 %2230)
  %2232 = trunc i32 %2231 to i8
  %2233 = and i8 %2232, 1
  %2234 = xor i8 %2233, 1
  store i8 %2234, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %2235 = icmp eq i32 %2229, 0
  %2236 = zext i1 %2235 to i8
  store i8 %2236, i8* %15, align 1
  %2237 = lshr i32 %2229, 31
  %2238 = trunc i32 %2237 to i8
  store i8 %2238, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v460 = select i1 %2235, i64 38, i64 13
  %2239 = add i64 %2226, %.v460
  store i64 %2239, i64* %3, align 8
  br i1 %2235, label %block_.L_475d5d, label %block_475d44

block_475d44:                                     ; preds = %block_475d11
  %2240 = add i64 %2224, -1064
  %2241 = add i64 %2239, 8
  store i64 %2241, i64* %3, align 8
  %2242 = inttoptr i64 %2240 to i32*
  %2243 = load i32, i32* %2242, align 4
  store i32 %2243, i32* %1611, align 1
  store float 0.000000e+00, float* %1633, align 1
  store float 0.000000e+00, float* %1634, align 1
  store float 0.000000e+00, float* %1635, align 1
  %2244 = add i64 %2224, -1052
  %2245 = add i64 %2239, 16
  store i64 %2245, i64* %3, align 8
  %2246 = inttoptr i64 %2244 to i32*
  %2247 = load i32, i32* %2246, align 4
  store i32 %2247, i32* %1636, align 1
  store float 0.000000e+00, float* %1637, align 1
  store float 0.000000e+00, float* %1638, align 1
  store float 0.000000e+00, float* %1639, align 1
  %2248 = add i64 %2239, 19
  store i64 %2248, i64* %3, align 8
  %2249 = load <2 x float>, <2 x float>* %1632, align 1
  %2250 = extractelement <2 x float> %2249, i32 0
  %2251 = load <2 x float>, <2 x float>* %1617, align 1
  %2252 = extractelement <2 x float> %2251, i32 0
  %2253 = fcmp uno float %2250, %2252
  br i1 %2253, label %2254, label %2264

; <label>:2254:                                   ; preds = %block_475d44
  %2255 = fadd float %2250, %2252
  %2256 = bitcast float %2255 to i32
  %2257 = and i32 %2256, 2143289344
  %2258 = icmp eq i32 %2257, 2139095040
  %2259 = and i32 %2256, 4194303
  %2260 = icmp ne i32 %2259, 0
  %2261 = and i1 %2258, %2260
  br i1 %2261, label %2262, label %2270

; <label>:2262:                                   ; preds = %2254
  %2263 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2248, %struct.Memory* %MEMORY.18)
  %.pre338 = load i64, i64* %3, align 8
  %.pre339 = load i8, i8* %12, align 1
  %.pre340 = load i8, i8* %15, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit

; <label>:2264:                                   ; preds = %block_475d44
  %2265 = fcmp ogt float %2250, %2252
  br i1 %2265, label %2270, label %2266

; <label>:2266:                                   ; preds = %2264
  %2267 = fcmp olt float %2250, %2252
  br i1 %2267, label %2270, label %2268

; <label>:2268:                                   ; preds = %2266
  %2269 = fcmp oeq float %2250, %2252
  br i1 %2269, label %2270, label %2274

; <label>:2270:                                   ; preds = %2268, %2266, %2264, %2254
  %2271 = phi i8 [ 0, %2264 ], [ 0, %2266 ], [ 1, %2268 ], [ 1, %2254 ]
  %2272 = phi i8 [ 0, %2264 ], [ 0, %2266 ], [ 0, %2268 ], [ 1, %2254 ]
  %2273 = phi i8 [ 0, %2264 ], [ 1, %2266 ], [ 0, %2268 ], [ 1, %2254 ]
  store i8 %2271, i8* %15, align 1
  store i8 %2272, i8* %13, align 1
  store i8 %2273, i8* %12, align 1
  br label %2274

; <label>:2274:                                   ; preds = %2270, %2268
  %2275 = phi i8 [ %2271, %2270 ], [ %2236, %2268 ]
  %2276 = phi i8 [ %2273, %2270 ], [ 0, %2268 ]
  store i8 0, i8* %17, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %14, align 1
  br label %routine_ucomiss__xmm0___xmm1.exit

routine_ucomiss__xmm0___xmm1.exit:                ; preds = %2274, %2262
  %2277 = phi i8 [ %.pre340, %2262 ], [ %2275, %2274 ]
  %2278 = phi i8 [ %.pre339, %2262 ], [ %2276, %2274 ]
  %2279 = phi i64 [ %.pre338, %2262 ], [ %2248, %2274 ]
  %2280 = phi %struct.Memory* [ %2263, %2262 ], [ %MEMORY.18, %2274 ]
  %2281 = or i8 %2277, %2278
  %2282 = icmp ne i8 %2281, 0
  %.v461 = select i1 %2282, i64 38, i64 6
  %2283 = add i64 %2279, %.v461
  store i64 %2283, i64* %3, align 8
  br i1 %2282, label %block_.L_475d7d, label %routine_ucomiss__xmm0___xmm1.exit.block_.L_475d5d_crit_edge

routine_ucomiss__xmm0___xmm1.exit.block_.L_475d5d_crit_edge: ; preds = %routine_ucomiss__xmm0___xmm1.exit
  %.pre341 = load i64, i64* %RBP.i, align 8
  br label %block_.L_475d5d

block_.L_475d5d:                                  ; preds = %routine_ucomiss__xmm0___xmm1.exit.block_.L_475d5d_crit_edge, %block_475d11
  %2284 = phi i64 [ %2239, %block_475d11 ], [ %2283, %routine_ucomiss__xmm0___xmm1.exit.block_.L_475d5d_crit_edge ]
  %2285 = phi i64 [ %2224, %block_475d11 ], [ %.pre341, %routine_ucomiss__xmm0___xmm1.exit.block_.L_475d5d_crit_edge ]
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.18, %block_475d11 ], [ %2280, %routine_ucomiss__xmm0___xmm1.exit.block_.L_475d5d_crit_edge ]
  %2286 = add i64 %2285, -28
  %2287 = add i64 %2284, 4
  store i64 %2287, i64* %3, align 8
  %2288 = inttoptr i64 %2286 to i32*
  %2289 = load i32, i32* %2288, align 4
  %2290 = mul i32 %2289, 20
  %2291 = add i32 %2290, 21
  %2292 = zext i32 %2291 to i64
  store i64 %2292, i64* %RAX.i1404, align 8
  %2293 = icmp ugt i32 %2290, -22
  %2294 = zext i1 %2293 to i8
  store i8 %2294, i8* %12, align 1
  %2295 = and i32 %2291, 253
  %2296 = tail call i32 @llvm.ctpop.i32(i32 %2295)
  %2297 = trunc i32 %2296 to i8
  %2298 = and i8 %2297, 1
  %2299 = xor i8 %2298, 1
  store i8 %2299, i8* %13, align 1
  %2300 = xor i32 %2290, 16
  %2301 = xor i32 %2300, %2291
  %2302 = lshr i32 %2301, 4
  %2303 = trunc i32 %2302 to i8
  %2304 = and i8 %2303, 1
  store i8 %2304, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %2305 = lshr i32 %2291, 31
  %2306 = trunc i32 %2305 to i8
  store i8 %2306, i8* %16, align 1
  %2307 = lshr i32 %2290, 31
  %2308 = xor i32 %2305, %2307
  %2309 = add nuw nsw i32 %2308, %2305
  %2310 = icmp eq i32 %2309, 2
  %2311 = zext i1 %2310 to i8
  store i8 %2311, i8* %17, align 1
  %2312 = add i64 %2285, -32
  %2313 = add i64 %2284, 10
  store i64 %2313, i64* %3, align 8
  %2314 = inttoptr i64 %2312 to i32*
  %2315 = load i32, i32* %2314, align 4
  %2316 = add i32 %2315, %2291
  %2317 = zext i32 %2316 to i64
  store i64 %2317, i64* %RAX.i1404, align 8
  %2318 = icmp ult i32 %2316, %2291
  %2319 = icmp ult i32 %2316, %2315
  %2320 = or i1 %2318, %2319
  %2321 = zext i1 %2320 to i8
  store i8 %2321, i8* %12, align 1
  %2322 = and i32 %2316, 255
  %2323 = tail call i32 @llvm.ctpop.i32(i32 %2322)
  %2324 = trunc i32 %2323 to i8
  %2325 = and i8 %2324, 1
  %2326 = xor i8 %2325, 1
  store i8 %2326, i8* %13, align 1
  %2327 = xor i32 %2315, %2291
  %2328 = xor i32 %2327, %2316
  %2329 = lshr i32 %2328, 4
  %2330 = trunc i32 %2329 to i8
  %2331 = and i8 %2330, 1
  store i8 %2331, i8* %14, align 1
  %2332 = icmp eq i32 %2316, 0
  %2333 = zext i1 %2332 to i8
  store i8 %2333, i8* %15, align 1
  %2334 = lshr i32 %2316, 31
  %2335 = trunc i32 %2334 to i8
  store i8 %2335, i8* %16, align 1
  %2336 = lshr i32 %2315, 31
  %2337 = xor i32 %2334, %2305
  %2338 = xor i32 %2334, %2336
  %2339 = add nuw nsw i32 %2337, %2338
  %2340 = icmp eq i32 %2339, 2
  %2341 = zext i1 %2340 to i8
  store i8 %2341, i8* %17, align 1
  %2342 = add i64 %2285, -1048
  %2343 = add i64 %2284, 16
  store i64 %2343, i64* %3, align 8
  %2344 = inttoptr i64 %2342 to i32*
  store i32 %2316, i32* %2344, align 4
  %2345 = load i64, i64* %RBP.i, align 8
  %2346 = add i64 %2345, -1064
  %2347 = load i64, i64* %3, align 8
  %2348 = add i64 %2347, 8
  store i64 %2348, i64* %3, align 8
  %2349 = inttoptr i64 %2346 to i32*
  %2350 = load i32, i32* %2349, align 4
  store i32 %2350, i32* %1611, align 1
  store float 0.000000e+00, float* %1633, align 1
  store float 0.000000e+00, float* %1634, align 1
  store float 0.000000e+00, float* %1635, align 1
  %2351 = add i64 %2345, -1052
  %2352 = add i64 %2347, 16
  store i64 %2352, i64* %3, align 8
  %2353 = load <2 x float>, <2 x float>* %1617, align 1
  %2354 = extractelement <2 x float> %2353, i32 0
  %2355 = inttoptr i64 %2351 to float*
  store float %2354, float* %2355, align 4
  %.pre342 = load i64, i64* %3, align 8
  br label %block_.L_475d7d

block_.L_475d7d:                                  ; preds = %block_.L_475d5d, %routine_ucomiss__xmm0___xmm1.exit
  %2356 = phi i64 [ %.pre342, %block_.L_475d5d ], [ %2283, %routine_ucomiss__xmm0___xmm1.exit ]
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.19, %block_.L_475d5d ], [ %2280, %routine_ucomiss__xmm0___xmm1.exit ]
  %2357 = add i64 %2356, 5
  store i64 %2357, i64* %3, align 8
  br label %block_.L_475d82

block_.L_475d82:                                  ; preds = %block_.L_475d7d, %block_475cf6
  %2358 = phi i64 [ %2126, %block_475cf6 ], [ %2357, %block_.L_475d7d ]
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.18, %block_475cf6 ], [ %MEMORY.20, %block_.L_475d7d ]
  %2359 = load i64, i64* %RBP.i, align 8
  %2360 = add i64 %2359, -32
  %2361 = add i64 %2358, 8
  store i64 %2361, i64* %3, align 8
  %2362 = inttoptr i64 %2360 to i32*
  %2363 = load i32, i32* %2362, align 4
  %2364 = add i32 %2363, 1
  %2365 = zext i32 %2364 to i64
  store i64 %2365, i64* %RAX.i1404, align 8
  %2366 = icmp eq i32 %2363, -1
  %2367 = icmp eq i32 %2364, 0
  %2368 = or i1 %2366, %2367
  %2369 = zext i1 %2368 to i8
  store i8 %2369, i8* %12, align 1
  %2370 = and i32 %2364, 255
  %2371 = tail call i32 @llvm.ctpop.i32(i32 %2370)
  %2372 = trunc i32 %2371 to i8
  %2373 = and i8 %2372, 1
  %2374 = xor i8 %2373, 1
  store i8 %2374, i8* %13, align 1
  %2375 = xor i32 %2364, %2363
  %2376 = lshr i32 %2375, 4
  %2377 = trunc i32 %2376 to i8
  %2378 = and i8 %2377, 1
  store i8 %2378, i8* %14, align 1
  %2379 = zext i1 %2367 to i8
  store i8 %2379, i8* %15, align 1
  %2380 = lshr i32 %2364, 31
  %2381 = trunc i32 %2380 to i8
  store i8 %2381, i8* %16, align 1
  %2382 = lshr i32 %2363, 31
  %2383 = xor i32 %2380, %2382
  %2384 = add nuw nsw i32 %2383, %2380
  %2385 = icmp eq i32 %2384, 2
  %2386 = zext i1 %2385 to i8
  store i8 %2386, i8* %17, align 1
  %2387 = add i64 %2358, 14
  store i64 %2387, i64* %3, align 8
  store i32 %2364, i32* %2362, align 4
  %2388 = load i64, i64* %3, align 8
  %2389 = add i64 %2388, -170
  store i64 %2389, i64* %3, align 8
  br label %block_.L_475ce6

block_.L_475d95:                                  ; preds = %block_.L_475ce6
  %2390 = add i64 %2057, 8
  store i64 %2390, i64* %3, align 8
  %2391 = inttoptr i64 %2058 to i32*
  %2392 = load i32, i32* %2391, align 4
  %2393 = add i32 %2392, 1
  %2394 = zext i32 %2393 to i64
  store i64 %2394, i64* %RAX.i1404, align 8
  %2395 = icmp eq i32 %2392, -1
  %2396 = icmp eq i32 %2393, 0
  %2397 = or i1 %2395, %2396
  %2398 = zext i1 %2397 to i8
  store i8 %2398, i8* %12, align 1
  %2399 = and i32 %2393, 255
  %2400 = tail call i32 @llvm.ctpop.i32(i32 %2399)
  %2401 = trunc i32 %2400 to i8
  %2402 = and i8 %2401, 1
  %2403 = xor i8 %2402, 1
  store i8 %2403, i8* %13, align 1
  %2404 = xor i32 %2393, %2392
  %2405 = lshr i32 %2404, 4
  %2406 = trunc i32 %2405 to i8
  %2407 = and i8 %2406, 1
  store i8 %2407, i8* %14, align 1
  %2408 = zext i1 %2396 to i8
  store i8 %2408, i8* %15, align 1
  %2409 = lshr i32 %2393, 31
  %2410 = trunc i32 %2409 to i8
  store i8 %2410, i8* %16, align 1
  %2411 = lshr i32 %2392, 31
  %2412 = xor i32 %2409, %2411
  %2413 = add nuw nsw i32 %2412, %2409
  %2414 = icmp eq i32 %2413, 2
  %2415 = zext i1 %2414 to i8
  store i8 %2415, i8* %17, align 1
  %2416 = add i64 %2057, 14
  store i64 %2416, i64* %3, align 8
  store i32 %2393, i32* %2391, align 4
  %2417 = load i64, i64* %3, align 8
  %2418 = add i64 %2417, -211
  store i64 %2418, i64* %3, align 8
  br label %block_.L_475cd0

block_.L_475da8:                                  ; preds = %block_.L_475cd0
  %2419 = add i64 %1983, -1048
  %2420 = add i64 %2019, 7
  store i64 %2420, i64* %3, align 8
  %2421 = inttoptr i64 %2419 to i32*
  %2422 = load i32, i32* %2421, align 4
  %2423 = sext i32 %2422 to i64
  store i64 %2423, i64* %RAX.i1404, align 8
  %2424 = add nsw i64 %2423, 12099168
  %2425 = add i64 %2019, 15
  store i64 %2425, i64* %3, align 8
  %2426 = inttoptr i64 %2424 to i8*
  %2427 = load i8, i8* %2426, align 1
  %2428 = zext i8 %2427 to i64
  store i64 %2428, i64* %RCX.i1715, align 8
  %2429 = zext i8 %2427 to i32
  %2430 = add nsw i32 %2429, -3
  %2431 = icmp ult i8 %2427, 3
  %2432 = zext i1 %2431 to i8
  store i8 %2432, i8* %12, align 1
  %2433 = and i32 %2430, 255
  %2434 = tail call i32 @llvm.ctpop.i32(i32 %2433)
  %2435 = trunc i32 %2434 to i8
  %2436 = and i8 %2435, 1
  %2437 = xor i8 %2436, 1
  store i8 %2437, i8* %13, align 1
  %2438 = xor i32 %2430, %2429
  %2439 = lshr i32 %2438, 4
  %2440 = trunc i32 %2439 to i8
  %2441 = and i8 %2440, 1
  store i8 %2441, i8* %14, align 1
  %2442 = icmp eq i32 %2430, 0
  %2443 = zext i1 %2442 to i8
  store i8 %2443, i8* %15, align 1
  %2444 = lshr i32 %2430, 31
  %2445 = trunc i32 %2444 to i8
  store i8 %2445, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v458 = select i1 %2442, i64 29, i64 24
  %2446 = add i64 %2019, %.v458
  store i64 %2446, i64* %3, align 8
  br i1 %2442, label %block_.L_475dc5, label %block_475dc0

block_475dc0:                                     ; preds = %block_.L_475da8
  %2447 = add i64 %2446, 45
  store i64 %2447, i64* %3, align 8
  br label %block_.L_475ded

block_.L_475dc5:                                  ; preds = %block_.L_475da8
  store i64 ptrtoint (%G__0x58192c_type* @G__0x58192c to i64), i64* %RDI.i2173, align 8
  store i64 175, i64* %RSI.i2336, align 8
  store i64 ptrtoint (%G__0x5819f6_type* @G__0x5819f6 to i64), i64* %RDX.i1921, align 8
  store i64 4294967295, i64* %RAX.i1404, align 8
  store i64 4294967295, i64* %RCX.i1715, align 8
  store i64 4294967295, i64* %20, align 8
  %2448 = add i64 %2446, -146741
  %2449 = add i64 %2446, 40
  %2450 = load i64, i64* %6, align 8
  %2451 = add i64 %2450, -8
  %2452 = inttoptr i64 %2451 to i64*
  store i64 %2449, i64* %2452, align 8
  store i64 %2451, i64* %6, align 8
  store i64 %2448, i64* %3, align 8
  %call2_475de8 = tail call %struct.Memory* @sub_452090.abortgo(%struct.State* nonnull %0, i64 %2448, %struct.Memory* %MEMORY.17)
  %.pre343 = load i64, i64* %RBP.i, align 8
  %.pre344 = load i64, i64* %3, align 8
  br label %block_.L_475ded

block_.L_475ded:                                  ; preds = %block_.L_475dc5, %block_475dc0
  %2453 = phi i64 [ %.pre344, %block_.L_475dc5 ], [ %2447, %block_475dc0 ]
  %2454 = phi i64 [ %.pre343, %block_.L_475dc5 ], [ %1983, %block_475dc0 ]
  %MEMORY.22 = phi %struct.Memory* [ %call2_475de8, %block_.L_475dc5 ], [ %MEMORY.17, %block_475dc0 ]
  %2455 = add i64 %2454, -1048
  %2456 = add i64 %2453, 6
  store i64 %2456, i64* %3, align 8
  %2457 = inttoptr i64 %2455 to i32*
  %2458 = load i32, i32* %2457, align 4
  %2459 = zext i32 %2458 to i64
  store i64 %2459, i64* %RAX.i1404, align 8
  %2460 = add i64 %2454, -212
  %2461 = add i64 %2453, 13
  store i64 %2461, i64* %3, align 8
  %2462 = inttoptr i64 %2460 to i32*
  %2463 = load i32, i32* %2462, align 4
  %2464 = sext i32 %2463 to i64
  store i64 %2464, i64* %RCX.i1715, align 8
  %2465 = shl nsw i64 %2464, 2
  %2466 = add i64 %2454, -128
  %2467 = add i64 %2466, %2465
  %2468 = add i64 %2453, 17
  store i64 %2468, i64* %3, align 8
  %2469 = inttoptr i64 %2467 to i32*
  store i32 %2458, i32* %2469, align 4
  %2470 = load i64, i64* %RBP.i, align 8
  %2471 = add i64 %2470, -212
  %2472 = load i64, i64* %3, align 8
  %2473 = add i64 %2472, 6
  store i64 %2473, i64* %3, align 8
  %2474 = inttoptr i64 %2471 to i32*
  %2475 = load i32, i32* %2474, align 4
  %2476 = add i32 %2475, 1
  %2477 = zext i32 %2476 to i64
  store i64 %2477, i64* %RAX.i1404, align 8
  %2478 = icmp eq i32 %2475, -1
  %2479 = icmp eq i32 %2476, 0
  %2480 = or i1 %2478, %2479
  %2481 = zext i1 %2480 to i8
  store i8 %2481, i8* %12, align 1
  %2482 = and i32 %2476, 255
  %2483 = tail call i32 @llvm.ctpop.i32(i32 %2482)
  %2484 = trunc i32 %2483 to i8
  %2485 = and i8 %2484, 1
  %2486 = xor i8 %2485, 1
  store i8 %2486, i8* %13, align 1
  %2487 = xor i32 %2476, %2475
  %2488 = lshr i32 %2487, 4
  %2489 = trunc i32 %2488 to i8
  %2490 = and i8 %2489, 1
  store i8 %2490, i8* %14, align 1
  %2491 = zext i1 %2479 to i8
  store i8 %2491, i8* %15, align 1
  %2492 = lshr i32 %2476, 31
  %2493 = trunc i32 %2492 to i8
  store i8 %2493, i8* %16, align 1
  %2494 = lshr i32 %2475, 31
  %2495 = xor i32 %2492, %2494
  %2496 = add nuw nsw i32 %2495, %2492
  %2497 = icmp eq i32 %2496, 2
  %2498 = zext i1 %2497 to i8
  store i8 %2498, i8* %17, align 1
  %2499 = add i64 %2472, 15
  store i64 %2499, i64* %3, align 8
  store i32 %2476, i32* %2474, align 4
  %2500 = load i64, i64* %3, align 8
  %2501 = add i64 %2500, -478
  store i64 %2501, i64* %3, align 8
  br label %block_.L_475c2f

block_.L_475e12:                                  ; preds = %routine_idivl__ecx.exit2482
  %2502 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %2503 = add i32 %2502, -1
  %2504 = zext i32 %2503 to i64
  store i64 %2504, i64* %RAX.i1404, align 8
  %2505 = icmp eq i32 %2502, 0
  %2506 = zext i1 %2505 to i8
  store i8 %2506, i8* %12, align 1
  %2507 = and i32 %2503, 255
  %2508 = tail call i32 @llvm.ctpop.i32(i32 %2507)
  %2509 = trunc i32 %2508 to i8
  %2510 = and i8 %2509, 1
  %2511 = xor i8 %2510, 1
  store i8 %2511, i8* %13, align 1
  %2512 = xor i32 %2503, %2502
  %2513 = lshr i32 %2512, 4
  %2514 = trunc i32 %2513 to i8
  %2515 = and i8 %2514, 1
  store i8 %2515, i8* %14, align 1
  %2516 = icmp eq i32 %2503, 0
  %2517 = zext i1 %2516 to i8
  store i8 %2517, i8* %15, align 1
  %2518 = lshr i32 %2503, 31
  %2519 = trunc i32 %2518 to i8
  store i8 %2519, i8* %16, align 1
  %2520 = lshr i32 %2502, 31
  %2521 = xor i32 %2518, %2520
  %2522 = add nuw nsw i32 %2521, %2520
  %2523 = icmp eq i32 %2522, 2
  %2524 = zext i1 %2523 to i8
  store i8 %2524, i8* %17, align 1
  %2525 = add i64 %1705, -40
  %2526 = add i64 %1761, 13
  store i64 %2526, i64* %3, align 8
  %2527 = inttoptr i64 %2525 to i32*
  store i32 %2503, i32* %2527, align 4
  %.pre232 = load i64, i64* %3, align 8
  br label %block_.L_475e1f

block_.L_475e1f:                                  ; preds = %block_.L_475e5f, %block_.L_475e12
  %2528 = phi i64 [ %2706, %block_.L_475e5f ], [ %.pre232, %block_.L_475e12 ]
  %2529 = load i64, i64* %RBP.i, align 8
  %2530 = add i64 %2529, -40
  %2531 = add i64 %2528, 4
  store i64 %2531, i64* %3, align 8
  %2532 = inttoptr i64 %2530 to i32*
  %2533 = load i32, i32* %2532, align 4
  store i8 0, i8* %12, align 1
  %2534 = and i32 %2533, 255
  %2535 = tail call i32 @llvm.ctpop.i32(i32 %2534)
  %2536 = trunc i32 %2535 to i8
  %2537 = and i8 %2536, 1
  %2538 = xor i8 %2537, 1
  store i8 %2538, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %2539 = icmp eq i32 %2533, 0
  %2540 = zext i1 %2539 to i8
  store i8 %2540, i8* %15, align 1
  %2541 = lshr i32 %2533, 31
  %2542 = trunc i32 %2541 to i8
  store i8 %2542, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %2543 = icmp ne i8 %2542, 0
  %.v129 = select i1 %2543, i64 79, i64 6
  %2544 = add i64 %2531, %.v129
  store i64 %2544, i64* %3, align 8
  br i1 %2543, label %block_.L_475e72.loopexit, label %block_475e29

block_475e29:                                     ; preds = %block_.L_475e1f
  %2545 = add i64 %2529, -220
  %2546 = add i64 %2544, 7
  store i64 %2546, i64* %3, align 8
  %2547 = inttoptr i64 %2545 to i32*
  %2548 = load i32, i32* %2547, align 4
  %2549 = mul i32 %2548, 20
  %2550 = add i32 %2549, 21
  %2551 = zext i32 %2550 to i64
  store i64 %2551, i64* %RAX.i1404, align 8
  %2552 = icmp ugt i32 %2549, -22
  %2553 = zext i1 %2552 to i8
  store i8 %2553, i8* %12, align 1
  %2554 = and i32 %2550, 253
  %2555 = tail call i32 @llvm.ctpop.i32(i32 %2554)
  %2556 = trunc i32 %2555 to i8
  %2557 = and i8 %2556, 1
  %2558 = xor i8 %2557, 1
  store i8 %2558, i8* %13, align 1
  %2559 = xor i32 %2549, 16
  %2560 = xor i32 %2559, %2550
  %2561 = lshr i32 %2560, 4
  %2562 = trunc i32 %2561 to i8
  %2563 = and i8 %2562, 1
  store i8 %2563, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %2564 = lshr i32 %2550, 31
  %2565 = trunc i32 %2564 to i8
  store i8 %2565, i8* %16, align 1
  %2566 = lshr i32 %2549, 31
  %2567 = xor i32 %2564, %2566
  %2568 = add nuw nsw i32 %2567, %2564
  %2569 = icmp eq i32 %2568, 2
  %2570 = zext i1 %2569 to i8
  store i8 %2570, i8* %17, align 1
  %2571 = add i64 %2544, 13
  store i64 %2571, i64* %3, align 8
  %2572 = load i32, i32* %2532, align 4
  %2573 = add i32 %2572, %2550
  %2574 = zext i32 %2573 to i64
  store i64 %2574, i64* %RAX.i1404, align 8
  %2575 = icmp ult i32 %2573, %2550
  %2576 = icmp ult i32 %2573, %2572
  %2577 = or i1 %2575, %2576
  %2578 = zext i1 %2577 to i8
  store i8 %2578, i8* %12, align 1
  %2579 = and i32 %2573, 255
  %2580 = tail call i32 @llvm.ctpop.i32(i32 %2579)
  %2581 = trunc i32 %2580 to i8
  %2582 = and i8 %2581, 1
  %2583 = xor i8 %2582, 1
  store i8 %2583, i8* %13, align 1
  %2584 = xor i32 %2572, %2550
  %2585 = xor i32 %2584, %2573
  %2586 = lshr i32 %2585, 4
  %2587 = trunc i32 %2586 to i8
  %2588 = and i8 %2587, 1
  store i8 %2588, i8* %14, align 1
  %2589 = icmp eq i32 %2573, 0
  %2590 = zext i1 %2589 to i8
  store i8 %2590, i8* %15, align 1
  %2591 = lshr i32 %2573, 31
  %2592 = trunc i32 %2591 to i8
  store i8 %2592, i8* %16, align 1
  %2593 = lshr i32 %2572, 31
  %2594 = xor i32 %2591, %2564
  %2595 = xor i32 %2591, %2593
  %2596 = add nuw nsw i32 %2594, %2595
  %2597 = icmp eq i32 %2596, 2
  %2598 = zext i1 %2597 to i8
  store i8 %2598, i8* %17, align 1
  %2599 = sext i32 %2573 to i64
  store i64 %2599, i64* %RCX.i1715, align 8
  %2600 = add nsw i64 %2599, -1040
  %2601 = add i64 %2600, %2529
  %2602 = add i64 %2544, 24
  store i64 %2602, i64* %3, align 8
  %2603 = inttoptr i64 %2601 to i8*
  %2604 = load i8, i8* %2603, align 1
  store i8 0, i8* %12, align 1
  %2605 = zext i8 %2604 to i32
  %2606 = tail call i32 @llvm.ctpop.i32(i32 %2605)
  %2607 = trunc i32 %2606 to i8
  %2608 = and i8 %2607, 1
  %2609 = xor i8 %2608, 1
  store i8 %2609, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %2610 = icmp eq i8 %2604, 0
  %2611 = zext i1 %2610 to i8
  store i8 %2611, i8* %15, align 1
  %2612 = lshr i8 %2604, 7
  store i8 %2612, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v374 = select i1 %2610, i64 54, i64 30
  %2613 = add i64 %2544, %.v374
  store i64 %2613, i64* %3, align 8
  %2614 = load i64, i64* %RBP.i, align 8
  br i1 %2610, label %block_.L_475e5f, label %block_475e47

block_475e47:                                     ; preds = %block_475e29
  %2615 = add i64 %2614, -220
  %2616 = add i64 %2613, 7
  store i64 %2616, i64* %3, align 8
  %2617 = inttoptr i64 %2615 to i32*
  %2618 = load i32, i32* %2617, align 4
  %2619 = mul i32 %2618, 20
  %2620 = add i32 %2619, 21
  %2621 = zext i32 %2620 to i64
  store i64 %2621, i64* %RAX.i1404, align 8
  %2622 = icmp ugt i32 %2619, -22
  %2623 = zext i1 %2622 to i8
  store i8 %2623, i8* %12, align 1
  %2624 = and i32 %2620, 253
  %2625 = tail call i32 @llvm.ctpop.i32(i32 %2624)
  %2626 = trunc i32 %2625 to i8
  %2627 = and i8 %2626, 1
  %2628 = xor i8 %2627, 1
  store i8 %2628, i8* %13, align 1
  %2629 = xor i32 %2619, 16
  %2630 = xor i32 %2629, %2620
  %2631 = lshr i32 %2630, 4
  %2632 = trunc i32 %2631 to i8
  %2633 = and i8 %2632, 1
  store i8 %2633, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %2634 = lshr i32 %2620, 31
  %2635 = trunc i32 %2634 to i8
  store i8 %2635, i8* %16, align 1
  %2636 = lshr i32 %2619, 31
  %2637 = xor i32 %2634, %2636
  %2638 = add nuw nsw i32 %2637, %2634
  %2639 = icmp eq i32 %2638, 2
  %2640 = zext i1 %2639 to i8
  store i8 %2640, i8* %17, align 1
  %2641 = add i64 %2614, -40
  %2642 = add i64 %2613, 13
  store i64 %2642, i64* %3, align 8
  %2643 = inttoptr i64 %2641 to i32*
  %2644 = load i32, i32* %2643, align 4
  %2645 = add i32 %2644, %2620
  %2646 = zext i32 %2645 to i64
  store i64 %2646, i64* %RAX.i1404, align 8
  %2647 = icmp ult i32 %2645, %2620
  %2648 = icmp ult i32 %2645, %2644
  %2649 = or i1 %2647, %2648
  %2650 = zext i1 %2649 to i8
  store i8 %2650, i8* %12, align 1
  %2651 = and i32 %2645, 255
  %2652 = tail call i32 @llvm.ctpop.i32(i32 %2651)
  %2653 = trunc i32 %2652 to i8
  %2654 = and i8 %2653, 1
  %2655 = xor i8 %2654, 1
  store i8 %2655, i8* %13, align 1
  %2656 = xor i32 %2644, %2620
  %2657 = xor i32 %2656, %2645
  %2658 = lshr i32 %2657, 4
  %2659 = trunc i32 %2658 to i8
  %2660 = and i8 %2659, 1
  store i8 %2660, i8* %14, align 1
  %2661 = icmp eq i32 %2645, 0
  %2662 = zext i1 %2661 to i8
  store i8 %2662, i8* %15, align 1
  %2663 = lshr i32 %2645, 31
  %2664 = trunc i32 %2663 to i8
  store i8 %2664, i8* %16, align 1
  %2665 = lshr i32 %2644, 31
  %2666 = xor i32 %2663, %2634
  %2667 = xor i32 %2663, %2665
  %2668 = add nuw nsw i32 %2666, %2667
  %2669 = icmp eq i32 %2668, 2
  %2670 = zext i1 %2669 to i8
  store i8 %2670, i8* %17, align 1
  %2671 = add i64 %2614, -208
  %2672 = add i64 %2613, 19
  store i64 %2672, i64* %3, align 8
  %2673 = inttoptr i64 %2671 to i32*
  store i32 %2645, i32* %2673, align 4
  %2674 = load i64, i64* %3, align 8
  %2675 = add i64 %2674, 24
  store i64 %2675, i64* %3, align 8
  %.pre233 = load i64, i64* %RBP.i, align 8
  br label %block_.L_475e72

block_.L_475e5f:                                  ; preds = %block_475e29
  %2676 = add i64 %2614, -40
  %2677 = add i64 %2613, 8
  store i64 %2677, i64* %3, align 8
  %2678 = inttoptr i64 %2676 to i32*
  %2679 = load i32, i32* %2678, align 4
  %2680 = add i32 %2679, -1
  %2681 = zext i32 %2680 to i64
  store i64 %2681, i64* %RAX.i1404, align 8
  %2682 = icmp ne i32 %2679, 0
  %2683 = zext i1 %2682 to i8
  store i8 %2683, i8* %12, align 1
  %2684 = and i32 %2680, 255
  %2685 = tail call i32 @llvm.ctpop.i32(i32 %2684)
  %2686 = trunc i32 %2685 to i8
  %2687 = and i8 %2686, 1
  %2688 = xor i8 %2687, 1
  store i8 %2688, i8* %13, align 1
  %2689 = xor i32 %2679, 16
  %2690 = xor i32 %2689, %2680
  %2691 = lshr i32 %2690, 4
  %2692 = trunc i32 %2691 to i8
  %2693 = and i8 %2692, 1
  store i8 %2693, i8* %14, align 1
  %2694 = icmp eq i32 %2680, 0
  %2695 = zext i1 %2694 to i8
  store i8 %2695, i8* %15, align 1
  %2696 = lshr i32 %2680, 31
  %2697 = trunc i32 %2696 to i8
  store i8 %2697, i8* %16, align 1
  %2698 = lshr i32 %2679, 31
  %2699 = xor i32 %2696, %2698
  %2700 = xor i32 %2696, 1
  %2701 = add nuw nsw i32 %2699, %2700
  %2702 = icmp eq i32 %2701, 2
  %2703 = zext i1 %2702 to i8
  store i8 %2703, i8* %17, align 1
  %2704 = add i64 %2613, 14
  store i64 %2704, i64* %3, align 8
  store i32 %2680, i32* %2678, align 4
  %2705 = load i64, i64* %3, align 8
  %2706 = add i64 %2705, -78
  store i64 %2706, i64* %3, align 8
  br label %block_.L_475e1f

block_.L_475e72.loopexit:                         ; preds = %block_.L_475e1f
  br label %block_.L_475e72

block_.L_475e72:                                  ; preds = %block_.L_475e72.loopexit, %block_475e47
  %2707 = phi i64 [ %2675, %block_475e47 ], [ %2544, %block_.L_475e72.loopexit ]
  %2708 = phi i64 [ %.pre233, %block_475e47 ], [ %2529, %block_.L_475e72.loopexit ]
  %2709 = add i64 %2708, -216
  %2710 = add i64 %2707, 10
  store i64 %2710, i64* %3, align 8
  %2711 = inttoptr i64 %2709 to i32*
  store i32 1, i32* %2711, align 4
  %.pre234 = load i64, i64* %3, align 8
  %2712 = bitcast [32 x %union.VectorReg]* %1608 to <4 x i32>*
  br label %block_.L_475e7c

block_.L_475e7c:                                  ; preds = %block_.L_47603f, %block_.L_475e72
  %2713 = phi i64 [ %.pre234, %block_.L_475e72 ], [ %3577, %block_.L_47603f ]
  %MEMORY.25 = phi %struct.Memory* [ %1708, %block_.L_475e72 ], [ %MEMORY.31, %block_.L_47603f ]
  store i64 20, i64* %RAX.i1404, align 8
  %2714 = load i64, i64* %RBP.i, align 8
  %2715 = add i64 %2714, -216
  %2716 = add i64 %2713, 11
  store i64 %2716, i64* %3, align 8
  %2717 = inttoptr i64 %2715 to i32*
  %2718 = load i32, i32* %2717, align 4
  %2719 = add i32 %2718, -1
  %2720 = zext i32 %2719 to i64
  store i64 %2720, i64* %RCX.i1715, align 8
  %2721 = icmp eq i32 %2718, 0
  %2722 = zext i1 %2721 to i8
  store i8 %2722, i8* %12, align 1
  %2723 = and i32 %2719, 255
  %2724 = tail call i32 @llvm.ctpop.i32(i32 %2723)
  %2725 = trunc i32 %2724 to i8
  %2726 = and i8 %2725, 1
  %2727 = xor i8 %2726, 1
  store i8 %2727, i8* %13, align 1
  %2728 = xor i32 %2719, %2718
  %2729 = lshr i32 %2728, 4
  %2730 = trunc i32 %2729 to i8
  %2731 = and i8 %2730, 1
  store i8 %2731, i8* %14, align 1
  %2732 = icmp eq i32 %2719, 0
  %2733 = zext i1 %2732 to i8
  store i8 %2733, i8* %15, align 1
  %2734 = lshr i32 %2719, 31
  %2735 = trunc i32 %2734 to i8
  store i8 %2735, i8* %16, align 1
  %2736 = lshr i32 %2718, 31
  %2737 = xor i32 %2734, %2736
  %2738 = add nuw nsw i32 %2737, %2736
  %2739 = icmp eq i32 %2738, 2
  %2740 = zext i1 %2739 to i8
  store i8 %2740, i8* %17, align 1
  %2741 = sext i32 %2719 to i64
  store i64 %2741, i64* %RDX.i1921, align 8
  %2742 = shl nsw i64 %2741, 2
  %2743 = add nsw i64 %2742, -208
  %2744 = add i64 %2743, %2714
  %2745 = add i64 %2713, 24
  store i64 %2745, i64* %3, align 8
  %2746 = inttoptr i64 %2744 to i32*
  %2747 = load i32, i32* %2746, align 4
  %2748 = zext i32 %2747 to i64
  store i64 %2748, i64* %RCX.i1715, align 8
  %2749 = add i64 %2714, -1176
  %2750 = add i64 %2713, 30
  store i64 %2750, i64* %3, align 8
  %2751 = inttoptr i64 %2749 to i32*
  store i32 20, i32* %2751, align 4
  %2752 = load i32, i32* %ECX.i2918, align 4
  %2753 = zext i32 %2752 to i64
  %2754 = load i64, i64* %3, align 8
  store i64 %2753, i64* %RAX.i1404, align 8
  %2755 = sext i32 %2752 to i64
  %2756 = lshr i64 %2755, 32
  store i64 %2756, i64* %1607, align 8
  %2757 = load i64, i64* %RBP.i, align 8
  %2758 = add i64 %2757, -1176
  %2759 = add i64 %2754, 9
  store i64 %2759, i64* %3, align 8
  %2760 = inttoptr i64 %2758 to i32*
  %2761 = load i32, i32* %2760, align 4
  %2762 = zext i32 %2761 to i64
  store i64 %2762, i64* %RCX.i1715, align 8
  %2763 = add i64 %2754, 11
  store i64 %2763, i64* %3, align 8
  %2764 = sext i32 %2761 to i64
  %2765 = shl nuw i64 %2756, 32
  %2766 = or i64 %2765, %2753
  %2767 = sdiv i64 %2766, %2764
  %2768 = shl i64 %2767, 32
  %2769 = ashr exact i64 %2768, 32
  %2770 = icmp eq i64 %2767, %2769
  br i1 %2770, label %2773, label %2771

; <label>:2771:                                   ; preds = %block_.L_475e7c
  %2772 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2763, %struct.Memory* %MEMORY.25)
  %.pre235 = load i64, i64* %RAX.i1404, align 8
  %.pre236 = load i64, i64* %3, align 8
  %.pre237 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2171

; <label>:2773:                                   ; preds = %block_.L_475e7c
  %2774 = srem i64 %2766, %2764
  %2775 = and i64 %2767, 4294967295
  store i64 %2775, i64* %RAX.i1404, align 8
  %2776 = and i64 %2774, 4294967295
  store i64 %2776, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit2171

routine_idivl__ecx.exit2171:                      ; preds = %2773, %2771
  %2777 = phi i64 [ %.pre237, %2771 ], [ %2757, %2773 ]
  %2778 = phi i64 [ %.pre236, %2771 ], [ %2763, %2773 ]
  %2779 = phi i64 [ %.pre235, %2771 ], [ %2775, %2773 ]
  %2780 = phi %struct.Memory* [ %2772, %2771 ], [ %MEMORY.25, %2773 ]
  %2781 = trunc i64 %2779 to i32
  %2782 = add i32 %2781, -1
  %2783 = zext i32 %2782 to i64
  store i64 %2783, i64* %RAX.i1404, align 8
  %2784 = icmp eq i32 %2781, 0
  %2785 = zext i1 %2784 to i8
  store i8 %2785, i8* %12, align 1
  %2786 = and i32 %2782, 255
  %2787 = tail call i32 @llvm.ctpop.i32(i32 %2786)
  %2788 = trunc i32 %2787 to i8
  %2789 = and i8 %2788, 1
  %2790 = xor i8 %2789, 1
  store i8 %2790, i8* %13, align 1
  %2791 = xor i32 %2782, %2781
  %2792 = lshr i32 %2791, 4
  %2793 = trunc i32 %2792 to i8
  %2794 = and i8 %2793, 1
  store i8 %2794, i8* %14, align 1
  %2795 = icmp eq i32 %2782, 0
  %2796 = zext i1 %2795 to i8
  store i8 %2796, i8* %15, align 1
  %2797 = lshr i32 %2782, 31
  %2798 = trunc i32 %2797 to i8
  store i8 %2798, i8* %16, align 1
  %2799 = lshr i32 %2781, 31
  %2800 = xor i32 %2797, %2799
  %2801 = add nuw nsw i32 %2800, %2799
  %2802 = icmp eq i32 %2801, 2
  %2803 = zext i1 %2802 to i8
  store i8 %2803, i8* %17, align 1
  %2804 = add i64 %2777, -224
  %2805 = add i64 %2778, 9
  store i64 %2805, i64* %3, align 8
  %2806 = inttoptr i64 %2804 to i32*
  %2807 = load i32, i32* %2806, align 4
  %2808 = sub i32 %2782, %2807
  %2809 = icmp ult i32 %2782, %2807
  %2810 = zext i1 %2809 to i8
  store i8 %2810, i8* %12, align 1
  %2811 = and i32 %2808, 255
  %2812 = tail call i32 @llvm.ctpop.i32(i32 %2811)
  %2813 = trunc i32 %2812 to i8
  %2814 = and i8 %2813, 1
  %2815 = xor i8 %2814, 1
  store i8 %2815, i8* %13, align 1
  %2816 = xor i32 %2807, %2782
  %2817 = xor i32 %2816, %2808
  %2818 = lshr i32 %2817, 4
  %2819 = trunc i32 %2818 to i8
  %2820 = and i8 %2819, 1
  store i8 %2820, i8* %14, align 1
  %2821 = icmp eq i32 %2808, 0
  %2822 = zext i1 %2821 to i8
  store i8 %2822, i8* %15, align 1
  %2823 = lshr i32 %2808, 31
  %2824 = trunc i32 %2823 to i8
  store i8 %2824, i8* %16, align 1
  %2825 = lshr i32 %2807, 31
  %2826 = xor i32 %2825, %2797
  %2827 = xor i32 %2823, %2797
  %2828 = add nuw nsw i32 %2827, %2826
  %2829 = icmp eq i32 %2828, 2
  %2830 = zext i1 %2829 to i8
  store i8 %2830, i8* %17, align 1
  %2831 = icmp ne i8 %2824, 0
  %2832 = xor i1 %2831, %2829
  %.v375 = select i1 %2832, i64 15, i64 450
  %2833 = add i64 %2778, %.v375
  %2834 = add i64 %2833, 5
  store i64 %2834, i64* %3, align 8
  store i64 20, i64* %RAX.i1404, align 8
  br i1 %2832, label %block_475eb4, label %block_.L_476067

block_475eb4:                                     ; preds = %routine_idivl__ecx.exit2171
  store <4 x i32> zeroinitializer, <4 x i32>* %2712, align 1
  %2835 = add i64 %2777, -1068
  %2836 = add i64 %2833, 18
  store i64 %2836, i64* %3, align 8
  %2837 = inttoptr i64 %2835 to i32*
  store i32 0, i32* %2837, align 4
  %2838 = load i64, i64* %RBP.i, align 8
  %2839 = add i64 %2838, -1072
  %2840 = load i64, i64* %3, align 8
  %2841 = add i64 %2840, 8
  store i64 %2841, i64* %3, align 8
  %2842 = load <2 x float>, <2 x float>* %1617, align 1
  %2843 = extractelement <2 x float> %2842, i32 0
  %2844 = inttoptr i64 %2839 to float*
  store float %2843, float* %2844, align 4
  %2845 = load i64, i64* %RBP.i, align 8
  %2846 = add i64 %2845, -216
  %2847 = load i64, i64* %3, align 8
  %2848 = add i64 %2847, 6
  store i64 %2848, i64* %3, align 8
  %2849 = inttoptr i64 %2846 to i32*
  %2850 = load i32, i32* %2849, align 4
  %2851 = add i32 %2850, -1
  %2852 = zext i32 %2851 to i64
  store i64 %2852, i64* %RCX.i1715, align 8
  %2853 = icmp eq i32 %2850, 0
  %2854 = zext i1 %2853 to i8
  store i8 %2854, i8* %12, align 1
  %2855 = and i32 %2851, 255
  %2856 = tail call i32 @llvm.ctpop.i32(i32 %2855)
  %2857 = trunc i32 %2856 to i8
  %2858 = and i8 %2857, 1
  %2859 = xor i8 %2858, 1
  store i8 %2859, i8* %13, align 1
  %2860 = xor i32 %2851, %2850
  %2861 = lshr i32 %2860, 4
  %2862 = trunc i32 %2861 to i8
  %2863 = and i8 %2862, 1
  store i8 %2863, i8* %14, align 1
  %2864 = icmp eq i32 %2851, 0
  %2865 = zext i1 %2864 to i8
  store i8 %2865, i8* %15, align 1
  %2866 = lshr i32 %2851, 31
  %2867 = trunc i32 %2866 to i8
  store i8 %2867, i8* %16, align 1
  %2868 = lshr i32 %2850, 31
  %2869 = xor i32 %2866, %2868
  %2870 = add nuw nsw i32 %2869, %2868
  %2871 = icmp eq i32 %2870, 2
  %2872 = zext i1 %2871 to i8
  store i8 %2872, i8* %17, align 1
  %2873 = sext i32 %2851 to i64
  store i64 %2873, i64* %RDX.i1921, align 8
  %2874 = shl nsw i64 %2873, 2
  %2875 = add nsw i64 %2874, -208
  %2876 = add i64 %2875, %2845
  %2877 = add i64 %2847, 19
  store i64 %2877, i64* %3, align 8
  %2878 = inttoptr i64 %2876 to i32*
  %2879 = load i32, i32* %2878, align 4
  %2880 = zext i32 %2879 to i64
  store i64 %2880, i64* %RCX.i1715, align 8
  %2881 = add i64 %2845, -1180
  %2882 = load i32, i32* %EAX.i1403, align 4
  %2883 = add i64 %2847, 25
  store i64 %2883, i64* %3, align 8
  %2884 = inttoptr i64 %2881 to i32*
  store i32 %2882, i32* %2884, align 4
  %2885 = load i32, i32* %ECX.i2918, align 4
  %2886 = zext i32 %2885 to i64
  %2887 = load i64, i64* %3, align 8
  store i64 %2886, i64* %RAX.i1404, align 8
  %2888 = sext i32 %2885 to i64
  %2889 = lshr i64 %2888, 32
  store i64 %2889, i64* %1607, align 8
  %2890 = load i64, i64* %RBP.i, align 8
  %2891 = add i64 %2890, -1180
  %2892 = add i64 %2887, 9
  store i64 %2892, i64* %3, align 8
  %2893 = inttoptr i64 %2891 to i32*
  %2894 = load i32, i32* %2893, align 4
  %2895 = zext i32 %2894 to i64
  store i64 %2895, i64* %RCX.i1715, align 8
  %2896 = add i64 %2887, 11
  store i64 %2896, i64* %3, align 8
  %2897 = sext i32 %2894 to i64
  %2898 = shl nuw i64 %2889, 32
  %2899 = or i64 %2898, %2886
  %2900 = sdiv i64 %2899, %2897
  %2901 = shl i64 %2900, 32
  %2902 = ashr exact i64 %2901, 32
  %2903 = icmp eq i64 %2900, %2902
  br i1 %2903, label %2906, label %2904

; <label>:2904:                                   ; preds = %block_475eb4
  %2905 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2896, %struct.Memory* %2780)
  %.pre315 = load i64, i64* %RAX.i1404, align 8
  %.pre316 = load i64, i64* %3, align 8
  %.pre317 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2127

; <label>:2906:                                   ; preds = %block_475eb4
  %2907 = srem i64 %2899, %2897
  %2908 = and i64 %2900, 4294967295
  store i64 %2908, i64* %RAX.i1404, align 8
  %2909 = and i64 %2907, 4294967295
  store i64 %2909, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit2127

routine_idivl__ecx.exit2127:                      ; preds = %2906, %2904
  %2910 = phi i64 [ %.pre317, %2904 ], [ %2890, %2906 ]
  %2911 = phi i64 [ %.pre316, %2904 ], [ %2896, %2906 ]
  %2912 = phi i64 [ %.pre315, %2904 ], [ %2908, %2906 ]
  %2913 = phi %struct.Memory* [ %2905, %2904 ], [ %2780, %2906 ]
  %2914 = trunc i64 %2912 to i32
  %2915 = add i32 %2914, -1
  %2916 = zext i32 %2915 to i64
  store i64 %2916, i64* %RAX.i1404, align 8
  %2917 = icmp eq i32 %2914, 0
  %2918 = zext i1 %2917 to i8
  store i8 %2918, i8* %12, align 1
  %2919 = and i32 %2915, 255
  %2920 = tail call i32 @llvm.ctpop.i32(i32 %2919)
  %2921 = trunc i32 %2920 to i8
  %2922 = and i8 %2921, 1
  %2923 = xor i8 %2922, 1
  store i8 %2923, i8* %13, align 1
  %2924 = xor i32 %2915, %2914
  %2925 = lshr i32 %2924, 4
  %2926 = trunc i32 %2925 to i8
  %2927 = and i8 %2926, 1
  store i8 %2927, i8* %14, align 1
  %2928 = icmp eq i32 %2915, 0
  %2929 = zext i1 %2928 to i8
  store i8 %2929, i8* %15, align 1
  %2930 = lshr i32 %2915, 31
  %2931 = trunc i32 %2930 to i8
  store i8 %2931, i8* %16, align 1
  %2932 = lshr i32 %2914, 31
  %2933 = xor i32 %2930, %2932
  %2934 = add nuw nsw i32 %2933, %2932
  %2935 = icmp eq i32 %2934, 2
  %2936 = zext i1 %2935 to i8
  store i8 %2936, i8* %17, align 1
  %2937 = add i64 %2910, -1076
  %2938 = add i64 %2911, 9
  store i64 %2938, i64* %3, align 8
  %2939 = inttoptr i64 %2937 to i32*
  store i32 %2915, i32* %2939, align 4
  %2940 = load i64, i64* %RBP.i, align 8
  %2941 = add i64 %2940, -216
  %2942 = load i64, i64* %3, align 8
  %2943 = add i64 %2942, 6
  store i64 %2943, i64* %3, align 8
  %2944 = inttoptr i64 %2941 to i32*
  %2945 = load i32, i32* %2944, align 4
  %2946 = add i32 %2945, -1
  %2947 = zext i32 %2946 to i64
  store i64 %2947, i64* %RAX.i1404, align 8
  %2948 = icmp eq i32 %2945, 0
  %2949 = zext i1 %2948 to i8
  store i8 %2949, i8* %12, align 1
  %2950 = and i32 %2946, 255
  %2951 = tail call i32 @llvm.ctpop.i32(i32 %2950)
  %2952 = trunc i32 %2951 to i8
  %2953 = and i8 %2952, 1
  %2954 = xor i8 %2953, 1
  store i8 %2954, i8* %13, align 1
  %2955 = xor i32 %2946, %2945
  %2956 = lshr i32 %2955, 4
  %2957 = trunc i32 %2956 to i8
  %2958 = and i8 %2957, 1
  store i8 %2958, i8* %14, align 1
  %2959 = icmp eq i32 %2946, 0
  %2960 = zext i1 %2959 to i8
  store i8 %2960, i8* %15, align 1
  %2961 = lshr i32 %2946, 31
  %2962 = trunc i32 %2961 to i8
  store i8 %2962, i8* %16, align 1
  %2963 = lshr i32 %2945, 31
  %2964 = xor i32 %2961, %2963
  %2965 = add nuw nsw i32 %2964, %2963
  %2966 = icmp eq i32 %2965, 2
  %2967 = zext i1 %2966 to i8
  store i8 %2967, i8* %17, align 1
  %2968 = sext i32 %2946 to i64
  store i64 %2968, i64* %RSI.i2336, align 8
  %2969 = shl nsw i64 %2968, 2
  %2970 = add nsw i64 %2969, -208
  %2971 = add i64 %2970, %2940
  %2972 = add i64 %2942, 19
  store i64 %2972, i64* %3, align 8
  %2973 = inttoptr i64 %2971 to i32*
  %2974 = load i32, i32* %2973, align 4
  %2975 = zext i32 %2974 to i64
  store i64 %2975, i64* %RAX.i1404, align 8
  %2976 = sext i32 %2974 to i64
  %2977 = lshr i64 %2976, 32
  store i64 %2977, i64* %1607, align 8
  %2978 = load i32, i32* %ECX.i2918, align 4
  %2979 = add i64 %2942, 22
  store i64 %2979, i64* %3, align 8
  %2980 = sext i32 %2978 to i64
  %2981 = shl nuw i64 %2977, 32
  %2982 = or i64 %2981, %2975
  %2983 = sdiv i64 %2982, %2980
  %2984 = shl i64 %2983, 32
  %2985 = ashr exact i64 %2984, 32
  %2986 = icmp eq i64 %2983, %2985
  br i1 %2986, label %2989, label %2987

; <label>:2987:                                   ; preds = %routine_idivl__ecx.exit2127
  %2988 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2979, %struct.Memory* %2913)
  %.pre318 = load i64, i64* %RDX.i1921, align 8
  %.pre319 = load i64, i64* %3, align 8
  %.pre320 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit2103

; <label>:2989:                                   ; preds = %routine_idivl__ecx.exit2127
  %2990 = srem i64 %2982, %2980
  %2991 = and i64 %2983, 4294967295
  store i64 %2991, i64* %RAX.i1404, align 8
  %2992 = and i64 %2990, 4294967295
  store i64 %2992, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit2103

routine_idivl__ecx.exit2103:                      ; preds = %2989, %2987
  %2993 = phi i64 [ %.pre320, %2987 ], [ %2940, %2989 ]
  %2994 = phi i64 [ %.pre319, %2987 ], [ %2979, %2989 ]
  %2995 = phi i64 [ %.pre318, %2987 ], [ %2992, %2989 ]
  %2996 = phi %struct.Memory* [ %2988, %2987 ], [ %2913, %2989 ]
  %2997 = trunc i64 %2995 to i32
  %2998 = add i32 %2997, -1
  %2999 = zext i32 %2998 to i64
  store i64 %2999, i64* %RDX.i1921, align 8
  %3000 = icmp eq i32 %2997, 0
  %3001 = zext i1 %3000 to i8
  store i8 %3001, i8* %12, align 1
  %3002 = and i32 %2998, 255
  %3003 = tail call i32 @llvm.ctpop.i32(i32 %3002)
  %3004 = trunc i32 %3003 to i8
  %3005 = and i8 %3004, 1
  %3006 = xor i8 %3005, 1
  store i8 %3006, i8* %13, align 1
  %3007 = xor i32 %2998, %2997
  %3008 = lshr i32 %3007, 4
  %3009 = trunc i32 %3008 to i8
  %3010 = and i8 %3009, 1
  store i8 %3010, i8* %14, align 1
  %3011 = icmp eq i32 %2998, 0
  %3012 = zext i1 %3011 to i8
  store i8 %3012, i8* %15, align 1
  %3013 = lshr i32 %2998, 31
  %3014 = trunc i32 %3013 to i8
  store i8 %3014, i8* %16, align 1
  %3015 = lshr i32 %2997, 31
  %3016 = xor i32 %3013, %3015
  %3017 = add nuw nsw i32 %3016, %3015
  %3018 = icmp eq i32 %3017, 2
  %3019 = zext i1 %3018 to i8
  store i8 %3019, i8* %17, align 1
  %3020 = add i64 %2993, -1080
  %3021 = add i64 %2994, 9
  store i64 %3021, i64* %3, align 8
  %3022 = inttoptr i64 %3020 to i32*
  store i32 %2998, i32* %3022, align 4
  %3023 = load i64, i64* %RBP.i, align 8
  %3024 = add i64 %3023, -1076
  %3025 = load i64, i64* %3, align 8
  %3026 = add i64 %3025, 6
  store i64 %3026, i64* %3, align 8
  %3027 = inttoptr i64 %3024 to i32*
  %3028 = load i32, i32* %3027, align 4
  %3029 = add i32 %3028, 1
  %3030 = zext i32 %3029 to i64
  store i64 %3030, i64* %RDX.i1921, align 8
  %3031 = icmp eq i32 %3028, -1
  %3032 = icmp eq i32 %3029, 0
  %3033 = or i1 %3031, %3032
  %3034 = zext i1 %3033 to i8
  store i8 %3034, i8* %12, align 1
  %3035 = and i32 %3029, 255
  %3036 = tail call i32 @llvm.ctpop.i32(i32 %3035)
  %3037 = trunc i32 %3036 to i8
  %3038 = and i8 %3037, 1
  %3039 = xor i8 %3038, 1
  store i8 %3039, i8* %13, align 1
  %3040 = xor i32 %3029, %3028
  %3041 = lshr i32 %3040, 4
  %3042 = trunc i32 %3041 to i8
  %3043 = and i8 %3042, 1
  store i8 %3043, i8* %14, align 1
  %3044 = zext i1 %3032 to i8
  store i8 %3044, i8* %15, align 1
  %3045 = lshr i32 %3029, 31
  %3046 = trunc i32 %3045 to i8
  store i8 %3046, i8* %16, align 1
  %3047 = lshr i32 %3028, 31
  %3048 = xor i32 %3045, %3047
  %3049 = add nuw nsw i32 %3048, %3045
  %3050 = icmp eq i32 %3049, 2
  %3051 = zext i1 %3050 to i8
  store i8 %3051, i8* %17, align 1
  %3052 = add i64 %3023, -28
  %3053 = add i64 %3025, 12
  store i64 %3053, i64* %3, align 8
  %3054 = inttoptr i64 %3052 to i32*
  store i32 %3029, i32* %3054, align 4
  %.pre321 = load i64, i64* %3, align 8
  br label %block_.L_475f26

block_.L_475f26:                                  ; preds = %block_.L_475fe7, %routine_idivl__ecx.exit2103
  %3055 = phi i64 [ %.pre321, %routine_idivl__ecx.exit2103 ], [ %3494, %block_.L_475fe7 ]
  %MEMORY.26 = phi %struct.Memory* [ %2996, %routine_idivl__ecx.exit2103 ], [ %MEMORY.27, %block_.L_475fe7 ]
  %3056 = load i64, i64* %RBP.i, align 8
  %3057 = add i64 %3056, -28
  %3058 = add i64 %3055, 3
  store i64 %3058, i64* %3, align 8
  %3059 = inttoptr i64 %3057 to i32*
  %3060 = load i32, i32* %3059, align 4
  %3061 = zext i32 %3060 to i64
  store i64 %3061, i64* %RAX.i1404, align 8
  %3062 = add i64 %3056, -224
  %3063 = add i64 %3055, 9
  store i64 %3063, i64* %3, align 8
  %3064 = inttoptr i64 %3062 to i32*
  %3065 = load i32, i32* %3064, align 4
  %3066 = sub i32 %3060, %3065
  %3067 = icmp ult i32 %3060, %3065
  %3068 = zext i1 %3067 to i8
  store i8 %3068, i8* %12, align 1
  %3069 = and i32 %3066, 255
  %3070 = tail call i32 @llvm.ctpop.i32(i32 %3069)
  %3071 = trunc i32 %3070 to i8
  %3072 = and i8 %3071, 1
  %3073 = xor i8 %3072, 1
  store i8 %3073, i8* %13, align 1
  %3074 = xor i32 %3065, %3060
  %3075 = xor i32 %3074, %3066
  %3076 = lshr i32 %3075, 4
  %3077 = trunc i32 %3076 to i8
  %3078 = and i8 %3077, 1
  store i8 %3078, i8* %14, align 1
  %3079 = icmp eq i32 %3066, 0
  %3080 = zext i1 %3079 to i8
  store i8 %3080, i8* %15, align 1
  %3081 = lshr i32 %3066, 31
  %3082 = trunc i32 %3081 to i8
  store i8 %3082, i8* %16, align 1
  %3083 = lshr i32 %3060, 31
  %3084 = lshr i32 %3065, 31
  %3085 = xor i32 %3084, %3083
  %3086 = xor i32 %3081, %3083
  %3087 = add nuw nsw i32 %3086, %3085
  %3088 = icmp eq i32 %3087, 2
  %3089 = zext i1 %3088 to i8
  store i8 %3089, i8* %17, align 1
  %3090 = icmp ne i8 %3082, 0
  %3091 = xor i1 %3090, %3088
  %.demorgan363 = or i1 %3079, %3091
  %.v452 = select i1 %.demorgan363, i64 15, i64 212
  %3092 = add i64 %3055, %.v452
  store i64 %3092, i64* %3, align 8
  br i1 %.demorgan363, label %block_475f35, label %block_.L_475ffa

block_475f35:                                     ; preds = %block_.L_475f26
  %3093 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %3094 = add i32 %3093, -1
  %3095 = zext i32 %3094 to i64
  store i64 %3095, i64* %RAX.i1404, align 8
  %3096 = icmp eq i32 %3093, 0
  %3097 = zext i1 %3096 to i8
  store i8 %3097, i8* %12, align 1
  %3098 = and i32 %3094, 255
  %3099 = tail call i32 @llvm.ctpop.i32(i32 %3098)
  %3100 = trunc i32 %3099 to i8
  %3101 = and i8 %3100, 1
  %3102 = xor i8 %3101, 1
  store i8 %3102, i8* %13, align 1
  %3103 = xor i32 %3094, %3093
  %3104 = lshr i32 %3103, 4
  %3105 = trunc i32 %3104 to i8
  %3106 = and i8 %3105, 1
  store i8 %3106, i8* %14, align 1
  %3107 = icmp eq i32 %3094, 0
  %3108 = zext i1 %3107 to i8
  store i8 %3108, i8* %15, align 1
  %3109 = lshr i32 %3094, 31
  %3110 = trunc i32 %3109 to i8
  store i8 %3110, i8* %16, align 1
  %3111 = lshr i32 %3093, 31
  %3112 = xor i32 %3109, %3111
  %3113 = add nuw nsw i32 %3112, %3111
  %3114 = icmp eq i32 %3113, 2
  %3115 = zext i1 %3114 to i8
  store i8 %3115, i8* %17, align 1
  %3116 = add i64 %3056, -32
  %3117 = add i64 %3092, 13
  store i64 %3117, i64* %3, align 8
  %3118 = inttoptr i64 %3116 to i32*
  store i32 %3094, i32* %3118, align 4
  %.pre322 = load i64, i64* %3, align 8
  br label %block_.L_475f42

block_.L_475f42:                                  ; preds = %block_.L_475fd4, %block_475f35
  %3119 = phi i64 [ %.pre322, %block_475f35 ], [ %3465, %block_.L_475fd4 ]
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.26, %block_475f35 ], [ %MEMORY.30, %block_.L_475fd4 ]
  %3120 = load i64, i64* %RBP.i, align 8
  %3121 = add i64 %3120, -32
  %3122 = add i64 %3119, 4
  store i64 %3122, i64* %3, align 8
  %3123 = inttoptr i64 %3121 to i32*
  %3124 = load i32, i32* %3123, align 4
  store i8 0, i8* %12, align 1
  %3125 = and i32 %3124, 255
  %3126 = tail call i32 @llvm.ctpop.i32(i32 %3125)
  %3127 = trunc i32 %3126 to i8
  %3128 = and i8 %3127, 1
  %3129 = xor i8 %3128, 1
  store i8 %3129, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %3130 = icmp eq i32 %3124, 0
  %3131 = zext i1 %3130 to i8
  store i8 %3131, i8* %15, align 1
  %3132 = lshr i32 %3124, 31
  %3133 = trunc i32 %3132 to i8
  store i8 %3133, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %3134 = icmp ne i8 %3133, 0
  %.v130 = select i1 %3134, i64 161, i64 6
  %3135 = add i64 %3122, %.v130
  store i64 %3135, i64* %3, align 8
  %3136 = add i64 %3120, -28
  br i1 %3134, label %block_.L_475fe7, label %block_475f4c

block_475f4c:                                     ; preds = %block_.L_475f42
  %3137 = add i64 %3135, 4
  store i64 %3137, i64* %3, align 8
  %3138 = inttoptr i64 %3136 to i32*
  %3139 = load i32, i32* %3138, align 4
  %3140 = mul i32 %3139, 20
  %3141 = add i32 %3140, 21
  %3142 = zext i32 %3141 to i64
  store i64 %3142, i64* %RAX.i1404, align 8
  %3143 = icmp ugt i32 %3140, -22
  %3144 = zext i1 %3143 to i8
  store i8 %3144, i8* %12, align 1
  %3145 = and i32 %3141, 253
  %3146 = tail call i32 @llvm.ctpop.i32(i32 %3145)
  %3147 = trunc i32 %3146 to i8
  %3148 = and i8 %3147, 1
  %3149 = xor i8 %3148, 1
  store i8 %3149, i8* %13, align 1
  %3150 = xor i32 %3140, 16
  %3151 = xor i32 %3150, %3141
  %3152 = lshr i32 %3151, 4
  %3153 = trunc i32 %3152 to i8
  %3154 = and i8 %3153, 1
  store i8 %3154, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %3155 = lshr i32 %3141, 31
  %3156 = trunc i32 %3155 to i8
  store i8 %3156, i8* %16, align 1
  %3157 = lshr i32 %3140, 31
  %3158 = xor i32 %3155, %3157
  %3159 = add nuw nsw i32 %3158, %3155
  %3160 = icmp eq i32 %3159, 2
  %3161 = zext i1 %3160 to i8
  store i8 %3161, i8* %17, align 1
  %3162 = add i64 %3135, 10
  store i64 %3162, i64* %3, align 8
  %3163 = load i32, i32* %3123, align 4
  %3164 = add i32 %3163, %3141
  %3165 = zext i32 %3164 to i64
  store i64 %3165, i64* %RAX.i1404, align 8
  %3166 = icmp ult i32 %3164, %3141
  %3167 = icmp ult i32 %3164, %3163
  %3168 = or i1 %3166, %3167
  %3169 = zext i1 %3168 to i8
  store i8 %3169, i8* %12, align 1
  %3170 = and i32 %3164, 255
  %3171 = tail call i32 @llvm.ctpop.i32(i32 %3170)
  %3172 = trunc i32 %3171 to i8
  %3173 = and i8 %3172, 1
  %3174 = xor i8 %3173, 1
  store i8 %3174, i8* %13, align 1
  %3175 = xor i32 %3163, %3141
  %3176 = xor i32 %3175, %3164
  %3177 = lshr i32 %3176, 4
  %3178 = trunc i32 %3177 to i8
  %3179 = and i8 %3178, 1
  store i8 %3179, i8* %14, align 1
  %3180 = icmp eq i32 %3164, 0
  %3181 = zext i1 %3180 to i8
  store i8 %3181, i8* %15, align 1
  %3182 = lshr i32 %3164, 31
  %3183 = trunc i32 %3182 to i8
  store i8 %3183, i8* %16, align 1
  %3184 = lshr i32 %3163, 31
  %3185 = xor i32 %3182, %3155
  %3186 = xor i32 %3182, %3184
  %3187 = add nuw nsw i32 %3185, %3186
  %3188 = icmp eq i32 %3187, 2
  %3189 = zext i1 %3188 to i8
  store i8 %3189, i8* %17, align 1
  %3190 = sext i32 %3164 to i64
  store i64 %3190, i64* %RCX.i1715, align 8
  %3191 = add nsw i64 %3190, -1040
  %3192 = add i64 %3191, %3120
  %3193 = add i64 %3135, 21
  store i64 %3193, i64* %3, align 8
  %3194 = inttoptr i64 %3192 to i8*
  %3195 = load i8, i8* %3194, align 1
  store i8 0, i8* %12, align 1
  %3196 = zext i8 %3195 to i32
  %3197 = tail call i32 @llvm.ctpop.i32(i32 %3196)
  %3198 = trunc i32 %3197 to i8
  %3199 = and i8 %3198, 1
  %3200 = xor i8 %3199, 1
  store i8 %3200, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %3201 = icmp eq i8 %3195, 0
  %3202 = zext i1 %3201 to i8
  store i8 %3202, i8* %15, align 1
  %3203 = lshr i8 %3195, 7
  store i8 %3203, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v454 = select i1 %3201, i64 136, i64 27
  %3204 = add i64 %3135, %.v454
  store i64 %3204, i64* %3, align 8
  br i1 %3201, label %block_.L_475fd4, label %block_475f67

block_475f67:                                     ; preds = %block_475f4c
  %3205 = load i64, i64* %RBP.i, align 8
  %3206 = add i64 %3205, -32
  %3207 = add i64 %3204, 3
  store i64 %3207, i64* %3, align 8
  %3208 = inttoptr i64 %3206 to i32*
  %3209 = load i32, i32* %3208, align 4
  %3210 = zext i32 %3209 to i64
  store i64 %3210, i64* %RAX.i1404, align 8
  %3211 = add i64 %3205, -1080
  %3212 = add i64 %3204, 9
  store i64 %3212, i64* %3, align 8
  %3213 = inttoptr i64 %3211 to i32*
  %3214 = load i32, i32* %3213, align 4
  %3215 = sub i32 %3209, %3214
  %3216 = zext i32 %3215 to i64
  store i64 %3216, i64* %RAX.i1404, align 8
  %3217 = icmp ult i32 %3209, %3214
  %3218 = zext i1 %3217 to i8
  store i8 %3218, i8* %12, align 1
  %3219 = and i32 %3215, 255
  %3220 = tail call i32 @llvm.ctpop.i32(i32 %3219)
  %3221 = trunc i32 %3220 to i8
  %3222 = and i8 %3221, 1
  %3223 = xor i8 %3222, 1
  store i8 %3223, i8* %13, align 1
  %3224 = xor i32 %3214, %3209
  %3225 = xor i32 %3224, %3215
  %3226 = lshr i32 %3225, 4
  %3227 = trunc i32 %3226 to i8
  %3228 = and i8 %3227, 1
  store i8 %3228, i8* %14, align 1
  %3229 = icmp eq i32 %3215, 0
  %3230 = zext i1 %3229 to i8
  store i8 %3230, i8* %15, align 1
  %3231 = lshr i32 %3215, 31
  %3232 = trunc i32 %3231 to i8
  store i8 %3232, i8* %16, align 1
  %3233 = lshr i32 %3209, 31
  %3234 = lshr i32 %3214, 31
  %3235 = xor i32 %3234, %3233
  %3236 = xor i32 %3231, %3233
  %3237 = add nuw nsw i32 %3236, %3235
  %3238 = icmp eq i32 %3237, 2
  %3239 = zext i1 %3238 to i8
  store i8 %3239, i8* %17, align 1
  %3240 = load <2 x i32>, <2 x i32>* %1618, align 1
  %3241 = load <2 x i32>, <2 x i32>* %1619, align 1
  %3242 = sitofp i32 %3215 to float
  store float %3242, float* %1620, align 1
  %3243 = extractelement <2 x i32> %3240, i32 1
  store i32 %3243, i32* %1613, align 1
  %3244 = extractelement <2 x i32> %3241, i32 0
  store i32 %3244, i32* %1614, align 1
  %3245 = extractelement <2 x i32> %3241, i32 1
  store i32 %3245, i32* %1616, align 1
  %3246 = add i64 %3205, -28
  %3247 = add i64 %3204, 16
  store i64 %3247, i64* %3, align 8
  %3248 = inttoptr i64 %3246 to i32*
  %3249 = load i32, i32* %3248, align 4
  %3250 = zext i32 %3249 to i64
  store i64 %3250, i64* %RAX.i1404, align 8
  %3251 = add i64 %3205, -1076
  %3252 = add i64 %3204, 22
  store i64 %3252, i64* %3, align 8
  %3253 = inttoptr i64 %3251 to i32*
  %3254 = load i32, i32* %3253, align 4
  %3255 = sub i32 %3249, %3254
  %3256 = zext i32 %3255 to i64
  store i64 %3256, i64* %RAX.i1404, align 8
  %3257 = icmp ult i32 %3249, %3254
  %3258 = zext i1 %3257 to i8
  store i8 %3258, i8* %12, align 1
  %3259 = and i32 %3255, 255
  %3260 = tail call i32 @llvm.ctpop.i32(i32 %3259)
  %3261 = trunc i32 %3260 to i8
  %3262 = and i8 %3261, 1
  %3263 = xor i8 %3262, 1
  store i8 %3263, i8* %13, align 1
  %3264 = xor i32 %3254, %3249
  %3265 = xor i32 %3264, %3255
  %3266 = lshr i32 %3265, 4
  %3267 = trunc i32 %3266 to i8
  %3268 = and i8 %3267, 1
  store i8 %3268, i8* %14, align 1
  %3269 = icmp eq i32 %3255, 0
  %3270 = zext i1 %3269 to i8
  store i8 %3270, i8* %15, align 1
  %3271 = lshr i32 %3255, 31
  %3272 = trunc i32 %3271 to i8
  store i8 %3272, i8* %16, align 1
  %3273 = lshr i32 %3249, 31
  %3274 = lshr i32 %3254, 31
  %3275 = xor i32 %3274, %3273
  %3276 = xor i32 %3271, %3273
  %3277 = add nuw nsw i32 %3276, %3275
  %3278 = icmp eq i32 %3277, 2
  %3279 = zext i1 %3278 to i8
  store i8 %3279, i8* %17, align 1
  %3280 = load <2 x i32>, <2 x i32>* %1623, align 1
  %3281 = load <2 x i32>, <2 x i32>* %1625, align 1
  %3282 = sitofp i32 %3255 to float
  store float %3282, float* %1626, align 1
  %3283 = extractelement <2 x i32> %3280, i32 1
  store i32 %3283, i32* %1628, align 1
  %3284 = extractelement <2 x i32> %3281, i32 0
  store i32 %3284, i32* %1629, align 1
  %3285 = extractelement <2 x i32> %3281, i32 1
  store i32 %3285, i32* %1631, align 1
  %3286 = load <2 x float>, <2 x float>* %1617, align 1
  %3287 = load <2 x i32>, <2 x i32>* %1619, align 1
  %3288 = load <2 x float>, <2 x float>* %1632, align 1
  %3289 = extractelement <2 x float> %3286, i32 0
  %3290 = extractelement <2 x float> %3288, i32 0
  %3291 = fdiv float %3289, %3290
  store float %3291, float* %1620, align 1
  %3292 = bitcast <2 x float> %3286 to <2 x i32>
  %3293 = extractelement <2 x i32> %3292, i32 1
  store i32 %3293, i32* %1613, align 1
  %3294 = extractelement <2 x i32> %3287, i32 0
  store i32 %3294, i32* %1614, align 1
  %3295 = extractelement <2 x i32> %3287, i32 1
  store i32 %3295, i32* %1616, align 1
  %3296 = load i64, i64* %RBP.i, align 8
  %3297 = add i64 %3296, -1084
  %3298 = add i64 %3204, 38
  store i64 %3298, i64* %3, align 8
  %3299 = load <2 x float>, <2 x float>* %1617, align 1
  %3300 = extractelement <2 x float> %3299, i32 0
  %3301 = inttoptr i64 %3297 to float*
  store float %3300, float* %3301, align 4
  %3302 = load i64, i64* %RBP.i, align 8
  %3303 = add i64 %3302, -1068
  %3304 = load i64, i64* %3, align 8
  %3305 = add i64 %3304, 7
  store i64 %3305, i64* %3, align 8
  %3306 = inttoptr i64 %3303 to i32*
  %3307 = load i32, i32* %3306, align 4
  store i8 0, i8* %12, align 1
  %3308 = and i32 %3307, 255
  %3309 = tail call i32 @llvm.ctpop.i32(i32 %3308)
  %3310 = trunc i32 %3309 to i8
  %3311 = and i8 %3310, 1
  %3312 = xor i8 %3311, 1
  store i8 %3312, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %3313 = icmp eq i32 %3307, 0
  %3314 = zext i1 %3313 to i8
  store i8 %3314, i8* %15, align 1
  %3315 = lshr i32 %3307, 31
  %3316 = trunc i32 %3315 to i8
  store i8 %3316, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v455 = select i1 %3313, i64 34, i64 13
  %3317 = add i64 %3304, %.v455
  store i64 %3317, i64* %3, align 8
  br i1 %3313, label %block_.L_475faf, label %block_475f9a

block_475f9a:                                     ; preds = %block_475f67
  %3318 = add i64 %3302, -1084
  %3319 = add i64 %3317, 8
  store i64 %3319, i64* %3, align 8
  %3320 = inttoptr i64 %3318 to i32*
  %3321 = load i32, i32* %3320, align 4
  store i32 %3321, i32* %1611, align 1
  store float 0.000000e+00, float* %1633, align 1
  store float 0.000000e+00, float* %1634, align 1
  store float 0.000000e+00, float* %1635, align 1
  %3322 = add i64 %3302, -1072
  %3323 = add i64 %3317, 15
  store i64 %3323, i64* %3, align 8
  %3324 = load <2 x float>, <2 x float>* %1617, align 1
  %3325 = extractelement <2 x float> %3324, i32 0
  %3326 = inttoptr i64 %3322 to float*
  %3327 = load float, float* %3326, align 4
  %3328 = fcmp uno float %3325, %3327
  br i1 %3328, label %3329, label %3339

; <label>:3329:                                   ; preds = %block_475f9a
  %3330 = fadd float %3325, %3327
  %3331 = bitcast float %3330 to i32
  %3332 = and i32 %3331, 2143289344
  %3333 = icmp eq i32 %3332, 2139095040
  %3334 = and i32 %3331, 4194303
  %3335 = icmp ne i32 %3334, 0
  %3336 = and i1 %3333, %3335
  br i1 %3336, label %3337, label %3345

; <label>:3337:                                   ; preds = %3329
  %3338 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3323, %struct.Memory* %MEMORY.27)
  %.pre323 = load i64, i64* %3, align 8
  %.pre324 = load i8, i8* %12, align 1
  %.pre325 = load i8, i8* %15, align 1
  br label %routine_ucomiss_MINUS0x430__rbp____xmm0.exit

; <label>:3339:                                   ; preds = %block_475f9a
  %3340 = fcmp ogt float %3325, %3327
  br i1 %3340, label %3345, label %3341

; <label>:3341:                                   ; preds = %3339
  %3342 = fcmp olt float %3325, %3327
  br i1 %3342, label %3345, label %3343

; <label>:3343:                                   ; preds = %3341
  %3344 = fcmp oeq float %3325, %3327
  br i1 %3344, label %3345, label %3349

; <label>:3345:                                   ; preds = %3343, %3341, %3339, %3329
  %3346 = phi i8 [ 0, %3339 ], [ 0, %3341 ], [ 1, %3343 ], [ 1, %3329 ]
  %3347 = phi i8 [ 0, %3339 ], [ 0, %3341 ], [ 0, %3343 ], [ 1, %3329 ]
  %3348 = phi i8 [ 0, %3339 ], [ 1, %3341 ], [ 0, %3343 ], [ 1, %3329 ]
  store i8 %3346, i8* %15, align 1
  store i8 %3347, i8* %13, align 1
  store i8 %3348, i8* %12, align 1
  br label %3349

; <label>:3349:                                   ; preds = %3345, %3343
  %3350 = phi i8 [ %3346, %3345 ], [ %3314, %3343 ]
  %3351 = phi i8 [ %3348, %3345 ], [ 0, %3343 ]
  store i8 0, i8* %17, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %14, align 1
  br label %routine_ucomiss_MINUS0x430__rbp____xmm0.exit

routine_ucomiss_MINUS0x430__rbp____xmm0.exit:     ; preds = %3349, %3337
  %3352 = phi i8 [ %.pre325, %3337 ], [ %3350, %3349 ]
  %3353 = phi i8 [ %.pre324, %3337 ], [ %3351, %3349 ]
  %3354 = phi i64 [ %.pre323, %3337 ], [ %3323, %3349 ]
  %3355 = phi %struct.Memory* [ %3338, %3337 ], [ %MEMORY.27, %3349 ]
  %3356 = or i8 %3352, %3353
  %3357 = icmp ne i8 %3356, 0
  %.v456 = select i1 %3357, i64 38, i64 6
  %3358 = add i64 %3354, %.v456
  store i64 %3358, i64* %3, align 8
  br i1 %3357, label %block_.L_475fcf, label %routine_ucomiss_MINUS0x430__rbp____xmm0.exit.block_.L_475faf_crit_edge

routine_ucomiss_MINUS0x430__rbp____xmm0.exit.block_.L_475faf_crit_edge: ; preds = %routine_ucomiss_MINUS0x430__rbp____xmm0.exit
  %.pre326 = load i64, i64* %RBP.i, align 8
  br label %block_.L_475faf

block_.L_475faf:                                  ; preds = %routine_ucomiss_MINUS0x430__rbp____xmm0.exit.block_.L_475faf_crit_edge, %block_475f67
  %3359 = phi i64 [ %3317, %block_475f67 ], [ %3358, %routine_ucomiss_MINUS0x430__rbp____xmm0.exit.block_.L_475faf_crit_edge ]
  %3360 = phi i64 [ %3302, %block_475f67 ], [ %.pre326, %routine_ucomiss_MINUS0x430__rbp____xmm0.exit.block_.L_475faf_crit_edge ]
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.27, %block_475f67 ], [ %3355, %routine_ucomiss_MINUS0x430__rbp____xmm0.exit.block_.L_475faf_crit_edge ]
  %3361 = add i64 %3360, -28
  %3362 = add i64 %3359, 4
  store i64 %3362, i64* %3, align 8
  %3363 = inttoptr i64 %3361 to i32*
  %3364 = load i32, i32* %3363, align 4
  %3365 = mul i32 %3364, 20
  %3366 = add i32 %3365, 21
  %3367 = zext i32 %3366 to i64
  store i64 %3367, i64* %RAX.i1404, align 8
  %3368 = icmp ugt i32 %3365, -22
  %3369 = zext i1 %3368 to i8
  store i8 %3369, i8* %12, align 1
  %3370 = and i32 %3366, 253
  %3371 = tail call i32 @llvm.ctpop.i32(i32 %3370)
  %3372 = trunc i32 %3371 to i8
  %3373 = and i8 %3372, 1
  %3374 = xor i8 %3373, 1
  store i8 %3374, i8* %13, align 1
  %3375 = xor i32 %3365, 16
  %3376 = xor i32 %3375, %3366
  %3377 = lshr i32 %3376, 4
  %3378 = trunc i32 %3377 to i8
  %3379 = and i8 %3378, 1
  store i8 %3379, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %3380 = lshr i32 %3366, 31
  %3381 = trunc i32 %3380 to i8
  store i8 %3381, i8* %16, align 1
  %3382 = lshr i32 %3365, 31
  %3383 = xor i32 %3380, %3382
  %3384 = add nuw nsw i32 %3383, %3380
  %3385 = icmp eq i32 %3384, 2
  %3386 = zext i1 %3385 to i8
  store i8 %3386, i8* %17, align 1
  %3387 = add i64 %3360, -32
  %3388 = add i64 %3359, 10
  store i64 %3388, i64* %3, align 8
  %3389 = inttoptr i64 %3387 to i32*
  %3390 = load i32, i32* %3389, align 4
  %3391 = add i32 %3390, %3366
  %3392 = zext i32 %3391 to i64
  store i64 %3392, i64* %RAX.i1404, align 8
  %3393 = icmp ult i32 %3391, %3366
  %3394 = icmp ult i32 %3391, %3390
  %3395 = or i1 %3393, %3394
  %3396 = zext i1 %3395 to i8
  store i8 %3396, i8* %12, align 1
  %3397 = and i32 %3391, 255
  %3398 = tail call i32 @llvm.ctpop.i32(i32 %3397)
  %3399 = trunc i32 %3398 to i8
  %3400 = and i8 %3399, 1
  %3401 = xor i8 %3400, 1
  store i8 %3401, i8* %13, align 1
  %3402 = xor i32 %3390, %3366
  %3403 = xor i32 %3402, %3391
  %3404 = lshr i32 %3403, 4
  %3405 = trunc i32 %3404 to i8
  %3406 = and i8 %3405, 1
  store i8 %3406, i8* %14, align 1
  %3407 = icmp eq i32 %3391, 0
  %3408 = zext i1 %3407 to i8
  store i8 %3408, i8* %15, align 1
  %3409 = lshr i32 %3391, 31
  %3410 = trunc i32 %3409 to i8
  store i8 %3410, i8* %16, align 1
  %3411 = lshr i32 %3390, 31
  %3412 = xor i32 %3409, %3380
  %3413 = xor i32 %3409, %3411
  %3414 = add nuw nsw i32 %3412, %3413
  %3415 = icmp eq i32 %3414, 2
  %3416 = zext i1 %3415 to i8
  store i8 %3416, i8* %17, align 1
  %3417 = add i64 %3360, -1068
  %3418 = add i64 %3359, 16
  store i64 %3418, i64* %3, align 8
  %3419 = inttoptr i64 %3417 to i32*
  store i32 %3391, i32* %3419, align 4
  %3420 = load i64, i64* %RBP.i, align 8
  %3421 = add i64 %3420, -1084
  %3422 = load i64, i64* %3, align 8
  %3423 = add i64 %3422, 8
  store i64 %3423, i64* %3, align 8
  %3424 = inttoptr i64 %3421 to i32*
  %3425 = load i32, i32* %3424, align 4
  store i32 %3425, i32* %1611, align 1
  store float 0.000000e+00, float* %1633, align 1
  store float 0.000000e+00, float* %1634, align 1
  store float 0.000000e+00, float* %1635, align 1
  %3426 = add i64 %3420, -1072
  %3427 = add i64 %3422, 16
  store i64 %3427, i64* %3, align 8
  %3428 = load <2 x float>, <2 x float>* %1617, align 1
  %3429 = extractelement <2 x float> %3428, i32 0
  %3430 = inttoptr i64 %3426 to float*
  store float %3429, float* %3430, align 4
  %.pre327 = load i64, i64* %3, align 8
  br label %block_.L_475fcf

block_.L_475fcf:                                  ; preds = %block_.L_475faf, %routine_ucomiss_MINUS0x430__rbp____xmm0.exit
  %3431 = phi i64 [ %.pre327, %block_.L_475faf ], [ %3358, %routine_ucomiss_MINUS0x430__rbp____xmm0.exit ]
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.28, %block_.L_475faf ], [ %3355, %routine_ucomiss_MINUS0x430__rbp____xmm0.exit ]
  %3432 = add i64 %3431, 5
  store i64 %3432, i64* %3, align 8
  br label %block_.L_475fd4

block_.L_475fd4:                                  ; preds = %block_.L_475fcf, %block_475f4c
  %3433 = phi i64 [ %3204, %block_475f4c ], [ %3432, %block_.L_475fcf ]
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.27, %block_475f4c ], [ %MEMORY.29, %block_.L_475fcf ]
  %3434 = load i64, i64* %RBP.i, align 8
  %3435 = add i64 %3434, -32
  %3436 = add i64 %3433, 8
  store i64 %3436, i64* %3, align 8
  %3437 = inttoptr i64 %3435 to i32*
  %3438 = load i32, i32* %3437, align 4
  %3439 = add i32 %3438, -1
  %3440 = zext i32 %3439 to i64
  store i64 %3440, i64* %RAX.i1404, align 8
  %3441 = icmp ne i32 %3438, 0
  %3442 = zext i1 %3441 to i8
  store i8 %3442, i8* %12, align 1
  %3443 = and i32 %3439, 255
  %3444 = tail call i32 @llvm.ctpop.i32(i32 %3443)
  %3445 = trunc i32 %3444 to i8
  %3446 = and i8 %3445, 1
  %3447 = xor i8 %3446, 1
  store i8 %3447, i8* %13, align 1
  %3448 = xor i32 %3438, 16
  %3449 = xor i32 %3448, %3439
  %3450 = lshr i32 %3449, 4
  %3451 = trunc i32 %3450 to i8
  %3452 = and i8 %3451, 1
  store i8 %3452, i8* %14, align 1
  %3453 = icmp eq i32 %3439, 0
  %3454 = zext i1 %3453 to i8
  store i8 %3454, i8* %15, align 1
  %3455 = lshr i32 %3439, 31
  %3456 = trunc i32 %3455 to i8
  store i8 %3456, i8* %16, align 1
  %3457 = lshr i32 %3438, 31
  %3458 = xor i32 %3455, %3457
  %3459 = xor i32 %3455, 1
  %3460 = add nuw nsw i32 %3458, %3459
  %3461 = icmp eq i32 %3460, 2
  %3462 = zext i1 %3461 to i8
  store i8 %3462, i8* %17, align 1
  %3463 = add i64 %3433, 14
  store i64 %3463, i64* %3, align 8
  store i32 %3439, i32* %3437, align 4
  %3464 = load i64, i64* %3, align 8
  %3465 = add i64 %3464, -160
  store i64 %3465, i64* %3, align 8
  br label %block_.L_475f42

block_.L_475fe7:                                  ; preds = %block_.L_475f42
  %3466 = add i64 %3135, 8
  store i64 %3466, i64* %3, align 8
  %3467 = inttoptr i64 %3136 to i32*
  %3468 = load i32, i32* %3467, align 4
  %3469 = add i32 %3468, 1
  %3470 = zext i32 %3469 to i64
  store i64 %3470, i64* %RAX.i1404, align 8
  %3471 = icmp eq i32 %3468, -1
  %3472 = icmp eq i32 %3469, 0
  %3473 = or i1 %3471, %3472
  %3474 = zext i1 %3473 to i8
  store i8 %3474, i8* %12, align 1
  %3475 = and i32 %3469, 255
  %3476 = tail call i32 @llvm.ctpop.i32(i32 %3475)
  %3477 = trunc i32 %3476 to i8
  %3478 = and i8 %3477, 1
  %3479 = xor i8 %3478, 1
  store i8 %3479, i8* %13, align 1
  %3480 = xor i32 %3469, %3468
  %3481 = lshr i32 %3480, 4
  %3482 = trunc i32 %3481 to i8
  %3483 = and i8 %3482, 1
  store i8 %3483, i8* %14, align 1
  %3484 = zext i1 %3472 to i8
  store i8 %3484, i8* %15, align 1
  %3485 = lshr i32 %3469, 31
  %3486 = trunc i32 %3485 to i8
  store i8 %3486, i8* %16, align 1
  %3487 = lshr i32 %3468, 31
  %3488 = xor i32 %3485, %3487
  %3489 = add nuw nsw i32 %3488, %3485
  %3490 = icmp eq i32 %3489, 2
  %3491 = zext i1 %3490 to i8
  store i8 %3491, i8* %17, align 1
  %3492 = add i64 %3135, 14
  store i64 %3492, i64* %3, align 8
  store i32 %3469, i32* %3467, align 4
  %3493 = load i64, i64* %3, align 8
  %3494 = add i64 %3493, -207
  store i64 %3494, i64* %3, align 8
  br label %block_.L_475f26

block_.L_475ffa:                                  ; preds = %block_.L_475f26
  %3495 = add i64 %3056, -1068
  %3496 = add i64 %3092, 7
  store i64 %3496, i64* %3, align 8
  %3497 = inttoptr i64 %3495 to i32*
  %3498 = load i32, i32* %3497, align 4
  %3499 = sext i32 %3498 to i64
  store i64 %3499, i64* %RAX.i1404, align 8
  %3500 = add nsw i64 %3499, 12099168
  %3501 = add i64 %3092, 15
  store i64 %3501, i64* %3, align 8
  %3502 = inttoptr i64 %3500 to i8*
  %3503 = load i8, i8* %3502, align 1
  %3504 = zext i8 %3503 to i64
  store i64 %3504, i64* %RCX.i1715, align 8
  %3505 = zext i8 %3503 to i32
  %3506 = add nsw i32 %3505, -3
  %3507 = icmp ult i8 %3503, 3
  %3508 = zext i1 %3507 to i8
  store i8 %3508, i8* %12, align 1
  %3509 = and i32 %3506, 255
  %3510 = tail call i32 @llvm.ctpop.i32(i32 %3509)
  %3511 = trunc i32 %3510 to i8
  %3512 = and i8 %3511, 1
  %3513 = xor i8 %3512, 1
  store i8 %3513, i8* %13, align 1
  %3514 = xor i32 %3506, %3505
  %3515 = lshr i32 %3514, 4
  %3516 = trunc i32 %3515 to i8
  %3517 = and i8 %3516, 1
  store i8 %3517, i8* %14, align 1
  %3518 = icmp eq i32 %3506, 0
  %3519 = zext i1 %3518 to i8
  store i8 %3519, i8* %15, align 1
  %3520 = lshr i32 %3506, 31
  %3521 = trunc i32 %3520 to i8
  store i8 %3521, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v453 = select i1 %3518, i64 29, i64 24
  %3522 = add i64 %3092, %.v453
  store i64 %3522, i64* %3, align 8
  br i1 %3518, label %block_.L_476017, label %block_476012

block_476012:                                     ; preds = %block_.L_475ffa
  %3523 = add i64 %3522, 45
  store i64 %3523, i64* %3, align 8
  br label %block_.L_47603f

block_.L_476017:                                  ; preds = %block_.L_475ffa
  store i64 ptrtoint (%G__0x58192c_type* @G__0x58192c to i64), i64* %RDI.i2173, align 8
  store i64 207, i64* %RSI.i2336, align 8
  store i64 ptrtoint (%G__0x5819f6_type* @G__0x5819f6 to i64), i64* %RDX.i1921, align 8
  store i64 4294967295, i64* %RAX.i1404, align 8
  store i64 4294967295, i64* %RCX.i1715, align 8
  store i64 4294967295, i64* %20, align 8
  %3524 = add i64 %3522, -147335
  %3525 = add i64 %3522, 40
  %3526 = load i64, i64* %6, align 8
  %3527 = add i64 %3526, -8
  %3528 = inttoptr i64 %3527 to i64*
  store i64 %3525, i64* %3528, align 8
  store i64 %3527, i64* %6, align 8
  store i64 %3524, i64* %3, align 8
  %call2_47603a = tail call %struct.Memory* @sub_452090.abortgo(%struct.State* nonnull %0, i64 %3524, %struct.Memory* %MEMORY.26)
  %.pre328 = load i64, i64* %RBP.i, align 8
  %.pre329 = load i64, i64* %3, align 8
  br label %block_.L_47603f

block_.L_47603f:                                  ; preds = %block_.L_476017, %block_476012
  %3529 = phi i64 [ %.pre329, %block_.L_476017 ], [ %3523, %block_476012 ]
  %3530 = phi i64 [ %.pre328, %block_.L_476017 ], [ %3056, %block_476012 ]
  %MEMORY.31 = phi %struct.Memory* [ %call2_47603a, %block_.L_476017 ], [ %MEMORY.26, %block_476012 ]
  %3531 = add i64 %3530, -1068
  %3532 = add i64 %3529, 6
  store i64 %3532, i64* %3, align 8
  %3533 = inttoptr i64 %3531 to i32*
  %3534 = load i32, i32* %3533, align 4
  %3535 = zext i32 %3534 to i64
  store i64 %3535, i64* %RAX.i1404, align 8
  %3536 = add i64 %3530, -216
  %3537 = add i64 %3529, 13
  store i64 %3537, i64* %3, align 8
  %3538 = inttoptr i64 %3536 to i32*
  %3539 = load i32, i32* %3538, align 4
  %3540 = sext i32 %3539 to i64
  store i64 %3540, i64* %RCX.i1715, align 8
  %3541 = shl nsw i64 %3540, 2
  %3542 = add i64 %3530, -208
  %3543 = add i64 %3542, %3541
  %3544 = add i64 %3529, 20
  store i64 %3544, i64* %3, align 8
  %3545 = inttoptr i64 %3543 to i32*
  store i32 %3534, i32* %3545, align 4
  %3546 = load i64, i64* %RBP.i, align 8
  %3547 = add i64 %3546, -216
  %3548 = load i64, i64* %3, align 8
  %3549 = add i64 %3548, 6
  store i64 %3549, i64* %3, align 8
  %3550 = inttoptr i64 %3547 to i32*
  %3551 = load i32, i32* %3550, align 4
  %3552 = add i32 %3551, 1
  %3553 = zext i32 %3552 to i64
  store i64 %3553, i64* %RAX.i1404, align 8
  %3554 = icmp eq i32 %3551, -1
  %3555 = icmp eq i32 %3552, 0
  %3556 = or i1 %3554, %3555
  %3557 = zext i1 %3556 to i8
  store i8 %3557, i8* %12, align 1
  %3558 = and i32 %3552, 255
  %3559 = tail call i32 @llvm.ctpop.i32(i32 %3558)
  %3560 = trunc i32 %3559 to i8
  %3561 = and i8 %3560, 1
  %3562 = xor i8 %3561, 1
  store i8 %3562, i8* %13, align 1
  %3563 = xor i32 %3552, %3551
  %3564 = lshr i32 %3563, 4
  %3565 = trunc i32 %3564 to i8
  %3566 = and i8 %3565, 1
  store i8 %3566, i8* %14, align 1
  %3567 = zext i1 %3555 to i8
  store i8 %3567, i8* %15, align 1
  %3568 = lshr i32 %3552, 31
  %3569 = trunc i32 %3568 to i8
  store i8 %3569, i8* %16, align 1
  %3570 = lshr i32 %3551, 31
  %3571 = xor i32 %3568, %3570
  %3572 = add nuw nsw i32 %3571, %3568
  %3573 = icmp eq i32 %3572, 2
  %3574 = zext i1 %3573 to i8
  store i8 %3574, i8* %17, align 1
  %3575 = add i64 %3548, 15
  store i64 %3575, i64* %3, align 8
  store i32 %3552, i32* %3550, align 4
  %3576 = load i64, i64* %3, align 8
  %3577 = add i64 %3576, -486
  store i64 %3577, i64* %3, align 8
  br label %block_.L_475e7c

block_.L_476067:                                  ; preds = %routine_idivl__ecx.exit2171
  %3578 = add i64 %2777, -128
  %3579 = add i64 %2833, 8
  store i64 %3579, i64* %3, align 8
  %3580 = inttoptr i64 %3578 to i32*
  %3581 = load i32, i32* %3580, align 4
  %3582 = zext i32 %3581 to i64
  store i64 %3582, i64* %RCX.i1715, align 8
  %3583 = add i64 %2777, -1184
  %3584 = add i64 %2833, 14
  store i64 %3584, i64* %3, align 8
  %3585 = inttoptr i64 %3583 to i32*
  store i32 20, i32* %3585, align 4
  %3586 = load i32, i32* %ECX.i2918, align 4
  %3587 = zext i32 %3586 to i64
  %3588 = load i64, i64* %3, align 8
  store i64 %3587, i64* %RAX.i1404, align 8
  %3589 = sext i32 %3586 to i64
  %3590 = lshr i64 %3589, 32
  store i64 %3590, i64* %1607, align 8
  %3591 = load i64, i64* %RBP.i, align 8
  %3592 = add i64 %3591, -1184
  %3593 = add i64 %3588, 9
  store i64 %3593, i64* %3, align 8
  %3594 = inttoptr i64 %3592 to i32*
  %3595 = load i32, i32* %3594, align 4
  %3596 = zext i32 %3595 to i64
  store i64 %3596, i64* %RCX.i1715, align 8
  %3597 = add i64 %3588, 11
  store i64 %3597, i64* %3, align 8
  %3598 = sext i32 %3595 to i64
  %3599 = shl nuw i64 %3590, 32
  %3600 = or i64 %3599, %3587
  %3601 = sdiv i64 %3600, %3598
  %3602 = shl i64 %3601, 32
  %3603 = ashr exact i64 %3602, 32
  %3604 = icmp eq i64 %3601, %3603
  br i1 %3604, label %3607, label %3605

; <label>:3605:                                   ; preds = %block_.L_476067
  %3606 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3597, %struct.Memory* %2780)
  %.pre238 = load i64, i64* %RDX.i1921, align 8
  %.pre239 = load i64, i64* %3, align 8
  %.pre240 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1918

; <label>:3607:                                   ; preds = %block_.L_476067
  %3608 = srem i64 %3600, %3598
  %3609 = and i64 %3601, 4294967295
  store i64 %3609, i64* %RAX.i1404, align 8
  %3610 = and i64 %3608, 4294967295
  store i64 %3610, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1918

routine_idivl__ecx.exit1918:                      ; preds = %3607, %3605
  %3611 = phi i64 [ %.pre240, %3605 ], [ %3591, %3607 ]
  %3612 = phi i64 [ %.pre239, %3605 ], [ %3597, %3607 ]
  %3613 = phi i64 [ %.pre238, %3605 ], [ %3610, %3607 ]
  %3614 = phi %struct.Memory* [ %3606, %3605 ], [ %2780, %3607 ]
  %3615 = trunc i64 %3613 to i32
  %3616 = add i32 %3615, -1
  %3617 = zext i32 %3616 to i64
  store i64 %3617, i64* %RDX.i1921, align 8
  %3618 = icmp eq i32 %3615, 0
  %3619 = zext i1 %3618 to i8
  store i8 %3619, i8* %12, align 1
  %3620 = and i32 %3616, 255
  %3621 = tail call i32 @llvm.ctpop.i32(i32 %3620)
  %3622 = trunc i32 %3621 to i8
  %3623 = and i8 %3622, 1
  %3624 = xor i8 %3623, 1
  store i8 %3624, i8* %13, align 1
  %3625 = xor i32 %3616, %3615
  %3626 = lshr i32 %3625, 4
  %3627 = trunc i32 %3626 to i8
  %3628 = and i8 %3627, 1
  store i8 %3628, i8* %14, align 1
  %3629 = icmp eq i32 %3616, 0
  %3630 = zext i1 %3629 to i8
  store i8 %3630, i8* %15, align 1
  %3631 = lshr i32 %3616, 31
  %3632 = trunc i32 %3631 to i8
  store i8 %3632, i8* %16, align 1
  %3633 = lshr i32 %3615, 31
  %3634 = xor i32 %3631, %3633
  %3635 = add nuw nsw i32 %3634, %3633
  %3636 = icmp eq i32 %3635, 2
  %3637 = zext i1 %3636 to i8
  store i8 %3637, i8* %17, align 1
  %3638 = add i64 %3611, -40
  %3639 = add i64 %3612, 6
  store i64 %3639, i64* %3, align 8
  %3640 = inttoptr i64 %3638 to i32*
  store i32 %3616, i32* %3640, align 4
  %.pre241 = load i64, i64* %3, align 8
  br label %block_.L_476086

block_.L_476086:                                  ; preds = %block_4760b0, %routine_idivl__ecx.exit1918
  %3641 = phi i64 [ %.pre241, %routine_idivl__ecx.exit1918 ], [ %3809, %block_4760b0 ]
  %MEMORY.32 = phi %struct.Memory* [ %3614, %routine_idivl__ecx.exit1918 ], [ %3683, %block_4760b0 ]
  store i64 20, i64* %RAX.i1404, align 8
  %3642 = load i64, i64* %RBP.i, align 8
  %3643 = add i64 %3642, -40
  %3644 = add i64 %3641, 8
  store i64 %3644, i64* %3, align 8
  %3645 = inttoptr i64 %3643 to i32*
  %3646 = load i32, i32* %3645, align 4
  %3647 = zext i32 %3646 to i64
  store i64 %3647, i64* %RCX.i1715, align 8
  %3648 = add i64 %3642, -208
  %3649 = add i64 %3641, 14
  store i64 %3649, i64* %3, align 8
  %3650 = inttoptr i64 %3648 to i32*
  %3651 = load i32, i32* %3650, align 4
  %3652 = zext i32 %3651 to i64
  store i64 %3652, i64* %RDX.i1921, align 8
  %3653 = add i64 %3642, -1188
  %3654 = add i64 %3641, 20
  store i64 %3654, i64* %3, align 8
  %3655 = inttoptr i64 %3653 to i32*
  store i32 20, i32* %3655, align 4
  %3656 = load i32, i32* %EDX.i1677, align 4
  %3657 = zext i32 %3656 to i64
  %3658 = load i64, i64* %3, align 8
  store i64 %3657, i64* %RAX.i1404, align 8
  %3659 = sext i32 %3656 to i64
  %3660 = lshr i64 %3659, 32
  store i64 %3660, i64* %1607, align 8
  %3661 = load i64, i64* %RBP.i, align 8
  %3662 = add i64 %3661, -1188
  %3663 = add i64 %3658, 9
  store i64 %3663, i64* %3, align 8
  %3664 = inttoptr i64 %3662 to i32*
  %3665 = load i32, i32* %3664, align 4
  %3666 = zext i32 %3665 to i64
  store i64 %3666, i64* %RSI.i2336, align 8
  %3667 = add i64 %3658, 11
  store i64 %3667, i64* %3, align 8
  %3668 = sext i32 %3665 to i64
  %3669 = shl nuw i64 %3660, 32
  %3670 = or i64 %3669, %3657
  %3671 = sdiv i64 %3670, %3668
  %3672 = shl i64 %3671, 32
  %3673 = ashr exact i64 %3672, 32
  %3674 = icmp eq i64 %3671, %3673
  br i1 %3674, label %3677, label %3675

; <label>:3675:                                   ; preds = %block_.L_476086
  %3676 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3667, %struct.Memory* %MEMORY.32)
  %.pre242 = load i64, i64* %RDX.i1921, align 8
  %.pre243 = load i64, i64* %3, align 8
  br label %routine_idivl__esi.exit1889

; <label>:3677:                                   ; preds = %block_.L_476086
  %3678 = srem i64 %3670, %3668
  %3679 = and i64 %3671, 4294967295
  store i64 %3679, i64* %RAX.i1404, align 8
  %3680 = and i64 %3678, 4294967295
  store i64 %3680, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__esi.exit1889

routine_idivl__esi.exit1889:                      ; preds = %3677, %3675
  %3681 = phi i64 [ %.pre243, %3675 ], [ %3667, %3677 ]
  %3682 = phi i64 [ %.pre242, %3675 ], [ %3680, %3677 ]
  %3683 = phi %struct.Memory* [ %3676, %3675 ], [ %MEMORY.32, %3677 ]
  %3684 = trunc i64 %3682 to i32
  %3685 = add i32 %3684, -1
  %3686 = zext i32 %3685 to i64
  store i64 %3686, i64* %RDX.i1921, align 8
  %3687 = lshr i32 %3685, 31
  %3688 = load i32, i32* %ECX.i2918, align 4
  %3689 = sub i32 %3688, %3685
  %3690 = icmp ult i32 %3688, %3685
  %3691 = zext i1 %3690 to i8
  store i8 %3691, i8* %12, align 1
  %3692 = and i32 %3689, 255
  %3693 = tail call i32 @llvm.ctpop.i32(i32 %3692)
  %3694 = trunc i32 %3693 to i8
  %3695 = and i8 %3694, 1
  %3696 = xor i8 %3695, 1
  store i8 %3696, i8* %13, align 1
  %3697 = xor i32 %3685, %3688
  %3698 = xor i32 %3697, %3689
  %3699 = lshr i32 %3698, 4
  %3700 = trunc i32 %3699 to i8
  %3701 = and i8 %3700, 1
  store i8 %3701, i8* %14, align 1
  %3702 = icmp eq i32 %3689, 0
  %3703 = zext i1 %3702 to i8
  store i8 %3703, i8* %15, align 1
  %3704 = lshr i32 %3689, 31
  %3705 = trunc i32 %3704 to i8
  store i8 %3705, i8* %16, align 1
  %3706 = lshr i32 %3688, 31
  %3707 = xor i32 %3687, %3706
  %3708 = xor i32 %3704, %3706
  %3709 = add nuw nsw i32 %3708, %3707
  %3710 = icmp eq i32 %3709, 2
  %3711 = zext i1 %3710 to i8
  store i8 %3711, i8* %17, align 1
  %3712 = icmp ne i8 %3705, 0
  %3713 = xor i1 %3712, %3710
  %.demorgan = or i1 %3702, %3713
  %.v376 = select i1 %.demorgan, i64 11, i64 49
  %3714 = add i64 %3681, %.v376
  store i64 %3714, i64* %3, align 8
  br i1 %.demorgan, label %block_4760b0, label %block_.L_4760d6

block_4760b0:                                     ; preds = %routine_idivl__esi.exit1889
  %3715 = load i64, i64* %RBP.i, align 8
  %3716 = add i64 %3715, -220
  %3717 = add i64 %3714, 7
  store i64 %3717, i64* %3, align 8
  %3718 = inttoptr i64 %3716 to i32*
  %3719 = load i32, i32* %3718, align 4
  %3720 = mul i32 %3719, 20
  %3721 = add i32 %3720, 21
  %3722 = zext i32 %3721 to i64
  store i64 %3722, i64* %RAX.i1404, align 8
  %3723 = icmp ugt i32 %3720, -22
  %3724 = zext i1 %3723 to i8
  store i8 %3724, i8* %12, align 1
  %3725 = and i32 %3721, 253
  %3726 = tail call i32 @llvm.ctpop.i32(i32 %3725)
  %3727 = trunc i32 %3726 to i8
  %3728 = and i8 %3727, 1
  %3729 = xor i8 %3728, 1
  store i8 %3729, i8* %13, align 1
  %3730 = xor i32 %3720, 16
  %3731 = xor i32 %3730, %3721
  %3732 = lshr i32 %3731, 4
  %3733 = trunc i32 %3732 to i8
  %3734 = and i8 %3733, 1
  store i8 %3734, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %3735 = lshr i32 %3721, 31
  %3736 = trunc i32 %3735 to i8
  store i8 %3736, i8* %16, align 1
  %3737 = lshr i32 %3720, 31
  %3738 = xor i32 %3735, %3737
  %3739 = add nuw nsw i32 %3738, %3735
  %3740 = icmp eq i32 %3739, 2
  %3741 = zext i1 %3740 to i8
  store i8 %3741, i8* %17, align 1
  %3742 = add i64 %3715, -40
  %3743 = add i64 %3714, 13
  store i64 %3743, i64* %3, align 8
  %3744 = inttoptr i64 %3742 to i32*
  %3745 = load i32, i32* %3744, align 4
  %3746 = add i32 %3745, %3721
  %3747 = zext i32 %3746 to i64
  store i64 %3747, i64* %RAX.i1404, align 8
  %3748 = icmp ult i32 %3746, %3721
  %3749 = icmp ult i32 %3746, %3745
  %3750 = or i1 %3748, %3749
  %3751 = zext i1 %3750 to i8
  store i8 %3751, i8* %12, align 1
  %3752 = and i32 %3746, 255
  %3753 = tail call i32 @llvm.ctpop.i32(i32 %3752)
  %3754 = trunc i32 %3753 to i8
  %3755 = and i8 %3754, 1
  %3756 = xor i8 %3755, 1
  store i8 %3756, i8* %13, align 1
  %3757 = xor i32 %3745, %3721
  %3758 = xor i32 %3757, %3746
  %3759 = lshr i32 %3758, 4
  %3760 = trunc i32 %3759 to i8
  %3761 = and i8 %3760, 1
  store i8 %3761, i8* %14, align 1
  %3762 = icmp eq i32 %3746, 0
  %3763 = zext i1 %3762 to i8
  store i8 %3763, i8* %15, align 1
  %3764 = lshr i32 %3746, 31
  %3765 = trunc i32 %3764 to i8
  store i8 %3765, i8* %16, align 1
  %3766 = lshr i32 %3745, 31
  %3767 = xor i32 %3764, %3735
  %3768 = xor i32 %3764, %3766
  %3769 = add nuw nsw i32 %3767, %3768
  %3770 = icmp eq i32 %3769, 2
  %3771 = zext i1 %3770 to i8
  store i8 %3771, i8* %17, align 1
  %3772 = sext i32 %3746 to i64
  store i64 %3772, i64* %RCX.i1715, align 8
  %3773 = load i64, i64* %RBP.i, align 8
  %3774 = add nsw i64 %3772, -1040
  %3775 = add i64 %3774, %3773
  %3776 = add i64 %3714, 24
  store i64 %3776, i64* %3, align 8
  %3777 = inttoptr i64 %3775 to i8*
  store i8 1, i8* %3777, align 1
  %3778 = load i64, i64* %RBP.i, align 8
  %3779 = add i64 %3778, -40
  %3780 = load i64, i64* %3, align 8
  %3781 = add i64 %3780, 3
  store i64 %3781, i64* %3, align 8
  %3782 = inttoptr i64 %3779 to i32*
  %3783 = load i32, i32* %3782, align 4
  %3784 = add i32 %3783, 1
  %3785 = zext i32 %3784 to i64
  store i64 %3785, i64* %RAX.i1404, align 8
  %3786 = icmp eq i32 %3783, -1
  %3787 = icmp eq i32 %3784, 0
  %3788 = or i1 %3786, %3787
  %3789 = zext i1 %3788 to i8
  store i8 %3789, i8* %12, align 1
  %3790 = and i32 %3784, 255
  %3791 = tail call i32 @llvm.ctpop.i32(i32 %3790)
  %3792 = trunc i32 %3791 to i8
  %3793 = and i8 %3792, 1
  %3794 = xor i8 %3793, 1
  store i8 %3794, i8* %13, align 1
  %3795 = xor i32 %3784, %3783
  %3796 = lshr i32 %3795, 4
  %3797 = trunc i32 %3796 to i8
  %3798 = and i8 %3797, 1
  store i8 %3798, i8* %14, align 1
  %3799 = zext i1 %3787 to i8
  store i8 %3799, i8* %15, align 1
  %3800 = lshr i32 %3784, 31
  %3801 = trunc i32 %3800 to i8
  store i8 %3801, i8* %16, align 1
  %3802 = lshr i32 %3783, 31
  %3803 = xor i32 %3800, %3802
  %3804 = add nuw nsw i32 %3803, %3800
  %3805 = icmp eq i32 %3804, 2
  %3806 = zext i1 %3805 to i8
  store i8 %3806, i8* %17, align 1
  %3807 = add i64 %3780, 9
  store i64 %3807, i64* %3, align 8
  store i32 %3784, i32* %3782, align 4
  %3808 = load i64, i64* %3, align 8
  %3809 = add i64 %3808, -75
  store i64 %3809, i64* %3, align 8
  br label %block_.L_476086

block_.L_4760d6:                                  ; preds = %routine_idivl__esi.exit1889
  store i64 20, i64* %RAX.i1404, align 8
  %3810 = load i64, i64* %RBP.i, align 8
  %3811 = add i64 %3810, -212
  %3812 = add i64 %3714, 11
  store i64 %3812, i64* %3, align 8
  %3813 = inttoptr i64 %3811 to i32*
  %3814 = load i32, i32* %3813, align 4
  %3815 = add i32 %3814, -1
  %3816 = zext i32 %3815 to i64
  store i64 %3816, i64* %RCX.i1715, align 8
  %3817 = icmp eq i32 %3814, 0
  %3818 = zext i1 %3817 to i8
  store i8 %3818, i8* %12, align 1
  %3819 = and i32 %3815, 255
  %3820 = tail call i32 @llvm.ctpop.i32(i32 %3819)
  %3821 = trunc i32 %3820 to i8
  %3822 = and i8 %3821, 1
  %3823 = xor i8 %3822, 1
  store i8 %3823, i8* %13, align 1
  %3824 = xor i32 %3815, %3814
  %3825 = lshr i32 %3824, 4
  %3826 = trunc i32 %3825 to i8
  %3827 = and i8 %3826, 1
  store i8 %3827, i8* %14, align 1
  %3828 = icmp eq i32 %3815, 0
  %3829 = zext i1 %3828 to i8
  store i8 %3829, i8* %15, align 1
  %3830 = lshr i32 %3815, 31
  %3831 = trunc i32 %3830 to i8
  store i8 %3831, i8* %16, align 1
  %3832 = lshr i32 %3814, 31
  %3833 = xor i32 %3830, %3832
  %3834 = add nuw nsw i32 %3833, %3832
  %3835 = icmp eq i32 %3834, 2
  %3836 = zext i1 %3835 to i8
  store i8 %3836, i8* %17, align 1
  %3837 = sext i32 %3815 to i64
  store i64 %3837, i64* %RDX.i1921, align 8
  %3838 = shl nsw i64 %3837, 2
  %3839 = add nsw i64 %3838, -128
  %3840 = add i64 %3839, %3810
  %3841 = add i64 %3714, 21
  store i64 %3841, i64* %3, align 8
  %3842 = inttoptr i64 %3840 to i32*
  %3843 = load i32, i32* %3842, align 4
  %3844 = zext i32 %3843 to i64
  store i64 %3844, i64* %RCX.i1715, align 8
  %3845 = add i64 %3810, -1192
  %3846 = add i64 %3714, 27
  store i64 %3846, i64* %3, align 8
  %3847 = inttoptr i64 %3845 to i32*
  store i32 20, i32* %3847, align 4
  %3848 = load i32, i32* %ECX.i2918, align 4
  %3849 = zext i32 %3848 to i64
  %3850 = load i64, i64* %3, align 8
  store i64 %3849, i64* %RAX.i1404, align 8
  %3851 = sext i32 %3848 to i64
  %3852 = lshr i64 %3851, 32
  store i64 %3852, i64* %1607, align 8
  %3853 = load i64, i64* %RBP.i, align 8
  %3854 = add i64 %3853, -1192
  %3855 = add i64 %3850, 9
  store i64 %3855, i64* %3, align 8
  %3856 = inttoptr i64 %3854 to i32*
  %3857 = load i32, i32* %3856, align 4
  %3858 = zext i32 %3857 to i64
  store i64 %3858, i64* %RCX.i1715, align 8
  %3859 = add i64 %3850, 11
  store i64 %3859, i64* %3, align 8
  %3860 = sext i32 %3857 to i64
  %3861 = shl nuw i64 %3852, 32
  %3862 = or i64 %3861, %3849
  %3863 = sdiv i64 %3862, %3860
  %3864 = shl i64 %3863, 32
  %3865 = ashr exact i64 %3864, 32
  %3866 = icmp eq i64 %3863, %3865
  br i1 %3866, label %3869, label %3867

; <label>:3867:                                   ; preds = %block_.L_4760d6
  %3868 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3859, %struct.Memory* %3683)
  %.pre244 = load i64, i64* %RDX.i1921, align 8
  %.pre245 = load i64, i64* %3, align 8
  %.pre246 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1831

; <label>:3869:                                   ; preds = %block_.L_4760d6
  %3870 = srem i64 %3862, %3860
  %3871 = and i64 %3863, 4294967295
  store i64 %3871, i64* %RAX.i1404, align 8
  %3872 = and i64 %3870, 4294967295
  store i64 %3872, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1831

routine_idivl__ecx.exit1831:                      ; preds = %3869, %3867
  %3873 = phi i64 [ %.pre246, %3867 ], [ %3853, %3869 ]
  %3874 = phi i64 [ %.pre245, %3867 ], [ %3859, %3869 ]
  %3875 = phi i64 [ %.pre244, %3867 ], [ %3872, %3869 ]
  %3876 = phi %struct.Memory* [ %3868, %3867 ], [ %3683, %3869 ]
  %3877 = trunc i64 %3875 to i32
  %3878 = add i32 %3877, -1
  %3879 = zext i32 %3878 to i64
  store i64 %3879, i64* %RDX.i1921, align 8
  %3880 = icmp eq i32 %3877, 0
  %3881 = zext i1 %3880 to i8
  store i8 %3881, i8* %12, align 1
  %3882 = and i32 %3878, 255
  %3883 = tail call i32 @llvm.ctpop.i32(i32 %3882)
  %3884 = trunc i32 %3883 to i8
  %3885 = and i8 %3884, 1
  %3886 = xor i8 %3885, 1
  store i8 %3886, i8* %13, align 1
  %3887 = xor i32 %3878, %3877
  %3888 = lshr i32 %3887, 4
  %3889 = trunc i32 %3888 to i8
  %3890 = and i8 %3889, 1
  store i8 %3890, i8* %14, align 1
  %3891 = icmp eq i32 %3878, 0
  %3892 = zext i1 %3891 to i8
  store i8 %3892, i8* %15, align 1
  %3893 = lshr i32 %3878, 31
  %3894 = trunc i32 %3893 to i8
  store i8 %3894, i8* %16, align 1
  %3895 = lshr i32 %3877, 31
  %3896 = xor i32 %3893, %3895
  %3897 = add nuw nsw i32 %3896, %3895
  %3898 = icmp eq i32 %3897, 2
  %3899 = zext i1 %3898 to i8
  store i8 %3899, i8* %17, align 1
  %3900 = add i64 %3873, -40
  %3901 = add i64 %3874, 6
  store i64 %3901, i64* %3, align 8
  %3902 = inttoptr i64 %3900 to i32*
  store i32 %3878, i32* %3902, align 4
  %.pre247 = load i64, i64* %3, align 8
  br label %block_.L_476102

block_.L_476102:                                  ; preds = %block_476139, %routine_idivl__ecx.exit1831
  %3903 = phi i64 [ %.pre247, %routine_idivl__ecx.exit1831 ], [ %4100, %block_476139 ]
  %MEMORY.33 = phi %struct.Memory* [ %3876, %routine_idivl__ecx.exit1831 ], [ %3975, %block_476139 ]
  store i64 20, i64* %RAX.i1404, align 8
  %3904 = load i64, i64* %RBP.i, align 8
  %3905 = add i64 %3904, -40
  %3906 = add i64 %3903, 8
  store i64 %3906, i64* %3, align 8
  %3907 = inttoptr i64 %3905 to i32*
  %3908 = load i32, i32* %3907, align 4
  %3909 = zext i32 %3908 to i64
  store i64 %3909, i64* %RCX.i1715, align 8
  %3910 = add i64 %3904, -216
  %3911 = add i64 %3903, 14
  store i64 %3911, i64* %3, align 8
  %3912 = inttoptr i64 %3910 to i32*
  %3913 = load i32, i32* %3912, align 4
  %3914 = add i32 %3913, -1
  %3915 = zext i32 %3914 to i64
  store i64 %3915, i64* %RDX.i1921, align 8
  %3916 = icmp eq i32 %3913, 0
  %3917 = zext i1 %3916 to i8
  store i8 %3917, i8* %12, align 1
  %3918 = and i32 %3914, 255
  %3919 = tail call i32 @llvm.ctpop.i32(i32 %3918)
  %3920 = trunc i32 %3919 to i8
  %3921 = and i8 %3920, 1
  %3922 = xor i8 %3921, 1
  store i8 %3922, i8* %13, align 1
  %3923 = xor i32 %3914, %3913
  %3924 = lshr i32 %3923, 4
  %3925 = trunc i32 %3924 to i8
  %3926 = and i8 %3925, 1
  store i8 %3926, i8* %14, align 1
  %3927 = icmp eq i32 %3914, 0
  %3928 = zext i1 %3927 to i8
  store i8 %3928, i8* %15, align 1
  %3929 = lshr i32 %3914, 31
  %3930 = trunc i32 %3929 to i8
  store i8 %3930, i8* %16, align 1
  %3931 = lshr i32 %3913, 31
  %3932 = xor i32 %3929, %3931
  %3933 = add nuw nsw i32 %3932, %3931
  %3934 = icmp eq i32 %3933, 2
  %3935 = zext i1 %3934 to i8
  store i8 %3935, i8* %17, align 1
  %3936 = sext i32 %3914 to i64
  store i64 %3936, i64* %RSI.i2336, align 8
  %3937 = shl nsw i64 %3936, 2
  %3938 = add nsw i64 %3937, -208
  %3939 = add i64 %3938, %3904
  %3940 = add i64 %3903, 27
  store i64 %3940, i64* %3, align 8
  %3941 = inttoptr i64 %3939 to i32*
  %3942 = load i32, i32* %3941, align 4
  %3943 = zext i32 %3942 to i64
  store i64 %3943, i64* %RDX.i1921, align 8
  %3944 = add i64 %3904, -1196
  %3945 = add i64 %3903, 33
  store i64 %3945, i64* %3, align 8
  %3946 = inttoptr i64 %3944 to i32*
  store i32 20, i32* %3946, align 4
  %3947 = load i32, i32* %EDX.i1677, align 4
  %3948 = zext i32 %3947 to i64
  %3949 = load i64, i64* %3, align 8
  store i64 %3948, i64* %RAX.i1404, align 8
  %3950 = sext i32 %3947 to i64
  %3951 = lshr i64 %3950, 32
  store i64 %3951, i64* %1607, align 8
  %3952 = load i64, i64* %RBP.i, align 8
  %3953 = add i64 %3952, -1196
  %3954 = add i64 %3949, 9
  store i64 %3954, i64* %3, align 8
  %3955 = inttoptr i64 %3953 to i32*
  %3956 = load i32, i32* %3955, align 4
  %3957 = zext i32 %3956 to i64
  store i64 %3957, i64* %RDI.i2173, align 8
  %3958 = add i64 %3949, 11
  store i64 %3958, i64* %3, align 8
  %3959 = sext i32 %3956 to i64
  %3960 = shl nuw i64 %3951, 32
  %3961 = or i64 %3960, %3948
  %3962 = sdiv i64 %3961, %3959
  %3963 = shl i64 %3962, 32
  %3964 = ashr exact i64 %3963, 32
  %3965 = icmp eq i64 %3962, %3964
  br i1 %3965, label %3968, label %3966

; <label>:3966:                                   ; preds = %block_.L_476102
  %3967 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %3958, %struct.Memory* %MEMORY.33)
  %.pre248 = load i64, i64* %RDX.i1921, align 8
  %.pre249 = load i64, i64* %3, align 8
  %.pre250 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__edi.exit

; <label>:3968:                                   ; preds = %block_.L_476102
  %3969 = srem i64 %3961, %3959
  %3970 = and i64 %3962, 4294967295
  store i64 %3970, i64* %RAX.i1404, align 8
  %3971 = and i64 %3969, 4294967295
  store i64 %3971, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__edi.exit

routine_idivl__edi.exit:                          ; preds = %3968, %3966
  %3972 = phi i64 [ %.pre250, %3966 ], [ %3952, %3968 ]
  %3973 = phi i64 [ %.pre249, %3966 ], [ %3958, %3968 ]
  %3974 = phi i64 [ %.pre248, %3966 ], [ %3971, %3968 ]
  %3975 = phi %struct.Memory* [ %3967, %3966 ], [ %MEMORY.33, %3968 ]
  %3976 = trunc i64 %3974 to i32
  %3977 = add i32 %3976, -1
  %3978 = zext i32 %3977 to i64
  store i64 %3978, i64* %RDX.i1921, align 8
  %3979 = lshr i32 %3977, 31
  %3980 = load i32, i32* %ECX.i2918, align 4
  %3981 = sub i32 %3980, %3977
  %3982 = icmp ult i32 %3980, %3977
  %3983 = zext i1 %3982 to i8
  store i8 %3983, i8* %12, align 1
  %3984 = and i32 %3981, 255
  %3985 = tail call i32 @llvm.ctpop.i32(i32 %3984)
  %3986 = trunc i32 %3985 to i8
  %3987 = and i8 %3986, 1
  %3988 = xor i8 %3987, 1
  store i8 %3988, i8* %13, align 1
  %3989 = xor i32 %3977, %3980
  %3990 = xor i32 %3989, %3981
  %3991 = lshr i32 %3990, 4
  %3992 = trunc i32 %3991 to i8
  %3993 = and i8 %3992, 1
  store i8 %3993, i8* %14, align 1
  %3994 = icmp eq i32 %3981, 0
  %3995 = zext i1 %3994 to i8
  store i8 %3995, i8* %15, align 1
  %3996 = lshr i32 %3981, 31
  %3997 = trunc i32 %3996 to i8
  store i8 %3997, i8* %16, align 1
  %3998 = lshr i32 %3980, 31
  %3999 = xor i32 %3979, %3998
  %4000 = xor i32 %3996, %3998
  %4001 = add nuw nsw i32 %4000, %3999
  %4002 = icmp eq i32 %4001, 2
  %4003 = zext i1 %4002 to i8
  store i8 %4003, i8* %17, align 1
  %4004 = icmp ne i8 %3997, 0
  %4005 = xor i1 %4004, %4002
  %.demorgan350 = or i1 %3994, %4005
  %.v377 = select i1 %.demorgan350, i64 11, i64 49
  %4006 = add i64 %3973, %.v377
  store i64 %4006, i64* %3, align 8
  br i1 %.demorgan350, label %block_476139, label %block_.L_47615f

block_476139:                                     ; preds = %routine_idivl__edi.exit
  %4007 = add i64 %3972, -224
  %4008 = add i64 %4006, 7
  store i64 %4008, i64* %3, align 8
  %4009 = inttoptr i64 %4007 to i32*
  %4010 = load i32, i32* %4009, align 4
  %4011 = mul i32 %4010, 20
  %4012 = add i32 %4011, 21
  %4013 = zext i32 %4012 to i64
  store i64 %4013, i64* %RAX.i1404, align 8
  %4014 = icmp ugt i32 %4011, -22
  %4015 = zext i1 %4014 to i8
  store i8 %4015, i8* %12, align 1
  %4016 = and i32 %4012, 253
  %4017 = tail call i32 @llvm.ctpop.i32(i32 %4016)
  %4018 = trunc i32 %4017 to i8
  %4019 = and i8 %4018, 1
  %4020 = xor i8 %4019, 1
  store i8 %4020, i8* %13, align 1
  %4021 = xor i32 %4011, 16
  %4022 = xor i32 %4021, %4012
  %4023 = lshr i32 %4022, 4
  %4024 = trunc i32 %4023 to i8
  %4025 = and i8 %4024, 1
  store i8 %4025, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %4026 = lshr i32 %4012, 31
  %4027 = trunc i32 %4026 to i8
  store i8 %4027, i8* %16, align 1
  %4028 = lshr i32 %4011, 31
  %4029 = xor i32 %4026, %4028
  %4030 = add nuw nsw i32 %4029, %4026
  %4031 = icmp eq i32 %4030, 2
  %4032 = zext i1 %4031 to i8
  store i8 %4032, i8* %17, align 1
  %4033 = add i64 %3972, -40
  %4034 = add i64 %4006, 13
  store i64 %4034, i64* %3, align 8
  %4035 = inttoptr i64 %4033 to i32*
  %4036 = load i32, i32* %4035, align 4
  %4037 = add i32 %4036, %4012
  %4038 = zext i32 %4037 to i64
  store i64 %4038, i64* %RAX.i1404, align 8
  %4039 = icmp ult i32 %4037, %4012
  %4040 = icmp ult i32 %4037, %4036
  %4041 = or i1 %4039, %4040
  %4042 = zext i1 %4041 to i8
  store i8 %4042, i8* %12, align 1
  %4043 = and i32 %4037, 255
  %4044 = tail call i32 @llvm.ctpop.i32(i32 %4043)
  %4045 = trunc i32 %4044 to i8
  %4046 = and i8 %4045, 1
  %4047 = xor i8 %4046, 1
  store i8 %4047, i8* %13, align 1
  %4048 = xor i32 %4036, %4012
  %4049 = xor i32 %4048, %4037
  %4050 = lshr i32 %4049, 4
  %4051 = trunc i32 %4050 to i8
  %4052 = and i8 %4051, 1
  store i8 %4052, i8* %14, align 1
  %4053 = icmp eq i32 %4037, 0
  %4054 = zext i1 %4053 to i8
  store i8 %4054, i8* %15, align 1
  %4055 = lshr i32 %4037, 31
  %4056 = trunc i32 %4055 to i8
  store i8 %4056, i8* %16, align 1
  %4057 = lshr i32 %4036, 31
  %4058 = xor i32 %4055, %4026
  %4059 = xor i32 %4055, %4057
  %4060 = add nuw nsw i32 %4058, %4059
  %4061 = icmp eq i32 %4060, 2
  %4062 = zext i1 %4061 to i8
  store i8 %4062, i8* %17, align 1
  %4063 = sext i32 %4037 to i64
  store i64 %4063, i64* %RCX.i1715, align 8
  %4064 = load i64, i64* %RBP.i, align 8
  %4065 = add nsw i64 %4063, -1040
  %4066 = add i64 %4065, %4064
  %4067 = add i64 %4006, 24
  store i64 %4067, i64* %3, align 8
  %4068 = inttoptr i64 %4066 to i8*
  store i8 1, i8* %4068, align 1
  %4069 = load i64, i64* %RBP.i, align 8
  %4070 = add i64 %4069, -40
  %4071 = load i64, i64* %3, align 8
  %4072 = add i64 %4071, 3
  store i64 %4072, i64* %3, align 8
  %4073 = inttoptr i64 %4070 to i32*
  %4074 = load i32, i32* %4073, align 4
  %4075 = add i32 %4074, 1
  %4076 = zext i32 %4075 to i64
  store i64 %4076, i64* %RAX.i1404, align 8
  %4077 = icmp eq i32 %4074, -1
  %4078 = icmp eq i32 %4075, 0
  %4079 = or i1 %4077, %4078
  %4080 = zext i1 %4079 to i8
  store i8 %4080, i8* %12, align 1
  %4081 = and i32 %4075, 255
  %4082 = tail call i32 @llvm.ctpop.i32(i32 %4081)
  %4083 = trunc i32 %4082 to i8
  %4084 = and i8 %4083, 1
  %4085 = xor i8 %4084, 1
  store i8 %4085, i8* %13, align 1
  %4086 = xor i32 %4075, %4074
  %4087 = lshr i32 %4086, 4
  %4088 = trunc i32 %4087 to i8
  %4089 = and i8 %4088, 1
  store i8 %4089, i8* %14, align 1
  %4090 = zext i1 %4078 to i8
  store i8 %4090, i8* %15, align 1
  %4091 = lshr i32 %4075, 31
  %4092 = trunc i32 %4091 to i8
  store i8 %4092, i8* %16, align 1
  %4093 = lshr i32 %4074, 31
  %4094 = xor i32 %4091, %4093
  %4095 = add nuw nsw i32 %4094, %4091
  %4096 = icmp eq i32 %4095, 2
  %4097 = zext i1 %4096 to i8
  store i8 %4097, i8* %17, align 1
  %4098 = add i64 %4071, 9
  store i64 %4098, i64* %3, align 8
  store i32 %4075, i32* %4073, align 4
  %4099 = load i64, i64* %3, align 8
  %4100 = add i64 %4099, -88
  store i64 %4100, i64* %3, align 8
  br label %block_.L_476102

block_.L_47615f:                                  ; preds = %routine_idivl__edi.exit
  %4101 = add i64 %3972, -220
  %4102 = add i64 %4006, 6
  store i64 %4102, i64* %3, align 8
  %4103 = inttoptr i64 %4101 to i32*
  %4104 = load i32, i32* %4103, align 4
  %4105 = add i32 %4104, 1
  %4106 = zext i32 %4105 to i64
  store i64 %4106, i64* %RAX.i1404, align 8
  %4107 = icmp eq i32 %4104, -1
  %4108 = icmp eq i32 %4105, 0
  %4109 = or i1 %4107, %4108
  %4110 = zext i1 %4109 to i8
  store i8 %4110, i8* %12, align 1
  %4111 = and i32 %4105, 255
  %4112 = tail call i32 @llvm.ctpop.i32(i32 %4111)
  %4113 = trunc i32 %4112 to i8
  %4114 = and i8 %4113, 1
  %4115 = xor i8 %4114, 1
  store i8 %4115, i8* %13, align 1
  %4116 = xor i32 %4105, %4104
  %4117 = lshr i32 %4116, 4
  %4118 = trunc i32 %4117 to i8
  %4119 = and i8 %4118, 1
  store i8 %4119, i8* %14, align 1
  %4120 = zext i1 %4108 to i8
  store i8 %4120, i8* %15, align 1
  %4121 = lshr i32 %4105, 31
  %4122 = trunc i32 %4121 to i8
  store i8 %4122, i8* %16, align 1
  %4123 = lshr i32 %4104, 31
  %4124 = xor i32 %4121, %4123
  %4125 = add nuw nsw i32 %4124, %4121
  %4126 = icmp eq i32 %4125, 2
  %4127 = zext i1 %4126 to i8
  store i8 %4127, i8* %17, align 1
  %4128 = add i64 %3972, -36
  %4129 = add i64 %4006, 12
  store i64 %4129, i64* %3, align 8
  %4130 = inttoptr i64 %4128 to i32*
  store i32 %4105, i32* %4130, align 4
  %4131 = bitcast [32 x %union.VectorReg]* %1608 to double*
  %4132 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %1608, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4133 = bitcast i64* %1610 to double*
  %4134 = bitcast %union.VectorReg* %1621 to double*
  %4135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4136 = bitcast %union.VectorReg* %4135 to i8*
  %4137 = bitcast %union.VectorReg* %4135 to float*
  %4138 = bitcast %union.VectorReg* %4135 to i32*
  %4139 = getelementptr inbounds i8, i8* %4136, i64 4
  %4140 = bitcast i8* %4139 to float*
  %4141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %4142 = bitcast i64* %4141 to float*
  %4143 = getelementptr inbounds i8, i8* %4136, i64 12
  %4144 = bitcast i8* %4143 to float*
  %4145 = bitcast %union.VectorReg* %4135 to <2 x float>*
  %4146 = bitcast i64* %4141 to <2 x i32>*
  %4147 = bitcast i8* %4139 to i32*
  %4148 = bitcast i64* %4141 to i32*
  %4149 = bitcast i8* %4143 to i32*
  %.pre251 = load i64, i64* %3, align 8
  br label %block_.L_47616b

block_.L_47616b:                                  ; preds = %block_.L_476456, %block_.L_47615f
  %4150 = phi i64 [ %.pre251, %block_.L_47615f ], [ %5576, %block_.L_476456 ]
  %MEMORY.34 = phi %struct.Memory* [ %3975, %block_.L_47615f ], [ %MEMORY.38, %block_.L_476456 ]
  %4151 = load i64, i64* %RBP.i, align 8
  %4152 = add i64 %4151, -36
  %4153 = add i64 %4150, 3
  store i64 %4153, i64* %3, align 8
  %4154 = inttoptr i64 %4152 to i32*
  %4155 = load i32, i32* %4154, align 4
  %4156 = zext i32 %4155 to i64
  store i64 %4156, i64* %RAX.i1404, align 8
  %4157 = add i64 %4151, -224
  %4158 = add i64 %4150, 9
  store i64 %4158, i64* %3, align 8
  %4159 = inttoptr i64 %4157 to i32*
  %4160 = load i32, i32* %4159, align 4
  %4161 = sub i32 %4155, %4160
  %4162 = icmp ult i32 %4155, %4160
  %4163 = zext i1 %4162 to i8
  store i8 %4163, i8* %12, align 1
  %4164 = and i32 %4161, 255
  %4165 = tail call i32 @llvm.ctpop.i32(i32 %4164)
  %4166 = trunc i32 %4165 to i8
  %4167 = and i8 %4166, 1
  %4168 = xor i8 %4167, 1
  store i8 %4168, i8* %13, align 1
  %4169 = xor i32 %4160, %4155
  %4170 = xor i32 %4169, %4161
  %4171 = lshr i32 %4170, 4
  %4172 = trunc i32 %4171 to i8
  %4173 = and i8 %4172, 1
  store i8 %4173, i8* %14, align 1
  %4174 = icmp eq i32 %4161, 0
  %4175 = zext i1 %4174 to i8
  store i8 %4175, i8* %15, align 1
  %4176 = lshr i32 %4161, 31
  %4177 = trunc i32 %4176 to i8
  store i8 %4177, i8* %16, align 1
  %4178 = lshr i32 %4155, 31
  %4179 = lshr i32 %4160, 31
  %4180 = xor i32 %4179, %4178
  %4181 = xor i32 %4176, %4178
  %4182 = add nuw nsw i32 %4181, %4180
  %4183 = icmp eq i32 %4182, 2
  %4184 = zext i1 %4183 to i8
  store i8 %4184, i8* %17, align 1
  %4185 = icmp ne i8 %4177, 0
  %4186 = xor i1 %4185, %4183
  %.v378 = select i1 %4186, i64 15, i64 766
  %4187 = add i64 %4150, %.v378
  store i64 %4187, i64* %3, align 8
  br i1 %4186, label %block_47617a, label %block_.L_476469

block_47617a:                                     ; preds = %block_.L_47616b
  %4188 = add i64 %4151, -1088
  %4189 = add i64 %4187, 10
  store i64 %4189, i64* %3, align 8
  %4190 = inttoptr i64 %4188 to i32*
  store i32 -1, i32* %4190, align 4
  %4191 = load i64, i64* %RBP.i, align 8
  %4192 = add i64 %4191, -1092
  %4193 = load i64, i64* %3, align 8
  %4194 = add i64 %4193, 10
  store i64 %4194, i64* %3, align 8
  %4195 = inttoptr i64 %4192 to i32*
  store i32 -1, i32* %4195, align 4
  %4196 = load i64, i64* %RBP.i, align 8
  %4197 = add i64 %4196, -44
  %4198 = load i64, i64* %3, align 8
  %4199 = add i64 %4198, 7
  store i64 %4199, i64* %3, align 8
  %4200 = inttoptr i64 %4197 to i32*
  store i32 1, i32* %4200, align 4
  %.pre280 = load i64, i64* %3, align 8
  br label %block_.L_476195

block_.L_476195:                                  ; preds = %block_.L_4762ba, %block_47617a
  %4201 = phi i64 [ %.pre280, %block_47617a ], [ %4801, %block_.L_4762ba ]
  %MEMORY.35 = phi %struct.Memory* [ %MEMORY.34, %block_47617a ], [ %4280, %block_.L_4762ba ]
  %4202 = load i64, i64* %RBP.i, align 8
  %4203 = add i64 %4202, -44
  %4204 = add i64 %4201, 3
  store i64 %4204, i64* %3, align 8
  %4205 = inttoptr i64 %4203 to i32*
  %4206 = load i32, i32* %4205, align 4
  %4207 = zext i32 %4206 to i64
  store i64 %4207, i64* %RAX.i1404, align 8
  %4208 = add i64 %4202, -212
  %4209 = add i64 %4201, 9
  store i64 %4209, i64* %3, align 8
  %4210 = inttoptr i64 %4208 to i32*
  %4211 = load i32, i32* %4210, align 4
  %4212 = sub i32 %4206, %4211
  %4213 = icmp ult i32 %4206, %4211
  %4214 = zext i1 %4213 to i8
  store i8 %4214, i8* %12, align 1
  %4215 = and i32 %4212, 255
  %4216 = tail call i32 @llvm.ctpop.i32(i32 %4215)
  %4217 = trunc i32 %4216 to i8
  %4218 = and i8 %4217, 1
  %4219 = xor i8 %4218, 1
  store i8 %4219, i8* %13, align 1
  %4220 = xor i32 %4211, %4206
  %4221 = xor i32 %4220, %4212
  %4222 = lshr i32 %4221, 4
  %4223 = trunc i32 %4222 to i8
  %4224 = and i8 %4223, 1
  store i8 %4224, i8* %14, align 1
  %4225 = icmp eq i32 %4212, 0
  %4226 = zext i1 %4225 to i8
  store i8 %4226, i8* %15, align 1
  %4227 = lshr i32 %4212, 31
  %4228 = trunc i32 %4227 to i8
  store i8 %4228, i8* %16, align 1
  %4229 = lshr i32 %4206, 31
  %4230 = lshr i32 %4211, 31
  %4231 = xor i32 %4230, %4229
  %4232 = xor i32 %4227, %4229
  %4233 = add nuw nsw i32 %4232, %4231
  %4234 = icmp eq i32 %4233, 2
  %4235 = zext i1 %4234 to i8
  store i8 %4235, i8* %17, align 1
  %4236 = icmp ne i8 %4228, 0
  %4237 = xor i1 %4236, %4234
  %.v450 = select i1 %4237, i64 15, i64 312
  %4238 = add i64 %4201, %.v450
  store i64 %4238, i64* %3, align 8
  br i1 %4237, label %block_4761a4, label %block_.L_4762cd.loopexit

block_4761a4:                                     ; preds = %block_.L_476195
  store i64 20, i64* %RAX.i1404, align 8
  %4239 = add i64 %4238, 9
  store i64 %4239, i64* %3, align 8
  %4240 = load i32, i32* %4205, align 4
  %4241 = sext i32 %4240 to i64
  store i64 %4241, i64* %RCX.i1715, align 8
  %4242 = shl nsw i64 %4241, 2
  %4243 = add i64 %4202, -128
  %4244 = add i64 %4243, %4242
  %4245 = add i64 %4238, 13
  store i64 %4245, i64* %3, align 8
  %4246 = inttoptr i64 %4244 to i32*
  %4247 = load i32, i32* %4246, align 4
  %4248 = zext i32 %4247 to i64
  store i64 %4248, i64* %RDX.i1921, align 8
  %4249 = add i64 %4202, -1200
  %4250 = add i64 %4238, 19
  store i64 %4250, i64* %3, align 8
  %4251 = inttoptr i64 %4249 to i32*
  store i32 20, i32* %4251, align 4
  %4252 = load i32, i32* %EDX.i1677, align 4
  %4253 = zext i32 %4252 to i64
  %4254 = load i64, i64* %3, align 8
  store i64 %4253, i64* %RAX.i1404, align 8
  %4255 = sext i32 %4252 to i64
  %4256 = lshr i64 %4255, 32
  store i64 %4256, i64* %1607, align 8
  %4257 = load i64, i64* %RBP.i, align 8
  %4258 = add i64 %4257, -1200
  %4259 = add i64 %4254, 9
  store i64 %4259, i64* %3, align 8
  %4260 = inttoptr i64 %4258 to i32*
  %4261 = load i32, i32* %4260, align 4
  %4262 = zext i32 %4261 to i64
  store i64 %4262, i64* %RSI.i2336, align 8
  %4263 = add i64 %4254, 11
  store i64 %4263, i64* %3, align 8
  %4264 = sext i32 %4261 to i64
  %4265 = shl nuw i64 %4256, 32
  %4266 = or i64 %4265, %4253
  %4267 = sdiv i64 %4266, %4264
  %4268 = shl i64 %4267, 32
  %4269 = ashr exact i64 %4268, 32
  %4270 = icmp eq i64 %4267, %4269
  br i1 %4270, label %4273, label %4271

; <label>:4271:                                   ; preds = %block_4761a4
  %4272 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4263, %struct.Memory* %MEMORY.35)
  %.pre281 = load i64, i64* %RAX.i1404, align 8
  %.pre282 = load i64, i64* %3, align 8
  %.pre283 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit1713

; <label>:4273:                                   ; preds = %block_4761a4
  %4274 = srem i64 %4266, %4264
  %4275 = and i64 %4267, 4294967295
  store i64 %4275, i64* %RAX.i1404, align 8
  %4276 = and i64 %4274, 4294967295
  store i64 %4276, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__esi.exit1713

routine_idivl__esi.exit1713:                      ; preds = %4273, %4271
  %4277 = phi i64 [ %.pre283, %4271 ], [ %4257, %4273 ]
  %4278 = phi i64 [ %.pre282, %4271 ], [ %4263, %4273 ]
  %4279 = phi i64 [ %.pre281, %4271 ], [ %4275, %4273 ]
  %4280 = phi %struct.Memory* [ %4272, %4271 ], [ %MEMORY.35, %4273 ]
  %4281 = trunc i64 %4279 to i32
  %4282 = add i32 %4281, -1
  %4283 = zext i32 %4282 to i64
  store i64 %4283, i64* %RAX.i1404, align 8
  %4284 = icmp eq i32 %4281, 0
  %4285 = zext i1 %4284 to i8
  store i8 %4285, i8* %12, align 1
  %4286 = and i32 %4282, 255
  %4287 = tail call i32 @llvm.ctpop.i32(i32 %4286)
  %4288 = trunc i32 %4287 to i8
  %4289 = and i8 %4288, 1
  %4290 = xor i8 %4289, 1
  store i8 %4290, i8* %13, align 1
  %4291 = xor i32 %4282, %4281
  %4292 = lshr i32 %4291, 4
  %4293 = trunc i32 %4292 to i8
  %4294 = and i8 %4293, 1
  store i8 %4294, i8* %14, align 1
  %4295 = icmp eq i32 %4282, 0
  %4296 = zext i1 %4295 to i8
  store i8 %4296, i8* %15, align 1
  %4297 = lshr i32 %4282, 31
  %4298 = trunc i32 %4297 to i8
  store i8 %4298, i8* %16, align 1
  %4299 = lshr i32 %4281, 31
  %4300 = xor i32 %4297, %4299
  %4301 = add nuw nsw i32 %4300, %4299
  %4302 = icmp eq i32 %4301, 2
  %4303 = zext i1 %4302 to i8
  store i8 %4303, i8* %17, align 1
  %4304 = add i64 %4277, -36
  %4305 = add i64 %4278, 6
  store i64 %4305, i64* %3, align 8
  %4306 = inttoptr i64 %4304 to i32*
  %4307 = load i32, i32* %4306, align 4
  %4308 = sub i32 %4282, %4307
  %4309 = icmp ult i32 %4282, %4307
  %4310 = zext i1 %4309 to i8
  store i8 %4310, i8* %12, align 1
  %4311 = and i32 %4308, 255
  %4312 = tail call i32 @llvm.ctpop.i32(i32 %4311)
  %4313 = trunc i32 %4312 to i8
  %4314 = and i8 %4313, 1
  %4315 = xor i8 %4314, 1
  store i8 %4315, i8* %13, align 1
  %4316 = xor i32 %4307, %4282
  %4317 = xor i32 %4316, %4308
  %4318 = lshr i32 %4317, 4
  %4319 = trunc i32 %4318 to i8
  %4320 = and i8 %4319, 1
  store i8 %4320, i8* %14, align 1
  %4321 = icmp eq i32 %4308, 0
  %4322 = zext i1 %4321 to i8
  store i8 %4322, i8* %15, align 1
  %4323 = lshr i32 %4308, 31
  %4324 = trunc i32 %4323 to i8
  store i8 %4324, i8* %16, align 1
  %4325 = lshr i32 %4307, 31
  %4326 = xor i32 %4325, %4297
  %4327 = xor i32 %4323, %4297
  %4328 = add nuw nsw i32 %4327, %4326
  %4329 = icmp eq i32 %4328, 2
  %4330 = zext i1 %4329 to i8
  store i8 %4330, i8* %17, align 1
  %4331 = icmp ne i8 %4324, 0
  %4332 = xor i1 %4331, %4329
  %4333 = or i1 %4321, %4332
  %.v362 = select i1 %4333, i64 248, i64 12
  %4334 = add i64 %4278, %.v362
  store i64 %4334, i64* %3, align 8
  br i1 %4333, label %block_.L_4762ba, label %block_4761ce

block_4761ce:                                     ; preds = %routine_idivl__esi.exit1713
  %4335 = add i64 %4334, ptrtoint (%G_0x6cea2__rip__type* @G_0x6cea2__rip_ to i64)
  %4336 = add i64 %4334, 8
  store i64 %4336, i64* %3, align 8
  %4337 = inttoptr i64 %4335 to i64*
  %4338 = load i64, i64* %4337, align 8
  store i64 %4338, i64* %4132, align 1
  store double 0.000000e+00, double* %4133, align 1
  store i64 20, i64* %RAX.i1404, align 8
  %4339 = add i64 %4277, -44
  %4340 = add i64 %4334, 16
  store i64 %4340, i64* %3, align 8
  %4341 = inttoptr i64 %4339 to i32*
  %4342 = load i32, i32* %4341, align 4
  %4343 = add i32 %4342, -1
  %4344 = zext i32 %4343 to i64
  store i64 %4344, i64* %RCX.i1715, align 8
  %4345 = icmp eq i32 %4342, 0
  %4346 = zext i1 %4345 to i8
  store i8 %4346, i8* %12, align 1
  %4347 = and i32 %4343, 255
  %4348 = tail call i32 @llvm.ctpop.i32(i32 %4347)
  %4349 = trunc i32 %4348 to i8
  %4350 = and i8 %4349, 1
  %4351 = xor i8 %4350, 1
  store i8 %4351, i8* %13, align 1
  %4352 = xor i32 %4343, %4342
  %4353 = lshr i32 %4352, 4
  %4354 = trunc i32 %4353 to i8
  %4355 = and i8 %4354, 1
  store i8 %4355, i8* %14, align 1
  %4356 = icmp eq i32 %4343, 0
  %4357 = zext i1 %4356 to i8
  store i8 %4357, i8* %15, align 1
  %4358 = lshr i32 %4343, 31
  %4359 = trunc i32 %4358 to i8
  store i8 %4359, i8* %16, align 1
  %4360 = lshr i32 %4342, 31
  %4361 = xor i32 %4358, %4360
  %4362 = add nuw nsw i32 %4361, %4360
  %4363 = icmp eq i32 %4362, 2
  %4364 = zext i1 %4363 to i8
  store i8 %4364, i8* %17, align 1
  %4365 = sext i32 %4343 to i64
  store i64 %4365, i64* %RDX.i1921, align 8
  %4366 = shl nsw i64 %4365, 2
  %4367 = add nsw i64 %4366, -128
  %4368 = add i64 %4367, %4277
  %4369 = add i64 %4334, 26
  store i64 %4369, i64* %3, align 8
  %4370 = inttoptr i64 %4368 to i32*
  %4371 = load i32, i32* %4370, align 4
  %4372 = zext i32 %4371 to i64
  store i64 %4372, i64* %RCX.i1715, align 8
  %4373 = add i64 %4277, -1204
  %4374 = add i64 %4334, 32
  store i64 %4374, i64* %3, align 8
  %4375 = inttoptr i64 %4373 to i32*
  store i32 20, i32* %4375, align 4
  %4376 = load i32, i32* %ECX.i2918, align 4
  %4377 = zext i32 %4376 to i64
  %4378 = load i64, i64* %3, align 8
  store i64 %4377, i64* %RAX.i1404, align 8
  %4379 = sext i32 %4376 to i64
  %4380 = lshr i64 %4379, 32
  store i64 %4380, i64* %1607, align 8
  %4381 = load i64, i64* %RBP.i, align 8
  %4382 = add i64 %4381, -1204
  %4383 = add i64 %4378, 9
  store i64 %4383, i64* %3, align 8
  %4384 = inttoptr i64 %4382 to i32*
  %4385 = load i32, i32* %4384, align 4
  %4386 = zext i32 %4385 to i64
  store i64 %4386, i64* %RCX.i1715, align 8
  %4387 = add i64 %4378, 11
  store i64 %4387, i64* %3, align 8
  %4388 = sext i32 %4385 to i64
  %4389 = shl nuw i64 %4380, 32
  %4390 = or i64 %4389, %4377
  %4391 = sdiv i64 %4390, %4388
  %4392 = shl i64 %4391, 32
  %4393 = ashr exact i64 %4392, 32
  %4394 = icmp eq i64 %4391, %4393
  br i1 %4394, label %4397, label %4395

; <label>:4395:                                   ; preds = %block_4761ce
  %4396 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4387, %struct.Memory* %4280)
  %.pre284 = load i64, i64* %RAX.i1404, align 8
  %.pre285 = load i64, i64* %3, align 8
  %.pre286 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1675

; <label>:4397:                                   ; preds = %block_4761ce
  %4398 = srem i64 %4390, %4388
  %4399 = and i64 %4391, 4294967295
  store i64 %4399, i64* %RAX.i1404, align 8
  %4400 = and i64 %4398, 4294967295
  store i64 %4400, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1675

routine_idivl__ecx.exit1675:                      ; preds = %4397, %4395
  %4401 = phi i64 [ %.pre286, %4395 ], [ %4381, %4397 ]
  %4402 = phi i64 [ %.pre285, %4395 ], [ %4387, %4397 ]
  %4403 = phi i64 [ %.pre284, %4395 ], [ %4399, %4397 ]
  %4404 = phi %struct.Memory* [ %4396, %4395 ], [ %4280, %4397 ]
  %4405 = trunc i64 %4403 to i32
  %4406 = add i32 %4405, -1
  %4407 = zext i32 %4406 to i64
  store i64 %4407, i64* %RAX.i1404, align 8
  %4408 = icmp eq i32 %4405, 0
  %4409 = zext i1 %4408 to i8
  store i8 %4409, i8* %12, align 1
  %4410 = and i32 %4406, 255
  %4411 = tail call i32 @llvm.ctpop.i32(i32 %4410)
  %4412 = trunc i32 %4411 to i8
  %4413 = and i8 %4412, 1
  %4414 = xor i8 %4413, 1
  store i8 %4414, i8* %13, align 1
  %4415 = xor i32 %4406, %4405
  %4416 = lshr i32 %4415, 4
  %4417 = trunc i32 %4416 to i8
  %4418 = and i8 %4417, 1
  store i8 %4418, i8* %14, align 1
  %4419 = icmp eq i32 %4406, 0
  %4420 = zext i1 %4419 to i8
  store i8 %4420, i8* %15, align 1
  %4421 = lshr i32 %4406, 31
  %4422 = trunc i32 %4421 to i8
  store i8 %4422, i8* %16, align 1
  %4423 = lshr i32 %4405, 31
  %4424 = xor i32 %4421, %4423
  %4425 = add nuw nsw i32 %4424, %4423
  %4426 = icmp eq i32 %4425, 2
  %4427 = zext i1 %4426 to i8
  store i8 %4427, i8* %17, align 1
  %4428 = load <2 x i32>, <2 x i32>* %1623, align 1
  %4429 = load <2 x i32>, <2 x i32>* %1625, align 1
  %4430 = sitofp i32 %4406 to float
  store float %4430, float* %1626, align 1
  %4431 = extractelement <2 x i32> %4428, i32 1
  store i32 %4431, i32* %1628, align 1
  %4432 = extractelement <2 x i32> %4429, i32 0
  store i32 %4432, i32* %1629, align 1
  %4433 = extractelement <2 x i32> %4429, i32 1
  store i32 %4433, i32* %1631, align 1
  %4434 = add i64 %4401, -1096
  %4435 = add i64 %4402, 15
  store i64 %4435, i64* %3, align 8
  %4436 = load <2 x float>, <2 x float>* %1632, align 1
  %4437 = extractelement <2 x float> %4436, i32 0
  %4438 = inttoptr i64 %4434 to float*
  store float %4437, float* %4438, align 4
  %4439 = load i64, i64* %RBP.i, align 8
  %4440 = add i64 %4439, -44
  %4441 = load i64, i64* %3, align 8
  %4442 = add i64 %4441, 3
  store i64 %4442, i64* %3, align 8
  %4443 = inttoptr i64 %4440 to i32*
  %4444 = load i32, i32* %4443, align 4
  %4445 = add i32 %4444, -1
  %4446 = zext i32 %4445 to i64
  store i64 %4446, i64* %RAX.i1404, align 8
  %4447 = icmp eq i32 %4444, 0
  %4448 = zext i1 %4447 to i8
  store i8 %4448, i8* %12, align 1
  %4449 = and i32 %4445, 255
  %4450 = tail call i32 @llvm.ctpop.i32(i32 %4449)
  %4451 = trunc i32 %4450 to i8
  %4452 = and i8 %4451, 1
  %4453 = xor i8 %4452, 1
  store i8 %4453, i8* %13, align 1
  %4454 = xor i32 %4445, %4444
  %4455 = lshr i32 %4454, 4
  %4456 = trunc i32 %4455 to i8
  %4457 = and i8 %4456, 1
  store i8 %4457, i8* %14, align 1
  %4458 = icmp eq i32 %4445, 0
  %4459 = zext i1 %4458 to i8
  store i8 %4459, i8* %15, align 1
  %4460 = lshr i32 %4445, 31
  %4461 = trunc i32 %4460 to i8
  store i8 %4461, i8* %16, align 1
  %4462 = lshr i32 %4444, 31
  %4463 = xor i32 %4460, %4462
  %4464 = add nuw nsw i32 %4463, %4462
  %4465 = icmp eq i32 %4464, 2
  %4466 = zext i1 %4465 to i8
  store i8 %4466, i8* %17, align 1
  %4467 = sext i32 %4445 to i64
  store i64 %4467, i64* %RSI.i2336, align 8
  %4468 = shl nsw i64 %4467, 2
  %4469 = add nsw i64 %4468, -128
  %4470 = add i64 %4469, %4439
  %4471 = add i64 %4441, 13
  store i64 %4471, i64* %3, align 8
  %4472 = inttoptr i64 %4470 to i32*
  %4473 = load i32, i32* %4472, align 4
  %4474 = zext i32 %4473 to i64
  store i64 %4474, i64* %RAX.i1404, align 8
  %4475 = sext i32 %4473 to i64
  %4476 = lshr i64 %4475, 32
  store i64 %4476, i64* %1607, align 8
  %4477 = load i32, i32* %ECX.i2918, align 4
  %4478 = add i64 %4441, 16
  store i64 %4478, i64* %3, align 8
  %4479 = sext i32 %4477 to i64
  %4480 = shl nuw i64 %4476, 32
  %4481 = or i64 %4480, %4474
  %4482 = sdiv i64 %4481, %4479
  %4483 = shl i64 %4482, 32
  %4484 = ashr exact i64 %4483, 32
  %4485 = icmp eq i64 %4482, %4484
  br i1 %4485, label %4488, label %4486

; <label>:4486:                                   ; preds = %routine_idivl__ecx.exit1675
  %4487 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4478, %struct.Memory* %4404)
  %.pre287 = load i64, i64* %RDX.i1921, align 8
  %.pre288 = load i64, i64* %3, align 8
  %.pre289 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1648

; <label>:4488:                                   ; preds = %routine_idivl__ecx.exit1675
  %4489 = srem i64 %4481, %4479
  %4490 = and i64 %4482, 4294967295
  store i64 %4490, i64* %RAX.i1404, align 8
  %4491 = and i64 %4489, 4294967295
  store i64 %4491, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1648

routine_idivl__ecx.exit1648:                      ; preds = %4488, %4486
  %4492 = phi i64 [ %.pre289, %4486 ], [ %4439, %4488 ]
  %4493 = phi i64 [ %.pre288, %4486 ], [ %4478, %4488 ]
  %4494 = phi i64 [ %.pre287, %4486 ], [ %4491, %4488 ]
  %4495 = phi %struct.Memory* [ %4487, %4486 ], [ %4404, %4488 ]
  %4496 = trunc i64 %4494 to i32
  %4497 = add i32 %4496, -1
  %4498 = zext i32 %4497 to i64
  store i64 %4498, i64* %RDX.i1921, align 8
  %4499 = icmp eq i32 %4496, 0
  %4500 = zext i1 %4499 to i8
  store i8 %4500, i8* %12, align 1
  %4501 = and i32 %4497, 255
  %4502 = tail call i32 @llvm.ctpop.i32(i32 %4501)
  %4503 = trunc i32 %4502 to i8
  %4504 = and i8 %4503, 1
  %4505 = xor i8 %4504, 1
  store i8 %4505, i8* %13, align 1
  %4506 = xor i32 %4497, %4496
  %4507 = lshr i32 %4506, 4
  %4508 = trunc i32 %4507 to i8
  %4509 = and i8 %4508, 1
  store i8 %4509, i8* %14, align 1
  %4510 = icmp eq i32 %4497, 0
  %4511 = zext i1 %4510 to i8
  store i8 %4511, i8* %15, align 1
  %4512 = lshr i32 %4497, 31
  %4513 = trunc i32 %4512 to i8
  store i8 %4513, i8* %16, align 1
  %4514 = lshr i32 %4496, 31
  %4515 = xor i32 %4512, %4514
  %4516 = add nuw nsw i32 %4515, %4514
  %4517 = icmp eq i32 %4516, 2
  %4518 = zext i1 %4517 to i8
  store i8 %4518, i8* %17, align 1
  %4519 = load <2 x i32>, <2 x i32>* %1623, align 1
  %4520 = load <2 x i32>, <2 x i32>* %1625, align 1
  %4521 = sitofp i32 %4497 to float
  store float %4521, float* %1626, align 1
  %4522 = extractelement <2 x i32> %4519, i32 1
  store i32 %4522, i32* %1628, align 1
  %4523 = extractelement <2 x i32> %4520, i32 0
  store i32 %4523, i32* %1629, align 1
  %4524 = extractelement <2 x i32> %4520, i32 1
  store i32 %4524, i32* %1631, align 1
  %4525 = add i64 %4492, -1100
  %4526 = add i64 %4493, 15
  store i64 %4526, i64* %3, align 8
  %4527 = load <2 x float>, <2 x float>* %1632, align 1
  %4528 = extractelement <2 x float> %4527, i32 0
  %4529 = inttoptr i64 %4525 to float*
  store float %4528, float* %4529, align 4
  %4530 = load i64, i64* %RBP.i, align 8
  %4531 = add i64 %4530, -44
  %4532 = load i64, i64* %3, align 8
  %4533 = add i64 %4532, 4
  store i64 %4533, i64* %3, align 8
  %4534 = inttoptr i64 %4531 to i32*
  %4535 = load i32, i32* %4534, align 4
  %4536 = sext i32 %4535 to i64
  store i64 %4536, i64* %RSI.i2336, align 8
  %4537 = shl nsw i64 %4536, 2
  %4538 = add i64 %4530, -128
  %4539 = add i64 %4538, %4537
  %4540 = add i64 %4532, 8
  store i64 %4540, i64* %3, align 8
  %4541 = inttoptr i64 %4539 to i32*
  %4542 = load i32, i32* %4541, align 4
  %4543 = zext i32 %4542 to i64
  store i64 %4543, i64* %RAX.i1404, align 8
  %4544 = sext i32 %4542 to i64
  %4545 = lshr i64 %4544, 32
  store i64 %4545, i64* %1607, align 8
  %4546 = load i32, i32* %ECX.i2918, align 4
  %4547 = add i64 %4532, 13
  store i64 %4547, i64* %3, align 8
  %4548 = sext i32 %4546 to i64
  %4549 = shl nuw i64 %4545, 32
  %4550 = or i64 %4549, %4543
  %4551 = sdiv i64 %4550, %4548
  %4552 = shl i64 %4551, 32
  %4553 = ashr exact i64 %4552, 32
  %4554 = icmp eq i64 %4551, %4553
  br i1 %4554, label %4557, label %4555

; <label>:4555:                                   ; preds = %routine_idivl__ecx.exit1648
  %4556 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4547, %struct.Memory* %4495)
  %.pre290 = load i64, i64* %RAX.i1404, align 8
  %.pre291 = load i64, i64* %3, align 8
  %.pre292 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1624

; <label>:4557:                                   ; preds = %routine_idivl__ecx.exit1648
  %4558 = srem i64 %4550, %4548
  %4559 = and i64 %4551, 4294967295
  store i64 %4559, i64* %RAX.i1404, align 8
  %4560 = and i64 %4558, 4294967295
  store i64 %4560, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1624

routine_idivl__ecx.exit1624:                      ; preds = %4557, %4555
  %4561 = phi i64 [ %.pre292, %4555 ], [ %4530, %4557 ]
  %4562 = phi i64 [ %.pre291, %4555 ], [ %4547, %4557 ]
  %4563 = phi i64 [ %.pre290, %4555 ], [ %4559, %4557 ]
  %4564 = phi %struct.Memory* [ %4556, %4555 ], [ %4495, %4557 ]
  %4565 = trunc i64 %4563 to i32
  %4566 = add i32 %4565, -1
  %4567 = zext i32 %4566 to i64
  store i64 %4567, i64* %RAX.i1404, align 8
  %4568 = icmp eq i32 %4565, 0
  %4569 = zext i1 %4568 to i8
  store i8 %4569, i8* %12, align 1
  %4570 = and i32 %4566, 255
  %4571 = tail call i32 @llvm.ctpop.i32(i32 %4570)
  %4572 = trunc i32 %4571 to i8
  %4573 = and i8 %4572, 1
  %4574 = xor i8 %4573, 1
  store i8 %4574, i8* %13, align 1
  %4575 = xor i32 %4566, %4565
  %4576 = lshr i32 %4575, 4
  %4577 = trunc i32 %4576 to i8
  %4578 = and i8 %4577, 1
  store i8 %4578, i8* %14, align 1
  %4579 = icmp eq i32 %4566, 0
  %4580 = zext i1 %4579 to i8
  store i8 %4580, i8* %15, align 1
  %4581 = lshr i32 %4566, 31
  %4582 = trunc i32 %4581 to i8
  store i8 %4582, i8* %16, align 1
  %4583 = lshr i32 %4565, 31
  %4584 = xor i32 %4581, %4583
  %4585 = add nuw nsw i32 %4584, %4583
  %4586 = icmp eq i32 %4585, 2
  %4587 = zext i1 %4586 to i8
  store i8 %4587, i8* %17, align 1
  %4588 = load <2 x i32>, <2 x i32>* %1623, align 1
  %4589 = load <2 x i32>, <2 x i32>* %1625, align 1
  %4590 = sitofp i32 %4566 to float
  store float %4590, float* %1626, align 1
  %4591 = extractelement <2 x i32> %4588, i32 1
  store i32 %4591, i32* %1628, align 1
  %4592 = extractelement <2 x i32> %4589, i32 0
  store i32 %4592, i32* %1629, align 1
  %4593 = extractelement <2 x i32> %4589, i32 1
  store i32 %4593, i32* %1631, align 1
  %4594 = add i64 %4561, -1104
  %4595 = add i64 %4562, 15
  store i64 %4595, i64* %3, align 8
  %4596 = load <2 x float>, <2 x float>* %1632, align 1
  %4597 = extractelement <2 x float> %4596, i32 0
  %4598 = inttoptr i64 %4594 to float*
  store float %4597, float* %4598, align 4
  %4599 = load i64, i64* %RBP.i, align 8
  %4600 = add i64 %4599, -44
  %4601 = load i64, i64* %3, align 8
  %4602 = add i64 %4601, 4
  store i64 %4602, i64* %3, align 8
  %4603 = inttoptr i64 %4600 to i32*
  %4604 = load i32, i32* %4603, align 4
  %4605 = sext i32 %4604 to i64
  store i64 %4605, i64* %RSI.i2336, align 8
  %4606 = shl nsw i64 %4605, 2
  %4607 = add i64 %4599, -128
  %4608 = add i64 %4607, %4606
  %4609 = add i64 %4601, 8
  store i64 %4609, i64* %3, align 8
  %4610 = inttoptr i64 %4608 to i32*
  %4611 = load i32, i32* %4610, align 4
  %4612 = zext i32 %4611 to i64
  store i64 %4612, i64* %RAX.i1404, align 8
  %4613 = sext i32 %4611 to i64
  %4614 = lshr i64 %4613, 32
  store i64 %4614, i64* %1607, align 8
  %4615 = load i32, i32* %ECX.i2918, align 4
  %4616 = add i64 %4601, 11
  store i64 %4616, i64* %3, align 8
  %4617 = sext i32 %4615 to i64
  %4618 = shl nuw i64 %4614, 32
  %4619 = or i64 %4618, %4612
  %4620 = sdiv i64 %4619, %4617
  %4621 = shl i64 %4620, 32
  %4622 = ashr exact i64 %4621, 32
  %4623 = icmp eq i64 %4620, %4622
  br i1 %4623, label %4626, label %4624

; <label>:4624:                                   ; preds = %routine_idivl__ecx.exit1624
  %4625 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4616, %struct.Memory* %4564)
  %.pre293 = load i64, i64* %RDX.i1921, align 8
  %.pre294 = load i64, i64* %3, align 8
  %.pre295 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1603

; <label>:4626:                                   ; preds = %routine_idivl__ecx.exit1624
  %4627 = srem i64 %4619, %4617
  %4628 = and i64 %4620, 4294967295
  store i64 %4628, i64* %RAX.i1404, align 8
  %4629 = and i64 %4627, 4294967295
  store i64 %4629, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1603

routine_idivl__ecx.exit1603:                      ; preds = %4626, %4624
  %4630 = phi i64 [ %.pre295, %4624 ], [ %4599, %4626 ]
  %4631 = phi i64 [ %.pre294, %4624 ], [ %4616, %4626 ]
  %4632 = phi i64 [ %.pre293, %4624 ], [ %4629, %4626 ]
  %4633 = phi %struct.Memory* [ %4625, %4624 ], [ %4564, %4626 ]
  %4634 = trunc i64 %4632 to i32
  %4635 = add i32 %4634, -1
  %4636 = zext i32 %4635 to i64
  store i64 %4636, i64* %RDX.i1921, align 8
  %4637 = icmp eq i32 %4634, 0
  %4638 = zext i1 %4637 to i8
  store i8 %4638, i8* %12, align 1
  %4639 = and i32 %4635, 255
  %4640 = tail call i32 @llvm.ctpop.i32(i32 %4639)
  %4641 = trunc i32 %4640 to i8
  %4642 = and i8 %4641, 1
  %4643 = xor i8 %4642, 1
  store i8 %4643, i8* %13, align 1
  %4644 = xor i32 %4635, %4634
  %4645 = lshr i32 %4644, 4
  %4646 = trunc i32 %4645 to i8
  %4647 = and i8 %4646, 1
  store i8 %4647, i8* %14, align 1
  %4648 = icmp eq i32 %4635, 0
  %4649 = zext i1 %4648 to i8
  store i8 %4649, i8* %15, align 1
  %4650 = lshr i32 %4635, 31
  %4651 = trunc i32 %4650 to i8
  store i8 %4651, i8* %16, align 1
  %4652 = lshr i32 %4634, 31
  %4653 = xor i32 %4650, %4652
  %4654 = add nuw nsw i32 %4653, %4652
  %4655 = icmp eq i32 %4654, 2
  %4656 = zext i1 %4655 to i8
  store i8 %4656, i8* %17, align 1
  %4657 = load <2 x i32>, <2 x i32>* %1623, align 1
  %4658 = load <2 x i32>, <2 x i32>* %1625, align 1
  %4659 = sitofp i32 %4635 to float
  store float %4659, float* %1626, align 1
  %4660 = extractelement <2 x i32> %4657, i32 1
  store i32 %4660, i32* %1628, align 1
  %4661 = extractelement <2 x i32> %4658, i32 0
  store i32 %4661, i32* %1629, align 1
  %4662 = extractelement <2 x i32> %4658, i32 1
  store i32 %4662, i32* %1631, align 1
  %4663 = add i64 %4630, -1108
  %4664 = add i64 %4631, 15
  store i64 %4664, i64* %3, align 8
  %4665 = load <2 x float>, <2 x float>* %1632, align 1
  %4666 = extractelement <2 x float> %4665, i32 0
  %4667 = inttoptr i64 %4663 to float*
  store float %4666, float* %4667, align 4
  %4668 = load i64, i64* %RBP.i, align 8
  %4669 = add i64 %4668, -1100
  %4670 = load i64, i64* %3, align 8
  %4671 = add i64 %4670, 8
  store i64 %4671, i64* %3, align 8
  %4672 = inttoptr i64 %4669 to float*
  %4673 = load float, float* %4672, align 4
  %4674 = fpext float %4673 to double
  store double %4674, double* %4134, align 1
  %4675 = load double, double* %4131, align 1
  %4676 = fadd double %4674, %4675
  store double %4676, double* %4131, align 1
  %4677 = add i64 %4668, -36
  %4678 = add i64 %4670, 17
  store i64 %4678, i64* %3, align 8
  %4679 = bitcast double %4674 to <2 x i32>
  %4680 = load <2 x i32>, <2 x i32>* %1625, align 1
  %4681 = inttoptr i64 %4677 to i32*
  %4682 = load i32, i32* %4681, align 4
  %4683 = sitofp i32 %4682 to float
  store float %4683, float* %1626, align 1
  %4684 = extractelement <2 x i32> %4679, i32 1
  store i32 %4684, i32* %1628, align 1
  %4685 = extractelement <2 x i32> %4680, i32 0
  store i32 %4685, i32* %1629, align 1
  %4686 = extractelement <2 x i32> %4680, i32 1
  store i32 %4686, i32* %1631, align 1
  %4687 = add i64 %4668, -1096
  %4688 = add i64 %4670, 25
  store i64 %4688, i64* %3, align 8
  %4689 = load <2 x float>, <2 x float>* %1632, align 1
  %4690 = load <2 x i32>, <2 x i32>* %1625, align 1
  %4691 = inttoptr i64 %4687 to float*
  %4692 = load float, float* %4691, align 4
  %4693 = extractelement <2 x float> %4689, i32 0
  %4694 = fsub float %4693, %4692
  store float %4694, float* %1626, align 1
  %4695 = bitcast <2 x float> %4689 to <2 x i32>
  %4696 = extractelement <2 x i32> %4695, i32 1
  store i32 %4696, i32* %1628, align 1
  %4697 = extractelement <2 x i32> %4690, i32 0
  store i32 %4697, i32* %1629, align 1
  %4698 = extractelement <2 x i32> %4690, i32 1
  store i32 %4698, i32* %1631, align 1
  %4699 = add i64 %4668, -1108
  %4700 = add i64 %4670, 33
  store i64 %4700, i64* %3, align 8
  %4701 = inttoptr i64 %4699 to i32*
  %4702 = load i32, i32* %4701, align 4
  store i32 %4702, i32* %4138, align 1
  store float 0.000000e+00, float* %4140, align 1
  store float 0.000000e+00, float* %4142, align 1
  store float 0.000000e+00, float* %4144, align 1
  %4703 = add i64 %4670, 41
  store i64 %4703, i64* %3, align 8
  %4704 = load <2 x float>, <2 x float>* %4145, align 1
  %4705 = load <2 x i32>, <2 x i32>* %4146, align 1
  %4706 = load float, float* %4672, align 4
  %4707 = extractelement <2 x float> %4704, i32 0
  %4708 = fsub float %4707, %4706
  store float %4708, float* %4137, align 1
  %4709 = bitcast <2 x float> %4704 to <2 x i32>
  %4710 = extractelement <2 x i32> %4709, i32 1
  store i32 %4710, i32* %4147, align 1
  %4711 = extractelement <2 x i32> %4705, i32 0
  store i32 %4711, i32* %4148, align 1
  %4712 = extractelement <2 x i32> %4705, i32 1
  store i32 %4712, i32* %4149, align 1
  %4713 = load <2 x float>, <2 x float>* %1632, align 1
  %4714 = load <2 x i32>, <2 x i32>* %1625, align 1
  %4715 = load <2 x float>, <2 x float>* %4145, align 1
  %4716 = extractelement <2 x float> %4713, i32 0
  %4717 = extractelement <2 x float> %4715, i32 0
  %4718 = fmul float %4716, %4717
  store float %4718, float* %1626, align 1
  %4719 = bitcast <2 x float> %4713 to <2 x i32>
  %4720 = extractelement <2 x i32> %4719, i32 1
  store i32 %4720, i32* %1628, align 1
  %4721 = extractelement <2 x i32> %4714, i32 0
  store i32 %4721, i32* %1629, align 1
  %4722 = extractelement <2 x i32> %4714, i32 1
  store i32 %4722, i32* %1631, align 1
  %4723 = add i64 %4668, -1104
  %4724 = add i64 %4670, 53
  store i64 %4724, i64* %3, align 8
  %4725 = inttoptr i64 %4723 to i32*
  %4726 = load i32, i32* %4725, align 4
  store i32 %4726, i32* %4138, align 1
  store float 0.000000e+00, float* %4140, align 1
  store float 0.000000e+00, float* %4142, align 1
  store float 0.000000e+00, float* %4144, align 1
  %4727 = add i64 %4670, 61
  store i64 %4727, i64* %3, align 8
  %4728 = load <2 x float>, <2 x float>* %4145, align 1
  %4729 = load <2 x i32>, <2 x i32>* %4146, align 1
  %4730 = load float, float* %4691, align 4
  %4731 = extractelement <2 x float> %4728, i32 0
  %4732 = fsub float %4731, %4730
  store float %4732, float* %4137, align 1
  %4733 = bitcast <2 x float> %4728 to <2 x i32>
  %4734 = extractelement <2 x i32> %4733, i32 1
  store i32 %4734, i32* %4147, align 1
  %4735 = extractelement <2 x i32> %4729, i32 0
  store i32 %4735, i32* %4148, align 1
  %4736 = extractelement <2 x i32> %4729, i32 1
  store i32 %4736, i32* %4149, align 1
  %4737 = load <2 x float>, <2 x float>* %1632, align 1
  %4738 = load <2 x i32>, <2 x i32>* %1625, align 1
  %4739 = load <2 x float>, <2 x float>* %4145, align 1
  %4740 = extractelement <2 x float> %4737, i32 0
  %4741 = extractelement <2 x float> %4739, i32 0
  %4742 = fdiv float %4740, %4741
  store float %4742, float* %1626, align 1
  %4743 = bitcast <2 x float> %4737 to <2 x i32>
  %4744 = extractelement <2 x i32> %4743, i32 1
  store i32 %4744, i32* %1628, align 1
  %4745 = extractelement <2 x i32> %4738, i32 0
  store i32 %4745, i32* %1629, align 1
  %4746 = extractelement <2 x i32> %4738, i32 1
  store i32 %4746, i32* %1631, align 1
  %4747 = load <2 x float>, <2 x float>* %1632, align 1
  %4748 = extractelement <2 x float> %4747, i32 0
  %4749 = fpext float %4748 to double
  store double %4749, double* %4134, align 1
  %4750 = load double, double* %4131, align 1
  %4751 = fadd double %4749, %4750
  store double %4751, double* %4131, align 1
  %4752 = add i64 %4670, -479341
  %4753 = add i64 %4670, 78
  %4754 = load i64, i64* %6, align 8
  %4755 = add i64 %4754, -8
  %4756 = inttoptr i64 %4755 to i64*
  store i64 %4753, i64* %4756, align 8
  store i64 %4755, i64* %6, align 8
  store i64 %4752, i64* %3, align 8
  %call2_4762a6 = tail call %struct.Memory* @sub_4011f0.ceil_plt(%struct.State* nonnull %0, i64 %4752, %struct.Memory* %4633)
  %4757 = load i64, i64* %3, align 8
  %4758 = load double, double* %4131, align 1
  %4759 = tail call double @llvm.trunc.f64(double %4758)
  %4760 = tail call double @llvm.fabs.f64(double %4759)
  %4761 = fcmp ogt double %4760, 0x41DFFFFFFFC00000
  %4762 = fptosi double %4759 to i32
  %4763 = zext i32 %4762 to i64
  %4764 = select i1 %4761, i64 2147483648, i64 %4763
  store i64 %4764, i64* %RCX.i1715, align 8
  %4765 = load i64, i64* %RBP.i, align 8
  %4766 = add i64 %4765, -1088
  %4767 = trunc i64 %4764 to i32
  %4768 = add i64 %4757, 10
  store i64 %4768, i64* %3, align 8
  %4769 = inttoptr i64 %4766 to i32*
  store i32 %4767, i32* %4769, align 4
  %4770 = load i64, i64* %3, align 8
  %4771 = add i64 %4770, 24
  store i64 %4771, i64* %3, align 8
  %.pre296 = load i64, i64* %RBP.i, align 8
  br label %block_.L_4762cd

block_.L_4762ba:                                  ; preds = %routine_idivl__esi.exit1713
  %4772 = add i64 %4277, -44
  %4773 = add i64 %4334, 8
  store i64 %4773, i64* %3, align 8
  %4774 = inttoptr i64 %4772 to i32*
  %4775 = load i32, i32* %4774, align 4
  %4776 = add i32 %4775, 1
  %4777 = zext i32 %4776 to i64
  store i64 %4777, i64* %RAX.i1404, align 8
  %4778 = icmp eq i32 %4775, -1
  %4779 = icmp eq i32 %4776, 0
  %4780 = or i1 %4778, %4779
  %4781 = zext i1 %4780 to i8
  store i8 %4781, i8* %12, align 1
  %4782 = and i32 %4776, 255
  %4783 = tail call i32 @llvm.ctpop.i32(i32 %4782)
  %4784 = trunc i32 %4783 to i8
  %4785 = and i8 %4784, 1
  %4786 = xor i8 %4785, 1
  store i8 %4786, i8* %13, align 1
  %4787 = xor i32 %4776, %4775
  %4788 = lshr i32 %4787, 4
  %4789 = trunc i32 %4788 to i8
  %4790 = and i8 %4789, 1
  store i8 %4790, i8* %14, align 1
  %4791 = zext i1 %4779 to i8
  store i8 %4791, i8* %15, align 1
  %4792 = lshr i32 %4776, 31
  %4793 = trunc i32 %4792 to i8
  store i8 %4793, i8* %16, align 1
  %4794 = lshr i32 %4775, 31
  %4795 = xor i32 %4792, %4794
  %4796 = add nuw nsw i32 %4795, %4792
  %4797 = icmp eq i32 %4796, 2
  %4798 = zext i1 %4797 to i8
  store i8 %4798, i8* %17, align 1
  %4799 = add i64 %4334, 14
  store i64 %4799, i64* %3, align 8
  store i32 %4776, i32* %4774, align 4
  %4800 = load i64, i64* %3, align 8
  %4801 = add i64 %4800, -307
  store i64 %4801, i64* %3, align 8
  br label %block_.L_476195

block_.L_4762cd.loopexit:                         ; preds = %block_.L_476195
  br label %block_.L_4762cd

block_.L_4762cd:                                  ; preds = %block_.L_4762cd.loopexit, %routine_idivl__ecx.exit1603
  %4802 = phi i64 [ %4771, %routine_idivl__ecx.exit1603 ], [ %4238, %block_.L_4762cd.loopexit ]
  %4803 = phi i64 [ %.pre296, %routine_idivl__ecx.exit1603 ], [ %4202, %block_.L_4762cd.loopexit ]
  %MEMORY.36 = phi %struct.Memory* [ %call2_4762a6, %routine_idivl__ecx.exit1603 ], [ %MEMORY.35, %block_.L_4762cd.loopexit ]
  %4804 = add i64 %4803, -44
  %4805 = add i64 %4802, 7
  store i64 %4805, i64* %3, align 8
  %4806 = inttoptr i64 %4804 to i32*
  store i32 1, i32* %4806, align 4
  %.pre297 = load i64, i64* %3, align 8
  br label %block_.L_4762d4

block_.L_4762d4:                                  ; preds = %block_.L_476408, %block_.L_4762cd
  %4807 = phi i64 [ %.pre297, %block_.L_4762cd ], [ %5408, %block_.L_476408 ]
  %MEMORY.37 = phi %struct.Memory* [ %MEMORY.36, %block_.L_4762cd ], [ %4886, %block_.L_476408 ]
  %4808 = load i64, i64* %RBP.i, align 8
  %4809 = add i64 %4808, -44
  %4810 = add i64 %4807, 3
  store i64 %4810, i64* %3, align 8
  %4811 = inttoptr i64 %4809 to i32*
  %4812 = load i32, i32* %4811, align 4
  %4813 = zext i32 %4812 to i64
  store i64 %4813, i64* %RAX.i1404, align 8
  %4814 = add i64 %4808, -216
  %4815 = add i64 %4807, 9
  store i64 %4815, i64* %3, align 8
  %4816 = inttoptr i64 %4814 to i32*
  %4817 = load i32, i32* %4816, align 4
  %4818 = sub i32 %4812, %4817
  %4819 = icmp ult i32 %4812, %4817
  %4820 = zext i1 %4819 to i8
  store i8 %4820, i8* %12, align 1
  %4821 = and i32 %4818, 255
  %4822 = tail call i32 @llvm.ctpop.i32(i32 %4821)
  %4823 = trunc i32 %4822 to i8
  %4824 = and i8 %4823, 1
  %4825 = xor i8 %4824, 1
  store i8 %4825, i8* %13, align 1
  %4826 = xor i32 %4817, %4812
  %4827 = xor i32 %4826, %4818
  %4828 = lshr i32 %4827, 4
  %4829 = trunc i32 %4828 to i8
  %4830 = and i8 %4829, 1
  store i8 %4830, i8* %14, align 1
  %4831 = icmp eq i32 %4818, 0
  %4832 = zext i1 %4831 to i8
  store i8 %4832, i8* %15, align 1
  %4833 = lshr i32 %4818, 31
  %4834 = trunc i32 %4833 to i8
  store i8 %4834, i8* %16, align 1
  %4835 = lshr i32 %4812, 31
  %4836 = lshr i32 %4817, 31
  %4837 = xor i32 %4836, %4835
  %4838 = xor i32 %4833, %4835
  %4839 = add nuw nsw i32 %4838, %4837
  %4840 = icmp eq i32 %4839, 2
  %4841 = zext i1 %4840 to i8
  store i8 %4841, i8* %17, align 1
  %4842 = icmp ne i8 %4834, 0
  %4843 = xor i1 %4842, %4840
  %.v451 = select i1 %4843, i64 15, i64 327
  %4844 = add i64 %4807, %.v451
  store i64 %4844, i64* %3, align 8
  br i1 %4843, label %block_4762e3, label %block_.L_47641b.loopexit

block_4762e3:                                     ; preds = %block_.L_4762d4
  store i64 20, i64* %RAX.i1404, align 8
  %4845 = add i64 %4844, 9
  store i64 %4845, i64* %3, align 8
  %4846 = load i32, i32* %4811, align 4
  %4847 = sext i32 %4846 to i64
  store i64 %4847, i64* %RCX.i1715, align 8
  %4848 = shl nsw i64 %4847, 2
  %4849 = add i64 %4808, -208
  %4850 = add i64 %4849, %4848
  %4851 = add i64 %4844, 16
  store i64 %4851, i64* %3, align 8
  %4852 = inttoptr i64 %4850 to i32*
  %4853 = load i32, i32* %4852, align 4
  %4854 = zext i32 %4853 to i64
  store i64 %4854, i64* %RDX.i1921, align 8
  %4855 = add i64 %4808, -1208
  %4856 = add i64 %4844, 22
  store i64 %4856, i64* %3, align 8
  %4857 = inttoptr i64 %4855 to i32*
  store i32 20, i32* %4857, align 4
  %4858 = load i32, i32* %EDX.i1677, align 4
  %4859 = zext i32 %4858 to i64
  %4860 = load i64, i64* %3, align 8
  store i64 %4859, i64* %RAX.i1404, align 8
  %4861 = sext i32 %4858 to i64
  %4862 = lshr i64 %4861, 32
  store i64 %4862, i64* %1607, align 8
  %4863 = load i64, i64* %RBP.i, align 8
  %4864 = add i64 %4863, -1208
  %4865 = add i64 %4860, 9
  store i64 %4865, i64* %3, align 8
  %4866 = inttoptr i64 %4864 to i32*
  %4867 = load i32, i32* %4866, align 4
  %4868 = zext i32 %4867 to i64
  store i64 %4868, i64* %RSI.i2336, align 8
  %4869 = add i64 %4860, 11
  store i64 %4869, i64* %3, align 8
  %4870 = sext i32 %4867 to i64
  %4871 = shl nuw i64 %4862, 32
  %4872 = or i64 %4871, %4859
  %4873 = sdiv i64 %4872, %4870
  %4874 = shl i64 %4873, 32
  %4875 = ashr exact i64 %4874, 32
  %4876 = icmp eq i64 %4873, %4875
  br i1 %4876, label %4879, label %4877

; <label>:4877:                                   ; preds = %block_4762e3
  %4878 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4869, %struct.Memory* %MEMORY.37)
  %.pre298 = load i64, i64* %RAX.i1404, align 8
  %.pre299 = load i64, i64* %3, align 8
  %.pre300 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__esi.exit

; <label>:4879:                                   ; preds = %block_4762e3
  %4880 = srem i64 %4872, %4870
  %4881 = and i64 %4873, 4294967295
  store i64 %4881, i64* %RAX.i1404, align 8
  %4882 = and i64 %4880, 4294967295
  store i64 %4882, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__esi.exit

routine_idivl__esi.exit:                          ; preds = %4879, %4877
  %4883 = phi i64 [ %.pre300, %4877 ], [ %4863, %4879 ]
  %4884 = phi i64 [ %.pre299, %4877 ], [ %4869, %4879 ]
  %4885 = phi i64 [ %.pre298, %4877 ], [ %4881, %4879 ]
  %4886 = phi %struct.Memory* [ %4878, %4877 ], [ %MEMORY.37, %4879 ]
  %4887 = trunc i64 %4885 to i32
  %4888 = add i32 %4887, -1
  %4889 = zext i32 %4888 to i64
  store i64 %4889, i64* %RAX.i1404, align 8
  %4890 = icmp eq i32 %4887, 0
  %4891 = zext i1 %4890 to i8
  store i8 %4891, i8* %12, align 1
  %4892 = and i32 %4888, 255
  %4893 = tail call i32 @llvm.ctpop.i32(i32 %4892)
  %4894 = trunc i32 %4893 to i8
  %4895 = and i8 %4894, 1
  %4896 = xor i8 %4895, 1
  store i8 %4896, i8* %13, align 1
  %4897 = xor i32 %4888, %4887
  %4898 = lshr i32 %4897, 4
  %4899 = trunc i32 %4898 to i8
  %4900 = and i8 %4899, 1
  store i8 %4900, i8* %14, align 1
  %4901 = icmp eq i32 %4888, 0
  %4902 = zext i1 %4901 to i8
  store i8 %4902, i8* %15, align 1
  %4903 = lshr i32 %4888, 31
  %4904 = trunc i32 %4903 to i8
  store i8 %4904, i8* %16, align 1
  %4905 = lshr i32 %4887, 31
  %4906 = xor i32 %4903, %4905
  %4907 = add nuw nsw i32 %4906, %4905
  %4908 = icmp eq i32 %4907, 2
  %4909 = zext i1 %4908 to i8
  store i8 %4909, i8* %17, align 1
  %4910 = add i64 %4883, -36
  %4911 = add i64 %4884, 6
  store i64 %4911, i64* %3, align 8
  %4912 = inttoptr i64 %4910 to i32*
  %4913 = load i32, i32* %4912, align 4
  %4914 = sub i32 %4888, %4913
  %4915 = icmp ult i32 %4888, %4913
  %4916 = zext i1 %4915 to i8
  store i8 %4916, i8* %12, align 1
  %4917 = and i32 %4914, 255
  %4918 = tail call i32 @llvm.ctpop.i32(i32 %4917)
  %4919 = trunc i32 %4918 to i8
  %4920 = and i8 %4919, 1
  %4921 = xor i8 %4920, 1
  store i8 %4921, i8* %13, align 1
  %4922 = xor i32 %4913, %4888
  %4923 = xor i32 %4922, %4914
  %4924 = lshr i32 %4923, 4
  %4925 = trunc i32 %4924 to i8
  %4926 = and i8 %4925, 1
  store i8 %4926, i8* %14, align 1
  %4927 = icmp eq i32 %4914, 0
  %4928 = zext i1 %4927 to i8
  store i8 %4928, i8* %15, align 1
  %4929 = lshr i32 %4914, 31
  %4930 = trunc i32 %4929 to i8
  store i8 %4930, i8* %16, align 1
  %4931 = lshr i32 %4913, 31
  %4932 = xor i32 %4931, %4903
  %4933 = xor i32 %4929, %4903
  %4934 = add nuw nsw i32 %4933, %4932
  %4935 = icmp eq i32 %4934, 2
  %4936 = zext i1 %4935 to i8
  store i8 %4936, i8* %17, align 1
  %4937 = icmp ne i8 %4930, 0
  %4938 = xor i1 %4937, %4935
  %4939 = or i1 %4927, %4938
  %.v361 = select i1 %4939, i64 260, i64 12
  %4940 = add i64 %4884, %.v361
  store i64 %4940, i64* %3, align 8
  br i1 %4939, label %block_.L_476408, label %block_476310

block_476310:                                     ; preds = %routine_idivl__esi.exit
  %4941 = add i64 %4940, ptrtoint (%G_0x6cd68__rip__type* @G_0x6cd68__rip_ to i64)
  %4942 = add i64 %4940, 8
  store i64 %4942, i64* %3, align 8
  %4943 = inttoptr i64 %4941 to i64*
  %4944 = load i64, i64* %4943, align 8
  store i64 %4944, i64* %4132, align 1
  store double 0.000000e+00, double* %4133, align 1
  store i64 20, i64* %RAX.i1404, align 8
  %4945 = add i64 %4883, -44
  %4946 = add i64 %4940, 16
  store i64 %4946, i64* %3, align 8
  %4947 = inttoptr i64 %4945 to i32*
  %4948 = load i32, i32* %4947, align 4
  %4949 = add i32 %4948, -1
  %4950 = zext i32 %4949 to i64
  store i64 %4950, i64* %RCX.i1715, align 8
  %4951 = icmp eq i32 %4948, 0
  %4952 = zext i1 %4951 to i8
  store i8 %4952, i8* %12, align 1
  %4953 = and i32 %4949, 255
  %4954 = tail call i32 @llvm.ctpop.i32(i32 %4953)
  %4955 = trunc i32 %4954 to i8
  %4956 = and i8 %4955, 1
  %4957 = xor i8 %4956, 1
  store i8 %4957, i8* %13, align 1
  %4958 = xor i32 %4949, %4948
  %4959 = lshr i32 %4958, 4
  %4960 = trunc i32 %4959 to i8
  %4961 = and i8 %4960, 1
  store i8 %4961, i8* %14, align 1
  %4962 = icmp eq i32 %4949, 0
  %4963 = zext i1 %4962 to i8
  store i8 %4963, i8* %15, align 1
  %4964 = lshr i32 %4949, 31
  %4965 = trunc i32 %4964 to i8
  store i8 %4965, i8* %16, align 1
  %4966 = lshr i32 %4948, 31
  %4967 = xor i32 %4964, %4966
  %4968 = add nuw nsw i32 %4967, %4966
  %4969 = icmp eq i32 %4968, 2
  %4970 = zext i1 %4969 to i8
  store i8 %4970, i8* %17, align 1
  %4971 = sext i32 %4949 to i64
  store i64 %4971, i64* %RDX.i1921, align 8
  %4972 = shl nsw i64 %4971, 2
  %4973 = add nsw i64 %4972, -208
  %4974 = add i64 %4973, %4883
  %4975 = add i64 %4940, 29
  store i64 %4975, i64* %3, align 8
  %4976 = inttoptr i64 %4974 to i32*
  %4977 = load i32, i32* %4976, align 4
  %4978 = zext i32 %4977 to i64
  store i64 %4978, i64* %RCX.i1715, align 8
  %4979 = add i64 %4883, -1212
  %4980 = add i64 %4940, 35
  store i64 %4980, i64* %3, align 8
  %4981 = inttoptr i64 %4979 to i32*
  store i32 20, i32* %4981, align 4
  %4982 = load i32, i32* %ECX.i2918, align 4
  %4983 = zext i32 %4982 to i64
  %4984 = load i64, i64* %3, align 8
  store i64 %4983, i64* %RAX.i1404, align 8
  %4985 = sext i32 %4982 to i64
  %4986 = lshr i64 %4985, 32
  store i64 %4986, i64* %1607, align 8
  %4987 = load i64, i64* %RBP.i, align 8
  %4988 = add i64 %4987, -1212
  %4989 = add i64 %4984, 9
  store i64 %4989, i64* %3, align 8
  %4990 = inttoptr i64 %4988 to i32*
  %4991 = load i32, i32* %4990, align 4
  %4992 = zext i32 %4991 to i64
  store i64 %4992, i64* %RCX.i1715, align 8
  %4993 = add i64 %4984, 11
  store i64 %4993, i64* %3, align 8
  %4994 = sext i32 %4991 to i64
  %4995 = shl nuw i64 %4986, 32
  %4996 = or i64 %4995, %4983
  %4997 = sdiv i64 %4996, %4994
  %4998 = shl i64 %4997, 32
  %4999 = ashr exact i64 %4998, 32
  %5000 = icmp eq i64 %4997, %4999
  br i1 %5000, label %5003, label %5001

; <label>:5001:                                   ; preds = %block_476310
  %5002 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4993, %struct.Memory* %4886)
  %.pre301 = load i64, i64* %RAX.i1404, align 8
  %.pre302 = load i64, i64* %3, align 8
  %.pre303 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1473

; <label>:5003:                                   ; preds = %block_476310
  %5004 = srem i64 %4996, %4994
  %5005 = and i64 %4997, 4294967295
  store i64 %5005, i64* %RAX.i1404, align 8
  %5006 = and i64 %5004, 4294967295
  store i64 %5006, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1473

routine_idivl__ecx.exit1473:                      ; preds = %5003, %5001
  %5007 = phi i64 [ %.pre303, %5001 ], [ %4987, %5003 ]
  %5008 = phi i64 [ %.pre302, %5001 ], [ %4993, %5003 ]
  %5009 = phi i64 [ %.pre301, %5001 ], [ %5005, %5003 ]
  %5010 = phi %struct.Memory* [ %5002, %5001 ], [ %4886, %5003 ]
  %5011 = trunc i64 %5009 to i32
  %5012 = add i32 %5011, -1
  %5013 = zext i32 %5012 to i64
  store i64 %5013, i64* %RAX.i1404, align 8
  %5014 = icmp eq i32 %5011, 0
  %5015 = zext i1 %5014 to i8
  store i8 %5015, i8* %12, align 1
  %5016 = and i32 %5012, 255
  %5017 = tail call i32 @llvm.ctpop.i32(i32 %5016)
  %5018 = trunc i32 %5017 to i8
  %5019 = and i8 %5018, 1
  %5020 = xor i8 %5019, 1
  store i8 %5020, i8* %13, align 1
  %5021 = xor i32 %5012, %5011
  %5022 = lshr i32 %5021, 4
  %5023 = trunc i32 %5022 to i8
  %5024 = and i8 %5023, 1
  store i8 %5024, i8* %14, align 1
  %5025 = icmp eq i32 %5012, 0
  %5026 = zext i1 %5025 to i8
  store i8 %5026, i8* %15, align 1
  %5027 = lshr i32 %5012, 31
  %5028 = trunc i32 %5027 to i8
  store i8 %5028, i8* %16, align 1
  %5029 = lshr i32 %5011, 31
  %5030 = xor i32 %5027, %5029
  %5031 = add nuw nsw i32 %5030, %5029
  %5032 = icmp eq i32 %5031, 2
  %5033 = zext i1 %5032 to i8
  store i8 %5033, i8* %17, align 1
  %5034 = load <2 x i32>, <2 x i32>* %1623, align 1
  %5035 = load <2 x i32>, <2 x i32>* %1625, align 1
  %5036 = sitofp i32 %5012 to float
  store float %5036, float* %1626, align 1
  %5037 = extractelement <2 x i32> %5034, i32 1
  store i32 %5037, i32* %1628, align 1
  %5038 = extractelement <2 x i32> %5035, i32 0
  store i32 %5038, i32* %1629, align 1
  %5039 = extractelement <2 x i32> %5035, i32 1
  store i32 %5039, i32* %1631, align 1
  %5040 = add i64 %5007, -1112
  %5041 = add i64 %5008, 15
  store i64 %5041, i64* %3, align 8
  %5042 = load <2 x float>, <2 x float>* %1632, align 1
  %5043 = extractelement <2 x float> %5042, i32 0
  %5044 = inttoptr i64 %5040 to float*
  store float %5043, float* %5044, align 4
  %5045 = load i64, i64* %RBP.i, align 8
  %5046 = add i64 %5045, -44
  %5047 = load i64, i64* %3, align 8
  %5048 = add i64 %5047, 3
  store i64 %5048, i64* %3, align 8
  %5049 = inttoptr i64 %5046 to i32*
  %5050 = load i32, i32* %5049, align 4
  %5051 = add i32 %5050, -1
  %5052 = zext i32 %5051 to i64
  store i64 %5052, i64* %RAX.i1404, align 8
  %5053 = icmp eq i32 %5050, 0
  %5054 = zext i1 %5053 to i8
  store i8 %5054, i8* %12, align 1
  %5055 = and i32 %5051, 255
  %5056 = tail call i32 @llvm.ctpop.i32(i32 %5055)
  %5057 = trunc i32 %5056 to i8
  %5058 = and i8 %5057, 1
  %5059 = xor i8 %5058, 1
  store i8 %5059, i8* %13, align 1
  %5060 = xor i32 %5051, %5050
  %5061 = lshr i32 %5060, 4
  %5062 = trunc i32 %5061 to i8
  %5063 = and i8 %5062, 1
  store i8 %5063, i8* %14, align 1
  %5064 = icmp eq i32 %5051, 0
  %5065 = zext i1 %5064 to i8
  store i8 %5065, i8* %15, align 1
  %5066 = lshr i32 %5051, 31
  %5067 = trunc i32 %5066 to i8
  store i8 %5067, i8* %16, align 1
  %5068 = lshr i32 %5050, 31
  %5069 = xor i32 %5066, %5068
  %5070 = add nuw nsw i32 %5069, %5068
  %5071 = icmp eq i32 %5070, 2
  %5072 = zext i1 %5071 to i8
  store i8 %5072, i8* %17, align 1
  %5073 = sext i32 %5051 to i64
  store i64 %5073, i64* %RSI.i2336, align 8
  %5074 = shl nsw i64 %5073, 2
  %5075 = add nsw i64 %5074, -208
  %5076 = add i64 %5075, %5045
  %5077 = add i64 %5047, 16
  store i64 %5077, i64* %3, align 8
  %5078 = inttoptr i64 %5076 to i32*
  %5079 = load i32, i32* %5078, align 4
  %5080 = zext i32 %5079 to i64
  store i64 %5080, i64* %RAX.i1404, align 8
  %5081 = sext i32 %5079 to i64
  %5082 = lshr i64 %5081, 32
  store i64 %5082, i64* %1607, align 8
  %5083 = load i32, i32* %ECX.i2918, align 4
  %5084 = add i64 %5047, 19
  store i64 %5084, i64* %3, align 8
  %5085 = sext i32 %5083 to i64
  %5086 = shl nuw i64 %5082, 32
  %5087 = or i64 %5086, %5080
  %5088 = sdiv i64 %5087, %5085
  %5089 = shl i64 %5088, 32
  %5090 = ashr exact i64 %5089, 32
  %5091 = icmp eq i64 %5088, %5090
  br i1 %5091, label %5094, label %5092

; <label>:5092:                                   ; preds = %routine_idivl__ecx.exit1473
  %5093 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5084, %struct.Memory* %5010)
  %.pre304 = load i64, i64* %RDX.i1921, align 8
  %.pre305 = load i64, i64* %3, align 8
  %.pre306 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1446

; <label>:5094:                                   ; preds = %routine_idivl__ecx.exit1473
  %5095 = srem i64 %5087, %5085
  %5096 = and i64 %5088, 4294967295
  store i64 %5096, i64* %RAX.i1404, align 8
  %5097 = and i64 %5095, 4294967295
  store i64 %5097, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1446

routine_idivl__ecx.exit1446:                      ; preds = %5094, %5092
  %5098 = phi i64 [ %.pre306, %5092 ], [ %5045, %5094 ]
  %5099 = phi i64 [ %.pre305, %5092 ], [ %5084, %5094 ]
  %5100 = phi i64 [ %.pre304, %5092 ], [ %5097, %5094 ]
  %5101 = phi %struct.Memory* [ %5093, %5092 ], [ %5010, %5094 ]
  %5102 = trunc i64 %5100 to i32
  %5103 = add i32 %5102, -1
  %5104 = zext i32 %5103 to i64
  store i64 %5104, i64* %RDX.i1921, align 8
  %5105 = icmp eq i32 %5102, 0
  %5106 = zext i1 %5105 to i8
  store i8 %5106, i8* %12, align 1
  %5107 = and i32 %5103, 255
  %5108 = tail call i32 @llvm.ctpop.i32(i32 %5107)
  %5109 = trunc i32 %5108 to i8
  %5110 = and i8 %5109, 1
  %5111 = xor i8 %5110, 1
  store i8 %5111, i8* %13, align 1
  %5112 = xor i32 %5103, %5102
  %5113 = lshr i32 %5112, 4
  %5114 = trunc i32 %5113 to i8
  %5115 = and i8 %5114, 1
  store i8 %5115, i8* %14, align 1
  %5116 = icmp eq i32 %5103, 0
  %5117 = zext i1 %5116 to i8
  store i8 %5117, i8* %15, align 1
  %5118 = lshr i32 %5103, 31
  %5119 = trunc i32 %5118 to i8
  store i8 %5119, i8* %16, align 1
  %5120 = lshr i32 %5102, 31
  %5121 = xor i32 %5118, %5120
  %5122 = add nuw nsw i32 %5121, %5120
  %5123 = icmp eq i32 %5122, 2
  %5124 = zext i1 %5123 to i8
  store i8 %5124, i8* %17, align 1
  %5125 = load <2 x i32>, <2 x i32>* %1623, align 1
  %5126 = load <2 x i32>, <2 x i32>* %1625, align 1
  %5127 = sitofp i32 %5103 to float
  store float %5127, float* %1626, align 1
  %5128 = extractelement <2 x i32> %5125, i32 1
  store i32 %5128, i32* %1628, align 1
  %5129 = extractelement <2 x i32> %5126, i32 0
  store i32 %5129, i32* %1629, align 1
  %5130 = extractelement <2 x i32> %5126, i32 1
  store i32 %5130, i32* %1631, align 1
  %5131 = add i64 %5098, -1116
  %5132 = add i64 %5099, 15
  store i64 %5132, i64* %3, align 8
  %5133 = load <2 x float>, <2 x float>* %1632, align 1
  %5134 = extractelement <2 x float> %5133, i32 0
  %5135 = inttoptr i64 %5131 to float*
  store float %5134, float* %5135, align 4
  %5136 = load i64, i64* %RBP.i, align 8
  %5137 = add i64 %5136, -44
  %5138 = load i64, i64* %3, align 8
  %5139 = add i64 %5138, 4
  store i64 %5139, i64* %3, align 8
  %5140 = inttoptr i64 %5137 to i32*
  %5141 = load i32, i32* %5140, align 4
  %5142 = sext i32 %5141 to i64
  store i64 %5142, i64* %RSI.i2336, align 8
  %5143 = shl nsw i64 %5142, 2
  %5144 = add i64 %5136, -208
  %5145 = add i64 %5144, %5143
  %5146 = add i64 %5138, 11
  store i64 %5146, i64* %3, align 8
  %5147 = inttoptr i64 %5145 to i32*
  %5148 = load i32, i32* %5147, align 4
  %5149 = zext i32 %5148 to i64
  store i64 %5149, i64* %RAX.i1404, align 8
  %5150 = sext i32 %5148 to i64
  %5151 = lshr i64 %5150, 32
  store i64 %5151, i64* %1607, align 8
  %5152 = load i32, i32* %ECX.i2918, align 4
  %5153 = add i64 %5138, 16
  store i64 %5153, i64* %3, align 8
  %5154 = sext i32 %5152 to i64
  %5155 = shl nuw i64 %5151, 32
  %5156 = or i64 %5155, %5149
  %5157 = sdiv i64 %5156, %5154
  %5158 = shl i64 %5157, 32
  %5159 = ashr exact i64 %5158, 32
  %5160 = icmp eq i64 %5157, %5159
  br i1 %5160, label %5163, label %5161

; <label>:5161:                                   ; preds = %routine_idivl__ecx.exit1446
  %5162 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5153, %struct.Memory* %5101)
  %.pre307 = load i64, i64* %RAX.i1404, align 8
  %.pre308 = load i64, i64* %3, align 8
  %.pre309 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit1423

; <label>:5163:                                   ; preds = %routine_idivl__ecx.exit1446
  %5164 = srem i64 %5156, %5154
  %5165 = and i64 %5157, 4294967295
  store i64 %5165, i64* %RAX.i1404, align 8
  %5166 = and i64 %5164, 4294967295
  store i64 %5166, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit1423

routine_idivl__ecx.exit1423:                      ; preds = %5163, %5161
  %5167 = phi i64 [ %.pre309, %5161 ], [ %5136, %5163 ]
  %5168 = phi i64 [ %.pre308, %5161 ], [ %5153, %5163 ]
  %5169 = phi i64 [ %.pre307, %5161 ], [ %5165, %5163 ]
  %5170 = phi %struct.Memory* [ %5162, %5161 ], [ %5101, %5163 ]
  %5171 = trunc i64 %5169 to i32
  %5172 = add i32 %5171, -1
  %5173 = zext i32 %5172 to i64
  store i64 %5173, i64* %RAX.i1404, align 8
  %5174 = icmp eq i32 %5171, 0
  %5175 = zext i1 %5174 to i8
  store i8 %5175, i8* %12, align 1
  %5176 = and i32 %5172, 255
  %5177 = tail call i32 @llvm.ctpop.i32(i32 %5176)
  %5178 = trunc i32 %5177 to i8
  %5179 = and i8 %5178, 1
  %5180 = xor i8 %5179, 1
  store i8 %5180, i8* %13, align 1
  %5181 = xor i32 %5172, %5171
  %5182 = lshr i32 %5181, 4
  %5183 = trunc i32 %5182 to i8
  %5184 = and i8 %5183, 1
  store i8 %5184, i8* %14, align 1
  %5185 = icmp eq i32 %5172, 0
  %5186 = zext i1 %5185 to i8
  store i8 %5186, i8* %15, align 1
  %5187 = lshr i32 %5172, 31
  %5188 = trunc i32 %5187 to i8
  store i8 %5188, i8* %16, align 1
  %5189 = lshr i32 %5171, 31
  %5190 = xor i32 %5187, %5189
  %5191 = add nuw nsw i32 %5190, %5189
  %5192 = icmp eq i32 %5191, 2
  %5193 = zext i1 %5192 to i8
  store i8 %5193, i8* %17, align 1
  %5194 = load <2 x i32>, <2 x i32>* %1623, align 1
  %5195 = load <2 x i32>, <2 x i32>* %1625, align 1
  %5196 = sitofp i32 %5172 to float
  store float %5196, float* %1626, align 1
  %5197 = extractelement <2 x i32> %5194, i32 1
  store i32 %5197, i32* %1628, align 1
  %5198 = extractelement <2 x i32> %5195, i32 0
  store i32 %5198, i32* %1629, align 1
  %5199 = extractelement <2 x i32> %5195, i32 1
  store i32 %5199, i32* %1631, align 1
  %5200 = add i64 %5167, -1120
  %5201 = add i64 %5168, 15
  store i64 %5201, i64* %3, align 8
  %5202 = load <2 x float>, <2 x float>* %1632, align 1
  %5203 = extractelement <2 x float> %5202, i32 0
  %5204 = inttoptr i64 %5200 to float*
  store float %5203, float* %5204, align 4
  %5205 = load i64, i64* %RBP.i, align 8
  %5206 = add i64 %5205, -44
  %5207 = load i64, i64* %3, align 8
  %5208 = add i64 %5207, 4
  store i64 %5208, i64* %3, align 8
  %5209 = inttoptr i64 %5206 to i32*
  %5210 = load i32, i32* %5209, align 4
  %5211 = sext i32 %5210 to i64
  store i64 %5211, i64* %RSI.i2336, align 8
  %5212 = shl nsw i64 %5211, 2
  %5213 = add i64 %5205, -208
  %5214 = add i64 %5213, %5212
  %5215 = add i64 %5207, 11
  store i64 %5215, i64* %3, align 8
  %5216 = inttoptr i64 %5214 to i32*
  %5217 = load i32, i32* %5216, align 4
  %5218 = zext i32 %5217 to i64
  store i64 %5218, i64* %RAX.i1404, align 8
  %5219 = sext i32 %5217 to i64
  %5220 = lshr i64 %5219, 32
  store i64 %5220, i64* %1607, align 8
  %5221 = load i32, i32* %ECX.i2918, align 4
  %5222 = add i64 %5207, 14
  store i64 %5222, i64* %3, align 8
  %5223 = sext i32 %5221 to i64
  %5224 = shl nuw i64 %5220, 32
  %5225 = or i64 %5224, %5218
  %5226 = sdiv i64 %5225, %5223
  %5227 = shl i64 %5226, 32
  %5228 = ashr exact i64 %5227, 32
  %5229 = icmp eq i64 %5226, %5228
  br i1 %5229, label %5232, label %5230

; <label>:5230:                                   ; preds = %routine_idivl__ecx.exit1423
  %5231 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %5222, %struct.Memory* %5170)
  %.pre310 = load i64, i64* %RDX.i1921, align 8
  %.pre311 = load i64, i64* %3, align 8
  %.pre312 = load i64, i64* %RBP.i, align 8
  br label %routine_idivl__ecx.exit

; <label>:5232:                                   ; preds = %routine_idivl__ecx.exit1423
  %5233 = srem i64 %5225, %5223
  %5234 = and i64 %5226, 4294967295
  store i64 %5234, i64* %RAX.i1404, align 8
  %5235 = and i64 %5233, 4294967295
  store i64 %5235, i64* %RDX.i1921, align 8
  store i8 0, i8* %12, align 1
  store i8 0, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  br label %routine_idivl__ecx.exit

routine_idivl__ecx.exit:                          ; preds = %5232, %5230
  %5236 = phi i64 [ %.pre312, %5230 ], [ %5205, %5232 ]
  %5237 = phi i64 [ %.pre311, %5230 ], [ %5222, %5232 ]
  %5238 = phi i64 [ %.pre310, %5230 ], [ %5235, %5232 ]
  %5239 = phi %struct.Memory* [ %5231, %5230 ], [ %5170, %5232 ]
  %5240 = trunc i64 %5238 to i32
  %5241 = add i32 %5240, -1
  %5242 = zext i32 %5241 to i64
  store i64 %5242, i64* %RDX.i1921, align 8
  %5243 = icmp eq i32 %5240, 0
  %5244 = zext i1 %5243 to i8
  store i8 %5244, i8* %12, align 1
  %5245 = and i32 %5241, 255
  %5246 = tail call i32 @llvm.ctpop.i32(i32 %5245)
  %5247 = trunc i32 %5246 to i8
  %5248 = and i8 %5247, 1
  %5249 = xor i8 %5248, 1
  store i8 %5249, i8* %13, align 1
  %5250 = xor i32 %5241, %5240
  %5251 = lshr i32 %5250, 4
  %5252 = trunc i32 %5251 to i8
  %5253 = and i8 %5252, 1
  store i8 %5253, i8* %14, align 1
  %5254 = icmp eq i32 %5241, 0
  %5255 = zext i1 %5254 to i8
  store i8 %5255, i8* %15, align 1
  %5256 = lshr i32 %5241, 31
  %5257 = trunc i32 %5256 to i8
  store i8 %5257, i8* %16, align 1
  %5258 = lshr i32 %5240, 31
  %5259 = xor i32 %5256, %5258
  %5260 = add nuw nsw i32 %5259, %5258
  %5261 = icmp eq i32 %5260, 2
  %5262 = zext i1 %5261 to i8
  store i8 %5262, i8* %17, align 1
  %5263 = load <2 x i32>, <2 x i32>* %1623, align 1
  %5264 = load <2 x i32>, <2 x i32>* %1625, align 1
  %5265 = sitofp i32 %5241 to float
  store float %5265, float* %1626, align 1
  %5266 = extractelement <2 x i32> %5263, i32 1
  store i32 %5266, i32* %1628, align 1
  %5267 = extractelement <2 x i32> %5264, i32 0
  store i32 %5267, i32* %1629, align 1
  %5268 = extractelement <2 x i32> %5264, i32 1
  store i32 %5268, i32* %1631, align 1
  %5269 = add i64 %5236, -1124
  %5270 = add i64 %5237, 15
  store i64 %5270, i64* %3, align 8
  %5271 = load <2 x float>, <2 x float>* %1632, align 1
  %5272 = extractelement <2 x float> %5271, i32 0
  %5273 = inttoptr i64 %5269 to float*
  store float %5272, float* %5273, align 4
  %5274 = load i64, i64* %RBP.i, align 8
  %5275 = add i64 %5274, -1116
  %5276 = load i64, i64* %3, align 8
  %5277 = add i64 %5276, 8
  store i64 %5277, i64* %3, align 8
  %5278 = inttoptr i64 %5275 to float*
  %5279 = load float, float* %5278, align 4
  %5280 = fpext float %5279 to double
  store double %5280, double* %4134, align 1
  %5281 = load double, double* %4131, align 1
  %5282 = fadd double %5280, %5281
  store double %5282, double* %4131, align 1
  %5283 = add i64 %5274, -36
  %5284 = add i64 %5276, 17
  store i64 %5284, i64* %3, align 8
  %5285 = bitcast double %5280 to <2 x i32>
  %5286 = load <2 x i32>, <2 x i32>* %1625, align 1
  %5287 = inttoptr i64 %5283 to i32*
  %5288 = load i32, i32* %5287, align 4
  %5289 = sitofp i32 %5288 to float
  store float %5289, float* %1626, align 1
  %5290 = extractelement <2 x i32> %5285, i32 1
  store i32 %5290, i32* %1628, align 1
  %5291 = extractelement <2 x i32> %5286, i32 0
  store i32 %5291, i32* %1629, align 1
  %5292 = extractelement <2 x i32> %5286, i32 1
  store i32 %5292, i32* %1631, align 1
  %5293 = add i64 %5274, -1112
  %5294 = add i64 %5276, 25
  store i64 %5294, i64* %3, align 8
  %5295 = load <2 x float>, <2 x float>* %1632, align 1
  %5296 = load <2 x i32>, <2 x i32>* %1625, align 1
  %5297 = inttoptr i64 %5293 to float*
  %5298 = load float, float* %5297, align 4
  %5299 = extractelement <2 x float> %5295, i32 0
  %5300 = fsub float %5299, %5298
  store float %5300, float* %1626, align 1
  %5301 = bitcast <2 x float> %5295 to <2 x i32>
  %5302 = extractelement <2 x i32> %5301, i32 1
  store i32 %5302, i32* %1628, align 1
  %5303 = extractelement <2 x i32> %5296, i32 0
  store i32 %5303, i32* %1629, align 1
  %5304 = extractelement <2 x i32> %5296, i32 1
  store i32 %5304, i32* %1631, align 1
  %5305 = add i64 %5274, -1124
  %5306 = add i64 %5276, 33
  store i64 %5306, i64* %3, align 8
  %5307 = inttoptr i64 %5305 to i32*
  %5308 = load i32, i32* %5307, align 4
  store i32 %5308, i32* %4138, align 1
  store float 0.000000e+00, float* %4140, align 1
  store float 0.000000e+00, float* %4142, align 1
  store float 0.000000e+00, float* %4144, align 1
  %5309 = add i64 %5276, 41
  store i64 %5309, i64* %3, align 8
  %5310 = load <2 x float>, <2 x float>* %4145, align 1
  %5311 = load <2 x i32>, <2 x i32>* %4146, align 1
  %5312 = load float, float* %5278, align 4
  %5313 = extractelement <2 x float> %5310, i32 0
  %5314 = fsub float %5313, %5312
  store float %5314, float* %4137, align 1
  %5315 = bitcast <2 x float> %5310 to <2 x i32>
  %5316 = extractelement <2 x i32> %5315, i32 1
  store i32 %5316, i32* %4147, align 1
  %5317 = extractelement <2 x i32> %5311, i32 0
  store i32 %5317, i32* %4148, align 1
  %5318 = extractelement <2 x i32> %5311, i32 1
  store i32 %5318, i32* %4149, align 1
  %5319 = load <2 x float>, <2 x float>* %1632, align 1
  %5320 = load <2 x i32>, <2 x i32>* %1625, align 1
  %5321 = load <2 x float>, <2 x float>* %4145, align 1
  %5322 = extractelement <2 x float> %5319, i32 0
  %5323 = extractelement <2 x float> %5321, i32 0
  %5324 = fmul float %5322, %5323
  store float %5324, float* %1626, align 1
  %5325 = bitcast <2 x float> %5319 to <2 x i32>
  %5326 = extractelement <2 x i32> %5325, i32 1
  store i32 %5326, i32* %1628, align 1
  %5327 = extractelement <2 x i32> %5320, i32 0
  store i32 %5327, i32* %1629, align 1
  %5328 = extractelement <2 x i32> %5320, i32 1
  store i32 %5328, i32* %1631, align 1
  %5329 = add i64 %5274, -1120
  %5330 = add i64 %5276, 53
  store i64 %5330, i64* %3, align 8
  %5331 = inttoptr i64 %5329 to i32*
  %5332 = load i32, i32* %5331, align 4
  store i32 %5332, i32* %4138, align 1
  store float 0.000000e+00, float* %4140, align 1
  store float 0.000000e+00, float* %4142, align 1
  store float 0.000000e+00, float* %4144, align 1
  %5333 = add i64 %5276, 61
  store i64 %5333, i64* %3, align 8
  %5334 = load <2 x float>, <2 x float>* %4145, align 1
  %5335 = load <2 x i32>, <2 x i32>* %4146, align 1
  %5336 = load float, float* %5297, align 4
  %5337 = extractelement <2 x float> %5334, i32 0
  %5338 = fsub float %5337, %5336
  store float %5338, float* %4137, align 1
  %5339 = bitcast <2 x float> %5334 to <2 x i32>
  %5340 = extractelement <2 x i32> %5339, i32 1
  store i32 %5340, i32* %4147, align 1
  %5341 = extractelement <2 x i32> %5335, i32 0
  store i32 %5341, i32* %4148, align 1
  %5342 = extractelement <2 x i32> %5335, i32 1
  store i32 %5342, i32* %4149, align 1
  %5343 = load <2 x float>, <2 x float>* %1632, align 1
  %5344 = load <2 x i32>, <2 x i32>* %1625, align 1
  %5345 = load <2 x float>, <2 x float>* %4145, align 1
  %5346 = extractelement <2 x float> %5343, i32 0
  %5347 = extractelement <2 x float> %5345, i32 0
  %5348 = fdiv float %5346, %5347
  store float %5348, float* %1626, align 1
  %5349 = bitcast <2 x float> %5343 to <2 x i32>
  %5350 = extractelement <2 x i32> %5349, i32 1
  store i32 %5350, i32* %1628, align 1
  %5351 = extractelement <2 x i32> %5344, i32 0
  store i32 %5351, i32* %1629, align 1
  %5352 = extractelement <2 x i32> %5344, i32 1
  store i32 %5352, i32* %1631, align 1
  %5353 = load <2 x float>, <2 x float>* %1632, align 1
  %5354 = extractelement <2 x float> %5353, i32 0
  %5355 = fpext float %5354 to double
  store double %5355, double* %4134, align 1
  %5356 = load double, double* %4131, align 1
  %5357 = fadd double %5355, %5356
  store double %5357, double* %4131, align 1
  %5358 = add i64 %5276, -479755
  %5359 = add i64 %5276, 78
  %5360 = load i64, i64* %6, align 8
  %5361 = add i64 %5360, -8
  %5362 = inttoptr i64 %5361 to i64*
  store i64 %5359, i64* %5362, align 8
  store i64 %5361, i64* %6, align 8
  store i64 %5358, i64* %3, align 8
  %5363 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64)* @floor to i64), %struct.Memory* %5239)
  %5364 = load i64, i64* %3, align 8
  %5365 = load double, double* %4131, align 1
  %5366 = tail call double @llvm.trunc.f64(double %5365)
  %5367 = tail call double @llvm.fabs.f64(double %5366)
  %5368 = fcmp ogt double %5367, 0x41DFFFFFFFC00000
  %5369 = fptosi double %5366 to i32
  %5370 = zext i32 %5369 to i64
  %5371 = select i1 %5368, i64 2147483648, i64 %5370
  store i64 %5371, i64* %RCX.i1715, align 8
  %5372 = load i64, i64* %RBP.i, align 8
  %5373 = add i64 %5372, -1092
  %5374 = trunc i64 %5371 to i32
  %5375 = add i64 %5364, 10
  store i64 %5375, i64* %3, align 8
  %5376 = inttoptr i64 %5373 to i32*
  store i32 %5374, i32* %5376, align 4
  %5377 = load i64, i64* %3, align 8
  %5378 = add i64 %5377, 24
  store i64 %5378, i64* %3, align 8
  %.pre313 = load i64, i64* %RBP.i, align 8
  br label %block_.L_47641b

block_.L_476408:                                  ; preds = %routine_idivl__esi.exit
  %5379 = add i64 %4883, -44
  %5380 = add i64 %4940, 8
  store i64 %5380, i64* %3, align 8
  %5381 = inttoptr i64 %5379 to i32*
  %5382 = load i32, i32* %5381, align 4
  %5383 = add i32 %5382, 1
  %5384 = zext i32 %5383 to i64
  store i64 %5384, i64* %RAX.i1404, align 8
  %5385 = icmp eq i32 %5382, -1
  %5386 = icmp eq i32 %5383, 0
  %5387 = or i1 %5385, %5386
  %5388 = zext i1 %5387 to i8
  store i8 %5388, i8* %12, align 1
  %5389 = and i32 %5383, 255
  %5390 = tail call i32 @llvm.ctpop.i32(i32 %5389)
  %5391 = trunc i32 %5390 to i8
  %5392 = and i8 %5391, 1
  %5393 = xor i8 %5392, 1
  store i8 %5393, i8* %13, align 1
  %5394 = xor i32 %5383, %5382
  %5395 = lshr i32 %5394, 4
  %5396 = trunc i32 %5395 to i8
  %5397 = and i8 %5396, 1
  store i8 %5397, i8* %14, align 1
  %5398 = zext i1 %5386 to i8
  store i8 %5398, i8* %15, align 1
  %5399 = lshr i32 %5383, 31
  %5400 = trunc i32 %5399 to i8
  store i8 %5400, i8* %16, align 1
  %5401 = lshr i32 %5382, 31
  %5402 = xor i32 %5399, %5401
  %5403 = add nuw nsw i32 %5402, %5399
  %5404 = icmp eq i32 %5403, 2
  %5405 = zext i1 %5404 to i8
  store i8 %5405, i8* %17, align 1
  %5406 = add i64 %4940, 14
  store i64 %5406, i64* %3, align 8
  store i32 %5383, i32* %5381, align 4
  %5407 = load i64, i64* %3, align 8
  %5408 = add i64 %5407, -322
  store i64 %5408, i64* %3, align 8
  br label %block_.L_4762d4

block_.L_47641b.loopexit:                         ; preds = %block_.L_4762d4
  br label %block_.L_47641b

block_.L_47641b:                                  ; preds = %block_.L_47641b.loopexit, %routine_idivl__ecx.exit
  %5409 = phi i64 [ %5378, %routine_idivl__ecx.exit ], [ %4844, %block_.L_47641b.loopexit ]
  %5410 = phi i64 [ %.pre313, %routine_idivl__ecx.exit ], [ %4808, %block_.L_47641b.loopexit ]
  %MEMORY.38 = phi %struct.Memory* [ %5363, %routine_idivl__ecx.exit ], [ %MEMORY.37, %block_.L_47641b.loopexit ]
  %5411 = add i64 %5410, -1088
  %5412 = add i64 %5409, 6
  store i64 %5412, i64* %3, align 8
  %5413 = inttoptr i64 %5411 to i32*
  %5414 = load i32, i32* %5413, align 4
  %5415 = zext i32 %5414 to i64
  store i64 %5415, i64* %RAX.i1404, align 8
  %5416 = add i64 %5410, -40
  %5417 = add i64 %5409, 9
  store i64 %5417, i64* %3, align 8
  %5418 = inttoptr i64 %5416 to i32*
  store i32 %5414, i32* %5418, align 4
  %.pre314 = load i64, i64* %3, align 8
  br label %block_.L_476424

block_.L_476424:                                  ; preds = %block_476433, %block_.L_47641b
  %5419 = phi i64 [ %5547, %block_476433 ], [ %.pre314, %block_.L_47641b ]
  %5420 = load i64, i64* %RBP.i, align 8
  %5421 = add i64 %5420, -40
  %5422 = add i64 %5419, 3
  store i64 %5422, i64* %3, align 8
  %5423 = inttoptr i64 %5421 to i32*
  %5424 = load i32, i32* %5423, align 4
  %5425 = zext i32 %5424 to i64
  store i64 %5425, i64* %RAX.i1404, align 8
  %5426 = add i64 %5420, -1092
  %5427 = add i64 %5419, 9
  store i64 %5427, i64* %3, align 8
  %5428 = inttoptr i64 %5426 to i32*
  %5429 = load i32, i32* %5428, align 4
  %5430 = sub i32 %5424, %5429
  %5431 = icmp ult i32 %5424, %5429
  %5432 = zext i1 %5431 to i8
  store i8 %5432, i8* %12, align 1
  %5433 = and i32 %5430, 255
  %5434 = tail call i32 @llvm.ctpop.i32(i32 %5433)
  %5435 = trunc i32 %5434 to i8
  %5436 = and i8 %5435, 1
  %5437 = xor i8 %5436, 1
  store i8 %5437, i8* %13, align 1
  %5438 = xor i32 %5429, %5424
  %5439 = xor i32 %5438, %5430
  %5440 = lshr i32 %5439, 4
  %5441 = trunc i32 %5440 to i8
  %5442 = and i8 %5441, 1
  store i8 %5442, i8* %14, align 1
  %5443 = icmp eq i32 %5430, 0
  %5444 = zext i1 %5443 to i8
  store i8 %5444, i8* %15, align 1
  %5445 = lshr i32 %5430, 31
  %5446 = trunc i32 %5445 to i8
  store i8 %5446, i8* %16, align 1
  %5447 = lshr i32 %5424, 31
  %5448 = lshr i32 %5429, 31
  %5449 = xor i32 %5448, %5447
  %5450 = xor i32 %5445, %5447
  %5451 = add nuw nsw i32 %5450, %5449
  %5452 = icmp eq i32 %5451, 2
  %5453 = zext i1 %5452 to i8
  store i8 %5453, i8* %17, align 1
  %5454 = icmp ne i8 %5446, 0
  %5455 = xor i1 %5454, %5452
  %.demorgan359 = or i1 %5443, %5455
  %.v360 = select i1 %.demorgan359, i64 15, i64 50
  %5456 = add i64 %5419, %.v360
  store i64 %5456, i64* %3, align 8
  %5457 = add i64 %5420, -36
  br i1 %.demorgan359, label %block_476433, label %block_.L_476456

block_476433:                                     ; preds = %block_.L_476424
  %5458 = add i64 %5456, 4
  store i64 %5458, i64* %3, align 8
  %5459 = inttoptr i64 %5457 to i32*
  %5460 = load i32, i32* %5459, align 4
  %5461 = mul i32 %5460, 20
  %5462 = add i32 %5461, 21
  %5463 = zext i32 %5462 to i64
  store i64 %5463, i64* %RAX.i1404, align 8
  %5464 = icmp ugt i32 %5461, -22
  %5465 = zext i1 %5464 to i8
  store i8 %5465, i8* %12, align 1
  %5466 = and i32 %5462, 253
  %5467 = tail call i32 @llvm.ctpop.i32(i32 %5466)
  %5468 = trunc i32 %5467 to i8
  %5469 = and i8 %5468, 1
  %5470 = xor i8 %5469, 1
  store i8 %5470, i8* %13, align 1
  %5471 = xor i32 %5461, 16
  %5472 = xor i32 %5471, %5462
  %5473 = lshr i32 %5472, 4
  %5474 = trunc i32 %5473 to i8
  %5475 = and i8 %5474, 1
  store i8 %5475, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %5476 = lshr i32 %5462, 31
  %5477 = trunc i32 %5476 to i8
  store i8 %5477, i8* %16, align 1
  %5478 = lshr i32 %5461, 31
  %5479 = xor i32 %5476, %5478
  %5480 = add nuw nsw i32 %5479, %5476
  %5481 = icmp eq i32 %5480, 2
  %5482 = zext i1 %5481 to i8
  store i8 %5482, i8* %17, align 1
  %5483 = add i64 %5456, 10
  store i64 %5483, i64* %3, align 8
  %5484 = load i32, i32* %5423, align 4
  %5485 = add i32 %5484, %5462
  %5486 = zext i32 %5485 to i64
  store i64 %5486, i64* %RAX.i1404, align 8
  %5487 = icmp ult i32 %5485, %5462
  %5488 = icmp ult i32 %5485, %5484
  %5489 = or i1 %5487, %5488
  %5490 = zext i1 %5489 to i8
  store i8 %5490, i8* %12, align 1
  %5491 = and i32 %5485, 255
  %5492 = tail call i32 @llvm.ctpop.i32(i32 %5491)
  %5493 = trunc i32 %5492 to i8
  %5494 = and i8 %5493, 1
  %5495 = xor i8 %5494, 1
  store i8 %5495, i8* %13, align 1
  %5496 = xor i32 %5484, %5462
  %5497 = xor i32 %5496, %5485
  %5498 = lshr i32 %5497, 4
  %5499 = trunc i32 %5498 to i8
  %5500 = and i8 %5499, 1
  store i8 %5500, i8* %14, align 1
  %5501 = icmp eq i32 %5485, 0
  %5502 = zext i1 %5501 to i8
  store i8 %5502, i8* %15, align 1
  %5503 = lshr i32 %5485, 31
  %5504 = trunc i32 %5503 to i8
  store i8 %5504, i8* %16, align 1
  %5505 = lshr i32 %5484, 31
  %5506 = xor i32 %5503, %5476
  %5507 = xor i32 %5503, %5505
  %5508 = add nuw nsw i32 %5506, %5507
  %5509 = icmp eq i32 %5508, 2
  %5510 = zext i1 %5509 to i8
  store i8 %5510, i8* %17, align 1
  %5511 = sext i32 %5485 to i64
  store i64 %5511, i64* %RCX.i1715, align 8
  %5512 = add nsw i64 %5511, -1040
  %5513 = add i64 %5512, %5420
  %5514 = add i64 %5456, 21
  store i64 %5514, i64* %3, align 8
  %5515 = inttoptr i64 %5513 to i8*
  store i8 1, i8* %5515, align 1
  %5516 = load i64, i64* %RBP.i, align 8
  %5517 = add i64 %5516, -40
  %5518 = load i64, i64* %3, align 8
  %5519 = add i64 %5518, 3
  store i64 %5519, i64* %3, align 8
  %5520 = inttoptr i64 %5517 to i32*
  %5521 = load i32, i32* %5520, align 4
  %5522 = add i32 %5521, 1
  %5523 = zext i32 %5522 to i64
  store i64 %5523, i64* %RAX.i1404, align 8
  %5524 = icmp eq i32 %5521, -1
  %5525 = icmp eq i32 %5522, 0
  %5526 = or i1 %5524, %5525
  %5527 = zext i1 %5526 to i8
  store i8 %5527, i8* %12, align 1
  %5528 = and i32 %5522, 255
  %5529 = tail call i32 @llvm.ctpop.i32(i32 %5528)
  %5530 = trunc i32 %5529 to i8
  %5531 = and i8 %5530, 1
  %5532 = xor i8 %5531, 1
  store i8 %5532, i8* %13, align 1
  %5533 = xor i32 %5522, %5521
  %5534 = lshr i32 %5533, 4
  %5535 = trunc i32 %5534 to i8
  %5536 = and i8 %5535, 1
  store i8 %5536, i8* %14, align 1
  %5537 = zext i1 %5525 to i8
  store i8 %5537, i8* %15, align 1
  %5538 = lshr i32 %5522, 31
  %5539 = trunc i32 %5538 to i8
  store i8 %5539, i8* %16, align 1
  %5540 = lshr i32 %5521, 31
  %5541 = xor i32 %5538, %5540
  %5542 = add nuw nsw i32 %5541, %5538
  %5543 = icmp eq i32 %5542, 2
  %5544 = zext i1 %5543 to i8
  store i8 %5544, i8* %17, align 1
  %5545 = add i64 %5518, 9
  store i64 %5545, i64* %3, align 8
  store i32 %5522, i32* %5520, align 4
  %5546 = load i64, i64* %3, align 8
  %5547 = add i64 %5546, -45
  store i64 %5547, i64* %3, align 8
  br label %block_.L_476424

block_.L_476456:                                  ; preds = %block_.L_476424
  %5548 = add i64 %5456, 8
  store i64 %5548, i64* %3, align 8
  %5549 = inttoptr i64 %5457 to i32*
  %5550 = load i32, i32* %5549, align 4
  %5551 = add i32 %5550, 1
  %5552 = zext i32 %5551 to i64
  store i64 %5552, i64* %RAX.i1404, align 8
  %5553 = icmp eq i32 %5550, -1
  %5554 = icmp eq i32 %5551, 0
  %5555 = or i1 %5553, %5554
  %5556 = zext i1 %5555 to i8
  store i8 %5556, i8* %12, align 1
  %5557 = and i32 %5551, 255
  %5558 = tail call i32 @llvm.ctpop.i32(i32 %5557)
  %5559 = trunc i32 %5558 to i8
  %5560 = and i8 %5559, 1
  %5561 = xor i8 %5560, 1
  store i8 %5561, i8* %13, align 1
  %5562 = xor i32 %5551, %5550
  %5563 = lshr i32 %5562, 4
  %5564 = trunc i32 %5563 to i8
  %5565 = and i8 %5564, 1
  store i8 %5565, i8* %14, align 1
  %5566 = zext i1 %5554 to i8
  store i8 %5566, i8* %15, align 1
  %5567 = lshr i32 %5551, 31
  %5568 = trunc i32 %5567 to i8
  store i8 %5568, i8* %16, align 1
  %5569 = lshr i32 %5550, 31
  %5570 = xor i32 %5567, %5569
  %5571 = add nuw nsw i32 %5570, %5567
  %5572 = icmp eq i32 %5571, 2
  %5573 = zext i1 %5572 to i8
  store i8 %5573, i8* %17, align 1
  %5574 = add i64 %5456, 14
  store i64 %5574, i64* %3, align 8
  store i32 %5551, i32* %5549, align 4
  %5575 = load i64, i64* %3, align 8
  %5576 = add i64 %5575, -761
  store i64 %5576, i64* %3, align 8
  br label %block_.L_47616b

block_.L_476469:                                  ; preds = %block_.L_47616b
  %5577 = add i64 %4151, -48
  %5578 = add i64 %4187, 7
  store i64 %5578, i64* %3, align 8
  %5579 = inttoptr i64 %5577 to i32*
  store i32 21, i32* %5579, align 4
  %.pre252 = load i64, i64* %3, align 8
  br label %block_.L_476470

block_.L_476470:                                  ; preds = %block_.L_47652a, %block_.L_476469
  %5580 = phi i64 [ %5927, %block_.L_47652a ], [ %.pre252, %block_.L_476469 ]
  %5581 = load i64, i64* %RBP.i, align 8
  %5582 = add i64 %5581, -48
  %5583 = add i64 %5580, 7
  store i64 %5583, i64* %3, align 8
  %5584 = inttoptr i64 %5582 to i32*
  %5585 = load i32, i32* %5584, align 4
  %5586 = add i32 %5585, -400
  %5587 = icmp ult i32 %5585, 400
  %5588 = zext i1 %5587 to i8
  store i8 %5588, i8* %12, align 1
  %5589 = and i32 %5586, 255
  %5590 = tail call i32 @llvm.ctpop.i32(i32 %5589)
  %5591 = trunc i32 %5590 to i8
  %5592 = and i8 %5591, 1
  %5593 = xor i8 %5592, 1
  store i8 %5593, i8* %13, align 1
  %5594 = xor i32 %5585, 16
  %5595 = xor i32 %5594, %5586
  %5596 = lshr i32 %5595, 4
  %5597 = trunc i32 %5596 to i8
  %5598 = and i8 %5597, 1
  store i8 %5598, i8* %14, align 1
  %5599 = icmp eq i32 %5586, 0
  %5600 = zext i1 %5599 to i8
  store i8 %5600, i8* %15, align 1
  %5601 = lshr i32 %5586, 31
  %5602 = trunc i32 %5601 to i8
  store i8 %5602, i8* %16, align 1
  %5603 = lshr i32 %5585, 31
  %5604 = xor i32 %5601, %5603
  %5605 = add nuw nsw i32 %5604, %5603
  %5606 = icmp eq i32 %5605, 2
  %5607 = zext i1 %5606 to i8
  store i8 %5607, i8* %17, align 1
  %5608 = icmp ne i8 %5602, 0
  %5609 = xor i1 %5608, %5606
  %.v379 = select i1 %5609, i64 13, i64 205
  %5610 = add i64 %5580, %.v379
  store i64 %5610, i64* %3, align 8
  br i1 %5609, label %block_47647d, label %block_.L_47653d

block_47647d:                                     ; preds = %block_.L_476470
  %5611 = add i64 %5610, 4
  store i64 %5611, i64* %3, align 8
  %5612 = load i32, i32* %5584, align 4
  %5613 = sext i32 %5612 to i64
  store i64 %5613, i64* %RAX.i1404, align 8
  %5614 = add nsw i64 %5613, 12099168
  %5615 = add i64 %5610, 12
  store i64 %5615, i64* %3, align 8
  %5616 = inttoptr i64 %5614 to i8*
  %5617 = load i8, i8* %5616, align 1
  %5618 = zext i8 %5617 to i64
  store i64 %5618, i64* %RCX.i1715, align 8
  %5619 = zext i8 %5617 to i32
  %5620 = add nsw i32 %5619, -3
  %5621 = icmp ult i8 %5617, 3
  %5622 = zext i1 %5621 to i8
  store i8 %5622, i8* %12, align 1
  %5623 = and i32 %5620, 255
  %5624 = tail call i32 @llvm.ctpop.i32(i32 %5623)
  %5625 = trunc i32 %5624 to i8
  %5626 = and i8 %5625, 1
  %5627 = xor i8 %5626, 1
  store i8 %5627, i8* %13, align 1
  %5628 = xor i32 %5620, %5619
  %5629 = lshr i32 %5628, 4
  %5630 = trunc i32 %5629 to i8
  %5631 = and i8 %5630, 1
  store i8 %5631, i8* %14, align 1
  %5632 = icmp eq i32 %5620, 0
  %5633 = zext i1 %5632 to i8
  store i8 %5633, i8* %15, align 1
  %5634 = lshr i32 %5620, 31
  %5635 = trunc i32 %5634 to i8
  store i8 %5635, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v445 = select i1 %5632, i64 173, i64 21
  %5636 = add i64 %5610, %.v445
  store i64 %5636, i64* %3, align 8
  br i1 %5632, label %block_.L_47652a, label %block_476492

block_476492:                                     ; preds = %block_47647d
  %5637 = add i64 %5636, 4
  store i64 %5637, i64* %3, align 8
  %5638 = load i32, i32* %5584, align 4
  %5639 = sext i32 %5638 to i64
  store i64 %5639, i64* %RAX.i1404, align 8
  %5640 = add nsw i64 %5639, -1040
  %5641 = add i64 %5640, %5581
  %5642 = add i64 %5636, 12
  store i64 %5642, i64* %3, align 8
  %5643 = inttoptr i64 %5641 to i8*
  %5644 = load i8, i8* %5643, align 1
  %5645 = sext i8 %5644 to i64
  %5646 = and i64 %5645, 4294967295
  store i64 %5646, i64* %RCX.i1715, align 8
  %5647 = sext i8 %5644 to i32
  %5648 = add nsw i32 %5647, -1
  %5649 = icmp eq i8 %5644, 0
  %5650 = zext i1 %5649 to i8
  store i8 %5650, i8* %12, align 1
  %5651 = and i32 %5648, 255
  %5652 = tail call i32 @llvm.ctpop.i32(i32 %5651)
  %5653 = trunc i32 %5652 to i8
  %5654 = and i8 %5653, 1
  %5655 = xor i8 %5654, 1
  store i8 %5655, i8* %13, align 1
  %5656 = xor i32 %5648, %5647
  %5657 = lshr i32 %5656, 4
  %5658 = trunc i32 %5657 to i8
  %5659 = and i8 %5658, 1
  store i8 %5659, i8* %14, align 1
  %5660 = icmp eq i32 %5648, 0
  %5661 = zext i1 %5660 to i8
  store i8 %5661, i8* %15, align 1
  %5662 = lshr i32 %5648, 31
  %5663 = trunc i32 %5662 to i8
  store i8 %5663, i8* %16, align 1
  %5664 = lshr i32 %5647, 31
  %5665 = xor i32 %5662, %5664
  %5666 = add nuw nsw i32 %5665, %5664
  %5667 = icmp eq i32 %5666, 2
  %5668 = zext i1 %5667 to i8
  store i8 %5668, i8* %17, align 1
  %.v446 = select i1 %5660, i64 21, i64 152
  %5669 = add i64 %5636, %.v446
  store i64 %5669, i64* %3, align 8
  br i1 %5660, label %block_4764a7, label %block_.L_47652a

block_4764a7:                                     ; preds = %block_476492
  %5670 = add i64 %5581, -44
  %5671 = add i64 %5669, 7
  store i64 %5671, i64* %3, align 8
  %5672 = inttoptr i64 %5670 to i32*
  store i32 0, i32* %5672, align 4
  %.pre277 = load i64, i64* %3, align 8
  br label %block_.L_4764ae

block_.L_4764ae:                                  ; preds = %block_.L_476512, %block_4764a7
  %5673 = phi i64 [ %5894, %block_.L_476512 ], [ %.pre277, %block_4764a7 ]
  %5674 = load i64, i64* %RBP.i, align 8
  %5675 = add i64 %5674, -44
  %5676 = add i64 %5673, 4
  store i64 %5676, i64* %3, align 8
  %5677 = inttoptr i64 %5675 to i32*
  %5678 = load i32, i32* %5677, align 4
  %5679 = add i32 %5678, -4
  %5680 = icmp ult i32 %5678, 4
  %5681 = zext i1 %5680 to i8
  store i8 %5681, i8* %12, align 1
  %5682 = and i32 %5679, 255
  %5683 = tail call i32 @llvm.ctpop.i32(i32 %5682)
  %5684 = trunc i32 %5683 to i8
  %5685 = and i8 %5684, 1
  %5686 = xor i8 %5685, 1
  store i8 %5686, i8* %13, align 1
  %5687 = xor i32 %5679, %5678
  %5688 = lshr i32 %5687, 4
  %5689 = trunc i32 %5688 to i8
  %5690 = and i8 %5689, 1
  store i8 %5690, i8* %14, align 1
  %5691 = icmp eq i32 %5679, 0
  %5692 = zext i1 %5691 to i8
  store i8 %5692, i8* %15, align 1
  %5693 = lshr i32 %5679, 31
  %5694 = trunc i32 %5693 to i8
  store i8 %5694, i8* %16, align 1
  %5695 = lshr i32 %5678, 31
  %5696 = xor i32 %5693, %5695
  %5697 = add nuw nsw i32 %5696, %5695
  %5698 = icmp eq i32 %5697, 2
  %5699 = zext i1 %5698 to i8
  store i8 %5699, i8* %17, align 1
  %5700 = icmp ne i8 %5694, 0
  %5701 = xor i1 %5700, %5698
  %.v447 = select i1 %5701, i64 10, i64 119
  %5702 = add i64 %5673, %.v447
  store i64 %5702, i64* %3, align 8
  br i1 %5701, label %block_4764b8, label %block_.L_476525

block_4764b8:                                     ; preds = %block_.L_4764ae
  %5703 = add i64 %5674, -48
  %5704 = add i64 %5702, 3
  store i64 %5704, i64* %3, align 8
  %5705 = inttoptr i64 %5703 to i32*
  %5706 = load i32, i32* %5705, align 4
  %5707 = zext i32 %5706 to i64
  store i64 %5707, i64* %RAX.i1404, align 8
  %5708 = add i64 %5702, 7
  store i64 %5708, i64* %3, align 8
  %5709 = load i32, i32* %5677, align 4
  %5710 = sext i32 %5709 to i64
  store i64 %5710, i64* %RCX.i1715, align 8
  %5711 = shl nsw i64 %5710, 2
  %5712 = add nsw i64 %5711, 8053168
  %5713 = add i64 %5702, 14
  store i64 %5713, i64* %3, align 8
  %5714 = inttoptr i64 %5712 to i32*
  %5715 = load i32, i32* %5714, align 4
  %5716 = add i32 %5715, %5706
  %5717 = zext i32 %5716 to i64
  store i64 %5717, i64* %RAX.i1404, align 8
  %5718 = icmp ult i32 %5716, %5706
  %5719 = icmp ult i32 %5716, %5715
  %5720 = or i1 %5718, %5719
  %5721 = zext i1 %5720 to i8
  store i8 %5721, i8* %12, align 1
  %5722 = and i32 %5716, 255
  %5723 = tail call i32 @llvm.ctpop.i32(i32 %5722)
  %5724 = trunc i32 %5723 to i8
  %5725 = and i8 %5724, 1
  %5726 = xor i8 %5725, 1
  store i8 %5726, i8* %13, align 1
  %5727 = xor i32 %5715, %5706
  %5728 = xor i32 %5727, %5716
  %5729 = lshr i32 %5728, 4
  %5730 = trunc i32 %5729 to i8
  %5731 = and i8 %5730, 1
  store i8 %5731, i8* %14, align 1
  %5732 = icmp eq i32 %5716, 0
  %5733 = zext i1 %5732 to i8
  store i8 %5733, i8* %15, align 1
  %5734 = lshr i32 %5716, 31
  %5735 = trunc i32 %5734 to i8
  store i8 %5735, i8* %16, align 1
  %5736 = lshr i32 %5706, 31
  %5737 = lshr i32 %5715, 31
  %5738 = xor i32 %5734, %5736
  %5739 = xor i32 %5734, %5737
  %5740 = add nuw nsw i32 %5738, %5739
  %5741 = icmp eq i32 %5740, 2
  %5742 = zext i1 %5741 to i8
  store i8 %5742, i8* %17, align 1
  %5743 = sext i32 %5716 to i64
  store i64 %5743, i64* %RCX.i1715, align 8
  %5744 = add nsw i64 %5743, 12099168
  %5745 = add i64 %5702, 25
  store i64 %5745, i64* %3, align 8
  %5746 = inttoptr i64 %5744 to i8*
  %5747 = load i8, i8* %5746, align 1
  %5748 = zext i8 %5747 to i64
  store i64 %5748, i64* %RAX.i1404, align 8
  %5749 = zext i8 %5747 to i32
  %5750 = add nsw i32 %5749, -3
  %5751 = icmp ult i8 %5747, 3
  %5752 = zext i1 %5751 to i8
  store i8 %5752, i8* %12, align 1
  %5753 = and i32 %5750, 255
  %5754 = tail call i32 @llvm.ctpop.i32(i32 %5753)
  %5755 = trunc i32 %5754 to i8
  %5756 = and i8 %5755, 1
  %5757 = xor i8 %5756, 1
  store i8 %5757, i8* %13, align 1
  %5758 = xor i32 %5750, %5749
  %5759 = lshr i32 %5758, 4
  %5760 = trunc i32 %5759 to i8
  %5761 = and i8 %5760, 1
  store i8 %5761, i8* %14, align 1
  %5762 = icmp eq i32 %5750, 0
  %5763 = zext i1 %5762 to i8
  store i8 %5763, i8* %15, align 1
  %5764 = lshr i32 %5750, 31
  %5765 = trunc i32 %5764 to i8
  store i8 %5765, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v448 = select i1 %5762, i64 90, i64 34
  %5766 = add i64 %5702, %.v448
  store i64 %5766, i64* %3, align 8
  br i1 %5762, label %block_.L_476512, label %block_4764da

block_4764da:                                     ; preds = %block_4764b8
  %5767 = add i64 %5766, 3
  store i64 %5767, i64* %3, align 8
  %5768 = load i32, i32* %5705, align 4
  %5769 = zext i32 %5768 to i64
  store i64 %5769, i64* %RAX.i1404, align 8
  %5770 = add i64 %5766, 7
  store i64 %5770, i64* %3, align 8
  %5771 = load i32, i32* %5677, align 4
  %5772 = sext i32 %5771 to i64
  store i64 %5772, i64* %RCX.i1715, align 8
  %5773 = shl nsw i64 %5772, 2
  %5774 = add nsw i64 %5773, 8053168
  %5775 = add i64 %5766, 14
  store i64 %5775, i64* %3, align 8
  %5776 = inttoptr i64 %5774 to i32*
  %5777 = load i32, i32* %5776, align 4
  %5778 = add i32 %5777, %5768
  %5779 = zext i32 %5778 to i64
  store i64 %5779, i64* %RAX.i1404, align 8
  %5780 = icmp ult i32 %5778, %5768
  %5781 = icmp ult i32 %5778, %5777
  %5782 = or i1 %5780, %5781
  %5783 = zext i1 %5782 to i8
  store i8 %5783, i8* %12, align 1
  %5784 = and i32 %5778, 255
  %5785 = tail call i32 @llvm.ctpop.i32(i32 %5784)
  %5786 = trunc i32 %5785 to i8
  %5787 = and i8 %5786, 1
  %5788 = xor i8 %5787, 1
  store i8 %5788, i8* %13, align 1
  %5789 = xor i32 %5777, %5768
  %5790 = xor i32 %5789, %5778
  %5791 = lshr i32 %5790, 4
  %5792 = trunc i32 %5791 to i8
  %5793 = and i8 %5792, 1
  store i8 %5793, i8* %14, align 1
  %5794 = icmp eq i32 %5778, 0
  %5795 = zext i1 %5794 to i8
  store i8 %5795, i8* %15, align 1
  %5796 = lshr i32 %5778, 31
  %5797 = trunc i32 %5796 to i8
  store i8 %5797, i8* %16, align 1
  %5798 = lshr i32 %5768, 31
  %5799 = lshr i32 %5777, 31
  %5800 = xor i32 %5796, %5798
  %5801 = xor i32 %5796, %5799
  %5802 = add nuw nsw i32 %5800, %5801
  %5803 = icmp eq i32 %5802, 2
  %5804 = zext i1 %5803 to i8
  store i8 %5804, i8* %17, align 1
  %5805 = sext i32 %5778 to i64
  store i64 %5805, i64* %RCX.i1715, align 8
  %5806 = add nsw i64 %5805, -1040
  %5807 = add i64 %5806, %5674
  %5808 = add i64 %5766, 25
  store i64 %5808, i64* %3, align 8
  %5809 = inttoptr i64 %5807 to i8*
  %5810 = load i8, i8* %5809, align 1
  store i8 0, i8* %12, align 1
  %5811 = zext i8 %5810 to i32
  %5812 = tail call i32 @llvm.ctpop.i32(i32 %5811)
  %5813 = trunc i32 %5812 to i8
  %5814 = and i8 %5813, 1
  %5815 = xor i8 %5814, 1
  store i8 %5815, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %5816 = icmp eq i8 %5810, 0
  %5817 = zext i1 %5816 to i8
  store i8 %5817, i8* %15, align 1
  %5818 = lshr i8 %5810, 7
  store i8 %5818, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v449 = select i1 %5816, i64 31, i64 56
  %5819 = add i64 %5766, %.v449
  store i64 %5819, i64* %3, align 8
  br i1 %5816, label %block_4764f9, label %block_.L_476512

block_4764f9:                                     ; preds = %block_4764da
  %5820 = add i64 %5819, 3
  store i64 %5820, i64* %3, align 8
  %5821 = load i32, i32* %5705, align 4
  %5822 = zext i32 %5821 to i64
  store i64 %5822, i64* %RAX.i1404, align 8
  %5823 = add i64 %5819, 7
  store i64 %5823, i64* %3, align 8
  %5824 = load i32, i32* %5677, align 4
  %5825 = sext i32 %5824 to i64
  store i64 %5825, i64* %RCX.i1715, align 8
  %5826 = shl nsw i64 %5825, 2
  %5827 = add nsw i64 %5826, 8053168
  %5828 = add i64 %5819, 14
  store i64 %5828, i64* %3, align 8
  %5829 = inttoptr i64 %5827 to i32*
  %5830 = load i32, i32* %5829, align 4
  %5831 = add i32 %5830, %5821
  %5832 = zext i32 %5831 to i64
  store i64 %5832, i64* %RAX.i1404, align 8
  %5833 = icmp ult i32 %5831, %5821
  %5834 = icmp ult i32 %5831, %5830
  %5835 = or i1 %5833, %5834
  %5836 = zext i1 %5835 to i8
  store i8 %5836, i8* %12, align 1
  %5837 = and i32 %5831, 255
  %5838 = tail call i32 @llvm.ctpop.i32(i32 %5837)
  %5839 = trunc i32 %5838 to i8
  %5840 = and i8 %5839, 1
  %5841 = xor i8 %5840, 1
  store i8 %5841, i8* %13, align 1
  %5842 = xor i32 %5830, %5821
  %5843 = xor i32 %5842, %5831
  %5844 = lshr i32 %5843, 4
  %5845 = trunc i32 %5844 to i8
  %5846 = and i8 %5845, 1
  store i8 %5846, i8* %14, align 1
  %5847 = icmp eq i32 %5831, 0
  %5848 = zext i1 %5847 to i8
  store i8 %5848, i8* %15, align 1
  %5849 = lshr i32 %5831, 31
  %5850 = trunc i32 %5849 to i8
  store i8 %5850, i8* %16, align 1
  %5851 = lshr i32 %5821, 31
  %5852 = lshr i32 %5830, 31
  %5853 = xor i32 %5849, %5851
  %5854 = xor i32 %5849, %5852
  %5855 = add nuw nsw i32 %5853, %5854
  %5856 = icmp eq i32 %5855, 2
  %5857 = zext i1 %5856 to i8
  store i8 %5857, i8* %17, align 1
  %5858 = sext i32 %5831 to i64
  store i64 %5858, i64* %RCX.i1715, align 8
  %5859 = add nsw i64 %5858, -1040
  %5860 = add i64 %5859, %5674
  %5861 = add i64 %5819, 25
  store i64 %5861, i64* %3, align 8
  %5862 = inttoptr i64 %5860 to i8*
  store i8 2, i8* %5862, align 1
  %.pre278 = load i64, i64* %3, align 8
  %.pre279 = load i64, i64* %RBP.i, align 8
  br label %block_.L_476512

block_.L_476512:                                  ; preds = %block_4764da, %block_4764f9, %block_4764b8
  %5863 = phi i64 [ %.pre279, %block_4764f9 ], [ %5674, %block_4764da ], [ %5674, %block_4764b8 ]
  %5864 = phi i64 [ %.pre278, %block_4764f9 ], [ %5819, %block_4764da ], [ %5766, %block_4764b8 ]
  %5865 = add i64 %5863, -44
  %5866 = add i64 %5864, 8
  store i64 %5866, i64* %3, align 8
  %5867 = inttoptr i64 %5865 to i32*
  %5868 = load i32, i32* %5867, align 4
  %5869 = add i32 %5868, 1
  %5870 = zext i32 %5869 to i64
  store i64 %5870, i64* %RAX.i1404, align 8
  %5871 = icmp eq i32 %5868, -1
  %5872 = icmp eq i32 %5869, 0
  %5873 = or i1 %5871, %5872
  %5874 = zext i1 %5873 to i8
  store i8 %5874, i8* %12, align 1
  %5875 = and i32 %5869, 255
  %5876 = tail call i32 @llvm.ctpop.i32(i32 %5875)
  %5877 = trunc i32 %5876 to i8
  %5878 = and i8 %5877, 1
  %5879 = xor i8 %5878, 1
  store i8 %5879, i8* %13, align 1
  %5880 = xor i32 %5869, %5868
  %5881 = lshr i32 %5880, 4
  %5882 = trunc i32 %5881 to i8
  %5883 = and i8 %5882, 1
  store i8 %5883, i8* %14, align 1
  %5884 = zext i1 %5872 to i8
  store i8 %5884, i8* %15, align 1
  %5885 = lshr i32 %5869, 31
  %5886 = trunc i32 %5885 to i8
  store i8 %5886, i8* %16, align 1
  %5887 = lshr i32 %5868, 31
  %5888 = xor i32 %5885, %5887
  %5889 = add nuw nsw i32 %5888, %5885
  %5890 = icmp eq i32 %5889, 2
  %5891 = zext i1 %5890 to i8
  store i8 %5891, i8* %17, align 1
  %5892 = add i64 %5864, 14
  store i64 %5892, i64* %3, align 8
  store i32 %5869, i32* %5867, align 4
  %5893 = load i64, i64* %3, align 8
  %5894 = add i64 %5893, -114
  store i64 %5894, i64* %3, align 8
  br label %block_.L_4764ae

block_.L_476525:                                  ; preds = %block_.L_4764ae
  %5895 = add i64 %5702, 5
  store i64 %5895, i64* %3, align 8
  br label %block_.L_47652a

block_.L_47652a:                                  ; preds = %block_476492, %block_.L_476525, %block_47647d
  %5896 = phi i64 [ %5674, %block_.L_476525 ], [ %5581, %block_476492 ], [ %5581, %block_47647d ]
  %5897 = phi i64 [ %5895, %block_.L_476525 ], [ %5669, %block_476492 ], [ %5636, %block_47647d ]
  %5898 = add i64 %5896, -48
  %5899 = add i64 %5897, 8
  store i64 %5899, i64* %3, align 8
  %5900 = inttoptr i64 %5898 to i32*
  %5901 = load i32, i32* %5900, align 4
  %5902 = add i32 %5901, 1
  %5903 = zext i32 %5902 to i64
  store i64 %5903, i64* %RAX.i1404, align 8
  %5904 = icmp eq i32 %5901, -1
  %5905 = icmp eq i32 %5902, 0
  %5906 = or i1 %5904, %5905
  %5907 = zext i1 %5906 to i8
  store i8 %5907, i8* %12, align 1
  %5908 = and i32 %5902, 255
  %5909 = tail call i32 @llvm.ctpop.i32(i32 %5908)
  %5910 = trunc i32 %5909 to i8
  %5911 = and i8 %5910, 1
  %5912 = xor i8 %5911, 1
  store i8 %5912, i8* %13, align 1
  %5913 = xor i32 %5902, %5901
  %5914 = lshr i32 %5913, 4
  %5915 = trunc i32 %5914 to i8
  %5916 = and i8 %5915, 1
  store i8 %5916, i8* %14, align 1
  %5917 = zext i1 %5905 to i8
  store i8 %5917, i8* %15, align 1
  %5918 = lshr i32 %5902, 31
  %5919 = trunc i32 %5918 to i8
  store i8 %5919, i8* %16, align 1
  %5920 = lshr i32 %5901, 31
  %5921 = xor i32 %5918, %5920
  %5922 = add nuw nsw i32 %5921, %5918
  %5923 = icmp eq i32 %5922, 2
  %5924 = zext i1 %5923 to i8
  store i8 %5924, i8* %17, align 1
  %5925 = add i64 %5897, 14
  store i64 %5925, i64* %3, align 8
  store i32 %5902, i32* %5900, align 4
  %5926 = load i64, i64* %3, align 8
  %5927 = add i64 %5926, -200
  store i64 %5927, i64* %3, align 8
  br label %block_.L_476470

block_.L_47653d:                                  ; preds = %block_.L_476470
  %5928 = add i64 %5610, 7
  store i64 %5928, i64* %3, align 8
  store i32 21, i32* %5584, align 4
  %.pre253 = load i64, i64* %3, align 8
  br label %block_.L_476544

block_.L_476544:                                  ; preds = %block_.L_47662f, %block_.L_47653d
  %5929 = phi i64 [ %.pre253, %block_.L_47653d ], [ %6257, %block_.L_47662f ]
  %5930 = load i64, i64* %RBP.i, align 8
  %5931 = add i64 %5930, -48
  %5932 = add i64 %5929, 7
  store i64 %5932, i64* %3, align 8
  %5933 = inttoptr i64 %5931 to i32*
  %5934 = load i32, i32* %5933, align 4
  %5935 = add i32 %5934, -400
  %5936 = icmp ult i32 %5934, 400
  %5937 = zext i1 %5936 to i8
  store i8 %5937, i8* %12, align 1
  %5938 = and i32 %5935, 255
  %5939 = tail call i32 @llvm.ctpop.i32(i32 %5938)
  %5940 = trunc i32 %5939 to i8
  %5941 = and i8 %5940, 1
  %5942 = xor i8 %5941, 1
  store i8 %5942, i8* %13, align 1
  %5943 = xor i32 %5934, 16
  %5944 = xor i32 %5943, %5935
  %5945 = lshr i32 %5944, 4
  %5946 = trunc i32 %5945 to i8
  %5947 = and i8 %5946, 1
  store i8 %5947, i8* %14, align 1
  %5948 = icmp eq i32 %5935, 0
  %5949 = zext i1 %5948 to i8
  store i8 %5949, i8* %15, align 1
  %5950 = lshr i32 %5935, 31
  %5951 = trunc i32 %5950 to i8
  store i8 %5951, i8* %16, align 1
  %5952 = lshr i32 %5934, 31
  %5953 = xor i32 %5950, %5952
  %5954 = add nuw nsw i32 %5953, %5952
  %5955 = icmp eq i32 %5954, 2
  %5956 = zext i1 %5955 to i8
  store i8 %5956, i8* %17, align 1
  %5957 = icmp ne i8 %5951, 0
  %5958 = xor i1 %5957, %5955
  %.v380 = select i1 %5958, i64 13, i64 254
  %5959 = add i64 %5929, %.v380
  store i64 %5959, i64* %3, align 8
  br i1 %5958, label %block_476551, label %block_.L_476642

block_476551:                                     ; preds = %block_.L_476544
  %5960 = add i64 %5959, 4
  store i64 %5960, i64* %3, align 8
  %5961 = load i32, i32* %5933, align 4
  %5962 = sext i32 %5961 to i64
  store i64 %5962, i64* %RAX.i1404, align 8
  %5963 = add nsw i64 %5962, 12099168
  %5964 = add i64 %5959, 12
  store i64 %5964, i64* %3, align 8
  %5965 = inttoptr i64 %5963 to i8*
  %5966 = load i8, i8* %5965, align 1
  %5967 = zext i8 %5966 to i64
  store i64 %5967, i64* %RCX.i1715, align 8
  %5968 = zext i8 %5966 to i32
  %5969 = add nsw i32 %5968, -3
  %5970 = icmp ult i8 %5966, 3
  %5971 = zext i1 %5970 to i8
  store i8 %5971, i8* %12, align 1
  %5972 = and i32 %5969, 255
  %5973 = tail call i32 @llvm.ctpop.i32(i32 %5972)
  %5974 = trunc i32 %5973 to i8
  %5975 = and i8 %5974, 1
  %5976 = xor i8 %5975, 1
  store i8 %5976, i8* %13, align 1
  %5977 = xor i32 %5969, %5968
  %5978 = lshr i32 %5977, 4
  %5979 = trunc i32 %5978 to i8
  %5980 = and i8 %5979, 1
  store i8 %5980, i8* %14, align 1
  %5981 = icmp eq i32 %5969, 0
  %5982 = zext i1 %5981 to i8
  store i8 %5982, i8* %15, align 1
  %5983 = lshr i32 %5969, 31
  %5984 = trunc i32 %5983 to i8
  store i8 %5984, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v437 = select i1 %5981, i64 222, i64 21
  %5985 = add i64 %5959, %.v437
  store i64 %5985, i64* %3, align 8
  br i1 %5981, label %block_.L_47662f, label %block_476566

block_476566:                                     ; preds = %block_476551
  %5986 = add i64 %5985, 4
  store i64 %5986, i64* %3, align 8
  %5987 = load i32, i32* %5933, align 4
  %5988 = sext i32 %5987 to i64
  store i64 %5988, i64* %RAX.i1404, align 8
  %5989 = add nsw i64 %5988, -1040
  %5990 = add i64 %5989, %5930
  %5991 = add i64 %5985, 12
  store i64 %5991, i64* %3, align 8
  %5992 = inttoptr i64 %5990 to i8*
  %5993 = load i8, i8* %5992, align 1
  %5994 = sext i8 %5993 to i64
  %5995 = and i64 %5994, 4294967295
  store i64 %5995, i64* %RCX.i1715, align 8
  %5996 = sext i8 %5993 to i32
  %5997 = add nsw i32 %5996, -1
  %5998 = icmp eq i8 %5993, 0
  %5999 = zext i1 %5998 to i8
  store i8 %5999, i8* %12, align 1
  %6000 = and i32 %5997, 255
  %6001 = tail call i32 @llvm.ctpop.i32(i32 %6000)
  %6002 = trunc i32 %6001 to i8
  %6003 = and i8 %6002, 1
  %6004 = xor i8 %6003, 1
  store i8 %6004, i8* %13, align 1
  %6005 = xor i32 %5997, %5996
  %6006 = lshr i32 %6005, 4
  %6007 = trunc i32 %6006 to i8
  %6008 = and i8 %6007, 1
  store i8 %6008, i8* %14, align 1
  %6009 = icmp eq i32 %5997, 0
  %6010 = zext i1 %6009 to i8
  store i8 %6010, i8* %15, align 1
  %6011 = lshr i32 %5997, 31
  %6012 = trunc i32 %6011 to i8
  store i8 %6012, i8* %16, align 1
  %6013 = lshr i32 %5996, 31
  %6014 = xor i32 %6011, %6013
  %6015 = add nuw nsw i32 %6014, %6013
  %6016 = icmp eq i32 %6015, 2
  %6017 = zext i1 %6016 to i8
  store i8 %6017, i8* %17, align 1
  %.v438 = select i1 %6009, i64 21, i64 201
  %6018 = add i64 %5985, %.v438
  store i64 %6018, i64* %3, align 8
  br i1 %6009, label %block_47657b, label %block_.L_47662f

block_47657b:                                     ; preds = %block_476566
  %6019 = add i64 %6018, 4
  store i64 %6019, i64* %3, align 8
  %6020 = load i32, i32* %5933, align 4
  %6021 = sext i32 %6020 to i64
  store i64 %6021, i64* %RAX.i1404, align 8
  %6022 = add nsw i64 %6021, 12099168
  %6023 = add i64 %6018, 12
  store i64 %6023, i64* %3, align 8
  %6024 = inttoptr i64 %6022 to i8*
  %6025 = load i8, i8* %6024, align 1
  %6026 = zext i8 %6025 to i64
  store i64 %6026, i64* %RCX.i1715, align 8
  %6027 = zext i8 %6025 to i32
  %6028 = add i64 %5930, -228
  %6029 = add i64 %6018, 18
  store i64 %6029, i64* %3, align 8
  %6030 = inttoptr i64 %6028 to i32*
  %6031 = load i32, i32* %6030, align 4
  %6032 = sub i32 %6027, %6031
  %6033 = icmp ult i32 %6027, %6031
  %6034 = zext i1 %6033 to i8
  store i8 %6034, i8* %12, align 1
  %6035 = and i32 %6032, 255
  %6036 = tail call i32 @llvm.ctpop.i32(i32 %6035)
  %6037 = trunc i32 %6036 to i8
  %6038 = and i8 %6037, 1
  %6039 = xor i8 %6038, 1
  store i8 %6039, i8* %13, align 1
  %6040 = xor i32 %6031, %6027
  %6041 = xor i32 %6040, %6032
  %6042 = lshr i32 %6041, 4
  %6043 = trunc i32 %6042 to i8
  %6044 = and i8 %6043, 1
  store i8 %6044, i8* %14, align 1
  %6045 = icmp eq i32 %6032, 0
  %6046 = zext i1 %6045 to i8
  store i8 %6046, i8* %15, align 1
  %6047 = lshr i32 %6032, 31
  %6048 = trunc i32 %6047 to i8
  store i8 %6048, i8* %16, align 1
  %6049 = lshr i32 %6031, 31
  %6050 = add nuw nsw i32 %6047, %6049
  %6051 = icmp eq i32 %6050, 2
  %6052 = zext i1 %6051 to i8
  store i8 %6052, i8* %17, align 1
  %.v439 = select i1 %6045, i64 24, i64 180
  %6053 = add i64 %6018, %.v439
  store i64 %6053, i64* %3, align 8
  br i1 %6045, label %block_476593, label %block_.L_47662f

block_476593:                                     ; preds = %block_47657b
  %6054 = add i64 %5930, -8
  %6055 = add i64 %6053, 3
  store i64 %6055, i64* %3, align 8
  %6056 = inttoptr i64 %6054 to i32*
  %6057 = load i32, i32* %6056, align 4
  %6058 = zext i32 %6057 to i64
  store i64 %6058, i64* %RDI.i2173, align 8
  %6059 = add i64 %6053, 6
  store i64 %6059, i64* %3, align 8
  %6060 = load i32, i32* %5933, align 4
  %6061 = zext i32 %6060 to i64
  store i64 %6061, i64* %RSI.i2336, align 8
  %6062 = add i64 %6053, -341107
  %6063 = add i64 %6053, 11
  %6064 = load i64, i64* %6, align 8
  %6065 = add i64 %6064, -8
  %6066 = inttoptr i64 %6065 to i64*
  store i64 %6063, i64* %6066, align 8
  store i64 %6065, i64* %6, align 8
  store i64 %6062, i64* %3, align 8
  %call2_476599 = tail call %struct.Memory* @sub_423120.are_neighbor_dragons(%struct.State* nonnull %0, i64 %6062, %struct.Memory* %MEMORY.34)
  %6067 = load i32, i32* %EAX.i1403, align 4
  %6068 = load i64, i64* %3, align 8
  store i8 0, i8* %12, align 1
  %6069 = and i32 %6067, 255
  %6070 = tail call i32 @llvm.ctpop.i32(i32 %6069)
  %6071 = trunc i32 %6070 to i8
  %6072 = and i8 %6071, 1
  %6073 = xor i8 %6072, 1
  store i8 %6073, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %6074 = icmp eq i32 %6067, 0
  %6075 = zext i1 %6074 to i8
  store i8 %6075, i8* %15, align 1
  %6076 = lshr i32 %6067, 31
  %6077 = trunc i32 %6076 to i8
  store i8 %6077, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v440 = select i1 %6074, i64 145, i64 9
  %6078 = add i64 %6068, %.v440
  store i64 %6078, i64* %3, align 8
  %.pre276 = load i64, i64* %RBP.i, align 8
  br i1 %6074, label %block_.L_47662f, label %block_4765a7

block_4765a7:                                     ; preds = %block_476593
  %6079 = add i64 %.pre276, -48
  %6080 = add i64 %6078, 4
  store i64 %6080, i64* %3, align 8
  %6081 = inttoptr i64 %6079 to i32*
  %6082 = load i32, i32* %6081, align 4
  %6083 = sext i32 %6082 to i64
  store i64 %6083, i64* %RAX.i1404, align 8
  %6084 = add nsw i64 %6083, -640
  %6085 = add i64 %6084, %.pre276
  %6086 = add i64 %6078, 12
  store i64 %6086, i64* %3, align 8
  %6087 = inttoptr i64 %6085 to i8*
  %6088 = load i8, i8* %6087, align 1
  store i8 0, i8* %12, align 1
  %6089 = zext i8 %6088 to i32
  %6090 = tail call i32 @llvm.ctpop.i32(i32 %6089)
  %6091 = trunc i32 %6090 to i8
  %6092 = and i8 %6091, 1
  %6093 = xor i8 %6092, 1
  store i8 %6093, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %6094 = icmp eq i8 %6088, 0
  %6095 = zext i1 %6094 to i8
  store i8 %6095, i8* %15, align 1
  %6096 = lshr i8 %6088, 7
  store i8 %6096, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v441 = select i1 %6094, i64 18, i64 136
  %6097 = add i64 %6078, %.v441
  store i64 %6097, i64* %3, align 8
  br i1 %6094, label %block_4765b9, label %block_.L_47662f

block_4765b9:                                     ; preds = %block_4765a7
  %6098 = add i64 %.pre276, -1128
  %6099 = add i64 %6097, 10
  store i64 %6099, i64* %3, align 8
  %6100 = inttoptr i64 %6098 to i32*
  store i32 21, i32* %6100, align 4
  %.pre274 = load i64, i64* %3, align 8
  br label %block_.L_4765c3

block_.L_4765c3:                                  ; preds = %block_.L_476611, %block_4765b9
  %6101 = phi i64 [ %.pre274, %block_4765b9 ], [ %6224, %block_.L_476611 ]
  %6102 = load i64, i64* %RBP.i, align 8
  %6103 = add i64 %6102, -1128
  %6104 = add i64 %6101, 10
  store i64 %6104, i64* %3, align 8
  %6105 = inttoptr i64 %6103 to i32*
  %6106 = load i32, i32* %6105, align 4
  %6107 = add i32 %6106, -400
  %6108 = icmp ult i32 %6106, 400
  %6109 = zext i1 %6108 to i8
  store i8 %6109, i8* %12, align 1
  %6110 = and i32 %6107, 255
  %6111 = tail call i32 @llvm.ctpop.i32(i32 %6110)
  %6112 = trunc i32 %6111 to i8
  %6113 = and i8 %6112, 1
  %6114 = xor i8 %6113, 1
  store i8 %6114, i8* %13, align 1
  %6115 = xor i32 %6106, 16
  %6116 = xor i32 %6115, %6107
  %6117 = lshr i32 %6116, 4
  %6118 = trunc i32 %6117 to i8
  %6119 = and i8 %6118, 1
  store i8 %6119, i8* %14, align 1
  %6120 = icmp eq i32 %6107, 0
  %6121 = zext i1 %6120 to i8
  store i8 %6121, i8* %15, align 1
  %6122 = lshr i32 %6107, 31
  %6123 = trunc i32 %6122 to i8
  store i8 %6123, i8* %16, align 1
  %6124 = lshr i32 %6106, 31
  %6125 = xor i32 %6122, %6124
  %6126 = add nuw nsw i32 %6125, %6124
  %6127 = icmp eq i32 %6126, 2
  %6128 = zext i1 %6127 to i8
  store i8 %6128, i8* %17, align 1
  %6129 = icmp ne i8 %6123, 0
  %6130 = xor i1 %6129, %6127
  %.v442 = select i1 %6130, i64 16, i64 103
  %6131 = add i64 %6101, %.v442
  store i64 %6131, i64* %3, align 8
  br i1 %6130, label %block_4765d3, label %block_.L_47662a

block_4765d3:                                     ; preds = %block_.L_4765c3
  %6132 = add i64 %6131, 7
  store i64 %6132, i64* %3, align 8
  %6133 = load i32, i32* %6105, align 4
  %6134 = sext i32 %6133 to i64
  store i64 %6134, i64* %RAX.i1404, align 8
  %6135 = add nsw i64 %6134, 12099168
  %6136 = add i64 %6131, 15
  store i64 %6136, i64* %3, align 8
  %6137 = inttoptr i64 %6135 to i8*
  %6138 = load i8, i8* %6137, align 1
  %6139 = zext i8 %6138 to i64
  store i64 %6139, i64* %RCX.i1715, align 8
  %6140 = zext i8 %6138 to i32
  %6141 = add nsw i32 %6140, -3
  %6142 = icmp ult i8 %6138, 3
  %6143 = zext i1 %6142 to i8
  store i8 %6143, i8* %12, align 1
  %6144 = and i32 %6141, 255
  %6145 = tail call i32 @llvm.ctpop.i32(i32 %6144)
  %6146 = trunc i32 %6145 to i8
  %6147 = and i8 %6146, 1
  %6148 = xor i8 %6147, 1
  store i8 %6148, i8* %13, align 1
  %6149 = xor i32 %6141, %6140
  %6150 = lshr i32 %6149, 4
  %6151 = trunc i32 %6150 to i8
  %6152 = and i8 %6151, 1
  store i8 %6152, i8* %14, align 1
  %6153 = icmp eq i32 %6141, 0
  %6154 = zext i1 %6153 to i8
  store i8 %6154, i8* %15, align 1
  %6155 = lshr i32 %6141, 31
  %6156 = trunc i32 %6155 to i8
  store i8 %6156, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v443 = select i1 %6153, i64 62, i64 24
  %6157 = add i64 %6131, %.v443
  store i64 %6157, i64* %3, align 8
  br i1 %6153, label %block_.L_476611, label %block_4765eb

block_4765eb:                                     ; preds = %block_4765d3
  %6158 = add i64 %6157, 6
  store i64 %6158, i64* %3, align 8
  %6159 = load i32, i32* %6105, align 4
  %6160 = zext i32 %6159 to i64
  store i64 %6160, i64* %RDI.i2173, align 8
  %6161 = add i64 %6102, -48
  %6162 = add i64 %6157, 9
  store i64 %6162, i64* %3, align 8
  %6163 = inttoptr i64 %6161 to i32*
  %6164 = load i32, i32* %6163, align 4
  %6165 = zext i32 %6164 to i64
  store i64 %6165, i64* %RSI.i2336, align 8
  %6166 = add i64 %6157, -354747
  %6167 = add i64 %6157, 14
  %6168 = load i64, i64* %6, align 8
  %6169 = add i64 %6168, -8
  %6170 = inttoptr i64 %6169 to i64*
  store i64 %6167, i64* %6170, align 8
  store i64 %6169, i64* %6, align 8
  store i64 %6166, i64* %3, align 8
  %call2_4765f4 = tail call %struct.Memory* @sub_41fc30.is_same_dragon(%struct.State* nonnull %0, i64 %6166, %struct.Memory* %MEMORY.34)
  %6171 = load i32, i32* %EAX.i1403, align 4
  %6172 = load i64, i64* %3, align 8
  store i8 0, i8* %12, align 1
  %6173 = and i32 %6171, 255
  %6174 = tail call i32 @llvm.ctpop.i32(i32 %6173)
  %6175 = trunc i32 %6174 to i8
  %6176 = and i8 %6175, 1
  %6177 = xor i8 %6176, 1
  store i8 %6177, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %6178 = icmp eq i32 %6171, 0
  %6179 = zext i1 %6178 to i8
  store i8 %6179, i8* %15, align 1
  %6180 = lshr i32 %6171, 31
  %6181 = trunc i32 %6180 to i8
  store i8 %6181, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v444 = select i1 %6178, i64 24, i64 9
  %6182 = add i64 %6172, %.v444
  store i64 %6182, i64* %3, align 8
  br i1 %6178, label %block_.L_476611, label %block_476602

block_476602:                                     ; preds = %block_4765eb
  %6183 = load i64, i64* %RBP.i, align 8
  %6184 = add i64 %6183, -1128
  %6185 = add i64 %6182, 7
  store i64 %6185, i64* %3, align 8
  %6186 = inttoptr i64 %6184 to i32*
  %6187 = load i32, i32* %6186, align 4
  %6188 = sext i32 %6187 to i64
  store i64 %6188, i64* %RAX.i1404, align 8
  %6189 = add nsw i64 %6188, -640
  %6190 = add i64 %6189, %6183
  %6191 = add i64 %6182, 15
  store i64 %6191, i64* %3, align 8
  %6192 = inttoptr i64 %6190 to i8*
  store i8 2, i8* %6192, align 1
  %.pre275 = load i64, i64* %3, align 8
  br label %block_.L_476611

block_.L_476611:                                  ; preds = %block_476602, %block_4765eb, %block_4765d3
  %6193 = phi i64 [ %.pre275, %block_476602 ], [ %6182, %block_4765eb ], [ %6157, %block_4765d3 ]
  %6194 = load i64, i64* %RBP.i, align 8
  %6195 = add i64 %6194, -1128
  %6196 = add i64 %6193, 11
  store i64 %6196, i64* %3, align 8
  %6197 = inttoptr i64 %6195 to i32*
  %6198 = load i32, i32* %6197, align 4
  %6199 = add i32 %6198, 1
  %6200 = zext i32 %6199 to i64
  store i64 %6200, i64* %RAX.i1404, align 8
  %6201 = icmp eq i32 %6198, -1
  %6202 = icmp eq i32 %6199, 0
  %6203 = or i1 %6201, %6202
  %6204 = zext i1 %6203 to i8
  store i8 %6204, i8* %12, align 1
  %6205 = and i32 %6199, 255
  %6206 = tail call i32 @llvm.ctpop.i32(i32 %6205)
  %6207 = trunc i32 %6206 to i8
  %6208 = and i8 %6207, 1
  %6209 = xor i8 %6208, 1
  store i8 %6209, i8* %13, align 1
  %6210 = xor i32 %6199, %6198
  %6211 = lshr i32 %6210, 4
  %6212 = trunc i32 %6211 to i8
  %6213 = and i8 %6212, 1
  store i8 %6213, i8* %14, align 1
  %6214 = zext i1 %6202 to i8
  store i8 %6214, i8* %15, align 1
  %6215 = lshr i32 %6199, 31
  %6216 = trunc i32 %6215 to i8
  store i8 %6216, i8* %16, align 1
  %6217 = lshr i32 %6198, 31
  %6218 = xor i32 %6215, %6217
  %6219 = add nuw nsw i32 %6218, %6215
  %6220 = icmp eq i32 %6219, 2
  %6221 = zext i1 %6220 to i8
  store i8 %6221, i8* %17, align 1
  %6222 = add i64 %6193, 20
  store i64 %6222, i64* %3, align 8
  store i32 %6199, i32* %6197, align 4
  %6223 = load i64, i64* %3, align 8
  %6224 = add i64 %6223, -98
  store i64 %6224, i64* %3, align 8
  br label %block_.L_4765c3

block_.L_47662a:                                  ; preds = %block_.L_4765c3
  %6225 = add i64 %6131, 5
  store i64 %6225, i64* %3, align 8
  br label %block_.L_47662f

block_.L_47662f:                                  ; preds = %block_476593, %block_4765a7, %block_47657b, %block_476566, %block_.L_47662a, %block_476551
  %6226 = phi i64 [ %5930, %block_476551 ], [ %5930, %block_476566 ], [ %5930, %block_47657b ], [ %.pre276, %block_4765a7 ], [ %6102, %block_.L_47662a ], [ %.pre276, %block_476593 ]
  %6227 = phi i64 [ %5985, %block_476551 ], [ %6018, %block_476566 ], [ %6053, %block_47657b ], [ %6097, %block_4765a7 ], [ %6225, %block_.L_47662a ], [ %6078, %block_476593 ]
  %6228 = add i64 %6226, -48
  %6229 = add i64 %6227, 8
  store i64 %6229, i64* %3, align 8
  %6230 = inttoptr i64 %6228 to i32*
  %6231 = load i32, i32* %6230, align 4
  %6232 = add i32 %6231, 1
  %6233 = zext i32 %6232 to i64
  store i64 %6233, i64* %RAX.i1404, align 8
  %6234 = icmp eq i32 %6231, -1
  %6235 = icmp eq i32 %6232, 0
  %6236 = or i1 %6234, %6235
  %6237 = zext i1 %6236 to i8
  store i8 %6237, i8* %12, align 1
  %6238 = and i32 %6232, 255
  %6239 = tail call i32 @llvm.ctpop.i32(i32 %6238)
  %6240 = trunc i32 %6239 to i8
  %6241 = and i8 %6240, 1
  %6242 = xor i8 %6241, 1
  store i8 %6242, i8* %13, align 1
  %6243 = xor i32 %6232, %6231
  %6244 = lshr i32 %6243, 4
  %6245 = trunc i32 %6244 to i8
  %6246 = and i8 %6245, 1
  store i8 %6246, i8* %14, align 1
  %6247 = zext i1 %6235 to i8
  store i8 %6247, i8* %15, align 1
  %6248 = lshr i32 %6232, 31
  %6249 = trunc i32 %6248 to i8
  store i8 %6249, i8* %16, align 1
  %6250 = lshr i32 %6231, 31
  %6251 = xor i32 %6248, %6250
  %6252 = add nuw nsw i32 %6251, %6248
  %6253 = icmp eq i32 %6252, 2
  %6254 = zext i1 %6253 to i8
  store i8 %6254, i8* %17, align 1
  %6255 = add i64 %6227, 14
  store i64 %6255, i64* %3, align 8
  store i32 %6232, i32* %6230, align 4
  %6256 = load i64, i64* %3, align 8
  %6257 = add i64 %6256, -249
  store i64 %6257, i64* %3, align 8
  br label %block_.L_476544

block_.L_476642:                                  ; preds = %block_.L_476544
  %6258 = add i64 %5930, -52
  %6259 = add i64 %5959, 7
  store i64 %6259, i64* %3, align 8
  %6260 = inttoptr i64 %6258 to i32*
  store i32 1, i32* %6260, align 4
  %6261 = load i64, i64* %RBP.i, align 8
  %6262 = add i64 %6261, -36
  %6263 = load i64, i64* %3, align 8
  %6264 = add i64 %6263, 7
  store i64 %6264, i64* %3, align 8
  %6265 = inttoptr i64 %6262 to i32*
  store i32 0, i32* %6265, align 4
  %.pre254 = load i64, i64* %3, align 8
  br label %block_.L_476650

block_.L_476650:                                  ; preds = %block_.L_4766fe, %block_.L_476642
  %6266 = phi i64 [ %6646, %block_.L_4766fe ], [ %.pre254, %block_.L_476642 ]
  %6267 = load i64, i64* %RBP.i, align 8
  %6268 = add i64 %6267, -36
  %6269 = add i64 %6266, 3
  store i64 %6269, i64* %3, align 8
  %6270 = inttoptr i64 %6268 to i32*
  %6271 = load i32, i32* %6270, align 4
  %6272 = zext i32 %6271 to i64
  store i64 %6272, i64* %RAX.i1404, align 8
  %6273 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %6274 = sub i32 %6271, %6273
  %6275 = icmp ult i32 %6271, %6273
  %6276 = zext i1 %6275 to i8
  store i8 %6276, i8* %12, align 1
  %6277 = and i32 %6274, 255
  %6278 = tail call i32 @llvm.ctpop.i32(i32 %6277)
  %6279 = trunc i32 %6278 to i8
  %6280 = and i8 %6279, 1
  %6281 = xor i8 %6280, 1
  store i8 %6281, i8* %13, align 1
  %6282 = xor i32 %6273, %6271
  %6283 = xor i32 %6282, %6274
  %6284 = lshr i32 %6283, 4
  %6285 = trunc i32 %6284 to i8
  %6286 = and i8 %6285, 1
  store i8 %6286, i8* %14, align 1
  %6287 = icmp eq i32 %6274, 0
  %6288 = zext i1 %6287 to i8
  store i8 %6288, i8* %15, align 1
  %6289 = lshr i32 %6274, 31
  %6290 = trunc i32 %6289 to i8
  store i8 %6290, i8* %16, align 1
  %6291 = lshr i32 %6271, 31
  %6292 = lshr i32 %6273, 31
  %6293 = xor i32 %6292, %6291
  %6294 = xor i32 %6289, %6291
  %6295 = add nuw nsw i32 %6294, %6293
  %6296 = icmp eq i32 %6295, 2
  %6297 = zext i1 %6296 to i8
  store i8 %6297, i8* %17, align 1
  %6298 = icmp ne i8 %6290, 0
  %6299 = xor i1 %6298, %6296
  %.v381 = select i1 %6299, i64 16, i64 193
  %6300 = add i64 %6266, %.v381
  store i64 %6300, i64* %3, align 8
  br i1 %6299, label %block_476660, label %block_.L_476711

block_476660:                                     ; preds = %block_.L_476650
  %6301 = add i64 %6267, -40
  %6302 = add i64 %6300, 7
  store i64 %6302, i64* %3, align 8
  %6303 = inttoptr i64 %6301 to i32*
  store i32 0, i32* %6303, align 4
  %.pre271 = load i64, i64* %3, align 8
  br label %block_.L_476667

block_.L_476667:                                  ; preds = %block_.L_4766eb, %block_476660
  %6304 = phi i64 [ %6614, %block_.L_4766eb ], [ %.pre271, %block_476660 ]
  %6305 = load i64, i64* %RBP.i, align 8
  %6306 = add i64 %6305, -40
  %6307 = add i64 %6304, 3
  store i64 %6307, i64* %3, align 8
  %6308 = inttoptr i64 %6306 to i32*
  %6309 = load i32, i32* %6308, align 4
  %6310 = zext i32 %6309 to i64
  store i64 %6310, i64* %RAX.i1404, align 8
  %6311 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %6312 = sub i32 %6309, %6311
  %6313 = icmp ult i32 %6309, %6311
  %6314 = zext i1 %6313 to i8
  store i8 %6314, i8* %12, align 1
  %6315 = and i32 %6312, 255
  %6316 = tail call i32 @llvm.ctpop.i32(i32 %6315)
  %6317 = trunc i32 %6316 to i8
  %6318 = and i8 %6317, 1
  %6319 = xor i8 %6318, 1
  store i8 %6319, i8* %13, align 1
  %6320 = xor i32 %6311, %6309
  %6321 = xor i32 %6320, %6312
  %6322 = lshr i32 %6321, 4
  %6323 = trunc i32 %6322 to i8
  %6324 = and i8 %6323, 1
  store i8 %6324, i8* %14, align 1
  %6325 = icmp eq i32 %6312, 0
  %6326 = zext i1 %6325 to i8
  store i8 %6326, i8* %15, align 1
  %6327 = lshr i32 %6312, 31
  %6328 = trunc i32 %6327 to i8
  store i8 %6328, i8* %16, align 1
  %6329 = lshr i32 %6309, 31
  %6330 = lshr i32 %6311, 31
  %6331 = xor i32 %6330, %6329
  %6332 = xor i32 %6327, %6329
  %6333 = add nuw nsw i32 %6332, %6331
  %6334 = icmp eq i32 %6333, 2
  %6335 = zext i1 %6334 to i8
  store i8 %6335, i8* %17, align 1
  %6336 = icmp ne i8 %6328, 0
  %6337 = xor i1 %6336, %6334
  %.v433 = select i1 %6337, i64 16, i64 151
  %6338 = add i64 %6304, %.v433
  store i64 %6338, i64* %3, align 8
  br i1 %6337, label %block_476677, label %block_.L_4766fe.loopexit

block_476677:                                     ; preds = %block_.L_476667
  %6339 = add i64 %6305, -36
  %6340 = add i64 %6338, 4
  store i64 %6340, i64* %3, align 8
  %6341 = inttoptr i64 %6339 to i32*
  %6342 = load i32, i32* %6341, align 4
  %6343 = mul i32 %6342, 20
  %6344 = add i32 %6343, 21
  %6345 = zext i32 %6344 to i64
  store i64 %6345, i64* %RAX.i1404, align 8
  %6346 = icmp ugt i32 %6343, -22
  %6347 = zext i1 %6346 to i8
  store i8 %6347, i8* %12, align 1
  %6348 = and i32 %6344, 253
  %6349 = tail call i32 @llvm.ctpop.i32(i32 %6348)
  %6350 = trunc i32 %6349 to i8
  %6351 = and i8 %6350, 1
  %6352 = xor i8 %6351, 1
  store i8 %6352, i8* %13, align 1
  %6353 = xor i32 %6343, 16
  %6354 = xor i32 %6353, %6344
  %6355 = lshr i32 %6354, 4
  %6356 = trunc i32 %6355 to i8
  %6357 = and i8 %6356, 1
  store i8 %6357, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %6358 = lshr i32 %6344, 31
  %6359 = trunc i32 %6358 to i8
  store i8 %6359, i8* %16, align 1
  %6360 = lshr i32 %6343, 31
  %6361 = xor i32 %6358, %6360
  %6362 = add nuw nsw i32 %6361, %6358
  %6363 = icmp eq i32 %6362, 2
  %6364 = zext i1 %6363 to i8
  store i8 %6364, i8* %17, align 1
  %6365 = add i64 %6338, 10
  store i64 %6365, i64* %3, align 8
  %6366 = load i32, i32* %6308, align 4
  %6367 = add i32 %6366, %6344
  %6368 = zext i32 %6367 to i64
  store i64 %6368, i64* %RAX.i1404, align 8
  %6369 = icmp ult i32 %6367, %6344
  %6370 = icmp ult i32 %6367, %6366
  %6371 = or i1 %6369, %6370
  %6372 = zext i1 %6371 to i8
  store i8 %6372, i8* %12, align 1
  %6373 = and i32 %6367, 255
  %6374 = tail call i32 @llvm.ctpop.i32(i32 %6373)
  %6375 = trunc i32 %6374 to i8
  %6376 = and i8 %6375, 1
  %6377 = xor i8 %6376, 1
  store i8 %6377, i8* %13, align 1
  %6378 = xor i32 %6366, %6344
  %6379 = xor i32 %6378, %6367
  %6380 = lshr i32 %6379, 4
  %6381 = trunc i32 %6380 to i8
  %6382 = and i8 %6381, 1
  store i8 %6382, i8* %14, align 1
  %6383 = icmp eq i32 %6367, 0
  %6384 = zext i1 %6383 to i8
  store i8 %6384, i8* %15, align 1
  %6385 = lshr i32 %6367, 31
  %6386 = trunc i32 %6385 to i8
  store i8 %6386, i8* %16, align 1
  %6387 = lshr i32 %6366, 31
  %6388 = xor i32 %6385, %6358
  %6389 = xor i32 %6385, %6387
  %6390 = add nuw nsw i32 %6388, %6389
  %6391 = icmp eq i32 %6390, 2
  %6392 = zext i1 %6391 to i8
  store i8 %6392, i8* %17, align 1
  %6393 = sext i32 %6367 to i64
  store i64 %6393, i64* %RCX.i1715, align 8
  %6394 = add nsw i64 %6393, -640
  %6395 = add i64 %6394, %6305
  %6396 = add i64 %6338, 21
  store i64 %6396, i64* %3, align 8
  %6397 = inttoptr i64 %6395 to i8*
  %6398 = load i8, i8* %6397, align 1
  store i8 0, i8* %12, align 1
  %6399 = zext i8 %6398 to i32
  %6400 = tail call i32 @llvm.ctpop.i32(i32 %6399)
  %6401 = trunc i32 %6400 to i8
  %6402 = and i8 %6401, 1
  %6403 = xor i8 %6402, 1
  store i8 %6403, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %6404 = icmp eq i8 %6398, 0
  %6405 = zext i1 %6404 to i8
  store i8 %6405, i8* %15, align 1
  %6406 = lshr i8 %6398, 7
  store i8 %6406, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v434 = select i1 %6404, i64 116, i64 27
  %6407 = add i64 %6338, %.v434
  store i64 %6407, i64* %3, align 8
  br i1 %6404, label %block_.L_4766eb, label %block_476692

block_476692:                                     ; preds = %block_476677
  %6408 = load i64, i64* %RBP.i, align 8
  %6409 = add i64 %6408, -36
  %6410 = add i64 %6407, 4
  store i64 %6410, i64* %3, align 8
  %6411 = inttoptr i64 %6409 to i32*
  %6412 = load i32, i32* %6411, align 4
  %6413 = mul i32 %6412, 20
  %6414 = add i32 %6413, 21
  %6415 = zext i32 %6414 to i64
  store i64 %6415, i64* %RAX.i1404, align 8
  %6416 = icmp ugt i32 %6413, -22
  %6417 = zext i1 %6416 to i8
  store i8 %6417, i8* %12, align 1
  %6418 = and i32 %6414, 253
  %6419 = tail call i32 @llvm.ctpop.i32(i32 %6418)
  %6420 = trunc i32 %6419 to i8
  %6421 = and i8 %6420, 1
  %6422 = xor i8 %6421, 1
  store i8 %6422, i8* %13, align 1
  %6423 = xor i32 %6413, 16
  %6424 = xor i32 %6423, %6414
  %6425 = lshr i32 %6424, 4
  %6426 = trunc i32 %6425 to i8
  %6427 = and i8 %6426, 1
  store i8 %6427, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %6428 = lshr i32 %6414, 31
  %6429 = trunc i32 %6428 to i8
  store i8 %6429, i8* %16, align 1
  %6430 = lshr i32 %6413, 31
  %6431 = xor i32 %6428, %6430
  %6432 = add nuw nsw i32 %6431, %6428
  %6433 = icmp eq i32 %6432, 2
  %6434 = zext i1 %6433 to i8
  store i8 %6434, i8* %17, align 1
  %6435 = add i64 %6408, -40
  %6436 = add i64 %6407, 10
  store i64 %6436, i64* %3, align 8
  %6437 = inttoptr i64 %6435 to i32*
  %6438 = load i32, i32* %6437, align 4
  %6439 = add i32 %6438, %6414
  %6440 = zext i32 %6439 to i64
  store i64 %6440, i64* %RAX.i1404, align 8
  %6441 = icmp ult i32 %6439, %6414
  %6442 = icmp ult i32 %6439, %6438
  %6443 = or i1 %6441, %6442
  %6444 = zext i1 %6443 to i8
  store i8 %6444, i8* %12, align 1
  %6445 = and i32 %6439, 255
  %6446 = tail call i32 @llvm.ctpop.i32(i32 %6445)
  %6447 = trunc i32 %6446 to i8
  %6448 = and i8 %6447, 1
  %6449 = xor i8 %6448, 1
  store i8 %6449, i8* %13, align 1
  %6450 = xor i32 %6438, %6414
  %6451 = xor i32 %6450, %6439
  %6452 = lshr i32 %6451, 4
  %6453 = trunc i32 %6452 to i8
  %6454 = and i8 %6453, 1
  store i8 %6454, i8* %14, align 1
  %6455 = icmp eq i32 %6439, 0
  %6456 = zext i1 %6455 to i8
  store i8 %6456, i8* %15, align 1
  %6457 = lshr i32 %6439, 31
  %6458 = trunc i32 %6457 to i8
  store i8 %6458, i8* %16, align 1
  %6459 = lshr i32 %6438, 31
  %6460 = xor i32 %6457, %6428
  %6461 = xor i32 %6457, %6459
  %6462 = add nuw nsw i32 %6460, %6461
  %6463 = icmp eq i32 %6462, 2
  %6464 = zext i1 %6463 to i8
  store i8 %6464, i8* %17, align 1
  %6465 = sext i32 %6439 to i64
  store i64 %6465, i64* %RCX.i1715, align 8
  %6466 = load i64, i64* %RBP.i, align 8
  %6467 = add nsw i64 %6465, -1040
  %6468 = add i64 %6467, %6466
  %6469 = add i64 %6407, 21
  store i64 %6469, i64* %3, align 8
  %6470 = inttoptr i64 %6468 to i8*
  %6471 = load i8, i8* %6470, align 1
  %6472 = sext i8 %6471 to i64
  %6473 = and i64 %6472, 4294967295
  store i64 %6473, i64* %RAX.i1404, align 8
  %6474 = sext i8 %6471 to i32
  store i8 0, i8* %12, align 1
  %6475 = and i32 %6474, 255
  %6476 = tail call i32 @llvm.ctpop.i32(i32 %6475)
  %6477 = trunc i32 %6476 to i8
  %6478 = and i8 %6477, 1
  %6479 = xor i8 %6478, 1
  store i8 %6479, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %6480 = icmp eq i8 %6471, 0
  %6481 = zext i1 %6480 to i8
  store i8 %6481, i8* %15, align 1
  %6482 = lshr i32 %6474, 31
  %6483 = trunc i32 %6482 to i8
  store i8 %6483, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v435 = select i1 %6480, i64 30, i64 42
  %6484 = add i64 %6407, %.v435
  store i64 %6484, i64* %3, align 8
  br i1 %6480, label %block_4766b0, label %block_.L_4766bc

block_4766b0:                                     ; preds = %block_476692
  %6485 = add i64 %6466, -52
  %6486 = add i64 %6484, 7
  store i64 %6486, i64* %3, align 8
  %6487 = inttoptr i64 %6485 to i32*
  store i32 0, i32* %6487, align 4
  %6488 = load i64, i64* %3, align 8
  %6489 = add i64 %6488, 71
  store i64 %6489, i64* %3, align 8
  %.pre272 = load i64, i64* %RBP.i, align 8
  br label %block_.L_4766fe

block_.L_4766bc:                                  ; preds = %block_476692
  %6490 = add i64 %6466, -36
  %6491 = add i64 %6484, 4
  store i64 %6491, i64* %3, align 8
  %6492 = inttoptr i64 %6490 to i32*
  %6493 = load i32, i32* %6492, align 4
  %6494 = mul i32 %6493, 20
  %6495 = add i32 %6494, 21
  %6496 = zext i32 %6495 to i64
  store i64 %6496, i64* %RAX.i1404, align 8
  %6497 = icmp ugt i32 %6494, -22
  %6498 = zext i1 %6497 to i8
  store i8 %6498, i8* %12, align 1
  %6499 = and i32 %6495, 253
  %6500 = tail call i32 @llvm.ctpop.i32(i32 %6499)
  %6501 = trunc i32 %6500 to i8
  %6502 = and i8 %6501, 1
  %6503 = xor i8 %6502, 1
  store i8 %6503, i8* %13, align 1
  %6504 = xor i32 %6494, 16
  %6505 = xor i32 %6504, %6495
  %6506 = lshr i32 %6505, 4
  %6507 = trunc i32 %6506 to i8
  %6508 = and i8 %6507, 1
  store i8 %6508, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %6509 = lshr i32 %6495, 31
  %6510 = trunc i32 %6509 to i8
  store i8 %6510, i8* %16, align 1
  %6511 = lshr i32 %6494, 31
  %6512 = xor i32 %6509, %6511
  %6513 = add nuw nsw i32 %6512, %6509
  %6514 = icmp eq i32 %6513, 2
  %6515 = zext i1 %6514 to i8
  store i8 %6515, i8* %17, align 1
  %6516 = add i64 %6466, -40
  %6517 = add i64 %6484, 10
  store i64 %6517, i64* %3, align 8
  %6518 = inttoptr i64 %6516 to i32*
  %6519 = load i32, i32* %6518, align 4
  %6520 = add i32 %6519, %6495
  %6521 = zext i32 %6520 to i64
  store i64 %6521, i64* %RAX.i1404, align 8
  %6522 = icmp ult i32 %6520, %6495
  %6523 = icmp ult i32 %6520, %6519
  %6524 = or i1 %6522, %6523
  %6525 = zext i1 %6524 to i8
  store i8 %6525, i8* %12, align 1
  %6526 = and i32 %6520, 255
  %6527 = tail call i32 @llvm.ctpop.i32(i32 %6526)
  %6528 = trunc i32 %6527 to i8
  %6529 = and i8 %6528, 1
  %6530 = xor i8 %6529, 1
  store i8 %6530, i8* %13, align 1
  %6531 = xor i32 %6519, %6495
  %6532 = xor i32 %6531, %6520
  %6533 = lshr i32 %6532, 4
  %6534 = trunc i32 %6533 to i8
  %6535 = and i8 %6534, 1
  store i8 %6535, i8* %14, align 1
  %6536 = icmp eq i32 %6520, 0
  %6537 = zext i1 %6536 to i8
  store i8 %6537, i8* %15, align 1
  %6538 = lshr i32 %6520, 31
  %6539 = trunc i32 %6538 to i8
  store i8 %6539, i8* %16, align 1
  %6540 = lshr i32 %6519, 31
  %6541 = xor i32 %6538, %6509
  %6542 = xor i32 %6538, %6540
  %6543 = add nuw nsw i32 %6541, %6542
  %6544 = icmp eq i32 %6543, 2
  %6545 = zext i1 %6544 to i8
  store i8 %6545, i8* %17, align 1
  %6546 = sext i32 %6520 to i64
  store i64 %6546, i64* %RCX.i1715, align 8
  %6547 = load i64, i64* %RBP.i, align 8
  %6548 = add nsw i64 %6546, -1040
  %6549 = add i64 %6548, %6547
  %6550 = add i64 %6484, 21
  store i64 %6550, i64* %3, align 8
  %6551 = inttoptr i64 %6549 to i8*
  %6552 = load i8, i8* %6551, align 1
  %6553 = sext i8 %6552 to i64
  %6554 = and i64 %6553, 4294967295
  store i64 %6554, i64* %RAX.i1404, align 8
  %6555 = sext i8 %6552 to i32
  %6556 = add nsw i32 %6555, -2
  %6557 = icmp ult i8 %6552, 2
  %6558 = zext i1 %6557 to i8
  store i8 %6558, i8* %12, align 1
  %6559 = and i32 %6556, 255
  %6560 = tail call i32 @llvm.ctpop.i32(i32 %6559)
  %6561 = trunc i32 %6560 to i8
  %6562 = and i8 %6561, 1
  %6563 = xor i8 %6562, 1
  store i8 %6563, i8* %13, align 1
  %6564 = xor i32 %6556, %6555
  %6565 = lshr i32 %6564, 4
  %6566 = trunc i32 %6565 to i8
  %6567 = and i8 %6566, 1
  store i8 %6567, i8* %14, align 1
  %6568 = icmp eq i32 %6556, 0
  %6569 = zext i1 %6568 to i8
  store i8 %6569, i8* %15, align 1
  %6570 = lshr i32 %6556, 31
  %6571 = trunc i32 %6570 to i8
  store i8 %6571, i8* %16, align 1
  %6572 = lshr i32 %6555, 31
  %6573 = xor i32 %6570, %6572
  %6574 = add nuw nsw i32 %6573, %6572
  %6575 = icmp eq i32 %6574, 2
  %6576 = zext i1 %6575 to i8
  store i8 %6576, i8* %17, align 1
  %.v436 = select i1 %6568, i64 30, i64 37
  %6577 = add i64 %6484, %.v436
  store i64 %6577, i64* %3, align 8
  br i1 %6568, label %block_4766da, label %block_.L_4766e1

block_4766da:                                     ; preds = %block_.L_4766bc
  %6578 = add i64 %6547, -52
  %6579 = add i64 %6577, 7
  store i64 %6579, i64* %3, align 8
  %6580 = inttoptr i64 %6578 to i32*
  store i32 2, i32* %6580, align 4
  %.pre273 = load i64, i64* %3, align 8
  br label %block_.L_4766e1

block_.L_4766e1:                                  ; preds = %block_.L_4766bc, %block_4766da
  %6581 = phi i64 [ %.pre273, %block_4766da ], [ %6577, %block_.L_4766bc ]
  %6582 = add i64 %6581, 10
  store i64 %6582, i64* %3, align 8
  br label %block_.L_4766eb

block_.L_4766eb:                                  ; preds = %block_.L_4766e1, %block_476677
  %6583 = phi i64 [ %6582, %block_.L_4766e1 ], [ %6407, %block_476677 ]
  %6584 = load i64, i64* %RBP.i, align 8
  %6585 = add i64 %6584, -40
  %6586 = add i64 %6583, 8
  store i64 %6586, i64* %3, align 8
  %6587 = inttoptr i64 %6585 to i32*
  %6588 = load i32, i32* %6587, align 4
  %6589 = add i32 %6588, 1
  %6590 = zext i32 %6589 to i64
  store i64 %6590, i64* %RAX.i1404, align 8
  %6591 = icmp eq i32 %6588, -1
  %6592 = icmp eq i32 %6589, 0
  %6593 = or i1 %6591, %6592
  %6594 = zext i1 %6593 to i8
  store i8 %6594, i8* %12, align 1
  %6595 = and i32 %6589, 255
  %6596 = tail call i32 @llvm.ctpop.i32(i32 %6595)
  %6597 = trunc i32 %6596 to i8
  %6598 = and i8 %6597, 1
  %6599 = xor i8 %6598, 1
  store i8 %6599, i8* %13, align 1
  %6600 = xor i32 %6589, %6588
  %6601 = lshr i32 %6600, 4
  %6602 = trunc i32 %6601 to i8
  %6603 = and i8 %6602, 1
  store i8 %6603, i8* %14, align 1
  %6604 = zext i1 %6592 to i8
  store i8 %6604, i8* %15, align 1
  %6605 = lshr i32 %6589, 31
  %6606 = trunc i32 %6605 to i8
  store i8 %6606, i8* %16, align 1
  %6607 = lshr i32 %6588, 31
  %6608 = xor i32 %6605, %6607
  %6609 = add nuw nsw i32 %6608, %6605
  %6610 = icmp eq i32 %6609, 2
  %6611 = zext i1 %6610 to i8
  store i8 %6611, i8* %17, align 1
  %6612 = add i64 %6583, 14
  store i64 %6612, i64* %3, align 8
  store i32 %6589, i32* %6587, align 4
  %6613 = load i64, i64* %3, align 8
  %6614 = add i64 %6613, -146
  store i64 %6614, i64* %3, align 8
  br label %block_.L_476667

block_.L_4766fe.loopexit:                         ; preds = %block_.L_476667
  br label %block_.L_4766fe

block_.L_4766fe:                                  ; preds = %block_.L_4766fe.loopexit, %block_4766b0
  %6615 = phi i64 [ %.pre272, %block_4766b0 ], [ %6305, %block_.L_4766fe.loopexit ]
  %6616 = phi i64 [ %6489, %block_4766b0 ], [ %6338, %block_.L_4766fe.loopexit ]
  %6617 = add i64 %6615, -36
  %6618 = add i64 %6616, 8
  store i64 %6618, i64* %3, align 8
  %6619 = inttoptr i64 %6617 to i32*
  %6620 = load i32, i32* %6619, align 4
  %6621 = add i32 %6620, 1
  %6622 = zext i32 %6621 to i64
  store i64 %6622, i64* %RAX.i1404, align 8
  %6623 = icmp eq i32 %6620, -1
  %6624 = icmp eq i32 %6621, 0
  %6625 = or i1 %6623, %6624
  %6626 = zext i1 %6625 to i8
  store i8 %6626, i8* %12, align 1
  %6627 = and i32 %6621, 255
  %6628 = tail call i32 @llvm.ctpop.i32(i32 %6627)
  %6629 = trunc i32 %6628 to i8
  %6630 = and i8 %6629, 1
  %6631 = xor i8 %6630, 1
  store i8 %6631, i8* %13, align 1
  %6632 = xor i32 %6621, %6620
  %6633 = lshr i32 %6632, 4
  %6634 = trunc i32 %6633 to i8
  %6635 = and i8 %6634, 1
  store i8 %6635, i8* %14, align 1
  %6636 = zext i1 %6624 to i8
  store i8 %6636, i8* %15, align 1
  %6637 = lshr i32 %6621, 31
  %6638 = trunc i32 %6637 to i8
  store i8 %6638, i8* %16, align 1
  %6639 = lshr i32 %6620, 31
  %6640 = xor i32 %6637, %6639
  %6641 = add nuw nsw i32 %6640, %6637
  %6642 = icmp eq i32 %6641, 2
  %6643 = zext i1 %6642 to i8
  store i8 %6643, i8* %17, align 1
  %6644 = add i64 %6616, 14
  store i64 %6644, i64* %3, align 8
  store i32 %6621, i32* %6619, align 4
  %6645 = load i64, i64* %3, align 8
  %6646 = add i64 %6645, -188
  store i64 %6646, i64* %3, align 8
  br label %block_.L_476650

block_.L_476711:                                  ; preds = %block_.L_476650
  %6647 = add i64 %6267, -52
  %6648 = add i64 %6300, 4
  store i64 %6648, i64* %3, align 8
  %6649 = inttoptr i64 %6647 to i32*
  %6650 = load i32, i32* %6649, align 4
  store i8 0, i8* %12, align 1
  %6651 = and i32 %6650, 255
  %6652 = tail call i32 @llvm.ctpop.i32(i32 %6651)
  %6653 = trunc i32 %6652 to i8
  %6654 = and i8 %6653, 1
  %6655 = xor i8 %6654, 1
  store i8 %6655, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %6656 = icmp eq i32 %6650, 0
  %6657 = zext i1 %6656 to i8
  store i8 %6657, i8* %15, align 1
  %6658 = lshr i32 %6650, 31
  %6659 = trunc i32 %6658 to i8
  store i8 %6659, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v382 = select i1 %6656, i64 1206, i64 10
  %6660 = add i64 %6300, %.v382
  store i64 %6660, i64* %3, align 8
  br i1 %6656, label %block_.L_476bc7, label %block_47671b

block_47671b:                                     ; preds = %block_.L_476711
  %6661 = add i64 %6267, -48
  %6662 = add i64 %6660, 7
  store i64 %6662, i64* %3, align 8
  %6663 = inttoptr i64 %6661 to i32*
  store i32 21, i32* %6663, align 4
  %AL.i990 = bitcast %union.anon* %18 to i8*
  %CL.i991 = bitcast %union.anon* %43 to i8*
  %.pre255 = load i64, i64* %3, align 8
  br label %block_.L_476722

block_.L_476722:                                  ; preds = %block_.L_476baf, %block_47671b
  %6664 = phi i64 [ %8788, %block_.L_476baf ], [ %.pre255, %block_47671b ]
  store i64 0, i64* %RAX.i1404, align 8
  store i8 0, i8* %12, align 1
  store i8 1, i8* %13, align 1
  store i8 1, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %CL.i991, align 1
  %6665 = load i64, i64* %RBP.i, align 8
  %6666 = add i64 %6665, -48
  %6667 = add i64 %6664, 11
  store i64 %6667, i64* %3, align 8
  %6668 = inttoptr i64 %6666 to i32*
  %6669 = load i32, i32* %6668, align 4
  %6670 = add i32 %6669, -400
  %6671 = icmp ult i32 %6669, 400
  %6672 = zext i1 %6671 to i8
  store i8 %6672, i8* %12, align 1
  %6673 = and i32 %6670, 255
  %6674 = tail call i32 @llvm.ctpop.i32(i32 %6673)
  %6675 = trunc i32 %6674 to i8
  %6676 = and i8 %6675, 1
  %6677 = xor i8 %6676, 1
  store i8 %6677, i8* %13, align 1
  %6678 = xor i32 %6669, 16
  %6679 = xor i32 %6678, %6670
  %6680 = lshr i32 %6679, 4
  %6681 = trunc i32 %6680 to i8
  %6682 = and i8 %6681, 1
  store i8 %6682, i8* %14, align 1
  %6683 = icmp eq i32 %6670, 0
  %6684 = zext i1 %6683 to i8
  store i8 %6684, i8* %15, align 1
  %6685 = lshr i32 %6670, 31
  %6686 = trunc i32 %6685 to i8
  store i8 %6686, i8* %16, align 1
  %6687 = lshr i32 %6669, 31
  %6688 = xor i32 %6685, %6687
  %6689 = add nuw nsw i32 %6688, %6687
  %6690 = icmp eq i32 %6689, 2
  %6691 = zext i1 %6690 to i8
  store i8 %6691, i8* %17, align 1
  %6692 = add i64 %6665, -1213
  %6693 = add i64 %6664, 17
  store i64 %6693, i64* %3, align 8
  %6694 = inttoptr i64 %6692 to i8*
  store i8 0, i8* %6694, align 1
  %6695 = load i64, i64* %3, align 8
  %6696 = add i64 %6695, 19
  %6697 = add i64 %6695, 6
  %6698 = load i8, i8* %16, align 1
  %6699 = icmp ne i8 %6698, 0
  %6700 = load i8, i8* %17, align 1
  %6701 = icmp ne i8 %6700, 0
  %6702 = xor i1 %6699, %6701
  %6703 = select i1 %6702, i64 %6697, i64 %6696
  store i64 %6703, i64* %3, align 8
  br i1 %6702, label %block_476739, label %block_.L_476746

block_476739:                                     ; preds = %block_.L_476722
  %6704 = load i64, i64* %RBP.i, align 8
  %6705 = add i64 %6704, -52
  %6706 = add i64 %6703, 4
  store i64 %6706, i64* %3, align 8
  %6707 = inttoptr i64 %6705 to i32*
  %6708 = load i32, i32* %6707, align 4
  store i8 0, i8* %12, align 1
  %6709 = and i32 %6708, 255
  %6710 = tail call i32 @llvm.ctpop.i32(i32 %6709)
  %6711 = trunc i32 %6710 to i8
  %6712 = and i8 %6711, 1
  %6713 = xor i8 %6712, 1
  store i8 %6713, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %6714 = icmp eq i32 %6708, 0
  %6715 = zext i1 %6714 to i8
  store i8 %6715, i8* %15, align 1
  %6716 = lshr i32 %6708, 31
  %6717 = trunc i32 %6716 to i8
  store i8 %6717, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %6718 = xor i1 %6714, true
  %6719 = zext i1 %6718 to i8
  store i8 %6719, i8* %AL.i990, align 1
  %6720 = add i64 %6704, -1213
  %6721 = add i64 %6703, 13
  store i64 %6721, i64* %3, align 8
  %6722 = inttoptr i64 %6720 to i8*
  store i8 %6719, i8* %6722, align 1
  %.pre256 = load i64, i64* %3, align 8
  br label %block_.L_476746

block_.L_476746:                                  ; preds = %block_.L_476722, %block_476739
  %6723 = phi i64 [ %6696, %block_.L_476722 ], [ %.pre256, %block_476739 ]
  %6724 = load i64, i64* %RBP.i, align 8
  %6725 = add i64 %6724, -1213
  %6726 = add i64 %6723, 6
  store i64 %6726, i64* %3, align 8
  %6727 = inttoptr i64 %6725 to i8*
  %6728 = load i8, i8* %6727, align 1
  store i8 %6728, i8* %AL.i990, align 1
  %6729 = and i8 %6728, 1
  store i8 0, i8* %12, align 1
  %6730 = zext i8 %6729 to i32
  %6731 = tail call i32 @llvm.ctpop.i32(i32 %6730)
  %6732 = trunc i32 %6731 to i8
  %6733 = xor i8 %6732, 1
  store i8 %6733, i8* %13, align 1
  %6734 = xor i8 %6729, 1
  store i8 %6734, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  store i8 0, i8* %14, align 1
  %6735 = icmp eq i8 %6734, 0
  %.v383 = select i1 %6735, i64 19, i64 14
  %6736 = add i64 %6723, %.v383
  store i64 %6736, i64* %3, align 8
  br i1 %6735, label %block_.L_476759, label %block_476754

block_476754:                                     ; preds = %block_.L_476746
  %6737 = add i64 %6736, 1139
  store i64 %6737, i64* %3, align 8
  br label %block_.L_476bc7

block_.L_476759:                                  ; preds = %block_.L_476746
  %6738 = add i64 %6724, -48
  %6739 = add i64 %6736, 4
  store i64 %6739, i64* %3, align 8
  %6740 = inttoptr i64 %6738 to i32*
  %6741 = load i32, i32* %6740, align 4
  %6742 = sext i32 %6741 to i64
  store i64 %6742, i64* %RAX.i1404, align 8
  %6743 = add nsw i64 %6742, 12099168
  %6744 = add i64 %6736, 12
  store i64 %6744, i64* %3, align 8
  %6745 = inttoptr i64 %6743 to i8*
  %6746 = load i8, i8* %6745, align 1
  %6747 = zext i8 %6746 to i64
  store i64 %6747, i64* %RCX.i1715, align 8
  %6748 = zext i8 %6746 to i32
  %6749 = add nsw i32 %6748, -3
  %6750 = icmp ult i8 %6746, 3
  %6751 = zext i1 %6750 to i8
  store i8 %6751, i8* %12, align 1
  %6752 = and i32 %6749, 255
  %6753 = tail call i32 @llvm.ctpop.i32(i32 %6752)
  %6754 = trunc i32 %6753 to i8
  %6755 = and i8 %6754, 1
  %6756 = xor i8 %6755, 1
  store i8 %6756, i8* %13, align 1
  %6757 = xor i32 %6749, %6748
  %6758 = lshr i32 %6757, 4
  %6759 = trunc i32 %6758 to i8
  %6760 = and i8 %6759, 1
  store i8 %6760, i8* %14, align 1
  %6761 = icmp eq i32 %6749, 0
  %6762 = zext i1 %6761 to i8
  store i8 %6762, i8* %15, align 1
  %6763 = lshr i32 %6749, 31
  %6764 = trunc i32 %6763 to i8
  store i8 %6764, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v395 = select i1 %6761, i64 1110, i64 21
  %6765 = add i64 %6736, %.v395
  store i64 %6765, i64* %3, align 8
  br i1 %6761, label %block_.L_476baf, label %block_47676e

block_47676e:                                     ; preds = %block_.L_476759
  %6766 = add i64 %6765, 4
  store i64 %6766, i64* %3, align 8
  %6767 = load i32, i32* %6740, align 4
  %6768 = sext i32 %6767 to i64
  store i64 %6768, i64* %RAX.i1404, align 8
  %6769 = add nsw i64 %6768, -640
  %6770 = add i64 %6769, %6724
  %6771 = add i64 %6765, 12
  store i64 %6771, i64* %3, align 8
  %6772 = inttoptr i64 %6770 to i8*
  %6773 = load i8, i8* %6772, align 1
  %6774 = sext i8 %6773 to i64
  %6775 = and i64 %6774, 4294967295
  store i64 %6775, i64* %RCX.i1715, align 8
  %6776 = sext i8 %6773 to i32
  store i8 0, i8* %12, align 1
  %6777 = and i32 %6776, 255
  %6778 = tail call i32 @llvm.ctpop.i32(i32 %6777)
  %6779 = trunc i32 %6778 to i8
  %6780 = and i8 %6779, 1
  %6781 = xor i8 %6780, 1
  store i8 %6781, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %6782 = icmp eq i8 %6773, 0
  %6783 = zext i1 %6782 to i8
  store i8 %6783, i8* %15, align 1
  %6784 = lshr i32 %6776, 31
  %6785 = trunc i32 %6784 to i8
  store i8 %6785, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v396 = select i1 %6782, i64 1089, i64 21
  %6786 = add i64 %6765, %.v396
  store i64 %6786, i64* %3, align 8
  br i1 %6782, label %block_.L_476baf, label %block_476783

block_476783:                                     ; preds = %block_47676e
  %6787 = add i64 %6786, 3
  store i64 %6787, i64* %3, align 8
  %6788 = load i32, i32* %6740, align 4
  %6789 = add i32 %6788, -20
  %6790 = zext i32 %6789 to i64
  store i64 %6790, i64* %RAX.i1404, align 8
  %6791 = icmp ult i32 %6788, 20
  %6792 = zext i1 %6791 to i8
  store i8 %6792, i8* %12, align 1
  %6793 = and i32 %6789, 255
  %6794 = tail call i32 @llvm.ctpop.i32(i32 %6793)
  %6795 = trunc i32 %6794 to i8
  %6796 = and i8 %6795, 1
  %6797 = xor i8 %6796, 1
  store i8 %6797, i8* %13, align 1
  %6798 = xor i32 %6788, 16
  %6799 = xor i32 %6798, %6789
  %6800 = lshr i32 %6799, 4
  %6801 = trunc i32 %6800 to i8
  %6802 = and i8 %6801, 1
  store i8 %6802, i8* %14, align 1
  %6803 = icmp eq i32 %6789, 0
  %6804 = zext i1 %6803 to i8
  store i8 %6804, i8* %15, align 1
  %6805 = lshr i32 %6789, 31
  %6806 = trunc i32 %6805 to i8
  store i8 %6806, i8* %16, align 1
  %6807 = lshr i32 %6788, 31
  %6808 = xor i32 %6805, %6807
  %6809 = add nuw nsw i32 %6808, %6807
  %6810 = icmp eq i32 %6809, 2
  %6811 = zext i1 %6810 to i8
  store i8 %6811, i8* %17, align 1
  %6812 = sext i32 %6789 to i64
  store i64 %6812, i64* %RCX.i1715, align 8
  %6813 = add nsw i64 %6812, 12099168
  %6814 = add i64 %6786, 17
  store i64 %6814, i64* %3, align 8
  %6815 = inttoptr i64 %6813 to i8*
  %6816 = load i8, i8* %6815, align 1
  %6817 = zext i8 %6816 to i64
  store i64 %6817, i64* %RAX.i1404, align 8
  %6818 = zext i8 %6816 to i32
  %6819 = add nsw i32 %6818, -3
  %6820 = icmp ult i8 %6816, 3
  %6821 = zext i1 %6820 to i8
  store i8 %6821, i8* %12, align 1
  %6822 = and i32 %6819, 255
  %6823 = tail call i32 @llvm.ctpop.i32(i32 %6822)
  %6824 = trunc i32 %6823 to i8
  %6825 = and i8 %6824, 1
  %6826 = xor i8 %6825, 1
  store i8 %6826, i8* %13, align 1
  %6827 = xor i32 %6819, %6818
  %6828 = lshr i32 %6827, 4
  %6829 = trunc i32 %6828 to i8
  %6830 = and i8 %6829, 1
  store i8 %6830, i8* %14, align 1
  %6831 = icmp eq i32 %6819, 0
  %6832 = zext i1 %6831 to i8
  store i8 %6832, i8* %15, align 1
  %6833 = lshr i32 %6819, 31
  %6834 = trunc i32 %6833 to i8
  store i8 %6834, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v397 = select i1 %6831, i64 264, i64 26
  %6835 = add i64 %6786, %.v397
  store i64 %6835, i64* %3, align 8
  br i1 %6831, label %block_.L_47688b, label %block_47679d

block_47679d:                                     ; preds = %block_476783
  %6836 = add i64 %6835, 3
  store i64 %6836, i64* %3, align 8
  %6837 = load i32, i32* %6740, align 4
  %6838 = add i32 %6837, -20
  %6839 = zext i32 %6838 to i64
  store i64 %6839, i64* %RAX.i1404, align 8
  %6840 = icmp ult i32 %6837, 20
  %6841 = zext i1 %6840 to i8
  store i8 %6841, i8* %12, align 1
  %6842 = and i32 %6838, 255
  %6843 = tail call i32 @llvm.ctpop.i32(i32 %6842)
  %6844 = trunc i32 %6843 to i8
  %6845 = and i8 %6844, 1
  %6846 = xor i8 %6845, 1
  store i8 %6846, i8* %13, align 1
  %6847 = xor i32 %6837, 16
  %6848 = xor i32 %6847, %6838
  %6849 = lshr i32 %6848, 4
  %6850 = trunc i32 %6849 to i8
  %6851 = and i8 %6850, 1
  store i8 %6851, i8* %14, align 1
  %6852 = icmp eq i32 %6838, 0
  %6853 = zext i1 %6852 to i8
  store i8 %6853, i8* %15, align 1
  %6854 = lshr i32 %6838, 31
  %6855 = trunc i32 %6854 to i8
  store i8 %6855, i8* %16, align 1
  %6856 = lshr i32 %6837, 31
  %6857 = xor i32 %6854, %6856
  %6858 = add nuw nsw i32 %6857, %6856
  %6859 = icmp eq i32 %6858, 2
  %6860 = zext i1 %6859 to i8
  store i8 %6860, i8* %17, align 1
  %6861 = sext i32 %6838 to i64
  store i64 %6861, i64* %RCX.i1715, align 8
  %6862 = add nsw i64 %6861, 12099168
  %6863 = add i64 %6835, 17
  store i64 %6863, i64* %3, align 8
  %6864 = inttoptr i64 %6862 to i8*
  %6865 = load i8, i8* %6864, align 1
  %6866 = zext i8 %6865 to i64
  store i64 %6866, i64* %RAX.i1404, align 8
  %6867 = zext i8 %6865 to i32
  store i8 0, i8* %12, align 1
  %6868 = tail call i32 @llvm.ctpop.i32(i32 %6867)
  %6869 = trunc i32 %6868 to i8
  %6870 = and i8 %6869, 1
  %6871 = xor i8 %6870, 1
  store i8 %6871, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %6872 = icmp eq i8 %6865, 0
  %6873 = zext i1 %6872 to i8
  store i8 %6873, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v398 = select i1 %6872, i64 26, i64 238
  %6874 = add i64 %6835, %.v398
  store i64 %6874, i64* %3, align 8
  br i1 %6872, label %block_4767b7, label %block_.L_47688b

block_4767b7:                                     ; preds = %block_47679d
  %6875 = add i64 %6874, 3
  store i64 %6875, i64* %3, align 8
  %6876 = load i32, i32* %6740, align 4
  %6877 = add i32 %6876, -20
  %6878 = lshr i32 %6877, 31
  %6879 = add i32 %6876, -40
  %6880 = zext i32 %6879 to i64
  store i64 %6880, i64* %RAX.i1404, align 8
  %6881 = icmp ult i32 %6877, 20
  %6882 = zext i1 %6881 to i8
  store i8 %6882, i8* %12, align 1
  %6883 = and i32 %6879, 255
  %6884 = tail call i32 @llvm.ctpop.i32(i32 %6883)
  %6885 = trunc i32 %6884 to i8
  %6886 = and i8 %6885, 1
  %6887 = xor i8 %6886, 1
  store i8 %6887, i8* %13, align 1
  %6888 = xor i32 %6877, 16
  %6889 = xor i32 %6888, %6879
  %6890 = lshr i32 %6889, 4
  %6891 = trunc i32 %6890 to i8
  %6892 = and i8 %6891, 1
  store i8 %6892, i8* %14, align 1
  %6893 = icmp eq i32 %6879, 0
  %6894 = zext i1 %6893 to i8
  store i8 %6894, i8* %15, align 1
  %6895 = lshr i32 %6879, 31
  %6896 = trunc i32 %6895 to i8
  store i8 %6896, i8* %16, align 1
  %6897 = xor i32 %6895, %6878
  %6898 = add nuw nsw i32 %6897, %6878
  %6899 = icmp eq i32 %6898, 2
  %6900 = zext i1 %6899 to i8
  store i8 %6900, i8* %17, align 1
  %6901 = sext i32 %6879 to i64
  store i64 %6901, i64* %RCX.i1715, align 8
  %6902 = add nsw i64 %6901, 12099168
  %6903 = add i64 %6874, 20
  store i64 %6903, i64* %3, align 8
  %6904 = inttoptr i64 %6902 to i8*
  %6905 = load i8, i8* %6904, align 1
  %6906 = zext i8 %6905 to i64
  store i64 %6906, i64* %RAX.i1404, align 8
  %6907 = zext i8 %6905 to i32
  %6908 = add nsw i32 %6907, -3
  %6909 = icmp ult i8 %6905, 3
  %6910 = zext i1 %6909 to i8
  store i8 %6910, i8* %12, align 1
  %6911 = and i32 %6908, 255
  %6912 = tail call i32 @llvm.ctpop.i32(i32 %6911)
  %6913 = trunc i32 %6912 to i8
  %6914 = and i8 %6913, 1
  %6915 = xor i8 %6914, 1
  store i8 %6915, i8* %13, align 1
  %6916 = xor i32 %6908, %6907
  %6917 = lshr i32 %6916, 4
  %6918 = trunc i32 %6917 to i8
  %6919 = and i8 %6918, 1
  store i8 %6919, i8* %14, align 1
  %6920 = icmp eq i32 %6908, 0
  %6921 = zext i1 %6920 to i8
  store i8 %6921, i8* %15, align 1
  %6922 = lshr i32 %6908, 31
  %6923 = trunc i32 %6922 to i8
  store i8 %6923, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v426 = select i1 %6920, i64 212, i64 29
  %6924 = add i64 %6874, %.v426
  store i64 %6924, i64* %3, align 8
  br i1 %6920, label %block_.L_47688b, label %block_4767d4

block_4767d4:                                     ; preds = %block_4767b7
  %6925 = load i64, i64* %RBP.i, align 8
  %6926 = add i64 %6925, -48
  %6927 = add i64 %6924, 3
  store i64 %6927, i64* %3, align 8
  %6928 = inttoptr i64 %6926 to i32*
  %6929 = load i32, i32* %6928, align 4
  %6930 = add i32 %6929, -20
  %6931 = lshr i32 %6930, 31
  %6932 = add i32 %6929, -40
  %6933 = zext i32 %6932 to i64
  store i64 %6933, i64* %RAX.i1404, align 8
  %6934 = icmp ult i32 %6930, 20
  %6935 = zext i1 %6934 to i8
  store i8 %6935, i8* %12, align 1
  %6936 = and i32 %6932, 255
  %6937 = tail call i32 @llvm.ctpop.i32(i32 %6936)
  %6938 = trunc i32 %6937 to i8
  %6939 = and i8 %6938, 1
  %6940 = xor i8 %6939, 1
  store i8 %6940, i8* %13, align 1
  %6941 = xor i32 %6930, 16
  %6942 = xor i32 %6941, %6932
  %6943 = lshr i32 %6942, 4
  %6944 = trunc i32 %6943 to i8
  %6945 = and i8 %6944, 1
  store i8 %6945, i8* %14, align 1
  %6946 = icmp eq i32 %6932, 0
  %6947 = zext i1 %6946 to i8
  store i8 %6947, i8* %15, align 1
  %6948 = lshr i32 %6932, 31
  %6949 = trunc i32 %6948 to i8
  store i8 %6949, i8* %16, align 1
  %6950 = xor i32 %6948, %6931
  %6951 = add nuw nsw i32 %6950, %6931
  %6952 = icmp eq i32 %6951, 2
  %6953 = zext i1 %6952 to i8
  store i8 %6953, i8* %17, align 1
  %6954 = sext i32 %6932 to i64
  store i64 %6954, i64* %RCX.i1715, align 8
  %6955 = add nsw i64 %6954, 12099168
  %6956 = add i64 %6924, 20
  store i64 %6956, i64* %3, align 8
  %6957 = inttoptr i64 %6955 to i8*
  %6958 = load i8, i8* %6957, align 1
  %6959 = zext i8 %6958 to i64
  store i64 %6959, i64* %RAX.i1404, align 8
  %6960 = zext i8 %6958 to i32
  %6961 = add i64 %6925, -228
  %6962 = add i64 %6924, 26
  store i64 %6962, i64* %3, align 8
  %6963 = inttoptr i64 %6961 to i32*
  %6964 = load i32, i32* %6963, align 4
  %6965 = sub i32 %6960, %6964
  %6966 = icmp ult i32 %6960, %6964
  %6967 = zext i1 %6966 to i8
  store i8 %6967, i8* %12, align 1
  %6968 = and i32 %6965, 255
  %6969 = tail call i32 @llvm.ctpop.i32(i32 %6968)
  %6970 = trunc i32 %6969 to i8
  %6971 = and i8 %6970, 1
  %6972 = xor i8 %6971, 1
  store i8 %6972, i8* %13, align 1
  %6973 = xor i32 %6964, %6960
  %6974 = xor i32 %6973, %6965
  %6975 = lshr i32 %6974, 4
  %6976 = trunc i32 %6975 to i8
  %6977 = and i8 %6976, 1
  store i8 %6977, i8* %14, align 1
  %6978 = icmp eq i32 %6965, 0
  %6979 = zext i1 %6978 to i8
  store i8 %6979, i8* %15, align 1
  %6980 = lshr i32 %6965, 31
  %6981 = trunc i32 %6980 to i8
  store i8 %6981, i8* %16, align 1
  %6982 = lshr i32 %6964, 31
  %6983 = add nuw nsw i32 %6980, %6982
  %6984 = icmp eq i32 %6983, 2
  %6985 = zext i1 %6984 to i8
  store i8 %6985, i8* %17, align 1
  %.v427 = select i1 %6978, i64 32, i64 183
  %6986 = add i64 %6924, %.v427
  store i64 %6986, i64* %3, align 8
  br i1 %6978, label %block_4767f4, label %block_.L_47688b

block_4767f4:                                     ; preds = %block_4767d4
  %6987 = load i64, i64* %RBP.i, align 8
  %6988 = add i64 %6987, -48
  %6989 = add i64 %6986, 3
  store i64 %6989, i64* %3, align 8
  %6990 = inttoptr i64 %6988 to i32*
  %6991 = load i32, i32* %6990, align 4
  %6992 = add i32 %6991, -20
  %6993 = lshr i32 %6992, 31
  %6994 = add i32 %6991, -40
  %6995 = zext i32 %6994 to i64
  store i64 %6995, i64* %RAX.i1404, align 8
  %6996 = icmp ult i32 %6992, 20
  %6997 = zext i1 %6996 to i8
  store i8 %6997, i8* %12, align 1
  %6998 = and i32 %6994, 255
  %6999 = tail call i32 @llvm.ctpop.i32(i32 %6998)
  %7000 = trunc i32 %6999 to i8
  %7001 = and i8 %7000, 1
  %7002 = xor i8 %7001, 1
  store i8 %7002, i8* %13, align 1
  %7003 = xor i32 %6992, 16
  %7004 = xor i32 %7003, %6994
  %7005 = lshr i32 %7004, 4
  %7006 = trunc i32 %7005 to i8
  %7007 = and i8 %7006, 1
  store i8 %7007, i8* %14, align 1
  %7008 = icmp eq i32 %6994, 0
  %7009 = zext i1 %7008 to i8
  store i8 %7009, i8* %15, align 1
  %7010 = lshr i32 %6994, 31
  %7011 = trunc i32 %7010 to i8
  store i8 %7011, i8* %16, align 1
  %7012 = xor i32 %7010, %6993
  %7013 = add nuw nsw i32 %7012, %6993
  %7014 = icmp eq i32 %7013, 2
  %7015 = zext i1 %7014 to i8
  store i8 %7015, i8* %17, align 1
  %7016 = sext i32 %6994 to i64
  store i64 %7016, i64* %RCX.i1715, align 8
  %7017 = add nsw i64 %7016, -1040
  %7018 = add i64 %7017, %6987
  %7019 = add i64 %6986, 20
  store i64 %7019, i64* %3, align 8
  %7020 = inttoptr i64 %7018 to i8*
  %7021 = load i8, i8* %7020, align 1
  %7022 = sext i8 %7021 to i64
  %7023 = and i64 %7022, 4294967295
  store i64 %7023, i64* %RAX.i1404, align 8
  %7024 = sext i8 %7021 to i32
  %7025 = add nsw i32 %7024, -1
  %7026 = icmp eq i8 %7021, 0
  %7027 = zext i1 %7026 to i8
  store i8 %7027, i8* %12, align 1
  %7028 = and i32 %7025, 255
  %7029 = tail call i32 @llvm.ctpop.i32(i32 %7028)
  %7030 = trunc i32 %7029 to i8
  %7031 = and i8 %7030, 1
  %7032 = xor i8 %7031, 1
  store i8 %7032, i8* %13, align 1
  %7033 = xor i32 %7025, %7024
  %7034 = lshr i32 %7033, 4
  %7035 = trunc i32 %7034 to i8
  %7036 = and i8 %7035, 1
  store i8 %7036, i8* %14, align 1
  %7037 = icmp eq i32 %7025, 0
  %7038 = zext i1 %7037 to i8
  store i8 %7038, i8* %15, align 1
  %7039 = lshr i32 %7025, 31
  %7040 = trunc i32 %7039 to i8
  store i8 %7040, i8* %16, align 1
  %7041 = lshr i32 %7024, 31
  %7042 = xor i32 %7039, %7041
  %7043 = add nuw nsw i32 %7042, %7041
  %7044 = icmp eq i32 %7043, 2
  %7045 = zext i1 %7044 to i8
  store i8 %7045, i8* %17, align 1
  %.v428 = select i1 %7037, i64 151, i64 29
  %7046 = add i64 %6986, %.v428
  store i64 %7046, i64* %3, align 8
  br i1 %7037, label %block_.L_47688b, label %block_476811

block_476811:                                     ; preds = %block_4767f4
  %7047 = load i64, i64* %RBP.i, align 8
  %7048 = add i64 %7047, -48
  %7049 = add i64 %7046, 3
  store i64 %7049, i64* %3, align 8
  %7050 = inttoptr i64 %7048 to i32*
  %7051 = load i32, i32* %7050, align 4
  %7052 = add i32 %7051, -20
  %7053 = lshr i32 %7052, 31
  %7054 = add i32 %7051, -19
  %7055 = zext i32 %7054 to i64
  store i64 %7055, i64* %RAX.i1404, align 8
  %7056 = icmp eq i32 %7052, -1
  %7057 = icmp eq i32 %7054, 0
  %7058 = or i1 %7056, %7057
  %7059 = zext i1 %7058 to i8
  store i8 %7059, i8* %12, align 1
  %7060 = and i32 %7054, 255
  %7061 = tail call i32 @llvm.ctpop.i32(i32 %7060)
  %7062 = trunc i32 %7061 to i8
  %7063 = and i8 %7062, 1
  %7064 = xor i8 %7063, 1
  store i8 %7064, i8* %13, align 1
  %7065 = xor i32 %7054, %7052
  %7066 = lshr i32 %7065, 4
  %7067 = trunc i32 %7066 to i8
  %7068 = and i8 %7067, 1
  store i8 %7068, i8* %14, align 1
  %7069 = zext i1 %7057 to i8
  store i8 %7069, i8* %15, align 1
  %7070 = lshr i32 %7054, 31
  %7071 = trunc i32 %7070 to i8
  store i8 %7071, i8* %16, align 1
  %7072 = xor i32 %7070, %7053
  %7073 = add nuw nsw i32 %7072, %7070
  %7074 = icmp eq i32 %7073, 2
  %7075 = zext i1 %7074 to i8
  store i8 %7075, i8* %17, align 1
  %7076 = sext i32 %7054 to i64
  store i64 %7076, i64* %RCX.i1715, align 8
  %7077 = add nsw i64 %7076, 12099168
  %7078 = add i64 %7046, 20
  store i64 %7078, i64* %3, align 8
  %7079 = inttoptr i64 %7077 to i8*
  %7080 = load i8, i8* %7079, align 1
  %7081 = zext i8 %7080 to i64
  store i64 %7081, i64* %RAX.i1404, align 8
  %7082 = zext i8 %7080 to i32
  %7083 = add nsw i32 %7082, -3
  %7084 = icmp ult i8 %7080, 3
  %7085 = zext i1 %7084 to i8
  store i8 %7085, i8* %12, align 1
  %7086 = and i32 %7083, 255
  %7087 = tail call i32 @llvm.ctpop.i32(i32 %7086)
  %7088 = trunc i32 %7087 to i8
  %7089 = and i8 %7088, 1
  %7090 = xor i8 %7089, 1
  store i8 %7090, i8* %13, align 1
  %7091 = xor i32 %7083, %7082
  %7092 = lshr i32 %7091, 4
  %7093 = trunc i32 %7092 to i8
  %7094 = and i8 %7093, 1
  store i8 %7094, i8* %14, align 1
  %7095 = icmp eq i32 %7083, 0
  %7096 = zext i1 %7095 to i8
  store i8 %7096, i8* %15, align 1
  %7097 = lshr i32 %7083, 31
  %7098 = trunc i32 %7097 to i8
  store i8 %7098, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v429 = select i1 %7095, i64 122, i64 29
  %7099 = add i64 %7046, %.v429
  store i64 %7099, i64* %3, align 8
  br i1 %7095, label %block_.L_47688b, label %block_47682e

block_47682e:                                     ; preds = %block_476811
  %7100 = load i64, i64* %RBP.i, align 8
  %7101 = add i64 %7100, -48
  %7102 = add i64 %7099, 3
  store i64 %7102, i64* %3, align 8
  %7103 = inttoptr i64 %7101 to i32*
  %7104 = load i32, i32* %7103, align 4
  %7105 = add i32 %7104, -20
  %7106 = lshr i32 %7105, 31
  %7107 = add i32 %7104, -19
  %7108 = zext i32 %7107 to i64
  store i64 %7108, i64* %RAX.i1404, align 8
  %7109 = icmp eq i32 %7105, -1
  %7110 = icmp eq i32 %7107, 0
  %7111 = or i1 %7109, %7110
  %7112 = zext i1 %7111 to i8
  store i8 %7112, i8* %12, align 1
  %7113 = and i32 %7107, 255
  %7114 = tail call i32 @llvm.ctpop.i32(i32 %7113)
  %7115 = trunc i32 %7114 to i8
  %7116 = and i8 %7115, 1
  %7117 = xor i8 %7116, 1
  store i8 %7117, i8* %13, align 1
  %7118 = xor i32 %7107, %7105
  %7119 = lshr i32 %7118, 4
  %7120 = trunc i32 %7119 to i8
  %7121 = and i8 %7120, 1
  store i8 %7121, i8* %14, align 1
  %7122 = zext i1 %7110 to i8
  store i8 %7122, i8* %15, align 1
  %7123 = lshr i32 %7107, 31
  %7124 = trunc i32 %7123 to i8
  store i8 %7124, i8* %16, align 1
  %7125 = xor i32 %7123, %7106
  %7126 = add nuw nsw i32 %7125, %7123
  %7127 = icmp eq i32 %7126, 2
  %7128 = zext i1 %7127 to i8
  store i8 %7128, i8* %17, align 1
  %7129 = sext i32 %7107 to i64
  store i64 %7129, i64* %RCX.i1715, align 8
  %7130 = add nsw i64 %7129, 12099168
  %7131 = add i64 %7099, 20
  store i64 %7131, i64* %3, align 8
  %7132 = inttoptr i64 %7130 to i8*
  %7133 = load i8, i8* %7132, align 1
  %7134 = zext i8 %7133 to i64
  store i64 %7134, i64* %RAX.i1404, align 8
  %7135 = zext i8 %7133 to i32
  %7136 = add i64 %7100, -232
  %7137 = add i64 %7099, 26
  store i64 %7137, i64* %3, align 8
  %7138 = inttoptr i64 %7136 to i32*
  %7139 = load i32, i32* %7138, align 4
  %7140 = sub i32 %7135, %7139
  %7141 = icmp ult i32 %7135, %7139
  %7142 = zext i1 %7141 to i8
  store i8 %7142, i8* %12, align 1
  %7143 = and i32 %7140, 255
  %7144 = tail call i32 @llvm.ctpop.i32(i32 %7143)
  %7145 = trunc i32 %7144 to i8
  %7146 = and i8 %7145, 1
  %7147 = xor i8 %7146, 1
  store i8 %7147, i8* %13, align 1
  %7148 = xor i32 %7139, %7135
  %7149 = xor i32 %7148, %7140
  %7150 = lshr i32 %7149, 4
  %7151 = trunc i32 %7150 to i8
  %7152 = and i8 %7151, 1
  store i8 %7152, i8* %14, align 1
  %7153 = icmp eq i32 %7140, 0
  %7154 = zext i1 %7153 to i8
  store i8 %7154, i8* %15, align 1
  %7155 = lshr i32 %7140, 31
  %7156 = trunc i32 %7155 to i8
  store i8 %7156, i8* %16, align 1
  %7157 = lshr i32 %7139, 31
  %7158 = add nuw nsw i32 %7155, %7157
  %7159 = icmp eq i32 %7158, 2
  %7160 = zext i1 %7159 to i8
  store i8 %7160, i8* %17, align 1
  %.v430 = select i1 %7153, i64 93, i64 32
  %7161 = add i64 %7099, %.v430
  store i64 %7161, i64* %3, align 8
  br i1 %7153, label %block_.L_47688b, label %block_47684e

block_47684e:                                     ; preds = %block_47682e
  %7162 = load i64, i64* %RBP.i, align 8
  %7163 = add i64 %7162, -48
  %7164 = add i64 %7161, 3
  store i64 %7164, i64* %3, align 8
  %7165 = inttoptr i64 %7163 to i32*
  %7166 = load i32, i32* %7165, align 4
  %7167 = add i32 %7166, -20
  %7168 = icmp eq i32 %7167, 0
  %7169 = zext i1 %7168 to i8
  %7170 = lshr i32 %7167, 31
  %7171 = add i32 %7166, -21
  %7172 = zext i32 %7171 to i64
  store i64 %7172, i64* %RAX.i1404, align 8
  store i8 %7169, i8* %12, align 1
  %7173 = and i32 %7171, 255
  %7174 = tail call i32 @llvm.ctpop.i32(i32 %7173)
  %7175 = trunc i32 %7174 to i8
  %7176 = and i8 %7175, 1
  %7177 = xor i8 %7176, 1
  store i8 %7177, i8* %13, align 1
  %7178 = xor i32 %7171, %7167
  %7179 = lshr i32 %7178, 4
  %7180 = trunc i32 %7179 to i8
  %7181 = and i8 %7180, 1
  store i8 %7181, i8* %14, align 1
  %7182 = icmp eq i32 %7171, 0
  %7183 = zext i1 %7182 to i8
  store i8 %7183, i8* %15, align 1
  %7184 = lshr i32 %7171, 31
  %7185 = trunc i32 %7184 to i8
  store i8 %7185, i8* %16, align 1
  %7186 = xor i32 %7184, %7170
  %7187 = add nuw nsw i32 %7186, %7170
  %7188 = icmp eq i32 %7187, 2
  %7189 = zext i1 %7188 to i8
  store i8 %7189, i8* %17, align 1
  %7190 = sext i32 %7171 to i64
  store i64 %7190, i64* %RCX.i1715, align 8
  %7191 = add nsw i64 %7190, 12099168
  %7192 = add i64 %7161, 20
  store i64 %7192, i64* %3, align 8
  %7193 = inttoptr i64 %7191 to i8*
  %7194 = load i8, i8* %7193, align 1
  %7195 = zext i8 %7194 to i64
  store i64 %7195, i64* %RAX.i1404, align 8
  %7196 = zext i8 %7194 to i32
  %7197 = add nsw i32 %7196, -3
  %7198 = icmp ult i8 %7194, 3
  %7199 = zext i1 %7198 to i8
  store i8 %7199, i8* %12, align 1
  %7200 = and i32 %7197, 255
  %7201 = tail call i32 @llvm.ctpop.i32(i32 %7200)
  %7202 = trunc i32 %7201 to i8
  %7203 = and i8 %7202, 1
  %7204 = xor i8 %7203, 1
  store i8 %7204, i8* %13, align 1
  %7205 = xor i32 %7197, %7196
  %7206 = lshr i32 %7205, 4
  %7207 = trunc i32 %7206 to i8
  %7208 = and i8 %7207, 1
  store i8 %7208, i8* %14, align 1
  %7209 = icmp eq i32 %7197, 0
  %7210 = zext i1 %7209 to i8
  store i8 %7210, i8* %15, align 1
  %7211 = lshr i32 %7197, 31
  %7212 = trunc i32 %7211 to i8
  store i8 %7212, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v431 = select i1 %7209, i64 61, i64 29
  %7213 = add i64 %7161, %.v431
  store i64 %7213, i64* %3, align 8
  br i1 %7209, label %block_.L_47688b, label %block_47686b

block_47686b:                                     ; preds = %block_47684e
  %7214 = load i64, i64* %RBP.i, align 8
  %7215 = add i64 %7214, -48
  %7216 = add i64 %7213, 3
  store i64 %7216, i64* %3, align 8
  %7217 = inttoptr i64 %7215 to i32*
  %7218 = load i32, i32* %7217, align 4
  %7219 = add i32 %7218, -20
  %7220 = icmp eq i32 %7219, 0
  %7221 = zext i1 %7220 to i8
  %7222 = lshr i32 %7219, 31
  %7223 = add i32 %7218, -21
  %7224 = zext i32 %7223 to i64
  store i64 %7224, i64* %RAX.i1404, align 8
  store i8 %7221, i8* %12, align 1
  %7225 = and i32 %7223, 255
  %7226 = tail call i32 @llvm.ctpop.i32(i32 %7225)
  %7227 = trunc i32 %7226 to i8
  %7228 = and i8 %7227, 1
  %7229 = xor i8 %7228, 1
  store i8 %7229, i8* %13, align 1
  %7230 = xor i32 %7223, %7219
  %7231 = lshr i32 %7230, 4
  %7232 = trunc i32 %7231 to i8
  %7233 = and i8 %7232, 1
  store i8 %7233, i8* %14, align 1
  %7234 = icmp eq i32 %7223, 0
  %7235 = zext i1 %7234 to i8
  store i8 %7235, i8* %15, align 1
  %7236 = lshr i32 %7223, 31
  %7237 = trunc i32 %7236 to i8
  store i8 %7237, i8* %16, align 1
  %7238 = xor i32 %7236, %7222
  %7239 = add nuw nsw i32 %7238, %7222
  %7240 = icmp eq i32 %7239, 2
  %7241 = zext i1 %7240 to i8
  store i8 %7241, i8* %17, align 1
  %7242 = sext i32 %7223 to i64
  store i64 %7242, i64* %RCX.i1715, align 8
  %7243 = add nsw i64 %7242, 12099168
  %7244 = add i64 %7213, 20
  store i64 %7244, i64* %3, align 8
  %7245 = inttoptr i64 %7243 to i8*
  %7246 = load i8, i8* %7245, align 1
  %7247 = zext i8 %7246 to i64
  store i64 %7247, i64* %RAX.i1404, align 8
  %7248 = zext i8 %7246 to i32
  %7249 = add i64 %7214, -232
  %7250 = add i64 %7213, 26
  store i64 %7250, i64* %3, align 8
  %7251 = inttoptr i64 %7249 to i32*
  %7252 = load i32, i32* %7251, align 4
  %7253 = sub i32 %7248, %7252
  %7254 = icmp ult i32 %7248, %7252
  %7255 = zext i1 %7254 to i8
  store i8 %7255, i8* %12, align 1
  %7256 = and i32 %7253, 255
  %7257 = tail call i32 @llvm.ctpop.i32(i32 %7256)
  %7258 = trunc i32 %7257 to i8
  %7259 = and i8 %7258, 1
  %7260 = xor i8 %7259, 1
  store i8 %7260, i8* %13, align 1
  %7261 = xor i32 %7252, %7248
  %7262 = xor i32 %7261, %7253
  %7263 = lshr i32 %7262, 4
  %7264 = trunc i32 %7263 to i8
  %7265 = and i8 %7264, 1
  store i8 %7265, i8* %14, align 1
  %7266 = icmp eq i32 %7253, 0
  %7267 = zext i1 %7266 to i8
  store i8 %7267, i8* %15, align 1
  %7268 = lshr i32 %7253, 31
  %7269 = trunc i32 %7268 to i8
  store i8 %7269, i8* %16, align 1
  %7270 = lshr i32 %7252, 31
  %7271 = add nuw nsw i32 %7268, %7270
  %7272 = icmp eq i32 %7271, 2
  %7273 = zext i1 %7272 to i8
  store i8 %7273, i8* %17, align 1
  %.v432 = select i1 %7266, i64 32, i64 824
  %7274 = add i64 %7213, %.v432
  store i64 %7274, i64* %3, align 8
  br i1 %7266, label %block_.L_47688b, label %block_.L_476ba3

block_.L_47688b:                                  ; preds = %block_47686b, %block_4767d4, %block_47679d, %block_47684e, %block_47682e, %block_476811, %block_4767f4, %block_4767b7, %block_476783
  %7275 = phi i64 [ %7274, %block_47686b ], [ %7213, %block_47684e ], [ %7161, %block_47682e ], [ %7099, %block_476811 ], [ %7046, %block_4767f4 ], [ %6986, %block_4767d4 ], [ %6924, %block_4767b7 ], [ %6874, %block_47679d ], [ %6835, %block_476783 ]
  %7276 = load i64, i64* %RBP.i, align 8
  %7277 = add i64 %7276, -48
  %7278 = add i64 %7275, 3
  store i64 %7278, i64* %3, align 8
  %7279 = inttoptr i64 %7277 to i32*
  %7280 = load i32, i32* %7279, align 4
  %7281 = add i32 %7280, 20
  %7282 = zext i32 %7281 to i64
  store i64 %7282, i64* %RAX.i1404, align 8
  %7283 = icmp ugt i32 %7280, -21
  %7284 = zext i1 %7283 to i8
  store i8 %7284, i8* %12, align 1
  %7285 = and i32 %7281, 255
  %7286 = tail call i32 @llvm.ctpop.i32(i32 %7285)
  %7287 = trunc i32 %7286 to i8
  %7288 = and i8 %7287, 1
  %7289 = xor i8 %7288, 1
  store i8 %7289, i8* %13, align 1
  %7290 = xor i32 %7280, 16
  %7291 = xor i32 %7290, %7281
  %7292 = lshr i32 %7291, 4
  %7293 = trunc i32 %7292 to i8
  %7294 = and i8 %7293, 1
  store i8 %7294, i8* %14, align 1
  %7295 = icmp eq i32 %7281, 0
  %7296 = zext i1 %7295 to i8
  store i8 %7296, i8* %15, align 1
  %7297 = lshr i32 %7281, 31
  %7298 = trunc i32 %7297 to i8
  store i8 %7298, i8* %16, align 1
  %7299 = lshr i32 %7280, 31
  %7300 = xor i32 %7297, %7299
  %7301 = add nuw nsw i32 %7300, %7297
  %7302 = icmp eq i32 %7301, 2
  %7303 = zext i1 %7302 to i8
  store i8 %7303, i8* %17, align 1
  %7304 = sext i32 %7281 to i64
  store i64 %7304, i64* %RCX.i1715, align 8
  %7305 = add nsw i64 %7304, 12099168
  %7306 = add i64 %7275, 17
  store i64 %7306, i64* %3, align 8
  %7307 = inttoptr i64 %7305 to i8*
  %7308 = load i8, i8* %7307, align 1
  %7309 = zext i8 %7308 to i64
  store i64 %7309, i64* %RAX.i1404, align 8
  %7310 = zext i8 %7308 to i32
  %7311 = add nsw i32 %7310, -3
  %7312 = icmp ult i8 %7308, 3
  %7313 = zext i1 %7312 to i8
  store i8 %7313, i8* %12, align 1
  %7314 = and i32 %7311, 255
  %7315 = tail call i32 @llvm.ctpop.i32(i32 %7314)
  %7316 = trunc i32 %7315 to i8
  %7317 = and i8 %7316, 1
  %7318 = xor i8 %7317, 1
  store i8 %7318, i8* %13, align 1
  %7319 = xor i32 %7311, %7310
  %7320 = lshr i32 %7319, 4
  %7321 = trunc i32 %7320 to i8
  %7322 = and i8 %7321, 1
  store i8 %7322, i8* %14, align 1
  %7323 = icmp eq i32 %7311, 0
  %7324 = zext i1 %7323 to i8
  store i8 %7324, i8* %15, align 1
  %7325 = lshr i32 %7311, 31
  %7326 = trunc i32 %7325 to i8
  store i8 %7326, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v399 = select i1 %7323, i64 264, i64 26
  %7327 = add i64 %7275, %.v399
  store i64 %7327, i64* %3, align 8
  br i1 %7323, label %block_.L_476993, label %block_4768a5

block_4768a5:                                     ; preds = %block_.L_47688b
  %7328 = add i64 %7327, 3
  store i64 %7328, i64* %3, align 8
  %7329 = load i32, i32* %7279, align 4
  %7330 = add i32 %7329, 20
  %7331 = zext i32 %7330 to i64
  store i64 %7331, i64* %RAX.i1404, align 8
  %7332 = icmp ugt i32 %7329, -21
  %7333 = zext i1 %7332 to i8
  store i8 %7333, i8* %12, align 1
  %7334 = and i32 %7330, 255
  %7335 = tail call i32 @llvm.ctpop.i32(i32 %7334)
  %7336 = trunc i32 %7335 to i8
  %7337 = and i8 %7336, 1
  %7338 = xor i8 %7337, 1
  store i8 %7338, i8* %13, align 1
  %7339 = xor i32 %7329, 16
  %7340 = xor i32 %7339, %7330
  %7341 = lshr i32 %7340, 4
  %7342 = trunc i32 %7341 to i8
  %7343 = and i8 %7342, 1
  store i8 %7343, i8* %14, align 1
  %7344 = icmp eq i32 %7330, 0
  %7345 = zext i1 %7344 to i8
  store i8 %7345, i8* %15, align 1
  %7346 = lshr i32 %7330, 31
  %7347 = trunc i32 %7346 to i8
  store i8 %7347, i8* %16, align 1
  %7348 = lshr i32 %7329, 31
  %7349 = xor i32 %7346, %7348
  %7350 = add nuw nsw i32 %7349, %7346
  %7351 = icmp eq i32 %7350, 2
  %7352 = zext i1 %7351 to i8
  store i8 %7352, i8* %17, align 1
  %7353 = sext i32 %7330 to i64
  store i64 %7353, i64* %RCX.i1715, align 8
  %7354 = add nsw i64 %7353, 12099168
  %7355 = add i64 %7327, 17
  store i64 %7355, i64* %3, align 8
  %7356 = inttoptr i64 %7354 to i8*
  %7357 = load i8, i8* %7356, align 1
  %7358 = zext i8 %7357 to i64
  store i64 %7358, i64* %RAX.i1404, align 8
  %7359 = zext i8 %7357 to i32
  store i8 0, i8* %12, align 1
  %7360 = tail call i32 @llvm.ctpop.i32(i32 %7359)
  %7361 = trunc i32 %7360 to i8
  %7362 = and i8 %7361, 1
  %7363 = xor i8 %7362, 1
  store i8 %7363, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %7364 = icmp eq i8 %7357, 0
  %7365 = zext i1 %7364 to i8
  store i8 %7365, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v400 = select i1 %7364, i64 26, i64 238
  %7366 = add i64 %7327, %.v400
  store i64 %7366, i64* %3, align 8
  br i1 %7364, label %block_4768bf, label %block_.L_476993

block_4768bf:                                     ; preds = %block_4768a5
  %7367 = add i64 %7366, 3
  store i64 %7367, i64* %3, align 8
  %7368 = load i32, i32* %7279, align 4
  %7369 = add i32 %7368, 20
  %7370 = lshr i32 %7369, 31
  %7371 = add i32 %7368, 40
  %7372 = zext i32 %7371 to i64
  store i64 %7372, i64* %RAX.i1404, align 8
  %7373 = icmp ugt i32 %7369, -21
  %7374 = zext i1 %7373 to i8
  store i8 %7374, i8* %12, align 1
  %7375 = and i32 %7371, 255
  %7376 = tail call i32 @llvm.ctpop.i32(i32 %7375)
  %7377 = trunc i32 %7376 to i8
  %7378 = and i8 %7377, 1
  %7379 = xor i8 %7378, 1
  store i8 %7379, i8* %13, align 1
  %7380 = xor i32 %7369, 16
  %7381 = xor i32 %7380, %7371
  %7382 = lshr i32 %7381, 4
  %7383 = trunc i32 %7382 to i8
  %7384 = and i8 %7383, 1
  store i8 %7384, i8* %14, align 1
  %7385 = icmp eq i32 %7371, 0
  %7386 = zext i1 %7385 to i8
  store i8 %7386, i8* %15, align 1
  %7387 = lshr i32 %7371, 31
  %7388 = trunc i32 %7387 to i8
  store i8 %7388, i8* %16, align 1
  %7389 = xor i32 %7387, %7370
  %7390 = add nuw nsw i32 %7389, %7387
  %7391 = icmp eq i32 %7390, 2
  %7392 = zext i1 %7391 to i8
  store i8 %7392, i8* %17, align 1
  %7393 = sext i32 %7371 to i64
  store i64 %7393, i64* %RCX.i1715, align 8
  %7394 = add nsw i64 %7393, 12099168
  %7395 = add i64 %7366, 20
  store i64 %7395, i64* %3, align 8
  %7396 = inttoptr i64 %7394 to i8*
  %7397 = load i8, i8* %7396, align 1
  %7398 = zext i8 %7397 to i64
  store i64 %7398, i64* %RAX.i1404, align 8
  %7399 = zext i8 %7397 to i32
  %7400 = add nsw i32 %7399, -3
  %7401 = icmp ult i8 %7397, 3
  %7402 = zext i1 %7401 to i8
  store i8 %7402, i8* %12, align 1
  %7403 = and i32 %7400, 255
  %7404 = tail call i32 @llvm.ctpop.i32(i32 %7403)
  %7405 = trunc i32 %7404 to i8
  %7406 = and i8 %7405, 1
  %7407 = xor i8 %7406, 1
  store i8 %7407, i8* %13, align 1
  %7408 = xor i32 %7400, %7399
  %7409 = lshr i32 %7408, 4
  %7410 = trunc i32 %7409 to i8
  %7411 = and i8 %7410, 1
  store i8 %7411, i8* %14, align 1
  %7412 = icmp eq i32 %7400, 0
  %7413 = zext i1 %7412 to i8
  store i8 %7413, i8* %15, align 1
  %7414 = lshr i32 %7400, 31
  %7415 = trunc i32 %7414 to i8
  store i8 %7415, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v419 = select i1 %7412, i64 212, i64 29
  %7416 = add i64 %7366, %.v419
  store i64 %7416, i64* %3, align 8
  br i1 %7412, label %block_.L_476993, label %block_4768dc

block_4768dc:                                     ; preds = %block_4768bf
  %7417 = load i64, i64* %RBP.i, align 8
  %7418 = add i64 %7417, -48
  %7419 = add i64 %7416, 3
  store i64 %7419, i64* %3, align 8
  %7420 = inttoptr i64 %7418 to i32*
  %7421 = load i32, i32* %7420, align 4
  %7422 = add i32 %7421, 20
  %7423 = lshr i32 %7422, 31
  %7424 = add i32 %7421, 40
  %7425 = zext i32 %7424 to i64
  store i64 %7425, i64* %RAX.i1404, align 8
  %7426 = icmp ugt i32 %7422, -21
  %7427 = zext i1 %7426 to i8
  store i8 %7427, i8* %12, align 1
  %7428 = and i32 %7424, 255
  %7429 = tail call i32 @llvm.ctpop.i32(i32 %7428)
  %7430 = trunc i32 %7429 to i8
  %7431 = and i8 %7430, 1
  %7432 = xor i8 %7431, 1
  store i8 %7432, i8* %13, align 1
  %7433 = xor i32 %7422, 16
  %7434 = xor i32 %7433, %7424
  %7435 = lshr i32 %7434, 4
  %7436 = trunc i32 %7435 to i8
  %7437 = and i8 %7436, 1
  store i8 %7437, i8* %14, align 1
  %7438 = icmp eq i32 %7424, 0
  %7439 = zext i1 %7438 to i8
  store i8 %7439, i8* %15, align 1
  %7440 = lshr i32 %7424, 31
  %7441 = trunc i32 %7440 to i8
  store i8 %7441, i8* %16, align 1
  %7442 = xor i32 %7440, %7423
  %7443 = add nuw nsw i32 %7442, %7440
  %7444 = icmp eq i32 %7443, 2
  %7445 = zext i1 %7444 to i8
  store i8 %7445, i8* %17, align 1
  %7446 = sext i32 %7424 to i64
  store i64 %7446, i64* %RCX.i1715, align 8
  %7447 = add nsw i64 %7446, 12099168
  %7448 = add i64 %7416, 20
  store i64 %7448, i64* %3, align 8
  %7449 = inttoptr i64 %7447 to i8*
  %7450 = load i8, i8* %7449, align 1
  %7451 = zext i8 %7450 to i64
  store i64 %7451, i64* %RAX.i1404, align 8
  %7452 = zext i8 %7450 to i32
  %7453 = add i64 %7417, -228
  %7454 = add i64 %7416, 26
  store i64 %7454, i64* %3, align 8
  %7455 = inttoptr i64 %7453 to i32*
  %7456 = load i32, i32* %7455, align 4
  %7457 = sub i32 %7452, %7456
  %7458 = icmp ult i32 %7452, %7456
  %7459 = zext i1 %7458 to i8
  store i8 %7459, i8* %12, align 1
  %7460 = and i32 %7457, 255
  %7461 = tail call i32 @llvm.ctpop.i32(i32 %7460)
  %7462 = trunc i32 %7461 to i8
  %7463 = and i8 %7462, 1
  %7464 = xor i8 %7463, 1
  store i8 %7464, i8* %13, align 1
  %7465 = xor i32 %7456, %7452
  %7466 = xor i32 %7465, %7457
  %7467 = lshr i32 %7466, 4
  %7468 = trunc i32 %7467 to i8
  %7469 = and i8 %7468, 1
  store i8 %7469, i8* %14, align 1
  %7470 = icmp eq i32 %7457, 0
  %7471 = zext i1 %7470 to i8
  store i8 %7471, i8* %15, align 1
  %7472 = lshr i32 %7457, 31
  %7473 = trunc i32 %7472 to i8
  store i8 %7473, i8* %16, align 1
  %7474 = lshr i32 %7456, 31
  %7475 = add nuw nsw i32 %7472, %7474
  %7476 = icmp eq i32 %7475, 2
  %7477 = zext i1 %7476 to i8
  store i8 %7477, i8* %17, align 1
  %.v420 = select i1 %7470, i64 32, i64 183
  %7478 = add i64 %7416, %.v420
  store i64 %7478, i64* %3, align 8
  br i1 %7470, label %block_4768fc, label %block_.L_476993

block_4768fc:                                     ; preds = %block_4768dc
  %7479 = load i64, i64* %RBP.i, align 8
  %7480 = add i64 %7479, -48
  %7481 = add i64 %7478, 3
  store i64 %7481, i64* %3, align 8
  %7482 = inttoptr i64 %7480 to i32*
  %7483 = load i32, i32* %7482, align 4
  %7484 = add i32 %7483, 20
  %7485 = lshr i32 %7484, 31
  %7486 = add i32 %7483, 40
  %7487 = zext i32 %7486 to i64
  store i64 %7487, i64* %RAX.i1404, align 8
  %7488 = icmp ugt i32 %7484, -21
  %7489 = zext i1 %7488 to i8
  store i8 %7489, i8* %12, align 1
  %7490 = and i32 %7486, 255
  %7491 = tail call i32 @llvm.ctpop.i32(i32 %7490)
  %7492 = trunc i32 %7491 to i8
  %7493 = and i8 %7492, 1
  %7494 = xor i8 %7493, 1
  store i8 %7494, i8* %13, align 1
  %7495 = xor i32 %7484, 16
  %7496 = xor i32 %7495, %7486
  %7497 = lshr i32 %7496, 4
  %7498 = trunc i32 %7497 to i8
  %7499 = and i8 %7498, 1
  store i8 %7499, i8* %14, align 1
  %7500 = icmp eq i32 %7486, 0
  %7501 = zext i1 %7500 to i8
  store i8 %7501, i8* %15, align 1
  %7502 = lshr i32 %7486, 31
  %7503 = trunc i32 %7502 to i8
  store i8 %7503, i8* %16, align 1
  %7504 = xor i32 %7502, %7485
  %7505 = add nuw nsw i32 %7504, %7502
  %7506 = icmp eq i32 %7505, 2
  %7507 = zext i1 %7506 to i8
  store i8 %7507, i8* %17, align 1
  %7508 = sext i32 %7486 to i64
  store i64 %7508, i64* %RCX.i1715, align 8
  %7509 = add nsw i64 %7508, -1040
  %7510 = add i64 %7509, %7479
  %7511 = add i64 %7478, 20
  store i64 %7511, i64* %3, align 8
  %7512 = inttoptr i64 %7510 to i8*
  %7513 = load i8, i8* %7512, align 1
  %7514 = sext i8 %7513 to i64
  %7515 = and i64 %7514, 4294967295
  store i64 %7515, i64* %RAX.i1404, align 8
  %7516 = sext i8 %7513 to i32
  %7517 = add nsw i32 %7516, -1
  %7518 = icmp eq i8 %7513, 0
  %7519 = zext i1 %7518 to i8
  store i8 %7519, i8* %12, align 1
  %7520 = and i32 %7517, 255
  %7521 = tail call i32 @llvm.ctpop.i32(i32 %7520)
  %7522 = trunc i32 %7521 to i8
  %7523 = and i8 %7522, 1
  %7524 = xor i8 %7523, 1
  store i8 %7524, i8* %13, align 1
  %7525 = xor i32 %7517, %7516
  %7526 = lshr i32 %7525, 4
  %7527 = trunc i32 %7526 to i8
  %7528 = and i8 %7527, 1
  store i8 %7528, i8* %14, align 1
  %7529 = icmp eq i32 %7517, 0
  %7530 = zext i1 %7529 to i8
  store i8 %7530, i8* %15, align 1
  %7531 = lshr i32 %7517, 31
  %7532 = trunc i32 %7531 to i8
  store i8 %7532, i8* %16, align 1
  %7533 = lshr i32 %7516, 31
  %7534 = xor i32 %7531, %7533
  %7535 = add nuw nsw i32 %7534, %7533
  %7536 = icmp eq i32 %7535, 2
  %7537 = zext i1 %7536 to i8
  store i8 %7537, i8* %17, align 1
  %.v421 = select i1 %7529, i64 151, i64 29
  %7538 = add i64 %7478, %.v421
  store i64 %7538, i64* %3, align 8
  br i1 %7529, label %block_.L_476993, label %block_476919

block_476919:                                     ; preds = %block_4768fc
  %7539 = load i64, i64* %RBP.i, align 8
  %7540 = add i64 %7539, -48
  %7541 = add i64 %7538, 3
  store i64 %7541, i64* %3, align 8
  %7542 = inttoptr i64 %7540 to i32*
  %7543 = load i32, i32* %7542, align 4
  %7544 = add i32 %7543, 20
  %7545 = lshr i32 %7544, 31
  %7546 = add i32 %7543, 21
  %7547 = zext i32 %7546 to i64
  store i64 %7547, i64* %RAX.i1404, align 8
  %7548 = icmp eq i32 %7544, -1
  %7549 = icmp eq i32 %7546, 0
  %7550 = or i1 %7548, %7549
  %7551 = zext i1 %7550 to i8
  store i8 %7551, i8* %12, align 1
  %7552 = and i32 %7546, 255
  %7553 = tail call i32 @llvm.ctpop.i32(i32 %7552)
  %7554 = trunc i32 %7553 to i8
  %7555 = and i8 %7554, 1
  %7556 = xor i8 %7555, 1
  store i8 %7556, i8* %13, align 1
  %7557 = xor i32 %7546, %7544
  %7558 = lshr i32 %7557, 4
  %7559 = trunc i32 %7558 to i8
  %7560 = and i8 %7559, 1
  store i8 %7560, i8* %14, align 1
  %7561 = zext i1 %7549 to i8
  store i8 %7561, i8* %15, align 1
  %7562 = lshr i32 %7546, 31
  %7563 = trunc i32 %7562 to i8
  store i8 %7563, i8* %16, align 1
  %7564 = xor i32 %7562, %7545
  %7565 = add nuw nsw i32 %7564, %7562
  %7566 = icmp eq i32 %7565, 2
  %7567 = zext i1 %7566 to i8
  store i8 %7567, i8* %17, align 1
  %7568 = sext i32 %7546 to i64
  store i64 %7568, i64* %RCX.i1715, align 8
  %7569 = add nsw i64 %7568, 12099168
  %7570 = add i64 %7538, 20
  store i64 %7570, i64* %3, align 8
  %7571 = inttoptr i64 %7569 to i8*
  %7572 = load i8, i8* %7571, align 1
  %7573 = zext i8 %7572 to i64
  store i64 %7573, i64* %RAX.i1404, align 8
  %7574 = zext i8 %7572 to i32
  %7575 = add nsw i32 %7574, -3
  %7576 = icmp ult i8 %7572, 3
  %7577 = zext i1 %7576 to i8
  store i8 %7577, i8* %12, align 1
  %7578 = and i32 %7575, 255
  %7579 = tail call i32 @llvm.ctpop.i32(i32 %7578)
  %7580 = trunc i32 %7579 to i8
  %7581 = and i8 %7580, 1
  %7582 = xor i8 %7581, 1
  store i8 %7582, i8* %13, align 1
  %7583 = xor i32 %7575, %7574
  %7584 = lshr i32 %7583, 4
  %7585 = trunc i32 %7584 to i8
  %7586 = and i8 %7585, 1
  store i8 %7586, i8* %14, align 1
  %7587 = icmp eq i32 %7575, 0
  %7588 = zext i1 %7587 to i8
  store i8 %7588, i8* %15, align 1
  %7589 = lshr i32 %7575, 31
  %7590 = trunc i32 %7589 to i8
  store i8 %7590, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v422 = select i1 %7587, i64 122, i64 29
  %7591 = add i64 %7538, %.v422
  store i64 %7591, i64* %3, align 8
  br i1 %7587, label %block_.L_476993, label %block_476936

block_476936:                                     ; preds = %block_476919
  %7592 = load i64, i64* %RBP.i, align 8
  %7593 = add i64 %7592, -48
  %7594 = add i64 %7591, 3
  store i64 %7594, i64* %3, align 8
  %7595 = inttoptr i64 %7593 to i32*
  %7596 = load i32, i32* %7595, align 4
  %7597 = add i32 %7596, 20
  %7598 = lshr i32 %7597, 31
  %7599 = add i32 %7596, 21
  %7600 = zext i32 %7599 to i64
  store i64 %7600, i64* %RAX.i1404, align 8
  %7601 = icmp eq i32 %7597, -1
  %7602 = icmp eq i32 %7599, 0
  %7603 = or i1 %7601, %7602
  %7604 = zext i1 %7603 to i8
  store i8 %7604, i8* %12, align 1
  %7605 = and i32 %7599, 255
  %7606 = tail call i32 @llvm.ctpop.i32(i32 %7605)
  %7607 = trunc i32 %7606 to i8
  %7608 = and i8 %7607, 1
  %7609 = xor i8 %7608, 1
  store i8 %7609, i8* %13, align 1
  %7610 = xor i32 %7599, %7597
  %7611 = lshr i32 %7610, 4
  %7612 = trunc i32 %7611 to i8
  %7613 = and i8 %7612, 1
  store i8 %7613, i8* %14, align 1
  %7614 = zext i1 %7602 to i8
  store i8 %7614, i8* %15, align 1
  %7615 = lshr i32 %7599, 31
  %7616 = trunc i32 %7615 to i8
  store i8 %7616, i8* %16, align 1
  %7617 = xor i32 %7615, %7598
  %7618 = add nuw nsw i32 %7617, %7615
  %7619 = icmp eq i32 %7618, 2
  %7620 = zext i1 %7619 to i8
  store i8 %7620, i8* %17, align 1
  %7621 = sext i32 %7599 to i64
  store i64 %7621, i64* %RCX.i1715, align 8
  %7622 = add nsw i64 %7621, 12099168
  %7623 = add i64 %7591, 20
  store i64 %7623, i64* %3, align 8
  %7624 = inttoptr i64 %7622 to i8*
  %7625 = load i8, i8* %7624, align 1
  %7626 = zext i8 %7625 to i64
  store i64 %7626, i64* %RAX.i1404, align 8
  %7627 = zext i8 %7625 to i32
  %7628 = add i64 %7592, -232
  %7629 = add i64 %7591, 26
  store i64 %7629, i64* %3, align 8
  %7630 = inttoptr i64 %7628 to i32*
  %7631 = load i32, i32* %7630, align 4
  %7632 = sub i32 %7627, %7631
  %7633 = icmp ult i32 %7627, %7631
  %7634 = zext i1 %7633 to i8
  store i8 %7634, i8* %12, align 1
  %7635 = and i32 %7632, 255
  %7636 = tail call i32 @llvm.ctpop.i32(i32 %7635)
  %7637 = trunc i32 %7636 to i8
  %7638 = and i8 %7637, 1
  %7639 = xor i8 %7638, 1
  store i8 %7639, i8* %13, align 1
  %7640 = xor i32 %7631, %7627
  %7641 = xor i32 %7640, %7632
  %7642 = lshr i32 %7641, 4
  %7643 = trunc i32 %7642 to i8
  %7644 = and i8 %7643, 1
  store i8 %7644, i8* %14, align 1
  %7645 = icmp eq i32 %7632, 0
  %7646 = zext i1 %7645 to i8
  store i8 %7646, i8* %15, align 1
  %7647 = lshr i32 %7632, 31
  %7648 = trunc i32 %7647 to i8
  store i8 %7648, i8* %16, align 1
  %7649 = lshr i32 %7631, 31
  %7650 = add nuw nsw i32 %7647, %7649
  %7651 = icmp eq i32 %7650, 2
  %7652 = zext i1 %7651 to i8
  store i8 %7652, i8* %17, align 1
  %.v423 = select i1 %7645, i64 93, i64 32
  %7653 = add i64 %7591, %.v423
  store i64 %7653, i64* %3, align 8
  br i1 %7645, label %block_.L_476993, label %block_476956

block_476956:                                     ; preds = %block_476936
  %7654 = load i64, i64* %RBP.i, align 8
  %7655 = add i64 %7654, -48
  %7656 = add i64 %7653, 3
  store i64 %7656, i64* %3, align 8
  %7657 = inttoptr i64 %7655 to i32*
  %7658 = load i32, i32* %7657, align 4
  %7659 = add i32 %7658, 20
  %7660 = icmp eq i32 %7659, 0
  %7661 = zext i1 %7660 to i8
  %7662 = lshr i32 %7659, 31
  %7663 = add i32 %7658, 19
  %7664 = zext i32 %7663 to i64
  store i64 %7664, i64* %RAX.i1404, align 8
  store i8 %7661, i8* %12, align 1
  %7665 = and i32 %7663, 255
  %7666 = tail call i32 @llvm.ctpop.i32(i32 %7665)
  %7667 = trunc i32 %7666 to i8
  %7668 = and i8 %7667, 1
  %7669 = xor i8 %7668, 1
  store i8 %7669, i8* %13, align 1
  %7670 = xor i32 %7663, %7659
  %7671 = lshr i32 %7670, 4
  %7672 = trunc i32 %7671 to i8
  %7673 = and i8 %7672, 1
  store i8 %7673, i8* %14, align 1
  %7674 = icmp eq i32 %7663, 0
  %7675 = zext i1 %7674 to i8
  store i8 %7675, i8* %15, align 1
  %7676 = lshr i32 %7663, 31
  %7677 = trunc i32 %7676 to i8
  store i8 %7677, i8* %16, align 1
  %7678 = xor i32 %7676, %7662
  %7679 = add nuw nsw i32 %7678, %7662
  %7680 = icmp eq i32 %7679, 2
  %7681 = zext i1 %7680 to i8
  store i8 %7681, i8* %17, align 1
  %7682 = sext i32 %7663 to i64
  store i64 %7682, i64* %RCX.i1715, align 8
  %7683 = add nsw i64 %7682, 12099168
  %7684 = add i64 %7653, 20
  store i64 %7684, i64* %3, align 8
  %7685 = inttoptr i64 %7683 to i8*
  %7686 = load i8, i8* %7685, align 1
  %7687 = zext i8 %7686 to i64
  store i64 %7687, i64* %RAX.i1404, align 8
  %7688 = zext i8 %7686 to i32
  %7689 = add nsw i32 %7688, -3
  %7690 = icmp ult i8 %7686, 3
  %7691 = zext i1 %7690 to i8
  store i8 %7691, i8* %12, align 1
  %7692 = and i32 %7689, 255
  %7693 = tail call i32 @llvm.ctpop.i32(i32 %7692)
  %7694 = trunc i32 %7693 to i8
  %7695 = and i8 %7694, 1
  %7696 = xor i8 %7695, 1
  store i8 %7696, i8* %13, align 1
  %7697 = xor i32 %7689, %7688
  %7698 = lshr i32 %7697, 4
  %7699 = trunc i32 %7698 to i8
  %7700 = and i8 %7699, 1
  store i8 %7700, i8* %14, align 1
  %7701 = icmp eq i32 %7689, 0
  %7702 = zext i1 %7701 to i8
  store i8 %7702, i8* %15, align 1
  %7703 = lshr i32 %7689, 31
  %7704 = trunc i32 %7703 to i8
  store i8 %7704, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v424 = select i1 %7701, i64 61, i64 29
  %7705 = add i64 %7653, %.v424
  store i64 %7705, i64* %3, align 8
  br i1 %7701, label %block_.L_476993, label %block_476973

block_476973:                                     ; preds = %block_476956
  %7706 = load i64, i64* %RBP.i, align 8
  %7707 = add i64 %7706, -48
  %7708 = add i64 %7705, 3
  store i64 %7708, i64* %3, align 8
  %7709 = inttoptr i64 %7707 to i32*
  %7710 = load i32, i32* %7709, align 4
  %7711 = add i32 %7710, 20
  %7712 = icmp eq i32 %7711, 0
  %7713 = zext i1 %7712 to i8
  %7714 = lshr i32 %7711, 31
  %7715 = add i32 %7710, 19
  %7716 = zext i32 %7715 to i64
  store i64 %7716, i64* %RAX.i1404, align 8
  store i8 %7713, i8* %12, align 1
  %7717 = and i32 %7715, 255
  %7718 = tail call i32 @llvm.ctpop.i32(i32 %7717)
  %7719 = trunc i32 %7718 to i8
  %7720 = and i8 %7719, 1
  %7721 = xor i8 %7720, 1
  store i8 %7721, i8* %13, align 1
  %7722 = xor i32 %7715, %7711
  %7723 = lshr i32 %7722, 4
  %7724 = trunc i32 %7723 to i8
  %7725 = and i8 %7724, 1
  store i8 %7725, i8* %14, align 1
  %7726 = icmp eq i32 %7715, 0
  %7727 = zext i1 %7726 to i8
  store i8 %7727, i8* %15, align 1
  %7728 = lshr i32 %7715, 31
  %7729 = trunc i32 %7728 to i8
  store i8 %7729, i8* %16, align 1
  %7730 = xor i32 %7728, %7714
  %7731 = add nuw nsw i32 %7730, %7714
  %7732 = icmp eq i32 %7731, 2
  %7733 = zext i1 %7732 to i8
  store i8 %7733, i8* %17, align 1
  %7734 = sext i32 %7715 to i64
  store i64 %7734, i64* %RCX.i1715, align 8
  %7735 = add nsw i64 %7734, 12099168
  %7736 = add i64 %7705, 20
  store i64 %7736, i64* %3, align 8
  %7737 = inttoptr i64 %7735 to i8*
  %7738 = load i8, i8* %7737, align 1
  %7739 = zext i8 %7738 to i64
  store i64 %7739, i64* %RAX.i1404, align 8
  %7740 = zext i8 %7738 to i32
  %7741 = add i64 %7706, -232
  %7742 = add i64 %7705, 26
  store i64 %7742, i64* %3, align 8
  %7743 = inttoptr i64 %7741 to i32*
  %7744 = load i32, i32* %7743, align 4
  %7745 = sub i32 %7740, %7744
  %7746 = icmp ult i32 %7740, %7744
  %7747 = zext i1 %7746 to i8
  store i8 %7747, i8* %12, align 1
  %7748 = and i32 %7745, 255
  %7749 = tail call i32 @llvm.ctpop.i32(i32 %7748)
  %7750 = trunc i32 %7749 to i8
  %7751 = and i8 %7750, 1
  %7752 = xor i8 %7751, 1
  store i8 %7752, i8* %13, align 1
  %7753 = xor i32 %7744, %7740
  %7754 = xor i32 %7753, %7745
  %7755 = lshr i32 %7754, 4
  %7756 = trunc i32 %7755 to i8
  %7757 = and i8 %7756, 1
  store i8 %7757, i8* %14, align 1
  %7758 = icmp eq i32 %7745, 0
  %7759 = zext i1 %7758 to i8
  store i8 %7759, i8* %15, align 1
  %7760 = lshr i32 %7745, 31
  %7761 = trunc i32 %7760 to i8
  store i8 %7761, i8* %16, align 1
  %7762 = lshr i32 %7744, 31
  %7763 = add nuw nsw i32 %7760, %7762
  %7764 = icmp eq i32 %7763, 2
  %7765 = zext i1 %7764 to i8
  store i8 %7765, i8* %17, align 1
  %.v425 = select i1 %7758, i64 32, i64 560
  %7766 = add i64 %7705, %.v425
  store i64 %7766, i64* %3, align 8
  br i1 %7758, label %block_.L_476993, label %block_.L_476ba3

block_.L_476993:                                  ; preds = %block_476973, %block_4768dc, %block_4768a5, %block_476956, %block_476936, %block_476919, %block_4768fc, %block_4768bf, %block_.L_47688b
  %7767 = phi i64 [ %7766, %block_476973 ], [ %7705, %block_476956 ], [ %7653, %block_476936 ], [ %7591, %block_476919 ], [ %7538, %block_4768fc ], [ %7478, %block_4768dc ], [ %7416, %block_4768bf ], [ %7366, %block_4768a5 ], [ %7327, %block_.L_47688b ]
  %7768 = load i64, i64* %RBP.i, align 8
  %7769 = add i64 %7768, -48
  %7770 = add i64 %7767, 3
  store i64 %7770, i64* %3, align 8
  %7771 = inttoptr i64 %7769 to i32*
  %7772 = load i32, i32* %7771, align 4
  %7773 = add i32 %7772, 1
  %7774 = zext i32 %7773 to i64
  store i64 %7774, i64* %RAX.i1404, align 8
  %7775 = icmp eq i32 %7772, -1
  %7776 = icmp eq i32 %7773, 0
  %7777 = or i1 %7775, %7776
  %7778 = zext i1 %7777 to i8
  store i8 %7778, i8* %12, align 1
  %7779 = and i32 %7773, 255
  %7780 = tail call i32 @llvm.ctpop.i32(i32 %7779)
  %7781 = trunc i32 %7780 to i8
  %7782 = and i8 %7781, 1
  %7783 = xor i8 %7782, 1
  store i8 %7783, i8* %13, align 1
  %7784 = xor i32 %7773, %7772
  %7785 = lshr i32 %7784, 4
  %7786 = trunc i32 %7785 to i8
  %7787 = and i8 %7786, 1
  store i8 %7787, i8* %14, align 1
  %7788 = zext i1 %7776 to i8
  store i8 %7788, i8* %15, align 1
  %7789 = lshr i32 %7773, 31
  %7790 = trunc i32 %7789 to i8
  store i8 %7790, i8* %16, align 1
  %7791 = lshr i32 %7772, 31
  %7792 = xor i32 %7789, %7791
  %7793 = add nuw nsw i32 %7792, %7789
  %7794 = icmp eq i32 %7793, 2
  %7795 = zext i1 %7794 to i8
  store i8 %7795, i8* %17, align 1
  %7796 = sext i32 %7773 to i64
  store i64 %7796, i64* %RCX.i1715, align 8
  %7797 = add nsw i64 %7796, 12099168
  %7798 = add i64 %7767, 17
  store i64 %7798, i64* %3, align 8
  %7799 = inttoptr i64 %7797 to i8*
  %7800 = load i8, i8* %7799, align 1
  %7801 = zext i8 %7800 to i64
  store i64 %7801, i64* %RAX.i1404, align 8
  %7802 = zext i8 %7800 to i32
  %7803 = add nsw i32 %7802, -3
  %7804 = icmp ult i8 %7800, 3
  %7805 = zext i1 %7804 to i8
  store i8 %7805, i8* %12, align 1
  %7806 = and i32 %7803, 255
  %7807 = tail call i32 @llvm.ctpop.i32(i32 %7806)
  %7808 = trunc i32 %7807 to i8
  %7809 = and i8 %7808, 1
  %7810 = xor i8 %7809, 1
  store i8 %7810, i8* %13, align 1
  %7811 = xor i32 %7803, %7802
  %7812 = lshr i32 %7811, 4
  %7813 = trunc i32 %7812 to i8
  %7814 = and i8 %7813, 1
  store i8 %7814, i8* %14, align 1
  %7815 = icmp eq i32 %7803, 0
  %7816 = zext i1 %7815 to i8
  store i8 %7816, i8* %15, align 1
  %7817 = lshr i32 %7803, 31
  %7818 = trunc i32 %7817 to i8
  store i8 %7818, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v401 = select i1 %7815, i64 264, i64 26
  %7819 = add i64 %7767, %.v401
  store i64 %7819, i64* %3, align 8
  br i1 %7815, label %block_.L_476a9b, label %block_4769ad

block_4769ad:                                     ; preds = %block_.L_476993
  %7820 = add i64 %7819, 3
  store i64 %7820, i64* %3, align 8
  %7821 = load i32, i32* %7771, align 4
  %7822 = add i32 %7821, 1
  %7823 = zext i32 %7822 to i64
  store i64 %7823, i64* %RAX.i1404, align 8
  %7824 = icmp eq i32 %7821, -1
  %7825 = icmp eq i32 %7822, 0
  %7826 = or i1 %7824, %7825
  %7827 = zext i1 %7826 to i8
  store i8 %7827, i8* %12, align 1
  %7828 = and i32 %7822, 255
  %7829 = tail call i32 @llvm.ctpop.i32(i32 %7828)
  %7830 = trunc i32 %7829 to i8
  %7831 = and i8 %7830, 1
  %7832 = xor i8 %7831, 1
  store i8 %7832, i8* %13, align 1
  %7833 = xor i32 %7822, %7821
  %7834 = lshr i32 %7833, 4
  %7835 = trunc i32 %7834 to i8
  %7836 = and i8 %7835, 1
  store i8 %7836, i8* %14, align 1
  %7837 = zext i1 %7825 to i8
  store i8 %7837, i8* %15, align 1
  %7838 = lshr i32 %7822, 31
  %7839 = trunc i32 %7838 to i8
  store i8 %7839, i8* %16, align 1
  %7840 = lshr i32 %7821, 31
  %7841 = xor i32 %7838, %7840
  %7842 = add nuw nsw i32 %7841, %7838
  %7843 = icmp eq i32 %7842, 2
  %7844 = zext i1 %7843 to i8
  store i8 %7844, i8* %17, align 1
  %7845 = sext i32 %7822 to i64
  store i64 %7845, i64* %RCX.i1715, align 8
  %7846 = add nsw i64 %7845, 12099168
  %7847 = add i64 %7819, 17
  store i64 %7847, i64* %3, align 8
  %7848 = inttoptr i64 %7846 to i8*
  %7849 = load i8, i8* %7848, align 1
  %7850 = zext i8 %7849 to i64
  store i64 %7850, i64* %RAX.i1404, align 8
  %7851 = zext i8 %7849 to i32
  store i8 0, i8* %12, align 1
  %7852 = tail call i32 @llvm.ctpop.i32(i32 %7851)
  %7853 = trunc i32 %7852 to i8
  %7854 = and i8 %7853, 1
  %7855 = xor i8 %7854, 1
  store i8 %7855, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %7856 = icmp eq i8 %7849, 0
  %7857 = zext i1 %7856 to i8
  store i8 %7857, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v402 = select i1 %7856, i64 26, i64 238
  %7858 = add i64 %7819, %.v402
  store i64 %7858, i64* %3, align 8
  br i1 %7856, label %block_4769c7, label %block_.L_476a9b

block_4769c7:                                     ; preds = %block_4769ad
  %7859 = add i64 %7858, 3
  store i64 %7859, i64* %3, align 8
  %7860 = load i32, i32* %7771, align 4
  %7861 = add i32 %7860, 1
  %7862 = lshr i32 %7861, 31
  %7863 = add i32 %7860, 2
  %7864 = zext i32 %7863 to i64
  store i64 %7864, i64* %RAX.i1404, align 8
  %7865 = icmp eq i32 %7861, -1
  %7866 = icmp eq i32 %7863, 0
  %7867 = or i1 %7865, %7866
  %7868 = zext i1 %7867 to i8
  store i8 %7868, i8* %12, align 1
  %7869 = and i32 %7863, 255
  %7870 = tail call i32 @llvm.ctpop.i32(i32 %7869)
  %7871 = trunc i32 %7870 to i8
  %7872 = and i8 %7871, 1
  %7873 = xor i8 %7872, 1
  store i8 %7873, i8* %13, align 1
  %7874 = xor i32 %7863, %7861
  %7875 = lshr i32 %7874, 4
  %7876 = trunc i32 %7875 to i8
  %7877 = and i8 %7876, 1
  store i8 %7877, i8* %14, align 1
  %7878 = zext i1 %7866 to i8
  store i8 %7878, i8* %15, align 1
  %7879 = lshr i32 %7863, 31
  %7880 = trunc i32 %7879 to i8
  store i8 %7880, i8* %16, align 1
  %7881 = xor i32 %7879, %7862
  %7882 = add nuw nsw i32 %7881, %7879
  %7883 = icmp eq i32 %7882, 2
  %7884 = zext i1 %7883 to i8
  store i8 %7884, i8* %17, align 1
  %7885 = sext i32 %7863 to i64
  store i64 %7885, i64* %RCX.i1715, align 8
  %7886 = add nsw i64 %7885, 12099168
  %7887 = add i64 %7858, 20
  store i64 %7887, i64* %3, align 8
  %7888 = inttoptr i64 %7886 to i8*
  %7889 = load i8, i8* %7888, align 1
  %7890 = zext i8 %7889 to i64
  store i64 %7890, i64* %RAX.i1404, align 8
  %7891 = zext i8 %7889 to i32
  %7892 = add nsw i32 %7891, -3
  %7893 = icmp ult i8 %7889, 3
  %7894 = zext i1 %7893 to i8
  store i8 %7894, i8* %12, align 1
  %7895 = and i32 %7892, 255
  %7896 = tail call i32 @llvm.ctpop.i32(i32 %7895)
  %7897 = trunc i32 %7896 to i8
  %7898 = and i8 %7897, 1
  %7899 = xor i8 %7898, 1
  store i8 %7899, i8* %13, align 1
  %7900 = xor i32 %7892, %7891
  %7901 = lshr i32 %7900, 4
  %7902 = trunc i32 %7901 to i8
  %7903 = and i8 %7902, 1
  store i8 %7903, i8* %14, align 1
  %7904 = icmp eq i32 %7892, 0
  %7905 = zext i1 %7904 to i8
  store i8 %7905, i8* %15, align 1
  %7906 = lshr i32 %7892, 31
  %7907 = trunc i32 %7906 to i8
  store i8 %7907, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v412 = select i1 %7904, i64 212, i64 29
  %7908 = add i64 %7858, %.v412
  store i64 %7908, i64* %3, align 8
  br i1 %7904, label %block_.L_476a9b, label %block_4769e4

block_4769e4:                                     ; preds = %block_4769c7
  %7909 = load i64, i64* %RBP.i, align 8
  %7910 = add i64 %7909, -48
  %7911 = add i64 %7908, 3
  store i64 %7911, i64* %3, align 8
  %7912 = inttoptr i64 %7910 to i32*
  %7913 = load i32, i32* %7912, align 4
  %7914 = add i32 %7913, 1
  %7915 = lshr i32 %7914, 31
  %7916 = add i32 %7913, 2
  %7917 = zext i32 %7916 to i64
  store i64 %7917, i64* %RAX.i1404, align 8
  %7918 = icmp eq i32 %7914, -1
  %7919 = icmp eq i32 %7916, 0
  %7920 = or i1 %7918, %7919
  %7921 = zext i1 %7920 to i8
  store i8 %7921, i8* %12, align 1
  %7922 = and i32 %7916, 255
  %7923 = tail call i32 @llvm.ctpop.i32(i32 %7922)
  %7924 = trunc i32 %7923 to i8
  %7925 = and i8 %7924, 1
  %7926 = xor i8 %7925, 1
  store i8 %7926, i8* %13, align 1
  %7927 = xor i32 %7916, %7914
  %7928 = lshr i32 %7927, 4
  %7929 = trunc i32 %7928 to i8
  %7930 = and i8 %7929, 1
  store i8 %7930, i8* %14, align 1
  %7931 = zext i1 %7919 to i8
  store i8 %7931, i8* %15, align 1
  %7932 = lshr i32 %7916, 31
  %7933 = trunc i32 %7932 to i8
  store i8 %7933, i8* %16, align 1
  %7934 = xor i32 %7932, %7915
  %7935 = add nuw nsw i32 %7934, %7932
  %7936 = icmp eq i32 %7935, 2
  %7937 = zext i1 %7936 to i8
  store i8 %7937, i8* %17, align 1
  %7938 = sext i32 %7916 to i64
  store i64 %7938, i64* %RCX.i1715, align 8
  %7939 = add nsw i64 %7938, 12099168
  %7940 = add i64 %7908, 20
  store i64 %7940, i64* %3, align 8
  %7941 = inttoptr i64 %7939 to i8*
  %7942 = load i8, i8* %7941, align 1
  %7943 = zext i8 %7942 to i64
  store i64 %7943, i64* %RAX.i1404, align 8
  %7944 = zext i8 %7942 to i32
  %7945 = add i64 %7909, -228
  %7946 = add i64 %7908, 26
  store i64 %7946, i64* %3, align 8
  %7947 = inttoptr i64 %7945 to i32*
  %7948 = load i32, i32* %7947, align 4
  %7949 = sub i32 %7944, %7948
  %7950 = icmp ult i32 %7944, %7948
  %7951 = zext i1 %7950 to i8
  store i8 %7951, i8* %12, align 1
  %7952 = and i32 %7949, 255
  %7953 = tail call i32 @llvm.ctpop.i32(i32 %7952)
  %7954 = trunc i32 %7953 to i8
  %7955 = and i8 %7954, 1
  %7956 = xor i8 %7955, 1
  store i8 %7956, i8* %13, align 1
  %7957 = xor i32 %7948, %7944
  %7958 = xor i32 %7957, %7949
  %7959 = lshr i32 %7958, 4
  %7960 = trunc i32 %7959 to i8
  %7961 = and i8 %7960, 1
  store i8 %7961, i8* %14, align 1
  %7962 = icmp eq i32 %7949, 0
  %7963 = zext i1 %7962 to i8
  store i8 %7963, i8* %15, align 1
  %7964 = lshr i32 %7949, 31
  %7965 = trunc i32 %7964 to i8
  store i8 %7965, i8* %16, align 1
  %7966 = lshr i32 %7948, 31
  %7967 = add nuw nsw i32 %7964, %7966
  %7968 = icmp eq i32 %7967, 2
  %7969 = zext i1 %7968 to i8
  store i8 %7969, i8* %17, align 1
  %.v413 = select i1 %7962, i64 32, i64 183
  %7970 = add i64 %7908, %.v413
  store i64 %7970, i64* %3, align 8
  br i1 %7962, label %block_476a04, label %block_.L_476a9b

block_476a04:                                     ; preds = %block_4769e4
  %7971 = load i64, i64* %RBP.i, align 8
  %7972 = add i64 %7971, -48
  %7973 = add i64 %7970, 3
  store i64 %7973, i64* %3, align 8
  %7974 = inttoptr i64 %7972 to i32*
  %7975 = load i32, i32* %7974, align 4
  %7976 = add i32 %7975, 1
  %7977 = lshr i32 %7976, 31
  %7978 = add i32 %7975, 2
  %7979 = zext i32 %7978 to i64
  store i64 %7979, i64* %RAX.i1404, align 8
  %7980 = icmp eq i32 %7976, -1
  %7981 = icmp eq i32 %7978, 0
  %7982 = or i1 %7980, %7981
  %7983 = zext i1 %7982 to i8
  store i8 %7983, i8* %12, align 1
  %7984 = and i32 %7978, 255
  %7985 = tail call i32 @llvm.ctpop.i32(i32 %7984)
  %7986 = trunc i32 %7985 to i8
  %7987 = and i8 %7986, 1
  %7988 = xor i8 %7987, 1
  store i8 %7988, i8* %13, align 1
  %7989 = xor i32 %7978, %7976
  %7990 = lshr i32 %7989, 4
  %7991 = trunc i32 %7990 to i8
  %7992 = and i8 %7991, 1
  store i8 %7992, i8* %14, align 1
  %7993 = zext i1 %7981 to i8
  store i8 %7993, i8* %15, align 1
  %7994 = lshr i32 %7978, 31
  %7995 = trunc i32 %7994 to i8
  store i8 %7995, i8* %16, align 1
  %7996 = xor i32 %7994, %7977
  %7997 = add nuw nsw i32 %7996, %7994
  %7998 = icmp eq i32 %7997, 2
  %7999 = zext i1 %7998 to i8
  store i8 %7999, i8* %17, align 1
  %8000 = sext i32 %7978 to i64
  store i64 %8000, i64* %RCX.i1715, align 8
  %8001 = add nsw i64 %8000, -1040
  %8002 = add i64 %8001, %7971
  %8003 = add i64 %7970, 20
  store i64 %8003, i64* %3, align 8
  %8004 = inttoptr i64 %8002 to i8*
  %8005 = load i8, i8* %8004, align 1
  %8006 = sext i8 %8005 to i64
  %8007 = and i64 %8006, 4294967295
  store i64 %8007, i64* %RAX.i1404, align 8
  %8008 = sext i8 %8005 to i32
  %8009 = add nsw i32 %8008, -1
  %8010 = icmp eq i8 %8005, 0
  %8011 = zext i1 %8010 to i8
  store i8 %8011, i8* %12, align 1
  %8012 = and i32 %8009, 255
  %8013 = tail call i32 @llvm.ctpop.i32(i32 %8012)
  %8014 = trunc i32 %8013 to i8
  %8015 = and i8 %8014, 1
  %8016 = xor i8 %8015, 1
  store i8 %8016, i8* %13, align 1
  %8017 = xor i32 %8009, %8008
  %8018 = lshr i32 %8017, 4
  %8019 = trunc i32 %8018 to i8
  %8020 = and i8 %8019, 1
  store i8 %8020, i8* %14, align 1
  %8021 = icmp eq i32 %8009, 0
  %8022 = zext i1 %8021 to i8
  store i8 %8022, i8* %15, align 1
  %8023 = lshr i32 %8009, 31
  %8024 = trunc i32 %8023 to i8
  store i8 %8024, i8* %16, align 1
  %8025 = lshr i32 %8008, 31
  %8026 = xor i32 %8023, %8025
  %8027 = add nuw nsw i32 %8026, %8025
  %8028 = icmp eq i32 %8027, 2
  %8029 = zext i1 %8028 to i8
  store i8 %8029, i8* %17, align 1
  %.v414 = select i1 %8021, i64 151, i64 29
  %8030 = add i64 %7970, %.v414
  store i64 %8030, i64* %3, align 8
  br i1 %8021, label %block_.L_476a9b, label %block_476a21

block_476a21:                                     ; preds = %block_476a04
  %8031 = load i64, i64* %RBP.i, align 8
  %8032 = add i64 %8031, -48
  %8033 = add i64 %8030, 3
  store i64 %8033, i64* %3, align 8
  %8034 = inttoptr i64 %8032 to i32*
  %8035 = load i32, i32* %8034, align 4
  %8036 = add i32 %8035, 1
  %8037 = lshr i32 %8036, 31
  %8038 = add i32 %8035, -19
  %8039 = zext i32 %8038 to i64
  store i64 %8039, i64* %RAX.i1404, align 8
  %8040 = icmp ult i32 %8036, 20
  %8041 = zext i1 %8040 to i8
  store i8 %8041, i8* %12, align 1
  %8042 = and i32 %8038, 255
  %8043 = tail call i32 @llvm.ctpop.i32(i32 %8042)
  %8044 = trunc i32 %8043 to i8
  %8045 = and i8 %8044, 1
  %8046 = xor i8 %8045, 1
  store i8 %8046, i8* %13, align 1
  %8047 = xor i32 %8036, 16
  %8048 = xor i32 %8047, %8038
  %8049 = lshr i32 %8048, 4
  %8050 = trunc i32 %8049 to i8
  %8051 = and i8 %8050, 1
  store i8 %8051, i8* %14, align 1
  %8052 = icmp eq i32 %8038, 0
  %8053 = zext i1 %8052 to i8
  store i8 %8053, i8* %15, align 1
  %8054 = lshr i32 %8038, 31
  %8055 = trunc i32 %8054 to i8
  store i8 %8055, i8* %16, align 1
  %8056 = xor i32 %8054, %8037
  %8057 = add nuw nsw i32 %8056, %8037
  %8058 = icmp eq i32 %8057, 2
  %8059 = zext i1 %8058 to i8
  store i8 %8059, i8* %17, align 1
  %8060 = sext i32 %8038 to i64
  store i64 %8060, i64* %RCX.i1715, align 8
  %8061 = add nsw i64 %8060, 12099168
  %8062 = add i64 %8030, 20
  store i64 %8062, i64* %3, align 8
  %8063 = inttoptr i64 %8061 to i8*
  %8064 = load i8, i8* %8063, align 1
  %8065 = zext i8 %8064 to i64
  store i64 %8065, i64* %RAX.i1404, align 8
  %8066 = zext i8 %8064 to i32
  %8067 = add nsw i32 %8066, -3
  %8068 = icmp ult i8 %8064, 3
  %8069 = zext i1 %8068 to i8
  store i8 %8069, i8* %12, align 1
  %8070 = and i32 %8067, 255
  %8071 = tail call i32 @llvm.ctpop.i32(i32 %8070)
  %8072 = trunc i32 %8071 to i8
  %8073 = and i8 %8072, 1
  %8074 = xor i8 %8073, 1
  store i8 %8074, i8* %13, align 1
  %8075 = xor i32 %8067, %8066
  %8076 = lshr i32 %8075, 4
  %8077 = trunc i32 %8076 to i8
  %8078 = and i8 %8077, 1
  store i8 %8078, i8* %14, align 1
  %8079 = icmp eq i32 %8067, 0
  %8080 = zext i1 %8079 to i8
  store i8 %8080, i8* %15, align 1
  %8081 = lshr i32 %8067, 31
  %8082 = trunc i32 %8081 to i8
  store i8 %8082, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v415 = select i1 %8079, i64 122, i64 29
  %8083 = add i64 %8030, %.v415
  store i64 %8083, i64* %3, align 8
  br i1 %8079, label %block_.L_476a9b, label %block_476a3e

block_476a3e:                                     ; preds = %block_476a21
  %8084 = load i64, i64* %RBP.i, align 8
  %8085 = add i64 %8084, -48
  %8086 = add i64 %8083, 3
  store i64 %8086, i64* %3, align 8
  %8087 = inttoptr i64 %8085 to i32*
  %8088 = load i32, i32* %8087, align 4
  %8089 = add i32 %8088, 1
  %8090 = lshr i32 %8089, 31
  %8091 = add i32 %8088, -19
  %8092 = zext i32 %8091 to i64
  store i64 %8092, i64* %RAX.i1404, align 8
  %8093 = icmp ult i32 %8089, 20
  %8094 = zext i1 %8093 to i8
  store i8 %8094, i8* %12, align 1
  %8095 = and i32 %8091, 255
  %8096 = tail call i32 @llvm.ctpop.i32(i32 %8095)
  %8097 = trunc i32 %8096 to i8
  %8098 = and i8 %8097, 1
  %8099 = xor i8 %8098, 1
  store i8 %8099, i8* %13, align 1
  %8100 = xor i32 %8089, 16
  %8101 = xor i32 %8100, %8091
  %8102 = lshr i32 %8101, 4
  %8103 = trunc i32 %8102 to i8
  %8104 = and i8 %8103, 1
  store i8 %8104, i8* %14, align 1
  %8105 = icmp eq i32 %8091, 0
  %8106 = zext i1 %8105 to i8
  store i8 %8106, i8* %15, align 1
  %8107 = lshr i32 %8091, 31
  %8108 = trunc i32 %8107 to i8
  store i8 %8108, i8* %16, align 1
  %8109 = xor i32 %8107, %8090
  %8110 = add nuw nsw i32 %8109, %8090
  %8111 = icmp eq i32 %8110, 2
  %8112 = zext i1 %8111 to i8
  store i8 %8112, i8* %17, align 1
  %8113 = sext i32 %8091 to i64
  store i64 %8113, i64* %RCX.i1715, align 8
  %8114 = add nsw i64 %8113, 12099168
  %8115 = add i64 %8083, 20
  store i64 %8115, i64* %3, align 8
  %8116 = inttoptr i64 %8114 to i8*
  %8117 = load i8, i8* %8116, align 1
  %8118 = zext i8 %8117 to i64
  store i64 %8118, i64* %RAX.i1404, align 8
  %8119 = zext i8 %8117 to i32
  %8120 = add i64 %8084, -232
  %8121 = add i64 %8083, 26
  store i64 %8121, i64* %3, align 8
  %8122 = inttoptr i64 %8120 to i32*
  %8123 = load i32, i32* %8122, align 4
  %8124 = sub i32 %8119, %8123
  %8125 = icmp ult i32 %8119, %8123
  %8126 = zext i1 %8125 to i8
  store i8 %8126, i8* %12, align 1
  %8127 = and i32 %8124, 255
  %8128 = tail call i32 @llvm.ctpop.i32(i32 %8127)
  %8129 = trunc i32 %8128 to i8
  %8130 = and i8 %8129, 1
  %8131 = xor i8 %8130, 1
  store i8 %8131, i8* %13, align 1
  %8132 = xor i32 %8123, %8119
  %8133 = xor i32 %8132, %8124
  %8134 = lshr i32 %8133, 4
  %8135 = trunc i32 %8134 to i8
  %8136 = and i8 %8135, 1
  store i8 %8136, i8* %14, align 1
  %8137 = icmp eq i32 %8124, 0
  %8138 = zext i1 %8137 to i8
  store i8 %8138, i8* %15, align 1
  %8139 = lshr i32 %8124, 31
  %8140 = trunc i32 %8139 to i8
  store i8 %8140, i8* %16, align 1
  %8141 = lshr i32 %8123, 31
  %8142 = add nuw nsw i32 %8139, %8141
  %8143 = icmp eq i32 %8142, 2
  %8144 = zext i1 %8143 to i8
  store i8 %8144, i8* %17, align 1
  %.v416 = select i1 %8137, i64 93, i64 32
  %8145 = add i64 %8083, %.v416
  store i64 %8145, i64* %3, align 8
  br i1 %8137, label %block_.L_476a9b, label %block_476a5e

block_476a5e:                                     ; preds = %block_476a3e
  %8146 = load i64, i64* %RBP.i, align 8
  %8147 = add i64 %8146, -48
  %8148 = add i64 %8145, 3
  store i64 %8148, i64* %3, align 8
  %8149 = inttoptr i64 %8147 to i32*
  %8150 = load i32, i32* %8149, align 4
  %8151 = add i32 %8150, 1
  %8152 = lshr i32 %8151, 31
  %8153 = add i32 %8150, 21
  %8154 = zext i32 %8153 to i64
  store i64 %8154, i64* %RAX.i1404, align 8
  %8155 = icmp ugt i32 %8151, -21
  %8156 = zext i1 %8155 to i8
  store i8 %8156, i8* %12, align 1
  %8157 = and i32 %8153, 255
  %8158 = tail call i32 @llvm.ctpop.i32(i32 %8157)
  %8159 = trunc i32 %8158 to i8
  %8160 = and i8 %8159, 1
  %8161 = xor i8 %8160, 1
  store i8 %8161, i8* %13, align 1
  %8162 = xor i32 %8151, 16
  %8163 = xor i32 %8162, %8153
  %8164 = lshr i32 %8163, 4
  %8165 = trunc i32 %8164 to i8
  %8166 = and i8 %8165, 1
  store i8 %8166, i8* %14, align 1
  %8167 = icmp eq i32 %8153, 0
  %8168 = zext i1 %8167 to i8
  store i8 %8168, i8* %15, align 1
  %8169 = lshr i32 %8153, 31
  %8170 = trunc i32 %8169 to i8
  store i8 %8170, i8* %16, align 1
  %8171 = xor i32 %8169, %8152
  %8172 = add nuw nsw i32 %8171, %8169
  %8173 = icmp eq i32 %8172, 2
  %8174 = zext i1 %8173 to i8
  store i8 %8174, i8* %17, align 1
  %8175 = sext i32 %8153 to i64
  store i64 %8175, i64* %RCX.i1715, align 8
  %8176 = add nsw i64 %8175, 12099168
  %8177 = add i64 %8145, 20
  store i64 %8177, i64* %3, align 8
  %8178 = inttoptr i64 %8176 to i8*
  %8179 = load i8, i8* %8178, align 1
  %8180 = zext i8 %8179 to i64
  store i64 %8180, i64* %RAX.i1404, align 8
  %8181 = zext i8 %8179 to i32
  %8182 = add nsw i32 %8181, -3
  %8183 = icmp ult i8 %8179, 3
  %8184 = zext i1 %8183 to i8
  store i8 %8184, i8* %12, align 1
  %8185 = and i32 %8182, 255
  %8186 = tail call i32 @llvm.ctpop.i32(i32 %8185)
  %8187 = trunc i32 %8186 to i8
  %8188 = and i8 %8187, 1
  %8189 = xor i8 %8188, 1
  store i8 %8189, i8* %13, align 1
  %8190 = xor i32 %8182, %8181
  %8191 = lshr i32 %8190, 4
  %8192 = trunc i32 %8191 to i8
  %8193 = and i8 %8192, 1
  store i8 %8193, i8* %14, align 1
  %8194 = icmp eq i32 %8182, 0
  %8195 = zext i1 %8194 to i8
  store i8 %8195, i8* %15, align 1
  %8196 = lshr i32 %8182, 31
  %8197 = trunc i32 %8196 to i8
  store i8 %8197, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v417 = select i1 %8194, i64 61, i64 29
  %8198 = add i64 %8145, %.v417
  store i64 %8198, i64* %3, align 8
  br i1 %8194, label %block_.L_476a9b, label %block_476a7b

block_476a7b:                                     ; preds = %block_476a5e
  %8199 = load i64, i64* %RBP.i, align 8
  %8200 = add i64 %8199, -48
  %8201 = add i64 %8198, 3
  store i64 %8201, i64* %3, align 8
  %8202 = inttoptr i64 %8200 to i32*
  %8203 = load i32, i32* %8202, align 4
  %8204 = add i32 %8203, 1
  %8205 = lshr i32 %8204, 31
  %8206 = add i32 %8203, 21
  %8207 = zext i32 %8206 to i64
  store i64 %8207, i64* %RAX.i1404, align 8
  %8208 = icmp ugt i32 %8204, -21
  %8209 = zext i1 %8208 to i8
  store i8 %8209, i8* %12, align 1
  %8210 = and i32 %8206, 255
  %8211 = tail call i32 @llvm.ctpop.i32(i32 %8210)
  %8212 = trunc i32 %8211 to i8
  %8213 = and i8 %8212, 1
  %8214 = xor i8 %8213, 1
  store i8 %8214, i8* %13, align 1
  %8215 = xor i32 %8204, 16
  %8216 = xor i32 %8215, %8206
  %8217 = lshr i32 %8216, 4
  %8218 = trunc i32 %8217 to i8
  %8219 = and i8 %8218, 1
  store i8 %8219, i8* %14, align 1
  %8220 = icmp eq i32 %8206, 0
  %8221 = zext i1 %8220 to i8
  store i8 %8221, i8* %15, align 1
  %8222 = lshr i32 %8206, 31
  %8223 = trunc i32 %8222 to i8
  store i8 %8223, i8* %16, align 1
  %8224 = xor i32 %8222, %8205
  %8225 = add nuw nsw i32 %8224, %8222
  %8226 = icmp eq i32 %8225, 2
  %8227 = zext i1 %8226 to i8
  store i8 %8227, i8* %17, align 1
  %8228 = sext i32 %8206 to i64
  store i64 %8228, i64* %RCX.i1715, align 8
  %8229 = add nsw i64 %8228, 12099168
  %8230 = add i64 %8198, 20
  store i64 %8230, i64* %3, align 8
  %8231 = inttoptr i64 %8229 to i8*
  %8232 = load i8, i8* %8231, align 1
  %8233 = zext i8 %8232 to i64
  store i64 %8233, i64* %RAX.i1404, align 8
  %8234 = zext i8 %8232 to i32
  %8235 = add i64 %8199, -232
  %8236 = add i64 %8198, 26
  store i64 %8236, i64* %3, align 8
  %8237 = inttoptr i64 %8235 to i32*
  %8238 = load i32, i32* %8237, align 4
  %8239 = sub i32 %8234, %8238
  %8240 = icmp ult i32 %8234, %8238
  %8241 = zext i1 %8240 to i8
  store i8 %8241, i8* %12, align 1
  %8242 = and i32 %8239, 255
  %8243 = tail call i32 @llvm.ctpop.i32(i32 %8242)
  %8244 = trunc i32 %8243 to i8
  %8245 = and i8 %8244, 1
  %8246 = xor i8 %8245, 1
  store i8 %8246, i8* %13, align 1
  %8247 = xor i32 %8238, %8234
  %8248 = xor i32 %8247, %8239
  %8249 = lshr i32 %8248, 4
  %8250 = trunc i32 %8249 to i8
  %8251 = and i8 %8250, 1
  store i8 %8251, i8* %14, align 1
  %8252 = icmp eq i32 %8239, 0
  %8253 = zext i1 %8252 to i8
  store i8 %8253, i8* %15, align 1
  %8254 = lshr i32 %8239, 31
  %8255 = trunc i32 %8254 to i8
  store i8 %8255, i8* %16, align 1
  %8256 = lshr i32 %8238, 31
  %8257 = add nuw nsw i32 %8254, %8256
  %8258 = icmp eq i32 %8257, 2
  %8259 = zext i1 %8258 to i8
  store i8 %8259, i8* %17, align 1
  %.v418 = select i1 %8252, i64 32, i64 296
  %8260 = add i64 %8198, %.v418
  store i64 %8260, i64* %3, align 8
  br i1 %8252, label %block_.L_476a9b, label %block_.L_476ba3

block_.L_476a9b:                                  ; preds = %block_476a7b, %block_4769e4, %block_4769ad, %block_476a5e, %block_476a3e, %block_476a21, %block_476a04, %block_4769c7, %block_.L_476993
  %8261 = phi i64 [ %8260, %block_476a7b ], [ %8198, %block_476a5e ], [ %8145, %block_476a3e ], [ %8083, %block_476a21 ], [ %8030, %block_476a04 ], [ %7970, %block_4769e4 ], [ %7908, %block_4769c7 ], [ %7858, %block_4769ad ], [ %7819, %block_.L_476993 ]
  %8262 = load i64, i64* %RBP.i, align 8
  %8263 = add i64 %8262, -48
  %8264 = add i64 %8261, 3
  store i64 %8264, i64* %3, align 8
  %8265 = inttoptr i64 %8263 to i32*
  %8266 = load i32, i32* %8265, align 4
  %8267 = add i32 %8266, -1
  %8268 = zext i32 %8267 to i64
  store i64 %8268, i64* %RAX.i1404, align 8
  %8269 = icmp eq i32 %8266, 0
  %8270 = zext i1 %8269 to i8
  store i8 %8270, i8* %12, align 1
  %8271 = and i32 %8267, 255
  %8272 = tail call i32 @llvm.ctpop.i32(i32 %8271)
  %8273 = trunc i32 %8272 to i8
  %8274 = and i8 %8273, 1
  %8275 = xor i8 %8274, 1
  store i8 %8275, i8* %13, align 1
  %8276 = xor i32 %8267, %8266
  %8277 = lshr i32 %8276, 4
  %8278 = trunc i32 %8277 to i8
  %8279 = and i8 %8278, 1
  store i8 %8279, i8* %14, align 1
  %8280 = icmp eq i32 %8267, 0
  %8281 = zext i1 %8280 to i8
  store i8 %8281, i8* %15, align 1
  %8282 = lshr i32 %8267, 31
  %8283 = trunc i32 %8282 to i8
  store i8 %8283, i8* %16, align 1
  %8284 = lshr i32 %8266, 31
  %8285 = xor i32 %8282, %8284
  %8286 = add nuw nsw i32 %8285, %8284
  %8287 = icmp eq i32 %8286, 2
  %8288 = zext i1 %8287 to i8
  store i8 %8288, i8* %17, align 1
  %8289 = sext i32 %8267 to i64
  store i64 %8289, i64* %RCX.i1715, align 8
  %8290 = add nsw i64 %8289, 12099168
  %8291 = add i64 %8261, 17
  store i64 %8291, i64* %3, align 8
  %8292 = inttoptr i64 %8290 to i8*
  %8293 = load i8, i8* %8292, align 1
  %8294 = zext i8 %8293 to i64
  store i64 %8294, i64* %RAX.i1404, align 8
  %8295 = zext i8 %8293 to i32
  %8296 = add nsw i32 %8295, -3
  %8297 = icmp ult i8 %8293, 3
  %8298 = zext i1 %8297 to i8
  store i8 %8298, i8* %12, align 1
  %8299 = and i32 %8296, 255
  %8300 = tail call i32 @llvm.ctpop.i32(i32 %8299)
  %8301 = trunc i32 %8300 to i8
  %8302 = and i8 %8301, 1
  %8303 = xor i8 %8302, 1
  store i8 %8303, i8* %13, align 1
  %8304 = xor i32 %8296, %8295
  %8305 = lshr i32 %8304, 4
  %8306 = trunc i32 %8305 to i8
  %8307 = and i8 %8306, 1
  store i8 %8307, i8* %14, align 1
  %8308 = icmp eq i32 %8296, 0
  %8309 = zext i1 %8308 to i8
  store i8 %8309, i8* %15, align 1
  %8310 = lshr i32 %8296, 31
  %8311 = trunc i32 %8310 to i8
  store i8 %8311, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v403 = select i1 %8308, i64 271, i64 26
  %8312 = add i64 %8261, %.v403
  store i64 %8312, i64* %3, align 8
  br i1 %8308, label %block_.L_476baa, label %block_476ab5

block_476ab5:                                     ; preds = %block_.L_476a9b
  %8313 = add i64 %8312, 3
  store i64 %8313, i64* %3, align 8
  %8314 = load i32, i32* %8265, align 4
  %8315 = add i32 %8314, -1
  %8316 = zext i32 %8315 to i64
  store i64 %8316, i64* %RAX.i1404, align 8
  %8317 = icmp eq i32 %8314, 0
  %8318 = zext i1 %8317 to i8
  store i8 %8318, i8* %12, align 1
  %8319 = and i32 %8315, 255
  %8320 = tail call i32 @llvm.ctpop.i32(i32 %8319)
  %8321 = trunc i32 %8320 to i8
  %8322 = and i8 %8321, 1
  %8323 = xor i8 %8322, 1
  store i8 %8323, i8* %13, align 1
  %8324 = xor i32 %8315, %8314
  %8325 = lshr i32 %8324, 4
  %8326 = trunc i32 %8325 to i8
  %8327 = and i8 %8326, 1
  store i8 %8327, i8* %14, align 1
  %8328 = icmp eq i32 %8315, 0
  %8329 = zext i1 %8328 to i8
  store i8 %8329, i8* %15, align 1
  %8330 = lshr i32 %8315, 31
  %8331 = trunc i32 %8330 to i8
  store i8 %8331, i8* %16, align 1
  %8332 = lshr i32 %8314, 31
  %8333 = xor i32 %8330, %8332
  %8334 = add nuw nsw i32 %8333, %8332
  %8335 = icmp eq i32 %8334, 2
  %8336 = zext i1 %8335 to i8
  store i8 %8336, i8* %17, align 1
  %8337 = sext i32 %8315 to i64
  store i64 %8337, i64* %RCX.i1715, align 8
  %8338 = add nsw i64 %8337, 12099168
  %8339 = add i64 %8312, 17
  store i64 %8339, i64* %3, align 8
  %8340 = inttoptr i64 %8338 to i8*
  %8341 = load i8, i8* %8340, align 1
  %8342 = zext i8 %8341 to i64
  store i64 %8342, i64* %RAX.i1404, align 8
  %8343 = zext i8 %8341 to i32
  store i8 0, i8* %12, align 1
  %8344 = tail call i32 @llvm.ctpop.i32(i32 %8343)
  %8345 = trunc i32 %8344 to i8
  %8346 = and i8 %8345, 1
  %8347 = xor i8 %8346, 1
  store i8 %8347, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %8348 = icmp eq i8 %8341, 0
  %8349 = zext i1 %8348 to i8
  store i8 %8349, i8* %15, align 1
  store i8 0, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v404 = select i1 %8348, i64 26, i64 245
  %8350 = add i64 %8312, %.v404
  store i64 %8350, i64* %3, align 8
  br i1 %8348, label %block_476acf, label %block_.L_476baa

block_476acf:                                     ; preds = %block_476ab5
  %8351 = add i64 %8350, 3
  store i64 %8351, i64* %3, align 8
  %8352 = load i32, i32* %8265, align 4
  %8353 = add i32 %8352, -1
  %8354 = icmp eq i32 %8353, 0
  %8355 = zext i1 %8354 to i8
  %8356 = lshr i32 %8353, 31
  %8357 = add i32 %8352, -2
  %8358 = zext i32 %8357 to i64
  store i64 %8358, i64* %RAX.i1404, align 8
  store i8 %8355, i8* %12, align 1
  %8359 = and i32 %8357, 255
  %8360 = tail call i32 @llvm.ctpop.i32(i32 %8359)
  %8361 = trunc i32 %8360 to i8
  %8362 = and i8 %8361, 1
  %8363 = xor i8 %8362, 1
  store i8 %8363, i8* %13, align 1
  %8364 = xor i32 %8357, %8353
  %8365 = lshr i32 %8364, 4
  %8366 = trunc i32 %8365 to i8
  %8367 = and i8 %8366, 1
  store i8 %8367, i8* %14, align 1
  %8368 = icmp eq i32 %8357, 0
  %8369 = zext i1 %8368 to i8
  store i8 %8369, i8* %15, align 1
  %8370 = lshr i32 %8357, 31
  %8371 = trunc i32 %8370 to i8
  store i8 %8371, i8* %16, align 1
  %8372 = xor i32 %8370, %8356
  %8373 = add nuw nsw i32 %8372, %8356
  %8374 = icmp eq i32 %8373, 2
  %8375 = zext i1 %8374 to i8
  store i8 %8375, i8* %17, align 1
  %8376 = sext i32 %8357 to i64
  store i64 %8376, i64* %RCX.i1715, align 8
  %8377 = add nsw i64 %8376, 12099168
  %8378 = add i64 %8350, 20
  store i64 %8378, i64* %3, align 8
  %8379 = inttoptr i64 %8377 to i8*
  %8380 = load i8, i8* %8379, align 1
  %8381 = zext i8 %8380 to i64
  store i64 %8381, i64* %RAX.i1404, align 8
  %8382 = zext i8 %8380 to i32
  %8383 = add nsw i32 %8382, -3
  %8384 = icmp ult i8 %8380, 3
  %8385 = zext i1 %8384 to i8
  store i8 %8385, i8* %12, align 1
  %8386 = and i32 %8383, 255
  %8387 = tail call i32 @llvm.ctpop.i32(i32 %8386)
  %8388 = trunc i32 %8387 to i8
  %8389 = and i8 %8388, 1
  %8390 = xor i8 %8389, 1
  store i8 %8390, i8* %13, align 1
  %8391 = xor i32 %8383, %8382
  %8392 = lshr i32 %8391, 4
  %8393 = trunc i32 %8392 to i8
  %8394 = and i8 %8393, 1
  store i8 %8394, i8* %14, align 1
  %8395 = icmp eq i32 %8383, 0
  %8396 = zext i1 %8395 to i8
  store i8 %8396, i8* %15, align 1
  %8397 = lshr i32 %8383, 31
  %8398 = trunc i32 %8397 to i8
  store i8 %8398, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v405 = select i1 %8395, i64 219, i64 29
  %8399 = add i64 %8350, %.v405
  store i64 %8399, i64* %3, align 8
  br i1 %8395, label %block_.L_476baa, label %block_476aec

block_476aec:                                     ; preds = %block_476acf
  %8400 = load i64, i64* %RBP.i, align 8
  %8401 = add i64 %8400, -48
  %8402 = add i64 %8399, 3
  store i64 %8402, i64* %3, align 8
  %8403 = inttoptr i64 %8401 to i32*
  %8404 = load i32, i32* %8403, align 4
  %8405 = add i32 %8404, -1
  %8406 = icmp eq i32 %8405, 0
  %8407 = zext i1 %8406 to i8
  %8408 = lshr i32 %8405, 31
  %8409 = add i32 %8404, -2
  %8410 = zext i32 %8409 to i64
  store i64 %8410, i64* %RAX.i1404, align 8
  store i8 %8407, i8* %12, align 1
  %8411 = and i32 %8409, 255
  %8412 = tail call i32 @llvm.ctpop.i32(i32 %8411)
  %8413 = trunc i32 %8412 to i8
  %8414 = and i8 %8413, 1
  %8415 = xor i8 %8414, 1
  store i8 %8415, i8* %13, align 1
  %8416 = xor i32 %8409, %8405
  %8417 = lshr i32 %8416, 4
  %8418 = trunc i32 %8417 to i8
  %8419 = and i8 %8418, 1
  store i8 %8419, i8* %14, align 1
  %8420 = icmp eq i32 %8409, 0
  %8421 = zext i1 %8420 to i8
  store i8 %8421, i8* %15, align 1
  %8422 = lshr i32 %8409, 31
  %8423 = trunc i32 %8422 to i8
  store i8 %8423, i8* %16, align 1
  %8424 = xor i32 %8422, %8408
  %8425 = add nuw nsw i32 %8424, %8408
  %8426 = icmp eq i32 %8425, 2
  %8427 = zext i1 %8426 to i8
  store i8 %8427, i8* %17, align 1
  %8428 = sext i32 %8409 to i64
  store i64 %8428, i64* %RCX.i1715, align 8
  %8429 = add nsw i64 %8428, 12099168
  %8430 = add i64 %8399, 20
  store i64 %8430, i64* %3, align 8
  %8431 = inttoptr i64 %8429 to i8*
  %8432 = load i8, i8* %8431, align 1
  %8433 = zext i8 %8432 to i64
  store i64 %8433, i64* %RAX.i1404, align 8
  %8434 = zext i8 %8432 to i32
  %8435 = add i64 %8400, -228
  %8436 = add i64 %8399, 26
  store i64 %8436, i64* %3, align 8
  %8437 = inttoptr i64 %8435 to i32*
  %8438 = load i32, i32* %8437, align 4
  %8439 = sub i32 %8434, %8438
  %8440 = icmp ult i32 %8434, %8438
  %8441 = zext i1 %8440 to i8
  store i8 %8441, i8* %12, align 1
  %8442 = and i32 %8439, 255
  %8443 = tail call i32 @llvm.ctpop.i32(i32 %8442)
  %8444 = trunc i32 %8443 to i8
  %8445 = and i8 %8444, 1
  %8446 = xor i8 %8445, 1
  store i8 %8446, i8* %13, align 1
  %8447 = xor i32 %8438, %8434
  %8448 = xor i32 %8447, %8439
  %8449 = lshr i32 %8448, 4
  %8450 = trunc i32 %8449 to i8
  %8451 = and i8 %8450, 1
  store i8 %8451, i8* %14, align 1
  %8452 = icmp eq i32 %8439, 0
  %8453 = zext i1 %8452 to i8
  store i8 %8453, i8* %15, align 1
  %8454 = lshr i32 %8439, 31
  %8455 = trunc i32 %8454 to i8
  store i8 %8455, i8* %16, align 1
  %8456 = lshr i32 %8438, 31
  %8457 = add nuw nsw i32 %8454, %8456
  %8458 = icmp eq i32 %8457, 2
  %8459 = zext i1 %8458 to i8
  store i8 %8459, i8* %17, align 1
  %.v406 = select i1 %8452, i64 32, i64 190
  %8460 = add i64 %8399, %.v406
  store i64 %8460, i64* %3, align 8
  br i1 %8452, label %block_476b0c, label %block_.L_476baa

block_476b0c:                                     ; preds = %block_476aec
  %8461 = load i64, i64* %RBP.i, align 8
  %8462 = add i64 %8461, -48
  %8463 = add i64 %8460, 3
  store i64 %8463, i64* %3, align 8
  %8464 = inttoptr i64 %8462 to i32*
  %8465 = load i32, i32* %8464, align 4
  %8466 = add i32 %8465, -1
  %8467 = icmp eq i32 %8466, 0
  %8468 = zext i1 %8467 to i8
  %8469 = lshr i32 %8466, 31
  %8470 = add i32 %8465, -2
  %8471 = zext i32 %8470 to i64
  store i64 %8471, i64* %RAX.i1404, align 8
  store i8 %8468, i8* %12, align 1
  %8472 = and i32 %8470, 255
  %8473 = tail call i32 @llvm.ctpop.i32(i32 %8472)
  %8474 = trunc i32 %8473 to i8
  %8475 = and i8 %8474, 1
  %8476 = xor i8 %8475, 1
  store i8 %8476, i8* %13, align 1
  %8477 = xor i32 %8470, %8466
  %8478 = lshr i32 %8477, 4
  %8479 = trunc i32 %8478 to i8
  %8480 = and i8 %8479, 1
  store i8 %8480, i8* %14, align 1
  %8481 = icmp eq i32 %8470, 0
  %8482 = zext i1 %8481 to i8
  store i8 %8482, i8* %15, align 1
  %8483 = lshr i32 %8470, 31
  %8484 = trunc i32 %8483 to i8
  store i8 %8484, i8* %16, align 1
  %8485 = xor i32 %8483, %8469
  %8486 = add nuw nsw i32 %8485, %8469
  %8487 = icmp eq i32 %8486, 2
  %8488 = zext i1 %8487 to i8
  store i8 %8488, i8* %17, align 1
  %8489 = sext i32 %8470 to i64
  store i64 %8489, i64* %RCX.i1715, align 8
  %8490 = add nsw i64 %8489, -1040
  %8491 = add i64 %8490, %8461
  %8492 = add i64 %8460, 20
  store i64 %8492, i64* %3, align 8
  %8493 = inttoptr i64 %8491 to i8*
  %8494 = load i8, i8* %8493, align 1
  %8495 = sext i8 %8494 to i64
  %8496 = and i64 %8495, 4294967295
  store i64 %8496, i64* %RAX.i1404, align 8
  %8497 = sext i8 %8494 to i32
  %8498 = add nsw i32 %8497, -1
  %8499 = icmp eq i8 %8494, 0
  %8500 = zext i1 %8499 to i8
  store i8 %8500, i8* %12, align 1
  %8501 = and i32 %8498, 255
  %8502 = tail call i32 @llvm.ctpop.i32(i32 %8501)
  %8503 = trunc i32 %8502 to i8
  %8504 = and i8 %8503, 1
  %8505 = xor i8 %8504, 1
  store i8 %8505, i8* %13, align 1
  %8506 = xor i32 %8498, %8497
  %8507 = lshr i32 %8506, 4
  %8508 = trunc i32 %8507 to i8
  %8509 = and i8 %8508, 1
  store i8 %8509, i8* %14, align 1
  %8510 = icmp eq i32 %8498, 0
  %8511 = zext i1 %8510 to i8
  store i8 %8511, i8* %15, align 1
  %8512 = lshr i32 %8498, 31
  %8513 = trunc i32 %8512 to i8
  store i8 %8513, i8* %16, align 1
  %8514 = lshr i32 %8497, 31
  %8515 = xor i32 %8512, %8514
  %8516 = add nuw nsw i32 %8515, %8514
  %8517 = icmp eq i32 %8516, 2
  %8518 = zext i1 %8517 to i8
  store i8 %8518, i8* %17, align 1
  %.v407 = select i1 %8510, i64 158, i64 29
  %8519 = add i64 %8460, %.v407
  store i64 %8519, i64* %3, align 8
  br i1 %8510, label %block_.L_476baa, label %block_476b29

block_476b29:                                     ; preds = %block_476b0c
  %8520 = load i64, i64* %RBP.i, align 8
  %8521 = add i64 %8520, -48
  %8522 = add i64 %8519, 3
  store i64 %8522, i64* %3, align 8
  %8523 = inttoptr i64 %8521 to i32*
  %8524 = load i32, i32* %8523, align 4
  %8525 = add i32 %8524, -1
  %8526 = lshr i32 %8525, 31
  %8527 = add i32 %8524, -21
  %8528 = zext i32 %8527 to i64
  store i64 %8528, i64* %RAX.i1404, align 8
  %8529 = icmp ult i32 %8525, 20
  %8530 = zext i1 %8529 to i8
  store i8 %8530, i8* %12, align 1
  %8531 = and i32 %8527, 255
  %8532 = tail call i32 @llvm.ctpop.i32(i32 %8531)
  %8533 = trunc i32 %8532 to i8
  %8534 = and i8 %8533, 1
  %8535 = xor i8 %8534, 1
  store i8 %8535, i8* %13, align 1
  %8536 = xor i32 %8525, 16
  %8537 = xor i32 %8536, %8527
  %8538 = lshr i32 %8537, 4
  %8539 = trunc i32 %8538 to i8
  %8540 = and i8 %8539, 1
  store i8 %8540, i8* %14, align 1
  %8541 = icmp eq i32 %8527, 0
  %8542 = zext i1 %8541 to i8
  store i8 %8542, i8* %15, align 1
  %8543 = lshr i32 %8527, 31
  %8544 = trunc i32 %8543 to i8
  store i8 %8544, i8* %16, align 1
  %8545 = xor i32 %8543, %8526
  %8546 = add nuw nsw i32 %8545, %8526
  %8547 = icmp eq i32 %8546, 2
  %8548 = zext i1 %8547 to i8
  store i8 %8548, i8* %17, align 1
  %8549 = sext i32 %8527 to i64
  store i64 %8549, i64* %RCX.i1715, align 8
  %8550 = add nsw i64 %8549, 12099168
  %8551 = add i64 %8519, 20
  store i64 %8551, i64* %3, align 8
  %8552 = inttoptr i64 %8550 to i8*
  %8553 = load i8, i8* %8552, align 1
  %8554 = zext i8 %8553 to i64
  store i64 %8554, i64* %RAX.i1404, align 8
  %8555 = zext i8 %8553 to i32
  %8556 = add nsw i32 %8555, -3
  %8557 = icmp ult i8 %8553, 3
  %8558 = zext i1 %8557 to i8
  store i8 %8558, i8* %12, align 1
  %8559 = and i32 %8556, 255
  %8560 = tail call i32 @llvm.ctpop.i32(i32 %8559)
  %8561 = trunc i32 %8560 to i8
  %8562 = and i8 %8561, 1
  %8563 = xor i8 %8562, 1
  store i8 %8563, i8* %13, align 1
  %8564 = xor i32 %8556, %8555
  %8565 = lshr i32 %8564, 4
  %8566 = trunc i32 %8565 to i8
  %8567 = and i8 %8566, 1
  store i8 %8567, i8* %14, align 1
  %8568 = icmp eq i32 %8556, 0
  %8569 = zext i1 %8568 to i8
  store i8 %8569, i8* %15, align 1
  %8570 = lshr i32 %8556, 31
  %8571 = trunc i32 %8570 to i8
  store i8 %8571, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v408 = select i1 %8568, i64 129, i64 29
  %8572 = add i64 %8519, %.v408
  store i64 %8572, i64* %3, align 8
  br i1 %8568, label %block_.L_476baa, label %block_476b46

block_476b46:                                     ; preds = %block_476b29
  %8573 = load i64, i64* %RBP.i, align 8
  %8574 = add i64 %8573, -48
  %8575 = add i64 %8572, 3
  store i64 %8575, i64* %3, align 8
  %8576 = inttoptr i64 %8574 to i32*
  %8577 = load i32, i32* %8576, align 4
  %8578 = add i32 %8577, -1
  %8579 = lshr i32 %8578, 31
  %8580 = add i32 %8577, -21
  %8581 = zext i32 %8580 to i64
  store i64 %8581, i64* %RAX.i1404, align 8
  %8582 = icmp ult i32 %8578, 20
  %8583 = zext i1 %8582 to i8
  store i8 %8583, i8* %12, align 1
  %8584 = and i32 %8580, 255
  %8585 = tail call i32 @llvm.ctpop.i32(i32 %8584)
  %8586 = trunc i32 %8585 to i8
  %8587 = and i8 %8586, 1
  %8588 = xor i8 %8587, 1
  store i8 %8588, i8* %13, align 1
  %8589 = xor i32 %8578, 16
  %8590 = xor i32 %8589, %8580
  %8591 = lshr i32 %8590, 4
  %8592 = trunc i32 %8591 to i8
  %8593 = and i8 %8592, 1
  store i8 %8593, i8* %14, align 1
  %8594 = icmp eq i32 %8580, 0
  %8595 = zext i1 %8594 to i8
  store i8 %8595, i8* %15, align 1
  %8596 = lshr i32 %8580, 31
  %8597 = trunc i32 %8596 to i8
  store i8 %8597, i8* %16, align 1
  %8598 = xor i32 %8596, %8579
  %8599 = add nuw nsw i32 %8598, %8579
  %8600 = icmp eq i32 %8599, 2
  %8601 = zext i1 %8600 to i8
  store i8 %8601, i8* %17, align 1
  %8602 = sext i32 %8580 to i64
  store i64 %8602, i64* %RCX.i1715, align 8
  %8603 = add nsw i64 %8602, 12099168
  %8604 = add i64 %8572, 20
  store i64 %8604, i64* %3, align 8
  %8605 = inttoptr i64 %8603 to i8*
  %8606 = load i8, i8* %8605, align 1
  %8607 = zext i8 %8606 to i64
  store i64 %8607, i64* %RAX.i1404, align 8
  %8608 = zext i8 %8606 to i32
  %8609 = add i64 %8573, -232
  %8610 = add i64 %8572, 26
  store i64 %8610, i64* %3, align 8
  %8611 = inttoptr i64 %8609 to i32*
  %8612 = load i32, i32* %8611, align 4
  %8613 = sub i32 %8608, %8612
  %8614 = icmp ult i32 %8608, %8612
  %8615 = zext i1 %8614 to i8
  store i8 %8615, i8* %12, align 1
  %8616 = and i32 %8613, 255
  %8617 = tail call i32 @llvm.ctpop.i32(i32 %8616)
  %8618 = trunc i32 %8617 to i8
  %8619 = and i8 %8618, 1
  %8620 = xor i8 %8619, 1
  store i8 %8620, i8* %13, align 1
  %8621 = xor i32 %8612, %8608
  %8622 = xor i32 %8621, %8613
  %8623 = lshr i32 %8622, 4
  %8624 = trunc i32 %8623 to i8
  %8625 = and i8 %8624, 1
  store i8 %8625, i8* %14, align 1
  %8626 = icmp eq i32 %8613, 0
  %8627 = zext i1 %8626 to i8
  store i8 %8627, i8* %15, align 1
  %8628 = lshr i32 %8613, 31
  %8629 = trunc i32 %8628 to i8
  store i8 %8629, i8* %16, align 1
  %8630 = lshr i32 %8612, 31
  %8631 = add nuw nsw i32 %8628, %8630
  %8632 = icmp eq i32 %8631, 2
  %8633 = zext i1 %8632 to i8
  store i8 %8633, i8* %17, align 1
  %.v409 = select i1 %8626, i64 100, i64 32
  %8634 = add i64 %8572, %.v409
  store i64 %8634, i64* %3, align 8
  br i1 %8626, label %block_.L_476baa, label %block_476b66

block_476b66:                                     ; preds = %block_476b46
  %8635 = load i64, i64* %RBP.i, align 8
  %8636 = add i64 %8635, -48
  %8637 = add i64 %8634, 3
  store i64 %8637, i64* %3, align 8
  %8638 = inttoptr i64 %8636 to i32*
  %8639 = load i32, i32* %8638, align 4
  %8640 = add i32 %8639, -1
  %8641 = lshr i32 %8640, 31
  %8642 = add i32 %8639, 19
  %8643 = zext i32 %8642 to i64
  store i64 %8643, i64* %RAX.i1404, align 8
  %8644 = icmp ugt i32 %8640, -21
  %8645 = zext i1 %8644 to i8
  store i8 %8645, i8* %12, align 1
  %8646 = and i32 %8642, 255
  %8647 = tail call i32 @llvm.ctpop.i32(i32 %8646)
  %8648 = trunc i32 %8647 to i8
  %8649 = and i8 %8648, 1
  %8650 = xor i8 %8649, 1
  store i8 %8650, i8* %13, align 1
  %8651 = xor i32 %8640, 16
  %8652 = xor i32 %8651, %8642
  %8653 = lshr i32 %8652, 4
  %8654 = trunc i32 %8653 to i8
  %8655 = and i8 %8654, 1
  store i8 %8655, i8* %14, align 1
  %8656 = icmp eq i32 %8642, 0
  %8657 = zext i1 %8656 to i8
  store i8 %8657, i8* %15, align 1
  %8658 = lshr i32 %8642, 31
  %8659 = trunc i32 %8658 to i8
  store i8 %8659, i8* %16, align 1
  %8660 = xor i32 %8658, %8641
  %8661 = add nuw nsw i32 %8660, %8658
  %8662 = icmp eq i32 %8661, 2
  %8663 = zext i1 %8662 to i8
  store i8 %8663, i8* %17, align 1
  %8664 = sext i32 %8642 to i64
  store i64 %8664, i64* %RCX.i1715, align 8
  %8665 = add nsw i64 %8664, 12099168
  %8666 = add i64 %8634, 20
  store i64 %8666, i64* %3, align 8
  %8667 = inttoptr i64 %8665 to i8*
  %8668 = load i8, i8* %8667, align 1
  %8669 = zext i8 %8668 to i64
  store i64 %8669, i64* %RAX.i1404, align 8
  %8670 = zext i8 %8668 to i32
  %8671 = add nsw i32 %8670, -3
  %8672 = icmp ult i8 %8668, 3
  %8673 = zext i1 %8672 to i8
  store i8 %8673, i8* %12, align 1
  %8674 = and i32 %8671, 255
  %8675 = tail call i32 @llvm.ctpop.i32(i32 %8674)
  %8676 = trunc i32 %8675 to i8
  %8677 = and i8 %8676, 1
  %8678 = xor i8 %8677, 1
  store i8 %8678, i8* %13, align 1
  %8679 = xor i32 %8671, %8670
  %8680 = lshr i32 %8679, 4
  %8681 = trunc i32 %8680 to i8
  %8682 = and i8 %8681, 1
  store i8 %8682, i8* %14, align 1
  %8683 = icmp eq i32 %8671, 0
  %8684 = zext i1 %8683 to i8
  store i8 %8684, i8* %15, align 1
  %8685 = lshr i32 %8671, 31
  %8686 = trunc i32 %8685 to i8
  store i8 %8686, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v410 = select i1 %8683, i64 68, i64 29
  %8687 = add i64 %8634, %.v410
  store i64 %8687, i64* %3, align 8
  br i1 %8683, label %block_.L_476baa, label %block_476b83

block_476b83:                                     ; preds = %block_476b66
  %8688 = load i64, i64* %RBP.i, align 8
  %8689 = add i64 %8688, -48
  %8690 = add i64 %8687, 3
  store i64 %8690, i64* %3, align 8
  %8691 = inttoptr i64 %8689 to i32*
  %8692 = load i32, i32* %8691, align 4
  %8693 = add i32 %8692, -1
  %8694 = lshr i32 %8693, 31
  %8695 = add i32 %8692, 19
  %8696 = zext i32 %8695 to i64
  store i64 %8696, i64* %RAX.i1404, align 8
  %8697 = icmp ugt i32 %8693, -21
  %8698 = zext i1 %8697 to i8
  store i8 %8698, i8* %12, align 1
  %8699 = and i32 %8695, 255
  %8700 = tail call i32 @llvm.ctpop.i32(i32 %8699)
  %8701 = trunc i32 %8700 to i8
  %8702 = and i8 %8701, 1
  %8703 = xor i8 %8702, 1
  store i8 %8703, i8* %13, align 1
  %8704 = xor i32 %8693, 16
  %8705 = xor i32 %8704, %8695
  %8706 = lshr i32 %8705, 4
  %8707 = trunc i32 %8706 to i8
  %8708 = and i8 %8707, 1
  store i8 %8708, i8* %14, align 1
  %8709 = icmp eq i32 %8695, 0
  %8710 = zext i1 %8709 to i8
  store i8 %8710, i8* %15, align 1
  %8711 = lshr i32 %8695, 31
  %8712 = trunc i32 %8711 to i8
  store i8 %8712, i8* %16, align 1
  %8713 = xor i32 %8711, %8694
  %8714 = add nuw nsw i32 %8713, %8711
  %8715 = icmp eq i32 %8714, 2
  %8716 = zext i1 %8715 to i8
  store i8 %8716, i8* %17, align 1
  %8717 = sext i32 %8695 to i64
  store i64 %8717, i64* %RCX.i1715, align 8
  %8718 = add nsw i64 %8717, 12099168
  %8719 = add i64 %8687, 20
  store i64 %8719, i64* %3, align 8
  %8720 = inttoptr i64 %8718 to i8*
  %8721 = load i8, i8* %8720, align 1
  %8722 = zext i8 %8721 to i64
  store i64 %8722, i64* %RAX.i1404, align 8
  %8723 = zext i8 %8721 to i32
  %8724 = add i64 %8688, -232
  %8725 = add i64 %8687, 26
  store i64 %8725, i64* %3, align 8
  %8726 = inttoptr i64 %8724 to i32*
  %8727 = load i32, i32* %8726, align 4
  %8728 = sub i32 %8723, %8727
  %8729 = icmp ult i32 %8723, %8727
  %8730 = zext i1 %8729 to i8
  store i8 %8730, i8* %12, align 1
  %8731 = and i32 %8728, 255
  %8732 = tail call i32 @llvm.ctpop.i32(i32 %8731)
  %8733 = trunc i32 %8732 to i8
  %8734 = and i8 %8733, 1
  %8735 = xor i8 %8734, 1
  store i8 %8735, i8* %13, align 1
  %8736 = xor i32 %8727, %8723
  %8737 = xor i32 %8736, %8728
  %8738 = lshr i32 %8737, 4
  %8739 = trunc i32 %8738 to i8
  %8740 = and i8 %8739, 1
  store i8 %8740, i8* %14, align 1
  %8741 = icmp eq i32 %8728, 0
  %8742 = zext i1 %8741 to i8
  store i8 %8742, i8* %15, align 1
  %8743 = lshr i32 %8728, 31
  %8744 = trunc i32 %8743 to i8
  store i8 %8744, i8* %16, align 1
  %8745 = lshr i32 %8727, 31
  %8746 = add nuw nsw i32 %8743, %8745
  %8747 = icmp eq i32 %8746, 2
  %8748 = zext i1 %8747 to i8
  store i8 %8748, i8* %17, align 1
  %.v411 = select i1 %8741, i64 39, i64 32
  %8749 = add i64 %8687, %.v411
  store i64 %8749, i64* %3, align 8
  br i1 %8741, label %block_.L_476baa, label %block_.L_476ba3

block_.L_476ba3:                                  ; preds = %block_476a7b, %block_476973, %block_47686b, %block_476b83
  %8750 = phi i64 [ %8749, %block_476b83 ], [ %8260, %block_476a7b ], [ %7766, %block_476973 ], [ %7274, %block_47686b ]
  %8751 = load i64, i64* %RBP.i, align 8
  %8752 = add i64 %8751, -52
  %8753 = add i64 %8750, 7
  store i64 %8753, i64* %3, align 8
  %8754 = inttoptr i64 %8752 to i32*
  store i32 0, i32* %8754, align 4
  %.pre257 = load i64, i64* %3, align 8
  br label %block_.L_476baa

block_.L_476baa:                                  ; preds = %block_476aec, %block_476ab5, %block_.L_476ba3, %block_476b83, %block_476b66, %block_476b46, %block_476b29, %block_476b0c, %block_476acf, %block_.L_476a9b
  %8755 = phi i64 [ %.pre257, %block_.L_476ba3 ], [ %8749, %block_476b83 ], [ %8687, %block_476b66 ], [ %8634, %block_476b46 ], [ %8572, %block_476b29 ], [ %8519, %block_476b0c ], [ %8460, %block_476aec ], [ %8399, %block_476acf ], [ %8350, %block_476ab5 ], [ %8312, %block_.L_476a9b ]
  %8756 = add i64 %8755, 5
  store i64 %8756, i64* %3, align 8
  %.pre258 = load i64, i64* %RBP.i, align 8
  br label %block_.L_476baf

block_.L_476baf:                                  ; preds = %block_.L_476baa, %block_47676e, %block_.L_476759
  %8757 = phi i64 [ %.pre258, %block_.L_476baa ], [ %6724, %block_47676e ], [ %6724, %block_.L_476759 ]
  %8758 = phi i64 [ %8756, %block_.L_476baa ], [ %6786, %block_47676e ], [ %6765, %block_.L_476759 ]
  %8759 = add i64 %8757, -48
  %8760 = add i64 %8758, 8
  store i64 %8760, i64* %3, align 8
  %8761 = inttoptr i64 %8759 to i32*
  %8762 = load i32, i32* %8761, align 4
  %8763 = add i32 %8762, 1
  %8764 = zext i32 %8763 to i64
  store i64 %8764, i64* %RAX.i1404, align 8
  %8765 = icmp eq i32 %8762, -1
  %8766 = icmp eq i32 %8763, 0
  %8767 = or i1 %8765, %8766
  %8768 = zext i1 %8767 to i8
  store i8 %8768, i8* %12, align 1
  %8769 = and i32 %8763, 255
  %8770 = tail call i32 @llvm.ctpop.i32(i32 %8769)
  %8771 = trunc i32 %8770 to i8
  %8772 = and i8 %8771, 1
  %8773 = xor i8 %8772, 1
  store i8 %8773, i8* %13, align 1
  %8774 = xor i32 %8763, %8762
  %8775 = lshr i32 %8774, 4
  %8776 = trunc i32 %8775 to i8
  %8777 = and i8 %8776, 1
  store i8 %8777, i8* %14, align 1
  %8778 = zext i1 %8766 to i8
  store i8 %8778, i8* %15, align 1
  %8779 = lshr i32 %8763, 31
  %8780 = trunc i32 %8779 to i8
  store i8 %8780, i8* %16, align 1
  %8781 = lshr i32 %8762, 31
  %8782 = xor i32 %8779, %8781
  %8783 = add nuw nsw i32 %8782, %8779
  %8784 = icmp eq i32 %8783, 2
  %8785 = zext i1 %8784 to i8
  store i8 %8785, i8* %17, align 1
  %8786 = add i64 %8758, 14
  store i64 %8786, i64* %3, align 8
  store i32 %8763, i32* %8761, align 4
  %8787 = load i64, i64* %3, align 8
  %8788 = add i64 %8787, -1179
  store i64 %8788, i64* %3, align 8
  br label %block_.L_476722

block_.L_476bc7:                                  ; preds = %block_476754, %block_.L_476711
  %8789 = phi i64 [ %6737, %block_476754 ], [ %6660, %block_.L_476711 ]
  %8790 = phi i64 [ %6724, %block_476754 ], [ %6267, %block_.L_476711 ]
  %8791 = add i64 %8790, -16
  %8792 = add i64 %8789, 4
  store i64 %8792, i64* %3, align 8
  %8793 = inttoptr i64 %8791 to i32*
  %8794 = load i32, i32* %8793, align 4
  %8795 = add i32 %8794, -1
  %8796 = icmp eq i32 %8794, 0
  %8797 = zext i1 %8796 to i8
  store i8 %8797, i8* %12, align 1
  %8798 = and i32 %8795, 255
  %8799 = tail call i32 @llvm.ctpop.i32(i32 %8798)
  %8800 = trunc i32 %8799 to i8
  %8801 = and i8 %8800, 1
  %8802 = xor i8 %8801, 1
  store i8 %8802, i8* %13, align 1
  %8803 = xor i32 %8795, %8794
  %8804 = lshr i32 %8803, 4
  %8805 = trunc i32 %8804 to i8
  %8806 = and i8 %8805, 1
  store i8 %8806, i8* %14, align 1
  %8807 = icmp eq i32 %8795, 0
  %8808 = zext i1 %8807 to i8
  store i8 %8808, i8* %15, align 1
  %8809 = lshr i32 %8795, 31
  %8810 = trunc i32 %8809 to i8
  store i8 %8810, i8* %16, align 1
  %8811 = lshr i32 %8794, 31
  %8812 = xor i32 %8809, %8811
  %8813 = add nuw nsw i32 %8812, %8811
  %8814 = icmp eq i32 %8813, 2
  %8815 = zext i1 %8814 to i8
  store i8 %8815, i8* %17, align 1
  %.v384 = select i1 %8807, i64 30, i64 10
  %8816 = add i64 %8789, %.v384
  store i64 %8816, i64* %3, align 8
  br i1 %8807, label %block_.L_476be5, label %block_476bd1

block_476bd1:                                     ; preds = %block_.L_476bc7
  %8817 = add i64 %8816, 4
  store i64 %8817, i64* %3, align 8
  %8818 = load i32, i32* %8793, align 4
  %8819 = add i32 %8818, -2
  %8820 = icmp ult i32 %8818, 2
  %8821 = zext i1 %8820 to i8
  store i8 %8821, i8* %12, align 1
  %8822 = and i32 %8819, 255
  %8823 = tail call i32 @llvm.ctpop.i32(i32 %8822)
  %8824 = trunc i32 %8823 to i8
  %8825 = and i8 %8824, 1
  %8826 = xor i8 %8825, 1
  store i8 %8826, i8* %13, align 1
  %8827 = xor i32 %8819, %8818
  %8828 = lshr i32 %8827, 4
  %8829 = trunc i32 %8828 to i8
  %8830 = and i8 %8829, 1
  store i8 %8830, i8* %14, align 1
  %8831 = icmp eq i32 %8819, 0
  %8832 = zext i1 %8831 to i8
  store i8 %8832, i8* %15, align 1
  %8833 = lshr i32 %8819, 31
  %8834 = trunc i32 %8833 to i8
  store i8 %8834, i8* %16, align 1
  %8835 = lshr i32 %8818, 31
  %8836 = xor i32 %8833, %8835
  %8837 = add nuw nsw i32 %8836, %8835
  %8838 = icmp eq i32 %8837, 2
  %8839 = zext i1 %8838 to i8
  store i8 %8839, i8* %17, align 1
  %.v385 = select i1 %8831, i64 10, i64 531
  %8840 = add i64 %8816, %.v385
  store i64 %8840, i64* %3, align 8
  br i1 %8831, label %block_476bdb, label %block_.L_476de4

block_476bdb:                                     ; preds = %block_476bd1
  %8841 = add i64 %8790, -52
  %8842 = add i64 %8840, 4
  store i64 %8842, i64* %3, align 8
  %8843 = inttoptr i64 %8841 to i32*
  %8844 = load i32, i32* %8843, align 4
  store i8 0, i8* %12, align 1
  %8845 = and i32 %8844, 255
  %8846 = tail call i32 @llvm.ctpop.i32(i32 %8845)
  %8847 = trunc i32 %8846 to i8
  %8848 = and i8 %8847, 1
  %8849 = xor i8 %8848, 1
  store i8 %8849, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %8850 = icmp eq i32 %8844, 0
  %8851 = zext i1 %8850 to i8
  store i8 %8851, i8* %15, align 1
  %8852 = lshr i32 %8844, 31
  %8853 = trunc i32 %8852 to i8
  store i8 %8853, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v393 = select i1 %8850, i64 521, i64 10
  %8854 = add i64 %8840, %.v393
  store i64 %8854, i64* %3, align 8
  br i1 %8850, label %block_.L_476de4, label %block_.L_476be5

block_.L_476be5:                                  ; preds = %block_476bdb, %block_.L_476bc7
  %8855 = phi i64 [ %8854, %block_476bdb ], [ %8816, %block_.L_476bc7 ]
  %8856 = add i64 %8855, -8821
  %8857 = add i64 %8855, 5
  %8858 = load i64, i64* %6, align 8
  %8859 = add i64 %8858, -8
  %8860 = inttoptr i64 %8859 to i64*
  store i64 %8857, i64* %8860, align 8
  store i64 %8859, i64* %6, align 8
  store i64 %8856, i64* %3, align 8
  %call2_476be5 = tail call %struct.Memory* @sub_474970.start_draw_board(%struct.State* nonnull %0, i64 %8856, %struct.Memory* %MEMORY.34)
  %8861 = load i64, i64* %RBP.i, align 8
  %8862 = add i64 %8861, -36
  %8863 = load i64, i64* %3, align 8
  %8864 = add i64 %8863, 7
  store i64 %8864, i64* %3, align 8
  %8865 = inttoptr i64 %8862 to i32*
  store i32 0, i32* %8865, align 4
  %.pre259 = load i64, i64* %3, align 8
  br label %block_.L_476bf1

block_.L_476bf1:                                  ; preds = %block_.L_476dcc, %block_.L_476be5
  %8866 = phi i64 [ %9638, %block_.L_476dcc ], [ %.pre259, %block_.L_476be5 ]
  %8867 = load i64, i64* %RBP.i, align 8
  %8868 = add i64 %8867, -36
  %8869 = add i64 %8866, 3
  store i64 %8869, i64* %3, align 8
  %8870 = inttoptr i64 %8868 to i32*
  %8871 = load i32, i32* %8870, align 4
  %8872 = zext i32 %8871 to i64
  store i64 %8872, i64* %RAX.i1404, align 8
  %8873 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %8874 = sub i32 %8871, %8873
  %8875 = icmp ult i32 %8871, %8873
  %8876 = zext i1 %8875 to i8
  store i8 %8876, i8* %12, align 1
  %8877 = and i32 %8874, 255
  %8878 = tail call i32 @llvm.ctpop.i32(i32 %8877)
  %8879 = trunc i32 %8878 to i8
  %8880 = and i8 %8879, 1
  %8881 = xor i8 %8880, 1
  store i8 %8881, i8* %13, align 1
  %8882 = xor i32 %8873, %8871
  %8883 = xor i32 %8882, %8874
  %8884 = lshr i32 %8883, 4
  %8885 = trunc i32 %8884 to i8
  %8886 = and i8 %8885, 1
  store i8 %8886, i8* %14, align 1
  %8887 = icmp eq i32 %8874, 0
  %8888 = zext i1 %8887 to i8
  store i8 %8888, i8* %15, align 1
  %8889 = lshr i32 %8874, 31
  %8890 = trunc i32 %8889 to i8
  store i8 %8890, i8* %16, align 1
  %8891 = lshr i32 %8871, 31
  %8892 = lshr i32 %8873, 31
  %8893 = xor i32 %8892, %8891
  %8894 = xor i32 %8889, %8891
  %8895 = add nuw nsw i32 %8894, %8893
  %8896 = icmp eq i32 %8895, 2
  %8897 = zext i1 %8896 to i8
  store i8 %8897, i8* %17, align 1
  %8898 = icmp ne i8 %8890, 0
  %8899 = xor i1 %8898, %8896
  %.v394 = select i1 %8899, i64 16, i64 494
  %8900 = add i64 %8866, %.v394
  store i64 %8900, i64* %3, align 8
  br i1 %8899, label %block_476c01, label %block_.L_476ddf

block_476c01:                                     ; preds = %block_.L_476bf1
  %8901 = add i64 %8867, -40
  %8902 = add i64 %8900, 7
  store i64 %8902, i64* %3, align 8
  %8903 = inttoptr i64 %8901 to i32*
  store i32 0, i32* %8903, align 4
  %.pre267 = load i64, i64* %3, align 8
  br label %block_.L_476c08

block_.L_476c08:                                  ; preds = %block_.L_476da7, %block_476c01
  %8904 = phi i64 [ %9609, %block_.L_476da7 ], [ %.pre267, %block_476c01 ]
  %8905 = load i64, i64* %RBP.i, align 8
  %8906 = add i64 %8905, -40
  %8907 = add i64 %8904, 3
  store i64 %8907, i64* %3, align 8
  %8908 = inttoptr i64 %8906 to i32*
  %8909 = load i32, i32* %8908, align 4
  %8910 = zext i32 %8909 to i64
  store i64 %8910, i64* %RAX.i1404, align 8
  %8911 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %8912 = sub i32 %8909, %8911
  %8913 = icmp ult i32 %8909, %8911
  %8914 = zext i1 %8913 to i8
  store i8 %8914, i8* %12, align 1
  %8915 = and i32 %8912, 255
  %8916 = tail call i32 @llvm.ctpop.i32(i32 %8915)
  %8917 = trunc i32 %8916 to i8
  %8918 = and i8 %8917, 1
  %8919 = xor i8 %8918, 1
  store i8 %8919, i8* %13, align 1
  %8920 = xor i32 %8911, %8909
  %8921 = xor i32 %8920, %8912
  %8922 = lshr i32 %8921, 4
  %8923 = trunc i32 %8922 to i8
  %8924 = and i8 %8923, 1
  store i8 %8924, i8* %14, align 1
  %8925 = icmp eq i32 %8912, 0
  %8926 = zext i1 %8925 to i8
  store i8 %8926, i8* %15, align 1
  %8927 = lshr i32 %8912, 31
  %8928 = trunc i32 %8927 to i8
  store i8 %8928, i8* %16, align 1
  %8929 = lshr i32 %8909, 31
  %8930 = lshr i32 %8911, 31
  %8931 = xor i32 %8930, %8929
  %8932 = xor i32 %8927, %8929
  %8933 = add nuw nsw i32 %8932, %8931
  %8934 = icmp eq i32 %8933, 2
  %8935 = zext i1 %8934 to i8
  store i8 %8935, i8* %17, align 1
  %8936 = icmp ne i8 %8928, 0
  %8937 = xor i1 %8936, %8934
  %.v351 = select i1 %8937, i64 16, i64 452
  %8938 = add i64 %8904, %.v351
  store i64 %8938, i64* %3, align 8
  %8939 = add i64 %8905, -36
  br i1 %8937, label %block_476c18, label %block_.L_476dcc

block_476c18:                                     ; preds = %block_.L_476c08
  %8940 = add i64 %8938, 4
  store i64 %8940, i64* %3, align 8
  %8941 = inttoptr i64 %8939 to i32*
  %8942 = load i32, i32* %8941, align 4
  %8943 = mul i32 %8942, 20
  %8944 = add i32 %8943, 21
  %8945 = zext i32 %8944 to i64
  store i64 %8945, i64* %RAX.i1404, align 8
  %8946 = icmp ugt i32 %8943, -22
  %8947 = zext i1 %8946 to i8
  store i8 %8947, i8* %12, align 1
  %8948 = and i32 %8944, 253
  %8949 = tail call i32 @llvm.ctpop.i32(i32 %8948)
  %8950 = trunc i32 %8949 to i8
  %8951 = and i8 %8950, 1
  %8952 = xor i8 %8951, 1
  store i8 %8952, i8* %13, align 1
  %8953 = xor i32 %8943, 16
  %8954 = xor i32 %8953, %8944
  %8955 = lshr i32 %8954, 4
  %8956 = trunc i32 %8955 to i8
  %8957 = and i8 %8956, 1
  store i8 %8957, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %8958 = lshr i32 %8944, 31
  %8959 = trunc i32 %8958 to i8
  store i8 %8959, i8* %16, align 1
  %8960 = lshr i32 %8943, 31
  %8961 = xor i32 %8958, %8960
  %8962 = add nuw nsw i32 %8961, %8958
  %8963 = icmp eq i32 %8962, 2
  %8964 = zext i1 %8963 to i8
  store i8 %8964, i8* %17, align 1
  %8965 = add i64 %8938, 10
  store i64 %8965, i64* %3, align 8
  %8966 = load i32, i32* %8908, align 4
  %8967 = add i32 %8966, %8944
  %8968 = zext i32 %8967 to i64
  store i64 %8968, i64* %RAX.i1404, align 8
  %8969 = icmp ult i32 %8967, %8944
  %8970 = icmp ult i32 %8967, %8966
  %8971 = or i1 %8969, %8970
  %8972 = zext i1 %8971 to i8
  store i8 %8972, i8* %12, align 1
  %8973 = and i32 %8967, 255
  %8974 = tail call i32 @llvm.ctpop.i32(i32 %8973)
  %8975 = trunc i32 %8974 to i8
  %8976 = and i8 %8975, 1
  %8977 = xor i8 %8976, 1
  store i8 %8977, i8* %13, align 1
  %8978 = xor i32 %8966, %8944
  %8979 = xor i32 %8978, %8967
  %8980 = lshr i32 %8979, 4
  %8981 = trunc i32 %8980 to i8
  %8982 = and i8 %8981, 1
  store i8 %8982, i8* %14, align 1
  %8983 = icmp eq i32 %8967, 0
  %8984 = zext i1 %8983 to i8
  store i8 %8984, i8* %15, align 1
  %8985 = lshr i32 %8967, 31
  %8986 = trunc i32 %8985 to i8
  store i8 %8986, i8* %16, align 1
  %8987 = lshr i32 %8966, 31
  %8988 = xor i32 %8985, %8958
  %8989 = xor i32 %8985, %8987
  %8990 = add nuw nsw i32 %8988, %8989
  %8991 = icmp eq i32 %8990, 2
  %8992 = zext i1 %8991 to i8
  store i8 %8992, i8* %17, align 1
  %8993 = sext i32 %8967 to i64
  store i64 %8993, i64* %RCX.i1715, align 8
  %8994 = add nsw i64 %8993, -640
  %8995 = add i64 %8994, %8905
  %8996 = add i64 %8938, 21
  store i64 %8996, i64* %3, align 8
  %8997 = inttoptr i64 %8995 to i8*
  %8998 = load i8, i8* %8997, align 1
  store i8 0, i8* %12, align 1
  %8999 = zext i8 %8998 to i32
  %9000 = tail call i32 @llvm.ctpop.i32(i32 %8999)
  %9001 = trunc i32 %9000 to i8
  %9002 = and i8 %9001, 1
  %9003 = xor i8 %9002, 1
  store i8 %9003, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9004 = icmp eq i8 %8998, 0
  %9005 = zext i1 %9004 to i8
  store i8 %9005, i8* %15, align 1
  %9006 = lshr i8 %8998, 7
  store i8 %9006, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v357 = select i1 %9004, i64 137, i64 27
  %9007 = add i64 %8938, %.v357
  %9008 = load i64, i64* %RBP.i, align 8
  %9009 = add i64 %9008, -36
  %9010 = add i64 %9007, 4
  store i64 %9010, i64* %3, align 8
  %9011 = inttoptr i64 %9009 to i32*
  %9012 = load i32, i32* %9011, align 4
  %9013 = mul i32 %9012, 20
  %9014 = add i32 %9013, 21
  %9015 = zext i32 %9014 to i64
  store i64 %9015, i64* %RAX.i1404, align 8
  %9016 = icmp ugt i32 %9013, -22
  %9017 = zext i1 %9016 to i8
  store i8 %9017, i8* %12, align 1
  %9018 = and i32 %9014, 253
  %9019 = tail call i32 @llvm.ctpop.i32(i32 %9018)
  %9020 = trunc i32 %9019 to i8
  %9021 = and i8 %9020, 1
  %9022 = xor i8 %9021, 1
  store i8 %9022, i8* %13, align 1
  %9023 = xor i32 %9013, 16
  %9024 = xor i32 %9023, %9014
  %9025 = lshr i32 %9024, 4
  %9026 = trunc i32 %9025 to i8
  %9027 = and i8 %9026, 1
  store i8 %9027, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %9028 = lshr i32 %9014, 31
  %9029 = trunc i32 %9028 to i8
  store i8 %9029, i8* %16, align 1
  %9030 = lshr i32 %9013, 31
  %9031 = xor i32 %9028, %9030
  %9032 = add nuw nsw i32 %9031, %9028
  %9033 = icmp eq i32 %9032, 2
  %9034 = zext i1 %9033 to i8
  store i8 %9034, i8* %17, align 1
  %9035 = add i64 %9008, -40
  %9036 = add i64 %9007, 10
  store i64 %9036, i64* %3, align 8
  %9037 = inttoptr i64 %9035 to i32*
  %9038 = load i32, i32* %9037, align 4
  %9039 = add i32 %9038, %9014
  %9040 = zext i32 %9039 to i64
  store i64 %9040, i64* %RAX.i1404, align 8
  %9041 = icmp ult i32 %9039, %9014
  %9042 = icmp ult i32 %9039, %9038
  %9043 = or i1 %9041, %9042
  %9044 = zext i1 %9043 to i8
  store i8 %9044, i8* %12, align 1
  %9045 = and i32 %9039, 255
  %9046 = tail call i32 @llvm.ctpop.i32(i32 %9045)
  %9047 = trunc i32 %9046 to i8
  %9048 = and i8 %9047, 1
  %9049 = xor i8 %9048, 1
  store i8 %9049, i8* %13, align 1
  %9050 = xor i32 %9038, %9014
  %9051 = xor i32 %9050, %9039
  %9052 = lshr i32 %9051, 4
  %9053 = trunc i32 %9052 to i8
  %9054 = and i8 %9053, 1
  store i8 %9054, i8* %14, align 1
  %9055 = icmp eq i32 %9039, 0
  %9056 = zext i1 %9055 to i8
  store i8 %9056, i8* %15, align 1
  %9057 = lshr i32 %9039, 31
  %9058 = trunc i32 %9057 to i8
  store i8 %9058, i8* %16, align 1
  %9059 = lshr i32 %9038, 31
  %9060 = xor i32 %9057, %9028
  %9061 = xor i32 %9057, %9059
  %9062 = add nuw nsw i32 %9060, %9061
  %9063 = icmp eq i32 %9062, 2
  %9064 = zext i1 %9063 to i8
  store i8 %9064, i8* %17, align 1
  %9065 = sext i32 %9039 to i64
  store i64 %9065, i64* %RCX.i1715, align 8
  %9066 = load i64, i64* %RBP.i, align 8
  %9067 = add nsw i64 %9065, -1040
  %9068 = add i64 %9067, %9066
  %9069 = add i64 %9007, 21
  store i64 %9069, i64* %3, align 8
  %9070 = inttoptr i64 %9068 to i8*
  %9071 = load i8, i8* %9070, align 1
  %9072 = sext i8 %9071 to i64
  %9073 = and i64 %9072, 4294967295
  store i64 %9073, i64* %RAX.i1404, align 8
  %9074 = sext i8 %9071 to i32
  %9075 = add nsw i32 %9074, -1
  %9076 = icmp eq i8 %9071, 0
  %9077 = zext i1 %9076 to i8
  store i8 %9077, i8* %12, align 1
  %9078 = and i32 %9075, 255
  %9079 = tail call i32 @llvm.ctpop.i32(i32 %9078)
  %9080 = trunc i32 %9079 to i8
  %9081 = and i8 %9080, 1
  %9082 = xor i8 %9081, 1
  store i8 %9082, i8* %13, align 1
  %9083 = xor i32 %9075, %9074
  %9084 = lshr i32 %9083, 4
  %9085 = trunc i32 %9084 to i8
  %9086 = and i8 %9085, 1
  store i8 %9086, i8* %14, align 1
  %9087 = icmp eq i32 %9075, 0
  %9088 = zext i1 %9087 to i8
  store i8 %9088, i8* %15, align 1
  %9089 = lshr i32 %9075, 31
  %9090 = trunc i32 %9089 to i8
  store i8 %9090, i8* %16, align 1
  %9091 = lshr i32 %9074, 31
  %9092 = xor i32 %9089, %9091
  %9093 = add nuw nsw i32 %9092, %9091
  %9094 = icmp eq i32 %9093, 2
  %9095 = zext i1 %9094 to i8
  store i8 %9095, i8* %17, align 1
  %.v356 = select i1 %9087, i64 30, i64 45
  %9096 = add i64 %9007, %.v356
  store i64 %9096, i64* %3, align 8
  br i1 %9004, label %block_.L_476ca1, label %block_476c33

block_476c33:                                     ; preds = %block_476c18
  br i1 %9087, label %block_476c51, label %block_.L_476c60

block_476c51:                                     ; preds = %block_476c33
  %9097 = add i64 %9066, -1132
  %9098 = add i64 %9096, 10
  store i64 %9098, i64* %3, align 8
  %9099 = inttoptr i64 %9097 to i32*
  store i32 1, i32* %9099, align 4
  %9100 = load i64, i64* %3, align 8
  %9101 = add i64 %9100, 65
  br label %block_.L_476c9c

block_.L_476c60:                                  ; preds = %block_476c33
  %9102 = add i64 %9066, -36
  %9103 = add i64 %9096, 4
  store i64 %9103, i64* %3, align 8
  %9104 = inttoptr i64 %9102 to i32*
  %9105 = load i32, i32* %9104, align 4
  %9106 = mul i32 %9105, 20
  %9107 = add i32 %9106, 21
  %9108 = zext i32 %9107 to i64
  store i64 %9108, i64* %RAX.i1404, align 8
  %9109 = icmp ugt i32 %9106, -22
  %9110 = zext i1 %9109 to i8
  store i8 %9110, i8* %12, align 1
  %9111 = and i32 %9107, 253
  %9112 = tail call i32 @llvm.ctpop.i32(i32 %9111)
  %9113 = trunc i32 %9112 to i8
  %9114 = and i8 %9113, 1
  %9115 = xor i8 %9114, 1
  store i8 %9115, i8* %13, align 1
  %9116 = xor i32 %9106, 16
  %9117 = xor i32 %9116, %9107
  %9118 = lshr i32 %9117, 4
  %9119 = trunc i32 %9118 to i8
  %9120 = and i8 %9119, 1
  store i8 %9120, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %9121 = lshr i32 %9107, 31
  %9122 = trunc i32 %9121 to i8
  store i8 %9122, i8* %16, align 1
  %9123 = lshr i32 %9106, 31
  %9124 = xor i32 %9121, %9123
  %9125 = add nuw nsw i32 %9124, %9121
  %9126 = icmp eq i32 %9125, 2
  %9127 = zext i1 %9126 to i8
  store i8 %9127, i8* %17, align 1
  %9128 = add i64 %9066, -40
  %9129 = add i64 %9096, 10
  store i64 %9129, i64* %3, align 8
  %9130 = inttoptr i64 %9128 to i32*
  %9131 = load i32, i32* %9130, align 4
  %9132 = add i32 %9131, %9107
  %9133 = zext i32 %9132 to i64
  store i64 %9133, i64* %RAX.i1404, align 8
  %9134 = icmp ult i32 %9132, %9107
  %9135 = icmp ult i32 %9132, %9131
  %9136 = or i1 %9134, %9135
  %9137 = zext i1 %9136 to i8
  store i8 %9137, i8* %12, align 1
  %9138 = and i32 %9132, 255
  %9139 = tail call i32 @llvm.ctpop.i32(i32 %9138)
  %9140 = trunc i32 %9139 to i8
  %9141 = and i8 %9140, 1
  %9142 = xor i8 %9141, 1
  store i8 %9142, i8* %13, align 1
  %9143 = xor i32 %9131, %9107
  %9144 = xor i32 %9143, %9132
  %9145 = lshr i32 %9144, 4
  %9146 = trunc i32 %9145 to i8
  %9147 = and i8 %9146, 1
  store i8 %9147, i8* %14, align 1
  %9148 = icmp eq i32 %9132, 0
  %9149 = zext i1 %9148 to i8
  store i8 %9149, i8* %15, align 1
  %9150 = lshr i32 %9132, 31
  %9151 = trunc i32 %9150 to i8
  store i8 %9151, i8* %16, align 1
  %9152 = lshr i32 %9131, 31
  %9153 = xor i32 %9150, %9121
  %9154 = xor i32 %9150, %9152
  %9155 = add nuw nsw i32 %9153, %9154
  %9156 = icmp eq i32 %9155, 2
  %9157 = zext i1 %9156 to i8
  store i8 %9157, i8* %17, align 1
  %9158 = sext i32 %9132 to i64
  store i64 %9158, i64* %RCX.i1715, align 8
  %9159 = load i64, i64* %RBP.i, align 8
  %9160 = add nsw i64 %9158, -1040
  %9161 = add i64 %9160, %9159
  %9162 = add i64 %9096, 21
  store i64 %9162, i64* %3, align 8
  %9163 = inttoptr i64 %9161 to i8*
  %9164 = load i8, i8* %9163, align 1
  %9165 = sext i8 %9164 to i64
  %9166 = and i64 %9165, 4294967295
  store i64 %9166, i64* %RAX.i1404, align 8
  %9167 = sext i8 %9164 to i32
  %9168 = add nsw i32 %9167, -2
  %9169 = icmp ult i8 %9164, 2
  %9170 = zext i1 %9169 to i8
  store i8 %9170, i8* %12, align 1
  %9171 = and i32 %9168, 255
  %9172 = tail call i32 @llvm.ctpop.i32(i32 %9171)
  %9173 = trunc i32 %9172 to i8
  %9174 = and i8 %9173, 1
  %9175 = xor i8 %9174, 1
  store i8 %9175, i8* %13, align 1
  %9176 = xor i32 %9168, %9167
  %9177 = lshr i32 %9176, 4
  %9178 = trunc i32 %9177 to i8
  %9179 = and i8 %9178, 1
  store i8 %9179, i8* %14, align 1
  %9180 = icmp eq i32 %9168, 0
  %9181 = zext i1 %9180 to i8
  store i8 %9181, i8* %15, align 1
  %9182 = lshr i32 %9168, 31
  %9183 = trunc i32 %9182 to i8
  store i8 %9183, i8* %16, align 1
  %9184 = lshr i32 %9167, 31
  %9185 = xor i32 %9182, %9184
  %9186 = add nuw nsw i32 %9185, %9184
  %9187 = icmp eq i32 %9186, 2
  %9188 = zext i1 %9187 to i8
  store i8 %9188, i8* %17, align 1
  %.v355 = select i1 %9180, i64 30, i64 45
  %9189 = add i64 %9096, %.v355
  %9190 = add i64 %9159, -1132
  %9191 = add i64 %9189, 10
  store i64 %9191, i64* %3, align 8
  %9192 = inttoptr i64 %9190 to i32*
  br i1 %9180, label %block_476c7e, label %block_.L_476c8d

block_476c7e:                                     ; preds = %block_.L_476c60
  store i32 3, i32* %9192, align 4
  %9193 = load i64, i64* %3, align 8
  %9194 = add i64 %9193, 15
  store i64 %9194, i64* %3, align 8
  br label %block_.L_476c97

block_.L_476c8d:                                  ; preds = %block_.L_476c60
  store i32 2, i32* %9192, align 4
  %.pre268 = load i64, i64* %3, align 8
  br label %block_.L_476c97

block_.L_476c97:                                  ; preds = %block_.L_476c8d, %block_476c7e
  %9195 = phi i64 [ %.pre268, %block_.L_476c8d ], [ %9194, %block_476c7e ]
  %9196 = add i64 %9195, 5
  store i64 %9196, i64* %3, align 8
  br label %block_.L_476c9c

block_.L_476c9c:                                  ; preds = %block_.L_476c97, %block_476c51
  %storemerge = phi i64 [ %9101, %block_476c51 ], [ %9196, %block_.L_476c97 ]
  %9197 = add i64 %storemerge, 115
  br label %block_.L_476d0f

block_.L_476ca1:                                  ; preds = %block_476c18
  br i1 %9087, label %block_476cbf, label %block_.L_476cce

block_476cbf:                                     ; preds = %block_.L_476ca1
  %9198 = add i64 %9066, -1132
  %9199 = add i64 %9096, 10
  store i64 %9199, i64* %3, align 8
  %9200 = inttoptr i64 %9198 to i32*
  store i32 4, i32* %9200, align 4
  %9201 = load i64, i64* %3, align 8
  %9202 = add i64 %9201, 65
  br label %block_.L_476d0a

block_.L_476cce:                                  ; preds = %block_.L_476ca1
  %9203 = add i64 %9066, -36
  %9204 = add i64 %9096, 4
  store i64 %9204, i64* %3, align 8
  %9205 = inttoptr i64 %9203 to i32*
  %9206 = load i32, i32* %9205, align 4
  %9207 = mul i32 %9206, 20
  %9208 = add i32 %9207, 21
  %9209 = zext i32 %9208 to i64
  store i64 %9209, i64* %RAX.i1404, align 8
  %9210 = icmp ugt i32 %9207, -22
  %9211 = zext i1 %9210 to i8
  store i8 %9211, i8* %12, align 1
  %9212 = and i32 %9208, 253
  %9213 = tail call i32 @llvm.ctpop.i32(i32 %9212)
  %9214 = trunc i32 %9213 to i8
  %9215 = and i8 %9214, 1
  %9216 = xor i8 %9215, 1
  store i8 %9216, i8* %13, align 1
  %9217 = xor i32 %9207, 16
  %9218 = xor i32 %9217, %9208
  %9219 = lshr i32 %9218, 4
  %9220 = trunc i32 %9219 to i8
  %9221 = and i8 %9220, 1
  store i8 %9221, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %9222 = lshr i32 %9208, 31
  %9223 = trunc i32 %9222 to i8
  store i8 %9223, i8* %16, align 1
  %9224 = lshr i32 %9207, 31
  %9225 = xor i32 %9222, %9224
  %9226 = add nuw nsw i32 %9225, %9222
  %9227 = icmp eq i32 %9226, 2
  %9228 = zext i1 %9227 to i8
  store i8 %9228, i8* %17, align 1
  %9229 = add i64 %9066, -40
  %9230 = add i64 %9096, 10
  store i64 %9230, i64* %3, align 8
  %9231 = inttoptr i64 %9229 to i32*
  %9232 = load i32, i32* %9231, align 4
  %9233 = add i32 %9232, %9208
  %9234 = zext i32 %9233 to i64
  store i64 %9234, i64* %RAX.i1404, align 8
  %9235 = icmp ult i32 %9233, %9208
  %9236 = icmp ult i32 %9233, %9232
  %9237 = or i1 %9235, %9236
  %9238 = zext i1 %9237 to i8
  store i8 %9238, i8* %12, align 1
  %9239 = and i32 %9233, 255
  %9240 = tail call i32 @llvm.ctpop.i32(i32 %9239)
  %9241 = trunc i32 %9240 to i8
  %9242 = and i8 %9241, 1
  %9243 = xor i8 %9242, 1
  store i8 %9243, i8* %13, align 1
  %9244 = xor i32 %9232, %9208
  %9245 = xor i32 %9244, %9233
  %9246 = lshr i32 %9245, 4
  %9247 = trunc i32 %9246 to i8
  %9248 = and i8 %9247, 1
  store i8 %9248, i8* %14, align 1
  %9249 = icmp eq i32 %9233, 0
  %9250 = zext i1 %9249 to i8
  store i8 %9250, i8* %15, align 1
  %9251 = lshr i32 %9233, 31
  %9252 = trunc i32 %9251 to i8
  store i8 %9252, i8* %16, align 1
  %9253 = lshr i32 %9232, 31
  %9254 = xor i32 %9251, %9222
  %9255 = xor i32 %9251, %9253
  %9256 = add nuw nsw i32 %9254, %9255
  %9257 = icmp eq i32 %9256, 2
  %9258 = zext i1 %9257 to i8
  store i8 %9258, i8* %17, align 1
  %9259 = sext i32 %9233 to i64
  store i64 %9259, i64* %RCX.i1715, align 8
  %9260 = load i64, i64* %RBP.i, align 8
  %9261 = add nsw i64 %9259, -1040
  %9262 = add i64 %9261, %9260
  %9263 = add i64 %9096, 21
  store i64 %9263, i64* %3, align 8
  %9264 = inttoptr i64 %9262 to i8*
  %9265 = load i8, i8* %9264, align 1
  %9266 = sext i8 %9265 to i64
  %9267 = and i64 %9266, 4294967295
  store i64 %9267, i64* %RAX.i1404, align 8
  %9268 = sext i8 %9265 to i32
  %9269 = add nsw i32 %9268, -2
  %9270 = icmp ult i8 %9265, 2
  %9271 = zext i1 %9270 to i8
  store i8 %9271, i8* %12, align 1
  %9272 = and i32 %9269, 255
  %9273 = tail call i32 @llvm.ctpop.i32(i32 %9272)
  %9274 = trunc i32 %9273 to i8
  %9275 = and i8 %9274, 1
  %9276 = xor i8 %9275, 1
  store i8 %9276, i8* %13, align 1
  %9277 = xor i32 %9269, %9268
  %9278 = lshr i32 %9277, 4
  %9279 = trunc i32 %9278 to i8
  %9280 = and i8 %9279, 1
  store i8 %9280, i8* %14, align 1
  %9281 = icmp eq i32 %9269, 0
  %9282 = zext i1 %9281 to i8
  store i8 %9282, i8* %15, align 1
  %9283 = lshr i32 %9269, 31
  %9284 = trunc i32 %9283 to i8
  store i8 %9284, i8* %16, align 1
  %9285 = lshr i32 %9268, 31
  %9286 = xor i32 %9283, %9285
  %9287 = add nuw nsw i32 %9286, %9285
  %9288 = icmp eq i32 %9287, 2
  %9289 = zext i1 %9288 to i8
  store i8 %9289, i8* %17, align 1
  %.v358 = select i1 %9281, i64 30, i64 45
  %9290 = add i64 %9096, %.v358
  %9291 = add i64 %9260, -1132
  %9292 = add i64 %9290, 10
  store i64 %9292, i64* %3, align 8
  %9293 = inttoptr i64 %9291 to i32*
  br i1 %9281, label %block_476cec, label %block_.L_476cfb

block_476cec:                                     ; preds = %block_.L_476cce
  store i32 6, i32* %9293, align 4
  %9294 = load i64, i64* %3, align 8
  %9295 = add i64 %9294, 15
  store i64 %9295, i64* %3, align 8
  br label %block_.L_476d05

block_.L_476cfb:                                  ; preds = %block_.L_476cce
  store i32 0, i32* %9293, align 4
  %.pre269 = load i64, i64* %3, align 8
  br label %block_.L_476d05

block_.L_476d05:                                  ; preds = %block_.L_476cfb, %block_476cec
  %9296 = phi i64 [ %.pre269, %block_.L_476cfb ], [ %9295, %block_476cec ]
  %9297 = add i64 %9296, 5
  store i64 %9297, i64* %3, align 8
  br label %block_.L_476d0a

block_.L_476d0a:                                  ; preds = %block_.L_476d05, %block_476cbf
  %storemerge128 = phi i64 [ %9202, %block_476cbf ], [ %9297, %block_.L_476d05 ]
  %9298 = add i64 %storemerge128, 5
  store i64 %9298, i64* %3, align 8
  br label %block_.L_476d0f

block_.L_476d0f:                                  ; preds = %block_.L_476d0a, %block_.L_476c9c
  %storemerge125 = phi i64 [ %9197, %block_.L_476c9c ], [ %9298, %block_.L_476d0a ]
  %9299 = load i64, i64* %RBP.i, align 8
  %9300 = add i64 %9299, -36
  %9301 = add i64 %storemerge125, 4
  store i64 %9301, i64* %3, align 8
  %9302 = inttoptr i64 %9300 to i32*
  %9303 = load i32, i32* %9302, align 4
  %9304 = mul i32 %9303, 20
  %9305 = add i32 %9304, 21
  %9306 = zext i32 %9305 to i64
  store i64 %9306, i64* %RAX.i1404, align 8
  %9307 = icmp ugt i32 %9304, -22
  %9308 = zext i1 %9307 to i8
  store i8 %9308, i8* %12, align 1
  %9309 = and i32 %9305, 253
  %9310 = tail call i32 @llvm.ctpop.i32(i32 %9309)
  %9311 = trunc i32 %9310 to i8
  %9312 = and i8 %9311, 1
  %9313 = xor i8 %9312, 1
  store i8 %9313, i8* %13, align 1
  %9314 = xor i32 %9304, 16
  %9315 = xor i32 %9314, %9305
  %9316 = lshr i32 %9315, 4
  %9317 = trunc i32 %9316 to i8
  %9318 = and i8 %9317, 1
  store i8 %9318, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %9319 = lshr i32 %9305, 31
  %9320 = trunc i32 %9319 to i8
  store i8 %9320, i8* %16, align 1
  %9321 = lshr i32 %9304, 31
  %9322 = xor i32 %9319, %9321
  %9323 = add nuw nsw i32 %9322, %9319
  %9324 = icmp eq i32 %9323, 2
  %9325 = zext i1 %9324 to i8
  store i8 %9325, i8* %17, align 1
  %9326 = add i64 %9299, -40
  %9327 = add i64 %storemerge125, 10
  store i64 %9327, i64* %3, align 8
  %9328 = inttoptr i64 %9326 to i32*
  %9329 = load i32, i32* %9328, align 4
  %9330 = add i32 %9329, %9305
  %9331 = zext i32 %9330 to i64
  store i64 %9331, i64* %RAX.i1404, align 8
  %9332 = icmp ult i32 %9330, %9305
  %9333 = icmp ult i32 %9330, %9329
  %9334 = or i1 %9332, %9333
  %9335 = zext i1 %9334 to i8
  store i8 %9335, i8* %12, align 1
  %9336 = and i32 %9330, 255
  %9337 = tail call i32 @llvm.ctpop.i32(i32 %9336)
  %9338 = trunc i32 %9337 to i8
  %9339 = and i8 %9338, 1
  %9340 = xor i8 %9339, 1
  store i8 %9340, i8* %13, align 1
  %9341 = xor i32 %9329, %9305
  %9342 = xor i32 %9341, %9330
  %9343 = lshr i32 %9342, 4
  %9344 = trunc i32 %9343 to i8
  %9345 = and i8 %9344, 1
  store i8 %9345, i8* %14, align 1
  %9346 = icmp eq i32 %9330, 0
  %9347 = zext i1 %9346 to i8
  store i8 %9347, i8* %15, align 1
  %9348 = lshr i32 %9330, 31
  %9349 = trunc i32 %9348 to i8
  store i8 %9349, i8* %16, align 1
  %9350 = lshr i32 %9329, 31
  %9351 = xor i32 %9348, %9319
  %9352 = xor i32 %9348, %9350
  %9353 = add nuw nsw i32 %9351, %9352
  %9354 = icmp eq i32 %9353, 2
  %9355 = zext i1 %9354 to i8
  store i8 %9355, i8* %17, align 1
  %9356 = sext i32 %9330 to i64
  store i64 %9356, i64* %RCX.i1715, align 8
  %9357 = add nsw i64 %9356, 12099168
  %9358 = add i64 %storemerge125, 21
  store i64 %9358, i64* %3, align 8
  %9359 = inttoptr i64 %9357 to i8*
  %9360 = load i8, i8* %9359, align 1
  %9361 = zext i8 %9360 to i64
  store i64 %9361, i64* %RAX.i1404, align 8
  %9362 = zext i8 %9360 to i32
  %9363 = add nsw i32 %9362, -2
  %9364 = icmp ult i8 %9360, 2
  %9365 = zext i1 %9364 to i8
  store i8 %9365, i8* %12, align 1
  %9366 = and i32 %9363, 255
  %9367 = tail call i32 @llvm.ctpop.i32(i32 %9366)
  %9368 = trunc i32 %9367 to i8
  %9369 = and i8 %9368, 1
  %9370 = xor i8 %9369, 1
  store i8 %9370, i8* %13, align 1
  %9371 = xor i32 %9363, %9362
  %9372 = lshr i32 %9371, 4
  %9373 = trunc i32 %9372 to i8
  %9374 = and i8 %9373, 1
  store i8 %9374, i8* %14, align 1
  %9375 = icmp eq i32 %9363, 0
  %9376 = zext i1 %9375 to i8
  store i8 %9376, i8* %15, align 1
  %9377 = lshr i32 %9363, 31
  %9378 = trunc i32 %9377 to i8
  store i8 %9378, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v354 = select i1 %9375, i64 30, i64 45
  %9379 = add i64 %storemerge125, %.v354
  store i64 %9379, i64* %3, align 8
  %9380 = load i64, i64* %RBP.i, align 8
  br i1 %9375, label %block_476d2d, label %block_.L_476d3c

block_476d2d:                                     ; preds = %block_.L_476d0f
  %9381 = add i64 %9380, -1136
  %9382 = add i64 %9379, 10
  store i64 %9382, i64* %3, align 8
  %9383 = inttoptr i64 %9381 to i32*
  store i32 88, i32* %9383, align 4
  %9384 = load i64, i64* %3, align 8
  %9385 = add i64 %9384, 112
  br label %block_.L_476da7

block_.L_476d3c:                                  ; preds = %block_.L_476d0f
  %9386 = add i64 %9380, -36
  %9387 = add i64 %9379, 4
  store i64 %9387, i64* %3, align 8
  %9388 = inttoptr i64 %9386 to i32*
  %9389 = load i32, i32* %9388, align 4
  %9390 = mul i32 %9389, 20
  %9391 = add i32 %9390, 21
  %9392 = zext i32 %9391 to i64
  store i64 %9392, i64* %RAX.i1404, align 8
  %9393 = icmp ugt i32 %9390, -22
  %9394 = zext i1 %9393 to i8
  store i8 %9394, i8* %12, align 1
  %9395 = and i32 %9391, 253
  %9396 = tail call i32 @llvm.ctpop.i32(i32 %9395)
  %9397 = trunc i32 %9396 to i8
  %9398 = and i8 %9397, 1
  %9399 = xor i8 %9398, 1
  store i8 %9399, i8* %13, align 1
  %9400 = xor i32 %9390, 16
  %9401 = xor i32 %9400, %9391
  %9402 = lshr i32 %9401, 4
  %9403 = trunc i32 %9402 to i8
  %9404 = and i8 %9403, 1
  store i8 %9404, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %9405 = lshr i32 %9391, 31
  %9406 = trunc i32 %9405 to i8
  store i8 %9406, i8* %16, align 1
  %9407 = lshr i32 %9390, 31
  %9408 = xor i32 %9405, %9407
  %9409 = add nuw nsw i32 %9408, %9405
  %9410 = icmp eq i32 %9409, 2
  %9411 = zext i1 %9410 to i8
  store i8 %9411, i8* %17, align 1
  %9412 = add i64 %9380, -40
  %9413 = add i64 %9379, 10
  store i64 %9413, i64* %3, align 8
  %9414 = inttoptr i64 %9412 to i32*
  %9415 = load i32, i32* %9414, align 4
  %9416 = add i32 %9415, %9391
  %9417 = zext i32 %9416 to i64
  store i64 %9417, i64* %RAX.i1404, align 8
  %9418 = icmp ult i32 %9416, %9391
  %9419 = icmp ult i32 %9416, %9415
  %9420 = or i1 %9418, %9419
  %9421 = zext i1 %9420 to i8
  store i8 %9421, i8* %12, align 1
  %9422 = and i32 %9416, 255
  %9423 = tail call i32 @llvm.ctpop.i32(i32 %9422)
  %9424 = trunc i32 %9423 to i8
  %9425 = and i8 %9424, 1
  %9426 = xor i8 %9425, 1
  store i8 %9426, i8* %13, align 1
  %9427 = xor i32 %9415, %9391
  %9428 = xor i32 %9427, %9416
  %9429 = lshr i32 %9428, 4
  %9430 = trunc i32 %9429 to i8
  %9431 = and i8 %9430, 1
  store i8 %9431, i8* %14, align 1
  %9432 = icmp eq i32 %9416, 0
  %9433 = zext i1 %9432 to i8
  store i8 %9433, i8* %15, align 1
  %9434 = lshr i32 %9416, 31
  %9435 = trunc i32 %9434 to i8
  store i8 %9435, i8* %16, align 1
  %9436 = lshr i32 %9415, 31
  %9437 = xor i32 %9434, %9405
  %9438 = xor i32 %9434, %9436
  %9439 = add nuw nsw i32 %9437, %9438
  %9440 = icmp eq i32 %9439, 2
  %9441 = zext i1 %9440 to i8
  store i8 %9441, i8* %17, align 1
  %9442 = sext i32 %9416 to i64
  store i64 %9442, i64* %RCX.i1715, align 8
  %9443 = add nsw i64 %9442, 12099168
  %9444 = add i64 %9379, 21
  store i64 %9444, i64* %3, align 8
  %9445 = inttoptr i64 %9443 to i8*
  %9446 = load i8, i8* %9445, align 1
  %9447 = zext i8 %9446 to i64
  store i64 %9447, i64* %RAX.i1404, align 8
  %9448 = zext i8 %9446 to i32
  %9449 = add nsw i32 %9448, -1
  %9450 = icmp eq i8 %9446, 0
  %9451 = zext i1 %9450 to i8
  store i8 %9451, i8* %12, align 1
  %9452 = and i32 %9449, 255
  %9453 = tail call i32 @llvm.ctpop.i32(i32 %9452)
  %9454 = trunc i32 %9453 to i8
  %9455 = and i8 %9454, 1
  %9456 = xor i8 %9455, 1
  store i8 %9456, i8* %13, align 1
  %9457 = xor i32 %9449, %9448
  %9458 = lshr i32 %9457, 4
  %9459 = trunc i32 %9458 to i8
  %9460 = and i8 %9459, 1
  store i8 %9460, i8* %14, align 1
  %9461 = icmp eq i32 %9449, 0
  %9462 = zext i1 %9461 to i8
  store i8 %9462, i8* %15, align 1
  %9463 = lshr i32 %9449, 31
  %9464 = trunc i32 %9463 to i8
  store i8 %9464, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v353 = select i1 %9461, i64 30, i64 45
  %9465 = add i64 %9379, %.v353
  store i64 %9465, i64* %3, align 8
  %9466 = load i64, i64* %RBP.i, align 8
  br i1 %9461, label %block_476d5a, label %block_.L_476d69

block_476d5a:                                     ; preds = %block_.L_476d3c
  %9467 = add i64 %9466, -1136
  %9468 = add i64 %9465, 10
  store i64 %9468, i64* %3, align 8
  %9469 = inttoptr i64 %9467 to i32*
  store i32 79, i32* %9469, align 4
  %9470 = load i64, i64* %3, align 8
  %9471 = add i64 %9470, 62
  br label %block_.L_476da2

block_.L_476d69:                                  ; preds = %block_.L_476d3c
  %9472 = add i64 %9466, -36
  %9473 = add i64 %9465, 4
  store i64 %9473, i64* %3, align 8
  %9474 = inttoptr i64 %9472 to i32*
  %9475 = load i32, i32* %9474, align 4
  %9476 = mul i32 %9475, 20
  %9477 = add i32 %9476, 21
  %9478 = zext i32 %9477 to i64
  store i64 %9478, i64* %RAX.i1404, align 8
  %9479 = icmp ugt i32 %9476, -22
  %9480 = zext i1 %9479 to i8
  store i8 %9480, i8* %12, align 1
  %9481 = and i32 %9477, 253
  %9482 = tail call i32 @llvm.ctpop.i32(i32 %9481)
  %9483 = trunc i32 %9482 to i8
  %9484 = and i8 %9483, 1
  %9485 = xor i8 %9484, 1
  store i8 %9485, i8* %13, align 1
  %9486 = xor i32 %9476, 16
  %9487 = xor i32 %9486, %9477
  %9488 = lshr i32 %9487, 4
  %9489 = trunc i32 %9488 to i8
  %9490 = and i8 %9489, 1
  store i8 %9490, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %9491 = lshr i32 %9477, 31
  %9492 = trunc i32 %9491 to i8
  store i8 %9492, i8* %16, align 1
  %9493 = lshr i32 %9476, 31
  %9494 = xor i32 %9491, %9493
  %9495 = add nuw nsw i32 %9494, %9491
  %9496 = icmp eq i32 %9495, 2
  %9497 = zext i1 %9496 to i8
  store i8 %9497, i8* %17, align 1
  %9498 = add i64 %9466, -40
  %9499 = add i64 %9465, 10
  store i64 %9499, i64* %3, align 8
  %9500 = inttoptr i64 %9498 to i32*
  %9501 = load i32, i32* %9500, align 4
  %9502 = add i32 %9501, %9477
  %9503 = zext i32 %9502 to i64
  store i64 %9503, i64* %RAX.i1404, align 8
  %9504 = icmp ult i32 %9502, %9477
  %9505 = icmp ult i32 %9502, %9501
  %9506 = or i1 %9504, %9505
  %9507 = zext i1 %9506 to i8
  store i8 %9507, i8* %12, align 1
  %9508 = and i32 %9502, 255
  %9509 = tail call i32 @llvm.ctpop.i32(i32 %9508)
  %9510 = trunc i32 %9509 to i8
  %9511 = and i8 %9510, 1
  %9512 = xor i8 %9511, 1
  store i8 %9512, i8* %13, align 1
  %9513 = xor i32 %9501, %9477
  %9514 = xor i32 %9513, %9502
  %9515 = lshr i32 %9514, 4
  %9516 = trunc i32 %9515 to i8
  %9517 = and i8 %9516, 1
  store i8 %9517, i8* %14, align 1
  %9518 = icmp eq i32 %9502, 0
  %9519 = zext i1 %9518 to i8
  store i8 %9519, i8* %15, align 1
  %9520 = lshr i32 %9502, 31
  %9521 = trunc i32 %9520 to i8
  store i8 %9521, i8* %16, align 1
  %9522 = lshr i32 %9501, 31
  %9523 = xor i32 %9520, %9491
  %9524 = xor i32 %9520, %9522
  %9525 = add nuw nsw i32 %9523, %9524
  %9526 = icmp eq i32 %9525, 2
  %9527 = zext i1 %9526 to i8
  store i8 %9527, i8* %17, align 1
  %9528 = sext i32 %9502 to i64
  store i64 %9528, i64* %RCX.i1715, align 8
  %9529 = load i64, i64* %RBP.i, align 8
  %9530 = add nsw i64 %9528, -1040
  %9531 = add i64 %9530, %9529
  %9532 = add i64 %9465, 21
  store i64 %9532, i64* %3, align 8
  %9533 = inttoptr i64 %9531 to i8*
  %9534 = load i8, i8* %9533, align 1
  store i8 0, i8* %12, align 1
  %9535 = zext i8 %9534 to i32
  %9536 = tail call i32 @llvm.ctpop.i32(i32 %9535)
  %9537 = trunc i32 %9536 to i8
  %9538 = and i8 %9537, 1
  %9539 = xor i8 %9538, 1
  store i8 %9539, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9540 = icmp eq i8 %9534, 0
  %9541 = zext i1 %9540 to i8
  store i8 %9541, i8* %15, align 1
  %9542 = lshr i8 %9534, 7
  store i8 %9542, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v352 = select i1 %9540, i64 42, i64 27
  %9543 = add i64 %9465, %.v352
  %9544 = add i64 %9529, -1136
  %9545 = add i64 %9543, 10
  store i64 %9545, i64* %3, align 8
  %9546 = inttoptr i64 %9544 to i32*
  br i1 %9540, label %block_.L_476d93, label %block_476d84

block_476d84:                                     ; preds = %block_.L_476d69
  store i32 42, i32* %9546, align 4
  %9547 = load i64, i64* %3, align 8
  %9548 = add i64 %9547, 15
  store i64 %9548, i64* %3, align 8
  br label %block_.L_476d9d

block_.L_476d93:                                  ; preds = %block_.L_476d69
  store i32 46, i32* %9546, align 4
  %.pre270 = load i64, i64* %3, align 8
  br label %block_.L_476d9d

block_.L_476d9d:                                  ; preds = %block_.L_476d93, %block_476d84
  %9549 = phi i64 [ %.pre270, %block_.L_476d93 ], [ %9548, %block_476d84 ]
  %9550 = add i64 %9549, 5
  store i64 %9550, i64* %3, align 8
  br label %block_.L_476da2

block_.L_476da2:                                  ; preds = %block_.L_476d9d, %block_476d5a
  %storemerge127 = phi i64 [ %9471, %block_476d5a ], [ %9550, %block_.L_476d9d ]
  %9551 = add i64 %storemerge127, 5
  store i64 %9551, i64* %3, align 8
  br label %block_.L_476da7

block_.L_476da7:                                  ; preds = %block_.L_476da2, %block_476d2d
  %storemerge126 = phi i64 [ %9385, %block_476d2d ], [ %9551, %block_.L_476da2 ]
  %9552 = load i64, i64* %RBP.i, align 8
  %9553 = add i64 %9552, -36
  %9554 = add i64 %storemerge126, 3
  store i64 %9554, i64* %3, align 8
  %9555 = inttoptr i64 %9553 to i32*
  %9556 = load i32, i32* %9555, align 4
  %9557 = zext i32 %9556 to i64
  store i64 %9557, i64* %RDI.i2173, align 8
  %9558 = add i64 %9552, -40
  %9559 = add i64 %storemerge126, 6
  store i64 %9559, i64* %3, align 8
  %9560 = inttoptr i64 %9558 to i32*
  %9561 = load i32, i32* %9560, align 4
  %9562 = zext i32 %9561 to i64
  store i64 %9562, i64* %RSI.i2336, align 8
  %9563 = add i64 %9552, -1136
  %9564 = add i64 %storemerge126, 12
  store i64 %9564, i64* %3, align 8
  %9565 = inttoptr i64 %9563 to i32*
  %9566 = load i32, i32* %9565, align 4
  %9567 = zext i32 %9566 to i64
  store i64 %9567, i64* %RDX.i1921, align 8
  %9568 = add i64 %9552, -1132
  %9569 = add i64 %storemerge126, 18
  store i64 %9569, i64* %3, align 8
  %9570 = inttoptr i64 %9568 to i32*
  %9571 = load i32, i32* %9570, align 4
  %9572 = zext i32 %9571 to i64
  store i64 %9572, i64* %RCX.i1715, align 8
  %9573 = add i64 %storemerge126, -9095
  %9574 = add i64 %storemerge126, 23
  %9575 = load i64, i64* %6, align 8
  %9576 = add i64 %9575, -8
  %9577 = inttoptr i64 %9576 to i64*
  store i64 %9574, i64* %9577, align 8
  store i64 %9576, i64* %6, align 8
  store i64 %9573, i64* %3, align 8
  %call2_476db9 = tail call %struct.Memory* @sub_474a20.draw_color_char(%struct.State* nonnull %0, i64 %9573, %struct.Memory* %call2_476be5)
  %9578 = load i64, i64* %RBP.i, align 8
  %9579 = add i64 %9578, -40
  %9580 = load i64, i64* %3, align 8
  %9581 = add i64 %9580, 3
  store i64 %9581, i64* %3, align 8
  %9582 = inttoptr i64 %9579 to i32*
  %9583 = load i32, i32* %9582, align 4
  %9584 = add i32 %9583, 1
  %9585 = zext i32 %9584 to i64
  store i64 %9585, i64* %RAX.i1404, align 8
  %9586 = icmp eq i32 %9583, -1
  %9587 = icmp eq i32 %9584, 0
  %9588 = or i1 %9586, %9587
  %9589 = zext i1 %9588 to i8
  store i8 %9589, i8* %12, align 1
  %9590 = and i32 %9584, 255
  %9591 = tail call i32 @llvm.ctpop.i32(i32 %9590)
  %9592 = trunc i32 %9591 to i8
  %9593 = and i8 %9592, 1
  %9594 = xor i8 %9593, 1
  store i8 %9594, i8* %13, align 1
  %9595 = xor i32 %9584, %9583
  %9596 = lshr i32 %9595, 4
  %9597 = trunc i32 %9596 to i8
  %9598 = and i8 %9597, 1
  store i8 %9598, i8* %14, align 1
  %9599 = zext i1 %9587 to i8
  store i8 %9599, i8* %15, align 1
  %9600 = lshr i32 %9584, 31
  %9601 = trunc i32 %9600 to i8
  store i8 %9601, i8* %16, align 1
  %9602 = lshr i32 %9583, 31
  %9603 = xor i32 %9600, %9602
  %9604 = add nuw nsw i32 %9603, %9600
  %9605 = icmp eq i32 %9604, 2
  %9606 = zext i1 %9605 to i8
  store i8 %9606, i8* %17, align 1
  %9607 = add i64 %9580, 9
  store i64 %9607, i64* %3, align 8
  store i32 %9584, i32* %9582, align 4
  %9608 = load i64, i64* %3, align 8
  %9609 = add i64 %9608, -447
  store i64 %9609, i64* %3, align 8
  br label %block_.L_476c08

block_.L_476dcc:                                  ; preds = %block_.L_476c08
  %9610 = add i64 %8938, 8
  store i64 %9610, i64* %3, align 8
  %9611 = inttoptr i64 %8939 to i32*
  %9612 = load i32, i32* %9611, align 4
  %9613 = add i32 %9612, 1
  %9614 = zext i32 %9613 to i64
  store i64 %9614, i64* %RAX.i1404, align 8
  %9615 = icmp eq i32 %9612, -1
  %9616 = icmp eq i32 %9613, 0
  %9617 = or i1 %9615, %9616
  %9618 = zext i1 %9617 to i8
  store i8 %9618, i8* %12, align 1
  %9619 = and i32 %9613, 255
  %9620 = tail call i32 @llvm.ctpop.i32(i32 %9619)
  %9621 = trunc i32 %9620 to i8
  %9622 = and i8 %9621, 1
  %9623 = xor i8 %9622, 1
  store i8 %9623, i8* %13, align 1
  %9624 = xor i32 %9613, %9612
  %9625 = lshr i32 %9624, 4
  %9626 = trunc i32 %9625 to i8
  %9627 = and i8 %9626, 1
  store i8 %9627, i8* %14, align 1
  %9628 = zext i1 %9616 to i8
  store i8 %9628, i8* %15, align 1
  %9629 = lshr i32 %9613, 31
  %9630 = trunc i32 %9629 to i8
  store i8 %9630, i8* %16, align 1
  %9631 = lshr i32 %9612, 31
  %9632 = xor i32 %9629, %9631
  %9633 = add nuw nsw i32 %9632, %9629
  %9634 = icmp eq i32 %9633, 2
  %9635 = zext i1 %9634 to i8
  store i8 %9635, i8* %17, align 1
  %9636 = add i64 %8938, 14
  store i64 %9636, i64* %3, align 8
  store i32 %9613, i32* %9611, align 4
  %9637 = load i64, i64* %3, align 8
  %9638 = add i64 %9637, -489
  store i64 %9638, i64* %3, align 8
  br label %block_.L_476bf1

block_.L_476ddf:                                  ; preds = %block_.L_476bf1
  %9639 = add i64 %8900, -8255
  %9640 = add i64 %8900, 5
  %9641 = load i64, i64* %6, align 8
  %9642 = add i64 %9641, -8
  %9643 = inttoptr i64 %9642 to i64*
  store i64 %9640, i64* %9643, align 8
  store i64 %9642, i64* %6, align 8
  store i64 %9639, i64* %3, align 8
  %call2_476ddf = tail call %struct.Memory* @sub_474da0.end_draw_board(%struct.State* nonnull %0, i64 %9639, %struct.Memory* %call2_476be5)
  %.pre260 = load i64, i64* %RBP.i, align 8
  %.pre261 = load i64, i64* %3, align 8
  br label %block_.L_476de4

block_.L_476de4:                                  ; preds = %block_476bd1, %block_.L_476ddf, %block_476bdb
  %9644 = phi i64 [ %.pre261, %block_.L_476ddf ], [ %8840, %block_476bd1 ], [ %8854, %block_476bdb ]
  %9645 = phi i64 [ %.pre260, %block_.L_476ddf ], [ %8790, %block_476bd1 ], [ %8790, %block_476bdb ]
  %MEMORY.73 = phi %struct.Memory* [ %call2_476ddf, %block_.L_476ddf ], [ %MEMORY.34, %block_476bd1 ], [ %MEMORY.34, %block_476bdb ]
  %9646 = add i64 %9645, -12
  %9647 = add i64 %9644, 4
  store i64 %9647, i64* %3, align 8
  %9648 = inttoptr i64 %9646 to i32*
  %9649 = load i32, i32* %9648, align 4
  store i8 0, i8* %12, align 1
  %9650 = and i32 %9649, 255
  %9651 = tail call i32 @llvm.ctpop.i32(i32 %9650)
  %9652 = trunc i32 %9651 to i8
  %9653 = and i8 %9652, 1
  %9654 = xor i8 %9653, 1
  store i8 %9654, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9655 = icmp eq i32 %9649, 0
  %9656 = zext i1 %9655 to i8
  store i8 %9656, i8* %15, align 1
  %9657 = lshr i32 %9649, 31
  %9658 = trunc i32 %9657 to i8
  store i8 %9658, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v386 = select i1 %9655, i64 10, i64 183
  %9659 = add i64 %9644, %.v386
  store i64 %9659, i64* %3, align 8
  br i1 %9655, label %block_476dee, label %block_.L_476e9b

block_476dee:                                     ; preds = %block_.L_476de4
  %9660 = add i64 %9645, -52
  %9661 = add i64 %9659, 4
  store i64 %9661, i64* %3, align 8
  %9662 = inttoptr i64 %9660 to i32*
  %9663 = load i32, i32* %9662, align 4
  store i8 0, i8* %12, align 1
  %9664 = and i32 %9663, 255
  %9665 = tail call i32 @llvm.ctpop.i32(i32 %9664)
  %9666 = trunc i32 %9665 to i8
  %9667 = and i8 %9666, 1
  %9668 = xor i8 %9667, 1
  store i8 %9668, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9669 = icmp eq i32 %9663, 0
  %9670 = zext i1 %9669 to i8
  store i8 %9670, i8* %15, align 1
  %9671 = lshr i32 %9663, 31
  %9672 = trunc i32 %9671 to i8
  store i8 %9672, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v391 = select i1 %9669, i64 173, i64 10
  %9673 = add i64 %9659, %.v391
  store i64 %9673, i64* %3, align 8
  br i1 %9669, label %block_.L_476e9b, label %block_476df8

block_476df8:                                     ; preds = %block_476dee
  %9674 = load i32, i32* bitcast (%G_0xb63050_type* @G_0xb63050 to i32*), align 8
  %9675 = add i32 %9674, -10
  %9676 = icmp ult i32 %9674, 10
  %9677 = zext i1 %9676 to i8
  store i8 %9677, i8* %12, align 1
  %9678 = and i32 %9675, 255
  %9679 = tail call i32 @llvm.ctpop.i32(i32 %9678)
  %9680 = trunc i32 %9679 to i8
  %9681 = and i8 %9680, 1
  %9682 = xor i8 %9681, 1
  store i8 %9682, i8* %13, align 1
  %9683 = xor i32 %9675, %9674
  %9684 = lshr i32 %9683, 4
  %9685 = trunc i32 %9684 to i8
  %9686 = and i8 %9685, 1
  store i8 %9686, i8* %14, align 1
  %9687 = icmp eq i32 %9675, 0
  %9688 = zext i1 %9687 to i8
  store i8 %9688, i8* %15, align 1
  %9689 = lshr i32 %9675, 31
  %9690 = trunc i32 %9689 to i8
  store i8 %9690, i8* %16, align 1
  %9691 = lshr i32 %9674, 31
  %9692 = xor i32 %9689, %9691
  %9693 = add nuw nsw i32 %9692, %9691
  %9694 = icmp eq i32 %9693, 2
  %9695 = zext i1 %9694 to i8
  store i8 %9695, i8* %17, align 1
  %9696 = icmp ne i8 %9690, 0
  %9697 = xor i1 %9696, %9694
  %.v392 = select i1 %9697, i64 14, i64 163
  %9698 = add i64 %9673, %.v392
  store i64 %9698, i64* %3, align 8
  br i1 %9697, label %block_476e06, label %block_.L_476e9b

block_476e06:                                     ; preds = %block_476df8
  store i64 ptrtoint (%G__0xb44530_type* @G__0xb44530 to i64), i64* %RAX.i1404, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX.i1715, align 8
  store i64 400, i64* %RDX.i1921, align 8
  %9699 = add i64 %9645, -1040
  store i64 %9699, i64* %RSI.i2336, align 8
  %9700 = sext i32 %9674 to i64
  %9701 = mul nsw i64 %9700, 404
  %9702 = add i64 %9701, ptrtoint (%G__0xb44530_type* @G__0xb44530 to i64)
  %9703 = lshr i64 %9702, 63
  %9704 = add i64 %9701, add (i64 ptrtoint (%G__0xb44530_type* @G__0xb44530 to i64), i64 4)
  store i64 %9704, i64* %20, align 8
  %9705 = icmp eq i64 %9702, -4
  %9706 = zext i1 %9705 to i8
  store i8 %9706, i8* %12, align 1
  %9707 = trunc i64 %9704 to i32
  %9708 = and i32 %9707, 252
  %9709 = tail call i32 @llvm.ctpop.i32(i32 %9708)
  %9710 = trunc i32 %9709 to i8
  %9711 = and i8 %9710, 1
  %9712 = xor i8 %9711, 1
  store i8 %9712, i8* %13, align 1
  %9713 = xor i64 %9704, %9702
  %9714 = lshr i64 %9713, 4
  %9715 = trunc i64 %9714 to i8
  %9716 = and i8 %9715, 1
  store i8 %9716, i8* %14, align 1
  %9717 = icmp eq i64 %9704, 0
  %9718 = zext i1 %9717 to i8
  store i8 %9718, i8* %15, align 1
  %9719 = lshr i64 %9704, 63
  %9720 = trunc i64 %9719 to i8
  store i8 %9720, i8* %16, align 1
  %9721 = xor i64 %9719, %9703
  %9722 = add nuw nsw i64 %9721, %9719
  %9723 = icmp eq i64 %9722, 2
  %9724 = zext i1 %9723 to i8
  store i8 %9724, i8* %17, align 1
  store i64 %9704, i64* %RDI.i2173, align 8
  %9725 = load i64, i64* %RBP.i, align 8
  %9726 = add i64 %9725, -1224
  %9727 = load i64, i64* %RAX.i1404, align 8
  %9728 = add i64 %9698, 67
  store i64 %9728, i64* %3, align 8
  %9729 = inttoptr i64 %9726 to i64*
  store i64 %9727, i64* %9729, align 8
  %9730 = load i64, i64* %RBP.i, align 8
  %9731 = add i64 %9730, -1232
  %9732 = load i64, i64* %RCX.i1715, align 8
  %9733 = load i64, i64* %3, align 8
  %9734 = add i64 %9733, 7
  store i64 %9734, i64* %3, align 8
  %9735 = inttoptr i64 %9731 to i64*
  store i64 %9732, i64* %9735, align 8
  %9736 = load i64, i64* %3, align 8
  %9737 = add i64 %9736, -482656
  %9738 = add i64 %9736, 5
  %9739 = load i64, i64* %6, align 8
  %9740 = add i64 %9739, -8
  %9741 = inttoptr i64 %9740 to i64*
  store i64 %9738, i64* %9741, align 8
  store i64 %9740, i64* %6, align 8
  store i64 %9737, i64* %3, align 8
  %9742 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %MEMORY.73)
  %9743 = load i64, i64* %RBP.i, align 8
  %9744 = add i64 %9743, -8
  %9745 = load i64, i64* %3, align 8
  %9746 = add i64 %9745, 4
  store i64 %9746, i64* %3, align 8
  %9747 = inttoptr i64 %9744 to i32*
  %9748 = load i32, i32* %9747, align 4
  %9749 = sext i32 %9748 to i64
  %9750 = sext i32 %9748 to i128
  %9751 = and i128 %9750, -18446744073709551616
  %9752 = zext i64 %9749 to i128
  %9753 = or i128 %9751, %9752
  %9754 = mul nsw i128 %9753, 76
  %9755 = trunc i128 %9754 to i64
  store i64 %9755, i64* %RAX.i1404, align 8
  %9756 = sext i64 %9755 to i128
  %9757 = icmp ne i128 %9756, %9754
  %9758 = zext i1 %9757 to i8
  store i8 %9758, i8* %12, align 1
  %9759 = trunc i128 %9754 to i32
  %9760 = and i32 %9759, 252
  %9761 = tail call i32 @llvm.ctpop.i32(i32 %9760)
  %9762 = trunc i32 %9761 to i8
  %9763 = and i8 %9762, 1
  %9764 = xor i8 %9763, 1
  store i8 %9764, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %9765 = lshr i64 %9755, 63
  %9766 = trunc i64 %9765 to i8
  store i8 %9766, i8* %16, align 1
  store i8 %9758, i8* %17, align 1
  %9767 = add i64 %9743, -1232
  %9768 = add i64 %9745, 15
  store i64 %9768, i64* %3, align 8
  %9769 = inttoptr i64 %9767 to i64*
  %9770 = load i64, i64* %9769, align 8
  %9771 = add i64 %9755, %9770
  store i64 %9771, i64* %RCX.i1715, align 8
  %9772 = icmp ult i64 %9771, %9770
  %9773 = icmp ult i64 %9771, %9755
  %9774 = or i1 %9772, %9773
  %9775 = zext i1 %9774 to i8
  store i8 %9775, i8* %12, align 1
  %9776 = trunc i64 %9771 to i32
  %9777 = and i32 %9776, 255
  %9778 = tail call i32 @llvm.ctpop.i32(i32 %9777)
  %9779 = trunc i32 %9778 to i8
  %9780 = and i8 %9779, 1
  %9781 = xor i8 %9780, 1
  store i8 %9781, i8* %13, align 1
  %9782 = xor i64 %9755, %9770
  %9783 = xor i64 %9782, %9771
  %9784 = lshr i64 %9783, 4
  %9785 = trunc i64 %9784 to i8
  %9786 = and i8 %9785, 1
  store i8 %9786, i8* %14, align 1
  %9787 = icmp eq i64 %9771, 0
  %9788 = zext i1 %9787 to i8
  store i8 %9788, i8* %15, align 1
  %9789 = lshr i64 %9771, 63
  %9790 = trunc i64 %9789 to i8
  store i8 %9790, i8* %16, align 1
  %9791 = lshr i64 %9770, 63
  %9792 = xor i64 %9789, %9791
  %9793 = xor i64 %9789, %9765
  %9794 = add nuw nsw i64 %9792, %9793
  %9795 = icmp eq i64 %9794, 2
  %9796 = zext i1 %9795 to i8
  store i8 %9796, i8* %17, align 1
  %9797 = add i64 %9771, 4
  %9798 = add i64 %9745, 22
  store i64 %9798, i64* %3, align 8
  %9799 = inttoptr i64 %9797 to i32*
  %9800 = load i32, i32* %9799, align 4
  %9801 = zext i32 %9800 to i64
  store i64 %9801, i64* %21, align 8
  %9802 = load i32, i32* bitcast (%G_0xb63050_type* @G_0xb63050 to i32*), align 8
  %9803 = sext i32 %9802 to i64
  %9804 = sext i32 %9802 to i128
  %9805 = and i128 %9804, -18446744073709551616
  %9806 = zext i64 %9803 to i128
  %9807 = or i128 %9805, %9806
  %9808 = mul nsw i128 %9807, 404
  %9809 = trunc i128 %9808 to i64
  store i64 %9809, i64* %RAX.i1404, align 8
  %9810 = sext i64 %9809 to i128
  %9811 = icmp ne i128 %9810, %9808
  %9812 = zext i1 %9811 to i8
  store i8 %9812, i8* %12, align 1
  %9813 = trunc i128 %9808 to i32
  %9814 = and i32 %9813, 252
  %9815 = tail call i32 @llvm.ctpop.i32(i32 %9814)
  %9816 = trunc i32 %9815 to i8
  %9817 = and i8 %9816, 1
  %9818 = xor i8 %9817, 1
  store i8 %9818, i8* %13, align 1
  store i8 0, i8* %14, align 1
  store i8 0, i8* %15, align 1
  %9819 = lshr i64 %9809, 63
  %9820 = trunc i64 %9819 to i8
  store i8 %9820, i8* %16, align 1
  store i8 %9812, i8* %17, align 1
  %9821 = load i64, i64* %RBP.i, align 8
  %9822 = add i64 %9821, -1224
  %9823 = add i64 %9745, 44
  store i64 %9823, i64* %3, align 8
  %9824 = inttoptr i64 %9822 to i64*
  %9825 = load i64, i64* %9824, align 8
  %9826 = add i64 %9809, %9825
  store i64 %9826, i64* %RCX.i1715, align 8
  %9827 = inttoptr i64 %9826 to i32*
  %9828 = add i64 %9745, 50
  store i64 %9828, i64* %3, align 8
  store i32 %9800, i32* %9827, align 4
  %9829 = load i64, i64* %3, align 8
  %9830 = load i32, i32* bitcast (%G_0xb63050_type* @G_0xb63050 to i32*), align 8
  %9831 = add i32 %9830, 1
  %9832 = zext i32 %9831 to i64
  store i64 %9832, i64* %21, align 8
  %9833 = icmp eq i32 %9830, -1
  %9834 = icmp eq i32 %9831, 0
  %9835 = or i1 %9833, %9834
  %9836 = zext i1 %9835 to i8
  store i8 %9836, i8* %12, align 1
  %9837 = and i32 %9831, 255
  %9838 = tail call i32 @llvm.ctpop.i32(i32 %9837)
  %9839 = trunc i32 %9838 to i8
  %9840 = and i8 %9839, 1
  %9841 = xor i8 %9840, 1
  store i8 %9841, i8* %13, align 1
  %9842 = xor i32 %9831, %9830
  %9843 = lshr i32 %9842, 4
  %9844 = trunc i32 %9843 to i8
  %9845 = and i8 %9844, 1
  store i8 %9845, i8* %14, align 1
  %9846 = zext i1 %9834 to i8
  store i8 %9846, i8* %15, align 1
  %9847 = lshr i32 %9831, 31
  %9848 = trunc i32 %9847 to i8
  store i8 %9848, i8* %16, align 1
  %9849 = lshr i32 %9830, 31
  %9850 = xor i32 %9847, %9849
  %9851 = add nuw nsw i32 %9850, %9847
  %9852 = icmp eq i32 %9851, 2
  %9853 = zext i1 %9852 to i8
  store i8 %9853, i8* %17, align 1
  %9854 = add i64 %9829, 20
  store i64 %9854, i64* %3, align 8
  store i32 %9831, i32* bitcast (%G_0xb63050_type* @G_0xb63050 to i32*), align 8
  %.pre262 = load i64, i64* %RBP.i, align 8
  br label %block_.L_476e9b

block_.L_476e9b:                                  ; preds = %block_.L_476de4, %block_476df8, %block_476e06, %block_476dee
  %9855 = phi i64 [ %9659, %block_.L_476de4 ], [ %9673, %block_476dee ], [ %9698, %block_476df8 ], [ %9854, %block_476e06 ]
  %9856 = phi i64 [ %9645, %block_.L_476de4 ], [ %9645, %block_476dee ], [ %9645, %block_476df8 ], [ %.pre262, %block_476e06 ]
  %MEMORY.74 = phi %struct.Memory* [ %MEMORY.73, %block_.L_476de4 ], [ %MEMORY.73, %block_476dee ], [ %MEMORY.73, %block_476df8 ], [ %9742, %block_476e06 ]
  %9857 = add i64 %9856, -24
  %9858 = add i64 %9855, 5
  store i64 %9858, i64* %3, align 8
  %9859 = inttoptr i64 %9857 to i64*
  %9860 = load i64, i64* %9859, align 8
  store i8 0, i8* %12, align 1
  %9861 = trunc i64 %9860 to i32
  %9862 = and i32 %9861, 255
  %9863 = tail call i32 @llvm.ctpop.i32(i32 %9862)
  %9864 = trunc i32 %9863 to i8
  %9865 = and i8 %9864, 1
  %9866 = xor i8 %9865, 1
  store i8 %9866, i8* %13, align 1
  store i8 0, i8* %14, align 1
  %9867 = icmp eq i64 %9860, 0
  %9868 = zext i1 %9867 to i8
  store i8 %9868, i8* %15, align 1
  %9869 = lshr i64 %9860, 63
  %9870 = trunc i64 %9869 to i8
  store i8 %9870, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v387 = select i1 %9867, i64 136, i64 11
  %9871 = add i64 %9855, %.v387
  store i64 %9871, i64* %3, align 8
  br i1 %9867, label %block_.L_476f23, label %block_476ea6

block_476ea6:                                     ; preds = %block_.L_476e9b
  %9872 = add i64 %9871, 4
  store i64 %9872, i64* %3, align 8
  %9873 = load i64, i64* %9859, align 8
  store i64 %9873, i64* %RAX.i1404, align 8
  %9874 = add i64 %9871, 10
  store i64 %9874, i64* %3, align 8
  %9875 = inttoptr i64 %9873 to i32*
  store i32 0, i32* %9875, align 4
  %9876 = load i64, i64* %RBP.i, align 8
  %9877 = add i64 %9876, -1140
  %9878 = load i64, i64* %3, align 8
  %9879 = add i64 %9878, 10
  store i64 %9879, i64* %3, align 8
  %9880 = inttoptr i64 %9877 to i32*
  store i32 21, i32* %9880, align 4
  %.pre263 = load i64, i64* %3, align 8
  br label %block_.L_476eba

block_.L_476eba:                                  ; preds = %block_.L_476f05, %block_476ea6
  %9881 = phi i64 [ %10033, %block_.L_476f05 ], [ %.pre263, %block_476ea6 ]
  %9882 = load i64, i64* %RBP.i, align 8
  %9883 = add i64 %9882, -1140
  %9884 = add i64 %9881, 10
  store i64 %9884, i64* %3, align 8
  %9885 = inttoptr i64 %9883 to i32*
  %9886 = load i32, i32* %9885, align 4
  %9887 = add i32 %9886, -400
  %9888 = icmp ult i32 %9886, 400
  %9889 = zext i1 %9888 to i8
  store i8 %9889, i8* %12, align 1
  %9890 = and i32 %9887, 255
  %9891 = tail call i32 @llvm.ctpop.i32(i32 %9890)
  %9892 = trunc i32 %9891 to i8
  %9893 = and i8 %9892, 1
  %9894 = xor i8 %9893, 1
  store i8 %9894, i8* %13, align 1
  %9895 = xor i32 %9886, 16
  %9896 = xor i32 %9895, %9887
  %9897 = lshr i32 %9896, 4
  %9898 = trunc i32 %9897 to i8
  %9899 = and i8 %9898, 1
  store i8 %9899, i8* %14, align 1
  %9900 = icmp eq i32 %9887, 0
  %9901 = zext i1 %9900 to i8
  store i8 %9901, i8* %15, align 1
  %9902 = lshr i32 %9887, 31
  %9903 = trunc i32 %9902 to i8
  store i8 %9903, i8* %16, align 1
  %9904 = lshr i32 %9886, 31
  %9905 = xor i32 %9902, %9904
  %9906 = add nuw nsw i32 %9905, %9904
  %9907 = icmp eq i32 %9906, 2
  %9908 = zext i1 %9907 to i8
  store i8 %9908, i8* %17, align 1
  %9909 = icmp ne i8 %9903, 0
  %9910 = xor i1 %9909, %9907
  %.v388 = select i1 %9910, i64 16, i64 100
  %9911 = add i64 %9881, %.v388
  store i64 %9911, i64* %3, align 8
  br i1 %9910, label %block_476eca, label %block_.L_476f1e

block_476eca:                                     ; preds = %block_.L_476eba
  %9912 = add i64 %9911, 7
  store i64 %9912, i64* %3, align 8
  %9913 = load i32, i32* %9885, align 4
  %9914 = sext i32 %9913 to i64
  store i64 %9914, i64* %RAX.i1404, align 8
  %9915 = add nsw i64 %9914, 12099168
  %9916 = add i64 %9911, 15
  store i64 %9916, i64* %3, align 8
  %9917 = inttoptr i64 %9915 to i8*
  %9918 = load i8, i8* %9917, align 1
  %9919 = zext i8 %9918 to i64
  store i64 %9919, i64* %RCX.i1715, align 8
  %9920 = zext i8 %9918 to i32
  %9921 = add nsw i32 %9920, -3
  %9922 = icmp ult i8 %9918, 3
  %9923 = zext i1 %9922 to i8
  store i8 %9923, i8* %12, align 1
  %9924 = and i32 %9921, 255
  %9925 = tail call i32 @llvm.ctpop.i32(i32 %9924)
  %9926 = trunc i32 %9925 to i8
  %9927 = and i8 %9926, 1
  %9928 = xor i8 %9927, 1
  store i8 %9928, i8* %13, align 1
  %9929 = xor i32 %9921, %9920
  %9930 = lshr i32 %9929, 4
  %9931 = trunc i32 %9930 to i8
  %9932 = and i8 %9931, 1
  store i8 %9932, i8* %14, align 1
  %9933 = icmp eq i32 %9921, 0
  %9934 = zext i1 %9933 to i8
  store i8 %9934, i8* %15, align 1
  %9935 = lshr i32 %9921, 31
  %9936 = trunc i32 %9935 to i8
  store i8 %9936, i8* %16, align 1
  store i8 0, i8* %17, align 1
  %.v389 = select i1 %9933, i64 59, i64 24
  %9937 = add i64 %9911, %.v389
  store i64 %9937, i64* %3, align 8
  br i1 %9933, label %block_.L_476f05, label %block_476ee2

block_476ee2:                                     ; preds = %block_476eca
  %9938 = add i64 %9937, 7
  store i64 %9938, i64* %3, align 8
  %9939 = load i32, i32* %9885, align 4
  %9940 = sext i32 %9939 to i64
  store i64 %9940, i64* %RAX.i1404, align 8
  %9941 = add nsw i64 %9940, -1040
  %9942 = add i64 %9941, %9882
  %9943 = add i64 %9937, 15
  store i64 %9943, i64* %3, align 8
  %9944 = inttoptr i64 %9942 to i8*
  %9945 = load i8, i8* %9944, align 1
  %9946 = sext i8 %9945 to i64
  %9947 = and i64 %9946, 4294967295
  store i64 %9947, i64* %RCX.i1715, align 8
  %9948 = sext i8 %9945 to i32
  %9949 = add nsw i32 %9948, -1
  %9950 = icmp eq i8 %9945, 0
  %9951 = zext i1 %9950 to i8
  store i8 %9951, i8* %12, align 1
  %9952 = and i32 %9949, 255
  %9953 = tail call i32 @llvm.ctpop.i32(i32 %9952)
  %9954 = trunc i32 %9953 to i8
  %9955 = and i8 %9954, 1
  %9956 = xor i8 %9955, 1
  store i8 %9956, i8* %13, align 1
  %9957 = xor i32 %9949, %9948
  %9958 = lshr i32 %9957, 4
  %9959 = trunc i32 %9958 to i8
  %9960 = and i8 %9959, 1
  store i8 %9960, i8* %14, align 1
  %9961 = icmp eq i32 %9949, 0
  %9962 = zext i1 %9961 to i8
  store i8 %9962, i8* %15, align 1
  %9963 = lshr i32 %9949, 31
  %9964 = trunc i32 %9963 to i8
  store i8 %9964, i8* %16, align 1
  %9965 = lshr i32 %9948, 31
  %9966 = xor i32 %9963, %9965
  %9967 = add nuw nsw i32 %9966, %9965
  %9968 = icmp eq i32 %9967, 2
  %9969 = zext i1 %9968 to i8
  store i8 %9969, i8* %17, align 1
  %.v390 = select i1 %9961, i64 24, i64 35
  %9970 = add i64 %9937, %.v390
  store i64 %9970, i64* %3, align 8
  br i1 %9961, label %block_476efa, label %block_.L_476f05

block_476efa:                                     ; preds = %block_476ee2
  %9971 = add i64 %9882, -24
  %9972 = add i64 %9970, 4
  store i64 %9972, i64* %3, align 8
  %9973 = inttoptr i64 %9971 to i64*
  %9974 = load i64, i64* %9973, align 8
  store i64 %9974, i64* %RAX.i1404, align 8
  %9975 = add i64 %9970, 6
  store i64 %9975, i64* %3, align 8
  %9976 = inttoptr i64 %9974 to i32*
  %9977 = load i32, i32* %9976, align 4
  %9978 = add i32 %9977, 1
  %9979 = zext i32 %9978 to i64
  store i64 %9979, i64* %RCX.i1715, align 8
  %9980 = icmp eq i32 %9977, -1
  %9981 = icmp eq i32 %9978, 0
  %9982 = or i1 %9980, %9981
  %9983 = zext i1 %9982 to i8
  store i8 %9983, i8* %12, align 1
  %9984 = and i32 %9978, 255
  %9985 = tail call i32 @llvm.ctpop.i32(i32 %9984)
  %9986 = trunc i32 %9985 to i8
  %9987 = and i8 %9986, 1
  %9988 = xor i8 %9987, 1
  store i8 %9988, i8* %13, align 1
  %9989 = xor i32 %9978, %9977
  %9990 = lshr i32 %9989, 4
  %9991 = trunc i32 %9990 to i8
  %9992 = and i8 %9991, 1
  store i8 %9992, i8* %14, align 1
  %9993 = zext i1 %9981 to i8
  store i8 %9993, i8* %15, align 1
  %9994 = lshr i32 %9978, 31
  %9995 = trunc i32 %9994 to i8
  store i8 %9995, i8* %16, align 1
  %9996 = lshr i32 %9977, 31
  %9997 = xor i32 %9994, %9996
  %9998 = add nuw nsw i32 %9997, %9994
  %9999 = icmp eq i32 %9998, 2
  %10000 = zext i1 %9999 to i8
  store i8 %10000, i8* %17, align 1
  %10001 = add i64 %9970, 11
  store i64 %10001, i64* %3, align 8
  store i32 %9978, i32* %9976, align 4
  %.pre264 = load i64, i64* %3, align 8
  %.pre265 = load i64, i64* %RBP.i, align 8
  br label %block_.L_476f05

block_.L_476f05:                                  ; preds = %block_476ee2, %block_476efa, %block_476eca
  %10002 = phi i64 [ %.pre265, %block_476efa ], [ %9882, %block_476ee2 ], [ %9882, %block_476eca ]
  %10003 = phi i64 [ %.pre264, %block_476efa ], [ %9970, %block_476ee2 ], [ %9937, %block_476eca ]
  %10004 = add i64 %10002, -1140
  %10005 = add i64 %10003, 11
  store i64 %10005, i64* %3, align 8
  %10006 = inttoptr i64 %10004 to i32*
  %10007 = load i32, i32* %10006, align 4
  %10008 = add i32 %10007, 1
  %10009 = zext i32 %10008 to i64
  store i64 %10009, i64* %RAX.i1404, align 8
  %10010 = icmp eq i32 %10007, -1
  %10011 = icmp eq i32 %10008, 0
  %10012 = or i1 %10010, %10011
  %10013 = zext i1 %10012 to i8
  store i8 %10013, i8* %12, align 1
  %10014 = and i32 %10008, 255
  %10015 = tail call i32 @llvm.ctpop.i32(i32 %10014)
  %10016 = trunc i32 %10015 to i8
  %10017 = and i8 %10016, 1
  %10018 = xor i8 %10017, 1
  store i8 %10018, i8* %13, align 1
  %10019 = xor i32 %10008, %10007
  %10020 = lshr i32 %10019, 4
  %10021 = trunc i32 %10020 to i8
  %10022 = and i8 %10021, 1
  store i8 %10022, i8* %14, align 1
  %10023 = zext i1 %10011 to i8
  store i8 %10023, i8* %15, align 1
  %10024 = lshr i32 %10008, 31
  %10025 = trunc i32 %10024 to i8
  store i8 %10025, i8* %16, align 1
  %10026 = lshr i32 %10007, 31
  %10027 = xor i32 %10024, %10026
  %10028 = add nuw nsw i32 %10027, %10024
  %10029 = icmp eq i32 %10028, 2
  %10030 = zext i1 %10029 to i8
  store i8 %10030, i8* %17, align 1
  %10031 = add i64 %10003, 20
  store i64 %10031, i64* %3, align 8
  store i32 %10008, i32* %10006, align 4
  %10032 = load i64, i64* %3, align 8
  %10033 = add i64 %10032, -95
  store i64 %10033, i64* %3, align 8
  br label %block_.L_476eba

block_.L_476f1e:                                  ; preds = %block_.L_476eba
  %10034 = add i64 %9911, 5
  store i64 %10034, i64* %3, align 8
  br label %block_.L_476f23

block_.L_476f23:                                  ; preds = %block_.L_476f1e, %block_.L_476e9b
  %10035 = phi i64 [ %10034, %block_.L_476f1e ], [ %9871, %block_.L_476e9b ]
  %10036 = phi i64 [ %9882, %block_.L_476f1e ], [ %9856, %block_.L_476e9b ]
  %10037 = add i64 %10036, -52
  %10038 = add i64 %10035, 3
  store i64 %10038, i64* %3, align 8
  %10039 = inttoptr i64 %10037 to i32*
  %10040 = load i32, i32* %10039, align 4
  %10041 = zext i32 %10040 to i64
  store i64 %10041, i64* %RAX.i1404, align 8
  %10042 = add i64 %10036, -4
  %10043 = add i64 %10035, 6
  store i64 %10043, i64* %3, align 8
  %10044 = inttoptr i64 %10042 to i32*
  store i32 %10040, i32* %10044, align 4
  %.pre266 = load i64, i64* %3, align 8
  br label %block_.L_476f29

block_.L_476f29:                                  ; preds = %block_.L_476f23, %block_47592f
  %10045 = phi i64 [ %.pre266, %block_.L_476f23 ], [ %443, %block_47592f ]
  %MEMORY.78 = phi %struct.Memory* [ %MEMORY.74, %block_.L_476f23 ], [ %160, %block_47592f ]
  %10046 = load i64, i64* %RBP.i, align 8
  %10047 = add i64 %10046, -4
  %10048 = add i64 %10045, 3
  store i64 %10048, i64* %3, align 8
  %10049 = inttoptr i64 %10047 to i32*
  %10050 = load i32, i32* %10049, align 4
  %10051 = zext i32 %10050 to i64
  store i64 %10051, i64* %RAX.i1404, align 8
  %10052 = load i64, i64* %6, align 8
  %10053 = add i64 %10052, 1232
  store i64 %10053, i64* %6, align 8
  %10054 = icmp ugt i64 %10052, -1233
  %10055 = zext i1 %10054 to i8
  store i8 %10055, i8* %12, align 1
  %10056 = trunc i64 %10053 to i32
  %10057 = and i32 %10056, 255
  %10058 = tail call i32 @llvm.ctpop.i32(i32 %10057)
  %10059 = trunc i32 %10058 to i8
  %10060 = and i8 %10059, 1
  %10061 = xor i8 %10060, 1
  store i8 %10061, i8* %13, align 1
  %10062 = xor i64 %10052, 16
  %10063 = xor i64 %10062, %10053
  %10064 = lshr i64 %10063, 4
  %10065 = trunc i64 %10064 to i8
  %10066 = and i8 %10065, 1
  store i8 %10066, i8* %14, align 1
  %10067 = icmp eq i64 %10053, 0
  %10068 = zext i1 %10067 to i8
  store i8 %10068, i8* %15, align 1
  %10069 = lshr i64 %10053, 63
  %10070 = trunc i64 %10069 to i8
  store i8 %10070, i8* %16, align 1
  %10071 = lshr i64 %10052, 63
  %10072 = xor i64 %10069, %10071
  %10073 = add nuw nsw i64 %10072, %10069
  %10074 = icmp eq i64 %10073, 2
  %10075 = zext i1 %10074 to i8
  store i8 %10075, i8* %17, align 1
  %10076 = add i64 %10045, 11
  store i64 %10076, i64* %3, align 8
  %10077 = add i64 %10052, 1240
  %10078 = inttoptr i64 %10053 to i64*
  %10079 = load i64, i64* %10078, align 8
  store i64 %10079, i64* %RBP.i, align 8
  store i64 %10077, i64* %6, align 8
  %10080 = add i64 %10045, 12
  store i64 %10080, i64* %3, align 8
  %10081 = inttoptr i64 %10077 to i64*
  %10082 = load i64, i64* %10081, align 8
  store i64 %10082, i64* %3, align 8
  %10083 = add i64 %10052, 1248
  store i64 %10083, i64* %6, align 8
  ret %struct.Memory* %MEMORY.78
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_pushq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %3, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rsp___rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RBP, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subq__0x4d0___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, -1232
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ult i64 %3, 1232
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %29
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_xorl__eax___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 2
  store i64 %4, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x190___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 400, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x410__rbp____r10(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1040
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R10, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x280__rbp____r11(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -640
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %R11, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 6
  store i64 %5, i64* %PC, align 8
  store i64 3, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edi__MINUS0x8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -8
  %6 = load i32, i32* %EDI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__esi__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -12
  %6 = load i32, i32* %ESI, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -16
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rcx_1____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0xe4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -228
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0xe4__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R8D, align 4
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %6, -228
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sub i32 %5, %11
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %4, align 8
  %14 = icmp ult i32 %5, %11
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1
  %17 = and i32 %12, 255
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = xor i32 %11, %5
  %24 = xor i32 %23, %12
  %25 = lshr i32 %24, 4
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1
  %29 = icmp eq i32 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1
  %32 = lshr i32 %12, 31
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1
  %35 = lshr i32 %5, 31
  %36 = lshr i32 %11, 31
  %37 = xor i32 %36, %35
  %38 = xor i32 %32, %35
  %39 = add nuw nsw i32 %38, %37
  %40 = icmp eq i32 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0xe8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -232
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r11___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %3 = load i64, i64* %R11, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r9___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %R9, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r10__MINUS0x480__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1152
  %5 = load i64, i64* %R10, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r9__MINUS0x488__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1160
  %5 = load i64, i64* %R9, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x48c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1164
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.memset_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x480__rbp____rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1152
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x48c__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1164
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x488__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1160
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x15__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 21, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x190__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -400
  %10 = icmp ult i32 %8, 400
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4758fd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rax_1____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -3
  %8 = icmp ult i32 %4, 3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4758ea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb0eff0___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb0eff0_type* @G__0xb0eff0 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x30__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x17c___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 380
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rcx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xc__rax____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x30__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -48
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4758ea(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.is_same_dragon(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 1, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x280__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -640
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.mark_string(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4758ef(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x30__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -48
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47587c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb4bd20___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0fe0___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__rax____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___rax___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__0x30__rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47593b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476f29(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_0xab0fe0___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* bitcast (%G_0xab0fe0_type* @G_0xab0fe0 to i64*), align 8
  store i64 %5, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rsi___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RAX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rax___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x2c__rdx____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RDX, align 8
  %6 = add i64 %5, 44
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_475a8e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDI, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__rdi____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = add i64 %3, 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___rsi___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RSI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RSI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rsi___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RDX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0x4__rdx__rsi_4____rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, 4
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 5
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x68___rdx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 104
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 248
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %RCX, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq___rcx____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RCX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = sext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rcx___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RCX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x8__rax____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r8d__MINUS0x414__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1044
  %6 = load i32, i32* %R8D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x414__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1044
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rax_1____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %4, 12099168
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 9
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xe4__rbp____r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %R8D, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -228
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475a7b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_475a76(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475a63(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_475a63(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x414__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1044
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_leaq_MINUS0x410__rbp____rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1040
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  store i64 %4, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475a68(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4759f2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475a7b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475a80(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x2c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -44
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475942(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0xc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475ae6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xc__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -12
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475ab2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475ada(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x58192c___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x58192c_type* @G__0x58192c to i64), i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x7c___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 124, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x5819e3___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x5819e3_type* @G__0x5819e3 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 4294967295, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax___r8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i32, i32* %EAX, align 4
  %6 = zext i32 %5 to i64
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i64 %6, i64* %4, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.abortgo(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x1__MINUS0x410__rbp__rax_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %3, -1040
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  store i8 1, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_0x7ae438___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %8 = sub i32 %4, %7
  %9 = icmp ult i32 %4, %7
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %8, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %4
  %19 = xor i32 %18, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %8, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %8, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %4, 31
  %31 = lshr i32 %7, 31
  %32 = xor i32 %31, %30
  %33 = xor i32 %27, %30
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_475b8c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffffff__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, 1
  %10 = icmp ne i32 %8, -1
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %31, 1
  %33 = xor i32 %28, %31
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475b19(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475b8c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_475b79(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0x14__MINUS0x24__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, 20
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967292
  store i64 %12, i64* %RAX, align 8
  %13 = mul i64 %9, 85899345920
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 252
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x15___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 21
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -22
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x28__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpb__0x0__MINUS0x410__rbp__rcx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %3, -1040
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %10 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = icmp eq i8 %10, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i8 %10, 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475b66(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x80__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -128
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xdc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -220
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475b79(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475b6b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475b20(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475b7e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -36
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475af7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x7ae438___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 7
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0x7ae438_type* @G_0x7ae438 to i32*), align 8
  %6 = zext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x24__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_475c25(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xffffffff__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, 1
  %10 = icmp ne i32 %8, -1
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %31, 1
  %33 = xor i32 %28, %31
  %34 = add nuw nsw i32 %33, %32
  %35 = icmp eq i32 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475bbf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475c25(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_475c12(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475bff(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xe0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -224
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475c12(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475c04(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475bc6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475c17(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0xffffffff___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ne i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = xor i32 %27, 1
  %33 = add nuw nsw i32 %31, %32
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475ba3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x14___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 20, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__ecx___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -128
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x490__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1168
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cltd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %7 = bitcast %union.anon* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = lshr i64 %9, 32
  store i64 %10, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x490__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__ecx(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xe0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -224
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_475e12(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_xorps__xmm0___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %6, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x418__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1048
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm0__MINUS0x41c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1052
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x494__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1172
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x494__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1172
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x420__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1056
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__eax___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp__rsi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -128
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, 0
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %7, %6
  %19 = lshr i32 %18, 4
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i32 %7, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i32 %7, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i32 %6, 31
  %30 = xor i32 %26, %29
  %31 = add nuw nsw i32 %30, %29
  %32 = icmp eq i32 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x424__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1060
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x420__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1056
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %RDX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RDX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x1c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_475da8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x20__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_475d95(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0x14__MINUS0x1c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -28
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, 20
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967292
  store i64 %12, i64* %RAX, align 8
  %13 = mul i64 %9, 85899345920
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 252
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_MINUS0x20__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 3
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %10, %8
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %11, %8
  %14 = icmp ult i32 %11, %10
  %15 = or i1 %13, %14
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = xor i32 %10, %8
  %25 = xor i32 %24, %11
  %26 = lshr i32 %25, 4
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1
  %30 = icmp eq i32 %11, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %11, 31
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1
  %36 = lshr i32 %8, 31
  %37 = lshr i32 %10, 31
  %38 = xor i32 %33, %36
  %39 = xor i32 %33, %37
  %40 = add nuw nsw i32 %38, %39
  %41 = icmp eq i32 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475d82(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x424__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1060
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__eax___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x420__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1056
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__eax___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divss__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast %union.VectorReg* %4 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = extractelement <2 x float> %9, i32 0
  %16 = extractelement <2 x float> %14, i32 0
  %17 = fdiv float %15, %16
  %18 = bitcast [32 x %union.VectorReg]* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %9 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %5, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %12, i32 0
  %24 = bitcast i64* %10 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %12, i32 1
  %26 = getelementptr inbounds i8, i8* %5, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm0__MINUS0x428__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1064
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x418__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1048
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475d5d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_MINUS0x428__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1064
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_MINUS0x41c__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1052
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomiss__xmm0___xmm1(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = bitcast %union.VectorReg* %4 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 1
  %9 = extractelement <2 x float> %8, i32 0
  %10 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 1
  %12 = extractelement <2 x float> %11, i32 0
  %13 = fcmp uno float %9, %12
  br i1 %13, label %14, label %24

; <label>:14:                                     ; preds = %block_400488
  %15 = fadd float %9, %12
  %16 = bitcast float %15 to i32
  %17 = and i32 %16, 2143289344
  %18 = icmp eq i32 %17, 2139095040
  %19 = and i32 %16, 4194303
  %20 = icmp ne i32 %19, 0
  %21 = and i1 %18, %20
  br i1 %21, label %22, label %30

; <label>:22:                                     ; preds = %14
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = fcmp ogt float %9, %12
  br i1 %25, label %30, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp olt float %9, %12
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %26
  %29 = fcmp oeq float %9, %12
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %28, %26, %24, %14
  %31 = phi i8 [ 0, %24 ], [ 0, %26 ], [ 1, %28 ], [ 1, %14 ]
  %32 = phi i8 [ 0, %24 ], [ 0, %26 ], [ 0, %28 ], [ 1, %14 ]
  %33 = phi i8 [ 0, %24 ], [ 1, %26 ], [ 0, %28 ], [ 1, %14 ]
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %30, %28
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %40, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %37, %22
  %41 = phi %struct.Memory* [ %23, %22 ], [ %2, %37 ]
  ret %struct.Memory* %41
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_475d7d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x418__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1048
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475d82(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475d87(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -32
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475ce6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475d9a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x1c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -28
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475cd0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x418__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1048
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475dc5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475ded(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xaf___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 175, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0x5819f6___rdx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0x5819f6_type* @G__0x5819f6 to i64), i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x418__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1048
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd4__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x80__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -128
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475c2f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_475e72(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0x14__MINUS0xdc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, 20
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967292
  store i64 %12, i64* %RAX, align 8
  %13 = mul i64 %9, 85899345920
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 252
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475e5f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -208
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475e72(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475e64(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475e1f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd0__rbp__rdx_4____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RDX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -208
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x498__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1176
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x498__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1176
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476067(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x42c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm0__MINUS0x430__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1072
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x49c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1180
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x49c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1180
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x434__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1076
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd0__rbp__rsi_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -208
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x438__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1080
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x434__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1076
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_475ffa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x20__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -32
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jl_.L_475fe7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off1, i64 %rel_off2
  %12 = add i64 %.v, %3
  store i64 %12, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475fd4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x438__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1080
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl_MINUS0x434__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1076
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = trunc i64 %3 to i32
  %9 = inttoptr i64 %5 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %8, %10
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RAX, align 8
  %13 = icmp ult i32 %8, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = and i32 %11, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16)
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1
  %22 = xor i32 %10, %8
  %23 = xor i32 %22, %11
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1
  %28 = icmp eq i32 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %11, 31
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %8, 31
  %35 = lshr i32 %10, 31
  %36 = xor i32 %35, %34
  %37 = xor i32 %31, %34
  %38 = add nuw nsw i32 %37, %36
  %39 = icmp eq i32 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm0__MINUS0x43c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1084
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x42c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_475faf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_MINUS0x43c__rbp____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1084
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_ucomiss_MINUS0x430__rbp____xmm0(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1072
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  %12 = load float, float* %11, align 4
  %13 = fcmp uno float %10, %12
  br i1 %13, label %14, label %24

; <label>:14:                                     ; preds = %block_400488
  %15 = fadd float %10, %12
  %16 = bitcast float %15 to i32
  %17 = and i32 %16, 2143289344
  %18 = icmp eq i32 %17, 2139095040
  %19 = and i32 %16, 4194303
  %20 = icmp ne i32 %19, 0
  %21 = and i1 %18, %20
  br i1 %21, label %22, label %30

; <label>:22:                                     ; preds = %14
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %7, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = fcmp ogt float %10, %12
  br i1 %25, label %30, label %26

; <label>:26:                                     ; preds = %24
  %27 = fcmp olt float %10, %12
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %26
  %29 = fcmp oeq float %10, %12
  br i1 %29, label %30, label %37

; <label>:30:                                     ; preds = %28, %26, %24, %14
  %31 = phi i8 [ 0, %24 ], [ 0, %26 ], [ 1, %28 ], [ 1, %14 ]
  %32 = phi i8 [ 0, %24 ], [ 0, %26 ], [ 0, %28 ], [ 1, %14 ]
  %33 = phi i8 [ 0, %24 ], [ 1, %26 ], [ 0, %28 ], [ 1, %14 ]
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %32, i8* %35, align 1
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %36, align 1
  br label %37

; <label>:37:                                     ; preds = %30, %28
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %40, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %37, %22
  %41 = phi %struct.Memory* [ %23, %22 ], [ %2, %37 ]
  ret %struct.Memory* %41
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jbe_.L_475fcf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = or i8 %7, %5
  %9 = icmp ne i8 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %9, i64 %rel_off1, i64 %rel_off2
  %11 = add i64 %.v, %3
  store i64 %11, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x42c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1068
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475fd4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475fd9(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475f42(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475fec(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475f26(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x42c__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476017(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47603f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xcf___esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 207, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x42c__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1068
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0xd8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd0__rbp__rcx_4_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = load i64, i64* %RCX, align 8
  %6 = shl i64 %5, 2
  %7 = add i64 %4, -208
  %8 = add i64 %7, %6
  %9 = load i32, i32* %EAX, align 4
  %10 = load i64, i64* %PC, align 8
  %11 = add i64 %10, 7
  store i64 %11, i64* %PC, align 8
  %12 = inttoptr i64 %8 to i32*
  store i32 %9, i32* %12, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0xd8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -216
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_475e7c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4a0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1184
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4a0__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1184
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx__MINUS0x28__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -40
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd0__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4a4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1188
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__edx___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = zext i32 %4 to i64
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i64 %5, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4a4__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1188
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__esi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ESI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__edx___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = load i32, i32* %ECX, align 4
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  %9 = sub i32 %5, %6
  %10 = icmp ult i32 %5, %6
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %6, %5
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = lshr i32 %6, 31
  %33 = xor i32 %32, %31
  %34 = xor i32 %28, %31
  %35 = add nuw nsw i32 %34, %33
  %36 = icmp eq i32 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_4760d6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x1__MINUS0x410__rbp__rcx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %3, -1040
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  store i8 1, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476086(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4a8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1192
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4a8__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1192
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd8__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -216
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq__edx___rsi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %4 = load i32, i32* %EDX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = sext i32 %4 to i64
  store i64 %7, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd0__rbp__rsi_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -208
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4ac__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1196
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4ac__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1196
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

define %struct.Memory* @routine_idivl__edi(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EDI, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %8 = bitcast %union.anon* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %12 = bitcast %union.anon* %11 to i32*
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = sext i32 %4 to i64
  %16 = shl nuw i64 %14, 32
  %17 = or i64 %16, %10
  %18 = sdiv i64 %17, %15
  %19 = shl i64 %18, 32
  %20 = ashr exact i64 %19, 32
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %block_400488
  %23 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6, %struct.Memory* %2)
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:24:                                     ; preds = %block_400488
  %25 = srem i64 %17, %15
  %26 = getelementptr inbounds %union.anon, %union.anon* %7, i64 0, i32 0
  %27 = and i64 %18, 4294967295
  store i64 %27, i64* %26, align 8
  %28 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %29 = and i64 %25, 4294967295
  store i64 %29, i64* %28, align 8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %30, align 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %34, align 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %35, align 1
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %24, %22
  %36 = phi %struct.Memory* [ %23, %22 ], [ %2, %24 ]
  ret %struct.Memory* %36
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_47615f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imull__0x14__MINUS0xe0__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = mul nsw i64 %9, 20
  %11 = trunc i64 %10 to i32
  %12 = and i64 %10, 4294967292
  store i64 %12, i64* %RAX, align 8
  %13 = mul i64 %9, 85899345920
  %14 = ashr exact i64 %13, 32
  %15 = icmp ne i64 %14, %10
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %11, 252
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18)
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %24, align 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %25, align 1
  %26 = lshr i32 %11, 31
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %16, i8* %29, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476102(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xdc__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -220
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476469(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0x440__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1088
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0xffffffff__MINUS0x444__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1092
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 -1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xd4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -212
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4762cd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x2c__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -128
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4b0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1200
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4b0__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1200
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x24__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -36
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_4762ba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6cea2__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x6cea2__rip__type* @G_0x6cea2__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4b4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1204
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4b4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1204
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm1__MINUS0x448__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1096
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl__edx___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = bitcast %union.VectorReg* %4 to i8*
  %6 = load i32, i32* %EDX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 4
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = sitofp i32 %6 to float
  %15 = bitcast %union.VectorReg* %4 to float*
  store float %14, float* %15, align 1
  %16 = extractelement <2 x i32> %10, i32 1
  %17 = getelementptr inbounds i8, i8* %5, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 1
  %19 = extractelement <2 x i32> %13, i32 0
  %20 = bitcast i64* %11 to i32*
  store i32 %19, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 1
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %21, i32* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm1__MINUS0x44c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x80__rbp__rsi_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RSI, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -128
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 4
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm1__MINUS0x450__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1104
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm1__MINUS0x454__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1108
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd_MINUS0x44c__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1100
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to float*
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_addsd__xmm1___xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = bitcast [32 x %union.VectorReg]* %3 to double*
  %8 = load double, double* %7, align 1
  %9 = bitcast %union.VectorReg* %4 to double*
  %10 = load double, double* %9, align 1
  %11 = fadd double %8, %10
  store double %11, double* %7, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtsi2ssl_MINUS0x24__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -36
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 5
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %3 to <2 x i32>*
  %10 = load <2 x i32>, <2 x i32>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = inttoptr i64 %6 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %15 to float
  %17 = bitcast %union.VectorReg* %3 to float*
  store float %16, float* %17, align 1
  %18 = extractelement <2 x i32> %10, i32 1
  %19 = getelementptr inbounds i8, i8* %4, i64 4
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 1
  %21 = extractelement <2 x i32> %13, i32 0
  %22 = bitcast i64* %11 to i32*
  store i32 %21, i32* %22, align 1
  %23 = extractelement <2 x i32> %13, i32 1
  %24 = getelementptr inbounds i8, i8* %4, i64 12
  %25 = bitcast i8* %24 to i32*
  store i32 %23, i32* %25, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subss_MINUS0x448__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1096
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %3 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = inttoptr i64 %6 to float*
  %15 = load float, float* %14, align 4
  %16 = extractelement <2 x float> %10, i32 0
  %17 = fsub float %16, %15
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %10 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %13, i32 0
  %24 = bitcast i64* %11 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %13, i32 1
  %26 = getelementptr inbounds i8, i8* %4, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_MINUS0x454__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1108
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subss_MINUS0x44c__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1100
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %3 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = inttoptr i64 %6 to float*
  %15 = load float, float* %14, align 4
  %16 = extractelement <2 x float> %10, i32 0
  %17 = fsub float %16, %15
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %10 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %13, i32 0
  %24 = bitcast i64* %11 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %13, i32 1
  %26 = getelementptr inbounds i8, i8* %4, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_mulss__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = bitcast %union.VectorReg* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast %union.VectorReg* %4 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = extractelement <2 x float> %9, i32 0
  %16 = extractelement <2 x float> %14, i32 0
  %17 = fmul float %15, %16
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %9 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %5, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %12, i32 0
  %24 = bitcast i64* %10 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %12, i32 1
  %26 = getelementptr inbounds i8, i8* %5, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_MINUS0x450__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1104
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subss_MINUS0x448__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1096
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %3 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = inttoptr i64 %6 to float*
  %15 = load float, float* %14, align 4
  %16 = extractelement <2 x float> %10, i32 0
  %17 = fsub float %16, %15
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %10 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %13, i32 0
  %24 = bitcast i64* %11 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %13, i32 1
  %26 = getelementptr inbounds i8, i8* %4, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_divss__xmm2___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %5 = bitcast %union.VectorReg* %3 to i8*
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %11 = bitcast i64* %10 to <2 x i32>*
  %12 = load <2 x i32>, <2 x i32>* %11, align 1
  %13 = bitcast %union.VectorReg* %4 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 1
  %15 = extractelement <2 x float> %9, i32 0
  %16 = extractelement <2 x float> %14, i32 0
  %17 = fdiv float %15, %16
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %9 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %5, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %12, i32 0
  %24 = bitcast i64* %10 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %12, i32 1
  %26 = getelementptr inbounds i8, i8* %5, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd__xmm1___xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 1
  %8 = extractelement <2 x float> %7, i32 0
  %9 = fpext float %8 to double
  %10 = bitcast %union.VectorReg* %3 to double*
  store double %9, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.ceil_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cvttsd2si__xmm0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = bitcast %union.VectorReg* %3 to double*
  %7 = load double, double* %6, align 1
  %8 = tail call double @llvm.trunc.f64(double %7)
  %9 = tail call double @llvm.fabs.f64(double %8)
  %10 = fcmp ogt double %9, 0x41DFFFFFFFC00000
  %11 = fptosi double %8 to i32
  %12 = zext i32 %11 to i64
  %13 = select i1 %10, i64 2147483648, i64 %12
  store i64 %13, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x440__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1088
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4762cd(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4762bf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476195(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xd8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -216
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47641b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0xd0__rbp__rcx_4____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %3, -208
  %7 = add i64 %6, %5
  %8 = load i64, i64* %PC, align 8
  %9 = add i64 %8, 7
  store i64 %9, i64* %PC, align 8
  %10 = inttoptr i64 %7 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4b8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1208
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4b8__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1208
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jle_.L_476408(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = or i1 %6, %13
  %15 = zext i1 %14 to i8
  store i8 %15, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %14, i64 %rel_off1, i64 %rel_off2
  %16 = add i64 %.v, %3
  store i64 %16, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsd_0x6cd68__rip____xmm0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, ptrtoint (%G_0x6cd68__rip__type* @G_0x6cd68__rip_ to i64)
  %5 = add i64 %3, 8
  store i64 %5, i64* %PC, align 8
  %6 = inttoptr i64 %4 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %7, i64* %8, align 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = bitcast i64* %9 to double*
  store double 0.000000e+00, double* %10, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4bc__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1212
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4bc__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1212
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm1__MINUS0x458__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1112
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm1__MINUS0x45c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1116
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm1__MINUS0x460__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1120
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss__xmm1__MINUS0x464__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1124
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = bitcast %union.VectorReg* %3 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 1
  %10 = extractelement <2 x float> %9, i32 0
  %11 = inttoptr i64 %5 to float*
  store float %10, float* %11, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_cvtss2sd_MINUS0x45c__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1116
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 8
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to float*
  %9 = load float, float* %8, align 4
  %10 = fpext float %9 to double
  %11 = bitcast %union.VectorReg* %3 to double*
  store double %10, double* %11, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subss_MINUS0x458__rbp____xmm1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1112
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %3 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = inttoptr i64 %6 to float*
  %15 = load float, float* %14, align 4
  %16 = extractelement <2 x float> %10, i32 0
  %17 = fsub float %16, %15
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %10 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %13, i32 0
  %24 = bitcast i64* %11 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %13, i32 1
  %26 = getelementptr inbounds i8, i8* %4, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_MINUS0x464__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1124
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subss_MINUS0x45c__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1116
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %3 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = inttoptr i64 %6 to float*
  %15 = load float, float* %14, align 4
  %16 = extractelement <2 x float> %10, i32 0
  %17 = fsub float %16, %15
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %10 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %13, i32 0
  %24 = bitcast i64* %11 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %13, i32 1
  %26 = getelementptr inbounds i8, i8* %4, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movss_MINUS0x460__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1120
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %union.VectorReg* %3 to i32*
  store i32 %10, i32* %11, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to float*
  store float 0.000000e+00, float* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast i64* %14 to float*
  store float 0.000000e+00, float* %15, align 1
  %16 = getelementptr inbounds i8, i8* %4, i64 12
  %17 = bitcast i8* %16 to float*
  store float 0.000000e+00, float* %17, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_subss_MINUS0x458__rbp____xmm2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %4 = bitcast %union.VectorReg* %3 to i8*
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1112
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = bitcast %union.VectorReg* %3 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %12 = bitcast i64* %11 to <2 x i32>*
  %13 = load <2 x i32>, <2 x i32>* %12, align 1
  %14 = inttoptr i64 %6 to float*
  %15 = load float, float* %14, align 4
  %16 = extractelement <2 x float> %10, i32 0
  %17 = fsub float %16, %15
  %18 = bitcast %union.VectorReg* %3 to float*
  store float %17, float* %18, align 1
  %19 = bitcast <2 x float> %10 to <2 x i32>
  %20 = extractelement <2 x i32> %19, i32 1
  %21 = getelementptr inbounds i8, i8* %4, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 %20, i32* %22, align 1
  %23 = extractelement <2 x i32> %13, i32 0
  %24 = bitcast i64* %11 to i32*
  store i32 %23, i32* %24, align 1
  %25 = extractelement <2 x i32> %13, i32 1
  %26 = getelementptr inbounds i8, i8* %4, i64 12
  %27 = bitcast i8* %26 to i32*
  store i32 %25, i32* %27, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.floor_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx__MINUS0x444__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1092
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47641b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47640d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4762d4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x440__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1088
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0x444__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -1092
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jg_.L_476456(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i8, i8* %10, align 1
  %12 = icmp ne i8 %11, 0
  %13 = xor i1 %9, %12
  %14 = xor i1 %13, true
  %15 = and i1 %6, %14
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %15, i64 %rel_off1, i64 %rel_off2
  %17 = add i64 %.v, %3
  store i64 %17, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476424(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47645b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47616b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47653d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47652a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsbl_MINUS0x410__rbp__rax_1____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %3, -1040
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47652a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x4__MINUS0x2c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -44
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -4
  %10 = icmp ult i32 %8, 4
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476525(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl_0x7ae1b0___rcx_4____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = shl i64 %4, 2
  %6 = add i64 %5, 8053168
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 7
  store i64 %8, i64* %PC, align 8
  %9 = trunc i64 %3 to i32
  %10 = inttoptr i64 %6 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = add i32 %11, %9
  %13 = zext i32 %12 to i64
  store i64 %13, i64* %RAX, align 8
  %14 = icmp ult i32 %12, %9
  %15 = icmp ult i32 %12, %11
  %16 = or i1 %14, %15
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1
  %19 = and i32 %12, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19)
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1
  %25 = xor i32 %11, %9
  %26 = xor i32 %25, %12
  %27 = lshr i32 %26, 4
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1
  %31 = icmp eq i32 %12, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1
  %34 = lshr i32 %12, 31
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1
  %37 = lshr i32 %9, 31
  %38 = lshr i32 %11, 31
  %39 = xor i32 %34, %37
  %40 = xor i32 %34, %38
  %41 = add nuw nsw i32 %39, %40
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i8
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %43, i8* %44, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movzbl_0xb89e60___rcx_1____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = add i64 %3, 12099168
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i8*
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x3___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -3
  %8 = icmp ult i32 %4, 3
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476512(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476512(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x2__MINUS0x410__rbp__rcx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %3, -1040
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  store i8 2, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476517(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4764ae(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47652a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47652f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476470(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476642(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47662f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47662f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xe4__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -228
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x8__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x30__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -48
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.are_neighbor_dragons(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpb__0x0__MINUS0x280__rbp__rax_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %3, -640
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %10 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = icmp eq i8 %10, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i8 %10, 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x15__MINUS0x468__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 21, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x190__MINUS0x468__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -400
  %10 = icmp ult i32 %8, 400
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_47662a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x468__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476611(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x468__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__0x2__MINUS0x280__rbp__rax_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %3, -640
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  store i8 2, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476616(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x468__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1128
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x468__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1128
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4765c3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_47662f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476634(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476544(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476711(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_4766fe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpb__0x0__MINUS0x280__rbp__rcx_1_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %3, -640
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11, align 1
  %12 = zext i8 %10 to i32
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  %19 = icmp eq i8 %10, 0
  %20 = zext i1 %19 to i8
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %20, i8* %21, align 1
  %22 = lshr i8 %10, 7
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_4766eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsbl_MINUS0x410__rbp__rcx_1____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %3, -1040
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4766bc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4766fe(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -2
  %8 = icmp ult i32 %4, 2
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_4766e1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4766e6(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4766eb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_4766f0(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476667(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476703(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476650(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0__MINUS0x34__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = and i32 %8, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %16, align 1
  %17 = icmp eq i32 %8, 0
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %18, i8* %19, align 1
  %20 = lshr i32 %8, 31
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %23, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476bc7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al___cl(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = load i8, i8* %AL, align 1
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC, align 8
  store i8 %5, i8* %CL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__cl__MINUS0x4bd__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1213
  %6 = load i8, i8* %CL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476746(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_setne__al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = zext i1 %8 to i8
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb__al__MINUS0x4bd__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1213
  %6 = load i8, i8* %AL, align 1
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i8*
  store i8 %6, i8* %9, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movb_MINUS0x4bd__rbp____al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1213
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 6
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i8*
  %9 = load i8, i8* %8, align 1
  store i8 %9, i8* %AL, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_testb__0x1___al(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = load i8, i8* %AL, align 1
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = and i8 %4, 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8, align 1
  %9 = zext i8 %7 to i32
  %10 = tail call i32 @llvm.ctpop.i32(i32 %9)
  %11 = trunc i32 %10 to i8
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = xor i8 %7, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14, i8* %15, align 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %18, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476759(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476bc2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476baf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movsbl_MINUS0x280__rbp__rax_1____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = load i64, i64* %RAX, align 8
  %5 = add i64 %3, -640
  %6 = add i64 %5, %4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 8
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i8*
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i64
  %12 = and i64 %11, 4294967295
  store i64 %12, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x0___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %ECX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7, align 1
  %8 = and i32 %4, 255
  %9 = tail call i32 @llvm.ctpop.i32(i32 %8)
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 1
  %12 = xor i8 %11, 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12, i8* %13, align 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14, align 1
  %15 = icmp eq i32 %4, 0
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %16, i8* %17, align 1
  %18 = lshr i32 %4, 31
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %21, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_subl__0x14___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, -20
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ult i32 %6, 20
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_47688b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_47688b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xe4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -228
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i32 %4, -1
  %8 = icmp eq i32 %4, 0
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9, i8* %10, align 1
  %11 = and i32 %7, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i32 %7, %4
  %18 = lshr i32 %17, 4
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i32 %7, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i32 %7, 31
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %4, 31
  %29 = xor i32 %25, %28
  %30 = add nuw nsw i32 %29, %28
  %31 = icmp eq i32 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl_MINUS0xe8__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i32, i32* %EAX, align 4
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %5, -232
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = sub i32 %4, %10
  %12 = icmp ult i32 %4, %10
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %11, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %10, %4
  %22 = xor i32 %21, %11
  %23 = lshr i32 %22, 4
  %24 = trunc i32 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1
  %27 = icmp eq i32 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %11, 31
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1
  %33 = lshr i32 %4, 31
  %34 = lshr i32 %10, 31
  %35 = xor i32 %34, %33
  %36 = xor i32 %30, %33
  %37 = add nuw nsw i32 %36, %35
  %38 = icmp eq i32 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476ba3(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x14___eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 20
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RAX, align 8
  %9 = icmp ugt i32 %6, -21
  %10 = zext i1 %9 to i8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10, i8* %11, align 1
  %12 = and i32 %7, 255
  %13 = tail call i32 @llvm.ctpop.i32(i32 %12)
  %14 = trunc i32 %13 to i8
  %15 = and i8 %14, 1
  %16 = xor i8 %15, 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %16, i8* %17, align 1
  %18 = xor i32 %6, 16
  %19 = xor i32 %18, %7
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %7, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476993(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476993(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476a9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476a9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476baa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476baa(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476baf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476bb4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476722(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476bc7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x1__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -1
  %10 = icmp eq i32 %8, 0
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476be5(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x2__MINUS0x10__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -16
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -2
  %10 = icmp ult i32 %8, 2
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %9, %8
  %20 = lshr i32 %19, 4
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %22, i8* %23, align 1
  %24 = icmp eq i32 %9, 0
  %25 = zext i1 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %9, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %8, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %30
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476de4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476de4(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.start_draw_board(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476ddf(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476dcc(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476ca1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476c60(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x1__MINUS0x46c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 1, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476c9c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476c8d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x3__MINUS0x46c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 3, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476c97(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2__MINUS0x46c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 2, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476d0f(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476cce(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4__MINUS0x46c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 4, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476d0a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476cfb(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x6__MINUS0x46c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 6, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476d05(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0__MINUS0x46c__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 0, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476d3c(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x58__MINUS0x470__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 88, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476da7(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476d69(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x4f__MINUS0x470__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 79, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476da2(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476d93(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2a__MINUS0x470__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 42, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476d9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x2e__MINUS0x470__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 46, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x24__rbp____edi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -36
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x28__rbp____esi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -40
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RSI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x470__rbp____edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1136
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x46c__rbp____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1132
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.draw_color_char(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476c08(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476dd1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476bf1(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.end_draw_board(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476e9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476e9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0xa__0xb63050(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb63050_type* @G_0xb63050 to i32*), align 8
  %6 = add i32 %5, -10
  %7 = icmp ult i32 %5, 10
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = and i32 %6, 255
  %11 = tail call i32 @llvm.ctpop.i32(i32 %10)
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1
  %16 = xor i32 %6, %5
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %19, i8* %20, align 1
  %21 = icmp eq i32 %6, 0
  %22 = zext i1 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %22, i8* %23, align 1
  %24 = lshr i32 %6, 31
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %5, 31
  %28 = xor i32 %24, %27
  %29 = add nuw nsw i32 %28, %27
  %30 = icmp eq i32 %29, 2
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %31, i8* %32, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476e9b(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb44530___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb44530_type* @G__0xb44530 to i64), i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__0xb4bd20___rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 10
  store i64 %4, i64* %PC, align 8
  store i64 ptrtoint (%G__0xb4bd20_type* @G__0xb4bd20 to i64), i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x190___edx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 5
  store i64 %4, i64* %PC, align 8
  store i64 400, i64* %RDX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0xb63050___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb63050_type* @G_0xb63050 to i32*), align 8
  %6 = sext i32 %5 to i64
  store i64 %6, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x194___rdi___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %3 = load i64, i64* %RDI, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 404
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RDI, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %R8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__rdi___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %RDI, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = add i64 %4, %3
  store i64 %7, i64* %R8, align 8
  %8 = icmp ult i64 %7, %3
  %9 = icmp ult i64 %7, %4
  %10 = or i1 %8, %9
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = trunc i64 %7 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i64 %4, %3
  %21 = xor i64 %20, %7
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = icmp eq i64 %7, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %7, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1
  %32 = lshr i64 %3, 63
  %33 = lshr i64 %4, 63
  %34 = xor i64 %29, %32
  %35 = xor i64 %29, %33
  %36 = add nuw nsw i64 %34, %35
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x4___r8(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 4
  store i64 %6, i64* %R8, align 8
  %7 = icmp ugt i64 %3, -5
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %6, %3
  %18 = lshr i64 %17, 4
  %19 = trunc i64 %18 to i8
  %20 = and i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %20, i8* %21, align 1
  %22 = icmp eq i64 %6, 0
  %23 = zext i1 %22 to i8
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %23, i8* %24, align 1
  %25 = lshr i64 %6, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = lshr i64 %3, 63
  %29 = xor i64 %25, %28
  %30 = add nuw nsw i64 %29, %25
  %31 = icmp eq i64 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__r8___rdi(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %R8, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  store i64 %3, i64* %RDI, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rax__MINUS0x4c8__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1224
  %5 = load i64, i64* %RAX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq__rcx__MINUS0x4d0__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1232
  %5 = load i64, i64* %RCX, align 8
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 7
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %4 to i64*
  store i64 %5, i64* %8, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_callq_.memcpy_plt(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  %5 = add i64 %3, %rel_off2
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  store i64 %8, i64* %6, align 8
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x8__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x4c___rax___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 4
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 76
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x4d0__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1232
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0x4__rcx____r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %RCX, align 8
  %5 = add i64 %4, 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = inttoptr i64 %5 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_0xb63050___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 8
  store i64 %4, i64* %PC, align 8
  %5 = load i32, i32* bitcast (%G_0xb63050_type* @G_0xb63050 to i32*), align 8
  %6 = sext i32 %5 to i64
  store i64 %6, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_imulq__0x194___rax___rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = load i64, i64* %RAX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = sext i64 %3 to i128
  %7 = and i128 %6, -18446744073709551616
  %8 = zext i64 %3 to i128
  %9 = or i128 %7, %8
  %10 = mul nsw i128 %9, 404
  %11 = trunc i128 %10 to i64
  store i64 %11, i64* %RAX, align 8
  %12 = sext i64 %11 to i128
  %13 = icmp ne i128 %12, %10
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1
  %16 = trunc i128 %10 to i32
  %17 = and i32 %16, 252
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17)
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %24, align 1
  %25 = lshr i64 %11, 63
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14, i8* %28, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x4c8__rbp____rcx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1224
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d____rcx_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %4 = bitcast i64* %RCX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %R9D, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_0xb63050___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 8
  store i64 %5, i64* %PC, align 8
  %6 = load i32, i32* bitcast (%G_0xb63050_type* @G_0xb63050 to i32*), align 8
  %7 = zext i32 %6 to i64
  store i64 %7, i64* %3, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___r9d(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %5 = load i32, i32* %R9D, align 4
  %6 = load i64, i64* %PC, align 8
  %7 = add i64 %6, 4
  store i64 %7, i64* %PC, align 8
  %8 = add i32 %5, 1
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %4, align 8
  %10 = icmp eq i32 %5, -1
  %11 = icmp eq i32 %8, 0
  %12 = or i1 %10, %11
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1
  %15 = and i32 %8, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15)
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1
  %21 = xor i32 %8, %5
  %22 = lshr i32 %21, 4
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1
  %26 = zext i1 %11 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %8, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %5, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %28
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__r9d__0xb63050(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %3 to i32*
  %4 = load i32, i32* %R9D, align 4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 8
  store i64 %6, i64* %PC, align 8
  store i32 %4, i32* bitcast (%G_0xb63050_type* @G_0xb63050 to i32*), align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpq__0x0__MINUS0x18__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 5
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9, align 1
  %10 = trunc i64 %8 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %17, align 1
  %18 = icmp eq i64 %8, 0
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %19, i8* %20, align 1
  %21 = lshr i64 %8, 63
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %22, i8* %23, align 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %24, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476f23(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movq_MINUS0x18__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -24
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 4
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x0____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  store i32 0, i32* %4, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__0x15__MINUS0x474__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  store i32 21, i32* %7, align 4
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_cmpl__0x190__MINUS0x474__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 10
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, -400
  %10 = icmp ult i32 %8, 400
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1
  %13 = and i32 %9, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13)
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %17, i8* %18, align 1
  %19 = xor i32 %8, 16
  %20 = xor i32 %19, %9
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = icmp eq i32 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %9, 31
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1
  %31 = lshr i32 %8, 31
  %32 = xor i32 %28, %31
  %33 = add nuw nsw i32 %32, %31
  %34 = icmp eq i32 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jge_.L_476f1e(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  %10 = xor i1 %6, %9
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %10, i64 %rel_off2, i64 %rel_off1
  %13 = add i64 %.v, %3
  store i64 %13, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movslq_MINUS0x474__rbp____rax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 7
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_je_.L_476f05(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %BRANCH_TAKEN, align 1
  %6 = icmp ne i8 %5, 0
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %7 = add i64 %.v, %3
  store i64 %7, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jne_.L_476f05(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i8* nocapture %BRANCH_TAKEN, i64 %rel_off1, i64 %rel_off2, i64 %rel_off3) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  %7 = zext i1 %6 to i8
  store i8 %7, i8* %BRANCH_TAKEN, align 1
  %.v = select i1 %6, i64 %rel_off1, i64 %rel_off2
  %8 = add i64 %.v, %3
  store i64 %8, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl___rax____ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = bitcast i64* %RAX to i32**
  %4 = load i32*, i32** %3, align 8
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i32, i32* %4, align 4
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addl__0x1___ecx(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %3 = load i64, i64* %RCX, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 3
  store i64 %5, i64* %PC, align 8
  %6 = trunc i64 %3 to i32
  %7 = add i32 %6, 1
  %8 = zext i32 %7 to i64
  store i64 %8, i64* %RCX, align 8
  %9 = icmp eq i32 %6, -1
  %10 = icmp eq i32 %7, 0
  %11 = or i1 %9, %10
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1
  %14 = and i32 %7, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14)
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1
  %20 = xor i32 %7, %6
  %21 = lshr i32 %20, 4
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1
  %25 = zext i1 %10 to i8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %25, i8* %26, align 1
  %27 = lshr i32 %7, 31
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %28, i8* %29, align 1
  %30 = lshr i32 %6, 31
  %31 = xor i32 %27, %30
  %32 = add nuw nsw i32 %31, %27
  %33 = icmp eq i32 %32, 2
  %34 = zext i1 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %34, i8* %35, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__ecx____rax_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %4 = bitcast i64* %RAX to i32**
  %5 = load i32*, i32** %4, align 8
  %6 = load i32, i32* %ECX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 2
  store i64 %8, i64* %PC, align 8
  store i32 %6, i32* %5, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476f0a(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x474__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -1140
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 6
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x474__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -1140
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 6
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476eba(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_jmpq_.L_476f23(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned, i64 %rel_off1, i64 %rel_off2) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, %rel_off1
  store i64 %4, i64* %PC, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x34__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -52
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl__eax__MINUS0x4__rbp_(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %4, -4
  %6 = load i32, i32* %EAX, align 4
  %7 = load i64, i64* %PC, align 8
  %8 = add i64 %7, 3
  store i64 %8, i64* %PC, align 8
  %9 = inttoptr i64 %5 to i32*
  store i32 %6, i32* %9, align 4
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_movl_MINUS0x4__rbp____eax(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %3, -4
  %5 = load i64, i64* %PC, align 8
  %6 = add i64 %5, 3
  store i64 %6, i64* %PC, align 8
  %7 = inttoptr i64 %4 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %RAX, align 8
  ret %struct.Memory* %2
}

; Function Attrs: nounwind
define %struct.Memory* @routine_addq__0x4d0___rsp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #3 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = load i64, i64* %PC, align 8
  %5 = add i64 %4, 7
  store i64 %5, i64* %PC, align 8
  %6 = add i64 %3, 1232
  store i64 %6, i64* %RSP, align 8
  %7 = icmp ugt i64 %3, -1233
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8, i8* %9, align 1
  %10 = trunc i64 %6 to i32
  %11 = and i32 %10, 255
  %12 = tail call i32 @llvm.ctpop.i32(i32 %11)
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 1
  %15 = xor i8 %14, 1
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %15, i8* %16, align 1
  %17 = xor i64 %3, 16
  %18 = xor i64 %17, %6
  %19 = lshr i64 %18, 4
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %21, i8* %22, align 1
  %23 = icmp eq i64 %6, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1
  %26 = lshr i64 %6, 63
  %27 = trunc i64 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %27, i8* %28, align 1
  %29 = lshr i64 %3, 63
  %30 = xor i64 %26, %29
  %31 = add nuw nsw i64 %30, %26
  %32 = icmp eq i64 %31, 2
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %33, i8* %34, align 1
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_popq__rbp(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 8
  %8 = inttoptr i64 %6 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %RBP, align 8
  store i64 %7, i64* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: norecurse nounwind
define %struct.Memory* @routine_retq(%struct.State* nocapture dereferenceable(3376), i64, %struct.Memory* readnone returned) local_unnamed_addr #2 {
block_400488:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = load i64, i64* %PC, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %PC, align 8
  %9 = add i64 %6, 8
  store i64 %9, i64* %5, align 8
  ret %struct.Memory* %2
}

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline }
attributes #2 = { norecurse nounwind }
attributes #3 = { nounwind }
