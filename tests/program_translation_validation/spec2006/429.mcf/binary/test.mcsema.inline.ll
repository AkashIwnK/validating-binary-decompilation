; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4007f0__init_type = type <{ [23 x i8] }>
%seg_400810__plt_type = type <{ [240 x i8] }>
%seg_400900__text_type = type <{ [15890 x i8] }>
%seg_404714__fini_type = type <{ [9 x i8] }>
%seg_404720__rodata_type = type <{ [4 x i8], [31 x i8], [34 x i8], [34 x i8], [36 x i8], [34 x i8], [34 x i8], [29 x i8], [34 x i8], [32 x i8], [52 x i8], [46 x i8], [40 x i8], [18 x i8], [34 x i8], [6 x i8], [8 x i8], [25 x i8], [49 x i8], [31 x i8], [23 x i8], [23 x i8], [11 x i8], [4 x i8], [2 x i8], [31 x i8], [4 x i8], [8 x i8] }>
%seg_4049f0__eh_frame_hdr_type = type <{ [244 x i8] }>
%seg_404ae8__eh_frame_type = type <{ [912 x i8] }>
%seg_605de0__init_array_type = type <{ i64, i64 }>
%seg_605ff0__got_type = type <{ i64, i64 }>
%seg_606000__got_plt_type = type <{ [24 x i8], i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }>
%seg_606088__data_type = type <{ [16 x i8], [8 x i8] }>
%seg_6060a0__bss_type = type <{ [32 x i8], [8 x i8], [8 x i8], [2816 x i8], [8424 x i8], [8 x i8], [8 x i8], [8 x i8] }>
%net_type = type <{ [624 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@stdout = external global i64, align 32
@seg_4007f0__init = internal constant %seg_4007f0__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\FDW \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400810__plt = internal constant %seg_400810__plt_type <{ [240 x i8] c}>
@seg_400900__text = internal constant %seg_400900__text_type <{ [15890 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\10G@\00H\C7\C1\A0F@\00H\C7\C7\C0\19@\00\FF\15\C6V \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8\A0``\00H=\A0``\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF\A0``\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE\A0``\00UH\81\EE\A0``\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF\A0``\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\11W \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\FFV \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\83\ECPH\89}\F0H\8B}\F0H\8B\BF\C8\01\00\00H\8BE\F0H\03\B8\A0\01\00\00H\89\B8\A0\01\00\00H\8BE\F0H\8B\80\C8\01\00\00H\8B}\F0H\03\87\C0\01\00\00H\89\87\C0\01\00\00H\8BE\F0H\8B\808\02\00\00H\8B}\F0H\8B\BF\A0\01\00\00H\C1\E7\06H\89}\C0H\89\C7H\8Bu\C0\E8p\FE\FF\FFH\89E\E8H\83}\E8\00\0F\855\00\00\00H\BF$G@\00\00\00\00\00H\8Bu\F0\B0\00\E8\CC\FD\FF\FFH\8B<%\A0``\00\89E\BC\E8\1C\FE\FF\FFH\C7E\F8\FF\FF\FF\FF\89E\B8\E9\C6\00\00\00H\8BE\E8H\8BM\F0H\8B\898\02\00\00H)\C8H\89E\C8H\8BE\E8H\8BM\F0H\89\818\02\00\00H\8BE\E8H\8BM\F0H\8B\89\A8\01\00\00H\C1\E1\06H\01\C8H\8BM\F0H\89\81@\02\00\00H\8BE\F0H\8B\80(\02\00\00H\89E\E0H\89E\D0H\8BE\E0H\83\C0hH\89E\E0H\8BE\F0H\8B\800\02\00\00H\89E\D8H\8BE\E0H;E\D8\0F\83<\00\00\00H\8BE\E0H\8B@\18H;E\D0\0F\84\14\00\00\00H\8BE\E0H\8B@0H\03E\C8H\8BM\E0H\89A0\E9\00\00\00\00H\8BE\E0H\83\C0hH\89E\E0\E9\B6\FF\FF\FFH\C7E\F8\00\00\00\00H\8BE\F8H\83\C4P]\C3fff.\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8H\89u\F0H\89U\E8H\89M\E0L\89E\D8L\89M\D0H\8BM\E8H\8BU\F8H\8Bu\F0H\C1\E6\06H\01\F2H\89J\08H\8BM\E0H\8BU\F8H\8Bu\F0H\C1\E6\06H\01\F2H\89J\10H\8BM\D8H\8BU\F8H\8Bu\F0H\C1\E6\06H\01\F2H\89J8H\8BM\D8H\8BU\F8H\8Bu\F0H\C1\E6\06H\01\F2H\89\0AH\8BM\D0H\8BU\F8H\8Bu\F0H\C1\E6\06H\01\F2H\89J0H\8BM\F0H\83\C1\01H\89M\C81\C0\88\C1H\8BU\C8H\83\EA\01H\83\FA\00\88M\C7\0F\847\00\00\00\B8\02\00\00\00\89\C1H\8BU\D0H\8Bu\F8H\8BE\C8H\89U\B8H\99H\F7\F9H\83\E8\01H\C1\E0\06H\01\C6H\8BE\B8H;F0@\0F\9F\C7@\88}\C7\8AE\C7\A8\01\0F\85\05\00\00\00\E9\CF\01\00\00\B8\02\00\00\00\89\C1H\8BU\F8H\8BE\C8H\89U\B0H\99H\F7\F9H\83\E8\01H\C1\E0\06H\8Bu\B0H\01\C6H\8BF\08H\8Bu\F8H\8B}\C8H\83\EF\01H\C1\E7\06H\01\FEH\89F\08H\8BE\F8H\8Bu\C8H\89E\A8H\89\F0H\99H\F7\F9H\83\E8\01H\C1\E0\06H\8Bu\A8H\01\C6H\8BF\10H\8Bu\F8H\8B}\C8H\83\EF\01H\C1\E7\06H\01\FEH\89F\10H\8BE\F8H\8Bu\C8H\89E\A0H\89\F0H\99H\F7\F9H\83\E8\01H\C1\E0\06H\8Bu\A0H\01\C6H\8B\06H\8Bu\F8H\8B}\C8H\83\EF\01H\C1\E7\06H\01\FEH\89\06H\8BE\F8H\8Bu\C8H\89E\98H\89\F0H\99H\F7\F9H\83\E8\01H\C1\E0\06H\8Bu\98H\01\C6H\8B\06H\8Bu\F8H\8B}\C8H\83\EF\01H\C1\E7\06H\01\FEH\89F8H\8BE\F8H\8Bu\C8H\89E\90H\89\F0H\99H\F7\F9H\83\E8\01H\C1\E0\06H\8Bu\90H\01\C6H\8BF0H\8Bu\F8H\8B}\C8H\83\EF\01H\C1\E7\06H\01\FEH\89F0H\8BE\C8H\99H\F7\F9H\89E\C8H\8BE\E8H\8BM\F8H\8Bu\C8H\83\EE\01H\C1\E6\06H\01\F1H\89A\08H\8BE\E0H\8BM\F8H\8Bu\C8H\83\EE\01H\C1\E6\06H\01\F1H\89A\10H\8BE\D8H\8BM\F8H\8Bu\C8H\83\EE\01H\C1\E6\06H\01\F1H\89\01H\8BE\D8H\8BM\F8H\8Bu\C8H\83\EE\01H\C1\E6\06H\01\F1H\89A8H\8BE\D0H\8BM\F8H\8Bu\C8H\83\EE\01H\C1\E6\06H\01\F1H\89A0\E9\D1\FD\FF\FF]\C3\0F\1FD\00\00UH\89\E5\B8\03\00\00\00A\BA\02\00\00\00H\89}\F8H\89u\F0H\89U\E8H\89M\E0L\89E\D8L\89M\D0H\8BM\E8H\8BU\F0H\89J\08H\8BM\E0H\8BU\F0H\89J\10H\8BM\D8H\8BU\F0H\89J8H\8BM\D8H\8BU\F0H\89\0AH\8BM\D0H\8BU\F0H\89J0H\C7E\C8\01\00\00\00H\8BM\F0H\8BIpH\8BU\F0H;\8A\B0\00\00\00A\0FO\C2Hc\C8H\89M\C01\C0\88\C1H\8BU\C0H\8Bu\F8H;\96\C0\01\00\00\88M\BF\0F\8F#\00\00\00H\8BE\D0H\8BM\F0H\8BU\C0H\83\EA\01H\C1\E2\06H\01\D1H;A0@\0F\9C\C6@\88u\BF\8AE\BF\A8\01\0F\85\05\00\00\00\E9\DC\01\00\00H\8BE\F0H\8BM\C0H\83\E9\01H\C1\E1\06H\01\C8H\8B@\08H\8BM\F0H\8BU\C8H\83\EA\01H\C1\E2\06H\01\D1H\89A\08H\8BE\F0H\8BM\C0H\83\E9\01H\C1\E1\06H\01\C8H\8B@\10H\8BM\F0H\8BU\C8H\83\EA\01H\C1\E2\06H\01\D1H\89A\10H\8BE\F0H\8BM\C0H\83\E9\01H\C1\E1\06H\01\C8H\8B\00H\8BM\F0H\8BU\C8H\83\EA\01H\C1\E2\06H\01\D1H\89\01H\8BE\F0H\8BM\C0H\83\E9\01H\C1\E1\06H\01\C8H\8B\00H\8BM\F0H\8BU\C8H\83\EA\01H\C1\E2\06H\01\D1H\89A8H\8BE\F0H\8BM\C0H\83\E9\01H\C1\E1\06H\01\C8H\8B@0H\8BM\F0H\8BU\C8H\83\EA\01H\C1\E2\06H\01\D1H\89A0H\8BE\E8H\8BM\F0H\8BU\C0H\83\EA\01H\C1\E2\06H\01\D1H\89A\08H\8BE\E0H\8BM\F0H\8BU\C0H\83\EA\01H\C1\E2\06H\01\D1H\89A\10H\8BE\D8H\8BM\F0H\8BU\C0H\83\EA\01H\C1\E2\06H\01\D1H\89\01H\8BE\D8H\8BM\F0H\8BU\C0H\83\EA\01H\C1\E2\06H\01\D1H\89A8H\8BE\D0H\8BM\F0H\8BU\C0H\83\EA\01H\C1\E2\06H\01\D1H\89A0H\8BE\C0H\89E\C8H\8BE\C0H\C1\E0\01H\89E\C0H\8BE\C0H\83\C0\01H\8BM\F8H;\81\C0\01\00\00\0F\8FA\00\00\00H\8BE\F0H\8BM\C0H\83\E9\01H\C1\E1\06H\01\C8H\8B@0H\8BM\F0H\8BU\C0H\C1\E2\06H\01\D1H;A0\0F\8D\0C\00\00\00H\8BE\C0H\83\C0\01H\89E\C0\E9\00\00\00\00\E9\D5\FD\FF\FF]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\B0\00\00\00H\89}\F0H\C7E\D8\00\00\00\00H\C7E\D0\00\00\00\00H\C7E\C0\0F\00\00\00H\8B}\F0H\8B\BF\10\02\00\00H\89}\B8H\C7E\A8\1E\00\00\00H\8B}\B8H+}\C0H\89}\98H\8B}\F0H\81\BF\98\01\00\00\98:\00\00\0F\8F\9F\00\00\00H\8BE\F0H\8B\80\A8\01\00\00H\8BM\F0H\03\81\C8\01\00\00H\8BM\F0H;\81\A0\01\00\00\0F\8Es\00\00\00\B8\02\00\00\00\89\C1H\8BU\F0H\8B\92\98\01\00\00H\8Bu\F0H\0F\AF\96\98\01\00\00H\89\D0H\99H\F7\F9H\8BM\F0H\03\81\A8\01\00\00H\8BM\F0H;\81\A0\01\00\00\0F\8E1\00\00\00H\C7E\D0\01\00\00\00H\8B}\F0\E8\07\F8\FF\FFH\83\F8\00\0F\84\0D\00\00\00H\C7E\F8\FF\FF\FF\FF\E9\F0\03\00\00H\8B}\F0\E8\87\09\00\00\E9\00\00\00\00H\8BE\F0H\8B\80@\02\00\00H\89E\80H\8BE\F0H\8B\80\98\01\00\00H\89E\E0H\8BE\F0H\8B\808\02\00\00H\89E\90H\C7E\E8\00\00\00\001\C0\88\C1H\8BU\E8H;U\E0\88\8D_\FF\FF\FF\0F\8D\11\00\00\00H\8BE\90\83xX\FF\0F\94\C1\88\8D_\FF\FF\FF\8A\85_\FF\FF\FF\A8\01\0F\85\05\00\00\00\E9$\00\00\00\E9\00\00\00\00H\8BE\E8H\83\C0\01H\89E\E8H\8BE\90H\05\C0\00\00\00H\89E\90\E9\A0\FF\FF\FFH\C7\85p\FF\FF\FF\00\00\00\00H\8BE\E8H;E\E0\0F\8D\C8\01\00\00H\8BE\90\83xX\FF\0F\84*\00\00\00H\8B\85p\FF\FF\FFH\8BM\90H\8BI\10H\8BI8H\8BI\10H\89AHH\8BE\90H\83\C0@H\89\85p\FF\FF\FFH\8BE\90\83x\18\FF\0F\85\05\00\00\00\E9^\01\00\00H\8BE\90H\8B@\10H\89\85`\FF\FF\FFH\8B\85`\FF\FF\FFHc@dH\8BM\90H+A8H\03E\98H\89E\C8H\8B\85`\FF\FF\FFH\8B\00H\89E\B0H\8B\85p\FF\FF\FFH\8B@\08H\8B@HH\89E\88H\83}\88\00\0F\84\03\01\00\00H\8BE\88H\8B@\08H\89\85h\FF\FF\FFH\8B\85h\FF\FF\FFHc@dH\8BM\88H\03A8H;E\C8\0F\8E\14\00\00\00H\8B\85h\FF\FF\FFH\8B@HH\89E\88\E9\B5\FF\FF\FFH\8BE\A8H\8B\8Dh\FF\FF\FFH+\01H\8B\8D`\FF\FF\FFH\03\01H\89E\A0H\83}\A0\00\0F\8D\88\00\00\00H\8BE\D8H\8BM\F0H;\81\C0\01\00\00\0F\8D4\00\00\00H\8B}\80H\8Bu\D8H\8B\95h\FF\FF\FFH\8B\8D`\FF\FF\FFL\8BE\A8L\8BM\A0\E8\84\F7\FF\FFH\8BM\D8H\83\C1\01H\89M\D8\E9:\00\00\00H\8BE\80H\8B@0H;E\A0\0F\8E#\00\00\00H\8B}\F0H\8Bu\80H\8B\95h\FF\FF\FFH\8B\8D`\FF\FF\FFL\8BE\A8L\8BM\A0\E8\0E\FA\FF\FF\E9\00\00\00\00\E9\00\00\00\00H\8B\85h\FF\FF\FFH\8B@HH\89E\88\E9\F2\FE\FF\FF\E9\00\00\00\00H\8BE\E8H\83\C0\01H\89E\E8H\8BE\90H\05\C0\00\00\00H\89E\90\E9*\FE\FF\FFH\83}\D8\00\0F\84Y\01\00\00H\8BE\F0H\8B\80@\02\00\00H\89E\80H\8BE\D8H\8BM\F0H\C1\E0\06H\03\81@\02\00\00H\89\81@\02\00\00H\8BE\F0H\8B\80@\02\00\00H\89\85x\FF\FF\FFH\83}\D0\00\0F\84C\00\00\00\E9\00\00\00\00H\8BE\80H;\85x\FF\FF\FF\0F\84(\00\00\00H\8BE\80H\C7@0\00\00\00\00H\8BE\80\C7@\18\01\00\00\00H\8BE\80H\83\C0@H\89E\80\E9\C7\FF\FF\FF\E9\8B\00\00\00\E9\00\00\00\00H\8BE\80H;\85x\FF\FF\FF\0F\84p\00\00\00H\8BE\80H\C7@0\00\00\00\00H\8BE\80\C7@\18\01\00\00\00H\8BE\80H\8B@\08H\8B@8H\8BM\80H\89A H\8BE\80H\8BM\80H\8BI\08H\89A8H\8BE\80H\8B@\10H\8B@@H\8BM\80H\89A(H\8BE\80H\8BM\80H\8BI\10H\89A@H\8BE\80H\83\C0@H\89E\80\E9\7F\FF\FF\FF\E9\00\00\00\00H\8BE\D8H\8BM\F0H\03\81\A8\01\00\00H\89\81\A8\01\00\00H\8BE\D8H\8BM\F0H\03\81\B8\01\00\00H\89\81\B8\01\00\00H\8BE\D8H\8BM\F0H\8B\91\C0\01\00\00H)\C2H\89\91\C0\01\00\00H\8BE\D8H\89E\F8H\8BE\F8H\81\C4\B0\00\00\00]\C3\0F\1F\00UH\89\E5H\83\EC@H\89}\F8H\89u\F0H\89U\E8H\83}\E8\00\0F\84\14\00\00\00H\8BE\F8H\8B\80\B8\01\00\00H\89E\E0\E9H\01\00\00H\8BE\F8H\8B\80@\02\00\00H\89E\C0H\8BE\F8H\8B\808\02\00\00H\8BM\F8H\8B\89\A8\01\00\00H\8BU\F8H+\8A\B8\01\00\00H\C1\E1\06H\01\C8H\89E\D0H\C7E\E0\00\00\00\00H\8BE\D0H\89E\C8H\8BE\C8H\8BM\C0H9\C8\0F\83\E7\00\00\00H\8BE\C8\83x\18\01\0F\85&\00\00\00H\8BE\C8H\8B\00H\8BM\C8H\8BI\08H+\01H\8BM\C8H\8BI\10H\03\01H\89E\D8\E9[\00\00\00H\C7E\D8\FE\FF\FF\FFH\8BE\C8\83x\18\00\0F\85@\00\00\00H\8BE\C8H\8B@\08H\8B@0H;E\C8\0F\85\15\00\00\00H\8BE\D0H\8BM\C8H\8BI\08H\89A0\E9\10\00\00\00H\8BE\D0H\8BM\C8H\8BI\10H\89A0\E9\00\00\00\00\E9\00\00\00\00H\8BE\D8H;E\F0\0F\8E\11\00\00\00H\8BE\E0H\83\C0\01H\89E\E0\E9#\00\00\00\B8@\00\00\00\89\C2H\8BM\D0H\8Bu\C8H\89\CF\E8L\F1\FF\FFH\8BM\D0H\83\C1@H\89M\D0\E9\00\00\00\00H\8BE\C8H\83\C0@H\89E\C8\E9\08\FF\FF\FF\E9\00\00\00\00H\83}\E0\00\0F\84u\00\00\001\C0\89\C1H\8BU\E0H\8Bu\F8H\8B\BE\A8\01\00\00H)\D7H\89\BE\A8\01\00\00H\8BU\E0H\8Bu\F8H\8B\BE\B8\01\00\00H)\D7H\89\BE\B8\01\00\00H\8BU\E0H\8Bu\F8H\8B\BE@\02\00\00H)\D1H\C1\E1\06H\01\CFH\89\BE@\02\00\00H\8BM\E0H\8BU\F8H\03\8A\C0\01\00\00H\89\8A\C0\01\00\00H\8B}\F8\E8\95\03\00\00H\8BE\E0H\83\C4@]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC@\B8\05\00\00\00H\C7E\F8\FF\FF\FF\FFH\81<%h\8E`\00\98:\00\00\0FN\C0Hc\C8H\89M\F0H\83}\F8\00\0F\84C\01\00\00H\BFCG@\00\00\00\00\00H\8B4%x\8E`\00\B0\00\E8\F1\EF\FF\FFH\BF\D0\8C`\00\00\00\00\00\89E\EC\E8_\17\00\00H\BFeG@\00\00\00\00\00H\8B4%(\8F`\00H\89E\E0\B0\00\E8\C2\EF\FF\FFH\BF\D0\8C`\00\00\00\00\00\89E\DC\E8\10\05\00\00H\BF\87G@\00\00\00\00\00\B0\01\E8\9F\EF\FF\FFH\83}\F0\00\89E\D8\0F\85\05\00\00\00\E9\C5\00\00\00H\83<%\88\8E`\00\00\0F\84F\00\00\00H\BF\D0\8C`\00\00\00\00\00H\C7\C6\FF\FF\FF\FF1\C0\89\C2\E8\13\FD\FF\FFH\89E\F8H\83}\F8\00\0F\84\18\00\00\00H\BF\ABG@\00\00\00\00\00H\8Bu\F8\B0\00\E8?\EF\FF\FF\89E\D4\E9\00\00\00\00H\BF\D0\8C`\00\00\00\00\00\E8\E8\F7\FF\FFH\89E\F8H\83}\F8\00\0F\84\18\00\00\00H\BF\CDG@\00\00\00\00\00H\8Bu\F8\B0\00\E8\04\EF\FF\FF\89E\D0H\83}\F8\00\0F\8D\1E\00\00\00H\BF\EFG@\00\00\00\00\00\B0\00\E8\E5\EE\FF\FF\BF\FF\FF\FF\FF\89E\CC\E8x\EF\FF\FFH\8BE\F0H\83\C0\FFH\89E\F0\E9\B2\FE\FF\FFH\BF\0CH@\00\00\00\00\00H\8B4%8\8F`\00\B0\00\E8\AE\EE\FF\FF1\C9\89\CE\89E\C8H\89\F0H\83\C4@]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC\80\00\00\00\C7E\FC\00\00\00\00\89}\F8H\89u\F0\83}\F8\02\0F\8D\0C\00\00\00\C7E\FC\FF\FF\FF\FF\E9\92\01\00\00H\BF.H@\00\00\00\00\00\B0\00\E8P\EE\FF\FFH\BFNH@\00\00\00\00\00\89E\EC\B0\00\E8<\EE\FF\FFH\BF\82H@\00\00\00\00\00\89E\E8\B0\00\E8(\EE\FF\FFH\BF\B0H@\00\00\00\00\00\89E\E4\B0\00\E8\14\EE\FF\FFH\BF\B5I@\00\00\00\00\00\89E\E0\B0\00\E8\00\EE\FF\FFH\BF\D0\8C`\00\00\00\00\001\F6\B9p\02\00\00\89\CAH\89}\D8\89E\D4\E8\F1\ED\FF\FFH\C7\04%\E0\8E`\00\80\96\98\00H\8BU\F0H\8Br\08\B8\D0\8C`\00\89\C7\E8\A1\ED\FF\FFH\8B}\D8H\89E\C8\E8$\1B\00\00H\83\F8\00\0F\843\00\00\00H\BF\D8H@\00\00\00\00\00\B0\00\E8\99\ED\FF\FFH\BF\D0\8C`\00\00\00\00\00\89E\C4\E8\D7\09\00\00\C7E\FC\FF\FF\FF\FFH\89E\B8\E9\A8\00\00\00H\BF\EAH@\00\00\00\00\00H\8B4%h\8E`\00\B0\00\E8^\ED\FF\FFH\BF\D0\8C`\00\00\00\00\00\89E\B4\E8\9C\18\00\00H\89E\A8\E8\03\FD\FF\FFH\BF\0CI@\00\00\00\00\00H\89E\A0\B0\00\E8.\ED\FF\FFH\BF\12I@\00\00\00\00\00H\BE\D0\8C`\00\00\00\00\00\89E\9C\E8B\0A\00\00H\83\F8\00\0F\84\1F\00\00\00H\BF\D0\8C`\00\00\00\00\00\E8I\09\00\00\C7E\FC\FF\FF\FF\FFH\89E\90\E9\1A\00\00\00H\BF\D0\8C`\00\00\00\00\00\E8*\09\00\00\C7E\FC\00\00\00\00H\89E\88\8BE\FCH\81\C4\80\00\00\00]\C3\0F\1F\00UH\89\E5H\89}\F8H\8B}\F8H\8B\BF(\02\00\00H\89}\F0H\8B}\F8H\8B\BF0\02\00\00H\89}\E0H\8BE\F0H\8BM\E0H9\C8\0F\83)\00\00\00H\8BE\F0H\C7@@\00\00\00\00H\8BE\F0H\C7@8\00\00\00\00H\8BE\F0H\83\C0hH\89E\F0\E9\C6\FF\FF\FFH\8BE\F8H\8B\808\02\00\00H\89E\E8H\8BE\F8H\8B\80@\02\00\00H\89E\E0H\8BE\E8H\8BM\E0H9\C8\0F\83Y\00\00\00H\8BE\E8H\8B@\08H\8B@8H\8BM\E8H\89A H\8BE\E8H\8BM\E8H\8BI\08H\89A8H\8BE\E8H\8B@\10H\8B@@H\8BM\E8H\89A(H\8BE\E8H\8BM\E8H\8BI\10H\89A@H\8BE\E8H\83\C0@H\89E\E8\E9\96\FF\FF\FF]\C3f\0F\1FD\00\00UH\89\E5H\89}\F8H\8B}\F8H\8B\BF(\02\00\00H\89}\E0H\C7E\D8\00\00\00\00H\8B}\E0H\C7\07\00\1F\0A\FAH\8B}\E0H\8B\7F\10H\89}\F0H\89}\E8H\8BE\F0H;E\E0\0F\84\D3\00\00\00\E9\00\00\00\00H\83}\F0\00\0F\84r\00\00\00H\8BE\F0\83x\08\01\0F\85\22\00\00\00H\8BE\F0H\8B@0H\8B\00H\8BM\F0H\8BI\18H\03\01H\8BM\F0H\89\01\E9)\00\00\00H\8BE\F0H\8B@\18H\8B\00H\8BM\F0H\8BI0H+\01H\8BM\F0H\89\01H\8BE\D8H\83\C0\01H\89E\D8H\8BE\F0H\89E\E8H\8BE\F0H\8B@\10H\89E\F0\E9\83\FF\FF\FFH\8BE\E8H\89E\F0H\8BE\F0H\83x\18\00\0F\845\00\00\00H\8BE\F0H\8B@ H\89E\E8H\83}\E8\00\0F\84\0D\00\00\00H\8BE\E8H\89E\F0\E9\11\00\00\00H\8BE\F0H\8B@\18H\89E\F0\E9\BC\FF\FF\FF\E9\1F\FF\FF\FFH\8BE\D8]\C3ffffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8H\C7E\D8\00\00\00\00H\C7E\D0\00\00\00\00H\8B}\F8H\8B\BF@\02\00\00H\89}\E0H\8B}\F8H\8B\BF8\02\00\00H\89}\F0H\8BE\F0H\8BM\E0H9\C8\0F\84A\00\00\00H\8BE\F0\83x\18\02\0F\85\11\00\00\00H\8BE\F0H\C7@0\01\00\00\00\E9\0C\00\00\00H\8BE\F0H\C7@0\00\00\00\00\E9\00\00\00\00H\8BE\F0H\83\C0@H\89E\F0\E9\AE\FF\FF\FFH\8BE\F8H\8B\800\02\00\00H\89E\E0H\8BE\F8H\8B\80(\02\00\00H\89E\E8H\8BE\E8H\83\C0hH\89E\E8H\8BE\E8H\8BM\E0H9\C8\0F\84%\00\00\00H\8BE\E8H\8B@PH\8BM\E8H\8BI0H\89A0H\8BE\E8H\83\C0hH\89E\E8\E9\CA\FF\FF\FFH\8BE\F8H\8B\80@\02\00\00H\89E\E0H\8BE\F8H\8B\808\02\00\00H\89E\F0H\8BE\F0H\8BM\E0H9\C8\0F\84\9F\00\00\00H\8BE\F0H\83x0\00\0F\84z\00\00\00H\8BE\F0H\8B@\08\83x`\00\0F\8D\12\00\00\00H\8BE\F0H\8B@\10\83x`\00\0F\8FQ\00\00\00H\8BE\F0H\8B@\08\83x`\00\0F\85+\00\00\00H\8BE\F0H\8B\00H\8BM\F8H+\81\10\02\00\00H\03E\D0H\89E\D0H\8BE\D8H\83\C0\01H\89E\D8\E9\0F\00\00\00H\8BE\F0H\8B\00H\03E\D0H\89E\D0\E9\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00H\8BE\F0H\83\C0@H\89E\F0\E9P\FF\FF\FF\F2H\0F*E\D8H\8BE\F8\F2H\0F*\88\10\02\00\00\F2\0FY\C1\F2H\0F*M\D0\F2\0FX\C1]\C3\0F\1F\80\00\00\00\00UH\89\E5H\89}\F8H\C7E\D8\00\00\00\00H\C7E\D0\00\00\00\00H\8B}\F8H\8B\BF@\02\00\00H\89}\E0H\8B}\F8H\8B\BF8\02\00\00H\89}\F0H\8BE\F0H\8BM\E0H9\C8\0F\84A\00\00\00H\8BE\F0\83x\18\02\0F\85\11\00\00\00H\8BE\F0H\C7@0\01\00\00\00\E9\0C\00\00\00H\8BE\F0H\C7@0\00\00\00\00\E9\00\00\00\00H\8BE\F0H\83\C0@H\89E\F0\E9\AE\FF\FF\FFH\8BE\F8H\8B\800\02\00\00H\89E\E0H\8BE\F8H\8B\80(\02\00\00H\89E\E8H\8BE\E8H\83\C0hH\89E\E8H\8BE\E8H\8BM\E0H9\C8\0F\84%\00\00\00H\8BE\E8H\8B@PH\8BM\E8H\8BI0H\89A0H\8BE\E8H\83\C0hH\89E\E8\E9\CA\FF\FF\FFH\8BE\F8H\8B\80@\02\00\00H\89E\E0H\8BE\F8H\8B\808\02\00\00H\89E\F0H\8BE\F0H\8BM\E0H9\C8\0F\84\A1\00\00\00H\8BE\F0H\83x0\00\0F\84|\00\00\00H\8BE\F0H\8B@\08\83x`\00\0F\8D\12\00\00\00H\8BE\F0H\8B@\10\83x`\00\0F\8FS\00\00\00H\8BE\F0H\8B@\08\83x`\00\0F\85,\00\00\00H\8BE\F0H\8B@8H\8BM\F8H+\81\10\02\00\00H\03E\D0H\89E\D0H\8BE\D8H\83\C0\01H\89E\D8\E9\10\00\00\00H\8BE\F0H\8B@8H\03E\D0H\89E\D0\E9\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00H\8BE\F0H\83\C0@H\89E\F0\E9N\FF\FF\FF\F2H\0F*E\D8H\8BE\F8\F2H\0F*\88\10\02\00\00\F2\0FY\C1\F2H\0F*M\D0\F2\0FX\C1]\C3\0F\1FD\00\00UH\89\E5H\83\EC`H\89}\F0H\8B}\F0H\8B\BFH\02\00\00H\89}\D8H\8B}\F0H\8B\BFP\02\00\00H\89}\D0H\8B}\F0H\8B\BF(\02\00\00H\89}\E0H\8B}\F0H\8B\BF0\02\00\00H\89}\E8H\8B}\E0H\83\C7hH\89}\E0H\8BE\E0H\8BM\E8H9\C8\0F\83=\01\00\00H\8BE\E0H\8B@0H\89E\C8H\8BE\E0H\8B@PH\89E\C0H\8BE\C8H;E\D8\0F\82\7F\00\00\00H\8BE\C8H;E\D0\0F\83q\00\00\00H\83}\C0\00\0F\8C\0D\00\00\00H\8BE\C0H\89E\B8\E9\0C\00\00\001\C0\89\C1H+M\C0H\89M\B8H\8BE\B8H\8BM\F0H;\81\00\02\00\00\0F\8E3\00\00\00H\BF\1AI@\00\00\00\00\00\B0\00\E8\FD\E5\FF\FFH\BF3I@\00\00\00\00\00H\8BM\E0\8Bq`H\8BU\C0\89E\B4\B0\00\E8\DE\E5\FF\FF\89E\B0\E9\82\00\00\001\C0\89\C1H\8BU\C0H\8Bu\F0H+\8E\00\02\00\00H9\CA\0F\8C\19\00\00\00H\8BE\C0H\83\E8\01H\8BM\F0H;\81\00\02\00\00\0F\8EH\00\00\00H\BF\1AI@\00\00\00\00\00\B0\00\E8\90\E5\FF\FFH\BFdI@\00\00\00\00\00H\8Bu\C0\89E\AC\B0\00\E8x\E5\FF\FFH\8Bu\F0H\C7\86\E8\01\00\00\00\00\00\00H\C7E\F8\01\00\00\00\89E\A8\E92\00\00\00\E9\00\00\00\00\E9\00\00\00\00H\8BE\E0H\83\C0hH\89E\E0\E9\B2\FE\FF\FFH\8BE\F0H\C7\80\E8\01\00\00\01\00\00\00H\C7E\F8\00\00\00\00H\8BE\F8H\83\C4`]\C3ffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC@H\89}\F0H\8B}\F0H\8B\BF@\02\00\00H\89}\E0H\8B}\F0H\8B\BF8\02\00\00H\89}\E8H\8BE\E8H;E\E0\0F\83\C9\00\00\00H\8BE\E8H\8B\08H\8BP\08H\8B\12H)\D1H\8B@\10H\8B\00H\01\C1H\89M\D8H\8BE\E8\8Bp\18\89\F7\83\EF\FF\89u\D4\89}\D0\0F\84r\00\00\00\E9\00\00\00\00\8BE\D4\83\E8\02\89E\CC\0F\82\19\00\00\00\E9\00\00\00\00\8BE\D4\83\E8\02\89E\C8\0F\84+\00\00\00\E9J\00\00\001\C0\89\C1H\8BU\D8H\8Bu\F0H+\8E\00\02\00\00H9\CA\0F\8D\05\00\00\00\E9Q\00\00\00\E9)\00\00\00H\8BE\D8H\8BM\F0H;\81\00\02\00\00\0F\8E\05\00\00\00\E92\00\00\00\E9\0A\00\00\00\E9\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00H\8BE\E8H\83\C0@H\89E\E8\E9)\FF\FF\FFH\C7E\F8\00\00\00\00\E9@\00\00\00H\BE\83I@\00\00\00\00\00H\8B<%\C0``\00\B0\00\E8)\E4\FF\FFH\BE\9AI@\00\00\00\00\00H\8B<%\C0``\00\89E\C4\B0\00\E8\0D\E4\FF\FFH\C7E\F8\01\00\00\00\89E\C0H\8BE\F8H\83\C4@]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC\10H\89}\F8H\8B}\F8H\83\BF(\02\00\00\00\0F\84\13\00\00\00H\8BE\F8H\8B\80(\02\00\00H\89\C7\E8O\E3\FF\FFH\8BE\F8H\83\B88\02\00\00\00\0F\84\13\00\00\00H\8BE\F8H\8B\808\02\00\00H\89\C7\E8*\E3\FF\FFH\8BE\F8H\83\B8H\02\00\00\00\0F\84\13\00\00\00H\8BE\F8H\8B\80H\02\00\00H\89\C7\E8\05\E3\FF\FF1\C0H\8BM\F8H\C7\810\02\00\00\00\00\00\00H\8BM\F8H\C7\81(\02\00\00\00\00\00\00H\8BM\F8H\C7\81@\02\00\00\00\00\00\00H\8BM\F8H\C7\818\02\00\00\00\00\00\00H\8BM\F8H\C7\81P\02\00\00\00\00\00\00H\8BM\F8H\C7\81H\02\00\00\00\00\00\00H\83\C4\10]\C3\0F\1F\00UH\89\E5H\83\EC`H\B8\B1I@\00\00\00\00\001\C9\89\CAH\89}\F0H\89u\E8H\C7E\E0\00\00\00\00H\8Bu\E8H\8B\B6@\02\00\00H\8B}\E8H+\97\B8\01\00\00H\C1\E2\06H\01\D6H\89u\C0H\8B}\F0H\89\C6\E8\0D\E3\FF\FFH\89E\E0H\83\F8\00\0F\85\0D\00\00\00H\C7E\F8\FF\FF\FF\FF\E9\90\01\00\00H\8B}\E8\E8\99\F5\FF\FFH\8B}\E8H\8B\BF(\02\00\00H\8BE\E8Hk\80\90\01\00\00hH\01\C7H\8BG8H\89E\D8H\83}\D8\00\0F\84F\01\00\00H\8BE\D8H\83x0\00\0F\84!\01\00\00H\BE\B3I@\00\00\00\00\00H\8B}\E0\B0\00\E8H\E2\FF\FFH\8Bu\D8H\89u\D0\89E\BCH\83}\D0\00\0F\84\F1\00\00\00H\8BE\D0H;E\C0\0F\82\18\00\00\00H\BE\B7I@\00\00\00\00\00H\8B}\E0\B0\00\E8\0F\E2\FF\FF\89E\B8H\BE\BCI@\00\00\00\00\001\C0H\8B}\E0H\8BM\D0H\8BI\10+A`\89\C2\B0\00\E8\E8\E1\FF\FFH\8BM\D0H\8BI\10H\8Bu\E8Hk\B6\98\01\00\00hH\01\F1H\8BI8H\89M\C8\89E\B4H\83}\C8\00\0F\84*\00\00\00H\8BE\C8H\83x0\00\0F\84\05\00\00\00\E9\16\00\00\00\E9\00\00\00\00H\8BE\C8H\8B@ H\89E\C8\E9\CB\FF\FF\FFH\83}\C8\00\0F\85\19\00\00\00H\8B}\E0\E8-\E1\FF\FFH\C7E\F8\FF\FF\FF\FF\89E\B0\E9[\00\00\00H\8BE\C8H\8B@\10\83x`\00\0F\84\0D\00\00\00H\8BE\C8H\89E\D0\E9\08\00\00\00H\C7E\D0\00\00\00\00\E9\04\FF\FF\FF\E9\00\00\00\00\E9\00\00\00\00H\8BE\D8H\8B@ H\89E\D8\E9\AF\FE\FF\FFH\8B}\E0\E8\CD\E0\FF\FFH\C7E\F8\00\00\00\00\89E\ACH\8BE\F8H\83\C4`]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8H\89u\F0H\83}\F0\00\0F\8D\13\00\00\00\B0\01H\8BM\F8\83y\18\01\88E\EF\0F\84&\00\00\001\C0\88\C1H\83}\F0\00\88M\EE\0F\8E\0E\00\00\00H\8BE\F8\83x\18\02\0F\94\C1\88M\EE\8AE\EE\88E\EF\8AE\EF$\01\0F\B6\C0]\C3f\0F\1FD\00\00UH\89\E5H\83\EC0\B8\02\00\00\00\89\C1H\89}\F8H\89u\F0H\8Bu\F8H\89u\E8H\8Bu\F0H\89u\E0H\8Bu\E8H\03u\E0H\89\F0H\99H\F7\F9H\8B\04\C5\D0``\00H\8B@\10H\89E\D8\E9\00\00\00\00H\8BE\E8H\8B\04\C5\D0``\00H\8B@\10H;E\D8\0F\8E\11\00\00\00H\8BE\E8H\83\C0\01H\89E\E8\E9\D5\FF\FF\FF\E9\00\00\00\00H\8BE\D8H\8BM\E0H\8B\0C\CD\D0``\00H;A\10\0F\8E\11\00\00\00H\8BE\E0H\83\C0\FFH\89E\E0\E9\D5\FF\FF\FFH\8BE\E8H;E\E0\0F\8D8\00\00\00H\8BE\E8H\8B\04\C5\D0``\00H\89E\D0H\8BE\E0H\8B\04\C5\D0``\00H\8BM\E8H\89\04\CD\D0``\00H\8BE\D0H\8BM\E0H\89\04\CD\D0``\00H\8BE\E8H;E\E0\0F\8F\18\00\00\00H\8BE\E8H\83\C0\01H\89E\E8H\8BE\E0H\83\C0\FFH\89E\E0\E9\00\00\00\00H\8BE\E8H;E\E0\0F\8E!\FF\FF\FFH\8BE\F8H;E\E0\0F\8D\0D\00\00\00H\8B}\F8H\8Bu\E0\E8\BF\FE\FF\FFH\8BE\E8H;E\F0\0F\8D\18\00\00\00H\83}\E82\0F\8F\0D\00\00\00H\8B}\E8H\8Bu\F0\E8\99\FE\FF\FFH\83\C40]\C3\0F\1F\00UH\89\E5H\83\ECpH\89}\F0H\89u\E8H\89U\E0H\89M\D8H\83<%\98``\00\00\0F\84\91\00\00\00H\C7E\D0\01\00\00\00H\81}\D0_\01\00\00\0F\8D/\00\00\00H\B8\D0k`\00\00\00\00\00HkM\D0\18H\01\C8H\8BM\D0H\89\04\CD\D0``\00H\8BE\D0H\83\C0\01H\89E\D0\E9\C3\FF\FF\FF\B8,\01\00\00\89\C1H\8BU\F0H\83\EA\01H\89\D0H\99H\F7\F9H\83\C0\01H\89\04%\B8\8C`\00H\C7\04%\C0\8C`\00\00\00\00\00H\C7\04%\C8\8C`\00\00\00\00\00H\C7\04%\98``\00\00\00\00\00\E97\01\00\00H\C7E\D0\02\00\00\00H\C7E\C8\00\00\00\001\C0\88\C1H\83}\D02\88M\AF\0F\8F\12\00\00\00H\8BE\D0H;\04%\C8\8C`\00\0F\9E\C1\88M\AF\8AE\AF\A8\01\0F\85\05\00\00\00\E9\E7\00\00\00H\8BE\D0H\8B\04\C5\D0``\00H\8B\00H\89E\B8H\8BE\B8H\8B\00H\8BM\B8H\8BI\08H+\01H\8BM\B8H\8BI\10H\03\01H\89E\B0H\83}\B0\00\0F\8D\0E\00\00\00H\8BE\B8\83x\18\01\0F\84\19\00\00\00H\83}\B0\00\0F\8Ey\00\00\00H\8BE\B8\83x\18\02\0F\85k\00\00\00H\8BE\C8H\83\C0\01H\89E\C8H\8BE\B8H\8BM\C8H\8B\0C\CD\D0``\00H\89\01H\8BE\B0H\8BM\C8H\8B\0C\CD\D0``\00H\89A\08H\83}\B0\00\0F\8C\0D\00\00\00H\8BE\B0H\89E\A0\E9\0C\00\00\001\C0\89\C1H+M\B0H\89M\A0H\8BE\A0H\8BM\C8H\8B\0C\CD\D0``\00H\89A\10\E9\00\00\00\00H\8BE\D0H\83\C0\01H\89E\D0\E9\E5\FE\FF\FFH\8BE\C8H\89\04%\C8\8C`\00H\8B\04%\C0\8C`\00H\89E\C0H\8BE\E8H\8B\0C%\C0\8C`\00H\C1\E1\06H\01\C8H\89E\B8H\8BE\B8H;E\E0\0F\83\E7\00\00\00H\8BE\B8\83x\18\00\0F\8E\BB\00\00\00H\8BE\B8H\8B\00H\8BM\B8H\8BI\08H+\01H\8BM\B8H\8BI\10H\03\01H\89E\B0H\8B}\B8H\8Bu\B0\E8\D4\FB\FF\FF\83\F8\00\0F\84\7F\00\00\00H\8B\04%\C8\8C`\00H\83\C0\01H\89\04%\C8\8C`\00H\8BE\B8H\8B\0C%\C8\8C`\00H\8B\0C\CD\D0``\00H\89\01H\8BE\B0H\8B\0C%\C8\8C`\00H\8B\0C\CD\D0``\00H\89A\08H\83}\B0\00\0F\8C\0D\00\00\00H\8BE\B0H\89E\98\E9\0C\00\00\001\C0\89\C1H+M\B0H\89M\98H\8BE\98H\8B\0C%\C8\8C`\00H\8B\0C\CD\D0``\00H\89A\10\E9\00\00\00\00\E9\00\00\00\00H\8B\04%\B8\8C`\00H\C1\E0\06H\03E\B8H\89E\B8\E9\0B\FF\FF\FFH\8B\04%\C0\8C`\00H\83\C0\01H\89\04%\C0\8C`\00H;\04%\B8\8C`\00\0F\85\0C\00\00\00H\C7\04%\C0\8C`\00\00\00\00\00H\83<%\C8\8C`\002\0F\8D\17\00\00\00H\8B\04%\C0\8C`\00H;E\C0\0F\84\05\00\00\00\E9\A0\FE\FF\FFH\83<%\C8\8C`\00\00\0F\85$\00\00\00H\C7\04%\98``\00\01\00\00\00H\8BE\D8H\C7\00\00\00\00\00H\C7E\F8\00\00\00\00\E96\00\00\00\B8\01\00\00\00\89\C7H\8B4%\C8\8C`\00\E8\EE\FA\FF\FFH\8B4%\D8``\00H\8Bv\08H\8B}\D8H\897H\8B4%\D8``\00H\8B6H\89u\F8H\8BE\F8H\83\C4p]\C3f\90UH\89\E5H\89}\F8H\89u\F0H\89U\E8H\89M\E0L\89E\D8H\C7E\D0\00\00\00\00H\8BE\E8H;E\E0\0F\84\96\01\00\00H\8BE\E8H\8B@XH\8BM\E0H;AX\0F\8D\C0\00\00\00H\8BE\E8\83x\08\00\0F\84<\00\00\00H\8BE\F8H\8B\00H\8BM\E8H;AP\0F\8E\22\00\00\00H\8BE\E8H\89E\D0H\8BE\E8H\8B@PH\8BM\F8H\89\01H\8BE\F0H\C7\00\00\00\00\00\E9e\00\00\00H\8BE\E8H\8B@\18H\83x\18\00\0F\84M\00\00\00\B8\01\00\00\00\89\C1H\8BU\F8H\8B\12H\8Bu\E8H+NPH9\CA\0F\8E)\00\00\00\B8\01\00\00\00\89\C1H\8BU\E8H\89U\D0H\8BU\E8H+JPH\8BU\F8H\89\0AH\8BM\F0H\C7\01\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00H\8BE\E8H\8B@\18H\89E\E8\E9\BB\00\00\00H\8BE\E0\83x\08\00\0F\85<\00\00\00H\8BE\F8H\8B\00H\8BM\E0H;AP\0F\8C\22\00\00\00H\8BE\E0H\89E\D0H\8BE\E0H\8B@PH\8BM\F8H\89\01H\8BE\F0H\C7\00\01\00\00\00\E9e\00\00\00H\8BE\E0H\8B@\18H\83x\18\00\0F\84M\00\00\00\B8\01\00\00\00\89\C1H\8BU\F8H\8B\12H\8Bu\E0H+NPH9\CA\0F\8C)\00\00\00\B8\01\00\00\00\89\C1H\8BU\E0H\89U\D0H\8BU\E0H+JPH\8BU\F8H\89\0AH\8BM\F0H\C7\01\01\00\00\00\E9\00\00\00\00\E9\00\00\00\00H\8BE\E0H\8B@\18H\89E\E0\E9\5C\FE\FF\FFH\8BE\E8H\8BM\D8H\89\01H\8BE\D0]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8H\89u\F0H\89U\E8H\8BE\F8H;E\E8\0F\84A\00\00\00H\8BE\F8\83x\08\00\0F\84\11\00\00\00H\8BE\F8H\C7@P\00\00\00\00\E9\0C\00\00\00H\8BE\F8H\C7@P\01\00\00\00\E9\00\00\00\00H\8BE\F8H\8B@\18H\89E\F8\E9\B1\FF\FF\FF\E9\00\00\00\00H\8BE\F0H;E\E8\0F\84A\00\00\00H\8BE\F0\83x\08\00\0F\84\11\00\00\00H\8BE\F0H\C7@P\01\00\00\00\E9\0C\00\00\00H\8BE\F0H\C7@P\00\00\00\00\E9\00\00\00\00H\8BE\F0H\8B@\18H\89E\F0\E9\B1\FF\FF\FF]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5AWAVAUATSH\81\EC\F8\00\00\00H\89}\D0H\C7E\B8\00\00\00\00H\8B}\D0H\8B\BF8\02\00\00H\89\BDh\FF\FF\FFH\8B}\D0H\8B\BF@\02\00\00H\89\BD`\FF\FF\FFH\8B}\D0H\8B\BF\A8\01\00\00H\89\BDP\FF\FF\FFH\8B}\D0H\81\C7X\02\00\00H\89\BD8\FF\FF\FFH\8B}\D0H\81\C7`\02\00\00H\89\BD0\FF\FF\FFH\8B}\D0H\81\C7h\02\00\00H\89\BD(\FF\FF\FFH\83}\B8\00\0F\95\C04\FF\A8\01\0F\85\05\00\00\00\E9\D5\02\00\00H\8D\8D@\FF\FF\FFH\8B\BDP\FF\FF\FFH\8B\B5h\FF\FF\FFH\8B\95`\FF\FF\FF\E8\CC\F8\FF\FFH\89\85x\FF\FF\FFH\83\F8\00\0F\84\96\02\00\00H\8B\858\FF\FF\FFH\8B\08H\83\C1\01H\89\08H\83\BD@\FF\FF\FF\00\0F\8E#\00\00\00H\8B\85x\FF\FF\FFH\8B@\10H\89E\A0H\8B\85x\FF\FF\FFH\8B@\08H\89E\98\E9\1E\00\00\00H\8B\85x\FF\FF\FFH\8B@\08H\89E\A0H\8B\85x\FF\FF\FFH\8B@\10H\89E\98H\8D}\C8H\8Du\B0L\8DE\80H\C7E\C8\01\00\00\00H\8BU\A0H\8BM\98\E8\0A\FC\FF\FFH\89E\90H\83}\90\00\0F\85d\00\00\00H\8B\850\FF\FF\FFH\8B\08H\83\C1\01H\89\08H\8B\85x\FF\FF\FF\83x\18\02\0F\85\13\00\00\00H\8B\85x\FF\FF\FF\C7@\18\01\00\00\00\E9\0E\00\00\00H\8B\85x\FF\FF\FF\C7@\18\02\00\00\00H\83}\C8\00\0F\84\11\00\00\00H\8B}\A0H\8Bu\98H\8BU\80\E8|\FD\FF\FF\E9\9D\01\00\00H\83}\B0\00\0F\84\1E\00\00\00H\8BE\98H\89\85X\FF\FF\FFH\8BE\A0H\89E\98H\8B\85X\FF\FF\FFH\89E\A0H\8BE\90H\8B@\18H\89E\88H\8BE\90H\8B@0H\89\85p\FF\FF\FFH\8BE\B0H\8BM\90HcI\08H9\C8\0F\84\10\00\00\00H\C7\85H\FF\FF\FF\01\00\00\00\E9\0B\00\00\00H\C7\85H\FF\FF\FF\02\00\00\00H\83\BD@\FF\FF\FF\00\0F\8E\14\00\00\00\B8\01\00\00\00\89\C1H+M\C8H\89M\C0\E9\08\00\00\00H\8BE\C8H\89E\C0H\8B\85x\FF\FF\FFH\8B@\08H;E\A0\0F\85\0D\00\00\00H\C7E\A8\01\00\00\00\E9\08\00\00\00H\C7E\A8\00\00\00\00H\83}\B0\00\0F\95\C04\FF$\01\0F\B6\C8Hc\F9H\8Bu\A8H\8BU\C8H\8BM\C0L\8BE\A0L\8BM\98L\8BU\90L\8B]\88H\8B]\80L\8B\B5x\FF\FF\FFL\8B\BD@\FF\FF\FFL\8Be\D0M\8B\A4$\00\02\00\00L\89\14$L\89\5C$\08H\89\5C$\10L\89t$\18L\89|$ L\89d$(\E8\C1\0D\00\00A\BD\C8\00\00\00D\89\E9H\8B\95x\FF\FF\FF\C7B\18\00\00\00\00H\8B\95H\FF\FF\FFA\89\D5H\8B\95p\FF\FF\FFD\89j\18H\8B\958\FF\FF\FFH\8B\12H\83\EA\01H\89\D0H\99H\F7\F9H\83\FA\00\0F\85\16\00\00\00H\8B}\D0\E8\5C\E9\FF\FFH\8B\BD(\FF\FF\FFH\03\07H\89\07\E9\00\00\00\00\E9\08\00\00\00H\C7E\B8\01\00\00\00\E9\14\FD\FF\FFH\8B}\D0\E8/\E9\FF\FFH\8B\BD(\FF\FF\FFH\03\07H\89\07H\8B}\D0\E8\09\EE\FF\FFH\8B}\D0H\89\85 \FF\FF\FF\E8\C9\EF\FF\FF1\C9\89\CFH\89\85\18\FF\FF\FFH\89\F8H\81\C4\F8\00\00\00[A\5CA]A^A_]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5H\89}\F8H\8B}\F8H\8B\BF(\02\00\00H\89}\F0H\89}\E8H\8B}\F0H\83\C7hH\89}\F0H\8B}\E8H\C7G0\00\00\00\00H\8B}\E8H\C7G\18\00\00\00\00H\8B}\F0H\8BE\E8H\89x\10H\8BE\E8H\C7@ \00\00\00\00H\8BE\E8H\C7@(\00\00\00\00H\8BE\F8H\8B\80\90\01\00\00H\83\C0\01H\8B}\E8H\89GXH\8BE\E8\C7@\08\00\00\00\00H\8BE\E8H\C7\00\00\1F\0A\FAH\8BE\E8H\C7@P\00\00\00\00H\8BE\F8H\8B\80@\02\00\00H\89E\D8H\8BE\F8H\8B\808\02\00\00H\89E\E0H\8BE\E0H\8BM\D8H9\C8\0F\84/\00\00\00H\8BE\E0\83x\18\FF\0F\84\0B\00\00\00H\8BE\E0\C7@\18\01\00\00\00\E9\00\00\00\00H\8BE\E0H\83\C0@H\89E\E0\E9\C0\FF\FF\FFH\8BE\F8H\8B\80H\02\00\00H\89E\E0H\8BE\F8H\8B\800\02\00\00H\89E\D8H\8BE\F0H\8BM\D8H9\C8\0F\84\BD\00\00\00H\8BE\E0H\8BM\F0H\89A0H\8BE\E8H\8BM\F0H\89A\18H\8BE\F0H\C7@\10\00\00\00\00H\8BE\F0H\83\C0hH\8BM\F0H\89A H\8BE\F0H\83\C0\98H\8BM\F0H\89A(H\8BE\F0H\C7@X\01\00\00\00H\8BE\E0H\C7\00\00\E1\F5\05H\8BE\E0\C7@\18\00\00\00\00H\8BE\F0\C7@\08\01\00\00\00H\8BE\F0H\C7\00\00\00\00\00H\8BE\F0H\8BM\E0H\89A\08H\8BE\E8H\8BM\E0H\89A\10H\8BE\F0H\C7@P\00\00\00\00H\8BE\E0H\83\C0@H\89E\E0H\8BE\F0H\83\C0hH\89E\F0\E92\FF\FF\FF1\C0H\8BM\F0H\83\C1\98H\89M\F0H\8BM\E8H\83\C1hH\89M\E8H\8BM\F0H\C7A \00\00\00\00H\8BM\E8H\C7A(\00\00\00\00]\C3f\0F\1FD\00\00UH\89\E5H\81\ECp\01\00\00H\BE\C0I@\00\00\00\00\00H\89}\F0H\C7E\E8\00\00\00\00H\8B}\F0\E8\F6\D2\FF\FFH\89E\E8H\83\F8\00\0F\85\0D\00\00\00H\C7E\F8\FF\FF\FF\FF\E9y\0A\00\00\BE\C8\00\00\00H\8D\BD\10\FF\FF\FFH\8BU\E8\E8V\D2\FF\FFH\BE\E5I@\00\00\00\00\00H\8D\95\08\FF\FF\FFH\8D\8D\00\FF\FF\FFH\8D\BD\10\FF\FF\FFH\89\85\D8\FE\FF\FF\B0\00\E8y\D2\FF\FF\83\F8\02\0F\84\0D\00\00\00H\C7E\F8\FF\FF\FF\FF\E9!\0A\00\00H\8B\85\08\FF\FF\FFH\8BM\F0H\89\81\98\01\00\00H\8B\85\00\FF\FF\FFH\8BM\F0H\89\81\B0\01\00\00H\8B\85\08\FF\FF\FFH\03\85\08\FF\FF\FFH\83\C0\01H\8BM\F0H\89\81\90\01\00\00H\8B\85\08\FF\FF\FFH\03\85\08\FF\FF\FFH\03\85\08\FF\FF\FFH\03\85\00\FF\FF\FFH\8BM\F0H\89\81\A8\01\00\00H\8BE\F0H\81\B8\98\01\00\00\98:\00\00\0F\8F*\00\00\00H\8BE\F0H\8B\80\A8\01\00\00H\8BM\F0H\89\81\A0\01\00\00H\8BE\F0H\C7\80\C8\01\00\00\C0\C6-\00\E9\1E\00\00\00H\8BE\F0H\C7\80\A0\01\00\00\00\00\A1\01H\8BE\F0H\C7\80\C8\01\00\00\A0\FA\B8\01\B8h\00\00\00\89\C6H\8BM\F0H\8B\89\A0\01\00\00H\8BU\F0H+\8A\A8\01\00\00H\8BU\F0H\89\8A\C0\01\00\00H\8BM\F0H\8B\89\90\01\00\00H\83\C1\01H\89\CF\E8\1F\D1\FF\FFA\B8@\00\00\00D\89\C6H\8BM\F0H\89\81(\02\00\00H\8BE\F0H\8B\B8\90\01\00\00\E8\FB\D0\FF\FFA\B8@\00\00\00D\89\C6H\8BM\F0H\89\81H\02\00\00H\8BE\F0H\8B\B8\A0\01\00\00\E8\D7\D0\FF\FFH\8BM\F0H\89\818\02\00\00H\8BE\F0H\83\B8(\02\00\00\00\0F\84$\00\00\00H\8BE\F0H\83\B88\02\00\00\00\0F\84\12\00\00\00H\8BE\F0H\83\B8H\02\00\00\00\0F\854\00\00\00H\BF\C2I@\00\00\00\00\00\B0\00\E8U\D0\FF\FFH\8B}\F0\89\85\D4\FE\FF\FF\E8\96\EC\FF\FFH\C7E\F8\FF\FF\FF\FFH\89\85\C8\FE\FF\FF\E9`\08\00\00H\8BE\F0H\8B\80(\02\00\00H\8BM\F0Hk\89\90\01\00\00hH\01\C8H\83\C0hH\8BM\F0H\89\810\02\00\00H\8BE\F0H\8B\808\02\00\00H\8BM\F0H\8B\89\A8\01\00\00H\C1\E1\06H\01\C8H\8BM\F0H\89\81@\02\00\00H\8BE\F0H\8B\80H\02\00\00H\8BM\F0H\8B\89\90\01\00\00H\C1\E1\06H\01\C8H\8BM\F0H\89\81P\02\00\00H\8BE\F0H\8B\80(\02\00\00H\89\85\E0\FE\FF\FFH\8BE\F0H\8B\808\02\00\00H\89\85\E8\FE\FF\FFH\C7\85\F0\FE\FF\FF\01\00\00\00H\8B\85\F0\FE\FF\FFH\8BM\F0H;\81\98\01\00\00\0F\8F%\04\00\00\BE\C8\00\00\00H\8D\BD\10\FF\FF\FFH\8BU\E8\E8}\CF\FF\FFH\BE\E5I@\00\00\00\00\00H\8D\95\08\FF\FF\FFH\8D\8D\00\FF\FF\FFH\8D\BD\10\FF\FF\FFH\89\85\C0\FE\FF\FF\B0\00\E8\A0\CF\FF\FF\83\F8\02\0F\85\14\00\00\00H\8B\85\08\FF\FF\FFH;\85\00\FF\FF\FF\0F\8E\0D\00\00\00H\C7E\F8\FF\FF\FF\FF\E94\07\00\001\C0\89\C1H+\8D\F0\FE\FF\FF\89\C8H\8B\8D\E0\FE\FF\FFHk\95\F0\FE\FF\FFhH\01\D1\89A`H\8B\8D\E0\FE\FF\FFHk\95\F0\FE\FF\FFhH\01\D1H\C7AP\FF\FF\FF\FFH\8B\8D\F0\FE\FF\FF\89\C8H\8B\8D\E0\FE\FF\FFH\8B\95\F0\FE\FF\FFH\8Bu\F0H\03\96\98\01\00\00Hk\D2hH\01\D1\89A`H\8B\8D\E0\FE\FF\FFH\8B\95\F0\FE\FF\FFH\8Bu\F0H\03\96\98\01\00\00Hk\D2hH\01\D1H\C7AP\01\00\00\00H\8B\8D\08\FF\FF\FF\89\C8H\8B\8D\E0\FE\FF\FFHk\95\F0\FE\FF\FFhH\01\D1\89AdH\8B\8D\00\FF\FF\FF\89\C8H\8B\8D\E0\FE\FF\FFH\8B\95\F0\FE\FF\FFH\8Bu\F0H\03\96\98\01\00\00Hk\D2hH\01\D1\89AdH\8B\8D\E0\FE\FF\FFH\8BU\F0Hk\92\90\01\00\00hH\01\D1H\8B\95\E8\FE\FF\FFH\89J\08H\8B\8D\E0\FE\FF\FFHk\95\F0\FE\FF\FFhH\01\D1H\8B\95\E8\FE\FF\FFH\89J\10H\8BM\F0H\8B\89\10\02\00\00H\83\C1\0FH\8B\95\E8\FE\FF\FFH\89\0AH\8B\95\E8\FE\FF\FFH\89J8H\8B\8D\E8\FE\FF\FFH\8BI\08H\8BI8H\8B\95\E8\FE\FF\FFH\89J H\8B\8D\E8\FE\FF\FFH\8B\95\E8\FE\FF\FFH\8BR\08H\89J8H\8B\8D\E8\FE\FF\FFH\8BI\10H\8BI@H\8B\95\E8\FE\FF\FFH\89J(H\8B\8D\E8\FE\FF\FFH\8B\95\E8\FE\FF\FFH\8BR\10H\89J@H\8B\8D\E8\FE\FF\FFH\83\C1@H\89\8D\E8\FE\FF\FFH\8B\8D\E0\FE\FF\FFH\8B\95\F0\FE\FF\FFH\8Bu\F0H\03\96\98\01\00\00Hk\D2hH\01\D1H\8B\95\E8\FE\FF\FFH\89J\08H\8B\8D\E0\FE\FF\FFH\8BU\F0Hk\92\90\01\00\00hH\01\D1H\8B\95\E8\FE\FF\FFH\89J\10H\8B\8D\E8\FE\FF\FFH\C7\01\0F\00\00\00H\8B\8D\E8\FE\FF\FFH\C7A8\0F\00\00\00H\8B\8D\E8\FE\FF\FFH\8BI\08H\8BI8H\8B\95\E8\FE\FF\FFH\89J H\8B\8D\E8\FE\FF\FFH\8B\95\E8\FE\FF\FFH\8BR\08H\89J8H\8B\8D\E8\FE\FF\FFH\8BI\10H\8BI@H\8B\95\E8\FE\FF\FFH\89J(H\8B\8D\E8\FE\FF\FFH\8B\95\E8\FE\FF\FFH\8BR\10H\89J@H\8B\8D\E8\FE\FF\FFH\83\C1@H\89\8D\E8\FE\FF\FFH\8B\8D\E0\FE\FF\FFHk\95\F0\FE\FF\FFhH\01\D1H\8B\95\E8\FE\FF\FFH\89J\08H\8B\8D\E0\FE\FF\FFH\8B\95\F0\FE\FF\FFH\8Bu\F0H\03\96\98\01\00\00Hk\D2hH\01\D1H\8B\95\E8\FE\FF\FFH\89J\10H\8BM\F0H\81\B9\10\02\00\00\80\96\98\00\0F\8E\17\00\00\00H\8BE\F0H\8B\80\10\02\00\00H\89\85\B8\FE\FF\FF\E9\13\00\00\00\B8\80\96\98\00\89\C1H\89\8D\B8\FE\FF\FF\E9\00\00\00\00H\8B\85\B8\FE\FF\FFH\C1\E0\01H\8B\8D\E8\FE\FF\FFH\89\01H\8B\8D\E8\FE\FF\FFH\89A8H\8B\85\E8\FE\FF\FFH\8B@\08H\8B@8H\8B\8D\E8\FE\FF\FFH\89A H\8B\85\E8\FE\FF\FFH\8B\8D\E8\FE\FF\FFH\8BI\08H\89A8H\8B\85\E8\FE\FF\FFH\8B@\10H\8B@@H\8B\8D\E8\FE\FF\FFH\89A(H\8B\85\E8\FE\FF\FFH\8B\8D\E8\FE\FF\FFH\8BI\10H\89A@H\8B\85\E8\FE\FF\FFH\83\C0@H\89\85\E8\FE\FF\FFH\8B\85\F0\FE\FF\FFH\83\C0\01H\89\85\F0\FE\FF\FF\E9\C3\FB\FF\FFH\8B\85\F0\FE\FF\FFH\8BM\F0H\8B\89\98\01\00\00H\83\C1\01H9\C8\0F\84\0D\00\00\00H\C7E\F8\FF\FF\FF\FF\E9O\03\00\00H\C7\85\F0\FE\FF\FF\00\00\00\00H\8B\85\F0\FE\FF\FFH\8BM\F0H;\81\B0\01\00\00\0F\8DS\01\00\00\BE\C8\00\00\00H\8D\BD\10\FF\FF\FFH\8BU\E8\E8\09\CB\FF\FFH\BE\E1I@\00\00\00\00\00H\8D\95\08\FF\FF\FFH\8D\8D\00\FF\FF\FFL\8D\85\F8\FE\FF\FFH\8D\BD\10\FF\FF\FFH\89\85\B0\FE\FF\FF\B0\00\E8%\CB\FF\FF\83\F8\03\0F\84\0D\00\00\00H\C7E\F8\FF\FF\FF\FF\E9\CD\02\00\00H\8B\85\E0\FE\FF\FFH\8B\8D\08\FF\FF\FFH\8BU\F0H\03\8A\98\01\00\00Hk\C9hH\01\C8H\8B\8D\E8\FE\FF\FFH\89A\08H\8B\85\E0\FE\FF\FFHk\8D\00\FF\FF\FFhH\01\C8H\8B\8D\E8\FE\FF\FFH\89A\10H\8B\85\F8\FE\FF\FFH\8B\8D\E8\FE\FF\FFH\89A8H\8B\85\F8\FE\FF\FFH\8B\8D\E8\FE\FF\FFH\89\01H\8B\85\E8\FE\FF\FFH\8B@\08H\8B@8H\8B\8D\E8\FE\FF\FFH\89A H\8B\85\E8\FE\FF\FFH\8B\8D\E8\FE\FF\FFH\8BI\08H\89A8H\8B\85\E8\FE\FF\FFH\8B@\10H\8B@@H\8B\8D\E8\FE\FF\FFH\89A(H\8B\85\E8\FE\FF\FFH\8B\8D\E8\FE\FF\FFH\8BI\10H\89A@H\8B\85\F0\FE\FF\FFH\83\C0\01H\89\85\F0\FE\FF\FFH\8B\85\E8\FE\FF\FFH\83\C0@H\89\85\E8\FE\FF\FF\E9\95\FE\FF\FFH\8BE\F0H\8B\80@\02\00\00H;\85\E8\FE\FF\FF\0F\84\8E\00\00\00H\8B\85\E8\FE\FF\FFH\8BM\F0H\89\81@\02\00\00H\8BE\F0H\8B\808\02\00\00H\89\85\E8\FE\FF\FFH\8BE\F0H\C7\80\A8\01\00\00\00\00\00\00H\8B\85\E8\FE\FF\FFH\8BM\F0H;\81@\02\00\00\0F\83-\00\00\00H\8BE\F0H\8B\88\A8\01\00\00H\83\C1\01H\89\88\A8\01\00\00H\8B\85\E8\FE\FF\FFH\83\C0@H\89\85\E8\FE\FF\FF\E9\BB\FF\FF\FFH\8BE\F0H\8B\80\A8\01\00\00H\8BM\F0H\89\81\B0\01\00\00H\8B}\E8\E8\EC\C8\FF\FFH\8B}\F0\C6\87\C8\00\00\00\00H\C7\85\F0\FE\FF\FF\01\00\00\00\89\85\AC\FE\FF\FFH\8B\85\F0\FE\FF\FFH\8BM\F0H;\81\98\01\00\00\0F\8F\EE\00\00\00H\8BE\F0H\81\B8\10\02\00\00\80\96\98\00\0F\8E\17\00\00\00H\8BE\F0H\8B\80\10\02\00\00H\89\85\A0\FE\FF\FF\E9\13\00\00\00\B8\80\96\98\00\89\C1H\89\8D\A0\FE\FF\FF\E9\00\00\00\00H\8B\85\A0\FE\FF\FFHk\C0\FEH\8BM\F0H\8B\898\02\00\00Hk\95\F0\FE\FF\FF\03H\83\EA\01H\C1\E2\06H\01\D1H\89\01H\8BE\F0H\81\B8\10\02\00\00\80\96\98\00\0F\8E\17\00\00\00H\8BE\F0H\8B\80\10\02\00\00H\89\85\98\FE\FF\FF\E9\13\00\00\00\B8\80\96\98\00\89\C1H\89\8D\98\FE\FF\FF\E9\00\00\00\00H\8B\85\98\FE\FF\FFHk\C0\FEH\8BM\F0H\8B\898\02\00\00Hk\95\F0\FE\FF\FF\03H\83\EA\01H\C1\E2\06H\01\D1H\89A8H\8B\85\F0\FE\FF\FFH\83\C0\01H\89\85\F0\FE\FF\FF\E9\FA\FE\FF\FFH\C7E\F8\00\00\00\00H\8BE\F8H\81\C4p\01\00\00]\C3\0F\1FD\00\00UH\89\E5AWAVSH\83\EC@H\8BE8L\8BU0L\8B](H\8B] L\8Bu\18L\8B}\10H\89}\E0H\89u\D8H\89U\D0H\89M\C8L\89E\C0L\89M\B8L\89}\B0L\89u\A8H\89]\A0L\89]\98L\89U\90H\89E\88H\8BE\98H\8B@\08H;E\B8\0F\85\0B\00\00\00H\83}\90\00\0F\8C\1D\00\00\00H\8BE\98H\8B@\08H;E\C0\0F\85E\00\00\00H\83}\90\00\0F\8E:\00\00\00H\83}\90\00\0F\8C\10\00\00\00H\8BE\90H\89\850\FF\FF\FF\E9\0F\00\00\001\C0\89\C1H+M\90H\89\8D0\FF\FF\FFH\8B\850\FF\FF\FFH\89E\90\E9<\00\00\00H\83}\90\00\0F\8C\10\00\00\00H\8BE\90H\89\85(\FF\FF\FF\E9\0F\00\00\001\C0\89\C1H+M\90H\89\8D(\FF\FF\FFH\8B\85(\FF\FF\FF1\C9\89\CAH)\C2H\89U\90H\8BE\B0H\89\85p\FF\FF\FFH\8BE\90H\8B\8Dp\FF\FF\FFH\03\01H\89\01H\8B\85p\FF\FF\FFH\8B@\10H\89\85h\FF\FF\FFH\83\BDh\FF\FF\FF\00\0F\84)\00\00\00\E9\00\00\00\00H\8BE\90H\8B\8Dh\FF\FF\FFH\03\01H\89\01H\8B\85h\FF\FF\FFH\89\85p\FF\FF\FF\E9\B7\FF\FF\FF\E9\00\00\00\00H\8B\85p\FF\FF\FFH;E\B0\0F\85\05\00\00\00\E9<\00\00\00H\8B\85p\FF\FF\FFH\8B@ H\89\85h\FF\FF\FFH\83\BDh\FF\FF\FF\00\0F\84\05\00\00\00\E9\9C\FF\FF\FFH\8B\85p\FF\FF\FFH\8B@\18H\89\85p\FF\FF\FF\E9\AE\FF\FF\FFH\8BE\C0H\89\85h\FF\FF\FFH\8B\85h\FF\FF\FFH\8B@\18H\89\85p\FF\FF\FFH\8BE\B0H\8B@XH\89\85H\FF\FF\FFH\89\85@\FF\FF\FFH\8BE\B8H\89\85`\FF\FF\FFH\8BE\98H\89\85x\FF\FF\FFH\8B\85h\FF\FF\FFH;E\A8\0F\84\14\02\00\00H\8B\85h\FF\FF\FFH\83x \00\0F\84\1A\00\00\00H\8B\85h\FF\FF\FFH\8B@(H\8B\8Dh\FF\FF\FFH\8BI H\89A(H\8B\85h\FF\FF\FFH\83x(\00\0F\84\1F\00\00\00H\8B\85h\FF\FF\FFH\8B@ H\8B\8Dh\FF\FF\FFH\8BI(H\89A \E9\16\00\00\00H\8B\85h\FF\FF\FFH\8B@ H\8B\8Dp\FF\FF\FFH\89A\10H\8B\85`\FF\FF\FFH\8B\8Dh\FF\FF\FFH\89A\18H\8B\85`\FF\FF\FFH\8B@\10H\8B\8Dh\FF\FF\FFH\89A H\8B\85h\FF\FF\FFH\83x \00\0F\84\16\00\00\00H\8B\85h\FF\FF\FFH\8B\8Dh\FF\FF\FFH\8BI H\89A(H\8B\85h\FF\FF\FFH\8B\8D`\FF\FF\FFH\89A\10H\8B\85h\FF\FF\FFH\C7@(\00\00\00\00H\8B\85h\FF\FF\FF\83x\08\00\0F\95\C2\80\F2\FF\80\E2\01\0F\B6\F2Hc\C6H\89\85X\FF\FF\FFH\8B\85X\FF\FF\FFH;E\E0\0F\85\1B\00\00\00H\8B\85h\FF\FF\FFH\8B@PH\03E\D0H\89\858\FF\FF\FF\E9\16\00\00\00H\8B\85h\FF\FF\FFH\8B@PH+E\D0H\89\858\FF\FF\FFH\8B\85h\FF\FF\FFH\8B@0H\89E\80H\8B\85h\FF\FF\FFH\8B@XH\89\85P\FF\FF\FFH\8BE\D8\89\C1H\8B\85h\FF\FF\FF\89H\08H\8BE\C8H\8B\95h\FF\FF\FFH\89BPH\8B\85x\FF\FF\FFH\8B\95h\FF\FF\FFH\89B0H\8B\85@\FF\FF\FFH\8B\95h\FF\FF\FFH\89BXH\8B\85h\FF\FF\FFH\89\85`\FF\FF\FFH\8B\85X\FF\FF\FFH\89E\D8H\8B\858\FF\FF\FFH\89E\C8H\8BE\80H\89\85x\FF\FF\FFH\8B\85H\FF\FF\FFH+\85P\FF\FF\FFH\89\85@\FF\FF\FFH\8B\85p\FF\FF\FFH\89\85h\FF\FF\FFH\8B\85h\FF\FF\FFH\8B@\18H\89\85p\FF\FF\FF\E9\DB\FD\FF\FFH\8BE\D0H;E\88\0F\8E*\01\00\00H\8BE\A8H\89\85h\FF\FF\FFH\8B\85h\FF\FF\FFH;E\A0\0F\84x\00\00\00H\8B\85H\FF\FF\FFH\8B\8Dh\FF\FF\FFH\8BQXH)\C2H\89QXH\8B\85h\FF\FF\FFHc@\08H;E\E0\0F\84\18\00\00\00H\8BE\D0H\8B\8Dh\FF\FF\FFH\03APH\89AP\E9\16\00\00\00H\8BE\D0H\8B\8Dh\FF\FF\FFH\8BQPH)\C2H\89QP\E9\00\00\00\00H\8B\85h\FF\FF\FFH\8B@\18H\89\85h\FF\FF\FF\E9w\FF\FF\FFH\8BE\B8H\89\85h\FF\FF\FFH\8B\85h\FF\FF\FFH;E\A0\0F\84u\00\00\00H\8B\85H\FF\FF\FFH\8B\8Dh\FF\FF\FFH\03AXH\89AXH\8B\85h\FF\FF\FFHc@\08H;E\E0\0F\85\18\00\00\00H\8BE\D0H\8B\8Dh\FF\FF\FFH\03APH\89AP\E9\16\00\00\00H\8BE\D0H\8B\8Dh\FF\FF\FFH\8BQPH)\C2H\89QP\E9\00\00\00\00H\8B\85h\FF\FF\FFH\8B@\18H\89\85h\FF\FF\FF\E9z\FF\FF\FF\E9\9A\00\00\00H\8BE\A8H\89\85h\FF\FF\FFH\8B\85h\FF\FF\FFH;E\A0\0F\840\00\00\00H\8B\85H\FF\FF\FFH\8B\8Dh\FF\FF\FFH\8BQXH)\C2H\89QXH\8B\85h\FF\FF\FFH\8B@\18H\89\85h\FF\FF\FF\E9\BF\FF\FF\FFH\8BE\B8H\89\85h\FF\FF\FFH\8B\85h\FF\FF\FFH;E\A0\0F\84-\00\00\00H\8B\85H\FF\FF\FFH\8B\8Dh\FF\FF\FFH\03AXH\89AXH\8B\85h\FF\FF\FFH\8B@\18H\89\85h\FF\FF\FF\E9\C2\FF\FF\FF\E9\00\00\00\00H\83\C4@[A^A_]\C3\0F\1F@\00AWAVI\89\D7AUATL\8D%.\17 \00UH\8D-.\17 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\1F\C1\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_404714__fini = internal constant %seg_404714__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_404720__rodata = internal constant %seg_404720__rodata_type <{ [4 x i8] c"\01\00\02\00", [31 x i8] c"network %s: not enough memory\0A\00", [34 x i8] c"active arcs                : %ld\0A\00", [34 x i8] c"simplex iterations         : %ld\0A\00", [36 x i8] c"objective value            : %0.0f\0A\00", [34 x i8] c"erased arcs                : %ld\0A\00", [34 x i8] c"new implicit arcs          : %ld\0A\00", [29 x i8] c"not enough memory, exit(-1)\0A\00", [34 x i8] c"checksum                   : %ld\0A\00", [32 x i8] c"\0AMCF SPEC CPU2006 version 1.10\0A\00", [52 x i8] c"Copyright (c) 1998-2000 Zuse Institut Berlin (ZIB)\0A\00", [46 x i8] c"Copyright (c) 2000-2002 Andreas Loebel & ZIB\0A\00", [40 x i8] c"Copyright (c) 2003-2005 Andreas Loebel\0A\00", [18 x i8] c"read error, exit\0A\00", [34 x i8] c"nodes                      : %ld\0A\00", [6 x i8] c"done\0A\00", [8 x i8] c"mcf.out\00", [25 x i8] c"PRIMAL NETWORK SIMPLEX: \00", [49 x i8] c"artificial arc with nonzero flow, node %d (%ld)\0A\00", [31 x i8] c"basis primal infeasible (%ld)\0A\00", [23 x i8] c"DUAL NETWORK SIMPLEX: \00", [23 x i8] c"basis dual infeasible\0A\00", [11 x i8] c"w\00()\0A\00***\0A\00", [4 x i8] c"%d\0A\00", [2 x i8] c"r\00", [31 x i8] c"read_min(): not enough memory\0A\00", [4 x i8] c"%ld ", [8 x i8] c"%ld %ld\00" }>
@seg_4049f0__eh_frame_hdr = internal constant %seg_4049f0__eh_frame_hdr_type <{ [244 x i8] c"\01\1B\03;\F4\00\00\00\1D\00\00\00 \BE\FF\FFP\01\00\00\10\BF\FF\FF\10\01\00\00@\BF\FF\FF<\01\00\00\00\C0\FF\FFx\01\00\00\90\C1\FF\FF\94\01\00\00`\C4\FF\FF\B0\01\00\00 \C7\FF\FF\CC\01\00\00\10\CC\FF\FF\E8\01\00\00 \CE\FF\FF\04\02\00\00\D0\CF\FF\FF \02\00\00\A0\D1\FF\FF<\02\00\00\90\D2\FF\FFX\02\00\00\C0\D3\FF\FFt\02\00\00\A0\D5\FF\FF\90\02\00\00\80\D7\FF\FF\AC\02\00\00P\D9\FF\FF\C8\02\00\00\B0\DA\FF\FF\E4\02\00\00\90\DB\FF\FF\00\03\00\00\A0\DD\FF\FF\1C\03\00\00\00\DE\FF\FF8\03\00\00p\DF\FF\FFT\03\00\00@\E3\FF\FFp\03\00\00 \E5\FF\FF\8C\03\00\00\E0\E5\FF\FF\A8\03\00\00\B0\E9\FF\FF\CC\03\00\00\D0\EB\FF\FF\E8\03\00\00\A0\F6\FF\FF\04\04\00\00\B0\FC\FF\FF(\04\00\00 \FD\FF\FFp\04\00\00" }>
@seg_404ae8__eh_frame = internal constant %seg_404ae8__eh_frame_type <{ [912 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\F8\BD\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\FC\BD\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\C8\BC\FF\FF\F0\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00\80\BE\FF\FF\84\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\F4\BF\FF\FF\CB\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\A8\C2\FF\FF\B5\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00L\C5\FF\FF\ED\04\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00 \CA\FF\FF\05\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00\14\CC\FF\FF\A2\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\A8\CD\FF\FF\CD\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00\5C\CF\FF\FF\EA\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\008\01\00\000\D0\FF\FF!\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00T\01\00\00D\D1\FF\FF\D9\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00p\01\00\00\08\D3\FF\FF\DB\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\8C\01\00\00\CC\D4\FF\FF\C3\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\A8\01\00\00\80\D6\FF\FFX\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C4\01\00\00\C4\D7\FF\FF\DD\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E0\01\00\00\88\D8\FF\FF\08\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\FC\01\00\00|\DA\FF\FFZ\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\18\02\00\00\C0\DA\FF\FFm\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\004\02\00\00\14\DC\FF\FF\CE\03\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00P\02\00\00\C8\DF\FF\FF\D5\01\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00l\02\00\00\8C\E1\FF\FF\B5\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00 \00\00\00\88\02\00\000\E2\FF\FF\C7\03\00\00\00A\0E\10\86\02C\0D\06P\83\07\8C\06\8D\05\8E\04\8F\03\18\00\00\00\AC\02\00\00\DC\E5\FF\FF\1A\02\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\02\00\00\E0\E7\FF\FF\CB\0A\00\00\00A\0E\10\86\02C\0D\06\00\00\00 \00\00\00\E4\02\00\00\94\F2\FF\FF\0C\06\00\00\00A\0E\10\86\02C\0D\06I\83\05\8E\04\8F\03\00\00\00\00D\00\00\00\08\03\00\00\80\F8\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00P\03\00\00\A8\F8\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_605de0__init_array = internal global %seg_605de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4009e0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4009b0___do_global_dtors_aux to i64) }>
@seg_605ff0__got = internal global %seg_605ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_606000__got_plt = internal global %seg_606000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64)* @free to i64), i64 ptrtoint (i64 (i64, i64)* @strcpy to i64), i64 ptrtoint (i64 (i64)* @fclose to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), i64 ptrtoint (i64 (i64, i64, i64)* @fgets to i64), i64 ptrtoint (i64 (i64, i64)* @calloc to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), i64 ptrtoint (i64 (i64)* @fflush to i64), i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_sscanf to i64), i64 ptrtoint (i64 (i64, i64)* @realloc to i64), i64 ptrtoint (i64 (i64, i64)* @fopen to i64), i64 ptrtoint (i64 (i64)* @exit to i64) }>
@seg_606088__data = internal global %seg_606088__data_type <{ [16 x i8] zeroinitializer, [8 x i8] c"\01\00\00\00\00\00\00\00" }>
@seg_6060a0__bss = internal global %seg_6060a0__bss_type zeroinitializer
@net = global %net_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4009e0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4009b0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_404710___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4046a0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @flow_org_cost_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @price_out_impl_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dual_feasible_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @global_opt_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_update_flow_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @update_tree_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_start_artificial_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @write_circulations_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @sort_basket_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_bea_mpp_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @flow_cost_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_net_simplex_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @read_min_wrapper
@21 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @suspend_impl_wrapper
@22 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @resize_prob_wrapper
@23 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_iminus_wrapper
@24 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_feasible_wrapper
@25 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @refresh_neighbour_lists_wrapper
@26 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @replace_weaker_arc_wrapper
@27 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @insert_new_arc_wrapper
@28 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@29 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @refresh_potential_wrapper
@30 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @bea_is_dual_infeasible_wrapper
@31 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @getfree_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_4027f0_sort_basket_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402340_dual_feasible_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401110_price_out_impl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401b90_refresh_neighbour_lists_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401c80_refresh_potential_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4009f0_resize_prob_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402d30_primal_iminus_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400b80_insert_new_arc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402170_primal_feasible_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402580_write_circulations_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402790_bea_is_dual_infeasible_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400e50_replace_weaker_arc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_404090_update_tree_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4007f0__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401db0_flow_cost_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401810_global_opt_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402960_primal_bea_mpp_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4035c0_read_min_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_401600_suspend_impl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402fd0_primal_net_simplex_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_402f10_primal_update_flow_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4033a0_primal_start_artificial_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400940_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fflush(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @realloc(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strcpy(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__isoc99_sscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fclose(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fopen(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fgets(i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_401c80_refresh_potential(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401c80:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 8
  %33 = load i64, i64* %RDI
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %36
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = inttoptr i64 %38 to i64*
  %42 = load i64, i64* %41
  store i64 %42, i64* %RDI, align 8, !tbaa !2428
  %43 = load i64, i64* %RDI
  %44 = add i64 %43, 552
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 7
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 32
  %51 = load i64, i64* %RDI
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54
  %55 = load i64, i64* %RBP
  %56 = sub i64 %55, 40
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 8
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %56 to i64*
  store i64 0, i64* %59
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 32
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC
  %64 = inttoptr i64 %61 to i64*
  %65 = load i64, i64* %64
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = load i64, i64* %RDI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 7
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %66 to i64*
  store i64 -100000000, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 32
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %71 to i64*
  %75 = load i64, i64* %74
  store i64 %75, i64* %RDI, align 8, !tbaa !2428
  %76 = load i64, i64* %RDI
  %77 = add i64 %76, 16
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 4
  store i64 %79, i64* %PC
  %80 = inttoptr i64 %77 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %RDI, align 8, !tbaa !2428
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RDI
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 24
  %90 = load i64, i64* %RDI
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %89 to i64*
  store i64 %90, i64* %93
  br label %block_401cba

block_401cd8:                                     ; preds = %block_401ccd
  %94 = sub i64 %323, 16
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RAX
  %100 = add i64 %99, 8
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103
  %105 = sub i32 %104, 1
  %106 = icmp ult i32 %104, 1
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %107, i8* %108, align 1, !tbaa !2432
  %109 = and i32 %105, 255
  %110 = call i32 @llvm.ctpop.i32(i32 %109) #16
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %113, i8* %114, align 1, !tbaa !2446
  %115 = xor i32 %104, 1
  %116 = xor i32 %115, %105
  %117 = lshr i32 %116, 4
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %119, i8* %120, align 1, !tbaa !2447
  %121 = icmp eq i32 %105, 0
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %122, i8* %123, align 1, !tbaa !2448
  %124 = lshr i32 %105, 31
  %125 = trunc i32 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %125, i8* %126, align 1, !tbaa !2449
  %127 = lshr i32 %104, 31
  %128 = xor i32 %124, %127
  %129 = add nuw nsw i32 %128, %127
  %130 = icmp eq i32 %129, 2
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %131, i8* %132, align 1, !tbaa !2450
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 40
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 6
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 6
  store i64 %138, i64* %PC
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %140 = load i8, i8* %139, align 1, !tbaa !2448
  %141 = icmp eq i8 %140, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %144 = select i1 %141, i64 %134, i64 %136
  store i64 %144, i64* %143, align 8, !tbaa !2428
  %145 = load i8, i8* %BRANCH_TAKEN
  %146 = icmp eq i8 %145, 1
  %147 = load i64, i64* %RBP
  %148 = sub i64 %147, 16
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 4
  store i64 %150, i64* %PC
  %151 = inttoptr i64 %148 to i64*
  %152 = load i64, i64* %151
  store i64 %152, i64* %RAX, align 8, !tbaa !2428
  %153 = load i64, i64* %RAX
  br i1 %146, label %block_401d08, label %block_401ce6

block_401d9b:                                     ; preds = %block_401cba
  %154 = load i64, i64* %RBP
  %155 = sub i64 %154, 40
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %155 to i64*
  %159 = load i64, i64* %158
  store i64 %159, i64* %RAX, align 8, !tbaa !2428
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 1
  store i64 %161, i64* %PC
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %163 = load i64, i64* %162, align 8, !tbaa !2428
  %164 = add i64 %163, 8
  %165 = inttoptr i64 %163 to i64*
  %166 = load i64, i64* %165
  store i64 %166, i64* %RBP, align 8, !tbaa !2428
  store i64 %164, i64* %162, align 8, !tbaa !2428
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 1
  store i64 %168, i64* %PC
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %171 = load i64, i64* %170, align 8, !tbaa !2428
  %172 = inttoptr i64 %171 to i64*
  %173 = load i64, i64* %172
  store i64 %173, i64* %169, align 8, !tbaa !2428
  %174 = add i64 %171, 8
  store i64 %174, i64* %170, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401d78:                                     ; preds = %block_401d61
  %175 = sub i64 %471, 24
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 4
  store i64 %177, i64* %PC
  %178 = inttoptr i64 %175 to i64*
  %179 = load i64, i64* %178
  store i64 %179, i64* %RAX, align 8, !tbaa !2428
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 16
  %182 = load i64, i64* %RAX
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %181 to i64*
  store i64 %182, i64* %185
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 22
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 5
  store i64 %189, i64* %PC
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %187, i64* %190, align 8, !tbaa !2428
  br label %block_401d96

block_401cba:                                     ; preds = %block_401d96, %block_401c80
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401c80 ], [ %MEMORY.3, %block_401d96 ]
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 16
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 4
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = load i64, i64* %RAX
  %198 = load i64, i64* %RBP
  %199 = sub i64 %198, 32
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %199 to i64*
  %203 = load i64, i64* %202
  %204 = sub i64 %197, %203
  %205 = icmp ugt i64 %203, %197
  %206 = zext i1 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %206, i8* %207, align 1, !tbaa !2432
  %208 = trunc i64 %204 to i32
  %209 = and i32 %208, 255
  %210 = call i32 @llvm.ctpop.i32(i32 %209) #16
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %213, i8* %214, align 1, !tbaa !2446
  %215 = xor i64 %203, %197
  %216 = xor i64 %215, %204
  %217 = lshr i64 %216, 4
  %218 = trunc i64 %217 to i8
  %219 = and i8 %218, 1
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %219, i8* %220, align 1, !tbaa !2447
  %221 = icmp eq i64 %204, 0
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %222, i8* %223, align 1, !tbaa !2448
  %224 = lshr i64 %204, 63
  %225 = trunc i64 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %225, i8* %226, align 1, !tbaa !2449
  %227 = lshr i64 %197, 63
  %228 = lshr i64 %203, 63
  %229 = xor i64 %228, %227
  %230 = xor i64 %224, %227
  %231 = add nuw nsw i64 %230, %229
  %232 = icmp eq i64 %231, 2
  %233 = zext i1 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %233, i8* %234, align 1, !tbaa !2450
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 217
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 6
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 6
  store i64 %240, i64* %PC
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %242 = load i8, i8* %241, align 1, !tbaa !2448
  store i8 %242, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %244 = icmp ne i8 %242, 0
  %245 = select i1 %244, i64 %236, i64 %238
  store i64 %245, i64* %243, align 8, !tbaa !2428
  %246 = load i8, i8* %BRANCH_TAKEN
  %247 = icmp eq i8 %246, 1
  br i1 %247, label %block_401d9b, label %block_401cc8

block_401d31:                                     ; preds = %block_401ce6, %block_401d08
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_401d08 ], [ %MEMORY.2, %block_401ce6 ]
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 16
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 24
  %256 = load i64, i64* %RAX
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 16
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = load i64, i64* %RAX
  %267 = add i64 %266, 16
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270
  store i64 %271, i64* %RAX, align 8, !tbaa !2428
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 16
  %274 = load i64, i64* %RAX
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 4
  store i64 %276, i64* %PC
  %277 = inttoptr i64 %273 to i64*
  store i64 %274, i64* %277
  %278 = load i64, i64* %PC
  %279 = sub i64 %278, 120
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 5
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %279, i64* %282, align 8, !tbaa !2428
  br label %block_401ccd

block_401ccd:                                     ; preds = %block_401cc8, %block_401d31
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_401cc8 ], [ %MEMORY.1, %block_401d31 ]
  %283 = load i64, i64* %RBP
  %284 = sub i64 %283, 16
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 5
  store i64 %286, i64* %PC
  %287 = inttoptr i64 %284 to i64*
  %288 = load i64, i64* %287
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %289, align 1, !tbaa !2432
  %290 = trunc i64 %288 to i32
  %291 = and i32 %290, 255
  %292 = call i32 @llvm.ctpop.i32(i32 %291) #16
  %293 = trunc i32 %292 to i8
  %294 = and i8 %293, 1
  %295 = xor i8 %294, 1
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %295, i8* %296, align 1, !tbaa !2446
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %297, align 1, !tbaa !2447
  %298 = icmp eq i64 %288, 0
  %299 = zext i1 %298 to i8
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %299, i8* %300, align 1, !tbaa !2448
  %301 = lshr i64 %288, 63
  %302 = trunc i64 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %302, i8* %303, align 1, !tbaa !2449
  %304 = lshr i64 %288, 63
  %305 = xor i64 %301, %304
  %306 = add nuw nsw i64 %305, %304
  %307 = icmp eq i64 %306, 2
  %308 = zext i1 %307 to i8
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %308, i8* %309, align 1, !tbaa !2450
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 120
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 6
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 6
  store i64 %315, i64* %PC
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %317 = load i8, i8* %316, align 1, !tbaa !2448
  store i8 %317, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %319 = icmp ne i8 %317, 0
  %320 = select i1 %319, i64 %311, i64 %313
  store i64 %320, i64* %318, align 8, !tbaa !2428
  %321 = load i8, i8* %BRANCH_TAKEN
  %322 = icmp eq i8 %321, 1
  %323 = load i64, i64* %RBP
  br i1 %322, label %block_401d4a, label %block_401cd8

block_401d4a:                                     ; preds = %block_401ccd
  %324 = sub i64 %323, 24
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 4
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %324 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %RAX, align 8, !tbaa !2428
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 16
  %331 = load i64, i64* %RAX
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 4
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %330 to i64*
  store i64 %331, i64* %334
  br label %block_401d52

block_401d96:                                     ; preds = %block_401d52, %block_401d78
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_401d52 ], [ %MEMORY.4, %block_401d78 ]
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 220
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  store i64 %338, i64* %PC
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %339, align 8, !tbaa !2428
  br label %block_401cba

block_401d52:                                     ; preds = %block_401d85, %block_401d4a
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_401d4a ], [ %MEMORY.4, %block_401d85 ]
  %340 = load i64, i64* %RBP
  %341 = sub i64 %340, 16
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC
  %344 = inttoptr i64 %341 to i64*
  %345 = load i64, i64* %344
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = load i64, i64* %RAX
  %347 = add i64 %346, 24
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 5
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i64*
  %351 = load i64, i64* %350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %352, align 1, !tbaa !2432
  %353 = trunc i64 %351 to i32
  %354 = and i32 %353, 255
  %355 = call i32 @llvm.ctpop.i32(i32 %354) #16
  %356 = trunc i32 %355 to i8
  %357 = and i8 %356, 1
  %358 = xor i8 %357, 1
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %358, i8* %359, align 1, !tbaa !2446
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %360, align 1, !tbaa !2447
  %361 = icmp eq i64 %351, 0
  %362 = zext i1 %361 to i8
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %362, i8* %363, align 1, !tbaa !2448
  %364 = lshr i64 %351, 63
  %365 = trunc i64 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %365, i8* %366, align 1, !tbaa !2449
  %367 = lshr i64 %351, 63
  %368 = xor i64 %364, %367
  %369 = add nuw nsw i64 %368, %367
  %370 = icmp eq i64 %369, 2
  %371 = zext i1 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %371, i8* %372, align 1, !tbaa !2450
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 59
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 6
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 6
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %380 = load i8, i8* %379, align 1, !tbaa !2448
  store i8 %380, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %382 = icmp ne i8 %380, 0
  %383 = select i1 %382, i64 %374, i64 %376
  store i64 %383, i64* %381, align 8, !tbaa !2428
  %384 = load i8, i8* %BRANCH_TAKEN
  %385 = icmp eq i8 %384, 1
  br i1 %385, label %block_401d96, label %block_401d61

block_401d85:                                     ; preds = %block_401d61
  %386 = sub i64 %471, 16
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 4
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i64*
  %390 = load i64, i64* %389
  store i64 %390, i64* %RAX, align 8, !tbaa !2428
  %391 = load i64, i64* %RAX
  %392 = add i64 %391, 24
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 4
  store i64 %394, i64* %PC
  %395 = inttoptr i64 %392 to i64*
  %396 = load i64, i64* %395
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = load i64, i64* %RBP
  %398 = sub i64 %397, 16
  %399 = load i64, i64* %RAX
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 4
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %398 to i64*
  store i64 %399, i64* %402
  %403 = load i64, i64* %PC
  %404 = sub i64 %403, 63
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 5
  store i64 %406, i64* %PC
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %404, i64* %407, align 8, !tbaa !2428
  br label %block_401d52

block_401cc8:                                     ; preds = %block_401cba
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 5
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 5
  store i64 %411, i64* %PC
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %409, i64* %412, align 8, !tbaa !2428
  br label %block_401ccd

block_401d61:                                     ; preds = %block_401d52
  %413 = load i64, i64* %RBP
  %414 = sub i64 %413, 16
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 4
  store i64 %416, i64* %PC
  %417 = inttoptr i64 %414 to i64*
  %418 = load i64, i64* %417
  store i64 %418, i64* %RAX, align 8, !tbaa !2428
  %419 = load i64, i64* %RAX
  %420 = add i64 %419, 32
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 4
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i64*
  %424 = load i64, i64* %423
  store i64 %424, i64* %RAX, align 8, !tbaa !2428
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 24
  %427 = load i64, i64* %RAX
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 4
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %426 to i64*
  store i64 %427, i64* %430
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 24
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 5
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %432 to i64*
  %436 = load i64, i64* %435
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %437, align 1, !tbaa !2432
  %438 = trunc i64 %436 to i32
  %439 = and i32 %438, 255
  %440 = call i32 @llvm.ctpop.i32(i32 %439) #16
  %441 = trunc i32 %440 to i8
  %442 = and i8 %441, 1
  %443 = xor i8 %442, 1
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %443, i8* %444, align 1, !tbaa !2446
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %445, align 1, !tbaa !2447
  %446 = icmp eq i64 %436, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %436, 63
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i64 %436, 63
  %453 = xor i64 %449, %452
  %454 = add nuw nsw i64 %453, %452
  %455 = icmp eq i64 %454, 2
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %456, i8* %457, align 1, !tbaa !2450
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 19
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 6
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 6
  store i64 %463, i64* %PC
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %465 = load i8, i8* %464, align 1, !tbaa !2448
  store i8 %465, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %467 = icmp ne i8 %465, 0
  %468 = select i1 %467, i64 %459, i64 %461
  store i64 %468, i64* %466, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  %471 = load i64, i64* %RBP
  br i1 %470, label %block_401d85, label %block_401d78

block_401d08:                                     ; preds = %block_401cd8
  %472 = add i64 %153, 24
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i64*
  %476 = load i64, i64* %475
  store i64 %476, i64* %RAX, align 8, !tbaa !2428
  %477 = load i64, i64* %RAX
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 3
  store i64 %479, i64* %PC
  %480 = inttoptr i64 %477 to i64*
  %481 = load i64, i64* %480
  store i64 %481, i64* %RAX, align 8, !tbaa !2428
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 16
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i64*
  %487 = load i64, i64* %486
  store i64 %487, i64* %RCX, align 8, !tbaa !2428
  %488 = load i64, i64* %RCX
  %489 = add i64 %488, 48
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i64*
  %493 = load i64, i64* %492
  store i64 %493, i64* %RCX, align 8, !tbaa !2428
  %494 = load i64, i64* %RAX
  %495 = load i64, i64* %RCX
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 3
  store i64 %497, i64* %PC
  %498 = inttoptr i64 %495 to i64*
  %499 = load i64, i64* %498
  %500 = sub i64 %494, %499
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = icmp ugt i64 %499, %494
  %502 = zext i1 %501 to i8
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %502, i8* %503, align 1, !tbaa !2432
  %504 = trunc i64 %500 to i32
  %505 = and i32 %504, 255
  %506 = call i32 @llvm.ctpop.i32(i32 %505) #16
  %507 = trunc i32 %506 to i8
  %508 = and i8 %507, 1
  %509 = xor i8 %508, 1
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %509, i8* %510, align 1, !tbaa !2446
  %511 = xor i64 %499, %494
  %512 = xor i64 %511, %500
  %513 = lshr i64 %512, 4
  %514 = trunc i64 %513 to i8
  %515 = and i8 %514, 1
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %515, i8* %516, align 1, !tbaa !2447
  %517 = icmp eq i64 %500, 0
  %518 = zext i1 %517 to i8
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %518, i8* %519, align 1, !tbaa !2448
  %520 = lshr i64 %500, 63
  %521 = trunc i64 %520 to i8
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %521, i8* %522, align 1, !tbaa !2449
  %523 = lshr i64 %494, 63
  %524 = lshr i64 %499, 63
  %525 = xor i64 %524, %523
  %526 = xor i64 %520, %523
  %527 = add nuw nsw i64 %526, %525
  %528 = icmp eq i64 %527, 2
  %529 = zext i1 %528 to i8
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %529, i8* %530, align 1, !tbaa !2450
  %531 = load i64, i64* %RBP
  %532 = sub i64 %531, 16
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 4
  store i64 %534, i64* %PC
  %535 = inttoptr i64 %532 to i64*
  %536 = load i64, i64* %535
  store i64 %536, i64* %RCX, align 8, !tbaa !2428
  %537 = load i64, i64* %RCX
  %538 = load i64, i64* %RAX
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 3
  store i64 %540, i64* %PC
  %541 = inttoptr i64 %537 to i64*
  store i64 %538, i64* %541
  %542 = load i64, i64* %RBP
  %543 = sub i64 %542, 40
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 4
  store i64 %545, i64* %PC
  %546 = inttoptr i64 %543 to i64*
  %547 = load i64, i64* %546
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %548 = load i64, i64* %RAX
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 4
  store i64 %550, i64* %PC
  %551 = add i64 1, %548
  store i64 %551, i64* %RAX, align 8, !tbaa !2428
  %552 = icmp ult i64 %551, %548
  %553 = icmp ult i64 %551, 1
  %554 = or i1 %552, %553
  %555 = zext i1 %554 to i8
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %555, i8* %556, align 1, !tbaa !2432
  %557 = trunc i64 %551 to i32
  %558 = and i32 %557, 255
  %559 = call i32 @llvm.ctpop.i32(i32 %558) #16
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  %562 = xor i8 %561, 1
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %562, i8* %563, align 1, !tbaa !2446
  %564 = xor i64 1, %548
  %565 = xor i64 %564, %551
  %566 = lshr i64 %565, 4
  %567 = trunc i64 %566 to i8
  %568 = and i8 %567, 1
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %568, i8* %569, align 1, !tbaa !2447
  %570 = icmp eq i64 %551, 0
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %571, i8* %572, align 1, !tbaa !2448
  %573 = lshr i64 %551, 63
  %574 = trunc i64 %573 to i8
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %574, i8* %575, align 1, !tbaa !2449
  %576 = lshr i64 %548, 63
  %577 = xor i64 %573, %576
  %578 = add nuw nsw i64 %577, %573
  %579 = icmp eq i64 %578, 2
  %580 = zext i1 %579 to i8
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %580, i8* %581, align 1, !tbaa !2450
  %582 = load i64, i64* %RBP
  %583 = sub i64 %582, 40
  %584 = load i64, i64* %RAX
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 4
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %583 to i64*
  store i64 %584, i64* %587
  br label %block_401d31

block_401ce6:                                     ; preds = %block_401cd8
  %588 = add i64 %153, 48
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 4
  store i64 %590, i64* %PC
  %591 = inttoptr i64 %588 to i64*
  %592 = load i64, i64* %591
  store i64 %592, i64* %RAX, align 8, !tbaa !2428
  %593 = load i64, i64* %RAX
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 3
  store i64 %595, i64* %PC
  %596 = inttoptr i64 %593 to i64*
  %597 = load i64, i64* %596
  store i64 %597, i64* %RAX, align 8, !tbaa !2428
  %598 = load i64, i64* %RBP
  %599 = sub i64 %598, 16
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 4
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %599 to i64*
  %603 = load i64, i64* %602
  store i64 %603, i64* %RCX, align 8, !tbaa !2428
  %604 = load i64, i64* %RCX
  %605 = add i64 %604, 24
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 4
  store i64 %607, i64* %PC
  %608 = inttoptr i64 %605 to i64*
  %609 = load i64, i64* %608
  store i64 %609, i64* %RCX, align 8, !tbaa !2428
  %610 = load i64, i64* %RAX
  %611 = load i64, i64* %RCX
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 3
  store i64 %613, i64* %PC
  %614 = inttoptr i64 %611 to i64*
  %615 = load i64, i64* %614
  %616 = add i64 %615, %610
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = icmp ult i64 %616, %610
  %618 = icmp ult i64 %616, %615
  %619 = or i1 %617, %618
  %620 = zext i1 %619 to i8
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %620, i8* %621, align 1, !tbaa !2432
  %622 = trunc i64 %616 to i32
  %623 = and i32 %622, 255
  %624 = call i32 @llvm.ctpop.i32(i32 %623) #16
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  %627 = xor i8 %626, 1
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %627, i8* %628, align 1, !tbaa !2446
  %629 = xor i64 %615, %610
  %630 = xor i64 %629, %616
  %631 = lshr i64 %630, 4
  %632 = trunc i64 %631 to i8
  %633 = and i8 %632, 1
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %633, i8* %634, align 1, !tbaa !2447
  %635 = icmp eq i64 %616, 0
  %636 = zext i1 %635 to i8
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %636, i8* %637, align 1, !tbaa !2448
  %638 = lshr i64 %616, 63
  %639 = trunc i64 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %639, i8* %640, align 1, !tbaa !2449
  %641 = lshr i64 %610, 63
  %642 = lshr i64 %615, 63
  %643 = xor i64 %638, %641
  %644 = xor i64 %638, %642
  %645 = add nuw nsw i64 %643, %644
  %646 = icmp eq i64 %645, 2
  %647 = zext i1 %646 to i8
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %647, i8* %648, align 1, !tbaa !2450
  %649 = load i64, i64* %RBP
  %650 = sub i64 %649, 16
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 4
  store i64 %652, i64* %PC
  %653 = inttoptr i64 %650 to i64*
  %654 = load i64, i64* %653
  store i64 %654, i64* %RCX, align 8, !tbaa !2428
  %655 = load i64, i64* %RCX
  %656 = load i64, i64* %RAX
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 3
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %655 to i64*
  store i64 %656, i64* %659
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 46
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  store i64 %663, i64* %PC
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %661, i64* %664, align 8, !tbaa !2428
  br label %block_401d31
}

; Function Attrs: noinline
define %struct.Memory* @sub_401f90_flow_org_cost(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401f90:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %22 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %21, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %22 to %"class.std::bitset"*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %24 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %23, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %24 to %"class.std::bitset"*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %26 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %25, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %26 to %union.vec128_t*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %RDI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 40
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 8
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  store i64 0, i64* %47
  %48 = load i64, i64* %RBP
  %49 = sub i64 %48, 48
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 8
  store i64 %51, i64* %PC
  %52 = inttoptr i64 %49 to i64*
  store i64 0, i64* %52
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 8
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 4
  store i64 %56, i64* %PC
  %57 = inttoptr i64 %54 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = load i64, i64* %RDI
  %60 = add i64 %59, 576
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 7
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = load i64, i64* %RBP
  %66 = sub i64 %65, 32
  %67 = load i64, i64* %RDI
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %70
  %71 = load i64, i64* %RBP
  %72 = sub i64 %71, 8
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75
  store i64 %76, i64* %RDI, align 8, !tbaa !2428
  %77 = load i64, i64* %RDI
  %78 = add i64 %77, 568
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81
  store i64 %82, i64* %RDI, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RDI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  br label %block_401fc6

block_4020da:                                     ; preds = %block_4020c8, %block_4020b6
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.6, %block_4020b6 ], [ %MEMORY.6, %block_4020c8 ]
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %90 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = load i64, i64* %RAX
  %96 = add i64 %95, 8
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = load i64, i64* %RAX
  %102 = add i64 %101, 96
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %107, align 1, !tbaa !2432
  %108 = and i32 %106, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %112, i8* %113, align 1, !tbaa !2446
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i32 %106, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i32 %106, 31
  %119 = trunc i32 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i32 %106, 31
  %122 = xor i32 %118, %121
  %123 = add nuw nsw i32 %122, %121
  %124 = icmp eq i32 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 50
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 6
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 6
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %134 = load i8, i8* %133, align 1, !tbaa !2448
  %135 = icmp eq i8 %134, 0
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %138 = select i1 %135, i64 %128, i64 %130
  store i64 %138, i64* %137, align 8, !tbaa !2428
  %139 = load i8, i8* %BRANCH_TAKEN
  %140 = icmp eq i8 %139, 1
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 16
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 4
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %142 to i64*
  %146 = load i64, i64* %145
  store i64 %146, i64* %RAX, align 8, !tbaa !2428
  %147 = load i64, i64* %RAX
  %148 = add i64 %147, 56
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 4
  store i64 %150, i64* %PC
  %151 = inttoptr i64 %148 to i64*
  %152 = load i64, i64* %151
  store i64 %152, i64* %RAX, align 8, !tbaa !2428
  br i1 %140, label %block_402118, label %block_4020ec

block_401fd7:                                     ; preds = %block_401fc6
  %153 = sub i64 %436, 16
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 4
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i64*
  %157 = load i64, i64* %156
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RAX
  %159 = add i64 %158, 24
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162
  %164 = sub i32 %163, 2
  %165 = icmp ult i32 %163, 2
  %166 = zext i1 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %166, i8* %167, align 1, !tbaa !2432
  %168 = and i32 %164, 255
  %169 = call i32 @llvm.ctpop.i32(i32 %168) #16
  %170 = trunc i32 %169 to i8
  %171 = and i8 %170, 1
  %172 = xor i8 %171, 1
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %172, i8* %173, align 1, !tbaa !2446
  %174 = xor i32 %163, 2
  %175 = xor i32 %174, %164
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %178, i8* %179, align 1, !tbaa !2447
  %180 = icmp eq i32 %164, 0
  %181 = zext i1 %180 to i8
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %181, i8* %182, align 1, !tbaa !2448
  %183 = lshr i32 %164, 31
  %184 = trunc i32 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %184, i8* %185, align 1, !tbaa !2449
  %186 = lshr i32 %163, 31
  %187 = xor i32 %183, %186
  %188 = add nuw nsw i32 %187, %186
  %189 = icmp eq i32 %188, 2
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %190, i8* %191, align 1, !tbaa !2450
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 23
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 6
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 6
  store i64 %197, i64* %PC
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %199 = load i8, i8* %198, align 1, !tbaa !2448
  %200 = icmp eq i8 %199, 0
  %201 = zext i1 %200 to i8
  store i8 %201, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %203 = select i1 %200, i64 %193, i64 %195
  store i64 %203, i64* %202, align 8, !tbaa !2428
  %204 = load i8, i8* %BRANCH_TAKEN
  %205 = icmp eq i8 %204, 1
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 16
  %208 = load i64, i64* %PC
  %209 = add i64 %208, 4
  store i64 %209, i64* %PC
  %210 = inttoptr i64 %207 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = load i64, i64* %RAX
  %213 = add i64 %212, 48
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 8
  store i64 %215, i64* %PC
  br i1 %205, label %block_401ff6, label %block_401fe5

block_402053:                                     ; preds = %block_402042
  %216 = sub i64 %497, 24
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i64*
  %220 = load i64, i64* %219
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = load i64, i64* %RAX
  %222 = add i64 %221, 80
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %222 to i64*
  %226 = load i64, i64* %225
  store i64 %226, i64* %RAX, align 8, !tbaa !2428
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 24
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC
  %231 = inttoptr i64 %228 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %233 = load i64, i64* %RCX
  %234 = add i64 %233, 48
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 4
  store i64 %236, i64* %PC
  %237 = inttoptr i64 %234 to i64*
  %238 = load i64, i64* %237
  store i64 %238, i64* %RCX, align 8, !tbaa !2428
  %239 = load i64, i64* %RCX
  %240 = add i64 %239, 48
  %241 = load i64, i64* %RAX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %240 to i64*
  store i64 %241, i64* %244
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 24
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = load i64, i64* %RAX
  %252 = load i64, i64* %PC
  %253 = add i64 %252, 4
  store i64 %253, i64* %PC
  %254 = add i64 104, %251
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = icmp ult i64 %254, %251
  %256 = icmp ult i64 %254, 104
  %257 = or i1 %255, %256
  %258 = zext i1 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %258, i8* %259, align 1, !tbaa !2432
  %260 = trunc i64 %254 to i32
  %261 = and i32 %260, 255
  %262 = call i32 @llvm.ctpop.i32(i32 %261) #16
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = xor i8 %264, 1
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %265, i8* %266, align 1, !tbaa !2446
  %267 = xor i64 104, %251
  %268 = xor i64 %267, %254
  %269 = lshr i64 %268, 4
  %270 = trunc i64 %269 to i8
  %271 = and i8 %270, 1
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %271, i8* %272, align 1, !tbaa !2447
  %273 = icmp eq i64 %254, 0
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %274, i8* %275, align 1, !tbaa !2448
  %276 = lshr i64 %254, 63
  %277 = trunc i64 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %277, i8* %278, align 1, !tbaa !2449
  %279 = lshr i64 %251, 63
  %280 = xor i64 %276, %279
  %281 = add nuw nsw i64 %280, %276
  %282 = icmp eq i64 %281, 2
  %283 = zext i1 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %283, i8* %284, align 1, !tbaa !2450
  %285 = load i64, i64* %RBP
  %286 = sub i64 %285, 24
  %287 = load i64, i64* %RAX
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 4
  store i64 %289, i64* %PC
  %290 = inttoptr i64 %286 to i64*
  store i64 %287, i64* %290
  %291 = load i64, i64* %PC
  %292 = sub i64 %291, 49
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 5
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %292, i64* %295, align 8, !tbaa !2428
  br label %block_402042

block_402148:                                     ; preds = %block_402096
  %296 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 40
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 6
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i64*
  %302 = load i64, i64* %301
  %303 = sitofp i64 %302 to double
  %304 = bitcast i8* %296 to double*
  store double %303, double* %304, align 1, !tbaa !2452
  %305 = load i64, i64* %RBP
  %306 = sub i64 %305, 8
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 4
  store i64 %308, i64* %PC
  %309 = inttoptr i64 %306 to i64*
  %310 = load i64, i64* %309
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %312 = load i64, i64* %RAX
  %313 = add i64 %312, 528
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 9
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %313 to i64*
  %317 = load i64, i64* %316
  %318 = sitofp i64 %317 to double
  %319 = bitcast i8* %311 to double*
  store double %318, double* %319, align 1, !tbaa !2452
  %320 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %321 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %322 = bitcast %union.vec128_t* %XMM1 to i8*
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 4
  store i64 %324, i64* %PC
  %325 = bitcast i8* %321 to double*
  %326 = load double, double* %325, align 1
  %327 = getelementptr inbounds i8, i8* %321, i64 8
  %328 = bitcast i8* %327 to i64*
  %329 = load i64, i64* %328, align 1
  %330 = bitcast i8* %322 to double*
  %331 = load double, double* %330, align 1
  %332 = fmul double %326, %331
  %333 = bitcast i8* %320 to double*
  store double %332, double* %333, align 1, !tbaa !2452
  %334 = getelementptr inbounds i8, i8* %320, i64 8
  %335 = bitcast i8* %334 to i64*
  store i64 %329, i64* %335, align 1, !tbaa !2452
  %336 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %337 = load i64, i64* %RBP
  %338 = sub i64 %337, 48
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 6
  store i64 %340, i64* %PC
  %341 = inttoptr i64 %338 to i64*
  %342 = load i64, i64* %341
  %343 = sitofp i64 %342 to double
  %344 = bitcast i8* %336 to double*
  store double %343, double* %344, align 1, !tbaa !2452
  %345 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %346 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %347 = bitcast %union.vec128_t* %XMM1 to i8*
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = bitcast i8* %346 to double*
  %351 = load double, double* %350, align 1
  %352 = getelementptr inbounds i8, i8* %346, i64 8
  %353 = bitcast i8* %352 to i64*
  %354 = load i64, i64* %353, align 1
  %355 = bitcast i8* %347 to double*
  %356 = load double, double* %355, align 1
  %357 = fadd double %351, %356
  %358 = bitcast i8* %345 to double*
  store double %357, double* %358, align 1, !tbaa !2452
  %359 = getelementptr inbounds i8, i8* %345, i64 8
  %360 = bitcast i8* %359 to i64*
  store i64 %354, i64* %360, align 1, !tbaa !2452
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 1
  store i64 %362, i64* %PC
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %364 = load i64, i64* %363, align 8, !tbaa !2428
  %365 = add i64 %364, 8
  %366 = inttoptr i64 %364 to i64*
  %367 = load i64, i64* %366
  store i64 %367, i64* %RBP, align 8, !tbaa !2428
  store i64 %365, i64* %363, align 8, !tbaa !2428
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 1
  store i64 %369, i64* %PC
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %372 = load i64, i64* %371, align 8, !tbaa !2428
  %373 = inttoptr i64 %372 to i64*
  %374 = load i64, i64* %373
  store i64 %374, i64* %370, align 8, !tbaa !2428
  %375 = add i64 %372, 8
  store i64 %375, i64* %371, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_401fc6:                                     ; preds = %block_402002, %block_401f90
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401f90 ], [ %MEMORY.7, %block_402002 ]
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 16
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 32
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 4
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i64*
  %387 = load i64, i64* %386
  store i64 %387, i64* %RCX, align 8, !tbaa !2428
  %388 = load i64, i64* %RAX
  %389 = load i64, i64* %RCX
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 3
  store i64 %391, i64* %PC
  %392 = sub i64 %388, %389
  %393 = icmp ult i64 %388, %389
  %394 = zext i1 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %394, i8* %395, align 1, !tbaa !2432
  %396 = trunc i64 %392 to i32
  %397 = and i32 %396, 255
  %398 = call i32 @llvm.ctpop.i32(i32 %397) #16
  %399 = trunc i32 %398 to i8
  %400 = and i8 %399, 1
  %401 = xor i8 %400, 1
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %401, i8* %402, align 1, !tbaa !2446
  %403 = xor i64 %389, %388
  %404 = xor i64 %403, %392
  %405 = lshr i64 %404, 4
  %406 = trunc i64 %405 to i8
  %407 = and i8 %406, 1
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %407, i8* %408, align 1, !tbaa !2447
  %409 = icmp eq i64 %392, 0
  %410 = zext i1 %409 to i8
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %410, i8* %411, align 1, !tbaa !2448
  %412 = lshr i64 %392, 63
  %413 = trunc i64 %412 to i8
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %413, i8* %414, align 1, !tbaa !2449
  %415 = lshr i64 %388, 63
  %416 = lshr i64 %389, 63
  %417 = xor i64 %416, %415
  %418 = xor i64 %412, %415
  %419 = add nuw nsw i64 %418, %417
  %420 = icmp eq i64 %419, 2
  %421 = zext i1 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %421, i8* %422, align 1, !tbaa !2450
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 71
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 6
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 6
  store i64 %428, i64* %PC
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %430 = load i8, i8* %429, align 1, !tbaa !2448
  store i8 %430, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %432 = icmp ne i8 %430, 0
  %433 = select i1 %432, i64 %424, i64 %426
  store i64 %433, i64* %431, align 8, !tbaa !2428
  %434 = load i8, i8* %BRANCH_TAKEN
  %435 = icmp eq i8 %434, 1
  %436 = load i64, i64* %RBP
  br i1 %435, label %block_402018, label %block_401fd7

block_402042:                                     ; preds = %block_402018, %block_402053
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_402018 ], [ %MEMORY.2, %block_402053 ]
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 24
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 4
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i64*
  %442 = load i64, i64* %441
  store i64 %442, i64* %RAX, align 8, !tbaa !2428
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 32
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to i64*
  %448 = load i64, i64* %447
  store i64 %448, i64* %RCX, align 8, !tbaa !2428
  %449 = load i64, i64* %RAX
  %450 = load i64, i64* %RCX
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 3
  store i64 %452, i64* %PC
  %453 = sub i64 %449, %450
  %454 = icmp ult i64 %449, %450
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %455, i8* %456, align 1, !tbaa !2432
  %457 = trunc i64 %453 to i32
  %458 = and i32 %457, 255
  %459 = call i32 @llvm.ctpop.i32(i32 %458) #16
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %462, i8* %463, align 1, !tbaa !2446
  %464 = xor i64 %450, %449
  %465 = xor i64 %464, %453
  %466 = lshr i64 %465, 4
  %467 = trunc i64 %466 to i8
  %468 = and i8 %467, 1
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %468, i8* %469, align 1, !tbaa !2447
  %470 = icmp eq i64 %453, 0
  %471 = zext i1 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %471, i8* %472, align 1, !tbaa !2448
  %473 = lshr i64 %453, 63
  %474 = trunc i64 %473 to i8
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %474, i8* %475, align 1, !tbaa !2449
  %476 = lshr i64 %449, 63
  %477 = lshr i64 %450, 63
  %478 = xor i64 %477, %476
  %479 = xor i64 %473, %476
  %480 = add nuw nsw i64 %479, %478
  %481 = icmp eq i64 %480, 2
  %482 = zext i1 %481 to i8
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %482, i8* %483, align 1, !tbaa !2450
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 43
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 6
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 6
  store i64 %489, i64* %PC
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %491 = load i8, i8* %490, align 1, !tbaa !2448
  store i8 %491, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %493 = icmp ne i8 %491, 0
  %494 = select i1 %493, i64 %485, i64 %487
  store i64 %494, i64* %492, align 8, !tbaa !2428
  %495 = load i8, i8* %BRANCH_TAKEN
  %496 = icmp eq i8 %495, 1
  %497 = load i64, i64* %RBP
  br i1 %496, label %block_402078, label %block_402053

block_4020b6:                                     ; preds = %block_4020a7
  %498 = load i64, i64* %RBP
  %499 = sub i64 %498, 16
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 4
  store i64 %501, i64* %PC
  %502 = inttoptr i64 %499 to i64*
  %503 = load i64, i64* %502
  store i64 %503, i64* %RAX, align 8, !tbaa !2428
  %504 = load i64, i64* %RAX
  %505 = add i64 %504, 8
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 4
  store i64 %507, i64* %PC
  %508 = inttoptr i64 %505 to i64*
  %509 = load i64, i64* %508
  store i64 %509, i64* %RAX, align 8, !tbaa !2428
  %510 = load i64, i64* %RAX
  %511 = add i64 %510, 96
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 4
  store i64 %513, i64* %PC
  %514 = inttoptr i64 %511 to i32*
  %515 = load i32, i32* %514
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %516, align 1, !tbaa !2432
  %517 = and i32 %515, 255
  %518 = call i32 @llvm.ctpop.i32(i32 %517) #16
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %521, i8* %522, align 1, !tbaa !2446
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %523, align 1, !tbaa !2447
  %524 = icmp eq i32 %515, 0
  %525 = zext i1 %524 to i8
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %525, i8* %526, align 1, !tbaa !2448
  %527 = lshr i32 %515, 31
  %528 = trunc i32 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %528, i8* %529, align 1, !tbaa !2449
  %530 = lshr i32 %515, 31
  %531 = xor i32 %527, %530
  %532 = add nuw nsw i32 %531, %530
  %533 = icmp eq i32 %532, 2
  %534 = zext i1 %533 to i8
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %534, i8* %535, align 1, !tbaa !2450
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 24
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 6
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 6
  store i64 %541, i64* %PC
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %543 = load i8, i8* %542, align 1, !tbaa !2449
  %544 = icmp ne i8 %543, 0
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %546 = load i8, i8* %545, align 1, !tbaa !2450
  %547 = icmp ne i8 %546, 0
  %548 = xor i1 %544, %547
  %549 = xor i1 %548, true
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %552 = select i1 %548, i64 %539, i64 %537
  store i64 %552, i64* %551, align 8, !tbaa !2428
  %553 = load i8, i8* %BRANCH_TAKEN
  %554 = icmp eq i8 %553, 1
  br i1 %554, label %block_4020da, label %block_4020c8

block_402132:                                     ; preds = %block_4020a7, %block_40212d
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.6, %block_4020a7 ], [ %MEMORY.4, %block_40212d ]
  %555 = load i64, i64* %PC
  %556 = add i64 %555, 5
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 5
  store i64 %558, i64* %PC
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %556, i64* %559, align 8, !tbaa !2428
  %560 = load i64, i64* %RBP
  %561 = sub i64 %560, 16
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 4
  store i64 %563, i64* %PC
  %564 = inttoptr i64 %561 to i64*
  %565 = load i64, i64* %564
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = load i64, i64* %RAX
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = add i64 64, %566
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = icmp ult i64 %569, %566
  %571 = icmp ult i64 %569, 64
  %572 = or i1 %570, %571
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %573, i8* %574, align 1, !tbaa !2432
  %575 = trunc i64 %569 to i32
  %576 = and i32 %575, 255
  %577 = call i32 @llvm.ctpop.i32(i32 %576) #16
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %580, i8* %581, align 1, !tbaa !2446
  %582 = xor i64 64, %566
  %583 = xor i64 %582, %569
  %584 = lshr i64 %583, 4
  %585 = trunc i64 %584 to i8
  %586 = and i8 %585, 1
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %586, i8* %587, align 1, !tbaa !2447
  %588 = icmp eq i64 %569, 0
  %589 = zext i1 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %589, i8* %590, align 1, !tbaa !2448
  %591 = lshr i64 %569, 63
  %592 = trunc i64 %591 to i8
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %592, i8* %593, align 1, !tbaa !2449
  %594 = lshr i64 %566, 63
  %595 = xor i64 %591, %594
  %596 = add nuw nsw i64 %595, %591
  %597 = icmp eq i64 %596, 2
  %598 = zext i1 %597 to i8
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %598, i8* %599, align 1, !tbaa !2450
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 16
  %602 = load i64, i64* %RAX
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 4
  store i64 %604, i64* %PC
  %605 = inttoptr i64 %601 to i64*
  store i64 %602, i64* %605
  %606 = load i64, i64* %PC
  %607 = sub i64 %606, 173
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 5
  store i64 %609, i64* %PC
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %607, i64* %610, align 8, !tbaa !2428
  br label %block_402096

block_4020c8:                                     ; preds = %block_4020b6
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 16
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 4
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RAX
  %618 = add i64 %617, 16
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i64*
  %622 = load i64, i64* %621
  store i64 %622, i64* %RAX, align 8, !tbaa !2428
  %623 = load i64, i64* %RAX
  %624 = add i64 %623, 96
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 4
  store i64 %626, i64* %PC
  %627 = inttoptr i64 %624 to i32*
  %628 = load i32, i32* %627
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %629, align 1, !tbaa !2432
  %630 = and i32 %628, 255
  %631 = call i32 @llvm.ctpop.i32(i32 %630) #16
  %632 = trunc i32 %631 to i8
  %633 = and i8 %632, 1
  %634 = xor i8 %633, 1
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %634, i8* %635, align 1, !tbaa !2446
  %636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %636, align 1, !tbaa !2447
  %637 = icmp eq i32 %628, 0
  %638 = zext i1 %637 to i8
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %638, i8* %639, align 1, !tbaa !2448
  %640 = lshr i32 %628, 31
  %641 = trunc i32 %640 to i8
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %641, i8* %642, align 1, !tbaa !2449
  %643 = lshr i32 %628, 31
  %644 = xor i32 %640, %643
  %645 = add nuw nsw i32 %644, %643
  %646 = icmp eq i32 %645, 2
  %647 = zext i1 %646 to i8
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %647, i8* %648, align 1, !tbaa !2450
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 89
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 6
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 6
  store i64 %654, i64* %PC
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %656 = load i8, i8* %655, align 1, !tbaa !2448
  %657 = icmp eq i8 %656, 0
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %659 = load i8, i8* %658, align 1, !tbaa !2449
  %660 = icmp ne i8 %659, 0
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %662 = load i8, i8* %661, align 1, !tbaa !2450
  %663 = icmp ne i8 %662, 0
  %664 = xor i1 %660, %663
  %665 = xor i1 %664, true
  %666 = and i1 %657, %665
  %667 = zext i1 %666 to i8
  store i8 %667, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %669 = select i1 %666, i64 %650, i64 %652
  store i64 %669, i64* %668, align 8, !tbaa !2428
  %670 = load i8, i8* %BRANCH_TAKEN
  %671 = icmp eq i8 %670, 1
  br i1 %671, label %block_40212d, label %block_4020da

block_40212d:                                     ; preds = %block_402128, %block_4020c8
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_402128 ], [ %MEMORY.6, %block_4020c8 ]
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 5
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 5
  store i64 %675, i64* %PC
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %673, i64* %676, align 8, !tbaa !2428
  br label %block_402132

block_402128:                                     ; preds = %block_4020ec, %block_402118
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.0, %block_402118 ], [ %MEMORY.0, %block_4020ec ]
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 5
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 5
  store i64 %680, i64* %PC
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %678, i64* %681, align 8, !tbaa !2428
  br label %block_40212d

block_4020a7:                                     ; preds = %block_402096
  %682 = load i64, i64* %RBP
  %683 = sub i64 %682, 16
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 4
  store i64 %685, i64* %PC
  %686 = inttoptr i64 %683 to i64*
  %687 = load i64, i64* %686
  store i64 %687, i64* %RAX, align 8, !tbaa !2428
  %688 = load i64, i64* %RAX
  %689 = add i64 %688, 48
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 5
  store i64 %691, i64* %PC
  %692 = inttoptr i64 %689 to i64*
  %693 = load i64, i64* %692
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %694, align 1, !tbaa !2432
  %695 = trunc i64 %693 to i32
  %696 = and i32 %695, 255
  %697 = call i32 @llvm.ctpop.i32(i32 %696) #16
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  %700 = xor i8 %699, 1
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %700, i8* %701, align 1, !tbaa !2446
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %702, align 1, !tbaa !2447
  %703 = icmp eq i64 %693, 0
  %704 = zext i1 %703 to i8
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %704, i8* %705, align 1, !tbaa !2448
  %706 = lshr i64 %693, 63
  %707 = trunc i64 %706 to i8
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %707, i8* %708, align 1, !tbaa !2449
  %709 = lshr i64 %693, 63
  %710 = xor i64 %706, %709
  %711 = add nuw nsw i64 %710, %709
  %712 = icmp eq i64 %711, 2
  %713 = zext i1 %712 to i8
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %713, i8* %714, align 1, !tbaa !2450
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 130
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 6
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 6
  store i64 %720, i64* %PC
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %722 = load i8, i8* %721, align 1, !tbaa !2448
  store i8 %722, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %724 = icmp ne i8 %722, 0
  %725 = select i1 %724, i64 %716, i64 %718
  store i64 %725, i64* %723, align 8, !tbaa !2428
  %726 = load i8, i8* %BRANCH_TAKEN
  %727 = icmp eq i8 %726, 1
  br i1 %727, label %block_402132, label %block_4020b6

block_402018:                                     ; preds = %block_401fc6
  %728 = sub i64 %436, 8
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 4
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %728 to i64*
  %732 = load i64, i64* %731
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = load i64, i64* %RAX
  %734 = add i64 %733, 560
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 7
  store i64 %736, i64* %PC
  %737 = inttoptr i64 %734 to i64*
  %738 = load i64, i64* %737
  store i64 %738, i64* %RAX, align 8, !tbaa !2428
  %739 = load i64, i64* %RBP
  %740 = sub i64 %739, 32
  %741 = load i64, i64* %RAX
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %740 to i64*
  store i64 %741, i64* %744
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 8
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 4
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i64*
  %750 = load i64, i64* %749
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = load i64, i64* %RAX
  %752 = add i64 %751, 552
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 7
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = load i64, i64* %RBP
  %758 = sub i64 %757, 24
  %759 = load i64, i64* %RAX
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 4
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %758 to i64*
  store i64 %759, i64* %762
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 24
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 4
  store i64 %766, i64* %PC
  %767 = inttoptr i64 %764 to i64*
  %768 = load i64, i64* %767
  store i64 %768, i64* %RAX, align 8, !tbaa !2428
  %769 = load i64, i64* %RAX
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 4
  store i64 %771, i64* %PC
  %772 = add i64 104, %769
  store i64 %772, i64* %RAX, align 8, !tbaa !2428
  %773 = icmp ult i64 %772, %769
  %774 = icmp ult i64 %772, 104
  %775 = or i1 %773, %774
  %776 = zext i1 %775 to i8
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %776, i8* %777, align 1, !tbaa !2432
  %778 = trunc i64 %772 to i32
  %779 = and i32 %778, 255
  %780 = call i32 @llvm.ctpop.i32(i32 %779) #16
  %781 = trunc i32 %780 to i8
  %782 = and i8 %781, 1
  %783 = xor i8 %782, 1
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %783, i8* %784, align 1, !tbaa !2446
  %785 = xor i64 104, %769
  %786 = xor i64 %785, %772
  %787 = lshr i64 %786, 4
  %788 = trunc i64 %787 to i8
  %789 = and i8 %788, 1
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %789, i8* %790, align 1, !tbaa !2447
  %791 = icmp eq i64 %772, 0
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %792, i8* %793, align 1, !tbaa !2448
  %794 = lshr i64 %772, 63
  %795 = trunc i64 %794 to i8
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %795, i8* %796, align 1, !tbaa !2449
  %797 = lshr i64 %769, 63
  %798 = xor i64 %794, %797
  %799 = add nuw nsw i64 %798, %794
  %800 = icmp eq i64 %799, 2
  %801 = zext i1 %800 to i8
  %802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %801, i8* %802, align 1, !tbaa !2450
  %803 = load i64, i64* %RBP
  %804 = sub i64 %803, 24
  %805 = load i64, i64* %RAX
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %804 to i64*
  store i64 %805, i64* %808
  br label %block_402042

block_402096:                                     ; preds = %block_402078, %block_402132
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.2, %block_402078 ], [ %MEMORY.3, %block_402132 ]
  %809 = load i64, i64* %RBP
  %810 = sub i64 %809, 16
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC
  %813 = inttoptr i64 %810 to i64*
  %814 = load i64, i64* %813
  store i64 %814, i64* %RAX, align 8, !tbaa !2428
  %815 = load i64, i64* %RBP
  %816 = sub i64 %815, 32
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 4
  store i64 %818, i64* %PC
  %819 = inttoptr i64 %816 to i64*
  %820 = load i64, i64* %819
  store i64 %820, i64* %RCX, align 8, !tbaa !2428
  %821 = load i64, i64* %RAX
  %822 = load i64, i64* %RCX
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 3
  store i64 %824, i64* %PC
  %825 = sub i64 %821, %822
  %826 = icmp ult i64 %821, %822
  %827 = zext i1 %826 to i8
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %827, i8* %828, align 1, !tbaa !2432
  %829 = trunc i64 %825 to i32
  %830 = and i32 %829, 255
  %831 = call i32 @llvm.ctpop.i32(i32 %830) #16
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  %834 = xor i8 %833, 1
  %835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %834, i8* %835, align 1, !tbaa !2446
  %836 = xor i64 %822, %821
  %837 = xor i64 %836, %825
  %838 = lshr i64 %837, 4
  %839 = trunc i64 %838 to i8
  %840 = and i8 %839, 1
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %840, i8* %841, align 1, !tbaa !2447
  %842 = icmp eq i64 %825, 0
  %843 = zext i1 %842 to i8
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %843, i8* %844, align 1, !tbaa !2448
  %845 = lshr i64 %825, 63
  %846 = trunc i64 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %846, i8* %847, align 1, !tbaa !2449
  %848 = lshr i64 %821, 63
  %849 = lshr i64 %822, 63
  %850 = xor i64 %849, %848
  %851 = xor i64 %845, %848
  %852 = add nuw nsw i64 %851, %850
  %853 = icmp eq i64 %852, 2
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %854, i8* %855, align 1, !tbaa !2450
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 167
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 6
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 6
  store i64 %861, i64* %PC
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %863 = load i8, i8* %862, align 1, !tbaa !2448
  store i8 %863, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %865 = icmp ne i8 %863, 0
  %866 = select i1 %865, i64 %857, i64 %859
  store i64 %866, i64* %864, align 8, !tbaa !2428
  %867 = load i8, i8* %BRANCH_TAKEN
  %868 = icmp eq i8 %867, 1
  br i1 %868, label %block_402148, label %block_4020a7

block_401ff6:                                     ; preds = %block_401fd7
  %869 = inttoptr i64 %213 to i64*
  store i64 0, i64* %869
  br label %block_402002

block_402118:                                     ; preds = %block_4020da
  %870 = load i64, i64* %RAX
  %871 = load i64, i64* %RBP
  %872 = sub i64 %871, 48
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 4
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %872 to i64*
  %876 = load i64, i64* %875
  %877 = add i64 %876, %870
  store i64 %877, i64* %RAX, align 8, !tbaa !2428
  %878 = icmp ult i64 %877, %870
  %879 = icmp ult i64 %877, %876
  %880 = or i1 %878, %879
  %881 = zext i1 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %881, i8* %882, align 1, !tbaa !2432
  %883 = trunc i64 %877 to i32
  %884 = and i32 %883, 255
  %885 = call i32 @llvm.ctpop.i32(i32 %884) #16
  %886 = trunc i32 %885 to i8
  %887 = and i8 %886, 1
  %888 = xor i8 %887, 1
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %888, i8* %889, align 1, !tbaa !2446
  %890 = xor i64 %876, %870
  %891 = xor i64 %890, %877
  %892 = lshr i64 %891, 4
  %893 = trunc i64 %892 to i8
  %894 = and i8 %893, 1
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %894, i8* %895, align 1, !tbaa !2447
  %896 = icmp eq i64 %877, 0
  %897 = zext i1 %896 to i8
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %897, i8* %898, align 1, !tbaa !2448
  %899 = lshr i64 %877, 63
  %900 = trunc i64 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %900, i8* %901, align 1, !tbaa !2449
  %902 = lshr i64 %870, 63
  %903 = lshr i64 %876, 63
  %904 = xor i64 %899, %902
  %905 = xor i64 %899, %903
  %906 = add nuw nsw i64 %904, %905
  %907 = icmp eq i64 %906, 2
  %908 = zext i1 %907 to i8
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %908, i8* %909, align 1, !tbaa !2450
  %910 = load i64, i64* %RBP
  %911 = sub i64 %910, 48
  %912 = load i64, i64* %RAX
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 4
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %911 to i64*
  store i64 %912, i64* %915
  br label %block_402128

block_402078:                                     ; preds = %block_402042
  %916 = sub i64 %497, 8
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 4
  store i64 %918, i64* %PC
  %919 = inttoptr i64 %916 to i64*
  %920 = load i64, i64* %919
  store i64 %920, i64* %RAX, align 8, !tbaa !2428
  %921 = load i64, i64* %RAX
  %922 = add i64 %921, 576
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 7
  store i64 %924, i64* %PC
  %925 = inttoptr i64 %922 to i64*
  %926 = load i64, i64* %925
  store i64 %926, i64* %RAX, align 8, !tbaa !2428
  %927 = load i64, i64* %RBP
  %928 = sub i64 %927, 32
  %929 = load i64, i64* %RAX
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 4
  store i64 %931, i64* %PC
  %932 = inttoptr i64 %928 to i64*
  store i64 %929, i64* %932
  %933 = load i64, i64* %RBP
  %934 = sub i64 %933, 8
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 4
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %934 to i64*
  %938 = load i64, i64* %937
  store i64 %938, i64* %RAX, align 8, !tbaa !2428
  %939 = load i64, i64* %RAX
  %940 = add i64 %939, 568
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 7
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i64*
  %944 = load i64, i64* %943
  store i64 %944, i64* %RAX, align 8, !tbaa !2428
  %945 = load i64, i64* %RBP
  %946 = sub i64 %945, 16
  %947 = load i64, i64* %RAX
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 4
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %946 to i64*
  store i64 %947, i64* %950
  br label %block_402096

block_4020ec:                                     ; preds = %block_4020da
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 8
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 4
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i64*
  %956 = load i64, i64* %955
  store i64 %956, i64* %RCX, align 8, !tbaa !2428
  %957 = load i64, i64* %RAX
  %958 = load i64, i64* %RCX
  %959 = add i64 %958, 528
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 7
  store i64 %961, i64* %PC
  %962 = inttoptr i64 %959 to i64*
  %963 = load i64, i64* %962
  %964 = sub i64 %957, %963
  store i64 %964, i64* %RAX, align 8, !tbaa !2428
  %965 = icmp ugt i64 %963, %957
  %966 = zext i1 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %966, i8* %967, align 1, !tbaa !2432
  %968 = trunc i64 %964 to i32
  %969 = and i32 %968, 255
  %970 = call i32 @llvm.ctpop.i32(i32 %969) #16
  %971 = trunc i32 %970 to i8
  %972 = and i8 %971, 1
  %973 = xor i8 %972, 1
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %973, i8* %974, align 1, !tbaa !2446
  %975 = xor i64 %963, %957
  %976 = xor i64 %975, %964
  %977 = lshr i64 %976, 4
  %978 = trunc i64 %977 to i8
  %979 = and i8 %978, 1
  %980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %979, i8* %980, align 1, !tbaa !2447
  %981 = icmp eq i64 %964, 0
  %982 = zext i1 %981 to i8
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %982, i8* %983, align 1, !tbaa !2448
  %984 = lshr i64 %964, 63
  %985 = trunc i64 %984 to i8
  %986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %985, i8* %986, align 1, !tbaa !2449
  %987 = lshr i64 %957, 63
  %988 = lshr i64 %963, 63
  %989 = xor i64 %988, %987
  %990 = xor i64 %984, %987
  %991 = add nuw nsw i64 %990, %989
  %992 = icmp eq i64 %991, 2
  %993 = zext i1 %992 to i8
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %993, i8* %994, align 1, !tbaa !2450
  %995 = load i64, i64* %RAX
  %996 = load i64, i64* %RBP
  %997 = sub i64 %996, 48
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 4
  store i64 %999, i64* %PC
  %1000 = inttoptr i64 %997 to i64*
  %1001 = load i64, i64* %1000
  %1002 = add i64 %1001, %995
  store i64 %1002, i64* %RAX, align 8, !tbaa !2428
  %1003 = icmp ult i64 %1002, %995
  %1004 = icmp ult i64 %1002, %1001
  %1005 = or i1 %1003, %1004
  %1006 = zext i1 %1005 to i8
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1006, i8* %1007, align 1, !tbaa !2432
  %1008 = trunc i64 %1002 to i32
  %1009 = and i32 %1008, 255
  %1010 = call i32 @llvm.ctpop.i32(i32 %1009) #16
  %1011 = trunc i32 %1010 to i8
  %1012 = and i8 %1011, 1
  %1013 = xor i8 %1012, 1
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1013, i8* %1014, align 1, !tbaa !2446
  %1015 = xor i64 %1001, %995
  %1016 = xor i64 %1015, %1002
  %1017 = lshr i64 %1016, 4
  %1018 = trunc i64 %1017 to i8
  %1019 = and i8 %1018, 1
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1019, i8* %1020, align 1, !tbaa !2447
  %1021 = icmp eq i64 %1002, 0
  %1022 = zext i1 %1021 to i8
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1022, i8* %1023, align 1, !tbaa !2448
  %1024 = lshr i64 %1002, 63
  %1025 = trunc i64 %1024 to i8
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1025, i8* %1026, align 1, !tbaa !2449
  %1027 = lshr i64 %995, 63
  %1028 = lshr i64 %1001, 63
  %1029 = xor i64 %1024, %1027
  %1030 = xor i64 %1024, %1028
  %1031 = add nuw nsw i64 %1029, %1030
  %1032 = icmp eq i64 %1031, 2
  %1033 = zext i1 %1032 to i8
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1033, i8* %1034, align 1, !tbaa !2450
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 48
  %1037 = load i64, i64* %RAX
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 4
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1036 to i64*
  store i64 %1037, i64* %1040
  %1041 = load i64, i64* %RBP
  %1042 = sub i64 %1041, 40
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 4
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* %RAX, align 8, !tbaa !2428
  %1047 = load i64, i64* %RAX
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 4
  store i64 %1049, i64* %PC
  %1050 = add i64 1, %1047
  store i64 %1050, i64* %RAX, align 8, !tbaa !2428
  %1051 = icmp ult i64 %1050, %1047
  %1052 = icmp ult i64 %1050, 1
  %1053 = or i1 %1051, %1052
  %1054 = zext i1 %1053 to i8
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1054, i8* %1055, align 1, !tbaa !2432
  %1056 = trunc i64 %1050 to i32
  %1057 = and i32 %1056, 255
  %1058 = call i32 @llvm.ctpop.i32(i32 %1057) #16
  %1059 = trunc i32 %1058 to i8
  %1060 = and i8 %1059, 1
  %1061 = xor i8 %1060, 1
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1061, i8* %1062, align 1, !tbaa !2446
  %1063 = xor i64 1, %1047
  %1064 = xor i64 %1063, %1050
  %1065 = lshr i64 %1064, 4
  %1066 = trunc i64 %1065 to i8
  %1067 = and i8 %1066, 1
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1067, i8* %1068, align 1, !tbaa !2447
  %1069 = icmp eq i64 %1050, 0
  %1070 = zext i1 %1069 to i8
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1070, i8* %1071, align 1, !tbaa !2448
  %1072 = lshr i64 %1050, 63
  %1073 = trunc i64 %1072 to i8
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1073, i8* %1074, align 1, !tbaa !2449
  %1075 = lshr i64 %1047, 63
  %1076 = xor i64 %1072, %1075
  %1077 = add nuw nsw i64 %1076, %1072
  %1078 = icmp eq i64 %1077, 2
  %1079 = zext i1 %1078 to i8
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1079, i8* %1080, align 1, !tbaa !2450
  %1081 = load i64, i64* %RBP
  %1082 = sub i64 %1081, 40
  %1083 = load i64, i64* %RAX
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 4
  store i64 %1085, i64* %PC
  %1086 = inttoptr i64 %1082 to i64*
  store i64 %1083, i64* %1086
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 21
  %1089 = load i64, i64* %PC
  %1090 = add i64 %1089, 5
  store i64 %1090, i64* %PC
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1088, i64* %1091, align 8, !tbaa !2428
  br label %block_402128

block_401fe5:                                     ; preds = %block_401fd7
  %1092 = inttoptr i64 %213 to i64*
  store i64 1, i64* %1092
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 17
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 5
  store i64 %1096, i64* %PC
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1094, i64* %1097, align 8, !tbaa !2428
  br label %block_402002

block_402002:                                     ; preds = %block_401fe5, %block_401ff6
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.1, %block_401ff6 ], [ %MEMORY.1, %block_401fe5 ]
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 5
  %1100 = load i64, i64* %PC
  %1101 = add i64 %1100, 5
  store i64 %1101, i64* %PC
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1099, i64* %1102, align 8, !tbaa !2428
  %1103 = load i64, i64* %RBP
  %1104 = sub i64 %1103, 16
  %1105 = load i64, i64* %PC
  %1106 = add i64 %1105, 4
  store i64 %1106, i64* %PC
  %1107 = inttoptr i64 %1104 to i64*
  %1108 = load i64, i64* %1107
  store i64 %1108, i64* %RAX, align 8, !tbaa !2428
  %1109 = load i64, i64* %RAX
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 4
  store i64 %1111, i64* %PC
  %1112 = add i64 64, %1109
  store i64 %1112, i64* %RAX, align 8, !tbaa !2428
  %1113 = icmp ult i64 %1112, %1109
  %1114 = icmp ult i64 %1112, 64
  %1115 = or i1 %1113, %1114
  %1116 = zext i1 %1115 to i8
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1116, i8* %1117, align 1, !tbaa !2432
  %1118 = trunc i64 %1112 to i32
  %1119 = and i32 %1118, 255
  %1120 = call i32 @llvm.ctpop.i32(i32 %1119) #16
  %1121 = trunc i32 %1120 to i8
  %1122 = and i8 %1121, 1
  %1123 = xor i8 %1122, 1
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1123, i8* %1124, align 1, !tbaa !2446
  %1125 = xor i64 64, %1109
  %1126 = xor i64 %1125, %1112
  %1127 = lshr i64 %1126, 4
  %1128 = trunc i64 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1129, i8* %1130, align 1, !tbaa !2447
  %1131 = icmp eq i64 %1112, 0
  %1132 = zext i1 %1131 to i8
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1132, i8* %1133, align 1, !tbaa !2448
  %1134 = lshr i64 %1112, 63
  %1135 = trunc i64 %1134 to i8
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1135, i8* %1136, align 1, !tbaa !2449
  %1137 = lshr i64 %1109, 63
  %1138 = xor i64 %1134, %1137
  %1139 = add nuw nsw i64 %1138, %1134
  %1140 = icmp eq i64 %1139, 2
  %1141 = zext i1 %1140 to i8
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1141, i8* %1142, align 1, !tbaa !2450
  %1143 = load i64, i64* %RBP
  %1144 = sub i64 %1143, 16
  %1145 = load i64, i64* %RAX
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 4
  store i64 %1147, i64* %PC
  %1148 = inttoptr i64 %1144 to i64*
  store i64 %1145, i64* %1148
  %1149 = load i64, i64* %PC
  %1150 = sub i64 %1149, 77
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 5
  store i64 %1152, i64* %PC
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1150, i64* %1153, align 8, !tbaa !2428
  br label %block_401fc6
}

; Function Attrs: noinline
define %struct.Memory* @sub_401110_price_out_impl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401110:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %RAX = bitcast %union.anon* %19 to i64*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 5
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RCX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 7
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RDX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 9
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RSI = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 11
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RDI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 13
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RSP = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 15
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RBP = bitcast %union.anon* %37 to i64*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %39 = getelementptr inbounds %struct.GPR, %struct.GPR* %38, i32 0, i32 17
  %40 = getelementptr inbounds %struct.Reg, %struct.Reg* %39, i32 0, i32 0
  %R8 = bitcast %union.anon* %40 to i64*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %42 = getelementptr inbounds %struct.GPR, %struct.GPR* %41, i32 0, i32 19
  %43 = getelementptr inbounds %struct.Reg, %struct.Reg* %42, i32 0, i32 0
  %R9 = bitcast %union.anon* %43 to i64*
  %44 = load i64, i64* %RBP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 1
  store i64 %46, i64* %PC
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %48 = load i64, i64* %47, align 8, !tbaa !2428
  %49 = add i64 %48, -8
  %50 = inttoptr i64 %49 to i64*
  store i64 %44, i64* %50
  store i64 %49, i64* %47, align 8, !tbaa !2428
  %51 = load i64, i64* %RSP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC
  store i64 %51, i64* %RBP, align 8, !tbaa !2428
  %54 = load i64, i64* %RSP
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC
  %57 = sub i64 %54, 176
  store i64 %57, i64* %RSP, align 8, !tbaa !2428
  %58 = icmp ult i64 %54, 176
  %59 = zext i1 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %59, i8* %60, align 1, !tbaa !2432
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 255
  %63 = call i32 @llvm.ctpop.i32(i32 %62) #16
  %64 = trunc i32 %63 to i8
  %65 = and i8 %64, 1
  %66 = xor i8 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %66, i8* %67, align 1, !tbaa !2446
  %68 = xor i64 176, %54
  %69 = xor i64 %68, %57
  %70 = lshr i64 %69, 4
  %71 = trunc i64 %70 to i8
  %72 = and i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %72, i8* %73, align 1, !tbaa !2447
  %74 = icmp eq i64 %57, 0
  %75 = zext i1 %74 to i8
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %75, i8* %76, align 1, !tbaa !2448
  %77 = lshr i64 %57, 63
  %78 = trunc i64 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %78, i8* %79, align 1, !tbaa !2449
  %80 = lshr i64 %54, 63
  %81 = xor i64 %77, %80
  %82 = add nuw nsw i64 %81, %80
  %83 = icmp eq i64 %82, 2
  %84 = zext i1 %83 to i8
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %84, i8* %85, align 1, !tbaa !2450
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 16
  %88 = load i64, i64* %RDI
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %87 to i64*
  store i64 %88, i64* %91
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 40
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 8
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %93 to i64*
  store i64 0, i64* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 48
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 8
  store i64 %100, i64* %PC
  %101 = inttoptr i64 %98 to i64*
  store i64 0, i64* %101
  %102 = load i64, i64* %RBP
  %103 = sub i64 %102, 64
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 8
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i64*
  store i64 15, i64* %106
  %107 = load i64, i64* %RBP
  %108 = sub i64 %107, 16
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %108 to i64*
  %112 = load i64, i64* %111
  store i64 %112, i64* %RDI, align 8, !tbaa !2428
  %113 = load i64, i64* %RDI
  %114 = add i64 %113, 528
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 7
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %114 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %RDI, align 8, !tbaa !2428
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 72
  %121 = load i64, i64* %RDI
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %120 to i64*
  store i64 %121, i64* %124
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 88
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 8
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %126 to i64*
  store i64 30, i64* %129
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 72
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %RDI, align 8, !tbaa !2428
  %136 = load i64, i64* %RDI
  %137 = load i64, i64* %RBP
  %138 = sub i64 %137, 64
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i64*
  %142 = load i64, i64* %141
  %143 = sub i64 %136, %142
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %144 = icmp ugt i64 %142, %136
  %145 = zext i1 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %145, i8* %146, align 1, !tbaa !2432
  %147 = trunc i64 %143 to i32
  %148 = and i32 %147, 255
  %149 = call i32 @llvm.ctpop.i32(i32 %148) #16
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %152, i8* %153, align 1, !tbaa !2446
  %154 = xor i64 %142, %136
  %155 = xor i64 %154, %143
  %156 = lshr i64 %155, 4
  %157 = trunc i64 %156 to i8
  %158 = and i8 %157, 1
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %158, i8* %159, align 1, !tbaa !2447
  %160 = icmp eq i64 %143, 0
  %161 = zext i1 %160 to i8
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %161, i8* %162, align 1, !tbaa !2448
  %163 = lshr i64 %143, 63
  %164 = trunc i64 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %164, i8* %165, align 1, !tbaa !2449
  %166 = lshr i64 %136, 63
  %167 = lshr i64 %142, 63
  %168 = xor i64 %167, %166
  %169 = xor i64 %163, %166
  %170 = add nuw nsw i64 %169, %168
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %172, i8* %173, align 1, !tbaa !2450
  %174 = load i64, i64* %RBP
  %175 = sub i64 %174, 104
  %176 = load i64, i64* %RDI
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %175 to i64*
  store i64 %176, i64* %179
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 16
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 4
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i64*
  %185 = load i64, i64* %184
  store i64 %185, i64* %RDI, align 8, !tbaa !2428
  %186 = load i64, i64* %RDI
  %187 = add i64 %186, 408
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 11
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i64*
  %191 = load i64, i64* %190
  %192 = sub i64 %191, 15000
  %193 = icmp ult i64 %191, 15000
  %194 = zext i1 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %194, i8* %195, align 1, !tbaa !2432
  %196 = trunc i64 %192 to i32
  %197 = and i32 %196, 255
  %198 = call i32 @llvm.ctpop.i32(i32 %197) #16
  %199 = trunc i32 %198 to i8
  %200 = and i8 %199, 1
  %201 = xor i8 %200, 1
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %201, i8* %202, align 1, !tbaa !2446
  %203 = xor i64 %191, 15000
  %204 = xor i64 %203, %192
  %205 = lshr i64 %204, 4
  %206 = trunc i64 %205 to i8
  %207 = and i8 %206, 1
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %207, i8* %208, align 1, !tbaa !2447
  %209 = icmp eq i64 %192, 0
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %210, i8* %211, align 1, !tbaa !2448
  %212 = lshr i64 %192, 63
  %213 = trunc i64 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %213, i8* %214, align 1, !tbaa !2449
  %215 = lshr i64 %191, 63
  %216 = xor i64 %212, %215
  %217 = add nuw nsw i64 %216, %215
  %218 = icmp eq i64 %217, 2
  %219 = zext i1 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %219, i8* %220, align 1, !tbaa !2450
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 165
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 6
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 6
  store i64 %226, i64* %PC
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %228 = load i8, i8* %227, align 1, !tbaa !2448
  %229 = icmp eq i8 %228, 0
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %231 = load i8, i8* %230, align 1, !tbaa !2449
  %232 = icmp ne i8 %231, 0
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %234 = load i8, i8* %233, align 1, !tbaa !2450
  %235 = icmp ne i8 %234, 0
  %236 = xor i1 %232, %235
  %237 = xor i1 %236, true
  %238 = and i1 %229, %237
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %241 = select i1 %238, i64 %222, i64 %224
  store i64 %241, i64* %240, align 8, !tbaa !2428
  %242 = load i8, i8* %BRANCH_TAKEN
  %243 = icmp eq i8 %242, 1
  br i1 %243, label %block_40120e, label %block_40116f

block_40127f:                                     ; preds = %block_40126c
  %244 = add i64 %1814, 5
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 5
  store i64 %246, i64* %PC
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %244, i64* %247, align 8, !tbaa !2428
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 24
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = load i64, i64* %RAX
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 4
  store i64 %256, i64* %PC
  %257 = add i64 1, %254
  store i64 %257, i64* %RAX, align 8, !tbaa !2428
  %258 = icmp ult i64 %257, %254
  %259 = icmp ult i64 %257, 1
  %260 = or i1 %258, %259
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %261, i8* %262, align 1, !tbaa !2432
  %263 = trunc i64 %257 to i32
  %264 = and i32 %263, 255
  %265 = call i32 @llvm.ctpop.i32(i32 %264) #16
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %268, i8* %269, align 1, !tbaa !2446
  %270 = xor i64 1, %254
  %271 = xor i64 %270, %257
  %272 = lshr i64 %271, 4
  %273 = trunc i64 %272 to i8
  %274 = and i8 %273, 1
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %274, i8* %275, align 1, !tbaa !2447
  %276 = icmp eq i64 %257, 0
  %277 = zext i1 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %277, i8* %278, align 1, !tbaa !2448
  %279 = lshr i64 %257, 63
  %280 = trunc i64 %279 to i8
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %280, i8* %281, align 1, !tbaa !2449
  %282 = lshr i64 %254, 63
  %283 = xor i64 %279, %282
  %284 = add nuw nsw i64 %283, %279
  %285 = icmp eq i64 %284, 2
  %286 = zext i1 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %286, i8* %287, align 1, !tbaa !2450
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 24
  %290 = load i64, i64* %RAX
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 4
  store i64 %292, i64* %PC
  %293 = inttoptr i64 %289 to i64*
  store i64 %290, i64* %293
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 112
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = load i64, i64* %RAX
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 6
  store i64 %302, i64* %PC
  %303 = add i64 192, %300
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = icmp ult i64 %303, %300
  %305 = icmp ult i64 %303, 192
  %306 = or i1 %304, %305
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %307, i8* %308, align 1, !tbaa !2432
  %309 = trunc i64 %303 to i32
  %310 = and i32 %309, 255
  %311 = call i32 @llvm.ctpop.i32(i32 %310) #16
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %314, i8* %315, align 1, !tbaa !2446
  %316 = xor i64 192, %300
  %317 = xor i64 %316, %303
  %318 = lshr i64 %317, 4
  %319 = trunc i64 %318 to i8
  %320 = and i8 %319, 1
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %320, i8* %321, align 1, !tbaa !2447
  %322 = icmp eq i64 %303, 0
  %323 = zext i1 %322 to i8
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %323, i8* %324, align 1, !tbaa !2448
  %325 = lshr i64 %303, 63
  %326 = trunc i64 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %326, i8* %327, align 1, !tbaa !2449
  %328 = lshr i64 %300, 63
  %329 = xor i64 %325, %328
  %330 = add nuw nsw i64 %329, %325
  %331 = icmp eq i64 %330, 2
  %332 = zext i1 %331 to i8
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %332, i8* %333, align 1, !tbaa !2450
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 112
  %336 = load i64, i64* %RAX
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 4
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %335 to i64*
  store i64 %336, i64* %339
  %340 = load i64, i64* %PC
  %341 = sub i64 %340, 91
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 5
  store i64 %343, i64* %PC
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %341, i64* %344, align 8, !tbaa !2428
  br label %block_401243

block_40127a:                                     ; preds = %block_40126c
  %345 = add i64 %1814, 41
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 5
  store i64 %347, i64* %PC
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %345, i64* %348, align 8, !tbaa !2428
  %349 = load i64, i64* %RBP
  %350 = sub i64 %349, 144
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 11
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %350 to i64*
  store i64 0, i64* %353
  br label %block_4012ae

block_4012f4:                                     ; preds = %block_4012bc, %block_4012ca
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.7, %block_4012bc ], [ %MEMORY.7, %block_4012ca ]
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 112
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = load i64, i64* %RAX
  %361 = add i64 %360, 24
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to i32*
  %365 = load i32, i32* %364
  %366 = sub i32 %365, -1
  %367 = icmp ult i32 %365, -1
  %368 = zext i1 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %368, i8* %369, align 1, !tbaa !2432
  %370 = and i32 %366, 255
  %371 = call i32 @llvm.ctpop.i32(i32 %370) #16
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  %374 = xor i8 %373, 1
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %374, i8* %375, align 1, !tbaa !2446
  %376 = xor i32 %365, -1
  %377 = xor i32 %376, %366
  %378 = lshr i32 %377, 4
  %379 = trunc i32 %378 to i8
  %380 = and i8 %379, 1
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %380, i8* %381, align 1, !tbaa !2447
  %382 = icmp eq i32 %366, 0
  %383 = zext i1 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %383, i8* %384, align 1, !tbaa !2448
  %385 = lshr i32 %366, 31
  %386 = trunc i32 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %386, i8* %387, align 1, !tbaa !2449
  %388 = lshr i32 %365, 31
  %389 = xor i32 %388, 1
  %390 = xor i32 %385, %388
  %391 = add nuw nsw i32 %390, %389
  %392 = icmp eq i32 %391, 2
  %393 = zext i1 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %393, i8* %394, align 1, !tbaa !2450
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 11
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 6
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 6
  store i64 %400, i64* %PC
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %402 = load i8, i8* %401, align 1, !tbaa !2448
  %403 = icmp eq i8 %402, 0
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %406 = select i1 %403, i64 %396, i64 %398
  store i64 %406, i64* %405, align 8, !tbaa !2428
  %407 = load i8, i8* %BRANCH_TAKEN
  %408 = icmp eq i8 %407, 1
  br i1 %408, label %block_401307, label %block_401302

block_4011f3:                                     ; preds = %block_4011d8
  %409 = sub i64 %1724, 8
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 8
  store i64 %411, i64* %PC
  %412 = inttoptr i64 %409 to i64*
  store i64 -1, i64* %412
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 1013
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 5
  store i64 %416, i64* %PC
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %414, i64* %417, align 8, !tbaa !2428
  br label %block_4015f0

block_4015f0:                                     ; preds = %block_4015e8, %block_4011f3
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.14, %block_4015e8 ], [ %1686, %block_4011f3 ]
  %418 = load i64, i64* %RBP
  %419 = sub i64 %418, 8
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 4
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i64*
  %423 = load i64, i64* %422
  store i64 %423, i64* %RAX, align 8, !tbaa !2428
  %424 = load i64, i64* %RSP
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 7
  store i64 %426, i64* %PC
  %427 = add i64 176, %424
  store i64 %427, i64* %RSP, align 8, !tbaa !2428
  %428 = icmp ult i64 %427, %424
  %429 = icmp ult i64 %427, 176
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %431, i8* %432, align 1, !tbaa !2432
  %433 = trunc i64 %427 to i32
  %434 = and i32 %433, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = xor i64 176, %424
  %441 = xor i64 %440, %427
  %442 = lshr i64 %441, 4
  %443 = trunc i64 %442 to i8
  %444 = and i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = icmp eq i64 %427, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %427, 63
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i64 %424, 63
  %453 = xor i64 %449, %452
  %454 = add nuw nsw i64 %453, %449
  %455 = icmp eq i64 %454, 2
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %456, i8* %457, align 1, !tbaa !2450
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 1
  store i64 %459, i64* %PC
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %461 = load i64, i64* %460, align 8, !tbaa !2428
  %462 = add i64 %461, 8
  %463 = inttoptr i64 %461 to i64*
  %464 = load i64, i64* %463
  store i64 %464, i64* %RBP, align 8, !tbaa !2428
  store i64 %462, i64* %460, align 8, !tbaa !2428
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 1
  store i64 %466, i64* %PC
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %469 = load i64, i64* %468, align 8, !tbaa !2428
  %470 = inttoptr i64 %469 to i64*
  %471 = load i64, i64* %470
  store i64 %471, i64* %467, align 8, !tbaa !2428
  %472 = add i64 %469, 8
  store i64 %472, i64* %468, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40135d:                                     ; preds = %block_401352
  %473 = load i64, i64* %RBP
  %474 = sub i64 %473, 120
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 4
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %474 to i64*
  %478 = load i64, i64* %477
  store i64 %478, i64* %RAX, align 8, !tbaa !2428
  %479 = load i64, i64* %RAX
  %480 = add i64 %479, 8
  %481 = load i64, i64* %PC
  %482 = add i64 %481, 4
  store i64 %482, i64* %PC
  %483 = inttoptr i64 %480 to i64*
  %484 = load i64, i64* %483
  store i64 %484, i64* %RAX, align 8, !tbaa !2428
  %485 = load i64, i64* %RBP
  %486 = sub i64 %485, 152
  %487 = load i64, i64* %RAX
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 7
  store i64 %489, i64* %PC
  %490 = inttoptr i64 %486 to i64*
  store i64 %487, i64* %490
  %491 = load i64, i64* %RBP
  %492 = sub i64 %491, 152
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 7
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %492 to i64*
  %496 = load i64, i64* %495
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %497 = load i64, i64* %RAX
  %498 = add i64 %497, 100
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 4
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %498 to i32*
  %502 = load i32, i32* %501
  %503 = sext i32 %502 to i64
  store i64 %503, i64* %RAX, align 8, !tbaa !2428
  %504 = load i64, i64* %RBP
  %505 = sub i64 %504, 120
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 4
  store i64 %507, i64* %PC
  %508 = inttoptr i64 %505 to i64*
  %509 = load i64, i64* %508
  store i64 %509, i64* %RCX, align 8, !tbaa !2428
  %510 = load i64, i64* %RAX
  %511 = load i64, i64* %RCX
  %512 = add i64 %511, 56
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 4
  store i64 %514, i64* %PC
  %515 = inttoptr i64 %512 to i64*
  %516 = load i64, i64* %515
  %517 = add i64 %516, %510
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = icmp ult i64 %517, %510
  %519 = icmp ult i64 %517, %516
  %520 = or i1 %518, %519
  %521 = zext i1 %520 to i8
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %521, i8* %522, align 1, !tbaa !2432
  %523 = trunc i64 %517 to i32
  %524 = and i32 %523, 255
  %525 = call i32 @llvm.ctpop.i32(i32 %524) #16
  %526 = trunc i32 %525 to i8
  %527 = and i8 %526, 1
  %528 = xor i8 %527, 1
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %528, i8* %529, align 1, !tbaa !2446
  %530 = xor i64 %516, %510
  %531 = xor i64 %530, %517
  %532 = lshr i64 %531, 4
  %533 = trunc i64 %532 to i8
  %534 = and i8 %533, 1
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %534, i8* %535, align 1, !tbaa !2447
  %536 = icmp eq i64 %517, 0
  %537 = zext i1 %536 to i8
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %537, i8* %538, align 1, !tbaa !2448
  %539 = lshr i64 %517, 63
  %540 = trunc i64 %539 to i8
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %540, i8* %541, align 1, !tbaa !2449
  %542 = lshr i64 %510, 63
  %543 = lshr i64 %516, 63
  %544 = xor i64 %539, %542
  %545 = xor i64 %539, %543
  %546 = add nuw nsw i64 %544, %545
  %547 = icmp eq i64 %546, 2
  %548 = zext i1 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %548, i8* %549, align 1, !tbaa !2450
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 56
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 4
  store i64 %554, i64* %PC
  %555 = inttoptr i64 %552 to i64*
  %556 = load i64, i64* %555
  %557 = sub i64 %550, %556
  %558 = icmp ugt i64 %556, %550
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %559, i8* %560, align 1, !tbaa !2432
  %561 = trunc i64 %557 to i32
  %562 = and i32 %561, 255
  %563 = call i32 @llvm.ctpop.i32(i32 %562) #16
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %566, i8* %567, align 1, !tbaa !2446
  %568 = xor i64 %556, %550
  %569 = xor i64 %568, %557
  %570 = lshr i64 %569, 4
  %571 = trunc i64 %570 to i8
  %572 = and i8 %571, 1
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %572, i8* %573, align 1, !tbaa !2447
  %574 = icmp eq i64 %557, 0
  %575 = zext i1 %574 to i8
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %575, i8* %576, align 1, !tbaa !2448
  %577 = lshr i64 %557, 63
  %578 = trunc i64 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %578, i8* %579, align 1, !tbaa !2449
  %580 = lshr i64 %550, 63
  %581 = lshr i64 %556, 63
  %582 = xor i64 %581, %580
  %583 = xor i64 %577, %580
  %584 = add nuw nsw i64 %583, %582
  %585 = icmp eq i64 %584, 2
  %586 = zext i1 %585 to i8
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %586, i8* %587, align 1, !tbaa !2450
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 26
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 6
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 6
  store i64 %593, i64* %PC
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %595 = load i8, i8* %594, align 1, !tbaa !2448
  %596 = icmp ne i8 %595, 0
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %598 = load i8, i8* %597, align 1, !tbaa !2449
  %599 = icmp ne i8 %598, 0
  %600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %601 = load i8, i8* %600, align 1, !tbaa !2450
  %602 = icmp ne i8 %601, 0
  %603 = xor i1 %599, %602
  %604 = or i1 %596, %603
  %605 = zext i1 %604 to i8
  store i8 %605, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %607 = select i1 %604, i64 %589, i64 %591
  store i64 %607, i64* %606, align 8, !tbaa !2428
  %608 = load i8, i8* %BRANCH_TAKEN
  %609 = icmp eq i8 %608, 1
  %610 = load i64, i64* %RBP
  br i1 %609, label %block_40139d, label %block_401389

block_40125b:                                     ; preds = %block_401243
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 112
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 4
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RAX
  %618 = add i64 %617, 88
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621
  %623 = sub i32 %622, -1
  %624 = icmp ult i32 %622, -1
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %625, i8* %626, align 1, !tbaa !2432
  %627 = and i32 %623, 255
  %628 = call i32 @llvm.ctpop.i32(i32 %627) #16
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %631, i8* %632, align 1, !tbaa !2446
  %633 = xor i32 %622, -1
  %634 = xor i32 %633, %623
  %635 = lshr i32 %634, 4
  %636 = trunc i32 %635 to i8
  %637 = and i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %637, i8* %638, align 1, !tbaa !2447
  %639 = icmp eq i32 %623, 0
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %640, i8* %641, align 1, !tbaa !2448
  %642 = lshr i32 %623, 31
  %643 = trunc i32 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %643, i8* %644, align 1, !tbaa !2449
  %645 = lshr i32 %622, 31
  %646 = xor i32 %645, 1
  %647 = xor i32 %642, %645
  %648 = add nuw nsw i32 %647, %646
  %649 = icmp eq i32 %648, 2
  %650 = zext i1 %649 to i8
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %650, i8* %651, align 1, !tbaa !2450
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 3
  store i64 %653, i64* %PC
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %655 = load i8, i8* %654, align 1, !tbaa !2448
  store i8 %655, i8* %CL, align 1, !tbaa !2451
  %656 = load i64, i64* %RBP
  %657 = sub i64 %656, 161
  %658 = load i8, i8* %CL
  %659 = zext i8 %658 to i64
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 6
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %657 to i8*
  store i8 %658, i8* %662
  br label %block_40126c

block_4014da:                                     ; preds = %block_40148f, %block_4014eb
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.7, %block_40148f ], [ %MEMORY.2, %block_4014eb ]
  %663 = load i64, i64* %RBP
  %664 = sub i64 %663, 128
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 4
  store i64 %666, i64* %PC
  %667 = inttoptr i64 %664 to i64*
  %668 = load i64, i64* %667
  store i64 %668, i64* %RAX, align 8, !tbaa !2428
  %669 = load i64, i64* %RAX
  %670 = load i64, i64* %RBP
  %671 = sub i64 %670, 136
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 7
  store i64 %673, i64* %PC
  %674 = inttoptr i64 %671 to i64*
  %675 = load i64, i64* %674
  %676 = sub i64 %669, %675
  %677 = icmp ugt i64 %675, %669
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %678, i8* %679, align 1, !tbaa !2432
  %680 = trunc i64 %676 to i32
  %681 = and i32 %680, 255
  %682 = call i32 @llvm.ctpop.i32(i32 %681) #16
  %683 = trunc i32 %682 to i8
  %684 = and i8 %683, 1
  %685 = xor i8 %684, 1
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %685, i8* %686, align 1, !tbaa !2446
  %687 = xor i64 %675, %669
  %688 = xor i64 %687, %676
  %689 = lshr i64 %688, 4
  %690 = trunc i64 %689 to i8
  %691 = and i8 %690, 1
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %691, i8* %692, align 1, !tbaa !2447
  %693 = icmp eq i64 %676, 0
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %694, i8* %695, align 1, !tbaa !2448
  %696 = lshr i64 %676, 63
  %697 = trunc i64 %696 to i8
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %697, i8* %698, align 1, !tbaa !2449
  %699 = lshr i64 %669, 63
  %700 = lshr i64 %675, 63
  %701 = xor i64 %700, %699
  %702 = xor i64 %696, %699
  %703 = add nuw nsw i64 %702, %701
  %704 = icmp eq i64 %703, 2
  %705 = zext i1 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %705, i8* %706, align 1, !tbaa !2450
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 46
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 6
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 6
  store i64 %712, i64* %PC
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %714 = load i8, i8* %713, align 1, !tbaa !2448
  store i8 %714, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %716 = icmp ne i8 %714, 0
  %717 = select i1 %716, i64 %708, i64 %710
  store i64 %717, i64* %715, align 8, !tbaa !2428
  %718 = load i8, i8* %BRANCH_TAKEN
  %719 = icmp eq i8 %718, 1
  br i1 %719, label %block_401513, label %block_4014eb

block_4013d9:                                     ; preds = %block_4013c4
  %720 = inttoptr i64 %1376 to i64*
  %721 = load i64, i64* %720
  store i64 %721, i64* %RDI, align 8, !tbaa !2428
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 40
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 4
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i64*
  %727 = load i64, i64* %726
  store i64 %727, i64* %RSI, align 8, !tbaa !2428
  %728 = load i64, i64* %RBP
  %729 = sub i64 %728, 152
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 7
  store i64 %731, i64* %PC
  %732 = inttoptr i64 %729 to i64*
  %733 = load i64, i64* %732
  store i64 %733, i64* %RDX, align 8, !tbaa !2428
  %734 = load i64, i64* %RBP
  %735 = sub i64 %734, 160
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 7
  store i64 %737, i64* %PC
  %738 = inttoptr i64 %735 to i64*
  %739 = load i64, i64* %738
  store i64 %739, i64* %RCX, align 8, !tbaa !2428
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 88
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %741 to i64*
  %745 = load i64, i64* %744
  store i64 %745, i64* %R8, align 8, !tbaa !2428
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 96
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 4
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %747 to i64*
  %751 = load i64, i64* %750
  store i64 %751, i64* %R9, align 8, !tbaa !2428
  %752 = load i64, i64* %PC
  %753 = sub i64 %752, 2167
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 5
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 5
  store i64 %757, i64* %PC
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %759 = load i64, i64* %758, align 8, !tbaa !2428
  %760 = add i64 %759, -8
  %761 = inttoptr i64 %760 to i64*
  store i64 %755, i64* %761
  store i64 %760, i64* %758, align 8, !tbaa !2428
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %762, align 8, !tbaa !2428
  %763 = load i64, i64* %PC
  %764 = call %struct.Memory* @sub_400b80_insert_new_arc_renamed_(%struct.State* %0, i64 %763, %struct.Memory* %MEMORY.5)
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 40
  %767 = load i64, i64* %PC
  %768 = add i64 %767, 4
  store i64 %768, i64* %PC
  %769 = inttoptr i64 %766 to i64*
  %770 = load i64, i64* %769
  store i64 %770, i64* %RCX, align 8, !tbaa !2428
  %771 = load i64, i64* %RCX
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 4
  store i64 %773, i64* %PC
  %774 = add i64 1, %771
  store i64 %774, i64* %RCX, align 8, !tbaa !2428
  %775 = icmp ult i64 %774, %771
  %776 = icmp ult i64 %774, 1
  %777 = or i1 %775, %776
  %778 = zext i1 %777 to i8
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %778, i8* %779, align 1, !tbaa !2432
  %780 = trunc i64 %774 to i32
  %781 = and i32 %780, 255
  %782 = call i32 @llvm.ctpop.i32(i32 %781) #16
  %783 = trunc i32 %782 to i8
  %784 = and i8 %783, 1
  %785 = xor i8 %784, 1
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %785, i8* %786, align 1, !tbaa !2446
  %787 = xor i64 1, %771
  %788 = xor i64 %787, %774
  %789 = lshr i64 %788, 4
  %790 = trunc i64 %789 to i8
  %791 = and i8 %790, 1
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %791, i8* %792, align 1, !tbaa !2447
  %793 = icmp eq i64 %774, 0
  %794 = zext i1 %793 to i8
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %794, i8* %795, align 1, !tbaa !2448
  %796 = lshr i64 %774, 63
  %797 = trunc i64 %796 to i8
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %797, i8* %798, align 1, !tbaa !2449
  %799 = lshr i64 %771, 63
  %800 = xor i64 %796, %799
  %801 = add nuw nsw i64 %800, %796
  %802 = icmp eq i64 %801, 2
  %803 = zext i1 %802 to i8
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %803, i8* %804, align 1, !tbaa !2450
  %805 = load i64, i64* %RBP
  %806 = sub i64 %805, 40
  %807 = load i64, i64* %RCX
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 4
  store i64 %809, i64* %PC
  %810 = inttoptr i64 %806 to i64*
  store i64 %807, i64* %810
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 63
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 5
  store i64 %814, i64* %PC
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %812, i64* %815, align 8, !tbaa !2428
  br label %block_401447

block_401465:                                     ; preds = %block_401302, %block_401460
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.5, %block_401460 ], [ %MEMORY.0, %block_401302 ]
  %816 = load i64, i64* %RBP
  %817 = sub i64 %816, 24
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 4
  store i64 %819, i64* %PC
  %820 = inttoptr i64 %817 to i64*
  %821 = load i64, i64* %820
  store i64 %821, i64* %RAX, align 8, !tbaa !2428
  %822 = load i64, i64* %RAX
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 4
  store i64 %824, i64* %PC
  %825 = add i64 1, %822
  store i64 %825, i64* %RAX, align 8, !tbaa !2428
  %826 = icmp ult i64 %825, %822
  %827 = icmp ult i64 %825, 1
  %828 = or i1 %826, %827
  %829 = zext i1 %828 to i8
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %829, i8* %830, align 1, !tbaa !2432
  %831 = trunc i64 %825 to i32
  %832 = and i32 %831, 255
  %833 = call i32 @llvm.ctpop.i32(i32 %832) #16
  %834 = trunc i32 %833 to i8
  %835 = and i8 %834, 1
  %836 = xor i8 %835, 1
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %836, i8* %837, align 1, !tbaa !2446
  %838 = xor i64 1, %822
  %839 = xor i64 %838, %825
  %840 = lshr i64 %839, 4
  %841 = trunc i64 %840 to i8
  %842 = and i8 %841, 1
  %843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %842, i8* %843, align 1, !tbaa !2447
  %844 = icmp eq i64 %825, 0
  %845 = zext i1 %844 to i8
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %845, i8* %846, align 1, !tbaa !2448
  %847 = lshr i64 %825, 63
  %848 = trunc i64 %847 to i8
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %848, i8* %849, align 1, !tbaa !2449
  %850 = lshr i64 %822, 63
  %851 = xor i64 %847, %850
  %852 = add nuw nsw i64 %851, %847
  %853 = icmp eq i64 %852, 2
  %854 = zext i1 %853 to i8
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %854, i8* %855, align 1, !tbaa !2450
  %856 = load i64, i64* %RBP
  %857 = sub i64 %856, 24
  %858 = load i64, i64* %RAX
  %859 = load i64, i64* %PC
  %860 = add i64 %859, 4
  store i64 %860, i64* %PC
  %861 = inttoptr i64 %857 to i64*
  store i64 %858, i64* %861
  %862 = load i64, i64* %RBP
  %863 = sub i64 %862, 112
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 4
  store i64 %865, i64* %PC
  %866 = inttoptr i64 %863 to i64*
  %867 = load i64, i64* %866
  store i64 %867, i64* %RAX, align 8, !tbaa !2428
  %868 = load i64, i64* %RAX
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 6
  store i64 %870, i64* %PC
  %871 = add i64 192, %868
  store i64 %871, i64* %RAX, align 8, !tbaa !2428
  %872 = icmp ult i64 %871, %868
  %873 = icmp ult i64 %871, 192
  %874 = or i1 %872, %873
  %875 = zext i1 %874 to i8
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %875, i8* %876, align 1, !tbaa !2432
  %877 = trunc i64 %871 to i32
  %878 = and i32 %877, 255
  %879 = call i32 @llvm.ctpop.i32(i32 %878) #16
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %882, i8* %883, align 1, !tbaa !2446
  %884 = xor i64 192, %868
  %885 = xor i64 %884, %871
  %886 = lshr i64 %885, 4
  %887 = trunc i64 %886 to i8
  %888 = and i8 %887, 1
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %888, i8* %889, align 1, !tbaa !2447
  %890 = icmp eq i64 %871, 0
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %891, i8* %892, align 1, !tbaa !2448
  %893 = lshr i64 %871, 63
  %894 = trunc i64 %893 to i8
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %894, i8* %895, align 1, !tbaa !2449
  %896 = lshr i64 %868, 63
  %897 = xor i64 %893, %896
  %898 = add nuw nsw i64 %897, %893
  %899 = icmp eq i64 %898, 2
  %900 = zext i1 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %900, i8* %901, align 1, !tbaa !2450
  %902 = load i64, i64* %RBP
  %903 = sub i64 %902, 112
  %904 = load i64, i64* %RAX
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 4
  store i64 %906, i64* %PC
  %907 = inttoptr i64 %903 to i64*
  store i64 %904, i64* %907
  %908 = load i64, i64* %PC
  %909 = sub i64 %908, 465
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 5
  store i64 %911, i64* %PC
  %912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %909, i64* %912, align 8, !tbaa !2428
  br label %block_4012ae

block_4015a3:                                     ; preds = %block_40159e, %block_401513
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.9, %block_40159e ], [ %MEMORY.2, %block_401513 ]
  %913 = load i64, i64* %RBP
  %914 = sub i64 %913, 40
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 4
  store i64 %916, i64* %PC
  %917 = inttoptr i64 %914 to i64*
  %918 = load i64, i64* %917
  store i64 %918, i64* %RAX, align 8, !tbaa !2428
  %919 = load i64, i64* %RBP
  %920 = sub i64 %919, 16
  %921 = load i64, i64* %PC
  %922 = add i64 %921, 4
  store i64 %922, i64* %PC
  %923 = inttoptr i64 %920 to i64*
  %924 = load i64, i64* %923
  store i64 %924, i64* %RCX, align 8, !tbaa !2428
  %925 = load i64, i64* %RAX
  %926 = load i64, i64* %RCX
  %927 = add i64 %926, 424
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 7
  store i64 %929, i64* %PC
  %930 = inttoptr i64 %927 to i64*
  %931 = load i64, i64* %930
  %932 = add i64 %931, %925
  store i64 %932, i64* %RAX, align 8, !tbaa !2428
  %933 = icmp ult i64 %932, %925
  %934 = icmp ult i64 %932, %931
  %935 = or i1 %933, %934
  %936 = zext i1 %935 to i8
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %936, i8* %937, align 1, !tbaa !2432
  %938 = trunc i64 %932 to i32
  %939 = and i32 %938, 255
  %940 = call i32 @llvm.ctpop.i32(i32 %939) #16
  %941 = trunc i32 %940 to i8
  %942 = and i8 %941, 1
  %943 = xor i8 %942, 1
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %943, i8* %944, align 1, !tbaa !2446
  %945 = xor i64 %931, %925
  %946 = xor i64 %945, %932
  %947 = lshr i64 %946, 4
  %948 = trunc i64 %947 to i8
  %949 = and i8 %948, 1
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %949, i8* %950, align 1, !tbaa !2447
  %951 = icmp eq i64 %932, 0
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %952, i8* %953, align 1, !tbaa !2448
  %954 = lshr i64 %932, 63
  %955 = trunc i64 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %955, i8* %956, align 1, !tbaa !2449
  %957 = lshr i64 %925, 63
  %958 = lshr i64 %931, 63
  %959 = xor i64 %954, %957
  %960 = xor i64 %954, %958
  %961 = add nuw nsw i64 %959, %960
  %962 = icmp eq i64 %961, 2
  %963 = zext i1 %962 to i8
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %963, i8* %964, align 1, !tbaa !2450
  %965 = load i64, i64* %RCX
  %966 = add i64 %965, 424
  %967 = load i64, i64* %RAX
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 7
  store i64 %969, i64* %PC
  %970 = inttoptr i64 %966 to i64*
  store i64 %967, i64* %970
  %971 = load i64, i64* %RBP
  %972 = sub i64 %971, 40
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 4
  store i64 %974, i64* %PC
  %975 = inttoptr i64 %972 to i64*
  %976 = load i64, i64* %975
  store i64 %976, i64* %RAX, align 8, !tbaa !2428
  %977 = load i64, i64* %RBP
  %978 = sub i64 %977, 16
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 4
  store i64 %980, i64* %PC
  %981 = inttoptr i64 %978 to i64*
  %982 = load i64, i64* %981
  store i64 %982, i64* %RCX, align 8, !tbaa !2428
  %983 = load i64, i64* %RAX
  %984 = load i64, i64* %RCX
  %985 = add i64 %984, 440
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 7
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i64*
  %989 = load i64, i64* %988
  %990 = add i64 %989, %983
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = icmp ult i64 %990, %983
  %992 = icmp ult i64 %990, %989
  %993 = or i1 %991, %992
  %994 = zext i1 %993 to i8
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %994, i8* %995, align 1, !tbaa !2432
  %996 = trunc i64 %990 to i32
  %997 = and i32 %996, 255
  %998 = call i32 @llvm.ctpop.i32(i32 %997) #16
  %999 = trunc i32 %998 to i8
  %1000 = and i8 %999, 1
  %1001 = xor i8 %1000, 1
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1001, i8* %1002, align 1, !tbaa !2446
  %1003 = xor i64 %989, %983
  %1004 = xor i64 %1003, %990
  %1005 = lshr i64 %1004, 4
  %1006 = trunc i64 %1005 to i8
  %1007 = and i8 %1006, 1
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1007, i8* %1008, align 1, !tbaa !2447
  %1009 = icmp eq i64 %990, 0
  %1010 = zext i1 %1009 to i8
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1010, i8* %1011, align 1, !tbaa !2448
  %1012 = lshr i64 %990, 63
  %1013 = trunc i64 %1012 to i8
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1013, i8* %1014, align 1, !tbaa !2449
  %1015 = lshr i64 %983, 63
  %1016 = lshr i64 %989, 63
  %1017 = xor i64 %1012, %1015
  %1018 = xor i64 %1012, %1016
  %1019 = add nuw nsw i64 %1017, %1018
  %1020 = icmp eq i64 %1019, 2
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1021, i8* %1022, align 1, !tbaa !2450
  %1023 = load i64, i64* %RCX
  %1024 = add i64 %1023, 440
  %1025 = load i64, i64* %RAX
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 7
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1024 to i64*
  store i64 %1025, i64* %1028
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 40
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 4
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1030 to i64*
  %1034 = load i64, i64* %1033
  store i64 %1034, i64* %RAX, align 8, !tbaa !2428
  %1035 = load i64, i64* %RBP
  %1036 = sub i64 %1035, 16
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 4
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i64*
  %1040 = load i64, i64* %1039
  store i64 %1040, i64* %RCX, align 8, !tbaa !2428
  %1041 = load i64, i64* %RCX
  %1042 = add i64 %1041, 448
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 7
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* %RDX, align 8, !tbaa !2428
  %1047 = load i64, i64* %RDX
  %1048 = load i64, i64* %RAX
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 3
  store i64 %1050, i64* %PC
  %1051 = sub i64 %1047, %1048
  store i64 %1051, i64* %RDX, align 8, !tbaa !2428
  %1052 = icmp ult i64 %1047, %1048
  %1053 = zext i1 %1052 to i8
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1053, i8* %1054, align 1, !tbaa !2432
  %1055 = trunc i64 %1051 to i32
  %1056 = and i32 %1055, 255
  %1057 = call i32 @llvm.ctpop.i32(i32 %1056) #16
  %1058 = trunc i32 %1057 to i8
  %1059 = and i8 %1058, 1
  %1060 = xor i8 %1059, 1
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1060, i8* %1061, align 1, !tbaa !2446
  %1062 = xor i64 %1048, %1047
  %1063 = xor i64 %1062, %1051
  %1064 = lshr i64 %1063, 4
  %1065 = trunc i64 %1064 to i8
  %1066 = and i8 %1065, 1
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1066, i8* %1067, align 1, !tbaa !2447
  %1068 = icmp eq i64 %1051, 0
  %1069 = zext i1 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1069, i8* %1070, align 1, !tbaa !2448
  %1071 = lshr i64 %1051, 63
  %1072 = trunc i64 %1071 to i8
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1072, i8* %1073, align 1, !tbaa !2449
  %1074 = lshr i64 %1047, 63
  %1075 = lshr i64 %1048, 63
  %1076 = xor i64 %1075, %1074
  %1077 = xor i64 %1071, %1074
  %1078 = add nuw nsw i64 %1077, %1076
  %1079 = icmp eq i64 %1078, 2
  %1080 = zext i1 %1079 to i8
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1080, i8* %1081, align 1, !tbaa !2450
  %1082 = load i64, i64* %RCX
  %1083 = add i64 %1082, 448
  %1084 = load i64, i64* %RDX
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 7
  store i64 %1086, i64* %PC
  %1087 = inttoptr i64 %1083 to i64*
  store i64 %1084, i64* %1087
  br label %block_4015e8

block_401352:                                     ; preds = %block_401307, %block_401389, %block_40144c
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.0, %block_401307 ], [ %MEMORY.6, %block_40144c ], [ %MEMORY.5, %block_401389 ]
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 120
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 5
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  %1094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1094, align 1, !tbaa !2432
  %1095 = trunc i64 %1093 to i32
  %1096 = and i32 %1095, 255
  %1097 = call i32 @llvm.ctpop.i32(i32 %1096) #16
  %1098 = trunc i32 %1097 to i8
  %1099 = and i8 %1098, 1
  %1100 = xor i8 %1099, 1
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1100, i8* %1101, align 1, !tbaa !2446
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1102, align 1, !tbaa !2447
  %1103 = icmp eq i64 %1093, 0
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1104, i8* %1105, align 1, !tbaa !2448
  %1106 = lshr i64 %1093, 63
  %1107 = trunc i64 %1106 to i8
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1107, i8* %1108, align 1, !tbaa !2449
  %1109 = lshr i64 %1093, 63
  %1110 = xor i64 %1106, %1109
  %1111 = add nuw nsw i64 %1110, %1109
  %1112 = icmp eq i64 %1111, 2
  %1113 = zext i1 %1112 to i8
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1113, i8* %1114, align 1, !tbaa !2450
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 265
  %1117 = load i64, i64* %PC
  %1118 = add i64 %1117, 6
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 6
  store i64 %1120, i64* %PC
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1122 = load i8, i8* %1121, align 1, !tbaa !2448
  store i8 %1122, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1124 = icmp ne i8 %1122, 0
  %1125 = select i1 %1124, i64 %1116, i64 %1118
  store i64 %1125, i64* %1123, align 8, !tbaa !2428
  %1126 = load i8, i8* %BRANCH_TAKEN
  %1127 = icmp eq i8 %1126, 1
  br i1 %1127, label %block_401460, label %block_40135d

block_4014eb:                                     ; preds = %block_4014da
  %1128 = load i64, i64* %RBP
  %1129 = sub i64 %1128, 128
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 4
  store i64 %1131, i64* %PC
  %1132 = inttoptr i64 %1129 to i64*
  %1133 = load i64, i64* %1132
  store i64 %1133, i64* %RAX, align 8, !tbaa !2428
  %1134 = load i64, i64* %RAX
  %1135 = add i64 %1134, 48
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 8
  store i64 %1137, i64* %PC
  %1138 = inttoptr i64 %1135 to i64*
  store i64 0, i64* %1138
  %1139 = load i64, i64* %RBP
  %1140 = sub i64 %1139, 128
  %1141 = load i64, i64* %PC
  %1142 = add i64 %1141, 4
  store i64 %1142, i64* %PC
  %1143 = inttoptr i64 %1140 to i64*
  %1144 = load i64, i64* %1143
  store i64 %1144, i64* %RAX, align 8, !tbaa !2428
  %1145 = load i64, i64* %RAX
  %1146 = add i64 %1145, 24
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 7
  store i64 %1148, i64* %PC
  %1149 = inttoptr i64 %1146 to i32*
  store i32 1, i32* %1149
  %1150 = load i64, i64* %RBP
  %1151 = sub i64 %1150, 128
  %1152 = load i64, i64* %PC
  %1153 = add i64 %1152, 4
  store i64 %1153, i64* %PC
  %1154 = inttoptr i64 %1151 to i64*
  %1155 = load i64, i64* %1154
  store i64 %1155, i64* %RAX, align 8, !tbaa !2428
  %1156 = load i64, i64* %RAX
  %1157 = load i64, i64* %PC
  %1158 = add i64 %1157, 4
  store i64 %1158, i64* %PC
  %1159 = add i64 64, %1156
  store i64 %1159, i64* %RAX, align 8, !tbaa !2428
  %1160 = icmp ult i64 %1159, %1156
  %1161 = icmp ult i64 %1159, 64
  %1162 = or i1 %1160, %1161
  %1163 = zext i1 %1162 to i8
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1163, i8* %1164, align 1, !tbaa !2432
  %1165 = trunc i64 %1159 to i32
  %1166 = and i32 %1165, 255
  %1167 = call i32 @llvm.ctpop.i32(i32 %1166) #16
  %1168 = trunc i32 %1167 to i8
  %1169 = and i8 %1168, 1
  %1170 = xor i8 %1169, 1
  %1171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1170, i8* %1171, align 1, !tbaa !2446
  %1172 = xor i64 64, %1156
  %1173 = xor i64 %1172, %1159
  %1174 = lshr i64 %1173, 4
  %1175 = trunc i64 %1174 to i8
  %1176 = and i8 %1175, 1
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1176, i8* %1177, align 1, !tbaa !2447
  %1178 = icmp eq i64 %1159, 0
  %1179 = zext i1 %1178 to i8
  %1180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1179, i8* %1180, align 1, !tbaa !2448
  %1181 = lshr i64 %1159, 63
  %1182 = trunc i64 %1181 to i8
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1182, i8* %1183, align 1, !tbaa !2449
  %1184 = lshr i64 %1156, 63
  %1185 = xor i64 %1181, %1184
  %1186 = add nuw nsw i64 %1185, %1181
  %1187 = icmp eq i64 %1186, 2
  %1188 = zext i1 %1187 to i8
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1188, i8* %1189, align 1, !tbaa !2450
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 128
  %1192 = load i64, i64* %RAX
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 4
  store i64 %1194, i64* %PC
  %1195 = inttoptr i64 %1191 to i64*
  store i64 %1192, i64* %1195
  %1196 = load i64, i64* %PC
  %1197 = sub i64 %1196, 52
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 5
  store i64 %1199, i64* %PC
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1197, i64* %1200, align 8, !tbaa !2428
  br label %block_4014da

block_40144c:                                     ; preds = %block_401447, %block_40139d
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.5, %block_40139d ], [ %MEMORY.15, %block_401447 ]
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 152
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 7
  store i64 %1204, i64* %PC
  %1205 = inttoptr i64 %1202 to i64*
  %1206 = load i64, i64* %1205
  store i64 %1206, i64* %RAX, align 8, !tbaa !2428
  %1207 = load i64, i64* %RAX
  %1208 = add i64 %1207, 72
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 4
  store i64 %1210, i64* %PC
  %1211 = inttoptr i64 %1208 to i64*
  %1212 = load i64, i64* %1211
  store i64 %1212, i64* %RAX, align 8, !tbaa !2428
  %1213 = load i64, i64* %RBP
  %1214 = sub i64 %1213, 120
  %1215 = load i64, i64* %RAX
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 4
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1214 to i64*
  store i64 %1215, i64* %1218
  %1219 = load i64, i64* %PC
  %1220 = sub i64 %1219, 265
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 5
  store i64 %1222, i64* %PC
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1220, i64* %1223, align 8, !tbaa !2428
  br label %block_401352

block_4012ca:                                     ; preds = %block_4012bc
  %1224 = load i64, i64* %RBP
  %1225 = sub i64 %1224, 144
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 7
  store i64 %1227, i64* %PC
  %1228 = inttoptr i64 %1225 to i64*
  %1229 = load i64, i64* %1228
  store i64 %1229, i64* %RAX, align 8, !tbaa !2428
  %1230 = load i64, i64* %RBP
  %1231 = sub i64 %1230, 112
  %1232 = load i64, i64* %PC
  %1233 = add i64 %1232, 4
  store i64 %1233, i64* %PC
  %1234 = inttoptr i64 %1231 to i64*
  %1235 = load i64, i64* %1234
  store i64 %1235, i64* %RCX, align 8, !tbaa !2428
  %1236 = load i64, i64* %RCX
  %1237 = add i64 %1236, 16
  %1238 = load i64, i64* %PC
  %1239 = add i64 %1238, 4
  store i64 %1239, i64* %PC
  %1240 = inttoptr i64 %1237 to i64*
  %1241 = load i64, i64* %1240
  store i64 %1241, i64* %RCX, align 8, !tbaa !2428
  %1242 = load i64, i64* %RCX
  %1243 = add i64 %1242, 56
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 4
  store i64 %1245, i64* %PC
  %1246 = inttoptr i64 %1243 to i64*
  %1247 = load i64, i64* %1246
  store i64 %1247, i64* %RCX, align 8, !tbaa !2428
  %1248 = load i64, i64* %RCX
  %1249 = add i64 %1248, 16
  %1250 = load i64, i64* %PC
  %1251 = add i64 %1250, 4
  store i64 %1251, i64* %PC
  %1252 = inttoptr i64 %1249 to i64*
  %1253 = load i64, i64* %1252
  store i64 %1253, i64* %RCX, align 8, !tbaa !2428
  %1254 = load i64, i64* %RCX
  %1255 = add i64 %1254, 72
  %1256 = load i64, i64* %RAX
  %1257 = load i64, i64* %PC
  %1258 = add i64 %1257, 4
  store i64 %1258, i64* %PC
  %1259 = inttoptr i64 %1255 to i64*
  store i64 %1256, i64* %1259
  %1260 = load i64, i64* %RBP
  %1261 = sub i64 %1260, 112
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 4
  store i64 %1263, i64* %PC
  %1264 = inttoptr i64 %1261 to i64*
  %1265 = load i64, i64* %1264
  store i64 %1265, i64* %RAX, align 8, !tbaa !2428
  %1266 = load i64, i64* %RAX
  %1267 = load i64, i64* %PC
  %1268 = add i64 %1267, 4
  store i64 %1268, i64* %PC
  %1269 = add i64 64, %1266
  store i64 %1269, i64* %RAX, align 8, !tbaa !2428
  %1270 = icmp ult i64 %1269, %1266
  %1271 = icmp ult i64 %1269, 64
  %1272 = or i1 %1270, %1271
  %1273 = zext i1 %1272 to i8
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1273, i8* %1274, align 1, !tbaa !2432
  %1275 = trunc i64 %1269 to i32
  %1276 = and i32 %1275, 255
  %1277 = call i32 @llvm.ctpop.i32(i32 %1276) #16
  %1278 = trunc i32 %1277 to i8
  %1279 = and i8 %1278, 1
  %1280 = xor i8 %1279, 1
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1280, i8* %1281, align 1, !tbaa !2446
  %1282 = xor i64 64, %1266
  %1283 = xor i64 %1282, %1269
  %1284 = lshr i64 %1283, 4
  %1285 = trunc i64 %1284 to i8
  %1286 = and i8 %1285, 1
  %1287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1286, i8* %1287, align 1, !tbaa !2447
  %1288 = icmp eq i64 %1269, 0
  %1289 = zext i1 %1288 to i8
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1289, i8* %1290, align 1, !tbaa !2448
  %1291 = lshr i64 %1269, 63
  %1292 = trunc i64 %1291 to i8
  %1293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1292, i8* %1293, align 1, !tbaa !2449
  %1294 = lshr i64 %1266, 63
  %1295 = xor i64 %1291, %1294
  %1296 = add nuw nsw i64 %1295, %1291
  %1297 = icmp eq i64 %1296, 2
  %1298 = zext i1 %1297 to i8
  %1299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1298, i8* %1299, align 1, !tbaa !2450
  %1300 = load i64, i64* %RBP
  %1301 = sub i64 %1300, 144
  %1302 = load i64, i64* %RAX
  %1303 = load i64, i64* %PC
  %1304 = add i64 %1303, 7
  store i64 %1304, i64* %PC
  %1305 = inttoptr i64 %1301 to i64*
  store i64 %1302, i64* %1305
  br label %block_4012f4

block_4013c4:                                     ; preds = %block_40139d
  %1306 = load i64, i64* %RBP
  %1307 = sub i64 %1306, 40
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 4
  store i64 %1309, i64* %PC
  %1310 = inttoptr i64 %1307 to i64*
  %1311 = load i64, i64* %1310
  store i64 %1311, i64* %RAX, align 8, !tbaa !2428
  %1312 = load i64, i64* %RBP
  %1313 = sub i64 %1312, 16
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 4
  store i64 %1315, i64* %PC
  %1316 = inttoptr i64 %1313 to i64*
  %1317 = load i64, i64* %1316
  store i64 %1317, i64* %RCX, align 8, !tbaa !2428
  %1318 = load i64, i64* %RAX
  %1319 = load i64, i64* %RCX
  %1320 = add i64 %1319, 448
  %1321 = load i64, i64* %PC
  %1322 = add i64 %1321, 7
  store i64 %1322, i64* %PC
  %1323 = inttoptr i64 %1320 to i64*
  %1324 = load i64, i64* %1323
  %1325 = sub i64 %1318, %1324
  %1326 = icmp ugt i64 %1324, %1318
  %1327 = zext i1 %1326 to i8
  %1328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1327, i8* %1328, align 1, !tbaa !2432
  %1329 = trunc i64 %1325 to i32
  %1330 = and i32 %1329, 255
  %1331 = call i32 @llvm.ctpop.i32(i32 %1330) #16
  %1332 = trunc i32 %1331 to i8
  %1333 = and i8 %1332, 1
  %1334 = xor i8 %1333, 1
  %1335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1334, i8* %1335, align 1, !tbaa !2446
  %1336 = xor i64 %1324, %1318
  %1337 = xor i64 %1336, %1325
  %1338 = lshr i64 %1337, 4
  %1339 = trunc i64 %1338 to i8
  %1340 = and i8 %1339, 1
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1340, i8* %1341, align 1, !tbaa !2447
  %1342 = icmp eq i64 %1325, 0
  %1343 = zext i1 %1342 to i8
  %1344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1343, i8* %1344, align 1, !tbaa !2448
  %1345 = lshr i64 %1325, 63
  %1346 = trunc i64 %1345 to i8
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1346, i8* %1347, align 1, !tbaa !2449
  %1348 = lshr i64 %1318, 63
  %1349 = lshr i64 %1324, 63
  %1350 = xor i64 %1349, %1348
  %1351 = xor i64 %1345, %1348
  %1352 = add nuw nsw i64 %1351, %1350
  %1353 = icmp eq i64 %1352, 2
  %1354 = zext i1 %1353 to i8
  %1355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1354, i8* %1355, align 1, !tbaa !2450
  %1356 = load i64, i64* %PC
  %1357 = add i64 %1356, 58
  %1358 = load i64, i64* %PC
  %1359 = add i64 %1358, 6
  %1360 = load i64, i64* %PC
  %1361 = add i64 %1360, 6
  store i64 %1361, i64* %PC
  %1362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1363 = load i8, i8* %1362, align 1, !tbaa !2449
  %1364 = icmp ne i8 %1363, 0
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1366 = load i8, i8* %1365, align 1, !tbaa !2450
  %1367 = icmp ne i8 %1366, 0
  %1368 = xor i1 %1364, %1367
  %1369 = xor i1 %1368, true
  %1370 = zext i1 %1369 to i8
  store i8 %1370, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1372 = select i1 %1368, i64 %1359, i64 %1357
  store i64 %1372, i64* %1371, align 8, !tbaa !2428
  %1373 = load i8, i8* %BRANCH_TAKEN
  %1374 = icmp eq i8 %1373, 1
  %1375 = load i64, i64* %RBP
  %1376 = sub i64 %1375, 128
  %1377 = load i64, i64* %PC
  %1378 = add i64 %1377, 4
  store i64 %1378, i64* %PC
  br i1 %1374, label %block_40140d, label %block_4013d9

block_4012bc:                                     ; preds = %block_4012ae
  %1379 = sub i64 %1662, 112
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 4
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to i64*
  %1383 = load i64, i64* %1382
  store i64 %1383, i64* %RAX, align 8, !tbaa !2428
  %1384 = load i64, i64* %RAX
  %1385 = add i64 %1384, 88
  %1386 = load i64, i64* %PC
  %1387 = add i64 %1386, 4
  store i64 %1387, i64* %PC
  %1388 = inttoptr i64 %1385 to i32*
  %1389 = load i32, i32* %1388
  %1390 = sub i32 %1389, -1
  %1391 = icmp ult i32 %1389, -1
  %1392 = zext i1 %1391 to i8
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1392, i8* %1393, align 1, !tbaa !2432
  %1394 = and i32 %1390, 255
  %1395 = call i32 @llvm.ctpop.i32(i32 %1394) #16
  %1396 = trunc i32 %1395 to i8
  %1397 = and i8 %1396, 1
  %1398 = xor i8 %1397, 1
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1398, i8* %1399, align 1, !tbaa !2446
  %1400 = xor i32 %1389, -1
  %1401 = xor i32 %1400, %1390
  %1402 = lshr i32 %1401, 4
  %1403 = trunc i32 %1402 to i8
  %1404 = and i8 %1403, 1
  %1405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1404, i8* %1405, align 1, !tbaa !2447
  %1406 = icmp eq i32 %1390, 0
  %1407 = zext i1 %1406 to i8
  %1408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1407, i8* %1408, align 1, !tbaa !2448
  %1409 = lshr i32 %1390, 31
  %1410 = trunc i32 %1409 to i8
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1410, i8* %1411, align 1, !tbaa !2449
  %1412 = lshr i32 %1389, 31
  %1413 = xor i32 %1412, 1
  %1414 = xor i32 %1409, %1412
  %1415 = add nuw nsw i32 %1414, %1413
  %1416 = icmp eq i32 %1415, 2
  %1417 = zext i1 %1416 to i8
  %1418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1417, i8* %1418, align 1, !tbaa !2450
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 48
  %1421 = load i64, i64* %PC
  %1422 = add i64 %1421, 6
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 6
  store i64 %1424, i64* %PC
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1426 = load i8, i8* %1425, align 1, !tbaa !2448
  store i8 %1426, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1428 = icmp ne i8 %1426, 0
  %1429 = select i1 %1428, i64 %1420, i64 %1422
  store i64 %1429, i64* %1427, align 8, !tbaa !2428
  %1430 = load i8, i8* %BRANCH_TAKEN
  %1431 = icmp eq i8 %1430, 1
  br i1 %1431, label %block_4012f4, label %block_4012ca

block_401389:                                     ; preds = %block_40135d
  %1432 = sub i64 %610, 152
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 7
  store i64 %1434, i64* %PC
  %1435 = inttoptr i64 %1432 to i64*
  %1436 = load i64, i64* %1435
  store i64 %1436, i64* %RAX, align 8, !tbaa !2428
  %1437 = load i64, i64* %RAX
  %1438 = add i64 %1437, 72
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 4
  store i64 %1440, i64* %PC
  %1441 = inttoptr i64 %1438 to i64*
  %1442 = load i64, i64* %1441
  store i64 %1442, i64* %RAX, align 8, !tbaa !2428
  %1443 = load i64, i64* %RBP
  %1444 = sub i64 %1443, 120
  %1445 = load i64, i64* %RAX
  %1446 = load i64, i64* %PC
  %1447 = add i64 %1446, 4
  store i64 %1447, i64* %PC
  %1448 = inttoptr i64 %1444 to i64*
  store i64 %1445, i64* %1448
  %1449 = load i64, i64* %PC
  %1450 = sub i64 %1449, 70
  %1451 = load i64, i64* %PC
  %1452 = add i64 %1451, 5
  store i64 %1452, i64* %PC
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1450, i64* %1453, align 8, !tbaa !2428
  br label %block_401352

block_40139d:                                     ; preds = %block_40135d
  %1454 = sub i64 %610, 88
  %1455 = load i64, i64* %PC
  %1456 = add i64 %1455, 4
  store i64 %1456, i64* %PC
  %1457 = inttoptr i64 %1454 to i64*
  %1458 = load i64, i64* %1457
  store i64 %1458, i64* %RAX, align 8, !tbaa !2428
  %1459 = load i64, i64* %RBP
  %1460 = sub i64 %1459, 152
  %1461 = load i64, i64* %PC
  %1462 = add i64 %1461, 7
  store i64 %1462, i64* %PC
  %1463 = inttoptr i64 %1460 to i64*
  %1464 = load i64, i64* %1463
  store i64 %1464, i64* %RCX, align 8, !tbaa !2428
  %1465 = load i64, i64* %RAX
  %1466 = load i64, i64* %RCX
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 3
  store i64 %1468, i64* %PC
  %1469 = inttoptr i64 %1466 to i64*
  %1470 = load i64, i64* %1469
  %1471 = sub i64 %1465, %1470
  store i64 %1471, i64* %RAX, align 8, !tbaa !2428
  %1472 = icmp ugt i64 %1470, %1465
  %1473 = zext i1 %1472 to i8
  %1474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1473, i8* %1474, align 1, !tbaa !2432
  %1475 = trunc i64 %1471 to i32
  %1476 = and i32 %1475, 255
  %1477 = call i32 @llvm.ctpop.i32(i32 %1476) #16
  %1478 = trunc i32 %1477 to i8
  %1479 = and i8 %1478, 1
  %1480 = xor i8 %1479, 1
  %1481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1480, i8* %1481, align 1, !tbaa !2446
  %1482 = xor i64 %1470, %1465
  %1483 = xor i64 %1482, %1471
  %1484 = lshr i64 %1483, 4
  %1485 = trunc i64 %1484 to i8
  %1486 = and i8 %1485, 1
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1486, i8* %1487, align 1, !tbaa !2447
  %1488 = icmp eq i64 %1471, 0
  %1489 = zext i1 %1488 to i8
  %1490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1489, i8* %1490, align 1, !tbaa !2448
  %1491 = lshr i64 %1471, 63
  %1492 = trunc i64 %1491 to i8
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1492, i8* %1493, align 1, !tbaa !2449
  %1494 = lshr i64 %1465, 63
  %1495 = lshr i64 %1470, 63
  %1496 = xor i64 %1495, %1494
  %1497 = xor i64 %1491, %1494
  %1498 = add nuw nsw i64 %1497, %1496
  %1499 = icmp eq i64 %1498, 2
  %1500 = zext i1 %1499 to i8
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1500, i8* %1501, align 1, !tbaa !2450
  %1502 = load i64, i64* %RBP
  %1503 = sub i64 %1502, 160
  %1504 = load i64, i64* %PC
  %1505 = add i64 %1504, 7
  store i64 %1505, i64* %PC
  %1506 = inttoptr i64 %1503 to i64*
  %1507 = load i64, i64* %1506
  store i64 %1507, i64* %RCX, align 8, !tbaa !2428
  %1508 = load i64, i64* %RAX
  %1509 = load i64, i64* %RCX
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 3
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i64*
  %1513 = load i64, i64* %1512
  %1514 = add i64 %1513, %1508
  store i64 %1514, i64* %RAX, align 8, !tbaa !2428
  %1515 = icmp ult i64 %1514, %1508
  %1516 = icmp ult i64 %1514, %1513
  %1517 = or i1 %1515, %1516
  %1518 = zext i1 %1517 to i8
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1518, i8* %1519, align 1, !tbaa !2432
  %1520 = trunc i64 %1514 to i32
  %1521 = and i32 %1520, 255
  %1522 = call i32 @llvm.ctpop.i32(i32 %1521) #16
  %1523 = trunc i32 %1522 to i8
  %1524 = and i8 %1523, 1
  %1525 = xor i8 %1524, 1
  %1526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1525, i8* %1526, align 1, !tbaa !2446
  %1527 = xor i64 %1513, %1508
  %1528 = xor i64 %1527, %1514
  %1529 = lshr i64 %1528, 4
  %1530 = trunc i64 %1529 to i8
  %1531 = and i8 %1530, 1
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1531, i8* %1532, align 1, !tbaa !2447
  %1533 = icmp eq i64 %1514, 0
  %1534 = zext i1 %1533 to i8
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1534, i8* %1535, align 1, !tbaa !2448
  %1536 = lshr i64 %1514, 63
  %1537 = trunc i64 %1536 to i8
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1537, i8* %1538, align 1, !tbaa !2449
  %1539 = lshr i64 %1508, 63
  %1540 = lshr i64 %1513, 63
  %1541 = xor i64 %1536, %1539
  %1542 = xor i64 %1536, %1540
  %1543 = add nuw nsw i64 %1541, %1542
  %1544 = icmp eq i64 %1543, 2
  %1545 = zext i1 %1544 to i8
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1545, i8* %1546, align 1, !tbaa !2450
  %1547 = load i64, i64* %RBP
  %1548 = sub i64 %1547, 96
  %1549 = load i64, i64* %RAX
  %1550 = load i64, i64* %PC
  %1551 = add i64 %1550, 4
  store i64 %1551, i64* %PC
  %1552 = inttoptr i64 %1548 to i64*
  store i64 %1549, i64* %1552
  %1553 = load i64, i64* %RBP
  %1554 = sub i64 %1553, 96
  %1555 = load i64, i64* %PC
  %1556 = add i64 %1555, 5
  store i64 %1556, i64* %PC
  %1557 = inttoptr i64 %1554 to i64*
  %1558 = load i64, i64* %1557
  %1559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1559, align 1, !tbaa !2432
  %1560 = trunc i64 %1558 to i32
  %1561 = and i32 %1560, 255
  %1562 = call i32 @llvm.ctpop.i32(i32 %1561) #16
  %1563 = trunc i32 %1562 to i8
  %1564 = and i8 %1563, 1
  %1565 = xor i8 %1564, 1
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1565, i8* %1566, align 1, !tbaa !2446
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1567, align 1, !tbaa !2447
  %1568 = icmp eq i64 %1558, 0
  %1569 = zext i1 %1568 to i8
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1569, i8* %1570, align 1, !tbaa !2448
  %1571 = lshr i64 %1558, 63
  %1572 = trunc i64 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1572, i8* %1573, align 1, !tbaa !2449
  %1574 = lshr i64 %1558, 63
  %1575 = xor i64 %1571, %1574
  %1576 = add nuw nsw i64 %1575, %1574
  %1577 = icmp eq i64 %1576, 2
  %1578 = zext i1 %1577 to i8
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1578, i8* %1579, align 1, !tbaa !2450
  %1580 = load i64, i64* %PC
  %1581 = add i64 %1580, 142
  %1582 = load i64, i64* %PC
  %1583 = add i64 %1582, 6
  %1584 = load i64, i64* %PC
  %1585 = add i64 %1584, 6
  store i64 %1585, i64* %PC
  %1586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1587 = load i8, i8* %1586, align 1, !tbaa !2449
  %1588 = icmp ne i8 %1587, 0
  %1589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1590 = load i8, i8* %1589, align 1, !tbaa !2450
  %1591 = icmp ne i8 %1590, 0
  %1592 = xor i1 %1588, %1591
  %1593 = xor i1 %1592, true
  %1594 = zext i1 %1593 to i8
  store i8 %1594, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1596 = select i1 %1592, i64 %1583, i64 %1581
  store i64 %1596, i64* %1595, align 8, !tbaa !2428
  %1597 = load i8, i8* %BRANCH_TAKEN
  %1598 = icmp eq i8 %1597, 1
  br i1 %1598, label %block_40144c, label %block_4013c4

block_4012ae:                                     ; preds = %block_401465, %block_40127a
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.8, %block_40127a ], [ %MEMORY.3, %block_401465 ]
  %1599 = load i64, i64* %RBP
  %1600 = sub i64 %1599, 24
  %1601 = load i64, i64* %PC
  %1602 = add i64 %1601, 4
  store i64 %1602, i64* %PC
  %1603 = inttoptr i64 %1600 to i64*
  %1604 = load i64, i64* %1603
  store i64 %1604, i64* %RAX, align 8, !tbaa !2428
  %1605 = load i64, i64* %RAX
  %1606 = load i64, i64* %RBP
  %1607 = sub i64 %1606, 32
  %1608 = load i64, i64* %PC
  %1609 = add i64 %1608, 4
  store i64 %1609, i64* %PC
  %1610 = inttoptr i64 %1607 to i64*
  %1611 = load i64, i64* %1610
  %1612 = sub i64 %1605, %1611
  %1613 = icmp ugt i64 %1611, %1605
  %1614 = zext i1 %1613 to i8
  %1615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1614, i8* %1615, align 1, !tbaa !2432
  %1616 = trunc i64 %1612 to i32
  %1617 = and i32 %1616, 255
  %1618 = call i32 @llvm.ctpop.i32(i32 %1617) #16
  %1619 = trunc i32 %1618 to i8
  %1620 = and i8 %1619, 1
  %1621 = xor i8 %1620, 1
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1621, i8* %1622, align 1, !tbaa !2446
  %1623 = xor i64 %1611, %1605
  %1624 = xor i64 %1623, %1612
  %1625 = lshr i64 %1624, 4
  %1626 = trunc i64 %1625 to i8
  %1627 = and i8 %1626, 1
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1627, i8* %1628, align 1, !tbaa !2447
  %1629 = icmp eq i64 %1612, 0
  %1630 = zext i1 %1629 to i8
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1630, i8* %1631, align 1, !tbaa !2448
  %1632 = lshr i64 %1612, 63
  %1633 = trunc i64 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1633, i8* %1634, align 1, !tbaa !2449
  %1635 = lshr i64 %1605, 63
  %1636 = lshr i64 %1611, 63
  %1637 = xor i64 %1636, %1635
  %1638 = xor i64 %1632, %1635
  %1639 = add nuw nsw i64 %1638, %1637
  %1640 = icmp eq i64 %1639, 2
  %1641 = zext i1 %1640 to i8
  %1642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1641, i8* %1642, align 1, !tbaa !2450
  %1643 = load i64, i64* %PC
  %1644 = add i64 %1643, 462
  %1645 = load i64, i64* %PC
  %1646 = add i64 %1645, 6
  %1647 = load i64, i64* %PC
  %1648 = add i64 %1647, 6
  store i64 %1648, i64* %PC
  %1649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1650 = load i8, i8* %1649, align 1, !tbaa !2449
  %1651 = icmp ne i8 %1650, 0
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1653 = load i8, i8* %1652, align 1, !tbaa !2450
  %1654 = icmp ne i8 %1653, 0
  %1655 = xor i1 %1651, %1654
  %1656 = xor i1 %1655, true
  %1657 = zext i1 %1656 to i8
  store i8 %1657, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1659 = select i1 %1655, i64 %1646, i64 %1644
  store i64 %1659, i64* %1658, align 8, !tbaa !2428
  %1660 = load i8, i8* %BRANCH_TAKEN
  %1661 = icmp eq i8 %1660, 1
  %1662 = load i64, i64* %RBP
  br i1 %1661, label %block_401484, label %block_4012bc

block_4011d8:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %1663 = load i64, i64* %RBP
  %1664 = sub i64 %1663, 48
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 8
  store i64 %1666, i64* %PC
  %1667 = inttoptr i64 %1664 to i64*
  store i64 1, i64* %1667
  %1668 = load i64, i64* %RBP
  %1669 = sub i64 %1668, 16
  %1670 = load i64, i64* %PC
  %1671 = add i64 %1670, 4
  store i64 %1671, i64* %PC
  %1672 = inttoptr i64 %1669 to i64*
  %1673 = load i64, i64* %1672
  store i64 %1673, i64* %RDI, align 8, !tbaa !2428
  %1674 = load i64, i64* %PC
  %1675 = sub i64 %1674, 2036
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 5
  %1678 = load i64, i64* %PC
  %1679 = add i64 %1678, 5
  store i64 %1679, i64* %PC
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1681 = load i64, i64* %1680, align 8, !tbaa !2428
  %1682 = add i64 %1681, -8
  %1683 = inttoptr i64 %1682 to i64*
  store i64 %1677, i64* %1683
  store i64 %1682, i64* %1680, align 8, !tbaa !2428
  %1684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1675, i64* %1684, align 8, !tbaa !2428
  %1685 = load i64, i64* %PC
  %1686 = call %struct.Memory* @sub_4009f0_resize_prob_renamed_(%struct.State* %0, i64 %1685, %struct.Memory* %2914)
  %1687 = load i64, i64* %RAX
  %1688 = load i64, i64* %PC
  %1689 = add i64 %1688, 4
  store i64 %1689, i64* %PC
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1690, align 1, !tbaa !2432
  %1691 = trunc i64 %1687 to i32
  %1692 = and i32 %1691, 255
  %1693 = call i32 @llvm.ctpop.i32(i32 %1692) #16
  %1694 = trunc i32 %1693 to i8
  %1695 = and i8 %1694, 1
  %1696 = xor i8 %1695, 1
  %1697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1696, i8* %1697, align 1, !tbaa !2446
  %1698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1698, align 1, !tbaa !2447
  %1699 = icmp eq i64 %1687, 0
  %1700 = zext i1 %1699 to i8
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1700, i8* %1701, align 1, !tbaa !2448
  %1702 = lshr i64 %1687, 63
  %1703 = trunc i64 %1702 to i8
  %1704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1703, i8* %1704, align 1, !tbaa !2449
  %1705 = lshr i64 %1687, 63
  %1706 = xor i64 %1702, %1705
  %1707 = add nuw nsw i64 %1706, %1705
  %1708 = icmp eq i64 %1707, 2
  %1709 = zext i1 %1708 to i8
  %1710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1709, i8* %1710, align 1, !tbaa !2450
  %1711 = load i64, i64* %PC
  %1712 = add i64 %1711, 19
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 6
  %1715 = load i64, i64* %PC
  %1716 = add i64 %1715, 6
  store i64 %1716, i64* %PC
  %1717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1718 = load i8, i8* %1717, align 1, !tbaa !2448
  store i8 %1718, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1720 = icmp ne i8 %1718, 0
  %1721 = select i1 %1720, i64 %1712, i64 %1714
  store i64 %1721, i64* %1719, align 8, !tbaa !2428
  %1722 = load i8, i8* %BRANCH_TAKEN
  %1723 = icmp eq i8 %1722, 1
  %1724 = load i64, i64* %RBP
  br i1 %1723, label %block_401200, label %block_4011f3

block_40141f:                                     ; preds = %block_40140d
  %1725 = load i64, i64* %RBP
  %1726 = sub i64 %1725, 16
  %1727 = load i64, i64* %PC
  %1728 = add i64 %1727, 4
  store i64 %1728, i64* %PC
  %1729 = inttoptr i64 %1726 to i64*
  %1730 = load i64, i64* %1729
  store i64 %1730, i64* %RDI, align 8, !tbaa !2428
  %1731 = load i64, i64* %RBP
  %1732 = sub i64 %1731, 128
  %1733 = load i64, i64* %PC
  %1734 = add i64 %1733, 4
  store i64 %1734, i64* %PC
  %1735 = inttoptr i64 %1732 to i64*
  %1736 = load i64, i64* %1735
  store i64 %1736, i64* %RSI, align 8, !tbaa !2428
  %1737 = load i64, i64* %RBP
  %1738 = sub i64 %1737, 152
  %1739 = load i64, i64* %PC
  %1740 = add i64 %1739, 7
  store i64 %1740, i64* %PC
  %1741 = inttoptr i64 %1738 to i64*
  %1742 = load i64, i64* %1741
  store i64 %1742, i64* %RDX, align 8, !tbaa !2428
  %1743 = load i64, i64* %RBP
  %1744 = sub i64 %1743, 160
  %1745 = load i64, i64* %PC
  %1746 = add i64 %1745, 7
  store i64 %1746, i64* %PC
  %1747 = inttoptr i64 %1744 to i64*
  %1748 = load i64, i64* %1747
  store i64 %1748, i64* %RCX, align 8, !tbaa !2428
  %1749 = load i64, i64* %RBP
  %1750 = sub i64 %1749, 88
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 4
  store i64 %1752, i64* %PC
  %1753 = inttoptr i64 %1750 to i64*
  %1754 = load i64, i64* %1753
  store i64 %1754, i64* %R8, align 8, !tbaa !2428
  %1755 = load i64, i64* %RBP
  %1756 = sub i64 %1755, 96
  %1757 = load i64, i64* %PC
  %1758 = add i64 %1757, 4
  store i64 %1758, i64* %PC
  %1759 = inttoptr i64 %1756 to i64*
  %1760 = load i64, i64* %1759
  store i64 %1760, i64* %R9, align 8, !tbaa !2428
  %1761 = load i64, i64* %PC
  %1762 = sub i64 %1761, 1517
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 5
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 5
  store i64 %1766, i64* %PC
  %1767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1768 = load i64, i64* %1767, align 8, !tbaa !2428
  %1769 = add i64 %1768, -8
  %1770 = inttoptr i64 %1769 to i64*
  store i64 %1764, i64* %1770
  store i64 %1769, i64* %1767, align 8, !tbaa !2428
  %1771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1762, i64* %1771, align 8, !tbaa !2428
  %1772 = load i64, i64* %PC
  %1773 = call %struct.Memory* @sub_400e50_replace_weaker_arc_renamed_(%struct.State* %0, i64 %1772, %struct.Memory* %MEMORY.5)
  br label %block_401442

block_40126c:                                     ; preds = %block_401243, %block_40125b
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.10, %block_401243 ], [ %MEMORY.10, %block_40125b ]
  %1774 = load i64, i64* %RBP
  %1775 = sub i64 %1774, 161
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 6
  store i64 %1777, i64* %PC
  %1778 = inttoptr i64 %1775 to i8*
  %1779 = load i8, i8* %1778
  store i8 %1779, i8* %AL, align 1, !tbaa !2451
  %1780 = load i8, i8* %AL
  %1781 = zext i8 %1780 to i64
  %1782 = load i64, i64* %PC
  %1783 = add i64 %1782, 2
  store i64 %1783, i64* %PC
  %1784 = and i64 1, %1781
  %1785 = trunc i64 %1784 to i8
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1786, align 1, !tbaa !2432
  %1787 = trunc i64 %1784 to i32
  %1788 = and i32 %1787, 255
  %1789 = call i32 @llvm.ctpop.i32(i32 %1788) #16
  %1790 = trunc i32 %1789 to i8
  %1791 = and i8 %1790, 1
  %1792 = xor i8 %1791, 1
  %1793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1792, i8* %1793, align 1, !tbaa !2446
  %1794 = icmp eq i8 %1785, 0
  %1795 = zext i1 %1794 to i8
  %1796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1795, i8* %1796, align 1, !tbaa !2448
  %1797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1797, align 1, !tbaa !2449
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1798, align 1, !tbaa !2450
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1799, align 1, !tbaa !2447
  %1800 = load i64, i64* %PC
  %1801 = add i64 %1800, 11
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 6
  %1804 = load i64, i64* %PC
  %1805 = add i64 %1804, 6
  store i64 %1805, i64* %PC
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1807 = load i8, i8* %1806, align 1, !tbaa !2448
  %1808 = icmp eq i8 %1807, 0
  %1809 = zext i1 %1808 to i8
  store i8 %1809, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1811 = select i1 %1808, i64 %1801, i64 %1803
  store i64 %1811, i64* %1810, align 8, !tbaa !2428
  %1812 = load i8, i8* %BRANCH_TAKEN
  %1813 = icmp eq i8 %1812, 1
  %1814 = load i64, i64* %PC
  br i1 %1813, label %block_40127f, label %block_40127a

block_40151d:                                     ; preds = %block_40148f, %block_40152e
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.7, %block_40148f ], [ %MEMORY.9, %block_40152e ]
  %1815 = load i64, i64* %RBP
  %1816 = sub i64 %1815, 128
  %1817 = load i64, i64* %PC
  %1818 = add i64 %1817, 4
  store i64 %1818, i64* %PC
  %1819 = inttoptr i64 %1816 to i64*
  %1820 = load i64, i64* %1819
  store i64 %1820, i64* %RAX, align 8, !tbaa !2428
  %1821 = load i64, i64* %RAX
  %1822 = load i64, i64* %RBP
  %1823 = sub i64 %1822, 136
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 7
  store i64 %1825, i64* %PC
  %1826 = inttoptr i64 %1823 to i64*
  %1827 = load i64, i64* %1826
  %1828 = sub i64 %1821, %1827
  %1829 = icmp ugt i64 %1827, %1821
  %1830 = zext i1 %1829 to i8
  %1831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1830, i8* %1831, align 1, !tbaa !2432
  %1832 = trunc i64 %1828 to i32
  %1833 = and i32 %1832, 255
  %1834 = call i32 @llvm.ctpop.i32(i32 %1833) #16
  %1835 = trunc i32 %1834 to i8
  %1836 = and i8 %1835, 1
  %1837 = xor i8 %1836, 1
  %1838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1837, i8* %1838, align 1, !tbaa !2446
  %1839 = xor i64 %1827, %1821
  %1840 = xor i64 %1839, %1828
  %1841 = lshr i64 %1840, 4
  %1842 = trunc i64 %1841 to i8
  %1843 = and i8 %1842, 1
  %1844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1843, i8* %1844, align 1, !tbaa !2447
  %1845 = icmp eq i64 %1828, 0
  %1846 = zext i1 %1845 to i8
  %1847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1846, i8* %1847, align 1, !tbaa !2448
  %1848 = lshr i64 %1828, 63
  %1849 = trunc i64 %1848 to i8
  %1850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1849, i8* %1850, align 1, !tbaa !2449
  %1851 = lshr i64 %1821, 63
  %1852 = lshr i64 %1827, 63
  %1853 = xor i64 %1852, %1851
  %1854 = xor i64 %1848, %1851
  %1855 = add nuw nsw i64 %1854, %1853
  %1856 = icmp eq i64 %1855, 2
  %1857 = zext i1 %1856 to i8
  %1858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1857, i8* %1858, align 1, !tbaa !2450
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 118
  %1861 = load i64, i64* %PC
  %1862 = add i64 %1861, 6
  %1863 = load i64, i64* %PC
  %1864 = add i64 %1863, 6
  store i64 %1864, i64* %PC
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1866 = load i8, i8* %1865, align 1, !tbaa !2448
  store i8 %1866, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1868 = icmp ne i8 %1866, 0
  %1869 = select i1 %1868, i64 %1860, i64 %1862
  store i64 %1869, i64* %1867, align 8, !tbaa !2428
  %1870 = load i8, i8* %BRANCH_TAKEN
  %1871 = icmp eq i8 %1870, 1
  br i1 %1871, label %block_40159e, label %block_40152e

block_401484:                                     ; preds = %block_4012ae
  %1872 = sub i64 %1662, 40
  %1873 = load i64, i64* %PC
  %1874 = add i64 %1873, 5
  store i64 %1874, i64* %PC
  %1875 = inttoptr i64 %1872 to i64*
  %1876 = load i64, i64* %1875
  %1877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1877, align 1, !tbaa !2432
  %1878 = trunc i64 %1876 to i32
  %1879 = and i32 %1878, 255
  %1880 = call i32 @llvm.ctpop.i32(i32 %1879) #16
  %1881 = trunc i32 %1880 to i8
  %1882 = and i8 %1881, 1
  %1883 = xor i8 %1882, 1
  %1884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1883, i8* %1884, align 1, !tbaa !2446
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1885, align 1, !tbaa !2447
  %1886 = icmp eq i64 %1876, 0
  %1887 = zext i1 %1886 to i8
  %1888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1887, i8* %1888, align 1, !tbaa !2448
  %1889 = lshr i64 %1876, 63
  %1890 = trunc i64 %1889 to i8
  %1891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1890, i8* %1891, align 1, !tbaa !2449
  %1892 = lshr i64 %1876, 63
  %1893 = xor i64 %1889, %1892
  %1894 = add nuw nsw i64 %1893, %1892
  %1895 = icmp eq i64 %1894, 2
  %1896 = zext i1 %1895 to i8
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1896, i8* %1897, align 1, !tbaa !2450
  %1898 = load i64, i64* %PC
  %1899 = add i64 %1898, 351
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 6
  %1902 = load i64, i64* %PC
  %1903 = add i64 %1902, 6
  store i64 %1903, i64* %PC
  %1904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1905 = load i8, i8* %1904, align 1, !tbaa !2448
  store i8 %1905, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1907 = icmp ne i8 %1905, 0
  %1908 = select i1 %1907, i64 %1899, i64 %1901
  store i64 %1908, i64* %1906, align 8, !tbaa !2428
  %1909 = load i8, i8* %BRANCH_TAKEN
  %1910 = icmp eq i8 %1909, 1
  br i1 %1910, label %block_4015e8, label %block_40148f

block_401513:                                     ; preds = %block_4014da
  %1911 = load i64, i64* %PC
  %1912 = add i64 %1911, 144
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 5
  store i64 %1914, i64* %PC
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1912, i64* %1915, align 8, !tbaa !2428
  br label %block_4015a3

block_401460:                                     ; preds = %block_401352
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 5
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 5
  store i64 %1919, i64* %PC
  %1920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1917, i64* %1920, align 8, !tbaa !2428
  br label %block_401465

block_40159e:                                     ; preds = %block_40151d
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 5
  %1923 = load i64, i64* %PC
  %1924 = add i64 %1923, 5
  store i64 %1924, i64* %PC
  %1925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1922, i64* %1925, align 8, !tbaa !2428
  br label %block_4015a3

block_40152e:                                     ; preds = %block_40151d
  %1926 = load i64, i64* %RBP
  %1927 = sub i64 %1926, 128
  %1928 = load i64, i64* %PC
  %1929 = add i64 %1928, 4
  store i64 %1929, i64* %PC
  %1930 = inttoptr i64 %1927 to i64*
  %1931 = load i64, i64* %1930
  store i64 %1931, i64* %RAX, align 8, !tbaa !2428
  %1932 = load i64, i64* %RAX
  %1933 = add i64 %1932, 48
  %1934 = load i64, i64* %PC
  %1935 = add i64 %1934, 8
  store i64 %1935, i64* %PC
  %1936 = inttoptr i64 %1933 to i64*
  store i64 0, i64* %1936
  %1937 = load i64, i64* %RBP
  %1938 = sub i64 %1937, 128
  %1939 = load i64, i64* %PC
  %1940 = add i64 %1939, 4
  store i64 %1940, i64* %PC
  %1941 = inttoptr i64 %1938 to i64*
  %1942 = load i64, i64* %1941
  store i64 %1942, i64* %RAX, align 8, !tbaa !2428
  %1943 = load i64, i64* %RAX
  %1944 = add i64 %1943, 24
  %1945 = load i64, i64* %PC
  %1946 = add i64 %1945, 7
  store i64 %1946, i64* %PC
  %1947 = inttoptr i64 %1944 to i32*
  store i32 1, i32* %1947
  %1948 = load i64, i64* %RBP
  %1949 = sub i64 %1948, 128
  %1950 = load i64, i64* %PC
  %1951 = add i64 %1950, 4
  store i64 %1951, i64* %PC
  %1952 = inttoptr i64 %1949 to i64*
  %1953 = load i64, i64* %1952
  store i64 %1953, i64* %RAX, align 8, !tbaa !2428
  %1954 = load i64, i64* %RAX
  %1955 = add i64 %1954, 8
  %1956 = load i64, i64* %PC
  %1957 = add i64 %1956, 4
  store i64 %1957, i64* %PC
  %1958 = inttoptr i64 %1955 to i64*
  %1959 = load i64, i64* %1958
  store i64 %1959, i64* %RAX, align 8, !tbaa !2428
  %1960 = load i64, i64* %RAX
  %1961 = add i64 %1960, 56
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 4
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1961 to i64*
  %1965 = load i64, i64* %1964
  store i64 %1965, i64* %RAX, align 8, !tbaa !2428
  %1966 = load i64, i64* %RBP
  %1967 = sub i64 %1966, 128
  %1968 = load i64, i64* %PC
  %1969 = add i64 %1968, 4
  store i64 %1969, i64* %PC
  %1970 = inttoptr i64 %1967 to i64*
  %1971 = load i64, i64* %1970
  store i64 %1971, i64* %RCX, align 8, !tbaa !2428
  %1972 = load i64, i64* %RCX
  %1973 = add i64 %1972, 32
  %1974 = load i64, i64* %RAX
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 4
  store i64 %1976, i64* %PC
  %1977 = inttoptr i64 %1973 to i64*
  store i64 %1974, i64* %1977
  %1978 = load i64, i64* %RBP
  %1979 = sub i64 %1978, 128
  %1980 = load i64, i64* %PC
  %1981 = add i64 %1980, 4
  store i64 %1981, i64* %PC
  %1982 = inttoptr i64 %1979 to i64*
  %1983 = load i64, i64* %1982
  store i64 %1983, i64* %RAX, align 8, !tbaa !2428
  %1984 = load i64, i64* %RBP
  %1985 = sub i64 %1984, 128
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 4
  store i64 %1987, i64* %PC
  %1988 = inttoptr i64 %1985 to i64*
  %1989 = load i64, i64* %1988
  store i64 %1989, i64* %RCX, align 8, !tbaa !2428
  %1990 = load i64, i64* %RCX
  %1991 = add i64 %1990, 8
  %1992 = load i64, i64* %PC
  %1993 = add i64 %1992, 4
  store i64 %1993, i64* %PC
  %1994 = inttoptr i64 %1991 to i64*
  %1995 = load i64, i64* %1994
  store i64 %1995, i64* %RCX, align 8, !tbaa !2428
  %1996 = load i64, i64* %RCX
  %1997 = add i64 %1996, 56
  %1998 = load i64, i64* %RAX
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 4
  store i64 %2000, i64* %PC
  %2001 = inttoptr i64 %1997 to i64*
  store i64 %1998, i64* %2001
  %2002 = load i64, i64* %RBP
  %2003 = sub i64 %2002, 128
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 4
  store i64 %2005, i64* %PC
  %2006 = inttoptr i64 %2003 to i64*
  %2007 = load i64, i64* %2006
  store i64 %2007, i64* %RAX, align 8, !tbaa !2428
  %2008 = load i64, i64* %RAX
  %2009 = add i64 %2008, 16
  %2010 = load i64, i64* %PC
  %2011 = add i64 %2010, 4
  store i64 %2011, i64* %PC
  %2012 = inttoptr i64 %2009 to i64*
  %2013 = load i64, i64* %2012
  store i64 %2013, i64* %RAX, align 8, !tbaa !2428
  %2014 = load i64, i64* %RAX
  %2015 = add i64 %2014, 64
  %2016 = load i64, i64* %PC
  %2017 = add i64 %2016, 4
  store i64 %2017, i64* %PC
  %2018 = inttoptr i64 %2015 to i64*
  %2019 = load i64, i64* %2018
  store i64 %2019, i64* %RAX, align 8, !tbaa !2428
  %2020 = load i64, i64* %RBP
  %2021 = sub i64 %2020, 128
  %2022 = load i64, i64* %PC
  %2023 = add i64 %2022, 4
  store i64 %2023, i64* %PC
  %2024 = inttoptr i64 %2021 to i64*
  %2025 = load i64, i64* %2024
  store i64 %2025, i64* %RCX, align 8, !tbaa !2428
  %2026 = load i64, i64* %RCX
  %2027 = add i64 %2026, 40
  %2028 = load i64, i64* %RAX
  %2029 = load i64, i64* %PC
  %2030 = add i64 %2029, 4
  store i64 %2030, i64* %PC
  %2031 = inttoptr i64 %2027 to i64*
  store i64 %2028, i64* %2031
  %2032 = load i64, i64* %RBP
  %2033 = sub i64 %2032, 128
  %2034 = load i64, i64* %PC
  %2035 = add i64 %2034, 4
  store i64 %2035, i64* %PC
  %2036 = inttoptr i64 %2033 to i64*
  %2037 = load i64, i64* %2036
  store i64 %2037, i64* %RAX, align 8, !tbaa !2428
  %2038 = load i64, i64* %RBP
  %2039 = sub i64 %2038, 128
  %2040 = load i64, i64* %PC
  %2041 = add i64 %2040, 4
  store i64 %2041, i64* %PC
  %2042 = inttoptr i64 %2039 to i64*
  %2043 = load i64, i64* %2042
  store i64 %2043, i64* %RCX, align 8, !tbaa !2428
  %2044 = load i64, i64* %RCX
  %2045 = add i64 %2044, 16
  %2046 = load i64, i64* %PC
  %2047 = add i64 %2046, 4
  store i64 %2047, i64* %PC
  %2048 = inttoptr i64 %2045 to i64*
  %2049 = load i64, i64* %2048
  store i64 %2049, i64* %RCX, align 8, !tbaa !2428
  %2050 = load i64, i64* %RCX
  %2051 = add i64 %2050, 64
  %2052 = load i64, i64* %RAX
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 4
  store i64 %2054, i64* %PC
  %2055 = inttoptr i64 %2051 to i64*
  store i64 %2052, i64* %2055
  %2056 = load i64, i64* %RBP
  %2057 = sub i64 %2056, 128
  %2058 = load i64, i64* %PC
  %2059 = add i64 %2058, 4
  store i64 %2059, i64* %PC
  %2060 = inttoptr i64 %2057 to i64*
  %2061 = load i64, i64* %2060
  store i64 %2061, i64* %RAX, align 8, !tbaa !2428
  %2062 = load i64, i64* %RAX
  %2063 = load i64, i64* %PC
  %2064 = add i64 %2063, 4
  store i64 %2064, i64* %PC
  %2065 = add i64 64, %2062
  store i64 %2065, i64* %RAX, align 8, !tbaa !2428
  %2066 = icmp ult i64 %2065, %2062
  %2067 = icmp ult i64 %2065, 64
  %2068 = or i1 %2066, %2067
  %2069 = zext i1 %2068 to i8
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2069, i8* %2070, align 1, !tbaa !2432
  %2071 = trunc i64 %2065 to i32
  %2072 = and i32 %2071, 255
  %2073 = call i32 @llvm.ctpop.i32(i32 %2072) #16
  %2074 = trunc i32 %2073 to i8
  %2075 = and i8 %2074, 1
  %2076 = xor i8 %2075, 1
  %2077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2076, i8* %2077, align 1, !tbaa !2446
  %2078 = xor i64 64, %2062
  %2079 = xor i64 %2078, %2065
  %2080 = lshr i64 %2079, 4
  %2081 = trunc i64 %2080 to i8
  %2082 = and i8 %2081, 1
  %2083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2082, i8* %2083, align 1, !tbaa !2447
  %2084 = icmp eq i64 %2065, 0
  %2085 = zext i1 %2084 to i8
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2085, i8* %2086, align 1, !tbaa !2448
  %2087 = lshr i64 %2065, 63
  %2088 = trunc i64 %2087 to i8
  %2089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2088, i8* %2089, align 1, !tbaa !2449
  %2090 = lshr i64 %2062, 63
  %2091 = xor i64 %2087, %2090
  %2092 = add nuw nsw i64 %2091, %2087
  %2093 = icmp eq i64 %2092, 2
  %2094 = zext i1 %2093 to i8
  %2095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2094, i8* %2095, align 1, !tbaa !2450
  %2096 = load i64, i64* %RBP
  %2097 = sub i64 %2096, 128
  %2098 = load i64, i64* %RAX
  %2099 = load i64, i64* %PC
  %2100 = add i64 %2099, 4
  store i64 %2100, i64* %PC
  %2101 = inttoptr i64 %2097 to i64*
  store i64 %2098, i64* %2101
  %2102 = load i64, i64* %PC
  %2103 = sub i64 %2102, 124
  %2104 = load i64, i64* %PC
  %2105 = add i64 %2104, 5
  store i64 %2105, i64* %PC
  %2106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2103, i64* %2106, align 8, !tbaa !2428
  br label %block_40151d

block_40148f:                                     ; preds = %block_401484
  %2107 = load i64, i64* %RBP
  %2108 = sub i64 %2107, 16
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 4
  store i64 %2110, i64* %PC
  %2111 = inttoptr i64 %2108 to i64*
  %2112 = load i64, i64* %2111
  store i64 %2112, i64* %RAX, align 8, !tbaa !2428
  %2113 = load i64, i64* %RAX
  %2114 = add i64 %2113, 576
  %2115 = load i64, i64* %PC
  %2116 = add i64 %2115, 7
  store i64 %2116, i64* %PC
  %2117 = inttoptr i64 %2114 to i64*
  %2118 = load i64, i64* %2117
  store i64 %2118, i64* %RAX, align 8, !tbaa !2428
  %2119 = load i64, i64* %RBP
  %2120 = sub i64 %2119, 128
  %2121 = load i64, i64* %RAX
  %2122 = load i64, i64* %PC
  %2123 = add i64 %2122, 4
  store i64 %2123, i64* %PC
  %2124 = inttoptr i64 %2120 to i64*
  store i64 %2121, i64* %2124
  %2125 = load i64, i64* %RBP
  %2126 = sub i64 %2125, 40
  %2127 = load i64, i64* %PC
  %2128 = add i64 %2127, 4
  store i64 %2128, i64* %PC
  %2129 = inttoptr i64 %2126 to i64*
  %2130 = load i64, i64* %2129
  store i64 %2130, i64* %RAX, align 8, !tbaa !2428
  %2131 = load i64, i64* %RBP
  %2132 = sub i64 %2131, 16
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 4
  store i64 %2134, i64* %PC
  %2135 = inttoptr i64 %2132 to i64*
  %2136 = load i64, i64* %2135
  store i64 %2136, i64* %RCX, align 8, !tbaa !2428
  %2137 = load i64, i64* %RAX
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 4
  store i64 %2139, i64* %PC
  %2140 = shl i64 %2137, 5
  %2141 = icmp slt i64 %2140, 0
  %2142 = shl i64 %2140, 1
  store i64 %2142, i64* %RAX, align 8, !tbaa !2428
  %2143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2144 = zext i1 %2141 to i8
  store i8 %2144, i8* %2143, align 1, !tbaa !2451
  %2145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2146 = trunc i64 %2142 to i32
  %2147 = and i32 %2146, 254
  %2148 = call i32 @llvm.ctpop.i32(i32 %2147) #16
  %2149 = trunc i32 %2148 to i8
  %2150 = and i8 %2149, 1
  %2151 = xor i8 %2150, 1
  store i8 %2151, i8* %2145, align 1, !tbaa !2451
  %2152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2152, align 1, !tbaa !2451
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2154 = icmp eq i64 %2142, 0
  %2155 = zext i1 %2154 to i8
  store i8 %2155, i8* %2153, align 1, !tbaa !2451
  %2156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2157 = lshr i64 %2142, 63
  %2158 = trunc i64 %2157 to i8
  store i8 %2158, i8* %2156, align 1, !tbaa !2451
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2159, align 1, !tbaa !2451
  %2160 = load i64, i64* %RAX
  %2161 = load i64, i64* %RCX
  %2162 = add i64 %2161, 576
  %2163 = load i64, i64* %PC
  %2164 = add i64 %2163, 7
  store i64 %2164, i64* %PC
  %2165 = inttoptr i64 %2162 to i64*
  %2166 = load i64, i64* %2165
  %2167 = add i64 %2166, %2160
  store i64 %2167, i64* %RAX, align 8, !tbaa !2428
  %2168 = icmp ult i64 %2167, %2160
  %2169 = icmp ult i64 %2167, %2166
  %2170 = or i1 %2168, %2169
  %2171 = zext i1 %2170 to i8
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2171, i8* %2172, align 1, !tbaa !2432
  %2173 = trunc i64 %2167 to i32
  %2174 = and i32 %2173, 255
  %2175 = call i32 @llvm.ctpop.i32(i32 %2174) #16
  %2176 = trunc i32 %2175 to i8
  %2177 = and i8 %2176, 1
  %2178 = xor i8 %2177, 1
  %2179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2178, i8* %2179, align 1, !tbaa !2446
  %2180 = xor i64 %2166, %2160
  %2181 = xor i64 %2180, %2167
  %2182 = lshr i64 %2181, 4
  %2183 = trunc i64 %2182 to i8
  %2184 = and i8 %2183, 1
  %2185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2184, i8* %2185, align 1, !tbaa !2447
  %2186 = icmp eq i64 %2167, 0
  %2187 = zext i1 %2186 to i8
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2187, i8* %2188, align 1, !tbaa !2448
  %2189 = lshr i64 %2167, 63
  %2190 = trunc i64 %2189 to i8
  %2191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2190, i8* %2191, align 1, !tbaa !2449
  %2192 = lshr i64 %2160, 63
  %2193 = lshr i64 %2166, 63
  %2194 = xor i64 %2189, %2192
  %2195 = xor i64 %2189, %2193
  %2196 = add nuw nsw i64 %2194, %2195
  %2197 = icmp eq i64 %2196, 2
  %2198 = zext i1 %2197 to i8
  %2199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2198, i8* %2199, align 1, !tbaa !2450
  %2200 = load i64, i64* %RCX
  %2201 = add i64 %2200, 576
  %2202 = load i64, i64* %RAX
  %2203 = load i64, i64* %PC
  %2204 = add i64 %2203, 7
  store i64 %2204, i64* %PC
  %2205 = inttoptr i64 %2201 to i64*
  store i64 %2202, i64* %2205
  %2206 = load i64, i64* %RBP
  %2207 = sub i64 %2206, 16
  %2208 = load i64, i64* %PC
  %2209 = add i64 %2208, 4
  store i64 %2209, i64* %PC
  %2210 = inttoptr i64 %2207 to i64*
  %2211 = load i64, i64* %2210
  store i64 %2211, i64* %RAX, align 8, !tbaa !2428
  %2212 = load i64, i64* %RAX
  %2213 = add i64 %2212, 576
  %2214 = load i64, i64* %PC
  %2215 = add i64 %2214, 7
  store i64 %2215, i64* %PC
  %2216 = inttoptr i64 %2213 to i64*
  %2217 = load i64, i64* %2216
  store i64 %2217, i64* %RAX, align 8, !tbaa !2428
  %2218 = load i64, i64* %RBP
  %2219 = sub i64 %2218, 136
  %2220 = load i64, i64* %RAX
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 7
  store i64 %2222, i64* %PC
  %2223 = inttoptr i64 %2219 to i64*
  store i64 %2220, i64* %2223
  %2224 = load i64, i64* %RBP
  %2225 = sub i64 %2224, 48
  %2226 = load i64, i64* %PC
  %2227 = add i64 %2226, 5
  store i64 %2227, i64* %PC
  %2228 = inttoptr i64 %2225 to i64*
  %2229 = load i64, i64* %2228
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2230, align 1, !tbaa !2432
  %2231 = trunc i64 %2229 to i32
  %2232 = and i32 %2231, 255
  %2233 = call i32 @llvm.ctpop.i32(i32 %2232) #16
  %2234 = trunc i32 %2233 to i8
  %2235 = and i8 %2234, 1
  %2236 = xor i8 %2235, 1
  %2237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2236, i8* %2237, align 1, !tbaa !2446
  %2238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2238, align 1, !tbaa !2447
  %2239 = icmp eq i64 %2229, 0
  %2240 = zext i1 %2239 to i8
  %2241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2240, i8* %2241, align 1, !tbaa !2448
  %2242 = lshr i64 %2229, 63
  %2243 = trunc i64 %2242 to i8
  %2244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2243, i8* %2244, align 1, !tbaa !2449
  %2245 = lshr i64 %2229, 63
  %2246 = xor i64 %2242, %2245
  %2247 = add nuw nsw i64 %2246, %2245
  %2248 = icmp eq i64 %2247, 2
  %2249 = zext i1 %2248 to i8
  %2250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2249, i8* %2250, align 1, !tbaa !2450
  %2251 = load i64, i64* %PC
  %2252 = add i64 %2251, 73
  %2253 = load i64, i64* %PC
  %2254 = add i64 %2253, 6
  %2255 = load i64, i64* %PC
  %2256 = add i64 %2255, 6
  store i64 %2256, i64* %PC
  %2257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2258 = load i8, i8* %2257, align 1, !tbaa !2448
  store i8 %2258, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2260 = icmp ne i8 %2258, 0
  %2261 = select i1 %2260, i64 %2252, i64 %2254
  store i64 %2261, i64* %2259, align 8, !tbaa !2428
  %2262 = load i8, i8* %BRANCH_TAKEN
  %2263 = icmp eq i8 %2262, 1
  %2264 = load i64, i64* %PC
  %2265 = add i64 %2264, 5
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 5
  store i64 %2267, i64* %PC
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2265, i64* %2268, align 8, !tbaa !2428
  br i1 %2263, label %block_40151d, label %block_4014da

block_40116f:                                     ; preds = %block_401110
  %2269 = load i64, i64* %RBP
  %2270 = sub i64 %2269, 16
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 4
  store i64 %2272, i64* %PC
  %2273 = inttoptr i64 %2270 to i64*
  %2274 = load i64, i64* %2273
  store i64 %2274, i64* %RAX, align 8, !tbaa !2428
  %2275 = load i64, i64* %RAX
  %2276 = add i64 %2275, 424
  %2277 = load i64, i64* %PC
  %2278 = add i64 %2277, 7
  store i64 %2278, i64* %PC
  %2279 = inttoptr i64 %2276 to i64*
  %2280 = load i64, i64* %2279
  store i64 %2280, i64* %RAX, align 8, !tbaa !2428
  %2281 = load i64, i64* %RBP
  %2282 = sub i64 %2281, 16
  %2283 = load i64, i64* %PC
  %2284 = add i64 %2283, 4
  store i64 %2284, i64* %PC
  %2285 = inttoptr i64 %2282 to i64*
  %2286 = load i64, i64* %2285
  store i64 %2286, i64* %RCX, align 8, !tbaa !2428
  %2287 = load i64, i64* %RAX
  %2288 = load i64, i64* %RCX
  %2289 = add i64 %2288, 456
  %2290 = load i64, i64* %PC
  %2291 = add i64 %2290, 7
  store i64 %2291, i64* %PC
  %2292 = inttoptr i64 %2289 to i64*
  %2293 = load i64, i64* %2292
  %2294 = add i64 %2293, %2287
  store i64 %2294, i64* %RAX, align 8, !tbaa !2428
  %2295 = icmp ult i64 %2294, %2287
  %2296 = icmp ult i64 %2294, %2293
  %2297 = or i1 %2295, %2296
  %2298 = zext i1 %2297 to i8
  %2299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2298, i8* %2299, align 1, !tbaa !2432
  %2300 = trunc i64 %2294 to i32
  %2301 = and i32 %2300, 255
  %2302 = call i32 @llvm.ctpop.i32(i32 %2301) #16
  %2303 = trunc i32 %2302 to i8
  %2304 = and i8 %2303, 1
  %2305 = xor i8 %2304, 1
  %2306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2305, i8* %2306, align 1, !tbaa !2446
  %2307 = xor i64 %2293, %2287
  %2308 = xor i64 %2307, %2294
  %2309 = lshr i64 %2308, 4
  %2310 = trunc i64 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2311, i8* %2312, align 1, !tbaa !2447
  %2313 = icmp eq i64 %2294, 0
  %2314 = zext i1 %2313 to i8
  %2315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2314, i8* %2315, align 1, !tbaa !2448
  %2316 = lshr i64 %2294, 63
  %2317 = trunc i64 %2316 to i8
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2317, i8* %2318, align 1, !tbaa !2449
  %2319 = lshr i64 %2287, 63
  %2320 = lshr i64 %2293, 63
  %2321 = xor i64 %2316, %2319
  %2322 = xor i64 %2316, %2320
  %2323 = add nuw nsw i64 %2321, %2322
  %2324 = icmp eq i64 %2323, 2
  %2325 = zext i1 %2324 to i8
  %2326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2325, i8* %2326, align 1, !tbaa !2450
  %2327 = load i64, i64* %RBP
  %2328 = sub i64 %2327, 16
  %2329 = load i64, i64* %PC
  %2330 = add i64 %2329, 4
  store i64 %2330, i64* %PC
  %2331 = inttoptr i64 %2328 to i64*
  %2332 = load i64, i64* %2331
  store i64 %2332, i64* %RCX, align 8, !tbaa !2428
  %2333 = load i64, i64* %RAX
  %2334 = load i64, i64* %RCX
  %2335 = add i64 %2334, 416
  %2336 = load i64, i64* %PC
  %2337 = add i64 %2336, 7
  store i64 %2337, i64* %PC
  %2338 = inttoptr i64 %2335 to i64*
  %2339 = load i64, i64* %2338
  %2340 = sub i64 %2333, %2339
  %2341 = icmp ugt i64 %2339, %2333
  %2342 = zext i1 %2341 to i8
  %2343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2342, i8* %2343, align 1, !tbaa !2432
  %2344 = trunc i64 %2340 to i32
  %2345 = and i32 %2344, 255
  %2346 = call i32 @llvm.ctpop.i32(i32 %2345) #16
  %2347 = trunc i32 %2346 to i8
  %2348 = and i8 %2347, 1
  %2349 = xor i8 %2348, 1
  %2350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2349, i8* %2350, align 1, !tbaa !2446
  %2351 = xor i64 %2339, %2333
  %2352 = xor i64 %2351, %2340
  %2353 = lshr i64 %2352, 4
  %2354 = trunc i64 %2353 to i8
  %2355 = and i8 %2354, 1
  %2356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2355, i8* %2356, align 1, !tbaa !2447
  %2357 = icmp eq i64 %2340, 0
  %2358 = zext i1 %2357 to i8
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2358, i8* %2359, align 1, !tbaa !2448
  %2360 = lshr i64 %2340, 63
  %2361 = trunc i64 %2360 to i8
  %2362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2361, i8* %2362, align 1, !tbaa !2449
  %2363 = lshr i64 %2333, 63
  %2364 = lshr i64 %2339, 63
  %2365 = xor i64 %2364, %2363
  %2366 = xor i64 %2360, %2363
  %2367 = add nuw nsw i64 %2366, %2365
  %2368 = icmp eq i64 %2367, 2
  %2369 = zext i1 %2368 to i8
  %2370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2369, i8* %2370, align 1, !tbaa !2450
  %2371 = load i64, i64* %PC
  %2372 = add i64 %2371, 121
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 6
  %2375 = load i64, i64* %PC
  %2376 = add i64 %2375, 6
  store i64 %2376, i64* %PC
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2378 = load i8, i8* %2377, align 1, !tbaa !2448
  %2379 = icmp ne i8 %2378, 0
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2381 = load i8, i8* %2380, align 1, !tbaa !2449
  %2382 = icmp ne i8 %2381, 0
  %2383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2384 = load i8, i8* %2383, align 1, !tbaa !2450
  %2385 = icmp ne i8 %2384, 0
  %2386 = xor i1 %2382, %2385
  %2387 = or i1 %2379, %2386
  %2388 = zext i1 %2387 to i8
  store i8 %2388, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2390 = select i1 %2387, i64 %2372, i64 %2374
  store i64 %2390, i64* %2389, align 8, !tbaa !2428
  %2391 = load i8, i8* %BRANCH_TAKEN
  %2392 = icmp eq i8 %2391, 1
  br i1 %2392, label %block_401209, label %block_401196

block_401243:                                     ; preds = %block_40120e, %block_40127f
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.11, %block_40120e ], [ %MEMORY.8, %block_40127f ]
  %2393 = load i64, i64* %RAX
  %2394 = load i32, i32* %EAX
  %2395 = zext i32 %2394 to i64
  %2396 = load i64, i64* %PC
  %2397 = add i64 %2396, 2
  store i64 %2397, i64* %PC
  %2398 = xor i64 %2395, %2393
  %2399 = trunc i64 %2398 to i32
  %2400 = and i64 %2398, 4294967295
  store i64 %2400, i64* %RAX, align 8, !tbaa !2428
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2401, align 1, !tbaa !2432
  %2402 = and i32 %2399, 255
  %2403 = call i32 @llvm.ctpop.i32(i32 %2402) #16
  %2404 = trunc i32 %2403 to i8
  %2405 = and i8 %2404, 1
  %2406 = xor i8 %2405, 1
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2406, i8* %2407, align 1, !tbaa !2446
  %2408 = icmp eq i32 %2399, 0
  %2409 = zext i1 %2408 to i8
  %2410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2409, i8* %2410, align 1, !tbaa !2448
  %2411 = lshr i32 %2399, 31
  %2412 = trunc i32 %2411 to i8
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2412, i8* %2413, align 1, !tbaa !2449
  %2414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2414, align 1, !tbaa !2450
  %2415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2415, align 1, !tbaa !2447
  %2416 = load i8, i8* %AL
  %2417 = zext i8 %2416 to i64
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 2
  store i64 %2419, i64* %PC
  store i8 %2416, i8* %CL, align 1, !tbaa !2451
  %2420 = load i64, i64* %RBP
  %2421 = sub i64 %2420, 24
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 4
  store i64 %2423, i64* %PC
  %2424 = inttoptr i64 %2421 to i64*
  %2425 = load i64, i64* %2424
  store i64 %2425, i64* %RDX, align 8, !tbaa !2428
  %2426 = load i64, i64* %RDX
  %2427 = load i64, i64* %RBP
  %2428 = sub i64 %2427, 32
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 4
  store i64 %2430, i64* %PC
  %2431 = inttoptr i64 %2428 to i64*
  %2432 = load i64, i64* %2431
  %2433 = sub i64 %2426, %2432
  %2434 = icmp ugt i64 %2432, %2426
  %2435 = zext i1 %2434 to i8
  %2436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2435, i8* %2436, align 1, !tbaa !2432
  %2437 = trunc i64 %2433 to i32
  %2438 = and i32 %2437, 255
  %2439 = call i32 @llvm.ctpop.i32(i32 %2438) #16
  %2440 = trunc i32 %2439 to i8
  %2441 = and i8 %2440, 1
  %2442 = xor i8 %2441, 1
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2442, i8* %2443, align 1, !tbaa !2446
  %2444 = xor i64 %2432, %2426
  %2445 = xor i64 %2444, %2433
  %2446 = lshr i64 %2445, 4
  %2447 = trunc i64 %2446 to i8
  %2448 = and i8 %2447, 1
  %2449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2448, i8* %2449, align 1, !tbaa !2447
  %2450 = icmp eq i64 %2433, 0
  %2451 = zext i1 %2450 to i8
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2451, i8* %2452, align 1, !tbaa !2448
  %2453 = lshr i64 %2433, 63
  %2454 = trunc i64 %2453 to i8
  %2455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2454, i8* %2455, align 1, !tbaa !2449
  %2456 = lshr i64 %2426, 63
  %2457 = lshr i64 %2432, 63
  %2458 = xor i64 %2457, %2456
  %2459 = xor i64 %2453, %2456
  %2460 = add nuw nsw i64 %2459, %2458
  %2461 = icmp eq i64 %2460, 2
  %2462 = zext i1 %2461 to i8
  %2463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2462, i8* %2463, align 1, !tbaa !2450
  %2464 = load i64, i64* %RBP
  %2465 = sub i64 %2464, 161
  %2466 = load i8, i8* %CL
  %2467 = zext i8 %2466 to i64
  %2468 = load i64, i64* %PC
  %2469 = add i64 %2468, 6
  store i64 %2469, i64* %PC
  %2470 = inttoptr i64 %2465 to i8*
  store i8 %2466, i8* %2470
  %2471 = load i64, i64* %PC
  %2472 = add i64 %2471, 23
  %2473 = load i64, i64* %PC
  %2474 = add i64 %2473, 6
  %2475 = load i64, i64* %PC
  %2476 = add i64 %2475, 6
  store i64 %2476, i64* %PC
  %2477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2478 = load i8, i8* %2477, align 1, !tbaa !2449
  %2479 = icmp ne i8 %2478, 0
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2481 = load i8, i8* %2480, align 1, !tbaa !2450
  %2482 = icmp ne i8 %2481, 0
  %2483 = xor i1 %2479, %2482
  %2484 = xor i1 %2483, true
  %2485 = zext i1 %2484 to i8
  store i8 %2485, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2487 = select i1 %2483, i64 %2474, i64 %2472
  store i64 %2487, i64* %2486, align 8, !tbaa !2428
  %2488 = load i8, i8* %BRANCH_TAKEN
  %2489 = icmp eq i8 %2488, 1
  br i1 %2489, label %block_40126c, label %block_40125b

block_40120e:                                     ; preds = %block_401209, %block_401110
  %MEMORY.11 = phi %struct.Memory* [ %2, %block_401110 ], [ %MEMORY.13, %block_401209 ]
  %2490 = load i64, i64* %RBP
  %2491 = sub i64 %2490, 16
  %2492 = load i64, i64* %PC
  %2493 = add i64 %2492, 4
  store i64 %2493, i64* %PC
  %2494 = inttoptr i64 %2491 to i64*
  %2495 = load i64, i64* %2494
  store i64 %2495, i64* %RAX, align 8, !tbaa !2428
  %2496 = load i64, i64* %RAX
  %2497 = add i64 %2496, 576
  %2498 = load i64, i64* %PC
  %2499 = add i64 %2498, 7
  store i64 %2499, i64* %PC
  %2500 = inttoptr i64 %2497 to i64*
  %2501 = load i64, i64* %2500
  store i64 %2501, i64* %RAX, align 8, !tbaa !2428
  %2502 = load i64, i64* %RBP
  %2503 = sub i64 %2502, 128
  %2504 = load i64, i64* %RAX
  %2505 = load i64, i64* %PC
  %2506 = add i64 %2505, 4
  store i64 %2506, i64* %PC
  %2507 = inttoptr i64 %2503 to i64*
  store i64 %2504, i64* %2507
  %2508 = load i64, i64* %RBP
  %2509 = sub i64 %2508, 16
  %2510 = load i64, i64* %PC
  %2511 = add i64 %2510, 4
  store i64 %2511, i64* %PC
  %2512 = inttoptr i64 %2509 to i64*
  %2513 = load i64, i64* %2512
  store i64 %2513, i64* %RAX, align 8, !tbaa !2428
  %2514 = load i64, i64* %RAX
  %2515 = add i64 %2514, 408
  %2516 = load i64, i64* %PC
  %2517 = add i64 %2516, 7
  store i64 %2517, i64* %PC
  %2518 = inttoptr i64 %2515 to i64*
  %2519 = load i64, i64* %2518
  store i64 %2519, i64* %RAX, align 8, !tbaa !2428
  %2520 = load i64, i64* %RBP
  %2521 = sub i64 %2520, 32
  %2522 = load i64, i64* %RAX
  %2523 = load i64, i64* %PC
  %2524 = add i64 %2523, 4
  store i64 %2524, i64* %PC
  %2525 = inttoptr i64 %2521 to i64*
  store i64 %2522, i64* %2525
  %2526 = load i64, i64* %RBP
  %2527 = sub i64 %2526, 16
  %2528 = load i64, i64* %PC
  %2529 = add i64 %2528, 4
  store i64 %2529, i64* %PC
  %2530 = inttoptr i64 %2527 to i64*
  %2531 = load i64, i64* %2530
  store i64 %2531, i64* %RAX, align 8, !tbaa !2428
  %2532 = load i64, i64* %RAX
  %2533 = add i64 %2532, 568
  %2534 = load i64, i64* %PC
  %2535 = add i64 %2534, 7
  store i64 %2535, i64* %PC
  %2536 = inttoptr i64 %2533 to i64*
  %2537 = load i64, i64* %2536
  store i64 %2537, i64* %RAX, align 8, !tbaa !2428
  %2538 = load i64, i64* %RBP
  %2539 = sub i64 %2538, 112
  %2540 = load i64, i64* %RAX
  %2541 = load i64, i64* %PC
  %2542 = add i64 %2541, 4
  store i64 %2542, i64* %PC
  %2543 = inttoptr i64 %2539 to i64*
  store i64 %2540, i64* %2543
  %2544 = load i64, i64* %RBP
  %2545 = sub i64 %2544, 24
  %2546 = load i64, i64* %PC
  %2547 = add i64 %2546, 8
  store i64 %2547, i64* %PC
  %2548 = inttoptr i64 %2545 to i64*
  store i64 0, i64* %2548
  br label %block_401243

block_401442:                                     ; preds = %block_40140d, %block_40141f
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.5, %block_40140d ], [ %1773, %block_40141f ]
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 5
  %2551 = load i64, i64* %PC
  %2552 = add i64 %2551, 5
  store i64 %2552, i64* %PC
  %2553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2550, i64* %2553, align 8, !tbaa !2428
  br label %block_401447

block_40140d:                                     ; preds = %block_4013c4
  %2554 = inttoptr i64 %1376 to i64*
  %2555 = load i64, i64* %2554
  store i64 %2555, i64* %RAX, align 8, !tbaa !2428
  %2556 = load i64, i64* %RAX
  %2557 = add i64 %2556, 48
  %2558 = load i64, i64* %PC
  %2559 = add i64 %2558, 4
  store i64 %2559, i64* %PC
  %2560 = inttoptr i64 %2557 to i64*
  %2561 = load i64, i64* %2560
  store i64 %2561, i64* %RAX, align 8, !tbaa !2428
  %2562 = load i64, i64* %RAX
  %2563 = load i64, i64* %RBP
  %2564 = sub i64 %2563, 96
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 4
  store i64 %2566, i64* %PC
  %2567 = inttoptr i64 %2564 to i64*
  %2568 = load i64, i64* %2567
  %2569 = sub i64 %2562, %2568
  %2570 = icmp ugt i64 %2568, %2562
  %2571 = zext i1 %2570 to i8
  %2572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2571, i8* %2572, align 1, !tbaa !2432
  %2573 = trunc i64 %2569 to i32
  %2574 = and i32 %2573, 255
  %2575 = call i32 @llvm.ctpop.i32(i32 %2574) #16
  %2576 = trunc i32 %2575 to i8
  %2577 = and i8 %2576, 1
  %2578 = xor i8 %2577, 1
  %2579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2578, i8* %2579, align 1, !tbaa !2446
  %2580 = xor i64 %2568, %2562
  %2581 = xor i64 %2580, %2569
  %2582 = lshr i64 %2581, 4
  %2583 = trunc i64 %2582 to i8
  %2584 = and i8 %2583, 1
  %2585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2584, i8* %2585, align 1, !tbaa !2447
  %2586 = icmp eq i64 %2569, 0
  %2587 = zext i1 %2586 to i8
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2587, i8* %2588, align 1, !tbaa !2448
  %2589 = lshr i64 %2569, 63
  %2590 = trunc i64 %2589 to i8
  %2591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2590, i8* %2591, align 1, !tbaa !2449
  %2592 = lshr i64 %2562, 63
  %2593 = lshr i64 %2568, 63
  %2594 = xor i64 %2593, %2592
  %2595 = xor i64 %2589, %2592
  %2596 = add nuw nsw i64 %2595, %2594
  %2597 = icmp eq i64 %2596, 2
  %2598 = zext i1 %2597 to i8
  %2599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2598, i8* %2599, align 1, !tbaa !2450
  %2600 = load i64, i64* %PC
  %2601 = add i64 %2600, 41
  %2602 = load i64, i64* %PC
  %2603 = add i64 %2602, 6
  %2604 = load i64, i64* %PC
  %2605 = add i64 %2604, 6
  store i64 %2605, i64* %PC
  %2606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2607 = load i8, i8* %2606, align 1, !tbaa !2448
  %2608 = icmp ne i8 %2607, 0
  %2609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2610 = load i8, i8* %2609, align 1, !tbaa !2449
  %2611 = icmp ne i8 %2610, 0
  %2612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2613 = load i8, i8* %2612, align 1, !tbaa !2450
  %2614 = icmp ne i8 %2613, 0
  %2615 = xor i1 %2611, %2614
  %2616 = or i1 %2608, %2615
  %2617 = zext i1 %2616 to i8
  store i8 %2617, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2619 = select i1 %2616, i64 %2601, i64 %2603
  store i64 %2619, i64* %2618, align 8, !tbaa !2428
  %2620 = load i8, i8* %BRANCH_TAKEN
  %2621 = icmp eq i8 %2620, 1
  br i1 %2621, label %block_401442, label %block_40141f

block_401209:                                     ; preds = %block_401200, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_40116f
  %MEMORY.13 = phi %struct.Memory* [ %2, %block_40116f ], [ %2914, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %3044, %block_401200 ]
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 5
  %2624 = load i64, i64* %PC
  %2625 = add i64 %2624, 5
  store i64 %2625, i64* %PC
  %2626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2623, i64* %2626, align 8, !tbaa !2428
  br label %block_40120e

block_401307:                                     ; preds = %block_4012f4
  %2627 = load i64, i64* %RBP
  %2628 = sub i64 %2627, 112
  %2629 = load i64, i64* %PC
  %2630 = add i64 %2629, 4
  store i64 %2630, i64* %PC
  %2631 = inttoptr i64 %2628 to i64*
  %2632 = load i64, i64* %2631
  store i64 %2632, i64* %RAX, align 8, !tbaa !2428
  %2633 = load i64, i64* %RAX
  %2634 = add i64 %2633, 16
  %2635 = load i64, i64* %PC
  %2636 = add i64 %2635, 4
  store i64 %2636, i64* %PC
  %2637 = inttoptr i64 %2634 to i64*
  %2638 = load i64, i64* %2637
  store i64 %2638, i64* %RAX, align 8, !tbaa !2428
  %2639 = load i64, i64* %RBP
  %2640 = sub i64 %2639, 160
  %2641 = load i64, i64* %RAX
  %2642 = load i64, i64* %PC
  %2643 = add i64 %2642, 7
  store i64 %2643, i64* %PC
  %2644 = inttoptr i64 %2640 to i64*
  store i64 %2641, i64* %2644
  %2645 = load i64, i64* %RBP
  %2646 = sub i64 %2645, 160
  %2647 = load i64, i64* %PC
  %2648 = add i64 %2647, 7
  store i64 %2648, i64* %PC
  %2649 = inttoptr i64 %2646 to i64*
  %2650 = load i64, i64* %2649
  store i64 %2650, i64* %RAX, align 8, !tbaa !2428
  %2651 = load i64, i64* %RAX
  %2652 = add i64 %2651, 100
  %2653 = load i64, i64* %PC
  %2654 = add i64 %2653, 4
  store i64 %2654, i64* %PC
  %2655 = inttoptr i64 %2652 to i32*
  %2656 = load i32, i32* %2655
  %2657 = sext i32 %2656 to i64
  store i64 %2657, i64* %RAX, align 8, !tbaa !2428
  %2658 = load i64, i64* %RBP
  %2659 = sub i64 %2658, 112
  %2660 = load i64, i64* %PC
  %2661 = add i64 %2660, 4
  store i64 %2661, i64* %PC
  %2662 = inttoptr i64 %2659 to i64*
  %2663 = load i64, i64* %2662
  store i64 %2663, i64* %RCX, align 8, !tbaa !2428
  %2664 = load i64, i64* %RAX
  %2665 = load i64, i64* %RCX
  %2666 = add i64 %2665, 56
  %2667 = load i64, i64* %PC
  %2668 = add i64 %2667, 4
  store i64 %2668, i64* %PC
  %2669 = inttoptr i64 %2666 to i64*
  %2670 = load i64, i64* %2669
  %2671 = sub i64 %2664, %2670
  store i64 %2671, i64* %RAX, align 8, !tbaa !2428
  %2672 = icmp ugt i64 %2670, %2664
  %2673 = zext i1 %2672 to i8
  %2674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2673, i8* %2674, align 1, !tbaa !2432
  %2675 = trunc i64 %2671 to i32
  %2676 = and i32 %2675, 255
  %2677 = call i32 @llvm.ctpop.i32(i32 %2676) #16
  %2678 = trunc i32 %2677 to i8
  %2679 = and i8 %2678, 1
  %2680 = xor i8 %2679, 1
  %2681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2680, i8* %2681, align 1, !tbaa !2446
  %2682 = xor i64 %2670, %2664
  %2683 = xor i64 %2682, %2671
  %2684 = lshr i64 %2683, 4
  %2685 = trunc i64 %2684 to i8
  %2686 = and i8 %2685, 1
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2686, i8* %2687, align 1, !tbaa !2447
  %2688 = icmp eq i64 %2671, 0
  %2689 = zext i1 %2688 to i8
  %2690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2689, i8* %2690, align 1, !tbaa !2448
  %2691 = lshr i64 %2671, 63
  %2692 = trunc i64 %2691 to i8
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2692, i8* %2693, align 1, !tbaa !2449
  %2694 = lshr i64 %2664, 63
  %2695 = lshr i64 %2670, 63
  %2696 = xor i64 %2695, %2694
  %2697 = xor i64 %2691, %2694
  %2698 = add nuw nsw i64 %2697, %2696
  %2699 = icmp eq i64 %2698, 2
  %2700 = zext i1 %2699 to i8
  %2701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2700, i8* %2701, align 1, !tbaa !2450
  %2702 = load i64, i64* %RAX
  %2703 = load i64, i64* %RBP
  %2704 = sub i64 %2703, 104
  %2705 = load i64, i64* %PC
  %2706 = add i64 %2705, 4
  store i64 %2706, i64* %PC
  %2707 = inttoptr i64 %2704 to i64*
  %2708 = load i64, i64* %2707
  %2709 = add i64 %2708, %2702
  store i64 %2709, i64* %RAX, align 8, !tbaa !2428
  %2710 = icmp ult i64 %2709, %2702
  %2711 = icmp ult i64 %2709, %2708
  %2712 = or i1 %2710, %2711
  %2713 = zext i1 %2712 to i8
  %2714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2713, i8* %2714, align 1, !tbaa !2432
  %2715 = trunc i64 %2709 to i32
  %2716 = and i32 %2715, 255
  %2717 = call i32 @llvm.ctpop.i32(i32 %2716) #16
  %2718 = trunc i32 %2717 to i8
  %2719 = and i8 %2718, 1
  %2720 = xor i8 %2719, 1
  %2721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2720, i8* %2721, align 1, !tbaa !2446
  %2722 = xor i64 %2708, %2702
  %2723 = xor i64 %2722, %2709
  %2724 = lshr i64 %2723, 4
  %2725 = trunc i64 %2724 to i8
  %2726 = and i8 %2725, 1
  %2727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2726, i8* %2727, align 1, !tbaa !2447
  %2728 = icmp eq i64 %2709, 0
  %2729 = zext i1 %2728 to i8
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2729, i8* %2730, align 1, !tbaa !2448
  %2731 = lshr i64 %2709, 63
  %2732 = trunc i64 %2731 to i8
  %2733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2732, i8* %2733, align 1, !tbaa !2449
  %2734 = lshr i64 %2702, 63
  %2735 = lshr i64 %2708, 63
  %2736 = xor i64 %2731, %2734
  %2737 = xor i64 %2731, %2735
  %2738 = add nuw nsw i64 %2736, %2737
  %2739 = icmp eq i64 %2738, 2
  %2740 = zext i1 %2739 to i8
  %2741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2740, i8* %2741, align 1, !tbaa !2450
  %2742 = load i64, i64* %RBP
  %2743 = sub i64 %2742, 56
  %2744 = load i64, i64* %RAX
  %2745 = load i64, i64* %PC
  %2746 = add i64 %2745, 4
  store i64 %2746, i64* %PC
  %2747 = inttoptr i64 %2743 to i64*
  store i64 %2744, i64* %2747
  %2748 = load i64, i64* %RBP
  %2749 = sub i64 %2748, 160
  %2750 = load i64, i64* %PC
  %2751 = add i64 %2750, 7
  store i64 %2751, i64* %PC
  %2752 = inttoptr i64 %2749 to i64*
  %2753 = load i64, i64* %2752
  store i64 %2753, i64* %RAX, align 8, !tbaa !2428
  %2754 = load i64, i64* %RAX
  %2755 = load i64, i64* %PC
  %2756 = add i64 %2755, 3
  store i64 %2756, i64* %PC
  %2757 = inttoptr i64 %2754 to i64*
  %2758 = load i64, i64* %2757
  store i64 %2758, i64* %RAX, align 8, !tbaa !2428
  %2759 = load i64, i64* %RBP
  %2760 = sub i64 %2759, 80
  %2761 = load i64, i64* %RAX
  %2762 = load i64, i64* %PC
  %2763 = add i64 %2762, 4
  store i64 %2763, i64* %PC
  %2764 = inttoptr i64 %2760 to i64*
  store i64 %2761, i64* %2764
  %2765 = load i64, i64* %RBP
  %2766 = sub i64 %2765, 144
  %2767 = load i64, i64* %PC
  %2768 = add i64 %2767, 7
  store i64 %2768, i64* %PC
  %2769 = inttoptr i64 %2766 to i64*
  %2770 = load i64, i64* %2769
  store i64 %2770, i64* %RAX, align 8, !tbaa !2428
  %2771 = load i64, i64* %RAX
  %2772 = add i64 %2771, 8
  %2773 = load i64, i64* %PC
  %2774 = add i64 %2773, 4
  store i64 %2774, i64* %PC
  %2775 = inttoptr i64 %2772 to i64*
  %2776 = load i64, i64* %2775
  store i64 %2776, i64* %RAX, align 8, !tbaa !2428
  %2777 = load i64, i64* %RAX
  %2778 = add i64 %2777, 72
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 4
  store i64 %2780, i64* %PC
  %2781 = inttoptr i64 %2778 to i64*
  %2782 = load i64, i64* %2781
  store i64 %2782, i64* %RAX, align 8, !tbaa !2428
  %2783 = load i64, i64* %RBP
  %2784 = sub i64 %2783, 120
  %2785 = load i64, i64* %RAX
  %2786 = load i64, i64* %PC
  %2787 = add i64 %2786, 4
  store i64 %2787, i64* %PC
  %2788 = inttoptr i64 %2784 to i64*
  store i64 %2785, i64* %2788
  br label %block_401352

block_4015e8:                                     ; preds = %block_401484, %block_4015a3
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.7, %block_401484 ], [ %MEMORY.4, %block_4015a3 ]
  %2789 = load i64, i64* %RBP
  %2790 = sub i64 %2789, 40
  %2791 = load i64, i64* %PC
  %2792 = add i64 %2791, 4
  store i64 %2792, i64* %PC
  %2793 = inttoptr i64 %2790 to i64*
  %2794 = load i64, i64* %2793
  store i64 %2794, i64* %RAX, align 8, !tbaa !2428
  %2795 = load i64, i64* %RBP
  %2796 = sub i64 %2795, 8
  %2797 = load i64, i64* %RAX
  %2798 = load i64, i64* %PC
  %2799 = add i64 %2798, 4
  store i64 %2799, i64* %PC
  %2800 = inttoptr i64 %2796 to i64*
  store i64 %2797, i64* %2800
  br label %block_4015f0

block_401302:                                     ; preds = %block_4012f4
  %2801 = load i64, i64* %PC
  %2802 = add i64 %2801, 355
  %2803 = load i64, i64* %PC
  %2804 = add i64 %2803, 5
  store i64 %2804, i64* %PC
  %2805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2802, i64* %2805, align 8, !tbaa !2428
  br label %block_401465

block_401447:                                     ; preds = %block_401442, %block_4013d9
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.12, %block_401442 ], [ %764, %block_4013d9 ]
  %2806 = load i64, i64* %PC
  %2807 = add i64 %2806, 5
  %2808 = load i64, i64* %PC
  %2809 = add i64 %2808, 5
  store i64 %2809, i64* %PC
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2807, i64* %2810, align 8, !tbaa !2428
  br label %block_40144c

block_401196:                                     ; preds = %block_40116f
  %2811 = load i64, i64* %PC
  %2812 = add i64 %2811, 5
  store i64 %2812, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %2813 = load i32, i32* %EAX
  %2814 = zext i32 %2813 to i64
  %2815 = load i64, i64* %PC
  %2816 = add i64 %2815, 2
  store i64 %2816, i64* %PC
  %2817 = and i64 %2814, 4294967295
  store i64 %2817, i64* %RCX, align 8, !tbaa !2428
  %2818 = load i64, i64* %RBP
  %2819 = sub i64 %2818, 16
  %2820 = load i64, i64* %PC
  %2821 = add i64 %2820, 4
  store i64 %2821, i64* %PC
  %2822 = inttoptr i64 %2819 to i64*
  %2823 = load i64, i64* %2822
  store i64 %2823, i64* %RDX, align 8, !tbaa !2428
  %2824 = load i64, i64* %RDX
  %2825 = add i64 %2824, 408
  %2826 = load i64, i64* %PC
  %2827 = add i64 %2826, 7
  store i64 %2827, i64* %PC
  %2828 = inttoptr i64 %2825 to i64*
  %2829 = load i64, i64* %2828
  store i64 %2829, i64* %RDX, align 8, !tbaa !2428
  %2830 = load i64, i64* %RBP
  %2831 = sub i64 %2830, 16
  %2832 = load i64, i64* %PC
  %2833 = add i64 %2832, 4
  store i64 %2833, i64* %PC
  %2834 = inttoptr i64 %2831 to i64*
  %2835 = load i64, i64* %2834
  store i64 %2835, i64* %RSI, align 8, !tbaa !2428
  %2836 = load i64, i64* %RDX
  %2837 = load i64, i64* %RSI
  %2838 = add i64 %2837, 408
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 8
  store i64 %2840, i64* %PC
  %2841 = inttoptr i64 %2838 to i64*
  %2842 = load i64, i64* %2841
  %2843 = sext i64 %2836 to i128
  %2844 = and i128 %2843, -18446744073709551616
  %2845 = sext i64 %2842 to i128
  %2846 = and i128 %2845, -18446744073709551616
  %2847 = zext i64 %2836 to i128
  %2848 = or i128 %2844, %2847
  %2849 = zext i64 %2842 to i128
  %2850 = or i128 %2846, %2849
  %2851 = mul nsw i128 %2850, %2848
  %2852 = trunc i128 %2851 to i64
  store i64 %2852, i64* %RDX, align 8, !tbaa !2428
  %2853 = sext i64 %2852 to i128
  %2854 = icmp ne i128 %2853, %2851
  %2855 = zext i1 %2854 to i8
  %2856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2855, i8* %2856, align 1, !tbaa !2432
  %2857 = trunc i128 %2851 to i32
  %2858 = and i32 %2857, 255
  %2859 = call i32 @llvm.ctpop.i32(i32 %2858) #16
  %2860 = trunc i32 %2859 to i8
  %2861 = and i8 %2860, 1
  %2862 = xor i8 %2861, 1
  %2863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2862, i8* %2863, align 1, !tbaa !2446
  %2864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2864, align 1, !tbaa !2447
  %2865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2865, align 1, !tbaa !2448
  %2866 = lshr i64 %2852, 63
  %2867 = trunc i64 %2866 to i8
  %2868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2867, i8* %2868, align 1, !tbaa !2449
  %2869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2855, i8* %2869, align 1, !tbaa !2450
  %2870 = load i64, i64* %RDX
  %2871 = load i64, i64* %PC
  %2872 = add i64 %2871, 3
  store i64 %2872, i64* %PC
  store i64 %2870, i64* %RAX, align 8, !tbaa !2428
  %2873 = load i64, i64* %PC
  %2874 = add i64 %2873, 2
  store i64 %2874, i64* %PC
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %2877 = load i64, i64* %2876, align 8, !tbaa !2428
  %2878 = ashr i64 %2877, 63
  store i64 %2878, i64* %2875, align 8, !tbaa !2428
  %2879 = load i64, i64* %RCX
  %2880 = load i64, i64* %PC
  %2881 = add i64 %2880, 3
  store i64 %2881, i64* %PC
  %2882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %2883 = load i64, i64* %2882, align 8, !tbaa !2428
  %2884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2885 = load i64, i64* %2884, align 8, !tbaa !2428
  %2886 = sext i64 %2879 to i128
  %2887 = and i128 %2886, -18446744073709551616
  %2888 = zext i64 %2885 to i128
  %2889 = shl nuw i128 %2888, 64
  %2890 = zext i64 %2883 to i128
  %2891 = or i128 %2889, %2890
  %2892 = zext i64 %2879 to i128
  %2893 = or i128 %2887, %2892
  %2894 = sdiv i128 %2891, %2893
  %2895 = trunc i128 %2894 to i64
  %2896 = and i128 %2894, 18446744073709551615
  %2897 = sext i64 %2895 to i128
  %2898 = and i128 %2897, -18446744073709551616
  %2899 = or i128 %2898, %2896
  %2900 = icmp eq i128 %2894, %2899
  br i1 %2900, label %2905, label %2901

; <label>:2901:                                   ; preds = %block_401196
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2903 = load i64, i64* %2902, align 8, !tbaa !2428
  %2904 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2903, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:2905:                                   ; preds = %block_401196
  %2906 = srem i128 %2891, %2893
  %2907 = trunc i128 %2906 to i64
  store i64 %2895, i64* %2882, align 8, !tbaa !2428
  store i64 %2907, i64* %2884, align 8, !tbaa !2428
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2908, align 1, !tbaa !2432
  %2909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %2909, align 1, !tbaa !2446
  %2910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2910, align 1, !tbaa !2447
  %2911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2911, align 1, !tbaa !2448
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2912, align 1, !tbaa !2449
  %2913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2913, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %2901, %2905
  %2914 = phi %struct.Memory* [ %2904, %2901 ], [ %2, %2905 ]
  %2915 = load i64, i64* %RBP
  %2916 = sub i64 %2915, 16
  %2917 = load i64, i64* %PC
  %2918 = add i64 %2917, 4
  store i64 %2918, i64* %PC
  %2919 = inttoptr i64 %2916 to i64*
  %2920 = load i64, i64* %2919
  store i64 %2920, i64* %RCX, align 8, !tbaa !2428
  %2921 = load i64, i64* %RAX
  %2922 = load i64, i64* %RCX
  %2923 = add i64 %2922, 424
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 7
  store i64 %2925, i64* %PC
  %2926 = inttoptr i64 %2923 to i64*
  %2927 = load i64, i64* %2926
  %2928 = add i64 %2927, %2921
  store i64 %2928, i64* %RAX, align 8, !tbaa !2428
  %2929 = icmp ult i64 %2928, %2921
  %2930 = icmp ult i64 %2928, %2927
  %2931 = or i1 %2929, %2930
  %2932 = zext i1 %2931 to i8
  %2933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2932, i8* %2933, align 1, !tbaa !2432
  %2934 = trunc i64 %2928 to i32
  %2935 = and i32 %2934, 255
  %2936 = call i32 @llvm.ctpop.i32(i32 %2935) #16
  %2937 = trunc i32 %2936 to i8
  %2938 = and i8 %2937, 1
  %2939 = xor i8 %2938, 1
  %2940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2939, i8* %2940, align 1, !tbaa !2446
  %2941 = xor i64 %2927, %2921
  %2942 = xor i64 %2941, %2928
  %2943 = lshr i64 %2942, 4
  %2944 = trunc i64 %2943 to i8
  %2945 = and i8 %2944, 1
  %2946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2945, i8* %2946, align 1, !tbaa !2447
  %2947 = icmp eq i64 %2928, 0
  %2948 = zext i1 %2947 to i8
  %2949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2948, i8* %2949, align 1, !tbaa !2448
  %2950 = lshr i64 %2928, 63
  %2951 = trunc i64 %2950 to i8
  %2952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2951, i8* %2952, align 1, !tbaa !2449
  %2953 = lshr i64 %2921, 63
  %2954 = lshr i64 %2927, 63
  %2955 = xor i64 %2950, %2953
  %2956 = xor i64 %2950, %2954
  %2957 = add nuw nsw i64 %2955, %2956
  %2958 = icmp eq i64 %2957, 2
  %2959 = zext i1 %2958 to i8
  %2960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2959, i8* %2960, align 1, !tbaa !2450
  %2961 = load i64, i64* %RBP
  %2962 = sub i64 %2961, 16
  %2963 = load i64, i64* %PC
  %2964 = add i64 %2963, 4
  store i64 %2964, i64* %PC
  %2965 = inttoptr i64 %2962 to i64*
  %2966 = load i64, i64* %2965
  store i64 %2966, i64* %RCX, align 8, !tbaa !2428
  %2967 = load i64, i64* %RAX
  %2968 = load i64, i64* %RCX
  %2969 = add i64 %2968, 416
  %2970 = load i64, i64* %PC
  %2971 = add i64 %2970, 7
  store i64 %2971, i64* %PC
  %2972 = inttoptr i64 %2969 to i64*
  %2973 = load i64, i64* %2972
  %2974 = sub i64 %2967, %2973
  %2975 = icmp ugt i64 %2973, %2967
  %2976 = zext i1 %2975 to i8
  %2977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2976, i8* %2977, align 1, !tbaa !2432
  %2978 = trunc i64 %2974 to i32
  %2979 = and i32 %2978, 255
  %2980 = call i32 @llvm.ctpop.i32(i32 %2979) #16
  %2981 = trunc i32 %2980 to i8
  %2982 = and i8 %2981, 1
  %2983 = xor i8 %2982, 1
  %2984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2983, i8* %2984, align 1, !tbaa !2446
  %2985 = xor i64 %2973, %2967
  %2986 = xor i64 %2985, %2974
  %2987 = lshr i64 %2986, 4
  %2988 = trunc i64 %2987 to i8
  %2989 = and i8 %2988, 1
  %2990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2989, i8* %2990, align 1, !tbaa !2447
  %2991 = icmp eq i64 %2974, 0
  %2992 = zext i1 %2991 to i8
  %2993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2992, i8* %2993, align 1, !tbaa !2448
  %2994 = lshr i64 %2974, 63
  %2995 = trunc i64 %2994 to i8
  %2996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2995, i8* %2996, align 1, !tbaa !2449
  %2997 = lshr i64 %2967, 63
  %2998 = lshr i64 %2973, 63
  %2999 = xor i64 %2998, %2997
  %3000 = xor i64 %2994, %2997
  %3001 = add nuw nsw i64 %3000, %2999
  %3002 = icmp eq i64 %3001, 2
  %3003 = zext i1 %3002 to i8
  %3004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3003, i8* %3004, align 1, !tbaa !2450
  %3005 = load i64, i64* %PC
  %3006 = add i64 %3005, 55
  %3007 = load i64, i64* %PC
  %3008 = add i64 %3007, 6
  %3009 = load i64, i64* %PC
  %3010 = add i64 %3009, 6
  store i64 %3010, i64* %PC
  %3011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3012 = load i8, i8* %3011, align 1, !tbaa !2448
  %3013 = icmp ne i8 %3012, 0
  %3014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3015 = load i8, i8* %3014, align 1, !tbaa !2449
  %3016 = icmp ne i8 %3015, 0
  %3017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3018 = load i8, i8* %3017, align 1, !tbaa !2450
  %3019 = icmp ne i8 %3018, 0
  %3020 = xor i1 %3016, %3019
  %3021 = or i1 %3013, %3020
  %3022 = zext i1 %3021 to i8
  store i8 %3022, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3024 = select i1 %3021, i64 %3006, i64 %3008
  store i64 %3024, i64* %3023, align 8, !tbaa !2428
  %3025 = load i8, i8* %BRANCH_TAKEN
  %3026 = icmp eq i8 %3025, 1
  br i1 %3026, label %block_401209, label %block_4011d8

block_401200:                                     ; preds = %block_4011d8
  %3027 = sub i64 %1724, 16
  %3028 = load i64, i64* %PC
  %3029 = add i64 %3028, 4
  store i64 %3029, i64* %PC
  %3030 = inttoptr i64 %3027 to i64*
  %3031 = load i64, i64* %3030
  store i64 %3031, i64* %RDI, align 8, !tbaa !2428
  %3032 = load i64, i64* %PC
  %3033 = add i64 %3032, 2444
  %3034 = load i64, i64* %PC
  %3035 = add i64 %3034, 5
  %3036 = load i64, i64* %PC
  %3037 = add i64 %3036, 5
  store i64 %3037, i64* %PC
  %3038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3039 = load i64, i64* %3038, align 8, !tbaa !2428
  %3040 = add i64 %3039, -8
  %3041 = inttoptr i64 %3040 to i64*
  store i64 %3035, i64* %3041
  store i64 %3040, i64* %3038, align 8, !tbaa !2428
  %3042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3033, i64* %3042, align 8, !tbaa !2428
  %3043 = load i64, i64* %PC
  %3044 = call %struct.Memory* @sub_401b90_refresh_neighbour_lists_renamed_(%struct.State* %0, i64 %3043, %struct.Memory* %1686)
  br label %block_401209
}

; Function Attrs: noinline
define %struct.Memory* @sub_401600_suspend_impl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401600:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !2428
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %30, i64* %36
  store i64 %35, i64* %33, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  %40 = load i64, i64* %RSP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC
  %43 = sub i64 %40, 64
  store i64 %43, i64* %RSP, align 8, !tbaa !2428
  %44 = icmp ult i64 %40, 64
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %45, i8* %46, align 1, !tbaa !2432
  %47 = trunc i64 %43 to i32
  %48 = and i32 %47, 255
  %49 = call i32 @llvm.ctpop.i32(i32 %48) #16
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %52, i8* %53, align 1, !tbaa !2446
  %54 = xor i64 64, %40
  %55 = xor i64 %54, %43
  %56 = lshr i64 %55, 4
  %57 = trunc i64 %56 to i8
  %58 = and i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %58, i8* %59, align 1, !tbaa !2447
  %60 = icmp eq i64 %43, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %43, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = lshr i64 %40, 63
  %67 = xor i64 %63, %66
  %68 = add nuw nsw i64 %67, %66
  %69 = icmp eq i64 %68, 2
  %70 = zext i1 %69 to i8
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %70, i8* %71, align 1, !tbaa !2450
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %RDI
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %73 to i64*
  store i64 %74, i64* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 16
  %80 = load i64, i64* %RSI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 24
  %86 = load i64, i64* %RDX
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %85 to i64*
  store i64 %86, i64* %89
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 24
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 5
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i64*
  %95 = load i64, i64* %94
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %96, align 1, !tbaa !2432
  %97 = trunc i64 %95 to i32
  %98 = and i32 %97, 255
  %99 = call i32 @llvm.ctpop.i32(i32 %98) #16
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %102, i8* %103, align 1, !tbaa !2446
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %104, align 1, !tbaa !2447
  %105 = icmp eq i64 %95, 0
  %106 = zext i1 %105 to i8
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %106, i8* %107, align 1, !tbaa !2448
  %108 = lshr i64 %95, 63
  %109 = trunc i64 %108 to i8
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %109, i8* %110, align 1, !tbaa !2449
  %111 = lshr i64 %95, 63
  %112 = xor i64 %108, %111
  %113 = add nuw nsw i64 %112, %111
  %114 = icmp eq i64 %113, 2
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %115, i8* %116, align 1, !tbaa !2450
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 26
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 6
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 6
  store i64 %122, i64* %PC
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %124 = load i8, i8* %123, align 1, !tbaa !2448
  store i8 %124, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %126 = icmp ne i8 %124, 0
  %127 = select i1 %126, i64 %118, i64 %120
  store i64 %127, i64* %125, align 8, !tbaa !2428
  %128 = load i8, i8* %BRANCH_TAKEN
  %129 = icmp eq i8 %128, 1
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 8
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %RAX, align 8, !tbaa !2428
  %136 = load i64, i64* %RAX
  br i1 %129, label %block_401633, label %block_40161f

block_401776:                                     ; preds = %block_40167e
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 5
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 5
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %138, i64* %141, align 8, !tbaa !2428
  br label %block_40177b

block_4016ef:                                     ; preds = %block_4016d9
  %142 = add i64 %443, 8
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 4
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %142 to i64*
  %146 = load i64, i64* %145
  store i64 %146, i64* %RCX, align 8, !tbaa !2428
  %147 = load i64, i64* %RCX
  %148 = add i64 %147, 48
  %149 = load i64, i64* %RAX
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %148 to i64*
  store i64 %149, i64* %152
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 21
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %154, i64* %157, align 8, !tbaa !2428
  br label %block_401714

block_40173d:                                     ; preds = %block_40171e
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 5
  store i64 %159, i64* %PC
  store i64 64, i64* %RAX, align 8, !tbaa !2428
  %160 = load i32, i32* %EAX
  %161 = zext i32 %160 to i64
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 2
  store i64 %163, i64* %PC
  %164 = and i64 %161, 4294967295
  store i64 %164, i64* %RDX, align 8, !tbaa !2428
  %165 = load i64, i64* %RBP
  %166 = sub i64 %165, 48
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 4
  store i64 %168, i64* %PC
  %169 = inttoptr i64 %166 to i64*
  %170 = load i64, i64* %169
  store i64 %170, i64* %RCX, align 8, !tbaa !2428
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 56
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 4
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %RSI, align 8, !tbaa !2428
  %177 = load i64, i64* %RCX
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 3
  store i64 %179, i64* %PC
  store i64 %177, i64* %RDI, align 8, !tbaa !2428
  %180 = load i64, i64* %PC
  %181 = sub i64 %180, 3759
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 5
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 5
  store i64 %185, i64* %PC
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %187 = load i64, i64* %186, align 8, !tbaa !2428
  %188 = add i64 %187, -8
  %189 = inttoptr i64 %188 to i64*
  store i64 %183, i64* %189
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %181, i64* %190, align 8, !tbaa !2428
  %191 = load i64, i64* %PC
  %192 = call %struct.Memory* @ext_4008a0_memcpy(%struct.State* %0, i64 %191, %struct.Memory* %MEMORY.1)
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 48
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 4
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i64*
  %198 = load i64, i64* %197
  store i64 %198, i64* %RCX, align 8, !tbaa !2428
  %199 = load i64, i64* %RCX
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 4
  store i64 %201, i64* %PC
  %202 = add i64 64, %199
  store i64 %202, i64* %RCX, align 8, !tbaa !2428
  %203 = icmp ult i64 %202, %199
  %204 = icmp ult i64 %202, 64
  %205 = or i1 %203, %204
  %206 = zext i1 %205 to i8
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %206, i8* %207, align 1, !tbaa !2432
  %208 = trunc i64 %202 to i32
  %209 = and i32 %208, 255
  %210 = call i32 @llvm.ctpop.i32(i32 %209) #16
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %213, i8* %214, align 1, !tbaa !2446
  %215 = xor i64 64, %199
  %216 = xor i64 %215, %202
  %217 = lshr i64 %216, 4
  %218 = trunc i64 %217 to i8
  %219 = and i8 %218, 1
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %219, i8* %220, align 1, !tbaa !2447
  %221 = icmp eq i64 %202, 0
  %222 = zext i1 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %222, i8* %223, align 1, !tbaa !2448
  %224 = lshr i64 %202, 63
  %225 = trunc i64 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %225, i8* %226, align 1, !tbaa !2449
  %227 = lshr i64 %199, 63
  %228 = xor i64 %224, %227
  %229 = add nuw nsw i64 %228, %224
  %230 = icmp eq i64 %229, 2
  %231 = zext i1 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %231, i8* %232, align 1, !tbaa !2450
  %233 = load i64, i64* %RBP
  %234 = sub i64 %233, 48
  %235 = load i64, i64* %RCX
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %234 to i64*
  store i64 %235, i64* %238
  br label %block_401760

block_4017fb:                                     ; preds = %block_40177b, %block_401786
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_40177b ], [ %1194, %block_401786 ]
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 32
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 4
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %240 to i64*
  %244 = load i64, i64* %243
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %245 = load i64, i64* %RSP
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC
  %248 = add i64 64, %245
  store i64 %248, i64* %RSP, align 8, !tbaa !2428
  %249 = icmp ult i64 %248, %245
  %250 = icmp ult i64 %248, 64
  %251 = or i1 %249, %250
  %252 = zext i1 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %252, i8* %253, align 1, !tbaa !2432
  %254 = trunc i64 %248 to i32
  %255 = and i32 %254, 255
  %256 = call i32 @llvm.ctpop.i32(i32 %255) #16
  %257 = trunc i32 %256 to i8
  %258 = and i8 %257, 1
  %259 = xor i8 %258, 1
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %259, i8* %260, align 1, !tbaa !2446
  %261 = xor i64 64, %245
  %262 = xor i64 %261, %248
  %263 = lshr i64 %262, 4
  %264 = trunc i64 %263 to i8
  %265 = and i8 %264, 1
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %265, i8* %266, align 1, !tbaa !2447
  %267 = icmp eq i64 %248, 0
  %268 = zext i1 %267 to i8
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %268, i8* %269, align 1, !tbaa !2448
  %270 = lshr i64 %248, 63
  %271 = trunc i64 %270 to i8
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %271, i8* %272, align 1, !tbaa !2449
  %273 = lshr i64 %245, 63
  %274 = xor i64 %270, %273
  %275 = add nuw nsw i64 %274, %270
  %276 = icmp eq i64 %275, 2
  %277 = zext i1 %276 to i8
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %277, i8* %278, align 1, !tbaa !2450
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 1
  store i64 %280, i64* %PC
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %282 = load i64, i64* %281, align 8, !tbaa !2428
  %283 = add i64 %282, 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %RBP, align 8, !tbaa !2428
  store i64 %283, i64* %281, align 8, !tbaa !2428
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 1
  store i64 %287, i64* %PC
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = inttoptr i64 %290 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %288, align 8, !tbaa !2428
  %293 = add i64 %290, 8
  store i64 %293, i64* %289, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40172c:                                     ; preds = %block_40171e
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 32
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RAX, align 8, !tbaa !2428
  %300 = load i64, i64* %RAX
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC
  %303 = add i64 1, %300
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = icmp ult i64 %303, %300
  %305 = icmp ult i64 %303, 1
  %306 = or i1 %304, %305
  %307 = zext i1 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %307, i8* %308, align 1, !tbaa !2432
  %309 = trunc i64 %303 to i32
  %310 = and i32 %309, 255
  %311 = call i32 @llvm.ctpop.i32(i32 %310) #16
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %314, i8* %315, align 1, !tbaa !2446
  %316 = xor i64 1, %300
  %317 = xor i64 %316, %303
  %318 = lshr i64 %317, 4
  %319 = trunc i64 %318 to i8
  %320 = and i8 %319, 1
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %320, i8* %321, align 1, !tbaa !2447
  %322 = icmp eq i64 %303, 0
  %323 = zext i1 %322 to i8
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %323, i8* %324, align 1, !tbaa !2448
  %325 = lshr i64 %303, 63
  %326 = trunc i64 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %326, i8* %327, align 1, !tbaa !2449
  %328 = lshr i64 %300, 63
  %329 = xor i64 %325, %328
  %330 = add nuw nsw i64 %329, %325
  %331 = icmp eq i64 %330, 2
  %332 = zext i1 %331 to i8
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %332, i8* %333, align 1, !tbaa !2450
  %334 = load i64, i64* %RBP
  %335 = sub i64 %334, 32
  %336 = load i64, i64* %RAX
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 4
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %335 to i64*
  store i64 %336, i64* %339
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 40
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 5
  store i64 %343, i64* %PC
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %341, i64* %344, align 8, !tbaa !2428
  br label %block_401760

block_40161f:                                     ; preds = %block_401600
  %345 = add i64 %136, 440
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 7
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %345 to i64*
  %349 = load i64, i64* %348
  store i64 %349, i64* %RAX, align 8, !tbaa !2428
  %350 = load i64, i64* %RBP
  %351 = sub i64 %350, 32
  %352 = load i64, i64* %RAX
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 4
  store i64 %354, i64* %PC
  %355 = inttoptr i64 %351 to i64*
  store i64 %352, i64* %355
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 333
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 5
  store i64 %359, i64* %PC
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %357, i64* %360, align 8, !tbaa !2428
  br label %block_40177b

block_4016d9:                                     ; preds = %block_4016c3
  %361 = load i64, i64* %RBP
  %362 = sub i64 %361, 56
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 4
  store i64 %364, i64* %PC
  %365 = inttoptr i64 %362 to i64*
  %366 = load i64, i64* %365
  store i64 %366, i64* %RAX, align 8, !tbaa !2428
  %367 = load i64, i64* %RAX
  %368 = add i64 %367, 8
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %368 to i64*
  %372 = load i64, i64* %371
  store i64 %372, i64* %RAX, align 8, !tbaa !2428
  %373 = load i64, i64* %RAX
  %374 = add i64 %373, 48
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC
  %377 = inttoptr i64 %374 to i64*
  %378 = load i64, i64* %377
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = load i64, i64* %RAX
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 56
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 4
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i64*
  %385 = load i64, i64* %384
  %386 = sub i64 %379, %385
  %387 = icmp ugt i64 %385, %379
  %388 = zext i1 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %388, i8* %389, align 1, !tbaa !2432
  %390 = trunc i64 %386 to i32
  %391 = and i32 %390, 255
  %392 = call i32 @llvm.ctpop.i32(i32 %391) #16
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %395, i8* %396, align 1, !tbaa !2446
  %397 = xor i64 %385, %379
  %398 = xor i64 %397, %386
  %399 = lshr i64 %398, 4
  %400 = trunc i64 %399 to i8
  %401 = and i8 %400, 1
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %401, i8* %402, align 1, !tbaa !2447
  %403 = icmp eq i64 %386, 0
  %404 = zext i1 %403 to i8
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %404, i8* %405, align 1, !tbaa !2448
  %406 = lshr i64 %386, 63
  %407 = trunc i64 %406 to i8
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %407, i8* %408, align 1, !tbaa !2449
  %409 = lshr i64 %379, 63
  %410 = lshr i64 %385, 63
  %411 = xor i64 %410, %409
  %412 = xor i64 %406, %409
  %413 = add nuw nsw i64 %412, %411
  %414 = icmp eq i64 %413, 2
  %415 = zext i1 %414 to i8
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %415, i8* %416, align 1, !tbaa !2450
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 27
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 6
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 6
  store i64 %422, i64* %PC
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %424 = load i8, i8* %423, align 1, !tbaa !2448
  %425 = icmp eq i8 %424, 0
  %426 = zext i1 %425 to i8
  store i8 %426, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %428 = select i1 %425, i64 %418, i64 %420
  store i64 %428, i64* %427, align 8, !tbaa !2428
  %429 = load i8, i8* %BRANCH_TAKEN
  %430 = icmp eq i8 %429, 1
  %431 = load i64, i64* %RBP
  %432 = sub i64 %431, 48
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 4
  store i64 %434, i64* %PC
  %435 = inttoptr i64 %432 to i64*
  %436 = load i64, i64* %435
  store i64 %436, i64* %RAX, align 8, !tbaa !2428
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 56
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 4
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i64*
  %442 = load i64, i64* %441
  store i64 %442, i64* %RCX, align 8, !tbaa !2428
  %443 = load i64, i64* %RCX
  br i1 %430, label %block_401704, label %block_4016ef

block_40171e:                                     ; preds = %block_401719, %block_40169d
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_401719 ], [ %MEMORY.3, %block_40169d ]
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 40
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 4
  store i64 %447, i64* %PC
  %448 = inttoptr i64 %445 to i64*
  %449 = load i64, i64* %448
  store i64 %449, i64* %RAX, align 8, !tbaa !2428
  %450 = load i64, i64* %RAX
  %451 = load i64, i64* %RBP
  %452 = sub i64 %451, 16
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 4
  store i64 %454, i64* %PC
  %455 = inttoptr i64 %452 to i64*
  %456 = load i64, i64* %455
  %457 = sub i64 %450, %456
  %458 = icmp ugt i64 %456, %450
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %459, i8* %460, align 1, !tbaa !2432
  %461 = trunc i64 %457 to i32
  %462 = and i32 %461, 255
  %463 = call i32 @llvm.ctpop.i32(i32 %462) #16
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %466, i8* %467, align 1, !tbaa !2446
  %468 = xor i64 %456, %450
  %469 = xor i64 %468, %457
  %470 = lshr i64 %469, 4
  %471 = trunc i64 %470 to i8
  %472 = and i8 %471, 1
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %472, i8* %473, align 1, !tbaa !2447
  %474 = icmp eq i64 %457, 0
  %475 = zext i1 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %475, i8* %476, align 1, !tbaa !2448
  %477 = lshr i64 %457, 63
  %478 = trunc i64 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %478, i8* %479, align 1, !tbaa !2449
  %480 = lshr i64 %450, 63
  %481 = lshr i64 %456, 63
  %482 = xor i64 %481, %480
  %483 = xor i64 %477, %480
  %484 = add nuw nsw i64 %483, %482
  %485 = icmp eq i64 %484, 2
  %486 = zext i1 %485 to i8
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %486, i8* %487, align 1, !tbaa !2450
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 23
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 6
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 6
  store i64 %493, i64* %PC
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %495 = load i8, i8* %494, align 1, !tbaa !2448
  %496 = icmp ne i8 %495, 0
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %498 = load i8, i8* %497, align 1, !tbaa !2449
  %499 = icmp ne i8 %498, 0
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %501 = load i8, i8* %500, align 1, !tbaa !2450
  %502 = icmp ne i8 %501, 0
  %503 = xor i1 %499, %502
  %504 = or i1 %496, %503
  %505 = zext i1 %504 to i8
  store i8 %505, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %507 = select i1 %504, i64 %489, i64 %491
  store i64 %507, i64* %506, align 8, !tbaa !2428
  %508 = load i8, i8* %BRANCH_TAKEN
  %509 = icmp eq i8 %508, 1
  br i1 %509, label %block_40173d, label %block_40172c

block_40169d:                                     ; preds = %block_40168f
  %510 = sub i64 %852, 56
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 4
  store i64 %512, i64* %PC
  %513 = inttoptr i64 %510 to i64*
  %514 = load i64, i64* %513
  store i64 %514, i64* %RAX, align 8, !tbaa !2428
  %515 = load i64, i64* %RAX
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 3
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %RAX, align 8, !tbaa !2428
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 56
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i64*
  %525 = load i64, i64* %524
  store i64 %525, i64* %RCX, align 8, !tbaa !2428
  %526 = load i64, i64* %RCX
  %527 = add i64 %526, 8
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 4
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i64*
  %531 = load i64, i64* %530
  store i64 %531, i64* %RCX, align 8, !tbaa !2428
  %532 = load i64, i64* %RAX
  %533 = load i64, i64* %RCX
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 3
  store i64 %535, i64* %PC
  %536 = inttoptr i64 %533 to i64*
  %537 = load i64, i64* %536
  %538 = sub i64 %532, %537
  store i64 %538, i64* %RAX, align 8, !tbaa !2428
  %539 = icmp ugt i64 %537, %532
  %540 = zext i1 %539 to i8
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %540, i8* %541, align 1, !tbaa !2432
  %542 = trunc i64 %538 to i32
  %543 = and i32 %542, 255
  %544 = call i32 @llvm.ctpop.i32(i32 %543) #16
  %545 = trunc i32 %544 to i8
  %546 = and i8 %545, 1
  %547 = xor i8 %546, 1
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %547, i8* %548, align 1, !tbaa !2446
  %549 = xor i64 %537, %532
  %550 = xor i64 %549, %538
  %551 = lshr i64 %550, 4
  %552 = trunc i64 %551 to i8
  %553 = and i8 %552, 1
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %553, i8* %554, align 1, !tbaa !2447
  %555 = icmp eq i64 %538, 0
  %556 = zext i1 %555 to i8
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %556, i8* %557, align 1, !tbaa !2448
  %558 = lshr i64 %538, 63
  %559 = trunc i64 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %559, i8* %560, align 1, !tbaa !2449
  %561 = lshr i64 %532, 63
  %562 = lshr i64 %537, 63
  %563 = xor i64 %562, %561
  %564 = xor i64 %558, %561
  %565 = add nuw nsw i64 %564, %563
  %566 = icmp eq i64 %565, 2
  %567 = zext i1 %566 to i8
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %567, i8* %568, align 1, !tbaa !2450
  %569 = load i64, i64* %RBP
  %570 = sub i64 %569, 56
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 4
  store i64 %572, i64* %PC
  %573 = inttoptr i64 %570 to i64*
  %574 = load i64, i64* %573
  store i64 %574, i64* %RCX, align 8, !tbaa !2428
  %575 = load i64, i64* %RCX
  %576 = add i64 %575, 16
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 4
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i64*
  %580 = load i64, i64* %579
  store i64 %580, i64* %RCX, align 8, !tbaa !2428
  %581 = load i64, i64* %RAX
  %582 = load i64, i64* %RCX
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 3
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %582 to i64*
  %586 = load i64, i64* %585
  %587 = add i64 %586, %581
  store i64 %587, i64* %RAX, align 8, !tbaa !2428
  %588 = icmp ult i64 %587, %581
  %589 = icmp ult i64 %587, %586
  %590 = or i1 %588, %589
  %591 = zext i1 %590 to i8
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %591, i8* %592, align 1, !tbaa !2432
  %593 = trunc i64 %587 to i32
  %594 = and i32 %593, 255
  %595 = call i32 @llvm.ctpop.i32(i32 %594) #16
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  %598 = xor i8 %597, 1
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %598, i8* %599, align 1, !tbaa !2446
  %600 = xor i64 %586, %581
  %601 = xor i64 %600, %587
  %602 = lshr i64 %601, 4
  %603 = trunc i64 %602 to i8
  %604 = and i8 %603, 1
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %604, i8* %605, align 1, !tbaa !2447
  %606 = icmp eq i64 %587, 0
  %607 = zext i1 %606 to i8
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %607, i8* %608, align 1, !tbaa !2448
  %609 = lshr i64 %587, 63
  %610 = trunc i64 %609 to i8
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %610, i8* %611, align 1, !tbaa !2449
  %612 = lshr i64 %581, 63
  %613 = lshr i64 %586, 63
  %614 = xor i64 %609, %612
  %615 = xor i64 %609, %613
  %616 = add nuw nsw i64 %614, %615
  %617 = icmp eq i64 %616, 2
  %618 = zext i1 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %618, i8* %619, align 1, !tbaa !2450
  %620 = load i64, i64* %RBP
  %621 = sub i64 %620, 40
  %622 = load i64, i64* %RAX
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 4
  store i64 %624, i64* %PC
  %625 = inttoptr i64 %621 to i64*
  store i64 %622, i64* %625
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 96
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 5
  store i64 %629, i64* %PC
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %627, i64* %630, align 8, !tbaa !2428
  br label %block_40171e

block_401633:                                     ; preds = %block_401600
  %631 = add i64 %136, 576
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 7
  store i64 %633, i64* %PC
  %634 = inttoptr i64 %631 to i64*
  %635 = load i64, i64* %634
  store i64 %635, i64* %RAX, align 8, !tbaa !2428
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 64
  %638 = load i64, i64* %RAX
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 4
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %637 to i64*
  store i64 %638, i64* %641
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = add i64 %648, 568
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 7
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %649 to i64*
  %653 = load i64, i64* %652
  store i64 %653, i64* %RAX, align 8, !tbaa !2428
  %654 = load i64, i64* %RBP
  %655 = sub i64 %654, 8
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 4
  store i64 %657, i64* %PC
  %658 = inttoptr i64 %655 to i64*
  %659 = load i64, i64* %658
  store i64 %659, i64* %RCX, align 8, !tbaa !2428
  %660 = load i64, i64* %RCX
  %661 = add i64 %660, 424
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 7
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i64*
  %665 = load i64, i64* %664
  store i64 %665, i64* %RCX, align 8, !tbaa !2428
  %666 = load i64, i64* %RBP
  %667 = sub i64 %666, 8
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 4
  store i64 %669, i64* %PC
  %670 = inttoptr i64 %667 to i64*
  %671 = load i64, i64* %670
  store i64 %671, i64* %RDX, align 8, !tbaa !2428
  %672 = load i64, i64* %RCX
  %673 = load i64, i64* %RDX
  %674 = add i64 %673, 440
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 7
  store i64 %676, i64* %PC
  %677 = inttoptr i64 %674 to i64*
  %678 = load i64, i64* %677
  %679 = sub i64 %672, %678
  store i64 %679, i64* %RCX, align 8, !tbaa !2428
  %680 = icmp ugt i64 %678, %672
  %681 = zext i1 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %681, i8* %682, align 1, !tbaa !2432
  %683 = trunc i64 %679 to i32
  %684 = and i32 %683, 255
  %685 = call i32 @llvm.ctpop.i32(i32 %684) #16
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  %688 = xor i8 %687, 1
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %688, i8* %689, align 1, !tbaa !2446
  %690 = xor i64 %678, %672
  %691 = xor i64 %690, %679
  %692 = lshr i64 %691, 4
  %693 = trunc i64 %692 to i8
  %694 = and i8 %693, 1
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %694, i8* %695, align 1, !tbaa !2447
  %696 = icmp eq i64 %679, 0
  %697 = zext i1 %696 to i8
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %697, i8* %698, align 1, !tbaa !2448
  %699 = lshr i64 %679, 63
  %700 = trunc i64 %699 to i8
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %700, i8* %701, align 1, !tbaa !2449
  %702 = lshr i64 %672, 63
  %703 = lshr i64 %678, 63
  %704 = xor i64 %703, %702
  %705 = xor i64 %699, %702
  %706 = add nuw nsw i64 %705, %704
  %707 = icmp eq i64 %706, 2
  %708 = zext i1 %707 to i8
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %708, i8* %709, align 1, !tbaa !2450
  %710 = load i64, i64* %RCX
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 4
  store i64 %712, i64* %PC
  %713 = shl i64 %710, 5
  %714 = icmp slt i64 %713, 0
  %715 = shl i64 %713, 1
  store i64 %715, i64* %RCX, align 8, !tbaa !2428
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %717 = zext i1 %714 to i8
  store i8 %717, i8* %716, align 1, !tbaa !2451
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %719 = trunc i64 %715 to i32
  %720 = and i32 %719, 254
  %721 = call i32 @llvm.ctpop.i32(i32 %720) #16
  %722 = trunc i32 %721 to i8
  %723 = and i8 %722, 1
  %724 = xor i8 %723, 1
  store i8 %724, i8* %718, align 1, !tbaa !2451
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %725, align 1, !tbaa !2451
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %727 = icmp eq i64 %715, 0
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %726, align 1, !tbaa !2451
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %730 = lshr i64 %715, 63
  %731 = trunc i64 %730 to i8
  store i8 %731, i8* %729, align 1, !tbaa !2451
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %732, align 1, !tbaa !2451
  %733 = load i64, i64* %RAX
  %734 = load i64, i64* %RCX
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 3
  store i64 %736, i64* %PC
  %737 = add i64 %734, %733
  store i64 %737, i64* %RAX, align 8, !tbaa !2428
  %738 = icmp ult i64 %737, %733
  %739 = icmp ult i64 %737, %734
  %740 = or i1 %738, %739
  %741 = zext i1 %740 to i8
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %741, i8* %742, align 1, !tbaa !2432
  %743 = trunc i64 %737 to i32
  %744 = and i32 %743, 255
  %745 = call i32 @llvm.ctpop.i32(i32 %744) #16
  %746 = trunc i32 %745 to i8
  %747 = and i8 %746, 1
  %748 = xor i8 %747, 1
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %748, i8* %749, align 1, !tbaa !2446
  %750 = xor i64 %734, %733
  %751 = xor i64 %750, %737
  %752 = lshr i64 %751, 4
  %753 = trunc i64 %752 to i8
  %754 = and i8 %753, 1
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %754, i8* %755, align 1, !tbaa !2447
  %756 = icmp eq i64 %737, 0
  %757 = zext i1 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %757, i8* %758, align 1, !tbaa !2448
  %759 = lshr i64 %737, 63
  %760 = trunc i64 %759 to i8
  %761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %760, i8* %761, align 1, !tbaa !2449
  %762 = lshr i64 %733, 63
  %763 = lshr i64 %734, 63
  %764 = xor i64 %759, %762
  %765 = xor i64 %759, %763
  %766 = add nuw nsw i64 %764, %765
  %767 = icmp eq i64 %766, 2
  %768 = zext i1 %767 to i8
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %768, i8* %769, align 1, !tbaa !2450
  %770 = load i64, i64* %RBP
  %771 = sub i64 %770, 48
  %772 = load i64, i64* %RAX
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 4
  store i64 %774, i64* %PC
  %775 = inttoptr i64 %771 to i64*
  store i64 %772, i64* %775
  %776 = load i64, i64* %RBP
  %777 = sub i64 %776, 32
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 8
  store i64 %779, i64* %PC
  %780 = inttoptr i64 %777 to i64*
  store i64 0, i64* %780
  %781 = load i64, i64* %RBP
  %782 = sub i64 %781, 48
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 4
  store i64 %784, i64* %PC
  %785 = inttoptr i64 %782 to i64*
  %786 = load i64, i64* %785
  store i64 %786, i64* %RAX, align 8, !tbaa !2428
  %787 = load i64, i64* %RBP
  %788 = sub i64 %787, 56
  %789 = load i64, i64* %RAX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 4
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %788 to i64*
  store i64 %789, i64* %792
  br label %block_40167e

block_401719:                                     ; preds = %block_401714, %block_4016c3
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_4016c3 ], [ %MEMORY.6, %block_401714 ]
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 5
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 5
  store i64 %796, i64* %PC
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %794, i64* %797, align 8, !tbaa !2428
  br label %block_40171e

block_40168f:                                     ; preds = %block_40167e
  %798 = load i64, i64* %RBP
  %799 = sub i64 %798, 56
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 4
  store i64 %801, i64* %PC
  %802 = inttoptr i64 %799 to i64*
  %803 = load i64, i64* %802
  store i64 %803, i64* %RAX, align 8, !tbaa !2428
  %804 = load i64, i64* %RAX
  %805 = add i64 %804, 24
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i32*
  %809 = load i32, i32* %808
  %810 = sub i32 %809, 1
  %811 = icmp ult i32 %809, 1
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %812, i8* %813, align 1, !tbaa !2432
  %814 = and i32 %810, 255
  %815 = call i32 @llvm.ctpop.i32(i32 %814) #16
  %816 = trunc i32 %815 to i8
  %817 = and i8 %816, 1
  %818 = xor i8 %817, 1
  %819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %818, i8* %819, align 1, !tbaa !2446
  %820 = xor i32 %809, 1
  %821 = xor i32 %820, %810
  %822 = lshr i32 %821, 4
  %823 = trunc i32 %822 to i8
  %824 = and i8 %823, 1
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %824, i8* %825, align 1, !tbaa !2447
  %826 = icmp eq i32 %810, 0
  %827 = zext i1 %826 to i8
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %827, i8* %828, align 1, !tbaa !2448
  %829 = lshr i32 %810, 31
  %830 = trunc i32 %829 to i8
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %830, i8* %831, align 1, !tbaa !2449
  %832 = lshr i32 %809, 31
  %833 = xor i32 %829, %832
  %834 = add nuw nsw i32 %833, %832
  %835 = icmp eq i32 %834, 2
  %836 = zext i1 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %836, i8* %837, align 1, !tbaa !2450
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 44
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 6
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 6
  store i64 %843, i64* %PC
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %845 = load i8, i8* %844, align 1, !tbaa !2448
  %846 = icmp eq i8 %845, 0
  %847 = zext i1 %846 to i8
  store i8 %847, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %849 = select i1 %846, i64 %839, i64 %841
  store i64 %849, i64* %848, align 8, !tbaa !2428
  %850 = load i8, i8* %BRANCH_TAKEN
  %851 = icmp eq i8 %850, 1
  %852 = load i64, i64* %RBP
  br i1 %851, label %block_4016c3, label %block_40169d

block_401786:                                     ; preds = %block_40177b
  %853 = load i64, i64* %RAX
  %854 = load i32, i32* %EAX
  %855 = zext i32 %854 to i64
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 2
  store i64 %857, i64* %PC
  %858 = xor i64 %855, %853
  %859 = trunc i64 %858 to i32
  %860 = and i64 %858, 4294967295
  store i64 %860, i64* %RAX, align 8, !tbaa !2428
  %861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %861, align 1, !tbaa !2432
  %862 = and i32 %859, 255
  %863 = call i32 @llvm.ctpop.i32(i32 %862) #16
  %864 = trunc i32 %863 to i8
  %865 = and i8 %864, 1
  %866 = xor i8 %865, 1
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %866, i8* %867, align 1, !tbaa !2446
  %868 = icmp eq i32 %859, 0
  %869 = zext i1 %868 to i8
  %870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %869, i8* %870, align 1, !tbaa !2448
  %871 = lshr i32 %859, 31
  %872 = trunc i32 %871 to i8
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %872, i8* %873, align 1, !tbaa !2449
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %874, align 1, !tbaa !2450
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %875, align 1, !tbaa !2447
  %876 = load i32, i32* %EAX
  %877 = zext i32 %876 to i64
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 2
  store i64 %879, i64* %PC
  %880 = and i64 %877, 4294967295
  store i64 %880, i64* %RCX, align 8, !tbaa !2428
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 32
  %883 = load i64, i64* %PC
  %884 = add i64 %883, 4
  store i64 %884, i64* %PC
  %885 = inttoptr i64 %882 to i64*
  %886 = load i64, i64* %885
  store i64 %886, i64* %RDX, align 8, !tbaa !2428
  %887 = load i64, i64* %RBP
  %888 = sub i64 %887, 8
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 4
  store i64 %890, i64* %PC
  %891 = inttoptr i64 %888 to i64*
  %892 = load i64, i64* %891
  store i64 %892, i64* %RSI, align 8, !tbaa !2428
  %893 = load i64, i64* %RSI
  %894 = add i64 %893, 424
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 7
  store i64 %896, i64* %PC
  %897 = inttoptr i64 %894 to i64*
  %898 = load i64, i64* %897
  store i64 %898, i64* %RDI, align 8, !tbaa !2428
  %899 = load i64, i64* %RDI
  %900 = load i64, i64* %RDX
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 3
  store i64 %902, i64* %PC
  %903 = sub i64 %899, %900
  store i64 %903, i64* %RDI, align 8, !tbaa !2428
  %904 = icmp ult i64 %899, %900
  %905 = zext i1 %904 to i8
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %905, i8* %906, align 1, !tbaa !2432
  %907 = trunc i64 %903 to i32
  %908 = and i32 %907, 255
  %909 = call i32 @llvm.ctpop.i32(i32 %908) #16
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %912, i8* %913, align 1, !tbaa !2446
  %914 = xor i64 %900, %899
  %915 = xor i64 %914, %903
  %916 = lshr i64 %915, 4
  %917 = trunc i64 %916 to i8
  %918 = and i8 %917, 1
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %918, i8* %919, align 1, !tbaa !2447
  %920 = icmp eq i64 %903, 0
  %921 = zext i1 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %921, i8* %922, align 1, !tbaa !2448
  %923 = lshr i64 %903, 63
  %924 = trunc i64 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %924, i8* %925, align 1, !tbaa !2449
  %926 = lshr i64 %899, 63
  %927 = lshr i64 %900, 63
  %928 = xor i64 %927, %926
  %929 = xor i64 %923, %926
  %930 = add nuw nsw i64 %929, %928
  %931 = icmp eq i64 %930, 2
  %932 = zext i1 %931 to i8
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %932, i8* %933, align 1, !tbaa !2450
  %934 = load i64, i64* %RSI
  %935 = add i64 %934, 424
  %936 = load i64, i64* %RDI
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 7
  store i64 %938, i64* %PC
  %939 = inttoptr i64 %935 to i64*
  store i64 %936, i64* %939
  %940 = load i64, i64* %RBP
  %941 = sub i64 %940, 32
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 4
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to i64*
  %945 = load i64, i64* %944
  store i64 %945, i64* %RDX, align 8, !tbaa !2428
  %946 = load i64, i64* %RBP
  %947 = sub i64 %946, 8
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 4
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %947 to i64*
  %951 = load i64, i64* %950
  store i64 %951, i64* %RSI, align 8, !tbaa !2428
  %952 = load i64, i64* %RSI
  %953 = add i64 %952, 440
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 7
  store i64 %955, i64* %PC
  %956 = inttoptr i64 %953 to i64*
  %957 = load i64, i64* %956
  store i64 %957, i64* %RDI, align 8, !tbaa !2428
  %958 = load i64, i64* %RDI
  %959 = load i64, i64* %RDX
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 3
  store i64 %961, i64* %PC
  %962 = sub i64 %958, %959
  store i64 %962, i64* %RDI, align 8, !tbaa !2428
  %963 = icmp ult i64 %958, %959
  %964 = zext i1 %963 to i8
  %965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %964, i8* %965, align 1, !tbaa !2432
  %966 = trunc i64 %962 to i32
  %967 = and i32 %966, 255
  %968 = call i32 @llvm.ctpop.i32(i32 %967) #16
  %969 = trunc i32 %968 to i8
  %970 = and i8 %969, 1
  %971 = xor i8 %970, 1
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %971, i8* %972, align 1, !tbaa !2446
  %973 = xor i64 %959, %958
  %974 = xor i64 %973, %962
  %975 = lshr i64 %974, 4
  %976 = trunc i64 %975 to i8
  %977 = and i8 %976, 1
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %977, i8* %978, align 1, !tbaa !2447
  %979 = icmp eq i64 %962, 0
  %980 = zext i1 %979 to i8
  %981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %980, i8* %981, align 1, !tbaa !2448
  %982 = lshr i64 %962, 63
  %983 = trunc i64 %982 to i8
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %983, i8* %984, align 1, !tbaa !2449
  %985 = lshr i64 %958, 63
  %986 = lshr i64 %959, 63
  %987 = xor i64 %986, %985
  %988 = xor i64 %982, %985
  %989 = add nuw nsw i64 %988, %987
  %990 = icmp eq i64 %989, 2
  %991 = zext i1 %990 to i8
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %991, i8* %992, align 1, !tbaa !2450
  %993 = load i64, i64* %RSI
  %994 = add i64 %993, 440
  %995 = load i64, i64* %RDI
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 7
  store i64 %997, i64* %PC
  %998 = inttoptr i64 %994 to i64*
  store i64 %995, i64* %998
  %999 = load i64, i64* %RBP
  %1000 = sub i64 %999, 32
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC
  %1003 = inttoptr i64 %1000 to i64*
  %1004 = load i64, i64* %1003
  store i64 %1004, i64* %RDX, align 8, !tbaa !2428
  %1005 = load i64, i64* %RBP
  %1006 = sub i64 %1005, 8
  %1007 = load i64, i64* %PC
  %1008 = add i64 %1007, 4
  store i64 %1008, i64* %PC
  %1009 = inttoptr i64 %1006 to i64*
  %1010 = load i64, i64* %1009
  store i64 %1010, i64* %RSI, align 8, !tbaa !2428
  %1011 = load i64, i64* %RSI
  %1012 = add i64 %1011, 576
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 7
  store i64 %1014, i64* %PC
  %1015 = inttoptr i64 %1012 to i64*
  %1016 = load i64, i64* %1015
  store i64 %1016, i64* %RDI, align 8, !tbaa !2428
  %1017 = load i64, i64* %RCX
  %1018 = load i64, i64* %RDX
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 3
  store i64 %1020, i64* %PC
  %1021 = sub i64 %1017, %1018
  store i64 %1021, i64* %RCX, align 8, !tbaa !2428
  %1022 = icmp ult i64 %1017, %1018
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1023, i8* %1024, align 1, !tbaa !2432
  %1025 = trunc i64 %1021 to i32
  %1026 = and i32 %1025, 255
  %1027 = call i32 @llvm.ctpop.i32(i32 %1026) #16
  %1028 = trunc i32 %1027 to i8
  %1029 = and i8 %1028, 1
  %1030 = xor i8 %1029, 1
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1030, i8* %1031, align 1, !tbaa !2446
  %1032 = xor i64 %1018, %1017
  %1033 = xor i64 %1032, %1021
  %1034 = lshr i64 %1033, 4
  %1035 = trunc i64 %1034 to i8
  %1036 = and i8 %1035, 1
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1036, i8* %1037, align 1, !tbaa !2447
  %1038 = icmp eq i64 %1021, 0
  %1039 = zext i1 %1038 to i8
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1039, i8* %1040, align 1, !tbaa !2448
  %1041 = lshr i64 %1021, 63
  %1042 = trunc i64 %1041 to i8
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1042, i8* %1043, align 1, !tbaa !2449
  %1044 = lshr i64 %1017, 63
  %1045 = lshr i64 %1018, 63
  %1046 = xor i64 %1045, %1044
  %1047 = xor i64 %1041, %1044
  %1048 = add nuw nsw i64 %1047, %1046
  %1049 = icmp eq i64 %1048, 2
  %1050 = zext i1 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1050, i8* %1051, align 1, !tbaa !2450
  %1052 = load i64, i64* %RCX
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 4
  store i64 %1054, i64* %PC
  %1055 = shl i64 %1052, 5
  %1056 = icmp slt i64 %1055, 0
  %1057 = shl i64 %1055, 1
  store i64 %1057, i64* %RCX, align 8, !tbaa !2428
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1059 = zext i1 %1056 to i8
  store i8 %1059, i8* %1058, align 1, !tbaa !2451
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1061 = trunc i64 %1057 to i32
  %1062 = and i32 %1061, 254
  %1063 = call i32 @llvm.ctpop.i32(i32 %1062) #16
  %1064 = trunc i32 %1063 to i8
  %1065 = and i8 %1064, 1
  %1066 = xor i8 %1065, 1
  store i8 %1066, i8* %1060, align 1, !tbaa !2451
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1067, align 1, !tbaa !2451
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1069 = icmp eq i64 %1057, 0
  %1070 = zext i1 %1069 to i8
  store i8 %1070, i8* %1068, align 1, !tbaa !2451
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1072 = lshr i64 %1057, 63
  %1073 = trunc i64 %1072 to i8
  store i8 %1073, i8* %1071, align 1, !tbaa !2451
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1074, align 1, !tbaa !2451
  %1075 = load i64, i64* %RDI
  %1076 = load i64, i64* %RCX
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 3
  store i64 %1078, i64* %PC
  %1079 = add i64 %1076, %1075
  store i64 %1079, i64* %RDI, align 8, !tbaa !2428
  %1080 = icmp ult i64 %1079, %1075
  %1081 = icmp ult i64 %1079, %1076
  %1082 = or i1 %1080, %1081
  %1083 = zext i1 %1082 to i8
  %1084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1083, i8* %1084, align 1, !tbaa !2432
  %1085 = trunc i64 %1079 to i32
  %1086 = and i32 %1085, 255
  %1087 = call i32 @llvm.ctpop.i32(i32 %1086) #16
  %1088 = trunc i32 %1087 to i8
  %1089 = and i8 %1088, 1
  %1090 = xor i8 %1089, 1
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1090, i8* %1091, align 1, !tbaa !2446
  %1092 = xor i64 %1076, %1075
  %1093 = xor i64 %1092, %1079
  %1094 = lshr i64 %1093, 4
  %1095 = trunc i64 %1094 to i8
  %1096 = and i8 %1095, 1
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1096, i8* %1097, align 1, !tbaa !2447
  %1098 = icmp eq i64 %1079, 0
  %1099 = zext i1 %1098 to i8
  %1100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1099, i8* %1100, align 1, !tbaa !2448
  %1101 = lshr i64 %1079, 63
  %1102 = trunc i64 %1101 to i8
  %1103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1102, i8* %1103, align 1, !tbaa !2449
  %1104 = lshr i64 %1075, 63
  %1105 = lshr i64 %1076, 63
  %1106 = xor i64 %1101, %1104
  %1107 = xor i64 %1101, %1105
  %1108 = add nuw nsw i64 %1106, %1107
  %1109 = icmp eq i64 %1108, 2
  %1110 = zext i1 %1109 to i8
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1110, i8* %1111, align 1, !tbaa !2450
  %1112 = load i64, i64* %RSI
  %1113 = add i64 %1112, 576
  %1114 = load i64, i64* %RDI
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 7
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1113 to i64*
  store i64 %1114, i64* %1117
  %1118 = load i64, i64* %RBP
  %1119 = sub i64 %1118, 32
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 4
  store i64 %1121, i64* %PC
  %1122 = inttoptr i64 %1119 to i64*
  %1123 = load i64, i64* %1122
  store i64 %1123, i64* %RCX, align 8, !tbaa !2428
  %1124 = load i64, i64* %RBP
  %1125 = sub i64 %1124, 8
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 4
  store i64 %1127, i64* %PC
  %1128 = inttoptr i64 %1125 to i64*
  %1129 = load i64, i64* %1128
  store i64 %1129, i64* %RDX, align 8, !tbaa !2428
  %1130 = load i64, i64* %RCX
  %1131 = load i64, i64* %RDX
  %1132 = add i64 %1131, 448
  %1133 = load i64, i64* %PC
  %1134 = add i64 %1133, 7
  store i64 %1134, i64* %PC
  %1135 = inttoptr i64 %1132 to i64*
  %1136 = load i64, i64* %1135
  %1137 = add i64 %1136, %1130
  store i64 %1137, i64* %RCX, align 8, !tbaa !2428
  %1138 = icmp ult i64 %1137, %1130
  %1139 = icmp ult i64 %1137, %1136
  %1140 = or i1 %1138, %1139
  %1141 = zext i1 %1140 to i8
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1141, i8* %1142, align 1, !tbaa !2432
  %1143 = trunc i64 %1137 to i32
  %1144 = and i32 %1143, 255
  %1145 = call i32 @llvm.ctpop.i32(i32 %1144) #16
  %1146 = trunc i32 %1145 to i8
  %1147 = and i8 %1146, 1
  %1148 = xor i8 %1147, 1
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1148, i8* %1149, align 1, !tbaa !2446
  %1150 = xor i64 %1136, %1130
  %1151 = xor i64 %1150, %1137
  %1152 = lshr i64 %1151, 4
  %1153 = trunc i64 %1152 to i8
  %1154 = and i8 %1153, 1
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1154, i8* %1155, align 1, !tbaa !2447
  %1156 = icmp eq i64 %1137, 0
  %1157 = zext i1 %1156 to i8
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1157, i8* %1158, align 1, !tbaa !2448
  %1159 = lshr i64 %1137, 63
  %1160 = trunc i64 %1159 to i8
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1160, i8* %1161, align 1, !tbaa !2449
  %1162 = lshr i64 %1130, 63
  %1163 = lshr i64 %1136, 63
  %1164 = xor i64 %1159, %1162
  %1165 = xor i64 %1159, %1163
  %1166 = add nuw nsw i64 %1164, %1165
  %1167 = icmp eq i64 %1166, 2
  %1168 = zext i1 %1167 to i8
  %1169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1168, i8* %1169, align 1, !tbaa !2450
  %1170 = load i64, i64* %RDX
  %1171 = add i64 %1170, 448
  %1172 = load i64, i64* %RCX
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 7
  store i64 %1174, i64* %PC
  %1175 = inttoptr i64 %1171 to i64*
  store i64 %1172, i64* %1175
  %1176 = load i64, i64* %RBP
  %1177 = sub i64 %1176, 8
  %1178 = load i64, i64* %PC
  %1179 = add i64 %1178, 4
  store i64 %1179, i64* %PC
  %1180 = inttoptr i64 %1177 to i64*
  %1181 = load i64, i64* %1180
  store i64 %1181, i64* %RDI, align 8, !tbaa !2428
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 922
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 5
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 5
  store i64 %1187, i64* %PC
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1189 = load i64, i64* %1188, align 8, !tbaa !2428
  %1190 = add i64 %1189, -8
  %1191 = inttoptr i64 %1190 to i64*
  store i64 %1185, i64* %1191
  store i64 %1190, i64* %1188, align 8, !tbaa !2428
  %1192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1183, i64* %1192, align 8, !tbaa !2428
  %1193 = load i64, i64* %PC
  %1194 = call %struct.Memory* @sub_401b90_refresh_neighbour_lists_renamed_(%struct.State* %0, i64 %1193, %struct.Memory* %MEMORY.4)
  br label %block_4017fb

block_40167e:                                     ; preds = %block_401760, %block_401633
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_401633 ], [ %MEMORY.5, %block_401760 ]
  %1195 = load i64, i64* %RBP
  %1196 = sub i64 %1195, 56
  %1197 = load i64, i64* %PC
  %1198 = add i64 %1197, 4
  store i64 %1198, i64* %PC
  %1199 = inttoptr i64 %1196 to i64*
  %1200 = load i64, i64* %1199
  store i64 %1200, i64* %RAX, align 8, !tbaa !2428
  %1201 = load i64, i64* %RBP
  %1202 = sub i64 %1201, 64
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 4
  store i64 %1204, i64* %PC
  %1205 = inttoptr i64 %1202 to i64*
  %1206 = load i64, i64* %1205
  store i64 %1206, i64* %RCX, align 8, !tbaa !2428
  %1207 = load i64, i64* %RAX
  %1208 = load i64, i64* %RCX
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 3
  store i64 %1210, i64* %PC
  %1211 = sub i64 %1207, %1208
  %1212 = icmp ult i64 %1207, %1208
  %1213 = zext i1 %1212 to i8
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1213, i8* %1214, align 1, !tbaa !2432
  %1215 = trunc i64 %1211 to i32
  %1216 = and i32 %1215, 255
  %1217 = call i32 @llvm.ctpop.i32(i32 %1216) #16
  %1218 = trunc i32 %1217 to i8
  %1219 = and i8 %1218, 1
  %1220 = xor i8 %1219, 1
  %1221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1220, i8* %1221, align 1, !tbaa !2446
  %1222 = xor i64 %1208, %1207
  %1223 = xor i64 %1222, %1211
  %1224 = lshr i64 %1223, 4
  %1225 = trunc i64 %1224 to i8
  %1226 = and i8 %1225, 1
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1226, i8* %1227, align 1, !tbaa !2447
  %1228 = icmp eq i64 %1211, 0
  %1229 = zext i1 %1228 to i8
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1229, i8* %1230, align 1, !tbaa !2448
  %1231 = lshr i64 %1211, 63
  %1232 = trunc i64 %1231 to i8
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1232, i8* %1233, align 1, !tbaa !2449
  %1234 = lshr i64 %1207, 63
  %1235 = lshr i64 %1208, 63
  %1236 = xor i64 %1235, %1234
  %1237 = xor i64 %1231, %1234
  %1238 = add nuw nsw i64 %1237, %1236
  %1239 = icmp eq i64 %1238, 2
  %1240 = zext i1 %1239 to i8
  %1241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1240, i8* %1241, align 1, !tbaa !2450
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 237
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 6
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 6
  store i64 %1247, i64* %PC
  %1248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1249 = load i8, i8* %1248, align 1, !tbaa !2432
  %1250 = icmp eq i8 %1249, 0
  %1251 = zext i1 %1250 to i8
  store i8 %1251, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1253 = select i1 %1250, i64 %1243, i64 %1245
  store i64 %1253, i64* %1252, align 8, !tbaa !2428
  %1254 = load i8, i8* %BRANCH_TAKEN
  %1255 = icmp eq i8 %1254, 1
  br i1 %1255, label %block_401776, label %block_40168f

block_40177b:                                     ; preds = %block_40161f, %block_401776
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.3, %block_401776 ], [ %2, %block_40161f ]
  %1256 = load i64, i64* %RBP
  %1257 = sub i64 %1256, 32
  %1258 = load i64, i64* %PC
  %1259 = add i64 %1258, 5
  store i64 %1259, i64* %PC
  %1260 = inttoptr i64 %1257 to i64*
  %1261 = load i64, i64* %1260
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1262, align 1, !tbaa !2432
  %1263 = trunc i64 %1261 to i32
  %1264 = and i32 %1263, 255
  %1265 = call i32 @llvm.ctpop.i32(i32 %1264) #16
  %1266 = trunc i32 %1265 to i8
  %1267 = and i8 %1266, 1
  %1268 = xor i8 %1267, 1
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1268, i8* %1269, align 1, !tbaa !2446
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1270, align 1, !tbaa !2447
  %1271 = icmp eq i64 %1261, 0
  %1272 = zext i1 %1271 to i8
  %1273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1272, i8* %1273, align 1, !tbaa !2448
  %1274 = lshr i64 %1261, 63
  %1275 = trunc i64 %1274 to i8
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1275, i8* %1276, align 1, !tbaa !2449
  %1277 = lshr i64 %1261, 63
  %1278 = xor i64 %1274, %1277
  %1279 = add nuw nsw i64 %1278, %1277
  %1280 = icmp eq i64 %1279, 2
  %1281 = zext i1 %1280 to i8
  %1282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1281, i8* %1282, align 1, !tbaa !2450
  %1283 = load i64, i64* %PC
  %1284 = add i64 %1283, 123
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 6
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 6
  store i64 %1288, i64* %PC
  %1289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1290 = load i8, i8* %1289, align 1, !tbaa !2448
  store i8 %1290, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1292 = icmp ne i8 %1290, 0
  %1293 = select i1 %1292, i64 %1284, i64 %1286
  store i64 %1293, i64* %1291, align 8, !tbaa !2428
  %1294 = load i8, i8* %BRANCH_TAKEN
  %1295 = icmp eq i8 %1294, 1
  br i1 %1295, label %block_4017fb, label %block_401786

block_4016c3:                                     ; preds = %block_40168f
  %1296 = sub i64 %852, 40
  %1297 = load i64, i64* %PC
  %1298 = add i64 %1297, 8
  store i64 %1298, i64* %PC
  %1299 = inttoptr i64 %1296 to i64*
  store i64 -2, i64* %1299
  %1300 = load i64, i64* %RBP
  %1301 = sub i64 %1300, 56
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 4
  store i64 %1303, i64* %PC
  %1304 = inttoptr i64 %1301 to i64*
  %1305 = load i64, i64* %1304
  store i64 %1305, i64* %RAX, align 8, !tbaa !2428
  %1306 = load i64, i64* %RAX
  %1307 = add i64 %1306, 24
  %1308 = load i64, i64* %PC
  %1309 = add i64 %1308, 4
  store i64 %1309, i64* %PC
  %1310 = inttoptr i64 %1307 to i32*
  %1311 = load i32, i32* %1310
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1312, align 1, !tbaa !2432
  %1313 = and i32 %1311, 255
  %1314 = call i32 @llvm.ctpop.i32(i32 %1313) #16
  %1315 = trunc i32 %1314 to i8
  %1316 = and i8 %1315, 1
  %1317 = xor i8 %1316, 1
  %1318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1317, i8* %1318, align 1, !tbaa !2446
  %1319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1319, align 1, !tbaa !2447
  %1320 = icmp eq i32 %1311, 0
  %1321 = zext i1 %1320 to i8
  %1322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1321, i8* %1322, align 1, !tbaa !2448
  %1323 = lshr i32 %1311, 31
  %1324 = trunc i32 %1323 to i8
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1324, i8* %1325, align 1, !tbaa !2449
  %1326 = lshr i32 %1311, 31
  %1327 = xor i32 %1323, %1326
  %1328 = add nuw nsw i32 %1327, %1326
  %1329 = icmp eq i32 %1328, 2
  %1330 = zext i1 %1329 to i8
  %1331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1330, i8* %1331, align 1, !tbaa !2450
  %1332 = load i64, i64* %PC
  %1333 = add i64 %1332, 70
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 6
  %1336 = load i64, i64* %PC
  %1337 = add i64 %1336, 6
  store i64 %1337, i64* %PC
  %1338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1339 = load i8, i8* %1338, align 1, !tbaa !2448
  %1340 = icmp eq i8 %1339, 0
  %1341 = zext i1 %1340 to i8
  store i8 %1341, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1343 = select i1 %1340, i64 %1333, i64 %1335
  store i64 %1343, i64* %1342, align 8, !tbaa !2428
  %1344 = load i8, i8* %BRANCH_TAKEN
  %1345 = icmp eq i8 %1344, 1
  br i1 %1345, label %block_401719, label %block_4016d9

block_401760:                                     ; preds = %block_40172c, %block_40173d
  %MEMORY.5 = phi %struct.Memory* [ %192, %block_40173d ], [ %MEMORY.1, %block_40172c ]
  %1346 = load i64, i64* %PC
  %1347 = add i64 %1346, 5
  %1348 = load i64, i64* %PC
  %1349 = add i64 %1348, 5
  store i64 %1349, i64* %PC
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1347, i64* %1350, align 8, !tbaa !2428
  %1351 = load i64, i64* %RBP
  %1352 = sub i64 %1351, 56
  %1353 = load i64, i64* %PC
  %1354 = add i64 %1353, 4
  store i64 %1354, i64* %PC
  %1355 = inttoptr i64 %1352 to i64*
  %1356 = load i64, i64* %1355
  store i64 %1356, i64* %RAX, align 8, !tbaa !2428
  %1357 = load i64, i64* %RAX
  %1358 = load i64, i64* %PC
  %1359 = add i64 %1358, 4
  store i64 %1359, i64* %PC
  %1360 = add i64 64, %1357
  store i64 %1360, i64* %RAX, align 8, !tbaa !2428
  %1361 = icmp ult i64 %1360, %1357
  %1362 = icmp ult i64 %1360, 64
  %1363 = or i1 %1361, %1362
  %1364 = zext i1 %1363 to i8
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1364, i8* %1365, align 1, !tbaa !2432
  %1366 = trunc i64 %1360 to i32
  %1367 = and i32 %1366, 255
  %1368 = call i32 @llvm.ctpop.i32(i32 %1367) #16
  %1369 = trunc i32 %1368 to i8
  %1370 = and i8 %1369, 1
  %1371 = xor i8 %1370, 1
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1371, i8* %1372, align 1, !tbaa !2446
  %1373 = xor i64 64, %1357
  %1374 = xor i64 %1373, %1360
  %1375 = lshr i64 %1374, 4
  %1376 = trunc i64 %1375 to i8
  %1377 = and i8 %1376, 1
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1377, i8* %1378, align 1, !tbaa !2447
  %1379 = icmp eq i64 %1360, 0
  %1380 = zext i1 %1379 to i8
  %1381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1380, i8* %1381, align 1, !tbaa !2448
  %1382 = lshr i64 %1360, 63
  %1383 = trunc i64 %1382 to i8
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1383, i8* %1384, align 1, !tbaa !2449
  %1385 = lshr i64 %1357, 63
  %1386 = xor i64 %1382, %1385
  %1387 = add nuw nsw i64 %1386, %1382
  %1388 = icmp eq i64 %1387, 2
  %1389 = zext i1 %1388 to i8
  %1390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1389, i8* %1390, align 1, !tbaa !2450
  %1391 = load i64, i64* %RBP
  %1392 = sub i64 %1391, 56
  %1393 = load i64, i64* %RAX
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 4
  store i64 %1395, i64* %PC
  %1396 = inttoptr i64 %1392 to i64*
  store i64 %1393, i64* %1396
  %1397 = load i64, i64* %PC
  %1398 = sub i64 %1397, 243
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 5
  store i64 %1400, i64* %PC
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1398, i64* %1401, align 8, !tbaa !2428
  br label %block_40167e

block_401704:                                     ; preds = %block_4016d9
  %1402 = add i64 %443, 16
  %1403 = load i64, i64* %PC
  %1404 = add i64 %1403, 4
  store i64 %1404, i64* %PC
  %1405 = inttoptr i64 %1402 to i64*
  %1406 = load i64, i64* %1405
  store i64 %1406, i64* %RCX, align 8, !tbaa !2428
  %1407 = load i64, i64* %RCX
  %1408 = add i64 %1407, 48
  %1409 = load i64, i64* %RAX
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 4
  store i64 %1411, i64* %PC
  %1412 = inttoptr i64 %1408 to i64*
  store i64 %1409, i64* %1412
  br label %block_401714

block_401714:                                     ; preds = %block_401704, %block_4016ef
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.3, %block_401704 ], [ %MEMORY.3, %block_4016ef ]
  %1413 = load i64, i64* %PC
  %1414 = add i64 %1413, 5
  %1415 = load i64, i64* %PC
  %1416 = add i64 %1415, 5
  store i64 %1416, i64* %PC
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1414, i64* %1417, align 8, !tbaa !2428
  br label %block_401719
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007f0__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605ff0__got_type* @seg_605ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400802, label %block_400800

block_400800:                                     ; preds = %block_4007f0
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_400802

block_400802:                                     ; preds = %block_400800, %block_4007f0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4007f0 ], [ %92, %block_400800 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400930__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400930:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402fd0_primal_net_simplex(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402fd0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 27
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %R13D = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 3
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RBX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 5
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RCX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 7
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RDX = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 9
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RSI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 11
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RDI = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 13
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RSP = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 15
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %RBP = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 17
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %R8 = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 19
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R9 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 21
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R10 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 23
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %R11 = bitcast %union.anon* %57 to i64*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %59 = getelementptr inbounds %struct.GPR, %struct.GPR* %58, i32 0, i32 25
  %60 = getelementptr inbounds %struct.Reg, %struct.Reg* %59, i32 0, i32 0
  %R12 = bitcast %union.anon* %60 to i64*
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %62 = getelementptr inbounds %struct.GPR, %struct.GPR* %61, i32 0, i32 27
  %63 = getelementptr inbounds %struct.Reg, %struct.Reg* %62, i32 0, i32 0
  %R13 = bitcast %union.anon* %63 to i64*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %65 = getelementptr inbounds %struct.GPR, %struct.GPR* %64, i32 0, i32 29
  %66 = getelementptr inbounds %struct.Reg, %struct.Reg* %65, i32 0, i32 0
  %R14 = bitcast %union.anon* %66 to i64*
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 31
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0
  %R15 = bitcast %union.anon* %69 to i64*
  %70 = load i64, i64* %RBP
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 1
  store i64 %72, i64* %PC
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %74 = load i64, i64* %73, align 8, !tbaa !2428
  %75 = add i64 %74, -8
  %76 = inttoptr i64 %75 to i64*
  store i64 %70, i64* %76
  store i64 %75, i64* %73, align 8, !tbaa !2428
  %77 = load i64, i64* %RSP
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 3
  store i64 %79, i64* %PC
  store i64 %77, i64* %RBP, align 8, !tbaa !2428
  %80 = load i64, i64* %R15
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 2
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, -8
  %86 = inttoptr i64 %85 to i64*
  store i64 %80, i64* %86
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %87 = load i64, i64* %R14
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 2
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %91 = load i64, i64* %90, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %87, i64* %93
  store i64 %92, i64* %90, align 8, !tbaa !2428
  %94 = load i64, i64* %R13
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 2
  store i64 %96, i64* %PC
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %98 = load i64, i64* %97, align 8, !tbaa !2428
  %99 = add i64 %98, -8
  %100 = inttoptr i64 %99 to i64*
  store i64 %94, i64* %100
  store i64 %99, i64* %97, align 8, !tbaa !2428
  %101 = load i64, i64* %R12
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 2
  store i64 %103, i64* %PC
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %105 = load i64, i64* %104, align 8, !tbaa !2428
  %106 = add i64 %105, -8
  %107 = inttoptr i64 %106 to i64*
  store i64 %101, i64* %107
  store i64 %106, i64* %104, align 8, !tbaa !2428
  %108 = load i64, i64* %RBX
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 1
  store i64 %110, i64* %PC
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %112 = load i64, i64* %111, align 8, !tbaa !2428
  %113 = add i64 %112, -8
  %114 = inttoptr i64 %113 to i64*
  store i64 %108, i64* %114
  store i64 %113, i64* %111, align 8, !tbaa !2428
  %115 = load i64, i64* %RSP
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 7
  store i64 %117, i64* %PC
  %118 = sub i64 %115, 248
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %119 = icmp ult i64 %115, 248
  %120 = zext i1 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %120, i8* %121, align 1, !tbaa !2432
  %122 = trunc i64 %118 to i32
  %123 = and i32 %122, 255
  %124 = call i32 @llvm.ctpop.i32(i32 %123) #16
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = xor i8 %126, 1
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %127, i8* %128, align 1, !tbaa !2446
  %129 = xor i64 248, %115
  %130 = xor i64 %129, %118
  %131 = lshr i64 %130, 4
  %132 = trunc i64 %131 to i8
  %133 = and i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %133, i8* %134, align 1, !tbaa !2447
  %135 = icmp eq i64 %118, 0
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %136, i8* %137, align 1, !tbaa !2448
  %138 = lshr i64 %118, 63
  %139 = trunc i64 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %139, i8* %140, align 1, !tbaa !2449
  %141 = lshr i64 %115, 63
  %142 = xor i64 %138, %141
  %143 = add nuw nsw i64 %142, %141
  %144 = icmp eq i64 %143, 2
  %145 = zext i1 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %145, i8* %146, align 1, !tbaa !2450
  %147 = load i64, i64* %RBP
  %148 = sub i64 %147, 48
  %149 = load i64, i64* %RDI
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %148 to i64*
  store i64 %149, i64* %152
  %153 = load i64, i64* %RBP
  %154 = sub i64 %153, 72
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 8
  store i64 %156, i64* %PC
  %157 = inttoptr i64 %154 to i64*
  store i64 0, i64* %157
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 48
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i64*
  %163 = load i64, i64* %162
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  %164 = load i64, i64* %RDI
  %165 = add i64 %164, 568
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 7
  store i64 %167, i64* %PC
  %168 = inttoptr i64 %165 to i64*
  %169 = load i64, i64* %168
  store i64 %169, i64* %RDI, align 8, !tbaa !2428
  %170 = load i64, i64* %RBP
  %171 = sub i64 %170, 152
  %172 = load i64, i64* %RDI
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 7
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %171 to i64*
  store i64 %172, i64* %175
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 48
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i64*
  %181 = load i64, i64* %180
  store i64 %181, i64* %RDI, align 8, !tbaa !2428
  %182 = load i64, i64* %RDI
  %183 = add i64 %182, 576
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 7
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %183 to i64*
  %187 = load i64, i64* %186
  store i64 %187, i64* %RDI, align 8, !tbaa !2428
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 160
  %190 = load i64, i64* %RDI
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 7
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %189 to i64*
  store i64 %190, i64* %193
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 48
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 4
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to i64*
  %199 = load i64, i64* %198
  store i64 %199, i64* %RDI, align 8, !tbaa !2428
  %200 = load i64, i64* %RDI
  %201 = add i64 %200, 424
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 7
  store i64 %203, i64* %PC
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204
  store i64 %205, i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* %RBP
  %207 = sub i64 %206, 176
  %208 = load i64, i64* %RDI
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 7
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %207 to i64*
  store i64 %208, i64* %211
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 48
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 4
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %213 to i64*
  %217 = load i64, i64* %216
  store i64 %217, i64* %RDI, align 8, !tbaa !2428
  %218 = load i64, i64* %RDI
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 7
  store i64 %220, i64* %PC
  %221 = add i64 600, %218
  store i64 %221, i64* %RDI, align 8, !tbaa !2428
  %222 = icmp ult i64 %221, %218
  %223 = icmp ult i64 %221, 600
  %224 = or i1 %222, %223
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %225, i8* %226, align 1, !tbaa !2432
  %227 = trunc i64 %221 to i32
  %228 = and i32 %227, 255
  %229 = call i32 @llvm.ctpop.i32(i32 %228) #16
  %230 = trunc i32 %229 to i8
  %231 = and i8 %230, 1
  %232 = xor i8 %231, 1
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %232, i8* %233, align 1, !tbaa !2446
  %234 = xor i64 600, %218
  %235 = xor i64 %234, %221
  %236 = lshr i64 %235, 4
  %237 = trunc i64 %236 to i8
  %238 = and i8 %237, 1
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %238, i8* %239, align 1, !tbaa !2447
  %240 = icmp eq i64 %221, 0
  %241 = zext i1 %240 to i8
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %241, i8* %242, align 1, !tbaa !2448
  %243 = lshr i64 %221, 63
  %244 = trunc i64 %243 to i8
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %244, i8* %245, align 1, !tbaa !2449
  %246 = lshr i64 %218, 63
  %247 = xor i64 %243, %246
  %248 = add nuw nsw i64 %247, %243
  %249 = icmp eq i64 %248, 2
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %250, i8* %251, align 1, !tbaa !2450
  %252 = load i64, i64* %RBP
  %253 = sub i64 %252, 200
  %254 = load i64, i64* %RDI
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 7
  store i64 %256, i64* %PC
  %257 = inttoptr i64 %253 to i64*
  store i64 %254, i64* %257
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 48
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %259 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %RDI, align 8, !tbaa !2428
  %264 = load i64, i64* %RDI
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 7
  store i64 %266, i64* %PC
  %267 = add i64 608, %264
  store i64 %267, i64* %RDI, align 8, !tbaa !2428
  %268 = icmp ult i64 %267, %264
  %269 = icmp ult i64 %267, 608
  %270 = or i1 %268, %269
  %271 = zext i1 %270 to i8
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %271, i8* %272, align 1, !tbaa !2432
  %273 = trunc i64 %267 to i32
  %274 = and i32 %273, 255
  %275 = call i32 @llvm.ctpop.i32(i32 %274) #16
  %276 = trunc i32 %275 to i8
  %277 = and i8 %276, 1
  %278 = xor i8 %277, 1
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %278, i8* %279, align 1, !tbaa !2446
  %280 = xor i64 608, %264
  %281 = xor i64 %280, %267
  %282 = lshr i64 %281, 4
  %283 = trunc i64 %282 to i8
  %284 = and i8 %283, 1
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %284, i8* %285, align 1, !tbaa !2447
  %286 = icmp eq i64 %267, 0
  %287 = zext i1 %286 to i8
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %287, i8* %288, align 1, !tbaa !2448
  %289 = lshr i64 %267, 63
  %290 = trunc i64 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %290, i8* %291, align 1, !tbaa !2449
  %292 = lshr i64 %264, 63
  %293 = xor i64 %289, %292
  %294 = add nuw nsw i64 %293, %289
  %295 = icmp eq i64 %294, 2
  %296 = zext i1 %295 to i8
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %296, i8* %297, align 1, !tbaa !2450
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 208
  %300 = load i64, i64* %RDI
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 7
  store i64 %302, i64* %PC
  %303 = inttoptr i64 %299 to i64*
  store i64 %300, i64* %303
  %304 = load i64, i64* %RBP
  %305 = sub i64 %304, 48
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RDI, align 8, !tbaa !2428
  %310 = load i64, i64* %RDI
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 7
  store i64 %312, i64* %PC
  %313 = add i64 616, %310
  store i64 %313, i64* %RDI, align 8, !tbaa !2428
  %314 = icmp ult i64 %313, %310
  %315 = icmp ult i64 %313, 616
  %316 = or i1 %314, %315
  %317 = zext i1 %316 to i8
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %317, i8* %318, align 1, !tbaa !2432
  %319 = trunc i64 %313 to i32
  %320 = and i32 %319, 255
  %321 = call i32 @llvm.ctpop.i32(i32 %320) #16
  %322 = trunc i32 %321 to i8
  %323 = and i8 %322, 1
  %324 = xor i8 %323, 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %324, i8* %325, align 1, !tbaa !2446
  %326 = xor i64 616, %310
  %327 = xor i64 %326, %313
  %328 = lshr i64 %327, 4
  %329 = trunc i64 %328 to i8
  %330 = and i8 %329, 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %330, i8* %331, align 1, !tbaa !2447
  %332 = icmp eq i64 %313, 0
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %333, i8* %334, align 1, !tbaa !2448
  %335 = lshr i64 %313, 63
  %336 = trunc i64 %335 to i8
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %336, i8* %337, align 1, !tbaa !2449
  %338 = lshr i64 %310, 63
  %339 = xor i64 %335, %338
  %340 = add nuw nsw i64 %339, %335
  %341 = icmp eq i64 %340, 2
  %342 = zext i1 %341 to i8
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %342, i8* %343, align 1, !tbaa !2450
  %344 = load i64, i64* %RBP
  %345 = sub i64 %344, 216
  %346 = load i64, i64* %RDI
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 7
  store i64 %348, i64* %PC
  %349 = inttoptr i64 %345 to i64*
  store i64 %346, i64* %349
  br label %block_40305c

block_40306e:                                     ; preds = %block_40305c
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 730
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 5
  store i64 %353, i64* %PC
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %351, i64* %354, align 8, !tbaa !2428
  %355 = load i64, i64* %RBP
  %356 = sub i64 %355, 48
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 4
  store i64 %358, i64* %PC
  %359 = inttoptr i64 %356 to i64*
  %360 = load i64, i64* %359
  store i64 %360, i64* %RDI, align 8, !tbaa !2428
  %361 = load i64, i64* %PC
  %362 = sub i64 %361, 5836
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 5
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 5
  store i64 %366, i64* %PC
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %368 = load i64, i64* %367, align 8, !tbaa !2428
  %369 = add i64 %368, -8
  %370 = inttoptr i64 %369 to i64*
  store i64 %364, i64* %370
  store i64 %369, i64* %367, align 8, !tbaa !2428
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %362, i64* %371, align 8, !tbaa !2428
  %372 = load i64, i64* %PC
  %373 = call %struct.Memory* @sub_401c80_refresh_potential_renamed_(%struct.State* %0, i64 %372, %struct.Memory* %MEMORY.6)
  %374 = load i64, i64* %RBP
  %375 = sub i64 %374, 216
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 7
  store i64 %377, i64* %PC
  %378 = inttoptr i64 %375 to i64*
  %379 = load i64, i64* %378
  store i64 %379, i64* %RDI, align 8, !tbaa !2428
  %380 = load i64, i64* %RAX
  %381 = load i64, i64* %RDI
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 3
  store i64 %383, i64* %PC
  %384 = inttoptr i64 %381 to i64*
  %385 = load i64, i64* %384
  %386 = add i64 %385, %380
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = icmp ult i64 %386, %380
  %388 = icmp ult i64 %386, %385
  %389 = or i1 %387, %388
  %390 = zext i1 %389 to i8
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %390, i8* %391, align 1, !tbaa !2432
  %392 = trunc i64 %386 to i32
  %393 = and i32 %392, 255
  %394 = call i32 @llvm.ctpop.i32(i32 %393) #16
  %395 = trunc i32 %394 to i8
  %396 = and i8 %395, 1
  %397 = xor i8 %396, 1
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %397, i8* %398, align 1, !tbaa !2446
  %399 = xor i64 %385, %380
  %400 = xor i64 %399, %386
  %401 = lshr i64 %400, 4
  %402 = trunc i64 %401 to i8
  %403 = and i8 %402, 1
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %403, i8* %404, align 1, !tbaa !2447
  %405 = icmp eq i64 %386, 0
  %406 = zext i1 %405 to i8
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %406, i8* %407, align 1, !tbaa !2448
  %408 = lshr i64 %386, 63
  %409 = trunc i64 %408 to i8
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %409, i8* %410, align 1, !tbaa !2449
  %411 = lshr i64 %380, 63
  %412 = lshr i64 %385, 63
  %413 = xor i64 %408, %411
  %414 = xor i64 %408, %412
  %415 = add nuw nsw i64 %413, %414
  %416 = icmp eq i64 %415, 2
  %417 = zext i1 %416 to i8
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %417, i8* %418, align 1, !tbaa !2450
  %419 = load i64, i64* %RDI
  %420 = load i64, i64* %RAX
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 3
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %419 to i64*
  store i64 %420, i64* %423
  %424 = load i64, i64* %RBP
  %425 = sub i64 %424, 48
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 4
  store i64 %427, i64* %PC
  %428 = inttoptr i64 %425 to i64*
  %429 = load i64, i64* %428
  store i64 %429, i64* %RDI, align 8, !tbaa !2428
  %430 = load i64, i64* %PC
  %431 = sub i64 %430, 4594
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 5
  %434 = load i64, i64* %PC
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %437 = load i64, i64* %436, align 8, !tbaa !2428
  %438 = add i64 %437, -8
  %439 = inttoptr i64 %438 to i64*
  store i64 %433, i64* %439
  store i64 %438, i64* %436, align 8, !tbaa !2428
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %431, i64* %440, align 8, !tbaa !2428
  %441 = load i64, i64* %PC
  %442 = call %struct.Memory* @sub_402170_primal_feasible_renamed_(%struct.State* %0, i64 %441, %struct.Memory* %373)
  %443 = load i64, i64* %RBP
  %444 = sub i64 %443, 48
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 4
  store i64 %446, i64* %PC
  %447 = inttoptr i64 %444 to i64*
  %448 = load i64, i64* %447
  store i64 %448, i64* %RDI, align 8, !tbaa !2428
  %449 = load i64, i64* %RBP
  %450 = sub i64 %449, 224
  %451 = load i64, i64* %RAX
  %452 = load i64, i64* %PC
  %453 = add i64 %452, 7
  store i64 %453, i64* %PC
  %454 = inttoptr i64 %450 to i64*
  store i64 %451, i64* %454
  %455 = load i64, i64* %PC
  %456 = sub i64 %455, 4146
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 5
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 5
  store i64 %460, i64* %PC
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %462 = load i64, i64* %461, align 8, !tbaa !2428
  %463 = add i64 %462, -8
  %464 = inttoptr i64 %463 to i64*
  store i64 %458, i64* %464
  store i64 %463, i64* %461, align 8, !tbaa !2428
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %456, i64* %465, align 8, !tbaa !2428
  %466 = load i64, i64* %PC
  %467 = call %struct.Memory* @sub_402340_dual_feasible_renamed_(%struct.State* %0, i64 %466, %struct.Memory* %442)
  %468 = load i64, i64* %RCX
  %469 = load i32, i32* %ECX
  %470 = zext i32 %469 to i64
  %471 = load i64, i64* %PC
  %472 = add i64 %471, 2
  store i64 %472, i64* %PC
  %473 = xor i64 %470, %468
  %474 = trunc i64 %473 to i32
  %475 = and i64 %473, 4294967295
  store i64 %475, i64* %RCX, align 8, !tbaa !2428
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %476, align 1, !tbaa !2432
  %477 = and i32 %474, 255
  %478 = call i32 @llvm.ctpop.i32(i32 %477) #16
  %479 = trunc i32 %478 to i8
  %480 = and i8 %479, 1
  %481 = xor i8 %480, 1
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %481, i8* %482, align 1, !tbaa !2446
  %483 = icmp eq i32 %474, 0
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %484, i8* %485, align 1, !tbaa !2448
  %486 = lshr i32 %474, 31
  %487 = trunc i32 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %487, i8* %488, align 1, !tbaa !2449
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %489, align 1, !tbaa !2450
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %490, align 1, !tbaa !2447
  %491 = load i32, i32* %ECX
  %492 = zext i32 %491 to i64
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 2
  store i64 %494, i64* %PC
  %495 = and i64 %492, 4294967295
  store i64 %495, i64* %RDI, align 8, !tbaa !2428
  %496 = load i64, i64* %RBP
  %497 = sub i64 %496, 232
  %498 = load i64, i64* %RAX
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 7
  store i64 %500, i64* %PC
  %501 = inttoptr i64 %497 to i64*
  store i64 %498, i64* %501
  %502 = load i64, i64* %RDI
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 3
  store i64 %504, i64* %PC
  store i64 %502, i64* %RAX, align 8, !tbaa !2428
  %505 = load i64, i64* %RSP
  %506 = load i64, i64* %PC
  %507 = add i64 %506, 7
  store i64 %507, i64* %PC
  %508 = add i64 248, %505
  store i64 %508, i64* %RSP, align 8, !tbaa !2428
  %509 = icmp ult i64 %508, %505
  %510 = icmp ult i64 %508, 248
  %511 = or i1 %509, %510
  %512 = zext i1 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %512, i8* %513, align 1, !tbaa !2432
  %514 = trunc i64 %508 to i32
  %515 = and i32 %514, 255
  %516 = call i32 @llvm.ctpop.i32(i32 %515) #16
  %517 = trunc i32 %516 to i8
  %518 = and i8 %517, 1
  %519 = xor i8 %518, 1
  %520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %519, i8* %520, align 1, !tbaa !2446
  %521 = xor i64 248, %505
  %522 = xor i64 %521, %508
  %523 = lshr i64 %522, 4
  %524 = trunc i64 %523 to i8
  %525 = and i8 %524, 1
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %525, i8* %526, align 1, !tbaa !2447
  %527 = icmp eq i64 %508, 0
  %528 = zext i1 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %528, i8* %529, align 1, !tbaa !2448
  %530 = lshr i64 %508, 63
  %531 = trunc i64 %530 to i8
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %531, i8* %532, align 1, !tbaa !2449
  %533 = lshr i64 %505, 63
  %534 = xor i64 %530, %533
  %535 = add nuw nsw i64 %534, %530
  %536 = icmp eq i64 %535, 2
  %537 = zext i1 %536 to i8
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %537, i8* %538, align 1, !tbaa !2450
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 1
  store i64 %540, i64* %PC
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %542 = load i64, i64* %541, align 8, !tbaa !2428
  %543 = add i64 %542, 8
  %544 = inttoptr i64 %542 to i64*
  %545 = load i64, i64* %544
  store i64 %545, i64* %RBX, align 8, !tbaa !2428
  store i64 %543, i64* %541, align 8, !tbaa !2428
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 2
  store i64 %547, i64* %PC
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %549 = load i64, i64* %548, align 8, !tbaa !2428
  %550 = add i64 %549, 8
  %551 = inttoptr i64 %549 to i64*
  %552 = load i64, i64* %551
  store i64 %552, i64* %R12, align 8, !tbaa !2428
  store i64 %550, i64* %548, align 8, !tbaa !2428
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 2
  store i64 %554, i64* %PC
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %556 = load i64, i64* %555, align 8, !tbaa !2428
  %557 = add i64 %556, 8
  %558 = inttoptr i64 %556 to i64*
  %559 = load i64, i64* %558
  store i64 %559, i64* %R13, align 8, !tbaa !2428
  store i64 %557, i64* %555, align 8, !tbaa !2428
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 2
  store i64 %561, i64* %PC
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %563 = load i64, i64* %562, align 8, !tbaa !2428
  %564 = add i64 %563, 8
  %565 = inttoptr i64 %563 to i64*
  %566 = load i64, i64* %565
  store i64 %566, i64* %R14, align 8, !tbaa !2428
  store i64 %564, i64* %562, align 8, !tbaa !2428
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 2
  store i64 %568, i64* %PC
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %570 = load i64, i64* %569, align 8, !tbaa !2428
  %571 = add i64 %570, 8
  %572 = inttoptr i64 %570 to i64*
  %573 = load i64, i64* %572
  store i64 %573, i64* %R15, align 8, !tbaa !2428
  store i64 %571, i64* %569, align 8, !tbaa !2428
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 1
  store i64 %575, i64* %PC
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %577 = load i64, i64* %576, align 8, !tbaa !2428
  %578 = add i64 %577, 8
  %579 = inttoptr i64 %577 to i64*
  %580 = load i64, i64* %579
  store i64 %580, i64* %RBP, align 8, !tbaa !2428
  store i64 %578, i64* %576, align 8, !tbaa !2428
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 1
  store i64 %582, i64* %PC
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %585 = load i64, i64* %584, align 8, !tbaa !2428
  %586 = inttoptr i64 %585 to i64*
  %587 = load i64, i64* %586
  store i64 %587, i64* %583, align 8, !tbaa !2428
  %588 = add i64 %585, 8
  store i64 %588, i64* %584, align 8, !tbaa !2428
  ret %struct.Memory* %467

block_40316a:                                     ; preds = %block_403135
  %589 = inttoptr i64 %1090 to i32*
  store i32 2, i32* %589
  br label %block_403178

block_4030e7:                                     ; preds = %block_4030a5
  %590 = add i64 %2015, 8
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 4
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to i64*
  %594 = load i64, i64* %593
  store i64 %594, i64* %RAX, align 8, !tbaa !2428
  %595 = load i64, i64* %RBP
  %596 = sub i64 %595, 96
  %597 = load i64, i64* %RAX
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 4
  store i64 %599, i64* %PC
  %600 = inttoptr i64 %596 to i64*
  store i64 %597, i64* %600
  %601 = load i64, i64* %RBP
  %602 = sub i64 %601, 136
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 7
  store i64 %604, i64* %PC
  %605 = inttoptr i64 %602 to i64*
  %606 = load i64, i64* %605
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = load i64, i64* %RAX
  %608 = add i64 %607, 16
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i64*
  %612 = load i64, i64* %611
  store i64 %612, i64* %RAX, align 8, !tbaa !2428
  %613 = load i64, i64* %RBP
  %614 = sub i64 %613, 104
  %615 = load i64, i64* %RAX
  %616 = load i64, i64* %PC
  %617 = add i64 %616, 4
  store i64 %617, i64* %PC
  %618 = inttoptr i64 %614 to i64*
  store i64 %615, i64* %618
  br label %block_403105

block_403259:                                     ; preds = %block_403237
  %619 = inttoptr i64 %872 to i64*
  store i64 0, i64* %619
  br label %block_403261

block_403157:                                     ; preds = %block_403135
  %620 = inttoptr i64 %1090 to i32*
  store i32 1, i32* %620
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 19
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 5
  store i64 %624, i64* %PC
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %622, i64* %625, align 8, !tbaa !2428
  br label %block_403178

block_4030c4:                                     ; preds = %block_4030a5
  %626 = add i64 %2015, 16
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 4
  store i64 %628, i64* %PC
  %629 = inttoptr i64 %626 to i64*
  %630 = load i64, i64* %629
  store i64 %630, i64* %RAX, align 8, !tbaa !2428
  %631 = load i64, i64* %RBP
  %632 = sub i64 %631, 96
  %633 = load i64, i64* %RAX
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %632 to i64*
  store i64 %633, i64* %636
  %637 = load i64, i64* %RBP
  %638 = sub i64 %637, 136
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 7
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %638 to i64*
  %642 = load i64, i64* %641
  store i64 %642, i64* %RAX, align 8, !tbaa !2428
  %643 = load i64, i64* %RAX
  %644 = add i64 %643, 8
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 4
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i64*
  %648 = load i64, i64* %647
  store i64 %648, i64* %RAX, align 8, !tbaa !2428
  %649 = load i64, i64* %RBP
  %650 = sub i64 %649, 104
  %651 = load i64, i64* %RAX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 4
  store i64 %653, i64* %PC
  %654 = inttoptr i64 %650 to i64*
  store i64 %651, i64* %654
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 35
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 5
  store i64 %658, i64* %PC
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %656, i64* %659, align 8, !tbaa !2428
  br label %block_403105

block_403178:                                     ; preds = %block_403157, %block_40316a
  %MEMORY.0 = phi %struct.Memory* [ %1481, %block_40316a ], [ %1481, %block_403157 ]
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 56
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i64*
  %665 = load i64, i64* %664
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %666, align 1, !tbaa !2432
  %667 = trunc i64 %665 to i32
  %668 = and i32 %667, 255
  %669 = call i32 @llvm.ctpop.i32(i32 %668) #16
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  %672 = xor i8 %671, 1
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %672, i8* %673, align 1, !tbaa !2446
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %674, align 1, !tbaa !2447
  %675 = icmp eq i64 %665, 0
  %676 = zext i1 %675 to i8
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %676, i8* %677, align 1, !tbaa !2448
  %678 = lshr i64 %665, 63
  %679 = trunc i64 %678 to i8
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %679, i8* %680, align 1, !tbaa !2449
  %681 = lshr i64 %665, 63
  %682 = xor i64 %678, %681
  %683 = add nuw nsw i64 %682, %681
  %684 = icmp eq i64 %683, 2
  %685 = zext i1 %684 to i8
  %686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %685, i8* %686, align 1, !tbaa !2450
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 23
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 6
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 6
  store i64 %692, i64* %PC
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %694 = load i8, i8* %693, align 1, !tbaa !2448
  store i8 %694, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %696 = icmp ne i8 %694, 0
  %697 = select i1 %696, i64 %688, i64 %690
  store i64 %697, i64* %695, align 8, !tbaa !2428
  %698 = load i8, i8* %BRANCH_TAKEN
  %699 = icmp eq i8 %698, 1
  br i1 %699, label %block_403194, label %block_403183

block_4031c2:                                     ; preds = %block_403199, %block_4031a4
  %MEMORY.1 = phi %struct.Memory* [ %1481, %block_403199 ], [ %1481, %block_4031a4 ]
  %700 = load i64, i64* %RBP
  %701 = sub i64 %700, 112
  %702 = load i64, i64* %PC
  %703 = add i64 %702, 4
  store i64 %703, i64* %PC
  %704 = inttoptr i64 %701 to i64*
  %705 = load i64, i64* %704
  store i64 %705, i64* %RAX, align 8, !tbaa !2428
  %706 = load i64, i64* %RAX
  %707 = add i64 %706, 24
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 4
  store i64 %709, i64* %PC
  %710 = inttoptr i64 %707 to i64*
  %711 = load i64, i64* %710
  store i64 %711, i64* %RAX, align 8, !tbaa !2428
  %712 = load i64, i64* %RBP
  %713 = sub i64 %712, 120
  %714 = load i64, i64* %RAX
  %715 = load i64, i64* %PC
  %716 = add i64 %715, 4
  store i64 %716, i64* %PC
  %717 = inttoptr i64 %713 to i64*
  store i64 %714, i64* %717
  %718 = load i64, i64* %RBP
  %719 = sub i64 %718, 112
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 4
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %719 to i64*
  %723 = load i64, i64* %722
  store i64 %723, i64* %RAX, align 8, !tbaa !2428
  %724 = load i64, i64* %RAX
  %725 = add i64 %724, 48
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 4
  store i64 %727, i64* %PC
  %728 = inttoptr i64 %725 to i64*
  %729 = load i64, i64* %728
  store i64 %729, i64* %RAX, align 8, !tbaa !2428
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 144
  %732 = load i64, i64* %RAX
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 7
  store i64 %734, i64* %PC
  %735 = inttoptr i64 %731 to i64*
  store i64 %732, i64* %735
  %736 = load i64, i64* %RBP
  %737 = sub i64 %736, 80
  %738 = load i64, i64* %PC
  %739 = add i64 %738, 4
  store i64 %739, i64* %PC
  %740 = inttoptr i64 %737 to i64*
  %741 = load i64, i64* %740
  store i64 %741, i64* %RAX, align 8, !tbaa !2428
  %742 = load i64, i64* %RBP
  %743 = sub i64 %742, 112
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 4
  store i64 %745, i64* %PC
  %746 = inttoptr i64 %743 to i64*
  %747 = load i64, i64* %746
  store i64 %747, i64* %RCX, align 8, !tbaa !2428
  %748 = load i64, i64* %RCX
  %749 = add i64 %748, 8
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 4
  store i64 %751, i64* %PC
  %752 = inttoptr i64 %749 to i32*
  %753 = load i32, i32* %752
  %754 = sext i32 %753 to i64
  store i64 %754, i64* %RCX, align 8, !tbaa !2428
  %755 = load i64, i64* %RAX
  %756 = load i64, i64* %RCX
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 3
  store i64 %758, i64* %PC
  %759 = sub i64 %755, %756
  %760 = icmp ult i64 %755, %756
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %761, i8* %762, align 1, !tbaa !2432
  %763 = trunc i64 %759 to i32
  %764 = and i32 %763, 255
  %765 = call i32 @llvm.ctpop.i32(i32 %764) #16
  %766 = trunc i32 %765 to i8
  %767 = and i8 %766, 1
  %768 = xor i8 %767, 1
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %768, i8* %769, align 1, !tbaa !2446
  %770 = xor i64 %756, %755
  %771 = xor i64 %770, %759
  %772 = lshr i64 %771, 4
  %773 = trunc i64 %772 to i8
  %774 = and i8 %773, 1
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %774, i8* %775, align 1, !tbaa !2447
  %776 = icmp eq i64 %759, 0
  %777 = zext i1 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %777, i8* %778, align 1, !tbaa !2448
  %779 = lshr i64 %759, 63
  %780 = trunc i64 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %780, i8* %781, align 1, !tbaa !2449
  %782 = lshr i64 %755, 63
  %783 = lshr i64 %756, 63
  %784 = xor i64 %783, %782
  %785 = xor i64 %779, %782
  %786 = add nuw nsw i64 %785, %784
  %787 = icmp eq i64 %786, 2
  %788 = zext i1 %787 to i8
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %788, i8* %789, align 1, !tbaa !2450
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 22
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 6
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 6
  store i64 %795, i64* %PC
  %796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %797 = load i8, i8* %796, align 1, !tbaa !2448
  store i8 %797, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %799 = icmp ne i8 %797, 0
  %800 = select i1 %799, i64 %791, i64 %793
  store i64 %800, i64* %798, align 8, !tbaa !2428
  %801 = load i8, i8* %BRANCH_TAKEN
  %802 = icmp eq i8 %801, 1
  %803 = load i64, i64* %RBP
  %804 = sub i64 %803, 184
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 11
  store i64 %806, i64* %PC
  br i1 %802, label %block_403202, label %block_4031f2

block_403237:                                     ; preds = %block_40321b, %block_40322f
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.8, %block_40322f ], [ %MEMORY.8, %block_40321b ]
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 136
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 7
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %808 to i64*
  %812 = load i64, i64* %811
  store i64 %812, i64* %RAX, align 8, !tbaa !2428
  %813 = load i64, i64* %RAX
  %814 = add i64 %813, 8
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 4
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i64*
  %818 = load i64, i64* %817
  store i64 %818, i64* %RAX, align 8, !tbaa !2428
  %819 = load i64, i64* %RAX
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 96
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 4
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %821 to i64*
  %825 = load i64, i64* %824
  %826 = sub i64 %819, %825
  %827 = icmp ugt i64 %825, %819
  %828 = zext i1 %827 to i8
  %829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %828, i8* %829, align 1, !tbaa !2432
  %830 = trunc i64 %826 to i32
  %831 = and i32 %830, 255
  %832 = call i32 @llvm.ctpop.i32(i32 %831) #16
  %833 = trunc i32 %832 to i8
  %834 = and i8 %833, 1
  %835 = xor i8 %834, 1
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %835, i8* %836, align 1, !tbaa !2446
  %837 = xor i64 %825, %819
  %838 = xor i64 %837, %826
  %839 = lshr i64 %838, 4
  %840 = trunc i64 %839 to i8
  %841 = and i8 %840, 1
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %841, i8* %842, align 1, !tbaa !2447
  %843 = icmp eq i64 %826, 0
  %844 = zext i1 %843 to i8
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %844, i8* %845, align 1, !tbaa !2448
  %846 = lshr i64 %826, 63
  %847 = trunc i64 %846 to i8
  %848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %847, i8* %848, align 1, !tbaa !2449
  %849 = lshr i64 %819, 63
  %850 = lshr i64 %825, 63
  %851 = xor i64 %850, %849
  %852 = xor i64 %846, %849
  %853 = add nuw nsw i64 %852, %851
  %854 = icmp eq i64 %853, 2
  %855 = zext i1 %854 to i8
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %855, i8* %856, align 1, !tbaa !2450
  %857 = load i64, i64* %PC
  %858 = add i64 %857, 19
  %859 = load i64, i64* %PC
  %860 = add i64 %859, 6
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 6
  store i64 %862, i64* %PC
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %864 = load i8, i8* %863, align 1, !tbaa !2448
  %865 = icmp eq i8 %864, 0
  %866 = zext i1 %865 to i8
  store i8 %866, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %868 = select i1 %865, i64 %858, i64 %860
  store i64 %868, i64* %867, align 8, !tbaa !2428
  %869 = load i8, i8* %BRANCH_TAKEN
  %870 = icmp eq i8 %869, 1
  %871 = load i64, i64* %RBP
  %872 = sub i64 %871, 88
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 8
  store i64 %874, i64* %PC
  br i1 %870, label %block_403259, label %block_40324c

block_403336:                                     ; preds = %block_403194, %block_403331
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_403331 ], [ %MEMORY.7, %block_403194 ]
  %875 = load i64, i64* %PC
  %876 = add i64 %875, 13
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 5
  store i64 %878, i64* %PC
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %876, i64* %879, align 8, !tbaa !2428
  br label %block_403343

block_403331:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_40331b
  %MEMORY.4 = phi %struct.Memory* [ %1872, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %1296, %block_40331b ]
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 5
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 5
  store i64 %883, i64* %PC
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %881, i64* %884, align 8, !tbaa !2428
  br label %block_403336

block_403073:                                     ; preds = %block_40305c
  %885 = load i64, i64* %RBP
  %886 = sub i64 %885, 192
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 7
  store i64 %888, i64* %PC
  store i64 %886, i64* %RCX, align 8, !tbaa !2428
  %889 = load i64, i64* %RBP
  %890 = sub i64 %889, 176
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 7
  store i64 %892, i64* %PC
  %893 = inttoptr i64 %890 to i64*
  %894 = load i64, i64* %893
  store i64 %894, i64* %RDI, align 8, !tbaa !2428
  %895 = load i64, i64* %RBP
  %896 = sub i64 %895, 152
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 7
  store i64 %898, i64* %PC
  %899 = inttoptr i64 %896 to i64*
  %900 = load i64, i64* %899
  store i64 %900, i64* %RSI, align 8, !tbaa !2428
  %901 = load i64, i64* %RBP
  %902 = sub i64 %901, 160
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 7
  store i64 %904, i64* %PC
  %905 = inttoptr i64 %902 to i64*
  %906 = load i64, i64* %905
  store i64 %906, i64* %RDX, align 8, !tbaa !2428
  %907 = load i64, i64* %PC
  %908 = sub i64 %907, 1839
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 5
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 5
  store i64 %912, i64* %PC
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %914 = load i64, i64* %913, align 8, !tbaa !2428
  %915 = add i64 %914, -8
  %916 = inttoptr i64 %915 to i64*
  store i64 %910, i64* %916
  store i64 %915, i64* %913, align 8, !tbaa !2428
  %917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %908, i64* %917, align 8, !tbaa !2428
  %918 = load i64, i64* %PC
  %919 = call %struct.Memory* @sub_402960_primal_bea_mpp_renamed_(%struct.State* %0, i64 %918, %struct.Memory* %MEMORY.6)
  %920 = load i64, i64* %RBP
  %921 = sub i64 %920, 136
  %922 = load i64, i64* %RAX
  %923 = load i64, i64* %PC
  %924 = add i64 %923, 7
  store i64 %924, i64* %PC
  %925 = inttoptr i64 %921 to i64*
  store i64 %922, i64* %925
  %926 = load i64, i64* %RAX
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 4
  store i64 %928, i64* %PC
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %929, align 1, !tbaa !2432
  %930 = trunc i64 %926 to i32
  %931 = and i32 %930, 255
  %932 = call i32 @llvm.ctpop.i32(i32 %931) #16
  %933 = trunc i32 %932 to i8
  %934 = and i8 %933, 1
  %935 = xor i8 %934, 1
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %935, i8* %936, align 1, !tbaa !2446
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %937, align 1, !tbaa !2447
  %938 = icmp eq i64 %926, 0
  %939 = zext i1 %938 to i8
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %939, i8* %940, align 1, !tbaa !2448
  %941 = lshr i64 %926, 63
  %942 = trunc i64 %941 to i8
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %942, i8* %943, align 1, !tbaa !2449
  %944 = lshr i64 %926, 63
  %945 = xor i64 %941, %944
  %946 = add nuw nsw i64 %945, %944
  %947 = icmp eq i64 %946, 2
  %948 = zext i1 %947 to i8
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %948, i8* %949, align 1, !tbaa !2450
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 668
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 6
  %954 = load i64, i64* %PC
  %955 = add i64 %954, 6
  store i64 %955, i64* %PC
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %957 = load i8, i8* %956, align 1, !tbaa !2448
  store i8 %957, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %959 = icmp ne i8 %957, 0
  %960 = select i1 %959, i64 %951, i64 %953
  store i64 %960, i64* %958, align 8, !tbaa !2428
  %961 = load i8, i8* %BRANCH_TAKEN
  %962 = icmp eq i8 %961, 1
  %963 = load i64, i64* %RBP
  br i1 %962, label %block_40333b, label %block_4030a5

block_40322f:                                     ; preds = %block_40320d
  %964 = load i64, i64* %RBP
  %965 = sub i64 %964, 56
  %966 = load i64, i64* %PC
  %967 = add i64 %966, 4
  store i64 %967, i64* %PC
  %968 = inttoptr i64 %965 to i64*
  %969 = load i64, i64* %968
  store i64 %969, i64* %RAX, align 8, !tbaa !2428
  %970 = load i64, i64* %RBP
  %971 = sub i64 %970, 64
  %972 = load i64, i64* %RAX
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 4
  store i64 %974, i64* %PC
  %975 = inttoptr i64 %971 to i64*
  store i64 %972, i64* %975
  br label %block_403237

block_40333b:                                     ; preds = %block_403073
  %976 = sub i64 %963, 72
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 8
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i64*
  store i64 1, i64* %979
  br label %block_403343

block_403135:                                     ; preds = %block_403105
  %980 = sub i64 %1529, 208
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 7
  store i64 %982, i64* %PC
  %983 = inttoptr i64 %980 to i64*
  %984 = load i64, i64* %983
  store i64 %984, i64* %RAX, align 8, !tbaa !2428
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 3
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i64*
  %989 = load i64, i64* %988
  store i64 %989, i64* %RCX, align 8, !tbaa !2428
  %990 = load i64, i64* %RCX
  %991 = load i64, i64* %PC
  %992 = add i64 %991, 4
  store i64 %992, i64* %PC
  %993 = add i64 1, %990
  store i64 %993, i64* %RCX, align 8, !tbaa !2428
  %994 = icmp ult i64 %993, %990
  %995 = icmp ult i64 %993, 1
  %996 = or i1 %994, %995
  %997 = zext i1 %996 to i8
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %997, i8* %998, align 1, !tbaa !2432
  %999 = trunc i64 %993 to i32
  %1000 = and i32 %999, 255
  %1001 = call i32 @llvm.ctpop.i32(i32 %1000) #16
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1004, i8* %1005, align 1, !tbaa !2446
  %1006 = xor i64 1, %990
  %1007 = xor i64 %1006, %993
  %1008 = lshr i64 %1007, 4
  %1009 = trunc i64 %1008 to i8
  %1010 = and i8 %1009, 1
  %1011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1010, i8* %1011, align 1, !tbaa !2447
  %1012 = icmp eq i64 %993, 0
  %1013 = zext i1 %1012 to i8
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1013, i8* %1014, align 1, !tbaa !2448
  %1015 = lshr i64 %993, 63
  %1016 = trunc i64 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1016, i8* %1017, align 1, !tbaa !2449
  %1018 = lshr i64 %990, 63
  %1019 = xor i64 %1015, %1018
  %1020 = add nuw nsw i64 %1019, %1015
  %1021 = icmp eq i64 %1020, 2
  %1022 = zext i1 %1021 to i8
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1022, i8* %1023, align 1, !tbaa !2450
  %1024 = load i64, i64* %RAX
  %1025 = load i64, i64* %RCX
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 3
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1024 to i64*
  store i64 %1025, i64* %1028
  %1029 = load i64, i64* %RBP
  %1030 = sub i64 %1029, 136
  %1031 = load i64, i64* %PC
  %1032 = add i64 %1031, 7
  store i64 %1032, i64* %PC
  %1033 = inttoptr i64 %1030 to i64*
  %1034 = load i64, i64* %1033
  store i64 %1034, i64* %RAX, align 8, !tbaa !2428
  %1035 = load i64, i64* %RAX
  %1036 = add i64 %1035, 24
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 4
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1036 to i32*
  %1040 = load i32, i32* %1039
  %1041 = sub i32 %1040, 2
  %1042 = icmp ult i32 %1040, 2
  %1043 = zext i1 %1042 to i8
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1043, i8* %1044, align 1, !tbaa !2432
  %1045 = and i32 %1041, 255
  %1046 = call i32 @llvm.ctpop.i32(i32 %1045) #16
  %1047 = trunc i32 %1046 to i8
  %1048 = and i8 %1047, 1
  %1049 = xor i8 %1048, 1
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1049, i8* %1050, align 1, !tbaa !2446
  %1051 = xor i32 %1040, 2
  %1052 = xor i32 %1051, %1041
  %1053 = lshr i32 %1052, 4
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1055, i8* %1056, align 1, !tbaa !2447
  %1057 = icmp eq i32 %1041, 0
  %1058 = zext i1 %1057 to i8
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1058, i8* %1059, align 1, !tbaa !2448
  %1060 = lshr i32 %1041, 31
  %1061 = trunc i32 %1060 to i8
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1061, i8* %1062, align 1, !tbaa !2449
  %1063 = lshr i32 %1040, 31
  %1064 = xor i32 %1060, %1063
  %1065 = add nuw nsw i32 %1064, %1063
  %1066 = icmp eq i32 %1065, 2
  %1067 = zext i1 %1066 to i8
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1067, i8* %1068, align 1, !tbaa !2450
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 25
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 6
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 6
  store i64 %1074, i64* %PC
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1076 = load i8, i8* %1075, align 1, !tbaa !2448
  %1077 = icmp eq i8 %1076, 0
  %1078 = zext i1 %1077 to i8
  store i8 %1078, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1080 = select i1 %1077, i64 %1070, i64 %1072
  store i64 %1080, i64* %1079, align 8, !tbaa !2428
  %1081 = load i8, i8* %BRANCH_TAKEN
  %1082 = icmp eq i8 %1081, 1
  %1083 = load i64, i64* %RBP
  %1084 = sub i64 %1083, 136
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 7
  store i64 %1086, i64* %PC
  %1087 = inttoptr i64 %1084 to i64*
  %1088 = load i64, i64* %1087
  store i64 %1088, i64* %RAX, align 8, !tbaa !2428
  %1089 = load i64, i64* %RAX
  %1090 = add i64 %1089, 24
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 7
  store i64 %1092, i64* %PC
  br i1 %1082, label %block_40316a, label %block_403157

block_4031a4:                                     ; preds = %block_403199
  %1093 = load i64, i64* %RBP
  %1094 = sub i64 %1093, 104
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 4
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to i64*
  %1098 = load i64, i64* %1097
  store i64 %1098, i64* %RAX, align 8, !tbaa !2428
  %1099 = load i64, i64* %RBP
  %1100 = sub i64 %1099, 168
  %1101 = load i64, i64* %RAX
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 7
  store i64 %1103, i64* %PC
  %1104 = inttoptr i64 %1100 to i64*
  store i64 %1101, i64* %1104
  %1105 = load i64, i64* %RBP
  %1106 = sub i64 %1105, 96
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 4
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1106 to i64*
  %1110 = load i64, i64* %1109
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = load i64, i64* %RBP
  %1112 = sub i64 %1111, 104
  %1113 = load i64, i64* %RAX
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 4
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1112 to i64*
  store i64 %1113, i64* %1116
  %1117 = load i64, i64* %RBP
  %1118 = sub i64 %1117, 168
  %1119 = load i64, i64* %PC
  %1120 = add i64 %1119, 7
  store i64 %1120, i64* %PC
  %1121 = inttoptr i64 %1118 to i64*
  %1122 = load i64, i64* %1121
  store i64 %1122, i64* %RAX, align 8, !tbaa !2428
  %1123 = load i64, i64* %RBP
  %1124 = sub i64 %1123, 96
  %1125 = load i64, i64* %RAX
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 4
  store i64 %1127, i64* %PC
  %1128 = inttoptr i64 %1124 to i64*
  store i64 %1125, i64* %1128
  br label %block_4031c2

block_403343:                                     ; preds = %block_40333b, %block_403336
  %MEMORY.5 = phi %struct.Memory* [ %919, %block_40333b ], [ %MEMORY.3, %block_403336 ]
  %1129 = load i64, i64* %PC
  %1130 = sub i64 %1129, 743
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 5
  store i64 %1132, i64* %PC
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1130, i64* %1133, align 8, !tbaa !2428
  br label %block_40305c

block_40321b:                                     ; preds = %block_40320d
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 5
  store i64 %1135, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1136 = load i32, i32* %EAX
  %1137 = zext i32 %1136 to i64
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 2
  store i64 %1139, i64* %PC
  %1140 = and i64 %1137, 4294967295
  store i64 %1140, i64* %RCX, align 8, !tbaa !2428
  %1141 = load i64, i64* %RCX
  %1142 = load i64, i64* %RBP
  %1143 = sub i64 %1142, 56
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 4
  store i64 %1145, i64* %PC
  %1146 = inttoptr i64 %1143 to i64*
  %1147 = load i64, i64* %1146
  %1148 = sub i64 %1141, %1147
  store i64 %1148, i64* %RCX, align 8, !tbaa !2428
  %1149 = icmp ugt i64 %1147, %1141
  %1150 = zext i1 %1149 to i8
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1150, i8* %1151, align 1, !tbaa !2432
  %1152 = trunc i64 %1148 to i32
  %1153 = and i32 %1152, 255
  %1154 = call i32 @llvm.ctpop.i32(i32 %1153) #16
  %1155 = trunc i32 %1154 to i8
  %1156 = and i8 %1155, 1
  %1157 = xor i8 %1156, 1
  %1158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1157, i8* %1158, align 1, !tbaa !2446
  %1159 = xor i64 %1147, %1141
  %1160 = xor i64 %1159, %1148
  %1161 = lshr i64 %1160, 4
  %1162 = trunc i64 %1161 to i8
  %1163 = and i8 %1162, 1
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1163, i8* %1164, align 1, !tbaa !2447
  %1165 = icmp eq i64 %1148, 0
  %1166 = zext i1 %1165 to i8
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1166, i8* %1167, align 1, !tbaa !2448
  %1168 = lshr i64 %1148, 63
  %1169 = trunc i64 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1169, i8* %1170, align 1, !tbaa !2449
  %1171 = lshr i64 %1141, 63
  %1172 = lshr i64 %1147, 63
  %1173 = xor i64 %1172, %1171
  %1174 = xor i64 %1168, %1171
  %1175 = add nuw nsw i64 %1174, %1173
  %1176 = icmp eq i64 %1175, 2
  %1177 = zext i1 %1176 to i8
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1177, i8* %1178, align 1, !tbaa !2450
  %1179 = load i64, i64* %RBP
  %1180 = sub i64 %1179, 64
  %1181 = load i64, i64* %RCX
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 4
  store i64 %1183, i64* %PC
  %1184 = inttoptr i64 %1180 to i64*
  store i64 %1181, i64* %1184
  %1185 = load i64, i64* %PC
  %1186 = add i64 %1185, 13
  %1187 = load i64, i64* %PC
  %1188 = add i64 %1187, 5
  store i64 %1188, i64* %PC
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1186, i64* %1189, align 8, !tbaa !2428
  br label %block_403237

block_40305c:                                     ; preds = %block_403343, %block_402fd0
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_402fd0 ], [ %MEMORY.5, %block_403343 ]
  %1190 = load i64, i64* %RBP
  %1191 = sub i64 %1190, 72
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 5
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1191 to i64*
  %1195 = load i64, i64* %1194
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1196, align 1, !tbaa !2432
  %1197 = trunc i64 %1195 to i32
  %1198 = and i32 %1197, 255
  %1199 = call i32 @llvm.ctpop.i32(i32 %1198) #16
  %1200 = trunc i32 %1199 to i8
  %1201 = and i8 %1200, 1
  %1202 = xor i8 %1201, 1
  %1203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1202, i8* %1203, align 1, !tbaa !2446
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1204, align 1, !tbaa !2447
  %1205 = icmp eq i64 %1195, 0
  %1206 = zext i1 %1205 to i8
  %1207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1206, i8* %1207, align 1, !tbaa !2448
  %1208 = lshr i64 %1195, 63
  %1209 = trunc i64 %1208 to i8
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1209, i8* %1210, align 1, !tbaa !2449
  %1211 = lshr i64 %1195, 63
  %1212 = xor i64 %1208, %1211
  %1213 = add nuw nsw i64 %1212, %1211
  %1214 = icmp eq i64 %1213, 2
  %1215 = zext i1 %1214 to i8
  %1216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1215, i8* %1216, align 1, !tbaa !2450
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 3
  store i64 %1218, i64* %PC
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1220 = load i8, i8* %1219, align 1, !tbaa !2448
  %1221 = icmp eq i8 %1220, 0
  %1222 = zext i1 %1221 to i8
  store i8 %1222, i8* %AL, align 1, !tbaa !2451
  %1223 = load i8, i8* %AL
  %1224 = zext i8 %1223 to i64
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 2
  store i64 %1226, i64* %PC
  %1227 = xor i64 255, %1224
  %1228 = trunc i64 %1227 to i8
  store i8 %1228, i8* %AL, align 1, !tbaa !2451
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1229, align 1, !tbaa !2432
  %1230 = trunc i64 %1227 to i32
  %1231 = and i32 %1230, 255
  %1232 = call i32 @llvm.ctpop.i32(i32 %1231) #16
  %1233 = trunc i32 %1232 to i8
  %1234 = and i8 %1233, 1
  %1235 = xor i8 %1234, 1
  %1236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1235, i8* %1236, align 1, !tbaa !2446
  %1237 = icmp eq i8 %1228, 0
  %1238 = zext i1 %1237 to i8
  %1239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1238, i8* %1239, align 1, !tbaa !2448
  %1240 = lshr i8 %1228, 7
  %1241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1240, i8* %1241, align 1, !tbaa !2449
  %1242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1242, align 1, !tbaa !2450
  %1243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1243, align 1, !tbaa !2447
  %1244 = load i8, i8* %AL
  %1245 = zext i8 %1244 to i64
  %1246 = load i64, i64* %PC
  %1247 = add i64 %1246, 2
  store i64 %1247, i64* %PC
  %1248 = and i64 1, %1245
  %1249 = trunc i64 %1248 to i8
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1250, align 1, !tbaa !2432
  %1251 = trunc i64 %1248 to i32
  %1252 = and i32 %1251, 255
  %1253 = call i32 @llvm.ctpop.i32(i32 %1252) #16
  %1254 = trunc i32 %1253 to i8
  %1255 = and i8 %1254, 1
  %1256 = xor i8 %1255, 1
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1256, i8* %1257, align 1, !tbaa !2446
  %1258 = icmp eq i8 %1249, 0
  %1259 = zext i1 %1258 to i8
  %1260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1259, i8* %1260, align 1, !tbaa !2448
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1261, align 1, !tbaa !2449
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1262, align 1, !tbaa !2450
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1263, align 1, !tbaa !2447
  %1264 = load i64, i64* %PC
  %1265 = add i64 %1264, 11
  %1266 = load i64, i64* %PC
  %1267 = add i64 %1266, 6
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 6
  store i64 %1269, i64* %PC
  %1270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1271 = load i8, i8* %1270, align 1, !tbaa !2448
  %1272 = icmp eq i8 %1271, 0
  %1273 = zext i1 %1272 to i8
  store i8 %1273, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1275 = select i1 %1272, i64 %1265, i64 %1267
  store i64 %1275, i64* %1274, align 8, !tbaa !2428
  %1276 = load i8, i8* %BRANCH_TAKEN
  %1277 = icmp eq i8 %1276, 1
  br i1 %1277, label %block_403073, label %block_40306e

block_40331b:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %1278 = load i64, i64* %RBP
  %1279 = sub i64 %1278, 48
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 4
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1279 to i64*
  %1283 = load i64, i64* %1282
  store i64 %1283, i64* %RDI, align 8, !tbaa !2428
  %1284 = load i64, i64* %PC
  %1285 = sub i64 %1284, 5791
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 5
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 5
  store i64 %1289, i64* %PC
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1291 = load i64, i64* %1290, align 8, !tbaa !2428
  %1292 = add i64 %1291, -8
  %1293 = inttoptr i64 %1292 to i64*
  store i64 %1287, i64* %1293
  store i64 %1292, i64* %1290, align 8, !tbaa !2428
  %1294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1285, i64* %1294, align 8, !tbaa !2428
  %1295 = load i64, i64* %PC
  %1296 = call %struct.Memory* @sub_401c80_refresh_potential_renamed_(%struct.State* %0, i64 %1295, %struct.Memory* %1872)
  %1297 = load i64, i64* %RBP
  %1298 = sub i64 %1297, 216
  %1299 = load i64, i64* %PC
  %1300 = add i64 %1299, 7
  store i64 %1300, i64* %PC
  %1301 = inttoptr i64 %1298 to i64*
  %1302 = load i64, i64* %1301
  store i64 %1302, i64* %RDI, align 8, !tbaa !2428
  %1303 = load i64, i64* %RAX
  %1304 = load i64, i64* %RDI
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 3
  store i64 %1306, i64* %PC
  %1307 = inttoptr i64 %1304 to i64*
  %1308 = load i64, i64* %1307
  %1309 = add i64 %1308, %1303
  store i64 %1309, i64* %RAX, align 8, !tbaa !2428
  %1310 = icmp ult i64 %1309, %1303
  %1311 = icmp ult i64 %1309, %1308
  %1312 = or i1 %1310, %1311
  %1313 = zext i1 %1312 to i8
  %1314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1313, i8* %1314, align 1, !tbaa !2432
  %1315 = trunc i64 %1309 to i32
  %1316 = and i32 %1315, 255
  %1317 = call i32 @llvm.ctpop.i32(i32 %1316) #16
  %1318 = trunc i32 %1317 to i8
  %1319 = and i8 %1318, 1
  %1320 = xor i8 %1319, 1
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1320, i8* %1321, align 1, !tbaa !2446
  %1322 = xor i64 %1308, %1303
  %1323 = xor i64 %1322, %1309
  %1324 = lshr i64 %1323, 4
  %1325 = trunc i64 %1324 to i8
  %1326 = and i8 %1325, 1
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1326, i8* %1327, align 1, !tbaa !2447
  %1328 = icmp eq i64 %1309, 0
  %1329 = zext i1 %1328 to i8
  %1330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1329, i8* %1330, align 1, !tbaa !2448
  %1331 = lshr i64 %1309, 63
  %1332 = trunc i64 %1331 to i8
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1332, i8* %1333, align 1, !tbaa !2449
  %1334 = lshr i64 %1303, 63
  %1335 = lshr i64 %1308, 63
  %1336 = xor i64 %1331, %1334
  %1337 = xor i64 %1331, %1335
  %1338 = add nuw nsw i64 %1336, %1337
  %1339 = icmp eq i64 %1338, 2
  %1340 = zext i1 %1339 to i8
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1340, i8* %1341, align 1, !tbaa !2450
  %1342 = load i64, i64* %RDI
  %1343 = load i64, i64* %RAX
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 3
  store i64 %1345, i64* %PC
  %1346 = inttoptr i64 %1342 to i64*
  store i64 %1343, i64* %1346
  br label %block_403331

block_403194:                                     ; preds = %block_403183, %block_403178
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.0, %block_403178 ], [ %2046, %block_403183 ]
  %1347 = load i64, i64* %PC
  %1348 = add i64 %1347, 418
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 5
  store i64 %1350, i64* %PC
  %1351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1348, i64* %1351, align 8, !tbaa !2428
  br label %block_403336

block_40320d:                                     ; preds = %block_403202, %block_4031f2
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.1, %block_403202 ], [ %MEMORY.1, %block_4031f2 ]
  %1352 = load i64, i64* %RBP
  %1353 = sub i64 %1352, 192
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 8
  store i64 %1355, i64* %PC
  %1356 = inttoptr i64 %1353 to i64*
  %1357 = load i64, i64* %1356
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1358, align 1, !tbaa !2432
  %1359 = trunc i64 %1357 to i32
  %1360 = and i32 %1359, 255
  %1361 = call i32 @llvm.ctpop.i32(i32 %1360) #16
  %1362 = trunc i32 %1361 to i8
  %1363 = and i8 %1362, 1
  %1364 = xor i8 %1363, 1
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1364, i8* %1365, align 1, !tbaa !2446
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1366, align 1, !tbaa !2447
  %1367 = icmp eq i64 %1357, 0
  %1368 = zext i1 %1367 to i8
  %1369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1368, i8* %1369, align 1, !tbaa !2448
  %1370 = lshr i64 %1357, 63
  %1371 = trunc i64 %1370 to i8
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1371, i8* %1372, align 1, !tbaa !2449
  %1373 = lshr i64 %1357, 63
  %1374 = xor i64 %1370, %1373
  %1375 = add nuw nsw i64 %1374, %1373
  %1376 = icmp eq i64 %1375, 2
  %1377 = zext i1 %1376 to i8
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1377, i8* %1378, align 1, !tbaa !2450
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 26
  %1381 = load i64, i64* %PC
  %1382 = add i64 %1381, 6
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 6
  store i64 %1384, i64* %PC
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1386 = load i8, i8* %1385, align 1, !tbaa !2448
  %1387 = icmp ne i8 %1386, 0
  %1388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1389 = load i8, i8* %1388, align 1, !tbaa !2449
  %1390 = icmp ne i8 %1389, 0
  %1391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1392 = load i8, i8* %1391, align 1, !tbaa !2450
  %1393 = icmp ne i8 %1392, 0
  %1394 = xor i1 %1390, %1393
  %1395 = or i1 %1387, %1394
  %1396 = zext i1 %1395 to i8
  store i8 %1396, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1398 = select i1 %1395, i64 %1380, i64 %1382
  store i64 %1398, i64* %1397, align 8, !tbaa !2428
  %1399 = load i8, i8* %BRANCH_TAKEN
  %1400 = icmp eq i8 %1399, 1
  br i1 %1400, label %block_40322f, label %block_40321b

block_403199:                                     ; preds = %block_403105
  %1401 = sub i64 %1529, 80
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 5
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1401 to i64*
  %1405 = load i64, i64* %1404
  %1406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1406, align 1, !tbaa !2432
  %1407 = trunc i64 %1405 to i32
  %1408 = and i32 %1407, 255
  %1409 = call i32 @llvm.ctpop.i32(i32 %1408) #16
  %1410 = trunc i32 %1409 to i8
  %1411 = and i8 %1410, 1
  %1412 = xor i8 %1411, 1
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1412, i8* %1413, align 1, !tbaa !2446
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1414, align 1, !tbaa !2447
  %1415 = icmp eq i64 %1405, 0
  %1416 = zext i1 %1415 to i8
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1416, i8* %1417, align 1, !tbaa !2448
  %1418 = lshr i64 %1405, 63
  %1419 = trunc i64 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1419, i8* %1420, align 1, !tbaa !2449
  %1421 = lshr i64 %1405, 63
  %1422 = xor i64 %1418, %1421
  %1423 = add nuw nsw i64 %1422, %1421
  %1424 = icmp eq i64 %1423, 2
  %1425 = zext i1 %1424 to i8
  %1426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1425, i8* %1426, align 1, !tbaa !2450
  %1427 = load i64, i64* %PC
  %1428 = add i64 %1427, 36
  %1429 = load i64, i64* %PC
  %1430 = add i64 %1429, 6
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 6
  store i64 %1432, i64* %PC
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1434 = load i8, i8* %1433, align 1, !tbaa !2448
  store i8 %1434, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1436 = icmp ne i8 %1434, 0
  %1437 = select i1 %1436, i64 %1428, i64 %1430
  store i64 %1437, i64* %1435, align 8, !tbaa !2428
  %1438 = load i8, i8* %BRANCH_TAKEN
  %1439 = icmp eq i8 %1438, 1
  br i1 %1439, label %block_4031c2, label %block_4031a4

block_403105:                                     ; preds = %block_4030c4, %block_4030e7
  %MEMORY.9 = phi %struct.Memory* [ %919, %block_4030e7 ], [ %919, %block_4030c4 ]
  %1440 = load i64, i64* %RBP
  %1441 = sub i64 %1440, 56
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  store i64 %1441, i64* %RDI, align 8, !tbaa !2428
  %1444 = load i64, i64* %RBP
  %1445 = sub i64 %1444, 80
  %1446 = load i64, i64* %PC
  %1447 = add i64 %1446, 4
  store i64 %1447, i64* %PC
  store i64 %1445, i64* %RSI, align 8, !tbaa !2428
  %1448 = load i64, i64* %RBP
  %1449 = sub i64 %1448, 128
  %1450 = load i64, i64* %PC
  %1451 = add i64 %1450, 4
  store i64 %1451, i64* %PC
  store i64 %1449, i64* %R8, align 8, !tbaa !2428
  %1452 = load i64, i64* %RBP
  %1453 = sub i64 %1452, 56
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 8
  store i64 %1455, i64* %PC
  %1456 = inttoptr i64 %1453 to i64*
  store i64 1, i64* %1456
  %1457 = load i64, i64* %RBP
  %1458 = sub i64 %1457, 96
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 4
  store i64 %1460, i64* %PC
  %1461 = inttoptr i64 %1458 to i64*
  %1462 = load i64, i64* %1461
  store i64 %1462, i64* %RDX, align 8, !tbaa !2428
  %1463 = load i64, i64* %RBP
  %1464 = sub i64 %1463, 104
  %1465 = load i64, i64* %PC
  %1466 = add i64 %1465, 4
  store i64 %1466, i64* %PC
  %1467 = inttoptr i64 %1464 to i64*
  %1468 = load i64, i64* %1467
  store i64 %1468, i64* %RCX, align 8, !tbaa !2428
  %1469 = load i64, i64* %PC
  %1470 = sub i64 %1469, 1009
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 5
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 5
  store i64 %1474, i64* %PC
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1476 = load i64, i64* %1475, align 8, !tbaa !2428
  %1477 = add i64 %1476, -8
  %1478 = inttoptr i64 %1477 to i64*
  store i64 %1472, i64* %1478
  store i64 %1477, i64* %1475, align 8, !tbaa !2428
  %1479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1470, i64* %1479, align 8, !tbaa !2428
  %1480 = load i64, i64* %PC
  %1481 = call %struct.Memory* @sub_402d30_primal_iminus_renamed_(%struct.State* %0, i64 %1480, %struct.Memory* %MEMORY.9)
  %1482 = load i64, i64* %RBP
  %1483 = sub i64 %1482, 112
  %1484 = load i64, i64* %RAX
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 4
  store i64 %1486, i64* %PC
  %1487 = inttoptr i64 %1483 to i64*
  store i64 %1484, i64* %1487
  %1488 = load i64, i64* %RBP
  %1489 = sub i64 %1488, 112
  %1490 = load i64, i64* %PC
  %1491 = add i64 %1490, 5
  store i64 %1491, i64* %PC
  %1492 = inttoptr i64 %1489 to i64*
  %1493 = load i64, i64* %1492
  %1494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1494, align 1, !tbaa !2432
  %1495 = trunc i64 %1493 to i32
  %1496 = and i32 %1495, 255
  %1497 = call i32 @llvm.ctpop.i32(i32 %1496) #16
  %1498 = trunc i32 %1497 to i8
  %1499 = and i8 %1498, 1
  %1500 = xor i8 %1499, 1
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1500, i8* %1501, align 1, !tbaa !2446
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1502, align 1, !tbaa !2447
  %1503 = icmp eq i64 %1493, 0
  %1504 = zext i1 %1503 to i8
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1504, i8* %1505, align 1, !tbaa !2448
  %1506 = lshr i64 %1493, 63
  %1507 = trunc i64 %1506 to i8
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1507, i8* %1508, align 1, !tbaa !2449
  %1509 = lshr i64 %1493, 63
  %1510 = xor i64 %1506, %1509
  %1511 = add nuw nsw i64 %1510, %1509
  %1512 = icmp eq i64 %1511, 2
  %1513 = zext i1 %1512 to i8
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1513, i8* %1514, align 1, !tbaa !2450
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 106
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 6
  %1519 = load i64, i64* %PC
  %1520 = add i64 %1519, 6
  store i64 %1520, i64* %PC
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1522 = load i8, i8* %1521, align 1, !tbaa !2448
  %1523 = icmp eq i8 %1522, 0
  %1524 = zext i1 %1523 to i8
  store i8 %1524, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1526 = select i1 %1523, i64 %1516, i64 %1518
  store i64 %1526, i64* %1525, align 8, !tbaa !2428
  %1527 = load i8, i8* %BRANCH_TAKEN
  %1528 = icmp eq i8 %1527, 1
  %1529 = load i64, i64* %RBP
  br i1 %1528, label %block_403199, label %block_403135

block_4031f2:                                     ; preds = %block_4031c2
  %1530 = inttoptr i64 %804 to i64*
  store i64 1, i64* %1530
  %1531 = load i64, i64* %PC
  %1532 = add i64 %1531, 16
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 5
  store i64 %1534, i64* %PC
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1532, i64* %1535, align 8, !tbaa !2428
  br label %block_40320d

block_403261:                                     ; preds = %block_40324c, %block_403259
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.2, %block_403259 ], [ %MEMORY.2, %block_40324c ]
  %1536 = load i64, i64* %RBP
  %1537 = sub i64 %1536, 80
  %1538 = load i64, i64* %PC
  %1539 = add i64 %1538, 5
  store i64 %1539, i64* %PC
  %1540 = inttoptr i64 %1537 to i64*
  %1541 = load i64, i64* %1540
  %1542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1542, align 1, !tbaa !2432
  %1543 = trunc i64 %1541 to i32
  %1544 = and i32 %1543, 255
  %1545 = call i32 @llvm.ctpop.i32(i32 %1544) #16
  %1546 = trunc i32 %1545 to i8
  %1547 = and i8 %1546, 1
  %1548 = xor i8 %1547, 1
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1548, i8* %1549, align 1, !tbaa !2446
  %1550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1550, align 1, !tbaa !2447
  %1551 = icmp eq i64 %1541, 0
  %1552 = zext i1 %1551 to i8
  %1553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1552, i8* %1553, align 1, !tbaa !2448
  %1554 = lshr i64 %1541, 63
  %1555 = trunc i64 %1554 to i8
  %1556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1555, i8* %1556, align 1, !tbaa !2449
  %1557 = lshr i64 %1541, 63
  %1558 = xor i64 %1554, %1557
  %1559 = add nuw nsw i64 %1558, %1557
  %1560 = icmp eq i64 %1559, 2
  %1561 = zext i1 %1560 to i8
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1561, i8* %1562, align 1, !tbaa !2450
  %1563 = load i64, i64* %PC
  %1564 = add i64 %1563, 3
  store i64 %1564, i64* %PC
  %1565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1566 = load i8, i8* %1565, align 1, !tbaa !2448
  %1567 = icmp eq i8 %1566, 0
  %1568 = zext i1 %1567 to i8
  store i8 %1568, i8* %AL, align 1, !tbaa !2451
  %1569 = load i8, i8* %AL
  %1570 = zext i8 %1569 to i64
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 2
  store i64 %1572, i64* %PC
  %1573 = xor i64 255, %1570
  %1574 = trunc i64 %1573 to i8
  store i8 %1574, i8* %AL, align 1, !tbaa !2451
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1575, align 1, !tbaa !2432
  %1576 = trunc i64 %1573 to i32
  %1577 = and i32 %1576, 255
  %1578 = call i32 @llvm.ctpop.i32(i32 %1577) #16
  %1579 = trunc i32 %1578 to i8
  %1580 = and i8 %1579, 1
  %1581 = xor i8 %1580, 1
  %1582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1581, i8* %1582, align 1, !tbaa !2446
  %1583 = icmp eq i8 %1574, 0
  %1584 = zext i1 %1583 to i8
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1584, i8* %1585, align 1, !tbaa !2448
  %1586 = lshr i8 %1574, 7
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1586, i8* %1587, align 1, !tbaa !2449
  %1588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1588, align 1, !tbaa !2450
  %1589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1589, align 1, !tbaa !2447
  %1590 = load i8, i8* %AL
  %1591 = zext i8 %1590 to i64
  %1592 = load i64, i64* %PC
  %1593 = add i64 %1592, 2
  store i64 %1593, i64* %PC
  %1594 = and i64 1, %1591
  %1595 = trunc i64 %1594 to i8
  store i8 %1595, i8* %AL, align 1, !tbaa !2451
  %1596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1596, align 1, !tbaa !2432
  %1597 = trunc i64 %1594 to i32
  %1598 = and i32 %1597, 255
  %1599 = call i32 @llvm.ctpop.i32(i32 %1598) #16
  %1600 = trunc i32 %1599 to i8
  %1601 = and i8 %1600, 1
  %1602 = xor i8 %1601, 1
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1602, i8* %1603, align 1, !tbaa !2446
  %1604 = icmp eq i8 %1595, 0
  %1605 = zext i1 %1604 to i8
  %1606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1605, i8* %1606, align 1, !tbaa !2448
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1607, align 1, !tbaa !2449
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1608, align 1, !tbaa !2450
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1609, align 1, !tbaa !2447
  %1610 = load i8, i8* %AL
  %1611 = zext i8 %1610 to i64
  %1612 = load i64, i64* %PC
  %1613 = add i64 %1612, 3
  store i64 %1613, i64* %PC
  %1614 = and i64 %1611, 255
  store i64 %1614, i64* %RCX, align 8, !tbaa !2428
  %1615 = load i32, i32* %ECX
  %1616 = zext i32 %1615 to i64
  %1617 = load i64, i64* %PC
  %1618 = add i64 %1617, 3
  store i64 %1618, i64* %PC
  %1619 = shl i64 %1616, 32
  %1620 = ashr exact i64 %1619, 32
  store i64 %1620, i64* %RDI, align 8, !tbaa !2428
  %1621 = load i64, i64* %RBP
  %1622 = sub i64 %1621, 88
  %1623 = load i64, i64* %PC
  %1624 = add i64 %1623, 4
  store i64 %1624, i64* %PC
  %1625 = inttoptr i64 %1622 to i64*
  %1626 = load i64, i64* %1625
  store i64 %1626, i64* %RSI, align 8, !tbaa !2428
  %1627 = load i64, i64* %RBP
  %1628 = sub i64 %1627, 56
  %1629 = load i64, i64* %PC
  %1630 = add i64 %1629, 4
  store i64 %1630, i64* %PC
  %1631 = inttoptr i64 %1628 to i64*
  %1632 = load i64, i64* %1631
  store i64 %1632, i64* %RDX, align 8, !tbaa !2428
  %1633 = load i64, i64* %RBP
  %1634 = sub i64 %1633, 64
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 4
  store i64 %1636, i64* %PC
  %1637 = inttoptr i64 %1634 to i64*
  %1638 = load i64, i64* %1637
  store i64 %1638, i64* %RCX, align 8, !tbaa !2428
  %1639 = load i64, i64* %RBP
  %1640 = sub i64 %1639, 96
  %1641 = load i64, i64* %PC
  %1642 = add i64 %1641, 4
  store i64 %1642, i64* %PC
  %1643 = inttoptr i64 %1640 to i64*
  %1644 = load i64, i64* %1643
  store i64 %1644, i64* %R8, align 8, !tbaa !2428
  %1645 = load i64, i64* %RBP
  %1646 = sub i64 %1645, 104
  %1647 = load i64, i64* %PC
  %1648 = add i64 %1647, 4
  store i64 %1648, i64* %PC
  %1649 = inttoptr i64 %1646 to i64*
  %1650 = load i64, i64* %1649
  store i64 %1650, i64* %R9, align 8, !tbaa !2428
  %1651 = load i64, i64* %RBP
  %1652 = sub i64 %1651, 112
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 4
  store i64 %1654, i64* %PC
  %1655 = inttoptr i64 %1652 to i64*
  %1656 = load i64, i64* %1655
  store i64 %1656, i64* %R10, align 8, !tbaa !2428
  %1657 = load i64, i64* %RBP
  %1658 = sub i64 %1657, 120
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 4
  store i64 %1660, i64* %PC
  %1661 = inttoptr i64 %1658 to i64*
  %1662 = load i64, i64* %1661
  store i64 %1662, i64* %R11, align 8, !tbaa !2428
  %1663 = load i64, i64* %RBP
  %1664 = sub i64 %1663, 128
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 4
  store i64 %1666, i64* %PC
  %1667 = inttoptr i64 %1664 to i64*
  %1668 = load i64, i64* %1667
  store i64 %1668, i64* %RBX, align 8, !tbaa !2428
  %1669 = load i64, i64* %RBP
  %1670 = sub i64 %1669, 136
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 7
  store i64 %1672, i64* %PC
  %1673 = inttoptr i64 %1670 to i64*
  %1674 = load i64, i64* %1673
  store i64 %1674, i64* %R14, align 8, !tbaa !2428
  %1675 = load i64, i64* %RBP
  %1676 = sub i64 %1675, 192
  %1677 = load i64, i64* %PC
  %1678 = add i64 %1677, 7
  store i64 %1678, i64* %PC
  %1679 = inttoptr i64 %1676 to i64*
  %1680 = load i64, i64* %1679
  store i64 %1680, i64* %R15, align 8, !tbaa !2428
  %1681 = load i64, i64* %RBP
  %1682 = sub i64 %1681, 48
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 4
  store i64 %1684, i64* %PC
  %1685 = inttoptr i64 %1682 to i64*
  %1686 = load i64, i64* %1685
  store i64 %1686, i64* %R12, align 8, !tbaa !2428
  %1687 = load i64, i64* %R12
  %1688 = add i64 %1687, 512
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 8
  store i64 %1690, i64* %PC
  %1691 = inttoptr i64 %1688 to i64*
  %1692 = load i64, i64* %1691
  store i64 %1692, i64* %R12, align 8, !tbaa !2428
  %1693 = load i64, i64* %RSP
  %1694 = load i64, i64* %R10
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 4
  store i64 %1696, i64* %PC
  %1697 = inttoptr i64 %1693 to i64*
  store i64 %1694, i64* %1697
  %1698 = load i64, i64* %RSP
  %1699 = add i64 %1698, 8
  %1700 = load i64, i64* %R11
  %1701 = load i64, i64* %PC
  %1702 = add i64 %1701, 5
  store i64 %1702, i64* %PC
  %1703 = inttoptr i64 %1699 to i64*
  store i64 %1700, i64* %1703
  %1704 = load i64, i64* %RSP
  %1705 = add i64 %1704, 16
  %1706 = load i64, i64* %RBX
  %1707 = load i64, i64* %PC
  %1708 = add i64 %1707, 5
  store i64 %1708, i64* %PC
  %1709 = inttoptr i64 %1705 to i64*
  store i64 %1706, i64* %1709
  %1710 = load i64, i64* %RSP
  %1711 = add i64 %1710, 24
  %1712 = load i64, i64* %R14
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 5
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1711 to i64*
  store i64 %1712, i64* %1715
  %1716 = load i64, i64* %RSP
  %1717 = add i64 %1716, 32
  %1718 = load i64, i64* %R15
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 5
  store i64 %1720, i64* %PC
  %1721 = inttoptr i64 %1717 to i64*
  store i64 %1718, i64* %1721
  %1722 = load i64, i64* %RSP
  %1723 = add i64 %1722, 40
  %1724 = load i64, i64* %R12
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 5
  store i64 %1726, i64* %PC
  %1727 = inttoptr i64 %1723 to i64*
  store i64 %1724, i64* %1727
  %1728 = load i64, i64* %PC
  %1729 = add i64 %1728, 3526
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 5
  %1732 = load i64, i64* %PC
  %1733 = add i64 %1732, 5
  store i64 %1733, i64* %PC
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1735 = load i64, i64* %1734, align 8, !tbaa !2428
  %1736 = add i64 %1735, -8
  %1737 = inttoptr i64 %1736 to i64*
  store i64 %1731, i64* %1737
  store i64 %1736, i64* %1734, align 8, !tbaa !2428
  %1738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1729, i64* %1738, align 8, !tbaa !2428
  %1739 = load i64, i64* %PC
  %1740 = call %struct.Memory* @sub_404090_update_tree_renamed_(%struct.State* %0, i64 %1739, %struct.Memory* %MEMORY.10)
  %1741 = bitcast i32* %R13D to i64*
  %1742 = load i64, i64* %PC
  %1743 = add i64 %1742, 6
  store i64 %1743, i64* %PC
  store i64 200, i64* %1741, align 8, !tbaa !2428
  %1744 = load i32, i32* %R13D
  %1745 = zext i32 %1744 to i64
  %1746 = load i64, i64* %PC
  %1747 = add i64 %1746, 3
  store i64 %1747, i64* %PC
  %1748 = and i64 %1745, 4294967295
  store i64 %1748, i64* %RCX, align 8, !tbaa !2428
  %1749 = load i64, i64* %RBP
  %1750 = sub i64 %1749, 136
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 7
  store i64 %1752, i64* %PC
  %1753 = inttoptr i64 %1750 to i64*
  %1754 = load i64, i64* %1753
  store i64 %1754, i64* %RDX, align 8, !tbaa !2428
  %1755 = load i64, i64* %RDX
  %1756 = add i64 %1755, 24
  %1757 = load i64, i64* %PC
  %1758 = add i64 %1757, 7
  store i64 %1758, i64* %PC
  %1759 = inttoptr i64 %1756 to i32*
  store i32 0, i32* %1759
  %1760 = load i64, i64* %RBP
  %1761 = sub i64 %1760, 184
  %1762 = load i64, i64* %PC
  %1763 = add i64 %1762, 7
  store i64 %1763, i64* %PC
  %1764 = inttoptr i64 %1761 to i64*
  %1765 = load i64, i64* %1764
  store i64 %1765, i64* %RDX, align 8, !tbaa !2428
  %1766 = bitcast i32* %R13D to i64*
  %1767 = load i32, i32* %EDX
  %1768 = zext i32 %1767 to i64
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 3
  store i64 %1770, i64* %PC
  %1771 = and i64 %1768, 4294967295
  store i64 %1771, i64* %1766, align 8, !tbaa !2428
  %1772 = load i64, i64* %RBP
  %1773 = sub i64 %1772, 144
  %1774 = load i64, i64* %PC
  %1775 = add i64 %1774, 7
  store i64 %1775, i64* %PC
  %1776 = inttoptr i64 %1773 to i64*
  %1777 = load i64, i64* %1776
  store i64 %1777, i64* %RDX, align 8, !tbaa !2428
  %1778 = load i64, i64* %RDX
  %1779 = add i64 %1778, 24
  %1780 = load i32, i32* %R13D
  %1781 = zext i32 %1780 to i64
  %1782 = load i64, i64* %PC
  %1783 = add i64 %1782, 4
  store i64 %1783, i64* %PC
  %1784 = inttoptr i64 %1779 to i32*
  store i32 %1780, i32* %1784
  %1785 = load i64, i64* %RBP
  %1786 = sub i64 %1785, 200
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 7
  store i64 %1788, i64* %PC
  %1789 = inttoptr i64 %1786 to i64*
  %1790 = load i64, i64* %1789
  store i64 %1790, i64* %RDX, align 8, !tbaa !2428
  %1791 = load i64, i64* %RDX
  %1792 = load i64, i64* %PC
  %1793 = add i64 %1792, 3
  store i64 %1793, i64* %PC
  %1794 = inttoptr i64 %1791 to i64*
  %1795 = load i64, i64* %1794
  store i64 %1795, i64* %RDX, align 8, !tbaa !2428
  %1796 = load i64, i64* %RDX
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 4
  store i64 %1798, i64* %PC
  %1799 = sub i64 %1796, 1
  store i64 %1799, i64* %RDX, align 8, !tbaa !2428
  %1800 = icmp ult i64 %1796, 1
  %1801 = zext i1 %1800 to i8
  %1802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1801, i8* %1802, align 1, !tbaa !2432
  %1803 = trunc i64 %1799 to i32
  %1804 = and i32 %1803, 255
  %1805 = call i32 @llvm.ctpop.i32(i32 %1804) #16
  %1806 = trunc i32 %1805 to i8
  %1807 = and i8 %1806, 1
  %1808 = xor i8 %1807, 1
  %1809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1808, i8* %1809, align 1, !tbaa !2446
  %1810 = xor i64 1, %1796
  %1811 = xor i64 %1810, %1799
  %1812 = lshr i64 %1811, 4
  %1813 = trunc i64 %1812 to i8
  %1814 = and i8 %1813, 1
  %1815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1814, i8* %1815, align 1, !tbaa !2447
  %1816 = icmp eq i64 %1799, 0
  %1817 = zext i1 %1816 to i8
  %1818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1817, i8* %1818, align 1, !tbaa !2448
  %1819 = lshr i64 %1799, 63
  %1820 = trunc i64 %1819 to i8
  %1821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1820, i8* %1821, align 1, !tbaa !2449
  %1822 = lshr i64 %1796, 63
  %1823 = xor i64 %1819, %1822
  %1824 = add nuw nsw i64 %1823, %1822
  %1825 = icmp eq i64 %1824, 2
  %1826 = zext i1 %1825 to i8
  %1827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1826, i8* %1827, align 1, !tbaa !2450
  %1828 = load i64, i64* %RDX
  %1829 = load i64, i64* %PC
  %1830 = add i64 %1829, 3
  store i64 %1830, i64* %PC
  store i64 %1828, i64* %RAX, align 8, !tbaa !2428
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 2
  store i64 %1832, i64* %PC
  %1833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1835 = load i64, i64* %1834, align 8, !tbaa !2428
  %1836 = ashr i64 %1835, 63
  store i64 %1836, i64* %1833, align 8, !tbaa !2428
  %1837 = load i64, i64* %RCX
  %1838 = load i64, i64* %PC
  %1839 = add i64 %1838, 3
  store i64 %1839, i64* %PC
  %1840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1841 = load i64, i64* %1840, align 8, !tbaa !2428
  %1842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1843 = load i64, i64* %1842, align 8, !tbaa !2428
  %1844 = sext i64 %1837 to i128
  %1845 = and i128 %1844, -18446744073709551616
  %1846 = zext i64 %1843 to i128
  %1847 = shl nuw i128 %1846, 64
  %1848 = zext i64 %1841 to i128
  %1849 = or i128 %1847, %1848
  %1850 = zext i64 %1837 to i128
  %1851 = or i128 %1845, %1850
  %1852 = sdiv i128 %1849, %1851
  %1853 = trunc i128 %1852 to i64
  %1854 = and i128 %1852, 18446744073709551615
  %1855 = sext i64 %1853 to i128
  %1856 = and i128 %1855, -18446744073709551616
  %1857 = or i128 %1856, %1854
  %1858 = icmp eq i128 %1852, %1857
  br i1 %1858, label %1863, label %1859

; <label>:1859:                                   ; preds = %block_403261
  %1860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1861 = load i64, i64* %1860, align 8, !tbaa !2428
  %1862 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1861, %struct.Memory* %1740) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:1863:                                   ; preds = %block_403261
  %1864 = srem i128 %1849, %1851
  %1865 = trunc i128 %1864 to i64
  store i64 %1853, i64* %1840, align 8, !tbaa !2428
  store i64 %1865, i64* %1842, align 8, !tbaa !2428
  %1866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1866, align 1, !tbaa !2432
  %1867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1867, align 1, !tbaa !2446
  %1868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1868, align 1, !tbaa !2447
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1869, align 1, !tbaa !2448
  %1870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1870, align 1, !tbaa !2449
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1871, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %1859, %1863
  %1872 = phi %struct.Memory* [ %1862, %1859 ], [ %1740, %1863 ]
  %1873 = load i64, i64* %RDX
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 4
  store i64 %1875, i64* %PC
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1876, align 1, !tbaa !2432
  %1877 = trunc i64 %1873 to i32
  %1878 = and i32 %1877, 255
  %1879 = call i32 @llvm.ctpop.i32(i32 %1878) #16
  %1880 = trunc i32 %1879 to i8
  %1881 = and i8 %1880, 1
  %1882 = xor i8 %1881, 1
  %1883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1882, i8* %1883, align 1, !tbaa !2446
  %1884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1884, align 1, !tbaa !2447
  %1885 = icmp eq i64 %1873, 0
  %1886 = zext i1 %1885 to i8
  %1887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1886, i8* %1887, align 1, !tbaa !2448
  %1888 = lshr i64 %1873, 63
  %1889 = trunc i64 %1888 to i8
  %1890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1889, i8* %1890, align 1, !tbaa !2449
  %1891 = lshr i64 %1873, 63
  %1892 = xor i64 %1888, %1891
  %1893 = add nuw nsw i64 %1892, %1891
  %1894 = icmp eq i64 %1893, 2
  %1895 = zext i1 %1894 to i8
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1895, i8* %1896, align 1, !tbaa !2450
  %1897 = load i64, i64* %PC
  %1898 = add i64 %1897, 28
  %1899 = load i64, i64* %PC
  %1900 = add i64 %1899, 6
  %1901 = load i64, i64* %PC
  %1902 = add i64 %1901, 6
  store i64 %1902, i64* %PC
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1904 = load i8, i8* %1903, align 1, !tbaa !2448
  %1905 = icmp eq i8 %1904, 0
  %1906 = zext i1 %1905 to i8
  store i8 %1906, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1908 = select i1 %1905, i64 %1898, i64 %1900
  store i64 %1908, i64* %1907, align 8, !tbaa !2428
  %1909 = load i8, i8* %BRANCH_TAKEN
  %1910 = icmp eq i8 %1909, 1
  br i1 %1910, label %block_403331, label %block_40331b

block_4030a5:                                     ; preds = %block_403073
  %1911 = sub i64 %963, 200
  %1912 = load i64, i64* %PC
  %1913 = add i64 %1912, 7
  store i64 %1913, i64* %PC
  %1914 = inttoptr i64 %1911 to i64*
  %1915 = load i64, i64* %1914
  store i64 %1915, i64* %RAX, align 8, !tbaa !2428
  %1916 = load i64, i64* %RAX
  %1917 = load i64, i64* %PC
  %1918 = add i64 %1917, 3
  store i64 %1918, i64* %PC
  %1919 = inttoptr i64 %1916 to i64*
  %1920 = load i64, i64* %1919
  store i64 %1920, i64* %RCX, align 8, !tbaa !2428
  %1921 = load i64, i64* %RCX
  %1922 = load i64, i64* %PC
  %1923 = add i64 %1922, 4
  store i64 %1923, i64* %PC
  %1924 = add i64 1, %1921
  store i64 %1924, i64* %RCX, align 8, !tbaa !2428
  %1925 = icmp ult i64 %1924, %1921
  %1926 = icmp ult i64 %1924, 1
  %1927 = or i1 %1925, %1926
  %1928 = zext i1 %1927 to i8
  %1929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1928, i8* %1929, align 1, !tbaa !2432
  %1930 = trunc i64 %1924 to i32
  %1931 = and i32 %1930, 255
  %1932 = call i32 @llvm.ctpop.i32(i32 %1931) #16
  %1933 = trunc i32 %1932 to i8
  %1934 = and i8 %1933, 1
  %1935 = xor i8 %1934, 1
  %1936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1935, i8* %1936, align 1, !tbaa !2446
  %1937 = xor i64 1, %1921
  %1938 = xor i64 %1937, %1924
  %1939 = lshr i64 %1938, 4
  %1940 = trunc i64 %1939 to i8
  %1941 = and i8 %1940, 1
  %1942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1941, i8* %1942, align 1, !tbaa !2447
  %1943 = icmp eq i64 %1924, 0
  %1944 = zext i1 %1943 to i8
  %1945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1944, i8* %1945, align 1, !tbaa !2448
  %1946 = lshr i64 %1924, 63
  %1947 = trunc i64 %1946 to i8
  %1948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1947, i8* %1948, align 1, !tbaa !2449
  %1949 = lshr i64 %1921, 63
  %1950 = xor i64 %1946, %1949
  %1951 = add nuw nsw i64 %1950, %1946
  %1952 = icmp eq i64 %1951, 2
  %1953 = zext i1 %1952 to i8
  %1954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1953, i8* %1954, align 1, !tbaa !2450
  %1955 = load i64, i64* %RAX
  %1956 = load i64, i64* %RCX
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 3
  store i64 %1958, i64* %PC
  %1959 = inttoptr i64 %1955 to i64*
  store i64 %1956, i64* %1959
  %1960 = load i64, i64* %RBP
  %1961 = sub i64 %1960, 192
  %1962 = load i64, i64* %PC
  %1963 = add i64 %1962, 8
  store i64 %1963, i64* %PC
  %1964 = inttoptr i64 %1961 to i64*
  %1965 = load i64, i64* %1964
  %1966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1966, align 1, !tbaa !2432
  %1967 = trunc i64 %1965 to i32
  %1968 = and i32 %1967, 255
  %1969 = call i32 @llvm.ctpop.i32(i32 %1968) #16
  %1970 = trunc i32 %1969 to i8
  %1971 = and i8 %1970, 1
  %1972 = xor i8 %1971, 1
  %1973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1972, i8* %1973, align 1, !tbaa !2446
  %1974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1974, align 1, !tbaa !2447
  %1975 = icmp eq i64 %1965, 0
  %1976 = zext i1 %1975 to i8
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1976, i8* %1977, align 1, !tbaa !2448
  %1978 = lshr i64 %1965, 63
  %1979 = trunc i64 %1978 to i8
  %1980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1979, i8* %1980, align 1, !tbaa !2449
  %1981 = lshr i64 %1965, 63
  %1982 = xor i64 %1978, %1981
  %1983 = add nuw nsw i64 %1982, %1981
  %1984 = icmp eq i64 %1983, 2
  %1985 = zext i1 %1984 to i8
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1985, i8* %1986, align 1, !tbaa !2450
  %1987 = load i64, i64* %PC
  %1988 = add i64 %1987, 41
  %1989 = load i64, i64* %PC
  %1990 = add i64 %1989, 6
  %1991 = load i64, i64* %PC
  %1992 = add i64 %1991, 6
  store i64 %1992, i64* %PC
  %1993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1994 = load i8, i8* %1993, align 1, !tbaa !2448
  %1995 = icmp ne i8 %1994, 0
  %1996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1997 = load i8, i8* %1996, align 1, !tbaa !2449
  %1998 = icmp ne i8 %1997, 0
  %1999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2000 = load i8, i8* %1999, align 1, !tbaa !2450
  %2001 = icmp ne i8 %2000, 0
  %2002 = xor i1 %1998, %2001
  %2003 = or i1 %1995, %2002
  %2004 = zext i1 %2003 to i8
  store i8 %2004, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2006 = select i1 %2003, i64 %1988, i64 %1990
  store i64 %2006, i64* %2005, align 8, !tbaa !2428
  %2007 = load i8, i8* %BRANCH_TAKEN
  %2008 = icmp eq i8 %2007, 1
  %2009 = load i64, i64* %RBP
  %2010 = sub i64 %2009, 136
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 7
  store i64 %2012, i64* %PC
  %2013 = inttoptr i64 %2010 to i64*
  %2014 = load i64, i64* %2013
  store i64 %2014, i64* %RAX, align 8, !tbaa !2428
  %2015 = load i64, i64* %RAX
  br i1 %2008, label %block_4030e7, label %block_4030c4

block_403183:                                     ; preds = %block_403178
  %2016 = load i64, i64* %RBP
  %2017 = sub i64 %2016, 96
  %2018 = load i64, i64* %PC
  %2019 = add i64 %2018, 4
  store i64 %2019, i64* %PC
  %2020 = inttoptr i64 %2017 to i64*
  %2021 = load i64, i64* %2020
  store i64 %2021, i64* %RDI, align 8, !tbaa !2428
  %2022 = load i64, i64* %RBP
  %2023 = sub i64 %2022, 104
  %2024 = load i64, i64* %PC
  %2025 = add i64 %2024, 4
  store i64 %2025, i64* %PC
  %2026 = inttoptr i64 %2023 to i64*
  %2027 = load i64, i64* %2026
  store i64 %2027, i64* %RSI, align 8, !tbaa !2428
  %2028 = load i64, i64* %RBP
  %2029 = sub i64 %2028, 128
  %2030 = load i64, i64* %PC
  %2031 = add i64 %2030, 4
  store i64 %2031, i64* %PC
  %2032 = inttoptr i64 %2029 to i64*
  %2033 = load i64, i64* %2032
  store i64 %2033, i64* %RDX, align 8, !tbaa !2428
  %2034 = load i64, i64* %PC
  %2035 = sub i64 %2034, 639
  %2036 = load i64, i64* %PC
  %2037 = add i64 %2036, 5
  %2038 = load i64, i64* %PC
  %2039 = add i64 %2038, 5
  store i64 %2039, i64* %PC
  %2040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2041 = load i64, i64* %2040, align 8, !tbaa !2428
  %2042 = add i64 %2041, -8
  %2043 = inttoptr i64 %2042 to i64*
  store i64 %2037, i64* %2043
  store i64 %2042, i64* %2040, align 8, !tbaa !2428
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2035, i64* %2044, align 8, !tbaa !2428
  %2045 = load i64, i64* %PC
  %2046 = call %struct.Memory* @sub_402f10_primal_update_flow_renamed_(%struct.State* %0, i64 %2045, %struct.Memory* %MEMORY.0)
  br label %block_403194

block_40324c:                                     ; preds = %block_403237
  %2047 = inttoptr i64 %872 to i64*
  store i64 1, i64* %2047
  %2048 = load i64, i64* %PC
  %2049 = add i64 %2048, 13
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 5
  store i64 %2051, i64* %PC
  %2052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2049, i64* %2052, align 8, !tbaa !2428
  br label %block_403261

block_403202:                                     ; preds = %block_4031c2
  %2053 = inttoptr i64 %804 to i64*
  store i64 2, i64* %2053
  br label %block_40320d
}

; Function Attrs: noinline
define %struct.Memory* @sub_400b80_insert_new_arc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400b80:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 11
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EAX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RAX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 5
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RCX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RDX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RSI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 11
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RDI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 13
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RSP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 15
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RBP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 17
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R8 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 19
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R9 = bitcast %union.anon* %47 to i64*
  %48 = load i64, i64* %RBP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 1
  store i64 %50, i64* %PC
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = add i64 %52, -8
  %54 = inttoptr i64 %53 to i64*
  store i64 %48, i64* %54
  store i64 %53, i64* %51, align 8, !tbaa !2428
  %55 = load i64, i64* %RSP
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 3
  store i64 %57, i64* %PC
  store i64 %55, i64* %RBP, align 8, !tbaa !2428
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 8
  %60 = load i64, i64* %RDI
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %59 to i64*
  store i64 %60, i64* %63
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %RSI
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 4
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %69
  %70 = load i64, i64* %RBP
  %71 = sub i64 %70, 24
  %72 = load i64, i64* %RDX
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %71 to i64*
  store i64 %72, i64* %75
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 32
  %78 = load i64, i64* %RCX
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 40
  %84 = load i64, i64* %R8
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 48
  %90 = load i64, i64* %R9
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %89 to i64*
  store i64 %90, i64* %93
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 24
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %95 to i64*
  %99 = load i64, i64* %98
  store i64 %99, i64* %RCX, align 8, !tbaa !2428
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 8
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RDX, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 16
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110
  store i64 %111, i64* %RSI, align 8, !tbaa !2428
  %112 = load i64, i64* %RSI
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC
  %115 = shl i64 %112, 5
  %116 = icmp slt i64 %115, 0
  %117 = shl i64 %115, 1
  store i64 %117, i64* %RSI, align 8, !tbaa !2428
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %119 = zext i1 %116 to i8
  store i8 %119, i8* %118, align 1, !tbaa !2451
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %121 = trunc i64 %117 to i32
  %122 = and i32 %121, 254
  %123 = call i32 @llvm.ctpop.i32(i32 %122) #16
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %120, align 1, !tbaa !2451
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %127, align 1, !tbaa !2451
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %129 = icmp eq i64 %117, 0
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %128, align 1, !tbaa !2451
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %132 = lshr i64 %117, 63
  %133 = trunc i64 %132 to i8
  store i8 %133, i8* %131, align 1, !tbaa !2451
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %134, align 1, !tbaa !2451
  %135 = load i64, i64* %RDX
  %136 = load i64, i64* %RSI
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 3
  store i64 %138, i64* %PC
  %139 = add i64 %136, %135
  store i64 %139, i64* %RDX, align 8, !tbaa !2428
  %140 = icmp ult i64 %139, %135
  %141 = icmp ult i64 %139, %136
  %142 = or i1 %140, %141
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %143, i8* %144, align 1, !tbaa !2432
  %145 = trunc i64 %139 to i32
  %146 = and i32 %145, 255
  %147 = call i32 @llvm.ctpop.i32(i32 %146) #16
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %150, i8* %151, align 1, !tbaa !2446
  %152 = xor i64 %136, %135
  %153 = xor i64 %152, %139
  %154 = lshr i64 %153, 4
  %155 = trunc i64 %154 to i8
  %156 = and i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %156, i8* %157, align 1, !tbaa !2447
  %158 = icmp eq i64 %139, 0
  %159 = zext i1 %158 to i8
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %159, i8* %160, align 1, !tbaa !2448
  %161 = lshr i64 %139, 63
  %162 = trunc i64 %161 to i8
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %162, i8* %163, align 1, !tbaa !2449
  %164 = lshr i64 %135, 63
  %165 = lshr i64 %136, 63
  %166 = xor i64 %161, %164
  %167 = xor i64 %161, %165
  %168 = add nuw nsw i64 %166, %167
  %169 = icmp eq i64 %168, 2
  %170 = zext i1 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %170, i8* %171, align 1, !tbaa !2450
  %172 = load i64, i64* %RDX
  %173 = add i64 %172, 8
  %174 = load i64, i64* %RCX
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %173 to i64*
  store i64 %174, i64* %177
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 32
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 4
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %184 = load i64, i64* %RBP
  %185 = sub i64 %184, 8
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 4
  store i64 %187, i64* %PC
  %188 = inttoptr i64 %185 to i64*
  %189 = load i64, i64* %188
  store i64 %189, i64* %RDX, align 8, !tbaa !2428
  %190 = load i64, i64* %RBP
  %191 = sub i64 %190, 16
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 4
  store i64 %193, i64* %PC
  %194 = inttoptr i64 %191 to i64*
  %195 = load i64, i64* %194
  store i64 %195, i64* %RSI, align 8, !tbaa !2428
  %196 = load i64, i64* %RSI
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC
  %199 = shl i64 %196, 5
  %200 = icmp slt i64 %199, 0
  %201 = shl i64 %199, 1
  store i64 %201, i64* %RSI, align 8, !tbaa !2428
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %203 = zext i1 %200 to i8
  store i8 %203, i8* %202, align 1, !tbaa !2451
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %205 = trunc i64 %201 to i32
  %206 = and i32 %205, 254
  %207 = call i32 @llvm.ctpop.i32(i32 %206) #16
  %208 = trunc i32 %207 to i8
  %209 = and i8 %208, 1
  %210 = xor i8 %209, 1
  store i8 %210, i8* %204, align 1, !tbaa !2451
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %211, align 1, !tbaa !2451
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %213 = icmp eq i64 %201, 0
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %212, align 1, !tbaa !2451
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %216 = lshr i64 %201, 63
  %217 = trunc i64 %216 to i8
  store i8 %217, i8* %215, align 1, !tbaa !2451
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %218, align 1, !tbaa !2451
  %219 = load i64, i64* %RDX
  %220 = load i64, i64* %RSI
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 3
  store i64 %222, i64* %PC
  %223 = add i64 %220, %219
  store i64 %223, i64* %RDX, align 8, !tbaa !2428
  %224 = icmp ult i64 %223, %219
  %225 = icmp ult i64 %223, %220
  %226 = or i1 %224, %225
  %227 = zext i1 %226 to i8
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %227, i8* %228, align 1, !tbaa !2432
  %229 = trunc i64 %223 to i32
  %230 = and i32 %229, 255
  %231 = call i32 @llvm.ctpop.i32(i32 %230) #16
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %234, i8* %235, align 1, !tbaa !2446
  %236 = xor i64 %220, %219
  %237 = xor i64 %236, %223
  %238 = lshr i64 %237, 4
  %239 = trunc i64 %238 to i8
  %240 = and i8 %239, 1
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %240, i8* %241, align 1, !tbaa !2447
  %242 = icmp eq i64 %223, 0
  %243 = zext i1 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %243, i8* %244, align 1, !tbaa !2448
  %245 = lshr i64 %223, 63
  %246 = trunc i64 %245 to i8
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %246, i8* %247, align 1, !tbaa !2449
  %248 = lshr i64 %219, 63
  %249 = lshr i64 %220, 63
  %250 = xor i64 %245, %248
  %251 = xor i64 %245, %249
  %252 = add nuw nsw i64 %250, %251
  %253 = icmp eq i64 %252, 2
  %254 = zext i1 %253 to i8
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %254, i8* %255, align 1, !tbaa !2450
  %256 = load i64, i64* %RDX
  %257 = add i64 %256, 16
  %258 = load i64, i64* %RCX
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 4
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %257 to i64*
  store i64 %258, i64* %261
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 40
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 4
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i64*
  %267 = load i64, i64* %266
  store i64 %267, i64* %RCX, align 8, !tbaa !2428
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 8
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 4
  store i64 %271, i64* %PC
  %272 = inttoptr i64 %269 to i64*
  %273 = load i64, i64* %272
  store i64 %273, i64* %RDX, align 8, !tbaa !2428
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 16
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 4
  store i64 %277, i64* %PC
  %278 = inttoptr i64 %275 to i64*
  %279 = load i64, i64* %278
  store i64 %279, i64* %RSI, align 8, !tbaa !2428
  %280 = load i64, i64* %RSI
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC
  %283 = shl i64 %280, 5
  %284 = icmp slt i64 %283, 0
  %285 = shl i64 %283, 1
  store i64 %285, i64* %RSI, align 8, !tbaa !2428
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %287 = zext i1 %284 to i8
  store i8 %287, i8* %286, align 1, !tbaa !2451
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %289 = trunc i64 %285 to i32
  %290 = and i32 %289, 254
  %291 = call i32 @llvm.ctpop.i32(i32 %290) #16
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  store i8 %294, i8* %288, align 1, !tbaa !2451
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %295, align 1, !tbaa !2451
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %297 = icmp eq i64 %285, 0
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %296, align 1, !tbaa !2451
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %300 = lshr i64 %285, 63
  %301 = trunc i64 %300 to i8
  store i8 %301, i8* %299, align 1, !tbaa !2451
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %302, align 1, !tbaa !2451
  %303 = load i64, i64* %RDX
  %304 = load i64, i64* %RSI
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC
  %307 = add i64 %304, %303
  store i64 %307, i64* %RDX, align 8, !tbaa !2428
  %308 = icmp ult i64 %307, %303
  %309 = icmp ult i64 %307, %304
  %310 = or i1 %308, %309
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %311, i8* %312, align 1, !tbaa !2432
  %313 = trunc i64 %307 to i32
  %314 = and i32 %313, 255
  %315 = call i32 @llvm.ctpop.i32(i32 %314) #16
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %318, i8* %319, align 1, !tbaa !2446
  %320 = xor i64 %304, %303
  %321 = xor i64 %320, %307
  %322 = lshr i64 %321, 4
  %323 = trunc i64 %322 to i8
  %324 = and i8 %323, 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %324, i8* %325, align 1, !tbaa !2447
  %326 = icmp eq i64 %307, 0
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %327, i8* %328, align 1, !tbaa !2448
  %329 = lshr i64 %307, 63
  %330 = trunc i64 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %330, i8* %331, align 1, !tbaa !2449
  %332 = lshr i64 %303, 63
  %333 = lshr i64 %304, 63
  %334 = xor i64 %329, %332
  %335 = xor i64 %329, %333
  %336 = add nuw nsw i64 %334, %335
  %337 = icmp eq i64 %336, 2
  %338 = zext i1 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %338, i8* %339, align 1, !tbaa !2450
  %340 = load i64, i64* %RDX
  %341 = add i64 %340, 56
  %342 = load i64, i64* %RCX
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 4
  store i64 %344, i64* %PC
  %345 = inttoptr i64 %341 to i64*
  store i64 %342, i64* %345
  %346 = load i64, i64* %RBP
  %347 = sub i64 %346, 40
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 4
  store i64 %349, i64* %PC
  %350 = inttoptr i64 %347 to i64*
  %351 = load i64, i64* %350
  store i64 %351, i64* %RCX, align 8, !tbaa !2428
  %352 = load i64, i64* %RBP
  %353 = sub i64 %352, 8
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 4
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %353 to i64*
  %357 = load i64, i64* %356
  store i64 %357, i64* %RDX, align 8, !tbaa !2428
  %358 = load i64, i64* %RBP
  %359 = sub i64 %358, 16
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 4
  store i64 %361, i64* %PC
  %362 = inttoptr i64 %359 to i64*
  %363 = load i64, i64* %362
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %364 = load i64, i64* %RSI
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 4
  store i64 %366, i64* %PC
  %367 = shl i64 %364, 5
  %368 = icmp slt i64 %367, 0
  %369 = shl i64 %367, 1
  store i64 %369, i64* %RSI, align 8, !tbaa !2428
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %371 = zext i1 %368 to i8
  store i8 %371, i8* %370, align 1, !tbaa !2451
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %373 = trunc i64 %369 to i32
  %374 = and i32 %373, 254
  %375 = call i32 @llvm.ctpop.i32(i32 %374) #16
  %376 = trunc i32 %375 to i8
  %377 = and i8 %376, 1
  %378 = xor i8 %377, 1
  store i8 %378, i8* %372, align 1, !tbaa !2451
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %379, align 1, !tbaa !2451
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %381 = icmp eq i64 %369, 0
  %382 = zext i1 %381 to i8
  store i8 %382, i8* %380, align 1, !tbaa !2451
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %384 = lshr i64 %369, 63
  %385 = trunc i64 %384 to i8
  store i8 %385, i8* %383, align 1, !tbaa !2451
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %386, align 1, !tbaa !2451
  %387 = load i64, i64* %RDX
  %388 = load i64, i64* %RSI
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 3
  store i64 %390, i64* %PC
  %391 = add i64 %388, %387
  store i64 %391, i64* %RDX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %387
  %393 = icmp ult i64 %391, %388
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 %388, %387
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %387, 63
  %417 = lshr i64 %388, 63
  %418 = xor i64 %413, %416
  %419 = xor i64 %413, %417
  %420 = add nuw nsw i64 %418, %419
  %421 = icmp eq i64 %420, 2
  %422 = zext i1 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %422, i8* %423, align 1, !tbaa !2450
  %424 = load i64, i64* %RDX
  %425 = load i64, i64* %RCX
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 3
  store i64 %427, i64* %PC
  %428 = inttoptr i64 %424 to i64*
  store i64 %425, i64* %428
  %429 = load i64, i64* %RBP
  %430 = sub i64 %429, 48
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 4
  store i64 %432, i64* %PC
  %433 = inttoptr i64 %430 to i64*
  %434 = load i64, i64* %433
  store i64 %434, i64* %RCX, align 8, !tbaa !2428
  %435 = load i64, i64* %RBP
  %436 = sub i64 %435, 8
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 4
  store i64 %438, i64* %PC
  %439 = inttoptr i64 %436 to i64*
  %440 = load i64, i64* %439
  store i64 %440, i64* %RDX, align 8, !tbaa !2428
  %441 = load i64, i64* %RBP
  %442 = sub i64 %441, 16
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC
  %445 = inttoptr i64 %442 to i64*
  %446 = load i64, i64* %445
  store i64 %446, i64* %RSI, align 8, !tbaa !2428
  %447 = load i64, i64* %RSI
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = shl i64 %447, 5
  %451 = icmp slt i64 %450, 0
  %452 = shl i64 %450, 1
  store i64 %452, i64* %RSI, align 8, !tbaa !2428
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %454 = zext i1 %451 to i8
  store i8 %454, i8* %453, align 1, !tbaa !2451
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %456 = trunc i64 %452 to i32
  %457 = and i32 %456, 254
  %458 = call i32 @llvm.ctpop.i32(i32 %457) #16
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = xor i8 %460, 1
  store i8 %461, i8* %455, align 1, !tbaa !2451
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %462, align 1, !tbaa !2451
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = icmp eq i64 %452, 0
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %463, align 1, !tbaa !2451
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %467 = lshr i64 %452, 63
  %468 = trunc i64 %467 to i8
  store i8 %468, i8* %466, align 1, !tbaa !2451
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %469, align 1, !tbaa !2451
  %470 = load i64, i64* %RDX
  %471 = load i64, i64* %RSI
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 3
  store i64 %473, i64* %PC
  %474 = add i64 %471, %470
  store i64 %474, i64* %RDX, align 8, !tbaa !2428
  %475 = icmp ult i64 %474, %470
  %476 = icmp ult i64 %474, %471
  %477 = or i1 %475, %476
  %478 = zext i1 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %478, i8* %479, align 1, !tbaa !2432
  %480 = trunc i64 %474 to i32
  %481 = and i32 %480, 255
  %482 = call i32 @llvm.ctpop.i32(i32 %481) #16
  %483 = trunc i32 %482 to i8
  %484 = and i8 %483, 1
  %485 = xor i8 %484, 1
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %485, i8* %486, align 1, !tbaa !2446
  %487 = xor i64 %471, %470
  %488 = xor i64 %487, %474
  %489 = lshr i64 %488, 4
  %490 = trunc i64 %489 to i8
  %491 = and i8 %490, 1
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %491, i8* %492, align 1, !tbaa !2447
  %493 = icmp eq i64 %474, 0
  %494 = zext i1 %493 to i8
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %494, i8* %495, align 1, !tbaa !2448
  %496 = lshr i64 %474, 63
  %497 = trunc i64 %496 to i8
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %497, i8* %498, align 1, !tbaa !2449
  %499 = lshr i64 %470, 63
  %500 = lshr i64 %471, 63
  %501 = xor i64 %496, %499
  %502 = xor i64 %496, %500
  %503 = add nuw nsw i64 %501, %502
  %504 = icmp eq i64 %503, 2
  %505 = zext i1 %504 to i8
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %505, i8* %506, align 1, !tbaa !2450
  %507 = load i64, i64* %RDX
  %508 = add i64 %507, 48
  %509 = load i64, i64* %RCX
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 4
  store i64 %511, i64* %PC
  %512 = inttoptr i64 %508 to i64*
  store i64 %509, i64* %512
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 16
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 4
  store i64 %516, i64* %PC
  %517 = inttoptr i64 %514 to i64*
  %518 = load i64, i64* %517
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = load i64, i64* %RCX
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 4
  store i64 %521, i64* %PC
  %522 = add i64 1, %519
  store i64 %522, i64* %RCX, align 8, !tbaa !2428
  %523 = icmp ult i64 %522, %519
  %524 = icmp ult i64 %522, 1
  %525 = or i1 %523, %524
  %526 = zext i1 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %526, i8* %527, align 1, !tbaa !2432
  %528 = trunc i64 %522 to i32
  %529 = and i32 %528, 255
  %530 = call i32 @llvm.ctpop.i32(i32 %529) #16
  %531 = trunc i32 %530 to i8
  %532 = and i8 %531, 1
  %533 = xor i8 %532, 1
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %533, i8* %534, align 1, !tbaa !2446
  %535 = xor i64 1, %519
  %536 = xor i64 %535, %522
  %537 = lshr i64 %536, 4
  %538 = trunc i64 %537 to i8
  %539 = and i8 %538, 1
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %539, i8* %540, align 1, !tbaa !2447
  %541 = icmp eq i64 %522, 0
  %542 = zext i1 %541 to i8
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %542, i8* %543, align 1, !tbaa !2448
  %544 = lshr i64 %522, 63
  %545 = trunc i64 %544 to i8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %545, i8* %546, align 1, !tbaa !2449
  %547 = lshr i64 %519, 63
  %548 = xor i64 %544, %547
  %549 = add nuw nsw i64 %548, %544
  %550 = icmp eq i64 %549, 2
  %551 = zext i1 %550 to i8
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %551, i8* %552, align 1, !tbaa !2450
  %553 = load i64, i64* %RBP
  %554 = sub i64 %553, 56
  %555 = load i64, i64* %RCX
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 4
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %554 to i64*
  store i64 %555, i64* %558
  br label %block_400c1a

block_400c7a:                                     ; preds = %block_400c6a
  %559 = add i64 %2872, 5
  store i64 %559, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %560 = load i32, i32* %EAX
  %561 = zext i32 %560 to i64
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 2
  store i64 %563, i64* %PC
  %564 = and i64 %561, 4294967295
  store i64 %564, i64* %RCX, align 8, !tbaa !2428
  %565 = load i64, i64* %RBP
  %566 = sub i64 %565, 8
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = inttoptr i64 %566 to i64*
  %570 = load i64, i64* %569
  store i64 %570, i64* %RDX, align 8, !tbaa !2428
  %571 = load i64, i64* %RBP
  %572 = sub i64 %571, 56
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 4
  store i64 %574, i64* %PC
  %575 = inttoptr i64 %572 to i64*
  %576 = load i64, i64* %575
  store i64 %576, i64* %RAX, align 8, !tbaa !2428
  %577 = load i64, i64* %RBP
  %578 = sub i64 %577, 80
  %579 = load i64, i64* %RDX
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 4
  store i64 %581, i64* %PC
  %582 = inttoptr i64 %578 to i64*
  store i64 %579, i64* %582
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 2
  store i64 %584, i64* %PC
  %585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %587 = load i64, i64* %586, align 8, !tbaa !2428
  %588 = ashr i64 %587, 63
  store i64 %588, i64* %585, align 8, !tbaa !2428
  %589 = load i64, i64* %RCX
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 3
  store i64 %591, i64* %PC
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %593 = load i64, i64* %592, align 8, !tbaa !2428
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %595 = load i64, i64* %594, align 8, !tbaa !2428
  %596 = sext i64 %589 to i128
  %597 = and i128 %596, -18446744073709551616
  %598 = zext i64 %595 to i128
  %599 = shl nuw i128 %598, 64
  %600 = zext i64 %593 to i128
  %601 = or i128 %599, %600
  %602 = zext i64 %589 to i128
  %603 = or i128 %597, %602
  %604 = sdiv i128 %601, %603
  %605 = trunc i128 %604 to i64
  %606 = and i128 %604, 18446744073709551615
  %607 = sext i64 %605 to i128
  %608 = and i128 %607, -18446744073709551616
  %609 = or i128 %608, %606
  %610 = icmp eq i128 %604, %609
  br i1 %610, label %615, label %611

; <label>:611:                                    ; preds = %block_400c7a
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %613 = load i64, i64* %612, align 8, !tbaa !2428
  %614 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %613, %struct.Memory* %MEMORY.0) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6

; <label>:615:                                    ; preds = %block_400c7a
  %616 = srem i128 %601, %603
  %617 = trunc i128 %616 to i64
  store i64 %605, i64* %592, align 8, !tbaa !2428
  store i64 %617, i64* %594, align 8, !tbaa !2428
  %618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %618, align 1, !tbaa !2432
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %619, align 1, !tbaa !2446
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %620, align 1, !tbaa !2447
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %621, align 1, !tbaa !2448
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %622, align 1, !tbaa !2449
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %623, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6: ; preds = %611, %615
  %624 = phi %struct.Memory* [ %614, %611 ], [ %MEMORY.0, %615 ]
  %625 = load i64, i64* %RAX
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 4
  store i64 %627, i64* %PC
  %628 = sub i64 %625, 1
  store i64 %628, i64* %RAX, align 8, !tbaa !2428
  %629 = icmp ult i64 %625, 1
  %630 = zext i1 %629 to i8
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %630, i8* %631, align 1, !tbaa !2432
  %632 = trunc i64 %628 to i32
  %633 = and i32 %632, 255
  %634 = call i32 @llvm.ctpop.i32(i32 %633) #16
  %635 = trunc i32 %634 to i8
  %636 = and i8 %635, 1
  %637 = xor i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %637, i8* %638, align 1, !tbaa !2446
  %639 = xor i64 1, %625
  %640 = xor i64 %639, %628
  %641 = lshr i64 %640, 4
  %642 = trunc i64 %641 to i8
  %643 = and i8 %642, 1
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %643, i8* %644, align 1, !tbaa !2447
  %645 = icmp eq i64 %628, 0
  %646 = zext i1 %645 to i8
  %647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %646, i8* %647, align 1, !tbaa !2448
  %648 = lshr i64 %628, 63
  %649 = trunc i64 %648 to i8
  %650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %649, i8* %650, align 1, !tbaa !2449
  %651 = lshr i64 %625, 63
  %652 = xor i64 %648, %651
  %653 = add nuw nsw i64 %652, %651
  %654 = icmp eq i64 %653, 2
  %655 = zext i1 %654 to i8
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %655, i8* %656, align 1, !tbaa !2450
  %657 = load i64, i64* %RAX
  %658 = load i64, i64* %PC
  %659 = add i64 %658, 4
  store i64 %659, i64* %PC
  %660 = shl i64 %657, 5
  %661 = icmp slt i64 %660, 0
  %662 = shl i64 %660, 1
  store i64 %662, i64* %RAX, align 8, !tbaa !2428
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %664 = zext i1 %661 to i8
  store i8 %664, i8* %663, align 1, !tbaa !2451
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %666 = trunc i64 %662 to i32
  %667 = and i32 %666, 254
  %668 = call i32 @llvm.ctpop.i32(i32 %667) #16
  %669 = trunc i32 %668 to i8
  %670 = and i8 %669, 1
  %671 = xor i8 %670, 1
  store i8 %671, i8* %665, align 1, !tbaa !2451
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %672, align 1, !tbaa !2451
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %674 = icmp eq i64 %662, 0
  %675 = zext i1 %674 to i8
  store i8 %675, i8* %673, align 1, !tbaa !2451
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %677 = lshr i64 %662, 63
  %678 = trunc i64 %677 to i8
  store i8 %678, i8* %676, align 1, !tbaa !2451
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %679, align 1, !tbaa !2451
  %680 = load i64, i64* %RBP
  %681 = sub i64 %680, 80
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 4
  store i64 %683, i64* %PC
  %684 = inttoptr i64 %681 to i64*
  %685 = load i64, i64* %684
  store i64 %685, i64* %RSI, align 8, !tbaa !2428
  %686 = load i64, i64* %RSI
  %687 = load i64, i64* %RAX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 3
  store i64 %689, i64* %PC
  %690 = add i64 %687, %686
  store i64 %690, i64* %RSI, align 8, !tbaa !2428
  %691 = icmp ult i64 %690, %686
  %692 = icmp ult i64 %690, %687
  %693 = or i1 %691, %692
  %694 = zext i1 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %694, i8* %695, align 1, !tbaa !2432
  %696 = trunc i64 %690 to i32
  %697 = and i32 %696, 255
  %698 = call i32 @llvm.ctpop.i32(i32 %697) #16
  %699 = trunc i32 %698 to i8
  %700 = and i8 %699, 1
  %701 = xor i8 %700, 1
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %701, i8* %702, align 1, !tbaa !2446
  %703 = xor i64 %687, %686
  %704 = xor i64 %703, %690
  %705 = lshr i64 %704, 4
  %706 = trunc i64 %705 to i8
  %707 = and i8 %706, 1
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %707, i8* %708, align 1, !tbaa !2447
  %709 = icmp eq i64 %690, 0
  %710 = zext i1 %709 to i8
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %710, i8* %711, align 1, !tbaa !2448
  %712 = lshr i64 %690, 63
  %713 = trunc i64 %712 to i8
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %713, i8* %714, align 1, !tbaa !2449
  %715 = lshr i64 %686, 63
  %716 = lshr i64 %687, 63
  %717 = xor i64 %712, %715
  %718 = xor i64 %712, %716
  %719 = add nuw nsw i64 %717, %718
  %720 = icmp eq i64 %719, 2
  %721 = zext i1 %720 to i8
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %721, i8* %722, align 1, !tbaa !2450
  %723 = load i64, i64* %RSI
  %724 = add i64 %723, 8
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 4
  store i64 %726, i64* %PC
  %727 = inttoptr i64 %724 to i64*
  %728 = load i64, i64* %727
  store i64 %728, i64* %RAX, align 8, !tbaa !2428
  %729 = load i64, i64* %RBP
  %730 = sub i64 %729, 8
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 4
  store i64 %732, i64* %PC
  %733 = inttoptr i64 %730 to i64*
  %734 = load i64, i64* %733
  store i64 %734, i64* %RSI, align 8, !tbaa !2428
  %735 = load i64, i64* %RBP
  %736 = sub i64 %735, 56
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 4
  store i64 %738, i64* %PC
  %739 = inttoptr i64 %736 to i64*
  %740 = load i64, i64* %739
  store i64 %740, i64* %RDI, align 8, !tbaa !2428
  %741 = load i64, i64* %RDI
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = sub i64 %741, 1
  store i64 %744, i64* %RDI, align 8, !tbaa !2428
  %745 = icmp ult i64 %741, 1
  %746 = zext i1 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %746, i8* %747, align 1, !tbaa !2432
  %748 = trunc i64 %744 to i32
  %749 = and i32 %748, 255
  %750 = call i32 @llvm.ctpop.i32(i32 %749) #16
  %751 = trunc i32 %750 to i8
  %752 = and i8 %751, 1
  %753 = xor i8 %752, 1
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %753, i8* %754, align 1, !tbaa !2446
  %755 = xor i64 1, %741
  %756 = xor i64 %755, %744
  %757 = lshr i64 %756, 4
  %758 = trunc i64 %757 to i8
  %759 = and i8 %758, 1
  %760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %759, i8* %760, align 1, !tbaa !2447
  %761 = icmp eq i64 %744, 0
  %762 = zext i1 %761 to i8
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %762, i8* %763, align 1, !tbaa !2448
  %764 = lshr i64 %744, 63
  %765 = trunc i64 %764 to i8
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %765, i8* %766, align 1, !tbaa !2449
  %767 = lshr i64 %741, 63
  %768 = xor i64 %764, %767
  %769 = add nuw nsw i64 %768, %767
  %770 = icmp eq i64 %769, 2
  %771 = zext i1 %770 to i8
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %771, i8* %772, align 1, !tbaa !2450
  %773 = load i64, i64* %RDI
  %774 = load i64, i64* %PC
  %775 = add i64 %774, 4
  store i64 %775, i64* %PC
  %776 = shl i64 %773, 5
  %777 = icmp slt i64 %776, 0
  %778 = shl i64 %776, 1
  store i64 %778, i64* %RDI, align 8, !tbaa !2428
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %780 = zext i1 %777 to i8
  store i8 %780, i8* %779, align 1, !tbaa !2451
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %782 = trunc i64 %778 to i32
  %783 = and i32 %782, 254
  %784 = call i32 @llvm.ctpop.i32(i32 %783) #16
  %785 = trunc i32 %784 to i8
  %786 = and i8 %785, 1
  %787 = xor i8 %786, 1
  store i8 %787, i8* %781, align 1, !tbaa !2451
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %788, align 1, !tbaa !2451
  %789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %790 = icmp eq i64 %778, 0
  %791 = zext i1 %790 to i8
  store i8 %791, i8* %789, align 1, !tbaa !2451
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %793 = lshr i64 %778, 63
  %794 = trunc i64 %793 to i8
  store i8 %794, i8* %792, align 1, !tbaa !2451
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %795, align 1, !tbaa !2451
  %796 = load i64, i64* %RSI
  %797 = load i64, i64* %RDI
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 3
  store i64 %799, i64* %PC
  %800 = add i64 %797, %796
  store i64 %800, i64* %RSI, align 8, !tbaa !2428
  %801 = icmp ult i64 %800, %796
  %802 = icmp ult i64 %800, %797
  %803 = or i1 %801, %802
  %804 = zext i1 %803 to i8
  %805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %804, i8* %805, align 1, !tbaa !2432
  %806 = trunc i64 %800 to i32
  %807 = and i32 %806, 255
  %808 = call i32 @llvm.ctpop.i32(i32 %807) #16
  %809 = trunc i32 %808 to i8
  %810 = and i8 %809, 1
  %811 = xor i8 %810, 1
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %811, i8* %812, align 1, !tbaa !2446
  %813 = xor i64 %797, %796
  %814 = xor i64 %813, %800
  %815 = lshr i64 %814, 4
  %816 = trunc i64 %815 to i8
  %817 = and i8 %816, 1
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %817, i8* %818, align 1, !tbaa !2447
  %819 = icmp eq i64 %800, 0
  %820 = zext i1 %819 to i8
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %820, i8* %821, align 1, !tbaa !2448
  %822 = lshr i64 %800, 63
  %823 = trunc i64 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %823, i8* %824, align 1, !tbaa !2449
  %825 = lshr i64 %796, 63
  %826 = lshr i64 %797, 63
  %827 = xor i64 %822, %825
  %828 = xor i64 %822, %826
  %829 = add nuw nsw i64 %827, %828
  %830 = icmp eq i64 %829, 2
  %831 = zext i1 %830 to i8
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %831, i8* %832, align 1, !tbaa !2450
  %833 = load i64, i64* %RSI
  %834 = add i64 %833, 8
  %835 = load i64, i64* %RAX
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 4
  store i64 %837, i64* %PC
  %838 = inttoptr i64 %834 to i64*
  store i64 %835, i64* %838
  %839 = load i64, i64* %RBP
  %840 = sub i64 %839, 8
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 4
  store i64 %842, i64* %PC
  %843 = inttoptr i64 %840 to i64*
  %844 = load i64, i64* %843
  store i64 %844, i64* %RAX, align 8, !tbaa !2428
  %845 = load i64, i64* %RBP
  %846 = sub i64 %845, 56
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 4
  store i64 %848, i64* %PC
  %849 = inttoptr i64 %846 to i64*
  %850 = load i64, i64* %849
  store i64 %850, i64* %RSI, align 8, !tbaa !2428
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 88
  %853 = load i64, i64* %RAX
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 4
  store i64 %855, i64* %PC
  %856 = inttoptr i64 %852 to i64*
  store i64 %853, i64* %856
  %857 = load i64, i64* %RSI
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 3
  store i64 %859, i64* %PC
  store i64 %857, i64* %RAX, align 8, !tbaa !2428
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 2
  store i64 %861, i64* %PC
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %864 = load i64, i64* %863, align 8, !tbaa !2428
  %865 = ashr i64 %864, 63
  store i64 %865, i64* %862, align 8, !tbaa !2428
  %866 = load i64, i64* %RCX
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 3
  store i64 %868, i64* %PC
  %869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %870 = load i64, i64* %869, align 8, !tbaa !2428
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %872 = load i64, i64* %871, align 8, !tbaa !2428
  %873 = sext i64 %866 to i128
  %874 = and i128 %873, -18446744073709551616
  %875 = zext i64 %872 to i128
  %876 = shl nuw i128 %875, 64
  %877 = zext i64 %870 to i128
  %878 = or i128 %876, %877
  %879 = zext i64 %866 to i128
  %880 = or i128 %874, %879
  %881 = sdiv i128 %878, %880
  %882 = trunc i128 %881 to i64
  %883 = and i128 %881, 18446744073709551615
  %884 = sext i64 %882 to i128
  %885 = and i128 %884, -18446744073709551616
  %886 = or i128 %885, %883
  %887 = icmp eq i128 %881, %886
  br i1 %887, label %892, label %888

; <label>:888:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %890 = load i64, i64* %889, align 8, !tbaa !2428
  %891 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %890, %struct.Memory* %624) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5

; <label>:892:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6
  %893 = srem i128 %878, %880
  %894 = trunc i128 %893 to i64
  store i64 %882, i64* %869, align 8, !tbaa !2428
  store i64 %894, i64* %871, align 8, !tbaa !2428
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %895, align 1, !tbaa !2432
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %896, align 1, !tbaa !2446
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %897, align 1, !tbaa !2447
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %898, align 1, !tbaa !2448
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %899, align 1, !tbaa !2449
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %900, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5: ; preds = %888, %892
  %901 = phi %struct.Memory* [ %891, %888 ], [ %624, %892 ]
  %902 = load i64, i64* %RAX
  %903 = load i64, i64* %PC
  %904 = add i64 %903, 4
  store i64 %904, i64* %PC
  %905 = sub i64 %902, 1
  store i64 %905, i64* %RAX, align 8, !tbaa !2428
  %906 = icmp ult i64 %902, 1
  %907 = zext i1 %906 to i8
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %907, i8* %908, align 1, !tbaa !2432
  %909 = trunc i64 %905 to i32
  %910 = and i32 %909, 255
  %911 = call i32 @llvm.ctpop.i32(i32 %910) #16
  %912 = trunc i32 %911 to i8
  %913 = and i8 %912, 1
  %914 = xor i8 %913, 1
  %915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %914, i8* %915, align 1, !tbaa !2446
  %916 = xor i64 1, %902
  %917 = xor i64 %916, %905
  %918 = lshr i64 %917, 4
  %919 = trunc i64 %918 to i8
  %920 = and i8 %919, 1
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %920, i8* %921, align 1, !tbaa !2447
  %922 = icmp eq i64 %905, 0
  %923 = zext i1 %922 to i8
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %923, i8* %924, align 1, !tbaa !2448
  %925 = lshr i64 %905, 63
  %926 = trunc i64 %925 to i8
  %927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %926, i8* %927, align 1, !tbaa !2449
  %928 = lshr i64 %902, 63
  %929 = xor i64 %925, %928
  %930 = add nuw nsw i64 %929, %928
  %931 = icmp eq i64 %930, 2
  %932 = zext i1 %931 to i8
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %932, i8* %933, align 1, !tbaa !2450
  %934 = load i64, i64* %RAX
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 4
  store i64 %936, i64* %PC
  %937 = shl i64 %934, 5
  %938 = icmp slt i64 %937, 0
  %939 = shl i64 %937, 1
  store i64 %939, i64* %RAX, align 8, !tbaa !2428
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %941 = zext i1 %938 to i8
  store i8 %941, i8* %940, align 1, !tbaa !2451
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %943 = trunc i64 %939 to i32
  %944 = and i32 %943, 254
  %945 = call i32 @llvm.ctpop.i32(i32 %944) #16
  %946 = trunc i32 %945 to i8
  %947 = and i8 %946, 1
  %948 = xor i8 %947, 1
  store i8 %948, i8* %942, align 1, !tbaa !2451
  %949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %949, align 1, !tbaa !2451
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %951 = icmp eq i64 %939, 0
  %952 = zext i1 %951 to i8
  store i8 %952, i8* %950, align 1, !tbaa !2451
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %954 = lshr i64 %939, 63
  %955 = trunc i64 %954 to i8
  store i8 %955, i8* %953, align 1, !tbaa !2451
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %956, align 1, !tbaa !2451
  %957 = load i64, i64* %RBP
  %958 = sub i64 %957, 88
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 4
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %958 to i64*
  %962 = load i64, i64* %961
  store i64 %962, i64* %RSI, align 8, !tbaa !2428
  %963 = load i64, i64* %RSI
  %964 = load i64, i64* %RAX
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 3
  store i64 %966, i64* %PC
  %967 = add i64 %964, %963
  store i64 %967, i64* %RSI, align 8, !tbaa !2428
  %968 = icmp ult i64 %967, %963
  %969 = icmp ult i64 %967, %964
  %970 = or i1 %968, %969
  %971 = zext i1 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %971, i8* %972, align 1, !tbaa !2432
  %973 = trunc i64 %967 to i32
  %974 = and i32 %973, 255
  %975 = call i32 @llvm.ctpop.i32(i32 %974) #16
  %976 = trunc i32 %975 to i8
  %977 = and i8 %976, 1
  %978 = xor i8 %977, 1
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %978, i8* %979, align 1, !tbaa !2446
  %980 = xor i64 %964, %963
  %981 = xor i64 %980, %967
  %982 = lshr i64 %981, 4
  %983 = trunc i64 %982 to i8
  %984 = and i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %984, i8* %985, align 1, !tbaa !2447
  %986 = icmp eq i64 %967, 0
  %987 = zext i1 %986 to i8
  %988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %987, i8* %988, align 1, !tbaa !2448
  %989 = lshr i64 %967, 63
  %990 = trunc i64 %989 to i8
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %990, i8* %991, align 1, !tbaa !2449
  %992 = lshr i64 %963, 63
  %993 = lshr i64 %964, 63
  %994 = xor i64 %989, %992
  %995 = xor i64 %989, %993
  %996 = add nuw nsw i64 %994, %995
  %997 = icmp eq i64 %996, 2
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %998, i8* %999, align 1, !tbaa !2450
  %1000 = load i64, i64* %RSI
  %1001 = add i64 %1000, 16
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 4
  store i64 %1003, i64* %PC
  %1004 = inttoptr i64 %1001 to i64*
  %1005 = load i64, i64* %1004
  store i64 %1005, i64* %RAX, align 8, !tbaa !2428
  %1006 = load i64, i64* %RBP
  %1007 = sub i64 %1006, 8
  %1008 = load i64, i64* %PC
  %1009 = add i64 %1008, 4
  store i64 %1009, i64* %PC
  %1010 = inttoptr i64 %1007 to i64*
  %1011 = load i64, i64* %1010
  store i64 %1011, i64* %RSI, align 8, !tbaa !2428
  %1012 = load i64, i64* %RBP
  %1013 = sub i64 %1012, 56
  %1014 = load i64, i64* %PC
  %1015 = add i64 %1014, 4
  store i64 %1015, i64* %PC
  %1016 = inttoptr i64 %1013 to i64*
  %1017 = load i64, i64* %1016
  store i64 %1017, i64* %RDI, align 8, !tbaa !2428
  %1018 = load i64, i64* %RDI
  %1019 = load i64, i64* %PC
  %1020 = add i64 %1019, 4
  store i64 %1020, i64* %PC
  %1021 = sub i64 %1018, 1
  store i64 %1021, i64* %RDI, align 8, !tbaa !2428
  %1022 = icmp ult i64 %1018, 1
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1023, i8* %1024, align 1, !tbaa !2432
  %1025 = trunc i64 %1021 to i32
  %1026 = and i32 %1025, 255
  %1027 = call i32 @llvm.ctpop.i32(i32 %1026) #16
  %1028 = trunc i32 %1027 to i8
  %1029 = and i8 %1028, 1
  %1030 = xor i8 %1029, 1
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1030, i8* %1031, align 1, !tbaa !2446
  %1032 = xor i64 1, %1018
  %1033 = xor i64 %1032, %1021
  %1034 = lshr i64 %1033, 4
  %1035 = trunc i64 %1034 to i8
  %1036 = and i8 %1035, 1
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1036, i8* %1037, align 1, !tbaa !2447
  %1038 = icmp eq i64 %1021, 0
  %1039 = zext i1 %1038 to i8
  %1040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1039, i8* %1040, align 1, !tbaa !2448
  %1041 = lshr i64 %1021, 63
  %1042 = trunc i64 %1041 to i8
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1042, i8* %1043, align 1, !tbaa !2449
  %1044 = lshr i64 %1018, 63
  %1045 = xor i64 %1041, %1044
  %1046 = add nuw nsw i64 %1045, %1044
  %1047 = icmp eq i64 %1046, 2
  %1048 = zext i1 %1047 to i8
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1048, i8* %1049, align 1, !tbaa !2450
  %1050 = load i64, i64* %RDI
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 4
  store i64 %1052, i64* %PC
  %1053 = shl i64 %1050, 5
  %1054 = icmp slt i64 %1053, 0
  %1055 = shl i64 %1053, 1
  store i64 %1055, i64* %RDI, align 8, !tbaa !2428
  %1056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1057 = zext i1 %1054 to i8
  store i8 %1057, i8* %1056, align 1, !tbaa !2451
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1059 = trunc i64 %1055 to i32
  %1060 = and i32 %1059, 254
  %1061 = call i32 @llvm.ctpop.i32(i32 %1060) #16
  %1062 = trunc i32 %1061 to i8
  %1063 = and i8 %1062, 1
  %1064 = xor i8 %1063, 1
  store i8 %1064, i8* %1058, align 1, !tbaa !2451
  %1065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1065, align 1, !tbaa !2451
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1067 = icmp eq i64 %1055, 0
  %1068 = zext i1 %1067 to i8
  store i8 %1068, i8* %1066, align 1, !tbaa !2451
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1070 = lshr i64 %1055, 63
  %1071 = trunc i64 %1070 to i8
  store i8 %1071, i8* %1069, align 1, !tbaa !2451
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1072, align 1, !tbaa !2451
  %1073 = load i64, i64* %RSI
  %1074 = load i64, i64* %RDI
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 3
  store i64 %1076, i64* %PC
  %1077 = add i64 %1074, %1073
  store i64 %1077, i64* %RSI, align 8, !tbaa !2428
  %1078 = icmp ult i64 %1077, %1073
  %1079 = icmp ult i64 %1077, %1074
  %1080 = or i1 %1078, %1079
  %1081 = zext i1 %1080 to i8
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1081, i8* %1082, align 1, !tbaa !2432
  %1083 = trunc i64 %1077 to i32
  %1084 = and i32 %1083, 255
  %1085 = call i32 @llvm.ctpop.i32(i32 %1084) #16
  %1086 = trunc i32 %1085 to i8
  %1087 = and i8 %1086, 1
  %1088 = xor i8 %1087, 1
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1088, i8* %1089, align 1, !tbaa !2446
  %1090 = xor i64 %1074, %1073
  %1091 = xor i64 %1090, %1077
  %1092 = lshr i64 %1091, 4
  %1093 = trunc i64 %1092 to i8
  %1094 = and i8 %1093, 1
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1094, i8* %1095, align 1, !tbaa !2447
  %1096 = icmp eq i64 %1077, 0
  %1097 = zext i1 %1096 to i8
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1097, i8* %1098, align 1, !tbaa !2448
  %1099 = lshr i64 %1077, 63
  %1100 = trunc i64 %1099 to i8
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1100, i8* %1101, align 1, !tbaa !2449
  %1102 = lshr i64 %1073, 63
  %1103 = lshr i64 %1074, 63
  %1104 = xor i64 %1099, %1102
  %1105 = xor i64 %1099, %1103
  %1106 = add nuw nsw i64 %1104, %1105
  %1107 = icmp eq i64 %1106, 2
  %1108 = zext i1 %1107 to i8
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1108, i8* %1109, align 1, !tbaa !2450
  %1110 = load i64, i64* %RSI
  %1111 = add i64 %1110, 16
  %1112 = load i64, i64* %RAX
  %1113 = load i64, i64* %PC
  %1114 = add i64 %1113, 4
  store i64 %1114, i64* %PC
  %1115 = inttoptr i64 %1111 to i64*
  store i64 %1112, i64* %1115
  %1116 = load i64, i64* %RBP
  %1117 = sub i64 %1116, 8
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 4
  store i64 %1119, i64* %PC
  %1120 = inttoptr i64 %1117 to i64*
  %1121 = load i64, i64* %1120
  store i64 %1121, i64* %RAX, align 8, !tbaa !2428
  %1122 = load i64, i64* %RBP
  %1123 = sub i64 %1122, 56
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 4
  store i64 %1125, i64* %PC
  %1126 = inttoptr i64 %1123 to i64*
  %1127 = load i64, i64* %1126
  store i64 %1127, i64* %RSI, align 8, !tbaa !2428
  %1128 = load i64, i64* %RBP
  %1129 = sub i64 %1128, 96
  %1130 = load i64, i64* %RAX
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 4
  store i64 %1132, i64* %PC
  %1133 = inttoptr i64 %1129 to i64*
  store i64 %1130, i64* %1133
  %1134 = load i64, i64* %RSI
  %1135 = load i64, i64* %PC
  %1136 = add i64 %1135, 3
  store i64 %1136, i64* %PC
  store i64 %1134, i64* %RAX, align 8, !tbaa !2428
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 2
  store i64 %1138, i64* %PC
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1141 = load i64, i64* %1140, align 8, !tbaa !2428
  %1142 = ashr i64 %1141, 63
  store i64 %1142, i64* %1139, align 8, !tbaa !2428
  %1143 = load i64, i64* %RCX
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 3
  store i64 %1145, i64* %PC
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1147 = load i64, i64* %1146, align 8, !tbaa !2428
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1149 = load i64, i64* %1148, align 8, !tbaa !2428
  %1150 = sext i64 %1143 to i128
  %1151 = and i128 %1150, -18446744073709551616
  %1152 = zext i64 %1149 to i128
  %1153 = shl nuw i128 %1152, 64
  %1154 = zext i64 %1147 to i128
  %1155 = or i128 %1153, %1154
  %1156 = zext i64 %1143 to i128
  %1157 = or i128 %1151, %1156
  %1158 = sdiv i128 %1155, %1157
  %1159 = trunc i128 %1158 to i64
  %1160 = and i128 %1158, 18446744073709551615
  %1161 = sext i64 %1159 to i128
  %1162 = and i128 %1161, -18446744073709551616
  %1163 = or i128 %1162, %1160
  %1164 = icmp eq i128 %1158, %1163
  br i1 %1164, label %1169, label %1165

; <label>:1165:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5
  %1166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1167 = load i64, i64* %1166, align 8, !tbaa !2428
  %1168 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1167, %struct.Memory* %901) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4

; <label>:1169:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5
  %1170 = srem i128 %1155, %1157
  %1171 = trunc i128 %1170 to i64
  store i64 %1159, i64* %1146, align 8, !tbaa !2428
  store i64 %1171, i64* %1148, align 8, !tbaa !2428
  %1172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1172, align 1, !tbaa !2432
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1173, align 1, !tbaa !2446
  %1174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1174, align 1, !tbaa !2447
  %1175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1175, align 1, !tbaa !2448
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1176, align 1, !tbaa !2449
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1177, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4: ; preds = %1165, %1169
  %1178 = phi %struct.Memory* [ %1168, %1165 ], [ %901, %1169 ]
  %1179 = load i64, i64* %RAX
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 4
  store i64 %1181, i64* %PC
  %1182 = sub i64 %1179, 1
  store i64 %1182, i64* %RAX, align 8, !tbaa !2428
  %1183 = icmp ult i64 %1179, 1
  %1184 = zext i1 %1183 to i8
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1184, i8* %1185, align 1, !tbaa !2432
  %1186 = trunc i64 %1182 to i32
  %1187 = and i32 %1186, 255
  %1188 = call i32 @llvm.ctpop.i32(i32 %1187) #16
  %1189 = trunc i32 %1188 to i8
  %1190 = and i8 %1189, 1
  %1191 = xor i8 %1190, 1
  %1192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1191, i8* %1192, align 1, !tbaa !2446
  %1193 = xor i64 1, %1179
  %1194 = xor i64 %1193, %1182
  %1195 = lshr i64 %1194, 4
  %1196 = trunc i64 %1195 to i8
  %1197 = and i8 %1196, 1
  %1198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1197, i8* %1198, align 1, !tbaa !2447
  %1199 = icmp eq i64 %1182, 0
  %1200 = zext i1 %1199 to i8
  %1201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1200, i8* %1201, align 1, !tbaa !2448
  %1202 = lshr i64 %1182, 63
  %1203 = trunc i64 %1202 to i8
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1203, i8* %1204, align 1, !tbaa !2449
  %1205 = lshr i64 %1179, 63
  %1206 = xor i64 %1202, %1205
  %1207 = add nuw nsw i64 %1206, %1205
  %1208 = icmp eq i64 %1207, 2
  %1209 = zext i1 %1208 to i8
  %1210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1209, i8* %1210, align 1, !tbaa !2450
  %1211 = load i64, i64* %RAX
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 4
  store i64 %1213, i64* %PC
  %1214 = shl i64 %1211, 5
  %1215 = icmp slt i64 %1214, 0
  %1216 = shl i64 %1214, 1
  store i64 %1216, i64* %RAX, align 8, !tbaa !2428
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1218 = zext i1 %1215 to i8
  store i8 %1218, i8* %1217, align 1, !tbaa !2451
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1220 = trunc i64 %1216 to i32
  %1221 = and i32 %1220, 254
  %1222 = call i32 @llvm.ctpop.i32(i32 %1221) #16
  %1223 = trunc i32 %1222 to i8
  %1224 = and i8 %1223, 1
  %1225 = xor i8 %1224, 1
  store i8 %1225, i8* %1219, align 1, !tbaa !2451
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1226, align 1, !tbaa !2451
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1228 = icmp eq i64 %1216, 0
  %1229 = zext i1 %1228 to i8
  store i8 %1229, i8* %1227, align 1, !tbaa !2451
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1231 = lshr i64 %1216, 63
  %1232 = trunc i64 %1231 to i8
  store i8 %1232, i8* %1230, align 1, !tbaa !2451
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1233, align 1, !tbaa !2451
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 96
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 4
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i64*
  %1239 = load i64, i64* %1238
  store i64 %1239, i64* %RSI, align 8, !tbaa !2428
  %1240 = load i64, i64* %RSI
  %1241 = load i64, i64* %RAX
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 3
  store i64 %1243, i64* %PC
  %1244 = add i64 %1241, %1240
  store i64 %1244, i64* %RSI, align 8, !tbaa !2428
  %1245 = icmp ult i64 %1244, %1240
  %1246 = icmp ult i64 %1244, %1241
  %1247 = or i1 %1245, %1246
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1248, i8* %1249, align 1, !tbaa !2432
  %1250 = trunc i64 %1244 to i32
  %1251 = and i32 %1250, 255
  %1252 = call i32 @llvm.ctpop.i32(i32 %1251) #16
  %1253 = trunc i32 %1252 to i8
  %1254 = and i8 %1253, 1
  %1255 = xor i8 %1254, 1
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1255, i8* %1256, align 1, !tbaa !2446
  %1257 = xor i64 %1241, %1240
  %1258 = xor i64 %1257, %1244
  %1259 = lshr i64 %1258, 4
  %1260 = trunc i64 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1261, i8* %1262, align 1, !tbaa !2447
  %1263 = icmp eq i64 %1244, 0
  %1264 = zext i1 %1263 to i8
  %1265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1264, i8* %1265, align 1, !tbaa !2448
  %1266 = lshr i64 %1244, 63
  %1267 = trunc i64 %1266 to i8
  %1268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1267, i8* %1268, align 1, !tbaa !2449
  %1269 = lshr i64 %1240, 63
  %1270 = lshr i64 %1241, 63
  %1271 = xor i64 %1266, %1269
  %1272 = xor i64 %1266, %1270
  %1273 = add nuw nsw i64 %1271, %1272
  %1274 = icmp eq i64 %1273, 2
  %1275 = zext i1 %1274 to i8
  %1276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1275, i8* %1276, align 1, !tbaa !2450
  %1277 = load i64, i64* %RSI
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 3
  store i64 %1279, i64* %PC
  %1280 = inttoptr i64 %1277 to i64*
  %1281 = load i64, i64* %1280
  store i64 %1281, i64* %RAX, align 8, !tbaa !2428
  %1282 = load i64, i64* %RBP
  %1283 = sub i64 %1282, 8
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 4
  store i64 %1285, i64* %PC
  %1286 = inttoptr i64 %1283 to i64*
  %1287 = load i64, i64* %1286
  store i64 %1287, i64* %RSI, align 8, !tbaa !2428
  %1288 = load i64, i64* %RBP
  %1289 = sub i64 %1288, 56
  %1290 = load i64, i64* %PC
  %1291 = add i64 %1290, 4
  store i64 %1291, i64* %PC
  %1292 = inttoptr i64 %1289 to i64*
  %1293 = load i64, i64* %1292
  store i64 %1293, i64* %RDI, align 8, !tbaa !2428
  %1294 = load i64, i64* %RDI
  %1295 = load i64, i64* %PC
  %1296 = add i64 %1295, 4
  store i64 %1296, i64* %PC
  %1297 = sub i64 %1294, 1
  store i64 %1297, i64* %RDI, align 8, !tbaa !2428
  %1298 = icmp ult i64 %1294, 1
  %1299 = zext i1 %1298 to i8
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1299, i8* %1300, align 1, !tbaa !2432
  %1301 = trunc i64 %1297 to i32
  %1302 = and i32 %1301, 255
  %1303 = call i32 @llvm.ctpop.i32(i32 %1302) #16
  %1304 = trunc i32 %1303 to i8
  %1305 = and i8 %1304, 1
  %1306 = xor i8 %1305, 1
  %1307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1306, i8* %1307, align 1, !tbaa !2446
  %1308 = xor i64 1, %1294
  %1309 = xor i64 %1308, %1297
  %1310 = lshr i64 %1309, 4
  %1311 = trunc i64 %1310 to i8
  %1312 = and i8 %1311, 1
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1312, i8* %1313, align 1, !tbaa !2447
  %1314 = icmp eq i64 %1297, 0
  %1315 = zext i1 %1314 to i8
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1315, i8* %1316, align 1, !tbaa !2448
  %1317 = lshr i64 %1297, 63
  %1318 = trunc i64 %1317 to i8
  %1319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1318, i8* %1319, align 1, !tbaa !2449
  %1320 = lshr i64 %1294, 63
  %1321 = xor i64 %1317, %1320
  %1322 = add nuw nsw i64 %1321, %1320
  %1323 = icmp eq i64 %1322, 2
  %1324 = zext i1 %1323 to i8
  %1325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1324, i8* %1325, align 1, !tbaa !2450
  %1326 = load i64, i64* %RDI
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 4
  store i64 %1328, i64* %PC
  %1329 = shl i64 %1326, 5
  %1330 = icmp slt i64 %1329, 0
  %1331 = shl i64 %1329, 1
  store i64 %1331, i64* %RDI, align 8, !tbaa !2428
  %1332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1333 = zext i1 %1330 to i8
  store i8 %1333, i8* %1332, align 1, !tbaa !2451
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1335 = trunc i64 %1331 to i32
  %1336 = and i32 %1335, 254
  %1337 = call i32 @llvm.ctpop.i32(i32 %1336) #16
  %1338 = trunc i32 %1337 to i8
  %1339 = and i8 %1338, 1
  %1340 = xor i8 %1339, 1
  store i8 %1340, i8* %1334, align 1, !tbaa !2451
  %1341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1341, align 1, !tbaa !2451
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1343 = icmp eq i64 %1331, 0
  %1344 = zext i1 %1343 to i8
  store i8 %1344, i8* %1342, align 1, !tbaa !2451
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1346 = lshr i64 %1331, 63
  %1347 = trunc i64 %1346 to i8
  store i8 %1347, i8* %1345, align 1, !tbaa !2451
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1348, align 1, !tbaa !2451
  %1349 = load i64, i64* %RSI
  %1350 = load i64, i64* %RDI
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 3
  store i64 %1352, i64* %PC
  %1353 = add i64 %1350, %1349
  store i64 %1353, i64* %RSI, align 8, !tbaa !2428
  %1354 = icmp ult i64 %1353, %1349
  %1355 = icmp ult i64 %1353, %1350
  %1356 = or i1 %1354, %1355
  %1357 = zext i1 %1356 to i8
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1357, i8* %1358, align 1, !tbaa !2432
  %1359 = trunc i64 %1353 to i32
  %1360 = and i32 %1359, 255
  %1361 = call i32 @llvm.ctpop.i32(i32 %1360) #16
  %1362 = trunc i32 %1361 to i8
  %1363 = and i8 %1362, 1
  %1364 = xor i8 %1363, 1
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1364, i8* %1365, align 1, !tbaa !2446
  %1366 = xor i64 %1350, %1349
  %1367 = xor i64 %1366, %1353
  %1368 = lshr i64 %1367, 4
  %1369 = trunc i64 %1368 to i8
  %1370 = and i8 %1369, 1
  %1371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1370, i8* %1371, align 1, !tbaa !2447
  %1372 = icmp eq i64 %1353, 0
  %1373 = zext i1 %1372 to i8
  %1374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1373, i8* %1374, align 1, !tbaa !2448
  %1375 = lshr i64 %1353, 63
  %1376 = trunc i64 %1375 to i8
  %1377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1376, i8* %1377, align 1, !tbaa !2449
  %1378 = lshr i64 %1349, 63
  %1379 = lshr i64 %1350, 63
  %1380 = xor i64 %1375, %1378
  %1381 = xor i64 %1375, %1379
  %1382 = add nuw nsw i64 %1380, %1381
  %1383 = icmp eq i64 %1382, 2
  %1384 = zext i1 %1383 to i8
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1384, i8* %1385, align 1, !tbaa !2450
  %1386 = load i64, i64* %RSI
  %1387 = load i64, i64* %RAX
  %1388 = load i64, i64* %PC
  %1389 = add i64 %1388, 3
  store i64 %1389, i64* %PC
  %1390 = inttoptr i64 %1386 to i64*
  store i64 %1387, i64* %1390
  %1391 = load i64, i64* %RBP
  %1392 = sub i64 %1391, 8
  %1393 = load i64, i64* %PC
  %1394 = add i64 %1393, 4
  store i64 %1394, i64* %PC
  %1395 = inttoptr i64 %1392 to i64*
  %1396 = load i64, i64* %1395
  store i64 %1396, i64* %RAX, align 8, !tbaa !2428
  %1397 = load i64, i64* %RBP
  %1398 = sub i64 %1397, 56
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 4
  store i64 %1400, i64* %PC
  %1401 = inttoptr i64 %1398 to i64*
  %1402 = load i64, i64* %1401
  store i64 %1402, i64* %RSI, align 8, !tbaa !2428
  %1403 = load i64, i64* %RBP
  %1404 = sub i64 %1403, 104
  %1405 = load i64, i64* %RAX
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 4
  store i64 %1407, i64* %PC
  %1408 = inttoptr i64 %1404 to i64*
  store i64 %1405, i64* %1408
  %1409 = load i64, i64* %RSI
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 3
  store i64 %1411, i64* %PC
  store i64 %1409, i64* %RAX, align 8, !tbaa !2428
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 2
  store i64 %1413, i64* %PC
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1416 = load i64, i64* %1415, align 8, !tbaa !2428
  %1417 = ashr i64 %1416, 63
  store i64 %1417, i64* %1414, align 8, !tbaa !2428
  %1418 = load i64, i64* %RCX
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 3
  store i64 %1420, i64* %PC
  %1421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1422 = load i64, i64* %1421, align 8, !tbaa !2428
  %1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1424 = load i64, i64* %1423, align 8, !tbaa !2428
  %1425 = sext i64 %1418 to i128
  %1426 = and i128 %1425, -18446744073709551616
  %1427 = zext i64 %1424 to i128
  %1428 = shl nuw i128 %1427, 64
  %1429 = zext i64 %1422 to i128
  %1430 = or i128 %1428, %1429
  %1431 = zext i64 %1418 to i128
  %1432 = or i128 %1426, %1431
  %1433 = sdiv i128 %1430, %1432
  %1434 = trunc i128 %1433 to i64
  %1435 = and i128 %1433, 18446744073709551615
  %1436 = sext i64 %1434 to i128
  %1437 = and i128 %1436, -18446744073709551616
  %1438 = or i128 %1437, %1435
  %1439 = icmp eq i128 %1433, %1438
  br i1 %1439, label %1444, label %1440

; <label>:1440:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1442 = load i64, i64* %1441, align 8, !tbaa !2428
  %1443 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1442, %struct.Memory* %1178) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3

; <label>:1444:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4
  %1445 = srem i128 %1430, %1432
  %1446 = trunc i128 %1445 to i64
  store i64 %1434, i64* %1421, align 8, !tbaa !2428
  store i64 %1446, i64* %1423, align 8, !tbaa !2428
  %1447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1447, align 1, !tbaa !2432
  %1448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1448, align 1, !tbaa !2446
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1449, align 1, !tbaa !2447
  %1450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1450, align 1, !tbaa !2448
  %1451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1451, align 1, !tbaa !2449
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1452, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3: ; preds = %1440, %1444
  %1453 = phi %struct.Memory* [ %1443, %1440 ], [ %1178, %1444 ]
  %1454 = load i64, i64* %RAX
  %1455 = load i64, i64* %PC
  %1456 = add i64 %1455, 4
  store i64 %1456, i64* %PC
  %1457 = sub i64 %1454, 1
  store i64 %1457, i64* %RAX, align 8, !tbaa !2428
  %1458 = icmp ult i64 %1454, 1
  %1459 = zext i1 %1458 to i8
  %1460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1459, i8* %1460, align 1, !tbaa !2432
  %1461 = trunc i64 %1457 to i32
  %1462 = and i32 %1461, 255
  %1463 = call i32 @llvm.ctpop.i32(i32 %1462) #16
  %1464 = trunc i32 %1463 to i8
  %1465 = and i8 %1464, 1
  %1466 = xor i8 %1465, 1
  %1467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1466, i8* %1467, align 1, !tbaa !2446
  %1468 = xor i64 1, %1454
  %1469 = xor i64 %1468, %1457
  %1470 = lshr i64 %1469, 4
  %1471 = trunc i64 %1470 to i8
  %1472 = and i8 %1471, 1
  %1473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1472, i8* %1473, align 1, !tbaa !2447
  %1474 = icmp eq i64 %1457, 0
  %1475 = zext i1 %1474 to i8
  %1476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1475, i8* %1476, align 1, !tbaa !2448
  %1477 = lshr i64 %1457, 63
  %1478 = trunc i64 %1477 to i8
  %1479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1478, i8* %1479, align 1, !tbaa !2449
  %1480 = lshr i64 %1454, 63
  %1481 = xor i64 %1477, %1480
  %1482 = add nuw nsw i64 %1481, %1480
  %1483 = icmp eq i64 %1482, 2
  %1484 = zext i1 %1483 to i8
  %1485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1484, i8* %1485, align 1, !tbaa !2450
  %1486 = load i64, i64* %RAX
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 4
  store i64 %1488, i64* %PC
  %1489 = shl i64 %1486, 5
  %1490 = icmp slt i64 %1489, 0
  %1491 = shl i64 %1489, 1
  store i64 %1491, i64* %RAX, align 8, !tbaa !2428
  %1492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1493 = zext i1 %1490 to i8
  store i8 %1493, i8* %1492, align 1, !tbaa !2451
  %1494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1495 = trunc i64 %1491 to i32
  %1496 = and i32 %1495, 254
  %1497 = call i32 @llvm.ctpop.i32(i32 %1496) #16
  %1498 = trunc i32 %1497 to i8
  %1499 = and i8 %1498, 1
  %1500 = xor i8 %1499, 1
  store i8 %1500, i8* %1494, align 1, !tbaa !2451
  %1501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1501, align 1, !tbaa !2451
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1503 = icmp eq i64 %1491, 0
  %1504 = zext i1 %1503 to i8
  store i8 %1504, i8* %1502, align 1, !tbaa !2451
  %1505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1506 = lshr i64 %1491, 63
  %1507 = trunc i64 %1506 to i8
  store i8 %1507, i8* %1505, align 1, !tbaa !2451
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1508, align 1, !tbaa !2451
  %1509 = load i64, i64* %RBP
  %1510 = sub i64 %1509, 104
  %1511 = load i64, i64* %PC
  %1512 = add i64 %1511, 4
  store i64 %1512, i64* %PC
  %1513 = inttoptr i64 %1510 to i64*
  %1514 = load i64, i64* %1513
  store i64 %1514, i64* %RSI, align 8, !tbaa !2428
  %1515 = load i64, i64* %RSI
  %1516 = load i64, i64* %RAX
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 3
  store i64 %1518, i64* %PC
  %1519 = add i64 %1516, %1515
  store i64 %1519, i64* %RSI, align 8, !tbaa !2428
  %1520 = icmp ult i64 %1519, %1515
  %1521 = icmp ult i64 %1519, %1516
  %1522 = or i1 %1520, %1521
  %1523 = zext i1 %1522 to i8
  %1524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1523, i8* %1524, align 1, !tbaa !2432
  %1525 = trunc i64 %1519 to i32
  %1526 = and i32 %1525, 255
  %1527 = call i32 @llvm.ctpop.i32(i32 %1526) #16
  %1528 = trunc i32 %1527 to i8
  %1529 = and i8 %1528, 1
  %1530 = xor i8 %1529, 1
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1530, i8* %1531, align 1, !tbaa !2446
  %1532 = xor i64 %1516, %1515
  %1533 = xor i64 %1532, %1519
  %1534 = lshr i64 %1533, 4
  %1535 = trunc i64 %1534 to i8
  %1536 = and i8 %1535, 1
  %1537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1536, i8* %1537, align 1, !tbaa !2447
  %1538 = icmp eq i64 %1519, 0
  %1539 = zext i1 %1538 to i8
  %1540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1539, i8* %1540, align 1, !tbaa !2448
  %1541 = lshr i64 %1519, 63
  %1542 = trunc i64 %1541 to i8
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1542, i8* %1543, align 1, !tbaa !2449
  %1544 = lshr i64 %1515, 63
  %1545 = lshr i64 %1516, 63
  %1546 = xor i64 %1541, %1544
  %1547 = xor i64 %1541, %1545
  %1548 = add nuw nsw i64 %1546, %1547
  %1549 = icmp eq i64 %1548, 2
  %1550 = zext i1 %1549 to i8
  %1551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1550, i8* %1551, align 1, !tbaa !2450
  %1552 = load i64, i64* %RSI
  %1553 = load i64, i64* %PC
  %1554 = add i64 %1553, 3
  store i64 %1554, i64* %PC
  %1555 = inttoptr i64 %1552 to i64*
  %1556 = load i64, i64* %1555
  store i64 %1556, i64* %RAX, align 8, !tbaa !2428
  %1557 = load i64, i64* %RBP
  %1558 = sub i64 %1557, 8
  %1559 = load i64, i64* %PC
  %1560 = add i64 %1559, 4
  store i64 %1560, i64* %PC
  %1561 = inttoptr i64 %1558 to i64*
  %1562 = load i64, i64* %1561
  store i64 %1562, i64* %RSI, align 8, !tbaa !2428
  %1563 = load i64, i64* %RBP
  %1564 = sub i64 %1563, 56
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 4
  store i64 %1566, i64* %PC
  %1567 = inttoptr i64 %1564 to i64*
  %1568 = load i64, i64* %1567
  store i64 %1568, i64* %RDI, align 8, !tbaa !2428
  %1569 = load i64, i64* %RDI
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 4
  store i64 %1571, i64* %PC
  %1572 = sub i64 %1569, 1
  store i64 %1572, i64* %RDI, align 8, !tbaa !2428
  %1573 = icmp ult i64 %1569, 1
  %1574 = zext i1 %1573 to i8
  %1575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1574, i8* %1575, align 1, !tbaa !2432
  %1576 = trunc i64 %1572 to i32
  %1577 = and i32 %1576, 255
  %1578 = call i32 @llvm.ctpop.i32(i32 %1577) #16
  %1579 = trunc i32 %1578 to i8
  %1580 = and i8 %1579, 1
  %1581 = xor i8 %1580, 1
  %1582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1581, i8* %1582, align 1, !tbaa !2446
  %1583 = xor i64 1, %1569
  %1584 = xor i64 %1583, %1572
  %1585 = lshr i64 %1584, 4
  %1586 = trunc i64 %1585 to i8
  %1587 = and i8 %1586, 1
  %1588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1587, i8* %1588, align 1, !tbaa !2447
  %1589 = icmp eq i64 %1572, 0
  %1590 = zext i1 %1589 to i8
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1590, i8* %1591, align 1, !tbaa !2448
  %1592 = lshr i64 %1572, 63
  %1593 = trunc i64 %1592 to i8
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1593, i8* %1594, align 1, !tbaa !2449
  %1595 = lshr i64 %1569, 63
  %1596 = xor i64 %1592, %1595
  %1597 = add nuw nsw i64 %1596, %1595
  %1598 = icmp eq i64 %1597, 2
  %1599 = zext i1 %1598 to i8
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1599, i8* %1600, align 1, !tbaa !2450
  %1601 = load i64, i64* %RDI
  %1602 = load i64, i64* %PC
  %1603 = add i64 %1602, 4
  store i64 %1603, i64* %PC
  %1604 = shl i64 %1601, 5
  %1605 = icmp slt i64 %1604, 0
  %1606 = shl i64 %1604, 1
  store i64 %1606, i64* %RDI, align 8, !tbaa !2428
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1608 = zext i1 %1605 to i8
  store i8 %1608, i8* %1607, align 1, !tbaa !2451
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1610 = trunc i64 %1606 to i32
  %1611 = and i32 %1610, 254
  %1612 = call i32 @llvm.ctpop.i32(i32 %1611) #16
  %1613 = trunc i32 %1612 to i8
  %1614 = and i8 %1613, 1
  %1615 = xor i8 %1614, 1
  store i8 %1615, i8* %1609, align 1, !tbaa !2451
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1616, align 1, !tbaa !2451
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1618 = icmp eq i64 %1606, 0
  %1619 = zext i1 %1618 to i8
  store i8 %1619, i8* %1617, align 1, !tbaa !2451
  %1620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1621 = lshr i64 %1606, 63
  %1622 = trunc i64 %1621 to i8
  store i8 %1622, i8* %1620, align 1, !tbaa !2451
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1623, align 1, !tbaa !2451
  %1624 = load i64, i64* %RSI
  %1625 = load i64, i64* %RDI
  %1626 = load i64, i64* %PC
  %1627 = add i64 %1626, 3
  store i64 %1627, i64* %PC
  %1628 = add i64 %1625, %1624
  store i64 %1628, i64* %RSI, align 8, !tbaa !2428
  %1629 = icmp ult i64 %1628, %1624
  %1630 = icmp ult i64 %1628, %1625
  %1631 = or i1 %1629, %1630
  %1632 = zext i1 %1631 to i8
  %1633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1632, i8* %1633, align 1, !tbaa !2432
  %1634 = trunc i64 %1628 to i32
  %1635 = and i32 %1634, 255
  %1636 = call i32 @llvm.ctpop.i32(i32 %1635) #16
  %1637 = trunc i32 %1636 to i8
  %1638 = and i8 %1637, 1
  %1639 = xor i8 %1638, 1
  %1640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1639, i8* %1640, align 1, !tbaa !2446
  %1641 = xor i64 %1625, %1624
  %1642 = xor i64 %1641, %1628
  %1643 = lshr i64 %1642, 4
  %1644 = trunc i64 %1643 to i8
  %1645 = and i8 %1644, 1
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1645, i8* %1646, align 1, !tbaa !2447
  %1647 = icmp eq i64 %1628, 0
  %1648 = zext i1 %1647 to i8
  %1649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1648, i8* %1649, align 1, !tbaa !2448
  %1650 = lshr i64 %1628, 63
  %1651 = trunc i64 %1650 to i8
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1651, i8* %1652, align 1, !tbaa !2449
  %1653 = lshr i64 %1624, 63
  %1654 = lshr i64 %1625, 63
  %1655 = xor i64 %1650, %1653
  %1656 = xor i64 %1650, %1654
  %1657 = add nuw nsw i64 %1655, %1656
  %1658 = icmp eq i64 %1657, 2
  %1659 = zext i1 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1659, i8* %1660, align 1, !tbaa !2450
  %1661 = load i64, i64* %RSI
  %1662 = add i64 %1661, 56
  %1663 = load i64, i64* %RAX
  %1664 = load i64, i64* %PC
  %1665 = add i64 %1664, 4
  store i64 %1665, i64* %PC
  %1666 = inttoptr i64 %1662 to i64*
  store i64 %1663, i64* %1666
  %1667 = load i64, i64* %RBP
  %1668 = sub i64 %1667, 8
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 4
  store i64 %1670, i64* %PC
  %1671 = inttoptr i64 %1668 to i64*
  %1672 = load i64, i64* %1671
  store i64 %1672, i64* %RAX, align 8, !tbaa !2428
  %1673 = load i64, i64* %RBP
  %1674 = sub i64 %1673, 56
  %1675 = load i64, i64* %PC
  %1676 = add i64 %1675, 4
  store i64 %1676, i64* %PC
  %1677 = inttoptr i64 %1674 to i64*
  %1678 = load i64, i64* %1677
  store i64 %1678, i64* %RSI, align 8, !tbaa !2428
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 112
  %1681 = load i64, i64* %RAX
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 4
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1680 to i64*
  store i64 %1681, i64* %1684
  %1685 = load i64, i64* %RSI
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 3
  store i64 %1687, i64* %PC
  store i64 %1685, i64* %RAX, align 8, !tbaa !2428
  %1688 = load i64, i64* %PC
  %1689 = add i64 %1688, 2
  store i64 %1689, i64* %PC
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1692 = load i64, i64* %1691, align 8, !tbaa !2428
  %1693 = ashr i64 %1692, 63
  store i64 %1693, i64* %1690, align 8, !tbaa !2428
  %1694 = load i64, i64* %RCX
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 3
  store i64 %1696, i64* %PC
  %1697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1698 = load i64, i64* %1697, align 8, !tbaa !2428
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1700 = load i64, i64* %1699, align 8, !tbaa !2428
  %1701 = sext i64 %1694 to i128
  %1702 = and i128 %1701, -18446744073709551616
  %1703 = zext i64 %1700 to i128
  %1704 = shl nuw i128 %1703, 64
  %1705 = zext i64 %1698 to i128
  %1706 = or i128 %1704, %1705
  %1707 = zext i64 %1694 to i128
  %1708 = or i128 %1702, %1707
  %1709 = sdiv i128 %1706, %1708
  %1710 = trunc i128 %1709 to i64
  %1711 = and i128 %1709, 18446744073709551615
  %1712 = sext i64 %1710 to i128
  %1713 = and i128 %1712, -18446744073709551616
  %1714 = or i128 %1713, %1711
  %1715 = icmp eq i128 %1709, %1714
  br i1 %1715, label %1720, label %1716

; <label>:1716:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3
  %1717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1718 = load i64, i64* %1717, align 8, !tbaa !2428
  %1719 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1718, %struct.Memory* %1453) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

; <label>:1720:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3
  %1721 = srem i128 %1706, %1708
  %1722 = trunc i128 %1721 to i64
  store i64 %1710, i64* %1697, align 8, !tbaa !2428
  store i64 %1722, i64* %1699, align 8, !tbaa !2428
  %1723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1723, align 1, !tbaa !2432
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1724, align 1, !tbaa !2446
  %1725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1725, align 1, !tbaa !2447
  %1726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1726, align 1, !tbaa !2448
  %1727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1727, align 1, !tbaa !2449
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1728, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2: ; preds = %1716, %1720
  %1729 = phi %struct.Memory* [ %1719, %1716 ], [ %1453, %1720 ]
  %1730 = load i64, i64* %RAX
  %1731 = load i64, i64* %PC
  %1732 = add i64 %1731, 4
  store i64 %1732, i64* %PC
  %1733 = sub i64 %1730, 1
  store i64 %1733, i64* %RAX, align 8, !tbaa !2428
  %1734 = icmp ult i64 %1730, 1
  %1735 = zext i1 %1734 to i8
  %1736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1735, i8* %1736, align 1, !tbaa !2432
  %1737 = trunc i64 %1733 to i32
  %1738 = and i32 %1737, 255
  %1739 = call i32 @llvm.ctpop.i32(i32 %1738) #16
  %1740 = trunc i32 %1739 to i8
  %1741 = and i8 %1740, 1
  %1742 = xor i8 %1741, 1
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1742, i8* %1743, align 1, !tbaa !2446
  %1744 = xor i64 1, %1730
  %1745 = xor i64 %1744, %1733
  %1746 = lshr i64 %1745, 4
  %1747 = trunc i64 %1746 to i8
  %1748 = and i8 %1747, 1
  %1749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1748, i8* %1749, align 1, !tbaa !2447
  %1750 = icmp eq i64 %1733, 0
  %1751 = zext i1 %1750 to i8
  %1752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1751, i8* %1752, align 1, !tbaa !2448
  %1753 = lshr i64 %1733, 63
  %1754 = trunc i64 %1753 to i8
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1754, i8* %1755, align 1, !tbaa !2449
  %1756 = lshr i64 %1730, 63
  %1757 = xor i64 %1753, %1756
  %1758 = add nuw nsw i64 %1757, %1756
  %1759 = icmp eq i64 %1758, 2
  %1760 = zext i1 %1759 to i8
  %1761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1760, i8* %1761, align 1, !tbaa !2450
  %1762 = load i64, i64* %RAX
  %1763 = load i64, i64* %PC
  %1764 = add i64 %1763, 4
  store i64 %1764, i64* %PC
  %1765 = shl i64 %1762, 5
  %1766 = icmp slt i64 %1765, 0
  %1767 = shl i64 %1765, 1
  store i64 %1767, i64* %RAX, align 8, !tbaa !2428
  %1768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1769 = zext i1 %1766 to i8
  store i8 %1769, i8* %1768, align 1, !tbaa !2451
  %1770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1771 = trunc i64 %1767 to i32
  %1772 = and i32 %1771, 254
  %1773 = call i32 @llvm.ctpop.i32(i32 %1772) #16
  %1774 = trunc i32 %1773 to i8
  %1775 = and i8 %1774, 1
  %1776 = xor i8 %1775, 1
  store i8 %1776, i8* %1770, align 1, !tbaa !2451
  %1777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1777, align 1, !tbaa !2451
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1779 = icmp eq i64 %1767, 0
  %1780 = zext i1 %1779 to i8
  store i8 %1780, i8* %1778, align 1, !tbaa !2451
  %1781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1782 = lshr i64 %1767, 63
  %1783 = trunc i64 %1782 to i8
  store i8 %1783, i8* %1781, align 1, !tbaa !2451
  %1784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1784, align 1, !tbaa !2451
  %1785 = load i64, i64* %RBP
  %1786 = sub i64 %1785, 112
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 4
  store i64 %1788, i64* %PC
  %1789 = inttoptr i64 %1786 to i64*
  %1790 = load i64, i64* %1789
  store i64 %1790, i64* %RSI, align 8, !tbaa !2428
  %1791 = load i64, i64* %RSI
  %1792 = load i64, i64* %RAX
  %1793 = load i64, i64* %PC
  %1794 = add i64 %1793, 3
  store i64 %1794, i64* %PC
  %1795 = add i64 %1792, %1791
  store i64 %1795, i64* %RSI, align 8, !tbaa !2428
  %1796 = icmp ult i64 %1795, %1791
  %1797 = icmp ult i64 %1795, %1792
  %1798 = or i1 %1796, %1797
  %1799 = zext i1 %1798 to i8
  %1800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1799, i8* %1800, align 1, !tbaa !2432
  %1801 = trunc i64 %1795 to i32
  %1802 = and i32 %1801, 255
  %1803 = call i32 @llvm.ctpop.i32(i32 %1802) #16
  %1804 = trunc i32 %1803 to i8
  %1805 = and i8 %1804, 1
  %1806 = xor i8 %1805, 1
  %1807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1806, i8* %1807, align 1, !tbaa !2446
  %1808 = xor i64 %1792, %1791
  %1809 = xor i64 %1808, %1795
  %1810 = lshr i64 %1809, 4
  %1811 = trunc i64 %1810 to i8
  %1812 = and i8 %1811, 1
  %1813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1812, i8* %1813, align 1, !tbaa !2447
  %1814 = icmp eq i64 %1795, 0
  %1815 = zext i1 %1814 to i8
  %1816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1815, i8* %1816, align 1, !tbaa !2448
  %1817 = lshr i64 %1795, 63
  %1818 = trunc i64 %1817 to i8
  %1819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1818, i8* %1819, align 1, !tbaa !2449
  %1820 = lshr i64 %1791, 63
  %1821 = lshr i64 %1792, 63
  %1822 = xor i64 %1817, %1820
  %1823 = xor i64 %1817, %1821
  %1824 = add nuw nsw i64 %1822, %1823
  %1825 = icmp eq i64 %1824, 2
  %1826 = zext i1 %1825 to i8
  %1827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1826, i8* %1827, align 1, !tbaa !2450
  %1828 = load i64, i64* %RSI
  %1829 = add i64 %1828, 48
  %1830 = load i64, i64* %PC
  %1831 = add i64 %1830, 4
  store i64 %1831, i64* %PC
  %1832 = inttoptr i64 %1829 to i64*
  %1833 = load i64, i64* %1832
  store i64 %1833, i64* %RAX, align 8, !tbaa !2428
  %1834 = load i64, i64* %RBP
  %1835 = sub i64 %1834, 8
  %1836 = load i64, i64* %PC
  %1837 = add i64 %1836, 4
  store i64 %1837, i64* %PC
  %1838 = inttoptr i64 %1835 to i64*
  %1839 = load i64, i64* %1838
  store i64 %1839, i64* %RSI, align 8, !tbaa !2428
  %1840 = load i64, i64* %RBP
  %1841 = sub i64 %1840, 56
  %1842 = load i64, i64* %PC
  %1843 = add i64 %1842, 4
  store i64 %1843, i64* %PC
  %1844 = inttoptr i64 %1841 to i64*
  %1845 = load i64, i64* %1844
  store i64 %1845, i64* %RDI, align 8, !tbaa !2428
  %1846 = load i64, i64* %RDI
  %1847 = load i64, i64* %PC
  %1848 = add i64 %1847, 4
  store i64 %1848, i64* %PC
  %1849 = sub i64 %1846, 1
  store i64 %1849, i64* %RDI, align 8, !tbaa !2428
  %1850 = icmp ult i64 %1846, 1
  %1851 = zext i1 %1850 to i8
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1851, i8* %1852, align 1, !tbaa !2432
  %1853 = trunc i64 %1849 to i32
  %1854 = and i32 %1853, 255
  %1855 = call i32 @llvm.ctpop.i32(i32 %1854) #16
  %1856 = trunc i32 %1855 to i8
  %1857 = and i8 %1856, 1
  %1858 = xor i8 %1857, 1
  %1859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1858, i8* %1859, align 1, !tbaa !2446
  %1860 = xor i64 1, %1846
  %1861 = xor i64 %1860, %1849
  %1862 = lshr i64 %1861, 4
  %1863 = trunc i64 %1862 to i8
  %1864 = and i8 %1863, 1
  %1865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1864, i8* %1865, align 1, !tbaa !2447
  %1866 = icmp eq i64 %1849, 0
  %1867 = zext i1 %1866 to i8
  %1868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1867, i8* %1868, align 1, !tbaa !2448
  %1869 = lshr i64 %1849, 63
  %1870 = trunc i64 %1869 to i8
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1870, i8* %1871, align 1, !tbaa !2449
  %1872 = lshr i64 %1846, 63
  %1873 = xor i64 %1869, %1872
  %1874 = add nuw nsw i64 %1873, %1872
  %1875 = icmp eq i64 %1874, 2
  %1876 = zext i1 %1875 to i8
  %1877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1876, i8* %1877, align 1, !tbaa !2450
  %1878 = load i64, i64* %RDI
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 4
  store i64 %1880, i64* %PC
  %1881 = shl i64 %1878, 5
  %1882 = icmp slt i64 %1881, 0
  %1883 = shl i64 %1881, 1
  store i64 %1883, i64* %RDI, align 8, !tbaa !2428
  %1884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1885 = zext i1 %1882 to i8
  store i8 %1885, i8* %1884, align 1, !tbaa !2451
  %1886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1887 = trunc i64 %1883 to i32
  %1888 = and i32 %1887, 254
  %1889 = call i32 @llvm.ctpop.i32(i32 %1888) #16
  %1890 = trunc i32 %1889 to i8
  %1891 = and i8 %1890, 1
  %1892 = xor i8 %1891, 1
  store i8 %1892, i8* %1886, align 1, !tbaa !2451
  %1893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1893, align 1, !tbaa !2451
  %1894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1895 = icmp eq i64 %1883, 0
  %1896 = zext i1 %1895 to i8
  store i8 %1896, i8* %1894, align 1, !tbaa !2451
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1898 = lshr i64 %1883, 63
  %1899 = trunc i64 %1898 to i8
  store i8 %1899, i8* %1897, align 1, !tbaa !2451
  %1900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1900, align 1, !tbaa !2451
  %1901 = load i64, i64* %RSI
  %1902 = load i64, i64* %RDI
  %1903 = load i64, i64* %PC
  %1904 = add i64 %1903, 3
  store i64 %1904, i64* %PC
  %1905 = add i64 %1902, %1901
  store i64 %1905, i64* %RSI, align 8, !tbaa !2428
  %1906 = icmp ult i64 %1905, %1901
  %1907 = icmp ult i64 %1905, %1902
  %1908 = or i1 %1906, %1907
  %1909 = zext i1 %1908 to i8
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1909, i8* %1910, align 1, !tbaa !2432
  %1911 = trunc i64 %1905 to i32
  %1912 = and i32 %1911, 255
  %1913 = call i32 @llvm.ctpop.i32(i32 %1912) #16
  %1914 = trunc i32 %1913 to i8
  %1915 = and i8 %1914, 1
  %1916 = xor i8 %1915, 1
  %1917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1916, i8* %1917, align 1, !tbaa !2446
  %1918 = xor i64 %1902, %1901
  %1919 = xor i64 %1918, %1905
  %1920 = lshr i64 %1919, 4
  %1921 = trunc i64 %1920 to i8
  %1922 = and i8 %1921, 1
  %1923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1922, i8* %1923, align 1, !tbaa !2447
  %1924 = icmp eq i64 %1905, 0
  %1925 = zext i1 %1924 to i8
  %1926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1925, i8* %1926, align 1, !tbaa !2448
  %1927 = lshr i64 %1905, 63
  %1928 = trunc i64 %1927 to i8
  %1929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1928, i8* %1929, align 1, !tbaa !2449
  %1930 = lshr i64 %1901, 63
  %1931 = lshr i64 %1902, 63
  %1932 = xor i64 %1927, %1930
  %1933 = xor i64 %1927, %1931
  %1934 = add nuw nsw i64 %1932, %1933
  %1935 = icmp eq i64 %1934, 2
  %1936 = zext i1 %1935 to i8
  %1937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1936, i8* %1937, align 1, !tbaa !2450
  %1938 = load i64, i64* %RSI
  %1939 = add i64 %1938, 48
  %1940 = load i64, i64* %RAX
  %1941 = load i64, i64* %PC
  %1942 = add i64 %1941, 4
  store i64 %1942, i64* %PC
  %1943 = inttoptr i64 %1939 to i64*
  store i64 %1940, i64* %1943
  %1944 = load i64, i64* %RBP
  %1945 = sub i64 %1944, 56
  %1946 = load i64, i64* %PC
  %1947 = add i64 %1946, 4
  store i64 %1947, i64* %PC
  %1948 = inttoptr i64 %1945 to i64*
  %1949 = load i64, i64* %1948
  store i64 %1949, i64* %RAX, align 8, !tbaa !2428
  %1950 = load i64, i64* %PC
  %1951 = add i64 %1950, 2
  store i64 %1951, i64* %PC
  %1952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1954 = load i64, i64* %1953, align 8, !tbaa !2428
  %1955 = ashr i64 %1954, 63
  store i64 %1955, i64* %1952, align 8, !tbaa !2428
  %1956 = load i64, i64* %RCX
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 3
  store i64 %1958, i64* %PC
  %1959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1960 = load i64, i64* %1959, align 8, !tbaa !2428
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %1962 = load i64, i64* %1961, align 8, !tbaa !2428
  %1963 = sext i64 %1956 to i128
  %1964 = and i128 %1963, -18446744073709551616
  %1965 = zext i64 %1962 to i128
  %1966 = shl nuw i128 %1965, 64
  %1967 = zext i64 %1960 to i128
  %1968 = or i128 %1966, %1967
  %1969 = zext i64 %1956 to i128
  %1970 = or i128 %1964, %1969
  %1971 = sdiv i128 %1968, %1970
  %1972 = trunc i128 %1971 to i64
  %1973 = and i128 %1971, 18446744073709551615
  %1974 = sext i64 %1972 to i128
  %1975 = and i128 %1974, -18446744073709551616
  %1976 = or i128 %1975, %1973
  %1977 = icmp eq i128 %1971, %1976
  br i1 %1977, label %1982, label %1978

; <label>:1978:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2
  %1979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1980 = load i64, i64* %1979, align 8, !tbaa !2428
  %1981 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1980, %struct.Memory* %1729) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:1982:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2
  %1983 = srem i128 %1968, %1970
  %1984 = trunc i128 %1983 to i64
  store i64 %1972, i64* %1959, align 8, !tbaa !2428
  store i64 %1984, i64* %1961, align 8, !tbaa !2428
  %1985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1985, align 1, !tbaa !2432
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %1986, align 1, !tbaa !2446
  %1987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1987, align 1, !tbaa !2447
  %1988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1988, align 1, !tbaa !2448
  %1989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1989, align 1, !tbaa !2449
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1990, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %1978, %1982
  %1991 = phi %struct.Memory* [ %1981, %1978 ], [ %1729, %1982 ]
  %1992 = load i64, i64* %RBP
  %1993 = sub i64 %1992, 56
  %1994 = load i64, i64* %RAX
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 4
  store i64 %1996, i64* %PC
  %1997 = inttoptr i64 %1993 to i64*
  store i64 %1994, i64* %1997
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 24
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 4
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i64*
  %2003 = load i64, i64* %2002
  store i64 %2003, i64* %RAX, align 8, !tbaa !2428
  %2004 = load i64, i64* %RBP
  %2005 = sub i64 %2004, 8
  %2006 = load i64, i64* %PC
  %2007 = add i64 %2006, 4
  store i64 %2007, i64* %PC
  %2008 = inttoptr i64 %2005 to i64*
  %2009 = load i64, i64* %2008
  store i64 %2009, i64* %RCX, align 8, !tbaa !2428
  %2010 = load i64, i64* %RBP
  %2011 = sub i64 %2010, 56
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 4
  store i64 %2013, i64* %PC
  %2014 = inttoptr i64 %2011 to i64*
  %2015 = load i64, i64* %2014
  store i64 %2015, i64* %RSI, align 8, !tbaa !2428
  %2016 = load i64, i64* %RSI
  %2017 = load i64, i64* %PC
  %2018 = add i64 %2017, 4
  store i64 %2018, i64* %PC
  %2019 = sub i64 %2016, 1
  store i64 %2019, i64* %RSI, align 8, !tbaa !2428
  %2020 = icmp ult i64 %2016, 1
  %2021 = zext i1 %2020 to i8
  %2022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2021, i8* %2022, align 1, !tbaa !2432
  %2023 = trunc i64 %2019 to i32
  %2024 = and i32 %2023, 255
  %2025 = call i32 @llvm.ctpop.i32(i32 %2024) #16
  %2026 = trunc i32 %2025 to i8
  %2027 = and i8 %2026, 1
  %2028 = xor i8 %2027, 1
  %2029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2028, i8* %2029, align 1, !tbaa !2446
  %2030 = xor i64 1, %2016
  %2031 = xor i64 %2030, %2019
  %2032 = lshr i64 %2031, 4
  %2033 = trunc i64 %2032 to i8
  %2034 = and i8 %2033, 1
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2034, i8* %2035, align 1, !tbaa !2447
  %2036 = icmp eq i64 %2019, 0
  %2037 = zext i1 %2036 to i8
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2037, i8* %2038, align 1, !tbaa !2448
  %2039 = lshr i64 %2019, 63
  %2040 = trunc i64 %2039 to i8
  %2041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2040, i8* %2041, align 1, !tbaa !2449
  %2042 = lshr i64 %2016, 63
  %2043 = xor i64 %2039, %2042
  %2044 = add nuw nsw i64 %2043, %2042
  %2045 = icmp eq i64 %2044, 2
  %2046 = zext i1 %2045 to i8
  %2047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2046, i8* %2047, align 1, !tbaa !2450
  %2048 = load i64, i64* %RSI
  %2049 = load i64, i64* %PC
  %2050 = add i64 %2049, 4
  store i64 %2050, i64* %PC
  %2051 = shl i64 %2048, 5
  %2052 = icmp slt i64 %2051, 0
  %2053 = shl i64 %2051, 1
  store i64 %2053, i64* %RSI, align 8, !tbaa !2428
  %2054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2055 = zext i1 %2052 to i8
  store i8 %2055, i8* %2054, align 1, !tbaa !2451
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2057 = trunc i64 %2053 to i32
  %2058 = and i32 %2057, 254
  %2059 = call i32 @llvm.ctpop.i32(i32 %2058) #16
  %2060 = trunc i32 %2059 to i8
  %2061 = and i8 %2060, 1
  %2062 = xor i8 %2061, 1
  store i8 %2062, i8* %2056, align 1, !tbaa !2451
  %2063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2063, align 1, !tbaa !2451
  %2064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2065 = icmp eq i64 %2053, 0
  %2066 = zext i1 %2065 to i8
  store i8 %2066, i8* %2064, align 1, !tbaa !2451
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2068 = lshr i64 %2053, 63
  %2069 = trunc i64 %2068 to i8
  store i8 %2069, i8* %2067, align 1, !tbaa !2451
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2070, align 1, !tbaa !2451
  %2071 = load i64, i64* %RCX
  %2072 = load i64, i64* %RSI
  %2073 = load i64, i64* %PC
  %2074 = add i64 %2073, 3
  store i64 %2074, i64* %PC
  %2075 = add i64 %2072, %2071
  store i64 %2075, i64* %RCX, align 8, !tbaa !2428
  %2076 = icmp ult i64 %2075, %2071
  %2077 = icmp ult i64 %2075, %2072
  %2078 = or i1 %2076, %2077
  %2079 = zext i1 %2078 to i8
  %2080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2079, i8* %2080, align 1, !tbaa !2432
  %2081 = trunc i64 %2075 to i32
  %2082 = and i32 %2081, 255
  %2083 = call i32 @llvm.ctpop.i32(i32 %2082) #16
  %2084 = trunc i32 %2083 to i8
  %2085 = and i8 %2084, 1
  %2086 = xor i8 %2085, 1
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2086, i8* %2087, align 1, !tbaa !2446
  %2088 = xor i64 %2072, %2071
  %2089 = xor i64 %2088, %2075
  %2090 = lshr i64 %2089, 4
  %2091 = trunc i64 %2090 to i8
  %2092 = and i8 %2091, 1
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2092, i8* %2093, align 1, !tbaa !2447
  %2094 = icmp eq i64 %2075, 0
  %2095 = zext i1 %2094 to i8
  %2096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2095, i8* %2096, align 1, !tbaa !2448
  %2097 = lshr i64 %2075, 63
  %2098 = trunc i64 %2097 to i8
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2098, i8* %2099, align 1, !tbaa !2449
  %2100 = lshr i64 %2071, 63
  %2101 = lshr i64 %2072, 63
  %2102 = xor i64 %2097, %2100
  %2103 = xor i64 %2097, %2101
  %2104 = add nuw nsw i64 %2102, %2103
  %2105 = icmp eq i64 %2104, 2
  %2106 = zext i1 %2105 to i8
  %2107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2106, i8* %2107, align 1, !tbaa !2450
  %2108 = load i64, i64* %RCX
  %2109 = add i64 %2108, 8
  %2110 = load i64, i64* %RAX
  %2111 = load i64, i64* %PC
  %2112 = add i64 %2111, 4
  store i64 %2112, i64* %PC
  %2113 = inttoptr i64 %2109 to i64*
  store i64 %2110, i64* %2113
  %2114 = load i64, i64* %RBP
  %2115 = sub i64 %2114, 32
  %2116 = load i64, i64* %PC
  %2117 = add i64 %2116, 4
  store i64 %2117, i64* %PC
  %2118 = inttoptr i64 %2115 to i64*
  %2119 = load i64, i64* %2118
  store i64 %2119, i64* %RAX, align 8, !tbaa !2428
  %2120 = load i64, i64* %RBP
  %2121 = sub i64 %2120, 8
  %2122 = load i64, i64* %PC
  %2123 = add i64 %2122, 4
  store i64 %2123, i64* %PC
  %2124 = inttoptr i64 %2121 to i64*
  %2125 = load i64, i64* %2124
  store i64 %2125, i64* %RCX, align 8, !tbaa !2428
  %2126 = load i64, i64* %RBP
  %2127 = sub i64 %2126, 56
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 4
  store i64 %2129, i64* %PC
  %2130 = inttoptr i64 %2127 to i64*
  %2131 = load i64, i64* %2130
  store i64 %2131, i64* %RSI, align 8, !tbaa !2428
  %2132 = load i64, i64* %RSI
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 4
  store i64 %2134, i64* %PC
  %2135 = sub i64 %2132, 1
  store i64 %2135, i64* %RSI, align 8, !tbaa !2428
  %2136 = icmp ult i64 %2132, 1
  %2137 = zext i1 %2136 to i8
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2137, i8* %2138, align 1, !tbaa !2432
  %2139 = trunc i64 %2135 to i32
  %2140 = and i32 %2139, 255
  %2141 = call i32 @llvm.ctpop.i32(i32 %2140) #16
  %2142 = trunc i32 %2141 to i8
  %2143 = and i8 %2142, 1
  %2144 = xor i8 %2143, 1
  %2145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2144, i8* %2145, align 1, !tbaa !2446
  %2146 = xor i64 1, %2132
  %2147 = xor i64 %2146, %2135
  %2148 = lshr i64 %2147, 4
  %2149 = trunc i64 %2148 to i8
  %2150 = and i8 %2149, 1
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2150, i8* %2151, align 1, !tbaa !2447
  %2152 = icmp eq i64 %2135, 0
  %2153 = zext i1 %2152 to i8
  %2154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2153, i8* %2154, align 1, !tbaa !2448
  %2155 = lshr i64 %2135, 63
  %2156 = trunc i64 %2155 to i8
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2156, i8* %2157, align 1, !tbaa !2449
  %2158 = lshr i64 %2132, 63
  %2159 = xor i64 %2155, %2158
  %2160 = add nuw nsw i64 %2159, %2158
  %2161 = icmp eq i64 %2160, 2
  %2162 = zext i1 %2161 to i8
  %2163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2162, i8* %2163, align 1, !tbaa !2450
  %2164 = load i64, i64* %RSI
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 4
  store i64 %2166, i64* %PC
  %2167 = shl i64 %2164, 5
  %2168 = icmp slt i64 %2167, 0
  %2169 = shl i64 %2167, 1
  store i64 %2169, i64* %RSI, align 8, !tbaa !2428
  %2170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2171 = zext i1 %2168 to i8
  store i8 %2171, i8* %2170, align 1, !tbaa !2451
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2173 = trunc i64 %2169 to i32
  %2174 = and i32 %2173, 254
  %2175 = call i32 @llvm.ctpop.i32(i32 %2174) #16
  %2176 = trunc i32 %2175 to i8
  %2177 = and i8 %2176, 1
  %2178 = xor i8 %2177, 1
  store i8 %2178, i8* %2172, align 1, !tbaa !2451
  %2179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2179, align 1, !tbaa !2451
  %2180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2181 = icmp eq i64 %2169, 0
  %2182 = zext i1 %2181 to i8
  store i8 %2182, i8* %2180, align 1, !tbaa !2451
  %2183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2184 = lshr i64 %2169, 63
  %2185 = trunc i64 %2184 to i8
  store i8 %2185, i8* %2183, align 1, !tbaa !2451
  %2186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2186, align 1, !tbaa !2451
  %2187 = load i64, i64* %RCX
  %2188 = load i64, i64* %RSI
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 3
  store i64 %2190, i64* %PC
  %2191 = add i64 %2188, %2187
  store i64 %2191, i64* %RCX, align 8, !tbaa !2428
  %2192 = icmp ult i64 %2191, %2187
  %2193 = icmp ult i64 %2191, %2188
  %2194 = or i1 %2192, %2193
  %2195 = zext i1 %2194 to i8
  %2196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2195, i8* %2196, align 1, !tbaa !2432
  %2197 = trunc i64 %2191 to i32
  %2198 = and i32 %2197, 255
  %2199 = call i32 @llvm.ctpop.i32(i32 %2198) #16
  %2200 = trunc i32 %2199 to i8
  %2201 = and i8 %2200, 1
  %2202 = xor i8 %2201, 1
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2202, i8* %2203, align 1, !tbaa !2446
  %2204 = xor i64 %2188, %2187
  %2205 = xor i64 %2204, %2191
  %2206 = lshr i64 %2205, 4
  %2207 = trunc i64 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2208, i8* %2209, align 1, !tbaa !2447
  %2210 = icmp eq i64 %2191, 0
  %2211 = zext i1 %2210 to i8
  %2212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2211, i8* %2212, align 1, !tbaa !2448
  %2213 = lshr i64 %2191, 63
  %2214 = trunc i64 %2213 to i8
  %2215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2214, i8* %2215, align 1, !tbaa !2449
  %2216 = lshr i64 %2187, 63
  %2217 = lshr i64 %2188, 63
  %2218 = xor i64 %2213, %2216
  %2219 = xor i64 %2213, %2217
  %2220 = add nuw nsw i64 %2218, %2219
  %2221 = icmp eq i64 %2220, 2
  %2222 = zext i1 %2221 to i8
  %2223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2222, i8* %2223, align 1, !tbaa !2450
  %2224 = load i64, i64* %RCX
  %2225 = add i64 %2224, 16
  %2226 = load i64, i64* %RAX
  %2227 = load i64, i64* %PC
  %2228 = add i64 %2227, 4
  store i64 %2228, i64* %PC
  %2229 = inttoptr i64 %2225 to i64*
  store i64 %2226, i64* %2229
  %2230 = load i64, i64* %RBP
  %2231 = sub i64 %2230, 40
  %2232 = load i64, i64* %PC
  %2233 = add i64 %2232, 4
  store i64 %2233, i64* %PC
  %2234 = inttoptr i64 %2231 to i64*
  %2235 = load i64, i64* %2234
  store i64 %2235, i64* %RAX, align 8, !tbaa !2428
  %2236 = load i64, i64* %RBP
  %2237 = sub i64 %2236, 8
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 4
  store i64 %2239, i64* %PC
  %2240 = inttoptr i64 %2237 to i64*
  %2241 = load i64, i64* %2240
  store i64 %2241, i64* %RCX, align 8, !tbaa !2428
  %2242 = load i64, i64* %RBP
  %2243 = sub i64 %2242, 56
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 4
  store i64 %2245, i64* %PC
  %2246 = inttoptr i64 %2243 to i64*
  %2247 = load i64, i64* %2246
  store i64 %2247, i64* %RSI, align 8, !tbaa !2428
  %2248 = load i64, i64* %RSI
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 4
  store i64 %2250, i64* %PC
  %2251 = sub i64 %2248, 1
  store i64 %2251, i64* %RSI, align 8, !tbaa !2428
  %2252 = icmp ult i64 %2248, 1
  %2253 = zext i1 %2252 to i8
  %2254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2253, i8* %2254, align 1, !tbaa !2432
  %2255 = trunc i64 %2251 to i32
  %2256 = and i32 %2255, 255
  %2257 = call i32 @llvm.ctpop.i32(i32 %2256) #16
  %2258 = trunc i32 %2257 to i8
  %2259 = and i8 %2258, 1
  %2260 = xor i8 %2259, 1
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2260, i8* %2261, align 1, !tbaa !2446
  %2262 = xor i64 1, %2248
  %2263 = xor i64 %2262, %2251
  %2264 = lshr i64 %2263, 4
  %2265 = trunc i64 %2264 to i8
  %2266 = and i8 %2265, 1
  %2267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2266, i8* %2267, align 1, !tbaa !2447
  %2268 = icmp eq i64 %2251, 0
  %2269 = zext i1 %2268 to i8
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2269, i8* %2270, align 1, !tbaa !2448
  %2271 = lshr i64 %2251, 63
  %2272 = trunc i64 %2271 to i8
  %2273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2272, i8* %2273, align 1, !tbaa !2449
  %2274 = lshr i64 %2248, 63
  %2275 = xor i64 %2271, %2274
  %2276 = add nuw nsw i64 %2275, %2274
  %2277 = icmp eq i64 %2276, 2
  %2278 = zext i1 %2277 to i8
  %2279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2278, i8* %2279, align 1, !tbaa !2450
  %2280 = load i64, i64* %RSI
  %2281 = load i64, i64* %PC
  %2282 = add i64 %2281, 4
  store i64 %2282, i64* %PC
  %2283 = shl i64 %2280, 5
  %2284 = icmp slt i64 %2283, 0
  %2285 = shl i64 %2283, 1
  store i64 %2285, i64* %RSI, align 8, !tbaa !2428
  %2286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2287 = zext i1 %2284 to i8
  store i8 %2287, i8* %2286, align 1, !tbaa !2451
  %2288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2289 = trunc i64 %2285 to i32
  %2290 = and i32 %2289, 254
  %2291 = call i32 @llvm.ctpop.i32(i32 %2290) #16
  %2292 = trunc i32 %2291 to i8
  %2293 = and i8 %2292, 1
  %2294 = xor i8 %2293, 1
  store i8 %2294, i8* %2288, align 1, !tbaa !2451
  %2295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2295, align 1, !tbaa !2451
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2297 = icmp eq i64 %2285, 0
  %2298 = zext i1 %2297 to i8
  store i8 %2298, i8* %2296, align 1, !tbaa !2451
  %2299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2300 = lshr i64 %2285, 63
  %2301 = trunc i64 %2300 to i8
  store i8 %2301, i8* %2299, align 1, !tbaa !2451
  %2302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2302, align 1, !tbaa !2451
  %2303 = load i64, i64* %RCX
  %2304 = load i64, i64* %RSI
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 3
  store i64 %2306, i64* %PC
  %2307 = add i64 %2304, %2303
  store i64 %2307, i64* %RCX, align 8, !tbaa !2428
  %2308 = icmp ult i64 %2307, %2303
  %2309 = icmp ult i64 %2307, %2304
  %2310 = or i1 %2308, %2309
  %2311 = zext i1 %2310 to i8
  %2312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2311, i8* %2312, align 1, !tbaa !2432
  %2313 = trunc i64 %2307 to i32
  %2314 = and i32 %2313, 255
  %2315 = call i32 @llvm.ctpop.i32(i32 %2314) #16
  %2316 = trunc i32 %2315 to i8
  %2317 = and i8 %2316, 1
  %2318 = xor i8 %2317, 1
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2318, i8* %2319, align 1, !tbaa !2446
  %2320 = xor i64 %2304, %2303
  %2321 = xor i64 %2320, %2307
  %2322 = lshr i64 %2321, 4
  %2323 = trunc i64 %2322 to i8
  %2324 = and i8 %2323, 1
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2324, i8* %2325, align 1, !tbaa !2447
  %2326 = icmp eq i64 %2307, 0
  %2327 = zext i1 %2326 to i8
  %2328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2327, i8* %2328, align 1, !tbaa !2448
  %2329 = lshr i64 %2307, 63
  %2330 = trunc i64 %2329 to i8
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2330, i8* %2331, align 1, !tbaa !2449
  %2332 = lshr i64 %2303, 63
  %2333 = lshr i64 %2304, 63
  %2334 = xor i64 %2329, %2332
  %2335 = xor i64 %2329, %2333
  %2336 = add nuw nsw i64 %2334, %2335
  %2337 = icmp eq i64 %2336, 2
  %2338 = zext i1 %2337 to i8
  %2339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2338, i8* %2339, align 1, !tbaa !2450
  %2340 = load i64, i64* %RCX
  %2341 = load i64, i64* %RAX
  %2342 = load i64, i64* %PC
  %2343 = add i64 %2342, 3
  store i64 %2343, i64* %PC
  %2344 = inttoptr i64 %2340 to i64*
  store i64 %2341, i64* %2344
  %2345 = load i64, i64* %RBP
  %2346 = sub i64 %2345, 40
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 4
  store i64 %2348, i64* %PC
  %2349 = inttoptr i64 %2346 to i64*
  %2350 = load i64, i64* %2349
  store i64 %2350, i64* %RAX, align 8, !tbaa !2428
  %2351 = load i64, i64* %RBP
  %2352 = sub i64 %2351, 8
  %2353 = load i64, i64* %PC
  %2354 = add i64 %2353, 4
  store i64 %2354, i64* %PC
  %2355 = inttoptr i64 %2352 to i64*
  %2356 = load i64, i64* %2355
  store i64 %2356, i64* %RCX, align 8, !tbaa !2428
  %2357 = load i64, i64* %RBP
  %2358 = sub i64 %2357, 56
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 4
  store i64 %2360, i64* %PC
  %2361 = inttoptr i64 %2358 to i64*
  %2362 = load i64, i64* %2361
  store i64 %2362, i64* %RSI, align 8, !tbaa !2428
  %2363 = load i64, i64* %RSI
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 4
  store i64 %2365, i64* %PC
  %2366 = sub i64 %2363, 1
  store i64 %2366, i64* %RSI, align 8, !tbaa !2428
  %2367 = icmp ult i64 %2363, 1
  %2368 = zext i1 %2367 to i8
  %2369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2368, i8* %2369, align 1, !tbaa !2432
  %2370 = trunc i64 %2366 to i32
  %2371 = and i32 %2370, 255
  %2372 = call i32 @llvm.ctpop.i32(i32 %2371) #16
  %2373 = trunc i32 %2372 to i8
  %2374 = and i8 %2373, 1
  %2375 = xor i8 %2374, 1
  %2376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2375, i8* %2376, align 1, !tbaa !2446
  %2377 = xor i64 1, %2363
  %2378 = xor i64 %2377, %2366
  %2379 = lshr i64 %2378, 4
  %2380 = trunc i64 %2379 to i8
  %2381 = and i8 %2380, 1
  %2382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2381, i8* %2382, align 1, !tbaa !2447
  %2383 = icmp eq i64 %2366, 0
  %2384 = zext i1 %2383 to i8
  %2385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2384, i8* %2385, align 1, !tbaa !2448
  %2386 = lshr i64 %2366, 63
  %2387 = trunc i64 %2386 to i8
  %2388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2387, i8* %2388, align 1, !tbaa !2449
  %2389 = lshr i64 %2363, 63
  %2390 = xor i64 %2386, %2389
  %2391 = add nuw nsw i64 %2390, %2389
  %2392 = icmp eq i64 %2391, 2
  %2393 = zext i1 %2392 to i8
  %2394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2393, i8* %2394, align 1, !tbaa !2450
  %2395 = load i64, i64* %RSI
  %2396 = load i64, i64* %PC
  %2397 = add i64 %2396, 4
  store i64 %2397, i64* %PC
  %2398 = shl i64 %2395, 5
  %2399 = icmp slt i64 %2398, 0
  %2400 = shl i64 %2398, 1
  store i64 %2400, i64* %RSI, align 8, !tbaa !2428
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2402 = zext i1 %2399 to i8
  store i8 %2402, i8* %2401, align 1, !tbaa !2451
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2404 = trunc i64 %2400 to i32
  %2405 = and i32 %2404, 254
  %2406 = call i32 @llvm.ctpop.i32(i32 %2405) #16
  %2407 = trunc i32 %2406 to i8
  %2408 = and i8 %2407, 1
  %2409 = xor i8 %2408, 1
  store i8 %2409, i8* %2403, align 1, !tbaa !2451
  %2410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2410, align 1, !tbaa !2451
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2412 = icmp eq i64 %2400, 0
  %2413 = zext i1 %2412 to i8
  store i8 %2413, i8* %2411, align 1, !tbaa !2451
  %2414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2415 = lshr i64 %2400, 63
  %2416 = trunc i64 %2415 to i8
  store i8 %2416, i8* %2414, align 1, !tbaa !2451
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2417, align 1, !tbaa !2451
  %2418 = load i64, i64* %RCX
  %2419 = load i64, i64* %RSI
  %2420 = load i64, i64* %PC
  %2421 = add i64 %2420, 3
  store i64 %2421, i64* %PC
  %2422 = add i64 %2419, %2418
  store i64 %2422, i64* %RCX, align 8, !tbaa !2428
  %2423 = icmp ult i64 %2422, %2418
  %2424 = icmp ult i64 %2422, %2419
  %2425 = or i1 %2423, %2424
  %2426 = zext i1 %2425 to i8
  %2427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2426, i8* %2427, align 1, !tbaa !2432
  %2428 = trunc i64 %2422 to i32
  %2429 = and i32 %2428, 255
  %2430 = call i32 @llvm.ctpop.i32(i32 %2429) #16
  %2431 = trunc i32 %2430 to i8
  %2432 = and i8 %2431, 1
  %2433 = xor i8 %2432, 1
  %2434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2433, i8* %2434, align 1, !tbaa !2446
  %2435 = xor i64 %2419, %2418
  %2436 = xor i64 %2435, %2422
  %2437 = lshr i64 %2436, 4
  %2438 = trunc i64 %2437 to i8
  %2439 = and i8 %2438, 1
  %2440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2439, i8* %2440, align 1, !tbaa !2447
  %2441 = icmp eq i64 %2422, 0
  %2442 = zext i1 %2441 to i8
  %2443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2442, i8* %2443, align 1, !tbaa !2448
  %2444 = lshr i64 %2422, 63
  %2445 = trunc i64 %2444 to i8
  %2446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2445, i8* %2446, align 1, !tbaa !2449
  %2447 = lshr i64 %2418, 63
  %2448 = lshr i64 %2419, 63
  %2449 = xor i64 %2444, %2447
  %2450 = xor i64 %2444, %2448
  %2451 = add nuw nsw i64 %2449, %2450
  %2452 = icmp eq i64 %2451, 2
  %2453 = zext i1 %2452 to i8
  %2454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2453, i8* %2454, align 1, !tbaa !2450
  %2455 = load i64, i64* %RCX
  %2456 = add i64 %2455, 56
  %2457 = load i64, i64* %RAX
  %2458 = load i64, i64* %PC
  %2459 = add i64 %2458, 4
  store i64 %2459, i64* %PC
  %2460 = inttoptr i64 %2456 to i64*
  store i64 %2457, i64* %2460
  %2461 = load i64, i64* %RBP
  %2462 = sub i64 %2461, 48
  %2463 = load i64, i64* %PC
  %2464 = add i64 %2463, 4
  store i64 %2464, i64* %PC
  %2465 = inttoptr i64 %2462 to i64*
  %2466 = load i64, i64* %2465
  store i64 %2466, i64* %RAX, align 8, !tbaa !2428
  %2467 = load i64, i64* %RBP
  %2468 = sub i64 %2467, 8
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 4
  store i64 %2470, i64* %PC
  %2471 = inttoptr i64 %2468 to i64*
  %2472 = load i64, i64* %2471
  store i64 %2472, i64* %RCX, align 8, !tbaa !2428
  %2473 = load i64, i64* %RBP
  %2474 = sub i64 %2473, 56
  %2475 = load i64, i64* %PC
  %2476 = add i64 %2475, 4
  store i64 %2476, i64* %PC
  %2477 = inttoptr i64 %2474 to i64*
  %2478 = load i64, i64* %2477
  store i64 %2478, i64* %RSI, align 8, !tbaa !2428
  %2479 = load i64, i64* %RSI
  %2480 = load i64, i64* %PC
  %2481 = add i64 %2480, 4
  store i64 %2481, i64* %PC
  %2482 = sub i64 %2479, 1
  store i64 %2482, i64* %RSI, align 8, !tbaa !2428
  %2483 = icmp ult i64 %2479, 1
  %2484 = zext i1 %2483 to i8
  %2485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2484, i8* %2485, align 1, !tbaa !2432
  %2486 = trunc i64 %2482 to i32
  %2487 = and i32 %2486, 255
  %2488 = call i32 @llvm.ctpop.i32(i32 %2487) #16
  %2489 = trunc i32 %2488 to i8
  %2490 = and i8 %2489, 1
  %2491 = xor i8 %2490, 1
  %2492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2491, i8* %2492, align 1, !tbaa !2446
  %2493 = xor i64 1, %2479
  %2494 = xor i64 %2493, %2482
  %2495 = lshr i64 %2494, 4
  %2496 = trunc i64 %2495 to i8
  %2497 = and i8 %2496, 1
  %2498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2497, i8* %2498, align 1, !tbaa !2447
  %2499 = icmp eq i64 %2482, 0
  %2500 = zext i1 %2499 to i8
  %2501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2500, i8* %2501, align 1, !tbaa !2448
  %2502 = lshr i64 %2482, 63
  %2503 = trunc i64 %2502 to i8
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2503, i8* %2504, align 1, !tbaa !2449
  %2505 = lshr i64 %2479, 63
  %2506 = xor i64 %2502, %2505
  %2507 = add nuw nsw i64 %2506, %2505
  %2508 = icmp eq i64 %2507, 2
  %2509 = zext i1 %2508 to i8
  %2510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2509, i8* %2510, align 1, !tbaa !2450
  %2511 = load i64, i64* %RSI
  %2512 = load i64, i64* %PC
  %2513 = add i64 %2512, 4
  store i64 %2513, i64* %PC
  %2514 = shl i64 %2511, 5
  %2515 = icmp slt i64 %2514, 0
  %2516 = shl i64 %2514, 1
  store i64 %2516, i64* %RSI, align 8, !tbaa !2428
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2518 = zext i1 %2515 to i8
  store i8 %2518, i8* %2517, align 1, !tbaa !2451
  %2519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2520 = trunc i64 %2516 to i32
  %2521 = and i32 %2520, 254
  %2522 = call i32 @llvm.ctpop.i32(i32 %2521) #16
  %2523 = trunc i32 %2522 to i8
  %2524 = and i8 %2523, 1
  %2525 = xor i8 %2524, 1
  store i8 %2525, i8* %2519, align 1, !tbaa !2451
  %2526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2526, align 1, !tbaa !2451
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2528 = icmp eq i64 %2516, 0
  %2529 = zext i1 %2528 to i8
  store i8 %2529, i8* %2527, align 1, !tbaa !2451
  %2530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2531 = lshr i64 %2516, 63
  %2532 = trunc i64 %2531 to i8
  store i8 %2532, i8* %2530, align 1, !tbaa !2451
  %2533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2533, align 1, !tbaa !2451
  %2534 = load i64, i64* %RCX
  %2535 = load i64, i64* %RSI
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 3
  store i64 %2537, i64* %PC
  %2538 = add i64 %2535, %2534
  store i64 %2538, i64* %RCX, align 8, !tbaa !2428
  %2539 = icmp ult i64 %2538, %2534
  %2540 = icmp ult i64 %2538, %2535
  %2541 = or i1 %2539, %2540
  %2542 = zext i1 %2541 to i8
  %2543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2542, i8* %2543, align 1, !tbaa !2432
  %2544 = trunc i64 %2538 to i32
  %2545 = and i32 %2544, 255
  %2546 = call i32 @llvm.ctpop.i32(i32 %2545) #16
  %2547 = trunc i32 %2546 to i8
  %2548 = and i8 %2547, 1
  %2549 = xor i8 %2548, 1
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2549, i8* %2550, align 1, !tbaa !2446
  %2551 = xor i64 %2535, %2534
  %2552 = xor i64 %2551, %2538
  %2553 = lshr i64 %2552, 4
  %2554 = trunc i64 %2553 to i8
  %2555 = and i8 %2554, 1
  %2556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2555, i8* %2556, align 1, !tbaa !2447
  %2557 = icmp eq i64 %2538, 0
  %2558 = zext i1 %2557 to i8
  %2559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2558, i8* %2559, align 1, !tbaa !2448
  %2560 = lshr i64 %2538, 63
  %2561 = trunc i64 %2560 to i8
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2561, i8* %2562, align 1, !tbaa !2449
  %2563 = lshr i64 %2534, 63
  %2564 = lshr i64 %2535, 63
  %2565 = xor i64 %2560, %2563
  %2566 = xor i64 %2560, %2564
  %2567 = add nuw nsw i64 %2565, %2566
  %2568 = icmp eq i64 %2567, 2
  %2569 = zext i1 %2568 to i8
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2569, i8* %2570, align 1, !tbaa !2450
  %2571 = load i64, i64* %RCX
  %2572 = add i64 %2571, 48
  %2573 = load i64, i64* %RAX
  %2574 = load i64, i64* %PC
  %2575 = add i64 %2574, 4
  store i64 %2575, i64* %PC
  %2576 = inttoptr i64 %2572 to i64*
  store i64 %2573, i64* %2576
  %2577 = load i64, i64* %PC
  %2578 = sub i64 %2577, 554
  %2579 = load i64, i64* %PC
  %2580 = add i64 %2579, 5
  store i64 %2580, i64* %PC
  %2581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2578, i64* %2581, align 8, !tbaa !2428
  br label %block_400c1a

block_400c75:                                     ; preds = %block_400c6a
  %2582 = add i64 %2872, 468
  %2583 = load i64, i64* %PC
  %2584 = add i64 %2583, 5
  store i64 %2584, i64* %PC
  %2585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2582, i64* %2585, align 8, !tbaa !2428
  %2586 = load i64, i64* %PC
  %2587 = add i64 %2586, 1
  store i64 %2587, i64* %PC
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2589 = load i64, i64* %2588, align 8, !tbaa !2428
  %2590 = add i64 %2589, 8
  %2591 = inttoptr i64 %2589 to i64*
  %2592 = load i64, i64* %2591
  store i64 %2592, i64* %RBP, align 8, !tbaa !2428
  store i64 %2590, i64* %2588, align 8, !tbaa !2428
  %2593 = load i64, i64* %PC
  %2594 = add i64 %2593, 1
  store i64 %2594, i64* %PC
  %2595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2597 = load i64, i64* %2596, align 8, !tbaa !2428
  %2598 = inttoptr i64 %2597 to i64*
  %2599 = load i64, i64* %2598
  store i64 %2599, i64* %2595, align 8, !tbaa !2428
  %2600 = add i64 %2597, 8
  store i64 %2600, i64* %2596, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400c33:                                     ; preds = %block_400c1a
  %2601 = load i64, i64* %PC
  %2602 = add i64 %2601, 5
  store i64 %2602, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %2603 = load i32, i32* %EAX
  %2604 = zext i32 %2603 to i64
  %2605 = load i64, i64* %PC
  %2606 = add i64 %2605, 2
  store i64 %2606, i64* %PC
  %2607 = and i64 %2604, 4294967295
  store i64 %2607, i64* %RCX, align 8, !tbaa !2428
  %2608 = load i64, i64* %RBP
  %2609 = sub i64 %2608, 48
  %2610 = load i64, i64* %PC
  %2611 = add i64 %2610, 4
  store i64 %2611, i64* %PC
  %2612 = inttoptr i64 %2609 to i64*
  %2613 = load i64, i64* %2612
  store i64 %2613, i64* %RDX, align 8, !tbaa !2428
  %2614 = load i64, i64* %RBP
  %2615 = sub i64 %2614, 8
  %2616 = load i64, i64* %PC
  %2617 = add i64 %2616, 4
  store i64 %2617, i64* %PC
  %2618 = inttoptr i64 %2615 to i64*
  %2619 = load i64, i64* %2618
  store i64 %2619, i64* %RSI, align 8, !tbaa !2428
  %2620 = load i64, i64* %RBP
  %2621 = sub i64 %2620, 56
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 4
  store i64 %2623, i64* %PC
  %2624 = inttoptr i64 %2621 to i64*
  %2625 = load i64, i64* %2624
  store i64 %2625, i64* %RAX, align 8, !tbaa !2428
  %2626 = load i64, i64* %RBP
  %2627 = sub i64 %2626, 72
  %2628 = load i64, i64* %RDX
  %2629 = load i64, i64* %PC
  %2630 = add i64 %2629, 4
  store i64 %2630, i64* %PC
  %2631 = inttoptr i64 %2627 to i64*
  store i64 %2628, i64* %2631
  %2632 = load i64, i64* %PC
  %2633 = add i64 %2632, 2
  store i64 %2633, i64* %PC
  %2634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %2636 = load i64, i64* %2635, align 8, !tbaa !2428
  %2637 = ashr i64 %2636, 63
  store i64 %2637, i64* %2634, align 8, !tbaa !2428
  %2638 = load i64, i64* %RCX
  %2639 = load i64, i64* %PC
  %2640 = add i64 %2639, 3
  store i64 %2640, i64* %PC
  %2641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %2642 = load i64, i64* %2641, align 8, !tbaa !2428
  %2643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %2644 = load i64, i64* %2643, align 8, !tbaa !2428
  %2645 = sext i64 %2638 to i128
  %2646 = and i128 %2645, -18446744073709551616
  %2647 = zext i64 %2644 to i128
  %2648 = shl nuw i128 %2647, 64
  %2649 = zext i64 %2642 to i128
  %2650 = or i128 %2648, %2649
  %2651 = zext i64 %2638 to i128
  %2652 = or i128 %2646, %2651
  %2653 = sdiv i128 %2650, %2652
  %2654 = trunc i128 %2653 to i64
  %2655 = and i128 %2653, 18446744073709551615
  %2656 = sext i64 %2654 to i128
  %2657 = and i128 %2656, -18446744073709551616
  %2658 = or i128 %2657, %2655
  %2659 = icmp eq i128 %2653, %2658
  br i1 %2659, label %2664, label %2660

; <label>:2660:                                   ; preds = %block_400c33
  %2661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2662 = load i64, i64* %2661, align 8, !tbaa !2428
  %2663 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2662, %struct.Memory* %MEMORY.1) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:2664:                                   ; preds = %block_400c33
  %2665 = srem i128 %2650, %2652
  %2666 = trunc i128 %2665 to i64
  store i64 %2654, i64* %2641, align 8, !tbaa !2428
  store i64 %2666, i64* %2643, align 8, !tbaa !2428
  %2667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2667, align 1, !tbaa !2432
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %2668, align 1, !tbaa !2446
  %2669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2669, align 1, !tbaa !2447
  %2670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2670, align 1, !tbaa !2448
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2671, align 1, !tbaa !2449
  %2672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2672, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %2660, %2664
  %2673 = phi %struct.Memory* [ %2663, %2660 ], [ %MEMORY.1, %2664 ]
  %2674 = load i64, i64* %RAX
  %2675 = load i64, i64* %PC
  %2676 = add i64 %2675, 4
  store i64 %2676, i64* %PC
  %2677 = sub i64 %2674, 1
  store i64 %2677, i64* %RAX, align 8, !tbaa !2428
  %2678 = icmp ult i64 %2674, 1
  %2679 = zext i1 %2678 to i8
  %2680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2679, i8* %2680, align 1, !tbaa !2432
  %2681 = trunc i64 %2677 to i32
  %2682 = and i32 %2681, 255
  %2683 = call i32 @llvm.ctpop.i32(i32 %2682) #16
  %2684 = trunc i32 %2683 to i8
  %2685 = and i8 %2684, 1
  %2686 = xor i8 %2685, 1
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2686, i8* %2687, align 1, !tbaa !2446
  %2688 = xor i64 1, %2674
  %2689 = xor i64 %2688, %2677
  %2690 = lshr i64 %2689, 4
  %2691 = trunc i64 %2690 to i8
  %2692 = and i8 %2691, 1
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2692, i8* %2693, align 1, !tbaa !2447
  %2694 = icmp eq i64 %2677, 0
  %2695 = zext i1 %2694 to i8
  %2696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2695, i8* %2696, align 1, !tbaa !2448
  %2697 = lshr i64 %2677, 63
  %2698 = trunc i64 %2697 to i8
  %2699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2698, i8* %2699, align 1, !tbaa !2449
  %2700 = lshr i64 %2674, 63
  %2701 = xor i64 %2697, %2700
  %2702 = add nuw nsw i64 %2701, %2700
  %2703 = icmp eq i64 %2702, 2
  %2704 = zext i1 %2703 to i8
  %2705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2704, i8* %2705, align 1, !tbaa !2450
  %2706 = load i64, i64* %RAX
  %2707 = load i64, i64* %PC
  %2708 = add i64 %2707, 4
  store i64 %2708, i64* %PC
  %2709 = shl i64 %2706, 5
  %2710 = icmp slt i64 %2709, 0
  %2711 = shl i64 %2709, 1
  store i64 %2711, i64* %RAX, align 8, !tbaa !2428
  %2712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2713 = zext i1 %2710 to i8
  store i8 %2713, i8* %2712, align 1, !tbaa !2451
  %2714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2715 = trunc i64 %2711 to i32
  %2716 = and i32 %2715, 254
  %2717 = call i32 @llvm.ctpop.i32(i32 %2716) #16
  %2718 = trunc i32 %2717 to i8
  %2719 = and i8 %2718, 1
  %2720 = xor i8 %2719, 1
  store i8 %2720, i8* %2714, align 1, !tbaa !2451
  %2721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2721, align 1, !tbaa !2451
  %2722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2723 = icmp eq i64 %2711, 0
  %2724 = zext i1 %2723 to i8
  store i8 %2724, i8* %2722, align 1, !tbaa !2451
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2726 = lshr i64 %2711, 63
  %2727 = trunc i64 %2726 to i8
  store i8 %2727, i8* %2725, align 1, !tbaa !2451
  %2728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2728, align 1, !tbaa !2451
  %2729 = load i64, i64* %RSI
  %2730 = load i64, i64* %RAX
  %2731 = load i64, i64* %PC
  %2732 = add i64 %2731, 3
  store i64 %2732, i64* %PC
  %2733 = add i64 %2730, %2729
  store i64 %2733, i64* %RSI, align 8, !tbaa !2428
  %2734 = icmp ult i64 %2733, %2729
  %2735 = icmp ult i64 %2733, %2730
  %2736 = or i1 %2734, %2735
  %2737 = zext i1 %2736 to i8
  %2738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2737, i8* %2738, align 1, !tbaa !2432
  %2739 = trunc i64 %2733 to i32
  %2740 = and i32 %2739, 255
  %2741 = call i32 @llvm.ctpop.i32(i32 %2740) #16
  %2742 = trunc i32 %2741 to i8
  %2743 = and i8 %2742, 1
  %2744 = xor i8 %2743, 1
  %2745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2744, i8* %2745, align 1, !tbaa !2446
  %2746 = xor i64 %2730, %2729
  %2747 = xor i64 %2746, %2733
  %2748 = lshr i64 %2747, 4
  %2749 = trunc i64 %2748 to i8
  %2750 = and i8 %2749, 1
  %2751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2750, i8* %2751, align 1, !tbaa !2447
  %2752 = icmp eq i64 %2733, 0
  %2753 = zext i1 %2752 to i8
  %2754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2753, i8* %2754, align 1, !tbaa !2448
  %2755 = lshr i64 %2733, 63
  %2756 = trunc i64 %2755 to i8
  %2757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2756, i8* %2757, align 1, !tbaa !2449
  %2758 = lshr i64 %2729, 63
  %2759 = lshr i64 %2730, 63
  %2760 = xor i64 %2755, %2758
  %2761 = xor i64 %2755, %2759
  %2762 = add nuw nsw i64 %2760, %2761
  %2763 = icmp eq i64 %2762, 2
  %2764 = zext i1 %2763 to i8
  %2765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2764, i8* %2765, align 1, !tbaa !2450
  %2766 = load i64, i64* %RBP
  %2767 = sub i64 %2766, 72
  %2768 = load i64, i64* %PC
  %2769 = add i64 %2768, 4
  store i64 %2769, i64* %PC
  %2770 = inttoptr i64 %2767 to i64*
  %2771 = load i64, i64* %2770
  store i64 %2771, i64* %RAX, align 8, !tbaa !2428
  %2772 = load i64, i64* %RAX
  %2773 = load i64, i64* %RSI
  %2774 = add i64 %2773, 48
  %2775 = load i64, i64* %PC
  %2776 = add i64 %2775, 4
  store i64 %2776, i64* %PC
  %2777 = inttoptr i64 %2774 to i64*
  %2778 = load i64, i64* %2777
  %2779 = sub i64 %2772, %2778
  %2780 = icmp ugt i64 %2778, %2772
  %2781 = zext i1 %2780 to i8
  %2782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2781, i8* %2782, align 1, !tbaa !2432
  %2783 = trunc i64 %2779 to i32
  %2784 = and i32 %2783, 255
  %2785 = call i32 @llvm.ctpop.i32(i32 %2784) #16
  %2786 = trunc i32 %2785 to i8
  %2787 = and i8 %2786, 1
  %2788 = xor i8 %2787, 1
  %2789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2788, i8* %2789, align 1, !tbaa !2446
  %2790 = xor i64 %2778, %2772
  %2791 = xor i64 %2790, %2779
  %2792 = lshr i64 %2791, 4
  %2793 = trunc i64 %2792 to i8
  %2794 = and i8 %2793, 1
  %2795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2794, i8* %2795, align 1, !tbaa !2447
  %2796 = icmp eq i64 %2779, 0
  %2797 = zext i1 %2796 to i8
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2797, i8* %2798, align 1, !tbaa !2448
  %2799 = lshr i64 %2779, 63
  %2800 = trunc i64 %2799 to i8
  %2801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2800, i8* %2801, align 1, !tbaa !2449
  %2802 = lshr i64 %2772, 63
  %2803 = lshr i64 %2778, 63
  %2804 = xor i64 %2803, %2802
  %2805 = xor i64 %2799, %2802
  %2806 = add nuw nsw i64 %2805, %2804
  %2807 = icmp eq i64 %2806, 2
  %2808 = zext i1 %2807 to i8
  %2809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2808, i8* %2809, align 1, !tbaa !2450
  %2810 = load i64, i64* %PC
  %2811 = add i64 %2810, 4
  store i64 %2811, i64* %PC
  %2812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2813 = load i8, i8* %2812, align 1, !tbaa !2448
  %2814 = icmp eq i8 %2813, 0
  %2815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2816 = load i8, i8* %2815, align 1, !tbaa !2449
  %2817 = icmp ne i8 %2816, 0
  %2818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2819 = load i8, i8* %2818, align 1, !tbaa !2450
  %2820 = icmp ne i8 %2819, 0
  %2821 = xor i1 %2817, %2820
  %2822 = xor i1 %2821, true
  %2823 = and i1 %2814, %2822
  %2824 = zext i1 %2823 to i8
  store i8 %2824, i8* %DIL, align 1, !tbaa !2451
  %2825 = load i64, i64* %RBP
  %2826 = sub i64 %2825, 57
  %2827 = load i8, i8* %DIL
  %2828 = zext i8 %2827 to i64
  %2829 = load i64, i64* %PC
  %2830 = add i64 %2829, 4
  store i64 %2830, i64* %PC
  %2831 = inttoptr i64 %2826 to i8*
  store i8 %2827, i8* %2831
  br label %block_400c6a

block_400c6a:                                     ; preds = %block_400c1a, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_400c1a ], [ %2673, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %2832 = load i64, i64* %RBP
  %2833 = sub i64 %2832, 57
  %2834 = load i64, i64* %PC
  %2835 = add i64 %2834, 3
  store i64 %2835, i64* %PC
  %2836 = inttoptr i64 %2833 to i8*
  %2837 = load i8, i8* %2836
  store i8 %2837, i8* %AL, align 1, !tbaa !2451
  %2838 = load i8, i8* %AL
  %2839 = zext i8 %2838 to i64
  %2840 = load i64, i64* %PC
  %2841 = add i64 %2840, 2
  store i64 %2841, i64* %PC
  %2842 = and i64 1, %2839
  %2843 = trunc i64 %2842 to i8
  %2844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2844, align 1, !tbaa !2432
  %2845 = trunc i64 %2842 to i32
  %2846 = and i32 %2845, 255
  %2847 = call i32 @llvm.ctpop.i32(i32 %2846) #16
  %2848 = trunc i32 %2847 to i8
  %2849 = and i8 %2848, 1
  %2850 = xor i8 %2849, 1
  %2851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2850, i8* %2851, align 1, !tbaa !2446
  %2852 = icmp eq i8 %2843, 0
  %2853 = zext i1 %2852 to i8
  %2854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2853, i8* %2854, align 1, !tbaa !2448
  %2855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2855, align 1, !tbaa !2449
  %2856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2856, align 1, !tbaa !2450
  %2857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2857, align 1, !tbaa !2447
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 11
  %2860 = load i64, i64* %PC
  %2861 = add i64 %2860, 6
  %2862 = load i64, i64* %PC
  %2863 = add i64 %2862, 6
  store i64 %2863, i64* %PC
  %2864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2865 = load i8, i8* %2864, align 1, !tbaa !2448
  %2866 = icmp eq i8 %2865, 0
  %2867 = zext i1 %2866 to i8
  store i8 %2867, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2869 = select i1 %2866, i64 %2859, i64 %2861
  store i64 %2869, i64* %2868, align 8, !tbaa !2428
  %2870 = load i8, i8* %BRANCH_TAKEN
  %2871 = icmp eq i8 %2870, 1
  %2872 = load i64, i64* %PC
  br i1 %2871, label %block_400c7a, label %block_400c75

block_400c1a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1, %block_400b80
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400b80 ], [ %1991, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  %2873 = load i64, i64* %RAX
  %2874 = load i32, i32* %EAX
  %2875 = zext i32 %2874 to i64
  %2876 = load i64, i64* %PC
  %2877 = add i64 %2876, 2
  store i64 %2877, i64* %PC
  %2878 = xor i64 %2875, %2873
  %2879 = trunc i64 %2878 to i32
  %2880 = and i64 %2878, 4294967295
  store i64 %2880, i64* %RAX, align 8, !tbaa !2428
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2881, align 1, !tbaa !2432
  %2882 = and i32 %2879, 255
  %2883 = call i32 @llvm.ctpop.i32(i32 %2882) #16
  %2884 = trunc i32 %2883 to i8
  %2885 = and i8 %2884, 1
  %2886 = xor i8 %2885, 1
  %2887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2886, i8* %2887, align 1, !tbaa !2446
  %2888 = icmp eq i32 %2879, 0
  %2889 = zext i1 %2888 to i8
  %2890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2889, i8* %2890, align 1, !tbaa !2448
  %2891 = lshr i32 %2879, 31
  %2892 = trunc i32 %2891 to i8
  %2893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2892, i8* %2893, align 1, !tbaa !2449
  %2894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2894, align 1, !tbaa !2450
  %2895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2895, align 1, !tbaa !2447
  %2896 = load i8, i8* %AL
  %2897 = zext i8 %2896 to i64
  %2898 = load i64, i64* %PC
  %2899 = add i64 %2898, 2
  store i64 %2899, i64* %PC
  store i8 %2896, i8* %CL, align 1, !tbaa !2451
  %2900 = load i64, i64* %RBP
  %2901 = sub i64 %2900, 56
  %2902 = load i64, i64* %PC
  %2903 = add i64 %2902, 4
  store i64 %2903, i64* %PC
  %2904 = inttoptr i64 %2901 to i64*
  %2905 = load i64, i64* %2904
  store i64 %2905, i64* %RDX, align 8, !tbaa !2428
  %2906 = load i64, i64* %RDX
  %2907 = load i64, i64* %PC
  %2908 = add i64 %2907, 4
  store i64 %2908, i64* %PC
  %2909 = sub i64 %2906, 1
  store i64 %2909, i64* %RDX, align 8, !tbaa !2428
  %2910 = icmp ult i64 %2906, 1
  %2911 = zext i1 %2910 to i8
  %2912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2911, i8* %2912, align 1, !tbaa !2432
  %2913 = trunc i64 %2909 to i32
  %2914 = and i32 %2913, 255
  %2915 = call i32 @llvm.ctpop.i32(i32 %2914) #16
  %2916 = trunc i32 %2915 to i8
  %2917 = and i8 %2916, 1
  %2918 = xor i8 %2917, 1
  %2919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2918, i8* %2919, align 1, !tbaa !2446
  %2920 = xor i64 1, %2906
  %2921 = xor i64 %2920, %2909
  %2922 = lshr i64 %2921, 4
  %2923 = trunc i64 %2922 to i8
  %2924 = and i8 %2923, 1
  %2925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2924, i8* %2925, align 1, !tbaa !2447
  %2926 = icmp eq i64 %2909, 0
  %2927 = zext i1 %2926 to i8
  %2928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2927, i8* %2928, align 1, !tbaa !2448
  %2929 = lshr i64 %2909, 63
  %2930 = trunc i64 %2929 to i8
  %2931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2930, i8* %2931, align 1, !tbaa !2449
  %2932 = lshr i64 %2906, 63
  %2933 = xor i64 %2929, %2932
  %2934 = add nuw nsw i64 %2933, %2932
  %2935 = icmp eq i64 %2934, 2
  %2936 = zext i1 %2935 to i8
  %2937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2936, i8* %2937, align 1, !tbaa !2450
  %2938 = load i64, i64* %RDX
  %2939 = load i64, i64* %PC
  %2940 = add i64 %2939, 4
  store i64 %2940, i64* %PC
  %2941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2941, align 1, !tbaa !2432
  %2942 = trunc i64 %2938 to i32
  %2943 = and i32 %2942, 255
  %2944 = call i32 @llvm.ctpop.i32(i32 %2943) #16
  %2945 = trunc i32 %2944 to i8
  %2946 = and i8 %2945, 1
  %2947 = xor i8 %2946, 1
  %2948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2947, i8* %2948, align 1, !tbaa !2446
  %2949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2949, align 1, !tbaa !2447
  %2950 = icmp eq i64 %2938, 0
  %2951 = zext i1 %2950 to i8
  %2952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2951, i8* %2952, align 1, !tbaa !2448
  %2953 = lshr i64 %2938, 63
  %2954 = trunc i64 %2953 to i8
  %2955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2954, i8* %2955, align 1, !tbaa !2449
  %2956 = lshr i64 %2938, 63
  %2957 = xor i64 %2953, %2956
  %2958 = add nuw nsw i64 %2957, %2956
  %2959 = icmp eq i64 %2958, 2
  %2960 = zext i1 %2959 to i8
  %2961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2960, i8* %2961, align 1, !tbaa !2450
  %2962 = load i64, i64* %RBP
  %2963 = sub i64 %2962, 57
  %2964 = load i8, i8* %CL
  %2965 = zext i8 %2964 to i64
  %2966 = load i64, i64* %PC
  %2967 = add i64 %2966, 3
  store i64 %2967, i64* %PC
  %2968 = inttoptr i64 %2963 to i8*
  store i8 %2964, i8* %2968
  %2969 = load i64, i64* %PC
  %2970 = add i64 %2969, 61
  %2971 = load i64, i64* %PC
  %2972 = add i64 %2971, 6
  %2973 = load i64, i64* %PC
  %2974 = add i64 %2973, 6
  store i64 %2974, i64* %PC
  %2975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2976 = load i8, i8* %2975, align 1, !tbaa !2448
  store i8 %2976, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2978 = icmp ne i8 %2976, 0
  %2979 = select i1 %2978, i64 %2970, i64 %2972
  store i64 %2979, i64* %2977, align 8, !tbaa !2428
  %2980 = load i8, i8* %BRANCH_TAKEN
  %2981 = icmp eq i8 %2980, 1
  br i1 %2981, label %block_400c6a, label %block_400c33
}

; Function Attrs: noinline
define %struct.Memory* @sub_402f10_primal_update_flow(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402f10:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 7
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RDX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %RDI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 16
  %42 = load i64, i64* %RSI
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC
  %45 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %45
  %46 = load i64, i64* %RBP
  %47 = sub i64 %46, 24
  %48 = load i64, i64* %RDX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %51
  br label %block_402f20

block_402f59:                                     ; preds = %block_402f4d, %block_402f3c
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_402f4d ], [ %MEMORY.3, %block_402f3c ]
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 5
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 5
  store i64 %55, i64* %PC
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %53, i64* %56, align 8, !tbaa !2428
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 8
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61
  store i64 %62, i64* %RAX, align 8, !tbaa !2428
  %63 = load i64, i64* %RAX
  %64 = add i64 %63, 24
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 8
  %71 = load i64, i64* %RAX
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = inttoptr i64 %70 to i64*
  store i64 %71, i64* %74
  %75 = load i64, i64* %PC
  %76 = sub i64 %75, 74
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 5
  store i64 %78, i64* %PC
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %76, i64* %79, align 8, !tbaa !2428
  br label %block_402f20

block_402f74:                                     ; preds = %block_402fad, %block_402f6f
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_402f6f ], [ %MEMORY.2, %block_402fad ]
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 16
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 4
  store i64 %83, i64* %PC
  %84 = inttoptr i64 %81 to i64*
  %85 = load i64, i64* %84
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = load i64, i64* %RAX
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 24
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %88 to i64*
  %92 = load i64, i64* %91
  %93 = sub i64 %86, %92
  %94 = icmp ugt i64 %92, %86
  %95 = zext i1 %94 to i8
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %95, i8* %96, align 1, !tbaa !2432
  %97 = trunc i64 %93 to i32
  %98 = and i32 %97, 255
  %99 = call i32 @llvm.ctpop.i32(i32 %98) #16
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %102, i8* %103, align 1, !tbaa !2446
  %104 = xor i64 %92, %86
  %105 = xor i64 %104, %93
  %106 = lshr i64 %105, 4
  %107 = trunc i64 %106 to i8
  %108 = and i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %108, i8* %109, align 1, !tbaa !2447
  %110 = icmp eq i64 %93, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = lshr i64 %93, 63
  %114 = trunc i64 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = lshr i64 %86, 63
  %117 = lshr i64 %92, 63
  %118 = xor i64 %117, %116
  %119 = xor i64 %113, %116
  %120 = add nuw nsw i64 %119, %118
  %121 = icmp eq i64 %120, 2
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %123, align 1, !tbaa !2450
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 71
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 6
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 6
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %131 = load i8, i8* %130, align 1, !tbaa !2448
  store i8 %131, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %133 = icmp ne i8 %131, 0
  %134 = select i1 %133, i64 %125, i64 %127
  store i64 %134, i64* %132, align 8, !tbaa !2428
  %135 = load i8, i8* %BRANCH_TAKEN
  %136 = icmp eq i8 %135, 1
  br i1 %136, label %block_402fc3, label %block_402f82

block_402f3c:                                     ; preds = %block_402f2e
  %137 = inttoptr i64 %201 to i64*
  store i64 0, i64* %137
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 17
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 5
  store i64 %141, i64* %PC
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %139, i64* %142, align 8, !tbaa !2428
  br label %block_402f59

block_402f6f:                                     ; preds = %block_402f20
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 5
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 5
  store i64 %146, i64* %PC
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %144, i64* %147, align 8, !tbaa !2428
  br label %block_402f74

block_402f4d:                                     ; preds = %block_402f2e
  %148 = inttoptr i64 %201 to i64*
  store i64 1, i64* %148
  br label %block_402f59

block_402f2e:                                     ; preds = %block_402f20
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 8
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = load i64, i64* %RAX
  %156 = add i64 %155, 8
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i32*
  %160 = load i32, i32* %159
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %161, align 1, !tbaa !2432
  %162 = and i32 %160, 255
  %163 = call i32 @llvm.ctpop.i32(i32 %162) #16
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %166, i8* %167, align 1, !tbaa !2446
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %168, align 1, !tbaa !2447
  %169 = icmp eq i32 %160, 0
  %170 = zext i1 %169 to i8
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %170, i8* %171, align 1, !tbaa !2448
  %172 = lshr i32 %160, 31
  %173 = trunc i32 %172 to i8
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %173, i8* %174, align 1, !tbaa !2449
  %175 = lshr i32 %160, 31
  %176 = xor i32 %172, %175
  %177 = add nuw nsw i32 %176, %175
  %178 = icmp eq i32 %177, 2
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %179, i8* %180, align 1, !tbaa !2450
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 23
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 6
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 6
  store i64 %186, i64* %PC
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %188 = load i8, i8* %187, align 1, !tbaa !2448
  store i8 %188, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %190 = icmp ne i8 %188, 0
  %191 = select i1 %190, i64 %182, i64 %184
  store i64 %191, i64* %189, align 8, !tbaa !2428
  %192 = load i8, i8* %BRANCH_TAKEN
  %193 = icmp eq i8 %192, 1
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 8
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 4
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %195 to i64*
  %199 = load i64, i64* %198
  store i64 %199, i64* %RAX, align 8, !tbaa !2428
  %200 = load i64, i64* %RAX
  %201 = add i64 %200, 80
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 8
  store i64 %203, i64* %PC
  br i1 %193, label %block_402f4d, label %block_402f3c

block_402fad:                                     ; preds = %block_402fa1, %block_402f90
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_402fa1 ], [ %MEMORY.1, %block_402f90 ]
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 5
  store i64 %207, i64* %PC
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %205, i64* %208, align 8, !tbaa !2428
  %209 = load i64, i64* %RBP
  %210 = sub i64 %209, 16
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 4
  store i64 %212, i64* %PC
  %213 = inttoptr i64 %210 to i64*
  %214 = load i64, i64* %213
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX
  %216 = add i64 %215, 24
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i64*
  %220 = load i64, i64* %219
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = load i64, i64* %RBP
  %222 = sub i64 %221, 16
  %223 = load i64, i64* %RAX
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 4
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %222 to i64*
  store i64 %223, i64* %226
  %227 = load i64, i64* %PC
  %228 = sub i64 %227, 74
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  store i64 %230, i64* %PC
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %228, i64* %231, align 8, !tbaa !2428
  br label %block_402f74

block_402f82:                                     ; preds = %block_402f74
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 16
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i64*
  %237 = load i64, i64* %236
  store i64 %237, i64* %RAX, align 8, !tbaa !2428
  %238 = load i64, i64* %RAX
  %239 = add i64 %238, 8
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %239 to i32*
  %243 = load i32, i32* %242
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %244, align 1, !tbaa !2432
  %245 = and i32 %243, 255
  %246 = call i32 @llvm.ctpop.i32(i32 %245) #16
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %249, i8* %250, align 1, !tbaa !2446
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %251, align 1, !tbaa !2447
  %252 = icmp eq i32 %243, 0
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %253, i8* %254, align 1, !tbaa !2448
  %255 = lshr i32 %243, 31
  %256 = trunc i32 %255 to i8
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %256, i8* %257, align 1, !tbaa !2449
  %258 = lshr i32 %243, 31
  %259 = xor i32 %255, %258
  %260 = add nuw nsw i32 %259, %258
  %261 = icmp eq i32 %260, 2
  %262 = zext i1 %261 to i8
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %262, i8* %263, align 1, !tbaa !2450
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 23
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 6
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 6
  store i64 %269, i64* %PC
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %271 = load i8, i8* %270, align 1, !tbaa !2448
  store i8 %271, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %273 = icmp ne i8 %271, 0
  %274 = select i1 %273, i64 %265, i64 %267
  store i64 %274, i64* %272, align 8, !tbaa !2428
  %275 = load i8, i8* %BRANCH_TAKEN
  %276 = icmp eq i8 %275, 1
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 16
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %278 to i64*
  %282 = load i64, i64* %281
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = load i64, i64* %RAX
  %284 = add i64 %283, 80
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 8
  store i64 %286, i64* %PC
  br i1 %276, label %block_402fa1, label %block_402f90

block_402f90:                                     ; preds = %block_402f82
  %287 = inttoptr i64 %284 to i64*
  store i64 1, i64* %287
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 17
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 5
  store i64 %291, i64* %PC
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %289, i64* %292, align 8, !tbaa !2428
  br label %block_402fad

block_402fc3:                                     ; preds = %block_402f74
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 1
  store i64 %294, i64* %PC
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %296 = load i64, i64* %295, align 8, !tbaa !2428
  %297 = add i64 %296, 8
  %298 = inttoptr i64 %296 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RBP, align 8, !tbaa !2428
  store i64 %297, i64* %295, align 8, !tbaa !2428
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 1
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = inttoptr i64 %304 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %302, align 8, !tbaa !2428
  %307 = add i64 %304, 8
  store i64 %307, i64* %303, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_402fa1:                                     ; preds = %block_402f82
  %308 = inttoptr i64 %284 to i64*
  store i64 0, i64* %308
  br label %block_402fad

block_402f20:                                     ; preds = %block_402f59, %block_402f10
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_402f10 ], [ %MEMORY.0, %block_402f59 ]
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 8
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 4
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %RAX, align 8, !tbaa !2428
  %315 = load i64, i64* %RAX
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 24
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 4
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i64*
  %321 = load i64, i64* %320
  %322 = sub i64 %315, %321
  %323 = icmp ugt i64 %321, %315
  %324 = zext i1 %323 to i8
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %324, i8* %325, align 1, !tbaa !2432
  %326 = trunc i64 %322 to i32
  %327 = and i32 %326, 255
  %328 = call i32 @llvm.ctpop.i32(i32 %327) #16
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  %331 = xor i8 %330, 1
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %331, i8* %332, align 1, !tbaa !2446
  %333 = xor i64 %321, %315
  %334 = xor i64 %333, %322
  %335 = lshr i64 %334, 4
  %336 = trunc i64 %335 to i8
  %337 = and i8 %336, 1
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %337, i8* %338, align 1, !tbaa !2447
  %339 = icmp eq i64 %322, 0
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %340, i8* %341, align 1, !tbaa !2448
  %342 = lshr i64 %322, 63
  %343 = trunc i64 %342 to i8
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %343, i8* %344, align 1, !tbaa !2449
  %345 = lshr i64 %315, 63
  %346 = lshr i64 %321, 63
  %347 = xor i64 %346, %345
  %348 = xor i64 %342, %345
  %349 = add nuw nsw i64 %348, %347
  %350 = icmp eq i64 %349, 2
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %351, i8* %352, align 1, !tbaa !2450
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 71
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 6
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 6
  store i64 %358, i64* %PC
  %359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %360 = load i8, i8* %359, align 1, !tbaa !2448
  store i8 %360, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %362 = icmp ne i8 %360, 0
  %363 = select i1 %362, i64 %354, i64 %356
  store i64 %363, i64* %361, align 8, !tbaa !2428
  %364 = load i8, i8* %BRANCH_TAKEN
  %365 = icmp eq i8 %364, 1
  br i1 %365, label %block_402f6f, label %block_402f2e
}

; Function Attrs: noinline
define %struct.Memory* @sub_4019c0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4019c0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %ESI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EDI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 128
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 128
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2432
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2446
  %67 = xor i64 128, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2448
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2449
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2450
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 4
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  store i32 0, i32* %89
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 8
  %92 = load i32, i32* %EDI
  %93 = zext i32 %92 to i64
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC
  %96 = inttoptr i64 %91 to i32*
  store i32 %92, i32* %96
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 16
  %99 = load i64, i64* %RSI
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %98 to i64*
  store i64 %99, i64* %102
  %103 = load i64, i64* %RBP
  %104 = sub i64 %103, 8
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 4
  store i64 %106, i64* %PC
  %107 = inttoptr i64 %104 to i32*
  %108 = load i32, i32* %107
  %109 = sub i32 %108, 2
  %110 = icmp ult i32 %108, 2
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %111, i8* %112, align 1, !tbaa !2432
  %113 = and i32 %109, 255
  %114 = call i32 @llvm.ctpop.i32(i32 %113) #16
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  %117 = xor i8 %116, 1
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %117, i8* %118, align 1, !tbaa !2446
  %119 = xor i32 %108, 2
  %120 = xor i32 %119, %109
  %121 = lshr i32 %120, 4
  %122 = trunc i32 %121 to i8
  %123 = and i8 %122, 1
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %123, i8* %124, align 1, !tbaa !2447
  %125 = icmp eq i32 %109, 0
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %126, i8* %127, align 1, !tbaa !2448
  %128 = lshr i32 %109, 31
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %129, i8* %130, align 1, !tbaa !2449
  %131 = lshr i32 %108, 31
  %132 = xor i32 %128, %131
  %133 = add nuw nsw i32 %132, %131
  %134 = icmp eq i32 %133, 2
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %135, i8* %136, align 1, !tbaa !2450
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 18
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 6
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 6
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %144 = load i8, i8* %143, align 1, !tbaa !2449
  %145 = icmp ne i8 %144, 0
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %147 = load i8, i8* %146, align 1, !tbaa !2450
  %148 = icmp ne i8 %147, 0
  %149 = xor i1 %145, %148
  %150 = xor i1 %149, true
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %153 = select i1 %149, i64 %140, i64 %138
  store i64 %153, i64* %152, align 8, !tbaa !2428
  %154 = load i8, i8* %BRANCH_TAKEN
  %155 = icmp eq i8 %154, 1
  br i1 %155, label %block_4019ef, label %block_4019e3

block_401ad9:                                     ; preds = %block_4019ef
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 458), i64* %RDI, align 8, !tbaa !2428
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 8
  store i64 %157, i64* %PC
  %158 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 408) to i64*)
  store i64 %158, i64* %RSI, align 8, !tbaa !2428
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 2
  store i64 %160, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %161 = load i64, i64* %PC
  %162 = sub i64 %161, 4765
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 5
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 5
  store i64 %166, i64* %PC
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %168 = load i64, i64* %167, align 8, !tbaa !2428
  %169 = add i64 %168, -8
  %170 = inttoptr i64 %169 to i64*
  store i64 %164, i64* %170
  store i64 %169, i64* %167, align 8, !tbaa !2428
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %162, i64* %171, align 8, !tbaa !2428
  %172 = load i64, i64* %PC
  %173 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %172, %struct.Memory* %531)
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 10
  store i64 %175, i64* %PC
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 76
  %178 = load i32, i32* %EAX
  %179 = zext i32 %178 to i64
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %177 to i32*
  store i32 %178, i32* %182
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 6305
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 5
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 5
  store i64 %188, i64* %PC
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %190 = load i64, i64* %189, align 8, !tbaa !2428
  %191 = add i64 %190, -8
  %192 = inttoptr i64 %191 to i64*
  store i64 %186, i64* %192
  store i64 %191, i64* %189, align 8, !tbaa !2428
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %184, i64* %193, align 8, !tbaa !2428
  %194 = load i64, i64* %PC
  %195 = call %struct.Memory* @sub_4033a0_primal_start_artificial_renamed_(%struct.State* %0, i64 %194, %struct.Memory* %173)
  %196 = load i64, i64* %RBP
  %197 = sub i64 %196, 88
  %198 = load i64, i64* %RAX
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 4
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %197 to i64*
  store i64 %198, i64* %201
  %202 = load i64, i64* %PC
  %203 = sub i64 %202, 760
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 5
  store i64 %207, i64* %PC
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %209 = load i64, i64* %208, align 8, !tbaa !2428
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 %205, i64* %211
  store i64 %210, i64* %208, align 8, !tbaa !2428
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %203, i64* %212, align 8, !tbaa !2428
  %213 = load i64, i64* %PC
  %214 = call %struct.Memory* @sub_401810_global_opt_renamed_(%struct.State* %0, i64 %213, %struct.Memory* %195)
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 10
  store i64 %216, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 492), i64* %RDI, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 96
  %219 = load i64, i64* %RAX
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 4
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %218 to i64*
  store i64 %219, i64* %222
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 2
  store i64 %224, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %225 = load i64, i64* %PC
  %226 = sub i64 %225, 4813
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 5
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 5
  store i64 %230, i64* %PC
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %232 = load i64, i64* %231, align 8, !tbaa !2428
  %233 = add i64 %232, -8
  %234 = inttoptr i64 %233 to i64*
  store i64 %228, i64* %234
  store i64 %233, i64* %231, align 8, !tbaa !2428
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %226, i64* %235, align 8, !tbaa !2428
  %236 = load i64, i64* %PC
  %237 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %236, %struct.Memory* %214)
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 10
  store i64 %239, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 498), i64* %RDI, align 8, !tbaa !2428
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 10
  store i64 %241, i64* %PC
  store i64 ptrtoint (%net_type* @net to i64), i64* %RSI, align 8, !tbaa !2428
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 100
  %244 = load i32, i32* %EAX
  %245 = zext i32 %244 to i64
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 3
  store i64 %247, i64* %PC
  %248 = inttoptr i64 %243 to i32*
  store i32 %244, i32* %248
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 2631
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 5
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 5
  store i64 %254, i64* %PC
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %256 = load i64, i64* %255, align 8, !tbaa !2428
  %257 = add i64 %256, -8
  %258 = inttoptr i64 %257 to i64*
  store i64 %252, i64* %258
  store i64 %257, i64* %255, align 8, !tbaa !2428
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %250, i64* %259, align 8, !tbaa !2428
  %260 = load i64, i64* %PC
  %261 = call %struct.Memory* @sub_402580_write_circulations_renamed_(%struct.State* %0, i64 %260, %struct.Memory* %237)
  %262 = load i64, i64* %RAX
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 4
  store i64 %264, i64* %PC
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %265, align 1, !tbaa !2432
  %266 = trunc i64 %262 to i32
  %267 = and i32 %266, 255
  %268 = call i32 @llvm.ctpop.i32(i32 %267) #16
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %271, i8* %272, align 1, !tbaa !2446
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %273, align 1, !tbaa !2447
  %274 = icmp eq i64 %262, 0
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %275, i8* %276, align 1, !tbaa !2448
  %277 = lshr i64 %262, 63
  %278 = trunc i64 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %278, i8* %279, align 1, !tbaa !2449
  %280 = lshr i64 %262, 63
  %281 = xor i64 %277, %280
  %282 = add nuw nsw i64 %281, %280
  %283 = icmp eq i64 %282, 2
  %284 = zext i1 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %284, i8* %285, align 1, !tbaa !2450
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 37
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 6
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 6
  store i64 %291, i64* %PC
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %293 = load i8, i8* %292, align 1, !tbaa !2448
  store i8 %293, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %295 = icmp ne i8 %293, 0
  %296 = select i1 %295, i64 %287, i64 %289
  store i64 %296, i64* %294, align 8, !tbaa !2428
  %297 = load i8, i8* %BRANCH_TAKEN
  %298 = icmp eq i8 %297, 1
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 10
  store i64 %300, i64* %PC
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  br i1 %298, label %block_401b67, label %block_401b48

block_4019ef:                                     ; preds = %block_4019c0
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 10
  store i64 %303, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 270), i64* %RDI, align 8, !tbaa !2428
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 2
  store i64 %305, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %306 = load i64, i64* %PC
  %307 = sub i64 %306, 4523
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 5
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %313 = load i64, i64* %312, align 8, !tbaa !2428
  %314 = add i64 %313, -8
  %315 = inttoptr i64 %314 to i64*
  store i64 %309, i64* %315
  store i64 %314, i64* %312, align 8, !tbaa !2428
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %307, i64* %316, align 8, !tbaa !2428
  %317 = load i64, i64* %PC
  %318 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %317, %struct.Memory* %2)
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 10
  store i64 %320, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 302), i64* %RDI, align 8, !tbaa !2428
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 20
  %323 = load i32, i32* %EAX
  %324 = zext i32 %323 to i64
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %322 to i32*
  store i32 %323, i32* %327
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 2
  store i64 %329, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %330 = load i64, i64* %PC
  %331 = sub i64 %330, 4543
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 5
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %337 = load i64, i64* %336, align 8, !tbaa !2428
  %338 = add i64 %337, -8
  %339 = inttoptr i64 %338 to i64*
  store i64 %333, i64* %339
  store i64 %338, i64* %336, align 8, !tbaa !2428
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %331, i64* %340, align 8, !tbaa !2428
  %341 = load i64, i64* %PC
  %342 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %341, %struct.Memory* %318)
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 10
  store i64 %344, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 354), i64* %RDI, align 8, !tbaa !2428
  %345 = load i64, i64* %RBP
  %346 = sub i64 %345, 24
  %347 = load i32, i32* %EAX
  %348 = zext i32 %347 to i64
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 3
  store i64 %350, i64* %PC
  %351 = inttoptr i64 %346 to i32*
  store i32 %347, i32* %351
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 2
  store i64 %353, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %354 = load i64, i64* %PC
  %355 = sub i64 %354, 4563
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 5
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 5
  store i64 %359, i64* %PC
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %361 = load i64, i64* %360, align 8, !tbaa !2428
  %362 = add i64 %361, -8
  %363 = inttoptr i64 %362 to i64*
  store i64 %357, i64* %363
  store i64 %362, i64* %360, align 8, !tbaa !2428
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %355, i64* %364, align 8, !tbaa !2428
  %365 = load i64, i64* %PC
  %366 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %365, %struct.Memory* %342)
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 10
  store i64 %368, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 400), i64* %RDI, align 8, !tbaa !2428
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 28
  %371 = load i32, i32* %EAX
  %372 = zext i32 %371 to i64
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %370 to i32*
  store i32 %371, i32* %375
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 2
  store i64 %377, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %378 = load i64, i64* %PC
  %379 = sub i64 %378, 4583
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 5
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  store i64 %383, i64* %PC
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %385 = load i64, i64* %384, align 8, !tbaa !2428
  %386 = add i64 %385, -8
  %387 = inttoptr i64 %386 to i64*
  store i64 %381, i64* %387
  store i64 %386, i64* %384, align 8, !tbaa !2428
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %379, i64* %388, align 8, !tbaa !2428
  %389 = load i64, i64* %PC
  %390 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %389, %struct.Memory* %366)
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 10
  store i64 %392, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 661), i64* %RDI, align 8, !tbaa !2428
  %393 = load i64, i64* %RBP
  %394 = sub i64 %393, 32
  %395 = load i32, i32* %EAX
  %396 = zext i32 %395 to i64
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 3
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %394 to i32*
  store i32 %395, i32* %399
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 2
  store i64 %401, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %402 = load i64, i64* %PC
  %403 = sub i64 %402, 4603
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 5
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 5
  store i64 %407, i64* %PC
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %409 = load i64, i64* %408, align 8, !tbaa !2428
  %410 = add i64 %409, -8
  %411 = inttoptr i64 %410 to i64*
  store i64 %405, i64* %411
  store i64 %410, i64* %408, align 8, !tbaa !2428
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %403, i64* %412, align 8, !tbaa !2428
  %413 = load i64, i64* %PC
  %414 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %413, %struct.Memory* %390)
  %415 = load i64, i64* %PC
  %416 = add i64 %415, 10
  store i64 %416, i64* %PC
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %417 = load i64, i64* %RSI
  %418 = load i32, i32* %ESI
  %419 = zext i32 %418 to i64
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 2
  store i64 %421, i64* %PC
  %422 = xor i64 %419, %417
  %423 = trunc i64 %422 to i32
  %424 = and i64 %422, 4294967295
  store i64 %424, i64* %RSI, align 8, !tbaa !2428
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %425, align 1, !tbaa !2432
  %426 = and i32 %423, 255
  %427 = call i32 @llvm.ctpop.i32(i32 %426) #16
  %428 = trunc i32 %427 to i8
  %429 = and i8 %428, 1
  %430 = xor i8 %429, 1
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %430, i8* %431, align 1, !tbaa !2446
  %432 = icmp eq i32 %423, 0
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %433, i8* %434, align 1, !tbaa !2448
  %435 = lshr i32 %423, 31
  %436 = trunc i32 %435 to i8
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %436, i8* %437, align 1, !tbaa !2449
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %438, align 1, !tbaa !2450
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %439, align 1, !tbaa !2447
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 5
  store i64 %441, i64* %PC
  store i64 624, i64* %RCX, align 8, !tbaa !2428
  %442 = load i32, i32* %ECX
  %443 = zext i32 %442 to i64
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 2
  store i64 %445, i64* %PC
  %446 = and i64 %443, 4294967295
  store i64 %446, i64* %RDX, align 8, !tbaa !2428
  %447 = load i64, i64* %RBP
  %448 = sub i64 %447, 40
  %449 = load i64, i64* %RDI
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 4
  store i64 %451, i64* %PC
  %452 = inttoptr i64 %448 to i64*
  store i64 %449, i64* %452
  %453 = load i64, i64* %RBP
  %454 = sub i64 %453, 44
  %455 = load i32, i32* %EAX
  %456 = zext i32 %455 to i64
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 3
  store i64 %458, i64* %PC
  %459 = inttoptr i64 %454 to i32*
  store i32 %455, i32* %459
  %460 = load i64, i64* %PC
  %461 = sub i64 %460, 4618
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 5
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 5
  store i64 %465, i64* %PC
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %467 = load i64, i64* %466, align 8, !tbaa !2428
  %468 = add i64 %467, -8
  %469 = inttoptr i64 %468 to i64*
  store i64 %463, i64* %469
  store i64 %468, i64* %466, align 8, !tbaa !2428
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %461, i64* %470, align 8, !tbaa !2428
  %471 = load i64, i64* %PC
  %472 = call %struct.Memory* @ext_608f60_memset(%struct.State* %0, i64 %471, %struct.Memory* %414)
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 12
  store i64 %474, i64* %PC
  store i64 10000000, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 528) to i64*)
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 16
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 4
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i64*
  %480 = load i64, i64* %479
  store i64 %480, i64* %RDX, align 8, !tbaa !2428
  %481 = load i64, i64* %RDX
  %482 = add i64 %481, 8
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 4
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i64*
  %486 = load i64, i64* %485
  store i64 %486, i64* %RSI, align 8, !tbaa !2428
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 5
  store i64 %488, i64* %PC
  store i64 and (i64 ptrtoint (%net_type* @net to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %489 = load i32, i32* %EAX
  %490 = zext i32 %489 to i64
  %491 = load i64, i64* %PC
  %492 = add i64 %491, 2
  store i64 %492, i64* %PC
  %493 = and i64 %490, 4294967295
  store i64 %493, i64* %RDI, align 8, !tbaa !2428
  %494 = load i64, i64* %PC
  %495 = sub i64 %494, 4698
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 5
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 5
  store i64 %499, i64* %PC
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %501 = load i64, i64* %500, align 8, !tbaa !2428
  %502 = add i64 %501, -8
  %503 = inttoptr i64 %502 to i64*
  store i64 %497, i64* %503
  store i64 %502, i64* %500, align 8, !tbaa !2428
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %495, i64* %504, align 8, !tbaa !2428
  %505 = load i64, i64* %PC
  %506 = call %struct.Memory* @ext_400830_strcpy(%struct.State* %0, i64 %505, %struct.Memory* %472)
  %507 = load i64, i64* %RBP
  %508 = sub i64 %507, 40
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %508 to i64*
  %512 = load i64, i64* %511
  store i64 %512, i64* %RDI, align 8, !tbaa !2428
  %513 = load i64, i64* %RBP
  %514 = sub i64 %513, 56
  %515 = load i64, i64* %RAX
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %514 to i64*
  store i64 %515, i64* %518
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 6953
  %521 = load i64, i64* %PC
  %522 = add i64 %521, 5
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 5
  store i64 %524, i64* %PC
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %526 = load i64, i64* %525, align 8, !tbaa !2428
  %527 = add i64 %526, -8
  %528 = inttoptr i64 %527 to i64*
  store i64 %522, i64* %528
  store i64 %527, i64* %525, align 8, !tbaa !2428
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %520, i64* %529, align 8, !tbaa !2428
  %530 = load i64, i64* %PC
  %531 = call %struct.Memory* @sub_4035c0_read_min_renamed_(%struct.State* %0, i64 %530, %struct.Memory* %506)
  %532 = load i64, i64* %RAX
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 4
  store i64 %534, i64* %PC
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %535, align 1, !tbaa !2432
  %536 = trunc i64 %532 to i32
  %537 = and i32 %536, 255
  %538 = call i32 @llvm.ctpop.i32(i32 %537) #16
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = xor i8 %540, 1
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %541, i8* %542, align 1, !tbaa !2446
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %543, align 1, !tbaa !2447
  %544 = icmp eq i64 %532, 0
  %545 = zext i1 %544 to i8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %545, i8* %546, align 1, !tbaa !2448
  %547 = lshr i64 %532, 63
  %548 = trunc i64 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %548, i8* %549, align 1, !tbaa !2449
  %550 = lshr i64 %532, 63
  %551 = xor i64 %547, %550
  %552 = add nuw nsw i64 %551, %550
  %553 = icmp eq i64 %552, 2
  %554 = zext i1 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %554, i8* %555, align 1, !tbaa !2450
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 57
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 6
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 6
  store i64 %561, i64* %PC
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %563 = load i8, i8* %562, align 1, !tbaa !2448
  store i8 %563, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %565 = icmp ne i8 %563, 0
  %566 = select i1 %565, i64 %557, i64 %559
  store i64 %566, i64* %564, align 8, !tbaa !2428
  %567 = load i8, i8* %BRANCH_TAKEN
  %568 = icmp eq i8 %567, 1
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 10
  store i64 %570, i64* %PC
  br i1 %568, label %block_401ad9, label %block_401aa6

block_401b48:                                     ; preds = %block_401ad9
  %571 = add i64 %301, 2382
  %572 = load i64, i64* %PC
  %573 = add i64 %572, 5
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 5
  store i64 %575, i64* %PC
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %577 = load i64, i64* %576, align 8, !tbaa !2428
  %578 = add i64 %577, -8
  %579 = inttoptr i64 %578 to i64*
  store i64 %573, i64* %579
  store i64 %578, i64* %576, align 8, !tbaa !2428
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %571, i64* %580, align 8, !tbaa !2428
  %581 = load i64, i64* %PC
  %582 = call %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* %0, i64 %581, %struct.Memory* %261)
  %583 = load i64, i64* %RBP
  %584 = sub i64 %583, 4
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 7
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %584 to i32*
  store i32 -1, i32* %587
  %588 = load i64, i64* %RBP
  %589 = sub i64 %588, 112
  %590 = load i64, i64* %RAX
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 4
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %589 to i64*
  store i64 %590, i64* %593
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 31
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 5
  store i64 %597, i64* %PC
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %595, i64* %598, align 8, !tbaa !2428
  br label %block_401b81

block_401b67:                                     ; preds = %block_401ad9
  %599 = add i64 %301, 2351
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 5
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 5
  store i64 %603, i64* %PC
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %605 = load i64, i64* %604, align 8, !tbaa !2428
  %606 = add i64 %605, -8
  %607 = inttoptr i64 %606 to i64*
  store i64 %601, i64* %607
  store i64 %606, i64* %604, align 8, !tbaa !2428
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %599, i64* %608, align 8, !tbaa !2428
  %609 = load i64, i64* %PC
  %610 = call %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* %0, i64 %609, %struct.Memory* %261)
  %611 = load i64, i64* %RBP
  %612 = sub i64 %611, 4
  %613 = load i64, i64* %PC
  %614 = add i64 %613, 7
  store i64 %614, i64* %PC
  %615 = inttoptr i64 %612 to i32*
  store i32 0, i32* %615
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 120
  %618 = load i64, i64* %RAX
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %617 to i64*
  store i64 %618, i64* %621
  br label %block_401b81

block_401aa6:                                     ; preds = %block_4019ef
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 440), i64* %RDI, align 8, !tbaa !2428
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 2
  store i64 %623, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %624 = load i64, i64* %PC
  %625 = sub i64 %624, 4706
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 5
  %628 = load i64, i64* %PC
  %629 = add i64 %628, 5
  store i64 %629, i64* %PC
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %631 = load i64, i64* %630, align 8, !tbaa !2428
  %632 = add i64 %631, -8
  %633 = inttoptr i64 %632 to i64*
  store i64 %627, i64* %633
  store i64 %632, i64* %630, align 8, !tbaa !2428
  %634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %625, i64* %634, align 8, !tbaa !2428
  %635 = load i64, i64* %PC
  %636 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %635, %struct.Memory* %531)
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 10
  store i64 %638, i64* %PC
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %639 = load i64, i64* %RBP
  %640 = sub i64 %639, 60
  %641 = load i32, i32* %EAX
  %642 = zext i32 %641 to i64
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 3
  store i64 %644, i64* %PC
  %645 = inttoptr i64 %640 to i32*
  store i32 %641, i32* %645
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 2524
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 5
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 5
  store i64 %651, i64* %PC
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %653 = load i64, i64* %652, align 8, !tbaa !2428
  %654 = add i64 %653, -8
  %655 = inttoptr i64 %654 to i64*
  store i64 %649, i64* %655
  store i64 %654, i64* %652, align 8, !tbaa !2428
  %656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %647, i64* %656, align 8, !tbaa !2428
  %657 = load i64, i64* %PC
  %658 = call %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* %0, i64 %657, %struct.Memory* %636)
  %659 = load i64, i64* %RBP
  %660 = sub i64 %659, 4
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 7
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %660 to i32*
  store i32 -1, i32* %663
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 72
  %666 = load i64, i64* %RAX
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 4
  store i64 %668, i64* %PC
  %669 = inttoptr i64 %665 to i64*
  store i64 %666, i64* %669
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 173
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 5
  store i64 %673, i64* %PC
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %671, i64* %674, align 8, !tbaa !2428
  br label %block_401b81

block_4019e3:                                     ; preds = %block_4019c0
  %675 = load i64, i64* %RBP
  %676 = sub i64 %675, 4
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 7
  store i64 %678, i64* %PC
  %679 = inttoptr i64 %676 to i32*
  store i32 -1, i32* %679
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 407
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 5
  store i64 %683, i64* %PC
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %681, i64* %684, align 8, !tbaa !2428
  br label %block_401b81

block_401b81:                                     ; preds = %block_4019e3, %block_401aa6, %block_401b67, %block_401b48
  %MEMORY.0 = phi %struct.Memory* [ %610, %block_401b67 ], [ %582, %block_401b48 ], [ %658, %block_401aa6 ], [ %2, %block_4019e3 ]
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 4
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 3
  store i64 %688, i64* %PC
  %689 = inttoptr i64 %686 to i32*
  %690 = load i32, i32* %689
  %691 = zext i32 %690 to i64
  store i64 %691, i64* %RAX, align 8, !tbaa !2428
  %692 = load i64, i64* %RSP
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 7
  store i64 %694, i64* %PC
  %695 = add i64 128, %692
  store i64 %695, i64* %RSP, align 8, !tbaa !2428
  %696 = icmp ult i64 %695, %692
  %697 = icmp ult i64 %695, 128
  %698 = or i1 %696, %697
  %699 = zext i1 %698 to i8
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %699, i8* %700, align 1, !tbaa !2432
  %701 = trunc i64 %695 to i32
  %702 = and i32 %701, 255
  %703 = call i32 @llvm.ctpop.i32(i32 %702) #16
  %704 = trunc i32 %703 to i8
  %705 = and i8 %704, 1
  %706 = xor i8 %705, 1
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %706, i8* %707, align 1, !tbaa !2446
  %708 = xor i64 128, %692
  %709 = xor i64 %708, %695
  %710 = lshr i64 %709, 4
  %711 = trunc i64 %710 to i8
  %712 = and i8 %711, 1
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %712, i8* %713, align 1, !tbaa !2447
  %714 = icmp eq i64 %695, 0
  %715 = zext i1 %714 to i8
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %715, i8* %716, align 1, !tbaa !2448
  %717 = lshr i64 %695, 63
  %718 = trunc i64 %717 to i8
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %718, i8* %719, align 1, !tbaa !2449
  %720 = lshr i64 %692, 63
  %721 = xor i64 %717, %720
  %722 = add nuw nsw i64 %721, %717
  %723 = icmp eq i64 %722, 2
  %724 = zext i1 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %724, i8* %725, align 1, !tbaa !2450
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 1
  store i64 %727, i64* %PC
  %728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %729 = load i64, i64* %728, align 8, !tbaa !2428
  %730 = add i64 %729, 8
  %731 = inttoptr i64 %729 to i64*
  %732 = load i64, i64* %731
  store i64 %732, i64* %RBP, align 8, !tbaa !2428
  store i64 %730, i64* %728, align 8, !tbaa !2428
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 1
  store i64 %734, i64* %PC
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %737 = load i64, i64* %736, align 8, !tbaa !2428
  %738 = inttoptr i64 %737 to i64*
  %739 = load i64, i64* %738
  store i64 %739, i64* %735, align 8, !tbaa !2428
  %740 = add i64 %737, 8
  store i64 %740, i64* %736, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_402580_write_circulations(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402580:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = load i64, i64* %RBP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC
  store i64 %44, i64* %RBP, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = sub i64 %47, 96
  store i64 %50, i64* %RSP, align 8, !tbaa !2428
  %51 = icmp ult i64 %47, 96
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2432
  %54 = trunc i64 %50 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2446
  %61 = xor i64 96, %47
  %62 = xor i64 %61, %50
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2447
  %67 = icmp eq i64 %50, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2448
  %70 = lshr i64 %50, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2449
  %73 = lshr i64 %47, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2450
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 10
  store i64 %80, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 657), i64* %RAX, align 8, !tbaa !2428
  %81 = load i64, i64* %RCX
  %82 = load i32, i32* %ECX
  %83 = zext i32 %82 to i64
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = xor i64 %83, %81
  %87 = trunc i64 %86 to i32
  %88 = and i64 %86, 4294967295
  store i64 %88, i64* %RCX, align 8, !tbaa !2428
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %89, align 1, !tbaa !2432
  %90 = and i32 %87, 255
  %91 = call i32 @llvm.ctpop.i32(i32 %90) #16
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %94, i8* %95, align 1, !tbaa !2446
  %96 = icmp eq i32 %87, 0
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %97, i8* %98, align 1, !tbaa !2448
  %99 = lshr i32 %87, 31
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %100, i8* %101, align 1, !tbaa !2449
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %102, align 1, !tbaa !2450
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %103, align 1, !tbaa !2447
  %104 = load i32, i32* %ECX
  %105 = zext i32 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = and i64 %105, 4294967295
  store i64 %108, i64* %RDX, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = sub i64 %109, 16
  %111 = load i64, i64* %RDI
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %110 to i64*
  store i64 %111, i64* %114
  %115 = load i64, i64* %RBP
  %116 = sub i64 %115, 24
  %117 = load i64, i64* %RSI
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %116 to i64*
  store i64 %117, i64* %120
  %121 = load i64, i64* %RBP
  %122 = sub i64 %121, 32
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 8
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %122 to i64*
  store i64 0, i64* %125
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 24
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130
  store i64 %131, i64* %RSI, align 8, !tbaa !2428
  %132 = load i64, i64* %RSI
  %133 = add i64 %132, 576
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 7
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 24
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %RDI, align 8, !tbaa !2428
  %144 = load i64, i64* %RDX
  %145 = load i64, i64* %RDI
  %146 = add i64 %145, 440
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 7
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %146 to i64*
  %150 = load i64, i64* %149
  %151 = sub i64 %144, %150
  store i64 %151, i64* %RDX, align 8, !tbaa !2428
  %152 = icmp ugt i64 %150, %144
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %153, i8* %154, align 1, !tbaa !2432
  %155 = trunc i64 %151 to i32
  %156 = and i32 %155, 255
  %157 = call i32 @llvm.ctpop.i32(i32 %156) #16
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  %160 = xor i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %160, i8* %161, align 1, !tbaa !2446
  %162 = xor i64 %150, %144
  %163 = xor i64 %162, %151
  %164 = lshr i64 %163, 4
  %165 = trunc i64 %164 to i8
  %166 = and i8 %165, 1
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %166, i8* %167, align 1, !tbaa !2447
  %168 = icmp eq i64 %151, 0
  %169 = zext i1 %168 to i8
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %169, i8* %170, align 1, !tbaa !2448
  %171 = lshr i64 %151, 63
  %172 = trunc i64 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %172, i8* %173, align 1, !tbaa !2449
  %174 = lshr i64 %144, 63
  %175 = lshr i64 %150, 63
  %176 = xor i64 %175, %174
  %177 = xor i64 %171, %174
  %178 = add nuw nsw i64 %177, %176
  %179 = icmp eq i64 %178, 2
  %180 = zext i1 %179 to i8
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %180, i8* %181, align 1, !tbaa !2450
  %182 = load i64, i64* %RDX
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC
  %185 = shl i64 %182, 5
  %186 = icmp slt i64 %185, 0
  %187 = shl i64 %185, 1
  store i64 %187, i64* %RDX, align 8, !tbaa !2428
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %189 = zext i1 %186 to i8
  store i8 %189, i8* %188, align 1, !tbaa !2451
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %191 = trunc i64 %187 to i32
  %192 = and i32 %191, 254
  %193 = call i32 @llvm.ctpop.i32(i32 %192) #16
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  store i8 %196, i8* %190, align 1, !tbaa !2451
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %197, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %199 = icmp eq i64 %187, 0
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %198, align 1, !tbaa !2451
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %202 = lshr i64 %187, 63
  %203 = trunc i64 %202 to i8
  store i8 %203, i8* %201, align 1, !tbaa !2451
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %204, align 1, !tbaa !2451
  %205 = load i64, i64* %RSI
  %206 = load i64, i64* %RDX
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 3
  store i64 %208, i64* %PC
  %209 = add i64 %206, %205
  store i64 %209, i64* %RSI, align 8, !tbaa !2428
  %210 = icmp ult i64 %209, %205
  %211 = icmp ult i64 %209, %206
  %212 = or i1 %210, %211
  %213 = zext i1 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %213, i8* %214, align 1, !tbaa !2432
  %215 = trunc i64 %209 to i32
  %216 = and i32 %215, 255
  %217 = call i32 @llvm.ctpop.i32(i32 %216) #16
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %220, i8* %221, align 1, !tbaa !2446
  %222 = xor i64 %206, %205
  %223 = xor i64 %222, %209
  %224 = lshr i64 %223, 4
  %225 = trunc i64 %224 to i8
  %226 = and i8 %225, 1
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %226, i8* %227, align 1, !tbaa !2447
  %228 = icmp eq i64 %209, 0
  %229 = zext i1 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %229, i8* %230, align 1, !tbaa !2448
  %231 = lshr i64 %209, 63
  %232 = trunc i64 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %232, i8* %233, align 1, !tbaa !2449
  %234 = lshr i64 %205, 63
  %235 = lshr i64 %206, 63
  %236 = xor i64 %231, %234
  %237 = xor i64 %231, %235
  %238 = add nuw nsw i64 %236, %237
  %239 = icmp eq i64 %238, 2
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %240, i8* %241, align 1, !tbaa !2450
  %242 = load i64, i64* %RBP
  %243 = sub i64 %242, 64
  %244 = load i64, i64* %RSI
  %245 = load i64, i64* %PC
  %246 = add i64 %245, 4
  store i64 %246, i64* %PC
  %247 = inttoptr i64 %243 to i64*
  store i64 %244, i64* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 16
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RDI, align 8, !tbaa !2428
  %254 = load i64, i64* %RAX
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 3
  store i64 %256, i64* %PC
  store i64 %254, i64* %RSI, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = sub i64 %257, 7406
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 5
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 5
  store i64 %262, i64* %PC
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %264 = load i64, i64* %263, align 8, !tbaa !2428
  %265 = add i64 %264, -8
  %266 = inttoptr i64 %265 to i64*
  store i64 %260, i64* %266
  store i64 %265, i64* %263, align 8, !tbaa !2428
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %258, i64* %267, align 8, !tbaa !2428
  %268 = load i64, i64* %PC
  %269 = call %struct.Memory* @ext_609020_fopen(%struct.State* %0, i64 %268, %struct.Memory* %2)
  %270 = load i64, i64* %RBP
  %271 = sub i64 %270, 32
  %272 = load i64, i64* %RAX
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %271 to i64*
  store i64 %272, i64* %275
  %276 = load i64, i64* %RAX
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %279, align 1, !tbaa !2432
  %280 = trunc i64 %276 to i32
  %281 = and i32 %280, 255
  %282 = call i32 @llvm.ctpop.i32(i32 %281) #16
  %283 = trunc i32 %282 to i8
  %284 = and i8 %283, 1
  %285 = xor i8 %284, 1
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %285, i8* %286, align 1, !tbaa !2446
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %287, align 1, !tbaa !2447
  %288 = icmp eq i64 %276, 0
  %289 = zext i1 %288 to i8
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %289, i8* %290, align 1, !tbaa !2448
  %291 = lshr i64 %276, 63
  %292 = trunc i64 %291 to i8
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %292, i8* %293, align 1, !tbaa !2449
  %294 = lshr i64 %276, 63
  %295 = xor i64 %291, %294
  %296 = add nuw nsw i64 %295, %294
  %297 = icmp eq i64 %296, 2
  %298 = zext i1 %297 to i8
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %298, i8* %299, align 1, !tbaa !2450
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 19
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 6
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 6
  store i64 %305, i64* %PC
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %307 = load i8, i8* %306, align 1, !tbaa !2448
  %308 = icmp eq i8 %307, 0
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %311 = select i1 %308, i64 %301, i64 %303
  store i64 %311, i64* %310, align 8, !tbaa !2428
  %312 = load i8, i8* %BRANCH_TAKEN
  %313 = icmp eq i8 %312, 1
  %314 = load i64, i64* %RBP
  br i1 %313, label %block_4025ee, label %block_4025e1

block_4026ff:                                     ; preds = %block_4026e4, %block_4026ca
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_4026ca ], [ %MEMORY.2, %block_4026e4 ]
  %315 = load i64, i64* %RBP
  %316 = sub i64 %315, 56
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 5
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i64*
  %320 = load i64, i64* %319
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %321, align 1, !tbaa !2432
  %322 = trunc i64 %320 to i32
  %323 = and i32 %322, 255
  %324 = call i32 @llvm.ctpop.i32(i32 %323) #16
  %325 = trunc i32 %324 to i8
  %326 = and i8 %325, 1
  %327 = xor i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %327, i8* %328, align 1, !tbaa !2446
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %329, align 1, !tbaa !2447
  %330 = icmp eq i64 %320, 0
  %331 = zext i1 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %331, i8* %332, align 1, !tbaa !2448
  %333 = lshr i64 %320, 63
  %334 = trunc i64 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %334, i8* %335, align 1, !tbaa !2449
  %336 = lshr i64 %320, 63
  %337 = xor i64 %333, %336
  %338 = add nuw nsw i64 %337, %336
  %339 = icmp eq i64 %338, 2
  %340 = zext i1 %339 to i8
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %340, i8* %341, align 1, !tbaa !2450
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 31
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 6
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 6
  store i64 %347, i64* %PC
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %349 = load i8, i8* %348, align 1, !tbaa !2448
  %350 = icmp eq i8 %349, 0
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %353 = select i1 %350, i64 %343, i64 %345
  store i64 %353, i64* %352, align 8, !tbaa !2428
  %354 = load i8, i8* %BRANCH_TAKEN
  %355 = icmp eq i8 %354, 1
  %356 = load i64, i64* %RBP
  br i1 %355, label %block_402723, label %block_40270a

block_40276a:                                     ; preds = %block_402619
  %357 = sub i64 %867, 32
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360
  store i64 %361, i64* %RDI, align 8, !tbaa !2428
  %362 = load i64, i64* %PC
  %363 = sub i64 %362, 7982
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 5
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 5
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %369 = load i64, i64* %368, align 8, !tbaa !2428
  %370 = add i64 %369, -8
  %371 = inttoptr i64 %370 to i64*
  store i64 %365, i64* %371
  store i64 %370, i64* %368, align 8, !tbaa !2428
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %363, i64* %372, align 8, !tbaa !2428
  %373 = load i64, i64* %PC
  %374 = call %struct.Memory* @ext_608f50_fclose(%struct.State* %0, i64 %373, %struct.Memory* %MEMORY.4)
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 8
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 8
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %376 to i64*
  store i64 0, i64* %379
  %380 = load i64, i64* %RBP
  %381 = sub i64 %380, 84
  %382 = load i32, i32* %EAX
  %383 = zext i32 %382 to i64
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 3
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %381 to i32*
  store i32 %382, i32* %386
  br label %block_40277e

block_4025e1:                                     ; preds = %block_402580
  %387 = sub i64 %314, 8
  %388 = load i64, i64* %PC
  %389 = add i64 %388, 8
  store i64 %389, i64* %PC
  %390 = inttoptr i64 %387 to i64*
  store i64 -1, i64* %390
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 405
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 5
  store i64 %394, i64* %PC
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %392, i64* %395, align 8, !tbaa !2428
  br label %block_40277e

block_4026d5:                                     ; preds = %block_4026ca
  %396 = load i64, i64* %RBP
  %397 = sub i64 %396, 56
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 4
  store i64 %399, i64* %PC
  %400 = inttoptr i64 %397 to i64*
  %401 = load i64, i64* %400
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = load i64, i64* %RAX
  %403 = add i64 %402, 48
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 5
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %408, align 1, !tbaa !2432
  %409 = trunc i64 %407 to i32
  %410 = and i32 %409, 255
  %411 = call i32 @llvm.ctpop.i32(i32 %410) #16
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = xor i8 %413, 1
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %414, i8* %415, align 1, !tbaa !2446
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %416, align 1, !tbaa !2447
  %417 = icmp eq i64 %407, 0
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %418, i8* %419, align 1, !tbaa !2448
  %420 = lshr i64 %407, 63
  %421 = trunc i64 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %421, i8* %422, align 1, !tbaa !2449
  %423 = lshr i64 %407, 63
  %424 = xor i64 %420, %423
  %425 = add nuw nsw i64 %424, %423
  %426 = icmp eq i64 %425, 2
  %427 = zext i1 %426 to i8
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %427, i8* %428, align 1, !tbaa !2450
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 11
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 6
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 6
  store i64 %434, i64* %PC
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %436 = load i8, i8* %435, align 1, !tbaa !2448
  store i8 %436, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %438 = icmp ne i8 %436, 0
  %439 = select i1 %438, i64 %430, i64 %432
  store i64 %439, i64* %437, align 8, !tbaa !2428
  %440 = load i8, i8* %BRANCH_TAKEN
  %441 = icmp eq i8 %440, 1
  %442 = load i64, i64* %PC
  br i1 %441, label %block_4026e9, label %block_4026e4

block_40266c:                                     ; preds = %block_40265e
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 10
  store i64 %444, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 663), i64* %RSI, align 8, !tbaa !2428
  %445 = load i64, i64* %RBP
  %446 = sub i64 %445, 32
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 4
  store i64 %448, i64* %PC
  %449 = inttoptr i64 %446 to i64*
  %450 = load i64, i64* %449
  store i64 %450, i64* %RDI, align 8, !tbaa !2428
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 2
  store i64 %452, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %453 = load i64, i64* %PC
  %454 = sub i64 %453, 7660
  %455 = load i64, i64* %PC
  %456 = add i64 %455, 5
  %457 = load i64, i64* %PC
  %458 = add i64 %457, 5
  store i64 %458, i64* %PC
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %460 = load i64, i64* %459, align 8, !tbaa !2428
  %461 = add i64 %460, -8
  %462 = inttoptr i64 %461 to i64*
  store i64 %456, i64* %462
  store i64 %461, i64* %459, align 8, !tbaa !2428
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %454, i64* %463, align 8, !tbaa !2428
  %464 = load i64, i64* %PC
  %465 = call %struct.Memory* @ext_608ff8_fprintf(%struct.State* %0, i64 %464, %struct.Memory* %MEMORY.3)
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 72
  %468 = load i32, i32* %EAX
  %469 = zext i32 %468 to i64
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 3
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %472
  br label %block_402684

block_402754:                                     ; preds = %block_40274f, %block_402624
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_402624 ], [ %MEMORY.3, %block_40274f ]
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 5
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 5
  store i64 %476, i64* %PC
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %474, i64* %477, align 8, !tbaa !2428
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 40
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %479 to i64*
  %483 = load i64, i64* %482
  store i64 %483, i64* %RAX, align 8, !tbaa !2428
  %484 = load i64, i64* %RAX
  %485 = add i64 %484, 32
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 4
  store i64 %487, i64* %PC
  %488 = inttoptr i64 %485 to i64*
  %489 = load i64, i64* %488
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = load i64, i64* %RBP
  %491 = sub i64 %490, 40
  %492 = load i64, i64* %RAX
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 4
  store i64 %494, i64* %PC
  %495 = inttoptr i64 %491 to i64*
  store i64 %492, i64* %495
  %496 = load i64, i64* %PC
  %497 = sub i64 %496, 332
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 5
  store i64 %499, i64* %PC
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %497, i64* %500, align 8, !tbaa !2428
  br label %block_402619

block_402742:                                     ; preds = %block_402723
  %501 = sub i64 %782, 48
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 8
  store i64 %503, i64* %PC
  %504 = inttoptr i64 %501 to i64*
  store i64 0, i64* %504
  br label %block_40274a

block_4026ca:                                     ; preds = %block_402684, %block_4026e9
  %MEMORY.2 = phi %struct.Memory* [ %1183, %block_402684 ], [ %MEMORY.2, %block_4026e9 ]
  %505 = load i64, i64* %RBP
  %506 = sub i64 %505, 56
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 5
  store i64 %508, i64* %PC
  %509 = inttoptr i64 %506 to i64*
  %510 = load i64, i64* %509
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %511, align 1, !tbaa !2432
  %512 = trunc i64 %510 to i32
  %513 = and i32 %512, 255
  %514 = call i32 @llvm.ctpop.i32(i32 %513) #16
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  %517 = xor i8 %516, 1
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %517, i8* %518, align 1, !tbaa !2446
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %519, align 1, !tbaa !2447
  %520 = icmp eq i64 %510, 0
  %521 = zext i1 %520 to i8
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %521, i8* %522, align 1, !tbaa !2448
  %523 = lshr i64 %510, 63
  %524 = trunc i64 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %524, i8* %525, align 1, !tbaa !2449
  %526 = lshr i64 %510, 63
  %527 = xor i64 %523, %526
  %528 = add nuw nsw i64 %527, %526
  %529 = icmp eq i64 %528, 2
  %530 = zext i1 %529 to i8
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %530, i8* %531, align 1, !tbaa !2450
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 48
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 6
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 6
  store i64 %537, i64* %PC
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %539 = load i8, i8* %538, align 1, !tbaa !2448
  store i8 %539, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %541 = icmp ne i8 %539, 0
  %542 = select i1 %541, i64 %533, i64 %535
  store i64 %542, i64* %540, align 8, !tbaa !2428
  %543 = load i8, i8* %BRANCH_TAKEN
  %544 = icmp eq i8 %543, 1
  br i1 %544, label %block_4026ff, label %block_4026d5

block_402735:                                     ; preds = %block_402723
  %545 = sub i64 %782, 56
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = load i64, i64* %RBP
  %551 = sub i64 %550, 48
  %552 = load i64, i64* %RAX
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 4
  store i64 %554, i64* %PC
  %555 = inttoptr i64 %551 to i64*
  store i64 %552, i64* %555
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 13
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 5
  store i64 %559, i64* %PC
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %557, i64* %560, align 8, !tbaa !2428
  br label %block_40274a

block_402633:                                     ; preds = %block_402624
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 10
  store i64 %562, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 659), i64* %RSI, align 8, !tbaa !2428
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 32
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 4
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i64*
  %568 = load i64, i64* %567
  store i64 %568, i64* %RDI, align 8, !tbaa !2428
  %569 = load i64, i64* %PC
  %570 = add i64 %569, 2
  store i64 %570, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %571 = load i64, i64* %PC
  %572 = sub i64 %571, 7603
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 5
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 5
  store i64 %576, i64* %PC
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %578 = load i64, i64* %577, align 8, !tbaa !2428
  %579 = add i64 %578, -8
  %580 = inttoptr i64 %579 to i64*
  store i64 %574, i64* %580
  store i64 %579, i64* %577, align 8, !tbaa !2428
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %572, i64* %581, align 8, !tbaa !2428
  %582 = load i64, i64* %PC
  %583 = call %struct.Memory* @ext_608ff8_fprintf(%struct.State* %0, i64 %582, %struct.Memory* %MEMORY.4)
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 40
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 4
  store i64 %587, i64* %PC
  %588 = inttoptr i64 %585 to i64*
  %589 = load i64, i64* %588
  store i64 %589, i64* %RSI, align 8, !tbaa !2428
  %590 = load i64, i64* %RBP
  %591 = sub i64 %590, 48
  %592 = load i64, i64* %RSI
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 4
  store i64 %594, i64* %PC
  %595 = inttoptr i64 %591 to i64*
  store i64 %592, i64* %595
  %596 = load i64, i64* %RBP
  %597 = sub i64 %596, 68
  %598 = load i32, i32* %EAX
  %599 = zext i32 %598 to i64
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 3
  store i64 %601, i64* %PC
  %602 = inttoptr i64 %597 to i32*
  store i32 %598, i32* %602
  br label %block_402653

block_40265e:                                     ; preds = %block_402653
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 48
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 4
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i64*
  %608 = load i64, i64* %607
  store i64 %608, i64* %RAX, align 8, !tbaa !2428
  %609 = load i64, i64* %RAX
  %610 = load i64, i64* %RBP
  %611 = sub i64 %610, 64
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 4
  store i64 %613, i64* %PC
  %614 = inttoptr i64 %611 to i64*
  %615 = load i64, i64* %614
  %616 = sub i64 %609, %615
  %617 = icmp ugt i64 %615, %609
  %618 = zext i1 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %618, i8* %619, align 1, !tbaa !2432
  %620 = trunc i64 %616 to i32
  %621 = and i32 %620, 255
  %622 = call i32 @llvm.ctpop.i32(i32 %621) #16
  %623 = trunc i32 %622 to i8
  %624 = and i8 %623, 1
  %625 = xor i8 %624, 1
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %625, i8* %626, align 1, !tbaa !2446
  %627 = xor i64 %615, %609
  %628 = xor i64 %627, %616
  %629 = lshr i64 %628, 4
  %630 = trunc i64 %629 to i8
  %631 = and i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %631, i8* %632, align 1, !tbaa !2447
  %633 = icmp eq i64 %616, 0
  %634 = zext i1 %633 to i8
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %634, i8* %635, align 1, !tbaa !2448
  %636 = lshr i64 %616, 63
  %637 = trunc i64 %636 to i8
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %637, i8* %638, align 1, !tbaa !2449
  %639 = lshr i64 %609, 63
  %640 = lshr i64 %615, 63
  %641 = xor i64 %640, %639
  %642 = xor i64 %636, %639
  %643 = add nuw nsw i64 %642, %641
  %644 = icmp eq i64 %643, 2
  %645 = zext i1 %644 to i8
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %645, i8* %646, align 1, !tbaa !2450
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 30
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 6
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 6
  store i64 %652, i64* %PC
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %654 = load i8, i8* %653, align 1, !tbaa !2432
  store i8 %654, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %656 = icmp ne i8 %654, 0
  %657 = select i1 %656, i64 %648, i64 %650
  store i64 %657, i64* %655, align 8, !tbaa !2428
  %658 = load i8, i8* %BRANCH_TAKEN
  %659 = icmp eq i8 %658, 1
  br i1 %659, label %block_402684, label %block_40266c

block_402624:                                     ; preds = %block_402619
  %660 = sub i64 %867, 40
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 4
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %660 to i64*
  %664 = load i64, i64* %663
  store i64 %664, i64* %RAX, align 8, !tbaa !2428
  %665 = load i64, i64* %RAX
  %666 = add i64 %665, 48
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 5
  store i64 %668, i64* %PC
  %669 = inttoptr i64 %666 to i64*
  %670 = load i64, i64* %669
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %671, align 1, !tbaa !2432
  %672 = trunc i64 %670 to i32
  %673 = and i32 %672, 255
  %674 = call i32 @llvm.ctpop.i32(i32 %673) #16
  %675 = trunc i32 %674 to i8
  %676 = and i8 %675, 1
  %677 = xor i8 %676, 1
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %677, i8* %678, align 1, !tbaa !2446
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %679, align 1, !tbaa !2447
  %680 = icmp eq i64 %670, 0
  %681 = zext i1 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %681, i8* %682, align 1, !tbaa !2448
  %683 = lshr i64 %670, 63
  %684 = trunc i64 %683 to i8
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %684, i8* %685, align 1, !tbaa !2449
  %686 = lshr i64 %670, 63
  %687 = xor i64 %683, %686
  %688 = add nuw nsw i64 %687, %686
  %689 = icmp eq i64 %688, 2
  %690 = zext i1 %689 to i8
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %690, i8* %691, align 1, !tbaa !2450
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 295
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 6
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 6
  store i64 %697, i64* %PC
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %699 = load i8, i8* %698, align 1, !tbaa !2448
  store i8 %699, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %701 = icmp ne i8 %699, 0
  %702 = select i1 %701, i64 %693, i64 %695
  store i64 %702, i64* %700, align 8, !tbaa !2428
  %703 = load i8, i8* %BRANCH_TAKEN
  %704 = icmp eq i8 %703, 1
  br i1 %704, label %block_402754, label %block_402633

block_4026e9:                                     ; preds = %block_4026d5
  %705 = add i64 %442, 5
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 5
  store i64 %707, i64* %PC
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %705, i64* %708, align 8, !tbaa !2428
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 56
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 4
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RAX
  %716 = add i64 %715, 32
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 4
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i64*
  %720 = load i64, i64* %719
  store i64 %720, i64* %RAX, align 8, !tbaa !2428
  %721 = load i64, i64* %RBP
  %722 = sub i64 %721, 56
  %723 = load i64, i64* %RAX
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 4
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %722 to i64*
  store i64 %723, i64* %726
  %727 = load i64, i64* %PC
  %728 = sub i64 %727, 48
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 5
  store i64 %730, i64* %PC
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %728, i64* %731, align 8, !tbaa !2428
  br label %block_4026ca

block_402723:                                     ; preds = %block_4026ff
  %732 = sub i64 %356, 56
  %733 = load i64, i64* %PC
  %734 = add i64 %733, 4
  store i64 %734, i64* %PC
  %735 = inttoptr i64 %732 to i64*
  %736 = load i64, i64* %735
  store i64 %736, i64* %RAX, align 8, !tbaa !2428
  %737 = load i64, i64* %RAX
  %738 = add i64 %737, 16
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 4
  store i64 %740, i64* %PC
  %741 = inttoptr i64 %738 to i64*
  %742 = load i64, i64* %741
  store i64 %742, i64* %RAX, align 8, !tbaa !2428
  %743 = load i64, i64* %RAX
  %744 = add i64 %743, 96
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 4
  store i64 %746, i64* %PC
  %747 = inttoptr i64 %744 to i32*
  %748 = load i32, i32* %747
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %749, align 1, !tbaa !2432
  %750 = and i32 %748, 255
  %751 = call i32 @llvm.ctpop.i32(i32 %750) #16
  %752 = trunc i32 %751 to i8
  %753 = and i8 %752, 1
  %754 = xor i8 %753, 1
  %755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %754, i8* %755, align 1, !tbaa !2446
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %756, align 1, !tbaa !2447
  %757 = icmp eq i32 %748, 0
  %758 = zext i1 %757 to i8
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %758, i8* %759, align 1, !tbaa !2448
  %760 = lshr i32 %748, 31
  %761 = trunc i32 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %761, i8* %762, align 1, !tbaa !2449
  %763 = lshr i32 %748, 31
  %764 = xor i32 %760, %763
  %765 = add nuw nsw i32 %764, %763
  %766 = icmp eq i32 %765, 2
  %767 = zext i1 %766 to i8
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %767, i8* %768, align 1, !tbaa !2450
  %769 = load i64, i64* %PC
  %770 = add i64 %769, 19
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 6
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 6
  store i64 %774, i64* %PC
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %776 = load i8, i8* %775, align 1, !tbaa !2448
  store i8 %776, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %778 = icmp ne i8 %776, 0
  %779 = select i1 %778, i64 %770, i64 %772
  store i64 %779, i64* %777, align 8, !tbaa !2428
  %780 = load i8, i8* %BRANCH_TAKEN
  %781 = icmp eq i8 %780, 1
  %782 = load i64, i64* %RBP
  br i1 %781, label %block_402742, label %block_402735

block_4026e4:                                     ; preds = %block_4026d5
  %783 = add i64 %442, 27
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 5
  store i64 %785, i64* %PC
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %783, i64* %786, align 8, !tbaa !2428
  br label %block_4026ff

block_402653:                                     ; preds = %block_40274a, %block_402633
  %MEMORY.3 = phi %struct.Memory* [ %583, %block_402633 ], [ %MEMORY.5, %block_40274a ]
  %787 = load i64, i64* %RBP
  %788 = sub i64 %787, 48
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 5
  store i64 %790, i64* %PC
  %791 = inttoptr i64 %788 to i64*
  %792 = load i64, i64* %791
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %793, align 1, !tbaa !2432
  %794 = trunc i64 %792 to i32
  %795 = and i32 %794, 255
  %796 = call i32 @llvm.ctpop.i32(i32 %795) #16
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  %799 = xor i8 %798, 1
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %799, i8* %800, align 1, !tbaa !2446
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %801, align 1, !tbaa !2447
  %802 = icmp eq i64 %792, 0
  %803 = zext i1 %802 to i8
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %803, i8* %804, align 1, !tbaa !2448
  %805 = lshr i64 %792, 63
  %806 = trunc i64 %805 to i8
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %806, i8* %807, align 1, !tbaa !2449
  %808 = lshr i64 %792, 63
  %809 = xor i64 %805, %808
  %810 = add nuw nsw i64 %809, %808
  %811 = icmp eq i64 %810, 2
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %812, i8* %813, align 1, !tbaa !2450
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 247
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 6
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 6
  store i64 %819, i64* %PC
  %820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %821 = load i8, i8* %820, align 1, !tbaa !2448
  store i8 %821, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %823 = icmp ne i8 %821, 0
  %824 = select i1 %823, i64 %815, i64 %817
  store i64 %824, i64* %822, align 8, !tbaa !2428
  %825 = load i8, i8* %BRANCH_TAKEN
  %826 = icmp eq i8 %825, 1
  br i1 %826, label %block_40274f, label %block_40265e

block_402619:                                     ; preds = %block_4025ee, %block_402754
  %MEMORY.4 = phi %struct.Memory* [ %890, %block_4025ee ], [ %MEMORY.1, %block_402754 ]
  %827 = load i64, i64* %RBP
  %828 = sub i64 %827, 40
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 5
  store i64 %830, i64* %PC
  %831 = inttoptr i64 %828 to i64*
  %832 = load i64, i64* %831
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %833, align 1, !tbaa !2432
  %834 = trunc i64 %832 to i32
  %835 = and i32 %834, 255
  %836 = call i32 @llvm.ctpop.i32(i32 %835) #16
  %837 = trunc i32 %836 to i8
  %838 = and i8 %837, 1
  %839 = xor i8 %838, 1
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %839, i8* %840, align 1, !tbaa !2446
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %841, align 1, !tbaa !2447
  %842 = icmp eq i64 %832, 0
  %843 = zext i1 %842 to i8
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %843, i8* %844, align 1, !tbaa !2448
  %845 = lshr i64 %832, 63
  %846 = trunc i64 %845 to i8
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %846, i8* %847, align 1, !tbaa !2449
  %848 = lshr i64 %832, 63
  %849 = xor i64 %845, %848
  %850 = add nuw nsw i64 %849, %848
  %851 = icmp eq i64 %850, 2
  %852 = zext i1 %851 to i8
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %852, i8* %853, align 1, !tbaa !2450
  %854 = load i64, i64* %PC
  %855 = add i64 %854, 332
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 6
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 6
  store i64 %859, i64* %PC
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %861 = load i8, i8* %860, align 1, !tbaa !2448
  store i8 %861, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %863 = icmp ne i8 %861, 0
  %864 = select i1 %863, i64 %855, i64 %857
  store i64 %864, i64* %862, align 8, !tbaa !2428
  %865 = load i8, i8* %BRANCH_TAKEN
  %866 = icmp eq i8 %865, 1
  %867 = load i64, i64* %RBP
  br i1 %866, label %block_40276a, label %block_402624

block_40274a:                                     ; preds = %block_402735, %block_402742
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.0, %block_402742 ], [ %MEMORY.0, %block_402735 ]
  %868 = load i64, i64* %PC
  %869 = sub i64 %868, 247
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 5
  store i64 %871, i64* %PC
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %869, i64* %872, align 8, !tbaa !2428
  br label %block_402653

block_4025ee:                                     ; preds = %block_402580
  %873 = sub i64 %314, 24
  %874 = load i64, i64* %PC
  %875 = add i64 %874, 4
  store i64 %875, i64* %PC
  %876 = inttoptr i64 %873 to i64*
  %877 = load i64, i64* %876
  store i64 %877, i64* %RDI, align 8, !tbaa !2428
  %878 = load i64, i64* %PC
  %879 = sub i64 %878, 2658
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 5
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 5
  store i64 %883, i64* %PC
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %885 = load i64, i64* %884, align 8, !tbaa !2428
  %886 = add i64 %885, -8
  %887 = inttoptr i64 %886 to i64*
  store i64 %881, i64* %887
  store i64 %886, i64* %884, align 8, !tbaa !2428
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %879, i64* %888, align 8, !tbaa !2428
  %889 = load i64, i64* %PC
  %890 = call %struct.Memory* @sub_401b90_refresh_neighbour_lists_renamed_(%struct.State* %0, i64 %889, %struct.Memory* %269)
  %891 = load i64, i64* %RBP
  %892 = sub i64 %891, 24
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 4
  store i64 %894, i64* %PC
  %895 = inttoptr i64 %892 to i64*
  %896 = load i64, i64* %895
  store i64 %896, i64* %RDI, align 8, !tbaa !2428
  %897 = load i64, i64* %RDI
  %898 = add i64 %897, 552
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 7
  store i64 %900, i64* %PC
  %901 = inttoptr i64 %898 to i64*
  %902 = load i64, i64* %901
  store i64 %902, i64* %RDI, align 8, !tbaa !2428
  %903 = load i64, i64* %RBP
  %904 = sub i64 %903, 24
  %905 = load i64, i64* %PC
  %906 = add i64 %905, 4
  store i64 %906, i64* %PC
  %907 = inttoptr i64 %904 to i64*
  %908 = load i64, i64* %907
  store i64 %908, i64* %RAX, align 8, !tbaa !2428
  %909 = load i64, i64* %RAX
  %910 = add i64 %909, 400
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 8
  store i64 %912, i64* %PC
  %913 = inttoptr i64 %910 to i64*
  %914 = load i64, i64* %913
  %915 = sext i64 %914 to i128
  %916 = and i128 %915, -18446744073709551616
  %917 = zext i64 %914 to i128
  %918 = or i128 %916, %917
  %919 = mul nsw i128 %918, 104
  %920 = trunc i128 %919 to i64
  store i64 %920, i64* %RAX, align 8, !tbaa !2428
  %921 = sext i64 %920 to i128
  %922 = icmp ne i128 %921, %919
  %923 = zext i1 %922 to i8
  %924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %923, i8* %924, align 1, !tbaa !2432
  %925 = trunc i128 %919 to i32
  %926 = and i32 %925, 255
  %927 = call i32 @llvm.ctpop.i32(i32 %926) #16
  %928 = trunc i32 %927 to i8
  %929 = and i8 %928, 1
  %930 = xor i8 %929, 1
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %930, i8* %931, align 1, !tbaa !2446
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %932, align 1, !tbaa !2447
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %933, align 1, !tbaa !2448
  %934 = lshr i64 %920, 63
  %935 = trunc i64 %934 to i8
  %936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %935, i8* %936, align 1, !tbaa !2449
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %923, i8* %937, align 1, !tbaa !2450
  %938 = load i64, i64* %RDI
  %939 = load i64, i64* %RAX
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 3
  store i64 %941, i64* %PC
  %942 = add i64 %939, %938
  store i64 %942, i64* %RDI, align 8, !tbaa !2428
  %943 = icmp ult i64 %942, %938
  %944 = icmp ult i64 %942, %939
  %945 = or i1 %943, %944
  %946 = zext i1 %945 to i8
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %946, i8* %947, align 1, !tbaa !2432
  %948 = trunc i64 %942 to i32
  %949 = and i32 %948, 255
  %950 = call i32 @llvm.ctpop.i32(i32 %949) #16
  %951 = trunc i32 %950 to i8
  %952 = and i8 %951, 1
  %953 = xor i8 %952, 1
  %954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %953, i8* %954, align 1, !tbaa !2446
  %955 = xor i64 %939, %938
  %956 = xor i64 %955, %942
  %957 = lshr i64 %956, 4
  %958 = trunc i64 %957 to i8
  %959 = and i8 %958, 1
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %959, i8* %960, align 1, !tbaa !2447
  %961 = icmp eq i64 %942, 0
  %962 = zext i1 %961 to i8
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %962, i8* %963, align 1, !tbaa !2448
  %964 = lshr i64 %942, 63
  %965 = trunc i64 %964 to i8
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %965, i8* %966, align 1, !tbaa !2449
  %967 = lshr i64 %938, 63
  %968 = lshr i64 %939, 63
  %969 = xor i64 %964, %967
  %970 = xor i64 %964, %968
  %971 = add nuw nsw i64 %969, %970
  %972 = icmp eq i64 %971, 2
  %973 = zext i1 %972 to i8
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %973, i8* %974, align 1, !tbaa !2450
  %975 = load i64, i64* %RDI
  %976 = add i64 %975, 56
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 4
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i64*
  %980 = load i64, i64* %979
  store i64 %980, i64* %RAX, align 8, !tbaa !2428
  %981 = load i64, i64* %RBP
  %982 = sub i64 %981, 40
  %983 = load i64, i64* %RAX
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 4
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %982 to i64*
  store i64 %983, i64* %986
  br label %block_402619

block_40277e:                                     ; preds = %block_40270a, %block_4025e1, %block_40276a
  %MEMORY.6 = phi %struct.Memory* [ %374, %block_40276a ], [ %1059, %block_40270a ], [ %269, %block_4025e1 ]
  %987 = load i64, i64* %RBP
  %988 = sub i64 %987, 8
  %989 = load i64, i64* %PC
  %990 = add i64 %989, 4
  store i64 %990, i64* %PC
  %991 = inttoptr i64 %988 to i64*
  %992 = load i64, i64* %991
  store i64 %992, i64* %RAX, align 8, !tbaa !2428
  %993 = load i64, i64* %RSP
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 4
  store i64 %995, i64* %PC
  %996 = add i64 96, %993
  store i64 %996, i64* %RSP, align 8, !tbaa !2428
  %997 = icmp ult i64 %996, %993
  %998 = icmp ult i64 %996, 96
  %999 = or i1 %997, %998
  %1000 = zext i1 %999 to i8
  %1001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1000, i8* %1001, align 1, !tbaa !2432
  %1002 = trunc i64 %996 to i32
  %1003 = and i32 %1002, 255
  %1004 = call i32 @llvm.ctpop.i32(i32 %1003) #16
  %1005 = trunc i32 %1004 to i8
  %1006 = and i8 %1005, 1
  %1007 = xor i8 %1006, 1
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1007, i8* %1008, align 1, !tbaa !2446
  %1009 = xor i64 96, %993
  %1010 = xor i64 %1009, %996
  %1011 = lshr i64 %1010, 4
  %1012 = trunc i64 %1011 to i8
  %1013 = and i8 %1012, 1
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1013, i8* %1014, align 1, !tbaa !2447
  %1015 = icmp eq i64 %996, 0
  %1016 = zext i1 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1016, i8* %1017, align 1, !tbaa !2448
  %1018 = lshr i64 %996, 63
  %1019 = trunc i64 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1019, i8* %1020, align 1, !tbaa !2449
  %1021 = lshr i64 %993, 63
  %1022 = xor i64 %1018, %1021
  %1023 = add nuw nsw i64 %1022, %1018
  %1024 = icmp eq i64 %1023, 2
  %1025 = zext i1 %1024 to i8
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1025, i8* %1026, align 1, !tbaa !2450
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 1
  store i64 %1028, i64* %PC
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1030 = load i64, i64* %1029, align 8, !tbaa !2428
  %1031 = add i64 %1030, 8
  %1032 = inttoptr i64 %1030 to i64*
  %1033 = load i64, i64* %1032
  store i64 %1033, i64* %RBP, align 8, !tbaa !2428
  store i64 %1031, i64* %1029, align 8, !tbaa !2428
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 1
  store i64 %1035, i64* %PC
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1038 = load i64, i64* %1037, align 8, !tbaa !2428
  %1039 = inttoptr i64 %1038 to i64*
  %1040 = load i64, i64* %1039
  store i64 %1040, i64* %1036, align 8, !tbaa !2428
  %1041 = add i64 %1038, 8
  store i64 %1041, i64* %1037, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_40270a:                                     ; preds = %block_4026ff
  %1042 = sub i64 %356, 32
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 4
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  store i64 %1046, i64* %RDI, align 8, !tbaa !2428
  %1047 = load i64, i64* %PC
  %1048 = sub i64 %1047, 7886
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 5
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 5
  store i64 %1052, i64* %PC
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1054 = load i64, i64* %1053, align 8, !tbaa !2428
  %1055 = add i64 %1054, -8
  %1056 = inttoptr i64 %1055 to i64*
  store i64 %1050, i64* %1056
  store i64 %1055, i64* %1053, align 8, !tbaa !2428
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1048, i64* %1057, align 8, !tbaa !2428
  %1058 = load i64, i64* %PC
  %1059 = call %struct.Memory* @ext_608f50_fclose(%struct.State* %0, i64 %1058, %struct.Memory* %MEMORY.0)
  %1060 = load i64, i64* %RBP
  %1061 = sub i64 %1060, 8
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 8
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1061 to i64*
  store i64 -1, i64* %1064
  %1065 = load i64, i64* %RBP
  %1066 = sub i64 %1065, 80
  %1067 = load i32, i32* %EAX
  %1068 = zext i32 %1067 to i64
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 3
  store i64 %1070, i64* %PC
  %1071 = inttoptr i64 %1066 to i32*
  store i32 %1067, i32* %1071
  %1072 = load i64, i64* %PC
  %1073 = add i64 %1072, 96
  %1074 = load i64, i64* %PC
  %1075 = add i64 %1074, 5
  store i64 %1075, i64* %PC
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1073, i64* %1076, align 8, !tbaa !2428
  br label %block_40277e

block_40274f:                                     ; preds = %block_402653
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 5
  %1079 = load i64, i64* %PC
  %1080 = add i64 %1079, 5
  store i64 %1080, i64* %PC
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1078, i64* %1081, align 8, !tbaa !2428
  br label %block_402754

block_402684:                                     ; preds = %block_40265e, %block_40266c
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.3, %block_40265e ], [ %465, %block_40266c ]
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 10
  store i64 %1083, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 668), i64* %RSI, align 8, !tbaa !2428
  %1084 = load i64, i64* %RAX
  %1085 = load i32, i32* %EAX
  %1086 = zext i32 %1085 to i64
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 2
  store i64 %1088, i64* %PC
  %1089 = xor i64 %1086, %1084
  %1090 = trunc i64 %1089 to i32
  %1091 = and i64 %1089, 4294967295
  store i64 %1091, i64* %RAX, align 8, !tbaa !2428
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1092, align 1, !tbaa !2432
  %1093 = and i32 %1090, 255
  %1094 = call i32 @llvm.ctpop.i32(i32 %1093) #16
  %1095 = trunc i32 %1094 to i8
  %1096 = and i8 %1095, 1
  %1097 = xor i8 %1096, 1
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1097, i8* %1098, align 1, !tbaa !2446
  %1099 = icmp eq i32 %1090, 0
  %1100 = zext i1 %1099 to i8
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1100, i8* %1101, align 1, !tbaa !2448
  %1102 = lshr i32 %1090, 31
  %1103 = trunc i32 %1102 to i8
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1103, i8* %1104, align 1, !tbaa !2449
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1105, align 1, !tbaa !2450
  %1106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1106, align 1, !tbaa !2447
  %1107 = load i64, i64* %RBP
  %1108 = sub i64 %1107, 32
  %1109 = load i64, i64* %PC
  %1110 = add i64 %1109, 4
  store i64 %1110, i64* %PC
  %1111 = inttoptr i64 %1108 to i64*
  %1112 = load i64, i64* %1111
  store i64 %1112, i64* %RDI, align 8, !tbaa !2428
  %1113 = load i64, i64* %RBP
  %1114 = sub i64 %1113, 48
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 4
  store i64 %1116, i64* %PC
  %1117 = inttoptr i64 %1114 to i64*
  %1118 = load i64, i64* %1117
  store i64 %1118, i64* %RCX, align 8, !tbaa !2428
  %1119 = load i64, i64* %RCX
  %1120 = add i64 %1119, 16
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 4
  store i64 %1122, i64* %PC
  %1123 = inttoptr i64 %1120 to i64*
  %1124 = load i64, i64* %1123
  store i64 %1124, i64* %RCX, align 8, !tbaa !2428
  %1125 = load i64, i64* %RAX
  %1126 = load i64, i64* %RCX
  %1127 = add i64 %1126, 96
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 3
  store i64 %1129, i64* %PC
  %1130 = trunc i64 %1125 to i32
  %1131 = inttoptr i64 %1127 to i32*
  %1132 = load i32, i32* %1131
  %1133 = sub i32 %1130, %1132
  %1134 = zext i32 %1133 to i64
  store i64 %1134, i64* %RAX, align 8, !tbaa !2428
  %1135 = icmp ult i32 %1130, %1132
  %1136 = zext i1 %1135 to i8
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1136, i8* %1137, align 1, !tbaa !2432
  %1138 = and i32 %1133, 255
  %1139 = call i32 @llvm.ctpop.i32(i32 %1138) #16
  %1140 = trunc i32 %1139 to i8
  %1141 = and i8 %1140, 1
  %1142 = xor i8 %1141, 1
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1142, i8* %1143, align 1, !tbaa !2446
  %1144 = xor i32 %1132, %1130
  %1145 = xor i32 %1144, %1133
  %1146 = lshr i32 %1145, 4
  %1147 = trunc i32 %1146 to i8
  %1148 = and i8 %1147, 1
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1148, i8* %1149, align 1, !tbaa !2447
  %1150 = icmp eq i32 %1133, 0
  %1151 = zext i1 %1150 to i8
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1151, i8* %1152, align 1, !tbaa !2448
  %1153 = lshr i32 %1133, 31
  %1154 = trunc i32 %1153 to i8
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1154, i8* %1155, align 1, !tbaa !2449
  %1156 = lshr i32 %1130, 31
  %1157 = lshr i32 %1132, 31
  %1158 = xor i32 %1157, %1156
  %1159 = xor i32 %1153, %1156
  %1160 = add nuw nsw i32 %1159, %1158
  %1161 = icmp eq i32 %1160, 2
  %1162 = zext i1 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1162, i8* %1163, align 1, !tbaa !2450
  %1164 = load i32, i32* %EAX
  %1165 = zext i32 %1164 to i64
  %1166 = load i64, i64* %PC
  %1167 = add i64 %1166, 2
  store i64 %1167, i64* %PC
  %1168 = and i64 %1165, 4294967295
  store i64 %1168, i64* %RDX, align 8, !tbaa !2428
  %1169 = load i64, i64* %PC
  %1170 = add i64 %1169, 2
  store i64 %1170, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %1171 = load i64, i64* %PC
  %1172 = sub i64 %1171, 7699
  %1173 = load i64, i64* %PC
  %1174 = add i64 %1173, 5
  %1175 = load i64, i64* %PC
  %1176 = add i64 %1175, 5
  store i64 %1176, i64* %PC
  %1177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1178 = load i64, i64* %1177, align 8, !tbaa !2428
  %1179 = add i64 %1178, -8
  %1180 = inttoptr i64 %1179 to i64*
  store i64 %1174, i64* %1180
  store i64 %1179, i64* %1177, align 8, !tbaa !2428
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1172, i64* %1181, align 8, !tbaa !2428
  %1182 = load i64, i64* %PC
  %1183 = call %struct.Memory* @ext_608ff8_fprintf(%struct.State* %0, i64 %1182, %struct.Memory* %MEMORY.7)
  %1184 = load i64, i64* %RBP
  %1185 = sub i64 %1184, 48
  %1186 = load i64, i64* %PC
  %1187 = add i64 %1186, 4
  store i64 %1187, i64* %PC
  %1188 = inttoptr i64 %1185 to i64*
  %1189 = load i64, i64* %1188
  store i64 %1189, i64* %RCX, align 8, !tbaa !2428
  %1190 = load i64, i64* %RCX
  %1191 = add i64 %1190, 16
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 4
  store i64 %1193, i64* %PC
  %1194 = inttoptr i64 %1191 to i64*
  %1195 = load i64, i64* %1194
  store i64 %1195, i64* %RCX, align 8, !tbaa !2428
  %1196 = load i64, i64* %RBP
  %1197 = sub i64 %1196, 24
  %1198 = load i64, i64* %PC
  %1199 = add i64 %1198, 4
  store i64 %1199, i64* %PC
  %1200 = inttoptr i64 %1197 to i64*
  %1201 = load i64, i64* %1200
  store i64 %1201, i64* %RSI, align 8, !tbaa !2428
  %1202 = load i64, i64* %RSI
  %1203 = add i64 %1202, 408
  %1204 = load i64, i64* %PC
  %1205 = add i64 %1204, 8
  store i64 %1205, i64* %PC
  %1206 = inttoptr i64 %1203 to i64*
  %1207 = load i64, i64* %1206
  %1208 = sext i64 %1207 to i128
  %1209 = and i128 %1208, -18446744073709551616
  %1210 = zext i64 %1207 to i128
  %1211 = or i128 %1209, %1210
  %1212 = mul nsw i128 %1211, 104
  %1213 = trunc i128 %1212 to i64
  store i64 %1213, i64* %RSI, align 8, !tbaa !2428
  %1214 = sext i64 %1213 to i128
  %1215 = icmp ne i128 %1214, %1212
  %1216 = zext i1 %1215 to i8
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1216, i8* %1217, align 1, !tbaa !2432
  %1218 = trunc i128 %1212 to i32
  %1219 = and i32 %1218, 255
  %1220 = call i32 @llvm.ctpop.i32(i32 %1219) #16
  %1221 = trunc i32 %1220 to i8
  %1222 = and i8 %1221, 1
  %1223 = xor i8 %1222, 1
  %1224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1223, i8* %1224, align 1, !tbaa !2446
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1225, align 1, !tbaa !2447
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1226, align 1, !tbaa !2448
  %1227 = lshr i64 %1213, 63
  %1228 = trunc i64 %1227 to i8
  %1229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1228, i8* %1229, align 1, !tbaa !2449
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1216, i8* %1230, align 1, !tbaa !2450
  %1231 = load i64, i64* %RCX
  %1232 = load i64, i64* %RSI
  %1233 = load i64, i64* %PC
  %1234 = add i64 %1233, 3
  store i64 %1234, i64* %PC
  %1235 = add i64 %1232, %1231
  store i64 %1235, i64* %RCX, align 8, !tbaa !2428
  %1236 = icmp ult i64 %1235, %1231
  %1237 = icmp ult i64 %1235, %1232
  %1238 = or i1 %1236, %1237
  %1239 = zext i1 %1238 to i8
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1239, i8* %1240, align 1, !tbaa !2432
  %1241 = trunc i64 %1235 to i32
  %1242 = and i32 %1241, 255
  %1243 = call i32 @llvm.ctpop.i32(i32 %1242) #16
  %1244 = trunc i32 %1243 to i8
  %1245 = and i8 %1244, 1
  %1246 = xor i8 %1245, 1
  %1247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1246, i8* %1247, align 1, !tbaa !2446
  %1248 = xor i64 %1232, %1231
  %1249 = xor i64 %1248, %1235
  %1250 = lshr i64 %1249, 4
  %1251 = trunc i64 %1250 to i8
  %1252 = and i8 %1251, 1
  %1253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1252, i8* %1253, align 1, !tbaa !2447
  %1254 = icmp eq i64 %1235, 0
  %1255 = zext i1 %1254 to i8
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1255, i8* %1256, align 1, !tbaa !2448
  %1257 = lshr i64 %1235, 63
  %1258 = trunc i64 %1257 to i8
  %1259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1258, i8* %1259, align 1, !tbaa !2449
  %1260 = lshr i64 %1231, 63
  %1261 = lshr i64 %1232, 63
  %1262 = xor i64 %1257, %1260
  %1263 = xor i64 %1257, %1261
  %1264 = add nuw nsw i64 %1262, %1263
  %1265 = icmp eq i64 %1264, 2
  %1266 = zext i1 %1265 to i8
  %1267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1266, i8* %1267, align 1, !tbaa !2450
  %1268 = load i64, i64* %RCX
  %1269 = add i64 %1268, 56
  %1270 = load i64, i64* %PC
  %1271 = add i64 %1270, 4
  store i64 %1271, i64* %PC
  %1272 = inttoptr i64 %1269 to i64*
  %1273 = load i64, i64* %1272
  store i64 %1273, i64* %RCX, align 8, !tbaa !2428
  %1274 = load i64, i64* %RBP
  %1275 = sub i64 %1274, 56
  %1276 = load i64, i64* %RCX
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 4
  store i64 %1278, i64* %PC
  %1279 = inttoptr i64 %1275 to i64*
  store i64 %1276, i64* %1279
  %1280 = load i64, i64* %RBP
  %1281 = sub i64 %1280, 76
  %1282 = load i32, i32* %EAX
  %1283 = zext i32 %1282 to i64
  %1284 = load i64, i64* %PC
  %1285 = add i64 %1284, 3
  store i64 %1285, i64* %PC
  %1286 = inttoptr i64 %1281 to i32*
  store i32 %1282, i32* %1286
  br label %block_4026ca
}

; Function Attrs: noinline
define %struct.Memory* @sub_400e50_replace_weaker_arc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400e50:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 9
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %17 = bitcast %union.anon* %16 to %struct.anon.2*
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %17, i32 0, i32 0
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %EAX = bitcast %union.anon* %20 to i32*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 21
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %R10D = bitcast %union.anon* %23 to i32*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RAX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 5
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RCX = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 7
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDX = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 9
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSI = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 11
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RDI = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 13
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %RSP = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 15
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %RBP = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 17
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R8 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 19
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R9 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %RBP
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 1
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %RSP
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 3
  store i64 %60, i64* %PC
  store i64 %58, i64* %RBP, align 8, !tbaa !2428
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 5
  store i64 %62, i64* %PC
  store i64 3, i64* %RAX, align 8, !tbaa !2428
  %63 = bitcast i32* %R10D to i64*
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 6
  store i64 %65, i64* %PC
  store i64 2, i64* %63, align 8, !tbaa !2428
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 8
  %68 = load i64, i64* %RDI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 16
  %74 = load i64, i64* %RSI
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %73 to i64*
  store i64 %74, i64* %77
  %78 = load i64, i64* %RBP
  %79 = sub i64 %78, 24
  %80 = load i64, i64* %RDX
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %79 to i64*
  store i64 %80, i64* %83
  %84 = load i64, i64* %RBP
  %85 = sub i64 %84, 32
  %86 = load i64, i64* %RCX
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 4
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %85 to i64*
  store i64 %86, i64* %89
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 40
  %92 = load i64, i64* %R8
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %91 to i64*
  store i64 %92, i64* %95
  %96 = load i64, i64* %RBP
  %97 = sub i64 %96, 48
  %98 = load i64, i64* %R9
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = inttoptr i64 %97 to i64*
  store i64 %98, i64* %101
  %102 = load i64, i64* %RBP
  %103 = sub i64 %102, 24
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC
  %106 = inttoptr i64 %103 to i64*
  %107 = load i64, i64* %106
  store i64 %107, i64* %RCX, align 8, !tbaa !2428
  %108 = load i64, i64* %RBP
  %109 = sub i64 %108, 16
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112
  store i64 %113, i64* %RDX, align 8, !tbaa !2428
  %114 = load i64, i64* %RDX
  %115 = add i64 %114, 8
  %116 = load i64, i64* %RCX
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 32
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i64*
  %125 = load i64, i64* %124
  store i64 %125, i64* %RCX, align 8, !tbaa !2428
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 16
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 4
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i64*
  %131 = load i64, i64* %130
  store i64 %131, i64* %RDX, align 8, !tbaa !2428
  %132 = load i64, i64* %RDX
  %133 = add i64 %132, 16
  %134 = load i64, i64* %RCX
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 4
  store i64 %136, i64* %PC
  %137 = inttoptr i64 %133 to i64*
  store i64 %134, i64* %137
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 40
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %RCX, align 8, !tbaa !2428
  %144 = load i64, i64* %RBP
  %145 = sub i64 %144, 16
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 4
  store i64 %147, i64* %PC
  %148 = inttoptr i64 %145 to i64*
  %149 = load i64, i64* %148
  store i64 %149, i64* %RDX, align 8, !tbaa !2428
  %150 = load i64, i64* %RDX
  %151 = add i64 %150, 56
  %152 = load i64, i64* %RCX
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %151 to i64*
  store i64 %152, i64* %155
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 40
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 4
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i64*
  %161 = load i64, i64* %160
  store i64 %161, i64* %RCX, align 8, !tbaa !2428
  %162 = load i64, i64* %RBP
  %163 = sub i64 %162, 16
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166
  store i64 %167, i64* %RDX, align 8, !tbaa !2428
  %168 = load i64, i64* %RDX
  %169 = load i64, i64* %RCX
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 3
  store i64 %171, i64* %PC
  %172 = inttoptr i64 %168 to i64*
  store i64 %169, i64* %172
  %173 = load i64, i64* %RBP
  %174 = sub i64 %173, 48
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i64*
  %178 = load i64, i64* %177
  store i64 %178, i64* %RCX, align 8, !tbaa !2428
  %179 = load i64, i64* %RBP
  %180 = sub i64 %179, 16
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183
  store i64 %184, i64* %RDX, align 8, !tbaa !2428
  %185 = load i64, i64* %RDX
  %186 = add i64 %185, 48
  %187 = load i64, i64* %RCX
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 4
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %186 to i64*
  store i64 %187, i64* %190
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 56
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 8
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to i64*
  store i64 1, i64* %195
  %196 = load i64, i64* %RBP
  %197 = sub i64 %196, 16
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %197 to i64*
  %201 = load i64, i64* %200
  store i64 %201, i64* %RCX, align 8, !tbaa !2428
  %202 = load i64, i64* %RCX
  %203 = add i64 %202, 112
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i64*
  %207 = load i64, i64* %206
  store i64 %207, i64* %RCX, align 8, !tbaa !2428
  %208 = load i64, i64* %RBP
  %209 = sub i64 %208, 16
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 4
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %RDX, align 8, !tbaa !2428
  %214 = load i64, i64* %RCX
  %215 = load i64, i64* %RDX
  %216 = add i64 %215, 176
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 7
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i64*
  %220 = load i64, i64* %219
  %221 = sub i64 %214, %220
  %222 = icmp ugt i64 %220, %214
  %223 = zext i1 %222 to i8
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %223, i8* %224, align 1, !tbaa !2432
  %225 = trunc i64 %221 to i32
  %226 = and i32 %225, 255
  %227 = call i32 @llvm.ctpop.i32(i32 %226) #16
  %228 = trunc i32 %227 to i8
  %229 = and i8 %228, 1
  %230 = xor i8 %229, 1
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %230, i8* %231, align 1, !tbaa !2446
  %232 = xor i64 %220, %214
  %233 = xor i64 %232, %221
  %234 = lshr i64 %233, 4
  %235 = trunc i64 %234 to i8
  %236 = and i8 %235, 1
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %236, i8* %237, align 1, !tbaa !2447
  %238 = icmp eq i64 %221, 0
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %239, i8* %240, align 1, !tbaa !2448
  %241 = lshr i64 %221, 63
  %242 = trunc i64 %241 to i8
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %242, i8* %243, align 1, !tbaa !2449
  %244 = lshr i64 %214, 63
  %245 = lshr i64 %220, 63
  %246 = xor i64 %245, %244
  %247 = xor i64 %241, %244
  %248 = add nuw nsw i64 %247, %246
  %249 = icmp eq i64 %248, 2
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %250, i8* %251, align 1, !tbaa !2450
  %252 = load i32, i32* %R10D
  %253 = zext i32 %252 to i64
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 4
  store i64 %255, i64* %PC
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %257 = load i8, i8* %256, align 1, !tbaa !2448
  %258 = icmp eq i8 %257, 0
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %260 = load i8, i8* %259, align 1, !tbaa !2449
  %261 = icmp ne i8 %260, 0
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %263 = load i8, i8* %262, align 1, !tbaa !2450
  %264 = icmp ne i8 %263, 0
  %265 = xor i1 %261, %264
  %266 = xor i1 %265, true
  %267 = and i1 %258, %266
  %268 = load i64, i64* %RAX, align 8, !tbaa !2428
  %269 = select i1 %267, i64 %253, i64 %268
  %270 = and i64 %269, 4294967295
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = load i32, i32* %EAX
  %272 = zext i32 %271 to i64
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 3
  store i64 %274, i64* %PC
  %275 = shl i64 %272, 32
  %276 = ashr exact i64 %275, 32
  store i64 %276, i64* %RCX, align 8, !tbaa !2428
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 64
  %279 = load i64, i64* %RCX
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 4
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %278 to i64*
  store i64 %279, i64* %282
  br label %block_400ed8

block_4010fe:                                     ; preds = %block_400f27, %block_4010f9
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_400f27 ], [ %MEMORY.1, %block_4010f9 ]
  %283 = load i64, i64* %PC
  %284 = sub i64 %283, 550
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 5
  store i64 %286, i64* %PC
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %284, i64* %287, align 8, !tbaa !2428
  br label %block_400ed8

block_4010bd:                                     ; preds = %block_400f27
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 16
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 4
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RAX, align 8, !tbaa !2428
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 64
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = load i64, i64* %RCX
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC
  %303 = sub i64 %300, 1
  store i64 %303, i64* %RCX, align 8, !tbaa !2428
  %304 = icmp ult i64 %300, 1
  %305 = zext i1 %304 to i8
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %305, i8* %306, align 1, !tbaa !2432
  %307 = trunc i64 %303 to i32
  %308 = and i32 %307, 255
  %309 = call i32 @llvm.ctpop.i32(i32 %308) #16
  %310 = trunc i32 %309 to i8
  %311 = and i8 %310, 1
  %312 = xor i8 %311, 1
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %312, i8* %313, align 1, !tbaa !2446
  %314 = xor i64 1, %300
  %315 = xor i64 %314, %303
  %316 = lshr i64 %315, 4
  %317 = trunc i64 %316 to i8
  %318 = and i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %318, i8* %319, align 1, !tbaa !2447
  %320 = icmp eq i64 %303, 0
  %321 = zext i1 %320 to i8
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %321, i8* %322, align 1, !tbaa !2448
  %323 = lshr i64 %303, 63
  %324 = trunc i64 %323 to i8
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %324, i8* %325, align 1, !tbaa !2449
  %326 = lshr i64 %300, 63
  %327 = xor i64 %323, %326
  %328 = add nuw nsw i64 %327, %326
  %329 = icmp eq i64 %328, 2
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %330, i8* %331, align 1, !tbaa !2450
  %332 = load i64, i64* %RCX
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 4
  store i64 %334, i64* %PC
  %335 = shl i64 %332, 5
  %336 = icmp slt i64 %335, 0
  %337 = shl i64 %335, 1
  store i64 %337, i64* %RCX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %339 = zext i1 %336 to i8
  store i8 %339, i8* %338, align 1, !tbaa !2451
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %341 = trunc i64 %337 to i32
  %342 = and i32 %341, 254
  %343 = call i32 @llvm.ctpop.i32(i32 %342) #16
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  store i8 %346, i8* %340, align 1, !tbaa !2451
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %347, align 1, !tbaa !2451
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %349 = icmp eq i64 %337, 0
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %348, align 1, !tbaa !2451
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %352 = lshr i64 %337, 63
  %353 = trunc i64 %352 to i8
  store i8 %353, i8* %351, align 1, !tbaa !2451
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %354, align 1, !tbaa !2451
  %355 = load i64, i64* %RAX
  %356 = load i64, i64* %RCX
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 3
  store i64 %358, i64* %PC
  %359 = add i64 %356, %355
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = icmp ult i64 %359, %355
  %361 = icmp ult i64 %359, %356
  %362 = or i1 %360, %361
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %363, i8* %364, align 1, !tbaa !2432
  %365 = trunc i64 %359 to i32
  %366 = and i32 %365, 255
  %367 = call i32 @llvm.ctpop.i32(i32 %366) #16
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = xor i8 %369, 1
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %370, i8* %371, align 1, !tbaa !2446
  %372 = xor i64 %356, %355
  %373 = xor i64 %372, %359
  %374 = lshr i64 %373, 4
  %375 = trunc i64 %374 to i8
  %376 = and i8 %375, 1
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %376, i8* %377, align 1, !tbaa !2447
  %378 = icmp eq i64 %359, 0
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %379, i8* %380, align 1, !tbaa !2448
  %381 = lshr i64 %359, 63
  %382 = trunc i64 %381 to i8
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %382, i8* %383, align 1, !tbaa !2449
  %384 = lshr i64 %355, 63
  %385 = lshr i64 %356, 63
  %386 = xor i64 %381, %384
  %387 = xor i64 %381, %385
  %388 = add nuw nsw i64 %386, %387
  %389 = icmp eq i64 %388, 2
  %390 = zext i1 %389 to i8
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %390, i8* %391, align 1, !tbaa !2450
  %392 = load i64, i64* %RAX
  %393 = add i64 %392, 48
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %393 to i64*
  %397 = load i64, i64* %396
  store i64 %397, i64* %RAX, align 8, !tbaa !2428
  %398 = load i64, i64* %RBP
  %399 = sub i64 %398, 16
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 4
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %399 to i64*
  %403 = load i64, i64* %402
  store i64 %403, i64* %RCX, align 8, !tbaa !2428
  %404 = load i64, i64* %RBP
  %405 = sub i64 %404, 64
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 4
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RDX, align 8, !tbaa !2428
  %410 = load i64, i64* %RDX
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 4
  store i64 %412, i64* %PC
  %413 = shl i64 %410, 5
  %414 = icmp slt i64 %413, 0
  %415 = shl i64 %413, 1
  store i64 %415, i64* %RDX, align 8, !tbaa !2428
  %416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %417 = zext i1 %414 to i8
  store i8 %417, i8* %416, align 1, !tbaa !2451
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %419 = trunc i64 %415 to i32
  %420 = and i32 %419, 254
  %421 = call i32 @llvm.ctpop.i32(i32 %420) #16
  %422 = trunc i32 %421 to i8
  %423 = and i8 %422, 1
  %424 = xor i8 %423, 1
  store i8 %424, i8* %418, align 1, !tbaa !2451
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %425, align 1, !tbaa !2451
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %427 = icmp eq i64 %415, 0
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %426, align 1, !tbaa !2451
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %430 = lshr i64 %415, 63
  %431 = trunc i64 %430 to i8
  store i8 %431, i8* %429, align 1, !tbaa !2451
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %432, align 1, !tbaa !2451
  %433 = load i64, i64* %RCX
  %434 = load i64, i64* %RDX
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 3
  store i64 %436, i64* %PC
  %437 = add i64 %434, %433
  store i64 %437, i64* %RCX, align 8, !tbaa !2428
  %438 = icmp ult i64 %437, %433
  %439 = icmp ult i64 %437, %434
  %440 = or i1 %438, %439
  %441 = zext i1 %440 to i8
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %441, i8* %442, align 1, !tbaa !2432
  %443 = trunc i64 %437 to i32
  %444 = and i32 %443, 255
  %445 = call i32 @llvm.ctpop.i32(i32 %444) #16
  %446 = trunc i32 %445 to i8
  %447 = and i8 %446, 1
  %448 = xor i8 %447, 1
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %448, i8* %449, align 1, !tbaa !2446
  %450 = xor i64 %434, %433
  %451 = xor i64 %450, %437
  %452 = lshr i64 %451, 4
  %453 = trunc i64 %452 to i8
  %454 = and i8 %453, 1
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %454, i8* %455, align 1, !tbaa !2447
  %456 = icmp eq i64 %437, 0
  %457 = zext i1 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %457, i8* %458, align 1, !tbaa !2448
  %459 = lshr i64 %437, 63
  %460 = trunc i64 %459 to i8
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %460, i8* %461, align 1, !tbaa !2449
  %462 = lshr i64 %433, 63
  %463 = lshr i64 %434, 63
  %464 = xor i64 %459, %462
  %465 = xor i64 %459, %463
  %466 = add nuw nsw i64 %464, %465
  %467 = icmp eq i64 %466, 2
  %468 = zext i1 %467 to i8
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %468, i8* %469, align 1, !tbaa !2450
  %470 = load i64, i64* %RAX
  %471 = load i64, i64* %RCX
  %472 = add i64 %471, 48
  %473 = load i64, i64* %PC
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC
  %475 = inttoptr i64 %472 to i64*
  %476 = load i64, i64* %475
  %477 = sub i64 %470, %476
  %478 = icmp ugt i64 %476, %470
  %479 = zext i1 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %479, i8* %480, align 1, !tbaa !2432
  %481 = trunc i64 %477 to i32
  %482 = and i32 %481, 255
  %483 = call i32 @llvm.ctpop.i32(i32 %482) #16
  %484 = trunc i32 %483 to i8
  %485 = and i8 %484, 1
  %486 = xor i8 %485, 1
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %486, i8* %487, align 1, !tbaa !2446
  %488 = xor i64 %476, %470
  %489 = xor i64 %488, %477
  %490 = lshr i64 %489, 4
  %491 = trunc i64 %490 to i8
  %492 = and i8 %491, 1
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %492, i8* %493, align 1, !tbaa !2447
  %494 = icmp eq i64 %477, 0
  %495 = zext i1 %494 to i8
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %495, i8* %496, align 1, !tbaa !2448
  %497 = lshr i64 %477, 63
  %498 = trunc i64 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %498, i8* %499, align 1, !tbaa !2449
  %500 = lshr i64 %470, 63
  %501 = lshr i64 %476, 63
  %502 = xor i64 %501, %500
  %503 = xor i64 %497, %500
  %504 = add nuw nsw i64 %503, %502
  %505 = icmp eq i64 %504, 2
  %506 = zext i1 %505 to i8
  %507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %506, i8* %507, align 1, !tbaa !2450
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 18
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 6
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 6
  store i64 %513, i64* %PC
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %515 = load i8, i8* %514, align 1, !tbaa !2449
  %516 = icmp ne i8 %515, 0
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %518 = load i8, i8* %517, align 1, !tbaa !2450
  %519 = icmp ne i8 %518, 0
  %520 = xor i1 %516, %519
  %521 = xor i1 %520, true
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %524 = select i1 %520, i64 %511, i64 %509
  store i64 %524, i64* %523, align 8, !tbaa !2428
  %525 = load i8, i8* %BRANCH_TAKEN
  %526 = icmp eq i8 %525, 1
  br i1 %526, label %block_4010f9, label %block_4010ed

block_4010f9:                                     ; preds = %block_4010ed, %block_4010bd
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4010bd ], [ %MEMORY.3, %block_4010ed ]
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 5
  store i64 %530, i64* %PC
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %528, i64* %531, align 8, !tbaa !2428
  br label %block_4010fe

block_400ef4:                                     ; preds = %block_400ed8
  %532 = load i64, i64* %RBP
  %533 = sub i64 %532, 48
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 4
  store i64 %535, i64* %PC
  %536 = inttoptr i64 %533 to i64*
  %537 = load i64, i64* %536
  store i64 %537, i64* %RAX, align 8, !tbaa !2428
  %538 = load i64, i64* %RBP
  %539 = sub i64 %538, 16
  %540 = load i64, i64* %PC
  %541 = add i64 %540, 4
  store i64 %541, i64* %PC
  %542 = inttoptr i64 %539 to i64*
  %543 = load i64, i64* %542
  store i64 %543, i64* %RCX, align 8, !tbaa !2428
  %544 = load i64, i64* %RBP
  %545 = sub i64 %544, 64
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = inttoptr i64 %545 to i64*
  %549 = load i64, i64* %548
  store i64 %549, i64* %RDX, align 8, !tbaa !2428
  %550 = load i64, i64* %RDX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC
  %553 = sub i64 %550, 1
  store i64 %553, i64* %RDX, align 8, !tbaa !2428
  %554 = icmp ult i64 %550, 1
  %555 = zext i1 %554 to i8
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %555, i8* %556, align 1, !tbaa !2432
  %557 = trunc i64 %553 to i32
  %558 = and i32 %557, 255
  %559 = call i32 @llvm.ctpop.i32(i32 %558) #16
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  %562 = xor i8 %561, 1
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %562, i8* %563, align 1, !tbaa !2446
  %564 = xor i64 1, %550
  %565 = xor i64 %564, %553
  %566 = lshr i64 %565, 4
  %567 = trunc i64 %566 to i8
  %568 = and i8 %567, 1
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %568, i8* %569, align 1, !tbaa !2447
  %570 = icmp eq i64 %553, 0
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %571, i8* %572, align 1, !tbaa !2448
  %573 = lshr i64 %553, 63
  %574 = trunc i64 %573 to i8
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %574, i8* %575, align 1, !tbaa !2449
  %576 = lshr i64 %550, 63
  %577 = xor i64 %573, %576
  %578 = add nuw nsw i64 %577, %576
  %579 = icmp eq i64 %578, 2
  %580 = zext i1 %579 to i8
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %580, i8* %581, align 1, !tbaa !2450
  %582 = load i64, i64* %RDX
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 4
  store i64 %584, i64* %PC
  %585 = shl i64 %582, 5
  %586 = icmp slt i64 %585, 0
  %587 = shl i64 %585, 1
  store i64 %587, i64* %RDX, align 8, !tbaa !2428
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %589 = zext i1 %586 to i8
  store i8 %589, i8* %588, align 1, !tbaa !2451
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %591 = trunc i64 %587 to i32
  %592 = and i32 %591, 254
  %593 = call i32 @llvm.ctpop.i32(i32 %592) #16
  %594 = trunc i32 %593 to i8
  %595 = and i8 %594, 1
  %596 = xor i8 %595, 1
  store i8 %596, i8* %590, align 1, !tbaa !2451
  %597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %597, align 1, !tbaa !2451
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %599 = icmp eq i64 %587, 0
  %600 = zext i1 %599 to i8
  store i8 %600, i8* %598, align 1, !tbaa !2451
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %602 = lshr i64 %587, 63
  %603 = trunc i64 %602 to i8
  store i8 %603, i8* %601, align 1, !tbaa !2451
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %604, align 1, !tbaa !2451
  %605 = load i64, i64* %RCX
  %606 = load i64, i64* %RDX
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 3
  store i64 %608, i64* %PC
  %609 = add i64 %606, %605
  store i64 %609, i64* %RCX, align 8, !tbaa !2428
  %610 = icmp ult i64 %609, %605
  %611 = icmp ult i64 %609, %606
  %612 = or i1 %610, %611
  %613 = zext i1 %612 to i8
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %613, i8* %614, align 1, !tbaa !2432
  %615 = trunc i64 %609 to i32
  %616 = and i32 %615, 255
  %617 = call i32 @llvm.ctpop.i32(i32 %616) #16
  %618 = trunc i32 %617 to i8
  %619 = and i8 %618, 1
  %620 = xor i8 %619, 1
  %621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %620, i8* %621, align 1, !tbaa !2446
  %622 = xor i64 %606, %605
  %623 = xor i64 %622, %609
  %624 = lshr i64 %623, 4
  %625 = trunc i64 %624 to i8
  %626 = and i8 %625, 1
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %626, i8* %627, align 1, !tbaa !2447
  %628 = icmp eq i64 %609, 0
  %629 = zext i1 %628 to i8
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %629, i8* %630, align 1, !tbaa !2448
  %631 = lshr i64 %609, 63
  %632 = trunc i64 %631 to i8
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %632, i8* %633, align 1, !tbaa !2449
  %634 = lshr i64 %605, 63
  %635 = lshr i64 %606, 63
  %636 = xor i64 %631, %634
  %637 = xor i64 %631, %635
  %638 = add nuw nsw i64 %636, %637
  %639 = icmp eq i64 %638, 2
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %640, i8* %641, align 1, !tbaa !2450
  %642 = load i64, i64* %RAX
  %643 = load i64, i64* %RCX
  %644 = add i64 %643, 48
  %645 = load i64, i64* %PC
  %646 = add i64 %645, 4
  store i64 %646, i64* %PC
  %647 = inttoptr i64 %644 to i64*
  %648 = load i64, i64* %647
  %649 = sub i64 %642, %648
  %650 = icmp ugt i64 %648, %642
  %651 = zext i1 %650 to i8
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %651, i8* %652, align 1, !tbaa !2432
  %653 = trunc i64 %649 to i32
  %654 = and i32 %653, 255
  %655 = call i32 @llvm.ctpop.i32(i32 %654) #16
  %656 = trunc i32 %655 to i8
  %657 = and i8 %656, 1
  %658 = xor i8 %657, 1
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %658, i8* %659, align 1, !tbaa !2446
  %660 = xor i64 %648, %642
  %661 = xor i64 %660, %649
  %662 = lshr i64 %661, 4
  %663 = trunc i64 %662 to i8
  %664 = and i8 %663, 1
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %664, i8* %665, align 1, !tbaa !2447
  %666 = icmp eq i64 %649, 0
  %667 = zext i1 %666 to i8
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %667, i8* %668, align 1, !tbaa !2448
  %669 = lshr i64 %649, 63
  %670 = trunc i64 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %670, i8* %671, align 1, !tbaa !2449
  %672 = lshr i64 %642, 63
  %673 = lshr i64 %648, 63
  %674 = xor i64 %673, %672
  %675 = xor i64 %669, %672
  %676 = add nuw nsw i64 %675, %674
  %677 = icmp eq i64 %676, 2
  %678 = zext i1 %677 to i8
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %678, i8* %679, align 1, !tbaa !2450
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 4
  store i64 %681, i64* %PC
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %683 = load i8, i8* %682, align 1, !tbaa !2449
  %684 = icmp ne i8 %683, 0
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %686 = load i8, i8* %685, align 1, !tbaa !2450
  %687 = icmp ne i8 %686, 0
  %688 = xor i1 %684, %687
  %689 = zext i1 %688 to i8
  store i8 %689, i8* %SIL, align 1, !tbaa !2451
  %690 = load i64, i64* %RBP
  %691 = sub i64 %690, 65
  %692 = load i8, i8* %SIL
  %693 = zext i8 %692 to i64
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 4
  store i64 %695, i64* %PC
  %696 = inttoptr i64 %691 to i8*
  store i8 %692, i8* %696
  br label %block_400f17

block_400ed8:                                     ; preds = %block_4010fe, %block_400e50
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400e50 ], [ %MEMORY.0, %block_4010fe ]
  %697 = load i64, i64* %RAX
  %698 = load i32, i32* %EAX
  %699 = zext i32 %698 to i64
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 2
  store i64 %701, i64* %PC
  %702 = xor i64 %699, %697
  %703 = trunc i64 %702 to i32
  %704 = and i64 %702, 4294967295
  store i64 %704, i64* %RAX, align 8, !tbaa !2428
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %705, align 1, !tbaa !2432
  %706 = and i32 %703, 255
  %707 = call i32 @llvm.ctpop.i32(i32 %706) #16
  %708 = trunc i32 %707 to i8
  %709 = and i8 %708, 1
  %710 = xor i8 %709, 1
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %710, i8* %711, align 1, !tbaa !2446
  %712 = icmp eq i32 %703, 0
  %713 = zext i1 %712 to i8
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %713, i8* %714, align 1, !tbaa !2448
  %715 = lshr i32 %703, 31
  %716 = trunc i32 %715 to i8
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %716, i8* %717, align 1, !tbaa !2449
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %718, align 1, !tbaa !2450
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %719, align 1, !tbaa !2447
  %720 = load i8, i8* %AL
  %721 = zext i8 %720 to i64
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 2
  store i64 %723, i64* %PC
  store i8 %720, i8* %CL, align 1, !tbaa !2451
  %724 = load i64, i64* %RBP
  %725 = sub i64 %724, 64
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 4
  store i64 %727, i64* %PC
  %728 = inttoptr i64 %725 to i64*
  %729 = load i64, i64* %728
  store i64 %729, i64* %RDX, align 8, !tbaa !2428
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 8
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 4
  store i64 %733, i64* %PC
  %734 = inttoptr i64 %731 to i64*
  %735 = load i64, i64* %734
  store i64 %735, i64* %RSI, align 8, !tbaa !2428
  %736 = load i64, i64* %RDX
  %737 = load i64, i64* %RSI
  %738 = add i64 %737, 448
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 7
  store i64 %740, i64* %PC
  %741 = inttoptr i64 %738 to i64*
  %742 = load i64, i64* %741
  %743 = sub i64 %736, %742
  %744 = icmp ugt i64 %742, %736
  %745 = zext i1 %744 to i8
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %745, i8* %746, align 1, !tbaa !2432
  %747 = trunc i64 %743 to i32
  %748 = and i32 %747, 255
  %749 = call i32 @llvm.ctpop.i32(i32 %748) #16
  %750 = trunc i32 %749 to i8
  %751 = and i8 %750, 1
  %752 = xor i8 %751, 1
  %753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %752, i8* %753, align 1, !tbaa !2446
  %754 = xor i64 %742, %736
  %755 = xor i64 %754, %743
  %756 = lshr i64 %755, 4
  %757 = trunc i64 %756 to i8
  %758 = and i8 %757, 1
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %758, i8* %759, align 1, !tbaa !2447
  %760 = icmp eq i64 %743, 0
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %761, i8* %762, align 1, !tbaa !2448
  %763 = lshr i64 %743, 63
  %764 = trunc i64 %763 to i8
  %765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %764, i8* %765, align 1, !tbaa !2449
  %766 = lshr i64 %736, 63
  %767 = lshr i64 %742, 63
  %768 = xor i64 %767, %766
  %769 = xor i64 %763, %766
  %770 = add nuw nsw i64 %769, %768
  %771 = icmp eq i64 %770, 2
  %772 = zext i1 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %772, i8* %773, align 1, !tbaa !2450
  %774 = load i64, i64* %RBP
  %775 = sub i64 %774, 65
  %776 = load i8, i8* %CL
  %777 = zext i8 %776 to i64
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 3
  store i64 %779, i64* %PC
  %780 = inttoptr i64 %775 to i8*
  store i8 %776, i8* %780
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 41
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 6
  %785 = load i64, i64* %PC
  %786 = add i64 %785, 6
  store i64 %786, i64* %PC
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %788 = load i8, i8* %787, align 1, !tbaa !2448
  %789 = icmp eq i8 %788, 0
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %791 = load i8, i8* %790, align 1, !tbaa !2449
  %792 = icmp ne i8 %791, 0
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %794 = load i8, i8* %793, align 1, !tbaa !2450
  %795 = icmp ne i8 %794, 0
  %796 = xor i1 %792, %795
  %797 = xor i1 %796, true
  %798 = and i1 %789, %797
  %799 = zext i1 %798 to i8
  store i8 %799, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %801 = select i1 %798, i64 %782, i64 %784
  store i64 %801, i64* %800, align 8, !tbaa !2428
  %802 = load i8, i8* %BRANCH_TAKEN
  %803 = icmp eq i8 %802, 1
  br i1 %803, label %block_400f17, label %block_400ef4

block_4010ed:                                     ; preds = %block_4010bd
  %804 = load i64, i64* %RBP
  %805 = sub i64 %804, 64
  %806 = load i64, i64* %PC
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC
  %808 = inttoptr i64 %805 to i64*
  %809 = load i64, i64* %808
  store i64 %809, i64* %RAX, align 8, !tbaa !2428
  %810 = load i64, i64* %RAX
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC
  %813 = add i64 1, %810
  store i64 %813, i64* %RAX, align 8, !tbaa !2428
  %814 = icmp ult i64 %813, %810
  %815 = icmp ult i64 %813, 1
  %816 = or i1 %814, %815
  %817 = zext i1 %816 to i8
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %817, i8* %818, align 1, !tbaa !2432
  %819 = trunc i64 %813 to i32
  %820 = and i32 %819, 255
  %821 = call i32 @llvm.ctpop.i32(i32 %820) #16
  %822 = trunc i32 %821 to i8
  %823 = and i8 %822, 1
  %824 = xor i8 %823, 1
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %824, i8* %825, align 1, !tbaa !2446
  %826 = xor i64 1, %810
  %827 = xor i64 %826, %813
  %828 = lshr i64 %827, 4
  %829 = trunc i64 %828 to i8
  %830 = and i8 %829, 1
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %830, i8* %831, align 1, !tbaa !2447
  %832 = icmp eq i64 %813, 0
  %833 = zext i1 %832 to i8
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %833, i8* %834, align 1, !tbaa !2448
  %835 = lshr i64 %813, 63
  %836 = trunc i64 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %836, i8* %837, align 1, !tbaa !2449
  %838 = lshr i64 %810, 63
  %839 = xor i64 %835, %838
  %840 = add nuw nsw i64 %839, %835
  %841 = icmp eq i64 %840, 2
  %842 = zext i1 %841 to i8
  %843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %842, i8* %843, align 1, !tbaa !2450
  %844 = load i64, i64* %RBP
  %845 = sub i64 %844, 64
  %846 = load i64, i64* %RAX
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 4
  store i64 %848, i64* %PC
  %849 = inttoptr i64 %845 to i64*
  store i64 %846, i64* %849
  br label %block_4010f9

block_400f27:                                     ; preds = %block_400f17
  %850 = load i64, i64* %RBP
  %851 = sub i64 %850, 16
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 4
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to i64*
  %855 = load i64, i64* %854
  store i64 %855, i64* %RAX, align 8, !tbaa !2428
  %856 = load i64, i64* %RBP
  %857 = sub i64 %856, 64
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 4
  store i64 %859, i64* %PC
  %860 = inttoptr i64 %857 to i64*
  %861 = load i64, i64* %860
  store i64 %861, i64* %RCX, align 8, !tbaa !2428
  %862 = load i64, i64* %RCX
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 4
  store i64 %864, i64* %PC
  %865 = sub i64 %862, 1
  store i64 %865, i64* %RCX, align 8, !tbaa !2428
  %866 = icmp ult i64 %862, 1
  %867 = zext i1 %866 to i8
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %867, i8* %868, align 1, !tbaa !2432
  %869 = trunc i64 %865 to i32
  %870 = and i32 %869, 255
  %871 = call i32 @llvm.ctpop.i32(i32 %870) #16
  %872 = trunc i32 %871 to i8
  %873 = and i8 %872, 1
  %874 = xor i8 %873, 1
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %874, i8* %875, align 1, !tbaa !2446
  %876 = xor i64 1, %862
  %877 = xor i64 %876, %865
  %878 = lshr i64 %877, 4
  %879 = trunc i64 %878 to i8
  %880 = and i8 %879, 1
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %880, i8* %881, align 1, !tbaa !2447
  %882 = icmp eq i64 %865, 0
  %883 = zext i1 %882 to i8
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %883, i8* %884, align 1, !tbaa !2448
  %885 = lshr i64 %865, 63
  %886 = trunc i64 %885 to i8
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %886, i8* %887, align 1, !tbaa !2449
  %888 = lshr i64 %862, 63
  %889 = xor i64 %885, %888
  %890 = add nuw nsw i64 %889, %888
  %891 = icmp eq i64 %890, 2
  %892 = zext i1 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %892, i8* %893, align 1, !tbaa !2450
  %894 = load i64, i64* %RCX
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 4
  store i64 %896, i64* %PC
  %897 = shl i64 %894, 5
  %898 = icmp slt i64 %897, 0
  %899 = shl i64 %897, 1
  store i64 %899, i64* %RCX, align 8, !tbaa !2428
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %901 = zext i1 %898 to i8
  store i8 %901, i8* %900, align 1, !tbaa !2451
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %903 = trunc i64 %899 to i32
  %904 = and i32 %903, 254
  %905 = call i32 @llvm.ctpop.i32(i32 %904) #16
  %906 = trunc i32 %905 to i8
  %907 = and i8 %906, 1
  %908 = xor i8 %907, 1
  store i8 %908, i8* %902, align 1, !tbaa !2451
  %909 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %909, align 1, !tbaa !2451
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %911 = icmp eq i64 %899, 0
  %912 = zext i1 %911 to i8
  store i8 %912, i8* %910, align 1, !tbaa !2451
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %914 = lshr i64 %899, 63
  %915 = trunc i64 %914 to i8
  store i8 %915, i8* %913, align 1, !tbaa !2451
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %916, align 1, !tbaa !2451
  %917 = load i64, i64* %RAX
  %918 = load i64, i64* %RCX
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 3
  store i64 %920, i64* %PC
  %921 = add i64 %918, %917
  store i64 %921, i64* %RAX, align 8, !tbaa !2428
  %922 = icmp ult i64 %921, %917
  %923 = icmp ult i64 %921, %918
  %924 = or i1 %922, %923
  %925 = zext i1 %924 to i8
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %925, i8* %926, align 1, !tbaa !2432
  %927 = trunc i64 %921 to i32
  %928 = and i32 %927, 255
  %929 = call i32 @llvm.ctpop.i32(i32 %928) #16
  %930 = trunc i32 %929 to i8
  %931 = and i8 %930, 1
  %932 = xor i8 %931, 1
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %932, i8* %933, align 1, !tbaa !2446
  %934 = xor i64 %918, %917
  %935 = xor i64 %934, %921
  %936 = lshr i64 %935, 4
  %937 = trunc i64 %936 to i8
  %938 = and i8 %937, 1
  %939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %938, i8* %939, align 1, !tbaa !2447
  %940 = icmp eq i64 %921, 0
  %941 = zext i1 %940 to i8
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %941, i8* %942, align 1, !tbaa !2448
  %943 = lshr i64 %921, 63
  %944 = trunc i64 %943 to i8
  %945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %944, i8* %945, align 1, !tbaa !2449
  %946 = lshr i64 %917, 63
  %947 = lshr i64 %918, 63
  %948 = xor i64 %943, %946
  %949 = xor i64 %943, %947
  %950 = add nuw nsw i64 %948, %949
  %951 = icmp eq i64 %950, 2
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %952, i8* %953, align 1, !tbaa !2450
  %954 = load i64, i64* %RAX
  %955 = add i64 %954, 8
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 4
  store i64 %957, i64* %PC
  %958 = inttoptr i64 %955 to i64*
  %959 = load i64, i64* %958
  store i64 %959, i64* %RAX, align 8, !tbaa !2428
  %960 = load i64, i64* %RBP
  %961 = sub i64 %960, 16
  %962 = load i64, i64* %PC
  %963 = add i64 %962, 4
  store i64 %963, i64* %PC
  %964 = inttoptr i64 %961 to i64*
  %965 = load i64, i64* %964
  store i64 %965, i64* %RCX, align 8, !tbaa !2428
  %966 = load i64, i64* %RBP
  %967 = sub i64 %966, 56
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 4
  store i64 %969, i64* %PC
  %970 = inttoptr i64 %967 to i64*
  %971 = load i64, i64* %970
  store i64 %971, i64* %RDX, align 8, !tbaa !2428
  %972 = load i64, i64* %RDX
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 4
  store i64 %974, i64* %PC
  %975 = sub i64 %972, 1
  store i64 %975, i64* %RDX, align 8, !tbaa !2428
  %976 = icmp ult i64 %972, 1
  %977 = zext i1 %976 to i8
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %977, i8* %978, align 1, !tbaa !2432
  %979 = trunc i64 %975 to i32
  %980 = and i32 %979, 255
  %981 = call i32 @llvm.ctpop.i32(i32 %980) #16
  %982 = trunc i32 %981 to i8
  %983 = and i8 %982, 1
  %984 = xor i8 %983, 1
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %984, i8* %985, align 1, !tbaa !2446
  %986 = xor i64 1, %972
  %987 = xor i64 %986, %975
  %988 = lshr i64 %987, 4
  %989 = trunc i64 %988 to i8
  %990 = and i8 %989, 1
  %991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %990, i8* %991, align 1, !tbaa !2447
  %992 = icmp eq i64 %975, 0
  %993 = zext i1 %992 to i8
  %994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %993, i8* %994, align 1, !tbaa !2448
  %995 = lshr i64 %975, 63
  %996 = trunc i64 %995 to i8
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %996, i8* %997, align 1, !tbaa !2449
  %998 = lshr i64 %972, 63
  %999 = xor i64 %995, %998
  %1000 = add nuw nsw i64 %999, %998
  %1001 = icmp eq i64 %1000, 2
  %1002 = zext i1 %1001 to i8
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1002, i8* %1003, align 1, !tbaa !2450
  %1004 = load i64, i64* %RDX
  %1005 = load i64, i64* %PC
  %1006 = add i64 %1005, 4
  store i64 %1006, i64* %PC
  %1007 = shl i64 %1004, 5
  %1008 = icmp slt i64 %1007, 0
  %1009 = shl i64 %1007, 1
  store i64 %1009, i64* %RDX, align 8, !tbaa !2428
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1011 = zext i1 %1008 to i8
  store i8 %1011, i8* %1010, align 1, !tbaa !2451
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1013 = trunc i64 %1009 to i32
  %1014 = and i32 %1013, 254
  %1015 = call i32 @llvm.ctpop.i32(i32 %1014) #16
  %1016 = trunc i32 %1015 to i8
  %1017 = and i8 %1016, 1
  %1018 = xor i8 %1017, 1
  store i8 %1018, i8* %1012, align 1, !tbaa !2451
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1019, align 1, !tbaa !2451
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1021 = icmp eq i64 %1009, 0
  %1022 = zext i1 %1021 to i8
  store i8 %1022, i8* %1020, align 1, !tbaa !2451
  %1023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1024 = lshr i64 %1009, 63
  %1025 = trunc i64 %1024 to i8
  store i8 %1025, i8* %1023, align 1, !tbaa !2451
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1026, align 1, !tbaa !2451
  %1027 = load i64, i64* %RCX
  %1028 = load i64, i64* %RDX
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 3
  store i64 %1030, i64* %PC
  %1031 = add i64 %1028, %1027
  store i64 %1031, i64* %RCX, align 8, !tbaa !2428
  %1032 = icmp ult i64 %1031, %1027
  %1033 = icmp ult i64 %1031, %1028
  %1034 = or i1 %1032, %1033
  %1035 = zext i1 %1034 to i8
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1035, i8* %1036, align 1, !tbaa !2432
  %1037 = trunc i64 %1031 to i32
  %1038 = and i32 %1037, 255
  %1039 = call i32 @llvm.ctpop.i32(i32 %1038) #16
  %1040 = trunc i32 %1039 to i8
  %1041 = and i8 %1040, 1
  %1042 = xor i8 %1041, 1
  %1043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1042, i8* %1043, align 1, !tbaa !2446
  %1044 = xor i64 %1028, %1027
  %1045 = xor i64 %1044, %1031
  %1046 = lshr i64 %1045, 4
  %1047 = trunc i64 %1046 to i8
  %1048 = and i8 %1047, 1
  %1049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1048, i8* %1049, align 1, !tbaa !2447
  %1050 = icmp eq i64 %1031, 0
  %1051 = zext i1 %1050 to i8
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1051, i8* %1052, align 1, !tbaa !2448
  %1053 = lshr i64 %1031, 63
  %1054 = trunc i64 %1053 to i8
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1054, i8* %1055, align 1, !tbaa !2449
  %1056 = lshr i64 %1027, 63
  %1057 = lshr i64 %1028, 63
  %1058 = xor i64 %1053, %1056
  %1059 = xor i64 %1053, %1057
  %1060 = add nuw nsw i64 %1058, %1059
  %1061 = icmp eq i64 %1060, 2
  %1062 = zext i1 %1061 to i8
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1062, i8* %1063, align 1, !tbaa !2450
  %1064 = load i64, i64* %RCX
  %1065 = add i64 %1064, 8
  %1066 = load i64, i64* %RAX
  %1067 = load i64, i64* %PC
  %1068 = add i64 %1067, 4
  store i64 %1068, i64* %PC
  %1069 = inttoptr i64 %1065 to i64*
  store i64 %1066, i64* %1069
  %1070 = load i64, i64* %RBP
  %1071 = sub i64 %1070, 16
  %1072 = load i64, i64* %PC
  %1073 = add i64 %1072, 4
  store i64 %1073, i64* %PC
  %1074 = inttoptr i64 %1071 to i64*
  %1075 = load i64, i64* %1074
  store i64 %1075, i64* %RAX, align 8, !tbaa !2428
  %1076 = load i64, i64* %RBP
  %1077 = sub i64 %1076, 64
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 4
  store i64 %1079, i64* %PC
  %1080 = inttoptr i64 %1077 to i64*
  %1081 = load i64, i64* %1080
  store i64 %1081, i64* %RCX, align 8, !tbaa !2428
  %1082 = load i64, i64* %RCX
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 4
  store i64 %1084, i64* %PC
  %1085 = sub i64 %1082, 1
  store i64 %1085, i64* %RCX, align 8, !tbaa !2428
  %1086 = icmp ult i64 %1082, 1
  %1087 = zext i1 %1086 to i8
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1087, i8* %1088, align 1, !tbaa !2432
  %1089 = trunc i64 %1085 to i32
  %1090 = and i32 %1089, 255
  %1091 = call i32 @llvm.ctpop.i32(i32 %1090) #16
  %1092 = trunc i32 %1091 to i8
  %1093 = and i8 %1092, 1
  %1094 = xor i8 %1093, 1
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1094, i8* %1095, align 1, !tbaa !2446
  %1096 = xor i64 1, %1082
  %1097 = xor i64 %1096, %1085
  %1098 = lshr i64 %1097, 4
  %1099 = trunc i64 %1098 to i8
  %1100 = and i8 %1099, 1
  %1101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1100, i8* %1101, align 1, !tbaa !2447
  %1102 = icmp eq i64 %1085, 0
  %1103 = zext i1 %1102 to i8
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1103, i8* %1104, align 1, !tbaa !2448
  %1105 = lshr i64 %1085, 63
  %1106 = trunc i64 %1105 to i8
  %1107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1106, i8* %1107, align 1, !tbaa !2449
  %1108 = lshr i64 %1082, 63
  %1109 = xor i64 %1105, %1108
  %1110 = add nuw nsw i64 %1109, %1108
  %1111 = icmp eq i64 %1110, 2
  %1112 = zext i1 %1111 to i8
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1112, i8* %1113, align 1, !tbaa !2450
  %1114 = load i64, i64* %RCX
  %1115 = load i64, i64* %PC
  %1116 = add i64 %1115, 4
  store i64 %1116, i64* %PC
  %1117 = shl i64 %1114, 5
  %1118 = icmp slt i64 %1117, 0
  %1119 = shl i64 %1117, 1
  store i64 %1119, i64* %RCX, align 8, !tbaa !2428
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1121 = zext i1 %1118 to i8
  store i8 %1121, i8* %1120, align 1, !tbaa !2451
  %1122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1123 = trunc i64 %1119 to i32
  %1124 = and i32 %1123, 254
  %1125 = call i32 @llvm.ctpop.i32(i32 %1124) #16
  %1126 = trunc i32 %1125 to i8
  %1127 = and i8 %1126, 1
  %1128 = xor i8 %1127, 1
  store i8 %1128, i8* %1122, align 1, !tbaa !2451
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1129, align 1, !tbaa !2451
  %1130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1131 = icmp eq i64 %1119, 0
  %1132 = zext i1 %1131 to i8
  store i8 %1132, i8* %1130, align 1, !tbaa !2451
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1134 = lshr i64 %1119, 63
  %1135 = trunc i64 %1134 to i8
  store i8 %1135, i8* %1133, align 1, !tbaa !2451
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1136, align 1, !tbaa !2451
  %1137 = load i64, i64* %RAX
  %1138 = load i64, i64* %RCX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 3
  store i64 %1140, i64* %PC
  %1141 = add i64 %1138, %1137
  store i64 %1141, i64* %RAX, align 8, !tbaa !2428
  %1142 = icmp ult i64 %1141, %1137
  %1143 = icmp ult i64 %1141, %1138
  %1144 = or i1 %1142, %1143
  %1145 = zext i1 %1144 to i8
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1145, i8* %1146, align 1, !tbaa !2432
  %1147 = trunc i64 %1141 to i32
  %1148 = and i32 %1147, 255
  %1149 = call i32 @llvm.ctpop.i32(i32 %1148) #16
  %1150 = trunc i32 %1149 to i8
  %1151 = and i8 %1150, 1
  %1152 = xor i8 %1151, 1
  %1153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1152, i8* %1153, align 1, !tbaa !2446
  %1154 = xor i64 %1138, %1137
  %1155 = xor i64 %1154, %1141
  %1156 = lshr i64 %1155, 4
  %1157 = trunc i64 %1156 to i8
  %1158 = and i8 %1157, 1
  %1159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1158, i8* %1159, align 1, !tbaa !2447
  %1160 = icmp eq i64 %1141, 0
  %1161 = zext i1 %1160 to i8
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1161, i8* %1162, align 1, !tbaa !2448
  %1163 = lshr i64 %1141, 63
  %1164 = trunc i64 %1163 to i8
  %1165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1164, i8* %1165, align 1, !tbaa !2449
  %1166 = lshr i64 %1137, 63
  %1167 = lshr i64 %1138, 63
  %1168 = xor i64 %1163, %1166
  %1169 = xor i64 %1163, %1167
  %1170 = add nuw nsw i64 %1168, %1169
  %1171 = icmp eq i64 %1170, 2
  %1172 = zext i1 %1171 to i8
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1172, i8* %1173, align 1, !tbaa !2450
  %1174 = load i64, i64* %RAX
  %1175 = add i64 %1174, 16
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 4
  store i64 %1177, i64* %PC
  %1178 = inttoptr i64 %1175 to i64*
  %1179 = load i64, i64* %1178
  store i64 %1179, i64* %RAX, align 8, !tbaa !2428
  %1180 = load i64, i64* %RBP
  %1181 = sub i64 %1180, 16
  %1182 = load i64, i64* %PC
  %1183 = add i64 %1182, 4
  store i64 %1183, i64* %PC
  %1184 = inttoptr i64 %1181 to i64*
  %1185 = load i64, i64* %1184
  store i64 %1185, i64* %RCX, align 8, !tbaa !2428
  %1186 = load i64, i64* %RBP
  %1187 = sub i64 %1186, 56
  %1188 = load i64, i64* %PC
  %1189 = add i64 %1188, 4
  store i64 %1189, i64* %PC
  %1190 = inttoptr i64 %1187 to i64*
  %1191 = load i64, i64* %1190
  store i64 %1191, i64* %RDX, align 8, !tbaa !2428
  %1192 = load i64, i64* %RDX
  %1193 = load i64, i64* %PC
  %1194 = add i64 %1193, 4
  store i64 %1194, i64* %PC
  %1195 = sub i64 %1192, 1
  store i64 %1195, i64* %RDX, align 8, !tbaa !2428
  %1196 = icmp ult i64 %1192, 1
  %1197 = zext i1 %1196 to i8
  %1198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1197, i8* %1198, align 1, !tbaa !2432
  %1199 = trunc i64 %1195 to i32
  %1200 = and i32 %1199, 255
  %1201 = call i32 @llvm.ctpop.i32(i32 %1200) #16
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1204, i8* %1205, align 1, !tbaa !2446
  %1206 = xor i64 1, %1192
  %1207 = xor i64 %1206, %1195
  %1208 = lshr i64 %1207, 4
  %1209 = trunc i64 %1208 to i8
  %1210 = and i8 %1209, 1
  %1211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1210, i8* %1211, align 1, !tbaa !2447
  %1212 = icmp eq i64 %1195, 0
  %1213 = zext i1 %1212 to i8
  %1214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1213, i8* %1214, align 1, !tbaa !2448
  %1215 = lshr i64 %1195, 63
  %1216 = trunc i64 %1215 to i8
  %1217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1216, i8* %1217, align 1, !tbaa !2449
  %1218 = lshr i64 %1192, 63
  %1219 = xor i64 %1215, %1218
  %1220 = add nuw nsw i64 %1219, %1218
  %1221 = icmp eq i64 %1220, 2
  %1222 = zext i1 %1221 to i8
  %1223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1222, i8* %1223, align 1, !tbaa !2450
  %1224 = load i64, i64* %RDX
  %1225 = load i64, i64* %PC
  %1226 = add i64 %1225, 4
  store i64 %1226, i64* %PC
  %1227 = shl i64 %1224, 5
  %1228 = icmp slt i64 %1227, 0
  %1229 = shl i64 %1227, 1
  store i64 %1229, i64* %RDX, align 8, !tbaa !2428
  %1230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1231 = zext i1 %1228 to i8
  store i8 %1231, i8* %1230, align 1, !tbaa !2451
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1233 = trunc i64 %1229 to i32
  %1234 = and i32 %1233, 254
  %1235 = call i32 @llvm.ctpop.i32(i32 %1234) #16
  %1236 = trunc i32 %1235 to i8
  %1237 = and i8 %1236, 1
  %1238 = xor i8 %1237, 1
  store i8 %1238, i8* %1232, align 1, !tbaa !2451
  %1239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1239, align 1, !tbaa !2451
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1241 = icmp eq i64 %1229, 0
  %1242 = zext i1 %1241 to i8
  store i8 %1242, i8* %1240, align 1, !tbaa !2451
  %1243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1244 = lshr i64 %1229, 63
  %1245 = trunc i64 %1244 to i8
  store i8 %1245, i8* %1243, align 1, !tbaa !2451
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1246, align 1, !tbaa !2451
  %1247 = load i64, i64* %RCX
  %1248 = load i64, i64* %RDX
  %1249 = load i64, i64* %PC
  %1250 = add i64 %1249, 3
  store i64 %1250, i64* %PC
  %1251 = add i64 %1248, %1247
  store i64 %1251, i64* %RCX, align 8, !tbaa !2428
  %1252 = icmp ult i64 %1251, %1247
  %1253 = icmp ult i64 %1251, %1248
  %1254 = or i1 %1252, %1253
  %1255 = zext i1 %1254 to i8
  %1256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1255, i8* %1256, align 1, !tbaa !2432
  %1257 = trunc i64 %1251 to i32
  %1258 = and i32 %1257, 255
  %1259 = call i32 @llvm.ctpop.i32(i32 %1258) #16
  %1260 = trunc i32 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = xor i8 %1261, 1
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1262, i8* %1263, align 1, !tbaa !2446
  %1264 = xor i64 %1248, %1247
  %1265 = xor i64 %1264, %1251
  %1266 = lshr i64 %1265, 4
  %1267 = trunc i64 %1266 to i8
  %1268 = and i8 %1267, 1
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1268, i8* %1269, align 1, !tbaa !2447
  %1270 = icmp eq i64 %1251, 0
  %1271 = zext i1 %1270 to i8
  %1272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1271, i8* %1272, align 1, !tbaa !2448
  %1273 = lshr i64 %1251, 63
  %1274 = trunc i64 %1273 to i8
  %1275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1274, i8* %1275, align 1, !tbaa !2449
  %1276 = lshr i64 %1247, 63
  %1277 = lshr i64 %1248, 63
  %1278 = xor i64 %1273, %1276
  %1279 = xor i64 %1273, %1277
  %1280 = add nuw nsw i64 %1278, %1279
  %1281 = icmp eq i64 %1280, 2
  %1282 = zext i1 %1281 to i8
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1282, i8* %1283, align 1, !tbaa !2450
  %1284 = load i64, i64* %RCX
  %1285 = add i64 %1284, 16
  %1286 = load i64, i64* %RAX
  %1287 = load i64, i64* %PC
  %1288 = add i64 %1287, 4
  store i64 %1288, i64* %PC
  %1289 = inttoptr i64 %1285 to i64*
  store i64 %1286, i64* %1289
  %1290 = load i64, i64* %RBP
  %1291 = sub i64 %1290, 16
  %1292 = load i64, i64* %PC
  %1293 = add i64 %1292, 4
  store i64 %1293, i64* %PC
  %1294 = inttoptr i64 %1291 to i64*
  %1295 = load i64, i64* %1294
  store i64 %1295, i64* %RAX, align 8, !tbaa !2428
  %1296 = load i64, i64* %RBP
  %1297 = sub i64 %1296, 64
  %1298 = load i64, i64* %PC
  %1299 = add i64 %1298, 4
  store i64 %1299, i64* %PC
  %1300 = inttoptr i64 %1297 to i64*
  %1301 = load i64, i64* %1300
  store i64 %1301, i64* %RCX, align 8, !tbaa !2428
  %1302 = load i64, i64* %RCX
  %1303 = load i64, i64* %PC
  %1304 = add i64 %1303, 4
  store i64 %1304, i64* %PC
  %1305 = sub i64 %1302, 1
  store i64 %1305, i64* %RCX, align 8, !tbaa !2428
  %1306 = icmp ult i64 %1302, 1
  %1307 = zext i1 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1307, i8* %1308, align 1, !tbaa !2432
  %1309 = trunc i64 %1305 to i32
  %1310 = and i32 %1309, 255
  %1311 = call i32 @llvm.ctpop.i32(i32 %1310) #16
  %1312 = trunc i32 %1311 to i8
  %1313 = and i8 %1312, 1
  %1314 = xor i8 %1313, 1
  %1315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1314, i8* %1315, align 1, !tbaa !2446
  %1316 = xor i64 1, %1302
  %1317 = xor i64 %1316, %1305
  %1318 = lshr i64 %1317, 4
  %1319 = trunc i64 %1318 to i8
  %1320 = and i8 %1319, 1
  %1321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1320, i8* %1321, align 1, !tbaa !2447
  %1322 = icmp eq i64 %1305, 0
  %1323 = zext i1 %1322 to i8
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1323, i8* %1324, align 1, !tbaa !2448
  %1325 = lshr i64 %1305, 63
  %1326 = trunc i64 %1325 to i8
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1326, i8* %1327, align 1, !tbaa !2449
  %1328 = lshr i64 %1302, 63
  %1329 = xor i64 %1325, %1328
  %1330 = add nuw nsw i64 %1329, %1328
  %1331 = icmp eq i64 %1330, 2
  %1332 = zext i1 %1331 to i8
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1332, i8* %1333, align 1, !tbaa !2450
  %1334 = load i64, i64* %RCX
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 4
  store i64 %1336, i64* %PC
  %1337 = shl i64 %1334, 5
  %1338 = icmp slt i64 %1337, 0
  %1339 = shl i64 %1337, 1
  store i64 %1339, i64* %RCX, align 8, !tbaa !2428
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1341 = zext i1 %1338 to i8
  store i8 %1341, i8* %1340, align 1, !tbaa !2451
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1343 = trunc i64 %1339 to i32
  %1344 = and i32 %1343, 254
  %1345 = call i32 @llvm.ctpop.i32(i32 %1344) #16
  %1346 = trunc i32 %1345 to i8
  %1347 = and i8 %1346, 1
  %1348 = xor i8 %1347, 1
  store i8 %1348, i8* %1342, align 1, !tbaa !2451
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1349, align 1, !tbaa !2451
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1351 = icmp eq i64 %1339, 0
  %1352 = zext i1 %1351 to i8
  store i8 %1352, i8* %1350, align 1, !tbaa !2451
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1354 = lshr i64 %1339, 63
  %1355 = trunc i64 %1354 to i8
  store i8 %1355, i8* %1353, align 1, !tbaa !2451
  %1356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1356, align 1, !tbaa !2451
  %1357 = load i64, i64* %RAX
  %1358 = load i64, i64* %RCX
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 3
  store i64 %1360, i64* %PC
  %1361 = add i64 %1358, %1357
  store i64 %1361, i64* %RAX, align 8, !tbaa !2428
  %1362 = icmp ult i64 %1361, %1357
  %1363 = icmp ult i64 %1361, %1358
  %1364 = or i1 %1362, %1363
  %1365 = zext i1 %1364 to i8
  %1366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1365, i8* %1366, align 1, !tbaa !2432
  %1367 = trunc i64 %1361 to i32
  %1368 = and i32 %1367, 255
  %1369 = call i32 @llvm.ctpop.i32(i32 %1368) #16
  %1370 = trunc i32 %1369 to i8
  %1371 = and i8 %1370, 1
  %1372 = xor i8 %1371, 1
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1372, i8* %1373, align 1, !tbaa !2446
  %1374 = xor i64 %1358, %1357
  %1375 = xor i64 %1374, %1361
  %1376 = lshr i64 %1375, 4
  %1377 = trunc i64 %1376 to i8
  %1378 = and i8 %1377, 1
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1378, i8* %1379, align 1, !tbaa !2447
  %1380 = icmp eq i64 %1361, 0
  %1381 = zext i1 %1380 to i8
  %1382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1381, i8* %1382, align 1, !tbaa !2448
  %1383 = lshr i64 %1361, 63
  %1384 = trunc i64 %1383 to i8
  %1385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1384, i8* %1385, align 1, !tbaa !2449
  %1386 = lshr i64 %1357, 63
  %1387 = lshr i64 %1358, 63
  %1388 = xor i64 %1383, %1386
  %1389 = xor i64 %1383, %1387
  %1390 = add nuw nsw i64 %1388, %1389
  %1391 = icmp eq i64 %1390, 2
  %1392 = zext i1 %1391 to i8
  %1393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1392, i8* %1393, align 1, !tbaa !2450
  %1394 = load i64, i64* %RAX
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 3
  store i64 %1396, i64* %PC
  %1397 = inttoptr i64 %1394 to i64*
  %1398 = load i64, i64* %1397
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = load i64, i64* %RBP
  %1400 = sub i64 %1399, 16
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 4
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1400 to i64*
  %1404 = load i64, i64* %1403
  store i64 %1404, i64* %RCX, align 8, !tbaa !2428
  %1405 = load i64, i64* %RBP
  %1406 = sub i64 %1405, 56
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 4
  store i64 %1408, i64* %PC
  %1409 = inttoptr i64 %1406 to i64*
  %1410 = load i64, i64* %1409
  store i64 %1410, i64* %RDX, align 8, !tbaa !2428
  %1411 = load i64, i64* %RDX
  %1412 = load i64, i64* %PC
  %1413 = add i64 %1412, 4
  store i64 %1413, i64* %PC
  %1414 = sub i64 %1411, 1
  store i64 %1414, i64* %RDX, align 8, !tbaa !2428
  %1415 = icmp ult i64 %1411, 1
  %1416 = zext i1 %1415 to i8
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1416, i8* %1417, align 1, !tbaa !2432
  %1418 = trunc i64 %1414 to i32
  %1419 = and i32 %1418, 255
  %1420 = call i32 @llvm.ctpop.i32(i32 %1419) #16
  %1421 = trunc i32 %1420 to i8
  %1422 = and i8 %1421, 1
  %1423 = xor i8 %1422, 1
  %1424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1423, i8* %1424, align 1, !tbaa !2446
  %1425 = xor i64 1, %1411
  %1426 = xor i64 %1425, %1414
  %1427 = lshr i64 %1426, 4
  %1428 = trunc i64 %1427 to i8
  %1429 = and i8 %1428, 1
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1429, i8* %1430, align 1, !tbaa !2447
  %1431 = icmp eq i64 %1414, 0
  %1432 = zext i1 %1431 to i8
  %1433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1432, i8* %1433, align 1, !tbaa !2448
  %1434 = lshr i64 %1414, 63
  %1435 = trunc i64 %1434 to i8
  %1436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1435, i8* %1436, align 1, !tbaa !2449
  %1437 = lshr i64 %1411, 63
  %1438 = xor i64 %1434, %1437
  %1439 = add nuw nsw i64 %1438, %1437
  %1440 = icmp eq i64 %1439, 2
  %1441 = zext i1 %1440 to i8
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1441, i8* %1442, align 1, !tbaa !2450
  %1443 = load i64, i64* %RDX
  %1444 = load i64, i64* %PC
  %1445 = add i64 %1444, 4
  store i64 %1445, i64* %PC
  %1446 = shl i64 %1443, 5
  %1447 = icmp slt i64 %1446, 0
  %1448 = shl i64 %1446, 1
  store i64 %1448, i64* %RDX, align 8, !tbaa !2428
  %1449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1450 = zext i1 %1447 to i8
  store i8 %1450, i8* %1449, align 1, !tbaa !2451
  %1451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1452 = trunc i64 %1448 to i32
  %1453 = and i32 %1452, 254
  %1454 = call i32 @llvm.ctpop.i32(i32 %1453) #16
  %1455 = trunc i32 %1454 to i8
  %1456 = and i8 %1455, 1
  %1457 = xor i8 %1456, 1
  store i8 %1457, i8* %1451, align 1, !tbaa !2451
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1458, align 1, !tbaa !2451
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1460 = icmp eq i64 %1448, 0
  %1461 = zext i1 %1460 to i8
  store i8 %1461, i8* %1459, align 1, !tbaa !2451
  %1462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1463 = lshr i64 %1448, 63
  %1464 = trunc i64 %1463 to i8
  store i8 %1464, i8* %1462, align 1, !tbaa !2451
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1465, align 1, !tbaa !2451
  %1466 = load i64, i64* %RCX
  %1467 = load i64, i64* %RDX
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 3
  store i64 %1469, i64* %PC
  %1470 = add i64 %1467, %1466
  store i64 %1470, i64* %RCX, align 8, !tbaa !2428
  %1471 = icmp ult i64 %1470, %1466
  %1472 = icmp ult i64 %1470, %1467
  %1473 = or i1 %1471, %1472
  %1474 = zext i1 %1473 to i8
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1474, i8* %1475, align 1, !tbaa !2432
  %1476 = trunc i64 %1470 to i32
  %1477 = and i32 %1476, 255
  %1478 = call i32 @llvm.ctpop.i32(i32 %1477) #16
  %1479 = trunc i32 %1478 to i8
  %1480 = and i8 %1479, 1
  %1481 = xor i8 %1480, 1
  %1482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1481, i8* %1482, align 1, !tbaa !2446
  %1483 = xor i64 %1467, %1466
  %1484 = xor i64 %1483, %1470
  %1485 = lshr i64 %1484, 4
  %1486 = trunc i64 %1485 to i8
  %1487 = and i8 %1486, 1
  %1488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1487, i8* %1488, align 1, !tbaa !2447
  %1489 = icmp eq i64 %1470, 0
  %1490 = zext i1 %1489 to i8
  %1491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1490, i8* %1491, align 1, !tbaa !2448
  %1492 = lshr i64 %1470, 63
  %1493 = trunc i64 %1492 to i8
  %1494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1493, i8* %1494, align 1, !tbaa !2449
  %1495 = lshr i64 %1466, 63
  %1496 = lshr i64 %1467, 63
  %1497 = xor i64 %1492, %1495
  %1498 = xor i64 %1492, %1496
  %1499 = add nuw nsw i64 %1497, %1498
  %1500 = icmp eq i64 %1499, 2
  %1501 = zext i1 %1500 to i8
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1501, i8* %1502, align 1, !tbaa !2450
  %1503 = load i64, i64* %RCX
  %1504 = load i64, i64* %RAX
  %1505 = load i64, i64* %PC
  %1506 = add i64 %1505, 3
  store i64 %1506, i64* %PC
  %1507 = inttoptr i64 %1503 to i64*
  store i64 %1504, i64* %1507
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 16
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 4
  store i64 %1511, i64* %PC
  %1512 = inttoptr i64 %1509 to i64*
  %1513 = load i64, i64* %1512
  store i64 %1513, i64* %RAX, align 8, !tbaa !2428
  %1514 = load i64, i64* %RBP
  %1515 = sub i64 %1514, 64
  %1516 = load i64, i64* %PC
  %1517 = add i64 %1516, 4
  store i64 %1517, i64* %PC
  %1518 = inttoptr i64 %1515 to i64*
  %1519 = load i64, i64* %1518
  store i64 %1519, i64* %RCX, align 8, !tbaa !2428
  %1520 = load i64, i64* %RCX
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 4
  store i64 %1522, i64* %PC
  %1523 = sub i64 %1520, 1
  store i64 %1523, i64* %RCX, align 8, !tbaa !2428
  %1524 = icmp ult i64 %1520, 1
  %1525 = zext i1 %1524 to i8
  %1526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1525, i8* %1526, align 1, !tbaa !2432
  %1527 = trunc i64 %1523 to i32
  %1528 = and i32 %1527, 255
  %1529 = call i32 @llvm.ctpop.i32(i32 %1528) #16
  %1530 = trunc i32 %1529 to i8
  %1531 = and i8 %1530, 1
  %1532 = xor i8 %1531, 1
  %1533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1532, i8* %1533, align 1, !tbaa !2446
  %1534 = xor i64 1, %1520
  %1535 = xor i64 %1534, %1523
  %1536 = lshr i64 %1535, 4
  %1537 = trunc i64 %1536 to i8
  %1538 = and i8 %1537, 1
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1538, i8* %1539, align 1, !tbaa !2447
  %1540 = icmp eq i64 %1523, 0
  %1541 = zext i1 %1540 to i8
  %1542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1541, i8* %1542, align 1, !tbaa !2448
  %1543 = lshr i64 %1523, 63
  %1544 = trunc i64 %1543 to i8
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1544, i8* %1545, align 1, !tbaa !2449
  %1546 = lshr i64 %1520, 63
  %1547 = xor i64 %1543, %1546
  %1548 = add nuw nsw i64 %1547, %1546
  %1549 = icmp eq i64 %1548, 2
  %1550 = zext i1 %1549 to i8
  %1551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1550, i8* %1551, align 1, !tbaa !2450
  %1552 = load i64, i64* %RCX
  %1553 = load i64, i64* %PC
  %1554 = add i64 %1553, 4
  store i64 %1554, i64* %PC
  %1555 = shl i64 %1552, 5
  %1556 = icmp slt i64 %1555, 0
  %1557 = shl i64 %1555, 1
  store i64 %1557, i64* %RCX, align 8, !tbaa !2428
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1559 = zext i1 %1556 to i8
  store i8 %1559, i8* %1558, align 1, !tbaa !2451
  %1560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1561 = trunc i64 %1557 to i32
  %1562 = and i32 %1561, 254
  %1563 = call i32 @llvm.ctpop.i32(i32 %1562) #16
  %1564 = trunc i32 %1563 to i8
  %1565 = and i8 %1564, 1
  %1566 = xor i8 %1565, 1
  store i8 %1566, i8* %1560, align 1, !tbaa !2451
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1567, align 1, !tbaa !2451
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1569 = icmp eq i64 %1557, 0
  %1570 = zext i1 %1569 to i8
  store i8 %1570, i8* %1568, align 1, !tbaa !2451
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1572 = lshr i64 %1557, 63
  %1573 = trunc i64 %1572 to i8
  store i8 %1573, i8* %1571, align 1, !tbaa !2451
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1574, align 1, !tbaa !2451
  %1575 = load i64, i64* %RAX
  %1576 = load i64, i64* %RCX
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 3
  store i64 %1578, i64* %PC
  %1579 = add i64 %1576, %1575
  store i64 %1579, i64* %RAX, align 8, !tbaa !2428
  %1580 = icmp ult i64 %1579, %1575
  %1581 = icmp ult i64 %1579, %1576
  %1582 = or i1 %1580, %1581
  %1583 = zext i1 %1582 to i8
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1583, i8* %1584, align 1, !tbaa !2432
  %1585 = trunc i64 %1579 to i32
  %1586 = and i32 %1585, 255
  %1587 = call i32 @llvm.ctpop.i32(i32 %1586) #16
  %1588 = trunc i32 %1587 to i8
  %1589 = and i8 %1588, 1
  %1590 = xor i8 %1589, 1
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1590, i8* %1591, align 1, !tbaa !2446
  %1592 = xor i64 %1576, %1575
  %1593 = xor i64 %1592, %1579
  %1594 = lshr i64 %1593, 4
  %1595 = trunc i64 %1594 to i8
  %1596 = and i8 %1595, 1
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1596, i8* %1597, align 1, !tbaa !2447
  %1598 = icmp eq i64 %1579, 0
  %1599 = zext i1 %1598 to i8
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1599, i8* %1600, align 1, !tbaa !2448
  %1601 = lshr i64 %1579, 63
  %1602 = trunc i64 %1601 to i8
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1602, i8* %1603, align 1, !tbaa !2449
  %1604 = lshr i64 %1575, 63
  %1605 = lshr i64 %1576, 63
  %1606 = xor i64 %1601, %1604
  %1607 = xor i64 %1601, %1605
  %1608 = add nuw nsw i64 %1606, %1607
  %1609 = icmp eq i64 %1608, 2
  %1610 = zext i1 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1610, i8* %1611, align 1, !tbaa !2450
  %1612 = load i64, i64* %RAX
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 3
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to i64*
  %1616 = load i64, i64* %1615
  store i64 %1616, i64* %RAX, align 8, !tbaa !2428
  %1617 = load i64, i64* %RBP
  %1618 = sub i64 %1617, 16
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 4
  store i64 %1620, i64* %PC
  %1621 = inttoptr i64 %1618 to i64*
  %1622 = load i64, i64* %1621
  store i64 %1622, i64* %RCX, align 8, !tbaa !2428
  %1623 = load i64, i64* %RBP
  %1624 = sub i64 %1623, 56
  %1625 = load i64, i64* %PC
  %1626 = add i64 %1625, 4
  store i64 %1626, i64* %PC
  %1627 = inttoptr i64 %1624 to i64*
  %1628 = load i64, i64* %1627
  store i64 %1628, i64* %RDX, align 8, !tbaa !2428
  %1629 = load i64, i64* %RDX
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 4
  store i64 %1631, i64* %PC
  %1632 = sub i64 %1629, 1
  store i64 %1632, i64* %RDX, align 8, !tbaa !2428
  %1633 = icmp ult i64 %1629, 1
  %1634 = zext i1 %1633 to i8
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1634, i8* %1635, align 1, !tbaa !2432
  %1636 = trunc i64 %1632 to i32
  %1637 = and i32 %1636, 255
  %1638 = call i32 @llvm.ctpop.i32(i32 %1637) #16
  %1639 = trunc i32 %1638 to i8
  %1640 = and i8 %1639, 1
  %1641 = xor i8 %1640, 1
  %1642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1641, i8* %1642, align 1, !tbaa !2446
  %1643 = xor i64 1, %1629
  %1644 = xor i64 %1643, %1632
  %1645 = lshr i64 %1644, 4
  %1646 = trunc i64 %1645 to i8
  %1647 = and i8 %1646, 1
  %1648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1647, i8* %1648, align 1, !tbaa !2447
  %1649 = icmp eq i64 %1632, 0
  %1650 = zext i1 %1649 to i8
  %1651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1650, i8* %1651, align 1, !tbaa !2448
  %1652 = lshr i64 %1632, 63
  %1653 = trunc i64 %1652 to i8
  %1654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1653, i8* %1654, align 1, !tbaa !2449
  %1655 = lshr i64 %1629, 63
  %1656 = xor i64 %1652, %1655
  %1657 = add nuw nsw i64 %1656, %1655
  %1658 = icmp eq i64 %1657, 2
  %1659 = zext i1 %1658 to i8
  %1660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1659, i8* %1660, align 1, !tbaa !2450
  %1661 = load i64, i64* %RDX
  %1662 = load i64, i64* %PC
  %1663 = add i64 %1662, 4
  store i64 %1663, i64* %PC
  %1664 = shl i64 %1661, 5
  %1665 = icmp slt i64 %1664, 0
  %1666 = shl i64 %1664, 1
  store i64 %1666, i64* %RDX, align 8, !tbaa !2428
  %1667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1668 = zext i1 %1665 to i8
  store i8 %1668, i8* %1667, align 1, !tbaa !2451
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1670 = trunc i64 %1666 to i32
  %1671 = and i32 %1670, 254
  %1672 = call i32 @llvm.ctpop.i32(i32 %1671) #16
  %1673 = trunc i32 %1672 to i8
  %1674 = and i8 %1673, 1
  %1675 = xor i8 %1674, 1
  store i8 %1675, i8* %1669, align 1, !tbaa !2451
  %1676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1676, align 1, !tbaa !2451
  %1677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1678 = icmp eq i64 %1666, 0
  %1679 = zext i1 %1678 to i8
  store i8 %1679, i8* %1677, align 1, !tbaa !2451
  %1680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1681 = lshr i64 %1666, 63
  %1682 = trunc i64 %1681 to i8
  store i8 %1682, i8* %1680, align 1, !tbaa !2451
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1683, align 1, !tbaa !2451
  %1684 = load i64, i64* %RCX
  %1685 = load i64, i64* %RDX
  %1686 = load i64, i64* %PC
  %1687 = add i64 %1686, 3
  store i64 %1687, i64* %PC
  %1688 = add i64 %1685, %1684
  store i64 %1688, i64* %RCX, align 8, !tbaa !2428
  %1689 = icmp ult i64 %1688, %1684
  %1690 = icmp ult i64 %1688, %1685
  %1691 = or i1 %1689, %1690
  %1692 = zext i1 %1691 to i8
  %1693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1692, i8* %1693, align 1, !tbaa !2432
  %1694 = trunc i64 %1688 to i32
  %1695 = and i32 %1694, 255
  %1696 = call i32 @llvm.ctpop.i32(i32 %1695) #16
  %1697 = trunc i32 %1696 to i8
  %1698 = and i8 %1697, 1
  %1699 = xor i8 %1698, 1
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1699, i8* %1700, align 1, !tbaa !2446
  %1701 = xor i64 %1685, %1684
  %1702 = xor i64 %1701, %1688
  %1703 = lshr i64 %1702, 4
  %1704 = trunc i64 %1703 to i8
  %1705 = and i8 %1704, 1
  %1706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1705, i8* %1706, align 1, !tbaa !2447
  %1707 = icmp eq i64 %1688, 0
  %1708 = zext i1 %1707 to i8
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1708, i8* %1709, align 1, !tbaa !2448
  %1710 = lshr i64 %1688, 63
  %1711 = trunc i64 %1710 to i8
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1711, i8* %1712, align 1, !tbaa !2449
  %1713 = lshr i64 %1684, 63
  %1714 = lshr i64 %1685, 63
  %1715 = xor i64 %1710, %1713
  %1716 = xor i64 %1710, %1714
  %1717 = add nuw nsw i64 %1715, %1716
  %1718 = icmp eq i64 %1717, 2
  %1719 = zext i1 %1718 to i8
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1719, i8* %1720, align 1, !tbaa !2450
  %1721 = load i64, i64* %RCX
  %1722 = add i64 %1721, 56
  %1723 = load i64, i64* %RAX
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 4
  store i64 %1725, i64* %PC
  %1726 = inttoptr i64 %1722 to i64*
  store i64 %1723, i64* %1726
  %1727 = load i64, i64* %RBP
  %1728 = sub i64 %1727, 16
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 4
  store i64 %1730, i64* %PC
  %1731 = inttoptr i64 %1728 to i64*
  %1732 = load i64, i64* %1731
  store i64 %1732, i64* %RAX, align 8, !tbaa !2428
  %1733 = load i64, i64* %RBP
  %1734 = sub i64 %1733, 64
  %1735 = load i64, i64* %PC
  %1736 = add i64 %1735, 4
  store i64 %1736, i64* %PC
  %1737 = inttoptr i64 %1734 to i64*
  %1738 = load i64, i64* %1737
  store i64 %1738, i64* %RCX, align 8, !tbaa !2428
  %1739 = load i64, i64* %RCX
  %1740 = load i64, i64* %PC
  %1741 = add i64 %1740, 4
  store i64 %1741, i64* %PC
  %1742 = sub i64 %1739, 1
  store i64 %1742, i64* %RCX, align 8, !tbaa !2428
  %1743 = icmp ult i64 %1739, 1
  %1744 = zext i1 %1743 to i8
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1744, i8* %1745, align 1, !tbaa !2432
  %1746 = trunc i64 %1742 to i32
  %1747 = and i32 %1746, 255
  %1748 = call i32 @llvm.ctpop.i32(i32 %1747) #16
  %1749 = trunc i32 %1748 to i8
  %1750 = and i8 %1749, 1
  %1751 = xor i8 %1750, 1
  %1752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1751, i8* %1752, align 1, !tbaa !2446
  %1753 = xor i64 1, %1739
  %1754 = xor i64 %1753, %1742
  %1755 = lshr i64 %1754, 4
  %1756 = trunc i64 %1755 to i8
  %1757 = and i8 %1756, 1
  %1758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1757, i8* %1758, align 1, !tbaa !2447
  %1759 = icmp eq i64 %1742, 0
  %1760 = zext i1 %1759 to i8
  %1761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1760, i8* %1761, align 1, !tbaa !2448
  %1762 = lshr i64 %1742, 63
  %1763 = trunc i64 %1762 to i8
  %1764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1763, i8* %1764, align 1, !tbaa !2449
  %1765 = lshr i64 %1739, 63
  %1766 = xor i64 %1762, %1765
  %1767 = add nuw nsw i64 %1766, %1765
  %1768 = icmp eq i64 %1767, 2
  %1769 = zext i1 %1768 to i8
  %1770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1769, i8* %1770, align 1, !tbaa !2450
  %1771 = load i64, i64* %RCX
  %1772 = load i64, i64* %PC
  %1773 = add i64 %1772, 4
  store i64 %1773, i64* %PC
  %1774 = shl i64 %1771, 5
  %1775 = icmp slt i64 %1774, 0
  %1776 = shl i64 %1774, 1
  store i64 %1776, i64* %RCX, align 8, !tbaa !2428
  %1777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1778 = zext i1 %1775 to i8
  store i8 %1778, i8* %1777, align 1, !tbaa !2451
  %1779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1780 = trunc i64 %1776 to i32
  %1781 = and i32 %1780, 254
  %1782 = call i32 @llvm.ctpop.i32(i32 %1781) #16
  %1783 = trunc i32 %1782 to i8
  %1784 = and i8 %1783, 1
  %1785 = xor i8 %1784, 1
  store i8 %1785, i8* %1779, align 1, !tbaa !2451
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1786, align 1, !tbaa !2451
  %1787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1788 = icmp eq i64 %1776, 0
  %1789 = zext i1 %1788 to i8
  store i8 %1789, i8* %1787, align 1, !tbaa !2451
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1791 = lshr i64 %1776, 63
  %1792 = trunc i64 %1791 to i8
  store i8 %1792, i8* %1790, align 1, !tbaa !2451
  %1793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1793, align 1, !tbaa !2451
  %1794 = load i64, i64* %RAX
  %1795 = load i64, i64* %RCX
  %1796 = load i64, i64* %PC
  %1797 = add i64 %1796, 3
  store i64 %1797, i64* %PC
  %1798 = add i64 %1795, %1794
  store i64 %1798, i64* %RAX, align 8, !tbaa !2428
  %1799 = icmp ult i64 %1798, %1794
  %1800 = icmp ult i64 %1798, %1795
  %1801 = or i1 %1799, %1800
  %1802 = zext i1 %1801 to i8
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1802, i8* %1803, align 1, !tbaa !2432
  %1804 = trunc i64 %1798 to i32
  %1805 = and i32 %1804, 255
  %1806 = call i32 @llvm.ctpop.i32(i32 %1805) #16
  %1807 = trunc i32 %1806 to i8
  %1808 = and i8 %1807, 1
  %1809 = xor i8 %1808, 1
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1809, i8* %1810, align 1, !tbaa !2446
  %1811 = xor i64 %1795, %1794
  %1812 = xor i64 %1811, %1798
  %1813 = lshr i64 %1812, 4
  %1814 = trunc i64 %1813 to i8
  %1815 = and i8 %1814, 1
  %1816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1815, i8* %1816, align 1, !tbaa !2447
  %1817 = icmp eq i64 %1798, 0
  %1818 = zext i1 %1817 to i8
  %1819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1818, i8* %1819, align 1, !tbaa !2448
  %1820 = lshr i64 %1798, 63
  %1821 = trunc i64 %1820 to i8
  %1822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1821, i8* %1822, align 1, !tbaa !2449
  %1823 = lshr i64 %1794, 63
  %1824 = lshr i64 %1795, 63
  %1825 = xor i64 %1820, %1823
  %1826 = xor i64 %1820, %1824
  %1827 = add nuw nsw i64 %1825, %1826
  %1828 = icmp eq i64 %1827, 2
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1829, i8* %1830, align 1, !tbaa !2450
  %1831 = load i64, i64* %RAX
  %1832 = add i64 %1831, 48
  %1833 = load i64, i64* %PC
  %1834 = add i64 %1833, 4
  store i64 %1834, i64* %PC
  %1835 = inttoptr i64 %1832 to i64*
  %1836 = load i64, i64* %1835
  store i64 %1836, i64* %RAX, align 8, !tbaa !2428
  %1837 = load i64, i64* %RBP
  %1838 = sub i64 %1837, 16
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 4
  store i64 %1840, i64* %PC
  %1841 = inttoptr i64 %1838 to i64*
  %1842 = load i64, i64* %1841
  store i64 %1842, i64* %RCX, align 8, !tbaa !2428
  %1843 = load i64, i64* %RBP
  %1844 = sub i64 %1843, 56
  %1845 = load i64, i64* %PC
  %1846 = add i64 %1845, 4
  store i64 %1846, i64* %PC
  %1847 = inttoptr i64 %1844 to i64*
  %1848 = load i64, i64* %1847
  store i64 %1848, i64* %RDX, align 8, !tbaa !2428
  %1849 = load i64, i64* %RDX
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 4
  store i64 %1851, i64* %PC
  %1852 = sub i64 %1849, 1
  store i64 %1852, i64* %RDX, align 8, !tbaa !2428
  %1853 = icmp ult i64 %1849, 1
  %1854 = zext i1 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1854, i8* %1855, align 1, !tbaa !2432
  %1856 = trunc i64 %1852 to i32
  %1857 = and i32 %1856, 255
  %1858 = call i32 @llvm.ctpop.i32(i32 %1857) #16
  %1859 = trunc i32 %1858 to i8
  %1860 = and i8 %1859, 1
  %1861 = xor i8 %1860, 1
  %1862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1861, i8* %1862, align 1, !tbaa !2446
  %1863 = xor i64 1, %1849
  %1864 = xor i64 %1863, %1852
  %1865 = lshr i64 %1864, 4
  %1866 = trunc i64 %1865 to i8
  %1867 = and i8 %1866, 1
  %1868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1867, i8* %1868, align 1, !tbaa !2447
  %1869 = icmp eq i64 %1852, 0
  %1870 = zext i1 %1869 to i8
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1870, i8* %1871, align 1, !tbaa !2448
  %1872 = lshr i64 %1852, 63
  %1873 = trunc i64 %1872 to i8
  %1874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1873, i8* %1874, align 1, !tbaa !2449
  %1875 = lshr i64 %1849, 63
  %1876 = xor i64 %1872, %1875
  %1877 = add nuw nsw i64 %1876, %1875
  %1878 = icmp eq i64 %1877, 2
  %1879 = zext i1 %1878 to i8
  %1880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1879, i8* %1880, align 1, !tbaa !2450
  %1881 = load i64, i64* %RDX
  %1882 = load i64, i64* %PC
  %1883 = add i64 %1882, 4
  store i64 %1883, i64* %PC
  %1884 = shl i64 %1881, 5
  %1885 = icmp slt i64 %1884, 0
  %1886 = shl i64 %1884, 1
  store i64 %1886, i64* %RDX, align 8, !tbaa !2428
  %1887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1888 = zext i1 %1885 to i8
  store i8 %1888, i8* %1887, align 1, !tbaa !2451
  %1889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1890 = trunc i64 %1886 to i32
  %1891 = and i32 %1890, 254
  %1892 = call i32 @llvm.ctpop.i32(i32 %1891) #16
  %1893 = trunc i32 %1892 to i8
  %1894 = and i8 %1893, 1
  %1895 = xor i8 %1894, 1
  store i8 %1895, i8* %1889, align 1, !tbaa !2451
  %1896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1896, align 1, !tbaa !2451
  %1897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1898 = icmp eq i64 %1886, 0
  %1899 = zext i1 %1898 to i8
  store i8 %1899, i8* %1897, align 1, !tbaa !2451
  %1900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1901 = lshr i64 %1886, 63
  %1902 = trunc i64 %1901 to i8
  store i8 %1902, i8* %1900, align 1, !tbaa !2451
  %1903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1903, align 1, !tbaa !2451
  %1904 = load i64, i64* %RCX
  %1905 = load i64, i64* %RDX
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 3
  store i64 %1907, i64* %PC
  %1908 = add i64 %1905, %1904
  store i64 %1908, i64* %RCX, align 8, !tbaa !2428
  %1909 = icmp ult i64 %1908, %1904
  %1910 = icmp ult i64 %1908, %1905
  %1911 = or i1 %1909, %1910
  %1912 = zext i1 %1911 to i8
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1912, i8* %1913, align 1, !tbaa !2432
  %1914 = trunc i64 %1908 to i32
  %1915 = and i32 %1914, 255
  %1916 = call i32 @llvm.ctpop.i32(i32 %1915) #16
  %1917 = trunc i32 %1916 to i8
  %1918 = and i8 %1917, 1
  %1919 = xor i8 %1918, 1
  %1920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1919, i8* %1920, align 1, !tbaa !2446
  %1921 = xor i64 %1905, %1904
  %1922 = xor i64 %1921, %1908
  %1923 = lshr i64 %1922, 4
  %1924 = trunc i64 %1923 to i8
  %1925 = and i8 %1924, 1
  %1926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1925, i8* %1926, align 1, !tbaa !2447
  %1927 = icmp eq i64 %1908, 0
  %1928 = zext i1 %1927 to i8
  %1929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1928, i8* %1929, align 1, !tbaa !2448
  %1930 = lshr i64 %1908, 63
  %1931 = trunc i64 %1930 to i8
  %1932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1931, i8* %1932, align 1, !tbaa !2449
  %1933 = lshr i64 %1904, 63
  %1934 = lshr i64 %1905, 63
  %1935 = xor i64 %1930, %1933
  %1936 = xor i64 %1930, %1934
  %1937 = add nuw nsw i64 %1935, %1936
  %1938 = icmp eq i64 %1937, 2
  %1939 = zext i1 %1938 to i8
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1939, i8* %1940, align 1, !tbaa !2450
  %1941 = load i64, i64* %RCX
  %1942 = add i64 %1941, 48
  %1943 = load i64, i64* %RAX
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 4
  store i64 %1945, i64* %PC
  %1946 = inttoptr i64 %1942 to i64*
  store i64 %1943, i64* %1946
  %1947 = load i64, i64* %RBP
  %1948 = sub i64 %1947, 24
  %1949 = load i64, i64* %PC
  %1950 = add i64 %1949, 4
  store i64 %1950, i64* %PC
  %1951 = inttoptr i64 %1948 to i64*
  %1952 = load i64, i64* %1951
  store i64 %1952, i64* %RAX, align 8, !tbaa !2428
  %1953 = load i64, i64* %RBP
  %1954 = sub i64 %1953, 16
  %1955 = load i64, i64* %PC
  %1956 = add i64 %1955, 4
  store i64 %1956, i64* %PC
  %1957 = inttoptr i64 %1954 to i64*
  %1958 = load i64, i64* %1957
  store i64 %1958, i64* %RCX, align 8, !tbaa !2428
  %1959 = load i64, i64* %RBP
  %1960 = sub i64 %1959, 64
  %1961 = load i64, i64* %PC
  %1962 = add i64 %1961, 4
  store i64 %1962, i64* %PC
  %1963 = inttoptr i64 %1960 to i64*
  %1964 = load i64, i64* %1963
  store i64 %1964, i64* %RDX, align 8, !tbaa !2428
  %1965 = load i64, i64* %RDX
  %1966 = load i64, i64* %PC
  %1967 = add i64 %1966, 4
  store i64 %1967, i64* %PC
  %1968 = sub i64 %1965, 1
  store i64 %1968, i64* %RDX, align 8, !tbaa !2428
  %1969 = icmp ult i64 %1965, 1
  %1970 = zext i1 %1969 to i8
  %1971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1970, i8* %1971, align 1, !tbaa !2432
  %1972 = trunc i64 %1968 to i32
  %1973 = and i32 %1972, 255
  %1974 = call i32 @llvm.ctpop.i32(i32 %1973) #16
  %1975 = trunc i32 %1974 to i8
  %1976 = and i8 %1975, 1
  %1977 = xor i8 %1976, 1
  %1978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1977, i8* %1978, align 1, !tbaa !2446
  %1979 = xor i64 1, %1965
  %1980 = xor i64 %1979, %1968
  %1981 = lshr i64 %1980, 4
  %1982 = trunc i64 %1981 to i8
  %1983 = and i8 %1982, 1
  %1984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1983, i8* %1984, align 1, !tbaa !2447
  %1985 = icmp eq i64 %1968, 0
  %1986 = zext i1 %1985 to i8
  %1987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1986, i8* %1987, align 1, !tbaa !2448
  %1988 = lshr i64 %1968, 63
  %1989 = trunc i64 %1988 to i8
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1989, i8* %1990, align 1, !tbaa !2449
  %1991 = lshr i64 %1965, 63
  %1992 = xor i64 %1988, %1991
  %1993 = add nuw nsw i64 %1992, %1991
  %1994 = icmp eq i64 %1993, 2
  %1995 = zext i1 %1994 to i8
  %1996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1995, i8* %1996, align 1, !tbaa !2450
  %1997 = load i64, i64* %RDX
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 4
  store i64 %1999, i64* %PC
  %2000 = shl i64 %1997, 5
  %2001 = icmp slt i64 %2000, 0
  %2002 = shl i64 %2000, 1
  store i64 %2002, i64* %RDX, align 8, !tbaa !2428
  %2003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2004 = zext i1 %2001 to i8
  store i8 %2004, i8* %2003, align 1, !tbaa !2451
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2006 = trunc i64 %2002 to i32
  %2007 = and i32 %2006, 254
  %2008 = call i32 @llvm.ctpop.i32(i32 %2007) #16
  %2009 = trunc i32 %2008 to i8
  %2010 = and i8 %2009, 1
  %2011 = xor i8 %2010, 1
  store i8 %2011, i8* %2005, align 1, !tbaa !2451
  %2012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2012, align 1, !tbaa !2451
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2014 = icmp eq i64 %2002, 0
  %2015 = zext i1 %2014 to i8
  store i8 %2015, i8* %2013, align 1, !tbaa !2451
  %2016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2017 = lshr i64 %2002, 63
  %2018 = trunc i64 %2017 to i8
  store i8 %2018, i8* %2016, align 1, !tbaa !2451
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2019, align 1, !tbaa !2451
  %2020 = load i64, i64* %RCX
  %2021 = load i64, i64* %RDX
  %2022 = load i64, i64* %PC
  %2023 = add i64 %2022, 3
  store i64 %2023, i64* %PC
  %2024 = add i64 %2021, %2020
  store i64 %2024, i64* %RCX, align 8, !tbaa !2428
  %2025 = icmp ult i64 %2024, %2020
  %2026 = icmp ult i64 %2024, %2021
  %2027 = or i1 %2025, %2026
  %2028 = zext i1 %2027 to i8
  %2029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2028, i8* %2029, align 1, !tbaa !2432
  %2030 = trunc i64 %2024 to i32
  %2031 = and i32 %2030, 255
  %2032 = call i32 @llvm.ctpop.i32(i32 %2031) #16
  %2033 = trunc i32 %2032 to i8
  %2034 = and i8 %2033, 1
  %2035 = xor i8 %2034, 1
  %2036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2035, i8* %2036, align 1, !tbaa !2446
  %2037 = xor i64 %2021, %2020
  %2038 = xor i64 %2037, %2024
  %2039 = lshr i64 %2038, 4
  %2040 = trunc i64 %2039 to i8
  %2041 = and i8 %2040, 1
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2041, i8* %2042, align 1, !tbaa !2447
  %2043 = icmp eq i64 %2024, 0
  %2044 = zext i1 %2043 to i8
  %2045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2044, i8* %2045, align 1, !tbaa !2448
  %2046 = lshr i64 %2024, 63
  %2047 = trunc i64 %2046 to i8
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2047, i8* %2048, align 1, !tbaa !2449
  %2049 = lshr i64 %2020, 63
  %2050 = lshr i64 %2021, 63
  %2051 = xor i64 %2046, %2049
  %2052 = xor i64 %2046, %2050
  %2053 = add nuw nsw i64 %2051, %2052
  %2054 = icmp eq i64 %2053, 2
  %2055 = zext i1 %2054 to i8
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2055, i8* %2056, align 1, !tbaa !2450
  %2057 = load i64, i64* %RCX
  %2058 = add i64 %2057, 8
  %2059 = load i64, i64* %RAX
  %2060 = load i64, i64* %PC
  %2061 = add i64 %2060, 4
  store i64 %2061, i64* %PC
  %2062 = inttoptr i64 %2058 to i64*
  store i64 %2059, i64* %2062
  %2063 = load i64, i64* %RBP
  %2064 = sub i64 %2063, 32
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 4
  store i64 %2066, i64* %PC
  %2067 = inttoptr i64 %2064 to i64*
  %2068 = load i64, i64* %2067
  store i64 %2068, i64* %RAX, align 8, !tbaa !2428
  %2069 = load i64, i64* %RBP
  %2070 = sub i64 %2069, 16
  %2071 = load i64, i64* %PC
  %2072 = add i64 %2071, 4
  store i64 %2072, i64* %PC
  %2073 = inttoptr i64 %2070 to i64*
  %2074 = load i64, i64* %2073
  store i64 %2074, i64* %RCX, align 8, !tbaa !2428
  %2075 = load i64, i64* %RBP
  %2076 = sub i64 %2075, 64
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 4
  store i64 %2078, i64* %PC
  %2079 = inttoptr i64 %2076 to i64*
  %2080 = load i64, i64* %2079
  store i64 %2080, i64* %RDX, align 8, !tbaa !2428
  %2081 = load i64, i64* %RDX
  %2082 = load i64, i64* %PC
  %2083 = add i64 %2082, 4
  store i64 %2083, i64* %PC
  %2084 = sub i64 %2081, 1
  store i64 %2084, i64* %RDX, align 8, !tbaa !2428
  %2085 = icmp ult i64 %2081, 1
  %2086 = zext i1 %2085 to i8
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2086, i8* %2087, align 1, !tbaa !2432
  %2088 = trunc i64 %2084 to i32
  %2089 = and i32 %2088, 255
  %2090 = call i32 @llvm.ctpop.i32(i32 %2089) #16
  %2091 = trunc i32 %2090 to i8
  %2092 = and i8 %2091, 1
  %2093 = xor i8 %2092, 1
  %2094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2093, i8* %2094, align 1, !tbaa !2446
  %2095 = xor i64 1, %2081
  %2096 = xor i64 %2095, %2084
  %2097 = lshr i64 %2096, 4
  %2098 = trunc i64 %2097 to i8
  %2099 = and i8 %2098, 1
  %2100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2099, i8* %2100, align 1, !tbaa !2447
  %2101 = icmp eq i64 %2084, 0
  %2102 = zext i1 %2101 to i8
  %2103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2102, i8* %2103, align 1, !tbaa !2448
  %2104 = lshr i64 %2084, 63
  %2105 = trunc i64 %2104 to i8
  %2106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2105, i8* %2106, align 1, !tbaa !2449
  %2107 = lshr i64 %2081, 63
  %2108 = xor i64 %2104, %2107
  %2109 = add nuw nsw i64 %2108, %2107
  %2110 = icmp eq i64 %2109, 2
  %2111 = zext i1 %2110 to i8
  %2112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2111, i8* %2112, align 1, !tbaa !2450
  %2113 = load i64, i64* %RDX
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 4
  store i64 %2115, i64* %PC
  %2116 = shl i64 %2113, 5
  %2117 = icmp slt i64 %2116, 0
  %2118 = shl i64 %2116, 1
  store i64 %2118, i64* %RDX, align 8, !tbaa !2428
  %2119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2120 = zext i1 %2117 to i8
  store i8 %2120, i8* %2119, align 1, !tbaa !2451
  %2121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2122 = trunc i64 %2118 to i32
  %2123 = and i32 %2122, 254
  %2124 = call i32 @llvm.ctpop.i32(i32 %2123) #16
  %2125 = trunc i32 %2124 to i8
  %2126 = and i8 %2125, 1
  %2127 = xor i8 %2126, 1
  store i8 %2127, i8* %2121, align 1, !tbaa !2451
  %2128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2128, align 1, !tbaa !2451
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2130 = icmp eq i64 %2118, 0
  %2131 = zext i1 %2130 to i8
  store i8 %2131, i8* %2129, align 1, !tbaa !2451
  %2132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2133 = lshr i64 %2118, 63
  %2134 = trunc i64 %2133 to i8
  store i8 %2134, i8* %2132, align 1, !tbaa !2451
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2135, align 1, !tbaa !2451
  %2136 = load i64, i64* %RCX
  %2137 = load i64, i64* %RDX
  %2138 = load i64, i64* %PC
  %2139 = add i64 %2138, 3
  store i64 %2139, i64* %PC
  %2140 = add i64 %2137, %2136
  store i64 %2140, i64* %RCX, align 8, !tbaa !2428
  %2141 = icmp ult i64 %2140, %2136
  %2142 = icmp ult i64 %2140, %2137
  %2143 = or i1 %2141, %2142
  %2144 = zext i1 %2143 to i8
  %2145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2144, i8* %2145, align 1, !tbaa !2432
  %2146 = trunc i64 %2140 to i32
  %2147 = and i32 %2146, 255
  %2148 = call i32 @llvm.ctpop.i32(i32 %2147) #16
  %2149 = trunc i32 %2148 to i8
  %2150 = and i8 %2149, 1
  %2151 = xor i8 %2150, 1
  %2152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2151, i8* %2152, align 1, !tbaa !2446
  %2153 = xor i64 %2137, %2136
  %2154 = xor i64 %2153, %2140
  %2155 = lshr i64 %2154, 4
  %2156 = trunc i64 %2155 to i8
  %2157 = and i8 %2156, 1
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2157, i8* %2158, align 1, !tbaa !2447
  %2159 = icmp eq i64 %2140, 0
  %2160 = zext i1 %2159 to i8
  %2161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2160, i8* %2161, align 1, !tbaa !2448
  %2162 = lshr i64 %2140, 63
  %2163 = trunc i64 %2162 to i8
  %2164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2163, i8* %2164, align 1, !tbaa !2449
  %2165 = lshr i64 %2136, 63
  %2166 = lshr i64 %2137, 63
  %2167 = xor i64 %2162, %2165
  %2168 = xor i64 %2162, %2166
  %2169 = add nuw nsw i64 %2167, %2168
  %2170 = icmp eq i64 %2169, 2
  %2171 = zext i1 %2170 to i8
  %2172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2171, i8* %2172, align 1, !tbaa !2450
  %2173 = load i64, i64* %RCX
  %2174 = add i64 %2173, 16
  %2175 = load i64, i64* %RAX
  %2176 = load i64, i64* %PC
  %2177 = add i64 %2176, 4
  store i64 %2177, i64* %PC
  %2178 = inttoptr i64 %2174 to i64*
  store i64 %2175, i64* %2178
  %2179 = load i64, i64* %RBP
  %2180 = sub i64 %2179, 40
  %2181 = load i64, i64* %PC
  %2182 = add i64 %2181, 4
  store i64 %2182, i64* %PC
  %2183 = inttoptr i64 %2180 to i64*
  %2184 = load i64, i64* %2183
  store i64 %2184, i64* %RAX, align 8, !tbaa !2428
  %2185 = load i64, i64* %RBP
  %2186 = sub i64 %2185, 16
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 4
  store i64 %2188, i64* %PC
  %2189 = inttoptr i64 %2186 to i64*
  %2190 = load i64, i64* %2189
  store i64 %2190, i64* %RCX, align 8, !tbaa !2428
  %2191 = load i64, i64* %RBP
  %2192 = sub i64 %2191, 64
  %2193 = load i64, i64* %PC
  %2194 = add i64 %2193, 4
  store i64 %2194, i64* %PC
  %2195 = inttoptr i64 %2192 to i64*
  %2196 = load i64, i64* %2195
  store i64 %2196, i64* %RDX, align 8, !tbaa !2428
  %2197 = load i64, i64* %RDX
  %2198 = load i64, i64* %PC
  %2199 = add i64 %2198, 4
  store i64 %2199, i64* %PC
  %2200 = sub i64 %2197, 1
  store i64 %2200, i64* %RDX, align 8, !tbaa !2428
  %2201 = icmp ult i64 %2197, 1
  %2202 = zext i1 %2201 to i8
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2202, i8* %2203, align 1, !tbaa !2432
  %2204 = trunc i64 %2200 to i32
  %2205 = and i32 %2204, 255
  %2206 = call i32 @llvm.ctpop.i32(i32 %2205) #16
  %2207 = trunc i32 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = xor i8 %2208, 1
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2209, i8* %2210, align 1, !tbaa !2446
  %2211 = xor i64 1, %2197
  %2212 = xor i64 %2211, %2200
  %2213 = lshr i64 %2212, 4
  %2214 = trunc i64 %2213 to i8
  %2215 = and i8 %2214, 1
  %2216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2215, i8* %2216, align 1, !tbaa !2447
  %2217 = icmp eq i64 %2200, 0
  %2218 = zext i1 %2217 to i8
  %2219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2218, i8* %2219, align 1, !tbaa !2448
  %2220 = lshr i64 %2200, 63
  %2221 = trunc i64 %2220 to i8
  %2222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2221, i8* %2222, align 1, !tbaa !2449
  %2223 = lshr i64 %2197, 63
  %2224 = xor i64 %2220, %2223
  %2225 = add nuw nsw i64 %2224, %2223
  %2226 = icmp eq i64 %2225, 2
  %2227 = zext i1 %2226 to i8
  %2228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2227, i8* %2228, align 1, !tbaa !2450
  %2229 = load i64, i64* %RDX
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 4
  store i64 %2231, i64* %PC
  %2232 = shl i64 %2229, 5
  %2233 = icmp slt i64 %2232, 0
  %2234 = shl i64 %2232, 1
  store i64 %2234, i64* %RDX, align 8, !tbaa !2428
  %2235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2236 = zext i1 %2233 to i8
  store i8 %2236, i8* %2235, align 1, !tbaa !2451
  %2237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2238 = trunc i64 %2234 to i32
  %2239 = and i32 %2238, 254
  %2240 = call i32 @llvm.ctpop.i32(i32 %2239) #16
  %2241 = trunc i32 %2240 to i8
  %2242 = and i8 %2241, 1
  %2243 = xor i8 %2242, 1
  store i8 %2243, i8* %2237, align 1, !tbaa !2451
  %2244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2244, align 1, !tbaa !2451
  %2245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2246 = icmp eq i64 %2234, 0
  %2247 = zext i1 %2246 to i8
  store i8 %2247, i8* %2245, align 1, !tbaa !2451
  %2248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2249 = lshr i64 %2234, 63
  %2250 = trunc i64 %2249 to i8
  store i8 %2250, i8* %2248, align 1, !tbaa !2451
  %2251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2251, align 1, !tbaa !2451
  %2252 = load i64, i64* %RCX
  %2253 = load i64, i64* %RDX
  %2254 = load i64, i64* %PC
  %2255 = add i64 %2254, 3
  store i64 %2255, i64* %PC
  %2256 = add i64 %2253, %2252
  store i64 %2256, i64* %RCX, align 8, !tbaa !2428
  %2257 = icmp ult i64 %2256, %2252
  %2258 = icmp ult i64 %2256, %2253
  %2259 = or i1 %2257, %2258
  %2260 = zext i1 %2259 to i8
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2260, i8* %2261, align 1, !tbaa !2432
  %2262 = trunc i64 %2256 to i32
  %2263 = and i32 %2262, 255
  %2264 = call i32 @llvm.ctpop.i32(i32 %2263) #16
  %2265 = trunc i32 %2264 to i8
  %2266 = and i8 %2265, 1
  %2267 = xor i8 %2266, 1
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2267, i8* %2268, align 1, !tbaa !2446
  %2269 = xor i64 %2253, %2252
  %2270 = xor i64 %2269, %2256
  %2271 = lshr i64 %2270, 4
  %2272 = trunc i64 %2271 to i8
  %2273 = and i8 %2272, 1
  %2274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2273, i8* %2274, align 1, !tbaa !2447
  %2275 = icmp eq i64 %2256, 0
  %2276 = zext i1 %2275 to i8
  %2277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2276, i8* %2277, align 1, !tbaa !2448
  %2278 = lshr i64 %2256, 63
  %2279 = trunc i64 %2278 to i8
  %2280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2279, i8* %2280, align 1, !tbaa !2449
  %2281 = lshr i64 %2252, 63
  %2282 = lshr i64 %2253, 63
  %2283 = xor i64 %2278, %2281
  %2284 = xor i64 %2278, %2282
  %2285 = add nuw nsw i64 %2283, %2284
  %2286 = icmp eq i64 %2285, 2
  %2287 = zext i1 %2286 to i8
  %2288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2287, i8* %2288, align 1, !tbaa !2450
  %2289 = load i64, i64* %RCX
  %2290 = load i64, i64* %RAX
  %2291 = load i64, i64* %PC
  %2292 = add i64 %2291, 3
  store i64 %2292, i64* %PC
  %2293 = inttoptr i64 %2289 to i64*
  store i64 %2290, i64* %2293
  %2294 = load i64, i64* %RBP
  %2295 = sub i64 %2294, 40
  %2296 = load i64, i64* %PC
  %2297 = add i64 %2296, 4
  store i64 %2297, i64* %PC
  %2298 = inttoptr i64 %2295 to i64*
  %2299 = load i64, i64* %2298
  store i64 %2299, i64* %RAX, align 8, !tbaa !2428
  %2300 = load i64, i64* %RBP
  %2301 = sub i64 %2300, 16
  %2302 = load i64, i64* %PC
  %2303 = add i64 %2302, 4
  store i64 %2303, i64* %PC
  %2304 = inttoptr i64 %2301 to i64*
  %2305 = load i64, i64* %2304
  store i64 %2305, i64* %RCX, align 8, !tbaa !2428
  %2306 = load i64, i64* %RBP
  %2307 = sub i64 %2306, 64
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 4
  store i64 %2309, i64* %PC
  %2310 = inttoptr i64 %2307 to i64*
  %2311 = load i64, i64* %2310
  store i64 %2311, i64* %RDX, align 8, !tbaa !2428
  %2312 = load i64, i64* %RDX
  %2313 = load i64, i64* %PC
  %2314 = add i64 %2313, 4
  store i64 %2314, i64* %PC
  %2315 = sub i64 %2312, 1
  store i64 %2315, i64* %RDX, align 8, !tbaa !2428
  %2316 = icmp ult i64 %2312, 1
  %2317 = zext i1 %2316 to i8
  %2318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2317, i8* %2318, align 1, !tbaa !2432
  %2319 = trunc i64 %2315 to i32
  %2320 = and i32 %2319, 255
  %2321 = call i32 @llvm.ctpop.i32(i32 %2320) #16
  %2322 = trunc i32 %2321 to i8
  %2323 = and i8 %2322, 1
  %2324 = xor i8 %2323, 1
  %2325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2324, i8* %2325, align 1, !tbaa !2446
  %2326 = xor i64 1, %2312
  %2327 = xor i64 %2326, %2315
  %2328 = lshr i64 %2327, 4
  %2329 = trunc i64 %2328 to i8
  %2330 = and i8 %2329, 1
  %2331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2330, i8* %2331, align 1, !tbaa !2447
  %2332 = icmp eq i64 %2315, 0
  %2333 = zext i1 %2332 to i8
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2333, i8* %2334, align 1, !tbaa !2448
  %2335 = lshr i64 %2315, 63
  %2336 = trunc i64 %2335 to i8
  %2337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2336, i8* %2337, align 1, !tbaa !2449
  %2338 = lshr i64 %2312, 63
  %2339 = xor i64 %2335, %2338
  %2340 = add nuw nsw i64 %2339, %2338
  %2341 = icmp eq i64 %2340, 2
  %2342 = zext i1 %2341 to i8
  %2343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2342, i8* %2343, align 1, !tbaa !2450
  %2344 = load i64, i64* %RDX
  %2345 = load i64, i64* %PC
  %2346 = add i64 %2345, 4
  store i64 %2346, i64* %PC
  %2347 = shl i64 %2344, 5
  %2348 = icmp slt i64 %2347, 0
  %2349 = shl i64 %2347, 1
  store i64 %2349, i64* %RDX, align 8, !tbaa !2428
  %2350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2351 = zext i1 %2348 to i8
  store i8 %2351, i8* %2350, align 1, !tbaa !2451
  %2352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2353 = trunc i64 %2349 to i32
  %2354 = and i32 %2353, 254
  %2355 = call i32 @llvm.ctpop.i32(i32 %2354) #16
  %2356 = trunc i32 %2355 to i8
  %2357 = and i8 %2356, 1
  %2358 = xor i8 %2357, 1
  store i8 %2358, i8* %2352, align 1, !tbaa !2451
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2359, align 1, !tbaa !2451
  %2360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2361 = icmp eq i64 %2349, 0
  %2362 = zext i1 %2361 to i8
  store i8 %2362, i8* %2360, align 1, !tbaa !2451
  %2363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2364 = lshr i64 %2349, 63
  %2365 = trunc i64 %2364 to i8
  store i8 %2365, i8* %2363, align 1, !tbaa !2451
  %2366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2366, align 1, !tbaa !2451
  %2367 = load i64, i64* %RCX
  %2368 = load i64, i64* %RDX
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 3
  store i64 %2370, i64* %PC
  %2371 = add i64 %2368, %2367
  store i64 %2371, i64* %RCX, align 8, !tbaa !2428
  %2372 = icmp ult i64 %2371, %2367
  %2373 = icmp ult i64 %2371, %2368
  %2374 = or i1 %2372, %2373
  %2375 = zext i1 %2374 to i8
  %2376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2375, i8* %2376, align 1, !tbaa !2432
  %2377 = trunc i64 %2371 to i32
  %2378 = and i32 %2377, 255
  %2379 = call i32 @llvm.ctpop.i32(i32 %2378) #16
  %2380 = trunc i32 %2379 to i8
  %2381 = and i8 %2380, 1
  %2382 = xor i8 %2381, 1
  %2383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2382, i8* %2383, align 1, !tbaa !2446
  %2384 = xor i64 %2368, %2367
  %2385 = xor i64 %2384, %2371
  %2386 = lshr i64 %2385, 4
  %2387 = trunc i64 %2386 to i8
  %2388 = and i8 %2387, 1
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2388, i8* %2389, align 1, !tbaa !2447
  %2390 = icmp eq i64 %2371, 0
  %2391 = zext i1 %2390 to i8
  %2392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2391, i8* %2392, align 1, !tbaa !2448
  %2393 = lshr i64 %2371, 63
  %2394 = trunc i64 %2393 to i8
  %2395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2394, i8* %2395, align 1, !tbaa !2449
  %2396 = lshr i64 %2367, 63
  %2397 = lshr i64 %2368, 63
  %2398 = xor i64 %2393, %2396
  %2399 = xor i64 %2393, %2397
  %2400 = add nuw nsw i64 %2398, %2399
  %2401 = icmp eq i64 %2400, 2
  %2402 = zext i1 %2401 to i8
  %2403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2402, i8* %2403, align 1, !tbaa !2450
  %2404 = load i64, i64* %RCX
  %2405 = add i64 %2404, 56
  %2406 = load i64, i64* %RAX
  %2407 = load i64, i64* %PC
  %2408 = add i64 %2407, 4
  store i64 %2408, i64* %PC
  %2409 = inttoptr i64 %2405 to i64*
  store i64 %2406, i64* %2409
  %2410 = load i64, i64* %RBP
  %2411 = sub i64 %2410, 48
  %2412 = load i64, i64* %PC
  %2413 = add i64 %2412, 4
  store i64 %2413, i64* %PC
  %2414 = inttoptr i64 %2411 to i64*
  %2415 = load i64, i64* %2414
  store i64 %2415, i64* %RAX, align 8, !tbaa !2428
  %2416 = load i64, i64* %RBP
  %2417 = sub i64 %2416, 16
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 4
  store i64 %2419, i64* %PC
  %2420 = inttoptr i64 %2417 to i64*
  %2421 = load i64, i64* %2420
  store i64 %2421, i64* %RCX, align 8, !tbaa !2428
  %2422 = load i64, i64* %RBP
  %2423 = sub i64 %2422, 64
  %2424 = load i64, i64* %PC
  %2425 = add i64 %2424, 4
  store i64 %2425, i64* %PC
  %2426 = inttoptr i64 %2423 to i64*
  %2427 = load i64, i64* %2426
  store i64 %2427, i64* %RDX, align 8, !tbaa !2428
  %2428 = load i64, i64* %RDX
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 4
  store i64 %2430, i64* %PC
  %2431 = sub i64 %2428, 1
  store i64 %2431, i64* %RDX, align 8, !tbaa !2428
  %2432 = icmp ult i64 %2428, 1
  %2433 = zext i1 %2432 to i8
  %2434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2433, i8* %2434, align 1, !tbaa !2432
  %2435 = trunc i64 %2431 to i32
  %2436 = and i32 %2435, 255
  %2437 = call i32 @llvm.ctpop.i32(i32 %2436) #16
  %2438 = trunc i32 %2437 to i8
  %2439 = and i8 %2438, 1
  %2440 = xor i8 %2439, 1
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2440, i8* %2441, align 1, !tbaa !2446
  %2442 = xor i64 1, %2428
  %2443 = xor i64 %2442, %2431
  %2444 = lshr i64 %2443, 4
  %2445 = trunc i64 %2444 to i8
  %2446 = and i8 %2445, 1
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2446, i8* %2447, align 1, !tbaa !2447
  %2448 = icmp eq i64 %2431, 0
  %2449 = zext i1 %2448 to i8
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2449, i8* %2450, align 1, !tbaa !2448
  %2451 = lshr i64 %2431, 63
  %2452 = trunc i64 %2451 to i8
  %2453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2452, i8* %2453, align 1, !tbaa !2449
  %2454 = lshr i64 %2428, 63
  %2455 = xor i64 %2451, %2454
  %2456 = add nuw nsw i64 %2455, %2454
  %2457 = icmp eq i64 %2456, 2
  %2458 = zext i1 %2457 to i8
  %2459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2458, i8* %2459, align 1, !tbaa !2450
  %2460 = load i64, i64* %RDX
  %2461 = load i64, i64* %PC
  %2462 = add i64 %2461, 4
  store i64 %2462, i64* %PC
  %2463 = shl i64 %2460, 5
  %2464 = icmp slt i64 %2463, 0
  %2465 = shl i64 %2463, 1
  store i64 %2465, i64* %RDX, align 8, !tbaa !2428
  %2466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2467 = zext i1 %2464 to i8
  store i8 %2467, i8* %2466, align 1, !tbaa !2451
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2469 = trunc i64 %2465 to i32
  %2470 = and i32 %2469, 254
  %2471 = call i32 @llvm.ctpop.i32(i32 %2470) #16
  %2472 = trunc i32 %2471 to i8
  %2473 = and i8 %2472, 1
  %2474 = xor i8 %2473, 1
  store i8 %2474, i8* %2468, align 1, !tbaa !2451
  %2475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2475, align 1, !tbaa !2451
  %2476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2477 = icmp eq i64 %2465, 0
  %2478 = zext i1 %2477 to i8
  store i8 %2478, i8* %2476, align 1, !tbaa !2451
  %2479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2480 = lshr i64 %2465, 63
  %2481 = trunc i64 %2480 to i8
  store i8 %2481, i8* %2479, align 1, !tbaa !2451
  %2482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2482, align 1, !tbaa !2451
  %2483 = load i64, i64* %RCX
  %2484 = load i64, i64* %RDX
  %2485 = load i64, i64* %PC
  %2486 = add i64 %2485, 3
  store i64 %2486, i64* %PC
  %2487 = add i64 %2484, %2483
  store i64 %2487, i64* %RCX, align 8, !tbaa !2428
  %2488 = icmp ult i64 %2487, %2483
  %2489 = icmp ult i64 %2487, %2484
  %2490 = or i1 %2488, %2489
  %2491 = zext i1 %2490 to i8
  %2492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2491, i8* %2492, align 1, !tbaa !2432
  %2493 = trunc i64 %2487 to i32
  %2494 = and i32 %2493, 255
  %2495 = call i32 @llvm.ctpop.i32(i32 %2494) #16
  %2496 = trunc i32 %2495 to i8
  %2497 = and i8 %2496, 1
  %2498 = xor i8 %2497, 1
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2498, i8* %2499, align 1, !tbaa !2446
  %2500 = xor i64 %2484, %2483
  %2501 = xor i64 %2500, %2487
  %2502 = lshr i64 %2501, 4
  %2503 = trunc i64 %2502 to i8
  %2504 = and i8 %2503, 1
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2504, i8* %2505, align 1, !tbaa !2447
  %2506 = icmp eq i64 %2487, 0
  %2507 = zext i1 %2506 to i8
  %2508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2507, i8* %2508, align 1, !tbaa !2448
  %2509 = lshr i64 %2487, 63
  %2510 = trunc i64 %2509 to i8
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2510, i8* %2511, align 1, !tbaa !2449
  %2512 = lshr i64 %2483, 63
  %2513 = lshr i64 %2484, 63
  %2514 = xor i64 %2509, %2512
  %2515 = xor i64 %2509, %2513
  %2516 = add nuw nsw i64 %2514, %2515
  %2517 = icmp eq i64 %2516, 2
  %2518 = zext i1 %2517 to i8
  %2519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2518, i8* %2519, align 1, !tbaa !2450
  %2520 = load i64, i64* %RCX
  %2521 = add i64 %2520, 48
  %2522 = load i64, i64* %RAX
  %2523 = load i64, i64* %PC
  %2524 = add i64 %2523, 4
  store i64 %2524, i64* %PC
  %2525 = inttoptr i64 %2521 to i64*
  store i64 %2522, i64* %2525
  %2526 = load i64, i64* %RBP
  %2527 = sub i64 %2526, 64
  %2528 = load i64, i64* %PC
  %2529 = add i64 %2528, 4
  store i64 %2529, i64* %PC
  %2530 = inttoptr i64 %2527 to i64*
  %2531 = load i64, i64* %2530
  store i64 %2531, i64* %RAX, align 8, !tbaa !2428
  %2532 = load i64, i64* %RBP
  %2533 = sub i64 %2532, 56
  %2534 = load i64, i64* %RAX
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 4
  store i64 %2536, i64* %PC
  %2537 = inttoptr i64 %2533 to i64*
  store i64 %2534, i64* %2537
  %2538 = load i64, i64* %RBP
  %2539 = sub i64 %2538, 64
  %2540 = load i64, i64* %PC
  %2541 = add i64 %2540, 4
  store i64 %2541, i64* %PC
  %2542 = inttoptr i64 %2539 to i64*
  %2543 = load i64, i64* %2542
  store i64 %2543, i64* %RAX, align 8, !tbaa !2428
  %2544 = load i64, i64* %RAX
  %2545 = load i64, i64* %PC
  %2546 = add i64 %2545, 4
  store i64 %2546, i64* %PC
  %2547 = shl i64 %2544, 1
  %2548 = icmp slt i64 %2544, 0
  %2549 = icmp slt i64 %2547, 0
  %2550 = xor i1 %2548, %2549
  store i64 %2547, i64* %RAX, align 8, !tbaa !2428
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2552 = zext i1 %2548 to i8
  store i8 %2552, i8* %2551, align 1, !tbaa !2451
  %2553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2554 = trunc i64 %2547 to i32
  %2555 = and i32 %2554, 254
  %2556 = call i32 @llvm.ctpop.i32(i32 %2555) #16
  %2557 = trunc i32 %2556 to i8
  %2558 = and i8 %2557, 1
  %2559 = xor i8 %2558, 1
  store i8 %2559, i8* %2553, align 1, !tbaa !2451
  %2560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2560, align 1, !tbaa !2451
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2562 = icmp eq i64 %2547, 0
  %2563 = zext i1 %2562 to i8
  store i8 %2563, i8* %2561, align 1, !tbaa !2451
  %2564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2565 = lshr i64 %2547, 63
  %2566 = trunc i64 %2565 to i8
  store i8 %2566, i8* %2564, align 1, !tbaa !2451
  %2567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2568 = zext i1 %2550 to i8
  store i8 %2568, i8* %2567, align 1, !tbaa !2451
  %2569 = load i64, i64* %RBP
  %2570 = sub i64 %2569, 64
  %2571 = load i64, i64* %RAX
  %2572 = load i64, i64* %PC
  %2573 = add i64 %2572, 4
  store i64 %2573, i64* %PC
  %2574 = inttoptr i64 %2570 to i64*
  store i64 %2571, i64* %2574
  %2575 = load i64, i64* %RBP
  %2576 = sub i64 %2575, 64
  %2577 = load i64, i64* %PC
  %2578 = add i64 %2577, 4
  store i64 %2578, i64* %PC
  %2579 = inttoptr i64 %2576 to i64*
  %2580 = load i64, i64* %2579
  store i64 %2580, i64* %RAX, align 8, !tbaa !2428
  %2581 = load i64, i64* %RAX
  %2582 = load i64, i64* %PC
  %2583 = add i64 %2582, 4
  store i64 %2583, i64* %PC
  %2584 = add i64 1, %2581
  store i64 %2584, i64* %RAX, align 8, !tbaa !2428
  %2585 = icmp ult i64 %2584, %2581
  %2586 = icmp ult i64 %2584, 1
  %2587 = or i1 %2585, %2586
  %2588 = zext i1 %2587 to i8
  %2589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2588, i8* %2589, align 1, !tbaa !2432
  %2590 = trunc i64 %2584 to i32
  %2591 = and i32 %2590, 255
  %2592 = call i32 @llvm.ctpop.i32(i32 %2591) #16
  %2593 = trunc i32 %2592 to i8
  %2594 = and i8 %2593, 1
  %2595 = xor i8 %2594, 1
  %2596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2595, i8* %2596, align 1, !tbaa !2446
  %2597 = xor i64 1, %2581
  %2598 = xor i64 %2597, %2584
  %2599 = lshr i64 %2598, 4
  %2600 = trunc i64 %2599 to i8
  %2601 = and i8 %2600, 1
  %2602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2601, i8* %2602, align 1, !tbaa !2447
  %2603 = icmp eq i64 %2584, 0
  %2604 = zext i1 %2603 to i8
  %2605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2604, i8* %2605, align 1, !tbaa !2448
  %2606 = lshr i64 %2584, 63
  %2607 = trunc i64 %2606 to i8
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2607, i8* %2608, align 1, !tbaa !2449
  %2609 = lshr i64 %2581, 63
  %2610 = xor i64 %2606, %2609
  %2611 = add nuw nsw i64 %2610, %2606
  %2612 = icmp eq i64 %2611, 2
  %2613 = zext i1 %2612 to i8
  %2614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2613, i8* %2614, align 1, !tbaa !2450
  %2615 = load i64, i64* %RBP
  %2616 = sub i64 %2615, 8
  %2617 = load i64, i64* %PC
  %2618 = add i64 %2617, 4
  store i64 %2618, i64* %PC
  %2619 = inttoptr i64 %2616 to i64*
  %2620 = load i64, i64* %2619
  store i64 %2620, i64* %RCX, align 8, !tbaa !2428
  %2621 = load i64, i64* %RAX
  %2622 = load i64, i64* %RCX
  %2623 = add i64 %2622, 448
  %2624 = load i64, i64* %PC
  %2625 = add i64 %2624, 7
  store i64 %2625, i64* %PC
  %2626 = inttoptr i64 %2623 to i64*
  %2627 = load i64, i64* %2626
  %2628 = sub i64 %2621, %2627
  %2629 = icmp ugt i64 %2627, %2621
  %2630 = zext i1 %2629 to i8
  %2631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2630, i8* %2631, align 1, !tbaa !2432
  %2632 = trunc i64 %2628 to i32
  %2633 = and i32 %2632, 255
  %2634 = call i32 @llvm.ctpop.i32(i32 %2633) #16
  %2635 = trunc i32 %2634 to i8
  %2636 = and i8 %2635, 1
  %2637 = xor i8 %2636, 1
  %2638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2637, i8* %2638, align 1, !tbaa !2446
  %2639 = xor i64 %2627, %2621
  %2640 = xor i64 %2639, %2628
  %2641 = lshr i64 %2640, 4
  %2642 = trunc i64 %2641 to i8
  %2643 = and i8 %2642, 1
  %2644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2643, i8* %2644, align 1, !tbaa !2447
  %2645 = icmp eq i64 %2628, 0
  %2646 = zext i1 %2645 to i8
  %2647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2646, i8* %2647, align 1, !tbaa !2448
  %2648 = lshr i64 %2628, 63
  %2649 = trunc i64 %2648 to i8
  %2650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2649, i8* %2650, align 1, !tbaa !2449
  %2651 = lshr i64 %2621, 63
  %2652 = lshr i64 %2627, 63
  %2653 = xor i64 %2652, %2651
  %2654 = xor i64 %2648, %2651
  %2655 = add nuw nsw i64 %2654, %2653
  %2656 = icmp eq i64 %2655, 2
  %2657 = zext i1 %2656 to i8
  %2658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2657, i8* %2658, align 1, !tbaa !2450
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 71
  %2661 = load i64, i64* %PC
  %2662 = add i64 %2661, 6
  %2663 = load i64, i64* %PC
  %2664 = add i64 %2663, 6
  store i64 %2664, i64* %PC
  %2665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2666 = load i8, i8* %2665, align 1, !tbaa !2448
  %2667 = icmp eq i8 %2666, 0
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2669 = load i8, i8* %2668, align 1, !tbaa !2449
  %2670 = icmp ne i8 %2669, 0
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2672 = load i8, i8* %2671, align 1, !tbaa !2450
  %2673 = icmp ne i8 %2672, 0
  %2674 = xor i1 %2670, %2673
  %2675 = xor i1 %2674, true
  %2676 = and i1 %2667, %2675
  %2677 = zext i1 %2676 to i8
  store i8 %2677, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2679 = select i1 %2676, i64 %2660, i64 %2662
  store i64 %2679, i64* %2678, align 8, !tbaa !2428
  %2680 = load i8, i8* %BRANCH_TAKEN
  %2681 = icmp eq i8 %2680, 1
  br i1 %2681, label %block_4010fe, label %block_4010bd

block_400f17:                                     ; preds = %block_400ed8, %block_400ef4
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_400ed8 ], [ %MEMORY.2, %block_400ef4 ]
  %2682 = load i64, i64* %RBP
  %2683 = sub i64 %2682, 65
  %2684 = load i64, i64* %PC
  %2685 = add i64 %2684, 3
  store i64 %2685, i64* %PC
  %2686 = inttoptr i64 %2683 to i8*
  %2687 = load i8, i8* %2686
  store i8 %2687, i8* %AL, align 1, !tbaa !2451
  %2688 = load i8, i8* %AL
  %2689 = zext i8 %2688 to i64
  %2690 = load i64, i64* %PC
  %2691 = add i64 %2690, 2
  store i64 %2691, i64* %PC
  %2692 = and i64 1, %2689
  %2693 = trunc i64 %2692 to i8
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2694, align 1, !tbaa !2432
  %2695 = trunc i64 %2692 to i32
  %2696 = and i32 %2695, 255
  %2697 = call i32 @llvm.ctpop.i32(i32 %2696) #16
  %2698 = trunc i32 %2697 to i8
  %2699 = and i8 %2698, 1
  %2700 = xor i8 %2699, 1
  %2701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2700, i8* %2701, align 1, !tbaa !2446
  %2702 = icmp eq i8 %2693, 0
  %2703 = zext i1 %2702 to i8
  %2704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2703, i8* %2704, align 1, !tbaa !2448
  %2705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %2705, align 1, !tbaa !2449
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2706, align 1, !tbaa !2450
  %2707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2707, align 1, !tbaa !2447
  %2708 = load i64, i64* %PC
  %2709 = add i64 %2708, 11
  %2710 = load i64, i64* %PC
  %2711 = add i64 %2710, 6
  %2712 = load i64, i64* %PC
  %2713 = add i64 %2712, 6
  store i64 %2713, i64* %PC
  %2714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2715 = load i8, i8* %2714, align 1, !tbaa !2448
  %2716 = icmp eq i8 %2715, 0
  %2717 = zext i1 %2716 to i8
  store i8 %2717, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2719 = select i1 %2716, i64 %2709, i64 %2711
  store i64 %2719, i64* %2718, align 8, !tbaa !2428
  %2720 = load i8, i8* %BRANCH_TAKEN
  %2721 = icmp eq i8 %2720, 1
  br i1 %2721, label %block_400f27, label %block_400f22

block_400f22:                                     ; preds = %block_400f17
  %2722 = load i64, i64* %PC
  %2723 = add i64 %2722, 481
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 5
  store i64 %2725, i64* %PC
  %2726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2723, i64* %2726, align 8, !tbaa !2428
  %2727 = load i64, i64* %PC
  %2728 = add i64 %2727, 1
  store i64 %2728, i64* %PC
  %2729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2730 = load i64, i64* %2729, align 8, !tbaa !2428
  %2731 = add i64 %2730, 8
  %2732 = inttoptr i64 %2730 to i64*
  %2733 = load i64, i64* %2732
  store i64 %2733, i64* %RBP, align 8, !tbaa !2428
  store i64 %2731, i64* %2729, align 8, !tbaa !2428
  %2734 = load i64, i64* %PC
  %2735 = add i64 %2734, 1
  store i64 %2735, i64* %PC
  %2736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2738 = load i64, i64* %2737, align 8, !tbaa !2428
  %2739 = inttoptr i64 %2738 to i64*
  %2740 = load i64, i64* %2739
  store i64 %2740, i64* %2736, align 8, !tbaa !2428
  %2741 = add i64 %2738, 8
  store i64 %2741, i64* %2737, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.3
}

; Function Attrs: noinline
define %struct.Memory* @sub_4035c0_read_min(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4035c0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 17
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %R8D = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RAX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 5
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RCX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 7
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 9
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 11
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RDI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 13
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RSP = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 15
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RBP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 17
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %R8 = bitcast %union.anon* %42 to i64*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 368
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 368
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2432
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2446
  %67 = xor i64 368, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2448
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2449
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2450
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 10
  store i64 %86, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 672), i64* %RSI, align 8, !tbaa !2428
  %87 = load i64, i64* %RBP
  %88 = sub i64 %87, 16
  %89 = load i64, i64* %RDI
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %88 to i64*
  store i64 %89, i64* %92
  %93 = load i64, i64* %RBP
  %94 = sub i64 %93, 24
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 8
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %94 to i64*
  store i64 0, i64* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 16
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %99 to i64*
  %103 = load i64, i64* %102
  store i64 %103, i64* %RDI, align 8, !tbaa !2428
  %104 = load i64, i64* %PC
  %105 = sub i64 %104, 11525
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 5
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 5
  store i64 %109, i64* %PC
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %111 = load i64, i64* %110, align 8, !tbaa !2428
  %112 = add i64 %111, -8
  %113 = inttoptr i64 %112 to i64*
  store i64 %107, i64* %113
  store i64 %112, i64* %110, align 8, !tbaa !2428
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %105, i64* %114, align 8, !tbaa !2428
  %115 = load i64, i64* %PC
  %116 = call %struct.Memory* @ext_609020_fopen(%struct.State* %0, i64 %115, %struct.Memory* %2)
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 24
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %122
  %123 = load i64, i64* %RAX
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 4
  store i64 %125, i64* %PC
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %126, align 1, !tbaa !2432
  %127 = trunc i64 %123 to i32
  %128 = and i32 %127, 255
  %129 = call i32 @llvm.ctpop.i32(i32 %128) #16
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = xor i8 %131, 1
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %132, i8* %133, align 1, !tbaa !2446
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %134, align 1, !tbaa !2447
  %135 = icmp eq i64 %123, 0
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %136, i8* %137, align 1, !tbaa !2448
  %138 = lshr i64 %123, 63
  %139 = trunc i64 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %139, i8* %140, align 1, !tbaa !2449
  %141 = lshr i64 %123, 63
  %142 = xor i64 %138, %141
  %143 = add nuw nsw i64 %142, %141
  %144 = icmp eq i64 %143, 2
  %145 = zext i1 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %145, i8* %146, align 1, !tbaa !2450
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 19
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 6
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 6
  store i64 %152, i64* %PC
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %154 = load i8, i8* %153, align 1, !tbaa !2448
  %155 = icmp eq i8 %154, 0
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %158 = select i1 %155, i64 %148, i64 %150
  store i64 %158, i64* %157, align 8, !tbaa !2428
  %159 = load i8, i8* %BRANCH_TAKEN
  %160 = icmp eq i8 %159, 1
  br i1 %160, label %block_403605, label %block_4035f8

block_4035f8:                                     ; preds = %block_4035c0
  %161 = load i64, i64* %RBP
  %162 = sub i64 %161, 8
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 8
  store i64 %164, i64* %PC
  %165 = inttoptr i64 %162 to i64*
  store i64 -1, i64* %165
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 2686
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 5
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %167, i64* %170, align 8, !tbaa !2428
  br label %block_40407e

block_403f70:                                     ; preds = %block_404032, %block_403f4b
  %MEMORY.0 = phi %struct.Memory* [ %3876, %block_403f4b ], [ %MEMORY.11, %block_404032 ]
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 272
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 7
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i64*
  %176 = load i64, i64* %175
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %177 = load i64, i64* %RBP
  %178 = sub i64 %177, 16
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 4
  store i64 %180, i64* %PC
  %181 = inttoptr i64 %178 to i64*
  %182 = load i64, i64* %181
  store i64 %182, i64* %RCX, align 8, !tbaa !2428
  %183 = load i64, i64* %RAX
  %184 = load i64, i64* %RCX
  %185 = add i64 %184, 408
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 7
  store i64 %187, i64* %PC
  %188 = inttoptr i64 %185 to i64*
  %189 = load i64, i64* %188
  %190 = sub i64 %183, %189
  %191 = icmp ugt i64 %189, %183
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %192, i8* %193, align 1, !tbaa !2432
  %194 = trunc i64 %190 to i32
  %195 = and i32 %194, 255
  %196 = call i32 @llvm.ctpop.i32(i32 %195) #16
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %199, i8* %200, align 1, !tbaa !2446
  %201 = xor i64 %189, %183
  %202 = xor i64 %201, %190
  %203 = lshr i64 %202, 4
  %204 = trunc i64 %203 to i8
  %205 = and i8 %204, 1
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %205, i8* %206, align 1, !tbaa !2447
  %207 = icmp eq i64 %190, 0
  %208 = zext i1 %207 to i8
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %208, i8* %209, align 1, !tbaa !2448
  %210 = lshr i64 %190, 63
  %211 = trunc i64 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %211, i8* %212, align 1, !tbaa !2449
  %213 = lshr i64 %183, 63
  %214 = lshr i64 %189, 63
  %215 = xor i64 %214, %213
  %216 = xor i64 %210, %213
  %217 = add nuw nsw i64 %216, %215
  %218 = icmp eq i64 %217, 2
  %219 = zext i1 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %219, i8* %220, align 1, !tbaa !2450
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 244
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 6
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 6
  store i64 %226, i64* %PC
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %228 = load i8, i8* %227, align 1, !tbaa !2448
  %229 = icmp eq i8 %228, 0
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %231 = load i8, i8* %230, align 1, !tbaa !2449
  %232 = icmp ne i8 %231, 0
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %234 = load i8, i8* %233, align 1, !tbaa !2450
  %235 = icmp ne i8 %234, 0
  %236 = xor i1 %232, %235
  %237 = xor i1 %236, true
  %238 = and i1 %229, %237
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %241 = select i1 %238, i64 %222, i64 %224
  store i64 %241, i64* %240, align 8, !tbaa !2428
  %242 = load i8, i8* %BRANCH_TAKEN
  %243 = icmp eq i8 %242, 1
  %244 = load i64, i64* %RBP
  br i1 %243, label %block_404076, label %block_403f88

block_403ea5:                                     ; preds = %block_403d3a
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 16
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = load i64, i64* %RAX
  %252 = add i64 %251, 576
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 7
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %252 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 280
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 7
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %259 to i64*
  %263 = load i64, i64* %262
  %264 = sub i64 %257, %263
  %265 = icmp ugt i64 %263, %257
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = trunc i64 %264 to i32
  %269 = and i32 %268, 255
  %270 = call i32 @llvm.ctpop.i32(i32 %269) #16
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %273, i8* %274, align 1, !tbaa !2446
  %275 = xor i64 %263, %257
  %276 = xor i64 %275, %264
  %277 = lshr i64 %276, 4
  %278 = trunc i64 %277 to i8
  %279 = and i8 %278, 1
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %279, i8* %280, align 1, !tbaa !2447
  %281 = icmp eq i64 %264, 0
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = lshr i64 %264, 63
  %285 = trunc i64 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i64 %257, 63
  %288 = lshr i64 %263, 63
  %289 = xor i64 %288, %287
  %290 = xor i64 %284, %287
  %291 = add nuw nsw i64 %290, %289
  %292 = icmp eq i64 %291, 2
  %293 = zext i1 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %293, i8* %294, align 1, !tbaa !2450
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 148
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 6
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 6
  store i64 %300, i64* %PC
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %302 = load i8, i8* %301, align 1, !tbaa !2448
  store i8 %302, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %304 = icmp ne i8 %302, 0
  %305 = select i1 %304, i64 %296, i64 %298
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %306 = load i8, i8* %BRANCH_TAKEN
  %307 = icmp eq i8 %306, 1
  br i1 %307, label %block_403f4b, label %block_403ebd

block_404076:                                     ; preds = %block_403f70
  %308 = sub i64 %244, 8
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 8
  store i64 %310, i64* %PC
  %311 = inttoptr i64 %308 to i64*
  store i64 0, i64* %311
  br label %block_40407e

block_40365d:                                     ; preds = %block_403605
  %312 = sub i64 %4834, 248
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 7
  store i64 %314, i64* %PC
  %315 = inttoptr i64 %312 to i64*
  %316 = load i64, i64* %315
  store i64 %316, i64* %RAX, align 8, !tbaa !2428
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 16
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 4
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i64*
  %322 = load i64, i64* %321
  store i64 %322, i64* %RCX, align 8, !tbaa !2428
  %323 = load i64, i64* %RCX
  %324 = add i64 %323, 408
  %325 = load i64, i64* %RAX
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 7
  store i64 %327, i64* %PC
  %328 = inttoptr i64 %324 to i64*
  store i64 %325, i64* %328
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 256
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 7
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %330 to i64*
  %334 = load i64, i64* %333
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = load i64, i64* %RBP
  %336 = sub i64 %335, 16
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 4
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %336 to i64*
  %340 = load i64, i64* %339
  store i64 %340, i64* %RCX, align 8, !tbaa !2428
  %341 = load i64, i64* %RCX
  %342 = add i64 %341, 432
  %343 = load i64, i64* %RAX
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 7
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %342 to i64*
  store i64 %343, i64* %346
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 248
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 7
  store i64 %350, i64* %PC
  %351 = inttoptr i64 %348 to i64*
  %352 = load i64, i64* %351
  store i64 %352, i64* %RAX, align 8, !tbaa !2428
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 248
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 7
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358
  %360 = add i64 %359, %353
  store i64 %360, i64* %RAX, align 8, !tbaa !2428
  %361 = icmp ult i64 %360, %353
  %362 = icmp ult i64 %360, %359
  %363 = or i1 %361, %362
  %364 = zext i1 %363 to i8
  %365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %364, i8* %365, align 1, !tbaa !2432
  %366 = trunc i64 %360 to i32
  %367 = and i32 %366, 255
  %368 = call i32 @llvm.ctpop.i32(i32 %367) #16
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  %371 = xor i8 %370, 1
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %371, i8* %372, align 1, !tbaa !2446
  %373 = xor i64 %359, %353
  %374 = xor i64 %373, %360
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %377, i8* %378, align 1, !tbaa !2447
  %379 = icmp eq i64 %360, 0
  %380 = zext i1 %379 to i8
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %380, i8* %381, align 1, !tbaa !2448
  %382 = lshr i64 %360, 63
  %383 = trunc i64 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %383, i8* %384, align 1, !tbaa !2449
  %385 = lshr i64 %353, 63
  %386 = lshr i64 %359, 63
  %387 = xor i64 %382, %385
  %388 = xor i64 %382, %386
  %389 = add nuw nsw i64 %387, %388
  %390 = icmp eq i64 %389, 2
  %391 = zext i1 %390 to i8
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %391, i8* %392, align 1, !tbaa !2450
  %393 = load i64, i64* %RAX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = add i64 1, %393
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = icmp ult i64 %396, %393
  %398 = icmp ult i64 %396, 1
  %399 = or i1 %397, %398
  %400 = zext i1 %399 to i8
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %400, i8* %401, align 1, !tbaa !2432
  %402 = trunc i64 %396 to i32
  %403 = and i32 %402, 255
  %404 = call i32 @llvm.ctpop.i32(i32 %403) #16
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = xor i8 %406, 1
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %407, i8* %408, align 1, !tbaa !2446
  %409 = xor i64 1, %393
  %410 = xor i64 %409, %396
  %411 = lshr i64 %410, 4
  %412 = trunc i64 %411 to i8
  %413 = and i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %413, i8* %414, align 1, !tbaa !2447
  %415 = icmp eq i64 %396, 0
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %416, i8* %417, align 1, !tbaa !2448
  %418 = lshr i64 %396, 63
  %419 = trunc i64 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %419, i8* %420, align 1, !tbaa !2449
  %421 = lshr i64 %393, 63
  %422 = xor i64 %418, %421
  %423 = add nuw nsw i64 %422, %418
  %424 = icmp eq i64 %423, 2
  %425 = zext i1 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %425, i8* %426, align 1, !tbaa !2450
  %427 = load i64, i64* %RBP
  %428 = sub i64 %427, 16
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 4
  store i64 %430, i64* %PC
  %431 = inttoptr i64 %428 to i64*
  %432 = load i64, i64* %431
  store i64 %432, i64* %RCX, align 8, !tbaa !2428
  %433 = load i64, i64* %RCX
  %434 = add i64 %433, 400
  %435 = load i64, i64* %RAX
  %436 = load i64, i64* %PC
  %437 = add i64 %436, 7
  store i64 %437, i64* %PC
  %438 = inttoptr i64 %434 to i64*
  store i64 %435, i64* %438
  %439 = load i64, i64* %RBP
  %440 = sub i64 %439, 248
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 7
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %440 to i64*
  %444 = load i64, i64* %443
  store i64 %444, i64* %RAX, align 8, !tbaa !2428
  %445 = load i64, i64* %RAX
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 248
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 7
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  %452 = add i64 %451, %445
  store i64 %452, i64* %RAX, align 8, !tbaa !2428
  %453 = icmp ult i64 %452, %445
  %454 = icmp ult i64 %452, %451
  %455 = or i1 %453, %454
  %456 = zext i1 %455 to i8
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %456, i8* %457, align 1, !tbaa !2432
  %458 = trunc i64 %452 to i32
  %459 = and i32 %458, 255
  %460 = call i32 @llvm.ctpop.i32(i32 %459) #16
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = xor i8 %462, 1
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %463, i8* %464, align 1, !tbaa !2446
  %465 = xor i64 %451, %445
  %466 = xor i64 %465, %452
  %467 = lshr i64 %466, 4
  %468 = trunc i64 %467 to i8
  %469 = and i8 %468, 1
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %469, i8* %470, align 1, !tbaa !2447
  %471 = icmp eq i64 %452, 0
  %472 = zext i1 %471 to i8
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %472, i8* %473, align 1, !tbaa !2448
  %474 = lshr i64 %452, 63
  %475 = trunc i64 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %475, i8* %476, align 1, !tbaa !2449
  %477 = lshr i64 %445, 63
  %478 = lshr i64 %451, 63
  %479 = xor i64 %474, %477
  %480 = xor i64 %474, %478
  %481 = add nuw nsw i64 %479, %480
  %482 = icmp eq i64 %481, 2
  %483 = zext i1 %482 to i8
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %483, i8* %484, align 1, !tbaa !2450
  %485 = load i64, i64* %RAX
  %486 = load i64, i64* %RBP
  %487 = sub i64 %486, 248
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 7
  store i64 %489, i64* %PC
  %490 = inttoptr i64 %487 to i64*
  %491 = load i64, i64* %490
  %492 = add i64 %491, %485
  store i64 %492, i64* %RAX, align 8, !tbaa !2428
  %493 = icmp ult i64 %492, %485
  %494 = icmp ult i64 %492, %491
  %495 = or i1 %493, %494
  %496 = zext i1 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %496, i8* %497, align 1, !tbaa !2432
  %498 = trunc i64 %492 to i32
  %499 = and i32 %498, 255
  %500 = call i32 @llvm.ctpop.i32(i32 %499) #16
  %501 = trunc i32 %500 to i8
  %502 = and i8 %501, 1
  %503 = xor i8 %502, 1
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %503, i8* %504, align 1, !tbaa !2446
  %505 = xor i64 %491, %485
  %506 = xor i64 %505, %492
  %507 = lshr i64 %506, 4
  %508 = trunc i64 %507 to i8
  %509 = and i8 %508, 1
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %509, i8* %510, align 1, !tbaa !2447
  %511 = icmp eq i64 %492, 0
  %512 = zext i1 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %512, i8* %513, align 1, !tbaa !2448
  %514 = lshr i64 %492, 63
  %515 = trunc i64 %514 to i8
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %515, i8* %516, align 1, !tbaa !2449
  %517 = lshr i64 %485, 63
  %518 = lshr i64 %491, 63
  %519 = xor i64 %514, %517
  %520 = xor i64 %514, %518
  %521 = add nuw nsw i64 %519, %520
  %522 = icmp eq i64 %521, 2
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %523, i8* %524, align 1, !tbaa !2450
  %525 = load i64, i64* %RAX
  %526 = load i64, i64* %RBP
  %527 = sub i64 %526, 256
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 7
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %527 to i64*
  %531 = load i64, i64* %530
  %532 = add i64 %531, %525
  store i64 %532, i64* %RAX, align 8, !tbaa !2428
  %533 = icmp ult i64 %532, %525
  %534 = icmp ult i64 %532, %531
  %535 = or i1 %533, %534
  %536 = zext i1 %535 to i8
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %536, i8* %537, align 1, !tbaa !2432
  %538 = trunc i64 %532 to i32
  %539 = and i32 %538, 255
  %540 = call i32 @llvm.ctpop.i32(i32 %539) #16
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  %543 = xor i8 %542, 1
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %543, i8* %544, align 1, !tbaa !2446
  %545 = xor i64 %531, %525
  %546 = xor i64 %545, %532
  %547 = lshr i64 %546, 4
  %548 = trunc i64 %547 to i8
  %549 = and i8 %548, 1
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %549, i8* %550, align 1, !tbaa !2447
  %551 = icmp eq i64 %532, 0
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %552, i8* %553, align 1, !tbaa !2448
  %554 = lshr i64 %532, 63
  %555 = trunc i64 %554 to i8
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %555, i8* %556, align 1, !tbaa !2449
  %557 = lshr i64 %525, 63
  %558 = lshr i64 %531, 63
  %559 = xor i64 %554, %557
  %560 = xor i64 %554, %558
  %561 = add nuw nsw i64 %559, %560
  %562 = icmp eq i64 %561, 2
  %563 = zext i1 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %563, i8* %564, align 1, !tbaa !2450
  %565 = load i64, i64* %RBP
  %566 = sub i64 %565, 16
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = inttoptr i64 %566 to i64*
  %570 = load i64, i64* %569
  store i64 %570, i64* %RCX, align 8, !tbaa !2428
  %571 = load i64, i64* %RCX
  %572 = add i64 %571, 424
  %573 = load i64, i64* %RAX
  %574 = load i64, i64* %PC
  %575 = add i64 %574, 7
  store i64 %575, i64* %PC
  %576 = inttoptr i64 %572 to i64*
  store i64 %573, i64* %576
  %577 = load i64, i64* %RBP
  %578 = sub i64 %577, 16
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 4
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %578 to i64*
  %582 = load i64, i64* %581
  store i64 %582, i64* %RAX, align 8, !tbaa !2428
  %583 = load i64, i64* %RAX
  %584 = add i64 %583, 408
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 11
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %584 to i64*
  %588 = load i64, i64* %587
  %589 = sub i64 %588, 15000
  %590 = icmp ult i64 %588, 15000
  %591 = zext i1 %590 to i8
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %591, i8* %592, align 1, !tbaa !2432
  %593 = trunc i64 %589 to i32
  %594 = and i32 %593, 255
  %595 = call i32 @llvm.ctpop.i32(i32 %594) #16
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  %598 = xor i8 %597, 1
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %598, i8* %599, align 1, !tbaa !2446
  %600 = xor i64 %588, 15000
  %601 = xor i64 %600, %589
  %602 = lshr i64 %601, 4
  %603 = trunc i64 %602 to i8
  %604 = and i8 %603, 1
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %604, i8* %605, align 1, !tbaa !2447
  %606 = icmp eq i64 %589, 0
  %607 = zext i1 %606 to i8
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %607, i8* %608, align 1, !tbaa !2448
  %609 = lshr i64 %589, 63
  %610 = trunc i64 %609 to i8
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %610, i8* %611, align 1, !tbaa !2449
  %612 = lshr i64 %588, 63
  %613 = xor i64 %609, %612
  %614 = add nuw nsw i64 %613, %612
  %615 = icmp eq i64 %614, 2
  %616 = zext i1 %615 to i8
  %617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %616, i8* %617, align 1, !tbaa !2450
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 48
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 6
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 6
  store i64 %623, i64* %PC
  %624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %625 = load i8, i8* %624, align 1, !tbaa !2448
  %626 = icmp eq i8 %625, 0
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %628 = load i8, i8* %627, align 1, !tbaa !2449
  %629 = icmp ne i8 %628, 0
  %630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %631 = load i8, i8* %630, align 1, !tbaa !2450
  %632 = icmp ne i8 %631, 0
  %633 = xor i1 %629, %632
  %634 = xor i1 %633, true
  %635 = and i1 %626, %634
  %636 = zext i1 %635 to i8
  store i8 %636, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %638 = select i1 %635, i64 %619, i64 %621
  store i64 %638, i64* %637, align 8, !tbaa !2428
  %639 = load i8, i8* %BRANCH_TAKEN
  %640 = icmp eq i8 %639, 1
  %641 = load i64, i64* %RBP
  %642 = sub i64 %641, 16
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 4
  store i64 %644, i64* %PC
  %645 = inttoptr i64 %642 to i64*
  %646 = load i64, i64* %645
  store i64 %646, i64* %RAX, align 8, !tbaa !2428
  %647 = load i64, i64* %RAX
  br i1 %640, label %block_403704, label %block_4036da

block_4037d8:                                     ; preds = %block_4037c6
  %648 = load i64, i64* %RBP
  %649 = sub i64 %648, 16
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %649 to i64*
  %653 = load i64, i64* %652
  store i64 %653, i64* %RAX, align 8, !tbaa !2428
  %654 = load i64, i64* %RAX
  %655 = add i64 %654, 584
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 8
  store i64 %657, i64* %PC
  %658 = inttoptr i64 %655 to i64*
  %659 = load i64, i64* %658
  %660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %660, align 1, !tbaa !2432
  %661 = trunc i64 %659 to i32
  %662 = and i32 %661, 255
  %663 = call i32 @llvm.ctpop.i32(i32 %662) #16
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = xor i8 %665, 1
  %667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %666, i8* %667, align 1, !tbaa !2446
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %668, align 1, !tbaa !2447
  %669 = icmp eq i64 %659, 0
  %670 = zext i1 %669 to i8
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %670, i8* %671, align 1, !tbaa !2448
  %672 = lshr i64 %659, 63
  %673 = trunc i64 %672 to i8
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %673, i8* %674, align 1, !tbaa !2449
  %675 = lshr i64 %659, 63
  %676 = xor i64 %672, %675
  %677 = add nuw nsw i64 %676, %675
  %678 = icmp eq i64 %677, 2
  %679 = zext i1 %678 to i8
  %680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %679, i8* %680, align 1, !tbaa !2450
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 58
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 6
  %685 = load i64, i64* %PC
  %686 = add i64 %685, 6
  store i64 %686, i64* %PC
  %687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %688 = load i8, i8* %687, align 1, !tbaa !2448
  %689 = icmp eq i8 %688, 0
  %690 = zext i1 %689 to i8
  store i8 %690, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %692 = select i1 %689, i64 %682, i64 %684
  store i64 %692, i64* %691, align 8, !tbaa !2428
  %693 = load i8, i8* %BRANCH_TAKEN
  %694 = icmp eq i8 %693, 1
  br i1 %694, label %block_40381e, label %block_4037ea

block_403d52:                                     ; preds = %block_403d3a
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 5
  store i64 %696, i64* %PC
  store i64 200, i64* %RSI, align 8, !tbaa !2428
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 240
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 7
  store i64 %700, i64* %PC
  store i64 %698, i64* %RDI, align 8, !tbaa !2428
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 24
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 4
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i64*
  %706 = load i64, i64* %705
  store i64 %706, i64* %RDX, align 8, !tbaa !2428
  %707 = load i64, i64* %PC
  %708 = sub i64 %707, 13554
  %709 = load i64, i64* %PC
  %710 = add i64 %709, 5
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 5
  store i64 %712, i64* %PC
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %714 = load i64, i64* %713, align 8, !tbaa !2428
  %715 = add i64 %714, -8
  %716 = inttoptr i64 %715 to i64*
  store i64 %710, i64* %716
  store i64 %715, i64* %713, align 8, !tbaa !2428
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %708, i64* %717, align 8, !tbaa !2428
  %718 = load i64, i64* %PC
  %719 = call %struct.Memory* @ext_608fe8_fgets(%struct.State* %0, i64 %718, %struct.Memory* %MEMORY.3)
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 10
  store i64 %721, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 705), i64* %RSI, align 8, !tbaa !2428
  %722 = load i64, i64* %RBP
  %723 = sub i64 %722, 248
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 7
  store i64 %725, i64* %PC
  store i64 %723, i64* %RDX, align 8, !tbaa !2428
  %726 = load i64, i64* %RBP
  %727 = sub i64 %726, 256
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 7
  store i64 %729, i64* %PC
  store i64 %727, i64* %RCX, align 8, !tbaa !2428
  %730 = load i64, i64* %RBP
  %731 = sub i64 %730, 264
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 7
  store i64 %733, i64* %PC
  store i64 %731, i64* %R8, align 8, !tbaa !2428
  %734 = load i64, i64* %RBP
  %735 = sub i64 %734, 240
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 7
  store i64 %737, i64* %PC
  store i64 %735, i64* %RDI, align 8, !tbaa !2428
  %738 = load i64, i64* %RBP
  %739 = sub i64 %738, 336
  %740 = load i64, i64* %RAX
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 7
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %739 to i64*
  store i64 %740, i64* %743
  %744 = load i64, i64* %PC
  %745 = add i64 %744, 2
  store i64 %745, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %746 = load i64, i64* %PC
  %747 = sub i64 %746, 13526
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 5
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 5
  store i64 %751, i64* %PC
  %752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %753 = load i64, i64* %752, align 8, !tbaa !2428
  %754 = add i64 %753, -8
  %755 = inttoptr i64 %754 to i64*
  store i64 %749, i64* %755
  store i64 %754, i64* %752, align 8, !tbaa !2428
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %747, i64* %756, align 8, !tbaa !2428
  %757 = load i64, i64* %PC
  %758 = call %struct.Memory* @ext_609010___isoc99_sscanf(%struct.State* %0, i64 %757, %struct.Memory* %719)
  %759 = load i32, i32* %EAX
  %760 = zext i32 %759 to i64
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 3
  store i64 %762, i64* %PC
  %763 = sub i32 %759, 3
  %764 = icmp ult i32 %759, 3
  %765 = zext i1 %764 to i8
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %765, i8* %766, align 1, !tbaa !2432
  %767 = and i32 %763, 255
  %768 = call i32 @llvm.ctpop.i32(i32 %767) #16
  %769 = trunc i32 %768 to i8
  %770 = and i8 %769, 1
  %771 = xor i8 %770, 1
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %771, i8* %772, align 1, !tbaa !2446
  %773 = xor i64 3, %760
  %774 = trunc i64 %773 to i32
  %775 = xor i32 %774, %763
  %776 = lshr i32 %775, 4
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %778, i8* %779, align 1, !tbaa !2447
  %780 = icmp eq i32 %763, 0
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %781, i8* %782, align 1, !tbaa !2448
  %783 = lshr i32 %763, 31
  %784 = trunc i32 %783 to i8
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %784, i8* %785, align 1, !tbaa !2449
  %786 = lshr i32 %759, 31
  %787 = xor i32 %783, %786
  %788 = add nuw nsw i32 %787, %786
  %789 = icmp eq i32 %788, 2
  %790 = zext i1 %789 to i8
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %790, i8* %791, align 1, !tbaa !2450
  %792 = load i64, i64* %PC
  %793 = add i64 %792, 19
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 6
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 6
  store i64 %797, i64* %PC
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %799 = load i8, i8* %798, align 1, !tbaa !2448
  store i8 %799, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %801 = icmp ne i8 %799, 0
  %802 = select i1 %801, i64 %793, i64 %795
  store i64 %802, i64* %800, align 8, !tbaa !2428
  %803 = load i8, i8* %BRANCH_TAKEN
  %804 = icmp eq i8 %803, 1
  %805 = load i64, i64* %RBP
  br i1 %804, label %block_403db1, label %block_403da4

block_403f88:                                     ; preds = %block_403f70
  %806 = sub i64 %244, 16
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 4
  store i64 %808, i64* %PC
  %809 = inttoptr i64 %806 to i64*
  %810 = load i64, i64* %809
  store i64 %810, i64* %RAX, align 8, !tbaa !2428
  %811 = load i64, i64* %RAX
  %812 = add i64 %811, 528
  %813 = load i64, i64* %PC
  %814 = add i64 %813, 11
  store i64 %814, i64* %PC
  %815 = inttoptr i64 %812 to i64*
  %816 = load i64, i64* %815
  %817 = sub i64 %816, 10000000
  %818 = icmp ult i64 %816, 10000000
  %819 = zext i1 %818 to i8
  %820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %819, i8* %820, align 1, !tbaa !2432
  %821 = trunc i64 %817 to i32
  %822 = and i32 %821, 255
  %823 = call i32 @llvm.ctpop.i32(i32 %822) #16
  %824 = trunc i32 %823 to i8
  %825 = and i8 %824, 1
  %826 = xor i8 %825, 1
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %826, i8* %827, align 1, !tbaa !2446
  %828 = xor i64 %816, 10000000
  %829 = xor i64 %828, %817
  %830 = lshr i64 %829, 4
  %831 = trunc i64 %830 to i8
  %832 = and i8 %831, 1
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %832, i8* %833, align 1, !tbaa !2447
  %834 = icmp eq i64 %817, 0
  %835 = zext i1 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %835, i8* %836, align 1, !tbaa !2448
  %837 = lshr i64 %817, 63
  %838 = trunc i64 %837 to i8
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %838, i8* %839, align 1, !tbaa !2449
  %840 = lshr i64 %816, 63
  %841 = xor i64 %837, %840
  %842 = add nuw nsw i64 %841, %840
  %843 = icmp eq i64 %842, 2
  %844 = zext i1 %843 to i8
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %844, i8* %845, align 1, !tbaa !2450
  %846 = load i64, i64* %PC
  %847 = add i64 %846, 29
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 6
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 6
  store i64 %851, i64* %PC
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %853 = load i8, i8* %852, align 1, !tbaa !2448
  %854 = icmp ne i8 %853, 0
  %855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %856 = load i8, i8* %855, align 1, !tbaa !2449
  %857 = icmp ne i8 %856, 0
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %859 = load i8, i8* %858, align 1, !tbaa !2450
  %860 = icmp ne i8 %859, 0
  %861 = xor i1 %857, %860
  %862 = or i1 %854, %861
  %863 = zext i1 %862 to i8
  store i8 %863, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %865 = select i1 %862, i64 %847, i64 %849
  store i64 %865, i64* %864, align 8, !tbaa !2428
  %866 = load i8, i8* %BRANCH_TAKEN
  %867 = icmp eq i8 %866, 1
  br i1 %867, label %block_403fb4, label %block_403f9d

block_40394a:                                     ; preds = %block_403929
  %868 = load i64, i64* %RAX
  %869 = load i32, i32* %EAX
  %870 = zext i32 %869 to i64
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 2
  store i64 %872, i64* %PC
  %873 = xor i64 %870, %868
  %874 = trunc i64 %873 to i32
  %875 = and i64 %873, 4294967295
  store i64 %875, i64* %RAX, align 8, !tbaa !2428
  %876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %876, align 1, !tbaa !2432
  %877 = and i32 %874, 255
  %878 = call i32 @llvm.ctpop.i32(i32 %877) #16
  %879 = trunc i32 %878 to i8
  %880 = and i8 %879, 1
  %881 = xor i8 %880, 1
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %881, i8* %882, align 1, !tbaa !2446
  %883 = icmp eq i32 %874, 0
  %884 = zext i1 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %884, i8* %885, align 1, !tbaa !2448
  %886 = lshr i32 %874, 31
  %887 = trunc i32 %886 to i8
  %888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %887, i8* %888, align 1, !tbaa !2449
  %889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %889, align 1, !tbaa !2450
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %890, align 1, !tbaa !2447
  %891 = load i32, i32* %EAX
  %892 = zext i32 %891 to i64
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 2
  store i64 %894, i64* %PC
  %895 = and i64 %892, 4294967295
  store i64 %895, i64* %RCX, align 8, !tbaa !2428
  %896 = load i64, i64* %RCX
  %897 = load i64, i64* %RBP
  %898 = sub i64 %897, 272
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 7
  store i64 %900, i64* %PC
  %901 = inttoptr i64 %898 to i64*
  %902 = load i64, i64* %901
  %903 = sub i64 %896, %902
  store i64 %903, i64* %RCX, align 8, !tbaa !2428
  %904 = icmp ugt i64 %902, %896
  %905 = zext i1 %904 to i8
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %905, i8* %906, align 1, !tbaa !2432
  %907 = trunc i64 %903 to i32
  %908 = and i32 %907, 255
  %909 = call i32 @llvm.ctpop.i32(i32 %908) #16
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %912, i8* %913, align 1, !tbaa !2446
  %914 = xor i64 %902, %896
  %915 = xor i64 %914, %903
  %916 = lshr i64 %915, 4
  %917 = trunc i64 %916 to i8
  %918 = and i8 %917, 1
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %918, i8* %919, align 1, !tbaa !2447
  %920 = icmp eq i64 %903, 0
  %921 = zext i1 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %921, i8* %922, align 1, !tbaa !2448
  %923 = lshr i64 %903, 63
  %924 = trunc i64 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %924, i8* %925, align 1, !tbaa !2449
  %926 = lshr i64 %896, 63
  %927 = lshr i64 %902, 63
  %928 = xor i64 %927, %926
  %929 = xor i64 %923, %926
  %930 = add nuw nsw i64 %929, %928
  %931 = icmp eq i64 %930, 2
  %932 = zext i1 %931 to i8
  %933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %932, i8* %933, align 1, !tbaa !2450
  %934 = load i32, i32* %ECX
  %935 = zext i32 %934 to i64
  %936 = load i64, i64* %PC
  %937 = add i64 %936, 2
  store i64 %937, i64* %PC
  %938 = and i64 %935, 4294967295
  store i64 %938, i64* %RAX, align 8, !tbaa !2428
  %939 = load i64, i64* %RBP
  %940 = sub i64 %939, 288
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 7
  store i64 %942, i64* %PC
  %943 = inttoptr i64 %940 to i64*
  %944 = load i64, i64* %943
  store i64 %944, i64* %RCX, align 8, !tbaa !2428
  %945 = load i64, i64* %RBP
  %946 = sub i64 %945, 272
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 8
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %946 to i64*
  %950 = load i64, i64* %949
  %951 = sext i64 %950 to i128
  %952 = and i128 %951, -18446744073709551616
  %953 = zext i64 %950 to i128
  %954 = or i128 %952, %953
  %955 = mul nsw i128 %954, 104
  %956 = trunc i128 %955 to i64
  store i64 %956, i64* %RDX, align 8, !tbaa !2428
  %957 = sext i64 %956 to i128
  %958 = icmp ne i128 %957, %955
  %959 = zext i1 %958 to i8
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %959, i8* %960, align 1, !tbaa !2432
  %961 = trunc i128 %955 to i32
  %962 = and i32 %961, 255
  %963 = call i32 @llvm.ctpop.i32(i32 %962) #16
  %964 = trunc i32 %963 to i8
  %965 = and i8 %964, 1
  %966 = xor i8 %965, 1
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %966, i8* %967, align 1, !tbaa !2446
  %968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %968, align 1, !tbaa !2447
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %969, align 1, !tbaa !2448
  %970 = lshr i64 %956, 63
  %971 = trunc i64 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %971, i8* %972, align 1, !tbaa !2449
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %959, i8* %973, align 1, !tbaa !2450
  %974 = load i64, i64* %RCX
  %975 = load i64, i64* %RDX
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 3
  store i64 %977, i64* %PC
  %978 = add i64 %975, %974
  store i64 %978, i64* %RCX, align 8, !tbaa !2428
  %979 = icmp ult i64 %978, %974
  %980 = icmp ult i64 %978, %975
  %981 = or i1 %979, %980
  %982 = zext i1 %981 to i8
  %983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %982, i8* %983, align 1, !tbaa !2432
  %984 = trunc i64 %978 to i32
  %985 = and i32 %984, 255
  %986 = call i32 @llvm.ctpop.i32(i32 %985) #16
  %987 = trunc i32 %986 to i8
  %988 = and i8 %987, 1
  %989 = xor i8 %988, 1
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %989, i8* %990, align 1, !tbaa !2446
  %991 = xor i64 %975, %974
  %992 = xor i64 %991, %978
  %993 = lshr i64 %992, 4
  %994 = trunc i64 %993 to i8
  %995 = and i8 %994, 1
  %996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %995, i8* %996, align 1, !tbaa !2447
  %997 = icmp eq i64 %978, 0
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %998, i8* %999, align 1, !tbaa !2448
  %1000 = lshr i64 %978, 63
  %1001 = trunc i64 %1000 to i8
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1001, i8* %1002, align 1, !tbaa !2449
  %1003 = lshr i64 %974, 63
  %1004 = lshr i64 %975, 63
  %1005 = xor i64 %1000, %1003
  %1006 = xor i64 %1000, %1004
  %1007 = add nuw nsw i64 %1005, %1006
  %1008 = icmp eq i64 %1007, 2
  %1009 = zext i1 %1008 to i8
  %1010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1009, i8* %1010, align 1, !tbaa !2450
  %1011 = load i64, i64* %RCX
  %1012 = add i64 %1011, 96
  %1013 = load i32, i32* %EAX
  %1014 = zext i32 %1013 to i64
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 3
  store i64 %1016, i64* %PC
  %1017 = inttoptr i64 %1012 to i32*
  store i32 %1013, i32* %1017
  %1018 = load i64, i64* %RBP
  %1019 = sub i64 %1018, 288
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 7
  store i64 %1021, i64* %PC
  %1022 = inttoptr i64 %1019 to i64*
  %1023 = load i64, i64* %1022
  store i64 %1023, i64* %RCX, align 8, !tbaa !2428
  %1024 = load i64, i64* %RBP
  %1025 = sub i64 %1024, 272
  %1026 = load i64, i64* %PC
  %1027 = add i64 %1026, 8
  store i64 %1027, i64* %PC
  %1028 = inttoptr i64 %1025 to i64*
  %1029 = load i64, i64* %1028
  %1030 = sext i64 %1029 to i128
  %1031 = and i128 %1030, -18446744073709551616
  %1032 = zext i64 %1029 to i128
  %1033 = or i128 %1031, %1032
  %1034 = mul nsw i128 %1033, 104
  %1035 = trunc i128 %1034 to i64
  store i64 %1035, i64* %RDX, align 8, !tbaa !2428
  %1036 = sext i64 %1035 to i128
  %1037 = icmp ne i128 %1036, %1034
  %1038 = zext i1 %1037 to i8
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1038, i8* %1039, align 1, !tbaa !2432
  %1040 = trunc i128 %1034 to i32
  %1041 = and i32 %1040, 255
  %1042 = call i32 @llvm.ctpop.i32(i32 %1041) #16
  %1043 = trunc i32 %1042 to i8
  %1044 = and i8 %1043, 1
  %1045 = xor i8 %1044, 1
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1045, i8* %1046, align 1, !tbaa !2446
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1047, align 1, !tbaa !2447
  %1048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1048, align 1, !tbaa !2448
  %1049 = lshr i64 %1035, 63
  %1050 = trunc i64 %1049 to i8
  %1051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1050, i8* %1051, align 1, !tbaa !2449
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1038, i8* %1052, align 1, !tbaa !2450
  %1053 = load i64, i64* %RCX
  %1054 = load i64, i64* %RDX
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 3
  store i64 %1056, i64* %PC
  %1057 = add i64 %1054, %1053
  store i64 %1057, i64* %RCX, align 8, !tbaa !2428
  %1058 = icmp ult i64 %1057, %1053
  %1059 = icmp ult i64 %1057, %1054
  %1060 = or i1 %1058, %1059
  %1061 = zext i1 %1060 to i8
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1061, i8* %1062, align 1, !tbaa !2432
  %1063 = trunc i64 %1057 to i32
  %1064 = and i32 %1063, 255
  %1065 = call i32 @llvm.ctpop.i32(i32 %1064) #16
  %1066 = trunc i32 %1065 to i8
  %1067 = and i8 %1066, 1
  %1068 = xor i8 %1067, 1
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1068, i8* %1069, align 1, !tbaa !2446
  %1070 = xor i64 %1054, %1053
  %1071 = xor i64 %1070, %1057
  %1072 = lshr i64 %1071, 4
  %1073 = trunc i64 %1072 to i8
  %1074 = and i8 %1073, 1
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1074, i8* %1075, align 1, !tbaa !2447
  %1076 = icmp eq i64 %1057, 0
  %1077 = zext i1 %1076 to i8
  %1078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1077, i8* %1078, align 1, !tbaa !2448
  %1079 = lshr i64 %1057, 63
  %1080 = trunc i64 %1079 to i8
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1080, i8* %1081, align 1, !tbaa !2449
  %1082 = lshr i64 %1053, 63
  %1083 = lshr i64 %1054, 63
  %1084 = xor i64 %1079, %1082
  %1085 = xor i64 %1079, %1083
  %1086 = add nuw nsw i64 %1084, %1085
  %1087 = icmp eq i64 %1086, 2
  %1088 = zext i1 %1087 to i8
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1088, i8* %1089, align 1, !tbaa !2450
  %1090 = load i64, i64* %RCX
  %1091 = add i64 %1090, 80
  %1092 = load i64, i64* %PC
  %1093 = add i64 %1092, 8
  store i64 %1093, i64* %PC
  %1094 = inttoptr i64 %1091 to i64*
  store i64 -1, i64* %1094
  %1095 = load i64, i64* %RBP
  %1096 = sub i64 %1095, 272
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 7
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1096 to i64*
  %1100 = load i64, i64* %1099
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = load i32, i32* %ECX
  %1102 = zext i32 %1101 to i64
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 2
  store i64 %1104, i64* %PC
  %1105 = and i64 %1102, 4294967295
  store i64 %1105, i64* %RAX, align 8, !tbaa !2428
  %1106 = load i64, i64* %RBP
  %1107 = sub i64 %1106, 288
  %1108 = load i64, i64* %PC
  %1109 = add i64 %1108, 7
  store i64 %1109, i64* %PC
  %1110 = inttoptr i64 %1107 to i64*
  %1111 = load i64, i64* %1110
  store i64 %1111, i64* %RCX, align 8, !tbaa !2428
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 272
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 7
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i64*
  %1117 = load i64, i64* %1116
  store i64 %1117, i64* %RDX, align 8, !tbaa !2428
  %1118 = load i64, i64* %RBP
  %1119 = sub i64 %1118, 16
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 4
  store i64 %1121, i64* %PC
  %1122 = inttoptr i64 %1119 to i64*
  %1123 = load i64, i64* %1122
  store i64 %1123, i64* %RSI, align 8, !tbaa !2428
  %1124 = load i64, i64* %RDX
  %1125 = load i64, i64* %RSI
  %1126 = add i64 %1125, 408
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 7
  store i64 %1128, i64* %PC
  %1129 = inttoptr i64 %1126 to i64*
  %1130 = load i64, i64* %1129
  %1131 = add i64 %1130, %1124
  store i64 %1131, i64* %RDX, align 8, !tbaa !2428
  %1132 = icmp ult i64 %1131, %1124
  %1133 = icmp ult i64 %1131, %1130
  %1134 = or i1 %1132, %1133
  %1135 = zext i1 %1134 to i8
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1135, i8* %1136, align 1, !tbaa !2432
  %1137 = trunc i64 %1131 to i32
  %1138 = and i32 %1137, 255
  %1139 = call i32 @llvm.ctpop.i32(i32 %1138) #16
  %1140 = trunc i32 %1139 to i8
  %1141 = and i8 %1140, 1
  %1142 = xor i8 %1141, 1
  %1143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1142, i8* %1143, align 1, !tbaa !2446
  %1144 = xor i64 %1130, %1124
  %1145 = xor i64 %1144, %1131
  %1146 = lshr i64 %1145, 4
  %1147 = trunc i64 %1146 to i8
  %1148 = and i8 %1147, 1
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1148, i8* %1149, align 1, !tbaa !2447
  %1150 = icmp eq i64 %1131, 0
  %1151 = zext i1 %1150 to i8
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1151, i8* %1152, align 1, !tbaa !2448
  %1153 = lshr i64 %1131, 63
  %1154 = trunc i64 %1153 to i8
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1154, i8* %1155, align 1, !tbaa !2449
  %1156 = lshr i64 %1124, 63
  %1157 = lshr i64 %1130, 63
  %1158 = xor i64 %1153, %1156
  %1159 = xor i64 %1153, %1157
  %1160 = add nuw nsw i64 %1158, %1159
  %1161 = icmp eq i64 %1160, 2
  %1162 = zext i1 %1161 to i8
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1162, i8* %1163, align 1, !tbaa !2450
  %1164 = load i64, i64* %RDX
  %1165 = load i64, i64* %PC
  %1166 = add i64 %1165, 4
  store i64 %1166, i64* %PC
  %1167 = sext i64 %1164 to i128
  %1168 = and i128 %1167, -18446744073709551616
  %1169 = zext i64 %1164 to i128
  %1170 = or i128 %1168, %1169
  %1171 = mul nsw i128 104, %1170
  %1172 = trunc i128 %1171 to i64
  store i64 %1172, i64* %RDX, align 8, !tbaa !2428
  %1173 = sext i64 %1172 to i128
  %1174 = icmp ne i128 %1173, %1171
  %1175 = zext i1 %1174 to i8
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1175, i8* %1176, align 1, !tbaa !2432
  %1177 = trunc i128 %1171 to i32
  %1178 = and i32 %1177, 255
  %1179 = call i32 @llvm.ctpop.i32(i32 %1178) #16
  %1180 = trunc i32 %1179 to i8
  %1181 = and i8 %1180, 1
  %1182 = xor i8 %1181, 1
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1182, i8* %1183, align 1, !tbaa !2446
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1184, align 1, !tbaa !2447
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1185, align 1, !tbaa !2448
  %1186 = lshr i64 %1172, 63
  %1187 = trunc i64 %1186 to i8
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1187, i8* %1188, align 1, !tbaa !2449
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1175, i8* %1189, align 1, !tbaa !2450
  %1190 = load i64, i64* %RCX
  %1191 = load i64, i64* %RDX
  %1192 = load i64, i64* %PC
  %1193 = add i64 %1192, 3
  store i64 %1193, i64* %PC
  %1194 = add i64 %1191, %1190
  store i64 %1194, i64* %RCX, align 8, !tbaa !2428
  %1195 = icmp ult i64 %1194, %1190
  %1196 = icmp ult i64 %1194, %1191
  %1197 = or i1 %1195, %1196
  %1198 = zext i1 %1197 to i8
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1198, i8* %1199, align 1, !tbaa !2432
  %1200 = trunc i64 %1194 to i32
  %1201 = and i32 %1200, 255
  %1202 = call i32 @llvm.ctpop.i32(i32 %1201) #16
  %1203 = trunc i32 %1202 to i8
  %1204 = and i8 %1203, 1
  %1205 = xor i8 %1204, 1
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1205, i8* %1206, align 1, !tbaa !2446
  %1207 = xor i64 %1191, %1190
  %1208 = xor i64 %1207, %1194
  %1209 = lshr i64 %1208, 4
  %1210 = trunc i64 %1209 to i8
  %1211 = and i8 %1210, 1
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1211, i8* %1212, align 1, !tbaa !2447
  %1213 = icmp eq i64 %1194, 0
  %1214 = zext i1 %1213 to i8
  %1215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1214, i8* %1215, align 1, !tbaa !2448
  %1216 = lshr i64 %1194, 63
  %1217 = trunc i64 %1216 to i8
  %1218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1217, i8* %1218, align 1, !tbaa !2449
  %1219 = lshr i64 %1190, 63
  %1220 = lshr i64 %1191, 63
  %1221 = xor i64 %1216, %1219
  %1222 = xor i64 %1216, %1220
  %1223 = add nuw nsw i64 %1221, %1222
  %1224 = icmp eq i64 %1223, 2
  %1225 = zext i1 %1224 to i8
  %1226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1225, i8* %1226, align 1, !tbaa !2450
  %1227 = load i64, i64* %RCX
  %1228 = add i64 %1227, 96
  %1229 = load i32, i32* %EAX
  %1230 = zext i32 %1229 to i64
  %1231 = load i64, i64* %PC
  %1232 = add i64 %1231, 3
  store i64 %1232, i64* %PC
  %1233 = inttoptr i64 %1228 to i32*
  store i32 %1229, i32* %1233
  %1234 = load i64, i64* %RBP
  %1235 = sub i64 %1234, 288
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 7
  store i64 %1237, i64* %PC
  %1238 = inttoptr i64 %1235 to i64*
  %1239 = load i64, i64* %1238
  store i64 %1239, i64* %RCX, align 8, !tbaa !2428
  %1240 = load i64, i64* %RBP
  %1241 = sub i64 %1240, 272
  %1242 = load i64, i64* %PC
  %1243 = add i64 %1242, 7
  store i64 %1243, i64* %PC
  %1244 = inttoptr i64 %1241 to i64*
  %1245 = load i64, i64* %1244
  store i64 %1245, i64* %RDX, align 8, !tbaa !2428
  %1246 = load i64, i64* %RBP
  %1247 = sub i64 %1246, 16
  %1248 = load i64, i64* %PC
  %1249 = add i64 %1248, 4
  store i64 %1249, i64* %PC
  %1250 = inttoptr i64 %1247 to i64*
  %1251 = load i64, i64* %1250
  store i64 %1251, i64* %RSI, align 8, !tbaa !2428
  %1252 = load i64, i64* %RDX
  %1253 = load i64, i64* %RSI
  %1254 = add i64 %1253, 408
  %1255 = load i64, i64* %PC
  %1256 = add i64 %1255, 7
  store i64 %1256, i64* %PC
  %1257 = inttoptr i64 %1254 to i64*
  %1258 = load i64, i64* %1257
  %1259 = add i64 %1258, %1252
  store i64 %1259, i64* %RDX, align 8, !tbaa !2428
  %1260 = icmp ult i64 %1259, %1252
  %1261 = icmp ult i64 %1259, %1258
  %1262 = or i1 %1260, %1261
  %1263 = zext i1 %1262 to i8
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1263, i8* %1264, align 1, !tbaa !2432
  %1265 = trunc i64 %1259 to i32
  %1266 = and i32 %1265, 255
  %1267 = call i32 @llvm.ctpop.i32(i32 %1266) #16
  %1268 = trunc i32 %1267 to i8
  %1269 = and i8 %1268, 1
  %1270 = xor i8 %1269, 1
  %1271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1270, i8* %1271, align 1, !tbaa !2446
  %1272 = xor i64 %1258, %1252
  %1273 = xor i64 %1272, %1259
  %1274 = lshr i64 %1273, 4
  %1275 = trunc i64 %1274 to i8
  %1276 = and i8 %1275, 1
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1276, i8* %1277, align 1, !tbaa !2447
  %1278 = icmp eq i64 %1259, 0
  %1279 = zext i1 %1278 to i8
  %1280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1279, i8* %1280, align 1, !tbaa !2448
  %1281 = lshr i64 %1259, 63
  %1282 = trunc i64 %1281 to i8
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1282, i8* %1283, align 1, !tbaa !2449
  %1284 = lshr i64 %1252, 63
  %1285 = lshr i64 %1258, 63
  %1286 = xor i64 %1281, %1284
  %1287 = xor i64 %1281, %1285
  %1288 = add nuw nsw i64 %1286, %1287
  %1289 = icmp eq i64 %1288, 2
  %1290 = zext i1 %1289 to i8
  %1291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1290, i8* %1291, align 1, !tbaa !2450
  %1292 = load i64, i64* %RDX
  %1293 = load i64, i64* %PC
  %1294 = add i64 %1293, 4
  store i64 %1294, i64* %PC
  %1295 = sext i64 %1292 to i128
  %1296 = and i128 %1295, -18446744073709551616
  %1297 = zext i64 %1292 to i128
  %1298 = or i128 %1296, %1297
  %1299 = mul nsw i128 104, %1298
  %1300 = trunc i128 %1299 to i64
  store i64 %1300, i64* %RDX, align 8, !tbaa !2428
  %1301 = sext i64 %1300 to i128
  %1302 = icmp ne i128 %1301, %1299
  %1303 = zext i1 %1302 to i8
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1303, i8* %1304, align 1, !tbaa !2432
  %1305 = trunc i128 %1299 to i32
  %1306 = and i32 %1305, 255
  %1307 = call i32 @llvm.ctpop.i32(i32 %1306) #16
  %1308 = trunc i32 %1307 to i8
  %1309 = and i8 %1308, 1
  %1310 = xor i8 %1309, 1
  %1311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1310, i8* %1311, align 1, !tbaa !2446
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1312, align 1, !tbaa !2447
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1313, align 1, !tbaa !2448
  %1314 = lshr i64 %1300, 63
  %1315 = trunc i64 %1314 to i8
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1315, i8* %1316, align 1, !tbaa !2449
  %1317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1303, i8* %1317, align 1, !tbaa !2450
  %1318 = load i64, i64* %RCX
  %1319 = load i64, i64* %RDX
  %1320 = load i64, i64* %PC
  %1321 = add i64 %1320, 3
  store i64 %1321, i64* %PC
  %1322 = add i64 %1319, %1318
  store i64 %1322, i64* %RCX, align 8, !tbaa !2428
  %1323 = icmp ult i64 %1322, %1318
  %1324 = icmp ult i64 %1322, %1319
  %1325 = or i1 %1323, %1324
  %1326 = zext i1 %1325 to i8
  %1327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1326, i8* %1327, align 1, !tbaa !2432
  %1328 = trunc i64 %1322 to i32
  %1329 = and i32 %1328, 255
  %1330 = call i32 @llvm.ctpop.i32(i32 %1329) #16
  %1331 = trunc i32 %1330 to i8
  %1332 = and i8 %1331, 1
  %1333 = xor i8 %1332, 1
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1333, i8* %1334, align 1, !tbaa !2446
  %1335 = xor i64 %1319, %1318
  %1336 = xor i64 %1335, %1322
  %1337 = lshr i64 %1336, 4
  %1338 = trunc i64 %1337 to i8
  %1339 = and i8 %1338, 1
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1339, i8* %1340, align 1, !tbaa !2447
  %1341 = icmp eq i64 %1322, 0
  %1342 = zext i1 %1341 to i8
  %1343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1342, i8* %1343, align 1, !tbaa !2448
  %1344 = lshr i64 %1322, 63
  %1345 = trunc i64 %1344 to i8
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1345, i8* %1346, align 1, !tbaa !2449
  %1347 = lshr i64 %1318, 63
  %1348 = lshr i64 %1319, 63
  %1349 = xor i64 %1344, %1347
  %1350 = xor i64 %1344, %1348
  %1351 = add nuw nsw i64 %1349, %1350
  %1352 = icmp eq i64 %1351, 2
  %1353 = zext i1 %1352 to i8
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1353, i8* %1354, align 1, !tbaa !2450
  %1355 = load i64, i64* %RCX
  %1356 = add i64 %1355, 80
  %1357 = load i64, i64* %PC
  %1358 = add i64 %1357, 8
  store i64 %1358, i64* %PC
  %1359 = inttoptr i64 %1356 to i64*
  store i64 1, i64* %1359
  %1360 = load i64, i64* %RBP
  %1361 = sub i64 %1360, 248
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 7
  store i64 %1363, i64* %PC
  %1364 = inttoptr i64 %1361 to i64*
  %1365 = load i64, i64* %1364
  store i64 %1365, i64* %RCX, align 8, !tbaa !2428
  %1366 = load i32, i32* %ECX
  %1367 = zext i32 %1366 to i64
  %1368 = load i64, i64* %PC
  %1369 = add i64 %1368, 2
  store i64 %1369, i64* %PC
  %1370 = and i64 %1367, 4294967295
  store i64 %1370, i64* %RAX, align 8, !tbaa !2428
  %1371 = load i64, i64* %RBP
  %1372 = sub i64 %1371, 288
  %1373 = load i64, i64* %PC
  %1374 = add i64 %1373, 7
  store i64 %1374, i64* %PC
  %1375 = inttoptr i64 %1372 to i64*
  %1376 = load i64, i64* %1375
  store i64 %1376, i64* %RCX, align 8, !tbaa !2428
  %1377 = load i64, i64* %RBP
  %1378 = sub i64 %1377, 272
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 8
  store i64 %1380, i64* %PC
  %1381 = inttoptr i64 %1378 to i64*
  %1382 = load i64, i64* %1381
  %1383 = sext i64 %1382 to i128
  %1384 = and i128 %1383, -18446744073709551616
  %1385 = zext i64 %1382 to i128
  %1386 = or i128 %1384, %1385
  %1387 = mul nsw i128 %1386, 104
  %1388 = trunc i128 %1387 to i64
  store i64 %1388, i64* %RDX, align 8, !tbaa !2428
  %1389 = sext i64 %1388 to i128
  %1390 = icmp ne i128 %1389, %1387
  %1391 = zext i1 %1390 to i8
  %1392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1391, i8* %1392, align 1, !tbaa !2432
  %1393 = trunc i128 %1387 to i32
  %1394 = and i32 %1393, 255
  %1395 = call i32 @llvm.ctpop.i32(i32 %1394) #16
  %1396 = trunc i32 %1395 to i8
  %1397 = and i8 %1396, 1
  %1398 = xor i8 %1397, 1
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1398, i8* %1399, align 1, !tbaa !2446
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1400, align 1, !tbaa !2447
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1401, align 1, !tbaa !2448
  %1402 = lshr i64 %1388, 63
  %1403 = trunc i64 %1402 to i8
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1403, i8* %1404, align 1, !tbaa !2449
  %1405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1391, i8* %1405, align 1, !tbaa !2450
  %1406 = load i64, i64* %RCX
  %1407 = load i64, i64* %RDX
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 3
  store i64 %1409, i64* %PC
  %1410 = add i64 %1407, %1406
  store i64 %1410, i64* %RCX, align 8, !tbaa !2428
  %1411 = icmp ult i64 %1410, %1406
  %1412 = icmp ult i64 %1410, %1407
  %1413 = or i1 %1411, %1412
  %1414 = zext i1 %1413 to i8
  %1415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1414, i8* %1415, align 1, !tbaa !2432
  %1416 = trunc i64 %1410 to i32
  %1417 = and i32 %1416, 255
  %1418 = call i32 @llvm.ctpop.i32(i32 %1417) #16
  %1419 = trunc i32 %1418 to i8
  %1420 = and i8 %1419, 1
  %1421 = xor i8 %1420, 1
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1421, i8* %1422, align 1, !tbaa !2446
  %1423 = xor i64 %1407, %1406
  %1424 = xor i64 %1423, %1410
  %1425 = lshr i64 %1424, 4
  %1426 = trunc i64 %1425 to i8
  %1427 = and i8 %1426, 1
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1427, i8* %1428, align 1, !tbaa !2447
  %1429 = icmp eq i64 %1410, 0
  %1430 = zext i1 %1429 to i8
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1430, i8* %1431, align 1, !tbaa !2448
  %1432 = lshr i64 %1410, 63
  %1433 = trunc i64 %1432 to i8
  %1434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1433, i8* %1434, align 1, !tbaa !2449
  %1435 = lshr i64 %1406, 63
  %1436 = lshr i64 %1407, 63
  %1437 = xor i64 %1432, %1435
  %1438 = xor i64 %1432, %1436
  %1439 = add nuw nsw i64 %1437, %1438
  %1440 = icmp eq i64 %1439, 2
  %1441 = zext i1 %1440 to i8
  %1442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1441, i8* %1442, align 1, !tbaa !2450
  %1443 = load i64, i64* %RCX
  %1444 = add i64 %1443, 100
  %1445 = load i32, i32* %EAX
  %1446 = zext i32 %1445 to i64
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 3
  store i64 %1448, i64* %PC
  %1449 = inttoptr i64 %1444 to i32*
  store i32 %1445, i32* %1449
  %1450 = load i64, i64* %RBP
  %1451 = sub i64 %1450, 256
  %1452 = load i64, i64* %PC
  %1453 = add i64 %1452, 7
  store i64 %1453, i64* %PC
  %1454 = inttoptr i64 %1451 to i64*
  %1455 = load i64, i64* %1454
  store i64 %1455, i64* %RCX, align 8, !tbaa !2428
  %1456 = load i32, i32* %ECX
  %1457 = zext i32 %1456 to i64
  %1458 = load i64, i64* %PC
  %1459 = add i64 %1458, 2
  store i64 %1459, i64* %PC
  %1460 = and i64 %1457, 4294967295
  store i64 %1460, i64* %RAX, align 8, !tbaa !2428
  %1461 = load i64, i64* %RBP
  %1462 = sub i64 %1461, 288
  %1463 = load i64, i64* %PC
  %1464 = add i64 %1463, 7
  store i64 %1464, i64* %PC
  %1465 = inttoptr i64 %1462 to i64*
  %1466 = load i64, i64* %1465
  store i64 %1466, i64* %RCX, align 8, !tbaa !2428
  %1467 = load i64, i64* %RBP
  %1468 = sub i64 %1467, 272
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 7
  store i64 %1470, i64* %PC
  %1471 = inttoptr i64 %1468 to i64*
  %1472 = load i64, i64* %1471
  store i64 %1472, i64* %RDX, align 8, !tbaa !2428
  %1473 = load i64, i64* %RBP
  %1474 = sub i64 %1473, 16
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 4
  store i64 %1476, i64* %PC
  %1477 = inttoptr i64 %1474 to i64*
  %1478 = load i64, i64* %1477
  store i64 %1478, i64* %RSI, align 8, !tbaa !2428
  %1479 = load i64, i64* %RDX
  %1480 = load i64, i64* %RSI
  %1481 = add i64 %1480, 408
  %1482 = load i64, i64* %PC
  %1483 = add i64 %1482, 7
  store i64 %1483, i64* %PC
  %1484 = inttoptr i64 %1481 to i64*
  %1485 = load i64, i64* %1484
  %1486 = add i64 %1485, %1479
  store i64 %1486, i64* %RDX, align 8, !tbaa !2428
  %1487 = icmp ult i64 %1486, %1479
  %1488 = icmp ult i64 %1486, %1485
  %1489 = or i1 %1487, %1488
  %1490 = zext i1 %1489 to i8
  %1491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1490, i8* %1491, align 1, !tbaa !2432
  %1492 = trunc i64 %1486 to i32
  %1493 = and i32 %1492, 255
  %1494 = call i32 @llvm.ctpop.i32(i32 %1493) #16
  %1495 = trunc i32 %1494 to i8
  %1496 = and i8 %1495, 1
  %1497 = xor i8 %1496, 1
  %1498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1497, i8* %1498, align 1, !tbaa !2446
  %1499 = xor i64 %1485, %1479
  %1500 = xor i64 %1499, %1486
  %1501 = lshr i64 %1500, 4
  %1502 = trunc i64 %1501 to i8
  %1503 = and i8 %1502, 1
  %1504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1503, i8* %1504, align 1, !tbaa !2447
  %1505 = icmp eq i64 %1486, 0
  %1506 = zext i1 %1505 to i8
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1506, i8* %1507, align 1, !tbaa !2448
  %1508 = lshr i64 %1486, 63
  %1509 = trunc i64 %1508 to i8
  %1510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1509, i8* %1510, align 1, !tbaa !2449
  %1511 = lshr i64 %1479, 63
  %1512 = lshr i64 %1485, 63
  %1513 = xor i64 %1508, %1511
  %1514 = xor i64 %1508, %1512
  %1515 = add nuw nsw i64 %1513, %1514
  %1516 = icmp eq i64 %1515, 2
  %1517 = zext i1 %1516 to i8
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1517, i8* %1518, align 1, !tbaa !2450
  %1519 = load i64, i64* %RDX
  %1520 = load i64, i64* %PC
  %1521 = add i64 %1520, 4
  store i64 %1521, i64* %PC
  %1522 = sext i64 %1519 to i128
  %1523 = and i128 %1522, -18446744073709551616
  %1524 = zext i64 %1519 to i128
  %1525 = or i128 %1523, %1524
  %1526 = mul nsw i128 104, %1525
  %1527 = trunc i128 %1526 to i64
  store i64 %1527, i64* %RDX, align 8, !tbaa !2428
  %1528 = sext i64 %1527 to i128
  %1529 = icmp ne i128 %1528, %1526
  %1530 = zext i1 %1529 to i8
  %1531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1530, i8* %1531, align 1, !tbaa !2432
  %1532 = trunc i128 %1526 to i32
  %1533 = and i32 %1532, 255
  %1534 = call i32 @llvm.ctpop.i32(i32 %1533) #16
  %1535 = trunc i32 %1534 to i8
  %1536 = and i8 %1535, 1
  %1537 = xor i8 %1536, 1
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1537, i8* %1538, align 1, !tbaa !2446
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1539, align 1, !tbaa !2447
  %1540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1540, align 1, !tbaa !2448
  %1541 = lshr i64 %1527, 63
  %1542 = trunc i64 %1541 to i8
  %1543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1542, i8* %1543, align 1, !tbaa !2449
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1530, i8* %1544, align 1, !tbaa !2450
  %1545 = load i64, i64* %RCX
  %1546 = load i64, i64* %RDX
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 3
  store i64 %1548, i64* %PC
  %1549 = add i64 %1546, %1545
  store i64 %1549, i64* %RCX, align 8, !tbaa !2428
  %1550 = icmp ult i64 %1549, %1545
  %1551 = icmp ult i64 %1549, %1546
  %1552 = or i1 %1550, %1551
  %1553 = zext i1 %1552 to i8
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1553, i8* %1554, align 1, !tbaa !2432
  %1555 = trunc i64 %1549 to i32
  %1556 = and i32 %1555, 255
  %1557 = call i32 @llvm.ctpop.i32(i32 %1556) #16
  %1558 = trunc i32 %1557 to i8
  %1559 = and i8 %1558, 1
  %1560 = xor i8 %1559, 1
  %1561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1560, i8* %1561, align 1, !tbaa !2446
  %1562 = xor i64 %1546, %1545
  %1563 = xor i64 %1562, %1549
  %1564 = lshr i64 %1563, 4
  %1565 = trunc i64 %1564 to i8
  %1566 = and i8 %1565, 1
  %1567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1566, i8* %1567, align 1, !tbaa !2447
  %1568 = icmp eq i64 %1549, 0
  %1569 = zext i1 %1568 to i8
  %1570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1569, i8* %1570, align 1, !tbaa !2448
  %1571 = lshr i64 %1549, 63
  %1572 = trunc i64 %1571 to i8
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1572, i8* %1573, align 1, !tbaa !2449
  %1574 = lshr i64 %1545, 63
  %1575 = lshr i64 %1546, 63
  %1576 = xor i64 %1571, %1574
  %1577 = xor i64 %1571, %1575
  %1578 = add nuw nsw i64 %1576, %1577
  %1579 = icmp eq i64 %1578, 2
  %1580 = zext i1 %1579 to i8
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1580, i8* %1581, align 1, !tbaa !2450
  %1582 = load i64, i64* %RCX
  %1583 = add i64 %1582, 100
  %1584 = load i32, i32* %EAX
  %1585 = zext i32 %1584 to i64
  %1586 = load i64, i64* %PC
  %1587 = add i64 %1586, 3
  store i64 %1587, i64* %PC
  %1588 = inttoptr i64 %1583 to i32*
  store i32 %1584, i32* %1588
  %1589 = load i64, i64* %RBP
  %1590 = sub i64 %1589, 288
  %1591 = load i64, i64* %PC
  %1592 = add i64 %1591, 7
  store i64 %1592, i64* %PC
  %1593 = inttoptr i64 %1590 to i64*
  %1594 = load i64, i64* %1593
  store i64 %1594, i64* %RCX, align 8, !tbaa !2428
  %1595 = load i64, i64* %RBP
  %1596 = sub i64 %1595, 16
  %1597 = load i64, i64* %PC
  %1598 = add i64 %1597, 4
  store i64 %1598, i64* %PC
  %1599 = inttoptr i64 %1596 to i64*
  %1600 = load i64, i64* %1599
  store i64 %1600, i64* %RDX, align 8, !tbaa !2428
  %1601 = load i64, i64* %RDX
  %1602 = add i64 %1601, 400
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 8
  store i64 %1604, i64* %PC
  %1605 = inttoptr i64 %1602 to i64*
  %1606 = load i64, i64* %1605
  %1607 = sext i64 %1606 to i128
  %1608 = and i128 %1607, -18446744073709551616
  %1609 = zext i64 %1606 to i128
  %1610 = or i128 %1608, %1609
  %1611 = mul nsw i128 %1610, 104
  %1612 = trunc i128 %1611 to i64
  store i64 %1612, i64* %RDX, align 8, !tbaa !2428
  %1613 = sext i64 %1612 to i128
  %1614 = icmp ne i128 %1613, %1611
  %1615 = zext i1 %1614 to i8
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1615, i8* %1616, align 1, !tbaa !2432
  %1617 = trunc i128 %1611 to i32
  %1618 = and i32 %1617, 255
  %1619 = call i32 @llvm.ctpop.i32(i32 %1618) #16
  %1620 = trunc i32 %1619 to i8
  %1621 = and i8 %1620, 1
  %1622 = xor i8 %1621, 1
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1622, i8* %1623, align 1, !tbaa !2446
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1624, align 1, !tbaa !2447
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1625, align 1, !tbaa !2448
  %1626 = lshr i64 %1612, 63
  %1627 = trunc i64 %1626 to i8
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1627, i8* %1628, align 1, !tbaa !2449
  %1629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1615, i8* %1629, align 1, !tbaa !2450
  %1630 = load i64, i64* %RCX
  %1631 = load i64, i64* %RDX
  %1632 = load i64, i64* %PC
  %1633 = add i64 %1632, 3
  store i64 %1633, i64* %PC
  %1634 = add i64 %1631, %1630
  store i64 %1634, i64* %RCX, align 8, !tbaa !2428
  %1635 = icmp ult i64 %1634, %1630
  %1636 = icmp ult i64 %1634, %1631
  %1637 = or i1 %1635, %1636
  %1638 = zext i1 %1637 to i8
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1638, i8* %1639, align 1, !tbaa !2432
  %1640 = trunc i64 %1634 to i32
  %1641 = and i32 %1640, 255
  %1642 = call i32 @llvm.ctpop.i32(i32 %1641) #16
  %1643 = trunc i32 %1642 to i8
  %1644 = and i8 %1643, 1
  %1645 = xor i8 %1644, 1
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1645, i8* %1646, align 1, !tbaa !2446
  %1647 = xor i64 %1631, %1630
  %1648 = xor i64 %1647, %1634
  %1649 = lshr i64 %1648, 4
  %1650 = trunc i64 %1649 to i8
  %1651 = and i8 %1650, 1
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1651, i8* %1652, align 1, !tbaa !2447
  %1653 = icmp eq i64 %1634, 0
  %1654 = zext i1 %1653 to i8
  %1655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1654, i8* %1655, align 1, !tbaa !2448
  %1656 = lshr i64 %1634, 63
  %1657 = trunc i64 %1656 to i8
  %1658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1657, i8* %1658, align 1, !tbaa !2449
  %1659 = lshr i64 %1630, 63
  %1660 = lshr i64 %1631, 63
  %1661 = xor i64 %1656, %1659
  %1662 = xor i64 %1656, %1660
  %1663 = add nuw nsw i64 %1661, %1662
  %1664 = icmp eq i64 %1663, 2
  %1665 = zext i1 %1664 to i8
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1665, i8* %1666, align 1, !tbaa !2450
  %1667 = load i64, i64* %RBP
  %1668 = sub i64 %1667, 280
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 7
  store i64 %1670, i64* %PC
  %1671 = inttoptr i64 %1668 to i64*
  %1672 = load i64, i64* %1671
  store i64 %1672, i64* %RDX, align 8, !tbaa !2428
  %1673 = load i64, i64* %RDX
  %1674 = add i64 %1673, 8
  %1675 = load i64, i64* %RCX
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 4
  store i64 %1677, i64* %PC
  %1678 = inttoptr i64 %1674 to i64*
  store i64 %1675, i64* %1678
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 288
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 7
  store i64 %1682, i64* %PC
  %1683 = inttoptr i64 %1680 to i64*
  %1684 = load i64, i64* %1683
  store i64 %1684, i64* %RCX, align 8, !tbaa !2428
  %1685 = load i64, i64* %RBP
  %1686 = sub i64 %1685, 272
  %1687 = load i64, i64* %PC
  %1688 = add i64 %1687, 8
  store i64 %1688, i64* %PC
  %1689 = inttoptr i64 %1686 to i64*
  %1690 = load i64, i64* %1689
  %1691 = sext i64 %1690 to i128
  %1692 = and i128 %1691, -18446744073709551616
  %1693 = zext i64 %1690 to i128
  %1694 = or i128 %1692, %1693
  %1695 = mul nsw i128 %1694, 104
  %1696 = trunc i128 %1695 to i64
  store i64 %1696, i64* %RDX, align 8, !tbaa !2428
  %1697 = sext i64 %1696 to i128
  %1698 = icmp ne i128 %1697, %1695
  %1699 = zext i1 %1698 to i8
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1699, i8* %1700, align 1, !tbaa !2432
  %1701 = trunc i128 %1695 to i32
  %1702 = and i32 %1701, 255
  %1703 = call i32 @llvm.ctpop.i32(i32 %1702) #16
  %1704 = trunc i32 %1703 to i8
  %1705 = and i8 %1704, 1
  %1706 = xor i8 %1705, 1
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1706, i8* %1707, align 1, !tbaa !2446
  %1708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1708, align 1, !tbaa !2447
  %1709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1709, align 1, !tbaa !2448
  %1710 = lshr i64 %1696, 63
  %1711 = trunc i64 %1710 to i8
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1711, i8* %1712, align 1, !tbaa !2449
  %1713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1699, i8* %1713, align 1, !tbaa !2450
  %1714 = load i64, i64* %RCX
  %1715 = load i64, i64* %RDX
  %1716 = load i64, i64* %PC
  %1717 = add i64 %1716, 3
  store i64 %1717, i64* %PC
  %1718 = add i64 %1715, %1714
  store i64 %1718, i64* %RCX, align 8, !tbaa !2428
  %1719 = icmp ult i64 %1718, %1714
  %1720 = icmp ult i64 %1718, %1715
  %1721 = or i1 %1719, %1720
  %1722 = zext i1 %1721 to i8
  %1723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1722, i8* %1723, align 1, !tbaa !2432
  %1724 = trunc i64 %1718 to i32
  %1725 = and i32 %1724, 255
  %1726 = call i32 @llvm.ctpop.i32(i32 %1725) #16
  %1727 = trunc i32 %1726 to i8
  %1728 = and i8 %1727, 1
  %1729 = xor i8 %1728, 1
  %1730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1729, i8* %1730, align 1, !tbaa !2446
  %1731 = xor i64 %1715, %1714
  %1732 = xor i64 %1731, %1718
  %1733 = lshr i64 %1732, 4
  %1734 = trunc i64 %1733 to i8
  %1735 = and i8 %1734, 1
  %1736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1735, i8* %1736, align 1, !tbaa !2447
  %1737 = icmp eq i64 %1718, 0
  %1738 = zext i1 %1737 to i8
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1738, i8* %1739, align 1, !tbaa !2448
  %1740 = lshr i64 %1718, 63
  %1741 = trunc i64 %1740 to i8
  %1742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1741, i8* %1742, align 1, !tbaa !2449
  %1743 = lshr i64 %1714, 63
  %1744 = lshr i64 %1715, 63
  %1745 = xor i64 %1740, %1743
  %1746 = xor i64 %1740, %1744
  %1747 = add nuw nsw i64 %1745, %1746
  %1748 = icmp eq i64 %1747, 2
  %1749 = zext i1 %1748 to i8
  %1750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1749, i8* %1750, align 1, !tbaa !2450
  %1751 = load i64, i64* %RBP
  %1752 = sub i64 %1751, 280
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 7
  store i64 %1754, i64* %PC
  %1755 = inttoptr i64 %1752 to i64*
  %1756 = load i64, i64* %1755
  store i64 %1756, i64* %RDX, align 8, !tbaa !2428
  %1757 = load i64, i64* %RDX
  %1758 = add i64 %1757, 16
  %1759 = load i64, i64* %RCX
  %1760 = load i64, i64* %PC
  %1761 = add i64 %1760, 4
  store i64 %1761, i64* %PC
  %1762 = inttoptr i64 %1758 to i64*
  store i64 %1759, i64* %1762
  %1763 = load i64, i64* %RBP
  %1764 = sub i64 %1763, 16
  %1765 = load i64, i64* %PC
  %1766 = add i64 %1765, 4
  store i64 %1766, i64* %PC
  %1767 = inttoptr i64 %1764 to i64*
  %1768 = load i64, i64* %1767
  store i64 %1768, i64* %RCX, align 8, !tbaa !2428
  %1769 = load i64, i64* %RCX
  %1770 = add i64 %1769, 528
  %1771 = load i64, i64* %PC
  %1772 = add i64 %1771, 7
  store i64 %1772, i64* %PC
  %1773 = inttoptr i64 %1770 to i64*
  %1774 = load i64, i64* %1773
  store i64 %1774, i64* %RCX, align 8, !tbaa !2428
  %1775 = load i64, i64* %RCX
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 4
  store i64 %1777, i64* %PC
  %1778 = add i64 15, %1775
  store i64 %1778, i64* %RCX, align 8, !tbaa !2428
  %1779 = icmp ult i64 %1778, %1775
  %1780 = icmp ult i64 %1778, 15
  %1781 = or i1 %1779, %1780
  %1782 = zext i1 %1781 to i8
  %1783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1782, i8* %1783, align 1, !tbaa !2432
  %1784 = trunc i64 %1778 to i32
  %1785 = and i32 %1784, 255
  %1786 = call i32 @llvm.ctpop.i32(i32 %1785) #16
  %1787 = trunc i32 %1786 to i8
  %1788 = and i8 %1787, 1
  %1789 = xor i8 %1788, 1
  %1790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1789, i8* %1790, align 1, !tbaa !2446
  %1791 = xor i64 15, %1775
  %1792 = xor i64 %1791, %1778
  %1793 = lshr i64 %1792, 4
  %1794 = trunc i64 %1793 to i8
  %1795 = and i8 %1794, 1
  %1796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1795, i8* %1796, align 1, !tbaa !2447
  %1797 = icmp eq i64 %1778, 0
  %1798 = zext i1 %1797 to i8
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1798, i8* %1799, align 1, !tbaa !2448
  %1800 = lshr i64 %1778, 63
  %1801 = trunc i64 %1800 to i8
  %1802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1801, i8* %1802, align 1, !tbaa !2449
  %1803 = lshr i64 %1775, 63
  %1804 = xor i64 %1800, %1803
  %1805 = add nuw nsw i64 %1804, %1800
  %1806 = icmp eq i64 %1805, 2
  %1807 = zext i1 %1806 to i8
  %1808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1807, i8* %1808, align 1, !tbaa !2450
  %1809 = load i64, i64* %RBP
  %1810 = sub i64 %1809, 280
  %1811 = load i64, i64* %PC
  %1812 = add i64 %1811, 7
  store i64 %1812, i64* %PC
  %1813 = inttoptr i64 %1810 to i64*
  %1814 = load i64, i64* %1813
  store i64 %1814, i64* %RDX, align 8, !tbaa !2428
  %1815 = load i64, i64* %RDX
  %1816 = load i64, i64* %RCX
  %1817 = load i64, i64* %PC
  %1818 = add i64 %1817, 3
  store i64 %1818, i64* %PC
  %1819 = inttoptr i64 %1815 to i64*
  store i64 %1816, i64* %1819
  %1820 = load i64, i64* %RBP
  %1821 = sub i64 %1820, 280
  %1822 = load i64, i64* %PC
  %1823 = add i64 %1822, 7
  store i64 %1823, i64* %PC
  %1824 = inttoptr i64 %1821 to i64*
  %1825 = load i64, i64* %1824
  store i64 %1825, i64* %RDX, align 8, !tbaa !2428
  %1826 = load i64, i64* %RDX
  %1827 = add i64 %1826, 56
  %1828 = load i64, i64* %RCX
  %1829 = load i64, i64* %PC
  %1830 = add i64 %1829, 4
  store i64 %1830, i64* %PC
  %1831 = inttoptr i64 %1827 to i64*
  store i64 %1828, i64* %1831
  %1832 = load i64, i64* %RBP
  %1833 = sub i64 %1832, 280
  %1834 = load i64, i64* %PC
  %1835 = add i64 %1834, 7
  store i64 %1835, i64* %PC
  %1836 = inttoptr i64 %1833 to i64*
  %1837 = load i64, i64* %1836
  store i64 %1837, i64* %RCX, align 8, !tbaa !2428
  %1838 = load i64, i64* %RCX
  %1839 = add i64 %1838, 8
  %1840 = load i64, i64* %PC
  %1841 = add i64 %1840, 4
  store i64 %1841, i64* %PC
  %1842 = inttoptr i64 %1839 to i64*
  %1843 = load i64, i64* %1842
  store i64 %1843, i64* %RCX, align 8, !tbaa !2428
  %1844 = load i64, i64* %RCX
  %1845 = add i64 %1844, 56
  %1846 = load i64, i64* %PC
  %1847 = add i64 %1846, 4
  store i64 %1847, i64* %PC
  %1848 = inttoptr i64 %1845 to i64*
  %1849 = load i64, i64* %1848
  store i64 %1849, i64* %RCX, align 8, !tbaa !2428
  %1850 = load i64, i64* %RBP
  %1851 = sub i64 %1850, 280
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 7
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1851 to i64*
  %1855 = load i64, i64* %1854
  store i64 %1855, i64* %RDX, align 8, !tbaa !2428
  %1856 = load i64, i64* %RDX
  %1857 = add i64 %1856, 32
  %1858 = load i64, i64* %RCX
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 4
  store i64 %1860, i64* %PC
  %1861 = inttoptr i64 %1857 to i64*
  store i64 %1858, i64* %1861
  %1862 = load i64, i64* %RBP
  %1863 = sub i64 %1862, 280
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 7
  store i64 %1865, i64* %PC
  %1866 = inttoptr i64 %1863 to i64*
  %1867 = load i64, i64* %1866
  store i64 %1867, i64* %RCX, align 8, !tbaa !2428
  %1868 = load i64, i64* %RBP
  %1869 = sub i64 %1868, 280
  %1870 = load i64, i64* %PC
  %1871 = add i64 %1870, 7
  store i64 %1871, i64* %PC
  %1872 = inttoptr i64 %1869 to i64*
  %1873 = load i64, i64* %1872
  store i64 %1873, i64* %RDX, align 8, !tbaa !2428
  %1874 = load i64, i64* %RDX
  %1875 = add i64 %1874, 8
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 4
  store i64 %1877, i64* %PC
  %1878 = inttoptr i64 %1875 to i64*
  %1879 = load i64, i64* %1878
  store i64 %1879, i64* %RDX, align 8, !tbaa !2428
  %1880 = load i64, i64* %RDX
  %1881 = add i64 %1880, 56
  %1882 = load i64, i64* %RCX
  %1883 = load i64, i64* %PC
  %1884 = add i64 %1883, 4
  store i64 %1884, i64* %PC
  %1885 = inttoptr i64 %1881 to i64*
  store i64 %1882, i64* %1885
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 280
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 7
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i64*
  %1891 = load i64, i64* %1890
  store i64 %1891, i64* %RCX, align 8, !tbaa !2428
  %1892 = load i64, i64* %RCX
  %1893 = add i64 %1892, 16
  %1894 = load i64, i64* %PC
  %1895 = add i64 %1894, 4
  store i64 %1895, i64* %PC
  %1896 = inttoptr i64 %1893 to i64*
  %1897 = load i64, i64* %1896
  store i64 %1897, i64* %RCX, align 8, !tbaa !2428
  %1898 = load i64, i64* %RCX
  %1899 = add i64 %1898, 64
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 4
  store i64 %1901, i64* %PC
  %1902 = inttoptr i64 %1899 to i64*
  %1903 = load i64, i64* %1902
  store i64 %1903, i64* %RCX, align 8, !tbaa !2428
  %1904 = load i64, i64* %RBP
  %1905 = sub i64 %1904, 280
  %1906 = load i64, i64* %PC
  %1907 = add i64 %1906, 7
  store i64 %1907, i64* %PC
  %1908 = inttoptr i64 %1905 to i64*
  %1909 = load i64, i64* %1908
  store i64 %1909, i64* %RDX, align 8, !tbaa !2428
  %1910 = load i64, i64* %RDX
  %1911 = add i64 %1910, 40
  %1912 = load i64, i64* %RCX
  %1913 = load i64, i64* %PC
  %1914 = add i64 %1913, 4
  store i64 %1914, i64* %PC
  %1915 = inttoptr i64 %1911 to i64*
  store i64 %1912, i64* %1915
  %1916 = load i64, i64* %RBP
  %1917 = sub i64 %1916, 280
  %1918 = load i64, i64* %PC
  %1919 = add i64 %1918, 7
  store i64 %1919, i64* %PC
  %1920 = inttoptr i64 %1917 to i64*
  %1921 = load i64, i64* %1920
  store i64 %1921, i64* %RCX, align 8, !tbaa !2428
  %1922 = load i64, i64* %RBP
  %1923 = sub i64 %1922, 280
  %1924 = load i64, i64* %PC
  %1925 = add i64 %1924, 7
  store i64 %1925, i64* %PC
  %1926 = inttoptr i64 %1923 to i64*
  %1927 = load i64, i64* %1926
  store i64 %1927, i64* %RDX, align 8, !tbaa !2428
  %1928 = load i64, i64* %RDX
  %1929 = add i64 %1928, 16
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 4
  store i64 %1931, i64* %PC
  %1932 = inttoptr i64 %1929 to i64*
  %1933 = load i64, i64* %1932
  store i64 %1933, i64* %RDX, align 8, !tbaa !2428
  %1934 = load i64, i64* %RDX
  %1935 = add i64 %1934, 64
  %1936 = load i64, i64* %RCX
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 4
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1935 to i64*
  store i64 %1936, i64* %1939
  %1940 = load i64, i64* %RBP
  %1941 = sub i64 %1940, 280
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 7
  store i64 %1943, i64* %PC
  %1944 = inttoptr i64 %1941 to i64*
  %1945 = load i64, i64* %1944
  store i64 %1945, i64* %RCX, align 8, !tbaa !2428
  %1946 = load i64, i64* %RCX
  %1947 = load i64, i64* %PC
  %1948 = add i64 %1947, 4
  store i64 %1948, i64* %PC
  %1949 = add i64 64, %1946
  store i64 %1949, i64* %RCX, align 8, !tbaa !2428
  %1950 = icmp ult i64 %1949, %1946
  %1951 = icmp ult i64 %1949, 64
  %1952 = or i1 %1950, %1951
  %1953 = zext i1 %1952 to i8
  %1954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1953, i8* %1954, align 1, !tbaa !2432
  %1955 = trunc i64 %1949 to i32
  %1956 = and i32 %1955, 255
  %1957 = call i32 @llvm.ctpop.i32(i32 %1956) #16
  %1958 = trunc i32 %1957 to i8
  %1959 = and i8 %1958, 1
  %1960 = xor i8 %1959, 1
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1960, i8* %1961, align 1, !tbaa !2446
  %1962 = xor i64 64, %1946
  %1963 = xor i64 %1962, %1949
  %1964 = lshr i64 %1963, 4
  %1965 = trunc i64 %1964 to i8
  %1966 = and i8 %1965, 1
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1966, i8* %1967, align 1, !tbaa !2447
  %1968 = icmp eq i64 %1949, 0
  %1969 = zext i1 %1968 to i8
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1969, i8* %1970, align 1, !tbaa !2448
  %1971 = lshr i64 %1949, 63
  %1972 = trunc i64 %1971 to i8
  %1973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1972, i8* %1973, align 1, !tbaa !2449
  %1974 = lshr i64 %1946, 63
  %1975 = xor i64 %1971, %1974
  %1976 = add nuw nsw i64 %1975, %1971
  %1977 = icmp eq i64 %1976, 2
  %1978 = zext i1 %1977 to i8
  %1979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1978, i8* %1979, align 1, !tbaa !2450
  %1980 = load i64, i64* %RBP
  %1981 = sub i64 %1980, 280
  %1982 = load i64, i64* %RCX
  %1983 = load i64, i64* %PC
  %1984 = add i64 %1983, 7
  store i64 %1984, i64* %PC
  %1985 = inttoptr i64 %1981 to i64*
  store i64 %1982, i64* %1985
  %1986 = load i64, i64* %RBP
  %1987 = sub i64 %1986, 288
  %1988 = load i64, i64* %PC
  %1989 = add i64 %1988, 7
  store i64 %1989, i64* %PC
  %1990 = inttoptr i64 %1987 to i64*
  %1991 = load i64, i64* %1990
  store i64 %1991, i64* %RCX, align 8, !tbaa !2428
  %1992 = load i64, i64* %RBP
  %1993 = sub i64 %1992, 272
  %1994 = load i64, i64* %PC
  %1995 = add i64 %1994, 7
  store i64 %1995, i64* %PC
  %1996 = inttoptr i64 %1993 to i64*
  %1997 = load i64, i64* %1996
  store i64 %1997, i64* %RDX, align 8, !tbaa !2428
  %1998 = load i64, i64* %RBP
  %1999 = sub i64 %1998, 16
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 4
  store i64 %2001, i64* %PC
  %2002 = inttoptr i64 %1999 to i64*
  %2003 = load i64, i64* %2002
  store i64 %2003, i64* %RSI, align 8, !tbaa !2428
  %2004 = load i64, i64* %RDX
  %2005 = load i64, i64* %RSI
  %2006 = add i64 %2005, 408
  %2007 = load i64, i64* %PC
  %2008 = add i64 %2007, 7
  store i64 %2008, i64* %PC
  %2009 = inttoptr i64 %2006 to i64*
  %2010 = load i64, i64* %2009
  %2011 = add i64 %2010, %2004
  store i64 %2011, i64* %RDX, align 8, !tbaa !2428
  %2012 = icmp ult i64 %2011, %2004
  %2013 = icmp ult i64 %2011, %2010
  %2014 = or i1 %2012, %2013
  %2015 = zext i1 %2014 to i8
  %2016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2015, i8* %2016, align 1, !tbaa !2432
  %2017 = trunc i64 %2011 to i32
  %2018 = and i32 %2017, 255
  %2019 = call i32 @llvm.ctpop.i32(i32 %2018) #16
  %2020 = trunc i32 %2019 to i8
  %2021 = and i8 %2020, 1
  %2022 = xor i8 %2021, 1
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2022, i8* %2023, align 1, !tbaa !2446
  %2024 = xor i64 %2010, %2004
  %2025 = xor i64 %2024, %2011
  %2026 = lshr i64 %2025, 4
  %2027 = trunc i64 %2026 to i8
  %2028 = and i8 %2027, 1
  %2029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2028, i8* %2029, align 1, !tbaa !2447
  %2030 = icmp eq i64 %2011, 0
  %2031 = zext i1 %2030 to i8
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2031, i8* %2032, align 1, !tbaa !2448
  %2033 = lshr i64 %2011, 63
  %2034 = trunc i64 %2033 to i8
  %2035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2034, i8* %2035, align 1, !tbaa !2449
  %2036 = lshr i64 %2004, 63
  %2037 = lshr i64 %2010, 63
  %2038 = xor i64 %2033, %2036
  %2039 = xor i64 %2033, %2037
  %2040 = add nuw nsw i64 %2038, %2039
  %2041 = icmp eq i64 %2040, 2
  %2042 = zext i1 %2041 to i8
  %2043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2042, i8* %2043, align 1, !tbaa !2450
  %2044 = load i64, i64* %RDX
  %2045 = load i64, i64* %PC
  %2046 = add i64 %2045, 4
  store i64 %2046, i64* %PC
  %2047 = sext i64 %2044 to i128
  %2048 = and i128 %2047, -18446744073709551616
  %2049 = zext i64 %2044 to i128
  %2050 = or i128 %2048, %2049
  %2051 = mul nsw i128 104, %2050
  %2052 = trunc i128 %2051 to i64
  store i64 %2052, i64* %RDX, align 8, !tbaa !2428
  %2053 = sext i64 %2052 to i128
  %2054 = icmp ne i128 %2053, %2051
  %2055 = zext i1 %2054 to i8
  %2056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2055, i8* %2056, align 1, !tbaa !2432
  %2057 = trunc i128 %2051 to i32
  %2058 = and i32 %2057, 255
  %2059 = call i32 @llvm.ctpop.i32(i32 %2058) #16
  %2060 = trunc i32 %2059 to i8
  %2061 = and i8 %2060, 1
  %2062 = xor i8 %2061, 1
  %2063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2062, i8* %2063, align 1, !tbaa !2446
  %2064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2064, align 1, !tbaa !2447
  %2065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2065, align 1, !tbaa !2448
  %2066 = lshr i64 %2052, 63
  %2067 = trunc i64 %2066 to i8
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2067, i8* %2068, align 1, !tbaa !2449
  %2069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2055, i8* %2069, align 1, !tbaa !2450
  %2070 = load i64, i64* %RCX
  %2071 = load i64, i64* %RDX
  %2072 = load i64, i64* %PC
  %2073 = add i64 %2072, 3
  store i64 %2073, i64* %PC
  %2074 = add i64 %2071, %2070
  store i64 %2074, i64* %RCX, align 8, !tbaa !2428
  %2075 = icmp ult i64 %2074, %2070
  %2076 = icmp ult i64 %2074, %2071
  %2077 = or i1 %2075, %2076
  %2078 = zext i1 %2077 to i8
  %2079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2078, i8* %2079, align 1, !tbaa !2432
  %2080 = trunc i64 %2074 to i32
  %2081 = and i32 %2080, 255
  %2082 = call i32 @llvm.ctpop.i32(i32 %2081) #16
  %2083 = trunc i32 %2082 to i8
  %2084 = and i8 %2083, 1
  %2085 = xor i8 %2084, 1
  %2086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2085, i8* %2086, align 1, !tbaa !2446
  %2087 = xor i64 %2071, %2070
  %2088 = xor i64 %2087, %2074
  %2089 = lshr i64 %2088, 4
  %2090 = trunc i64 %2089 to i8
  %2091 = and i8 %2090, 1
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2091, i8* %2092, align 1, !tbaa !2447
  %2093 = icmp eq i64 %2074, 0
  %2094 = zext i1 %2093 to i8
  %2095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2094, i8* %2095, align 1, !tbaa !2448
  %2096 = lshr i64 %2074, 63
  %2097 = trunc i64 %2096 to i8
  %2098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2097, i8* %2098, align 1, !tbaa !2449
  %2099 = lshr i64 %2070, 63
  %2100 = lshr i64 %2071, 63
  %2101 = xor i64 %2096, %2099
  %2102 = xor i64 %2096, %2100
  %2103 = add nuw nsw i64 %2101, %2102
  %2104 = icmp eq i64 %2103, 2
  %2105 = zext i1 %2104 to i8
  %2106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2105, i8* %2106, align 1, !tbaa !2450
  %2107 = load i64, i64* %RBP
  %2108 = sub i64 %2107, 280
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 7
  store i64 %2110, i64* %PC
  %2111 = inttoptr i64 %2108 to i64*
  %2112 = load i64, i64* %2111
  store i64 %2112, i64* %RDX, align 8, !tbaa !2428
  %2113 = load i64, i64* %RDX
  %2114 = add i64 %2113, 8
  %2115 = load i64, i64* %RCX
  %2116 = load i64, i64* %PC
  %2117 = add i64 %2116, 4
  store i64 %2117, i64* %PC
  %2118 = inttoptr i64 %2114 to i64*
  store i64 %2115, i64* %2118
  %2119 = load i64, i64* %RBP
  %2120 = sub i64 %2119, 288
  %2121 = load i64, i64* %PC
  %2122 = add i64 %2121, 7
  store i64 %2122, i64* %PC
  %2123 = inttoptr i64 %2120 to i64*
  %2124 = load i64, i64* %2123
  store i64 %2124, i64* %RCX, align 8, !tbaa !2428
  %2125 = load i64, i64* %RBP
  %2126 = sub i64 %2125, 16
  %2127 = load i64, i64* %PC
  %2128 = add i64 %2127, 4
  store i64 %2128, i64* %PC
  %2129 = inttoptr i64 %2126 to i64*
  %2130 = load i64, i64* %2129
  store i64 %2130, i64* %RDX, align 8, !tbaa !2428
  %2131 = load i64, i64* %RDX
  %2132 = add i64 %2131, 400
  %2133 = load i64, i64* %PC
  %2134 = add i64 %2133, 8
  store i64 %2134, i64* %PC
  %2135 = inttoptr i64 %2132 to i64*
  %2136 = load i64, i64* %2135
  %2137 = sext i64 %2136 to i128
  %2138 = and i128 %2137, -18446744073709551616
  %2139 = zext i64 %2136 to i128
  %2140 = or i128 %2138, %2139
  %2141 = mul nsw i128 %2140, 104
  %2142 = trunc i128 %2141 to i64
  store i64 %2142, i64* %RDX, align 8, !tbaa !2428
  %2143 = sext i64 %2142 to i128
  %2144 = icmp ne i128 %2143, %2141
  %2145 = zext i1 %2144 to i8
  %2146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2145, i8* %2146, align 1, !tbaa !2432
  %2147 = trunc i128 %2141 to i32
  %2148 = and i32 %2147, 255
  %2149 = call i32 @llvm.ctpop.i32(i32 %2148) #16
  %2150 = trunc i32 %2149 to i8
  %2151 = and i8 %2150, 1
  %2152 = xor i8 %2151, 1
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2152, i8* %2153, align 1, !tbaa !2446
  %2154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2154, align 1, !tbaa !2447
  %2155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2155, align 1, !tbaa !2448
  %2156 = lshr i64 %2142, 63
  %2157 = trunc i64 %2156 to i8
  %2158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2157, i8* %2158, align 1, !tbaa !2449
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2145, i8* %2159, align 1, !tbaa !2450
  %2160 = load i64, i64* %RCX
  %2161 = load i64, i64* %RDX
  %2162 = load i64, i64* %PC
  %2163 = add i64 %2162, 3
  store i64 %2163, i64* %PC
  %2164 = add i64 %2161, %2160
  store i64 %2164, i64* %RCX, align 8, !tbaa !2428
  %2165 = icmp ult i64 %2164, %2160
  %2166 = icmp ult i64 %2164, %2161
  %2167 = or i1 %2165, %2166
  %2168 = zext i1 %2167 to i8
  %2169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2168, i8* %2169, align 1, !tbaa !2432
  %2170 = trunc i64 %2164 to i32
  %2171 = and i32 %2170, 255
  %2172 = call i32 @llvm.ctpop.i32(i32 %2171) #16
  %2173 = trunc i32 %2172 to i8
  %2174 = and i8 %2173, 1
  %2175 = xor i8 %2174, 1
  %2176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2175, i8* %2176, align 1, !tbaa !2446
  %2177 = xor i64 %2161, %2160
  %2178 = xor i64 %2177, %2164
  %2179 = lshr i64 %2178, 4
  %2180 = trunc i64 %2179 to i8
  %2181 = and i8 %2180, 1
  %2182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2181, i8* %2182, align 1, !tbaa !2447
  %2183 = icmp eq i64 %2164, 0
  %2184 = zext i1 %2183 to i8
  %2185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2184, i8* %2185, align 1, !tbaa !2448
  %2186 = lshr i64 %2164, 63
  %2187 = trunc i64 %2186 to i8
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2187, i8* %2188, align 1, !tbaa !2449
  %2189 = lshr i64 %2160, 63
  %2190 = lshr i64 %2161, 63
  %2191 = xor i64 %2186, %2189
  %2192 = xor i64 %2186, %2190
  %2193 = add nuw nsw i64 %2191, %2192
  %2194 = icmp eq i64 %2193, 2
  %2195 = zext i1 %2194 to i8
  %2196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2195, i8* %2196, align 1, !tbaa !2450
  %2197 = load i64, i64* %RBP
  %2198 = sub i64 %2197, 280
  %2199 = load i64, i64* %PC
  %2200 = add i64 %2199, 7
  store i64 %2200, i64* %PC
  %2201 = inttoptr i64 %2198 to i64*
  %2202 = load i64, i64* %2201
  store i64 %2202, i64* %RDX, align 8, !tbaa !2428
  %2203 = load i64, i64* %RDX
  %2204 = add i64 %2203, 16
  %2205 = load i64, i64* %RCX
  %2206 = load i64, i64* %PC
  %2207 = add i64 %2206, 4
  store i64 %2207, i64* %PC
  %2208 = inttoptr i64 %2204 to i64*
  store i64 %2205, i64* %2208
  %2209 = load i64, i64* %RBP
  %2210 = sub i64 %2209, 280
  %2211 = load i64, i64* %PC
  %2212 = add i64 %2211, 7
  store i64 %2212, i64* %PC
  %2213 = inttoptr i64 %2210 to i64*
  %2214 = load i64, i64* %2213
  store i64 %2214, i64* %RCX, align 8, !tbaa !2428
  %2215 = load i64, i64* %RCX
  %2216 = load i64, i64* %PC
  %2217 = add i64 %2216, 7
  store i64 %2217, i64* %PC
  %2218 = inttoptr i64 %2215 to i64*
  store i64 15, i64* %2218
  %2219 = load i64, i64* %RBP
  %2220 = sub i64 %2219, 280
  %2221 = load i64, i64* %PC
  %2222 = add i64 %2221, 7
  store i64 %2222, i64* %PC
  %2223 = inttoptr i64 %2220 to i64*
  %2224 = load i64, i64* %2223
  store i64 %2224, i64* %RCX, align 8, !tbaa !2428
  %2225 = load i64, i64* %RCX
  %2226 = add i64 %2225, 56
  %2227 = load i64, i64* %PC
  %2228 = add i64 %2227, 8
  store i64 %2228, i64* %PC
  %2229 = inttoptr i64 %2226 to i64*
  store i64 15, i64* %2229
  %2230 = load i64, i64* %RBP
  %2231 = sub i64 %2230, 280
  %2232 = load i64, i64* %PC
  %2233 = add i64 %2232, 7
  store i64 %2233, i64* %PC
  %2234 = inttoptr i64 %2231 to i64*
  %2235 = load i64, i64* %2234
  store i64 %2235, i64* %RCX, align 8, !tbaa !2428
  %2236 = load i64, i64* %RCX
  %2237 = add i64 %2236, 8
  %2238 = load i64, i64* %PC
  %2239 = add i64 %2238, 4
  store i64 %2239, i64* %PC
  %2240 = inttoptr i64 %2237 to i64*
  %2241 = load i64, i64* %2240
  store i64 %2241, i64* %RCX, align 8, !tbaa !2428
  %2242 = load i64, i64* %RCX
  %2243 = add i64 %2242, 56
  %2244 = load i64, i64* %PC
  %2245 = add i64 %2244, 4
  store i64 %2245, i64* %PC
  %2246 = inttoptr i64 %2243 to i64*
  %2247 = load i64, i64* %2246
  store i64 %2247, i64* %RCX, align 8, !tbaa !2428
  %2248 = load i64, i64* %RBP
  %2249 = sub i64 %2248, 280
  %2250 = load i64, i64* %PC
  %2251 = add i64 %2250, 7
  store i64 %2251, i64* %PC
  %2252 = inttoptr i64 %2249 to i64*
  %2253 = load i64, i64* %2252
  store i64 %2253, i64* %RDX, align 8, !tbaa !2428
  %2254 = load i64, i64* %RDX
  %2255 = add i64 %2254, 32
  %2256 = load i64, i64* %RCX
  %2257 = load i64, i64* %PC
  %2258 = add i64 %2257, 4
  store i64 %2258, i64* %PC
  %2259 = inttoptr i64 %2255 to i64*
  store i64 %2256, i64* %2259
  %2260 = load i64, i64* %RBP
  %2261 = sub i64 %2260, 280
  %2262 = load i64, i64* %PC
  %2263 = add i64 %2262, 7
  store i64 %2263, i64* %PC
  %2264 = inttoptr i64 %2261 to i64*
  %2265 = load i64, i64* %2264
  store i64 %2265, i64* %RCX, align 8, !tbaa !2428
  %2266 = load i64, i64* %RBP
  %2267 = sub i64 %2266, 280
  %2268 = load i64, i64* %PC
  %2269 = add i64 %2268, 7
  store i64 %2269, i64* %PC
  %2270 = inttoptr i64 %2267 to i64*
  %2271 = load i64, i64* %2270
  store i64 %2271, i64* %RDX, align 8, !tbaa !2428
  %2272 = load i64, i64* %RDX
  %2273 = add i64 %2272, 8
  %2274 = load i64, i64* %PC
  %2275 = add i64 %2274, 4
  store i64 %2275, i64* %PC
  %2276 = inttoptr i64 %2273 to i64*
  %2277 = load i64, i64* %2276
  store i64 %2277, i64* %RDX, align 8, !tbaa !2428
  %2278 = load i64, i64* %RDX
  %2279 = add i64 %2278, 56
  %2280 = load i64, i64* %RCX
  %2281 = load i64, i64* %PC
  %2282 = add i64 %2281, 4
  store i64 %2282, i64* %PC
  %2283 = inttoptr i64 %2279 to i64*
  store i64 %2280, i64* %2283
  %2284 = load i64, i64* %RBP
  %2285 = sub i64 %2284, 280
  %2286 = load i64, i64* %PC
  %2287 = add i64 %2286, 7
  store i64 %2287, i64* %PC
  %2288 = inttoptr i64 %2285 to i64*
  %2289 = load i64, i64* %2288
  store i64 %2289, i64* %RCX, align 8, !tbaa !2428
  %2290 = load i64, i64* %RCX
  %2291 = add i64 %2290, 16
  %2292 = load i64, i64* %PC
  %2293 = add i64 %2292, 4
  store i64 %2293, i64* %PC
  %2294 = inttoptr i64 %2291 to i64*
  %2295 = load i64, i64* %2294
  store i64 %2295, i64* %RCX, align 8, !tbaa !2428
  %2296 = load i64, i64* %RCX
  %2297 = add i64 %2296, 64
  %2298 = load i64, i64* %PC
  %2299 = add i64 %2298, 4
  store i64 %2299, i64* %PC
  %2300 = inttoptr i64 %2297 to i64*
  %2301 = load i64, i64* %2300
  store i64 %2301, i64* %RCX, align 8, !tbaa !2428
  %2302 = load i64, i64* %RBP
  %2303 = sub i64 %2302, 280
  %2304 = load i64, i64* %PC
  %2305 = add i64 %2304, 7
  store i64 %2305, i64* %PC
  %2306 = inttoptr i64 %2303 to i64*
  %2307 = load i64, i64* %2306
  store i64 %2307, i64* %RDX, align 8, !tbaa !2428
  %2308 = load i64, i64* %RDX
  %2309 = add i64 %2308, 40
  %2310 = load i64, i64* %RCX
  %2311 = load i64, i64* %PC
  %2312 = add i64 %2311, 4
  store i64 %2312, i64* %PC
  %2313 = inttoptr i64 %2309 to i64*
  store i64 %2310, i64* %2313
  %2314 = load i64, i64* %RBP
  %2315 = sub i64 %2314, 280
  %2316 = load i64, i64* %PC
  %2317 = add i64 %2316, 7
  store i64 %2317, i64* %PC
  %2318 = inttoptr i64 %2315 to i64*
  %2319 = load i64, i64* %2318
  store i64 %2319, i64* %RCX, align 8, !tbaa !2428
  %2320 = load i64, i64* %RBP
  %2321 = sub i64 %2320, 280
  %2322 = load i64, i64* %PC
  %2323 = add i64 %2322, 7
  store i64 %2323, i64* %PC
  %2324 = inttoptr i64 %2321 to i64*
  %2325 = load i64, i64* %2324
  store i64 %2325, i64* %RDX, align 8, !tbaa !2428
  %2326 = load i64, i64* %RDX
  %2327 = add i64 %2326, 16
  %2328 = load i64, i64* %PC
  %2329 = add i64 %2328, 4
  store i64 %2329, i64* %PC
  %2330 = inttoptr i64 %2327 to i64*
  %2331 = load i64, i64* %2330
  store i64 %2331, i64* %RDX, align 8, !tbaa !2428
  %2332 = load i64, i64* %RDX
  %2333 = add i64 %2332, 64
  %2334 = load i64, i64* %RCX
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 4
  store i64 %2336, i64* %PC
  %2337 = inttoptr i64 %2333 to i64*
  store i64 %2334, i64* %2337
  %2338 = load i64, i64* %RBP
  %2339 = sub i64 %2338, 280
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 7
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2339 to i64*
  %2343 = load i64, i64* %2342
  store i64 %2343, i64* %RCX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RCX
  %2345 = load i64, i64* %PC
  %2346 = add i64 %2345, 4
  store i64 %2346, i64* %PC
  %2347 = add i64 64, %2344
  store i64 %2347, i64* %RCX, align 8, !tbaa !2428
  %2348 = icmp ult i64 %2347, %2344
  %2349 = icmp ult i64 %2347, 64
  %2350 = or i1 %2348, %2349
  %2351 = zext i1 %2350 to i8
  %2352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2351, i8* %2352, align 1, !tbaa !2432
  %2353 = trunc i64 %2347 to i32
  %2354 = and i32 %2353, 255
  %2355 = call i32 @llvm.ctpop.i32(i32 %2354) #16
  %2356 = trunc i32 %2355 to i8
  %2357 = and i8 %2356, 1
  %2358 = xor i8 %2357, 1
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2358, i8* %2359, align 1, !tbaa !2446
  %2360 = xor i64 64, %2344
  %2361 = xor i64 %2360, %2347
  %2362 = lshr i64 %2361, 4
  %2363 = trunc i64 %2362 to i8
  %2364 = and i8 %2363, 1
  %2365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2364, i8* %2365, align 1, !tbaa !2447
  %2366 = icmp eq i64 %2347, 0
  %2367 = zext i1 %2366 to i8
  %2368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2367, i8* %2368, align 1, !tbaa !2448
  %2369 = lshr i64 %2347, 63
  %2370 = trunc i64 %2369 to i8
  %2371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2370, i8* %2371, align 1, !tbaa !2449
  %2372 = lshr i64 %2344, 63
  %2373 = xor i64 %2369, %2372
  %2374 = add nuw nsw i64 %2373, %2369
  %2375 = icmp eq i64 %2374, 2
  %2376 = zext i1 %2375 to i8
  %2377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2376, i8* %2377, align 1, !tbaa !2450
  %2378 = load i64, i64* %RBP
  %2379 = sub i64 %2378, 280
  %2380 = load i64, i64* %RCX
  %2381 = load i64, i64* %PC
  %2382 = add i64 %2381, 7
  store i64 %2382, i64* %PC
  %2383 = inttoptr i64 %2379 to i64*
  store i64 %2380, i64* %2383
  %2384 = load i64, i64* %RBP
  %2385 = sub i64 %2384, 288
  %2386 = load i64, i64* %PC
  %2387 = add i64 %2386, 7
  store i64 %2387, i64* %PC
  %2388 = inttoptr i64 %2385 to i64*
  %2389 = load i64, i64* %2388
  store i64 %2389, i64* %RCX, align 8, !tbaa !2428
  %2390 = load i64, i64* %RBP
  %2391 = sub i64 %2390, 272
  %2392 = load i64, i64* %PC
  %2393 = add i64 %2392, 8
  store i64 %2393, i64* %PC
  %2394 = inttoptr i64 %2391 to i64*
  %2395 = load i64, i64* %2394
  %2396 = sext i64 %2395 to i128
  %2397 = and i128 %2396, -18446744073709551616
  %2398 = zext i64 %2395 to i128
  %2399 = or i128 %2397, %2398
  %2400 = mul nsw i128 %2399, 104
  %2401 = trunc i128 %2400 to i64
  store i64 %2401, i64* %RDX, align 8, !tbaa !2428
  %2402 = sext i64 %2401 to i128
  %2403 = icmp ne i128 %2402, %2400
  %2404 = zext i1 %2403 to i8
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2404, i8* %2405, align 1, !tbaa !2432
  %2406 = trunc i128 %2400 to i32
  %2407 = and i32 %2406, 255
  %2408 = call i32 @llvm.ctpop.i32(i32 %2407) #16
  %2409 = trunc i32 %2408 to i8
  %2410 = and i8 %2409, 1
  %2411 = xor i8 %2410, 1
  %2412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2411, i8* %2412, align 1, !tbaa !2446
  %2413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2413, align 1, !tbaa !2447
  %2414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2414, align 1, !tbaa !2448
  %2415 = lshr i64 %2401, 63
  %2416 = trunc i64 %2415 to i8
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2416, i8* %2417, align 1, !tbaa !2449
  %2418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2404, i8* %2418, align 1, !tbaa !2450
  %2419 = load i64, i64* %RCX
  %2420 = load i64, i64* %RDX
  %2421 = load i64, i64* %PC
  %2422 = add i64 %2421, 3
  store i64 %2422, i64* %PC
  %2423 = add i64 %2420, %2419
  store i64 %2423, i64* %RCX, align 8, !tbaa !2428
  %2424 = icmp ult i64 %2423, %2419
  %2425 = icmp ult i64 %2423, %2420
  %2426 = or i1 %2424, %2425
  %2427 = zext i1 %2426 to i8
  %2428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2427, i8* %2428, align 1, !tbaa !2432
  %2429 = trunc i64 %2423 to i32
  %2430 = and i32 %2429, 255
  %2431 = call i32 @llvm.ctpop.i32(i32 %2430) #16
  %2432 = trunc i32 %2431 to i8
  %2433 = and i8 %2432, 1
  %2434 = xor i8 %2433, 1
  %2435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2434, i8* %2435, align 1, !tbaa !2446
  %2436 = xor i64 %2420, %2419
  %2437 = xor i64 %2436, %2423
  %2438 = lshr i64 %2437, 4
  %2439 = trunc i64 %2438 to i8
  %2440 = and i8 %2439, 1
  %2441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2440, i8* %2441, align 1, !tbaa !2447
  %2442 = icmp eq i64 %2423, 0
  %2443 = zext i1 %2442 to i8
  %2444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2443, i8* %2444, align 1, !tbaa !2448
  %2445 = lshr i64 %2423, 63
  %2446 = trunc i64 %2445 to i8
  %2447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2446, i8* %2447, align 1, !tbaa !2449
  %2448 = lshr i64 %2419, 63
  %2449 = lshr i64 %2420, 63
  %2450 = xor i64 %2445, %2448
  %2451 = xor i64 %2445, %2449
  %2452 = add nuw nsw i64 %2450, %2451
  %2453 = icmp eq i64 %2452, 2
  %2454 = zext i1 %2453 to i8
  %2455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2454, i8* %2455, align 1, !tbaa !2450
  %2456 = load i64, i64* %RBP
  %2457 = sub i64 %2456, 280
  %2458 = load i64, i64* %PC
  %2459 = add i64 %2458, 7
  store i64 %2459, i64* %PC
  %2460 = inttoptr i64 %2457 to i64*
  %2461 = load i64, i64* %2460
  store i64 %2461, i64* %RDX, align 8, !tbaa !2428
  %2462 = load i64, i64* %RDX
  %2463 = add i64 %2462, 8
  %2464 = load i64, i64* %RCX
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 4
  store i64 %2466, i64* %PC
  %2467 = inttoptr i64 %2463 to i64*
  store i64 %2464, i64* %2467
  %2468 = load i64, i64* %RBP
  %2469 = sub i64 %2468, 288
  %2470 = load i64, i64* %PC
  %2471 = add i64 %2470, 7
  store i64 %2471, i64* %PC
  %2472 = inttoptr i64 %2469 to i64*
  %2473 = load i64, i64* %2472
  store i64 %2473, i64* %RCX, align 8, !tbaa !2428
  %2474 = load i64, i64* %RBP
  %2475 = sub i64 %2474, 272
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 7
  store i64 %2477, i64* %PC
  %2478 = inttoptr i64 %2475 to i64*
  %2479 = load i64, i64* %2478
  store i64 %2479, i64* %RDX, align 8, !tbaa !2428
  %2480 = load i64, i64* %RBP
  %2481 = sub i64 %2480, 16
  %2482 = load i64, i64* %PC
  %2483 = add i64 %2482, 4
  store i64 %2483, i64* %PC
  %2484 = inttoptr i64 %2481 to i64*
  %2485 = load i64, i64* %2484
  store i64 %2485, i64* %RSI, align 8, !tbaa !2428
  %2486 = load i64, i64* %RDX
  %2487 = load i64, i64* %RSI
  %2488 = add i64 %2487, 408
  %2489 = load i64, i64* %PC
  %2490 = add i64 %2489, 7
  store i64 %2490, i64* %PC
  %2491 = inttoptr i64 %2488 to i64*
  %2492 = load i64, i64* %2491
  %2493 = add i64 %2492, %2486
  store i64 %2493, i64* %RDX, align 8, !tbaa !2428
  %2494 = icmp ult i64 %2493, %2486
  %2495 = icmp ult i64 %2493, %2492
  %2496 = or i1 %2494, %2495
  %2497 = zext i1 %2496 to i8
  %2498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2497, i8* %2498, align 1, !tbaa !2432
  %2499 = trunc i64 %2493 to i32
  %2500 = and i32 %2499, 255
  %2501 = call i32 @llvm.ctpop.i32(i32 %2500) #16
  %2502 = trunc i32 %2501 to i8
  %2503 = and i8 %2502, 1
  %2504 = xor i8 %2503, 1
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2504, i8* %2505, align 1, !tbaa !2446
  %2506 = xor i64 %2492, %2486
  %2507 = xor i64 %2506, %2493
  %2508 = lshr i64 %2507, 4
  %2509 = trunc i64 %2508 to i8
  %2510 = and i8 %2509, 1
  %2511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2510, i8* %2511, align 1, !tbaa !2447
  %2512 = icmp eq i64 %2493, 0
  %2513 = zext i1 %2512 to i8
  %2514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2513, i8* %2514, align 1, !tbaa !2448
  %2515 = lshr i64 %2493, 63
  %2516 = trunc i64 %2515 to i8
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2516, i8* %2517, align 1, !tbaa !2449
  %2518 = lshr i64 %2486, 63
  %2519 = lshr i64 %2492, 63
  %2520 = xor i64 %2515, %2518
  %2521 = xor i64 %2515, %2519
  %2522 = add nuw nsw i64 %2520, %2521
  %2523 = icmp eq i64 %2522, 2
  %2524 = zext i1 %2523 to i8
  %2525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2524, i8* %2525, align 1, !tbaa !2450
  %2526 = load i64, i64* %RDX
  %2527 = load i64, i64* %PC
  %2528 = add i64 %2527, 4
  store i64 %2528, i64* %PC
  %2529 = sext i64 %2526 to i128
  %2530 = and i128 %2529, -18446744073709551616
  %2531 = zext i64 %2526 to i128
  %2532 = or i128 %2530, %2531
  %2533 = mul nsw i128 104, %2532
  %2534 = trunc i128 %2533 to i64
  store i64 %2534, i64* %RDX, align 8, !tbaa !2428
  %2535 = sext i64 %2534 to i128
  %2536 = icmp ne i128 %2535, %2533
  %2537 = zext i1 %2536 to i8
  %2538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2537, i8* %2538, align 1, !tbaa !2432
  %2539 = trunc i128 %2533 to i32
  %2540 = and i32 %2539, 255
  %2541 = call i32 @llvm.ctpop.i32(i32 %2540) #16
  %2542 = trunc i32 %2541 to i8
  %2543 = and i8 %2542, 1
  %2544 = xor i8 %2543, 1
  %2545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2544, i8* %2545, align 1, !tbaa !2446
  %2546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2546, align 1, !tbaa !2447
  %2547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2547, align 1, !tbaa !2448
  %2548 = lshr i64 %2534, 63
  %2549 = trunc i64 %2548 to i8
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2549, i8* %2550, align 1, !tbaa !2449
  %2551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2537, i8* %2551, align 1, !tbaa !2450
  %2552 = load i64, i64* %RCX
  %2553 = load i64, i64* %RDX
  %2554 = load i64, i64* %PC
  %2555 = add i64 %2554, 3
  store i64 %2555, i64* %PC
  %2556 = add i64 %2553, %2552
  store i64 %2556, i64* %RCX, align 8, !tbaa !2428
  %2557 = icmp ult i64 %2556, %2552
  %2558 = icmp ult i64 %2556, %2553
  %2559 = or i1 %2557, %2558
  %2560 = zext i1 %2559 to i8
  %2561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2560, i8* %2561, align 1, !tbaa !2432
  %2562 = trunc i64 %2556 to i32
  %2563 = and i32 %2562, 255
  %2564 = call i32 @llvm.ctpop.i32(i32 %2563) #16
  %2565 = trunc i32 %2564 to i8
  %2566 = and i8 %2565, 1
  %2567 = xor i8 %2566, 1
  %2568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2567, i8* %2568, align 1, !tbaa !2446
  %2569 = xor i64 %2553, %2552
  %2570 = xor i64 %2569, %2556
  %2571 = lshr i64 %2570, 4
  %2572 = trunc i64 %2571 to i8
  %2573 = and i8 %2572, 1
  %2574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2573, i8* %2574, align 1, !tbaa !2447
  %2575 = icmp eq i64 %2556, 0
  %2576 = zext i1 %2575 to i8
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2576, i8* %2577, align 1, !tbaa !2448
  %2578 = lshr i64 %2556, 63
  %2579 = trunc i64 %2578 to i8
  %2580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2579, i8* %2580, align 1, !tbaa !2449
  %2581 = lshr i64 %2552, 63
  %2582 = lshr i64 %2553, 63
  %2583 = xor i64 %2578, %2581
  %2584 = xor i64 %2578, %2582
  %2585 = add nuw nsw i64 %2583, %2584
  %2586 = icmp eq i64 %2585, 2
  %2587 = zext i1 %2586 to i8
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2587, i8* %2588, align 1, !tbaa !2450
  %2589 = load i64, i64* %RBP
  %2590 = sub i64 %2589, 280
  %2591 = load i64, i64* %PC
  %2592 = add i64 %2591, 7
  store i64 %2592, i64* %PC
  %2593 = inttoptr i64 %2590 to i64*
  %2594 = load i64, i64* %2593
  store i64 %2594, i64* %RDX, align 8, !tbaa !2428
  %2595 = load i64, i64* %RDX
  %2596 = add i64 %2595, 16
  %2597 = load i64, i64* %RCX
  %2598 = load i64, i64* %PC
  %2599 = add i64 %2598, 4
  store i64 %2599, i64* %PC
  %2600 = inttoptr i64 %2596 to i64*
  store i64 %2597, i64* %2600
  %2601 = load i64, i64* %RBP
  %2602 = sub i64 %2601, 16
  %2603 = load i64, i64* %PC
  %2604 = add i64 %2603, 4
  store i64 %2604, i64* %PC
  %2605 = inttoptr i64 %2602 to i64*
  %2606 = load i64, i64* %2605
  store i64 %2606, i64* %RCX, align 8, !tbaa !2428
  %2607 = load i64, i64* %RCX
  %2608 = add i64 %2607, 528
  %2609 = load i64, i64* %PC
  %2610 = add i64 %2609, 11
  store i64 %2610, i64* %PC
  %2611 = inttoptr i64 %2608 to i64*
  %2612 = load i64, i64* %2611
  %2613 = sub i64 %2612, 10000000
  %2614 = icmp ult i64 %2612, 10000000
  %2615 = zext i1 %2614 to i8
  %2616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2615, i8* %2616, align 1, !tbaa !2432
  %2617 = trunc i64 %2613 to i32
  %2618 = and i32 %2617, 255
  %2619 = call i32 @llvm.ctpop.i32(i32 %2618) #16
  %2620 = trunc i32 %2619 to i8
  %2621 = and i8 %2620, 1
  %2622 = xor i8 %2621, 1
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2622, i8* %2623, align 1, !tbaa !2446
  %2624 = xor i64 %2612, 10000000
  %2625 = xor i64 %2624, %2613
  %2626 = lshr i64 %2625, 4
  %2627 = trunc i64 %2626 to i8
  %2628 = and i8 %2627, 1
  %2629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2628, i8* %2629, align 1, !tbaa !2447
  %2630 = icmp eq i64 %2613, 0
  %2631 = zext i1 %2630 to i8
  %2632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2631, i8* %2632, align 1, !tbaa !2448
  %2633 = lshr i64 %2613, 63
  %2634 = trunc i64 %2633 to i8
  %2635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2634, i8* %2635, align 1, !tbaa !2449
  %2636 = lshr i64 %2612, 63
  %2637 = xor i64 %2633, %2636
  %2638 = add nuw nsw i64 %2637, %2636
  %2639 = icmp eq i64 %2638, 2
  %2640 = zext i1 %2639 to i8
  %2641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2640, i8* %2641, align 1, !tbaa !2450
  %2642 = load i64, i64* %PC
  %2643 = add i64 %2642, 29
  %2644 = load i64, i64* %PC
  %2645 = add i64 %2644, 6
  %2646 = load i64, i64* %PC
  %2647 = add i64 %2646, 6
  store i64 %2647, i64* %PC
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2649 = load i8, i8* %2648, align 1, !tbaa !2448
  %2650 = icmp ne i8 %2649, 0
  %2651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2652 = load i8, i8* %2651, align 1, !tbaa !2449
  %2653 = icmp ne i8 %2652, 0
  %2654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2655 = load i8, i8* %2654, align 1, !tbaa !2450
  %2656 = icmp ne i8 %2655, 0
  %2657 = xor i1 %2653, %2656
  %2658 = or i1 %2650, %2657
  %2659 = zext i1 %2658 to i8
  store i8 %2659, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2661 = select i1 %2658, i64 %2643, i64 %2645
  store i64 %2661, i64* %2660, align 8, !tbaa !2428
  %2662 = load i8, i8* %BRANCH_TAKEN
  %2663 = icmp eq i8 %2662, 1
  br i1 %2663, label %block_403c47, label %block_403c30

block_403fc7:                                     ; preds = %block_403fb4, %block_403f9d
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_403fb4 ], [ %MEMORY.0, %block_403f9d ]
  %2664 = load i64, i64* %RBP
  %2665 = sub i64 %2664, 352
  %2666 = load i64, i64* %PC
  %2667 = add i64 %2666, 7
  store i64 %2667, i64* %PC
  %2668 = inttoptr i64 %2665 to i64*
  %2669 = load i64, i64* %2668
  store i64 %2669, i64* %RAX, align 8, !tbaa !2428
  %2670 = load i64, i64* %RAX
  %2671 = load i64, i64* %PC
  %2672 = add i64 %2671, 4
  store i64 %2672, i64* %PC
  %2673 = sext i64 %2670 to i128
  %2674 = and i128 %2673, -18446744073709551616
  %2675 = zext i64 %2670 to i128
  %2676 = or i128 %2674, %2675
  %2677 = mul nsw i128 -2, %2676
  %2678 = trunc i128 %2677 to i64
  store i64 %2678, i64* %RAX, align 8, !tbaa !2428
  %2679 = sext i64 %2678 to i128
  %2680 = icmp ne i128 %2679, %2677
  %2681 = zext i1 %2680 to i8
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2681, i8* %2682, align 1, !tbaa !2432
  %2683 = trunc i128 %2677 to i32
  %2684 = and i32 %2683, 255
  %2685 = call i32 @llvm.ctpop.i32(i32 %2684) #16
  %2686 = trunc i32 %2685 to i8
  %2687 = and i8 %2686, 1
  %2688 = xor i8 %2687, 1
  %2689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2688, i8* %2689, align 1, !tbaa !2446
  %2690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2690, align 1, !tbaa !2447
  %2691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2691, align 1, !tbaa !2448
  %2692 = lshr i64 %2678, 63
  %2693 = trunc i64 %2692 to i8
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2693, i8* %2694, align 1, !tbaa !2449
  %2695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2681, i8* %2695, align 1, !tbaa !2450
  %2696 = load i64, i64* %RBP
  %2697 = sub i64 %2696, 16
  %2698 = load i64, i64* %PC
  %2699 = add i64 %2698, 4
  store i64 %2699, i64* %PC
  %2700 = inttoptr i64 %2697 to i64*
  %2701 = load i64, i64* %2700
  store i64 %2701, i64* %RCX, align 8, !tbaa !2428
  %2702 = load i64, i64* %RCX
  %2703 = add i64 %2702, 568
  %2704 = load i64, i64* %PC
  %2705 = add i64 %2704, 7
  store i64 %2705, i64* %PC
  %2706 = inttoptr i64 %2703 to i64*
  %2707 = load i64, i64* %2706
  store i64 %2707, i64* %RCX, align 8, !tbaa !2428
  %2708 = load i64, i64* %RBP
  %2709 = sub i64 %2708, 272
  %2710 = load i64, i64* %PC
  %2711 = add i64 %2710, 8
  store i64 %2711, i64* %PC
  %2712 = inttoptr i64 %2709 to i64*
  %2713 = load i64, i64* %2712
  %2714 = sext i64 %2713 to i128
  %2715 = and i128 %2714, -18446744073709551616
  %2716 = zext i64 %2713 to i128
  %2717 = or i128 %2715, %2716
  %2718 = mul nsw i128 %2717, 3
  %2719 = trunc i128 %2718 to i64
  store i64 %2719, i64* %RDX, align 8, !tbaa !2428
  %2720 = sext i64 %2719 to i128
  %2721 = icmp ne i128 %2720, %2718
  %2722 = zext i1 %2721 to i8
  %2723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2722, i8* %2723, align 1, !tbaa !2432
  %2724 = trunc i128 %2718 to i32
  %2725 = and i32 %2724, 255
  %2726 = call i32 @llvm.ctpop.i32(i32 %2725) #16
  %2727 = trunc i32 %2726 to i8
  %2728 = and i8 %2727, 1
  %2729 = xor i8 %2728, 1
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2729, i8* %2730, align 1, !tbaa !2446
  %2731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2731, align 1, !tbaa !2447
  %2732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2732, align 1, !tbaa !2448
  %2733 = lshr i64 %2719, 63
  %2734 = trunc i64 %2733 to i8
  %2735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2734, i8* %2735, align 1, !tbaa !2449
  %2736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2722, i8* %2736, align 1, !tbaa !2450
  %2737 = load i64, i64* %RDX
  %2738 = load i64, i64* %PC
  %2739 = add i64 %2738, 4
  store i64 %2739, i64* %PC
  %2740 = sub i64 %2737, 1
  store i64 %2740, i64* %RDX, align 8, !tbaa !2428
  %2741 = icmp ult i64 %2737, 1
  %2742 = zext i1 %2741 to i8
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2742, i8* %2743, align 1, !tbaa !2432
  %2744 = trunc i64 %2740 to i32
  %2745 = and i32 %2744, 255
  %2746 = call i32 @llvm.ctpop.i32(i32 %2745) #16
  %2747 = trunc i32 %2746 to i8
  %2748 = and i8 %2747, 1
  %2749 = xor i8 %2748, 1
  %2750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2749, i8* %2750, align 1, !tbaa !2446
  %2751 = xor i64 1, %2737
  %2752 = xor i64 %2751, %2740
  %2753 = lshr i64 %2752, 4
  %2754 = trunc i64 %2753 to i8
  %2755 = and i8 %2754, 1
  %2756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2755, i8* %2756, align 1, !tbaa !2447
  %2757 = icmp eq i64 %2740, 0
  %2758 = zext i1 %2757 to i8
  %2759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2758, i8* %2759, align 1, !tbaa !2448
  %2760 = lshr i64 %2740, 63
  %2761 = trunc i64 %2760 to i8
  %2762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2761, i8* %2762, align 1, !tbaa !2449
  %2763 = lshr i64 %2737, 63
  %2764 = xor i64 %2760, %2763
  %2765 = add nuw nsw i64 %2764, %2763
  %2766 = icmp eq i64 %2765, 2
  %2767 = zext i1 %2766 to i8
  %2768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2767, i8* %2768, align 1, !tbaa !2450
  %2769 = load i64, i64* %RDX
  %2770 = load i64, i64* %PC
  %2771 = add i64 %2770, 4
  store i64 %2771, i64* %PC
  %2772 = shl i64 %2769, 5
  %2773 = icmp slt i64 %2772, 0
  %2774 = shl i64 %2772, 1
  store i64 %2774, i64* %RDX, align 8, !tbaa !2428
  %2775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2776 = zext i1 %2773 to i8
  store i8 %2776, i8* %2775, align 1, !tbaa !2451
  %2777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2778 = trunc i64 %2774 to i32
  %2779 = and i32 %2778, 254
  %2780 = call i32 @llvm.ctpop.i32(i32 %2779) #16
  %2781 = trunc i32 %2780 to i8
  %2782 = and i8 %2781, 1
  %2783 = xor i8 %2782, 1
  store i8 %2783, i8* %2777, align 1, !tbaa !2451
  %2784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2784, align 1, !tbaa !2451
  %2785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2786 = icmp eq i64 %2774, 0
  %2787 = zext i1 %2786 to i8
  store i8 %2787, i8* %2785, align 1, !tbaa !2451
  %2788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2789 = lshr i64 %2774, 63
  %2790 = trunc i64 %2789 to i8
  store i8 %2790, i8* %2788, align 1, !tbaa !2451
  %2791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2791, align 1, !tbaa !2451
  %2792 = load i64, i64* %RCX
  %2793 = load i64, i64* %RDX
  %2794 = load i64, i64* %PC
  %2795 = add i64 %2794, 3
  store i64 %2795, i64* %PC
  %2796 = add i64 %2793, %2792
  store i64 %2796, i64* %RCX, align 8, !tbaa !2428
  %2797 = icmp ult i64 %2796, %2792
  %2798 = icmp ult i64 %2796, %2793
  %2799 = or i1 %2797, %2798
  %2800 = zext i1 %2799 to i8
  %2801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2800, i8* %2801, align 1, !tbaa !2432
  %2802 = trunc i64 %2796 to i32
  %2803 = and i32 %2802, 255
  %2804 = call i32 @llvm.ctpop.i32(i32 %2803) #16
  %2805 = trunc i32 %2804 to i8
  %2806 = and i8 %2805, 1
  %2807 = xor i8 %2806, 1
  %2808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2807, i8* %2808, align 1, !tbaa !2446
  %2809 = xor i64 %2793, %2792
  %2810 = xor i64 %2809, %2796
  %2811 = lshr i64 %2810, 4
  %2812 = trunc i64 %2811 to i8
  %2813 = and i8 %2812, 1
  %2814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2813, i8* %2814, align 1, !tbaa !2447
  %2815 = icmp eq i64 %2796, 0
  %2816 = zext i1 %2815 to i8
  %2817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2816, i8* %2817, align 1, !tbaa !2448
  %2818 = lshr i64 %2796, 63
  %2819 = trunc i64 %2818 to i8
  %2820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2819, i8* %2820, align 1, !tbaa !2449
  %2821 = lshr i64 %2792, 63
  %2822 = lshr i64 %2793, 63
  %2823 = xor i64 %2818, %2821
  %2824 = xor i64 %2818, %2822
  %2825 = add nuw nsw i64 %2823, %2824
  %2826 = icmp eq i64 %2825, 2
  %2827 = zext i1 %2826 to i8
  %2828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2827, i8* %2828, align 1, !tbaa !2450
  %2829 = load i64, i64* %RCX
  %2830 = load i64, i64* %RAX
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 3
  store i64 %2832, i64* %PC
  %2833 = inttoptr i64 %2829 to i64*
  store i64 %2830, i64* %2833
  %2834 = load i64, i64* %RBP
  %2835 = sub i64 %2834, 16
  %2836 = load i64, i64* %PC
  %2837 = add i64 %2836, 4
  store i64 %2837, i64* %PC
  %2838 = inttoptr i64 %2835 to i64*
  %2839 = load i64, i64* %2838
  store i64 %2839, i64* %RAX, align 8, !tbaa !2428
  %2840 = load i64, i64* %RAX
  %2841 = add i64 %2840, 528
  %2842 = load i64, i64* %PC
  %2843 = add i64 %2842, 11
  store i64 %2843, i64* %PC
  %2844 = inttoptr i64 %2841 to i64*
  %2845 = load i64, i64* %2844
  %2846 = sub i64 %2845, 10000000
  %2847 = icmp ult i64 %2845, 10000000
  %2848 = zext i1 %2847 to i8
  %2849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2848, i8* %2849, align 1, !tbaa !2432
  %2850 = trunc i64 %2846 to i32
  %2851 = and i32 %2850, 255
  %2852 = call i32 @llvm.ctpop.i32(i32 %2851) #16
  %2853 = trunc i32 %2852 to i8
  %2854 = and i8 %2853, 1
  %2855 = xor i8 %2854, 1
  %2856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2855, i8* %2856, align 1, !tbaa !2446
  %2857 = xor i64 %2845, 10000000
  %2858 = xor i64 %2857, %2846
  %2859 = lshr i64 %2858, 4
  %2860 = trunc i64 %2859 to i8
  %2861 = and i8 %2860, 1
  %2862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2861, i8* %2862, align 1, !tbaa !2447
  %2863 = icmp eq i64 %2846, 0
  %2864 = zext i1 %2863 to i8
  %2865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2864, i8* %2865, align 1, !tbaa !2448
  %2866 = lshr i64 %2846, 63
  %2867 = trunc i64 %2866 to i8
  %2868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2867, i8* %2868, align 1, !tbaa !2449
  %2869 = lshr i64 %2845, 63
  %2870 = xor i64 %2866, %2869
  %2871 = add nuw nsw i64 %2870, %2869
  %2872 = icmp eq i64 %2871, 2
  %2873 = zext i1 %2872 to i8
  %2874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2873, i8* %2874, align 1, !tbaa !2450
  %2875 = load i64, i64* %PC
  %2876 = add i64 %2875, 29
  %2877 = load i64, i64* %PC
  %2878 = add i64 %2877, 6
  %2879 = load i64, i64* %PC
  %2880 = add i64 %2879, 6
  store i64 %2880, i64* %PC
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2882 = load i8, i8* %2881, align 1, !tbaa !2448
  %2883 = icmp ne i8 %2882, 0
  %2884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2885 = load i8, i8* %2884, align 1, !tbaa !2449
  %2886 = icmp ne i8 %2885, 0
  %2887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2888 = load i8, i8* %2887, align 1, !tbaa !2450
  %2889 = icmp ne i8 %2888, 0
  %2890 = xor i1 %2886, %2889
  %2891 = or i1 %2883, %2890
  %2892 = zext i1 %2891 to i8
  store i8 %2892, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2894 = select i1 %2891, i64 %2876, i64 %2878
  store i64 %2894, i64* %2893, align 8, !tbaa !2428
  %2895 = load i8, i8* %BRANCH_TAKEN
  %2896 = icmp eq i8 %2895, 1
  br i1 %2896, label %block_40401f, label %block_404008

block_404008:                                     ; preds = %block_403fc7
  %2897 = load i64, i64* %RBP
  %2898 = sub i64 %2897, 16
  %2899 = load i64, i64* %PC
  %2900 = add i64 %2899, 4
  store i64 %2900, i64* %PC
  %2901 = inttoptr i64 %2898 to i64*
  %2902 = load i64, i64* %2901
  store i64 %2902, i64* %RAX, align 8, !tbaa !2428
  %2903 = load i64, i64* %RAX
  %2904 = add i64 %2903, 528
  %2905 = load i64, i64* %PC
  %2906 = add i64 %2905, 7
  store i64 %2906, i64* %PC
  %2907 = inttoptr i64 %2904 to i64*
  %2908 = load i64, i64* %2907
  store i64 %2908, i64* %RAX, align 8, !tbaa !2428
  %2909 = load i64, i64* %RBP
  %2910 = sub i64 %2909, 360
  %2911 = load i64, i64* %RAX
  %2912 = load i64, i64* %PC
  %2913 = add i64 %2912, 7
  store i64 %2913, i64* %PC
  %2914 = inttoptr i64 %2910 to i64*
  store i64 %2911, i64* %2914
  %2915 = load i64, i64* %PC
  %2916 = add i64 %2915, 24
  %2917 = load i64, i64* %PC
  %2918 = add i64 %2917, 5
  store i64 %2918, i64* %PC
  %2919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2916, i64* %2919, align 8, !tbaa !2428
  br label %block_404032

block_4036da:                                     ; preds = %block_40365d
  %2920 = add i64 %647, 424
  %2921 = load i64, i64* %PC
  %2922 = add i64 %2921, 7
  store i64 %2922, i64* %PC
  %2923 = inttoptr i64 %2920 to i64*
  %2924 = load i64, i64* %2923
  store i64 %2924, i64* %RAX, align 8, !tbaa !2428
  %2925 = load i64, i64* %RBP
  %2926 = sub i64 %2925, 16
  %2927 = load i64, i64* %PC
  %2928 = add i64 %2927, 4
  store i64 %2928, i64* %PC
  %2929 = inttoptr i64 %2926 to i64*
  %2930 = load i64, i64* %2929
  store i64 %2930, i64* %RCX, align 8, !tbaa !2428
  %2931 = load i64, i64* %RCX
  %2932 = add i64 %2931, 416
  %2933 = load i64, i64* %RAX
  %2934 = load i64, i64* %PC
  %2935 = add i64 %2934, 7
  store i64 %2935, i64* %PC
  %2936 = inttoptr i64 %2932 to i64*
  store i64 %2933, i64* %2936
  %2937 = load i64, i64* %RBP
  %2938 = sub i64 %2937, 16
  %2939 = load i64, i64* %PC
  %2940 = add i64 %2939, 4
  store i64 %2940, i64* %PC
  %2941 = inttoptr i64 %2938 to i64*
  %2942 = load i64, i64* %2941
  store i64 %2942, i64* %RAX, align 8, !tbaa !2428
  %2943 = load i64, i64* %RAX
  %2944 = add i64 %2943, 456
  %2945 = load i64, i64* %PC
  %2946 = add i64 %2945, 11
  store i64 %2946, i64* %PC
  %2947 = inttoptr i64 %2944 to i64*
  store i64 3000000, i64* %2947
  %2948 = load i64, i64* %PC
  %2949 = add i64 %2948, 35
  %2950 = load i64, i64* %PC
  %2951 = add i64 %2950, 5
  store i64 %2951, i64* %PC
  %2952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2949, i64* %2952, align 8, !tbaa !2428
  br label %block_403722

block_40393d:                                     ; preds = %block_4038de, %block_403929
  %MEMORY.2 = phi %struct.Memory* [ %3810, %block_4038de ], [ %3810, %block_403929 ]
  %2953 = load i64, i64* %RBP
  %2954 = sub i64 %2953, 8
  %2955 = load i64, i64* %PC
  %2956 = add i64 %2955, 8
  store i64 %2956, i64* %PC
  %2957 = inttoptr i64 %2954 to i64*
  store i64 -1, i64* %2957
  %2958 = load i64, i64* %PC
  %2959 = add i64 %2958, 1849
  %2960 = load i64, i64* %PC
  %2961 = add i64 %2960, 5
  store i64 %2961, i64* %PC
  %2962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2959, i64* %2962, align 8, !tbaa !2428
  br label %block_40407e

block_403f9d:                                     ; preds = %block_403f88
  %2963 = load i64, i64* %RBP
  %2964 = sub i64 %2963, 16
  %2965 = load i64, i64* %PC
  %2966 = add i64 %2965, 4
  store i64 %2966, i64* %PC
  %2967 = inttoptr i64 %2964 to i64*
  %2968 = load i64, i64* %2967
  store i64 %2968, i64* %RAX, align 8, !tbaa !2428
  %2969 = load i64, i64* %RAX
  %2970 = add i64 %2969, 528
  %2971 = load i64, i64* %PC
  %2972 = add i64 %2971, 7
  store i64 %2972, i64* %PC
  %2973 = inttoptr i64 %2970 to i64*
  %2974 = load i64, i64* %2973
  store i64 %2974, i64* %RAX, align 8, !tbaa !2428
  %2975 = load i64, i64* %RBP
  %2976 = sub i64 %2975, 352
  %2977 = load i64, i64* %RAX
  %2978 = load i64, i64* %PC
  %2979 = add i64 %2978, 7
  store i64 %2979, i64* %PC
  %2980 = inttoptr i64 %2976 to i64*
  store i64 %2977, i64* %2980
  %2981 = load i64, i64* %PC
  %2982 = add i64 %2981, 24
  %2983 = load i64, i64* %PC
  %2984 = add i64 %2983, 5
  store i64 %2984, i64* %PC
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2982, i64* %2985, align 8, !tbaa !2428
  br label %block_403fc7

block_403d3a:                                     ; preds = %block_403d2f, %block_403db1
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.10, %block_403d2f ], [ %758, %block_403db1 ]
  %2986 = load i64, i64* %RBP
  %2987 = sub i64 %2986, 272
  %2988 = load i64, i64* %PC
  %2989 = add i64 %2988, 7
  store i64 %2989, i64* %PC
  %2990 = inttoptr i64 %2987 to i64*
  %2991 = load i64, i64* %2990
  store i64 %2991, i64* %RAX, align 8, !tbaa !2428
  %2992 = load i64, i64* %RBP
  %2993 = sub i64 %2992, 16
  %2994 = load i64, i64* %PC
  %2995 = add i64 %2994, 4
  store i64 %2995, i64* %PC
  %2996 = inttoptr i64 %2993 to i64*
  %2997 = load i64, i64* %2996
  store i64 %2997, i64* %RCX, align 8, !tbaa !2428
  %2998 = load i64, i64* %RAX
  %2999 = load i64, i64* %RCX
  %3000 = add i64 %2999, 432
  %3001 = load i64, i64* %PC
  %3002 = add i64 %3001, 7
  store i64 %3002, i64* %PC
  %3003 = inttoptr i64 %3000 to i64*
  %3004 = load i64, i64* %3003
  %3005 = sub i64 %2998, %3004
  %3006 = icmp ugt i64 %3004, %2998
  %3007 = zext i1 %3006 to i8
  %3008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3007, i8* %3008, align 1, !tbaa !2432
  %3009 = trunc i64 %3005 to i32
  %3010 = and i32 %3009, 255
  %3011 = call i32 @llvm.ctpop.i32(i32 %3010) #16
  %3012 = trunc i32 %3011 to i8
  %3013 = and i8 %3012, 1
  %3014 = xor i8 %3013, 1
  %3015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3014, i8* %3015, align 1, !tbaa !2446
  %3016 = xor i64 %3004, %2998
  %3017 = xor i64 %3016, %3005
  %3018 = lshr i64 %3017, 4
  %3019 = trunc i64 %3018 to i8
  %3020 = and i8 %3019, 1
  %3021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3020, i8* %3021, align 1, !tbaa !2447
  %3022 = icmp eq i64 %3005, 0
  %3023 = zext i1 %3022 to i8
  %3024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3023, i8* %3024, align 1, !tbaa !2448
  %3025 = lshr i64 %3005, 63
  %3026 = trunc i64 %3025 to i8
  %3027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3026, i8* %3027, align 1, !tbaa !2449
  %3028 = lshr i64 %2998, 63
  %3029 = lshr i64 %3004, 63
  %3030 = xor i64 %3029, %3028
  %3031 = xor i64 %3025, %3028
  %3032 = add nuw nsw i64 %3031, %3030
  %3033 = icmp eq i64 %3032, 2
  %3034 = zext i1 %3033 to i8
  %3035 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3034, i8* %3035, align 1, !tbaa !2450
  %3036 = load i64, i64* %PC
  %3037 = add i64 %3036, 345
  %3038 = load i64, i64* %PC
  %3039 = add i64 %3038, 6
  %3040 = load i64, i64* %PC
  %3041 = add i64 %3040, 6
  store i64 %3041, i64* %PC
  %3042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3043 = load i8, i8* %3042, align 1, !tbaa !2449
  %3044 = icmp ne i8 %3043, 0
  %3045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3046 = load i8, i8* %3045, align 1, !tbaa !2450
  %3047 = icmp ne i8 %3046, 0
  %3048 = xor i1 %3044, %3047
  %3049 = xor i1 %3048, true
  %3050 = zext i1 %3049 to i8
  store i8 %3050, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3052 = select i1 %3048, i64 %3039, i64 %3037
  store i64 %3052, i64* %3051, align 8, !tbaa !2428
  %3053 = load i8, i8* %BRANCH_TAKEN
  %3054 = icmp eq i8 %3053, 1
  br i1 %3054, label %block_403ea5, label %block_403d52

block_40407e:                                     ; preds = %block_4037ea, %block_403da4, %block_403650, %block_403d22, %block_40393d, %block_404076, %block_4035f8
  %MEMORY.4 = phi %struct.Memory* [ %4638, %block_4037ea ], [ %MEMORY.0, %block_404076 ], [ %758, %block_403da4 ], [ %MEMORY.10, %block_403d22 ], [ %MEMORY.2, %block_40393d ], [ %4787, %block_403650 ], [ %116, %block_4035f8 ]
  %3055 = load i64, i64* %RBP
  %3056 = sub i64 %3055, 8
  %3057 = load i64, i64* %PC
  %3058 = add i64 %3057, 4
  store i64 %3058, i64* %PC
  %3059 = inttoptr i64 %3056 to i64*
  %3060 = load i64, i64* %3059
  store i64 %3060, i64* %RAX, align 8, !tbaa !2428
  %3061 = load i64, i64* %RSP
  %3062 = load i64, i64* %PC
  %3063 = add i64 %3062, 7
  store i64 %3063, i64* %PC
  %3064 = add i64 368, %3061
  store i64 %3064, i64* %RSP, align 8, !tbaa !2428
  %3065 = icmp ult i64 %3064, %3061
  %3066 = icmp ult i64 %3064, 368
  %3067 = or i1 %3065, %3066
  %3068 = zext i1 %3067 to i8
  %3069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3068, i8* %3069, align 1, !tbaa !2432
  %3070 = trunc i64 %3064 to i32
  %3071 = and i32 %3070, 255
  %3072 = call i32 @llvm.ctpop.i32(i32 %3071) #16
  %3073 = trunc i32 %3072 to i8
  %3074 = and i8 %3073, 1
  %3075 = xor i8 %3074, 1
  %3076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3075, i8* %3076, align 1, !tbaa !2446
  %3077 = xor i64 368, %3061
  %3078 = xor i64 %3077, %3064
  %3079 = lshr i64 %3078, 4
  %3080 = trunc i64 %3079 to i8
  %3081 = and i8 %3080, 1
  %3082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3081, i8* %3082, align 1, !tbaa !2447
  %3083 = icmp eq i64 %3064, 0
  %3084 = zext i1 %3083 to i8
  %3085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3084, i8* %3085, align 1, !tbaa !2448
  %3086 = lshr i64 %3064, 63
  %3087 = trunc i64 %3086 to i8
  %3088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3087, i8* %3088, align 1, !tbaa !2449
  %3089 = lshr i64 %3061, 63
  %3090 = xor i64 %3086, %3089
  %3091 = add nuw nsw i64 %3090, %3086
  %3092 = icmp eq i64 %3091, 2
  %3093 = zext i1 %3092 to i8
  %3094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3093, i8* %3094, align 1, !tbaa !2450
  %3095 = load i64, i64* %PC
  %3096 = add i64 %3095, 1
  store i64 %3096, i64* %PC
  %3097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3098 = load i64, i64* %3097, align 8, !tbaa !2428
  %3099 = add i64 %3098, 8
  %3100 = inttoptr i64 %3098 to i64*
  %3101 = load i64, i64* %3100
  store i64 %3101, i64* %RBP, align 8, !tbaa !2428
  store i64 %3099, i64* %3097, align 8, !tbaa !2428
  %3102 = load i64, i64* %PC
  %3103 = add i64 %3102, 1
  store i64 %3103, i64* %PC
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3106 = load i64, i64* %3105, align 8, !tbaa !2428
  %3107 = inttoptr i64 %3106 to i64*
  %3108 = load i64, i64* %3107
  store i64 %3108, i64* %3104, align 8, !tbaa !2428
  %3109 = add i64 %3106, 8
  store i64 %3109, i64* %3105, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_403f35:                                     ; preds = %block_403ef0
  %3110 = inttoptr i64 %4265 to i64*
  %3111 = load i64, i64* %3110
  store i64 %3111, i64* %RAX, align 8, !tbaa !2428
  %3112 = load i64, i64* %RBP
  %3113 = sub i64 %3112, 16
  %3114 = load i64, i64* %PC
  %3115 = add i64 %3114, 4
  store i64 %3115, i64* %PC
  %3116 = inttoptr i64 %3113 to i64*
  %3117 = load i64, i64* %3116
  store i64 %3117, i64* %RCX, align 8, !tbaa !2428
  %3118 = load i64, i64* %RCX
  %3119 = add i64 %3118, 432
  %3120 = load i64, i64* %RAX
  %3121 = load i64, i64* %PC
  %3122 = add i64 %3121, 7
  store i64 %3122, i64* %PC
  %3123 = inttoptr i64 %3119 to i64*
  store i64 %3120, i64* %3123
  br label %block_403f4b

block_403d22:                                     ; preds = %block_403d03
  %3124 = sub i64 %5646, 8
  %3125 = load i64, i64* %PC
  %3126 = add i64 %3125, 8
  store i64 %3126, i64* %PC
  %3127 = inttoptr i64 %3124 to i64*
  store i64 -1, i64* %3127
  %3128 = load i64, i64* %PC
  %3129 = add i64 %3128, 852
  %3130 = load i64, i64* %PC
  %3131 = add i64 %3130, 5
  store i64 %3131, i64* %PC
  %3132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3129, i64* %3132, align 8, !tbaa !2428
  br label %block_40407e

block_403fb4:                                     ; preds = %block_403f88
  %3133 = load i64, i64* %PC
  %3134 = add i64 %3133, 5
  store i64 %3134, i64* %PC
  store i64 10000000, i64* %RAX, align 8, !tbaa !2428
  %3135 = load i32, i32* %EAX
  %3136 = zext i32 %3135 to i64
  %3137 = load i64, i64* %PC
  %3138 = add i64 %3137, 2
  store i64 %3138, i64* %PC
  %3139 = and i64 %3136, 4294967295
  store i64 %3139, i64* %RCX, align 8, !tbaa !2428
  %3140 = load i64, i64* %RBP
  %3141 = sub i64 %3140, 352
  %3142 = load i64, i64* %RCX
  %3143 = load i64, i64* %PC
  %3144 = add i64 %3143, 7
  store i64 %3144, i64* %PC
  %3145 = inttoptr i64 %3141 to i64*
  store i64 %3142, i64* %3145
  %3146 = load i64, i64* %PC
  %3147 = add i64 %3146, 5
  %3148 = load i64, i64* %PC
  %3149 = add i64 %3148, 5
  store i64 %3149, i64* %PC
  %3150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3147, i64* %3150, align 8, !tbaa !2428
  br label %block_403fc7

block_403db1:                                     ; preds = %block_403d52
  %3151 = sub i64 %805, 288
  %3152 = load i64, i64* %PC
  %3153 = add i64 %3152, 7
  store i64 %3153, i64* %PC
  %3154 = inttoptr i64 %3151 to i64*
  %3155 = load i64, i64* %3154
  store i64 %3155, i64* %RAX, align 8, !tbaa !2428
  %3156 = load i64, i64* %RBP
  %3157 = sub i64 %3156, 248
  %3158 = load i64, i64* %PC
  %3159 = add i64 %3158, 7
  store i64 %3159, i64* %PC
  %3160 = inttoptr i64 %3157 to i64*
  %3161 = load i64, i64* %3160
  store i64 %3161, i64* %RCX, align 8, !tbaa !2428
  %3162 = load i64, i64* %RBP
  %3163 = sub i64 %3162, 16
  %3164 = load i64, i64* %PC
  %3165 = add i64 %3164, 4
  store i64 %3165, i64* %PC
  %3166 = inttoptr i64 %3163 to i64*
  %3167 = load i64, i64* %3166
  store i64 %3167, i64* %RDX, align 8, !tbaa !2428
  %3168 = load i64, i64* %RCX
  %3169 = load i64, i64* %RDX
  %3170 = add i64 %3169, 408
  %3171 = load i64, i64* %PC
  %3172 = add i64 %3171, 7
  store i64 %3172, i64* %PC
  %3173 = inttoptr i64 %3170 to i64*
  %3174 = load i64, i64* %3173
  %3175 = add i64 %3174, %3168
  store i64 %3175, i64* %RCX, align 8, !tbaa !2428
  %3176 = icmp ult i64 %3175, %3168
  %3177 = icmp ult i64 %3175, %3174
  %3178 = or i1 %3176, %3177
  %3179 = zext i1 %3178 to i8
  %3180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3179, i8* %3180, align 1, !tbaa !2432
  %3181 = trunc i64 %3175 to i32
  %3182 = and i32 %3181, 255
  %3183 = call i32 @llvm.ctpop.i32(i32 %3182) #16
  %3184 = trunc i32 %3183 to i8
  %3185 = and i8 %3184, 1
  %3186 = xor i8 %3185, 1
  %3187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3186, i8* %3187, align 1, !tbaa !2446
  %3188 = xor i64 %3174, %3168
  %3189 = xor i64 %3188, %3175
  %3190 = lshr i64 %3189, 4
  %3191 = trunc i64 %3190 to i8
  %3192 = and i8 %3191, 1
  %3193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3192, i8* %3193, align 1, !tbaa !2447
  %3194 = icmp eq i64 %3175, 0
  %3195 = zext i1 %3194 to i8
  %3196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3195, i8* %3196, align 1, !tbaa !2448
  %3197 = lshr i64 %3175, 63
  %3198 = trunc i64 %3197 to i8
  %3199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3198, i8* %3199, align 1, !tbaa !2449
  %3200 = lshr i64 %3168, 63
  %3201 = lshr i64 %3174, 63
  %3202 = xor i64 %3197, %3200
  %3203 = xor i64 %3197, %3201
  %3204 = add nuw nsw i64 %3202, %3203
  %3205 = icmp eq i64 %3204, 2
  %3206 = zext i1 %3205 to i8
  %3207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3206, i8* %3207, align 1, !tbaa !2450
  %3208 = load i64, i64* %RCX
  %3209 = load i64, i64* %PC
  %3210 = add i64 %3209, 4
  store i64 %3210, i64* %PC
  %3211 = sext i64 %3208 to i128
  %3212 = and i128 %3211, -18446744073709551616
  %3213 = zext i64 %3208 to i128
  %3214 = or i128 %3212, %3213
  %3215 = mul nsw i128 104, %3214
  %3216 = trunc i128 %3215 to i64
  store i64 %3216, i64* %RCX, align 8, !tbaa !2428
  %3217 = sext i64 %3216 to i128
  %3218 = icmp ne i128 %3217, %3215
  %3219 = zext i1 %3218 to i8
  %3220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3219, i8* %3220, align 1, !tbaa !2432
  %3221 = trunc i128 %3215 to i32
  %3222 = and i32 %3221, 255
  %3223 = call i32 @llvm.ctpop.i32(i32 %3222) #16
  %3224 = trunc i32 %3223 to i8
  %3225 = and i8 %3224, 1
  %3226 = xor i8 %3225, 1
  %3227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3226, i8* %3227, align 1, !tbaa !2446
  %3228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3228, align 1, !tbaa !2447
  %3229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3229, align 1, !tbaa !2448
  %3230 = lshr i64 %3216, 63
  %3231 = trunc i64 %3230 to i8
  %3232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3231, i8* %3232, align 1, !tbaa !2449
  %3233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3219, i8* %3233, align 1, !tbaa !2450
  %3234 = load i64, i64* %RAX
  %3235 = load i64, i64* %RCX
  %3236 = load i64, i64* %PC
  %3237 = add i64 %3236, 3
  store i64 %3237, i64* %PC
  %3238 = add i64 %3235, %3234
  store i64 %3238, i64* %RAX, align 8, !tbaa !2428
  %3239 = icmp ult i64 %3238, %3234
  %3240 = icmp ult i64 %3238, %3235
  %3241 = or i1 %3239, %3240
  %3242 = zext i1 %3241 to i8
  %3243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3242, i8* %3243, align 1, !tbaa !2432
  %3244 = trunc i64 %3238 to i32
  %3245 = and i32 %3244, 255
  %3246 = call i32 @llvm.ctpop.i32(i32 %3245) #16
  %3247 = trunc i32 %3246 to i8
  %3248 = and i8 %3247, 1
  %3249 = xor i8 %3248, 1
  %3250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3249, i8* %3250, align 1, !tbaa !2446
  %3251 = xor i64 %3235, %3234
  %3252 = xor i64 %3251, %3238
  %3253 = lshr i64 %3252, 4
  %3254 = trunc i64 %3253 to i8
  %3255 = and i8 %3254, 1
  %3256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3255, i8* %3256, align 1, !tbaa !2447
  %3257 = icmp eq i64 %3238, 0
  %3258 = zext i1 %3257 to i8
  %3259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3258, i8* %3259, align 1, !tbaa !2448
  %3260 = lshr i64 %3238, 63
  %3261 = trunc i64 %3260 to i8
  %3262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3261, i8* %3262, align 1, !tbaa !2449
  %3263 = lshr i64 %3234, 63
  %3264 = lshr i64 %3235, 63
  %3265 = xor i64 %3260, %3263
  %3266 = xor i64 %3260, %3264
  %3267 = add nuw nsw i64 %3265, %3266
  %3268 = icmp eq i64 %3267, 2
  %3269 = zext i1 %3268 to i8
  %3270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3269, i8* %3270, align 1, !tbaa !2450
  %3271 = load i64, i64* %RBP
  %3272 = sub i64 %3271, 280
  %3273 = load i64, i64* %PC
  %3274 = add i64 %3273, 7
  store i64 %3274, i64* %PC
  %3275 = inttoptr i64 %3272 to i64*
  %3276 = load i64, i64* %3275
  store i64 %3276, i64* %RCX, align 8, !tbaa !2428
  %3277 = load i64, i64* %RCX
  %3278 = add i64 %3277, 8
  %3279 = load i64, i64* %RAX
  %3280 = load i64, i64* %PC
  %3281 = add i64 %3280, 4
  store i64 %3281, i64* %PC
  %3282 = inttoptr i64 %3278 to i64*
  store i64 %3279, i64* %3282
  %3283 = load i64, i64* %RBP
  %3284 = sub i64 %3283, 288
  %3285 = load i64, i64* %PC
  %3286 = add i64 %3285, 7
  store i64 %3286, i64* %PC
  %3287 = inttoptr i64 %3284 to i64*
  %3288 = load i64, i64* %3287
  store i64 %3288, i64* %RAX, align 8, !tbaa !2428
  %3289 = load i64, i64* %RBP
  %3290 = sub i64 %3289, 256
  %3291 = load i64, i64* %PC
  %3292 = add i64 %3291, 8
  store i64 %3292, i64* %PC
  %3293 = inttoptr i64 %3290 to i64*
  %3294 = load i64, i64* %3293
  %3295 = sext i64 %3294 to i128
  %3296 = and i128 %3295, -18446744073709551616
  %3297 = zext i64 %3294 to i128
  %3298 = or i128 %3296, %3297
  %3299 = mul nsw i128 %3298, 104
  %3300 = trunc i128 %3299 to i64
  store i64 %3300, i64* %RCX, align 8, !tbaa !2428
  %3301 = sext i64 %3300 to i128
  %3302 = icmp ne i128 %3301, %3299
  %3303 = zext i1 %3302 to i8
  %3304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3303, i8* %3304, align 1, !tbaa !2432
  %3305 = trunc i128 %3299 to i32
  %3306 = and i32 %3305, 255
  %3307 = call i32 @llvm.ctpop.i32(i32 %3306) #16
  %3308 = trunc i32 %3307 to i8
  %3309 = and i8 %3308, 1
  %3310 = xor i8 %3309, 1
  %3311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3310, i8* %3311, align 1, !tbaa !2446
  %3312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3312, align 1, !tbaa !2447
  %3313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3313, align 1, !tbaa !2448
  %3314 = lshr i64 %3300, 63
  %3315 = trunc i64 %3314 to i8
  %3316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3315, i8* %3316, align 1, !tbaa !2449
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3303, i8* %3317, align 1, !tbaa !2450
  %3318 = load i64, i64* %RAX
  %3319 = load i64, i64* %RCX
  %3320 = load i64, i64* %PC
  %3321 = add i64 %3320, 3
  store i64 %3321, i64* %PC
  %3322 = add i64 %3319, %3318
  store i64 %3322, i64* %RAX, align 8, !tbaa !2428
  %3323 = icmp ult i64 %3322, %3318
  %3324 = icmp ult i64 %3322, %3319
  %3325 = or i1 %3323, %3324
  %3326 = zext i1 %3325 to i8
  %3327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3326, i8* %3327, align 1, !tbaa !2432
  %3328 = trunc i64 %3322 to i32
  %3329 = and i32 %3328, 255
  %3330 = call i32 @llvm.ctpop.i32(i32 %3329) #16
  %3331 = trunc i32 %3330 to i8
  %3332 = and i8 %3331, 1
  %3333 = xor i8 %3332, 1
  %3334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3333, i8* %3334, align 1, !tbaa !2446
  %3335 = xor i64 %3319, %3318
  %3336 = xor i64 %3335, %3322
  %3337 = lshr i64 %3336, 4
  %3338 = trunc i64 %3337 to i8
  %3339 = and i8 %3338, 1
  %3340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3339, i8* %3340, align 1, !tbaa !2447
  %3341 = icmp eq i64 %3322, 0
  %3342 = zext i1 %3341 to i8
  %3343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3342, i8* %3343, align 1, !tbaa !2448
  %3344 = lshr i64 %3322, 63
  %3345 = trunc i64 %3344 to i8
  %3346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3345, i8* %3346, align 1, !tbaa !2449
  %3347 = lshr i64 %3318, 63
  %3348 = lshr i64 %3319, 63
  %3349 = xor i64 %3344, %3347
  %3350 = xor i64 %3344, %3348
  %3351 = add nuw nsw i64 %3349, %3350
  %3352 = icmp eq i64 %3351, 2
  %3353 = zext i1 %3352 to i8
  %3354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3353, i8* %3354, align 1, !tbaa !2450
  %3355 = load i64, i64* %RBP
  %3356 = sub i64 %3355, 280
  %3357 = load i64, i64* %PC
  %3358 = add i64 %3357, 7
  store i64 %3358, i64* %PC
  %3359 = inttoptr i64 %3356 to i64*
  %3360 = load i64, i64* %3359
  store i64 %3360, i64* %RCX, align 8, !tbaa !2428
  %3361 = load i64, i64* %RCX
  %3362 = add i64 %3361, 16
  %3363 = load i64, i64* %RAX
  %3364 = load i64, i64* %PC
  %3365 = add i64 %3364, 4
  store i64 %3365, i64* %PC
  %3366 = inttoptr i64 %3362 to i64*
  store i64 %3363, i64* %3366
  %3367 = load i64, i64* %RBP
  %3368 = sub i64 %3367, 264
  %3369 = load i64, i64* %PC
  %3370 = add i64 %3369, 7
  store i64 %3370, i64* %PC
  %3371 = inttoptr i64 %3368 to i64*
  %3372 = load i64, i64* %3371
  store i64 %3372, i64* %RAX, align 8, !tbaa !2428
  %3373 = load i64, i64* %RBP
  %3374 = sub i64 %3373, 280
  %3375 = load i64, i64* %PC
  %3376 = add i64 %3375, 7
  store i64 %3376, i64* %PC
  %3377 = inttoptr i64 %3374 to i64*
  %3378 = load i64, i64* %3377
  store i64 %3378, i64* %RCX, align 8, !tbaa !2428
  %3379 = load i64, i64* %RCX
  %3380 = add i64 %3379, 56
  %3381 = load i64, i64* %RAX
  %3382 = load i64, i64* %PC
  %3383 = add i64 %3382, 4
  store i64 %3383, i64* %PC
  %3384 = inttoptr i64 %3380 to i64*
  store i64 %3381, i64* %3384
  %3385 = load i64, i64* %RBP
  %3386 = sub i64 %3385, 264
  %3387 = load i64, i64* %PC
  %3388 = add i64 %3387, 7
  store i64 %3388, i64* %PC
  %3389 = inttoptr i64 %3386 to i64*
  %3390 = load i64, i64* %3389
  store i64 %3390, i64* %RAX, align 8, !tbaa !2428
  %3391 = load i64, i64* %RBP
  %3392 = sub i64 %3391, 280
  %3393 = load i64, i64* %PC
  %3394 = add i64 %3393, 7
  store i64 %3394, i64* %PC
  %3395 = inttoptr i64 %3392 to i64*
  %3396 = load i64, i64* %3395
  store i64 %3396, i64* %RCX, align 8, !tbaa !2428
  %3397 = load i64, i64* %RCX
  %3398 = load i64, i64* %RAX
  %3399 = load i64, i64* %PC
  %3400 = add i64 %3399, 3
  store i64 %3400, i64* %PC
  %3401 = inttoptr i64 %3397 to i64*
  store i64 %3398, i64* %3401
  %3402 = load i64, i64* %RBP
  %3403 = sub i64 %3402, 280
  %3404 = load i64, i64* %PC
  %3405 = add i64 %3404, 7
  store i64 %3405, i64* %PC
  %3406 = inttoptr i64 %3403 to i64*
  %3407 = load i64, i64* %3406
  store i64 %3407, i64* %RAX, align 8, !tbaa !2428
  %3408 = load i64, i64* %RAX
  %3409 = add i64 %3408, 8
  %3410 = load i64, i64* %PC
  %3411 = add i64 %3410, 4
  store i64 %3411, i64* %PC
  %3412 = inttoptr i64 %3409 to i64*
  %3413 = load i64, i64* %3412
  store i64 %3413, i64* %RAX, align 8, !tbaa !2428
  %3414 = load i64, i64* %RAX
  %3415 = add i64 %3414, 56
  %3416 = load i64, i64* %PC
  %3417 = add i64 %3416, 4
  store i64 %3417, i64* %PC
  %3418 = inttoptr i64 %3415 to i64*
  %3419 = load i64, i64* %3418
  store i64 %3419, i64* %RAX, align 8, !tbaa !2428
  %3420 = load i64, i64* %RBP
  %3421 = sub i64 %3420, 280
  %3422 = load i64, i64* %PC
  %3423 = add i64 %3422, 7
  store i64 %3423, i64* %PC
  %3424 = inttoptr i64 %3421 to i64*
  %3425 = load i64, i64* %3424
  store i64 %3425, i64* %RCX, align 8, !tbaa !2428
  %3426 = load i64, i64* %RCX
  %3427 = add i64 %3426, 32
  %3428 = load i64, i64* %RAX
  %3429 = load i64, i64* %PC
  %3430 = add i64 %3429, 4
  store i64 %3430, i64* %PC
  %3431 = inttoptr i64 %3427 to i64*
  store i64 %3428, i64* %3431
  %3432 = load i64, i64* %RBP
  %3433 = sub i64 %3432, 280
  %3434 = load i64, i64* %PC
  %3435 = add i64 %3434, 7
  store i64 %3435, i64* %PC
  %3436 = inttoptr i64 %3433 to i64*
  %3437 = load i64, i64* %3436
  store i64 %3437, i64* %RAX, align 8, !tbaa !2428
  %3438 = load i64, i64* %RBP
  %3439 = sub i64 %3438, 280
  %3440 = load i64, i64* %PC
  %3441 = add i64 %3440, 7
  store i64 %3441, i64* %PC
  %3442 = inttoptr i64 %3439 to i64*
  %3443 = load i64, i64* %3442
  store i64 %3443, i64* %RCX, align 8, !tbaa !2428
  %3444 = load i64, i64* %RCX
  %3445 = add i64 %3444, 8
  %3446 = load i64, i64* %PC
  %3447 = add i64 %3446, 4
  store i64 %3447, i64* %PC
  %3448 = inttoptr i64 %3445 to i64*
  %3449 = load i64, i64* %3448
  store i64 %3449, i64* %RCX, align 8, !tbaa !2428
  %3450 = load i64, i64* %RCX
  %3451 = add i64 %3450, 56
  %3452 = load i64, i64* %RAX
  %3453 = load i64, i64* %PC
  %3454 = add i64 %3453, 4
  store i64 %3454, i64* %PC
  %3455 = inttoptr i64 %3451 to i64*
  store i64 %3452, i64* %3455
  %3456 = load i64, i64* %RBP
  %3457 = sub i64 %3456, 280
  %3458 = load i64, i64* %PC
  %3459 = add i64 %3458, 7
  store i64 %3459, i64* %PC
  %3460 = inttoptr i64 %3457 to i64*
  %3461 = load i64, i64* %3460
  store i64 %3461, i64* %RAX, align 8, !tbaa !2428
  %3462 = load i64, i64* %RAX
  %3463 = add i64 %3462, 16
  %3464 = load i64, i64* %PC
  %3465 = add i64 %3464, 4
  store i64 %3465, i64* %PC
  %3466 = inttoptr i64 %3463 to i64*
  %3467 = load i64, i64* %3466
  store i64 %3467, i64* %RAX, align 8, !tbaa !2428
  %3468 = load i64, i64* %RAX
  %3469 = add i64 %3468, 64
  %3470 = load i64, i64* %PC
  %3471 = add i64 %3470, 4
  store i64 %3471, i64* %PC
  %3472 = inttoptr i64 %3469 to i64*
  %3473 = load i64, i64* %3472
  store i64 %3473, i64* %RAX, align 8, !tbaa !2428
  %3474 = load i64, i64* %RBP
  %3475 = sub i64 %3474, 280
  %3476 = load i64, i64* %PC
  %3477 = add i64 %3476, 7
  store i64 %3477, i64* %PC
  %3478 = inttoptr i64 %3475 to i64*
  %3479 = load i64, i64* %3478
  store i64 %3479, i64* %RCX, align 8, !tbaa !2428
  %3480 = load i64, i64* %RCX
  %3481 = add i64 %3480, 40
  %3482 = load i64, i64* %RAX
  %3483 = load i64, i64* %PC
  %3484 = add i64 %3483, 4
  store i64 %3484, i64* %PC
  %3485 = inttoptr i64 %3481 to i64*
  store i64 %3482, i64* %3485
  %3486 = load i64, i64* %RBP
  %3487 = sub i64 %3486, 280
  %3488 = load i64, i64* %PC
  %3489 = add i64 %3488, 7
  store i64 %3489, i64* %PC
  %3490 = inttoptr i64 %3487 to i64*
  %3491 = load i64, i64* %3490
  store i64 %3491, i64* %RAX, align 8, !tbaa !2428
  %3492 = load i64, i64* %RBP
  %3493 = sub i64 %3492, 280
  %3494 = load i64, i64* %PC
  %3495 = add i64 %3494, 7
  store i64 %3495, i64* %PC
  %3496 = inttoptr i64 %3493 to i64*
  %3497 = load i64, i64* %3496
  store i64 %3497, i64* %RCX, align 8, !tbaa !2428
  %3498 = load i64, i64* %RCX
  %3499 = add i64 %3498, 16
  %3500 = load i64, i64* %PC
  %3501 = add i64 %3500, 4
  store i64 %3501, i64* %PC
  %3502 = inttoptr i64 %3499 to i64*
  %3503 = load i64, i64* %3502
  store i64 %3503, i64* %RCX, align 8, !tbaa !2428
  %3504 = load i64, i64* %RCX
  %3505 = add i64 %3504, 64
  %3506 = load i64, i64* %RAX
  %3507 = load i64, i64* %PC
  %3508 = add i64 %3507, 4
  store i64 %3508, i64* %PC
  %3509 = inttoptr i64 %3505 to i64*
  store i64 %3506, i64* %3509
  %3510 = load i64, i64* %RBP
  %3511 = sub i64 %3510, 272
  %3512 = load i64, i64* %PC
  %3513 = add i64 %3512, 7
  store i64 %3513, i64* %PC
  %3514 = inttoptr i64 %3511 to i64*
  %3515 = load i64, i64* %3514
  store i64 %3515, i64* %RAX, align 8, !tbaa !2428
  %3516 = load i64, i64* %RAX
  %3517 = load i64, i64* %PC
  %3518 = add i64 %3517, 4
  store i64 %3518, i64* %PC
  %3519 = add i64 1, %3516
  store i64 %3519, i64* %RAX, align 8, !tbaa !2428
  %3520 = icmp ult i64 %3519, %3516
  %3521 = icmp ult i64 %3519, 1
  %3522 = or i1 %3520, %3521
  %3523 = zext i1 %3522 to i8
  %3524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3523, i8* %3524, align 1, !tbaa !2432
  %3525 = trunc i64 %3519 to i32
  %3526 = and i32 %3525, 255
  %3527 = call i32 @llvm.ctpop.i32(i32 %3526) #16
  %3528 = trunc i32 %3527 to i8
  %3529 = and i8 %3528, 1
  %3530 = xor i8 %3529, 1
  %3531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3530, i8* %3531, align 1, !tbaa !2446
  %3532 = xor i64 1, %3516
  %3533 = xor i64 %3532, %3519
  %3534 = lshr i64 %3533, 4
  %3535 = trunc i64 %3534 to i8
  %3536 = and i8 %3535, 1
  %3537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3536, i8* %3537, align 1, !tbaa !2447
  %3538 = icmp eq i64 %3519, 0
  %3539 = zext i1 %3538 to i8
  %3540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3539, i8* %3540, align 1, !tbaa !2448
  %3541 = lshr i64 %3519, 63
  %3542 = trunc i64 %3541 to i8
  %3543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3542, i8* %3543, align 1, !tbaa !2449
  %3544 = lshr i64 %3516, 63
  %3545 = xor i64 %3541, %3544
  %3546 = add nuw nsw i64 %3545, %3541
  %3547 = icmp eq i64 %3546, 2
  %3548 = zext i1 %3547 to i8
  %3549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3548, i8* %3549, align 1, !tbaa !2450
  %3550 = load i64, i64* %RBP
  %3551 = sub i64 %3550, 272
  %3552 = load i64, i64* %RAX
  %3553 = load i64, i64* %PC
  %3554 = add i64 %3553, 7
  store i64 %3554, i64* %PC
  %3555 = inttoptr i64 %3551 to i64*
  store i64 %3552, i64* %3555
  %3556 = load i64, i64* %RBP
  %3557 = sub i64 %3556, 280
  %3558 = load i64, i64* %PC
  %3559 = add i64 %3558, 7
  store i64 %3559, i64* %PC
  %3560 = inttoptr i64 %3557 to i64*
  %3561 = load i64, i64* %3560
  store i64 %3561, i64* %RAX, align 8, !tbaa !2428
  %3562 = load i64, i64* %RAX
  %3563 = load i64, i64* %PC
  %3564 = add i64 %3563, 4
  store i64 %3564, i64* %PC
  %3565 = add i64 64, %3562
  store i64 %3565, i64* %RAX, align 8, !tbaa !2428
  %3566 = icmp ult i64 %3565, %3562
  %3567 = icmp ult i64 %3565, 64
  %3568 = or i1 %3566, %3567
  %3569 = zext i1 %3568 to i8
  %3570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3569, i8* %3570, align 1, !tbaa !2432
  %3571 = trunc i64 %3565 to i32
  %3572 = and i32 %3571, 255
  %3573 = call i32 @llvm.ctpop.i32(i32 %3572) #16
  %3574 = trunc i32 %3573 to i8
  %3575 = and i8 %3574, 1
  %3576 = xor i8 %3575, 1
  %3577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3576, i8* %3577, align 1, !tbaa !2446
  %3578 = xor i64 64, %3562
  %3579 = xor i64 %3578, %3565
  %3580 = lshr i64 %3579, 4
  %3581 = trunc i64 %3580 to i8
  %3582 = and i8 %3581, 1
  %3583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3582, i8* %3583, align 1, !tbaa !2447
  %3584 = icmp eq i64 %3565, 0
  %3585 = zext i1 %3584 to i8
  %3586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3585, i8* %3586, align 1, !tbaa !2448
  %3587 = lshr i64 %3565, 63
  %3588 = trunc i64 %3587 to i8
  %3589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3588, i8* %3589, align 1, !tbaa !2449
  %3590 = lshr i64 %3562, 63
  %3591 = xor i64 %3587, %3590
  %3592 = add nuw nsw i64 %3591, %3587
  %3593 = icmp eq i64 %3592, 2
  %3594 = zext i1 %3593 to i8
  %3595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3594, i8* %3595, align 1, !tbaa !2450
  %3596 = load i64, i64* %RBP
  %3597 = sub i64 %3596, 280
  %3598 = load i64, i64* %RAX
  %3599 = load i64, i64* %PC
  %3600 = add i64 %3599, 7
  store i64 %3600, i64* %PC
  %3601 = inttoptr i64 %3597 to i64*
  store i64 %3598, i64* %3601
  %3602 = load i64, i64* %PC
  %3603 = sub i64 %3602, 358
  %3604 = load i64, i64* %PC
  %3605 = add i64 %3604, 5
  store i64 %3605, i64* %PC
  %3606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3603, i64* %3606, align 8, !tbaa !2428
  br label %block_403d3a

block_403650:                                     ; preds = %block_403605
  %3607 = sub i64 %4834, 8
  %3608 = load i64, i64* %PC
  %3609 = add i64 %3608, 8
  store i64 %3609, i64* %PC
  %3610 = inttoptr i64 %3607 to i64*
  store i64 -1, i64* %3610
  %3611 = load i64, i64* %PC
  %3612 = add i64 %3611, 2598
  %3613 = load i64, i64* %PC
  %3614 = add i64 %3613, 5
  store i64 %3614, i64* %PC
  %3615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3612, i64* %3615, align 8, !tbaa !2428
  br label %block_40407e

block_403c30:                                     ; preds = %block_40394a
  %3616 = load i64, i64* %RBP
  %3617 = sub i64 %3616, 16
  %3618 = load i64, i64* %PC
  %3619 = add i64 %3618, 4
  store i64 %3619, i64* %PC
  %3620 = inttoptr i64 %3617 to i64*
  %3621 = load i64, i64* %3620
  store i64 %3621, i64* %RAX, align 8, !tbaa !2428
  %3622 = load i64, i64* %RAX
  %3623 = add i64 %3622, 528
  %3624 = load i64, i64* %PC
  %3625 = add i64 %3624, 7
  store i64 %3625, i64* %PC
  %3626 = inttoptr i64 %3623 to i64*
  %3627 = load i64, i64* %3626
  store i64 %3627, i64* %RAX, align 8, !tbaa !2428
  %3628 = load i64, i64* %RBP
  %3629 = sub i64 %3628, 328
  %3630 = load i64, i64* %RAX
  %3631 = load i64, i64* %PC
  %3632 = add i64 %3631, 7
  store i64 %3632, i64* %PC
  %3633 = inttoptr i64 %3629 to i64*
  store i64 %3630, i64* %3633
  %3634 = load i64, i64* %PC
  %3635 = add i64 %3634, 24
  %3636 = load i64, i64* %PC
  %3637 = add i64 %3636, 5
  store i64 %3637, i64* %PC
  %3638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3635, i64* %3638, align 8, !tbaa !2428
  br label %block_403c5a

block_403929:                                     ; preds = %block_4038de
  %3639 = load i64, i64* %RBP
  %3640 = sub i64 %3639, 248
  %3641 = load i64, i64* %PC
  %3642 = add i64 %3641, 7
  store i64 %3642, i64* %PC
  %3643 = inttoptr i64 %3640 to i64*
  %3644 = load i64, i64* %3643
  store i64 %3644, i64* %RAX, align 8, !tbaa !2428
  %3645 = load i64, i64* %RAX
  %3646 = load i64, i64* %RBP
  %3647 = sub i64 %3646, 256
  %3648 = load i64, i64* %PC
  %3649 = add i64 %3648, 7
  store i64 %3649, i64* %PC
  %3650 = inttoptr i64 %3647 to i64*
  %3651 = load i64, i64* %3650
  %3652 = sub i64 %3645, %3651
  %3653 = icmp ugt i64 %3651, %3645
  %3654 = zext i1 %3653 to i8
  %3655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3654, i8* %3655, align 1, !tbaa !2432
  %3656 = trunc i64 %3652 to i32
  %3657 = and i32 %3656, 255
  %3658 = call i32 @llvm.ctpop.i32(i32 %3657) #16
  %3659 = trunc i32 %3658 to i8
  %3660 = and i8 %3659, 1
  %3661 = xor i8 %3660, 1
  %3662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3661, i8* %3662, align 1, !tbaa !2446
  %3663 = xor i64 %3651, %3645
  %3664 = xor i64 %3663, %3652
  %3665 = lshr i64 %3664, 4
  %3666 = trunc i64 %3665 to i8
  %3667 = and i8 %3666, 1
  %3668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3667, i8* %3668, align 1, !tbaa !2447
  %3669 = icmp eq i64 %3652, 0
  %3670 = zext i1 %3669 to i8
  %3671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3670, i8* %3671, align 1, !tbaa !2448
  %3672 = lshr i64 %3652, 63
  %3673 = trunc i64 %3672 to i8
  %3674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3673, i8* %3674, align 1, !tbaa !2449
  %3675 = lshr i64 %3645, 63
  %3676 = lshr i64 %3651, 63
  %3677 = xor i64 %3676, %3675
  %3678 = xor i64 %3672, %3675
  %3679 = add nuw nsw i64 %3678, %3677
  %3680 = icmp eq i64 %3679, 2
  %3681 = zext i1 %3680 to i8
  %3682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3681, i8* %3682, align 1, !tbaa !2450
  %3683 = load i64, i64* %PC
  %3684 = add i64 %3683, 19
  %3685 = load i64, i64* %PC
  %3686 = add i64 %3685, 6
  %3687 = load i64, i64* %PC
  %3688 = add i64 %3687, 6
  store i64 %3688, i64* %PC
  %3689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3690 = load i8, i8* %3689, align 1, !tbaa !2448
  %3691 = icmp ne i8 %3690, 0
  %3692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3693 = load i8, i8* %3692, align 1, !tbaa !2449
  %3694 = icmp ne i8 %3693, 0
  %3695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3696 = load i8, i8* %3695, align 1, !tbaa !2450
  %3697 = icmp ne i8 %3696, 0
  %3698 = xor i1 %3694, %3697
  %3699 = or i1 %3691, %3698
  %3700 = zext i1 %3699 to i8
  store i8 %3700, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3702 = select i1 %3699, i64 %3684, i64 %3686
  store i64 %3702, i64* %3701, align 8, !tbaa !2428
  %3703 = load i8, i8* %BRANCH_TAKEN
  %3704 = icmp eq i8 %3703, 1
  br i1 %3704, label %block_40394a, label %block_40393d

block_4037c6:                                     ; preds = %block_403722
  %3705 = load i64, i64* %RBP
  %3706 = sub i64 %3705, 16
  %3707 = load i64, i64* %PC
  %3708 = add i64 %3707, 4
  store i64 %3708, i64* %PC
  %3709 = inttoptr i64 %3706 to i64*
  %3710 = load i64, i64* %3709
  store i64 %3710, i64* %RAX, align 8, !tbaa !2428
  %3711 = load i64, i64* %RAX
  %3712 = add i64 %3711, 568
  %3713 = load i64, i64* %PC
  %3714 = add i64 %3713, 8
  store i64 %3714, i64* %PC
  %3715 = inttoptr i64 %3712 to i64*
  %3716 = load i64, i64* %3715
  %3717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3717, align 1, !tbaa !2432
  %3718 = trunc i64 %3716 to i32
  %3719 = and i32 %3718, 255
  %3720 = call i32 @llvm.ctpop.i32(i32 %3719) #16
  %3721 = trunc i32 %3720 to i8
  %3722 = and i8 %3721, 1
  %3723 = xor i8 %3722, 1
  %3724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3723, i8* %3724, align 1, !tbaa !2446
  %3725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3725, align 1, !tbaa !2447
  %3726 = icmp eq i64 %3716, 0
  %3727 = zext i1 %3726 to i8
  %3728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3727, i8* %3728, align 1, !tbaa !2448
  %3729 = lshr i64 %3716, 63
  %3730 = trunc i64 %3729 to i8
  %3731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3730, i8* %3731, align 1, !tbaa !2449
  %3732 = lshr i64 %3716, 63
  %3733 = xor i64 %3729, %3732
  %3734 = add nuw nsw i64 %3733, %3732
  %3735 = icmp eq i64 %3734, 2
  %3736 = zext i1 %3735 to i8
  %3737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3736, i8* %3737, align 1, !tbaa !2450
  %3738 = load i64, i64* %PC
  %3739 = add i64 %3738, 24
  %3740 = load i64, i64* %PC
  %3741 = add i64 %3740, 6
  %3742 = load i64, i64* %PC
  %3743 = add i64 %3742, 6
  store i64 %3743, i64* %PC
  %3744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3745 = load i8, i8* %3744, align 1, !tbaa !2448
  store i8 %3745, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3747 = icmp ne i8 %3745, 0
  %3748 = select i1 %3747, i64 %3739, i64 %3741
  store i64 %3748, i64* %3746, align 8, !tbaa !2428
  %3749 = load i8, i8* %BRANCH_TAKEN
  %3750 = icmp eq i8 %3749, 1
  br i1 %3750, label %block_4037ea, label %block_4037d8

block_4038de:                                     ; preds = %block_4038c6
  %3751 = load i64, i64* %PC
  %3752 = add i64 %3751, 5
  store i64 %3752, i64* %PC
  store i64 200, i64* %RSI, align 8, !tbaa !2428
  %3753 = load i64, i64* %RBP
  %3754 = sub i64 %3753, 240
  %3755 = load i64, i64* %PC
  %3756 = add i64 %3755, 7
  store i64 %3756, i64* %PC
  store i64 %3754, i64* %RDI, align 8, !tbaa !2428
  %3757 = load i64, i64* %RBP
  %3758 = sub i64 %3757, 24
  %3759 = load i64, i64* %PC
  %3760 = add i64 %3759, 4
  store i64 %3760, i64* %PC
  %3761 = inttoptr i64 %3758 to i64*
  %3762 = load i64, i64* %3761
  store i64 %3762, i64* %RDX, align 8, !tbaa !2428
  %3763 = load i64, i64* %PC
  %3764 = sub i64 %3763, 12414
  %3765 = load i64, i64* %PC
  %3766 = add i64 %3765, 5
  %3767 = load i64, i64* %PC
  %3768 = add i64 %3767, 5
  store i64 %3768, i64* %PC
  %3769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3770 = load i64, i64* %3769, align 8, !tbaa !2428
  %3771 = add i64 %3770, -8
  %3772 = inttoptr i64 %3771 to i64*
  store i64 %3766, i64* %3772
  store i64 %3771, i64* %3769, align 8, !tbaa !2428
  %3773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3764, i64* %3773, align 8, !tbaa !2428
  %3774 = load i64, i64* %PC
  %3775 = call %struct.Memory* @ext_608fe8_fgets(%struct.State* %0, i64 %3774, %struct.Memory* %MEMORY.10)
  %3776 = load i64, i64* %PC
  %3777 = add i64 %3776, 10
  store i64 %3777, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 709), i64* %RSI, align 8, !tbaa !2428
  %3778 = load i64, i64* %RBP
  %3779 = sub i64 %3778, 248
  %3780 = load i64, i64* %PC
  %3781 = add i64 %3780, 7
  store i64 %3781, i64* %PC
  store i64 %3779, i64* %RDX, align 8, !tbaa !2428
  %3782 = load i64, i64* %RBP
  %3783 = sub i64 %3782, 256
  %3784 = load i64, i64* %PC
  %3785 = add i64 %3784, 7
  store i64 %3785, i64* %PC
  store i64 %3783, i64* %RCX, align 8, !tbaa !2428
  %3786 = load i64, i64* %RBP
  %3787 = sub i64 %3786, 240
  %3788 = load i64, i64* %PC
  %3789 = add i64 %3788, 7
  store i64 %3789, i64* %PC
  store i64 %3787, i64* %RDI, align 8, !tbaa !2428
  %3790 = load i64, i64* %RBP
  %3791 = sub i64 %3790, 320
  %3792 = load i64, i64* %RAX
  %3793 = load i64, i64* %PC
  %3794 = add i64 %3793, 7
  store i64 %3794, i64* %PC
  %3795 = inttoptr i64 %3791 to i64*
  store i64 %3792, i64* %3795
  %3796 = load i64, i64* %PC
  %3797 = add i64 %3796, 2
  store i64 %3797, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %3798 = load i64, i64* %PC
  %3799 = sub i64 %3798, 12379
  %3800 = load i64, i64* %PC
  %3801 = add i64 %3800, 5
  %3802 = load i64, i64* %PC
  %3803 = add i64 %3802, 5
  store i64 %3803, i64* %PC
  %3804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3805 = load i64, i64* %3804, align 8, !tbaa !2428
  %3806 = add i64 %3805, -8
  %3807 = inttoptr i64 %3806 to i64*
  store i64 %3801, i64* %3807
  store i64 %3806, i64* %3804, align 8, !tbaa !2428
  %3808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3799, i64* %3808, align 8, !tbaa !2428
  %3809 = load i64, i64* %PC
  %3810 = call %struct.Memory* @ext_609010___isoc99_sscanf(%struct.State* %0, i64 %3809, %struct.Memory* %3775)
  %3811 = load i32, i32* %EAX
  %3812 = zext i32 %3811 to i64
  %3813 = load i64, i64* %PC
  %3814 = add i64 %3813, 3
  store i64 %3814, i64* %PC
  %3815 = sub i32 %3811, 2
  %3816 = icmp ult i32 %3811, 2
  %3817 = zext i1 %3816 to i8
  %3818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3817, i8* %3818, align 1, !tbaa !2432
  %3819 = and i32 %3815, 255
  %3820 = call i32 @llvm.ctpop.i32(i32 %3819) #16
  %3821 = trunc i32 %3820 to i8
  %3822 = and i8 %3821, 1
  %3823 = xor i8 %3822, 1
  %3824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3823, i8* %3824, align 1, !tbaa !2446
  %3825 = xor i64 2, %3812
  %3826 = trunc i64 %3825 to i32
  %3827 = xor i32 %3826, %3815
  %3828 = lshr i32 %3827, 4
  %3829 = trunc i32 %3828 to i8
  %3830 = and i8 %3829, 1
  %3831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3830, i8* %3831, align 1, !tbaa !2447
  %3832 = icmp eq i32 %3815, 0
  %3833 = zext i1 %3832 to i8
  %3834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3833, i8* %3834, align 1, !tbaa !2448
  %3835 = lshr i32 %3815, 31
  %3836 = trunc i32 %3835 to i8
  %3837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3836, i8* %3837, align 1, !tbaa !2449
  %3838 = lshr i32 %3811, 31
  %3839 = xor i32 %3835, %3838
  %3840 = add nuw nsw i32 %3839, %3838
  %3841 = icmp eq i32 %3840, 2
  %3842 = zext i1 %3841 to i8
  %3843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3842, i8* %3843, align 1, !tbaa !2450
  %3844 = load i64, i64* %PC
  %3845 = add i64 %3844, 26
  %3846 = load i64, i64* %PC
  %3847 = add i64 %3846, 6
  %3848 = load i64, i64* %PC
  %3849 = add i64 %3848, 6
  store i64 %3849, i64* %PC
  %3850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3851 = load i8, i8* %3850, align 1, !tbaa !2448
  %3852 = icmp eq i8 %3851, 0
  %3853 = zext i1 %3852 to i8
  store i8 %3853, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3855 = select i1 %3852, i64 %3845, i64 %3847
  store i64 %3855, i64* %3854, align 8, !tbaa !2428
  %3856 = load i8, i8* %BRANCH_TAKEN
  %3857 = icmp eq i8 %3856, 1
  br i1 %3857, label %block_40393d, label %block_403929

block_403f4b:                                     ; preds = %block_403f35, %block_403ea5
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.3, %block_403ea5 ], [ %MEMORY.7, %block_403f35 ]
  %3858 = load i64, i64* %RBP
  %3859 = sub i64 %3858, 24
  %3860 = load i64, i64* %PC
  %3861 = add i64 %3860, 4
  store i64 %3861, i64* %PC
  %3862 = inttoptr i64 %3859 to i64*
  %3863 = load i64, i64* %3862
  store i64 %3863, i64* %RDI, align 8, !tbaa !2428
  %3864 = load i64, i64* %PC
  %3865 = sub i64 %3864, 14095
  %3866 = load i64, i64* %PC
  %3867 = add i64 %3866, 5
  %3868 = load i64, i64* %PC
  %3869 = add i64 %3868, 5
  store i64 %3869, i64* %PC
  %3870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3871 = load i64, i64* %3870, align 8, !tbaa !2428
  %3872 = add i64 %3871, -8
  %3873 = inttoptr i64 %3872 to i64*
  store i64 %3867, i64* %3873
  store i64 %3872, i64* %3870, align 8, !tbaa !2428
  %3874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3865, i64* %3874, align 8, !tbaa !2428
  %3875 = load i64, i64* %PC
  %3876 = call %struct.Memory* @ext_608f50_fclose(%struct.State* %0, i64 %3875, %struct.Memory* %MEMORY.5)
  %3877 = load i64, i64* %RBP
  %3878 = sub i64 %3877, 16
  %3879 = load i64, i64* %PC
  %3880 = add i64 %3879, 4
  store i64 %3880, i64* %PC
  %3881 = inttoptr i64 %3878 to i64*
  %3882 = load i64, i64* %3881
  store i64 %3882, i64* %RDI, align 8, !tbaa !2428
  %3883 = load i64, i64* %RDI
  %3884 = add i64 %3883, 200
  %3885 = load i64, i64* %PC
  %3886 = add i64 %3885, 7
  store i64 %3886, i64* %PC
  %3887 = inttoptr i64 %3884 to i8*
  store i8 0, i8* %3887
  %3888 = load i64, i64* %RBP
  %3889 = sub i64 %3888, 272
  %3890 = load i64, i64* %PC
  %3891 = add i64 %3890, 11
  store i64 %3891, i64* %PC
  %3892 = inttoptr i64 %3889 to i64*
  store i64 1, i64* %3892
  %3893 = load i64, i64* %RBP
  %3894 = sub i64 %3893, 340
  %3895 = load i32, i32* %EAX
  %3896 = zext i32 %3895 to i64
  %3897 = load i64, i64* %PC
  %3898 = add i64 %3897, 6
  store i64 %3898, i64* %PC
  %3899 = inttoptr i64 %3894 to i32*
  store i32 %3895, i32* %3899
  br label %block_403f70

block_403da4:                                     ; preds = %block_403d52
  %3900 = sub i64 %805, 8
  %3901 = load i64, i64* %PC
  %3902 = add i64 %3901, 8
  store i64 %3902, i64* %PC
  %3903 = inttoptr i64 %3900 to i64*
  store i64 -1, i64* %3903
  %3904 = load i64, i64* %PC
  %3905 = add i64 %3904, 722
  %3906 = load i64, i64* %PC
  %3907 = add i64 %3906, 5
  store i64 %3907, i64* %PC
  %3908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3905, i64* %3908, align 8, !tbaa !2428
  br label %block_40407e

block_403722:                                     ; preds = %block_403704, %block_4036da
  %MEMORY.6 = phi %struct.Memory* [ %4787, %block_403704 ], [ %4787, %block_4036da ]
  %3909 = load i64, i64* %PC
  %3910 = add i64 %3909, 5
  store i64 %3910, i64* %PC
  store i64 104, i64* %RAX, align 8, !tbaa !2428
  %3911 = load i32, i32* %EAX
  %3912 = zext i32 %3911 to i64
  %3913 = load i64, i64* %PC
  %3914 = add i64 %3913, 2
  store i64 %3914, i64* %PC
  %3915 = and i64 %3912, 4294967295
  store i64 %3915, i64* %RSI, align 8, !tbaa !2428
  %3916 = load i64, i64* %RBP
  %3917 = sub i64 %3916, 16
  %3918 = load i64, i64* %PC
  %3919 = add i64 %3918, 4
  store i64 %3919, i64* %PC
  %3920 = inttoptr i64 %3917 to i64*
  %3921 = load i64, i64* %3920
  store i64 %3921, i64* %RCX, align 8, !tbaa !2428
  %3922 = load i64, i64* %RCX
  %3923 = add i64 %3922, 416
  %3924 = load i64, i64* %PC
  %3925 = add i64 %3924, 7
  store i64 %3925, i64* %PC
  %3926 = inttoptr i64 %3923 to i64*
  %3927 = load i64, i64* %3926
  store i64 %3927, i64* %RCX, align 8, !tbaa !2428
  %3928 = load i64, i64* %RBP
  %3929 = sub i64 %3928, 16
  %3930 = load i64, i64* %PC
  %3931 = add i64 %3930, 4
  store i64 %3931, i64* %PC
  %3932 = inttoptr i64 %3929 to i64*
  %3933 = load i64, i64* %3932
  store i64 %3933, i64* %RDX, align 8, !tbaa !2428
  %3934 = load i64, i64* %RCX
  %3935 = load i64, i64* %RDX
  %3936 = add i64 %3935, 424
  %3937 = load i64, i64* %PC
  %3938 = add i64 %3937, 7
  store i64 %3938, i64* %PC
  %3939 = inttoptr i64 %3936 to i64*
  %3940 = load i64, i64* %3939
  %3941 = sub i64 %3934, %3940
  store i64 %3941, i64* %RCX, align 8, !tbaa !2428
  %3942 = icmp ugt i64 %3940, %3934
  %3943 = zext i1 %3942 to i8
  %3944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3943, i8* %3944, align 1, !tbaa !2432
  %3945 = trunc i64 %3941 to i32
  %3946 = and i32 %3945, 255
  %3947 = call i32 @llvm.ctpop.i32(i32 %3946) #16
  %3948 = trunc i32 %3947 to i8
  %3949 = and i8 %3948, 1
  %3950 = xor i8 %3949, 1
  %3951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3950, i8* %3951, align 1, !tbaa !2446
  %3952 = xor i64 %3940, %3934
  %3953 = xor i64 %3952, %3941
  %3954 = lshr i64 %3953, 4
  %3955 = trunc i64 %3954 to i8
  %3956 = and i8 %3955, 1
  %3957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3956, i8* %3957, align 1, !tbaa !2447
  %3958 = icmp eq i64 %3941, 0
  %3959 = zext i1 %3958 to i8
  %3960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3959, i8* %3960, align 1, !tbaa !2448
  %3961 = lshr i64 %3941, 63
  %3962 = trunc i64 %3961 to i8
  %3963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3962, i8* %3963, align 1, !tbaa !2449
  %3964 = lshr i64 %3934, 63
  %3965 = lshr i64 %3940, 63
  %3966 = xor i64 %3965, %3964
  %3967 = xor i64 %3961, %3964
  %3968 = add nuw nsw i64 %3967, %3966
  %3969 = icmp eq i64 %3968, 2
  %3970 = zext i1 %3969 to i8
  %3971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3970, i8* %3971, align 1, !tbaa !2450
  %3972 = load i64, i64* %RBP
  %3973 = sub i64 %3972, 16
  %3974 = load i64, i64* %PC
  %3975 = add i64 %3974, 4
  store i64 %3975, i64* %PC
  %3976 = inttoptr i64 %3973 to i64*
  %3977 = load i64, i64* %3976
  store i64 %3977, i64* %RDX, align 8, !tbaa !2428
  %3978 = load i64, i64* %RDX
  %3979 = add i64 %3978, 448
  %3980 = load i64, i64* %RCX
  %3981 = load i64, i64* %PC
  %3982 = add i64 %3981, 7
  store i64 %3982, i64* %PC
  %3983 = inttoptr i64 %3979 to i64*
  store i64 %3980, i64* %3983
  %3984 = load i64, i64* %RBP
  %3985 = sub i64 %3984, 16
  %3986 = load i64, i64* %PC
  %3987 = add i64 %3986, 4
  store i64 %3987, i64* %PC
  %3988 = inttoptr i64 %3985 to i64*
  %3989 = load i64, i64* %3988
  store i64 %3989, i64* %RCX, align 8, !tbaa !2428
  %3990 = load i64, i64* %RCX
  %3991 = add i64 %3990, 400
  %3992 = load i64, i64* %PC
  %3993 = add i64 %3992, 7
  store i64 %3993, i64* %PC
  %3994 = inttoptr i64 %3991 to i64*
  %3995 = load i64, i64* %3994
  store i64 %3995, i64* %RCX, align 8, !tbaa !2428
  %3996 = load i64, i64* %RCX
  %3997 = load i64, i64* %PC
  %3998 = add i64 %3997, 4
  store i64 %3998, i64* %PC
  %3999 = add i64 1, %3996
  store i64 %3999, i64* %RCX, align 8, !tbaa !2428
  %4000 = icmp ult i64 %3999, %3996
  %4001 = icmp ult i64 %3999, 1
  %4002 = or i1 %4000, %4001
  %4003 = zext i1 %4002 to i8
  %4004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4003, i8* %4004, align 1, !tbaa !2432
  %4005 = trunc i64 %3999 to i32
  %4006 = and i32 %4005, 255
  %4007 = call i32 @llvm.ctpop.i32(i32 %4006) #16
  %4008 = trunc i32 %4007 to i8
  %4009 = and i8 %4008, 1
  %4010 = xor i8 %4009, 1
  %4011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4010, i8* %4011, align 1, !tbaa !2446
  %4012 = xor i64 1, %3996
  %4013 = xor i64 %4012, %3999
  %4014 = lshr i64 %4013, 4
  %4015 = trunc i64 %4014 to i8
  %4016 = and i8 %4015, 1
  %4017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4016, i8* %4017, align 1, !tbaa !2447
  %4018 = icmp eq i64 %3999, 0
  %4019 = zext i1 %4018 to i8
  %4020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4019, i8* %4020, align 1, !tbaa !2448
  %4021 = lshr i64 %3999, 63
  %4022 = trunc i64 %4021 to i8
  %4023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4022, i8* %4023, align 1, !tbaa !2449
  %4024 = lshr i64 %3996, 63
  %4025 = xor i64 %4021, %4024
  %4026 = add nuw nsw i64 %4025, %4021
  %4027 = icmp eq i64 %4026, 2
  %4028 = zext i1 %4027 to i8
  %4029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4028, i8* %4029, align 1, !tbaa !2450
  %4030 = load i64, i64* %RCX
  %4031 = load i64, i64* %PC
  %4032 = add i64 %4031, 3
  store i64 %4032, i64* %PC
  store i64 %4030, i64* %RDI, align 8, !tbaa !2428
  %4033 = load i64, i64* %PC
  %4034 = sub i64 %4033, 11996
  %4035 = load i64, i64* %PC
  %4036 = add i64 %4035, 5
  %4037 = load i64, i64* %PC
  %4038 = add i64 %4037, 5
  store i64 %4038, i64* %PC
  %4039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4040 = load i64, i64* %4039, align 8, !tbaa !2428
  %4041 = add i64 %4040, -8
  %4042 = inttoptr i64 %4041 to i64*
  store i64 %4036, i64* %4042
  store i64 %4041, i64* %4039, align 8, !tbaa !2428
  %4043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4034, i64* %4043, align 8, !tbaa !2428
  %4044 = load i64, i64* %PC
  %4045 = call %struct.Memory* @ext_608f78_calloc(%struct.State* %0, i64 %4044, %struct.Memory* %MEMORY.6)
  %4046 = bitcast i32* %R8D to i64*
  %4047 = load i64, i64* %PC
  %4048 = add i64 %4047, 6
  store i64 %4048, i64* %PC
  store i64 64, i64* %4046, align 8, !tbaa !2428
  %4049 = load i32, i32* %R8D
  %4050 = zext i32 %4049 to i64
  %4051 = load i64, i64* %PC
  %4052 = add i64 %4051, 3
  store i64 %4052, i64* %PC
  %4053 = and i64 %4050, 4294967295
  store i64 %4053, i64* %RSI, align 8, !tbaa !2428
  %4054 = load i64, i64* %RBP
  %4055 = sub i64 %4054, 16
  %4056 = load i64, i64* %PC
  %4057 = add i64 %4056, 4
  store i64 %4057, i64* %PC
  %4058 = inttoptr i64 %4055 to i64*
  %4059 = load i64, i64* %4058
  store i64 %4059, i64* %RCX, align 8, !tbaa !2428
  %4060 = load i64, i64* %RCX
  %4061 = add i64 %4060, 552
  %4062 = load i64, i64* %RAX
  %4063 = load i64, i64* %PC
  %4064 = add i64 %4063, 7
  store i64 %4064, i64* %PC
  %4065 = inttoptr i64 %4061 to i64*
  store i64 %4062, i64* %4065
  %4066 = load i64, i64* %RBP
  %4067 = sub i64 %4066, 16
  %4068 = load i64, i64* %PC
  %4069 = add i64 %4068, 4
  store i64 %4069, i64* %PC
  %4070 = inttoptr i64 %4067 to i64*
  %4071 = load i64, i64* %4070
  store i64 %4071, i64* %RAX, align 8, !tbaa !2428
  %4072 = load i64, i64* %RAX
  %4073 = add i64 %4072, 400
  %4074 = load i64, i64* %PC
  %4075 = add i64 %4074, 7
  store i64 %4075, i64* %PC
  %4076 = inttoptr i64 %4073 to i64*
  %4077 = load i64, i64* %4076
  store i64 %4077, i64* %RDI, align 8, !tbaa !2428
  %4078 = load i64, i64* %PC
  %4079 = sub i64 %4078, 12032
  %4080 = load i64, i64* %PC
  %4081 = add i64 %4080, 5
  %4082 = load i64, i64* %PC
  %4083 = add i64 %4082, 5
  store i64 %4083, i64* %PC
  %4084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4085 = load i64, i64* %4084, align 8, !tbaa !2428
  %4086 = add i64 %4085, -8
  %4087 = inttoptr i64 %4086 to i64*
  store i64 %4081, i64* %4087
  store i64 %4086, i64* %4084, align 8, !tbaa !2428
  %4088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4079, i64* %4088, align 8, !tbaa !2428
  %4089 = load i64, i64* %PC
  %4090 = call %struct.Memory* @ext_608f78_calloc(%struct.State* %0, i64 %4089, %struct.Memory* %4045)
  %4091 = bitcast i32* %R8D to i64*
  %4092 = load i64, i64* %PC
  %4093 = add i64 %4092, 6
  store i64 %4093, i64* %PC
  store i64 64, i64* %4091, align 8, !tbaa !2428
  %4094 = load i32, i32* %R8D
  %4095 = zext i32 %4094 to i64
  %4096 = load i64, i64* %PC
  %4097 = add i64 %4096, 3
  store i64 %4097, i64* %PC
  %4098 = and i64 %4095, 4294967295
  store i64 %4098, i64* %RSI, align 8, !tbaa !2428
  %4099 = load i64, i64* %RBP
  %4100 = sub i64 %4099, 16
  %4101 = load i64, i64* %PC
  %4102 = add i64 %4101, 4
  store i64 %4102, i64* %PC
  %4103 = inttoptr i64 %4100 to i64*
  %4104 = load i64, i64* %4103
  store i64 %4104, i64* %RCX, align 8, !tbaa !2428
  %4105 = load i64, i64* %RCX
  %4106 = add i64 %4105, 584
  %4107 = load i64, i64* %RAX
  %4108 = load i64, i64* %PC
  %4109 = add i64 %4108, 7
  store i64 %4109, i64* %PC
  %4110 = inttoptr i64 %4106 to i64*
  store i64 %4107, i64* %4110
  %4111 = load i64, i64* %RBP
  %4112 = sub i64 %4111, 16
  %4113 = load i64, i64* %PC
  %4114 = add i64 %4113, 4
  store i64 %4114, i64* %PC
  %4115 = inttoptr i64 %4112 to i64*
  %4116 = load i64, i64* %4115
  store i64 %4116, i64* %RAX, align 8, !tbaa !2428
  %4117 = load i64, i64* %RAX
  %4118 = add i64 %4117, 416
  %4119 = load i64, i64* %PC
  %4120 = add i64 %4119, 7
  store i64 %4120, i64* %PC
  %4121 = inttoptr i64 %4118 to i64*
  %4122 = load i64, i64* %4121
  store i64 %4122, i64* %RDI, align 8, !tbaa !2428
  %4123 = load i64, i64* %PC
  %4124 = sub i64 %4123, 12068
  %4125 = load i64, i64* %PC
  %4126 = add i64 %4125, 5
  %4127 = load i64, i64* %PC
  %4128 = add i64 %4127, 5
  store i64 %4128, i64* %PC
  %4129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4130 = load i64, i64* %4129, align 8, !tbaa !2428
  %4131 = add i64 %4130, -8
  %4132 = inttoptr i64 %4131 to i64*
  store i64 %4126, i64* %4132
  store i64 %4131, i64* %4129, align 8, !tbaa !2428
  %4133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4124, i64* %4133, align 8, !tbaa !2428
  %4134 = load i64, i64* %PC
  %4135 = call %struct.Memory* @ext_608f78_calloc(%struct.State* %0, i64 %4134, %struct.Memory* %4090)
  %4136 = load i64, i64* %RBP
  %4137 = sub i64 %4136, 16
  %4138 = load i64, i64* %PC
  %4139 = add i64 %4138, 4
  store i64 %4139, i64* %PC
  %4140 = inttoptr i64 %4137 to i64*
  %4141 = load i64, i64* %4140
  store i64 %4141, i64* %RCX, align 8, !tbaa !2428
  %4142 = load i64, i64* %RCX
  %4143 = add i64 %4142, 568
  %4144 = load i64, i64* %RAX
  %4145 = load i64, i64* %PC
  %4146 = add i64 %4145, 7
  store i64 %4146, i64* %PC
  %4147 = inttoptr i64 %4143 to i64*
  store i64 %4144, i64* %4147
  %4148 = load i64, i64* %RBP
  %4149 = sub i64 %4148, 16
  %4150 = load i64, i64* %PC
  %4151 = add i64 %4150, 4
  store i64 %4151, i64* %PC
  %4152 = inttoptr i64 %4149 to i64*
  %4153 = load i64, i64* %4152
  store i64 %4153, i64* %RAX, align 8, !tbaa !2428
  %4154 = load i64, i64* %RAX
  %4155 = add i64 %4154, 552
  %4156 = load i64, i64* %PC
  %4157 = add i64 %4156, 8
  store i64 %4157, i64* %PC
  %4158 = inttoptr i64 %4155 to i64*
  %4159 = load i64, i64* %4158
  %4160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4160, align 1, !tbaa !2432
  %4161 = trunc i64 %4159 to i32
  %4162 = and i32 %4161, 255
  %4163 = call i32 @llvm.ctpop.i32(i32 %4162) #16
  %4164 = trunc i32 %4163 to i8
  %4165 = and i8 %4164, 1
  %4166 = xor i8 %4165, 1
  %4167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4166, i8* %4167, align 1, !tbaa !2446
  %4168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4168, align 1, !tbaa !2447
  %4169 = icmp eq i64 %4159, 0
  %4170 = zext i1 %4169 to i8
  %4171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4170, i8* %4171, align 1, !tbaa !2448
  %4172 = lshr i64 %4159, 63
  %4173 = trunc i64 %4172 to i8
  %4174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4173, i8* %4174, align 1, !tbaa !2449
  %4175 = lshr i64 %4159, 63
  %4176 = xor i64 %4172, %4175
  %4177 = add nuw nsw i64 %4176, %4175
  %4178 = icmp eq i64 %4177, 2
  %4179 = zext i1 %4178 to i8
  %4180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4179, i8* %4180, align 1, !tbaa !2450
  %4181 = load i64, i64* %PC
  %4182 = add i64 %4181, 42
  %4183 = load i64, i64* %PC
  %4184 = add i64 %4183, 6
  %4185 = load i64, i64* %PC
  %4186 = add i64 %4185, 6
  store i64 %4186, i64* %PC
  %4187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4188 = load i8, i8* %4187, align 1, !tbaa !2448
  store i8 %4188, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4190 = icmp ne i8 %4188, 0
  %4191 = select i1 %4190, i64 %4182, i64 %4184
  store i64 %4191, i64* %4189, align 8, !tbaa !2428
  %4192 = load i8, i8* %BRANCH_TAKEN
  %4193 = icmp eq i8 %4192, 1
  br i1 %4193, label %block_4037ea, label %block_4037c6

block_403ef0:                                     ; preds = %block_403f08, %block_403ebd
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.3, %block_403ebd ], [ %MEMORY.7, %block_403f08 ]
  %4194 = load i64, i64* %RBP
  %4195 = sub i64 %4194, 280
  %4196 = load i64, i64* %PC
  %4197 = add i64 %4196, 7
  store i64 %4197, i64* %PC
  %4198 = inttoptr i64 %4195 to i64*
  %4199 = load i64, i64* %4198
  store i64 %4199, i64* %RAX, align 8, !tbaa !2428
  %4200 = load i64, i64* %RBP
  %4201 = sub i64 %4200, 16
  %4202 = load i64, i64* %PC
  %4203 = add i64 %4202, 4
  store i64 %4203, i64* %PC
  %4204 = inttoptr i64 %4201 to i64*
  %4205 = load i64, i64* %4204
  store i64 %4205, i64* %RCX, align 8, !tbaa !2428
  %4206 = load i64, i64* %RAX
  %4207 = load i64, i64* %RCX
  %4208 = add i64 %4207, 576
  %4209 = load i64, i64* %PC
  %4210 = add i64 %4209, 7
  store i64 %4210, i64* %PC
  %4211 = inttoptr i64 %4208 to i64*
  %4212 = load i64, i64* %4211
  %4213 = sub i64 %4206, %4212
  %4214 = icmp ugt i64 %4212, %4206
  %4215 = zext i1 %4214 to i8
  %4216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4215, i8* %4216, align 1, !tbaa !2432
  %4217 = trunc i64 %4213 to i32
  %4218 = and i32 %4217, 255
  %4219 = call i32 @llvm.ctpop.i32(i32 %4218) #16
  %4220 = trunc i32 %4219 to i8
  %4221 = and i8 %4220, 1
  %4222 = xor i8 %4221, 1
  %4223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4222, i8* %4223, align 1, !tbaa !2446
  %4224 = xor i64 %4212, %4206
  %4225 = xor i64 %4224, %4213
  %4226 = lshr i64 %4225, 4
  %4227 = trunc i64 %4226 to i8
  %4228 = and i8 %4227, 1
  %4229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4228, i8* %4229, align 1, !tbaa !2447
  %4230 = icmp eq i64 %4213, 0
  %4231 = zext i1 %4230 to i8
  %4232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4231, i8* %4232, align 1, !tbaa !2448
  %4233 = lshr i64 %4213, 63
  %4234 = trunc i64 %4233 to i8
  %4235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4234, i8* %4235, align 1, !tbaa !2449
  %4236 = lshr i64 %4206, 63
  %4237 = lshr i64 %4212, 63
  %4238 = xor i64 %4237, %4236
  %4239 = xor i64 %4233, %4236
  %4240 = add nuw nsw i64 %4239, %4238
  %4241 = icmp eq i64 %4240, 2
  %4242 = zext i1 %4241 to i8
  %4243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4242, i8* %4243, align 1, !tbaa !2450
  %4244 = load i64, i64* %PC
  %4245 = add i64 %4244, 51
  %4246 = load i64, i64* %PC
  %4247 = add i64 %4246, 6
  %4248 = load i64, i64* %PC
  %4249 = add i64 %4248, 6
  store i64 %4249, i64* %PC
  %4250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4251 = load i8, i8* %4250, align 1, !tbaa !2432
  %4252 = icmp eq i8 %4251, 0
  %4253 = zext i1 %4252 to i8
  store i8 %4253, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4255 = select i1 %4252, i64 %4245, i64 %4247
  store i64 %4255, i64* %4254, align 8, !tbaa !2428
  %4256 = load i8, i8* %BRANCH_TAKEN
  %4257 = icmp eq i8 %4256, 1
  %4258 = load i64, i64* %RBP
  %4259 = sub i64 %4258, 16
  %4260 = load i64, i64* %PC
  %4261 = add i64 %4260, 4
  store i64 %4261, i64* %PC
  %4262 = inttoptr i64 %4259 to i64*
  %4263 = load i64, i64* %4262
  store i64 %4263, i64* %RAX, align 8, !tbaa !2428
  %4264 = load i64, i64* %RAX
  %4265 = add i64 %4264, 424
  %4266 = load i64, i64* %PC
  %4267 = add i64 %4266, 7
  store i64 %4267, i64* %PC
  br i1 %4257, label %block_403f35, label %block_403f08

block_403d2f:                                     ; preds = %block_403d03
  %4268 = sub i64 %5646, 272
  %4269 = load i64, i64* %PC
  %4270 = add i64 %4269, 11
  store i64 %4270, i64* %PC
  %4271 = inttoptr i64 %4268 to i64*
  store i64 0, i64* %4271
  br label %block_403d3a

block_40401f:                                     ; preds = %block_403fc7
  %4272 = load i64, i64* %PC
  %4273 = add i64 %4272, 5
  store i64 %4273, i64* %PC
  store i64 10000000, i64* %RAX, align 8, !tbaa !2428
  %4274 = load i32, i32* %EAX
  %4275 = zext i32 %4274 to i64
  %4276 = load i64, i64* %PC
  %4277 = add i64 %4276, 2
  store i64 %4277, i64* %PC
  %4278 = and i64 %4275, 4294967295
  store i64 %4278, i64* %RCX, align 8, !tbaa !2428
  %4279 = load i64, i64* %RBP
  %4280 = sub i64 %4279, 360
  %4281 = load i64, i64* %RCX
  %4282 = load i64, i64* %PC
  %4283 = add i64 %4282, 7
  store i64 %4283, i64* %PC
  %4284 = inttoptr i64 %4280 to i64*
  store i64 %4281, i64* %4284
  %4285 = load i64, i64* %PC
  %4286 = add i64 %4285, 5
  %4287 = load i64, i64* %PC
  %4288 = add i64 %4287, 5
  store i64 %4288, i64* %PC
  %4289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4286, i64* %4289, align 8, !tbaa !2428
  br label %block_404032

block_403ebd:                                     ; preds = %block_403ea5
  %4290 = load i64, i64* %RBP
  %4291 = sub i64 %4290, 280
  %4292 = load i64, i64* %PC
  %4293 = add i64 %4292, 7
  store i64 %4293, i64* %PC
  %4294 = inttoptr i64 %4291 to i64*
  %4295 = load i64, i64* %4294
  store i64 %4295, i64* %RAX, align 8, !tbaa !2428
  %4296 = load i64, i64* %RBP
  %4297 = sub i64 %4296, 16
  %4298 = load i64, i64* %PC
  %4299 = add i64 %4298, 4
  store i64 %4299, i64* %PC
  %4300 = inttoptr i64 %4297 to i64*
  %4301 = load i64, i64* %4300
  store i64 %4301, i64* %RCX, align 8, !tbaa !2428
  %4302 = load i64, i64* %RCX
  %4303 = add i64 %4302, 576
  %4304 = load i64, i64* %RAX
  %4305 = load i64, i64* %PC
  %4306 = add i64 %4305, 7
  store i64 %4306, i64* %PC
  %4307 = inttoptr i64 %4303 to i64*
  store i64 %4304, i64* %4307
  %4308 = load i64, i64* %RBP
  %4309 = sub i64 %4308, 16
  %4310 = load i64, i64* %PC
  %4311 = add i64 %4310, 4
  store i64 %4311, i64* %PC
  %4312 = inttoptr i64 %4309 to i64*
  %4313 = load i64, i64* %4312
  store i64 %4313, i64* %RAX, align 8, !tbaa !2428
  %4314 = load i64, i64* %RAX
  %4315 = add i64 %4314, 568
  %4316 = load i64, i64* %PC
  %4317 = add i64 %4316, 7
  store i64 %4317, i64* %PC
  %4318 = inttoptr i64 %4315 to i64*
  %4319 = load i64, i64* %4318
  store i64 %4319, i64* %RAX, align 8, !tbaa !2428
  %4320 = load i64, i64* %RBP
  %4321 = sub i64 %4320, 280
  %4322 = load i64, i64* %RAX
  %4323 = load i64, i64* %PC
  %4324 = add i64 %4323, 7
  store i64 %4324, i64* %PC
  %4325 = inttoptr i64 %4321 to i64*
  store i64 %4322, i64* %4325
  %4326 = load i64, i64* %RBP
  %4327 = sub i64 %4326, 16
  %4328 = load i64, i64* %PC
  %4329 = add i64 %4328, 4
  store i64 %4329, i64* %PC
  %4330 = inttoptr i64 %4327 to i64*
  %4331 = load i64, i64* %4330
  store i64 %4331, i64* %RAX, align 8, !tbaa !2428
  %4332 = load i64, i64* %RAX
  %4333 = add i64 %4332, 424
  %4334 = load i64, i64* %PC
  %4335 = add i64 %4334, 11
  store i64 %4335, i64* %PC
  %4336 = inttoptr i64 %4333 to i64*
  store i64 0, i64* %4336
  br label %block_403ef0

block_403c5a:                                     ; preds = %block_403c47, %block_403c30
  %MEMORY.8 = phi %struct.Memory* [ %3810, %block_403c47 ], [ %3810, %block_403c30 ]
  %4337 = load i64, i64* %RBP
  %4338 = sub i64 %4337, 328
  %4339 = load i64, i64* %PC
  %4340 = add i64 %4339, 7
  store i64 %4340, i64* %PC
  %4341 = inttoptr i64 %4338 to i64*
  %4342 = load i64, i64* %4341
  store i64 %4342, i64* %RAX, align 8, !tbaa !2428
  %4343 = load i64, i64* %RAX
  %4344 = load i64, i64* %PC
  %4345 = add i64 %4344, 4
  store i64 %4345, i64* %PC
  %4346 = shl i64 %4343, 1
  %4347 = icmp slt i64 %4343, 0
  %4348 = icmp slt i64 %4346, 0
  %4349 = xor i1 %4347, %4348
  store i64 %4346, i64* %RAX, align 8, !tbaa !2428
  %4350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4351 = zext i1 %4347 to i8
  store i8 %4351, i8* %4350, align 1, !tbaa !2451
  %4352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4353 = trunc i64 %4346 to i32
  %4354 = and i32 %4353, 254
  %4355 = call i32 @llvm.ctpop.i32(i32 %4354) #16
  %4356 = trunc i32 %4355 to i8
  %4357 = and i8 %4356, 1
  %4358 = xor i8 %4357, 1
  store i8 %4358, i8* %4352, align 1, !tbaa !2451
  %4359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4359, align 1, !tbaa !2451
  %4360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4361 = icmp eq i64 %4346, 0
  %4362 = zext i1 %4361 to i8
  store i8 %4362, i8* %4360, align 1, !tbaa !2451
  %4363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4364 = lshr i64 %4346, 63
  %4365 = trunc i64 %4364 to i8
  store i8 %4365, i8* %4363, align 1, !tbaa !2451
  %4366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4367 = zext i1 %4349 to i8
  store i8 %4367, i8* %4366, align 1, !tbaa !2451
  %4368 = load i64, i64* %RBP
  %4369 = sub i64 %4368, 280
  %4370 = load i64, i64* %PC
  %4371 = add i64 %4370, 7
  store i64 %4371, i64* %PC
  %4372 = inttoptr i64 %4369 to i64*
  %4373 = load i64, i64* %4372
  store i64 %4373, i64* %RCX, align 8, !tbaa !2428
  %4374 = load i64, i64* %RCX
  %4375 = load i64, i64* %RAX
  %4376 = load i64, i64* %PC
  %4377 = add i64 %4376, 3
  store i64 %4377, i64* %PC
  %4378 = inttoptr i64 %4374 to i64*
  store i64 %4375, i64* %4378
  %4379 = load i64, i64* %RBP
  %4380 = sub i64 %4379, 280
  %4381 = load i64, i64* %PC
  %4382 = add i64 %4381, 7
  store i64 %4382, i64* %PC
  %4383 = inttoptr i64 %4380 to i64*
  %4384 = load i64, i64* %4383
  store i64 %4384, i64* %RCX, align 8, !tbaa !2428
  %4385 = load i64, i64* %RCX
  %4386 = add i64 %4385, 56
  %4387 = load i64, i64* %RAX
  %4388 = load i64, i64* %PC
  %4389 = add i64 %4388, 4
  store i64 %4389, i64* %PC
  %4390 = inttoptr i64 %4386 to i64*
  store i64 %4387, i64* %4390
  %4391 = load i64, i64* %RBP
  %4392 = sub i64 %4391, 280
  %4393 = load i64, i64* %PC
  %4394 = add i64 %4393, 7
  store i64 %4394, i64* %PC
  %4395 = inttoptr i64 %4392 to i64*
  %4396 = load i64, i64* %4395
  store i64 %4396, i64* %RAX, align 8, !tbaa !2428
  %4397 = load i64, i64* %RAX
  %4398 = add i64 %4397, 8
  %4399 = load i64, i64* %PC
  %4400 = add i64 %4399, 4
  store i64 %4400, i64* %PC
  %4401 = inttoptr i64 %4398 to i64*
  %4402 = load i64, i64* %4401
  store i64 %4402, i64* %RAX, align 8, !tbaa !2428
  %4403 = load i64, i64* %RAX
  %4404 = add i64 %4403, 56
  %4405 = load i64, i64* %PC
  %4406 = add i64 %4405, 4
  store i64 %4406, i64* %PC
  %4407 = inttoptr i64 %4404 to i64*
  %4408 = load i64, i64* %4407
  store i64 %4408, i64* %RAX, align 8, !tbaa !2428
  %4409 = load i64, i64* %RBP
  %4410 = sub i64 %4409, 280
  %4411 = load i64, i64* %PC
  %4412 = add i64 %4411, 7
  store i64 %4412, i64* %PC
  %4413 = inttoptr i64 %4410 to i64*
  %4414 = load i64, i64* %4413
  store i64 %4414, i64* %RCX, align 8, !tbaa !2428
  %4415 = load i64, i64* %RCX
  %4416 = add i64 %4415, 32
  %4417 = load i64, i64* %RAX
  %4418 = load i64, i64* %PC
  %4419 = add i64 %4418, 4
  store i64 %4419, i64* %PC
  %4420 = inttoptr i64 %4416 to i64*
  store i64 %4417, i64* %4420
  %4421 = load i64, i64* %RBP
  %4422 = sub i64 %4421, 280
  %4423 = load i64, i64* %PC
  %4424 = add i64 %4423, 7
  store i64 %4424, i64* %PC
  %4425 = inttoptr i64 %4422 to i64*
  %4426 = load i64, i64* %4425
  store i64 %4426, i64* %RAX, align 8, !tbaa !2428
  %4427 = load i64, i64* %RBP
  %4428 = sub i64 %4427, 280
  %4429 = load i64, i64* %PC
  %4430 = add i64 %4429, 7
  store i64 %4430, i64* %PC
  %4431 = inttoptr i64 %4428 to i64*
  %4432 = load i64, i64* %4431
  store i64 %4432, i64* %RCX, align 8, !tbaa !2428
  %4433 = load i64, i64* %RCX
  %4434 = add i64 %4433, 8
  %4435 = load i64, i64* %PC
  %4436 = add i64 %4435, 4
  store i64 %4436, i64* %PC
  %4437 = inttoptr i64 %4434 to i64*
  %4438 = load i64, i64* %4437
  store i64 %4438, i64* %RCX, align 8, !tbaa !2428
  %4439 = load i64, i64* %RCX
  %4440 = add i64 %4439, 56
  %4441 = load i64, i64* %RAX
  %4442 = load i64, i64* %PC
  %4443 = add i64 %4442, 4
  store i64 %4443, i64* %PC
  %4444 = inttoptr i64 %4440 to i64*
  store i64 %4441, i64* %4444
  %4445 = load i64, i64* %RBP
  %4446 = sub i64 %4445, 280
  %4447 = load i64, i64* %PC
  %4448 = add i64 %4447, 7
  store i64 %4448, i64* %PC
  %4449 = inttoptr i64 %4446 to i64*
  %4450 = load i64, i64* %4449
  store i64 %4450, i64* %RAX, align 8, !tbaa !2428
  %4451 = load i64, i64* %RAX
  %4452 = add i64 %4451, 16
  %4453 = load i64, i64* %PC
  %4454 = add i64 %4453, 4
  store i64 %4454, i64* %PC
  %4455 = inttoptr i64 %4452 to i64*
  %4456 = load i64, i64* %4455
  store i64 %4456, i64* %RAX, align 8, !tbaa !2428
  %4457 = load i64, i64* %RAX
  %4458 = add i64 %4457, 64
  %4459 = load i64, i64* %PC
  %4460 = add i64 %4459, 4
  store i64 %4460, i64* %PC
  %4461 = inttoptr i64 %4458 to i64*
  %4462 = load i64, i64* %4461
  store i64 %4462, i64* %RAX, align 8, !tbaa !2428
  %4463 = load i64, i64* %RBP
  %4464 = sub i64 %4463, 280
  %4465 = load i64, i64* %PC
  %4466 = add i64 %4465, 7
  store i64 %4466, i64* %PC
  %4467 = inttoptr i64 %4464 to i64*
  %4468 = load i64, i64* %4467
  store i64 %4468, i64* %RCX, align 8, !tbaa !2428
  %4469 = load i64, i64* %RCX
  %4470 = add i64 %4469, 40
  %4471 = load i64, i64* %RAX
  %4472 = load i64, i64* %PC
  %4473 = add i64 %4472, 4
  store i64 %4473, i64* %PC
  %4474 = inttoptr i64 %4470 to i64*
  store i64 %4471, i64* %4474
  %4475 = load i64, i64* %RBP
  %4476 = sub i64 %4475, 280
  %4477 = load i64, i64* %PC
  %4478 = add i64 %4477, 7
  store i64 %4478, i64* %PC
  %4479 = inttoptr i64 %4476 to i64*
  %4480 = load i64, i64* %4479
  store i64 %4480, i64* %RAX, align 8, !tbaa !2428
  %4481 = load i64, i64* %RBP
  %4482 = sub i64 %4481, 280
  %4483 = load i64, i64* %PC
  %4484 = add i64 %4483, 7
  store i64 %4484, i64* %PC
  %4485 = inttoptr i64 %4482 to i64*
  %4486 = load i64, i64* %4485
  store i64 %4486, i64* %RCX, align 8, !tbaa !2428
  %4487 = load i64, i64* %RCX
  %4488 = add i64 %4487, 16
  %4489 = load i64, i64* %PC
  %4490 = add i64 %4489, 4
  store i64 %4490, i64* %PC
  %4491 = inttoptr i64 %4488 to i64*
  %4492 = load i64, i64* %4491
  store i64 %4492, i64* %RCX, align 8, !tbaa !2428
  %4493 = load i64, i64* %RCX
  %4494 = add i64 %4493, 64
  %4495 = load i64, i64* %RAX
  %4496 = load i64, i64* %PC
  %4497 = add i64 %4496, 4
  store i64 %4497, i64* %PC
  %4498 = inttoptr i64 %4494 to i64*
  store i64 %4495, i64* %4498
  %4499 = load i64, i64* %RBP
  %4500 = sub i64 %4499, 280
  %4501 = load i64, i64* %PC
  %4502 = add i64 %4501, 7
  store i64 %4502, i64* %PC
  %4503 = inttoptr i64 %4500 to i64*
  %4504 = load i64, i64* %4503
  store i64 %4504, i64* %RAX, align 8, !tbaa !2428
  %4505 = load i64, i64* %RAX
  %4506 = load i64, i64* %PC
  %4507 = add i64 %4506, 4
  store i64 %4507, i64* %PC
  %4508 = add i64 64, %4505
  store i64 %4508, i64* %RAX, align 8, !tbaa !2428
  %4509 = icmp ult i64 %4508, %4505
  %4510 = icmp ult i64 %4508, 64
  %4511 = or i1 %4509, %4510
  %4512 = zext i1 %4511 to i8
  %4513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4512, i8* %4513, align 1, !tbaa !2432
  %4514 = trunc i64 %4508 to i32
  %4515 = and i32 %4514, 255
  %4516 = call i32 @llvm.ctpop.i32(i32 %4515) #16
  %4517 = trunc i32 %4516 to i8
  %4518 = and i8 %4517, 1
  %4519 = xor i8 %4518, 1
  %4520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4519, i8* %4520, align 1, !tbaa !2446
  %4521 = xor i64 64, %4505
  %4522 = xor i64 %4521, %4508
  %4523 = lshr i64 %4522, 4
  %4524 = trunc i64 %4523 to i8
  %4525 = and i8 %4524, 1
  %4526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4525, i8* %4526, align 1, !tbaa !2447
  %4527 = icmp eq i64 %4508, 0
  %4528 = zext i1 %4527 to i8
  %4529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4528, i8* %4529, align 1, !tbaa !2448
  %4530 = lshr i64 %4508, 63
  %4531 = trunc i64 %4530 to i8
  %4532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4531, i8* %4532, align 1, !tbaa !2449
  %4533 = lshr i64 %4505, 63
  %4534 = xor i64 %4530, %4533
  %4535 = add nuw nsw i64 %4534, %4530
  %4536 = icmp eq i64 %4535, 2
  %4537 = zext i1 %4536 to i8
  %4538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4537, i8* %4538, align 1, !tbaa !2450
  %4539 = load i64, i64* %RBP
  %4540 = sub i64 %4539, 280
  %4541 = load i64, i64* %RAX
  %4542 = load i64, i64* %PC
  %4543 = add i64 %4542, 7
  store i64 %4543, i64* %PC
  %4544 = inttoptr i64 %4540 to i64*
  store i64 %4541, i64* %4544
  %4545 = load i64, i64* %RBP
  %4546 = sub i64 %4545, 272
  %4547 = load i64, i64* %PC
  %4548 = add i64 %4547, 7
  store i64 %4548, i64* %PC
  %4549 = inttoptr i64 %4546 to i64*
  %4550 = load i64, i64* %4549
  store i64 %4550, i64* %RAX, align 8, !tbaa !2428
  %4551 = load i64, i64* %RAX
  %4552 = load i64, i64* %PC
  %4553 = add i64 %4552, 4
  store i64 %4553, i64* %PC
  %4554 = add i64 1, %4551
  store i64 %4554, i64* %RAX, align 8, !tbaa !2428
  %4555 = icmp ult i64 %4554, %4551
  %4556 = icmp ult i64 %4554, 1
  %4557 = or i1 %4555, %4556
  %4558 = zext i1 %4557 to i8
  %4559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4558, i8* %4559, align 1, !tbaa !2432
  %4560 = trunc i64 %4554 to i32
  %4561 = and i32 %4560, 255
  %4562 = call i32 @llvm.ctpop.i32(i32 %4561) #16
  %4563 = trunc i32 %4562 to i8
  %4564 = and i8 %4563, 1
  %4565 = xor i8 %4564, 1
  %4566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4565, i8* %4566, align 1, !tbaa !2446
  %4567 = xor i64 1, %4551
  %4568 = xor i64 %4567, %4554
  %4569 = lshr i64 %4568, 4
  %4570 = trunc i64 %4569 to i8
  %4571 = and i8 %4570, 1
  %4572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4571, i8* %4572, align 1, !tbaa !2447
  %4573 = icmp eq i64 %4554, 0
  %4574 = zext i1 %4573 to i8
  %4575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4574, i8* %4575, align 1, !tbaa !2448
  %4576 = lshr i64 %4554, 63
  %4577 = trunc i64 %4576 to i8
  %4578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4577, i8* %4578, align 1, !tbaa !2449
  %4579 = lshr i64 %4551, 63
  %4580 = xor i64 %4576, %4579
  %4581 = add nuw nsw i64 %4580, %4576
  %4582 = icmp eq i64 %4581, 2
  %4583 = zext i1 %4582 to i8
  %4584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4583, i8* %4584, align 1, !tbaa !2450
  %4585 = load i64, i64* %RBP
  %4586 = sub i64 %4585, 272
  %4587 = load i64, i64* %RAX
  %4588 = load i64, i64* %PC
  %4589 = add i64 %4588, 7
  store i64 %4589, i64* %PC
  %4590 = inttoptr i64 %4586 to i64*
  store i64 %4587, i64* %4590
  %4591 = load i64, i64* %PC
  %4592 = sub i64 %4591, 1080
  %4593 = load i64, i64* %PC
  %4594 = add i64 %4593, 5
  store i64 %4594, i64* %PC
  %4595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4592, i64* %4595, align 8, !tbaa !2428
  br label %block_4038c6

block_4037ea:                                     ; preds = %block_403722, %block_4037c6, %block_4037d8
  %MEMORY.9 = phi %struct.Memory* [ %4135, %block_403722 ], [ %4135, %block_4037c6 ], [ %4135, %block_4037d8 ]
  %4596 = load i64, i64* %PC
  %4597 = add i64 %4596, 10
  store i64 %4597, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 674), i64* %RDI, align 8, !tbaa !2428
  %4598 = load i64, i64* %PC
  %4599 = add i64 %4598, 2
  store i64 %4599, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4600 = load i64, i64* %PC
  %4601 = sub i64 %4600, 12198
  %4602 = load i64, i64* %PC
  %4603 = add i64 %4602, 5
  %4604 = load i64, i64* %PC
  %4605 = add i64 %4604, 5
  store i64 %4605, i64* %PC
  %4606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4607 = load i64, i64* %4606, align 8, !tbaa !2428
  %4608 = add i64 %4607, -8
  %4609 = inttoptr i64 %4608 to i64*
  store i64 %4603, i64* %4609
  store i64 %4608, i64* %4606, align 8, !tbaa !2428
  %4610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4601, i64* %4610, align 8, !tbaa !2428
  %4611 = load i64, i64* %PC
  %4612 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %4611, %struct.Memory* %MEMORY.9)
  %4613 = load i64, i64* %RBP
  %4614 = sub i64 %4613, 16
  %4615 = load i64, i64* %PC
  %4616 = add i64 %4615, 4
  store i64 %4616, i64* %PC
  %4617 = inttoptr i64 %4614 to i64*
  %4618 = load i64, i64* %4617
  store i64 %4618, i64* %RDI, align 8, !tbaa !2428
  %4619 = load i64, i64* %RBP
  %4620 = sub i64 %4619, 300
  %4621 = load i32, i32* %EAX
  %4622 = zext i32 %4621 to i64
  %4623 = load i64, i64* %PC
  %4624 = add i64 %4623, 6
  store i64 %4624, i64* %PC
  %4625 = inttoptr i64 %4620 to i32*
  store i32 %4621, i32* %4625
  %4626 = load i64, i64* %PC
  %4627 = sub i64 %4626, 4965
  %4628 = load i64, i64* %PC
  %4629 = add i64 %4628, 5
  %4630 = load i64, i64* %PC
  %4631 = add i64 %4630, 5
  store i64 %4631, i64* %PC
  %4632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4633 = load i64, i64* %4632, align 8, !tbaa !2428
  %4634 = add i64 %4633, -8
  %4635 = inttoptr i64 %4634 to i64*
  store i64 %4629, i64* %4635
  store i64 %4634, i64* %4632, align 8, !tbaa !2428
  %4636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4627, i64* %4636, align 8, !tbaa !2428
  %4637 = load i64, i64* %PC
  %4638 = call %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* %0, i64 %4637, %struct.Memory* %4612)
  %4639 = load i64, i64* %RBP
  %4640 = sub i64 %4639, 8
  %4641 = load i64, i64* %PC
  %4642 = add i64 %4641, 8
  store i64 %4642, i64* %PC
  %4643 = inttoptr i64 %4640 to i64*
  store i64 -1, i64* %4643
  %4644 = load i64, i64* %RBP
  %4645 = sub i64 %4644, 312
  %4646 = load i64, i64* %RAX
  %4647 = load i64, i64* %PC
  %4648 = add i64 %4647, 7
  store i64 %4648, i64* %PC
  %4649 = inttoptr i64 %4645 to i64*
  store i64 %4646, i64* %4649
  %4650 = load i64, i64* %PC
  %4651 = add i64 %4650, 2149
  %4652 = load i64, i64* %PC
  %4653 = add i64 %4652, 5
  store i64 %4653, i64* %PC
  %4654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4651, i64* %4654, align 8, !tbaa !2428
  br label %block_40407e

block_4038c6:                                     ; preds = %block_40381e, %block_403c5a
  %MEMORY.10 = phi %struct.Memory* [ %4135, %block_40381e ], [ %MEMORY.8, %block_403c5a ]
  %4655 = load i64, i64* %RBP
  %4656 = sub i64 %4655, 272
  %4657 = load i64, i64* %PC
  %4658 = add i64 %4657, 7
  store i64 %4658, i64* %PC
  %4659 = inttoptr i64 %4656 to i64*
  %4660 = load i64, i64* %4659
  store i64 %4660, i64* %RAX, align 8, !tbaa !2428
  %4661 = load i64, i64* %RBP
  %4662 = sub i64 %4661, 16
  %4663 = load i64, i64* %PC
  %4664 = add i64 %4663, 4
  store i64 %4664, i64* %PC
  %4665 = inttoptr i64 %4662 to i64*
  %4666 = load i64, i64* %4665
  store i64 %4666, i64* %RCX, align 8, !tbaa !2428
  %4667 = load i64, i64* %RAX
  %4668 = load i64, i64* %RCX
  %4669 = add i64 %4668, 408
  %4670 = load i64, i64* %PC
  %4671 = add i64 %4670, 7
  store i64 %4671, i64* %PC
  %4672 = inttoptr i64 %4669 to i64*
  %4673 = load i64, i64* %4672
  %4674 = sub i64 %4667, %4673
  %4675 = icmp ugt i64 %4673, %4667
  %4676 = zext i1 %4675 to i8
  %4677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4676, i8* %4677, align 1, !tbaa !2432
  %4678 = trunc i64 %4674 to i32
  %4679 = and i32 %4678, 255
  %4680 = call i32 @llvm.ctpop.i32(i32 %4679) #16
  %4681 = trunc i32 %4680 to i8
  %4682 = and i8 %4681, 1
  %4683 = xor i8 %4682, 1
  %4684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4683, i8* %4684, align 1, !tbaa !2446
  %4685 = xor i64 %4673, %4667
  %4686 = xor i64 %4685, %4674
  %4687 = lshr i64 %4686, 4
  %4688 = trunc i64 %4687 to i8
  %4689 = and i8 %4688, 1
  %4690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4689, i8* %4690, align 1, !tbaa !2447
  %4691 = icmp eq i64 %4674, 0
  %4692 = zext i1 %4691 to i8
  %4693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4692, i8* %4693, align 1, !tbaa !2448
  %4694 = lshr i64 %4674, 63
  %4695 = trunc i64 %4694 to i8
  %4696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4695, i8* %4696, align 1, !tbaa !2449
  %4697 = lshr i64 %4667, 63
  %4698 = lshr i64 %4673, 63
  %4699 = xor i64 %4698, %4697
  %4700 = xor i64 %4694, %4697
  %4701 = add nuw nsw i64 %4700, %4699
  %4702 = icmp eq i64 %4701, 2
  %4703 = zext i1 %4702 to i8
  %4704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4703, i8* %4704, align 1, !tbaa !2450
  %4705 = load i64, i64* %PC
  %4706 = add i64 %4705, 1067
  %4707 = load i64, i64* %PC
  %4708 = add i64 %4707, 6
  %4709 = load i64, i64* %PC
  %4710 = add i64 %4709, 6
  store i64 %4710, i64* %PC
  %4711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4712 = load i8, i8* %4711, align 1, !tbaa !2448
  %4713 = icmp eq i8 %4712, 0
  %4714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4715 = load i8, i8* %4714, align 1, !tbaa !2449
  %4716 = icmp ne i8 %4715, 0
  %4717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4718 = load i8, i8* %4717, align 1, !tbaa !2450
  %4719 = icmp ne i8 %4718, 0
  %4720 = xor i1 %4716, %4719
  %4721 = xor i1 %4720, true
  %4722 = and i1 %4713, %4721
  %4723 = zext i1 %4722 to i8
  store i8 %4723, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4725 = select i1 %4722, i64 %4706, i64 %4708
  store i64 %4725, i64* %4724, align 8, !tbaa !2428
  %4726 = load i8, i8* %BRANCH_TAKEN
  %4727 = icmp eq i8 %4726, 1
  br i1 %4727, label %block_403d03, label %block_4038de

block_403605:                                     ; preds = %block_4035c0
  %4728 = load i64, i64* %PC
  %4729 = add i64 %4728, 5
  store i64 %4729, i64* %PC
  store i64 200, i64* %RSI, align 8, !tbaa !2428
  %4730 = load i64, i64* %RBP
  %4731 = sub i64 %4730, 240
  %4732 = load i64, i64* %PC
  %4733 = add i64 %4732, 7
  store i64 %4733, i64* %PC
  store i64 %4731, i64* %RDI, align 8, !tbaa !2428
  %4734 = load i64, i64* %RBP
  %4735 = sub i64 %4734, 24
  %4736 = load i64, i64* %PC
  %4737 = add i64 %4736, 4
  store i64 %4737, i64* %PC
  %4738 = inttoptr i64 %4735 to i64*
  %4739 = load i64, i64* %4738
  store i64 %4739, i64* %RDX, align 8, !tbaa !2428
  %4740 = load i64, i64* %PC
  %4741 = sub i64 %4740, 11685
  %4742 = load i64, i64* %PC
  %4743 = add i64 %4742, 5
  %4744 = load i64, i64* %PC
  %4745 = add i64 %4744, 5
  store i64 %4745, i64* %PC
  %4746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4747 = load i64, i64* %4746, align 8, !tbaa !2428
  %4748 = add i64 %4747, -8
  %4749 = inttoptr i64 %4748 to i64*
  store i64 %4743, i64* %4749
  store i64 %4748, i64* %4746, align 8, !tbaa !2428
  %4750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4741, i64* %4750, align 8, !tbaa !2428
  %4751 = load i64, i64* %PC
  %4752 = call %struct.Memory* @ext_608fe8_fgets(%struct.State* %0, i64 %4751, %struct.Memory* %116)
  %4753 = load i64, i64* %PC
  %4754 = add i64 %4753, 10
  store i64 %4754, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 709), i64* %RSI, align 8, !tbaa !2428
  %4755 = load i64, i64* %RBP
  %4756 = sub i64 %4755, 248
  %4757 = load i64, i64* %PC
  %4758 = add i64 %4757, 7
  store i64 %4758, i64* %PC
  store i64 %4756, i64* %RDX, align 8, !tbaa !2428
  %4759 = load i64, i64* %RBP
  %4760 = sub i64 %4759, 256
  %4761 = load i64, i64* %PC
  %4762 = add i64 %4761, 7
  store i64 %4762, i64* %PC
  store i64 %4760, i64* %RCX, align 8, !tbaa !2428
  %4763 = load i64, i64* %RBP
  %4764 = sub i64 %4763, 240
  %4765 = load i64, i64* %PC
  %4766 = add i64 %4765, 7
  store i64 %4766, i64* %PC
  store i64 %4764, i64* %RDI, align 8, !tbaa !2428
  %4767 = load i64, i64* %RBP
  %4768 = sub i64 %4767, 296
  %4769 = load i64, i64* %RAX
  %4770 = load i64, i64* %PC
  %4771 = add i64 %4770, 7
  store i64 %4771, i64* %PC
  %4772 = inttoptr i64 %4768 to i64*
  store i64 %4769, i64* %4772
  %4773 = load i64, i64* %PC
  %4774 = add i64 %4773, 2
  store i64 %4774, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %4775 = load i64, i64* %PC
  %4776 = sub i64 %4775, 11650
  %4777 = load i64, i64* %PC
  %4778 = add i64 %4777, 5
  %4779 = load i64, i64* %PC
  %4780 = add i64 %4779, 5
  store i64 %4780, i64* %PC
  %4781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4782 = load i64, i64* %4781, align 8, !tbaa !2428
  %4783 = add i64 %4782, -8
  %4784 = inttoptr i64 %4783 to i64*
  store i64 %4778, i64* %4784
  store i64 %4783, i64* %4781, align 8, !tbaa !2428
  %4785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4776, i64* %4785, align 8, !tbaa !2428
  %4786 = load i64, i64* %PC
  %4787 = call %struct.Memory* @ext_609010___isoc99_sscanf(%struct.State* %0, i64 %4786, %struct.Memory* %4752)
  %4788 = load i32, i32* %EAX
  %4789 = zext i32 %4788 to i64
  %4790 = load i64, i64* %PC
  %4791 = add i64 %4790, 3
  store i64 %4791, i64* %PC
  %4792 = sub i32 %4788, 2
  %4793 = icmp ult i32 %4788, 2
  %4794 = zext i1 %4793 to i8
  %4795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4794, i8* %4795, align 1, !tbaa !2432
  %4796 = and i32 %4792, 255
  %4797 = call i32 @llvm.ctpop.i32(i32 %4796) #16
  %4798 = trunc i32 %4797 to i8
  %4799 = and i8 %4798, 1
  %4800 = xor i8 %4799, 1
  %4801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4800, i8* %4801, align 1, !tbaa !2446
  %4802 = xor i64 2, %4789
  %4803 = trunc i64 %4802 to i32
  %4804 = xor i32 %4803, %4792
  %4805 = lshr i32 %4804, 4
  %4806 = trunc i32 %4805 to i8
  %4807 = and i8 %4806, 1
  %4808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4807, i8* %4808, align 1, !tbaa !2447
  %4809 = icmp eq i32 %4792, 0
  %4810 = zext i1 %4809 to i8
  %4811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4810, i8* %4811, align 1, !tbaa !2448
  %4812 = lshr i32 %4792, 31
  %4813 = trunc i32 %4812 to i8
  %4814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4813, i8* %4814, align 1, !tbaa !2449
  %4815 = lshr i32 %4788, 31
  %4816 = xor i32 %4812, %4815
  %4817 = add nuw nsw i32 %4816, %4815
  %4818 = icmp eq i32 %4817, 2
  %4819 = zext i1 %4818 to i8
  %4820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4819, i8* %4820, align 1, !tbaa !2450
  %4821 = load i64, i64* %PC
  %4822 = add i64 %4821, 19
  %4823 = load i64, i64* %PC
  %4824 = add i64 %4823, 6
  %4825 = load i64, i64* %PC
  %4826 = add i64 %4825, 6
  store i64 %4826, i64* %PC
  %4827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4828 = load i8, i8* %4827, align 1, !tbaa !2448
  store i8 %4828, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4830 = icmp ne i8 %4828, 0
  %4831 = select i1 %4830, i64 %4822, i64 %4824
  store i64 %4831, i64* %4829, align 8, !tbaa !2428
  %4832 = load i8, i8* %BRANCH_TAKEN
  %4833 = icmp eq i8 %4832, 1
  %4834 = load i64, i64* %RBP
  br i1 %4833, label %block_40365d, label %block_403650

block_404032:                                     ; preds = %block_40401f, %block_404008
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.1, %block_40401f ], [ %MEMORY.1, %block_404008 ]
  %4835 = load i64, i64* %RBP
  %4836 = sub i64 %4835, 360
  %4837 = load i64, i64* %PC
  %4838 = add i64 %4837, 7
  store i64 %4838, i64* %PC
  %4839 = inttoptr i64 %4836 to i64*
  %4840 = load i64, i64* %4839
  store i64 %4840, i64* %RAX, align 8, !tbaa !2428
  %4841 = load i64, i64* %RAX
  %4842 = load i64, i64* %PC
  %4843 = add i64 %4842, 4
  store i64 %4843, i64* %PC
  %4844 = sext i64 %4841 to i128
  %4845 = and i128 %4844, -18446744073709551616
  %4846 = zext i64 %4841 to i128
  %4847 = or i128 %4845, %4846
  %4848 = mul nsw i128 -2, %4847
  %4849 = trunc i128 %4848 to i64
  store i64 %4849, i64* %RAX, align 8, !tbaa !2428
  %4850 = sext i64 %4849 to i128
  %4851 = icmp ne i128 %4850, %4848
  %4852 = zext i1 %4851 to i8
  %4853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4852, i8* %4853, align 1, !tbaa !2432
  %4854 = trunc i128 %4848 to i32
  %4855 = and i32 %4854, 255
  %4856 = call i32 @llvm.ctpop.i32(i32 %4855) #16
  %4857 = trunc i32 %4856 to i8
  %4858 = and i8 %4857, 1
  %4859 = xor i8 %4858, 1
  %4860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4859, i8* %4860, align 1, !tbaa !2446
  %4861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4861, align 1, !tbaa !2447
  %4862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4862, align 1, !tbaa !2448
  %4863 = lshr i64 %4849, 63
  %4864 = trunc i64 %4863 to i8
  %4865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4864, i8* %4865, align 1, !tbaa !2449
  %4866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4852, i8* %4866, align 1, !tbaa !2450
  %4867 = load i64, i64* %RBP
  %4868 = sub i64 %4867, 16
  %4869 = load i64, i64* %PC
  %4870 = add i64 %4869, 4
  store i64 %4870, i64* %PC
  %4871 = inttoptr i64 %4868 to i64*
  %4872 = load i64, i64* %4871
  store i64 %4872, i64* %RCX, align 8, !tbaa !2428
  %4873 = load i64, i64* %RCX
  %4874 = add i64 %4873, 568
  %4875 = load i64, i64* %PC
  %4876 = add i64 %4875, 7
  store i64 %4876, i64* %PC
  %4877 = inttoptr i64 %4874 to i64*
  %4878 = load i64, i64* %4877
  store i64 %4878, i64* %RCX, align 8, !tbaa !2428
  %4879 = load i64, i64* %RBP
  %4880 = sub i64 %4879, 272
  %4881 = load i64, i64* %PC
  %4882 = add i64 %4881, 8
  store i64 %4882, i64* %PC
  %4883 = inttoptr i64 %4880 to i64*
  %4884 = load i64, i64* %4883
  %4885 = sext i64 %4884 to i128
  %4886 = and i128 %4885, -18446744073709551616
  %4887 = zext i64 %4884 to i128
  %4888 = or i128 %4886, %4887
  %4889 = mul nsw i128 %4888, 3
  %4890 = trunc i128 %4889 to i64
  store i64 %4890, i64* %RDX, align 8, !tbaa !2428
  %4891 = sext i64 %4890 to i128
  %4892 = icmp ne i128 %4891, %4889
  %4893 = zext i1 %4892 to i8
  %4894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4893, i8* %4894, align 1, !tbaa !2432
  %4895 = trunc i128 %4889 to i32
  %4896 = and i32 %4895, 255
  %4897 = call i32 @llvm.ctpop.i32(i32 %4896) #16
  %4898 = trunc i32 %4897 to i8
  %4899 = and i8 %4898, 1
  %4900 = xor i8 %4899, 1
  %4901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4900, i8* %4901, align 1, !tbaa !2446
  %4902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4902, align 1, !tbaa !2447
  %4903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4903, align 1, !tbaa !2448
  %4904 = lshr i64 %4890, 63
  %4905 = trunc i64 %4904 to i8
  %4906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4905, i8* %4906, align 1, !tbaa !2449
  %4907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4893, i8* %4907, align 1, !tbaa !2450
  %4908 = load i64, i64* %RDX
  %4909 = load i64, i64* %PC
  %4910 = add i64 %4909, 4
  store i64 %4910, i64* %PC
  %4911 = sub i64 %4908, 1
  store i64 %4911, i64* %RDX, align 8, !tbaa !2428
  %4912 = icmp ult i64 %4908, 1
  %4913 = zext i1 %4912 to i8
  %4914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4913, i8* %4914, align 1, !tbaa !2432
  %4915 = trunc i64 %4911 to i32
  %4916 = and i32 %4915, 255
  %4917 = call i32 @llvm.ctpop.i32(i32 %4916) #16
  %4918 = trunc i32 %4917 to i8
  %4919 = and i8 %4918, 1
  %4920 = xor i8 %4919, 1
  %4921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4920, i8* %4921, align 1, !tbaa !2446
  %4922 = xor i64 1, %4908
  %4923 = xor i64 %4922, %4911
  %4924 = lshr i64 %4923, 4
  %4925 = trunc i64 %4924 to i8
  %4926 = and i8 %4925, 1
  %4927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4926, i8* %4927, align 1, !tbaa !2447
  %4928 = icmp eq i64 %4911, 0
  %4929 = zext i1 %4928 to i8
  %4930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4929, i8* %4930, align 1, !tbaa !2448
  %4931 = lshr i64 %4911, 63
  %4932 = trunc i64 %4931 to i8
  %4933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4932, i8* %4933, align 1, !tbaa !2449
  %4934 = lshr i64 %4908, 63
  %4935 = xor i64 %4931, %4934
  %4936 = add nuw nsw i64 %4935, %4934
  %4937 = icmp eq i64 %4936, 2
  %4938 = zext i1 %4937 to i8
  %4939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4938, i8* %4939, align 1, !tbaa !2450
  %4940 = load i64, i64* %RDX
  %4941 = load i64, i64* %PC
  %4942 = add i64 %4941, 4
  store i64 %4942, i64* %PC
  %4943 = shl i64 %4940, 5
  %4944 = icmp slt i64 %4943, 0
  %4945 = shl i64 %4943, 1
  store i64 %4945, i64* %RDX, align 8, !tbaa !2428
  %4946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4947 = zext i1 %4944 to i8
  store i8 %4947, i8* %4946, align 1, !tbaa !2451
  %4948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4949 = trunc i64 %4945 to i32
  %4950 = and i32 %4949, 254
  %4951 = call i32 @llvm.ctpop.i32(i32 %4950) #16
  %4952 = trunc i32 %4951 to i8
  %4953 = and i8 %4952, 1
  %4954 = xor i8 %4953, 1
  store i8 %4954, i8* %4948, align 1, !tbaa !2451
  %4955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4955, align 1, !tbaa !2451
  %4956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4957 = icmp eq i64 %4945, 0
  %4958 = zext i1 %4957 to i8
  store i8 %4958, i8* %4956, align 1, !tbaa !2451
  %4959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4960 = lshr i64 %4945, 63
  %4961 = trunc i64 %4960 to i8
  store i8 %4961, i8* %4959, align 1, !tbaa !2451
  %4962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4962, align 1, !tbaa !2451
  %4963 = load i64, i64* %RCX
  %4964 = load i64, i64* %RDX
  %4965 = load i64, i64* %PC
  %4966 = add i64 %4965, 3
  store i64 %4966, i64* %PC
  %4967 = add i64 %4964, %4963
  store i64 %4967, i64* %RCX, align 8, !tbaa !2428
  %4968 = icmp ult i64 %4967, %4963
  %4969 = icmp ult i64 %4967, %4964
  %4970 = or i1 %4968, %4969
  %4971 = zext i1 %4970 to i8
  %4972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4971, i8* %4972, align 1, !tbaa !2432
  %4973 = trunc i64 %4967 to i32
  %4974 = and i32 %4973, 255
  %4975 = call i32 @llvm.ctpop.i32(i32 %4974) #16
  %4976 = trunc i32 %4975 to i8
  %4977 = and i8 %4976, 1
  %4978 = xor i8 %4977, 1
  %4979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4978, i8* %4979, align 1, !tbaa !2446
  %4980 = xor i64 %4964, %4963
  %4981 = xor i64 %4980, %4967
  %4982 = lshr i64 %4981, 4
  %4983 = trunc i64 %4982 to i8
  %4984 = and i8 %4983, 1
  %4985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4984, i8* %4985, align 1, !tbaa !2447
  %4986 = icmp eq i64 %4967, 0
  %4987 = zext i1 %4986 to i8
  %4988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4987, i8* %4988, align 1, !tbaa !2448
  %4989 = lshr i64 %4967, 63
  %4990 = trunc i64 %4989 to i8
  %4991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4990, i8* %4991, align 1, !tbaa !2449
  %4992 = lshr i64 %4963, 63
  %4993 = lshr i64 %4964, 63
  %4994 = xor i64 %4989, %4992
  %4995 = xor i64 %4989, %4993
  %4996 = add nuw nsw i64 %4994, %4995
  %4997 = icmp eq i64 %4996, 2
  %4998 = zext i1 %4997 to i8
  %4999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4998, i8* %4999, align 1, !tbaa !2450
  %5000 = load i64, i64* %RCX
  %5001 = add i64 %5000, 56
  %5002 = load i64, i64* %RAX
  %5003 = load i64, i64* %PC
  %5004 = add i64 %5003, 4
  store i64 %5004, i64* %PC
  %5005 = inttoptr i64 %5001 to i64*
  store i64 %5002, i64* %5005
  %5006 = load i64, i64* %RBP
  %5007 = sub i64 %5006, 272
  %5008 = load i64, i64* %PC
  %5009 = add i64 %5008, 7
  store i64 %5009, i64* %PC
  %5010 = inttoptr i64 %5007 to i64*
  %5011 = load i64, i64* %5010
  store i64 %5011, i64* %RAX, align 8, !tbaa !2428
  %5012 = load i64, i64* %RAX
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 4
  store i64 %5014, i64* %PC
  %5015 = add i64 1, %5012
  store i64 %5015, i64* %RAX, align 8, !tbaa !2428
  %5016 = icmp ult i64 %5015, %5012
  %5017 = icmp ult i64 %5015, 1
  %5018 = or i1 %5016, %5017
  %5019 = zext i1 %5018 to i8
  %5020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5019, i8* %5020, align 1, !tbaa !2432
  %5021 = trunc i64 %5015 to i32
  %5022 = and i32 %5021, 255
  %5023 = call i32 @llvm.ctpop.i32(i32 %5022) #16
  %5024 = trunc i32 %5023 to i8
  %5025 = and i8 %5024, 1
  %5026 = xor i8 %5025, 1
  %5027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5026, i8* %5027, align 1, !tbaa !2446
  %5028 = xor i64 1, %5012
  %5029 = xor i64 %5028, %5015
  %5030 = lshr i64 %5029, 4
  %5031 = trunc i64 %5030 to i8
  %5032 = and i8 %5031, 1
  %5033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5032, i8* %5033, align 1, !tbaa !2447
  %5034 = icmp eq i64 %5015, 0
  %5035 = zext i1 %5034 to i8
  %5036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5035, i8* %5036, align 1, !tbaa !2448
  %5037 = lshr i64 %5015, 63
  %5038 = trunc i64 %5037 to i8
  %5039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5038, i8* %5039, align 1, !tbaa !2449
  %5040 = lshr i64 %5012, 63
  %5041 = xor i64 %5037, %5040
  %5042 = add nuw nsw i64 %5041, %5037
  %5043 = icmp eq i64 %5042, 2
  %5044 = zext i1 %5043 to i8
  %5045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5044, i8* %5045, align 1, !tbaa !2450
  %5046 = load i64, i64* %RBP
  %5047 = sub i64 %5046, 272
  %5048 = load i64, i64* %RAX
  %5049 = load i64, i64* %PC
  %5050 = add i64 %5049, 7
  store i64 %5050, i64* %PC
  %5051 = inttoptr i64 %5047 to i64*
  store i64 %5048, i64* %5051
  %5052 = load i64, i64* %PC
  %5053 = sub i64 %5052, 257
  %5054 = load i64, i64* %PC
  %5055 = add i64 %5054, 5
  store i64 %5055, i64* %PC
  %5056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5053, i64* %5056, align 8, !tbaa !2428
  br label %block_403f70

block_40381e:                                     ; preds = %block_4037d8
  %5057 = load i64, i64* %RBP
  %5058 = sub i64 %5057, 16
  %5059 = load i64, i64* %PC
  %5060 = add i64 %5059, 4
  store i64 %5060, i64* %PC
  %5061 = inttoptr i64 %5058 to i64*
  %5062 = load i64, i64* %5061
  store i64 %5062, i64* %RAX, align 8, !tbaa !2428
  %5063 = load i64, i64* %RAX
  %5064 = add i64 %5063, 552
  %5065 = load i64, i64* %PC
  %5066 = add i64 %5065, 7
  store i64 %5066, i64* %PC
  %5067 = inttoptr i64 %5064 to i64*
  %5068 = load i64, i64* %5067
  store i64 %5068, i64* %RAX, align 8, !tbaa !2428
  %5069 = load i64, i64* %RBP
  %5070 = sub i64 %5069, 16
  %5071 = load i64, i64* %PC
  %5072 = add i64 %5071, 4
  store i64 %5072, i64* %PC
  %5073 = inttoptr i64 %5070 to i64*
  %5074 = load i64, i64* %5073
  store i64 %5074, i64* %RCX, align 8, !tbaa !2428
  %5075 = load i64, i64* %RCX
  %5076 = add i64 %5075, 400
  %5077 = load i64, i64* %PC
  %5078 = add i64 %5077, 8
  store i64 %5078, i64* %PC
  %5079 = inttoptr i64 %5076 to i64*
  %5080 = load i64, i64* %5079
  %5081 = sext i64 %5080 to i128
  %5082 = and i128 %5081, -18446744073709551616
  %5083 = zext i64 %5080 to i128
  %5084 = or i128 %5082, %5083
  %5085 = mul nsw i128 %5084, 104
  %5086 = trunc i128 %5085 to i64
  store i64 %5086, i64* %RCX, align 8, !tbaa !2428
  %5087 = sext i64 %5086 to i128
  %5088 = icmp ne i128 %5087, %5085
  %5089 = zext i1 %5088 to i8
  %5090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5089, i8* %5090, align 1, !tbaa !2432
  %5091 = trunc i128 %5085 to i32
  %5092 = and i32 %5091, 255
  %5093 = call i32 @llvm.ctpop.i32(i32 %5092) #16
  %5094 = trunc i32 %5093 to i8
  %5095 = and i8 %5094, 1
  %5096 = xor i8 %5095, 1
  %5097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5096, i8* %5097, align 1, !tbaa !2446
  %5098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5098, align 1, !tbaa !2447
  %5099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5099, align 1, !tbaa !2448
  %5100 = lshr i64 %5086, 63
  %5101 = trunc i64 %5100 to i8
  %5102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5101, i8* %5102, align 1, !tbaa !2449
  %5103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5089, i8* %5103, align 1, !tbaa !2450
  %5104 = load i64, i64* %RAX
  %5105 = load i64, i64* %RCX
  %5106 = load i64, i64* %PC
  %5107 = add i64 %5106, 3
  store i64 %5107, i64* %PC
  %5108 = add i64 %5105, %5104
  store i64 %5108, i64* %RAX, align 8, !tbaa !2428
  %5109 = icmp ult i64 %5108, %5104
  %5110 = icmp ult i64 %5108, %5105
  %5111 = or i1 %5109, %5110
  %5112 = zext i1 %5111 to i8
  %5113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5112, i8* %5113, align 1, !tbaa !2432
  %5114 = trunc i64 %5108 to i32
  %5115 = and i32 %5114, 255
  %5116 = call i32 @llvm.ctpop.i32(i32 %5115) #16
  %5117 = trunc i32 %5116 to i8
  %5118 = and i8 %5117, 1
  %5119 = xor i8 %5118, 1
  %5120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5119, i8* %5120, align 1, !tbaa !2446
  %5121 = xor i64 %5105, %5104
  %5122 = xor i64 %5121, %5108
  %5123 = lshr i64 %5122, 4
  %5124 = trunc i64 %5123 to i8
  %5125 = and i8 %5124, 1
  %5126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5125, i8* %5126, align 1, !tbaa !2447
  %5127 = icmp eq i64 %5108, 0
  %5128 = zext i1 %5127 to i8
  %5129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5128, i8* %5129, align 1, !tbaa !2448
  %5130 = lshr i64 %5108, 63
  %5131 = trunc i64 %5130 to i8
  %5132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5131, i8* %5132, align 1, !tbaa !2449
  %5133 = lshr i64 %5104, 63
  %5134 = lshr i64 %5105, 63
  %5135 = xor i64 %5130, %5133
  %5136 = xor i64 %5130, %5134
  %5137 = add nuw nsw i64 %5135, %5136
  %5138 = icmp eq i64 %5137, 2
  %5139 = zext i1 %5138 to i8
  %5140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5139, i8* %5140, align 1, !tbaa !2450
  %5141 = load i64, i64* %RAX
  %5142 = load i64, i64* %PC
  %5143 = add i64 %5142, 4
  store i64 %5143, i64* %PC
  %5144 = add i64 104, %5141
  store i64 %5144, i64* %RAX, align 8, !tbaa !2428
  %5145 = icmp ult i64 %5144, %5141
  %5146 = icmp ult i64 %5144, 104
  %5147 = or i1 %5145, %5146
  %5148 = zext i1 %5147 to i8
  %5149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5148, i8* %5149, align 1, !tbaa !2432
  %5150 = trunc i64 %5144 to i32
  %5151 = and i32 %5150, 255
  %5152 = call i32 @llvm.ctpop.i32(i32 %5151) #16
  %5153 = trunc i32 %5152 to i8
  %5154 = and i8 %5153, 1
  %5155 = xor i8 %5154, 1
  %5156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5155, i8* %5156, align 1, !tbaa !2446
  %5157 = xor i64 104, %5141
  %5158 = xor i64 %5157, %5144
  %5159 = lshr i64 %5158, 4
  %5160 = trunc i64 %5159 to i8
  %5161 = and i8 %5160, 1
  %5162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5161, i8* %5162, align 1, !tbaa !2447
  %5163 = icmp eq i64 %5144, 0
  %5164 = zext i1 %5163 to i8
  %5165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5164, i8* %5165, align 1, !tbaa !2448
  %5166 = lshr i64 %5144, 63
  %5167 = trunc i64 %5166 to i8
  %5168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5167, i8* %5168, align 1, !tbaa !2449
  %5169 = lshr i64 %5141, 63
  %5170 = xor i64 %5166, %5169
  %5171 = add nuw nsw i64 %5170, %5166
  %5172 = icmp eq i64 %5171, 2
  %5173 = zext i1 %5172 to i8
  %5174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5173, i8* %5174, align 1, !tbaa !2450
  %5175 = load i64, i64* %RBP
  %5176 = sub i64 %5175, 16
  %5177 = load i64, i64* %PC
  %5178 = add i64 %5177, 4
  store i64 %5178, i64* %PC
  %5179 = inttoptr i64 %5176 to i64*
  %5180 = load i64, i64* %5179
  store i64 %5180, i64* %RCX, align 8, !tbaa !2428
  %5181 = load i64, i64* %RCX
  %5182 = add i64 %5181, 560
  %5183 = load i64, i64* %RAX
  %5184 = load i64, i64* %PC
  %5185 = add i64 %5184, 7
  store i64 %5185, i64* %PC
  %5186 = inttoptr i64 %5182 to i64*
  store i64 %5183, i64* %5186
  %5187 = load i64, i64* %RBP
  %5188 = sub i64 %5187, 16
  %5189 = load i64, i64* %PC
  %5190 = add i64 %5189, 4
  store i64 %5190, i64* %PC
  %5191 = inttoptr i64 %5188 to i64*
  %5192 = load i64, i64* %5191
  store i64 %5192, i64* %RAX, align 8, !tbaa !2428
  %5193 = load i64, i64* %RAX
  %5194 = add i64 %5193, 568
  %5195 = load i64, i64* %PC
  %5196 = add i64 %5195, 7
  store i64 %5196, i64* %PC
  %5197 = inttoptr i64 %5194 to i64*
  %5198 = load i64, i64* %5197
  store i64 %5198, i64* %RAX, align 8, !tbaa !2428
  %5199 = load i64, i64* %RBP
  %5200 = sub i64 %5199, 16
  %5201 = load i64, i64* %PC
  %5202 = add i64 %5201, 4
  store i64 %5202, i64* %PC
  %5203 = inttoptr i64 %5200 to i64*
  %5204 = load i64, i64* %5203
  store i64 %5204, i64* %RCX, align 8, !tbaa !2428
  %5205 = load i64, i64* %RCX
  %5206 = add i64 %5205, 424
  %5207 = load i64, i64* %PC
  %5208 = add i64 %5207, 7
  store i64 %5208, i64* %PC
  %5209 = inttoptr i64 %5206 to i64*
  %5210 = load i64, i64* %5209
  store i64 %5210, i64* %RCX, align 8, !tbaa !2428
  %5211 = load i64, i64* %RCX
  %5212 = load i64, i64* %PC
  %5213 = add i64 %5212, 4
  store i64 %5213, i64* %PC
  %5214 = shl i64 %5211, 5
  %5215 = icmp slt i64 %5214, 0
  %5216 = shl i64 %5214, 1
  store i64 %5216, i64* %RCX, align 8, !tbaa !2428
  %5217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5218 = zext i1 %5215 to i8
  store i8 %5218, i8* %5217, align 1, !tbaa !2451
  %5219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5220 = trunc i64 %5216 to i32
  %5221 = and i32 %5220, 254
  %5222 = call i32 @llvm.ctpop.i32(i32 %5221) #16
  %5223 = trunc i32 %5222 to i8
  %5224 = and i8 %5223, 1
  %5225 = xor i8 %5224, 1
  store i8 %5225, i8* %5219, align 1, !tbaa !2451
  %5226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5226, align 1, !tbaa !2451
  %5227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5228 = icmp eq i64 %5216, 0
  %5229 = zext i1 %5228 to i8
  store i8 %5229, i8* %5227, align 1, !tbaa !2451
  %5230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5231 = lshr i64 %5216, 63
  %5232 = trunc i64 %5231 to i8
  store i8 %5232, i8* %5230, align 1, !tbaa !2451
  %5233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5233, align 1, !tbaa !2451
  %5234 = load i64, i64* %RAX
  %5235 = load i64, i64* %RCX
  %5236 = load i64, i64* %PC
  %5237 = add i64 %5236, 3
  store i64 %5237, i64* %PC
  %5238 = add i64 %5235, %5234
  store i64 %5238, i64* %RAX, align 8, !tbaa !2428
  %5239 = icmp ult i64 %5238, %5234
  %5240 = icmp ult i64 %5238, %5235
  %5241 = or i1 %5239, %5240
  %5242 = zext i1 %5241 to i8
  %5243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5242, i8* %5243, align 1, !tbaa !2432
  %5244 = trunc i64 %5238 to i32
  %5245 = and i32 %5244, 255
  %5246 = call i32 @llvm.ctpop.i32(i32 %5245) #16
  %5247 = trunc i32 %5246 to i8
  %5248 = and i8 %5247, 1
  %5249 = xor i8 %5248, 1
  %5250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5249, i8* %5250, align 1, !tbaa !2446
  %5251 = xor i64 %5235, %5234
  %5252 = xor i64 %5251, %5238
  %5253 = lshr i64 %5252, 4
  %5254 = trunc i64 %5253 to i8
  %5255 = and i8 %5254, 1
  %5256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5255, i8* %5256, align 1, !tbaa !2447
  %5257 = icmp eq i64 %5238, 0
  %5258 = zext i1 %5257 to i8
  %5259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5258, i8* %5259, align 1, !tbaa !2448
  %5260 = lshr i64 %5238, 63
  %5261 = trunc i64 %5260 to i8
  %5262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5261, i8* %5262, align 1, !tbaa !2449
  %5263 = lshr i64 %5234, 63
  %5264 = lshr i64 %5235, 63
  %5265 = xor i64 %5260, %5263
  %5266 = xor i64 %5260, %5264
  %5267 = add nuw nsw i64 %5265, %5266
  %5268 = icmp eq i64 %5267, 2
  %5269 = zext i1 %5268 to i8
  %5270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5269, i8* %5270, align 1, !tbaa !2450
  %5271 = load i64, i64* %RBP
  %5272 = sub i64 %5271, 16
  %5273 = load i64, i64* %PC
  %5274 = add i64 %5273, 4
  store i64 %5274, i64* %PC
  %5275 = inttoptr i64 %5272 to i64*
  %5276 = load i64, i64* %5275
  store i64 %5276, i64* %RCX, align 8, !tbaa !2428
  %5277 = load i64, i64* %RCX
  %5278 = add i64 %5277, 576
  %5279 = load i64, i64* %RAX
  %5280 = load i64, i64* %PC
  %5281 = add i64 %5280, 7
  store i64 %5281, i64* %PC
  %5282 = inttoptr i64 %5278 to i64*
  store i64 %5279, i64* %5282
  %5283 = load i64, i64* %RBP
  %5284 = sub i64 %5283, 16
  %5285 = load i64, i64* %PC
  %5286 = add i64 %5285, 4
  store i64 %5286, i64* %PC
  %5287 = inttoptr i64 %5284 to i64*
  %5288 = load i64, i64* %5287
  store i64 %5288, i64* %RAX, align 8, !tbaa !2428
  %5289 = load i64, i64* %RAX
  %5290 = add i64 %5289, 584
  %5291 = load i64, i64* %PC
  %5292 = add i64 %5291, 7
  store i64 %5292, i64* %PC
  %5293 = inttoptr i64 %5290 to i64*
  %5294 = load i64, i64* %5293
  store i64 %5294, i64* %RAX, align 8, !tbaa !2428
  %5295 = load i64, i64* %RBP
  %5296 = sub i64 %5295, 16
  %5297 = load i64, i64* %PC
  %5298 = add i64 %5297, 4
  store i64 %5298, i64* %PC
  %5299 = inttoptr i64 %5296 to i64*
  %5300 = load i64, i64* %5299
  store i64 %5300, i64* %RCX, align 8, !tbaa !2428
  %5301 = load i64, i64* %RCX
  %5302 = add i64 %5301, 400
  %5303 = load i64, i64* %PC
  %5304 = add i64 %5303, 7
  store i64 %5304, i64* %PC
  %5305 = inttoptr i64 %5302 to i64*
  %5306 = load i64, i64* %5305
  store i64 %5306, i64* %RCX, align 8, !tbaa !2428
  %5307 = load i64, i64* %RCX
  %5308 = load i64, i64* %PC
  %5309 = add i64 %5308, 4
  store i64 %5309, i64* %PC
  %5310 = shl i64 %5307, 5
  %5311 = icmp slt i64 %5310, 0
  %5312 = shl i64 %5310, 1
  store i64 %5312, i64* %RCX, align 8, !tbaa !2428
  %5313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5314 = zext i1 %5311 to i8
  store i8 %5314, i8* %5313, align 1, !tbaa !2451
  %5315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5316 = trunc i64 %5312 to i32
  %5317 = and i32 %5316, 254
  %5318 = call i32 @llvm.ctpop.i32(i32 %5317) #16
  %5319 = trunc i32 %5318 to i8
  %5320 = and i8 %5319, 1
  %5321 = xor i8 %5320, 1
  store i8 %5321, i8* %5315, align 1, !tbaa !2451
  %5322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5322, align 1, !tbaa !2451
  %5323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5324 = icmp eq i64 %5312, 0
  %5325 = zext i1 %5324 to i8
  store i8 %5325, i8* %5323, align 1, !tbaa !2451
  %5326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5327 = lshr i64 %5312, 63
  %5328 = trunc i64 %5327 to i8
  store i8 %5328, i8* %5326, align 1, !tbaa !2451
  %5329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5329, align 1, !tbaa !2451
  %5330 = load i64, i64* %RAX
  %5331 = load i64, i64* %RCX
  %5332 = load i64, i64* %PC
  %5333 = add i64 %5332, 3
  store i64 %5333, i64* %PC
  %5334 = add i64 %5331, %5330
  store i64 %5334, i64* %RAX, align 8, !tbaa !2428
  %5335 = icmp ult i64 %5334, %5330
  %5336 = icmp ult i64 %5334, %5331
  %5337 = or i1 %5335, %5336
  %5338 = zext i1 %5337 to i8
  %5339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5338, i8* %5339, align 1, !tbaa !2432
  %5340 = trunc i64 %5334 to i32
  %5341 = and i32 %5340, 255
  %5342 = call i32 @llvm.ctpop.i32(i32 %5341) #16
  %5343 = trunc i32 %5342 to i8
  %5344 = and i8 %5343, 1
  %5345 = xor i8 %5344, 1
  %5346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5345, i8* %5346, align 1, !tbaa !2446
  %5347 = xor i64 %5331, %5330
  %5348 = xor i64 %5347, %5334
  %5349 = lshr i64 %5348, 4
  %5350 = trunc i64 %5349 to i8
  %5351 = and i8 %5350, 1
  %5352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5351, i8* %5352, align 1, !tbaa !2447
  %5353 = icmp eq i64 %5334, 0
  %5354 = zext i1 %5353 to i8
  %5355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5354, i8* %5355, align 1, !tbaa !2448
  %5356 = lshr i64 %5334, 63
  %5357 = trunc i64 %5356 to i8
  %5358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5357, i8* %5358, align 1, !tbaa !2449
  %5359 = lshr i64 %5330, 63
  %5360 = lshr i64 %5331, 63
  %5361 = xor i64 %5356, %5359
  %5362 = xor i64 %5356, %5360
  %5363 = add nuw nsw i64 %5361, %5362
  %5364 = icmp eq i64 %5363, 2
  %5365 = zext i1 %5364 to i8
  %5366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5365, i8* %5366, align 1, !tbaa !2450
  %5367 = load i64, i64* %RBP
  %5368 = sub i64 %5367, 16
  %5369 = load i64, i64* %PC
  %5370 = add i64 %5369, 4
  store i64 %5370, i64* %PC
  %5371 = inttoptr i64 %5368 to i64*
  %5372 = load i64, i64* %5371
  store i64 %5372, i64* %RCX, align 8, !tbaa !2428
  %5373 = load i64, i64* %RCX
  %5374 = add i64 %5373, 592
  %5375 = load i64, i64* %RAX
  %5376 = load i64, i64* %PC
  %5377 = add i64 %5376, 7
  store i64 %5377, i64* %PC
  %5378 = inttoptr i64 %5374 to i64*
  store i64 %5375, i64* %5378
  %5379 = load i64, i64* %RBP
  %5380 = sub i64 %5379, 16
  %5381 = load i64, i64* %PC
  %5382 = add i64 %5381, 4
  store i64 %5382, i64* %PC
  %5383 = inttoptr i64 %5380 to i64*
  %5384 = load i64, i64* %5383
  store i64 %5384, i64* %RAX, align 8, !tbaa !2428
  %5385 = load i64, i64* %RAX
  %5386 = add i64 %5385, 552
  %5387 = load i64, i64* %PC
  %5388 = add i64 %5387, 7
  store i64 %5388, i64* %PC
  %5389 = inttoptr i64 %5386 to i64*
  %5390 = load i64, i64* %5389
  store i64 %5390, i64* %RAX, align 8, !tbaa !2428
  %5391 = load i64, i64* %RBP
  %5392 = sub i64 %5391, 288
  %5393 = load i64, i64* %RAX
  %5394 = load i64, i64* %PC
  %5395 = add i64 %5394, 7
  store i64 %5395, i64* %PC
  %5396 = inttoptr i64 %5392 to i64*
  store i64 %5393, i64* %5396
  %5397 = load i64, i64* %RBP
  %5398 = sub i64 %5397, 16
  %5399 = load i64, i64* %PC
  %5400 = add i64 %5399, 4
  store i64 %5400, i64* %PC
  %5401 = inttoptr i64 %5398 to i64*
  %5402 = load i64, i64* %5401
  store i64 %5402, i64* %RAX, align 8, !tbaa !2428
  %5403 = load i64, i64* %RAX
  %5404 = add i64 %5403, 568
  %5405 = load i64, i64* %PC
  %5406 = add i64 %5405, 7
  store i64 %5406, i64* %PC
  %5407 = inttoptr i64 %5404 to i64*
  %5408 = load i64, i64* %5407
  store i64 %5408, i64* %RAX, align 8, !tbaa !2428
  %5409 = load i64, i64* %RBP
  %5410 = sub i64 %5409, 280
  %5411 = load i64, i64* %RAX
  %5412 = load i64, i64* %PC
  %5413 = add i64 %5412, 7
  store i64 %5413, i64* %PC
  %5414 = inttoptr i64 %5410 to i64*
  store i64 %5411, i64* %5414
  %5415 = load i64, i64* %RBP
  %5416 = sub i64 %5415, 272
  %5417 = load i64, i64* %PC
  %5418 = add i64 %5417, 11
  store i64 %5418, i64* %PC
  %5419 = inttoptr i64 %5416 to i64*
  store i64 1, i64* %5419
  br label %block_4038c6

block_403704:                                     ; preds = %block_40365d
  %5420 = add i64 %647, 416
  %5421 = load i64, i64* %PC
  %5422 = add i64 %5421, 11
  store i64 %5422, i64* %PC
  %5423 = inttoptr i64 %5420 to i64*
  store i64 27328512, i64* %5423
  %5424 = load i64, i64* %RBP
  %5425 = sub i64 %5424, 16
  %5426 = load i64, i64* %PC
  %5427 = add i64 %5426, 4
  store i64 %5427, i64* %PC
  %5428 = inttoptr i64 %5425 to i64*
  %5429 = load i64, i64* %5428
  store i64 %5429, i64* %RAX, align 8, !tbaa !2428
  %5430 = load i64, i64* %RAX
  %5431 = add i64 %5430, 456
  %5432 = load i64, i64* %PC
  %5433 = add i64 %5432, 11
  store i64 %5433, i64* %PC
  %5434 = inttoptr i64 %5431 to i64*
  store i64 28900000, i64* %5434
  br label %block_403722

block_403c47:                                     ; preds = %block_40394a
  %5435 = load i64, i64* %PC
  %5436 = add i64 %5435, 5
  store i64 %5436, i64* %PC
  store i64 10000000, i64* %RAX, align 8, !tbaa !2428
  %5437 = load i32, i32* %EAX
  %5438 = zext i32 %5437 to i64
  %5439 = load i64, i64* %PC
  %5440 = add i64 %5439, 2
  store i64 %5440, i64* %PC
  %5441 = and i64 %5438, 4294967295
  store i64 %5441, i64* %RCX, align 8, !tbaa !2428
  %5442 = load i64, i64* %RBP
  %5443 = sub i64 %5442, 328
  %5444 = load i64, i64* %RCX
  %5445 = load i64, i64* %PC
  %5446 = add i64 %5445, 7
  store i64 %5446, i64* %PC
  %5447 = inttoptr i64 %5443 to i64*
  store i64 %5444, i64* %5447
  %5448 = load i64, i64* %PC
  %5449 = add i64 %5448, 5
  %5450 = load i64, i64* %PC
  %5451 = add i64 %5450, 5
  store i64 %5451, i64* %PC
  %5452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5449, i64* %5452, align 8, !tbaa !2428
  br label %block_403c5a

block_403f08:                                     ; preds = %block_403ef0
  %5453 = inttoptr i64 %4265 to i64*
  %5454 = load i64, i64* %5453
  store i64 %5454, i64* %RCX, align 8, !tbaa !2428
  %5455 = load i64, i64* %RCX
  %5456 = load i64, i64* %PC
  %5457 = add i64 %5456, 4
  store i64 %5457, i64* %PC
  %5458 = add i64 1, %5455
  store i64 %5458, i64* %RCX, align 8, !tbaa !2428
  %5459 = icmp ult i64 %5458, %5455
  %5460 = icmp ult i64 %5458, 1
  %5461 = or i1 %5459, %5460
  %5462 = zext i1 %5461 to i8
  %5463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5462, i8* %5463, align 1, !tbaa !2432
  %5464 = trunc i64 %5458 to i32
  %5465 = and i32 %5464, 255
  %5466 = call i32 @llvm.ctpop.i32(i32 %5465) #16
  %5467 = trunc i32 %5466 to i8
  %5468 = and i8 %5467, 1
  %5469 = xor i8 %5468, 1
  %5470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5469, i8* %5470, align 1, !tbaa !2446
  %5471 = xor i64 1, %5455
  %5472 = xor i64 %5471, %5458
  %5473 = lshr i64 %5472, 4
  %5474 = trunc i64 %5473 to i8
  %5475 = and i8 %5474, 1
  %5476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5475, i8* %5476, align 1, !tbaa !2447
  %5477 = icmp eq i64 %5458, 0
  %5478 = zext i1 %5477 to i8
  %5479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5478, i8* %5479, align 1, !tbaa !2448
  %5480 = lshr i64 %5458, 63
  %5481 = trunc i64 %5480 to i8
  %5482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5481, i8* %5482, align 1, !tbaa !2449
  %5483 = lshr i64 %5455, 63
  %5484 = xor i64 %5480, %5483
  %5485 = add nuw nsw i64 %5484, %5480
  %5486 = icmp eq i64 %5485, 2
  %5487 = zext i1 %5486 to i8
  %5488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5487, i8* %5488, align 1, !tbaa !2450
  %5489 = load i64, i64* %RAX
  %5490 = add i64 %5489, 424
  %5491 = load i64, i64* %RCX
  %5492 = load i64, i64* %PC
  %5493 = add i64 %5492, 7
  store i64 %5493, i64* %PC
  %5494 = inttoptr i64 %5490 to i64*
  store i64 %5491, i64* %5494
  %5495 = load i64, i64* %RBP
  %5496 = sub i64 %5495, 280
  %5497 = load i64, i64* %PC
  %5498 = add i64 %5497, 7
  store i64 %5498, i64* %PC
  %5499 = inttoptr i64 %5496 to i64*
  %5500 = load i64, i64* %5499
  store i64 %5500, i64* %RAX, align 8, !tbaa !2428
  %5501 = load i64, i64* %RAX
  %5502 = load i64, i64* %PC
  %5503 = add i64 %5502, 4
  store i64 %5503, i64* %PC
  %5504 = add i64 64, %5501
  store i64 %5504, i64* %RAX, align 8, !tbaa !2428
  %5505 = icmp ult i64 %5504, %5501
  %5506 = icmp ult i64 %5504, 64
  %5507 = or i1 %5505, %5506
  %5508 = zext i1 %5507 to i8
  %5509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5508, i8* %5509, align 1, !tbaa !2432
  %5510 = trunc i64 %5504 to i32
  %5511 = and i32 %5510, 255
  %5512 = call i32 @llvm.ctpop.i32(i32 %5511) #16
  %5513 = trunc i32 %5512 to i8
  %5514 = and i8 %5513, 1
  %5515 = xor i8 %5514, 1
  %5516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5515, i8* %5516, align 1, !tbaa !2446
  %5517 = xor i64 64, %5501
  %5518 = xor i64 %5517, %5504
  %5519 = lshr i64 %5518, 4
  %5520 = trunc i64 %5519 to i8
  %5521 = and i8 %5520, 1
  %5522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5521, i8* %5522, align 1, !tbaa !2447
  %5523 = icmp eq i64 %5504, 0
  %5524 = zext i1 %5523 to i8
  %5525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5524, i8* %5525, align 1, !tbaa !2448
  %5526 = lshr i64 %5504, 63
  %5527 = trunc i64 %5526 to i8
  %5528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5527, i8* %5528, align 1, !tbaa !2449
  %5529 = lshr i64 %5501, 63
  %5530 = xor i64 %5526, %5529
  %5531 = add nuw nsw i64 %5530, %5526
  %5532 = icmp eq i64 %5531, 2
  %5533 = zext i1 %5532 to i8
  %5534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5533, i8* %5534, align 1, !tbaa !2450
  %5535 = load i64, i64* %RBP
  %5536 = sub i64 %5535, 280
  %5537 = load i64, i64* %RAX
  %5538 = load i64, i64* %PC
  %5539 = add i64 %5538, 7
  store i64 %5539, i64* %PC
  %5540 = inttoptr i64 %5536 to i64*
  store i64 %5537, i64* %5540
  %5541 = load i64, i64* %PC
  %5542 = sub i64 %5541, 64
  %5543 = load i64, i64* %PC
  %5544 = add i64 %5543, 5
  store i64 %5544, i64* %PC
  %5545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5542, i64* %5545, align 8, !tbaa !2428
  br label %block_403ef0

block_403d03:                                     ; preds = %block_4038c6
  %5546 = load i64, i64* %RBP
  %5547 = sub i64 %5546, 272
  %5548 = load i64, i64* %PC
  %5549 = add i64 %5548, 7
  store i64 %5549, i64* %PC
  %5550 = inttoptr i64 %5547 to i64*
  %5551 = load i64, i64* %5550
  store i64 %5551, i64* %RAX, align 8, !tbaa !2428
  %5552 = load i64, i64* %RBP
  %5553 = sub i64 %5552, 16
  %5554 = load i64, i64* %PC
  %5555 = add i64 %5554, 4
  store i64 %5555, i64* %PC
  %5556 = inttoptr i64 %5553 to i64*
  %5557 = load i64, i64* %5556
  store i64 %5557, i64* %RCX, align 8, !tbaa !2428
  %5558 = load i64, i64* %RCX
  %5559 = add i64 %5558, 408
  %5560 = load i64, i64* %PC
  %5561 = add i64 %5560, 7
  store i64 %5561, i64* %PC
  %5562 = inttoptr i64 %5559 to i64*
  %5563 = load i64, i64* %5562
  store i64 %5563, i64* %RCX, align 8, !tbaa !2428
  %5564 = load i64, i64* %RCX
  %5565 = load i64, i64* %PC
  %5566 = add i64 %5565, 4
  store i64 %5566, i64* %PC
  %5567 = add i64 1, %5564
  store i64 %5567, i64* %RCX, align 8, !tbaa !2428
  %5568 = icmp ult i64 %5567, %5564
  %5569 = icmp ult i64 %5567, 1
  %5570 = or i1 %5568, %5569
  %5571 = zext i1 %5570 to i8
  %5572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5571, i8* %5572, align 1, !tbaa !2432
  %5573 = trunc i64 %5567 to i32
  %5574 = and i32 %5573, 255
  %5575 = call i32 @llvm.ctpop.i32(i32 %5574) #16
  %5576 = trunc i32 %5575 to i8
  %5577 = and i8 %5576, 1
  %5578 = xor i8 %5577, 1
  %5579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5578, i8* %5579, align 1, !tbaa !2446
  %5580 = xor i64 1, %5564
  %5581 = xor i64 %5580, %5567
  %5582 = lshr i64 %5581, 4
  %5583 = trunc i64 %5582 to i8
  %5584 = and i8 %5583, 1
  %5585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5584, i8* %5585, align 1, !tbaa !2447
  %5586 = icmp eq i64 %5567, 0
  %5587 = zext i1 %5586 to i8
  %5588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5587, i8* %5588, align 1, !tbaa !2448
  %5589 = lshr i64 %5567, 63
  %5590 = trunc i64 %5589 to i8
  %5591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5590, i8* %5591, align 1, !tbaa !2449
  %5592 = lshr i64 %5564, 63
  %5593 = xor i64 %5589, %5592
  %5594 = add nuw nsw i64 %5593, %5589
  %5595 = icmp eq i64 %5594, 2
  %5596 = zext i1 %5595 to i8
  %5597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5596, i8* %5597, align 1, !tbaa !2450
  %5598 = load i64, i64* %RAX
  %5599 = load i64, i64* %RCX
  %5600 = load i64, i64* %PC
  %5601 = add i64 %5600, 3
  store i64 %5601, i64* %PC
  %5602 = sub i64 %5598, %5599
  %5603 = icmp ult i64 %5598, %5599
  %5604 = zext i1 %5603 to i8
  %5605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5604, i8* %5605, align 1, !tbaa !2432
  %5606 = trunc i64 %5602 to i32
  %5607 = and i32 %5606, 255
  %5608 = call i32 @llvm.ctpop.i32(i32 %5607) #16
  %5609 = trunc i32 %5608 to i8
  %5610 = and i8 %5609, 1
  %5611 = xor i8 %5610, 1
  %5612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5611, i8* %5612, align 1, !tbaa !2446
  %5613 = xor i64 %5599, %5598
  %5614 = xor i64 %5613, %5602
  %5615 = lshr i64 %5614, 4
  %5616 = trunc i64 %5615 to i8
  %5617 = and i8 %5616, 1
  %5618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5617, i8* %5618, align 1, !tbaa !2447
  %5619 = icmp eq i64 %5602, 0
  %5620 = zext i1 %5619 to i8
  %5621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5620, i8* %5621, align 1, !tbaa !2448
  %5622 = lshr i64 %5602, 63
  %5623 = trunc i64 %5622 to i8
  %5624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5623, i8* %5624, align 1, !tbaa !2449
  %5625 = lshr i64 %5598, 63
  %5626 = lshr i64 %5599, 63
  %5627 = xor i64 %5626, %5625
  %5628 = xor i64 %5622, %5625
  %5629 = add nuw nsw i64 %5628, %5627
  %5630 = icmp eq i64 %5629, 2
  %5631 = zext i1 %5630 to i8
  %5632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5631, i8* %5632, align 1, !tbaa !2450
  %5633 = load i64, i64* %PC
  %5634 = add i64 %5633, 19
  %5635 = load i64, i64* %PC
  %5636 = add i64 %5635, 6
  %5637 = load i64, i64* %PC
  %5638 = add i64 %5637, 6
  store i64 %5638, i64* %PC
  %5639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5640 = load i8, i8* %5639, align 1, !tbaa !2448
  store i8 %5640, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5642 = icmp ne i8 %5640, 0
  %5643 = select i1 %5642, i64 %5634, i64 %5636
  store i64 %5643, i64* %5641, align 8, !tbaa !2428
  %5644 = load i8, i8* %BRANCH_TAKEN
  %5645 = icmp eq i8 %5644, 1
  %5646 = load i64, i64* %RBP
  br i1 %5645, label %block_403d2f, label %block_403d22
}

; Function Attrs: noinline
define %struct.Memory* @sub_401810_global_opt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401810:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = load i64, i64* %RBP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 1
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %41 = load i64, i64* %40, align 8, !tbaa !2428
  %42 = add i64 %41, -8
  %43 = inttoptr i64 %42 to i64*
  store i64 %37, i64* %43
  store i64 %42, i64* %40, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC
  store i64 %44, i64* %RBP, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = sub i64 %47, 64
  store i64 %50, i64* %RSP, align 8, !tbaa !2428
  %51 = icmp ult i64 %47, 64
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %52, i8* %53, align 1, !tbaa !2432
  %54 = trunc i64 %50 to i32
  %55 = and i32 %54, 255
  %56 = call i32 @llvm.ctpop.i32(i32 %55) #16
  %57 = trunc i32 %56 to i8
  %58 = and i8 %57, 1
  %59 = xor i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %59, i8* %60, align 1, !tbaa !2446
  %61 = xor i64 64, %47
  %62 = xor i64 %61, %50
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %65, i8* %66, align 1, !tbaa !2447
  %67 = icmp eq i64 %50, 0
  %68 = zext i1 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %68, i8* %69, align 1, !tbaa !2448
  %70 = lshr i64 %50, 63
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %71, i8* %72, align 1, !tbaa !2449
  %73 = lshr i64 %47, 63
  %74 = xor i64 %70, %73
  %75 = add nuw nsw i64 %74, %73
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %77, i8* %78, align 1, !tbaa !2450
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 5
  store i64 %80, i64* %PC
  store i64 5, i64* %RAX, align 8, !tbaa !2428
  %81 = load i64, i64* %RBP
  %82 = sub i64 %81, 8
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 8
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %82 to i64*
  store i64 -1, i64* %85
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 12
  store i64 %87, i64* %PC
  %88 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 408) to i64*)
  %89 = sub i64 %88, 15000
  %90 = icmp ult i64 %88, 15000
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %91, i8* %92, align 1, !tbaa !2432
  %93 = trunc i64 %89 to i32
  %94 = and i32 %93, 255
  %95 = call i32 @llvm.ctpop.i32(i32 %94) #16
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %98, i8* %99, align 1, !tbaa !2446
  %100 = xor i64 %88, 15000
  %101 = xor i64 %100, %89
  %102 = lshr i64 %101, 4
  %103 = trunc i64 %102 to i8
  %104 = and i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %104, i8* %105, align 1, !tbaa !2447
  %106 = icmp eq i64 %89, 0
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %107, i8* %108, align 1, !tbaa !2448
  %109 = lshr i64 %89, 63
  %110 = trunc i64 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %110, i8* %111, align 1, !tbaa !2449
  %112 = lshr i64 %88, 63
  %113 = xor i64 %109, %112
  %114 = add nuw nsw i64 %113, %112
  %115 = icmp eq i64 %114, 2
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %116, i8* %117, align 1, !tbaa !2450
  %118 = load i32, i32* %EAX
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %123 = load i8, i8* %122, align 1, !tbaa !2448
  %124 = icmp ne i8 %123, 0
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %126 = load i8, i8* %125, align 1, !tbaa !2449
  %127 = icmp ne i8 %126, 0
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %129 = load i8, i8* %128, align 1, !tbaa !2450
  %130 = icmp ne i8 %129, 0
  %131 = xor i1 %127, %130
  %132 = or i1 %124, %131
  %133 = load i64, i64* %RAX, align 8, !tbaa !2428
  %134 = select i1 %132, i64 %119, i64 %133
  %135 = and i64 %134, 4294967295
  store i64 %135, i64* %RAX, align 8, !tbaa !2428
  %136 = load i32, i32* %EAX
  %137 = zext i32 %136 to i64
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 3
  store i64 %139, i64* %PC
  %140 = shl i64 %137, 32
  %141 = ashr exact i64 %140, 32
  store i64 %141, i64* %RCX, align 8, !tbaa !2428
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 16
  %144 = load i64, i64* %RCX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %143 to i64*
  store i64 %144, i64* %147
  br label %block_40183b

block_4018fc:                                     ; preds = %block_4018d3
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 10
  store i64 %149, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 139), i64* %RDI, align 8, !tbaa !2428
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 8
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %RSI, align 8, !tbaa !2428
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 2
  store i64 %157, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %158 = load i64, i64* %PC
  %159 = sub i64 %158, 4284
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 5
  store i64 %163, i64* %PC
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = add i64 %165, -8
  %167 = inttoptr i64 %166 to i64*
  store i64 %161, i64* %167
  store i64 %166, i64* %164, align 8, !tbaa !2428
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %159, i64* %168, align 8, !tbaa !2428
  %169 = load i64, i64* %PC
  %170 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %169, %struct.Memory* %342)
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 44
  %173 = load i32, i32* %EAX
  %174 = zext i32 %173 to i64
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 3
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %172 to i32*
  store i32 %173, i32* %177
  br label %block_401914

block_40183b:                                     ; preds = %block_401978, %block_401810
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401810 ], [ %MEMORY.2, %block_401978 ]
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 8
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 5
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %184, align 1, !tbaa !2432
  %185 = trunc i64 %183 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %190, i8* %191, align 1, !tbaa !2446
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %192, align 1, !tbaa !2447
  %193 = icmp eq i64 %183, 0
  %194 = zext i1 %193 to i8
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %194, i8* %195, align 1, !tbaa !2448
  %196 = lshr i64 %183, 63
  %197 = trunc i64 %196 to i8
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %197, i8* %198, align 1, !tbaa !2449
  %199 = lshr i64 %183, 63
  %200 = xor i64 %196, %199
  %201 = add nuw nsw i64 %200, %199
  %202 = icmp eq i64 %201, 2
  %203 = zext i1 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %203, i8* %204, align 1, !tbaa !2450
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 329
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 6
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 6
  store i64 %210, i64* %PC
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %212 = load i8, i8* %211, align 1, !tbaa !2448
  store i8 %212, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %214 = icmp ne i8 %212, 0
  %215 = select i1 %214, i64 %206, i64 %208
  store i64 %215, i64* %213, align 8, !tbaa !2428
  %216 = load i8, i8* %BRANCH_TAKEN
  %217 = icmp eq i8 %216, 1
  br i1 %217, label %block_401989, label %block_401846

block_40195a:                                     ; preds = %block_40194f
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 10
  store i64 %219, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 207), i64* %RDI, align 8, !tbaa !2428
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 2
  store i64 %221, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %222 = load i64, i64* %PC
  %223 = sub i64 %222, 4374
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 5
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %225, i64* %231
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %232, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %233, %struct.Memory* %MEMORY.2)
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 5
  store i64 %236, i64* %PC
  store i64 4294967295, i64* %RDI, align 8, !tbaa !2428
  %237 = load i64, i64* %RBP
  %238 = sub i64 %237, 52
  %239 = load i32, i32* %EAX
  %240 = zext i32 %239 to i64
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 3
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %238 to i32*
  store i32 %239, i32* %243
  %244 = load i64, i64* %PC
  %245 = sub i64 %244, 4227
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 5
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 5
  store i64 %249, i64* %PC
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %251 = load i64, i64* %250, align 8, !tbaa !2428
  %252 = add i64 %251, -8
  %253 = inttoptr i64 %252 to i64*
  store i64 %247, i64* %253
  store i64 %252, i64* %250, align 8, !tbaa !2428
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %245, i64* %254, align 8, !tbaa !2428
  %255 = load i64, i64* %PC
  %256 = call %struct.Memory* @ext_4008f0_exit(%struct.State* %0, i64 %255, %struct.Memory* %234)
  %257 = load i64, i64* %PC
  %258 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %257, %struct.Memory* %256)
  ret %struct.Memory* %258

block_401937:                                     ; preds = %block_401919
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 10
  store i64 %260, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 173), i64* %RDI, align 8, !tbaa !2428
  %261 = load i64, i64* %RBP
  %262 = sub i64 %261, 8
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 4
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %262 to i64*
  %266 = load i64, i64* %265
  store i64 %266, i64* %RSI, align 8, !tbaa !2428
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 2
  store i64 %268, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %269 = load i64, i64* %PC
  %270 = sub i64 %269, 4343
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 5
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 5
  store i64 %274, i64* %PC
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %276 = load i64, i64* %275, align 8, !tbaa !2428
  %277 = add i64 %276, -8
  %278 = inttoptr i64 %277 to i64*
  store i64 %272, i64* %278
  store i64 %277, i64* %275, align 8, !tbaa !2428
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %270, i64* %279, align 8, !tbaa !2428
  %280 = load i64, i64* %PC
  %281 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %280, %struct.Memory* %764)
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 48
  %284 = load i32, i32* %EAX
  %285 = zext i32 %284 to i64
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 3
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %283 to i32*
  store i32 %284, i32* %288
  br label %block_40194f

block_4018bf:                                     ; preds = %block_401846
  %289 = add i64 %749, 202
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 5
  store i64 %291, i64* %PC
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %289, i64* %292, align 8, !tbaa !2428
  br label %block_401989

block_401914:                                     ; preds = %block_4018d3, %block_4018fc
  %MEMORY.1 = phi %struct.Memory* [ %342, %block_4018d3 ], [ %170, %block_4018fc ]
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 5
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 5
  store i64 %296, i64* %PC
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %294, i64* %297, align 8, !tbaa !2428
  br label %block_401919

block_4018d3:                                     ; preds = %block_4018c4
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 10
  store i64 %299, i64* %PC
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 7
  store i64 %301, i64* %PC
  store i64 -1, i64* %RSI, align 8, !tbaa !2428
  %302 = load i64, i64* %RAX
  %303 = load i32, i32* %EAX
  %304 = zext i32 %303 to i64
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 2
  store i64 %306, i64* %PC
  %307 = xor i64 %304, %302
  %308 = trunc i64 %307 to i32
  %309 = and i64 %307, 4294967295
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %310, align 1, !tbaa !2432
  %311 = and i32 %308, 255
  %312 = call i32 @llvm.ctpop.i32(i32 %311) #16
  %313 = trunc i32 %312 to i8
  %314 = and i8 %313, 1
  %315 = xor i8 %314, 1
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %315, i8* %316, align 1, !tbaa !2446
  %317 = icmp eq i32 %308, 0
  %318 = zext i1 %317 to i8
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %318, i8* %319, align 1, !tbaa !2448
  %320 = lshr i32 %308, 31
  %321 = trunc i32 %320 to i8
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %321, i8* %322, align 1, !tbaa !2449
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %323, align 1, !tbaa !2450
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %324, align 1, !tbaa !2447
  %325 = load i32, i32* %EAX
  %326 = zext i32 %325 to i64
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 2
  store i64 %328, i64* %PC
  %329 = and i64 %326, 4294967295
  store i64 %329, i64* %RDX, align 8, !tbaa !2428
  %330 = load i64, i64* %PC
  %331 = sub i64 %330, 744
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 5
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  store i64 %335, i64* %PC
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %337 = load i64, i64* %336, align 8, !tbaa !2428
  %338 = add i64 %337, -8
  %339 = inttoptr i64 %338 to i64*
  store i64 %333, i64* %339
  store i64 %338, i64* %336, align 8, !tbaa !2428
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %331, i64* %340, align 8, !tbaa !2428
  %341 = load i64, i64* %PC
  %342 = call %struct.Memory* @sub_401600_suspend_impl_renamed_(%struct.State* %0, i64 %341, %struct.Memory* %700)
  %343 = load i64, i64* %RBP
  %344 = sub i64 %343, 8
  %345 = load i64, i64* %RAX
  %346 = load i64, i64* %PC
  %347 = add i64 %346, 4
  store i64 %347, i64* %PC
  %348 = inttoptr i64 %344 to i64*
  store i64 %345, i64* %348
  %349 = load i64, i64* %RBP
  %350 = sub i64 %349, 8
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 5
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %350 to i64*
  %354 = load i64, i64* %353
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %355, align 1, !tbaa !2432
  %356 = trunc i64 %354 to i32
  %357 = and i32 %356, 255
  %358 = call i32 @llvm.ctpop.i32(i32 %357) #16
  %359 = trunc i32 %358 to i8
  %360 = and i8 %359, 1
  %361 = xor i8 %360, 1
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %361, i8* %362, align 1, !tbaa !2446
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %363, align 1, !tbaa !2447
  %364 = icmp eq i64 %354, 0
  %365 = zext i1 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %365, i8* %366, align 1, !tbaa !2448
  %367 = lshr i64 %354, 63
  %368 = trunc i64 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %368, i8* %369, align 1, !tbaa !2449
  %370 = lshr i64 %354, 63
  %371 = xor i64 %367, %370
  %372 = add nuw nsw i64 %371, %370
  %373 = icmp eq i64 %372, 2
  %374 = zext i1 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %374, i8* %375, align 1, !tbaa !2450
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 30
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 6
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 6
  store i64 %381, i64* %PC
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %383 = load i8, i8* %382, align 1, !tbaa !2448
  store i8 %383, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %385 = icmp ne i8 %383, 0
  %386 = select i1 %385, i64 %377, i64 %379
  store i64 %386, i64* %384, align 8, !tbaa !2428
  %387 = load i8, i8* %BRANCH_TAKEN
  %388 = icmp eq i8 %387, 1
  br i1 %388, label %block_401914, label %block_4018fc

block_40194f:                                     ; preds = %block_401919, %block_401937
  %MEMORY.2 = phi %struct.Memory* [ %764, %block_401919 ], [ %281, %block_401937 ]
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 8
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 5
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i64*
  %394 = load i64, i64* %393
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %395, align 1, !tbaa !2432
  %396 = trunc i64 %394 to i32
  %397 = and i32 %396, 255
  %398 = call i32 @llvm.ctpop.i32(i32 %397) #16
  %399 = trunc i32 %398 to i8
  %400 = and i8 %399, 1
  %401 = xor i8 %400, 1
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %401, i8* %402, align 1, !tbaa !2446
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %403, align 1, !tbaa !2447
  %404 = icmp eq i64 %394, 0
  %405 = zext i1 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %405, i8* %406, align 1, !tbaa !2448
  %407 = lshr i64 %394, 63
  %408 = trunc i64 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %408, i8* %409, align 1, !tbaa !2449
  %410 = lshr i64 %394, 63
  %411 = xor i64 %407, %410
  %412 = add nuw nsw i64 %411, %410
  %413 = icmp eq i64 %412, 2
  %414 = zext i1 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %414, i8* %415, align 1, !tbaa !2450
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 36
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 6
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 6
  store i64 %421, i64* %PC
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %423 = load i8, i8* %422, align 1, !tbaa !2449
  %424 = icmp ne i8 %423, 0
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %426 = load i8, i8* %425, align 1, !tbaa !2450
  %427 = icmp ne i8 %426, 0
  %428 = xor i1 %424, %427
  %429 = xor i1 %428, true
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %432 = select i1 %428, i64 %419, i64 %417
  store i64 %432, i64* %431, align 8, !tbaa !2428
  %433 = load i8, i8* %BRANCH_TAKEN
  %434 = icmp eq i8 %433, 1
  br i1 %434, label %block_401978, label %block_40195a

block_401978:                                     ; preds = %block_40194f
  %435 = load i64, i64* %RBP
  %436 = sub i64 %435, 16
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 4
  store i64 %438, i64* %PC
  %439 = inttoptr i64 %436 to i64*
  %440 = load i64, i64* %439
  store i64 %440, i64* %RAX, align 8, !tbaa !2428
  %441 = load i64, i64* %RAX
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 4
  store i64 %443, i64* %PC
  %444 = add i64 -1, %441
  store i64 %444, i64* %RAX, align 8, !tbaa !2428
  %445 = icmp ult i64 %444, %441
  %446 = icmp ult i64 %444, -1
  %447 = or i1 %445, %446
  %448 = zext i1 %447 to i8
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %448, i8* %449, align 1, !tbaa !2432
  %450 = trunc i64 %444 to i32
  %451 = and i32 %450, 255
  %452 = call i32 @llvm.ctpop.i32(i32 %451) #16
  %453 = trunc i32 %452 to i8
  %454 = and i8 %453, 1
  %455 = xor i8 %454, 1
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %455, i8* %456, align 1, !tbaa !2446
  %457 = xor i64 -1, %441
  %458 = xor i64 %457, %444
  %459 = lshr i64 %458, 4
  %460 = trunc i64 %459 to i8
  %461 = and i8 %460, 1
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %461, i8* %462, align 1, !tbaa !2447
  %463 = icmp eq i64 %444, 0
  %464 = zext i1 %463 to i8
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %464, i8* %465, align 1, !tbaa !2448
  %466 = lshr i64 %444, 63
  %467 = trunc i64 %466 to i8
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %467, i8* %468, align 1, !tbaa !2449
  %469 = lshr i64 %441, 63
  %470 = xor i64 %466, %469
  %471 = xor i64 %466, 1
  %472 = add nuw nsw i64 %470, %471
  %473 = icmp eq i64 %472, 2
  %474 = zext i1 %473 to i8
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %474, i8* %475, align 1, !tbaa !2450
  %476 = load i64, i64* %RBP
  %477 = sub i64 %476, 16
  %478 = load i64, i64* %RAX
  %479 = load i64, i64* %PC
  %480 = add i64 %479, 4
  store i64 %480, i64* %PC
  %481 = inttoptr i64 %477 to i64*
  store i64 %478, i64* %481
  %482 = load i64, i64* %PC
  %483 = sub i64 %482, 329
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 5
  store i64 %485, i64* %PC
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %483, i64* %486, align 8, !tbaa !2428
  br label %block_40183b

block_401989:                                     ; preds = %block_4018bf, %block_40183b
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_40183b ], [ %700, %block_4018bf ]
  %487 = load i64, i64* %PC
  %488 = add i64 %487, 10
  store i64 %488, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 236), i64* %RDI, align 8, !tbaa !2428
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 8
  store i64 %490, i64* %PC
  %491 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 616) to i64*)
  store i64 %491, i64* %RSI, align 8, !tbaa !2428
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 2
  store i64 %493, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %494 = load i64, i64* %PC
  %495 = sub i64 %494, 4429
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 5
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 5
  store i64 %499, i64* %PC
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %501 = load i64, i64* %500, align 8, !tbaa !2428
  %502 = add i64 %501, -8
  %503 = inttoptr i64 %502 to i64*
  store i64 %497, i64* %503
  store i64 %502, i64* %500, align 8, !tbaa !2428
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %495, i64* %504, align 8, !tbaa !2428
  %505 = load i64, i64* %PC
  %506 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %505, %struct.Memory* %MEMORY.3)
  %507 = load i64, i64* %RCX
  %508 = load i32, i32* %ECX
  %509 = zext i32 %508 to i64
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 2
  store i64 %511, i64* %PC
  %512 = xor i64 %509, %507
  %513 = trunc i64 %512 to i32
  %514 = and i64 %512, 4294967295
  store i64 %514, i64* %RCX, align 8, !tbaa !2428
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %515, align 1, !tbaa !2432
  %516 = and i32 %513, 255
  %517 = call i32 @llvm.ctpop.i32(i32 %516) #16
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = xor i8 %519, 1
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %520, i8* %521, align 1, !tbaa !2446
  %522 = icmp eq i32 %513, 0
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %523, i8* %524, align 1, !tbaa !2448
  %525 = lshr i32 %513, 31
  %526 = trunc i32 %525 to i8
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %526, i8* %527, align 1, !tbaa !2449
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %528, align 1, !tbaa !2450
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %529, align 1, !tbaa !2447
  %530 = load i32, i32* %ECX
  %531 = zext i32 %530 to i64
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 2
  store i64 %533, i64* %PC
  %534 = and i64 %531, 4294967295
  store i64 %534, i64* %RSI, align 8, !tbaa !2428
  %535 = load i64, i64* %RBP
  %536 = sub i64 %535, 56
  %537 = load i32, i32* %EAX
  %538 = zext i32 %537 to i64
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 3
  store i64 %540, i64* %PC
  %541 = inttoptr i64 %536 to i32*
  store i32 %537, i32* %541
  %542 = load i64, i64* %RSI
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 3
  store i64 %544, i64* %PC
  store i64 %542, i64* %RAX, align 8, !tbaa !2428
  %545 = load i64, i64* %RSP
  %546 = load i64, i64* %PC
  %547 = add i64 %546, 4
  store i64 %547, i64* %PC
  %548 = add i64 64, %545
  store i64 %548, i64* %RSP, align 8, !tbaa !2428
  %549 = icmp ult i64 %548, %545
  %550 = icmp ult i64 %548, 64
  %551 = or i1 %549, %550
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %552, i8* %553, align 1, !tbaa !2432
  %554 = trunc i64 %548 to i32
  %555 = and i32 %554, 255
  %556 = call i32 @llvm.ctpop.i32(i32 %555) #16
  %557 = trunc i32 %556 to i8
  %558 = and i8 %557, 1
  %559 = xor i8 %558, 1
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %559, i8* %560, align 1, !tbaa !2446
  %561 = xor i64 64, %545
  %562 = xor i64 %561, %548
  %563 = lshr i64 %562, 4
  %564 = trunc i64 %563 to i8
  %565 = and i8 %564, 1
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %565, i8* %566, align 1, !tbaa !2447
  %567 = icmp eq i64 %548, 0
  %568 = zext i1 %567 to i8
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %568, i8* %569, align 1, !tbaa !2448
  %570 = lshr i64 %548, 63
  %571 = trunc i64 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %571, i8* %572, align 1, !tbaa !2449
  %573 = lshr i64 %545, 63
  %574 = xor i64 %570, %573
  %575 = add nuw nsw i64 %574, %570
  %576 = icmp eq i64 %575, 2
  %577 = zext i1 %576 to i8
  %578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %577, i8* %578, align 1, !tbaa !2450
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 1
  store i64 %580, i64* %PC
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %582 = load i64, i64* %581, align 8, !tbaa !2428
  %583 = add i64 %582, 8
  %584 = inttoptr i64 %582 to i64*
  %585 = load i64, i64* %584
  store i64 %585, i64* %RBP, align 8, !tbaa !2428
  store i64 %583, i64* %581, align 8, !tbaa !2428
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 1
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %590 = load i64, i64* %589, align 8, !tbaa !2428
  %591 = inttoptr i64 %590 to i64*
  %592 = load i64, i64* %591
  store i64 %592, i64* %588, align 8, !tbaa !2428
  %593 = add i64 %590, 8
  store i64 %593, i64* %589, align 8, !tbaa !2428
  ret %struct.Memory* %506

block_401846:                                     ; preds = %block_40183b
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 10
  store i64 %595, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 35), i64* %RDI, align 8, !tbaa !2428
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 8
  store i64 %597, i64* %PC
  %598 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 424) to i64*)
  store i64 %598, i64* %RSI, align 8, !tbaa !2428
  %599 = load i64, i64* %PC
  %600 = add i64 %599, 2
  store i64 %600, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %601 = load i64, i64* %PC
  %602 = sub i64 %601, 4106
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 5
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 5
  store i64 %606, i64* %PC
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %608 = load i64, i64* %607, align 8, !tbaa !2428
  %609 = add i64 %608, -8
  %610 = inttoptr i64 %609 to i64*
  store i64 %604, i64* %610
  store i64 %609, i64* %607, align 8, !tbaa !2428
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %602, i64* %611, align 8, !tbaa !2428
  %612 = load i64, i64* %PC
  %613 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %612, %struct.Memory* %MEMORY.0)
  %614 = load i64, i64* %PC
  %615 = add i64 %614, 10
  store i64 %615, i64* %PC
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 20
  %618 = load i32, i32* %EAX
  %619 = zext i32 %618 to i64
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 3
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %617 to i32*
  store i32 %618, i32* %622
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 5988
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 5
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %630 = load i64, i64* %629, align 8, !tbaa !2428
  %631 = add i64 %630, -8
  %632 = inttoptr i64 %631 to i64*
  store i64 %626, i64* %632
  store i64 %631, i64* %629, align 8, !tbaa !2428
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %624, i64* %633, align 8, !tbaa !2428
  %634 = load i64, i64* %PC
  %635 = call %struct.Memory* @sub_402fd0_primal_net_simplex_renamed_(%struct.State* %0, i64 %634, %struct.Memory* %613)
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 10
  store i64 %637, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 69), i64* %RDI, align 8, !tbaa !2428
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 8
  store i64 %639, i64* %PC
  %640 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 600) to i64*)
  store i64 %640, i64* %RSI, align 8, !tbaa !2428
  %641 = load i64, i64* %RBP
  %642 = sub i64 %641, 32
  %643 = load i64, i64* %RAX
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %642 to i64*
  store i64 %643, i64* %646
  %647 = load i64, i64* %PC
  %648 = add i64 %647, 2
  store i64 %648, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %649 = load i64, i64* %PC
  %650 = sub i64 %649, 4153
  %651 = load i64, i64* %PC
  %652 = add i64 %651, 5
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 5
  store i64 %654, i64* %PC
  %655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %656 = load i64, i64* %655, align 8, !tbaa !2428
  %657 = add i64 %656, -8
  %658 = inttoptr i64 %657 to i64*
  store i64 %652, i64* %658
  store i64 %657, i64* %655, align 8, !tbaa !2428
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %650, i64* %659, align 8, !tbaa !2428
  %660 = load i64, i64* %PC
  %661 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %660, %struct.Memory* %635)
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 10
  store i64 %663, i64* %PC
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %664 = load i64, i64* %RBP
  %665 = sub i64 %664, 36
  %666 = load i32, i32* %EAX
  %667 = zext i32 %666 to i64
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 3
  store i64 %669, i64* %PC
  %670 = inttoptr i64 %665 to i32*
  store i32 %666, i32* %670
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 1301
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 5
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 5
  store i64 %676, i64* %PC
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %678 = load i64, i64* %677, align 8, !tbaa !2428
  %679 = add i64 %678, -8
  %680 = inttoptr i64 %679 to i64*
  store i64 %674, i64* %680
  store i64 %679, i64* %677, align 8, !tbaa !2428
  %681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %672, i64* %681, align 8, !tbaa !2428
  %682 = load i64, i64* %PC
  %683 = call %struct.Memory* @sub_401db0_flow_cost_renamed_(%struct.State* %0, i64 %682, %struct.Memory* %661)
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 10
  store i64 %685, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 103), i64* %RDI, align 8, !tbaa !2428
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 2
  store i64 %687, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %688 = load i64, i64* %PC
  %689 = sub i64 %688, 4188
  %690 = load i64, i64* %PC
  %691 = add i64 %690, 5
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 5
  store i64 %693, i64* %PC
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %695 = load i64, i64* %694, align 8, !tbaa !2428
  %696 = add i64 %695, -8
  %697 = inttoptr i64 %696 to i64*
  store i64 %691, i64* %697
  store i64 %696, i64* %694, align 8, !tbaa !2428
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %689, i64* %698, align 8, !tbaa !2428
  %699 = load i64, i64* %PC
  %700 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %699, %struct.Memory* %683)
  %701 = load i64, i64* %RBP
  %702 = sub i64 %701, 16
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 5
  store i64 %704, i64* %PC
  %705 = inttoptr i64 %702 to i64*
  %706 = load i64, i64* %705
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %707, align 1, !tbaa !2432
  %708 = trunc i64 %706 to i32
  %709 = and i32 %708, 255
  %710 = call i32 @llvm.ctpop.i32(i32 %709) #16
  %711 = trunc i32 %710 to i8
  %712 = and i8 %711, 1
  %713 = xor i8 %712, 1
  %714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %713, i8* %714, align 1, !tbaa !2446
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %715, align 1, !tbaa !2447
  %716 = icmp eq i64 %706, 0
  %717 = zext i1 %716 to i8
  %718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %717, i8* %718, align 1, !tbaa !2448
  %719 = lshr i64 %706, 63
  %720 = trunc i64 %719 to i8
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %720, i8* %721, align 1, !tbaa !2449
  %722 = lshr i64 %706, 63
  %723 = xor i64 %719, %722
  %724 = add nuw nsw i64 %723, %722
  %725 = icmp eq i64 %724, 2
  %726 = zext i1 %725 to i8
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %726, i8* %727, align 1, !tbaa !2450
  %728 = load i64, i64* %RBP
  %729 = sub i64 %728, 40
  %730 = load i32, i32* %EAX
  %731 = zext i32 %730 to i64
  %732 = load i64, i64* %PC
  %733 = add i64 %732, 3
  store i64 %733, i64* %PC
  %734 = inttoptr i64 %729 to i32*
  store i32 %730, i32* %734
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 11
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 6
  %739 = load i64, i64* %PC
  %740 = add i64 %739, 6
  store i64 %740, i64* %PC
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %742 = load i8, i8* %741, align 1, !tbaa !2448
  %743 = icmp eq i8 %742, 0
  %744 = zext i1 %743 to i8
  store i8 %744, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %746 = select i1 %743, i64 %736, i64 %738
  store i64 %746, i64* %745, align 8, !tbaa !2428
  %747 = load i8, i8* %BRANCH_TAKEN
  %748 = icmp eq i8 %747, 1
  %749 = load i64, i64* %PC
  br i1 %748, label %block_4018c4, label %block_4018bf

block_401919:                                     ; preds = %block_4018c4, %block_401914
  %MEMORY.4 = phi %struct.Memory* [ %700, %block_4018c4 ], [ %MEMORY.1, %block_401914 ]
  %750 = load i64, i64* %PC
  %751 = add i64 %750, 10
  store i64 %751, i64* %PC
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %752 = load i64, i64* %PC
  %753 = sub i64 %752, 2067
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 5
  %756 = load i64, i64* %PC
  %757 = add i64 %756, 5
  store i64 %757, i64* %PC
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %759 = load i64, i64* %758, align 8, !tbaa !2428
  %760 = add i64 %759, -8
  %761 = inttoptr i64 %760 to i64*
  store i64 %755, i64* %761
  store i64 %760, i64* %758, align 8, !tbaa !2428
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %753, i64* %762, align 8, !tbaa !2428
  %763 = load i64, i64* %PC
  %764 = call %struct.Memory* @sub_401110_price_out_impl_renamed_(%struct.State* %0, i64 %763, %struct.Memory* %MEMORY.4)
  %765 = load i64, i64* %RBP
  %766 = sub i64 %765, 8
  %767 = load i64, i64* %RAX
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 4
  store i64 %769, i64* %PC
  %770 = inttoptr i64 %766 to i64*
  store i64 %767, i64* %770
  %771 = load i64, i64* %RBP
  %772 = sub i64 %771, 8
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 5
  store i64 %774, i64* %PC
  %775 = inttoptr i64 %772 to i64*
  %776 = load i64, i64* %775
  %777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %777, align 1, !tbaa !2432
  %778 = trunc i64 %776 to i32
  %779 = and i32 %778, 255
  %780 = call i32 @llvm.ctpop.i32(i32 %779) #16
  %781 = trunc i32 %780 to i8
  %782 = and i8 %781, 1
  %783 = xor i8 %782, 1
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %783, i8* %784, align 1, !tbaa !2446
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %785, align 1, !tbaa !2447
  %786 = icmp eq i64 %776, 0
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %787, i8* %788, align 1, !tbaa !2448
  %789 = lshr i64 %776, 63
  %790 = trunc i64 %789 to i8
  %791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %790, i8* %791, align 1, !tbaa !2449
  %792 = lshr i64 %776, 63
  %793 = xor i64 %789, %792
  %794 = add nuw nsw i64 %793, %792
  %795 = icmp eq i64 %794, 2
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %796, i8* %797, align 1, !tbaa !2450
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 30
  %800 = load i64, i64* %PC
  %801 = add i64 %800, 6
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 6
  store i64 %803, i64* %PC
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %805 = load i8, i8* %804, align 1, !tbaa !2448
  store i8 %805, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %807 = icmp ne i8 %805, 0
  %808 = select i1 %807, i64 %799, i64 %801
  store i64 %808, i64* %806, align 8, !tbaa !2428
  %809 = load i8, i8* %BRANCH_TAKEN
  %810 = icmp eq i8 %809, 1
  br i1 %810, label %block_40194f, label %block_401937

block_4018c4:                                     ; preds = %block_401846
  %811 = add i64 %749, 9
  store i64 %811, i64* %PC
  %812 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 440) to i64*)
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %813, align 1, !tbaa !2432
  %814 = trunc i64 %812 to i32
  %815 = and i32 %814, 255
  %816 = call i32 @llvm.ctpop.i32(i32 %815) #16
  %817 = trunc i32 %816 to i8
  %818 = and i8 %817, 1
  %819 = xor i8 %818, 1
  %820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %819, i8* %820, align 1, !tbaa !2446
  %821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %821, align 1, !tbaa !2447
  %822 = icmp eq i64 %812, 0
  %823 = zext i1 %822 to i8
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %823, i8* %824, align 1, !tbaa !2448
  %825 = lshr i64 %812, 63
  %826 = trunc i64 %825 to i8
  %827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %826, i8* %827, align 1, !tbaa !2449
  %828 = lshr i64 %812, 63
  %829 = xor i64 %825, %828
  %830 = add nuw nsw i64 %829, %828
  %831 = icmp eq i64 %830, 2
  %832 = zext i1 %831 to i8
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %832, i8* %833, align 1, !tbaa !2450
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 76
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 6
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 6
  store i64 %839, i64* %PC
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %841 = load i8, i8* %840, align 1, !tbaa !2448
  store i8 %841, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %843 = icmp ne i8 %841, 0
  %844 = select i1 %843, i64 %835, i64 %837
  store i64 %844, i64* %842, align 8, !tbaa !2428
  %845 = load i8, i8* %BRANCH_TAKEN
  %846 = icmp eq i8 %845, 1
  br i1 %846, label %block_401919, label %block_4018d3
}

; Function Attrs: noinline
define %struct.Memory* @sub_400940_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400940:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (i64* @stdout to i64)
  %37 = icmp ult i64 %33, ptrtoint (i64* @stdout to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (i64* @stdout to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (i64* @stdout to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400968, label %block_400951

block_40095b:                                     ; preds = %block_400951
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %163 [
    i64 4196714, label %block_40096a
    i64 4196707, label %block_400963
  ]

block_400951:                                     ; preds = %block_400940
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = and i64 %99, %98
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 1, !tbaa !2432
  %104 = trunc i64 %102 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2446
  %111 = icmp eq i64 %102, 0
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %112, i8* %113, align 1, !tbaa !2448
  %114 = lshr i64 %102, 63
  %115 = trunc i64 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %115, i8* %116, align 1, !tbaa !2449
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2450
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %118, align 1, !tbaa !2447
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 15
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 2
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %126 = load i8, i8* %125, align 1, !tbaa !2448
  store i8 %126, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %128 = icmp ne i8 %126, 0
  %129 = select i1 %128, i64 %120, i64 %122
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_400968, label %block_40095b

block_400968:                                     ; preds = %block_400963, %block_400951, %block_400940
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400940 ], [ %2, %block_400951 ], [ %2, %block_400963 ]
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40096a:                                     ; preds = %block_40095b
  %147 = load i64, i64* %RAX
  %148 = load i64, i64* %RAX
  %149 = add i64 %148, %147
  %150 = load i16, i16* %AX
  %151 = zext i16 %150 to i64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = load i64, i64* %PC
  %155 = tail call %struct.Memory* @sub_400970_register_tm_clones(%struct.State* %0, i64 %154, %struct.Memory* %2)
  ret %struct.Memory* %155

block_400963:                                     ; preds = %block_40095b
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %RAX
  %158 = add i64 %157, %156
  %159 = load i32, i32* %EAX
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  br label %block_400968

; <label>:163:                                    ; preds = %block_40095b
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_400900__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400900:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_404710___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4046a0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_605ff0__got_type, %seg_605ff0__got_type* @seg_605ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_608f68___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_402340_dual_feasible(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402340:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 9
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ESI = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 11
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RAX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 5
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RCX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 7
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 9
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 11
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RDI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 13
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RSP = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 15
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RBP = bitcast %union.anon* %39 to i64*
  %40 = load i64, i64* %RBP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %44 = load i64, i64* %43, align 8, !tbaa !2428
  %45 = add i64 %44, -8
  %46 = inttoptr i64 %45 to i64*
  store i64 %40, i64* %46
  store i64 %45, i64* %43, align 8, !tbaa !2428
  %47 = load i64, i64* %RSP
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  store i64 %47, i64* %RBP, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC
  %53 = sub i64 %50, 64
  store i64 %53, i64* %RSP, align 8, !tbaa !2428
  %54 = icmp ult i64 %50, 64
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %55, i8* %56, align 1, !tbaa !2432
  %57 = trunc i64 %53 to i32
  %58 = and i32 %57, 255
  %59 = call i32 @llvm.ctpop.i32(i32 %58) #16
  %60 = trunc i32 %59 to i8
  %61 = and i8 %60, 1
  %62 = xor i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %62, i8* %63, align 1, !tbaa !2446
  %64 = xor i64 64, %50
  %65 = xor i64 %64, %53
  %66 = lshr i64 %65, 4
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 1
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %68, i8* %69, align 1, !tbaa !2447
  %70 = icmp eq i64 %53, 0
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = lshr i64 %53, 63
  %74 = trunc i64 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %50, 63
  %77 = xor i64 %73, %76
  %78 = add nuw nsw i64 %77, %76
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %80, i8* %81, align 1, !tbaa !2450
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RDI
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 16
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92
  store i64 %93, i64* %RDI, align 8, !tbaa !2428
  %94 = load i64, i64* %RDI
  %95 = add i64 %94, 576
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 7
  store i64 %97, i64* %PC
  %98 = inttoptr i64 %95 to i64*
  %99 = load i64, i64* %98
  store i64 %99, i64* %RDI, align 8, !tbaa !2428
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 32
  %102 = load i64, i64* %RDI
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %101 to i64*
  store i64 %102, i64* %105
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 16
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 4
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %RDI
  %113 = add i64 %112, 568
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 7
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i64*
  %117 = load i64, i64* %116
  store i64 %117, i64* %RDI, align 8, !tbaa !2428
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 24
  %120 = load i64, i64* %RDI
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123
  br label %block_40236a

block_40244e:                                     ; preds = %block_402417, %block_4023f8
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4023f8 ], [ %MEMORY.1, %block_402417 ]
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 10
  store i64 %125, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 611), i64* %RSI, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 8
  store i64 %127, i64* %PC
  %128 = load i64, i64* @stderr
  store i64 %128, i64* %RDI, align 8, !tbaa !2428
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 2
  store i64 %130, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %131 = load i64, i64* %PC
  %132 = sub i64 %131, 7122
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 5
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = add i64 %138, -8
  %140 = inttoptr i64 %139 to i64*
  store i64 %134, i64* %140
  store i64 %139, i64* %137, align 8, !tbaa !2428
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %132, i64* %141, align 8, !tbaa !2428
  %142 = load i64, i64* %PC
  %143 = call %struct.Memory* @ext_608ff8_fprintf(%struct.State* %0, i64 %142, %struct.Memory* %MEMORY.0)
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 10
  store i64 %145, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 634), i64* %RSI, align 8, !tbaa !2428
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 8
  store i64 %147, i64* %PC
  %148 = load i64, i64* @stderr
  store i64 %148, i64* %RDI, align 8, !tbaa !2428
  %149 = load i64, i64* %RBP
  %150 = sub i64 %149, 60
  %151 = load i32, i32* %EAX
  %152 = zext i32 %151 to i64
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 3
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %150 to i32*
  store i32 %151, i32* %155
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 2
  store i64 %157, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %158 = load i64, i64* %PC
  %159 = sub i64 %158, 7150
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  %162 = load i64, i64* %PC
  %163 = add i64 %162, 5
  store i64 %163, i64* %PC
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = add i64 %165, -8
  %167 = inttoptr i64 %166 to i64*
  store i64 %161, i64* %167
  store i64 %166, i64* %164, align 8, !tbaa !2428
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %159, i64* %168, align 8, !tbaa !2428
  %169 = load i64, i64* %PC
  %170 = call %struct.Memory* @ext_608ff8_fprintf(%struct.State* %0, i64 %169, %struct.Memory* %143)
  %171 = load i64, i64* %RBP
  %172 = sub i64 %171, 8
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 8
  store i64 %174, i64* %PC
  %175 = inttoptr i64 %172 to i64*
  store i64 1, i64* %175
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 64
  %178 = load i32, i32* %EAX
  %179 = zext i32 %178 to i64
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %177 to i32*
  store i32 %178, i32* %182
  br label %block_40248e

block_4023c3:                                     ; preds = %block_4023af
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 5
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 5
  store i64 %186, i64* %PC
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %184, i64* %187, align 8, !tbaa !2428
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 44
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 3
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %189 to i32*
  %193 = load i32, i32* %192
  %194 = zext i32 %193 to i64
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = load i64, i64* %RAX
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 3
  store i64 %197, i64* %PC
  %198 = trunc i64 %195 to i32
  %199 = sub i32 %198, 2
  %200 = zext i32 %199 to i64
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = icmp ult i32 %198, 2
  %202 = zext i1 %201 to i8
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %202, i8* %203, align 1, !tbaa !2432
  %204 = and i32 %199, 255
  %205 = call i32 @llvm.ctpop.i32(i32 %204) #16
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = xor i8 %207, 1
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %208, i8* %209, align 1, !tbaa !2446
  %210 = xor i64 2, %195
  %211 = trunc i64 %210 to i32
  %212 = xor i32 %211, %199
  %213 = lshr i32 %212, 4
  %214 = trunc i32 %213 to i8
  %215 = and i8 %214, 1
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %215, i8* %216, align 1, !tbaa !2447
  %217 = icmp eq i32 %199, 0
  %218 = zext i1 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %218, i8* %219, align 1, !tbaa !2448
  %220 = lshr i32 %199, 31
  %221 = trunc i32 %220 to i8
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %221, i8* %222, align 1, !tbaa !2449
  %223 = lshr i32 %198, 31
  %224 = xor i32 %220, %223
  %225 = add nuw nsw i32 %224, %223
  %226 = icmp eq i32 %225, 2
  %227 = zext i1 %226 to i8
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %227, i8* %228, align 1, !tbaa !2450
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 56
  %231 = load i32, i32* %EAX
  %232 = zext i32 %231 to i64
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 3
  store i64 %234, i64* %PC
  %235 = inttoptr i64 %230 to i32*
  store i32 %231, i32* %235
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 49
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 6
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 6
  store i64 %241, i64* %PC
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %243 = load i8, i8* %242, align 1, !tbaa !2448
  store i8 %243, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %245 = icmp ne i8 %243, 0
  %246 = select i1 %245, i64 %237, i64 %239
  store i64 %246, i64* %244, align 8, !tbaa !2428
  %247 = load i8, i8* %BRANCH_TAKEN
  %248 = icmp eq i8 %247, 1
  br i1 %248, label %block_402402, label %block_4023d7

block_402441:                                     ; preds = %block_40236a
  %249 = sub i64 %316, 8
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 8
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  store i64 0, i64* %252
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 69
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 5
  store i64 %256, i64* %PC
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %254, i64* %257, align 8, !tbaa !2428
  br label %block_40248e

block_40236a:                                     ; preds = %block_40242b, %block_402340
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_402340 ], [ %MEMORY.2, %block_40242b ]
  %258 = load i64, i64* %RBP
  %259 = sub i64 %258, 24
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %259 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = load i64, i64* %RAX
  %265 = load i64, i64* %RBP
  %266 = sub i64 %265, 32
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 4
  store i64 %268, i64* %PC
  %269 = inttoptr i64 %266 to i64*
  %270 = load i64, i64* %269
  %271 = sub i64 %264, %270
  %272 = icmp ugt i64 %270, %264
  %273 = zext i1 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %273, i8* %274, align 1, !tbaa !2432
  %275 = trunc i64 %271 to i32
  %276 = and i32 %275, 255
  %277 = call i32 @llvm.ctpop.i32(i32 %276) #16
  %278 = trunc i32 %277 to i8
  %279 = and i8 %278, 1
  %280 = xor i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %280, i8* %281, align 1, !tbaa !2446
  %282 = xor i64 %270, %264
  %283 = xor i64 %282, %271
  %284 = lshr i64 %283, 4
  %285 = trunc i64 %284 to i8
  %286 = and i8 %285, 1
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %286, i8* %287, align 1, !tbaa !2447
  %288 = icmp eq i64 %271, 0
  %289 = zext i1 %288 to i8
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %289, i8* %290, align 1, !tbaa !2448
  %291 = lshr i64 %271, 63
  %292 = trunc i64 %291 to i8
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %292, i8* %293, align 1, !tbaa !2449
  %294 = lshr i64 %264, 63
  %295 = lshr i64 %270, 63
  %296 = xor i64 %295, %294
  %297 = xor i64 %291, %294
  %298 = add nuw nsw i64 %297, %296
  %299 = icmp eq i64 %298, 2
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %300, i8* %301, align 1, !tbaa !2450
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 207
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 6
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 6
  store i64 %307, i64* %PC
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %309 = load i8, i8* %308, align 1, !tbaa !2432
  %310 = icmp eq i8 %309, 0
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %313 = select i1 %310, i64 %303, i64 %305
  store i64 %313, i64* %312, align 8, !tbaa !2428
  %314 = load i8, i8* %BRANCH_TAKEN
  %315 = icmp eq i8 %314, 1
  %316 = load i64, i64* %RBP
  br i1 %315, label %block_402441, label %block_402378

block_4023af:                                     ; preds = %block_402378
  %317 = load i64, i64* %RBP
  %318 = sub i64 %317, 44
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 3
  store i64 %320, i64* %PC
  %321 = inttoptr i64 %318 to i32*
  %322 = load i32, i32* %321
  %323 = zext i32 %322 to i64
  store i64 %323, i64* %RAX, align 8, !tbaa !2428
  %324 = load i64, i64* %RAX
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  %327 = trunc i64 %324 to i32
  %328 = sub i32 %327, 2
  %329 = zext i32 %328 to i64
  store i64 %329, i64* %RAX, align 8, !tbaa !2428
  %330 = icmp ult i32 %327, 2
  %331 = zext i1 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %331, i8* %332, align 1, !tbaa !2432
  %333 = and i32 %328, 255
  %334 = call i32 @llvm.ctpop.i32(i32 %333) #16
  %335 = trunc i32 %334 to i8
  %336 = and i8 %335, 1
  %337 = xor i8 %336, 1
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %337, i8* %338, align 1, !tbaa !2446
  %339 = xor i64 2, %324
  %340 = trunc i64 %339 to i32
  %341 = xor i32 %340, %328
  %342 = lshr i32 %341, 4
  %343 = trunc i32 %342 to i8
  %344 = and i8 %343, 1
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %344, i8* %345, align 1, !tbaa !2447
  %346 = icmp eq i32 %328, 0
  %347 = zext i1 %346 to i8
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %347, i8* %348, align 1, !tbaa !2448
  %349 = lshr i32 %328, 31
  %350 = trunc i32 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %350, i8* %351, align 1, !tbaa !2449
  %352 = lshr i32 %327, 31
  %353 = xor i32 %349, %352
  %354 = add nuw nsw i32 %353, %352
  %355 = icmp eq i32 %354, 2
  %356 = zext i1 %355 to i8
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %356, i8* %357, align 1, !tbaa !2450
  %358 = load i64, i64* %RBP
  %359 = sub i64 %358, 52
  %360 = load i32, i32* %EAX
  %361 = zext i32 %360 to i64
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 3
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %359 to i32*
  store i32 %360, i32* %364
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 31
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 6
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 6
  store i64 %370, i64* %PC
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %372 = load i8, i8* %371, align 1, !tbaa !2432
  store i8 %372, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %374 = icmp ne i8 %372, 0
  %375 = select i1 %374, i64 %366, i64 %368
  store i64 %375, i64* %373, align 8, !tbaa !2428
  %376 = load i8, i8* %BRANCH_TAKEN
  %377 = icmp eq i8 %376, 1
  br i1 %377, label %block_4023dc, label %block_4023c3

block_4023fd:                                     ; preds = %block_4023dc
  %378 = add i64 %579, 46
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 5
  store i64 %380, i64* %PC
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %378, i64* %381, align 8, !tbaa !2428
  br label %block_40242b

block_40242b:                                     ; preds = %block_40241c, %block_402426, %block_4023fd
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_402426 ], [ %MEMORY.1, %block_4023fd ], [ %MEMORY.1, %block_40241c ]
  %382 = load i64, i64* %PC
  %383 = add i64 %382, 5
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 5
  store i64 %385, i64* %PC
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %383, i64* %386, align 8, !tbaa !2428
  %387 = load i64, i64* %RBP
  %388 = sub i64 %387, 24
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = inttoptr i64 %388 to i64*
  %392 = load i64, i64* %391
  store i64 %392, i64* %RAX, align 8, !tbaa !2428
  %393 = load i64, i64* %RAX
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = add i64 64, %393
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = icmp ult i64 %396, %393
  %398 = icmp ult i64 %396, 64
  %399 = or i1 %397, %398
  %400 = zext i1 %399 to i8
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %400, i8* %401, align 1, !tbaa !2432
  %402 = trunc i64 %396 to i32
  %403 = and i32 %402, 255
  %404 = call i32 @llvm.ctpop.i32(i32 %403) #16
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = xor i8 %406, 1
  %408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %407, i8* %408, align 1, !tbaa !2446
  %409 = xor i64 64, %393
  %410 = xor i64 %409, %396
  %411 = lshr i64 %410, 4
  %412 = trunc i64 %411 to i8
  %413 = and i8 %412, 1
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %413, i8* %414, align 1, !tbaa !2447
  %415 = icmp eq i64 %396, 0
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %416, i8* %417, align 1, !tbaa !2448
  %418 = lshr i64 %396, 63
  %419 = trunc i64 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %419, i8* %420, align 1, !tbaa !2449
  %421 = lshr i64 %393, 63
  %422 = xor i64 %418, %421
  %423 = add nuw nsw i64 %422, %418
  %424 = icmp eq i64 %423, 2
  %425 = zext i1 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %425, i8* %426, align 1, !tbaa !2450
  %427 = load i64, i64* %RBP
  %428 = sub i64 %427, 24
  %429 = load i64, i64* %RAX
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 4
  store i64 %431, i64* %PC
  %432 = inttoptr i64 %428 to i64*
  store i64 %429, i64* %432
  %433 = load i64, i64* %PC
  %434 = sub i64 %433, 210
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 5
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %434, i64* %437, align 8, !tbaa !2428
  br label %block_40236a

block_4023f8:                                     ; preds = %block_4023dc
  %438 = add i64 %579, 86
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 5
  store i64 %440, i64* %PC
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %438, i64* %441, align 8, !tbaa !2428
  br label %block_40244e

block_402426:                                     ; preds = %block_402378, %block_4023d7
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.1, %block_402378 ], [ %MEMORY.1, %block_4023d7 ]
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 5
  store i64 %445, i64* %PC
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %443, i64* %446, align 8, !tbaa !2428
  br label %block_40242b

block_4023dc:                                     ; preds = %block_4023af
  %447 = load i64, i64* %RAX
  %448 = load i32, i32* %EAX
  %449 = zext i32 %448 to i64
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 2
  store i64 %451, i64* %PC
  %452 = xor i64 %449, %447
  %453 = trunc i64 %452 to i32
  %454 = and i64 %452, 4294967295
  store i64 %454, i64* %RAX, align 8, !tbaa !2428
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %455, align 1, !tbaa !2432
  %456 = and i32 %453, 255
  %457 = call i32 @llvm.ctpop.i32(i32 %456) #16
  %458 = trunc i32 %457 to i8
  %459 = and i8 %458, 1
  %460 = xor i8 %459, 1
  %461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %460, i8* %461, align 1, !tbaa !2446
  %462 = icmp eq i32 %453, 0
  %463 = zext i1 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %463, i8* %464, align 1, !tbaa !2448
  %465 = lshr i32 %453, 31
  %466 = trunc i32 %465 to i8
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %466, i8* %467, align 1, !tbaa !2449
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %468, align 1, !tbaa !2450
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %469, align 1, !tbaa !2447
  %470 = load i32, i32* %EAX
  %471 = zext i32 %470 to i64
  %472 = load i64, i64* %PC
  %473 = add i64 %472, 2
  store i64 %473, i64* %PC
  %474 = and i64 %471, 4294967295
  store i64 %474, i64* %RCX, align 8, !tbaa !2428
  %475 = load i64, i64* %RBP
  %476 = sub i64 %475, 40
  %477 = load i64, i64* %PC
  %478 = add i64 %477, 4
  store i64 %478, i64* %PC
  %479 = inttoptr i64 %476 to i64*
  %480 = load i64, i64* %479
  store i64 %480, i64* %RDX, align 8, !tbaa !2428
  %481 = load i64, i64* %RBP
  %482 = sub i64 %481, 16
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 4
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i64*
  %486 = load i64, i64* %485
  store i64 %486, i64* %RSI, align 8, !tbaa !2428
  %487 = load i64, i64* %RCX
  %488 = load i64, i64* %RSI
  %489 = add i64 %488, 512
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 7
  store i64 %491, i64* %PC
  %492 = inttoptr i64 %489 to i64*
  %493 = load i64, i64* %492
  %494 = sub i64 %487, %493
  store i64 %494, i64* %RCX, align 8, !tbaa !2428
  %495 = icmp ugt i64 %493, %487
  %496 = zext i1 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %496, i8* %497, align 1, !tbaa !2432
  %498 = trunc i64 %494 to i32
  %499 = and i32 %498, 255
  %500 = call i32 @llvm.ctpop.i32(i32 %499) #16
  %501 = trunc i32 %500 to i8
  %502 = and i8 %501, 1
  %503 = xor i8 %502, 1
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %503, i8* %504, align 1, !tbaa !2446
  %505 = xor i64 %493, %487
  %506 = xor i64 %505, %494
  %507 = lshr i64 %506, 4
  %508 = trunc i64 %507 to i8
  %509 = and i8 %508, 1
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %509, i8* %510, align 1, !tbaa !2447
  %511 = icmp eq i64 %494, 0
  %512 = zext i1 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %512, i8* %513, align 1, !tbaa !2448
  %514 = lshr i64 %494, 63
  %515 = trunc i64 %514 to i8
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %515, i8* %516, align 1, !tbaa !2449
  %517 = lshr i64 %487, 63
  %518 = lshr i64 %493, 63
  %519 = xor i64 %518, %517
  %520 = xor i64 %514, %517
  %521 = add nuw nsw i64 %520, %519
  %522 = icmp eq i64 %521, 2
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %523, i8* %524, align 1, !tbaa !2450
  %525 = load i64, i64* %RDX
  %526 = load i64, i64* %RCX
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 3
  store i64 %528, i64* %PC
  %529 = sub i64 %525, %526
  %530 = icmp ult i64 %525, %526
  %531 = zext i1 %530 to i8
  %532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %531, i8* %532, align 1, !tbaa !2432
  %533 = trunc i64 %529 to i32
  %534 = and i32 %533, 255
  %535 = call i32 @llvm.ctpop.i32(i32 %534) #16
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %538, i8* %539, align 1, !tbaa !2446
  %540 = xor i64 %526, %525
  %541 = xor i64 %540, %529
  %542 = lshr i64 %541, 4
  %543 = trunc i64 %542 to i8
  %544 = and i8 %543, 1
  %545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %544, i8* %545, align 1, !tbaa !2447
  %546 = icmp eq i64 %529, 0
  %547 = zext i1 %546 to i8
  %548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %547, i8* %548, align 1, !tbaa !2448
  %549 = lshr i64 %529, 63
  %550 = trunc i64 %549 to i8
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %550, i8* %551, align 1, !tbaa !2449
  %552 = lshr i64 %525, 63
  %553 = lshr i64 %526, 63
  %554 = xor i64 %553, %552
  %555 = xor i64 %549, %552
  %556 = add nuw nsw i64 %555, %554
  %557 = icmp eq i64 %556, 2
  %558 = zext i1 %557 to i8
  %559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %558, i8* %559, align 1, !tbaa !2450
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 11
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 6
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 6
  store i64 %565, i64* %PC
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %567 = load i8, i8* %566, align 1, !tbaa !2449
  %568 = icmp ne i8 %567, 0
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %570 = load i8, i8* %569, align 1, !tbaa !2450
  %571 = icmp ne i8 %570, 0
  %572 = xor i1 %568, %571
  %573 = xor i1 %572, true
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %576 = select i1 %572, i64 %563, i64 %561
  store i64 %576, i64* %575, align 8, !tbaa !2428
  %577 = load i8, i8* %BRANCH_TAKEN
  %578 = icmp eq i8 %577, 1
  %579 = load i64, i64* %PC
  br i1 %578, label %block_4023fd, label %block_4023f8

block_4023d7:                                     ; preds = %block_4023c3
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 79
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 5
  store i64 %583, i64* %PC
  %584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %581, i64* %584, align 8, !tbaa !2428
  br label %block_402426

block_40241c:                                     ; preds = %block_402402
  %585 = add i64 %915, 15
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 5
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %585, i64* %588, align 8, !tbaa !2428
  br label %block_40242b

block_402417:                                     ; preds = %block_402402
  %589 = add i64 %915, 55
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 5
  store i64 %591, i64* %PC
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %589, i64* %592, align 8, !tbaa !2428
  br label %block_40244e

block_40248e:                                     ; preds = %block_402441, %block_40244e
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.1, %block_402441 ], [ %170, %block_40244e ]
  %593 = load i64, i64* %RBP
  %594 = sub i64 %593, 8
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 4
  store i64 %596, i64* %PC
  %597 = inttoptr i64 %594 to i64*
  %598 = load i64, i64* %597
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = load i64, i64* %RSP
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 4
  store i64 %601, i64* %PC
  %602 = add i64 64, %599
  store i64 %602, i64* %RSP, align 8, !tbaa !2428
  %603 = icmp ult i64 %602, %599
  %604 = icmp ult i64 %602, 64
  %605 = or i1 %603, %604
  %606 = zext i1 %605 to i8
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %606, i8* %607, align 1, !tbaa !2432
  %608 = trunc i64 %602 to i32
  %609 = and i32 %608, 255
  %610 = call i32 @llvm.ctpop.i32(i32 %609) #16
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  %613 = xor i8 %612, 1
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %613, i8* %614, align 1, !tbaa !2446
  %615 = xor i64 64, %599
  %616 = xor i64 %615, %602
  %617 = lshr i64 %616, 4
  %618 = trunc i64 %617 to i8
  %619 = and i8 %618, 1
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %619, i8* %620, align 1, !tbaa !2447
  %621 = icmp eq i64 %602, 0
  %622 = zext i1 %621 to i8
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %622, i8* %623, align 1, !tbaa !2448
  %624 = lshr i64 %602, 63
  %625 = trunc i64 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %625, i8* %626, align 1, !tbaa !2449
  %627 = lshr i64 %599, 63
  %628 = xor i64 %624, %627
  %629 = add nuw nsw i64 %628, %624
  %630 = icmp eq i64 %629, 2
  %631 = zext i1 %630 to i8
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %631, i8* %632, align 1, !tbaa !2450
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 1
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %636 = load i64, i64* %635, align 8, !tbaa !2428
  %637 = add i64 %636, 8
  %638 = inttoptr i64 %636 to i64*
  %639 = load i64, i64* %638
  store i64 %639, i64* %RBP, align 8, !tbaa !2428
  store i64 %637, i64* %635, align 8, !tbaa !2428
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 1
  store i64 %641, i64* %PC
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %644 = load i64, i64* %643, align 8, !tbaa !2428
  %645 = inttoptr i64 %644 to i64*
  %646 = load i64, i64* %645
  store i64 %646, i64* %642, align 8, !tbaa !2428
  %647 = add i64 %644, 8
  store i64 %647, i64* %643, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_402378:                                     ; preds = %block_40236a
  %648 = sub i64 %316, 24
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = load i64, i64* %RAX
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 3
  store i64 %655, i64* %PC
  %656 = inttoptr i64 %653 to i64*
  %657 = load i64, i64* %656
  store i64 %657, i64* %RCX, align 8, !tbaa !2428
  %658 = load i64, i64* %RAX
  %659 = add i64 %658, 8
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 4
  store i64 %661, i64* %PC
  %662 = inttoptr i64 %659 to i64*
  %663 = load i64, i64* %662
  store i64 %663, i64* %RDX, align 8, !tbaa !2428
  %664 = load i64, i64* %RDX
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 3
  store i64 %666, i64* %PC
  %667 = inttoptr i64 %664 to i64*
  %668 = load i64, i64* %667
  store i64 %668, i64* %RDX, align 8, !tbaa !2428
  %669 = load i64, i64* %RCX
  %670 = load i64, i64* %RDX
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 3
  store i64 %672, i64* %PC
  %673 = sub i64 %669, %670
  store i64 %673, i64* %RCX, align 8, !tbaa !2428
  %674 = icmp ult i64 %669, %670
  %675 = zext i1 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %675, i8* %676, align 1, !tbaa !2432
  %677 = trunc i64 %673 to i32
  %678 = and i32 %677, 255
  %679 = call i32 @llvm.ctpop.i32(i32 %678) #16
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  %682 = xor i8 %681, 1
  %683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %682, i8* %683, align 1, !tbaa !2446
  %684 = xor i64 %670, %669
  %685 = xor i64 %684, %673
  %686 = lshr i64 %685, 4
  %687 = trunc i64 %686 to i8
  %688 = and i8 %687, 1
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %688, i8* %689, align 1, !tbaa !2447
  %690 = icmp eq i64 %673, 0
  %691 = zext i1 %690 to i8
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %691, i8* %692, align 1, !tbaa !2448
  %693 = lshr i64 %673, 63
  %694 = trunc i64 %693 to i8
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %694, i8* %695, align 1, !tbaa !2449
  %696 = lshr i64 %669, 63
  %697 = lshr i64 %670, 63
  %698 = xor i64 %697, %696
  %699 = xor i64 %693, %696
  %700 = add nuw nsw i64 %699, %698
  %701 = icmp eq i64 %700, 2
  %702 = zext i1 %701 to i8
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %702, i8* %703, align 1, !tbaa !2450
  %704 = load i64, i64* %RAX
  %705 = add i64 %704, 16
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 4
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %705 to i64*
  %709 = load i64, i64* %708
  store i64 %709, i64* %RAX, align 8, !tbaa !2428
  %710 = load i64, i64* %RAX
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 3
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RCX
  %716 = load i64, i64* %RAX
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 3
  store i64 %718, i64* %PC
  %719 = add i64 %716, %715
  store i64 %719, i64* %RCX, align 8, !tbaa !2428
  %720 = icmp ult i64 %719, %715
  %721 = icmp ult i64 %719, %716
  %722 = or i1 %720, %721
  %723 = zext i1 %722 to i8
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %723, i8* %724, align 1, !tbaa !2432
  %725 = trunc i64 %719 to i32
  %726 = and i32 %725, 255
  %727 = call i32 @llvm.ctpop.i32(i32 %726) #16
  %728 = trunc i32 %727 to i8
  %729 = and i8 %728, 1
  %730 = xor i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %730, i8* %731, align 1, !tbaa !2446
  %732 = xor i64 %716, %715
  %733 = xor i64 %732, %719
  %734 = lshr i64 %733, 4
  %735 = trunc i64 %734 to i8
  %736 = and i8 %735, 1
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %736, i8* %737, align 1, !tbaa !2447
  %738 = icmp eq i64 %719, 0
  %739 = zext i1 %738 to i8
  %740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %739, i8* %740, align 1, !tbaa !2448
  %741 = lshr i64 %719, 63
  %742 = trunc i64 %741 to i8
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %742, i8* %743, align 1, !tbaa !2449
  %744 = lshr i64 %715, 63
  %745 = lshr i64 %716, 63
  %746 = xor i64 %741, %744
  %747 = xor i64 %741, %745
  %748 = add nuw nsw i64 %746, %747
  %749 = icmp eq i64 %748, 2
  %750 = zext i1 %749 to i8
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %750, i8* %751, align 1, !tbaa !2450
  %752 = load i64, i64* %RBP
  %753 = sub i64 %752, 40
  %754 = load i64, i64* %RCX
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 4
  store i64 %756, i64* %PC
  %757 = inttoptr i64 %753 to i64*
  store i64 %754, i64* %757
  %758 = load i64, i64* %RBP
  %759 = sub i64 %758, 24
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 4
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %759 to i64*
  %763 = load i64, i64* %762
  store i64 %763, i64* %RAX, align 8, !tbaa !2428
  %764 = load i64, i64* %RAX
  %765 = add i64 %764, 24
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 3
  store i64 %767, i64* %PC
  %768 = inttoptr i64 %765 to i32*
  %769 = load i32, i32* %768
  %770 = zext i32 %769 to i64
  store i64 %770, i64* %RSI, align 8, !tbaa !2428
  %771 = load i32, i32* %ESI
  %772 = zext i32 %771 to i64
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 2
  store i64 %774, i64* %PC
  %775 = and i64 %772, 4294967295
  store i64 %775, i64* %RDI, align 8, !tbaa !2428
  %776 = load i64, i64* %RDI
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 3
  store i64 %778, i64* %PC
  %779 = trunc i64 %776 to i32
  %780 = sub i32 %779, -1
  %781 = zext i32 %780 to i64
  store i64 %781, i64* %RDI, align 8, !tbaa !2428
  %782 = icmp ult i32 %779, -1
  %783 = zext i1 %782 to i8
  %784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %783, i8* %784, align 1, !tbaa !2432
  %785 = and i32 %780, 255
  %786 = call i32 @llvm.ctpop.i32(i32 %785) #16
  %787 = trunc i32 %786 to i8
  %788 = and i8 %787, 1
  %789 = xor i8 %788, 1
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %789, i8* %790, align 1, !tbaa !2446
  %791 = xor i64 -1, %776
  %792 = trunc i64 %791 to i32
  %793 = xor i32 %792, %780
  %794 = lshr i32 %793, 4
  %795 = trunc i32 %794 to i8
  %796 = and i8 %795, 1
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %796, i8* %797, align 1, !tbaa !2447
  %798 = icmp eq i32 %780, 0
  %799 = zext i1 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %799, i8* %800, align 1, !tbaa !2448
  %801 = lshr i32 %780, 31
  %802 = trunc i32 %801 to i8
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %802, i8* %803, align 1, !tbaa !2449
  %804 = lshr i32 %779, 31
  %805 = xor i32 1, %804
  %806 = xor i32 %801, %804
  %807 = add nuw nsw i32 %806, %805
  %808 = icmp eq i32 %807, 2
  %809 = zext i1 %808 to i8
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %809, i8* %810, align 1, !tbaa !2450
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 44
  %813 = load i32, i32* %ESI
  %814 = zext i32 %813 to i64
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 3
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %812 to i32*
  store i32 %813, i32* %817
  %818 = load i64, i64* %RBP
  %819 = sub i64 %818, 48
  %820 = load i32, i32* %EDI
  %821 = zext i32 %820 to i64
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 3
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %819 to i32*
  store i32 %820, i32* %824
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 120
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 6
  %829 = load i64, i64* %PC
  %830 = add i64 %829, 6
  store i64 %830, i64* %PC
  %831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %832 = load i8, i8* %831, align 1, !tbaa !2448
  store i8 %832, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %834 = icmp ne i8 %832, 0
  %835 = select i1 %834, i64 %826, i64 %828
  store i64 %835, i64* %833, align 8, !tbaa !2428
  %836 = load i8, i8* %BRANCH_TAKEN
  %837 = icmp eq i8 %836, 1
  %838 = load i64, i64* %PC
  %839 = add i64 %838, 5
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 5
  store i64 %841, i64* %PC
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %839, i64* %842, align 8, !tbaa !2428
  br i1 %837, label %block_402426, label %block_4023af

block_402402:                                     ; preds = %block_4023c3
  %843 = load i64, i64* %RBP
  %844 = sub i64 %843, 40
  %845 = load i64, i64* %PC
  %846 = add i64 %845, 4
  store i64 %846, i64* %PC
  %847 = inttoptr i64 %844 to i64*
  %848 = load i64, i64* %847
  store i64 %848, i64* %RAX, align 8, !tbaa !2428
  %849 = load i64, i64* %RBP
  %850 = sub i64 %849, 16
  %851 = load i64, i64* %PC
  %852 = add i64 %851, 4
  store i64 %852, i64* %PC
  %853 = inttoptr i64 %850 to i64*
  %854 = load i64, i64* %853
  store i64 %854, i64* %RCX, align 8, !tbaa !2428
  %855 = load i64, i64* %RAX
  %856 = load i64, i64* %RCX
  %857 = add i64 %856, 512
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 7
  store i64 %859, i64* %PC
  %860 = inttoptr i64 %857 to i64*
  %861 = load i64, i64* %860
  %862 = sub i64 %855, %861
  %863 = icmp ugt i64 %861, %855
  %864 = zext i1 %863 to i8
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %864, i8* %865, align 1, !tbaa !2432
  %866 = trunc i64 %862 to i32
  %867 = and i32 %866, 255
  %868 = call i32 @llvm.ctpop.i32(i32 %867) #16
  %869 = trunc i32 %868 to i8
  %870 = and i8 %869, 1
  %871 = xor i8 %870, 1
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %871, i8* %872, align 1, !tbaa !2446
  %873 = xor i64 %861, %855
  %874 = xor i64 %873, %862
  %875 = lshr i64 %874, 4
  %876 = trunc i64 %875 to i8
  %877 = and i8 %876, 1
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %877, i8* %878, align 1, !tbaa !2447
  %879 = icmp eq i64 %862, 0
  %880 = zext i1 %879 to i8
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %880, i8* %881, align 1, !tbaa !2448
  %882 = lshr i64 %862, 63
  %883 = trunc i64 %882 to i8
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %883, i8* %884, align 1, !tbaa !2449
  %885 = lshr i64 %855, 63
  %886 = lshr i64 %861, 63
  %887 = xor i64 %886, %885
  %888 = xor i64 %882, %885
  %889 = add nuw nsw i64 %888, %887
  %890 = icmp eq i64 %889, 2
  %891 = zext i1 %890 to i8
  %892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %891, i8* %892, align 1, !tbaa !2450
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 11
  %895 = load i64, i64* %PC
  %896 = add i64 %895, 6
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 6
  store i64 %898, i64* %PC
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %900 = load i8, i8* %899, align 1, !tbaa !2448
  %901 = icmp ne i8 %900, 0
  %902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %903 = load i8, i8* %902, align 1, !tbaa !2449
  %904 = icmp ne i8 %903, 0
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %906 = load i8, i8* %905, align 1, !tbaa !2450
  %907 = icmp ne i8 %906, 0
  %908 = xor i1 %904, %907
  %909 = or i1 %901, %908
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %912 = select i1 %909, i64 %894, i64 %896
  store i64 %912, i64* %911, align 8, !tbaa !2428
  %913 = load i8, i8* %BRANCH_TAKEN
  %914 = icmp eq i8 %913, 1
  %915 = load i64, i64* %PC
  br i1 %914, label %block_40241c, label %block_402417
}

; Function Attrs: noinline
define %struct.Memory* @sub_4024a0_getfree(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4024a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC
  %37 = sub i64 %34, 16
  store i64 %37, i64* %RSP, align 8, !tbaa !2428
  %38 = icmp ult i64 %34, 16
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %39, i8* %40, align 1, !tbaa !2432
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 255
  %43 = call i32 @llvm.ctpop.i32(i32 %42) #16
  %44 = trunc i32 %43 to i8
  %45 = and i8 %44, 1
  %46 = xor i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %46, i8* %47, align 1, !tbaa !2446
  %48 = xor i64 16, %34
  %49 = xor i64 %48, %37
  %50 = lshr i64 %49, 4
  %51 = trunc i64 %50 to i8
  %52 = and i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = icmp eq i64 %37, 0
  %55 = zext i1 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = lshr i64 %37, 63
  %58 = trunc i64 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %58, i8* %59, align 1, !tbaa !2449
  %60 = lshr i64 %34, 63
  %61 = xor i64 %57, %60
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 8
  %68 = load i64, i64* %RDI
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71
  %72 = load i64, i64* %RBP
  %73 = sub i64 %72, 8
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 4
  store i64 %75, i64* %PC
  %76 = inttoptr i64 %73 to i64*
  %77 = load i64, i64* %76
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RDI
  %79 = add i64 %78, 552
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 8
  store i64 %81, i64* %PC
  %82 = inttoptr i64 %79 to i64*
  %83 = load i64, i64* %82
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %84, align 1, !tbaa !2432
  %85 = trunc i64 %83 to i32
  %86 = and i32 %85, 255
  %87 = call i32 @llvm.ctpop.i32(i32 %86) #16
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %90, i8* %91, align 1, !tbaa !2446
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %92, align 1, !tbaa !2447
  %93 = icmp eq i64 %83, 0
  %94 = zext i1 %93 to i8
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %94, i8* %95, align 1, !tbaa !2448
  %96 = lshr i64 %83, 63
  %97 = trunc i64 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %97, i8* %98, align 1, !tbaa !2449
  %99 = lshr i64 %83, 63
  %100 = xor i64 %96, %99
  %101 = add nuw nsw i64 %100, %99
  %102 = icmp eq i64 %101, 2
  %103 = zext i1 %102 to i8
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %103, i8* %104, align 1, !tbaa !2450
  %105 = load i64, i64* %PC
  %106 = add i64 %105, 25
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 6
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 6
  store i64 %110, i64* %PC
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %112 = load i8, i8* %111, align 1, !tbaa !2448
  store i8 %112, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %114 = icmp ne i8 %112, 0
  %115 = select i1 %114, i64 %106, i64 %108
  store i64 %115, i64* %113, align 8, !tbaa !2428
  %116 = load i8, i8* %BRANCH_TAKEN
  %117 = icmp eq i8 %116, 1
  br i1 %117, label %block_4024d1, label %block_4024be

block_4024be:                                     ; preds = %block_4024a0
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 8
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %119 to i64*
  %123 = load i64, i64* %122
  store i64 %123, i64* %RAX, align 8, !tbaa !2428
  %124 = load i64, i64* %RAX
  %125 = add i64 %124, 552
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 7
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = load i64, i64* %RAX
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 3
  store i64 %132, i64* %PC
  store i64 %130, i64* %RDI, align 8, !tbaa !2428
  %133 = load i64, i64* %PC
  %134 = sub i64 %133, 7340
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 5
  store i64 %138, i64* %PC
  %139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %140 = load i64, i64* %139, align 8, !tbaa !2428
  %141 = add i64 %140, -8
  %142 = inttoptr i64 %141 to i64*
  store i64 %136, i64* %142
  store i64 %141, i64* %139, align 8, !tbaa !2428
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %134, i64* %143, align 8, !tbaa !2428
  %144 = load i64, i64* %PC
  %145 = call %struct.Memory* @ext_608fb8_free(%struct.State* %0, i64 %144, %struct.Memory* %2)
  br label %block_4024d1

block_40251b:                                     ; preds = %block_402508, %block_4024f6
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4024f6 ], [ %403, %block_402508 ]
  %146 = load i64, i64* %RAX
  %147 = load i32, i32* %EAX
  %148 = zext i32 %147 to i64
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 2
  store i64 %150, i64* %PC
  %151 = xor i64 %148, %146
  %152 = trunc i64 %151 to i32
  %153 = and i64 %151, 4294967295
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %154, align 1, !tbaa !2432
  %155 = and i32 %152, 255
  %156 = call i32 @llvm.ctpop.i32(i32 %155) #16
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  %159 = xor i8 %158, 1
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %159, i8* %160, align 1, !tbaa !2446
  %161 = icmp eq i32 %152, 0
  %162 = zext i1 %161 to i8
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %162, i8* %163, align 1, !tbaa !2448
  %164 = lshr i32 %152, 31
  %165 = trunc i32 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %165, i8* %166, align 1, !tbaa !2449
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %167, align 1, !tbaa !2450
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %168, align 1, !tbaa !2447
  %169 = load i64, i64* %RBP
  %170 = sub i64 %169, 8
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 4
  store i64 %172, i64* %PC
  %173 = inttoptr i64 %170 to i64*
  %174 = load i64, i64* %173
  store i64 %174, i64* %RCX, align 8, !tbaa !2428
  %175 = load i64, i64* %RCX
  %176 = add i64 %175, 560
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 11
  store i64 %178, i64* %PC
  %179 = inttoptr i64 %176 to i64*
  store i64 0, i64* %179
  %180 = load i64, i64* %RBP
  %181 = sub i64 %180, 8
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 4
  store i64 %183, i64* %PC
  %184 = inttoptr i64 %181 to i64*
  %185 = load i64, i64* %184
  store i64 %185, i64* %RCX, align 8, !tbaa !2428
  %186 = load i64, i64* %RCX
  %187 = add i64 %186, 552
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 11
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i64*
  store i64 0, i64* %190
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 8
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 4
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %RCX, align 8, !tbaa !2428
  %197 = load i64, i64* %RCX
  %198 = add i64 %197, 576
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 11
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %198 to i64*
  store i64 0, i64* %201
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 8
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i64*
  %207 = load i64, i64* %206
  store i64 %207, i64* %RCX, align 8, !tbaa !2428
  %208 = load i64, i64* %RCX
  %209 = add i64 %208, 568
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 11
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  store i64 0, i64* %212
  %213 = load i64, i64* %RBP
  %214 = sub i64 %213, 8
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 4
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %214 to i64*
  %218 = load i64, i64* %217
  store i64 %218, i64* %RCX, align 8, !tbaa !2428
  %219 = load i64, i64* %RCX
  %220 = add i64 %219, 592
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 11
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %220 to i64*
  store i64 0, i64* %223
  %224 = load i64, i64* %RBP
  %225 = sub i64 %224, 8
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 4
  store i64 %227, i64* %PC
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228
  store i64 %229, i64* %RCX, align 8, !tbaa !2428
  %230 = load i64, i64* %RCX
  %231 = add i64 %230, 584
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 11
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i64*
  store i64 0, i64* %234
  %235 = load i64, i64* %RSP
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC
  %238 = add i64 16, %235
  store i64 %238, i64* %RSP, align 8, !tbaa !2428
  %239 = icmp ult i64 %238, %235
  %240 = icmp ult i64 %238, 16
  %241 = or i1 %239, %240
  %242 = zext i1 %241 to i8
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %242, i8* %243, align 1, !tbaa !2432
  %244 = trunc i64 %238 to i32
  %245 = and i32 %244, 255
  %246 = call i32 @llvm.ctpop.i32(i32 %245) #16
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %249, i8* %250, align 1, !tbaa !2446
  %251 = xor i64 16, %235
  %252 = xor i64 %251, %238
  %253 = lshr i64 %252, 4
  %254 = trunc i64 %253 to i8
  %255 = and i8 %254, 1
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %255, i8* %256, align 1, !tbaa !2447
  %257 = icmp eq i64 %238, 0
  %258 = zext i1 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %258, i8* %259, align 1, !tbaa !2448
  %260 = lshr i64 %238, 63
  %261 = trunc i64 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %261, i8* %262, align 1, !tbaa !2449
  %263 = lshr i64 %235, 63
  %264 = xor i64 %260, %263
  %265 = add nuw nsw i64 %264, %260
  %266 = icmp eq i64 %265, 2
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %267, i8* %268, align 1, !tbaa !2450
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 1
  store i64 %270, i64* %PC
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %272 = load i64, i64* %271, align 8, !tbaa !2428
  %273 = add i64 %272, 8
  %274 = inttoptr i64 %272 to i64*
  %275 = load i64, i64* %274
  store i64 %275, i64* %RBP, align 8, !tbaa !2428
  store i64 %273, i64* %271, align 8, !tbaa !2428
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 1
  store i64 %277, i64* %PC
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %280 = load i64, i64* %279, align 8, !tbaa !2428
  %281 = inttoptr i64 %280 to i64*
  %282 = load i64, i64* %281
  store i64 %282, i64* %278, align 8, !tbaa !2428
  %283 = add i64 %280, 8
  store i64 %283, i64* %279, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4024f6:                                     ; preds = %block_4024e3, %block_4024d1
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_4024d1 ], [ %431, %block_4024e3 ]
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 8
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 4
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i64*
  %289 = load i64, i64* %288
  store i64 %289, i64* %RAX, align 8, !tbaa !2428
  %290 = load i64, i64* %RAX
  %291 = add i64 %290, 584
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 8
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %296, align 1, !tbaa !2432
  %297 = trunc i64 %295 to i32
  %298 = and i32 %297, 255
  %299 = call i32 @llvm.ctpop.i32(i32 %298) #16
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = xor i8 %301, 1
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %302, i8* %303, align 1, !tbaa !2446
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %304, align 1, !tbaa !2447
  %305 = icmp eq i64 %295, 0
  %306 = zext i1 %305 to i8
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %306, i8* %307, align 1, !tbaa !2448
  %308 = lshr i64 %295, 63
  %309 = trunc i64 %308 to i8
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %309, i8* %310, align 1, !tbaa !2449
  %311 = lshr i64 %295, 63
  %312 = xor i64 %308, %311
  %313 = add nuw nsw i64 %312, %311
  %314 = icmp eq i64 %313, 2
  %315 = zext i1 %314 to i8
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %315, i8* %316, align 1, !tbaa !2450
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 25
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 6
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 6
  store i64 %322, i64* %PC
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %324 = load i8, i8* %323, align 1, !tbaa !2448
  store i8 %324, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %326 = icmp ne i8 %324, 0
  %327 = select i1 %326, i64 %318, i64 %320
  store i64 %327, i64* %325, align 8, !tbaa !2428
  %328 = load i8, i8* %BRANCH_TAKEN
  %329 = icmp eq i8 %328, 1
  br i1 %329, label %block_40251b, label %block_402508

block_4024d1:                                     ; preds = %block_4024be, %block_4024a0
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_4024a0 ], [ %145, %block_4024be ]
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 8
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 4
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %331 to i64*
  %335 = load i64, i64* %334
  store i64 %335, i64* %RAX, align 8, !tbaa !2428
  %336 = load i64, i64* %RAX
  %337 = add i64 %336, 568
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 8
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %337 to i64*
  %341 = load i64, i64* %340
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %342, align 1, !tbaa !2432
  %343 = trunc i64 %341 to i32
  %344 = and i32 %343, 255
  %345 = call i32 @llvm.ctpop.i32(i32 %344) #16
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %348, i8* %349, align 1, !tbaa !2446
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %350, align 1, !tbaa !2447
  %351 = icmp eq i64 %341, 0
  %352 = zext i1 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %352, i8* %353, align 1, !tbaa !2448
  %354 = lshr i64 %341, 63
  %355 = trunc i64 %354 to i8
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %355, i8* %356, align 1, !tbaa !2449
  %357 = lshr i64 %341, 63
  %358 = xor i64 %354, %357
  %359 = add nuw nsw i64 %358, %357
  %360 = icmp eq i64 %359, 2
  %361 = zext i1 %360 to i8
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %361, i8* %362, align 1, !tbaa !2450
  %363 = load i64, i64* %PC
  %364 = add i64 %363, 25
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 6
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 6
  store i64 %368, i64* %PC
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %370 = load i8, i8* %369, align 1, !tbaa !2448
  store i8 %370, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %372 = icmp ne i8 %370, 0
  %373 = select i1 %372, i64 %364, i64 %366
  store i64 %373, i64* %371, align 8, !tbaa !2428
  %374 = load i8, i8* %BRANCH_TAKEN
  %375 = icmp eq i8 %374, 1
  br i1 %375, label %block_4024f6, label %block_4024e3

block_402508:                                     ; preds = %block_4024f6
  %376 = load i64, i64* %RBP
  %377 = sub i64 %376, 8
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = load i64, i64* %RAX
  %383 = add i64 %382, 584
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 7
  store i64 %385, i64* %PC
  %386 = inttoptr i64 %383 to i64*
  %387 = load i64, i64* %386
  store i64 %387, i64* %RAX, align 8, !tbaa !2428
  %388 = load i64, i64* %RAX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 3
  store i64 %390, i64* %PC
  store i64 %388, i64* %RDI, align 8, !tbaa !2428
  %391 = load i64, i64* %PC
  %392 = sub i64 %391, 7414
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 5
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 5
  store i64 %396, i64* %PC
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %398 = load i64, i64* %397, align 8, !tbaa !2428
  %399 = add i64 %398, -8
  %400 = inttoptr i64 %399 to i64*
  store i64 %394, i64* %400
  store i64 %399, i64* %397, align 8, !tbaa !2428
  %401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %392, i64* %401, align 8, !tbaa !2428
  %402 = load i64, i64* %PC
  %403 = call %struct.Memory* @ext_608fb8_free(%struct.State* %0, i64 %402, %struct.Memory* %MEMORY.1)
  br label %block_40251b

block_4024e3:                                     ; preds = %block_4024d1
  %404 = load i64, i64* %RBP
  %405 = sub i64 %404, 8
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 4
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RAX
  %411 = add i64 %410, 568
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 7
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i64*
  %415 = load i64, i64* %414
  store i64 %415, i64* %RAX, align 8, !tbaa !2428
  %416 = load i64, i64* %RAX
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 3
  store i64 %418, i64* %PC
  store i64 %416, i64* %RDI, align 8, !tbaa !2428
  %419 = load i64, i64* %PC
  %420 = sub i64 %419, 7377
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 5
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 5
  store i64 %424, i64* %PC
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %426 = load i64, i64* %425, align 8, !tbaa !2428
  %427 = add i64 %426, -8
  %428 = inttoptr i64 %427 to i64*
  store i64 %422, i64* %428
  store i64 %427, i64* %425, align 8, !tbaa !2428
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %420, i64* %429, align 8, !tbaa !2428
  %430 = load i64, i64* %PC
  %431 = call %struct.Memory* @ext_608fb8_free(%struct.State* %0, i64 %430, %struct.Memory* %MEMORY.2)
  br label %block_4024f6
}

; Function Attrs: noinline
define %struct.Memory* @sub_402790_bea_is_dual_infeasible(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402790:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %RAX = bitcast %union.anon* %19 to i64*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 5
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RCX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 9
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RSI = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 11
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RDI = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 13
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RSP = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 15
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RBP = bitcast %union.anon* %34 to i64*
  %35 = load i64, i64* %RBP
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 1
  store i64 %37, i64* %PC
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %39 = load i64, i64* %38, align 8, !tbaa !2428
  %40 = add i64 %39, -8
  %41 = inttoptr i64 %40 to i64*
  store i64 %35, i64* %41
  store i64 %40, i64* %38, align 8, !tbaa !2428
  %42 = load i64, i64* %RSP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 3
  store i64 %44, i64* %PC
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  %45 = load i64, i64* %RBP
  %46 = sub i64 %45, 8
  %47 = load i64, i64* %RDI
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %46 to i64*
  store i64 %47, i64* %50
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 16
  %53 = load i64, i64* %RSI
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56
  %57 = load i64, i64* %RBP
  %58 = sub i64 %57, 16
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 5
  store i64 %60, i64* %PC
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %63, align 1, !tbaa !2432
  %64 = trunc i64 %62 to i32
  %65 = and i32 %64, 255
  %66 = call i32 @llvm.ctpop.i32(i32 %65) #16
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %69, i8* %70, align 1, !tbaa !2446
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %71, align 1, !tbaa !2447
  %72 = icmp eq i64 %62, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2448
  %75 = lshr i64 %62, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2449
  %78 = lshr i64 %62, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2450
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 25
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 6
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 6
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = load i8, i8* %90, align 1, !tbaa !2449
  %92 = icmp ne i8 %91, 0
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %94 = load i8, i8* %93, align 1, !tbaa !2450
  %95 = icmp ne i8 %94, 0
  %96 = xor i1 %92, %95
  %97 = xor i1 %96, true
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %100 = select i1 %96, i64 %87, i64 %85
  store i64 %100, i64* %99, align 8, !tbaa !2428
  %101 = load i8, i8* %BRANCH_TAKEN
  %102 = icmp eq i8 %101, 1
  br i1 %102, label %block_4027ba, label %block_4027a7

block_4027ba:                                     ; preds = %block_4027a7, %block_402790
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402790 ], [ %2, %block_4027a7 ]
  %103 = load i64, i64* %RAX
  %104 = load i32, i32* %EAX
  %105 = zext i32 %104 to i64
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 2
  store i64 %107, i64* %PC
  %108 = xor i64 %105, %103
  %109 = trunc i64 %108 to i32
  %110 = and i64 %108, 4294967295
  store i64 %110, i64* %RAX, align 8, !tbaa !2428
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %111, align 1, !tbaa !2432
  %112 = and i32 %109, 255
  %113 = call i32 @llvm.ctpop.i32(i32 %112) #16
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  %116 = xor i8 %115, 1
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %116, i8* %117, align 1, !tbaa !2446
  %118 = icmp eq i32 %109, 0
  %119 = zext i1 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %119, i8* %120, align 1, !tbaa !2448
  %121 = lshr i32 %109, 31
  %122 = trunc i32 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %122, i8* %123, align 1, !tbaa !2449
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %124, align 1, !tbaa !2450
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %125, align 1, !tbaa !2447
  %126 = load i8, i8* %AL
  %127 = zext i8 %126 to i64
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 2
  store i64 %129, i64* %PC
  store i8 %126, i8* %CL, align 1, !tbaa !2451
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 16
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 5
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %136, align 1, !tbaa !2432
  %137 = trunc i64 %135 to i32
  %138 = and i32 %137, 255
  %139 = call i32 @llvm.ctpop.i32(i32 %138) #16
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %142, i8* %143, align 1, !tbaa !2446
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %144, align 1, !tbaa !2447
  %145 = icmp eq i64 %135, 0
  %146 = zext i1 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %146, i8* %147, align 1, !tbaa !2448
  %148 = lshr i64 %135, 63
  %149 = trunc i64 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %149, i8* %150, align 1, !tbaa !2449
  %151 = lshr i64 %135, 63
  %152 = xor i64 %148, %151
  %153 = add nuw nsw i64 %152, %151
  %154 = icmp eq i64 %153, 2
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %155, i8* %156, align 1, !tbaa !2450
  %157 = load i64, i64* %RBP
  %158 = sub i64 %157, 18
  %159 = load i8, i8* %CL
  %160 = zext i8 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 3
  store i64 %162, i64* %PC
  %163 = inttoptr i64 %158 to i8*
  store i8 %159, i8* %163
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 20
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 6
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 6
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = load i8, i8* %170, align 1, !tbaa !2448
  %172 = icmp ne i8 %171, 0
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = load i8, i8* %173, align 1, !tbaa !2449
  %175 = icmp ne i8 %174, 0
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %177 = load i8, i8* %176, align 1, !tbaa !2450
  %178 = icmp ne i8 %177, 0
  %179 = xor i1 %175, %178
  %180 = or i1 %172, %179
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %183 = select i1 %180, i64 %165, i64 %167
  store i64 %183, i64* %182, align 8, !tbaa !2428
  %184 = load i8, i8* %BRANCH_TAKEN
  %185 = icmp eq i8 %184, 1
  br i1 %185, label %block_4027da, label %block_4027cc

block_4027da:                                     ; preds = %block_4027cc, %block_4027ba
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_4027ba ], [ %MEMORY.0, %block_4027cc ]
  %186 = load i64, i64* %RBP
  %187 = sub i64 %186, 18
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 3
  store i64 %189, i64* %PC
  %190 = inttoptr i64 %187 to i8*
  %191 = load i8, i8* %190
  store i8 %191, i8* %AL, align 1, !tbaa !2451
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 17
  %194 = load i8, i8* %AL
  %195 = zext i8 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 3
  store i64 %197, i64* %PC
  %198 = inttoptr i64 %193 to i8*
  store i8 %194, i8* %198
  br label %block_4027e0

block_4027cc:                                     ; preds = %block_4027ba
  %199 = load i64, i64* %RBP
  %200 = sub i64 %199, 8
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203
  store i64 %204, i64* %RAX, align 8, !tbaa !2428
  %205 = load i64, i64* %RAX
  %206 = add i64 %205, 24
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i32*
  %210 = load i32, i32* %209
  %211 = sub i32 %210, 2
  %212 = icmp ult i32 %210, 2
  %213 = zext i1 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %213, i8* %214, align 1, !tbaa !2432
  %215 = and i32 %211, 255
  %216 = call i32 @llvm.ctpop.i32(i32 %215) #16
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %219, i8* %220, align 1, !tbaa !2446
  %221 = xor i32 %210, 2
  %222 = xor i32 %221, %211
  %223 = lshr i32 %222, 4
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %225, i8* %226, align 1, !tbaa !2447
  %227 = icmp eq i32 %211, 0
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %228, i8* %229, align 1, !tbaa !2448
  %230 = lshr i32 %211, 31
  %231 = trunc i32 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %231, i8* %232, align 1, !tbaa !2449
  %233 = lshr i32 %210, 31
  %234 = xor i32 %230, %233
  %235 = add nuw nsw i32 %234, %233
  %236 = icmp eq i32 %235, 2
  %237 = zext i1 %236 to i8
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %237, i8* %238, align 1, !tbaa !2450
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %242 = load i8, i8* %241, align 1, !tbaa !2448
  store i8 %242, i8* %CL, align 1, !tbaa !2451
  %243 = load i64, i64* %RBP
  %244 = sub i64 %243, 18
  %245 = load i8, i8* %CL
  %246 = zext i8 %245 to i64
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 3
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %244 to i8*
  store i8 %245, i8* %249
  br label %block_4027da

block_4027a7:                                     ; preds = %block_402790
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 2
  store i64 %251, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %252 = load i64, i64* %RBP
  %253 = sub i64 %252, 8
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 4
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %253 to i64*
  %257 = load i64, i64* %256
  store i64 %257, i64* %RCX, align 8, !tbaa !2428
  %258 = load i64, i64* %RCX
  %259 = add i64 %258, 24
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %259 to i32*
  %263 = load i32, i32* %262
  %264 = sub i32 %263, 1
  %265 = icmp ult i32 %263, 1
  %266 = zext i1 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %266, i8* %267, align 1, !tbaa !2432
  %268 = and i32 %264, 255
  %269 = call i32 @llvm.ctpop.i32(i32 %268) #16
  %270 = trunc i32 %269 to i8
  %271 = and i8 %270, 1
  %272 = xor i8 %271, 1
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %272, i8* %273, align 1, !tbaa !2446
  %274 = xor i32 %263, 1
  %275 = xor i32 %274, %264
  %276 = lshr i32 %275, 4
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %278, i8* %279, align 1, !tbaa !2447
  %280 = icmp eq i32 %264, 0
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %281, i8* %282, align 1, !tbaa !2448
  %283 = lshr i32 %264, 31
  %284 = trunc i32 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %284, i8* %285, align 1, !tbaa !2449
  %286 = lshr i32 %263, 31
  %287 = xor i32 %283, %286
  %288 = add nuw nsw i32 %287, %286
  %289 = icmp eq i32 %288, 2
  %290 = zext i1 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %290, i8* %291, align 1, !tbaa !2450
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 17
  %294 = load i8, i8* %AL
  %295 = zext i8 %294 to i64
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 3
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %293 to i8*
  store i8 %294, i8* %298
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 44
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 6
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 6
  store i64 %304, i64* %PC
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %306 = load i8, i8* %305, align 1, !tbaa !2448
  store i8 %306, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %308 = icmp ne i8 %306, 0
  %309 = select i1 %308, i64 %300, i64 %302
  store i64 %309, i64* %307, align 8, !tbaa !2428
  %310 = load i8, i8* %BRANCH_TAKEN
  %311 = icmp eq i8 %310, 1
  br i1 %311, label %block_4027e0, label %block_4027ba

block_4027e0:                                     ; preds = %block_4027a7, %block_4027da
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_4027da ], [ %2, %block_4027a7 ]
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 17
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 3
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %313 to i8*
  %317 = load i8, i8* %316
  store i8 %317, i8* %AL, align 1, !tbaa !2451
  %318 = load i8, i8* %AL
  %319 = zext i8 %318 to i64
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 2
  store i64 %321, i64* %PC
  %322 = and i64 1, %319
  %323 = trunc i64 %322 to i8
  store i8 %323, i8* %AL, align 1, !tbaa !2451
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %324, align 1, !tbaa !2432
  %325 = trunc i64 %322 to i32
  %326 = and i32 %325, 255
  %327 = call i32 @llvm.ctpop.i32(i32 %326) #16
  %328 = trunc i32 %327 to i8
  %329 = and i8 %328, 1
  %330 = xor i8 %329, 1
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %330, i8* %331, align 1, !tbaa !2446
  %332 = icmp eq i8 %323, 0
  %333 = zext i1 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %333, i8* %334, align 1, !tbaa !2448
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %335, align 1, !tbaa !2449
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %336, align 1, !tbaa !2450
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %337, align 1, !tbaa !2447
  %338 = load i8, i8* %AL
  %339 = zext i8 %338 to i64
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 3
  store i64 %341, i64* %PC
  %342 = and i64 %339, 255
  store i64 %342, i64* %RAX, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 1
  store i64 %344, i64* %PC
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %346 = load i64, i64* %345, align 8, !tbaa !2428
  %347 = add i64 %346, 8
  %348 = inttoptr i64 %346 to i64*
  %349 = load i64, i64* %348
  store i64 %349, i64* %RBP, align 8, !tbaa !2428
  store i64 %347, i64* %345, align 8, !tbaa !2428
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 1
  store i64 %351, i64* %PC
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %354 = load i64, i64* %353, align 8, !tbaa !2428
  %355 = inttoptr i64 %354 to i64*
  %356 = load i64, i64* %355
  store i64 %356, i64* %352, align 8, !tbaa !2428
  %357 = add i64 %354, 8
  store i64 %357, i64* %353, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402960_primal_bea_mpp(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402960:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 5
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %13 = bitcast %union.anon* %12 to %struct.anon.2*
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %13, i32 0, i32 0
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %15 = getelementptr inbounds %struct.GPR, %struct.GPR* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.Reg, %struct.Reg* %15, i32 0, i32 0
  %EAX = bitcast %union.anon* %16 to i32*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %18 = getelementptr inbounds %struct.GPR, %struct.GPR* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.Reg, %struct.Reg* %18, i32 0, i32 0
  %RAX = bitcast %union.anon* %19 to i64*
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %21 = getelementptr inbounds %struct.GPR, %struct.GPR* %20, i32 0, i32 5
  %22 = getelementptr inbounds %struct.Reg, %struct.Reg* %21, i32 0, i32 0
  %RCX = bitcast %union.anon* %22 to i64*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 7
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0
  %RDX = bitcast %union.anon* %25 to i64*
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %27 = getelementptr inbounds %struct.GPR, %struct.GPR* %26, i32 0, i32 9
  %28 = getelementptr inbounds %struct.Reg, %struct.Reg* %27, i32 0, i32 0
  %RSI = bitcast %union.anon* %28 to i64*
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %30 = getelementptr inbounds %struct.GPR, %struct.GPR* %29, i32 0, i32 11
  %31 = getelementptr inbounds %struct.Reg, %struct.Reg* %30, i32 0, i32 0
  %RDI = bitcast %union.anon* %31 to i64*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %33 = getelementptr inbounds %struct.GPR, %struct.GPR* %32, i32 0, i32 13
  %34 = getelementptr inbounds %struct.Reg, %struct.Reg* %33, i32 0, i32 0
  %RSP = bitcast %union.anon* %34 to i64*
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 15
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0
  %RBP = bitcast %union.anon* %37 to i64*
  %38 = load i64, i64* %RBP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 1
  store i64 %40, i64* %PC
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %42 = load i64, i64* %41, align 8, !tbaa !2428
  %43 = add i64 %42, -8
  %44 = inttoptr i64 %43 to i64*
  store i64 %38, i64* %44
  store i64 %43, i64* %41, align 8, !tbaa !2428
  %45 = load i64, i64* %RSP
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 3
  store i64 %47, i64* %PC
  store i64 %45, i64* %RBP, align 8, !tbaa !2428
  %48 = load i64, i64* %RSP
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC
  %51 = sub i64 %48, 112
  store i64 %51, i64* %RSP, align 8, !tbaa !2428
  %52 = icmp ult i64 %48, 112
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %53, i8* %54, align 1, !tbaa !2432
  %55 = trunc i64 %51 to i32
  %56 = and i32 %55, 255
  %57 = call i32 @llvm.ctpop.i32(i32 %56) #16
  %58 = trunc i32 %57 to i8
  %59 = and i8 %58, 1
  %60 = xor i8 %59, 1
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %60, i8* %61, align 1, !tbaa !2446
  %62 = xor i64 112, %48
  %63 = xor i64 %62, %51
  %64 = lshr i64 %63, 4
  %65 = trunc i64 %64 to i8
  %66 = and i8 %65, 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %66, i8* %67, align 1, !tbaa !2447
  %68 = icmp eq i64 %51, 0
  %69 = zext i1 %68 to i8
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %69, i8* %70, align 1, !tbaa !2448
  %71 = lshr i64 %51, 63
  %72 = trunc i64 %71 to i8
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %72, i8* %73, align 1, !tbaa !2449
  %74 = lshr i64 %48, 63
  %75 = xor i64 %71, %74
  %76 = add nuw nsw i64 %75, %74
  %77 = icmp eq i64 %76, 2
  %78 = zext i1 %77 to i8
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %78, i8* %79, align 1, !tbaa !2450
  %80 = load i64, i64* %RBP
  %81 = sub i64 %80, 16
  %82 = load i64, i64* %RDI
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC
  %85 = inttoptr i64 %81 to i64*
  store i64 %82, i64* %85
  %86 = load i64, i64* %RBP
  %87 = sub i64 %86, 24
  %88 = load i64, i64* %RSI
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %87 to i64*
  store i64 %88, i64* %91
  %92 = load i64, i64* %RBP
  %93 = sub i64 %92, 32
  %94 = load i64, i64* %RDX
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %93 to i64*
  store i64 %94, i64* %97
  %98 = load i64, i64* %RBP
  %99 = sub i64 %98, 40
  %100 = load i64, i64* %RCX
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC
  %103 = inttoptr i64 %99 to i64*
  store i64 %100, i64* %103
  %104 = load i64, i64* %PC
  %105 = add i64 %104, 9
  store i64 %105, i64* %PC
  %106 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_606088__data_type* @seg_606088__data to i64), i64 16) to i64*)
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %107, align 1, !tbaa !2432
  %108 = trunc i64 %106 to i32
  %109 = and i32 %108, 255
  %110 = call i32 @llvm.ctpop.i32(i32 %109) #16
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %113, i8* %114, align 1, !tbaa !2446
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %115, align 1, !tbaa !2447
  %116 = icmp eq i64 %106, 0
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %117, i8* %118, align 1, !tbaa !2448
  %119 = lshr i64 %106, 63
  %120 = trunc i64 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %120, i8* %121, align 1, !tbaa !2449
  %122 = lshr i64 %106, 63
  %123 = xor i64 %119, %122
  %124 = add nuw nsw i64 %123, %122
  %125 = icmp eq i64 %124, 2
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %126, i8* %127, align 1, !tbaa !2450
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 151
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 6
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 6
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %135 = load i8, i8* %134, align 1, !tbaa !2448
  store i8 %135, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %137 = icmp ne i8 %135, 0
  %138 = select i1 %137, i64 %129, i64 %131
  store i64 %138, i64* %136, align 8, !tbaa !2428
  %139 = load i8, i8* %BRANCH_TAKEN
  %140 = icmp eq i8 %139, 1
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 48
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 8
  store i64 %144, i64* %PC
  br i1 %140, label %block_402a18, label %block_402987

block_402cee:                                     ; preds = %block_402cbb
  %145 = add i64 %1866, 5
  store i64 %145, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %146 = load i32, i32* %EAX
  %147 = zext i32 %146 to i64
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 2
  store i64 %149, i64* %PC
  %150 = and i64 %147, 4294967295
  store i64 %150, i64* %RDI, align 8, !tbaa !2428
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 8
  store i64 %152, i64* %PC
  %153 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  store i64 %153, i64* %RSI, align 8, !tbaa !2428
  %154 = load i64, i64* %PC
  %155 = sub i64 %154, 1293
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 5
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 5
  store i64 %159, i64* %PC
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %161 = load i64, i64* %160, align 8, !tbaa !2428
  %162 = add i64 %161, -8
  %163 = inttoptr i64 %162 to i64*
  store i64 %157, i64* %163
  store i64 %162, i64* %160, align 8, !tbaa !2428
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %155, i64* %164, align 8, !tbaa !2428
  %165 = load i64, i64* %PC
  %166 = call %struct.Memory* @sub_4027f0_sort_basket_renamed_(%struct.State* %0, i64 %165, %struct.Memory* %MEMORY.12)
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 8
  store i64 %168, i64* %PC
  %169 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 56) to i64*)
  store i64 %169, i64* %RSI, align 8, !tbaa !2428
  %170 = load i64, i64* %RSI
  %171 = add i64 %170, 8
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 4
  store i64 %173, i64* %PC
  %174 = inttoptr i64 %171 to i64*
  %175 = load i64, i64* %174
  store i64 %175, i64* %RSI, align 8, !tbaa !2428
  %176 = load i64, i64* %RBP
  %177 = sub i64 %176, 40
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC
  %180 = inttoptr i64 %177 to i64*
  %181 = load i64, i64* %180
  store i64 %181, i64* %RDI, align 8, !tbaa !2428
  %182 = load i64, i64* %RDI
  %183 = load i64, i64* %RSI
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 3
  store i64 %185, i64* %PC
  %186 = inttoptr i64 %182 to i64*
  store i64 %183, i64* %186
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 8
  store i64 %188, i64* %PC
  %189 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 56) to i64*)
  store i64 %189, i64* %RSI, align 8, !tbaa !2428
  %190 = load i64, i64* %RSI
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 3
  store i64 %192, i64* %PC
  %193 = inttoptr i64 %190 to i64*
  %194 = load i64, i64* %193
  store i64 %194, i64* %RSI, align 8, !tbaa !2428
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 8
  %197 = load i64, i64* %RSI
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC
  %200 = inttoptr i64 %196 to i64*
  store i64 %197, i64* %200
  br label %block_402d24

block_402c67:                                     ; preds = %block_402b72
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 8
  store i64 %202, i64* %PC
  %203 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*)
  store i64 %203, i64* %RAX, align 8, !tbaa !2428
  %204 = load i64, i64* %RAX
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC
  %207 = add i64 1, %204
  store i64 %207, i64* %RAX, align 8, !tbaa !2428
  %208 = icmp ult i64 %207, %204
  %209 = icmp ult i64 %207, 1
  %210 = or i1 %208, %209
  %211 = zext i1 %210 to i8
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %211, i8* %212, align 1, !tbaa !2432
  %213 = trunc i64 %207 to i32
  %214 = and i32 %213, 255
  %215 = call i32 @llvm.ctpop.i32(i32 %214) #16
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %218, i8* %219, align 1, !tbaa !2446
  %220 = xor i64 1, %204
  %221 = xor i64 %220, %207
  %222 = lshr i64 %221, 4
  %223 = trunc i64 %222 to i8
  %224 = and i8 %223, 1
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %224, i8* %225, align 1, !tbaa !2447
  %226 = icmp eq i64 %207, 0
  %227 = zext i1 %226 to i8
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %227, i8* %228, align 1, !tbaa !2448
  %229 = lshr i64 %207, 63
  %230 = trunc i64 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %230, i8* %231, align 1, !tbaa !2449
  %232 = lshr i64 %204, 63
  %233 = xor i64 %229, %232
  %234 = add nuw nsw i64 %233, %229
  %235 = icmp eq i64 %234, 2
  %236 = zext i1 %235 to i8
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %236, i8* %237, align 1, !tbaa !2450
  %238 = load i64, i64* %RAX
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 8
  store i64 %240, i64* %PC
  store i64 %238, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*)
  %241 = load i64, i64* %RAX
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 8
  store i64 %243, i64* %PC
  %244 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11288) to i64*)
  %245 = sub i64 %241, %244
  %246 = icmp ugt i64 %244, %241
  %247 = zext i1 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %247, i8* %248, align 1, !tbaa !2432
  %249 = trunc i64 %245 to i32
  %250 = and i32 %249, 255
  %251 = call i32 @llvm.ctpop.i32(i32 %250) #16
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %254, i8* %255, align 1, !tbaa !2446
  %256 = xor i64 %244, %241
  %257 = xor i64 %256, %245
  %258 = lshr i64 %257, 4
  %259 = trunc i64 %258 to i8
  %260 = and i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %260, i8* %261, align 1, !tbaa !2447
  %262 = icmp eq i64 %245, 0
  %263 = zext i1 %262 to i8
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %263, i8* %264, align 1, !tbaa !2448
  %265 = lshr i64 %245, 63
  %266 = trunc i64 %265 to i8
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %266, i8* %267, align 1, !tbaa !2449
  %268 = lshr i64 %241, 63
  %269 = lshr i64 %244, 63
  %270 = xor i64 %269, %268
  %271 = xor i64 %265, %268
  %272 = add nuw nsw i64 %271, %270
  %273 = icmp eq i64 %272, 2
  %274 = zext i1 %273 to i8
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %274, i8* %275, align 1, !tbaa !2450
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 18
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 6
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 6
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %283 = load i8, i8* %282, align 1, !tbaa !2448
  %284 = icmp eq i8 %283, 0
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %287 = select i1 %284, i64 %277, i64 %279
  store i64 %287, i64* %286, align 8, !tbaa !2428
  %288 = load i8, i8* %BRANCH_TAKEN
  %289 = icmp eq i8 %288, 1
  br i1 %289, label %block_402c95, label %block_402c89

block_402b5b:                                     ; preds = %block_402cb6, %block_402b4f
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_402b4f ], [ %MEMORY.10, %block_402cb6 ]
  %290 = load i64, i64* %RBP
  %291 = sub i64 %290, 24
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 4
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %RAX, align 8, !tbaa !2428
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 8
  store i64 %297, i64* %PC
  %298 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*)
  store i64 %298, i64* %RCX, align 8, !tbaa !2428
  %299 = load i64, i64* %RCX
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 4
  store i64 %301, i64* %PC
  %302 = shl i64 %299, 5
  %303 = icmp slt i64 %302, 0
  %304 = shl i64 %302, 1
  store i64 %304, i64* %RCX, align 8, !tbaa !2428
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %306 = zext i1 %303 to i8
  store i8 %306, i8* %305, align 1, !tbaa !2451
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %308 = trunc i64 %304 to i32
  %309 = and i32 %308, 254
  %310 = call i32 @llvm.ctpop.i32(i32 %309) #16
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  %313 = xor i8 %312, 1
  store i8 %313, i8* %307, align 1, !tbaa !2451
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %314, align 1, !tbaa !2451
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %316 = icmp eq i64 %304, 0
  %317 = zext i1 %316 to i8
  store i8 %317, i8* %315, align 1, !tbaa !2451
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %319 = lshr i64 %304, 63
  %320 = trunc i64 %319 to i8
  store i8 %320, i8* %318, align 1, !tbaa !2451
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %321, align 1, !tbaa !2451
  %322 = load i64, i64* %RAX
  %323 = load i64, i64* %RCX
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 3
  store i64 %325, i64* %PC
  %326 = add i64 %323, %322
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = icmp ult i64 %326, %322
  %328 = icmp ult i64 %326, %323
  %329 = or i1 %327, %328
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %330, i8* %331, align 1, !tbaa !2432
  %332 = trunc i64 %326 to i32
  %333 = and i32 %332, 255
  %334 = call i32 @llvm.ctpop.i32(i32 %333) #16
  %335 = trunc i32 %334 to i8
  %336 = and i8 %335, 1
  %337 = xor i8 %336, 1
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %337, i8* %338, align 1, !tbaa !2446
  %339 = xor i64 %323, %322
  %340 = xor i64 %339, %326
  %341 = lshr i64 %340, 4
  %342 = trunc i64 %341 to i8
  %343 = and i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %343, i8* %344, align 1, !tbaa !2447
  %345 = icmp eq i64 %326, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i64 %326, 63
  %349 = trunc i64 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = lshr i64 %322, 63
  %352 = lshr i64 %323, 63
  %353 = xor i64 %348, %351
  %354 = xor i64 %348, %352
  %355 = add nuw nsw i64 %353, %354
  %356 = icmp eq i64 %355, 2
  %357 = zext i1 %356 to i8
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %357, i8* %358, align 1, !tbaa !2450
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 72
  %361 = load i64, i64* %RAX
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %360 to i64*
  store i64 %361, i64* %364
  br label %block_402b72

block_402a57:                                     ; preds = %block_402a4c
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 236
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 5
  store i64 %368, i64* %PC
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %366, i64* %369, align 8, !tbaa !2428
  %370 = load i64, i64* %RBP
  %371 = sub i64 %370, 56
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 4
  store i64 %373, i64* %PC
  %374 = inttoptr i64 %371 to i64*
  %375 = load i64, i64* %374
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = load i64, i64* %RAX
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 8
  store i64 %378, i64* %PC
  store i64 %376, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  br label %block_402b4f

block_402b4f:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_402a57
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_402a57 ], [ %476, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 8
  store i64 %380, i64* %PC
  %381 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*)
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = load i64, i64* %RBP
  %383 = sub i64 %382, 64
  %384 = load i64, i64* %RAX
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 4
  store i64 %386, i64* %PC
  %387 = inttoptr i64 %383 to i64*
  store i64 %384, i64* %387
  br label %block_402b5b

block_4029cc:                                     ; preds = %block_40298f
  %388 = add i64 %1827, 5
  store i64 %388, i64* %PC
  store i64 300, i64* %RAX, align 8, !tbaa !2428
  %389 = load i32, i32* %EAX
  %390 = zext i32 %389 to i64
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 2
  store i64 %392, i64* %PC
  %393 = and i64 %390, 4294967295
  store i64 %393, i64* %RCX, align 8, !tbaa !2428
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 16
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 4
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i64*
  %399 = load i64, i64* %398
  store i64 %399, i64* %RDX, align 8, !tbaa !2428
  %400 = load i64, i64* %RDX
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 4
  store i64 %402, i64* %PC
  %403 = sub i64 %400, 1
  store i64 %403, i64* %RDX, align 8, !tbaa !2428
  %404 = icmp ult i64 %400, 1
  %405 = zext i1 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %405, i8* %406, align 1, !tbaa !2432
  %407 = trunc i64 %403 to i32
  %408 = and i32 %407, 255
  %409 = call i32 @llvm.ctpop.i32(i32 %408) #16
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  %412 = xor i8 %411, 1
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %412, i8* %413, align 1, !tbaa !2446
  %414 = xor i64 1, %400
  %415 = xor i64 %414, %403
  %416 = lshr i64 %415, 4
  %417 = trunc i64 %416 to i8
  %418 = and i8 %417, 1
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %418, i8* %419, align 1, !tbaa !2447
  %420 = icmp eq i64 %403, 0
  %421 = zext i1 %420 to i8
  %422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %421, i8* %422, align 1, !tbaa !2448
  %423 = lshr i64 %403, 63
  %424 = trunc i64 %423 to i8
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %424, i8* %425, align 1, !tbaa !2449
  %426 = lshr i64 %400, 63
  %427 = xor i64 %423, %426
  %428 = add nuw nsw i64 %427, %426
  %429 = icmp eq i64 %428, 2
  %430 = zext i1 %429 to i8
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %430, i8* %431, align 1, !tbaa !2450
  %432 = load i64, i64* %RDX
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 3
  store i64 %434, i64* %PC
  store i64 %432, i64* %RAX, align 8, !tbaa !2428
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 2
  store i64 %436, i64* %PC
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %439 = load i64, i64* %438, align 8, !tbaa !2428
  %440 = ashr i64 %439, 63
  store i64 %440, i64* %437, align 8, !tbaa !2428
  %441 = load i64, i64* %RCX
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 3
  store i64 %443, i64* %PC
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %445 = load i64, i64* %444, align 8, !tbaa !2428
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %447 = load i64, i64* %446, align 8, !tbaa !2428
  %448 = sext i64 %441 to i128
  %449 = and i128 %448, -18446744073709551616
  %450 = zext i64 %447 to i128
  %451 = shl nuw i128 %450, 64
  %452 = zext i64 %445 to i128
  %453 = or i128 %451, %452
  %454 = zext i64 %441 to i128
  %455 = or i128 %449, %454
  %456 = sdiv i128 %453, %455
  %457 = trunc i128 %456 to i64
  %458 = and i128 %456, 18446744073709551615
  %459 = sext i64 %457 to i128
  %460 = and i128 %459, -18446744073709551616
  %461 = or i128 %460, %458
  %462 = icmp eq i128 %456, %461
  br i1 %462, label %467, label %463

; <label>:463:                                    ; preds = %block_4029cc
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %465 = load i64, i64* %464, align 8, !tbaa !2428
  %466 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %465, %struct.Memory* %MEMORY.11) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:467:                                    ; preds = %block_4029cc
  %468 = srem i128 %453, %455
  %469 = trunc i128 %468 to i64
  store i64 %457, i64* %444, align 8, !tbaa !2428
  store i64 %469, i64* %446, align 8, !tbaa !2428
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %470, align 1, !tbaa !2432
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %471, align 1, !tbaa !2446
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %472, align 1, !tbaa !2447
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %473, align 1, !tbaa !2448
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %474, align 1, !tbaa !2449
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %475, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %463, %467
  %476 = phi %struct.Memory* [ %466, %463 ], [ %MEMORY.11, %467 ]
  %477 = load i64, i64* %RAX
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 4
  store i64 %479, i64* %PC
  %480 = add i64 1, %477
  store i64 %480, i64* %RAX, align 8, !tbaa !2428
  %481 = icmp ult i64 %480, %477
  %482 = icmp ult i64 %480, 1
  %483 = or i1 %481, %482
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %484, i8* %485, align 1, !tbaa !2432
  %486 = trunc i64 %480 to i32
  %487 = and i32 %486, 255
  %488 = call i32 @llvm.ctpop.i32(i32 %487) #16
  %489 = trunc i32 %488 to i8
  %490 = and i8 %489, 1
  %491 = xor i8 %490, 1
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %491, i8* %492, align 1, !tbaa !2446
  %493 = xor i64 1, %477
  %494 = xor i64 %493, %480
  %495 = lshr i64 %494, 4
  %496 = trunc i64 %495 to i8
  %497 = and i8 %496, 1
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %497, i8* %498, align 1, !tbaa !2447
  %499 = icmp eq i64 %480, 0
  %500 = zext i1 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %500, i8* %501, align 1, !tbaa !2448
  %502 = lshr i64 %480, 63
  %503 = trunc i64 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %503, i8* %504, align 1, !tbaa !2449
  %505 = lshr i64 %477, 63
  %506 = xor i64 %502, %505
  %507 = add nuw nsw i64 %506, %502
  %508 = icmp eq i64 %507, 2
  %509 = zext i1 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %509, i8* %510, align 1, !tbaa !2450
  %511 = load i64, i64* %RAX
  %512 = load i64, i64* %PC
  %513 = add i64 %512, 8
  store i64 %513, i64* %PC
  store i64 %511, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11288) to i64*)
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 12
  store i64 %515, i64* %PC
  store i64 0, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*)
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 12
  store i64 %517, i64* %PC
  store i64 0, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 12
  store i64 %519, i64* %PC
  store i64 0, i64* inttoptr (i64 add (i64 ptrtoint (%seg_606088__data_type* @seg_606088__data to i64), i64 16) to i64*)
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 316
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 5
  store i64 %523, i64* %PC
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %521, i64* %524, align 8, !tbaa !2428
  br label %block_402b4f

block_402c44:                                     ; preds = %block_402c2c, %block_402b8e
  %MEMORY.2 = phi %struct.Memory* [ %2008, %block_402b8e ], [ %MEMORY.13, %block_402c2c ]
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 5
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 5
  store i64 %528, i64* %PC
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %526, i64* %529, align 8, !tbaa !2428
  br label %block_402c49

block_402ac2:                                     ; preds = %block_402ab4, %block_402a9b
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.14, %block_402ab4 ], [ %MEMORY.4, %block_402a9b ]
  %530 = load i64, i64* %RBP
  %531 = sub i64 %530, 56
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 4
  store i64 %533, i64* %PC
  %534 = inttoptr i64 %531 to i64*
  %535 = load i64, i64* %534
  store i64 %535, i64* %RAX, align 8, !tbaa !2428
  %536 = load i64, i64* %RAX
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 4
  store i64 %538, i64* %PC
  %539 = add i64 1, %536
  store i64 %539, i64* %RAX, align 8, !tbaa !2428
  %540 = icmp ult i64 %539, %536
  %541 = icmp ult i64 %539, 1
  %542 = or i1 %540, %541
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %543, i8* %544, align 1, !tbaa !2432
  %545 = trunc i64 %539 to i32
  %546 = and i32 %545, 255
  %547 = call i32 @llvm.ctpop.i32(i32 %546) #16
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  %551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %550, i8* %551, align 1, !tbaa !2446
  %552 = xor i64 1, %536
  %553 = xor i64 %552, %539
  %554 = lshr i64 %553, 4
  %555 = trunc i64 %554 to i8
  %556 = and i8 %555, 1
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %556, i8* %557, align 1, !tbaa !2447
  %558 = icmp eq i64 %539, 0
  %559 = zext i1 %558 to i8
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %559, i8* %560, align 1, !tbaa !2448
  %561 = lshr i64 %539, 63
  %562 = trunc i64 %561 to i8
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %562, i8* %563, align 1, !tbaa !2449
  %564 = lshr i64 %536, 63
  %565 = xor i64 %561, %564
  %566 = add nuw nsw i64 %565, %561
  %567 = icmp eq i64 %566, 2
  %568 = zext i1 %567 to i8
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %568, i8* %569, align 1, !tbaa !2450
  %570 = load i64, i64* %RBP
  %571 = sub i64 %570, 56
  %572 = load i64, i64* %RAX
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 4
  store i64 %574, i64* %PC
  %575 = inttoptr i64 %571 to i64*
  store i64 %572, i64* %575
  %576 = load i64, i64* %RBP
  %577 = sub i64 %576, 72
  %578 = load i64, i64* %PC
  %579 = add i64 %578, 4
  store i64 %579, i64* %PC
  %580 = inttoptr i64 %577 to i64*
  %581 = load i64, i64* %580
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = load i64, i64* %RBP
  %583 = sub i64 %582, 56
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 4
  store i64 %585, i64* %PC
  %586 = inttoptr i64 %583 to i64*
  %587 = load i64, i64* %586
  store i64 %587, i64* %RCX, align 8, !tbaa !2428
  %588 = load i64, i64* %RCX
  %589 = mul i64 %588, 8
  %590 = add i64 %589, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 8
  store i64 %592, i64* %PC
  %593 = inttoptr i64 %590 to i64*
  %594 = load i64, i64* %593
  store i64 %594, i64* %RCX, align 8, !tbaa !2428
  %595 = load i64, i64* %RCX
  %596 = load i64, i64* %RAX
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 3
  store i64 %598, i64* %PC
  %599 = inttoptr i64 %595 to i64*
  store i64 %596, i64* %599
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 80
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 4
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i64*
  %605 = load i64, i64* %604
  store i64 %605, i64* %RAX, align 8, !tbaa !2428
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 56
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC
  %610 = inttoptr i64 %607 to i64*
  %611 = load i64, i64* %610
  store i64 %611, i64* %RCX, align 8, !tbaa !2428
  %612 = load i64, i64* %RCX
  %613 = mul i64 %612, 8
  %614 = add i64 %613, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %615 = load i64, i64* %PC
  %616 = add i64 %615, 8
  store i64 %616, i64* %PC
  %617 = inttoptr i64 %614 to i64*
  %618 = load i64, i64* %617
  store i64 %618, i64* %RCX, align 8, !tbaa !2428
  %619 = load i64, i64* %RCX
  %620 = add i64 %619, 8
  %621 = load i64, i64* %RAX
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 4
  store i64 %623, i64* %PC
  %624 = inttoptr i64 %620 to i64*
  store i64 %621, i64* %624
  %625 = load i64, i64* %RBP
  %626 = sub i64 %625, 80
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 5
  store i64 %628, i64* %PC
  %629 = inttoptr i64 %626 to i64*
  %630 = load i64, i64* %629
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %631, align 1, !tbaa !2432
  %632 = trunc i64 %630 to i32
  %633 = and i32 %632, 255
  %634 = call i32 @llvm.ctpop.i32(i32 %633) #16
  %635 = trunc i32 %634 to i8
  %636 = and i8 %635, 1
  %637 = xor i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %637, i8* %638, align 1, !tbaa !2446
  %639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %639, align 1, !tbaa !2447
  %640 = icmp eq i64 %630, 0
  %641 = zext i1 %640 to i8
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %641, i8* %642, align 1, !tbaa !2448
  %643 = lshr i64 %630, 63
  %644 = trunc i64 %643 to i8
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %644, i8* %645, align 1, !tbaa !2449
  %646 = lshr i64 %630, 63
  %647 = xor i64 %643, %646
  %648 = add nuw nsw i64 %647, %646
  %649 = icmp eq i64 %648, 2
  %650 = zext i1 %649 to i8
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %650, i8* %651, align 1, !tbaa !2450
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 19
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 6
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 6
  store i64 %657, i64* %PC
  %658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %659 = load i8, i8* %658, align 1, !tbaa !2449
  %660 = icmp ne i8 %659, 0
  %661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %662 = load i8, i8* %661, align 1, !tbaa !2450
  %663 = icmp ne i8 %662, 0
  %664 = xor i1 %660, %663
  %665 = zext i1 %664 to i8
  store i8 %665, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %667 = select i1 %664, i64 %653, i64 %655
  store i64 %667, i64* %666, align 8, !tbaa !2428
  %668 = load i8, i8* %BRANCH_TAKEN
  %669 = icmp eq i8 %668, 1
  br i1 %669, label %block_402b0d, label %block_402b00

block_402a4c:                                     ; preds = %block_402a28, %block_402a3a
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.15, %block_402a28 ], [ %MEMORY.15, %block_402a3a ]
  %670 = load i64, i64* %RBP
  %671 = sub i64 %670, 81
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 3
  store i64 %673, i64* %PC
  %674 = inttoptr i64 %671 to i8*
  %675 = load i8, i8* %674
  store i8 %675, i8* %AL, align 1, !tbaa !2451
  %676 = load i8, i8* %AL
  %677 = zext i8 %676 to i64
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 2
  store i64 %679, i64* %PC
  %680 = and i64 1, %677
  %681 = trunc i64 %680 to i8
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %682, align 1, !tbaa !2432
  %683 = trunc i64 %680 to i32
  %684 = and i32 %683, 255
  %685 = call i32 @llvm.ctpop.i32(i32 %684) #16
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  %688 = xor i8 %687, 1
  %689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %688, i8* %689, align 1, !tbaa !2446
  %690 = icmp eq i8 %681, 0
  %691 = zext i1 %690 to i8
  %692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %691, i8* %692, align 1, !tbaa !2448
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %693, align 1, !tbaa !2449
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %694, align 1, !tbaa !2450
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %695, align 1, !tbaa !2447
  %696 = load i64, i64* %PC
  %697 = add i64 %696, 11
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 6
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 6
  store i64 %701, i64* %PC
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %703 = load i8, i8* %702, align 1, !tbaa !2448
  %704 = icmp eq i8 %703, 0
  %705 = zext i1 %704 to i8
  store i8 %705, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %707 = select i1 %704, i64 %697, i64 %699
  store i64 %707, i64* %706, align 8, !tbaa !2428
  %708 = load i8, i8* %BRANCH_TAKEN
  %709 = icmp eq i8 %708, 1
  br i1 %709, label %block_402a5c, label %block_402a57

block_402a5c:                                     ; preds = %block_402a4c
  %710 = load i64, i64* %RBP
  %711 = sub i64 %710, 48
  %712 = load i64, i64* %PC
  %713 = add i64 %712, 4
  store i64 %713, i64* %PC
  %714 = inttoptr i64 %711 to i64*
  %715 = load i64, i64* %714
  store i64 %715, i64* %RAX, align 8, !tbaa !2428
  %716 = load i64, i64* %RAX
  %717 = mul i64 %716, 8
  %718 = add i64 %717, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 8
  store i64 %720, i64* %PC
  %721 = inttoptr i64 %718 to i64*
  %722 = load i64, i64* %721
  store i64 %722, i64* %RAX, align 8, !tbaa !2428
  %723 = load i64, i64* %RAX
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 3
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i64*
  %727 = load i64, i64* %726
  store i64 %727, i64* %RAX, align 8, !tbaa !2428
  %728 = load i64, i64* %RBP
  %729 = sub i64 %728, 72
  %730 = load i64, i64* %RAX
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 4
  store i64 %732, i64* %PC
  %733 = inttoptr i64 %729 to i64*
  store i64 %730, i64* %733
  %734 = load i64, i64* %RBP
  %735 = sub i64 %734, 72
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 4
  store i64 %737, i64* %PC
  %738 = inttoptr i64 %735 to i64*
  %739 = load i64, i64* %738
  store i64 %739, i64* %RAX, align 8, !tbaa !2428
  %740 = load i64, i64* %RAX
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 3
  store i64 %742, i64* %PC
  %743 = inttoptr i64 %740 to i64*
  %744 = load i64, i64* %743
  store i64 %744, i64* %RAX, align 8, !tbaa !2428
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 72
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 4
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i64*
  %750 = load i64, i64* %749
  store i64 %750, i64* %RCX, align 8, !tbaa !2428
  %751 = load i64, i64* %RCX
  %752 = add i64 %751, 8
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 4
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %RCX, align 8, !tbaa !2428
  %757 = load i64, i64* %RAX
  %758 = load i64, i64* %RCX
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 3
  store i64 %760, i64* %PC
  %761 = inttoptr i64 %758 to i64*
  %762 = load i64, i64* %761
  %763 = sub i64 %757, %762
  store i64 %763, i64* %RAX, align 8, !tbaa !2428
  %764 = icmp ugt i64 %762, %757
  %765 = zext i1 %764 to i8
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %765, i8* %766, align 1, !tbaa !2432
  %767 = trunc i64 %763 to i32
  %768 = and i32 %767, 255
  %769 = call i32 @llvm.ctpop.i32(i32 %768) #16
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = xor i8 %771, 1
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %772, i8* %773, align 1, !tbaa !2446
  %774 = xor i64 %762, %757
  %775 = xor i64 %774, %763
  %776 = lshr i64 %775, 4
  %777 = trunc i64 %776 to i8
  %778 = and i8 %777, 1
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %778, i8* %779, align 1, !tbaa !2447
  %780 = icmp eq i64 %763, 0
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %781, i8* %782, align 1, !tbaa !2448
  %783 = lshr i64 %763, 63
  %784 = trunc i64 %783 to i8
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %784, i8* %785, align 1, !tbaa !2449
  %786 = lshr i64 %757, 63
  %787 = lshr i64 %762, 63
  %788 = xor i64 %787, %786
  %789 = xor i64 %783, %786
  %790 = add nuw nsw i64 %789, %788
  %791 = icmp eq i64 %790, 2
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %792, i8* %793, align 1, !tbaa !2450
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 72
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 4
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %795 to i64*
  %799 = load i64, i64* %798
  store i64 %799, i64* %RCX, align 8, !tbaa !2428
  %800 = load i64, i64* %RCX
  %801 = add i64 %800, 16
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC
  %804 = inttoptr i64 %801 to i64*
  %805 = load i64, i64* %804
  store i64 %805, i64* %RCX, align 8, !tbaa !2428
  %806 = load i64, i64* %RAX
  %807 = load i64, i64* %RCX
  %808 = load i64, i64* %PC
  %809 = add i64 %808, 3
  store i64 %809, i64* %PC
  %810 = inttoptr i64 %807 to i64*
  %811 = load i64, i64* %810
  %812 = add i64 %811, %806
  store i64 %812, i64* %RAX, align 8, !tbaa !2428
  %813 = icmp ult i64 %812, %806
  %814 = icmp ult i64 %812, %811
  %815 = or i1 %813, %814
  %816 = zext i1 %815 to i8
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %816, i8* %817, align 1, !tbaa !2432
  %818 = trunc i64 %812 to i32
  %819 = and i32 %818, 255
  %820 = call i32 @llvm.ctpop.i32(i32 %819) #16
  %821 = trunc i32 %820 to i8
  %822 = and i8 %821, 1
  %823 = xor i8 %822, 1
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %823, i8* %824, align 1, !tbaa !2446
  %825 = xor i64 %811, %806
  %826 = xor i64 %825, %812
  %827 = lshr i64 %826, 4
  %828 = trunc i64 %827 to i8
  %829 = and i8 %828, 1
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %829, i8* %830, align 1, !tbaa !2447
  %831 = icmp eq i64 %812, 0
  %832 = zext i1 %831 to i8
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %832, i8* %833, align 1, !tbaa !2448
  %834 = lshr i64 %812, 63
  %835 = trunc i64 %834 to i8
  %836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %835, i8* %836, align 1, !tbaa !2449
  %837 = lshr i64 %806, 63
  %838 = lshr i64 %811, 63
  %839 = xor i64 %834, %837
  %840 = xor i64 %834, %838
  %841 = add nuw nsw i64 %839, %840
  %842 = icmp eq i64 %841, 2
  %843 = zext i1 %842 to i8
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %843, i8* %844, align 1, !tbaa !2450
  %845 = load i64, i64* %RBP
  %846 = sub i64 %845, 80
  %847 = load i64, i64* %RAX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 4
  store i64 %849, i64* %PC
  %850 = inttoptr i64 %846 to i64*
  store i64 %847, i64* %850
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 80
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 5
  store i64 %854, i64* %PC
  %855 = inttoptr i64 %852 to i64*
  %856 = load i64, i64* %855
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %857, align 1, !tbaa !2432
  %858 = trunc i64 %856 to i32
  %859 = and i32 %858, 255
  %860 = call i32 @llvm.ctpop.i32(i32 %859) #16
  %861 = trunc i32 %860 to i8
  %862 = and i8 %861, 1
  %863 = xor i8 %862, 1
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %863, i8* %864, align 1, !tbaa !2446
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %865, align 1, !tbaa !2447
  %866 = icmp eq i64 %856, 0
  %867 = zext i1 %866 to i8
  %868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %867, i8* %868, align 1, !tbaa !2448
  %869 = lshr i64 %856, 63
  %870 = trunc i64 %869 to i8
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %870, i8* %871, align 1, !tbaa !2449
  %872 = lshr i64 %856, 63
  %873 = xor i64 %869, %872
  %874 = add nuw nsw i64 %873, %872
  %875 = icmp eq i64 %874, 2
  %876 = zext i1 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %876, i8* %877, align 1, !tbaa !2450
  %878 = load i64, i64* %PC
  %879 = add i64 %878, 20
  %880 = load i64, i64* %PC
  %881 = add i64 %880, 6
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 6
  store i64 %883, i64* %PC
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %885 = load i8, i8* %884, align 1, !tbaa !2449
  %886 = icmp ne i8 %885, 0
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %888 = load i8, i8* %887, align 1, !tbaa !2450
  %889 = icmp ne i8 %888, 0
  %890 = xor i1 %886, %889
  %891 = xor i1 %890, true
  %892 = zext i1 %891 to i8
  store i8 %892, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %894 = select i1 %890, i64 %881, i64 %879
  store i64 %894, i64* %893, align 8, !tbaa !2428
  %895 = load i8, i8* %BRANCH_TAKEN
  %896 = icmp eq i8 %895, 1
  br i1 %896, label %block_402aa9, label %block_402a9b

block_402cb6:                                     ; preds = %block_402ca4
  %897 = load i64, i64* %PC
  %898 = sub i64 %897, 347
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 5
  store i64 %900, i64* %PC
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %898, i64* %901, align 8, !tbaa !2428
  br label %block_402b5b

block_402b2d:                                     ; preds = %block_402aa9, %block_402ab4, %block_402b19
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.14, %block_402aa9 ], [ %MEMORY.14, %block_402ab4 ], [ %MEMORY.9, %block_402b19 ]
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 5
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 5
  store i64 %905, i64* %PC
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %903, i64* %906, align 8, !tbaa !2428
  %907 = load i64, i64* %RBP
  %908 = sub i64 %907, 48
  %909 = load i64, i64* %PC
  %910 = add i64 %909, 4
  store i64 %910, i64* %PC
  %911 = inttoptr i64 %908 to i64*
  %912 = load i64, i64* %911
  store i64 %912, i64* %RAX, align 8, !tbaa !2428
  %913 = load i64, i64* %RAX
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 4
  store i64 %915, i64* %PC
  %916 = add i64 1, %913
  store i64 %916, i64* %RAX, align 8, !tbaa !2428
  %917 = icmp ult i64 %916, %913
  %918 = icmp ult i64 %916, 1
  %919 = or i1 %917, %918
  %920 = zext i1 %919 to i8
  %921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %920, i8* %921, align 1, !tbaa !2432
  %922 = trunc i64 %916 to i32
  %923 = and i32 %922, 255
  %924 = call i32 @llvm.ctpop.i32(i32 %923) #16
  %925 = trunc i32 %924 to i8
  %926 = and i8 %925, 1
  %927 = xor i8 %926, 1
  %928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %927, i8* %928, align 1, !tbaa !2446
  %929 = xor i64 1, %913
  %930 = xor i64 %929, %916
  %931 = lshr i64 %930, 4
  %932 = trunc i64 %931 to i8
  %933 = and i8 %932, 1
  %934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %933, i8* %934, align 1, !tbaa !2447
  %935 = icmp eq i64 %916, 0
  %936 = zext i1 %935 to i8
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %936, i8* %937, align 1, !tbaa !2448
  %938 = lshr i64 %916, 63
  %939 = trunc i64 %938 to i8
  %940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %939, i8* %940, align 1, !tbaa !2449
  %941 = lshr i64 %913, 63
  %942 = xor i64 %938, %941
  %943 = add nuw nsw i64 %942, %938
  %944 = icmp eq i64 %943, 2
  %945 = zext i1 %944 to i8
  %946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %945, i8* %946, align 1, !tbaa !2450
  %947 = load i64, i64* %RBP
  %948 = sub i64 %947, 48
  %949 = load i64, i64* %RAX
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 4
  store i64 %951, i64* %PC
  %952 = inttoptr i64 %948 to i64*
  store i64 %949, i64* %952
  %953 = load i64, i64* %PC
  %954 = sub i64 %953, 278
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 5
  store i64 %956, i64* %PC
  %957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %954, i64* %957, align 8, !tbaa !2428
  br label %block_402a28

block_402ca4:                                     ; preds = %block_402c95
  %958 = load i64, i64* %PC
  %959 = add i64 %958, 8
  store i64 %959, i64* %PC
  %960 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*)
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = load i64, i64* %RAX
  %962 = load i64, i64* %RBP
  %963 = sub i64 %962, 64
  %964 = load i64, i64* %PC
  %965 = add i64 %964, 4
  store i64 %965, i64* %PC
  %966 = inttoptr i64 %963 to i64*
  %967 = load i64, i64* %966
  %968 = sub i64 %961, %967
  %969 = icmp ugt i64 %967, %961
  %970 = zext i1 %969 to i8
  %971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %970, i8* %971, align 1, !tbaa !2432
  %972 = trunc i64 %968 to i32
  %973 = and i32 %972, 255
  %974 = call i32 @llvm.ctpop.i32(i32 %973) #16
  %975 = trunc i32 %974 to i8
  %976 = and i8 %975, 1
  %977 = xor i8 %976, 1
  %978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %977, i8* %978, align 1, !tbaa !2446
  %979 = xor i64 %967, %961
  %980 = xor i64 %979, %968
  %981 = lshr i64 %980, 4
  %982 = trunc i64 %981 to i8
  %983 = and i8 %982, 1
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %983, i8* %984, align 1, !tbaa !2447
  %985 = icmp eq i64 %968, 0
  %986 = zext i1 %985 to i8
  %987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %986, i8* %987, align 1, !tbaa !2448
  %988 = lshr i64 %968, 63
  %989 = trunc i64 %988 to i8
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %989, i8* %990, align 1, !tbaa !2449
  %991 = lshr i64 %961, 63
  %992 = lshr i64 %967, 63
  %993 = xor i64 %992, %991
  %994 = xor i64 %988, %991
  %995 = add nuw nsw i64 %994, %993
  %996 = icmp eq i64 %995, 2
  %997 = zext i1 %996 to i8
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %997, i8* %998, align 1, !tbaa !2450
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 11
  %1001 = load i64, i64* %PC
  %1002 = add i64 %1001, 6
  %1003 = load i64, i64* %PC
  %1004 = add i64 %1003, 6
  store i64 %1004, i64* %PC
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1006 = load i8, i8* %1005, align 1, !tbaa !2448
  store i8 %1006, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1008 = icmp ne i8 %1006, 0
  %1009 = select i1 %1008, i64 %1000, i64 %1002
  store i64 %1009, i64* %1007, align 8, !tbaa !2428
  %1010 = load i8, i8* %BRANCH_TAKEN
  %1011 = icmp eq i8 %1010, 1
  br i1 %1011, label %block_402cbb, label %block_402cb6

block_402c20:                                     ; preds = %block_402bc5
  %1012 = load i64, i64* %RAX
  %1013 = load i32, i32* %EAX
  %1014 = zext i32 %1013 to i64
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 2
  store i64 %1016, i64* %PC
  %1017 = xor i64 %1014, %1012
  %1018 = trunc i64 %1017 to i32
  %1019 = and i64 %1017, 4294967295
  store i64 %1019, i64* %RAX, align 8, !tbaa !2428
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1020, align 1, !tbaa !2432
  %1021 = and i32 %1018, 255
  %1022 = call i32 @llvm.ctpop.i32(i32 %1021) #16
  %1023 = trunc i32 %1022 to i8
  %1024 = and i8 %1023, 1
  %1025 = xor i8 %1024, 1
  %1026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1025, i8* %1026, align 1, !tbaa !2446
  %1027 = icmp eq i32 %1018, 0
  %1028 = zext i1 %1027 to i8
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1028, i8* %1029, align 1, !tbaa !2448
  %1030 = lshr i32 %1018, 31
  %1031 = trunc i32 %1030 to i8
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1031, i8* %1032, align 1, !tbaa !2449
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1033, align 1, !tbaa !2450
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1034, align 1, !tbaa !2447
  %1035 = load i32, i32* %EAX
  %1036 = zext i32 %1035 to i64
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 2
  store i64 %1038, i64* %PC
  %1039 = and i64 %1036, 4294967295
  store i64 %1039, i64* %RCX, align 8, !tbaa !2428
  %1040 = load i64, i64* %RCX
  %1041 = load i64, i64* %RBP
  %1042 = sub i64 %1041, 80
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 4
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  %1047 = sub i64 %1040, %1046
  store i64 %1047, i64* %RCX, align 8, !tbaa !2428
  %1048 = icmp ugt i64 %1046, %1040
  %1049 = zext i1 %1048 to i8
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1049, i8* %1050, align 1, !tbaa !2432
  %1051 = trunc i64 %1047 to i32
  %1052 = and i32 %1051, 255
  %1053 = call i32 @llvm.ctpop.i32(i32 %1052) #16
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  %1056 = xor i8 %1055, 1
  %1057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1056, i8* %1057, align 1, !tbaa !2446
  %1058 = xor i64 %1046, %1040
  %1059 = xor i64 %1058, %1047
  %1060 = lshr i64 %1059, 4
  %1061 = trunc i64 %1060 to i8
  %1062 = and i8 %1061, 1
  %1063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1062, i8* %1063, align 1, !tbaa !2447
  %1064 = icmp eq i64 %1047, 0
  %1065 = zext i1 %1064 to i8
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1065, i8* %1066, align 1, !tbaa !2448
  %1067 = lshr i64 %1047, 63
  %1068 = trunc i64 %1067 to i8
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1068, i8* %1069, align 1, !tbaa !2449
  %1070 = lshr i64 %1040, 63
  %1071 = lshr i64 %1046, 63
  %1072 = xor i64 %1071, %1070
  %1073 = xor i64 %1067, %1070
  %1074 = add nuw nsw i64 %1073, %1072
  %1075 = icmp eq i64 %1074, 2
  %1076 = zext i1 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1076, i8* %1077, align 1, !tbaa !2450
  %1078 = load i64, i64* %RBP
  %1079 = sub i64 %1078, 104
  %1080 = load i64, i64* %RCX
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 4
  store i64 %1082, i64* %PC
  %1083 = inttoptr i64 %1079 to i64*
  store i64 %1080, i64* %1083
  br label %block_402c2c

block_402d24:                                     ; preds = %block_402cca, %block_402cee
  %MEMORY.6 = phi %struct.Memory* [ %166, %block_402cee ], [ %MEMORY.12, %block_402cca ]
  %1084 = load i64, i64* %RBP
  %1085 = sub i64 %1084, 8
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 4
  store i64 %1087, i64* %PC
  %1088 = inttoptr i64 %1085 to i64*
  %1089 = load i64, i64* %1088
  store i64 %1089, i64* %RAX, align 8, !tbaa !2428
  %1090 = load i64, i64* %RSP
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 4
  store i64 %1092, i64* %PC
  %1093 = add i64 112, %1090
  store i64 %1093, i64* %RSP, align 8, !tbaa !2428
  %1094 = icmp ult i64 %1093, %1090
  %1095 = icmp ult i64 %1093, 112
  %1096 = or i1 %1094, %1095
  %1097 = zext i1 %1096 to i8
  %1098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1097, i8* %1098, align 1, !tbaa !2432
  %1099 = trunc i64 %1093 to i32
  %1100 = and i32 %1099, 255
  %1101 = call i32 @llvm.ctpop.i32(i32 %1100) #16
  %1102 = trunc i32 %1101 to i8
  %1103 = and i8 %1102, 1
  %1104 = xor i8 %1103, 1
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1104, i8* %1105, align 1, !tbaa !2446
  %1106 = xor i64 112, %1090
  %1107 = xor i64 %1106, %1093
  %1108 = lshr i64 %1107, 4
  %1109 = trunc i64 %1108 to i8
  %1110 = and i8 %1109, 1
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1110, i8* %1111, align 1, !tbaa !2447
  %1112 = icmp eq i64 %1093, 0
  %1113 = zext i1 %1112 to i8
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1113, i8* %1114, align 1, !tbaa !2448
  %1115 = lshr i64 %1093, 63
  %1116 = trunc i64 %1115 to i8
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1116, i8* %1117, align 1, !tbaa !2449
  %1118 = lshr i64 %1090, 63
  %1119 = xor i64 %1115, %1118
  %1120 = add nuw nsw i64 %1119, %1115
  %1121 = icmp eq i64 %1120, 2
  %1122 = zext i1 %1121 to i8
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1122, i8* %1123, align 1, !tbaa !2450
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 1
  store i64 %1125, i64* %PC
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1127 = load i64, i64* %1126, align 8, !tbaa !2428
  %1128 = add i64 %1127, 8
  %1129 = inttoptr i64 %1127 to i64*
  %1130 = load i64, i64* %1129
  store i64 %1130, i64* %RBP, align 8, !tbaa !2428
  store i64 %1128, i64* %1126, align 8, !tbaa !2428
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 1
  store i64 %1132, i64* %PC
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1135 = load i64, i64* %1134, align 8, !tbaa !2428
  %1136 = inttoptr i64 %1135 to i64*
  %1137 = load i64, i64* %1136
  store i64 %1137, i64* %1133, align 8, !tbaa !2428
  %1138 = add i64 %1135, 8
  store i64 %1138, i64* %1134, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_40299d:                                     ; preds = %block_40298f
  %1139 = add i64 %1827, 10
  store i64 %1139, i64* %PC
  store i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 2864), i64* %RAX, align 8, !tbaa !2428
  %1140 = load i64, i64* %RBP
  %1141 = sub i64 %1140, 48
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 5
  store i64 %1143, i64* %PC
  %1144 = inttoptr i64 %1141 to i64*
  %1145 = load i64, i64* %1144
  %1146 = sext i64 %1145 to i128
  %1147 = and i128 %1146, -18446744073709551616
  %1148 = zext i64 %1145 to i128
  %1149 = or i128 %1147, %1148
  %1150 = mul nsw i128 %1149, 24
  %1151 = trunc i128 %1150 to i64
  store i64 %1151, i64* %RCX, align 8, !tbaa !2428
  %1152 = sext i64 %1151 to i128
  %1153 = icmp ne i128 %1152, %1150
  %1154 = zext i1 %1153 to i8
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1154, i8* %1155, align 1, !tbaa !2432
  %1156 = trunc i128 %1150 to i32
  %1157 = and i32 %1156, 255
  %1158 = call i32 @llvm.ctpop.i32(i32 %1157) #16
  %1159 = trunc i32 %1158 to i8
  %1160 = and i8 %1159, 1
  %1161 = xor i8 %1160, 1
  %1162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1161, i8* %1162, align 1, !tbaa !2446
  %1163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1163, align 1, !tbaa !2447
  %1164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1164, align 1, !tbaa !2448
  %1165 = lshr i64 %1151, 63
  %1166 = trunc i64 %1165 to i8
  %1167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1166, i8* %1167, align 1, !tbaa !2449
  %1168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1154, i8* %1168, align 1, !tbaa !2450
  %1169 = load i64, i64* %RAX
  %1170 = load i64, i64* %RCX
  %1171 = load i64, i64* %PC
  %1172 = add i64 %1171, 3
  store i64 %1172, i64* %PC
  %1173 = add i64 %1170, %1169
  store i64 %1173, i64* %RAX, align 8, !tbaa !2428
  %1174 = icmp ult i64 %1173, %1169
  %1175 = icmp ult i64 %1173, %1170
  %1176 = or i1 %1174, %1175
  %1177 = zext i1 %1176 to i8
  %1178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1177, i8* %1178, align 1, !tbaa !2432
  %1179 = trunc i64 %1173 to i32
  %1180 = and i32 %1179, 255
  %1181 = call i32 @llvm.ctpop.i32(i32 %1180) #16
  %1182 = trunc i32 %1181 to i8
  %1183 = and i8 %1182, 1
  %1184 = xor i8 %1183, 1
  %1185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1184, i8* %1185, align 1, !tbaa !2446
  %1186 = xor i64 %1170, %1169
  %1187 = xor i64 %1186, %1173
  %1188 = lshr i64 %1187, 4
  %1189 = trunc i64 %1188 to i8
  %1190 = and i8 %1189, 1
  %1191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1190, i8* %1191, align 1, !tbaa !2447
  %1192 = icmp eq i64 %1173, 0
  %1193 = zext i1 %1192 to i8
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1193, i8* %1194, align 1, !tbaa !2448
  %1195 = lshr i64 %1173, 63
  %1196 = trunc i64 %1195 to i8
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1196, i8* %1197, align 1, !tbaa !2449
  %1198 = lshr i64 %1169, 63
  %1199 = lshr i64 %1170, 63
  %1200 = xor i64 %1195, %1198
  %1201 = xor i64 %1195, %1199
  %1202 = add nuw nsw i64 %1200, %1201
  %1203 = icmp eq i64 %1202, 2
  %1204 = zext i1 %1203 to i8
  %1205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1204, i8* %1205, align 1, !tbaa !2450
  %1206 = load i64, i64* %RBP
  %1207 = sub i64 %1206, 48
  %1208 = load i64, i64* %PC
  %1209 = add i64 %1208, 4
  store i64 %1209, i64* %PC
  %1210 = inttoptr i64 %1207 to i64*
  %1211 = load i64, i64* %1210
  store i64 %1211, i64* %RCX, align 8, !tbaa !2428
  %1212 = load i64, i64* %RCX
  %1213 = mul i64 %1212, 8
  %1214 = add i64 %1213, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %1215 = load i64, i64* %RAX
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 8
  store i64 %1217, i64* %PC
  %1218 = inttoptr i64 %1214 to i64*
  store i64 %1215, i64* %1218
  %1219 = load i64, i64* %RBP
  %1220 = sub i64 %1219, 48
  %1221 = load i64, i64* %PC
  %1222 = add i64 %1221, 4
  store i64 %1222, i64* %PC
  %1223 = inttoptr i64 %1220 to i64*
  %1224 = load i64, i64* %1223
  store i64 %1224, i64* %RAX, align 8, !tbaa !2428
  %1225 = load i64, i64* %RAX
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 4
  store i64 %1227, i64* %PC
  %1228 = add i64 1, %1225
  store i64 %1228, i64* %RAX, align 8, !tbaa !2428
  %1229 = icmp ult i64 %1228, %1225
  %1230 = icmp ult i64 %1228, 1
  %1231 = or i1 %1229, %1230
  %1232 = zext i1 %1231 to i8
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1232, i8* %1233, align 1, !tbaa !2432
  %1234 = trunc i64 %1228 to i32
  %1235 = and i32 %1234, 255
  %1236 = call i32 @llvm.ctpop.i32(i32 %1235) #16
  %1237 = trunc i32 %1236 to i8
  %1238 = and i8 %1237, 1
  %1239 = xor i8 %1238, 1
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1239, i8* %1240, align 1, !tbaa !2446
  %1241 = xor i64 1, %1225
  %1242 = xor i64 %1241, %1228
  %1243 = lshr i64 %1242, 4
  %1244 = trunc i64 %1243 to i8
  %1245 = and i8 %1244, 1
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1245, i8* %1246, align 1, !tbaa !2447
  %1247 = icmp eq i64 %1228, 0
  %1248 = zext i1 %1247 to i8
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1248, i8* %1249, align 1, !tbaa !2448
  %1250 = lshr i64 %1228, 63
  %1251 = trunc i64 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1251, i8* %1252, align 1, !tbaa !2449
  %1253 = lshr i64 %1225, 63
  %1254 = xor i64 %1250, %1253
  %1255 = add nuw nsw i64 %1254, %1250
  %1256 = icmp eq i64 %1255, 2
  %1257 = zext i1 %1256 to i8
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1257, i8* %1258, align 1, !tbaa !2450
  %1259 = load i64, i64* %RBP
  %1260 = sub i64 %1259, 48
  %1261 = load i64, i64* %RAX
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 4
  store i64 %1263, i64* %PC
  %1264 = inttoptr i64 %1260 to i64*
  store i64 %1261, i64* %1264
  %1265 = load i64, i64* %PC
  %1266 = sub i64 %1265, 56
  %1267 = load i64, i64* %PC
  %1268 = add i64 %1267, 5
  store i64 %1268, i64* %PC
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1266, i64* %1269, align 8, !tbaa !2428
  br label %block_40298f

block_402b72:                                     ; preds = %block_402c49, %block_402b5b
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.0, %block_402b5b ], [ %MEMORY.8, %block_402c49 ]
  %1270 = load i64, i64* %RBP
  %1271 = sub i64 %1270, 72
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 4
  store i64 %1273, i64* %PC
  %1274 = inttoptr i64 %1271 to i64*
  %1275 = load i64, i64* %1274
  store i64 %1275, i64* %RAX, align 8, !tbaa !2428
  %1276 = load i64, i64* %RAX
  %1277 = load i64, i64* %RBP
  %1278 = sub i64 %1277, 32
  %1279 = load i64, i64* %PC
  %1280 = add i64 %1279, 4
  store i64 %1280, i64* %PC
  %1281 = inttoptr i64 %1278 to i64*
  %1282 = load i64, i64* %1281
  %1283 = sub i64 %1276, %1282
  %1284 = icmp ugt i64 %1282, %1276
  %1285 = zext i1 %1284 to i8
  %1286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1285, i8* %1286, align 1, !tbaa !2432
  %1287 = trunc i64 %1283 to i32
  %1288 = and i32 %1287, 255
  %1289 = call i32 @llvm.ctpop.i32(i32 %1288) #16
  %1290 = trunc i32 %1289 to i8
  %1291 = and i8 %1290, 1
  %1292 = xor i8 %1291, 1
  %1293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1292, i8* %1293, align 1, !tbaa !2446
  %1294 = xor i64 %1282, %1276
  %1295 = xor i64 %1294, %1283
  %1296 = lshr i64 %1295, 4
  %1297 = trunc i64 %1296 to i8
  %1298 = and i8 %1297, 1
  %1299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1298, i8* %1299, align 1, !tbaa !2447
  %1300 = icmp eq i64 %1283, 0
  %1301 = zext i1 %1300 to i8
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1301, i8* %1302, align 1, !tbaa !2448
  %1303 = lshr i64 %1283, 63
  %1304 = trunc i64 %1303 to i8
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1304, i8* %1305, align 1, !tbaa !2449
  %1306 = lshr i64 %1276, 63
  %1307 = lshr i64 %1282, 63
  %1308 = xor i64 %1307, %1306
  %1309 = xor i64 %1303, %1306
  %1310 = add nuw nsw i64 %1309, %1308
  %1311 = icmp eq i64 %1310, 2
  %1312 = zext i1 %1311 to i8
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1312, i8* %1313, align 1, !tbaa !2450
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 237
  %1316 = load i64, i64* %PC
  %1317 = add i64 %1316, 6
  %1318 = load i64, i64* %PC
  %1319 = add i64 %1318, 6
  store i64 %1319, i64* %PC
  %1320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1321 = load i8, i8* %1320, align 1, !tbaa !2432
  %1322 = icmp eq i8 %1321, 0
  %1323 = zext i1 %1322 to i8
  store i8 %1323, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1325 = select i1 %1322, i64 %1315, i64 %1317
  store i64 %1325, i64* %1324, align 8, !tbaa !2428
  %1326 = load i8, i8* %BRANCH_TAKEN
  %1327 = icmp eq i8 %1326, 1
  br i1 %1327, label %block_402c67, label %block_402b80

block_402cca:                                     ; preds = %block_402cbb
  %1328 = add i64 %1866, 12
  store i64 %1328, i64* %PC
  store i64 1, i64* inttoptr (i64 add (i64 ptrtoint (%seg_606088__data_type* @seg_606088__data to i64), i64 16) to i64*)
  %1329 = load i64, i64* %RBP
  %1330 = sub i64 %1329, 40
  %1331 = load i64, i64* %PC
  %1332 = add i64 %1331, 4
  store i64 %1332, i64* %PC
  %1333 = inttoptr i64 %1330 to i64*
  %1334 = load i64, i64* %1333
  store i64 %1334, i64* %RAX, align 8, !tbaa !2428
  %1335 = load i64, i64* %RAX
  %1336 = load i64, i64* %PC
  %1337 = add i64 %1336, 7
  store i64 %1337, i64* %PC
  %1338 = inttoptr i64 %1335 to i64*
  store i64 0, i64* %1338
  %1339 = load i64, i64* %RBP
  %1340 = sub i64 %1339, 8
  %1341 = load i64, i64* %PC
  %1342 = add i64 %1341, 8
  store i64 %1342, i64* %PC
  %1343 = inttoptr i64 %1340 to i64*
  store i64 0, i64* %1343
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 59
  %1346 = load i64, i64* %PC
  %1347 = add i64 %1346, 5
  store i64 %1347, i64* %PC
  %1348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1345, i64* %1348, align 8, !tbaa !2428
  br label %block_402d24

block_402c49:                                     ; preds = %block_402b80, %block_402c44
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.7, %block_402b80 ], [ %MEMORY.2, %block_402c44 ]
  %1349 = load i64, i64* %PC
  %1350 = add i64 %1349, 5
  %1351 = load i64, i64* %PC
  %1352 = add i64 %1351, 5
  store i64 %1352, i64* %PC
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1350, i64* %1353, align 8, !tbaa !2428
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 8
  store i64 %1355, i64* %PC
  %1356 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11288) to i64*)
  store i64 %1356, i64* %RAX, align 8, !tbaa !2428
  %1357 = load i64, i64* %RAX
  %1358 = load i64, i64* %PC
  %1359 = add i64 %1358, 4
  store i64 %1359, i64* %PC
  %1360 = shl i64 %1357, 5
  %1361 = icmp slt i64 %1360, 0
  %1362 = shl i64 %1360, 1
  store i64 %1362, i64* %RAX, align 8, !tbaa !2428
  %1363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1364 = zext i1 %1361 to i8
  store i8 %1364, i8* %1363, align 1, !tbaa !2451
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1366 = trunc i64 %1362 to i32
  %1367 = and i32 %1366, 254
  %1368 = call i32 @llvm.ctpop.i32(i32 %1367) #16
  %1369 = trunc i32 %1368 to i8
  %1370 = and i8 %1369, 1
  %1371 = xor i8 %1370, 1
  store i8 %1371, i8* %1365, align 1, !tbaa !2451
  %1372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1372, align 1, !tbaa !2451
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1374 = icmp eq i64 %1362, 0
  %1375 = zext i1 %1374 to i8
  store i8 %1375, i8* %1373, align 1, !tbaa !2451
  %1376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1377 = lshr i64 %1362, 63
  %1378 = trunc i64 %1377 to i8
  store i8 %1378, i8* %1376, align 1, !tbaa !2451
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1379, align 1, !tbaa !2451
  %1380 = load i64, i64* %RAX
  %1381 = load i64, i64* %RBP
  %1382 = sub i64 %1381, 72
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 4
  store i64 %1384, i64* %PC
  %1385 = inttoptr i64 %1382 to i64*
  %1386 = load i64, i64* %1385
  %1387 = add i64 %1386, %1380
  store i64 %1387, i64* %RAX, align 8, !tbaa !2428
  %1388 = icmp ult i64 %1387, %1380
  %1389 = icmp ult i64 %1387, %1386
  %1390 = or i1 %1388, %1389
  %1391 = zext i1 %1390 to i8
  %1392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1391, i8* %1392, align 1, !tbaa !2432
  %1393 = trunc i64 %1387 to i32
  %1394 = and i32 %1393, 255
  %1395 = call i32 @llvm.ctpop.i32(i32 %1394) #16
  %1396 = trunc i32 %1395 to i8
  %1397 = and i8 %1396, 1
  %1398 = xor i8 %1397, 1
  %1399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1398, i8* %1399, align 1, !tbaa !2446
  %1400 = xor i64 %1386, %1380
  %1401 = xor i64 %1400, %1387
  %1402 = lshr i64 %1401, 4
  %1403 = trunc i64 %1402 to i8
  %1404 = and i8 %1403, 1
  %1405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1404, i8* %1405, align 1, !tbaa !2447
  %1406 = icmp eq i64 %1387, 0
  %1407 = zext i1 %1406 to i8
  %1408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1407, i8* %1408, align 1, !tbaa !2448
  %1409 = lshr i64 %1387, 63
  %1410 = trunc i64 %1409 to i8
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1410, i8* %1411, align 1, !tbaa !2449
  %1412 = lshr i64 %1380, 63
  %1413 = lshr i64 %1386, 63
  %1414 = xor i64 %1409, %1412
  %1415 = xor i64 %1409, %1413
  %1416 = add nuw nsw i64 %1414, %1415
  %1417 = icmp eq i64 %1416, 2
  %1418 = zext i1 %1417 to i8
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1418, i8* %1419, align 1, !tbaa !2450
  %1420 = load i64, i64* %RBP
  %1421 = sub i64 %1420, 72
  %1422 = load i64, i64* %RAX
  %1423 = load i64, i64* %PC
  %1424 = add i64 %1423, 4
  store i64 %1424, i64* %PC
  %1425 = inttoptr i64 %1421 to i64*
  store i64 %1422, i64* %1425
  %1426 = load i64, i64* %PC
  %1427 = sub i64 %1426, 240
  %1428 = load i64, i64* %PC
  %1429 = add i64 %1428, 5
  store i64 %1429, i64* %PC
  %1430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1427, i64* %1430, align 8, !tbaa !2428
  br label %block_402b72

block_402a9b:                                     ; preds = %block_402a5c
  %1431 = load i64, i64* %RBP
  %1432 = sub i64 %1431, 72
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 4
  store i64 %1434, i64* %PC
  %1435 = inttoptr i64 %1432 to i64*
  %1436 = load i64, i64* %1435
  store i64 %1436, i64* %RAX, align 8, !tbaa !2428
  %1437 = load i64, i64* %RAX
  %1438 = add i64 %1437, 24
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 4
  store i64 %1440, i64* %PC
  %1441 = inttoptr i64 %1438 to i32*
  %1442 = load i32, i32* %1441
  %1443 = sub i32 %1442, 1
  %1444 = icmp ult i32 %1442, 1
  %1445 = zext i1 %1444 to i8
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1445, i8* %1446, align 1, !tbaa !2432
  %1447 = and i32 %1443, 255
  %1448 = call i32 @llvm.ctpop.i32(i32 %1447) #16
  %1449 = trunc i32 %1448 to i8
  %1450 = and i8 %1449, 1
  %1451 = xor i8 %1450, 1
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1451, i8* %1452, align 1, !tbaa !2446
  %1453 = xor i32 %1442, 1
  %1454 = xor i32 %1453, %1443
  %1455 = lshr i32 %1454, 4
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1457, i8* %1458, align 1, !tbaa !2447
  %1459 = icmp eq i32 %1443, 0
  %1460 = zext i1 %1459 to i8
  %1461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1460, i8* %1461, align 1, !tbaa !2448
  %1462 = lshr i32 %1443, 31
  %1463 = trunc i32 %1462 to i8
  %1464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1463, i8* %1464, align 1, !tbaa !2449
  %1465 = lshr i32 %1442, 31
  %1466 = xor i32 %1462, %1465
  %1467 = add nuw nsw i32 %1466, %1465
  %1468 = icmp eq i32 %1467, 2
  %1469 = zext i1 %1468 to i8
  %1470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1469, i8* %1470, align 1, !tbaa !2450
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 31
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 6
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 6
  store i64 %1476, i64* %PC
  %1477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1478 = load i8, i8* %1477, align 1, !tbaa !2448
  store i8 %1478, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1480 = icmp ne i8 %1478, 0
  %1481 = select i1 %1480, i64 %1472, i64 %1474
  store i64 %1481, i64* %1479, align 8, !tbaa !2428
  %1482 = load i8, i8* %BRANCH_TAKEN
  %1483 = icmp eq i8 %1482, 1
  br i1 %1483, label %block_402ac2, label %block_402aa9

block_402bc5:                                     ; preds = %block_402b8e
  %1484 = load i64, i64* %PC
  %1485 = add i64 %1484, 8
  store i64 %1485, i64* %PC
  %1486 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  store i64 %1486, i64* %RAX, align 8, !tbaa !2428
  %1487 = load i64, i64* %RAX
  %1488 = load i64, i64* %PC
  %1489 = add i64 %1488, 4
  store i64 %1489, i64* %PC
  %1490 = add i64 1, %1487
  store i64 %1490, i64* %RAX, align 8, !tbaa !2428
  %1491 = icmp ult i64 %1490, %1487
  %1492 = icmp ult i64 %1490, 1
  %1493 = or i1 %1491, %1492
  %1494 = zext i1 %1493 to i8
  %1495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1494, i8* %1495, align 1, !tbaa !2432
  %1496 = trunc i64 %1490 to i32
  %1497 = and i32 %1496, 255
  %1498 = call i32 @llvm.ctpop.i32(i32 %1497) #16
  %1499 = trunc i32 %1498 to i8
  %1500 = and i8 %1499, 1
  %1501 = xor i8 %1500, 1
  %1502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1501, i8* %1502, align 1, !tbaa !2446
  %1503 = xor i64 1, %1487
  %1504 = xor i64 %1503, %1490
  %1505 = lshr i64 %1504, 4
  %1506 = trunc i64 %1505 to i8
  %1507 = and i8 %1506, 1
  %1508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1507, i8* %1508, align 1, !tbaa !2447
  %1509 = icmp eq i64 %1490, 0
  %1510 = zext i1 %1509 to i8
  %1511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1510, i8* %1511, align 1, !tbaa !2448
  %1512 = lshr i64 %1490, 63
  %1513 = trunc i64 %1512 to i8
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1513, i8* %1514, align 1, !tbaa !2449
  %1515 = lshr i64 %1487, 63
  %1516 = xor i64 %1512, %1515
  %1517 = add nuw nsw i64 %1516, %1512
  %1518 = icmp eq i64 %1517, 2
  %1519 = zext i1 %1518 to i8
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1519, i8* %1520, align 1, !tbaa !2450
  %1521 = load i64, i64* %RAX
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 8
  store i64 %1523, i64* %PC
  store i64 %1521, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  %1524 = load i64, i64* %RBP
  %1525 = sub i64 %1524, 72
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 4
  store i64 %1527, i64* %PC
  %1528 = inttoptr i64 %1525 to i64*
  %1529 = load i64, i64* %1528
  store i64 %1529, i64* %RAX, align 8, !tbaa !2428
  %1530 = load i64, i64* %PC
  %1531 = add i64 %1530, 8
  store i64 %1531, i64* %PC
  %1532 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  store i64 %1532, i64* %RCX, align 8, !tbaa !2428
  %1533 = load i64, i64* %RCX
  %1534 = mul i64 %1533, 8
  %1535 = add i64 %1534, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 8
  store i64 %1537, i64* %PC
  %1538 = inttoptr i64 %1535 to i64*
  %1539 = load i64, i64* %1538
  store i64 %1539, i64* %RCX, align 8, !tbaa !2428
  %1540 = load i64, i64* %RCX
  %1541 = load i64, i64* %RAX
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 3
  store i64 %1543, i64* %PC
  %1544 = inttoptr i64 %1540 to i64*
  store i64 %1541, i64* %1544
  %1545 = load i64, i64* %RBP
  %1546 = sub i64 %1545, 80
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 4
  store i64 %1548, i64* %PC
  %1549 = inttoptr i64 %1546 to i64*
  %1550 = load i64, i64* %1549
  store i64 %1550, i64* %RAX, align 8, !tbaa !2428
  %1551 = load i64, i64* %PC
  %1552 = add i64 %1551, 8
  store i64 %1552, i64* %PC
  %1553 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  store i64 %1553, i64* %RCX, align 8, !tbaa !2428
  %1554 = load i64, i64* %RCX
  %1555 = mul i64 %1554, 8
  %1556 = add i64 %1555, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %1557 = load i64, i64* %PC
  %1558 = add i64 %1557, 8
  store i64 %1558, i64* %PC
  %1559 = inttoptr i64 %1556 to i64*
  %1560 = load i64, i64* %1559
  store i64 %1560, i64* %RCX, align 8, !tbaa !2428
  %1561 = load i64, i64* %RCX
  %1562 = add i64 %1561, 8
  %1563 = load i64, i64* %RAX
  %1564 = load i64, i64* %PC
  %1565 = add i64 %1564, 4
  store i64 %1565, i64* %PC
  %1566 = inttoptr i64 %1562 to i64*
  store i64 %1563, i64* %1566
  %1567 = load i64, i64* %RBP
  %1568 = sub i64 %1567, 80
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 5
  store i64 %1570, i64* %PC
  %1571 = inttoptr i64 %1568 to i64*
  %1572 = load i64, i64* %1571
  %1573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1573, align 1, !tbaa !2432
  %1574 = trunc i64 %1572 to i32
  %1575 = and i32 %1574, 255
  %1576 = call i32 @llvm.ctpop.i32(i32 %1575) #16
  %1577 = trunc i32 %1576 to i8
  %1578 = and i8 %1577, 1
  %1579 = xor i8 %1578, 1
  %1580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1579, i8* %1580, align 1, !tbaa !2446
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1581, align 1, !tbaa !2447
  %1582 = icmp eq i64 %1572, 0
  %1583 = zext i1 %1582 to i8
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1583, i8* %1584, align 1, !tbaa !2448
  %1585 = lshr i64 %1572, 63
  %1586 = trunc i64 %1585 to i8
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1586, i8* %1587, align 1, !tbaa !2449
  %1588 = lshr i64 %1572, 63
  %1589 = xor i64 %1585, %1588
  %1590 = add nuw nsw i64 %1589, %1588
  %1591 = icmp eq i64 %1590, 2
  %1592 = zext i1 %1591 to i8
  %1593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1592, i8* %1593, align 1, !tbaa !2450
  %1594 = load i64, i64* %PC
  %1595 = add i64 %1594, 19
  %1596 = load i64, i64* %PC
  %1597 = add i64 %1596, 6
  %1598 = load i64, i64* %PC
  %1599 = add i64 %1598, 6
  store i64 %1599, i64* %PC
  %1600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1601 = load i8, i8* %1600, align 1, !tbaa !2449
  %1602 = icmp ne i8 %1601, 0
  %1603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1604 = load i8, i8* %1603, align 1, !tbaa !2450
  %1605 = icmp ne i8 %1604, 0
  %1606 = xor i1 %1602, %1605
  %1607 = zext i1 %1606 to i8
  store i8 %1607, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1609 = select i1 %1606, i64 %1595, i64 %1597
  store i64 %1609, i64* %1608, align 8, !tbaa !2428
  %1610 = load i8, i8* %BRANCH_TAKEN
  %1611 = icmp eq i8 %1610, 1
  br i1 %1611, label %block_402c20, label %block_402c13

block_402b19:                                     ; preds = %block_402b00, %block_402b0d
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.3, %block_402b0d ], [ %MEMORY.3, %block_402b00 ]
  %1612 = load i64, i64* %RBP
  %1613 = sub i64 %1612, 96
  %1614 = load i64, i64* %PC
  %1615 = add i64 %1614, 4
  store i64 %1615, i64* %PC
  %1616 = inttoptr i64 %1613 to i64*
  %1617 = load i64, i64* %1616
  store i64 %1617, i64* %RAX, align 8, !tbaa !2428
  %1618 = load i64, i64* %RBP
  %1619 = sub i64 %1618, 56
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 4
  store i64 %1621, i64* %PC
  %1622 = inttoptr i64 %1619 to i64*
  %1623 = load i64, i64* %1622
  store i64 %1623, i64* %RCX, align 8, !tbaa !2428
  %1624 = load i64, i64* %RCX
  %1625 = mul i64 %1624, 8
  %1626 = add i64 %1625, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %1627 = load i64, i64* %PC
  %1628 = add i64 %1627, 8
  store i64 %1628, i64* %PC
  %1629 = inttoptr i64 %1626 to i64*
  %1630 = load i64, i64* %1629
  store i64 %1630, i64* %RCX, align 8, !tbaa !2428
  %1631 = load i64, i64* %RCX
  %1632 = add i64 %1631, 16
  %1633 = load i64, i64* %RAX
  %1634 = load i64, i64* %PC
  %1635 = add i64 %1634, 4
  store i64 %1635, i64* %PC
  %1636 = inttoptr i64 %1632 to i64*
  store i64 %1633, i64* %1636
  br label %block_402b2d

block_402a18:                                     ; preds = %block_402960
  %1637 = inttoptr i64 %142 to i64*
  store i64 2, i64* %1637
  %1638 = load i64, i64* %RBP
  %1639 = sub i64 %1638, 56
  %1640 = load i64, i64* %PC
  %1641 = add i64 %1640, 8
  store i64 %1641, i64* %PC
  %1642 = inttoptr i64 %1639 to i64*
  store i64 0, i64* %1642
  br label %block_402a28

block_402a3a:                                     ; preds = %block_402a28
  %1643 = load i64, i64* %RBP
  %1644 = sub i64 %1643, 48
  %1645 = load i64, i64* %PC
  %1646 = add i64 %1645, 4
  store i64 %1646, i64* %PC
  %1647 = inttoptr i64 %1644 to i64*
  %1648 = load i64, i64* %1647
  store i64 %1648, i64* %RAX, align 8, !tbaa !2428
  %1649 = load i64, i64* %RAX
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 8
  store i64 %1651, i64* %PC
  %1652 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  %1653 = sub i64 %1649, %1652
  %1654 = icmp ugt i64 %1652, %1649
  %1655 = zext i1 %1654 to i8
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1655, i8* %1656, align 1, !tbaa !2432
  %1657 = trunc i64 %1653 to i32
  %1658 = and i32 %1657, 255
  %1659 = call i32 @llvm.ctpop.i32(i32 %1658) #16
  %1660 = trunc i32 %1659 to i8
  %1661 = and i8 %1660, 1
  %1662 = xor i8 %1661, 1
  %1663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1662, i8* %1663, align 1, !tbaa !2446
  %1664 = xor i64 %1652, %1649
  %1665 = xor i64 %1664, %1653
  %1666 = lshr i64 %1665, 4
  %1667 = trunc i64 %1666 to i8
  %1668 = and i8 %1667, 1
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1668, i8* %1669, align 1, !tbaa !2447
  %1670 = icmp eq i64 %1653, 0
  %1671 = zext i1 %1670 to i8
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1671, i8* %1672, align 1, !tbaa !2448
  %1673 = lshr i64 %1653, 63
  %1674 = trunc i64 %1673 to i8
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1674, i8* %1675, align 1, !tbaa !2449
  %1676 = lshr i64 %1649, 63
  %1677 = lshr i64 %1652, 63
  %1678 = xor i64 %1677, %1676
  %1679 = xor i64 %1673, %1676
  %1680 = add nuw nsw i64 %1679, %1678
  %1681 = icmp eq i64 %1680, 2
  %1682 = zext i1 %1681 to i8
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1682, i8* %1683, align 1, !tbaa !2450
  %1684 = load i64, i64* %PC
  %1685 = add i64 %1684, 3
  store i64 %1685, i64* %PC
  %1686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1687 = load i8, i8* %1686, align 1, !tbaa !2448
  %1688 = icmp ne i8 %1687, 0
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1690 = load i8, i8* %1689, align 1, !tbaa !2449
  %1691 = icmp ne i8 %1690, 0
  %1692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1693 = load i8, i8* %1692, align 1, !tbaa !2450
  %1694 = icmp ne i8 %1693, 0
  %1695 = xor i1 %1691, %1694
  %1696 = or i1 %1688, %1695
  %1697 = zext i1 %1696 to i8
  store i8 %1697, i8* %CL, align 1, !tbaa !2451
  %1698 = load i64, i64* %RBP
  %1699 = sub i64 %1698, 81
  %1700 = load i8, i8* %CL
  %1701 = zext i8 %1700 to i64
  %1702 = load i64, i64* %PC
  %1703 = add i64 %1702, 3
  store i64 %1703, i64* %PC
  %1704 = inttoptr i64 %1699 to i8*
  store i8 %1700, i8* %1704
  br label %block_402a4c

block_402c13:                                     ; preds = %block_402bc5
  %1705 = load i64, i64* %RBP
  %1706 = sub i64 %1705, 80
  %1707 = load i64, i64* %PC
  %1708 = add i64 %1707, 4
  store i64 %1708, i64* %PC
  %1709 = inttoptr i64 %1706 to i64*
  %1710 = load i64, i64* %1709
  store i64 %1710, i64* %RAX, align 8, !tbaa !2428
  %1711 = load i64, i64* %RBP
  %1712 = sub i64 %1711, 104
  %1713 = load i64, i64* %RAX
  %1714 = load i64, i64* %PC
  %1715 = add i64 %1714, 4
  store i64 %1715, i64* %PC
  %1716 = inttoptr i64 %1712 to i64*
  store i64 %1713, i64* %1716
  %1717 = load i64, i64* %PC
  %1718 = add i64 %1717, 17
  %1719 = load i64, i64* %PC
  %1720 = add i64 %1719, 5
  store i64 %1720, i64* %PC
  %1721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1718, i64* %1721, align 8, !tbaa !2428
  br label %block_402c2c

block_402c95:                                     ; preds = %block_402c89, %block_402c67
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.7, %block_402c67 ], [ %MEMORY.7, %block_402c89 ]
  %1722 = load i64, i64* %PC
  %1723 = add i64 %1722, 9
  store i64 %1723, i64* %PC
  %1724 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  %1725 = sub i64 %1724, 50
  %1726 = icmp ult i64 %1724, 50
  %1727 = zext i1 %1726 to i8
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1727, i8* %1728, align 1, !tbaa !2432
  %1729 = trunc i64 %1725 to i32
  %1730 = and i32 %1729, 255
  %1731 = call i32 @llvm.ctpop.i32(i32 %1730) #16
  %1732 = trunc i32 %1731 to i8
  %1733 = and i8 %1732, 1
  %1734 = xor i8 %1733, 1
  %1735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1734, i8* %1735, align 1, !tbaa !2446
  %1736 = xor i64 %1724, 50
  %1737 = xor i64 %1736, %1725
  %1738 = lshr i64 %1737, 4
  %1739 = trunc i64 %1738 to i8
  %1740 = and i8 %1739, 1
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1740, i8* %1741, align 1, !tbaa !2447
  %1742 = icmp eq i64 %1725, 0
  %1743 = zext i1 %1742 to i8
  %1744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1743, i8* %1744, align 1, !tbaa !2448
  %1745 = lshr i64 %1725, 63
  %1746 = trunc i64 %1745 to i8
  %1747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1746, i8* %1747, align 1, !tbaa !2449
  %1748 = lshr i64 %1724, 63
  %1749 = xor i64 %1745, %1748
  %1750 = add nuw nsw i64 %1749, %1748
  %1751 = icmp eq i64 %1750, 2
  %1752 = zext i1 %1751 to i8
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1752, i8* %1753, align 1, !tbaa !2450
  %1754 = load i64, i64* %PC
  %1755 = add i64 %1754, 29
  %1756 = load i64, i64* %PC
  %1757 = add i64 %1756, 6
  %1758 = load i64, i64* %PC
  %1759 = add i64 %1758, 6
  store i64 %1759, i64* %PC
  %1760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1761 = load i8, i8* %1760, align 1, !tbaa !2449
  %1762 = icmp ne i8 %1761, 0
  %1763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1764 = load i8, i8* %1763, align 1, !tbaa !2450
  %1765 = icmp ne i8 %1764, 0
  %1766 = xor i1 %1762, %1765
  %1767 = xor i1 %1766, true
  %1768 = zext i1 %1767 to i8
  store i8 %1768, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1770 = select i1 %1766, i64 %1757, i64 %1755
  store i64 %1770, i64* %1769, align 8, !tbaa !2428
  %1771 = load i8, i8* %BRANCH_TAKEN
  %1772 = icmp eq i8 %1771, 1
  br i1 %1772, label %block_402cbb, label %block_402ca4

block_40298f:                                     ; preds = %block_402987, %block_40299d
  %MEMORY.11 = phi %struct.Memory* [ %2, %block_402987 ], [ %MEMORY.11, %block_40299d ]
  %1773 = load i64, i64* %RBP
  %1774 = sub i64 %1773, 48
  %1775 = load i64, i64* %PC
  %1776 = add i64 %1775, 8
  store i64 %1776, i64* %PC
  %1777 = inttoptr i64 %1774 to i64*
  %1778 = load i64, i64* %1777
  %1779 = sub i64 %1778, 351
  %1780 = icmp ult i64 %1778, 351
  %1781 = zext i1 %1780 to i8
  %1782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1781, i8* %1782, align 1, !tbaa !2432
  %1783 = trunc i64 %1779 to i32
  %1784 = and i32 %1783, 255
  %1785 = call i32 @llvm.ctpop.i32(i32 %1784) #16
  %1786 = trunc i32 %1785 to i8
  %1787 = and i8 %1786, 1
  %1788 = xor i8 %1787, 1
  %1789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1788, i8* %1789, align 1, !tbaa !2446
  %1790 = xor i64 %1778, 351
  %1791 = xor i64 %1790, %1779
  %1792 = lshr i64 %1791, 4
  %1793 = trunc i64 %1792 to i8
  %1794 = and i8 %1793, 1
  %1795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1794, i8* %1795, align 1, !tbaa !2447
  %1796 = icmp eq i64 %1779, 0
  %1797 = zext i1 %1796 to i8
  %1798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1797, i8* %1798, align 1, !tbaa !2448
  %1799 = lshr i64 %1779, 63
  %1800 = trunc i64 %1799 to i8
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1800, i8* %1801, align 1, !tbaa !2449
  %1802 = lshr i64 %1778, 63
  %1803 = xor i64 %1799, %1802
  %1804 = add nuw nsw i64 %1803, %1802
  %1805 = icmp eq i64 %1804, 2
  %1806 = zext i1 %1805 to i8
  %1807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1806, i8* %1807, align 1, !tbaa !2450
  %1808 = load i64, i64* %PC
  %1809 = add i64 %1808, 53
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 6
  %1812 = load i64, i64* %PC
  %1813 = add i64 %1812, 6
  store i64 %1813, i64* %PC
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1815 = load i8, i8* %1814, align 1, !tbaa !2449
  %1816 = icmp ne i8 %1815, 0
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1818 = load i8, i8* %1817, align 1, !tbaa !2450
  %1819 = icmp ne i8 %1818, 0
  %1820 = xor i1 %1816, %1819
  %1821 = xor i1 %1820, true
  %1822 = zext i1 %1821 to i8
  store i8 %1822, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1824 = select i1 %1820, i64 %1811, i64 %1809
  store i64 %1824, i64* %1823, align 8, !tbaa !2428
  %1825 = load i8, i8* %BRANCH_TAKEN
  %1826 = icmp eq i8 %1825, 1
  %1827 = load i64, i64* %PC
  br i1 %1826, label %block_4029cc, label %block_40299d

block_402cbb:                                     ; preds = %block_402c95, %block_402ca4
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.10, %block_402c95 ], [ %MEMORY.10, %block_402ca4 ]
  %1828 = load i64, i64* %PC
  %1829 = add i64 %1828, 9
  store i64 %1829, i64* %PC
  %1830 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  %1831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1831, align 1, !tbaa !2432
  %1832 = trunc i64 %1830 to i32
  %1833 = and i32 %1832, 255
  %1834 = call i32 @llvm.ctpop.i32(i32 %1833) #16
  %1835 = trunc i32 %1834 to i8
  %1836 = and i8 %1835, 1
  %1837 = xor i8 %1836, 1
  %1838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1837, i8* %1838, align 1, !tbaa !2446
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1839, align 1, !tbaa !2447
  %1840 = icmp eq i64 %1830, 0
  %1841 = zext i1 %1840 to i8
  %1842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1841, i8* %1842, align 1, !tbaa !2448
  %1843 = lshr i64 %1830, 63
  %1844 = trunc i64 %1843 to i8
  %1845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1844, i8* %1845, align 1, !tbaa !2449
  %1846 = lshr i64 %1830, 63
  %1847 = xor i64 %1843, %1846
  %1848 = add nuw nsw i64 %1847, %1846
  %1849 = icmp eq i64 %1848, 2
  %1850 = zext i1 %1849 to i8
  %1851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1850, i8* %1851, align 1, !tbaa !2450
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 42
  %1854 = load i64, i64* %PC
  %1855 = add i64 %1854, 6
  %1856 = load i64, i64* %PC
  %1857 = add i64 %1856, 6
  store i64 %1857, i64* %PC
  %1858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1859 = load i8, i8* %1858, align 1, !tbaa !2448
  %1860 = icmp eq i8 %1859, 0
  %1861 = zext i1 %1860 to i8
  store i8 %1861, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1863 = select i1 %1860, i64 %1853, i64 %1855
  store i64 %1863, i64* %1862, align 8, !tbaa !2428
  %1864 = load i8, i8* %BRANCH_TAKEN
  %1865 = icmp eq i8 %1864, 1
  %1866 = load i64, i64* %PC
  br i1 %1865, label %block_402cee, label %block_402cca

block_402b8e:                                     ; preds = %block_402b80
  %1867 = load i64, i64* %RBP
  %1868 = sub i64 %1867, 72
  %1869 = load i64, i64* %PC
  %1870 = add i64 %1869, 4
  store i64 %1870, i64* %PC
  %1871 = inttoptr i64 %1868 to i64*
  %1872 = load i64, i64* %1871
  store i64 %1872, i64* %RAX, align 8, !tbaa !2428
  %1873 = load i64, i64* %RAX
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 3
  store i64 %1875, i64* %PC
  %1876 = inttoptr i64 %1873 to i64*
  %1877 = load i64, i64* %1876
  store i64 %1877, i64* %RAX, align 8, !tbaa !2428
  %1878 = load i64, i64* %RBP
  %1879 = sub i64 %1878, 72
  %1880 = load i64, i64* %PC
  %1881 = add i64 %1880, 4
  store i64 %1881, i64* %PC
  %1882 = inttoptr i64 %1879 to i64*
  %1883 = load i64, i64* %1882
  store i64 %1883, i64* %RCX, align 8, !tbaa !2428
  %1884 = load i64, i64* %RCX
  %1885 = add i64 %1884, 8
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 4
  store i64 %1887, i64* %PC
  %1888 = inttoptr i64 %1885 to i64*
  %1889 = load i64, i64* %1888
  store i64 %1889, i64* %RCX, align 8, !tbaa !2428
  %1890 = load i64, i64* %RAX
  %1891 = load i64, i64* %RCX
  %1892 = load i64, i64* %PC
  %1893 = add i64 %1892, 3
  store i64 %1893, i64* %PC
  %1894 = inttoptr i64 %1891 to i64*
  %1895 = load i64, i64* %1894
  %1896 = sub i64 %1890, %1895
  store i64 %1896, i64* %RAX, align 8, !tbaa !2428
  %1897 = icmp ugt i64 %1895, %1890
  %1898 = zext i1 %1897 to i8
  %1899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1898, i8* %1899, align 1, !tbaa !2432
  %1900 = trunc i64 %1896 to i32
  %1901 = and i32 %1900, 255
  %1902 = call i32 @llvm.ctpop.i32(i32 %1901) #16
  %1903 = trunc i32 %1902 to i8
  %1904 = and i8 %1903, 1
  %1905 = xor i8 %1904, 1
  %1906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1905, i8* %1906, align 1, !tbaa !2446
  %1907 = xor i64 %1895, %1890
  %1908 = xor i64 %1907, %1896
  %1909 = lshr i64 %1908, 4
  %1910 = trunc i64 %1909 to i8
  %1911 = and i8 %1910, 1
  %1912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1911, i8* %1912, align 1, !tbaa !2447
  %1913 = icmp eq i64 %1896, 0
  %1914 = zext i1 %1913 to i8
  %1915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1914, i8* %1915, align 1, !tbaa !2448
  %1916 = lshr i64 %1896, 63
  %1917 = trunc i64 %1916 to i8
  %1918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1917, i8* %1918, align 1, !tbaa !2449
  %1919 = lshr i64 %1890, 63
  %1920 = lshr i64 %1895, 63
  %1921 = xor i64 %1920, %1919
  %1922 = xor i64 %1916, %1919
  %1923 = add nuw nsw i64 %1922, %1921
  %1924 = icmp eq i64 %1923, 2
  %1925 = zext i1 %1924 to i8
  %1926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1925, i8* %1926, align 1, !tbaa !2450
  %1927 = load i64, i64* %RBP
  %1928 = sub i64 %1927, 72
  %1929 = load i64, i64* %PC
  %1930 = add i64 %1929, 4
  store i64 %1930, i64* %PC
  %1931 = inttoptr i64 %1928 to i64*
  %1932 = load i64, i64* %1931
  store i64 %1932, i64* %RCX, align 8, !tbaa !2428
  %1933 = load i64, i64* %RCX
  %1934 = add i64 %1933, 16
  %1935 = load i64, i64* %PC
  %1936 = add i64 %1935, 4
  store i64 %1936, i64* %PC
  %1937 = inttoptr i64 %1934 to i64*
  %1938 = load i64, i64* %1937
  store i64 %1938, i64* %RCX, align 8, !tbaa !2428
  %1939 = load i64, i64* %RAX
  %1940 = load i64, i64* %RCX
  %1941 = load i64, i64* %PC
  %1942 = add i64 %1941, 3
  store i64 %1942, i64* %PC
  %1943 = inttoptr i64 %1940 to i64*
  %1944 = load i64, i64* %1943
  %1945 = add i64 %1944, %1939
  store i64 %1945, i64* %RAX, align 8, !tbaa !2428
  %1946 = icmp ult i64 %1945, %1939
  %1947 = icmp ult i64 %1945, %1944
  %1948 = or i1 %1946, %1947
  %1949 = zext i1 %1948 to i8
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1949, i8* %1950, align 1, !tbaa !2432
  %1951 = trunc i64 %1945 to i32
  %1952 = and i32 %1951, 255
  %1953 = call i32 @llvm.ctpop.i32(i32 %1952) #16
  %1954 = trunc i32 %1953 to i8
  %1955 = and i8 %1954, 1
  %1956 = xor i8 %1955, 1
  %1957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1956, i8* %1957, align 1, !tbaa !2446
  %1958 = xor i64 %1944, %1939
  %1959 = xor i64 %1958, %1945
  %1960 = lshr i64 %1959, 4
  %1961 = trunc i64 %1960 to i8
  %1962 = and i8 %1961, 1
  %1963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1962, i8* %1963, align 1, !tbaa !2447
  %1964 = icmp eq i64 %1945, 0
  %1965 = zext i1 %1964 to i8
  %1966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1965, i8* %1966, align 1, !tbaa !2448
  %1967 = lshr i64 %1945, 63
  %1968 = trunc i64 %1967 to i8
  %1969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1968, i8* %1969, align 1, !tbaa !2449
  %1970 = lshr i64 %1939, 63
  %1971 = lshr i64 %1944, 63
  %1972 = xor i64 %1967, %1970
  %1973 = xor i64 %1967, %1971
  %1974 = add nuw nsw i64 %1972, %1973
  %1975 = icmp eq i64 %1974, 2
  %1976 = zext i1 %1975 to i8
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1976, i8* %1977, align 1, !tbaa !2450
  %1978 = load i64, i64* %RBP
  %1979 = sub i64 %1978, 80
  %1980 = load i64, i64* %RAX
  %1981 = load i64, i64* %PC
  %1982 = add i64 %1981, 4
  store i64 %1982, i64* %PC
  %1983 = inttoptr i64 %1979 to i64*
  store i64 %1980, i64* %1983
  %1984 = load i64, i64* %RBP
  %1985 = sub i64 %1984, 72
  %1986 = load i64, i64* %PC
  %1987 = add i64 %1986, 4
  store i64 %1987, i64* %PC
  %1988 = inttoptr i64 %1985 to i64*
  %1989 = load i64, i64* %1988
  store i64 %1989, i64* %RDI, align 8, !tbaa !2428
  %1990 = load i64, i64* %RBP
  %1991 = sub i64 %1990, 80
  %1992 = load i64, i64* %PC
  %1993 = add i64 %1992, 4
  store i64 %1993, i64* %PC
  %1994 = inttoptr i64 %1991 to i64*
  %1995 = load i64, i64* %1994
  store i64 %1995, i64* %RSI, align 8, !tbaa !2428
  %1996 = load i64, i64* %PC
  %1997 = sub i64 %1996, 1063
  %1998 = load i64, i64* %PC
  %1999 = add i64 %1998, 5
  %2000 = load i64, i64* %PC
  %2001 = add i64 %2000, 5
  store i64 %2001, i64* %PC
  %2002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2003 = load i64, i64* %2002, align 8, !tbaa !2428
  %2004 = add i64 %2003, -8
  %2005 = inttoptr i64 %2004 to i64*
  store i64 %1999, i64* %2005
  store i64 %2004, i64* %2002, align 8, !tbaa !2428
  %2006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1997, i64* %2006, align 8, !tbaa !2428
  %2007 = load i64, i64* %PC
  %2008 = call %struct.Memory* @sub_402790_bea_is_dual_infeasible_renamed_(%struct.State* %0, i64 %2007, %struct.Memory* %MEMORY.7)
  %2009 = load i32, i32* %EAX
  %2010 = zext i32 %2009 to i64
  %2011 = load i64, i64* %PC
  %2012 = add i64 %2011, 3
  store i64 %2012, i64* %PC
  %2013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2013, align 1, !tbaa !2432
  %2014 = and i32 %2009, 255
  %2015 = call i32 @llvm.ctpop.i32(i32 %2014) #16
  %2016 = trunc i32 %2015 to i8
  %2017 = and i8 %2016, 1
  %2018 = xor i8 %2017, 1
  %2019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2018, i8* %2019, align 1, !tbaa !2446
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2020, align 1, !tbaa !2447
  %2021 = icmp eq i32 %2009, 0
  %2022 = zext i1 %2021 to i8
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2022, i8* %2023, align 1, !tbaa !2448
  %2024 = lshr i32 %2009, 31
  %2025 = trunc i32 %2024 to i8
  %2026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2025, i8* %2026, align 1, !tbaa !2449
  %2027 = lshr i32 %2009, 31
  %2028 = xor i32 %2024, %2027
  %2029 = add nuw nsw i32 %2028, %2027
  %2030 = icmp eq i32 %2029, 2
  %2031 = zext i1 %2030 to i8
  %2032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2031, i8* %2032, align 1, !tbaa !2450
  %2033 = load i64, i64* %PC
  %2034 = add i64 %2033, 133
  %2035 = load i64, i64* %PC
  %2036 = add i64 %2035, 6
  %2037 = load i64, i64* %PC
  %2038 = add i64 %2037, 6
  store i64 %2038, i64* %PC
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2040 = load i8, i8* %2039, align 1, !tbaa !2448
  store i8 %2040, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2042 = icmp ne i8 %2040, 0
  %2043 = select i1 %2042, i64 %2034, i64 %2036
  store i64 %2043, i64* %2041, align 8, !tbaa !2428
  %2044 = load i8, i8* %BRANCH_TAKEN
  %2045 = icmp eq i8 %2044, 1
  br i1 %2045, label %block_402c44, label %block_402bc5

block_402b0d:                                     ; preds = %block_402ac2
  %2046 = load i64, i64* %RAX
  %2047 = load i32, i32* %EAX
  %2048 = zext i32 %2047 to i64
  %2049 = load i64, i64* %PC
  %2050 = add i64 %2049, 2
  store i64 %2050, i64* %PC
  %2051 = xor i64 %2048, %2046
  %2052 = trunc i64 %2051 to i32
  %2053 = and i64 %2051, 4294967295
  store i64 %2053, i64* %RAX, align 8, !tbaa !2428
  %2054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2054, align 1, !tbaa !2432
  %2055 = and i32 %2052, 255
  %2056 = call i32 @llvm.ctpop.i32(i32 %2055) #16
  %2057 = trunc i32 %2056 to i8
  %2058 = and i8 %2057, 1
  %2059 = xor i8 %2058, 1
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2059, i8* %2060, align 1, !tbaa !2446
  %2061 = icmp eq i32 %2052, 0
  %2062 = zext i1 %2061 to i8
  %2063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2062, i8* %2063, align 1, !tbaa !2448
  %2064 = lshr i32 %2052, 31
  %2065 = trunc i32 %2064 to i8
  %2066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2065, i8* %2066, align 1, !tbaa !2449
  %2067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2067, align 1, !tbaa !2450
  %2068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2068, align 1, !tbaa !2447
  %2069 = load i32, i32* %EAX
  %2070 = zext i32 %2069 to i64
  %2071 = load i64, i64* %PC
  %2072 = add i64 %2071, 2
  store i64 %2072, i64* %PC
  %2073 = and i64 %2070, 4294967295
  store i64 %2073, i64* %RCX, align 8, !tbaa !2428
  %2074 = load i64, i64* %RCX
  %2075 = load i64, i64* %RBP
  %2076 = sub i64 %2075, 80
  %2077 = load i64, i64* %PC
  %2078 = add i64 %2077, 4
  store i64 %2078, i64* %PC
  %2079 = inttoptr i64 %2076 to i64*
  %2080 = load i64, i64* %2079
  %2081 = sub i64 %2074, %2080
  store i64 %2081, i64* %RCX, align 8, !tbaa !2428
  %2082 = icmp ugt i64 %2080, %2074
  %2083 = zext i1 %2082 to i8
  %2084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2083, i8* %2084, align 1, !tbaa !2432
  %2085 = trunc i64 %2081 to i32
  %2086 = and i32 %2085, 255
  %2087 = call i32 @llvm.ctpop.i32(i32 %2086) #16
  %2088 = trunc i32 %2087 to i8
  %2089 = and i8 %2088, 1
  %2090 = xor i8 %2089, 1
  %2091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2090, i8* %2091, align 1, !tbaa !2446
  %2092 = xor i64 %2080, %2074
  %2093 = xor i64 %2092, %2081
  %2094 = lshr i64 %2093, 4
  %2095 = trunc i64 %2094 to i8
  %2096 = and i8 %2095, 1
  %2097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2096, i8* %2097, align 1, !tbaa !2447
  %2098 = icmp eq i64 %2081, 0
  %2099 = zext i1 %2098 to i8
  %2100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2099, i8* %2100, align 1, !tbaa !2448
  %2101 = lshr i64 %2081, 63
  %2102 = trunc i64 %2101 to i8
  %2103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2102, i8* %2103, align 1, !tbaa !2449
  %2104 = lshr i64 %2074, 63
  %2105 = lshr i64 %2080, 63
  %2106 = xor i64 %2105, %2104
  %2107 = xor i64 %2101, %2104
  %2108 = add nuw nsw i64 %2107, %2106
  %2109 = icmp eq i64 %2108, 2
  %2110 = zext i1 %2109 to i8
  %2111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2110, i8* %2111, align 1, !tbaa !2450
  %2112 = load i64, i64* %RBP
  %2113 = sub i64 %2112, 96
  %2114 = load i64, i64* %RCX
  %2115 = load i64, i64* %PC
  %2116 = add i64 %2115, 4
  store i64 %2116, i64* %PC
  %2117 = inttoptr i64 %2113 to i64*
  store i64 %2114, i64* %2117
  br label %block_402b19

block_402c89:                                     ; preds = %block_402c67
  %2118 = load i64, i64* %PC
  %2119 = add i64 %2118, 12
  store i64 %2119, i64* %PC
  store i64 0, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*)
  br label %block_402c95

block_402ab4:                                     ; preds = %block_402aa9
  %2120 = load i64, i64* %RBP
  %2121 = sub i64 %2120, 72
  %2122 = load i64, i64* %PC
  %2123 = add i64 %2122, 4
  store i64 %2123, i64* %PC
  %2124 = inttoptr i64 %2121 to i64*
  %2125 = load i64, i64* %2124
  store i64 %2125, i64* %RAX, align 8, !tbaa !2428
  %2126 = load i64, i64* %RAX
  %2127 = add i64 %2126, 24
  %2128 = load i64, i64* %PC
  %2129 = add i64 %2128, 4
  store i64 %2129, i64* %PC
  %2130 = inttoptr i64 %2127 to i32*
  %2131 = load i32, i32* %2130
  %2132 = sub i32 %2131, 2
  %2133 = icmp ult i32 %2131, 2
  %2134 = zext i1 %2133 to i8
  %2135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2134, i8* %2135, align 1, !tbaa !2432
  %2136 = and i32 %2132, 255
  %2137 = call i32 @llvm.ctpop.i32(i32 %2136) #16
  %2138 = trunc i32 %2137 to i8
  %2139 = and i8 %2138, 1
  %2140 = xor i8 %2139, 1
  %2141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2140, i8* %2141, align 1, !tbaa !2446
  %2142 = xor i32 %2131, 2
  %2143 = xor i32 %2142, %2132
  %2144 = lshr i32 %2143, 4
  %2145 = trunc i32 %2144 to i8
  %2146 = and i8 %2145, 1
  %2147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2146, i8* %2147, align 1, !tbaa !2447
  %2148 = icmp eq i32 %2132, 0
  %2149 = zext i1 %2148 to i8
  %2150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2149, i8* %2150, align 1, !tbaa !2448
  %2151 = lshr i32 %2132, 31
  %2152 = trunc i32 %2151 to i8
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2152, i8* %2153, align 1, !tbaa !2449
  %2154 = lshr i32 %2131, 31
  %2155 = xor i32 %2151, %2154
  %2156 = add nuw nsw i32 %2155, %2154
  %2157 = icmp eq i32 %2156, 2
  %2158 = zext i1 %2157 to i8
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2158, i8* %2159, align 1, !tbaa !2450
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 113
  %2162 = load i64, i64* %PC
  %2163 = add i64 %2162, 6
  %2164 = load i64, i64* %PC
  %2165 = add i64 %2164, 6
  store i64 %2165, i64* %PC
  %2166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2167 = load i8, i8* %2166, align 1, !tbaa !2448
  %2168 = icmp eq i8 %2167, 0
  %2169 = zext i1 %2168 to i8
  store i8 %2169, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2171 = select i1 %2168, i64 %2161, i64 %2163
  store i64 %2171, i64* %2170, align 8, !tbaa !2428
  %2172 = load i8, i8* %BRANCH_TAKEN
  %2173 = icmp eq i8 %2172, 1
  br i1 %2173, label %block_402b2d, label %block_402ac2

block_402987:                                     ; preds = %block_402960
  %2174 = inttoptr i64 %142 to i64*
  store i64 1, i64* %2174
  br label %block_40298f

block_402c2c:                                     ; preds = %block_402c13, %block_402c20
  %MEMORY.13 = phi %struct.Memory* [ %2008, %block_402c20 ], [ %2008, %block_402c13 ]
  %2175 = load i64, i64* %RBP
  %2176 = sub i64 %2175, 104
  %2177 = load i64, i64* %PC
  %2178 = add i64 %2177, 4
  store i64 %2178, i64* %PC
  %2179 = inttoptr i64 %2176 to i64*
  %2180 = load i64, i64* %2179
  store i64 %2180, i64* %RAX, align 8, !tbaa !2428
  %2181 = load i64, i64* %PC
  %2182 = add i64 %2181, 8
  store i64 %2182, i64* %PC
  %2183 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*)
  store i64 %2183, i64* %RCX, align 8, !tbaa !2428
  %2184 = load i64, i64* %RCX
  %2185 = mul i64 %2184, 8
  %2186 = add i64 %2185, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %2187 = load i64, i64* %PC
  %2188 = add i64 %2187, 8
  store i64 %2188, i64* %PC
  %2189 = inttoptr i64 %2186 to i64*
  %2190 = load i64, i64* %2189
  store i64 %2190, i64* %RCX, align 8, !tbaa !2428
  %2191 = load i64, i64* %RCX
  %2192 = add i64 %2191, 16
  %2193 = load i64, i64* %RAX
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 4
  store i64 %2195, i64* %PC
  %2196 = inttoptr i64 %2192 to i64*
  store i64 %2193, i64* %2196
  br label %block_402c44

block_402aa9:                                     ; preds = %block_402a9b, %block_402a5c
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.4, %block_402a5c ], [ %MEMORY.4, %block_402a9b ]
  %2197 = load i64, i64* %RBP
  %2198 = sub i64 %2197, 80
  %2199 = load i64, i64* %PC
  %2200 = add i64 %2199, 5
  store i64 %2200, i64* %PC
  %2201 = inttoptr i64 %2198 to i64*
  %2202 = load i64, i64* %2201
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2203, align 1, !tbaa !2432
  %2204 = trunc i64 %2202 to i32
  %2205 = and i32 %2204, 255
  %2206 = call i32 @llvm.ctpop.i32(i32 %2205) #16
  %2207 = trunc i32 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = xor i8 %2208, 1
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2209, i8* %2210, align 1, !tbaa !2446
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2211, align 1, !tbaa !2447
  %2212 = icmp eq i64 %2202, 0
  %2213 = zext i1 %2212 to i8
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2213, i8* %2214, align 1, !tbaa !2448
  %2215 = lshr i64 %2202, 63
  %2216 = trunc i64 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2216, i8* %2217, align 1, !tbaa !2449
  %2218 = lshr i64 %2202, 63
  %2219 = xor i64 %2215, %2218
  %2220 = add nuw nsw i64 %2219, %2218
  %2221 = icmp eq i64 %2220, 2
  %2222 = zext i1 %2221 to i8
  %2223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2222, i8* %2223, align 1, !tbaa !2450
  %2224 = load i64, i64* %PC
  %2225 = add i64 %2224, 127
  %2226 = load i64, i64* %PC
  %2227 = add i64 %2226, 6
  %2228 = load i64, i64* %PC
  %2229 = add i64 %2228, 6
  store i64 %2229, i64* %PC
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2231 = load i8, i8* %2230, align 1, !tbaa !2448
  %2232 = icmp ne i8 %2231, 0
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2234 = load i8, i8* %2233, align 1, !tbaa !2449
  %2235 = icmp ne i8 %2234, 0
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2237 = load i8, i8* %2236, align 1, !tbaa !2450
  %2238 = icmp ne i8 %2237, 0
  %2239 = xor i1 %2235, %2238
  %2240 = or i1 %2232, %2239
  %2241 = zext i1 %2240 to i8
  store i8 %2241, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2243 = select i1 %2240, i64 %2225, i64 %2227
  store i64 %2243, i64* %2242, align 8, !tbaa !2428
  %2244 = load i8, i8* %BRANCH_TAKEN
  %2245 = icmp eq i8 %2244, 1
  br i1 %2245, label %block_402b2d, label %block_402ab4

block_402a28:                                     ; preds = %block_402a18, %block_402b2d
  %MEMORY.15 = phi %struct.Memory* [ %2, %block_402a18 ], [ %MEMORY.5, %block_402b2d ]
  %2246 = load i64, i64* %RAX
  %2247 = load i32, i32* %EAX
  %2248 = zext i32 %2247 to i64
  %2249 = load i64, i64* %PC
  %2250 = add i64 %2249, 2
  store i64 %2250, i64* %PC
  %2251 = xor i64 %2248, %2246
  %2252 = trunc i64 %2251 to i32
  %2253 = and i64 %2251, 4294967295
  store i64 %2253, i64* %RAX, align 8, !tbaa !2428
  %2254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2254, align 1, !tbaa !2432
  %2255 = and i32 %2252, 255
  %2256 = call i32 @llvm.ctpop.i32(i32 %2255) #16
  %2257 = trunc i32 %2256 to i8
  %2258 = and i8 %2257, 1
  %2259 = xor i8 %2258, 1
  %2260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2259, i8* %2260, align 1, !tbaa !2446
  %2261 = icmp eq i32 %2252, 0
  %2262 = zext i1 %2261 to i8
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2262, i8* %2263, align 1, !tbaa !2448
  %2264 = lshr i32 %2252, 31
  %2265 = trunc i32 %2264 to i8
  %2266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2265, i8* %2266, align 1, !tbaa !2449
  %2267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2267, align 1, !tbaa !2450
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2268, align 1, !tbaa !2447
  %2269 = load i8, i8* %AL
  %2270 = zext i8 %2269 to i64
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 2
  store i64 %2272, i64* %PC
  store i8 %2269, i8* %CL, align 1, !tbaa !2451
  %2273 = load i64, i64* %RBP
  %2274 = sub i64 %2273, 48
  %2275 = load i64, i64* %PC
  %2276 = add i64 %2275, 5
  store i64 %2276, i64* %PC
  %2277 = inttoptr i64 %2274 to i64*
  %2278 = load i64, i64* %2277
  %2279 = sub i64 %2278, 50
  %2280 = icmp ult i64 %2278, 50
  %2281 = zext i1 %2280 to i8
  %2282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2281, i8* %2282, align 1, !tbaa !2432
  %2283 = trunc i64 %2279 to i32
  %2284 = and i32 %2283, 255
  %2285 = call i32 @llvm.ctpop.i32(i32 %2284) #16
  %2286 = trunc i32 %2285 to i8
  %2287 = and i8 %2286, 1
  %2288 = xor i8 %2287, 1
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2288, i8* %2289, align 1, !tbaa !2446
  %2290 = xor i64 %2278, 50
  %2291 = xor i64 %2290, %2279
  %2292 = lshr i64 %2291, 4
  %2293 = trunc i64 %2292 to i8
  %2294 = and i8 %2293, 1
  %2295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2294, i8* %2295, align 1, !tbaa !2447
  %2296 = icmp eq i64 %2279, 0
  %2297 = zext i1 %2296 to i8
  %2298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2297, i8* %2298, align 1, !tbaa !2448
  %2299 = lshr i64 %2279, 63
  %2300 = trunc i64 %2299 to i8
  %2301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2300, i8* %2301, align 1, !tbaa !2449
  %2302 = lshr i64 %2278, 63
  %2303 = xor i64 %2299, %2302
  %2304 = add nuw nsw i64 %2303, %2302
  %2305 = icmp eq i64 %2304, 2
  %2306 = zext i1 %2305 to i8
  %2307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2306, i8* %2307, align 1, !tbaa !2450
  %2308 = load i64, i64* %RBP
  %2309 = sub i64 %2308, 81
  %2310 = load i8, i8* %CL
  %2311 = zext i8 %2310 to i64
  %2312 = load i64, i64* %PC
  %2313 = add i64 %2312, 3
  store i64 %2313, i64* %PC
  %2314 = inttoptr i64 %2309 to i8*
  store i8 %2310, i8* %2314
  %2315 = load i64, i64* %PC
  %2316 = add i64 %2315, 24
  %2317 = load i64, i64* %PC
  %2318 = add i64 %2317, 6
  %2319 = load i64, i64* %PC
  %2320 = add i64 %2319, 6
  store i64 %2320, i64* %PC
  %2321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2322 = load i8, i8* %2321, align 1, !tbaa !2448
  %2323 = icmp eq i8 %2322, 0
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2325 = load i8, i8* %2324, align 1, !tbaa !2449
  %2326 = icmp ne i8 %2325, 0
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2328 = load i8, i8* %2327, align 1, !tbaa !2450
  %2329 = icmp ne i8 %2328, 0
  %2330 = xor i1 %2326, %2329
  %2331 = xor i1 %2330, true
  %2332 = and i1 %2323, %2331
  %2333 = zext i1 %2332 to i8
  store i8 %2333, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2335 = select i1 %2332, i64 %2316, i64 %2318
  store i64 %2335, i64* %2334, align 8, !tbaa !2428
  %2336 = load i8, i8* %BRANCH_TAKEN
  %2337 = icmp eq i8 %2336, 1
  br i1 %2337, label %block_402a4c, label %block_402a3a

block_402b80:                                     ; preds = %block_402b72
  %2338 = load i64, i64* %RBP
  %2339 = sub i64 %2338, 72
  %2340 = load i64, i64* %PC
  %2341 = add i64 %2340, 4
  store i64 %2341, i64* %PC
  %2342 = inttoptr i64 %2339 to i64*
  %2343 = load i64, i64* %2342
  store i64 %2343, i64* %RAX, align 8, !tbaa !2428
  %2344 = load i64, i64* %RAX
  %2345 = add i64 %2344, 24
  %2346 = load i64, i64* %PC
  %2347 = add i64 %2346, 4
  store i64 %2347, i64* %PC
  %2348 = inttoptr i64 %2345 to i32*
  %2349 = load i32, i32* %2348
  %2350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2350, align 1, !tbaa !2432
  %2351 = and i32 %2349, 255
  %2352 = call i32 @llvm.ctpop.i32(i32 %2351) #16
  %2353 = trunc i32 %2352 to i8
  %2354 = and i8 %2353, 1
  %2355 = xor i8 %2354, 1
  %2356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2355, i8* %2356, align 1, !tbaa !2446
  %2357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2357, align 1, !tbaa !2447
  %2358 = icmp eq i32 %2349, 0
  %2359 = zext i1 %2358 to i8
  %2360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2359, i8* %2360, align 1, !tbaa !2448
  %2361 = lshr i32 %2349, 31
  %2362 = trunc i32 %2361 to i8
  %2363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2362, i8* %2363, align 1, !tbaa !2449
  %2364 = lshr i32 %2349, 31
  %2365 = xor i32 %2361, %2364
  %2366 = add nuw nsw i32 %2365, %2364
  %2367 = icmp eq i32 %2366, 2
  %2368 = zext i1 %2367 to i8
  %2369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2368, i8* %2369, align 1, !tbaa !2450
  %2370 = load i64, i64* %PC
  %2371 = add i64 %2370, 193
  %2372 = load i64, i64* %PC
  %2373 = add i64 %2372, 6
  %2374 = load i64, i64* %PC
  %2375 = add i64 %2374, 6
  store i64 %2375, i64* %PC
  %2376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2377 = load i8, i8* %2376, align 1, !tbaa !2448
  %2378 = icmp ne i8 %2377, 0
  %2379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2380 = load i8, i8* %2379, align 1, !tbaa !2449
  %2381 = icmp ne i8 %2380, 0
  %2382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2383 = load i8, i8* %2382, align 1, !tbaa !2450
  %2384 = icmp ne i8 %2383, 0
  %2385 = xor i1 %2381, %2384
  %2386 = or i1 %2378, %2385
  %2387 = zext i1 %2386 to i8
  store i8 %2387, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2389 = select i1 %2386, i64 %2371, i64 %2373
  store i64 %2389, i64* %2388, align 8, !tbaa !2428
  %2390 = load i8, i8* %BRANCH_TAKEN
  %2391 = icmp eq i8 %2390, 1
  br i1 %2391, label %block_402c49, label %block_402b8e

block_402b00:                                     ; preds = %block_402ac2
  %2392 = load i64, i64* %RBP
  %2393 = sub i64 %2392, 80
  %2394 = load i64, i64* %PC
  %2395 = add i64 %2394, 4
  store i64 %2395, i64* %PC
  %2396 = inttoptr i64 %2393 to i64*
  %2397 = load i64, i64* %2396
  store i64 %2397, i64* %RAX, align 8, !tbaa !2428
  %2398 = load i64, i64* %RBP
  %2399 = sub i64 %2398, 96
  %2400 = load i64, i64* %RAX
  %2401 = load i64, i64* %PC
  %2402 = add i64 %2401, 4
  store i64 %2402, i64* %PC
  %2403 = inttoptr i64 %2399 to i64*
  store i64 %2400, i64* %2403
  %2404 = load i64, i64* %PC
  %2405 = add i64 %2404, 17
  %2406 = load i64, i64* %PC
  %2407 = add i64 %2406, 5
  store i64 %2407, i64* %PC
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2405, i64* %2408, align 8, !tbaa !2428
  br label %block_402b19
}

; Function Attrs: noinline
define %struct.Memory* @sub_404710___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404710:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4027f0_sort_basket(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4027f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = sub i64 %37, 48
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 48
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2432
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = xor i64 48, %37
  %52 = xor i64 %51, %40
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = icmp eq i64 %40, 0
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %58, i8* %59, align 1, !tbaa !2448
  %60 = lshr i64 %40, 63
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = lshr i64 %37, 63
  %64 = xor i64 %60, %63
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 5
  store i64 %70, i64* %PC
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %71 = load i32, i32* %EAX
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = and i64 %72, 4294967295
  store i64 %75, i64* %RCX, align 8, !tbaa !2428
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 8
  %78 = load i64, i64* %RDI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %RSI
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87
  %88 = load i64, i64* %RBP
  %89 = sub i64 %88, 8
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92
  store i64 %93, i64* %RSI, align 8, !tbaa !2428
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 24
  %96 = load i64, i64* %RSI
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 16
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RSI, align 8, !tbaa !2428
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 32
  %108 = load i64, i64* %RSI
  %109 = load i64, i64* %PC
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 24
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 4
  store i64 %115, i64* %PC
  %116 = inttoptr i64 %113 to i64*
  %117 = load i64, i64* %116
  store i64 %117, i64* %RSI, align 8, !tbaa !2428
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RBP
  %120 = sub i64 %119, 32
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123
  %125 = add i64 %124, %118
  store i64 %125, i64* %RSI, align 8, !tbaa !2428
  %126 = icmp ult i64 %125, %118
  %127 = icmp ult i64 %125, %124
  %128 = or i1 %126, %127
  %129 = zext i1 %128 to i8
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %129, i8* %130, align 1, !tbaa !2432
  %131 = trunc i64 %125 to i32
  %132 = and i32 %131, 255
  %133 = call i32 @llvm.ctpop.i32(i32 %132) #16
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %136, i8* %137, align 1, !tbaa !2446
  %138 = xor i64 %124, %118
  %139 = xor i64 %138, %125
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %142, i8* %143, align 1, !tbaa !2447
  %144 = icmp eq i64 %125, 0
  %145 = zext i1 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %145, i8* %146, align 1, !tbaa !2448
  %147 = lshr i64 %125, 63
  %148 = trunc i64 %147 to i8
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %148, i8* %149, align 1, !tbaa !2449
  %150 = lshr i64 %118, 63
  %151 = lshr i64 %124, 63
  %152 = xor i64 %147, %150
  %153 = xor i64 %147, %151
  %154 = add nuw nsw i64 %152, %153
  %155 = icmp eq i64 %154, 2
  %156 = zext i1 %155 to i8
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %156, i8* %157, align 1, !tbaa !2450
  %158 = load i64, i64* %RSI
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 3
  store i64 %160, i64* %PC
  store i64 %158, i64* %RAX, align 8, !tbaa !2428
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 2
  store i64 %162, i64* %PC
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %165 = load i64, i64* %164, align 8, !tbaa !2428
  %166 = ashr i64 %165, 63
  store i64 %166, i64* %163, align 8, !tbaa !2428
  %167 = load i64, i64* %RCX
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 3
  store i64 %169, i64* %PC
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %171 = load i64, i64* %170, align 8, !tbaa !2428
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %173 = load i64, i64* %172, align 8, !tbaa !2428
  %174 = sext i64 %167 to i128
  %175 = and i128 %174, -18446744073709551616
  %176 = zext i64 %173 to i128
  %177 = shl nuw i128 %176, 64
  %178 = zext i64 %171 to i128
  %179 = or i128 %177, %178
  %180 = zext i64 %167 to i128
  %181 = or i128 %175, %180
  %182 = sdiv i128 %179, %181
  %183 = trunc i128 %182 to i64
  %184 = and i128 %182, 18446744073709551615
  %185 = sext i64 %183 to i128
  %186 = and i128 %185, -18446744073709551616
  %187 = or i128 %186, %184
  %188 = icmp eq i128 %182, %187
  br i1 %188, label %193, label %189

; <label>:189:                                    ; preds = %block_4027f0
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %191 = load i64, i64* %190, align 8, !tbaa !2428
  %192 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %191, %struct.Memory* %2) #17
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:193:                                    ; preds = %block_4027f0
  %194 = srem i128 %179, %181
  %195 = trunc i128 %194 to i64
  store i64 %183, i64* %170, align 8, !tbaa !2428
  store i64 %195, i64* %172, align 8, !tbaa !2428
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %196, align 1, !tbaa !2432
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %197, align 1, !tbaa !2446
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %198, align 1, !tbaa !2447
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %199, align 1, !tbaa !2448
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %200, align 1, !tbaa !2449
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %201, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %189, %193
  %202 = phi %struct.Memory* [ %192, %189 ], [ %2, %193 ]
  %203 = load i64, i64* %RAX
  %204 = mul i64 %203, 8
  %205 = add i64 %204, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 8
  store i64 %207, i64* %PC
  %208 = inttoptr i64 %205 to i64*
  %209 = load i64, i64* %208
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  %210 = load i64, i64* %RAX
  %211 = add i64 %210, 16
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 4
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i64*
  %215 = load i64, i64* %214
  store i64 %215, i64* %RAX, align 8, !tbaa !2428
  %216 = load i64, i64* %RBP
  %217 = sub i64 %216, 40
  %218 = load i64, i64* %RAX
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %217 to i64*
  store i64 %218, i64* %221
  br label %block_402837

block_40293f:                                     ; preds = %block_402931
  %222 = load i64, i64* %RBP
  %223 = sub i64 %222, 24
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  store i64 %225, i64* %PC
  %226 = inttoptr i64 %223 to i64*
  %227 = load i64, i64* %226
  %228 = sub i64 %227, 50
  %229 = icmp ult i64 %227, 50
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %230, i8* %231, align 1, !tbaa !2432
  %232 = trunc i64 %228 to i32
  %233 = and i32 %232, 255
  %234 = call i32 @llvm.ctpop.i32(i32 %233) #16
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %237, i8* %238, align 1, !tbaa !2446
  %239 = xor i64 %227, 50
  %240 = xor i64 %239, %228
  %241 = lshr i64 %240, 4
  %242 = trunc i64 %241 to i8
  %243 = and i8 %242, 1
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %243, i8* %244, align 1, !tbaa !2447
  %245 = icmp eq i64 %228, 0
  %246 = zext i1 %245 to i8
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %246, i8* %247, align 1, !tbaa !2448
  %248 = lshr i64 %228, 63
  %249 = trunc i64 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %249, i8* %250, align 1, !tbaa !2449
  %251 = lshr i64 %227, 63
  %252 = xor i64 %248, %251
  %253 = add nuw nsw i64 %252, %251
  %254 = icmp eq i64 %253, 2
  %255 = zext i1 %254 to i8
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %255, i8* %256, align 1, !tbaa !2450
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 19
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 6
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 6
  store i64 %262, i64* %PC
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %264 = load i8, i8* %263, align 1, !tbaa !2448
  %265 = icmp eq i8 %264, 0
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %267 = load i8, i8* %266, align 1, !tbaa !2449
  %268 = icmp ne i8 %267, 0
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %270 = load i8, i8* %269, align 1, !tbaa !2450
  %271 = icmp ne i8 %270, 0
  %272 = xor i1 %268, %271
  %273 = xor i1 %272, true
  %274 = and i1 %265, %273
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %277 = select i1 %274, i64 %258, i64 %260
  store i64 %277, i64* %276, align 8, !tbaa !2428
  %278 = load i8, i8* %BRANCH_TAKEN
  %279 = icmp eq i8 %278, 1
  br i1 %279, label %block_402957, label %block_40294a

block_402856:                                     ; preds = %block_40283c
  %280 = load i64, i64* %RBP
  %281 = sub i64 %280, 24
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 4
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %281 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = load i64, i64* %RAX
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = add i64 1, %286
  store i64 %289, i64* %RAX, align 8, !tbaa !2428
  %290 = icmp ult i64 %289, %286
  %291 = icmp ult i64 %289, 1
  %292 = or i1 %290, %291
  %293 = zext i1 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %293, i8* %294, align 1, !tbaa !2432
  %295 = trunc i64 %289 to i32
  %296 = and i32 %295, 255
  %297 = call i32 @llvm.ctpop.i32(i32 %296) #16
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %300, i8* %301, align 1, !tbaa !2446
  %302 = xor i64 1, %286
  %303 = xor i64 %302, %289
  %304 = lshr i64 %303, 4
  %305 = trunc i64 %304 to i8
  %306 = and i8 %305, 1
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %306, i8* %307, align 1, !tbaa !2447
  %308 = icmp eq i64 %289, 0
  %309 = zext i1 %308 to i8
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %309, i8* %310, align 1, !tbaa !2448
  %311 = lshr i64 %289, 63
  %312 = trunc i64 %311 to i8
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %312, i8* %313, align 1, !tbaa !2449
  %314 = lshr i64 %286, 63
  %315 = xor i64 %311, %314
  %316 = add nuw nsw i64 %315, %311
  %317 = icmp eq i64 %316, 2
  %318 = zext i1 %317 to i8
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %318, i8* %319, align 1, !tbaa !2450
  %320 = load i64, i64* %RBP
  %321 = sub i64 %320, 24
  %322 = load i64, i64* %RAX
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 4
  store i64 %324, i64* %PC
  %325 = inttoptr i64 %321 to i64*
  store i64 %322, i64* %325
  %326 = load i64, i64* %PC
  %327 = sub i64 %326, 38
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 5
  store i64 %329, i64* %PC
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %327, i64* %330, align 8, !tbaa !2428
  br label %block_40283c

block_402837:                                     ; preds = %block_402903, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %MEMORY.0 = phi %struct.Memory* [ %202, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %MEMORY.5, %block_402903 ]
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 5
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 5
  store i64 %334, i64* %PC
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %332, i64* %335, align 8, !tbaa !2428
  br label %block_40283c

block_402897:                                     ; preds = %block_40286c
  %336 = sub i64 %924, 24
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 4
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %336 to i64*
  %340 = load i64, i64* %339
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %RBP
  %343 = sub i64 %342, 32
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 4
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %343 to i64*
  %347 = load i64, i64* %346
  %348 = sub i64 %341, %347
  %349 = icmp ugt i64 %347, %341
  %350 = zext i1 %349 to i8
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %350, i8* %351, align 1, !tbaa !2432
  %352 = trunc i64 %348 to i32
  %353 = and i32 %352, 255
  %354 = call i32 @llvm.ctpop.i32(i32 %353) #16
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %357, i8* %358, align 1, !tbaa !2446
  %359 = xor i64 %347, %341
  %360 = xor i64 %359, %348
  %361 = lshr i64 %360, 4
  %362 = trunc i64 %361 to i8
  %363 = and i8 %362, 1
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %363, i8* %364, align 1, !tbaa !2447
  %365 = icmp eq i64 %348, 0
  %366 = zext i1 %365 to i8
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %366, i8* %367, align 1, !tbaa !2448
  %368 = lshr i64 %348, 63
  %369 = trunc i64 %368 to i8
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %369, i8* %370, align 1, !tbaa !2449
  %371 = lshr i64 %341, 63
  %372 = lshr i64 %347, 63
  %373 = xor i64 %372, %371
  %374 = xor i64 %368, %371
  %375 = add nuw nsw i64 %374, %373
  %376 = icmp eq i64 %375, 2
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %377, i8* %378, align 1, !tbaa !2450
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 62
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 6
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 6
  store i64 %384, i64* %PC
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %386 = load i8, i8* %385, align 1, !tbaa !2449
  %387 = icmp ne i8 %386, 0
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %389 = load i8, i8* %388, align 1, !tbaa !2450
  %390 = icmp ne i8 %389, 0
  %391 = xor i1 %387, %390
  %392 = xor i1 %391, true
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %395 = select i1 %391, i64 %382, i64 %380
  store i64 %395, i64* %394, align 8, !tbaa !2428
  %396 = load i8, i8* %BRANCH_TAKEN
  %397 = icmp eq i8 %396, 1
  br i1 %397, label %block_4028dd, label %block_4028a5

block_402916:                                     ; preds = %block_402903
  %398 = load i64, i64* %RBP
  %399 = sub i64 %398, 8
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 4
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %399 to i64*
  %403 = load i64, i64* %402
  store i64 %403, i64* %RAX, align 8, !tbaa !2428
  %404 = load i64, i64* %RAX
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 32
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 4
  store i64 %408, i64* %PC
  %409 = inttoptr i64 %406 to i64*
  %410 = load i64, i64* %409
  %411 = sub i64 %404, %410
  %412 = icmp ugt i64 %410, %404
  %413 = zext i1 %412 to i8
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %413, i8* %414, align 1, !tbaa !2432
  %415 = trunc i64 %411 to i32
  %416 = and i32 %415, 255
  %417 = call i32 @llvm.ctpop.i32(i32 %416) #16
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = xor i8 %419, 1
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %420, i8* %421, align 1, !tbaa !2446
  %422 = xor i64 %410, %404
  %423 = xor i64 %422, %411
  %424 = lshr i64 %423, 4
  %425 = trunc i64 %424 to i8
  %426 = and i8 %425, 1
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %426, i8* %427, align 1, !tbaa !2447
  %428 = icmp eq i64 %411, 0
  %429 = zext i1 %428 to i8
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %429, i8* %430, align 1, !tbaa !2448
  %431 = lshr i64 %411, 63
  %432 = trunc i64 %431 to i8
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %432, i8* %433, align 1, !tbaa !2449
  %434 = lshr i64 %404, 63
  %435 = lshr i64 %410, 63
  %436 = xor i64 %435, %434
  %437 = xor i64 %431, %434
  %438 = add nuw nsw i64 %437, %436
  %439 = icmp eq i64 %438, 2
  %440 = zext i1 %439 to i8
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %440, i8* %441, align 1, !tbaa !2450
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 19
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 6
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 6
  store i64 %447, i64* %PC
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %449 = load i8, i8* %448, align 1, !tbaa !2449
  %450 = icmp ne i8 %449, 0
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %452 = load i8, i8* %451, align 1, !tbaa !2450
  %453 = icmp ne i8 %452, 0
  %454 = xor i1 %450, %453
  %455 = xor i1 %454, true
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %458 = select i1 %454, i64 %445, i64 %443
  store i64 %458, i64* %457, align 8, !tbaa !2428
  %459 = load i8, i8* %BRANCH_TAKEN
  %460 = icmp eq i8 %459, 1
  br i1 %460, label %block_402931, label %block_402924

block_4028eb:                                     ; preds = %block_4028dd
  %461 = load i64, i64* %RBP
  %462 = sub i64 %461, 24
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 4
  store i64 %464, i64* %PC
  %465 = inttoptr i64 %462 to i64*
  %466 = load i64, i64* %465
  store i64 %466, i64* %RAX, align 8, !tbaa !2428
  %467 = load i64, i64* %RAX
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 4
  store i64 %469, i64* %PC
  %470 = add i64 1, %467
  store i64 %470, i64* %RAX, align 8, !tbaa !2428
  %471 = icmp ult i64 %470, %467
  %472 = icmp ult i64 %470, 1
  %473 = or i1 %471, %472
  %474 = zext i1 %473 to i8
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %474, i8* %475, align 1, !tbaa !2432
  %476 = trunc i64 %470 to i32
  %477 = and i32 %476, 255
  %478 = call i32 @llvm.ctpop.i32(i32 %477) #16
  %479 = trunc i32 %478 to i8
  %480 = and i8 %479, 1
  %481 = xor i8 %480, 1
  %482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %481, i8* %482, align 1, !tbaa !2446
  %483 = xor i64 1, %467
  %484 = xor i64 %483, %470
  %485 = lshr i64 %484, 4
  %486 = trunc i64 %485 to i8
  %487 = and i8 %486, 1
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %487, i8* %488, align 1, !tbaa !2447
  %489 = icmp eq i64 %470, 0
  %490 = zext i1 %489 to i8
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %490, i8* %491, align 1, !tbaa !2448
  %492 = lshr i64 %470, 63
  %493 = trunc i64 %492 to i8
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %493, i8* %494, align 1, !tbaa !2449
  %495 = lshr i64 %467, 63
  %496 = xor i64 %492, %495
  %497 = add nuw nsw i64 %496, %492
  %498 = icmp eq i64 %497, 2
  %499 = zext i1 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %499, i8* %500, align 1, !tbaa !2450
  %501 = load i64, i64* %RBP
  %502 = sub i64 %501, 24
  %503 = load i64, i64* %RAX
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 4
  store i64 %505, i64* %PC
  %506 = inttoptr i64 %502 to i64*
  store i64 %503, i64* %506
  %507 = load i64, i64* %RBP
  %508 = sub i64 %507, 32
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC
  %511 = inttoptr i64 %508 to i64*
  %512 = load i64, i64* %511
  store i64 %512, i64* %RAX, align 8, !tbaa !2428
  %513 = load i64, i64* %RAX
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 4
  store i64 %515, i64* %PC
  %516 = add i64 -1, %513
  store i64 %516, i64* %RAX, align 8, !tbaa !2428
  %517 = icmp ult i64 %516, %513
  %518 = icmp ult i64 %516, -1
  %519 = or i1 %517, %518
  %520 = zext i1 %519 to i8
  %521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %520, i8* %521, align 1, !tbaa !2432
  %522 = trunc i64 %516 to i32
  %523 = and i32 %522, 255
  %524 = call i32 @llvm.ctpop.i32(i32 %523) #16
  %525 = trunc i32 %524 to i8
  %526 = and i8 %525, 1
  %527 = xor i8 %526, 1
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %527, i8* %528, align 1, !tbaa !2446
  %529 = xor i64 -1, %513
  %530 = xor i64 %529, %516
  %531 = lshr i64 %530, 4
  %532 = trunc i64 %531 to i8
  %533 = and i8 %532, 1
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %533, i8* %534, align 1, !tbaa !2447
  %535 = icmp eq i64 %516, 0
  %536 = zext i1 %535 to i8
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %536, i8* %537, align 1, !tbaa !2448
  %538 = lshr i64 %516, 63
  %539 = trunc i64 %538 to i8
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %539, i8* %540, align 1, !tbaa !2449
  %541 = lshr i64 %513, 63
  %542 = xor i64 %538, %541
  %543 = xor i64 %538, 1
  %544 = add nuw nsw i64 %542, %543
  %545 = icmp eq i64 %544, 2
  %546 = zext i1 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %546, i8* %547, align 1, !tbaa !2450
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 32
  %550 = load i64, i64* %RAX
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC
  %553 = inttoptr i64 %549 to i64*
  store i64 %550, i64* %553
  br label %block_402903

block_40294a:                                     ; preds = %block_40293f
  %554 = load i64, i64* %RBP
  %555 = sub i64 %554, 24
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 4
  store i64 %557, i64* %PC
  %558 = inttoptr i64 %555 to i64*
  %559 = load i64, i64* %558
  store i64 %559, i64* %RDI, align 8, !tbaa !2428
  %560 = load i64, i64* %RBP
  %561 = sub i64 %560, 16
  %562 = load i64, i64* %PC
  %563 = add i64 %562, 4
  store i64 %563, i64* %PC
  %564 = inttoptr i64 %561 to i64*
  %565 = load i64, i64* %564
  store i64 %565, i64* %RSI, align 8, !tbaa !2428
  %566 = load i64, i64* %PC
  %567 = sub i64 %566, 354
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 5
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 5
  store i64 %571, i64* %PC
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %573 = load i64, i64* %572, align 8, !tbaa !2428
  %574 = add i64 %573, -8
  %575 = inttoptr i64 %574 to i64*
  store i64 %569, i64* %575
  store i64 %574, i64* %572, align 8, !tbaa !2428
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %567, i64* %576, align 8, !tbaa !2428
  %577 = load i64, i64* %PC
  %578 = call %struct.Memory* @sub_4027f0_sort_basket_renamed_(%struct.State* %0, i64 %577, %struct.Memory* %MEMORY.4)
  br label %block_402957

block_4028dd:                                     ; preds = %block_4028a5, %block_402897
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_402897 ], [ %MEMORY.3, %block_4028a5 ]
  %579 = load i64, i64* %RBP
  %580 = sub i64 %579, 24
  %581 = load i64, i64* %PC
  %582 = add i64 %581, 4
  store i64 %582, i64* %PC
  %583 = inttoptr i64 %580 to i64*
  %584 = load i64, i64* %583
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = load i64, i64* %RAX
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 32
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i64*
  %591 = load i64, i64* %590
  %592 = sub i64 %585, %591
  %593 = icmp ugt i64 %591, %585
  %594 = zext i1 %593 to i8
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %594, i8* %595, align 1, !tbaa !2432
  %596 = trunc i64 %592 to i32
  %597 = and i32 %596, 255
  %598 = call i32 @llvm.ctpop.i32(i32 %597) #16
  %599 = trunc i32 %598 to i8
  %600 = and i8 %599, 1
  %601 = xor i8 %600, 1
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %601, i8* %602, align 1, !tbaa !2446
  %603 = xor i64 %591, %585
  %604 = xor i64 %603, %592
  %605 = lshr i64 %604, 4
  %606 = trunc i64 %605 to i8
  %607 = and i8 %606, 1
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %607, i8* %608, align 1, !tbaa !2447
  %609 = icmp eq i64 %592, 0
  %610 = zext i1 %609 to i8
  %611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %610, i8* %611, align 1, !tbaa !2448
  %612 = lshr i64 %592, 63
  %613 = trunc i64 %612 to i8
  %614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %613, i8* %614, align 1, !tbaa !2449
  %615 = lshr i64 %585, 63
  %616 = lshr i64 %591, 63
  %617 = xor i64 %616, %615
  %618 = xor i64 %612, %615
  %619 = add nuw nsw i64 %618, %617
  %620 = icmp eq i64 %619, 2
  %621 = zext i1 %620 to i8
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %621, i8* %622, align 1, !tbaa !2450
  %623 = load i64, i64* %PC
  %624 = add i64 %623, 30
  %625 = load i64, i64* %PC
  %626 = add i64 %625, 6
  %627 = load i64, i64* %PC
  %628 = add i64 %627, 6
  store i64 %628, i64* %PC
  %629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %630 = load i8, i8* %629, align 1, !tbaa !2448
  %631 = icmp eq i8 %630, 0
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %633 = load i8, i8* %632, align 1, !tbaa !2449
  %634 = icmp ne i8 %633, 0
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %636 = load i8, i8* %635, align 1, !tbaa !2450
  %637 = icmp ne i8 %636, 0
  %638 = xor i1 %634, %637
  %639 = xor i1 %638, true
  %640 = and i1 %631, %639
  %641 = zext i1 %640 to i8
  store i8 %641, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %643 = select i1 %640, i64 %624, i64 %626
  store i64 %643, i64* %642, align 8, !tbaa !2428
  %644 = load i8, i8* %BRANCH_TAKEN
  %645 = icmp eq i8 %644, 1
  br i1 %645, label %block_402903, label %block_4028eb

block_40283c:                                     ; preds = %block_402837, %block_402856
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_402837 ], [ %MEMORY.2, %block_402856 ]
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 24
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 4
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i64*
  %651 = load i64, i64* %650
  store i64 %651, i64* %RAX, align 8, !tbaa !2428
  %652 = load i64, i64* %RAX
  %653 = mul i64 %652, 8
  %654 = add i64 %653, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 8
  store i64 %656, i64* %PC
  %657 = inttoptr i64 %654 to i64*
  %658 = load i64, i64* %657
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = load i64, i64* %RAX
  %660 = add i64 %659, 16
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 4
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %660 to i64*
  %664 = load i64, i64* %663
  store i64 %664, i64* %RAX, align 8, !tbaa !2428
  %665 = load i64, i64* %RAX
  %666 = load i64, i64* %RBP
  %667 = sub i64 %666, 40
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 4
  store i64 %669, i64* %PC
  %670 = inttoptr i64 %667 to i64*
  %671 = load i64, i64* %670
  %672 = sub i64 %665, %671
  %673 = icmp ugt i64 %671, %665
  %674 = zext i1 %673 to i8
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %674, i8* %675, align 1, !tbaa !2432
  %676 = trunc i64 %672 to i32
  %677 = and i32 %676, 255
  %678 = call i32 @llvm.ctpop.i32(i32 %677) #16
  %679 = trunc i32 %678 to i8
  %680 = and i8 %679, 1
  %681 = xor i8 %680, 1
  %682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %681, i8* %682, align 1, !tbaa !2446
  %683 = xor i64 %671, %665
  %684 = xor i64 %683, %672
  %685 = lshr i64 %684, 4
  %686 = trunc i64 %685 to i8
  %687 = and i8 %686, 1
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %687, i8* %688, align 1, !tbaa !2447
  %689 = icmp eq i64 %672, 0
  %690 = zext i1 %689 to i8
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %690, i8* %691, align 1, !tbaa !2448
  %692 = lshr i64 %672, 63
  %693 = trunc i64 %692 to i8
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %693, i8* %694, align 1, !tbaa !2449
  %695 = lshr i64 %665, 63
  %696 = lshr i64 %671, 63
  %697 = xor i64 %696, %695
  %698 = xor i64 %692, %695
  %699 = add nuw nsw i64 %698, %697
  %700 = icmp eq i64 %699, 2
  %701 = zext i1 %700 to i8
  %702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %701, i8* %702, align 1, !tbaa !2450
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 23
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 6
  %707 = load i64, i64* %PC
  %708 = add i64 %707, 6
  store i64 %708, i64* %PC
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %710 = load i8, i8* %709, align 1, !tbaa !2448
  %711 = icmp ne i8 %710, 0
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %713 = load i8, i8* %712, align 1, !tbaa !2449
  %714 = icmp ne i8 %713, 0
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %716 = load i8, i8* %715, align 1, !tbaa !2450
  %717 = icmp ne i8 %716, 0
  %718 = xor i1 %714, %717
  %719 = or i1 %711, %718
  %720 = zext i1 %719 to i8
  store i8 %720, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %722 = select i1 %719, i64 %704, i64 %706
  store i64 %722, i64* %721, align 8, !tbaa !2428
  %723 = load i8, i8* %BRANCH_TAKEN
  %724 = icmp eq i8 %723, 1
  br i1 %724, label %block_402867, label %block_402856

block_402867:                                     ; preds = %block_40283c
  %725 = load i64, i64* %PC
  %726 = add i64 %725, 5
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 5
  store i64 %728, i64* %PC
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %726, i64* %729, align 8, !tbaa !2428
  br label %block_40286c

block_402886:                                     ; preds = %block_40286c
  %730 = sub i64 %924, 32
  %731 = load i64, i64* %PC
  %732 = add i64 %731, 4
  store i64 %732, i64* %PC
  %733 = inttoptr i64 %730 to i64*
  %734 = load i64, i64* %733
  store i64 %734, i64* %RAX, align 8, !tbaa !2428
  %735 = load i64, i64* %RAX
  %736 = load i64, i64* %PC
  %737 = add i64 %736, 4
  store i64 %737, i64* %PC
  %738 = add i64 -1, %735
  store i64 %738, i64* %RAX, align 8, !tbaa !2428
  %739 = icmp ult i64 %738, %735
  %740 = icmp ult i64 %738, -1
  %741 = or i1 %739, %740
  %742 = zext i1 %741 to i8
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %742, i8* %743, align 1, !tbaa !2432
  %744 = trunc i64 %738 to i32
  %745 = and i32 %744, 255
  %746 = call i32 @llvm.ctpop.i32(i32 %745) #16
  %747 = trunc i32 %746 to i8
  %748 = and i8 %747, 1
  %749 = xor i8 %748, 1
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %749, i8* %750, align 1, !tbaa !2446
  %751 = xor i64 -1, %735
  %752 = xor i64 %751, %738
  %753 = lshr i64 %752, 4
  %754 = trunc i64 %753 to i8
  %755 = and i8 %754, 1
  %756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %755, i8* %756, align 1, !tbaa !2447
  %757 = icmp eq i64 %738, 0
  %758 = zext i1 %757 to i8
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %758, i8* %759, align 1, !tbaa !2448
  %760 = lshr i64 %738, 63
  %761 = trunc i64 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %761, i8* %762, align 1, !tbaa !2449
  %763 = lshr i64 %735, 63
  %764 = xor i64 %760, %763
  %765 = xor i64 %760, 1
  %766 = add nuw nsw i64 %764, %765
  %767 = icmp eq i64 %766, 2
  %768 = zext i1 %767 to i8
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %768, i8* %769, align 1, !tbaa !2450
  %770 = load i64, i64* %RBP
  %771 = sub i64 %770, 32
  %772 = load i64, i64* %RAX
  %773 = load i64, i64* %PC
  %774 = add i64 %773, 4
  store i64 %774, i64* %PC
  %775 = inttoptr i64 %771 to i64*
  store i64 %772, i64* %775
  %776 = load i64, i64* %PC
  %777 = sub i64 %776, 38
  %778 = load i64, i64* %PC
  %779 = add i64 %778, 5
  store i64 %779, i64* %PC
  %780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %777, i64* %780, align 8, !tbaa !2428
  br label %block_40286c

block_4028a5:                                     ; preds = %block_402897
  %781 = load i64, i64* %RBP
  %782 = sub i64 %781, 24
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 4
  store i64 %784, i64* %PC
  %785 = inttoptr i64 %782 to i64*
  %786 = load i64, i64* %785
  store i64 %786, i64* %RAX, align 8, !tbaa !2428
  %787 = load i64, i64* %RAX
  %788 = mul i64 %787, 8
  %789 = add i64 %788, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 8
  store i64 %791, i64* %PC
  %792 = inttoptr i64 %789 to i64*
  %793 = load i64, i64* %792
  store i64 %793, i64* %RAX, align 8, !tbaa !2428
  %794 = load i64, i64* %RBP
  %795 = sub i64 %794, 48
  %796 = load i64, i64* %RAX
  %797 = load i64, i64* %PC
  %798 = add i64 %797, 4
  store i64 %798, i64* %PC
  %799 = inttoptr i64 %795 to i64*
  store i64 %796, i64* %799
  %800 = load i64, i64* %RBP
  %801 = sub i64 %800, 32
  %802 = load i64, i64* %PC
  %803 = add i64 %802, 4
  store i64 %803, i64* %PC
  %804 = inttoptr i64 %801 to i64*
  %805 = load i64, i64* %804
  store i64 %805, i64* %RAX, align 8, !tbaa !2428
  %806 = load i64, i64* %RAX
  %807 = mul i64 %806, 8
  %808 = add i64 %807, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %809 = load i64, i64* %PC
  %810 = add i64 %809, 8
  store i64 %810, i64* %PC
  %811 = inttoptr i64 %808 to i64*
  %812 = load i64, i64* %811
  store i64 %812, i64* %RAX, align 8, !tbaa !2428
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 24
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 4
  store i64 %816, i64* %PC
  %817 = inttoptr i64 %814 to i64*
  %818 = load i64, i64* %817
  store i64 %818, i64* %RCX, align 8, !tbaa !2428
  %819 = load i64, i64* %RCX
  %820 = mul i64 %819, 8
  %821 = add i64 %820, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %822 = load i64, i64* %RAX
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 8
  store i64 %824, i64* %PC
  %825 = inttoptr i64 %821 to i64*
  store i64 %822, i64* %825
  %826 = load i64, i64* %RBP
  %827 = sub i64 %826, 48
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 4
  store i64 %829, i64* %PC
  %830 = inttoptr i64 %827 to i64*
  %831 = load i64, i64* %830
  store i64 %831, i64* %RAX, align 8, !tbaa !2428
  %832 = load i64, i64* %RBP
  %833 = sub i64 %832, 32
  %834 = load i64, i64* %PC
  %835 = add i64 %834, 4
  store i64 %835, i64* %PC
  %836 = inttoptr i64 %833 to i64*
  %837 = load i64, i64* %836
  store i64 %837, i64* %RCX, align 8, !tbaa !2428
  %838 = load i64, i64* %RCX
  %839 = mul i64 %838, 8
  %840 = add i64 %839, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %841 = load i64, i64* %RAX
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 8
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %840 to i64*
  store i64 %841, i64* %844
  br label %block_4028dd

block_40286c:                                     ; preds = %block_402886, %block_402867
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_402867 ], [ %MEMORY.3, %block_402886 ]
  %845 = load i64, i64* %RBP
  %846 = sub i64 %845, 40
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 4
  store i64 %848, i64* %PC
  %849 = inttoptr i64 %846 to i64*
  %850 = load i64, i64* %849
  store i64 %850, i64* %RAX, align 8, !tbaa !2428
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 32
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 4
  store i64 %854, i64* %PC
  %855 = inttoptr i64 %852 to i64*
  %856 = load i64, i64* %855
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %857 = load i64, i64* %RCX
  %858 = mul i64 %857, 8
  %859 = add i64 %858, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 8
  store i64 %861, i64* %PC
  %862 = inttoptr i64 %859 to i64*
  %863 = load i64, i64* %862
  store i64 %863, i64* %RCX, align 8, !tbaa !2428
  %864 = load i64, i64* %RAX
  %865 = load i64, i64* %RCX
  %866 = add i64 %865, 16
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 4
  store i64 %868, i64* %PC
  %869 = inttoptr i64 %866 to i64*
  %870 = load i64, i64* %869
  %871 = sub i64 %864, %870
  %872 = icmp ugt i64 %870, %864
  %873 = zext i1 %872 to i8
  %874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %873, i8* %874, align 1, !tbaa !2432
  %875 = trunc i64 %871 to i32
  %876 = and i32 %875, 255
  %877 = call i32 @llvm.ctpop.i32(i32 %876) #16
  %878 = trunc i32 %877 to i8
  %879 = and i8 %878, 1
  %880 = xor i8 %879, 1
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %880, i8* %881, align 1, !tbaa !2446
  %882 = xor i64 %870, %864
  %883 = xor i64 %882, %871
  %884 = lshr i64 %883, 4
  %885 = trunc i64 %884 to i8
  %886 = and i8 %885, 1
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %886, i8* %887, align 1, !tbaa !2447
  %888 = icmp eq i64 %871, 0
  %889 = zext i1 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %889, i8* %890, align 1, !tbaa !2448
  %891 = lshr i64 %871, 63
  %892 = trunc i64 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %892, i8* %893, align 1, !tbaa !2449
  %894 = lshr i64 %864, 63
  %895 = lshr i64 %870, 63
  %896 = xor i64 %895, %894
  %897 = xor i64 %891, %894
  %898 = add nuw nsw i64 %897, %896
  %899 = icmp eq i64 %898, 2
  %900 = zext i1 %899 to i8
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %900, i8* %901, align 1, !tbaa !2450
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 23
  %904 = load i64, i64* %PC
  %905 = add i64 %904, 6
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 6
  store i64 %907, i64* %PC
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %909 = load i8, i8* %908, align 1, !tbaa !2448
  %910 = icmp ne i8 %909, 0
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %912 = load i8, i8* %911, align 1, !tbaa !2449
  %913 = icmp ne i8 %912, 0
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %915 = load i8, i8* %914, align 1, !tbaa !2450
  %916 = icmp ne i8 %915, 0
  %917 = xor i1 %913, %916
  %918 = or i1 %910, %917
  %919 = zext i1 %918 to i8
  store i8 %919, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %921 = select i1 %918, i64 %903, i64 %905
  store i64 %921, i64* %920, align 8, !tbaa !2428
  %922 = load i8, i8* %BRANCH_TAKEN
  %923 = icmp eq i8 %922, 1
  %924 = load i64, i64* %RBP
  br i1 %923, label %block_402897, label %block_402886

block_402924:                                     ; preds = %block_402916
  %925 = load i64, i64* %RBP
  %926 = sub i64 %925, 8
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 4
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %926 to i64*
  %930 = load i64, i64* %929
  store i64 %930, i64* %RDI, align 8, !tbaa !2428
  %931 = load i64, i64* %RBP
  %932 = sub i64 %931, 32
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 4
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %932 to i64*
  %936 = load i64, i64* %935
  store i64 %936, i64* %RSI, align 8, !tbaa !2428
  %937 = load i64, i64* %PC
  %938 = sub i64 %937, 316
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 5
  %941 = load i64, i64* %PC
  %942 = add i64 %941, 5
  store i64 %942, i64* %PC
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %944 = load i64, i64* %943, align 8, !tbaa !2428
  %945 = add i64 %944, -8
  %946 = inttoptr i64 %945 to i64*
  store i64 %940, i64* %946
  store i64 %945, i64* %943, align 8, !tbaa !2428
  %947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %938, i64* %947, align 8, !tbaa !2428
  %948 = load i64, i64* %PC
  %949 = call %struct.Memory* @sub_4027f0_sort_basket_renamed_(%struct.State* %0, i64 %948, %struct.Memory* %MEMORY.5)
  br label %block_402931

block_402931:                                     ; preds = %block_402924, %block_402916
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.5, %block_402916 ], [ %949, %block_402924 ]
  %950 = load i64, i64* %RBP
  %951 = sub i64 %950, 24
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 4
  store i64 %953, i64* %PC
  %954 = inttoptr i64 %951 to i64*
  %955 = load i64, i64* %954
  store i64 %955, i64* %RAX, align 8, !tbaa !2428
  %956 = load i64, i64* %RAX
  %957 = load i64, i64* %RBP
  %958 = sub i64 %957, 16
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 4
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %958 to i64*
  %962 = load i64, i64* %961
  %963 = sub i64 %956, %962
  %964 = icmp ugt i64 %962, %956
  %965 = zext i1 %964 to i8
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %965, i8* %966, align 1, !tbaa !2432
  %967 = trunc i64 %963 to i32
  %968 = and i32 %967, 255
  %969 = call i32 @llvm.ctpop.i32(i32 %968) #16
  %970 = trunc i32 %969 to i8
  %971 = and i8 %970, 1
  %972 = xor i8 %971, 1
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %972, i8* %973, align 1, !tbaa !2446
  %974 = xor i64 %962, %956
  %975 = xor i64 %974, %963
  %976 = lshr i64 %975, 4
  %977 = trunc i64 %976 to i8
  %978 = and i8 %977, 1
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %978, i8* %979, align 1, !tbaa !2447
  %980 = icmp eq i64 %963, 0
  %981 = zext i1 %980 to i8
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %981, i8* %982, align 1, !tbaa !2448
  %983 = lshr i64 %963, 63
  %984 = trunc i64 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %984, i8* %985, align 1, !tbaa !2449
  %986 = lshr i64 %956, 63
  %987 = lshr i64 %962, 63
  %988 = xor i64 %987, %986
  %989 = xor i64 %983, %986
  %990 = add nuw nsw i64 %989, %988
  %991 = icmp eq i64 %990, 2
  %992 = zext i1 %991 to i8
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %992, i8* %993, align 1, !tbaa !2450
  %994 = load i64, i64* %PC
  %995 = add i64 %994, 30
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 6
  %998 = load i64, i64* %PC
  %999 = add i64 %998, 6
  store i64 %999, i64* %PC
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1001 = load i8, i8* %1000, align 1, !tbaa !2449
  %1002 = icmp ne i8 %1001, 0
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1004 = load i8, i8* %1003, align 1, !tbaa !2450
  %1005 = icmp ne i8 %1004, 0
  %1006 = xor i1 %1002, %1005
  %1007 = xor i1 %1006, true
  %1008 = zext i1 %1007 to i8
  store i8 %1008, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1010 = select i1 %1006, i64 %997, i64 %995
  store i64 %1010, i64* %1009, align 8, !tbaa !2428
  %1011 = load i8, i8* %BRANCH_TAKEN
  %1012 = icmp eq i8 %1011, 1
  br i1 %1012, label %block_402957, label %block_40293f

block_402903:                                     ; preds = %block_4028dd, %block_4028eb
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.1, %block_4028dd ], [ %MEMORY.1, %block_4028eb ]
  %1013 = load i64, i64* %PC
  %1014 = add i64 %1013, 5
  %1015 = load i64, i64* %PC
  %1016 = add i64 %1015, 5
  store i64 %1016, i64* %PC
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1014, i64* %1017, align 8, !tbaa !2428
  %1018 = load i64, i64* %RBP
  %1019 = sub i64 %1018, 24
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 4
  store i64 %1021, i64* %PC
  %1022 = inttoptr i64 %1019 to i64*
  %1023 = load i64, i64* %1022
  store i64 %1023, i64* %RAX, align 8, !tbaa !2428
  %1024 = load i64, i64* %RAX
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 32
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 4
  store i64 %1028, i64* %PC
  %1029 = inttoptr i64 %1026 to i64*
  %1030 = load i64, i64* %1029
  %1031 = sub i64 %1024, %1030
  %1032 = icmp ugt i64 %1030, %1024
  %1033 = zext i1 %1032 to i8
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1033, i8* %1034, align 1, !tbaa !2432
  %1035 = trunc i64 %1031 to i32
  %1036 = and i32 %1035, 255
  %1037 = call i32 @llvm.ctpop.i32(i32 %1036) #16
  %1038 = trunc i32 %1037 to i8
  %1039 = and i8 %1038, 1
  %1040 = xor i8 %1039, 1
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1040, i8* %1041, align 1, !tbaa !2446
  %1042 = xor i64 %1030, %1024
  %1043 = xor i64 %1042, %1031
  %1044 = lshr i64 %1043, 4
  %1045 = trunc i64 %1044 to i8
  %1046 = and i8 %1045, 1
  %1047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1046, i8* %1047, align 1, !tbaa !2447
  %1048 = icmp eq i64 %1031, 0
  %1049 = zext i1 %1048 to i8
  %1050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1049, i8* %1050, align 1, !tbaa !2448
  %1051 = lshr i64 %1031, 63
  %1052 = trunc i64 %1051 to i8
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1052, i8* %1053, align 1, !tbaa !2449
  %1054 = lshr i64 %1024, 63
  %1055 = lshr i64 %1030, 63
  %1056 = xor i64 %1055, %1054
  %1057 = xor i64 %1051, %1054
  %1058 = add nuw nsw i64 %1057, %1056
  %1059 = icmp eq i64 %1058, 2
  %1060 = zext i1 %1059 to i8
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1060, i8* %1061, align 1, !tbaa !2450
  %1062 = load i64, i64* %PC
  %1063 = sub i64 %1062, 217
  %1064 = load i64, i64* %PC
  %1065 = add i64 %1064, 6
  %1066 = load i64, i64* %PC
  %1067 = add i64 %1066, 6
  store i64 %1067, i64* %PC
  %1068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1069 = load i8, i8* %1068, align 1, !tbaa !2448
  %1070 = icmp ne i8 %1069, 0
  %1071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1072 = load i8, i8* %1071, align 1, !tbaa !2449
  %1073 = icmp ne i8 %1072, 0
  %1074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1075 = load i8, i8* %1074, align 1, !tbaa !2450
  %1076 = icmp ne i8 %1075, 0
  %1077 = xor i1 %1073, %1076
  %1078 = or i1 %1070, %1077
  %1079 = zext i1 %1078 to i8
  store i8 %1079, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1081 = select i1 %1078, i64 %1063, i64 %1065
  store i64 %1081, i64* %1080, align 8, !tbaa !2428
  %1082 = load i8, i8* %BRANCH_TAKEN
  %1083 = icmp eq i8 %1082, 1
  br i1 %1083, label %block_402837, label %block_402916

block_402957:                                     ; preds = %block_402931, %block_40294a, %block_40293f
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.4, %block_402931 ], [ %MEMORY.4, %block_40293f ], [ %578, %block_40294a ]
  %1084 = load i64, i64* %RSP
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 4
  store i64 %1086, i64* %PC
  %1087 = add i64 48, %1084
  store i64 %1087, i64* %RSP, align 8, !tbaa !2428
  %1088 = icmp ult i64 %1087, %1084
  %1089 = icmp ult i64 %1087, 48
  %1090 = or i1 %1088, %1089
  %1091 = zext i1 %1090 to i8
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1091, i8* %1092, align 1, !tbaa !2432
  %1093 = trunc i64 %1087 to i32
  %1094 = and i32 %1093, 255
  %1095 = call i32 @llvm.ctpop.i32(i32 %1094) #16
  %1096 = trunc i32 %1095 to i8
  %1097 = and i8 %1096, 1
  %1098 = xor i8 %1097, 1
  %1099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1098, i8* %1099, align 1, !tbaa !2446
  %1100 = xor i64 48, %1084
  %1101 = xor i64 %1100, %1087
  %1102 = lshr i64 %1101, 4
  %1103 = trunc i64 %1102 to i8
  %1104 = and i8 %1103, 1
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1104, i8* %1105, align 1, !tbaa !2447
  %1106 = icmp eq i64 %1087, 0
  %1107 = zext i1 %1106 to i8
  %1108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1107, i8* %1108, align 1, !tbaa !2448
  %1109 = lshr i64 %1087, 63
  %1110 = trunc i64 %1109 to i8
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1110, i8* %1111, align 1, !tbaa !2449
  %1112 = lshr i64 %1084, 63
  %1113 = xor i64 %1109, %1112
  %1114 = add nuw nsw i64 %1113, %1109
  %1115 = icmp eq i64 %1114, 2
  %1116 = zext i1 %1115 to i8
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1116, i8* %1117, align 1, !tbaa !2450
  %1118 = load i64, i64* %PC
  %1119 = add i64 %1118, 1
  store i64 %1119, i64* %PC
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1121 = load i64, i64* %1120, align 8, !tbaa !2428
  %1122 = add i64 %1121, 8
  %1123 = inttoptr i64 %1121 to i64*
  %1124 = load i64, i64* %1123
  store i64 %1124, i64* %RBP, align 8, !tbaa !2428
  store i64 %1122, i64* %1120, align 8, !tbaa !2428
  %1125 = load i64, i64* %PC
  %1126 = add i64 %1125, 1
  store i64 %1126, i64* %PC
  %1127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1129 = load i64, i64* %1128, align 8, !tbaa !2428
  %1130 = inttoptr i64 %1129 to i64*
  %1131 = load i64, i64* %1130
  store i64 %1131, i64* %1127, align 8, !tbaa !2428
  %1132 = add i64 %1129, 8
  store i64 %1132, i64* %1128, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6
}

; Function Attrs: noinline
define %struct.Memory* @sub_401b90_refresh_neighbour_lists(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401b90:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = load i64, i64* %RBP
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to i64*
  store i64 %21, i64* %27
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  %31 = load i64, i64* %RBP
  %32 = sub i64 %31, 8
  %33 = load i64, i64* %RDI
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC
  %36 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %36
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 4
  store i64 %40, i64* %PC
  %41 = inttoptr i64 %38 to i64*
  %42 = load i64, i64* %41
  store i64 %42, i64* %RDI, align 8, !tbaa !2428
  %43 = load i64, i64* %RDI
  %44 = add i64 %43, 552
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 7
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 16
  %51 = load i64, i64* %RDI
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54
  %55 = load i64, i64* %RBP
  %56 = sub i64 %55, 8
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59
  store i64 %60, i64* %RDI, align 8, !tbaa !2428
  %61 = load i64, i64* %RDI
  %62 = add i64 %61, 560
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 7
  store i64 %64, i64* %PC
  %65 = inttoptr i64 %62 to i64*
  %66 = load i64, i64* %65
  store i64 %66, i64* %RDI, align 8, !tbaa !2428
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 32
  %69 = load i64, i64* %RDI
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  br label %block_401bb6

block_401c78:                                     ; preds = %block_401c0e
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 1
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %76 = load i64, i64* %75, align 8, !tbaa !2428
  %77 = add i64 %76, 8
  %78 = inttoptr i64 %76 to i64*
  %79 = load i64, i64* %78
  store i64 %79, i64* %RBP, align 8, !tbaa !2428
  store i64 %77, i64* %75, align 8, !tbaa !2428
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 1
  store i64 %81, i64* %PC
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = inttoptr i64 %84 to i64*
  %86 = load i64, i64* %85
  store i64 %86, i64* %82, align 8, !tbaa !2428
  %87 = add i64 %84, 8
  store i64 %87, i64* %83, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_401bf0:                                     ; preds = %block_401bb6
  %88 = sub i64 %184, 8
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC
  %91 = inttoptr i64 %88 to i64*
  %92 = load i64, i64* %91
  store i64 %92, i64* %RAX, align 8, !tbaa !2428
  %93 = load i64, i64* %RAX
  %94 = add i64 %93, 568
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 7
  store i64 %96, i64* %PC
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = load i64, i64* %RBP
  %100 = sub i64 %99, 24
  %101 = load i64, i64* %RAX
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %100 to i64*
  store i64 %101, i64* %104
  %105 = load i64, i64* %RBP
  %106 = sub i64 %105, 8
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %106 to i64*
  %110 = load i64, i64* %109
  store i64 %110, i64* %RAX, align 8, !tbaa !2428
  %111 = load i64, i64* %RAX
  %112 = add i64 %111, 576
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 7
  store i64 %114, i64* %PC
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115
  store i64 %116, i64* %RAX, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 32
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %118 to i64*
  store i64 %119, i64* %122
  br label %block_401c0e

block_401bb6:                                     ; preds = %block_401bc7, %block_401b90
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401b90 ], [ %MEMORY.0, %block_401bc7 ]
  %123 = load i64, i64* %RBP
  %124 = sub i64 %123, 16
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 4
  store i64 %126, i64* %PC
  %127 = inttoptr i64 %124 to i64*
  %128 = load i64, i64* %127
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RBP
  %130 = sub i64 %129, 32
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 4
  store i64 %132, i64* %PC
  %133 = inttoptr i64 %130 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %RCX, align 8, !tbaa !2428
  %135 = load i64, i64* %RAX
  %136 = load i64, i64* %RCX
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 3
  store i64 %138, i64* %PC
  %139 = sub i64 %135, %136
  %140 = icmp ult i64 %135, %136
  %141 = zext i1 %140 to i8
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %141, i8* %142, align 1, !tbaa !2432
  %143 = trunc i64 %139 to i32
  %144 = and i32 %143, 255
  %145 = call i32 @llvm.ctpop.i32(i32 %144) #16
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %148, i8* %149, align 1, !tbaa !2446
  %150 = xor i64 %136, %135
  %151 = xor i64 %150, %139
  %152 = lshr i64 %151, 4
  %153 = trunc i64 %152 to i8
  %154 = and i8 %153, 1
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %154, i8* %155, align 1, !tbaa !2447
  %156 = icmp eq i64 %139, 0
  %157 = zext i1 %156 to i8
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %157, i8* %158, align 1, !tbaa !2448
  %159 = lshr i64 %139, 63
  %160 = trunc i64 %159 to i8
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %160, i8* %161, align 1, !tbaa !2449
  %162 = lshr i64 %135, 63
  %163 = lshr i64 %136, 63
  %164 = xor i64 %163, %162
  %165 = xor i64 %159, %162
  %166 = add nuw nsw i64 %165, %164
  %167 = icmp eq i64 %166, 2
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %168, i8* %169, align 1, !tbaa !2450
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 47
  %172 = load i64, i64* %PC
  %173 = add i64 %172, 6
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 6
  store i64 %175, i64* %PC
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %177 = load i8, i8* %176, align 1, !tbaa !2432
  %178 = icmp eq i8 %177, 0
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %181 = select i1 %178, i64 %171, i64 %173
  store i64 %181, i64* %180, align 8, !tbaa !2428
  %182 = load i8, i8* %BRANCH_TAKEN
  %183 = icmp eq i8 %182, 1
  %184 = load i64, i64* %RBP
  br i1 %183, label %block_401bf0, label %block_401bc7

block_401c0e:                                     ; preds = %block_401c1f, %block_401bf0
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_401bf0 ], [ %MEMORY.1, %block_401c1f ]
  %185 = load i64, i64* %RBP
  %186 = sub i64 %185, 24
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %186 to i64*
  %190 = load i64, i64* %189
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = load i64, i64* %RBP
  %192 = sub i64 %191, 32
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 4
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %192 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %RCX, align 8, !tbaa !2428
  %197 = load i64, i64* %RAX
  %198 = load i64, i64* %RCX
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 3
  store i64 %200, i64* %PC
  %201 = sub i64 %197, %198
  %202 = icmp ult i64 %197, %198
  %203 = zext i1 %202 to i8
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %203, i8* %204, align 1, !tbaa !2432
  %205 = trunc i64 %201 to i32
  %206 = and i32 %205, 255
  %207 = call i32 @llvm.ctpop.i32(i32 %206) #16
  %208 = trunc i32 %207 to i8
  %209 = and i8 %208, 1
  %210 = xor i8 %209, 1
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %210, i8* %211, align 1, !tbaa !2446
  %212 = xor i64 %198, %197
  %213 = xor i64 %212, %201
  %214 = lshr i64 %213, 4
  %215 = trunc i64 %214 to i8
  %216 = and i8 %215, 1
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %216, i8* %217, align 1, !tbaa !2447
  %218 = icmp eq i64 %201, 0
  %219 = zext i1 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %219, i8* %220, align 1, !tbaa !2448
  %221 = lshr i64 %201, 63
  %222 = trunc i64 %221 to i8
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %222, i8* %223, align 1, !tbaa !2449
  %224 = lshr i64 %197, 63
  %225 = lshr i64 %198, 63
  %226 = xor i64 %225, %224
  %227 = xor i64 %221, %224
  %228 = add nuw nsw i64 %227, %226
  %229 = icmp eq i64 %228, 2
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %230, i8* %231, align 1, !tbaa !2450
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 95
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 6
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 6
  store i64 %237, i64* %PC
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %239 = load i8, i8* %238, align 1, !tbaa !2432
  %240 = icmp eq i8 %239, 0
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %243 = select i1 %240, i64 %233, i64 %235
  store i64 %243, i64* %242, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401c78, label %block_401c1f

block_401c1f:                                     ; preds = %block_401c0e
  %246 = load i64, i64* %RBP
  %247 = sub i64 %246, 24
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i64*
  %251 = load i64, i64* %250
  store i64 %251, i64* %RAX, align 8, !tbaa !2428
  %252 = load i64, i64* %RAX
  %253 = add i64 %252, 8
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 4
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %253 to i64*
  %257 = load i64, i64* %256
  store i64 %257, i64* %RAX, align 8, !tbaa !2428
  %258 = load i64, i64* %RAX
  %259 = add i64 %258, 56
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC
  %262 = inttoptr i64 %259 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %RAX, align 8, !tbaa !2428
  %264 = load i64, i64* %RBP
  %265 = sub i64 %264, 24
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 4
  store i64 %267, i64* %PC
  %268 = inttoptr i64 %265 to i64*
  %269 = load i64, i64* %268
  store i64 %269, i64* %RCX, align 8, !tbaa !2428
  %270 = load i64, i64* %RCX
  %271 = add i64 %270, 32
  %272 = load i64, i64* %RAX
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 4
  store i64 %274, i64* %PC
  %275 = inttoptr i64 %271 to i64*
  store i64 %272, i64* %275
  %276 = load i64, i64* %RBP
  %277 = sub i64 %276, 24
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 4
  store i64 %279, i64* %PC
  %280 = inttoptr i64 %277 to i64*
  %281 = load i64, i64* %280
  store i64 %281, i64* %RAX, align 8, !tbaa !2428
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 24
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 4
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %283 to i64*
  %287 = load i64, i64* %286
  store i64 %287, i64* %RCX, align 8, !tbaa !2428
  %288 = load i64, i64* %RCX
  %289 = add i64 %288, 8
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 4
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RCX, align 8, !tbaa !2428
  %294 = load i64, i64* %RCX
  %295 = add i64 %294, 56
  %296 = load i64, i64* %RAX
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %295 to i64*
  store i64 %296, i64* %299
  %300 = load i64, i64* %RBP
  %301 = sub i64 %300, 24
  %302 = load i64, i64* %PC
  %303 = add i64 %302, 4
  store i64 %303, i64* %PC
  %304 = inttoptr i64 %301 to i64*
  %305 = load i64, i64* %304
  store i64 %305, i64* %RAX, align 8, !tbaa !2428
  %306 = load i64, i64* %RAX
  %307 = add i64 %306, 16
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 4
  store i64 %309, i64* %PC
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310
  store i64 %311, i64* %RAX, align 8, !tbaa !2428
  %312 = load i64, i64* %RAX
  %313 = add i64 %312, 64
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 4
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %313 to i64*
  %317 = load i64, i64* %316
  store i64 %317, i64* %RAX, align 8, !tbaa !2428
  %318 = load i64, i64* %RBP
  %319 = sub i64 %318, 24
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = inttoptr i64 %319 to i64*
  %323 = load i64, i64* %322
  store i64 %323, i64* %RCX, align 8, !tbaa !2428
  %324 = load i64, i64* %RCX
  %325 = add i64 %324, 40
  %326 = load i64, i64* %RAX
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %325 to i64*
  store i64 %326, i64* %329
  %330 = load i64, i64* %RBP
  %331 = sub i64 %330, 24
  %332 = load i64, i64* %PC
  %333 = add i64 %332, 4
  store i64 %333, i64* %PC
  %334 = inttoptr i64 %331 to i64*
  %335 = load i64, i64* %334
  store i64 %335, i64* %RAX, align 8, !tbaa !2428
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 24
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 4
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %337 to i64*
  %341 = load i64, i64* %340
  store i64 %341, i64* %RCX, align 8, !tbaa !2428
  %342 = load i64, i64* %RCX
  %343 = add i64 %342, 16
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 4
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %343 to i64*
  %347 = load i64, i64* %346
  store i64 %347, i64* %RCX, align 8, !tbaa !2428
  %348 = load i64, i64* %RCX
  %349 = add i64 %348, 64
  %350 = load i64, i64* %RAX
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 4
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %349 to i64*
  store i64 %350, i64* %353
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 24
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = load i64, i64* %RAX
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = add i64 64, %360
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = icmp ult i64 %363, %360
  %365 = icmp ult i64 %363, 64
  %366 = or i1 %364, %365
  %367 = zext i1 %366 to i8
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %367, i8* %368, align 1, !tbaa !2432
  %369 = trunc i64 %363 to i32
  %370 = and i32 %369, 255
  %371 = call i32 @llvm.ctpop.i32(i32 %370) #16
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  %374 = xor i8 %373, 1
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %374, i8* %375, align 1, !tbaa !2446
  %376 = xor i64 64, %360
  %377 = xor i64 %376, %363
  %378 = lshr i64 %377, 4
  %379 = trunc i64 %378 to i8
  %380 = and i8 %379, 1
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %380, i8* %381, align 1, !tbaa !2447
  %382 = icmp eq i64 %363, 0
  %383 = zext i1 %382 to i8
  %384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %383, i8* %384, align 1, !tbaa !2448
  %385 = lshr i64 %363, 63
  %386 = trunc i64 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %386, i8* %387, align 1, !tbaa !2449
  %388 = lshr i64 %360, 63
  %389 = xor i64 %385, %388
  %390 = add nuw nsw i64 %389, %385
  %391 = icmp eq i64 %390, 2
  %392 = zext i1 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %392, i8* %393, align 1, !tbaa !2450
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 24
  %396 = load i64, i64* %RAX
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %395 to i64*
  store i64 %396, i64* %399
  %400 = load i64, i64* %PC
  %401 = sub i64 %400, 101
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 5
  store i64 %403, i64* %PC
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %401, i64* %404, align 8, !tbaa !2428
  br label %block_401c0e

block_401bc7:                                     ; preds = %block_401bb6
  %405 = sub i64 %184, 16
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 4
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = load i64, i64* %RAX
  %411 = add i64 %410, 64
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 8
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i64*
  store i64 0, i64* %414
  %415 = load i64, i64* %RBP
  %416 = sub i64 %415, 16
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 4
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %416 to i64*
  %420 = load i64, i64* %419
  store i64 %420, i64* %RAX, align 8, !tbaa !2428
  %421 = load i64, i64* %RAX
  %422 = add i64 %421, 56
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 8
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i64*
  store i64 0, i64* %425
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 16
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 4
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i64*
  %431 = load i64, i64* %430
  store i64 %431, i64* %RAX, align 8, !tbaa !2428
  %432 = load i64, i64* %RAX
  %433 = load i64, i64* %PC
  %434 = add i64 %433, 4
  store i64 %434, i64* %PC
  %435 = add i64 104, %432
  store i64 %435, i64* %RAX, align 8, !tbaa !2428
  %436 = icmp ult i64 %435, %432
  %437 = icmp ult i64 %435, 104
  %438 = or i1 %436, %437
  %439 = zext i1 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %439, i8* %440, align 1, !tbaa !2432
  %441 = trunc i64 %435 to i32
  %442 = and i32 %441, 255
  %443 = call i32 @llvm.ctpop.i32(i32 %442) #16
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = xor i8 %445, 1
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %446, i8* %447, align 1, !tbaa !2446
  %448 = xor i64 104, %432
  %449 = xor i64 %448, %435
  %450 = lshr i64 %449, 4
  %451 = trunc i64 %450 to i8
  %452 = and i8 %451, 1
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %452, i8* %453, align 1, !tbaa !2447
  %454 = icmp eq i64 %435, 0
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %455, i8* %456, align 1, !tbaa !2448
  %457 = lshr i64 %435, 63
  %458 = trunc i64 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %458, i8* %459, align 1, !tbaa !2449
  %460 = lshr i64 %432, 63
  %461 = xor i64 %457, %460
  %462 = add nuw nsw i64 %461, %457
  %463 = icmp eq i64 %462, 2
  %464 = zext i1 %463 to i8
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %464, i8* %465, align 1, !tbaa !2450
  %466 = load i64, i64* %RBP
  %467 = sub i64 %466, 16
  %468 = load i64, i64* %RAX
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 4
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %467 to i64*
  store i64 %468, i64* %471
  %472 = load i64, i64* %PC
  %473 = sub i64 %472, 53
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 5
  store i64 %475, i64* %PC
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %473, i64* %476, align 8, !tbaa !2428
  br label %block_401bb6
}

; Function Attrs: noinline
define %struct.Memory* @sub_402d30_primal_iminus(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402d30:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = load i64, i64* %RBP
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %37 = load i64, i64* %36, align 8, !tbaa !2428
  %38 = add i64 %37, -8
  %39 = inttoptr i64 %38 to i64*
  store i64 %33, i64* %39
  store i64 %38, i64* %36, align 8, !tbaa !2428
  %40 = load i64, i64* %RSP
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 8
  %45 = load i64, i64* %RDI
  %46 = load i64, i64* %PC
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48
  %49 = load i64, i64* %RBP
  %50 = sub i64 %49, 16
  %51 = load i64, i64* %RSI
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54
  %55 = load i64, i64* %RBP
  %56 = sub i64 %55, 24
  %57 = load i64, i64* %RDX
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60
  %61 = load i64, i64* %RBP
  %62 = sub i64 %61, 32
  %63 = load i64, i64* %RCX
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66
  %67 = load i64, i64* %RBP
  %68 = sub i64 %67, 40
  %69 = load i64, i64* %R8
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %68 to i64*
  store i64 %69, i64* %72
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 48
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 8
  store i64 %76, i64* %PC
  %77 = inttoptr i64 %74 to i64*
  store i64 0, i64* %77
  br label %block_402d50

block_402e7e:                                     ; preds = %block_402e34
  %78 = sub i64 %561, 32
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  %83 = load i64, i64* %RAX
  %84 = add i64 %83, 24
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %84 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RAX, align 8, !tbaa !2428
  %89 = load i64, i64* %RAX
  %90 = add i64 %89, 24
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 5
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %90 to i64*
  %94 = load i64, i64* %93
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %95, align 1, !tbaa !2432
  %96 = trunc i64 %94 to i32
  %97 = and i32 %96, 255
  %98 = call i32 @llvm.ctpop.i32(i32 %97) #16
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = xor i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %101, i8* %102, align 1, !tbaa !2446
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %103, align 1, !tbaa !2447
  %104 = icmp eq i64 %94, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2448
  %107 = lshr i64 %94, 63
  %108 = trunc i64 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2449
  %110 = lshr i64 %94, 63
  %111 = xor i64 %107, %110
  %112 = add nuw nsw i64 %111, %110
  %113 = icmp eq i64 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2450
  %116 = load i64, i64* %PC
  %117 = add i64 %116, 83
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 6
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 6
  store i64 %121, i64* %PC
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %123 = load i8, i8* %122, align 1, !tbaa !2448
  store i8 %123, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %125 = icmp ne i8 %123, 0
  %126 = select i1 %125, i64 %117, i64 %119
  store i64 %126, i64* %124, align 8, !tbaa !2428
  %127 = load i8, i8* %BRANCH_TAKEN
  %128 = icmp eq i8 %127, 1
  br i1 %128, label %block_402ede, label %block_402e91

block_402df0:                                     ; preds = %block_402dd1
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %131 = load i32, i32* %EAX
  %132 = zext i32 %131 to i64
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 2
  store i64 %134, i64* %PC
  %135 = and i64 %132, 4294967295
  store i64 %135, i64* %RCX, align 8, !tbaa !2428
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 24
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %RDX, align 8, !tbaa !2428
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 48
  %144 = load i64, i64* %RDX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %143 to i64*
  store i64 %144, i64* %147
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 24
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152
  store i64 %153, i64* %RDX, align 8, !tbaa !2428
  %154 = load i64, i64* %RCX
  %155 = load i64, i64* %RDX
  %156 = add i64 %155, 80
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159
  %161 = sub i64 %154, %160
  store i64 %161, i64* %RCX, align 8, !tbaa !2428
  %162 = icmp ugt i64 %160, %154
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %163, i8* %164, align 1, !tbaa !2432
  %165 = trunc i64 %161 to i32
  %166 = and i32 %165, 255
  %167 = call i32 @llvm.ctpop.i32(i32 %166) #16
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %170, i8* %171, align 1, !tbaa !2446
  %172 = xor i64 %160, %154
  %173 = xor i64 %172, %161
  %174 = lshr i64 %173, 4
  %175 = trunc i64 %174 to i8
  %176 = and i8 %175, 1
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %176, i8* %177, align 1, !tbaa !2447
  %178 = icmp eq i64 %161, 0
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %179, i8* %180, align 1, !tbaa !2448
  %181 = lshr i64 %161, 63
  %182 = trunc i64 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %182, i8* %183, align 1, !tbaa !2449
  %184 = lshr i64 %154, 63
  %185 = lshr i64 %160, 63
  %186 = xor i64 %185, %184
  %187 = xor i64 %181, %184
  %188 = add nuw nsw i64 %187, %186
  %189 = icmp eq i64 %188, 2
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %190, i8* %191, align 1, !tbaa !2450
  %192 = load i64, i64* %RBP
  %193 = sub i64 %192, 8
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 4
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %193 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RDX, align 8, !tbaa !2428
  %198 = load i64, i64* %RDX
  %199 = load i64, i64* %RCX
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 3
  store i64 %201, i64* %PC
  %202 = inttoptr i64 %198 to i64*
  store i64 %199, i64* %202
  %203 = load i64, i64* %RBP
  %204 = sub i64 %203, 16
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC
  %207 = inttoptr i64 %204 to i64*
  %208 = load i64, i64* %207
  store i64 %208, i64* %RCX, align 8, !tbaa !2428
  %209 = load i64, i64* %RCX
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 7
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i64*
  store i64 0, i64* %212
  br label %block_402e19

block_402eef:                                     ; preds = %block_402e23, %block_402ee3
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_402ee3 ], [ %MEMORY.5, %block_402e23 ]
  %213 = load i64, i64* %PC
  %214 = sub i64 %213, 415
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 5
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %217, align 8, !tbaa !2428
  br label %block_402d50

block_402ed9:                                     ; preds = %block_402e91, %block_402eb0
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_402e91 ], [ %MEMORY.2, %block_402eb0 ]
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 5
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 5
  store i64 %221, i64* %PC
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %219, i64* %222, align 8, !tbaa !2428
  br label %block_402ede

block_402d50:                                     ; preds = %block_402eef, %block_402d30
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_402d30 ], [ %MEMORY.0, %block_402eef ]
  %223 = load i64, i64* %RBP
  %224 = sub i64 %223, 24
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 4
  store i64 %226, i64* %PC
  %227 = inttoptr i64 %224 to i64*
  %228 = load i64, i64* %227
  store i64 %228, i64* %RAX, align 8, !tbaa !2428
  %229 = load i64, i64* %RAX
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 32
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i64*
  %235 = load i64, i64* %234
  %236 = sub i64 %229, %235
  %237 = icmp ugt i64 %235, %229
  %238 = zext i1 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %238, i8* %239, align 1, !tbaa !2432
  %240 = trunc i64 %236 to i32
  %241 = and i32 %240, 255
  %242 = call i32 @llvm.ctpop.i32(i32 %241) #16
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %245, i8* %246, align 1, !tbaa !2446
  %247 = xor i64 %235, %229
  %248 = xor i64 %247, %236
  %249 = lshr i64 %248, 4
  %250 = trunc i64 %249 to i8
  %251 = and i8 %250, 1
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %251, i8* %252, align 1, !tbaa !2447
  %253 = icmp eq i64 %236, 0
  %254 = zext i1 %253 to i8
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %254, i8* %255, align 1, !tbaa !2448
  %256 = lshr i64 %236, 63
  %257 = trunc i64 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %257, i8* %258, align 1, !tbaa !2449
  %259 = lshr i64 %229, 63
  %260 = lshr i64 %235, 63
  %261 = xor i64 %260, %259
  %262 = xor i64 %256, %259
  %263 = add nuw nsw i64 %262, %261
  %264 = icmp eq i64 %263, 2
  %265 = zext i1 %264 to i8
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %265, i8* %266, align 1, !tbaa !2450
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 412
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 6
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 6
  store i64 %272, i64* %PC
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %274 = load i8, i8* %273, align 1, !tbaa !2448
  store i8 %274, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %276 = icmp ne i8 %274, 0
  %277 = select i1 %276, i64 %268, i64 %270
  store i64 %277, i64* %275, align 8, !tbaa !2428
  %278 = load i8, i8* %BRANCH_TAKEN
  %279 = icmp eq i8 %278, 1
  %280 = load i64, i64* %RBP
  %281 = sub i64 %280, 24
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 4
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %281 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  br i1 %279, label %block_402ef4, label %block_402d5e

block_402e42:                                     ; preds = %block_402e34
  %286 = sub i64 %561, 8
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %286 to i64*
  %290 = load i64, i64* %289
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = load i64, i64* %RAX
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 3
  store i64 %293, i64* %PC
  %294 = inttoptr i64 %291 to i64*
  %295 = load i64, i64* %294
  store i64 %295, i64* %RAX, align 8, !tbaa !2428
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 32
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 4
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RCX, align 8, !tbaa !2428
  %302 = load i64, i64* %RAX
  %303 = load i64, i64* %RCX
  %304 = add i64 %303, 80
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i64*
  %308 = load i64, i64* %307
  %309 = sub i64 %302, %308
  %310 = icmp ugt i64 %308, %302
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %311, i8* %312, align 1, !tbaa !2432
  %313 = trunc i64 %309 to i32
  %314 = and i32 %313, 255
  %315 = call i32 @llvm.ctpop.i32(i32 %314) #16
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %318, i8* %319, align 1, !tbaa !2446
  %320 = xor i64 %308, %302
  %321 = xor i64 %320, %309
  %322 = lshr i64 %321, 4
  %323 = trunc i64 %322 to i8
  %324 = and i8 %323, 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %324, i8* %325, align 1, !tbaa !2447
  %326 = icmp eq i64 %309, 0
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %327, i8* %328, align 1, !tbaa !2448
  %329 = lshr i64 %309, 63
  %330 = trunc i64 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %330, i8* %331, align 1, !tbaa !2449
  %332 = lshr i64 %302, 63
  %333 = lshr i64 %308, 63
  %334 = xor i64 %333, %332
  %335 = xor i64 %329, %332
  %336 = add nuw nsw i64 %335, %334
  %337 = icmp eq i64 %336, 2
  %338 = zext i1 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %338, i8* %339, align 1, !tbaa !2450
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 40
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 6
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 6
  store i64 %345, i64* %PC
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %347 = load i8, i8* %346, align 1, !tbaa !2449
  %348 = icmp ne i8 %347, 0
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %350 = load i8, i8* %349, align 1, !tbaa !2450
  %351 = icmp ne i8 %350, 0
  %352 = xor i1 %348, %351
  %353 = zext i1 %352 to i8
  store i8 %353, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %355 = select i1 %352, i64 %341, i64 %343
  store i64 %355, i64* %354, align 8, !tbaa !2428
  %356 = load i8, i8* %BRANCH_TAKEN
  %357 = icmp eq i8 %356, 1
  br i1 %357, label %block_402e79, label %block_402e57

block_402dbe:                                     ; preds = %block_402d74
  %358 = sub i64 %910, 24
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 4
  store i64 %360, i64* %PC
  %361 = inttoptr i64 %358 to i64*
  %362 = load i64, i64* %361
  store i64 %362, i64* %RAX, align 8, !tbaa !2428
  %363 = load i64, i64* %RAX
  %364 = add i64 %363, 24
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 4
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to i64*
  %368 = load i64, i64* %367
  store i64 %368, i64* %RAX, align 8, !tbaa !2428
  %369 = load i64, i64* %RAX
  %370 = add i64 %369, 24
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 5
  store i64 %372, i64* %PC
  %373 = inttoptr i64 %370 to i64*
  %374 = load i64, i64* %373
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %375, align 1, !tbaa !2432
  %376 = trunc i64 %374 to i32
  %377 = and i32 %376, 255
  %378 = call i32 @llvm.ctpop.i32(i32 %377) #16
  %379 = trunc i32 %378 to i8
  %380 = and i8 %379, 1
  %381 = xor i8 %380, 1
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %381, i8* %382, align 1, !tbaa !2446
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %383, align 1, !tbaa !2447
  %384 = icmp eq i64 %374, 0
  %385 = zext i1 %384 to i8
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %385, i8* %386, align 1, !tbaa !2448
  %387 = lshr i64 %374, 63
  %388 = trunc i64 %387 to i8
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %388, i8* %389, align 1, !tbaa !2449
  %390 = lshr i64 %374, 63
  %391 = xor i64 %387, %390
  %392 = add nuw nsw i64 %391, %390
  %393 = icmp eq i64 %392, 2
  %394 = zext i1 %393 to i8
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %394, i8* %395, align 1, !tbaa !2450
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 83
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 6
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 6
  store i64 %401, i64* %PC
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %403 = load i8, i8* %402, align 1, !tbaa !2448
  store i8 %403, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %405 = icmp ne i8 %403, 0
  %406 = select i1 %405, i64 %397, i64 %399
  store i64 %406, i64* %404, align 8, !tbaa !2428
  %407 = load i8, i8* %BRANCH_TAKEN
  %408 = icmp eq i8 %407, 1
  br i1 %408, label %block_402e1e, label %block_402dd1

block_402db9:                                     ; preds = %block_402d82, %block_402d97
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_402d82 ], [ %MEMORY.2, %block_402d97 ]
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 106
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 5
  store i64 %412, i64* %PC
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %410, i64* %413, align 8, !tbaa !2428
  br label %block_402e23

block_402ef4:                                     ; preds = %block_402d50
  %414 = load i64, i64* %RBP
  %415 = sub i64 %414, 40
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 4
  store i64 %417, i64* %PC
  %418 = inttoptr i64 %415 to i64*
  %419 = load i64, i64* %418
  store i64 %419, i64* %RCX, align 8, !tbaa !2428
  %420 = load i64, i64* %RCX
  %421 = load i64, i64* %RAX
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 3
  store i64 %423, i64* %PC
  %424 = inttoptr i64 %420 to i64*
  store i64 %421, i64* %424
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 48
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i64*
  %430 = load i64, i64* %429
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 1
  store i64 %432, i64* %PC
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %434 = load i64, i64* %433, align 8, !tbaa !2428
  %435 = add i64 %434, 8
  %436 = inttoptr i64 %434 to i64*
  %437 = load i64, i64* %436
  store i64 %437, i64* %RBP, align 8, !tbaa !2428
  store i64 %435, i64* %433, align 8, !tbaa !2428
  %438 = load i64, i64* %PC
  %439 = add i64 %438, 1
  store i64 %439, i64* %PC
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %442 = load i64, i64* %441, align 8, !tbaa !2428
  %443 = inttoptr i64 %442 to i64*
  %444 = load i64, i64* %443
  store i64 %444, i64* %440, align 8, !tbaa !2428
  %445 = add i64 %442, 8
  store i64 %445, i64* %441, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_402d5e:                                     ; preds = %block_402d50
  %446 = load i64, i64* %RAX
  %447 = add i64 %446, 88
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RBP
  %453 = sub i64 %452, 32
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 4
  store i64 %455, i64* %PC
  %456 = inttoptr i64 %453 to i64*
  %457 = load i64, i64* %456
  store i64 %457, i64* %RCX, align 8, !tbaa !2428
  %458 = load i64, i64* %RAX
  %459 = load i64, i64* %RCX
  %460 = add i64 %459, 88
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 4
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %460 to i64*
  %464 = load i64, i64* %463
  %465 = sub i64 %458, %464
  %466 = icmp ugt i64 %464, %458
  %467 = zext i1 %466 to i8
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %467, i8* %468, align 1, !tbaa !2432
  %469 = trunc i64 %465 to i32
  %470 = and i32 %469, 255
  %471 = call i32 @llvm.ctpop.i32(i32 %470) #16
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  %474 = xor i8 %473, 1
  %475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %474, i8* %475, align 1, !tbaa !2446
  %476 = xor i64 %464, %458
  %477 = xor i64 %476, %465
  %478 = lshr i64 %477, 4
  %479 = trunc i64 %478 to i8
  %480 = and i8 %479, 1
  %481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %480, i8* %481, align 1, !tbaa !2447
  %482 = icmp eq i64 %465, 0
  %483 = zext i1 %482 to i8
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %483, i8* %484, align 1, !tbaa !2448
  %485 = lshr i64 %465, 63
  %486 = trunc i64 %485 to i8
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %486, i8* %487, align 1, !tbaa !2449
  %488 = lshr i64 %458, 63
  %489 = lshr i64 %464, 63
  %490 = xor i64 %489, %488
  %491 = xor i64 %485, %488
  %492 = add nuw nsw i64 %491, %490
  %493 = icmp eq i64 %492, 2
  %494 = zext i1 %493 to i8
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %494, i8* %495, align 1, !tbaa !2450
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 198
  %498 = load i64, i64* %PC
  %499 = add i64 %498, 6
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 6
  store i64 %501, i64* %PC
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %503 = load i8, i8* %502, align 1, !tbaa !2449
  %504 = icmp ne i8 %503, 0
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %506 = load i8, i8* %505, align 1, !tbaa !2450
  %507 = icmp ne i8 %506, 0
  %508 = xor i1 %504, %507
  %509 = xor i1 %508, true
  %510 = zext i1 %509 to i8
  store i8 %510, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %512 = select i1 %508, i64 %499, i64 %497
  store i64 %512, i64* %511, align 8, !tbaa !2428
  %513 = load i8, i8* %BRANCH_TAKEN
  %514 = icmp eq i8 %513, 1
  %515 = load i64, i64* %RBP
  br i1 %514, label %block_402e34, label %block_402d74

block_402e34:                                     ; preds = %block_402d5e
  %516 = sub i64 %515, 32
  %517 = load i64, i64* %PC
  %518 = add i64 %517, 4
  store i64 %518, i64* %PC
  %519 = inttoptr i64 %516 to i64*
  %520 = load i64, i64* %519
  store i64 %520, i64* %RAX, align 8, !tbaa !2428
  %521 = load i64, i64* %RAX
  %522 = add i64 %521, 8
  %523 = load i64, i64* %PC
  %524 = add i64 %523, 4
  store i64 %524, i64* %PC
  %525 = inttoptr i64 %522 to i32*
  %526 = load i32, i32* %525
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %527, align 1, !tbaa !2432
  %528 = and i32 %526, 255
  %529 = call i32 @llvm.ctpop.i32(i32 %528) #16
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  %532 = xor i8 %531, 1
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %532, i8* %533, align 1, !tbaa !2446
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %534, align 1, !tbaa !2447
  %535 = icmp eq i32 %526, 0
  %536 = zext i1 %535 to i8
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %536, i8* %537, align 1, !tbaa !2448
  %538 = lshr i32 %526, 31
  %539 = trunc i32 %538 to i8
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %539, i8* %540, align 1, !tbaa !2449
  %541 = lshr i32 %526, 31
  %542 = xor i32 %538, %541
  %543 = add nuw nsw i32 %542, %541
  %544 = icmp eq i32 %543, 2
  %545 = zext i1 %544 to i8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %545, i8* %546, align 1, !tbaa !2450
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 66
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 6
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 6
  store i64 %552, i64* %PC
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %554 = load i8, i8* %553, align 1, !tbaa !2448
  %555 = icmp eq i8 %554, 0
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %558 = select i1 %555, i64 %548, i64 %550
  store i64 %558, i64* %557, align 8, !tbaa !2428
  %559 = load i8, i8* %BRANCH_TAKEN
  %560 = icmp eq i8 %559, 1
  %561 = load i64, i64* %RBP
  br i1 %560, label %block_402e7e, label %block_402e42

block_402ee3:                                     ; preds = %block_402ede, %block_402e79
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.9, %block_402ede ], [ %MEMORY.8, %block_402e79 ]
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 32
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 4
  store i64 %565, i64* %PC
  %566 = inttoptr i64 %563 to i64*
  %567 = load i64, i64* %566
  store i64 %567, i64* %RAX, align 8, !tbaa !2428
  %568 = load i64, i64* %RAX
  %569 = add i64 %568, 24
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 4
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to i64*
  %573 = load i64, i64* %572
  store i64 %573, i64* %RAX, align 8, !tbaa !2428
  %574 = load i64, i64* %RBP
  %575 = sub i64 %574, 32
  %576 = load i64, i64* %RAX
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 4
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %575 to i64*
  store i64 %576, i64* %579
  br label %block_402eef

block_402e23:                                     ; preds = %block_402e1e, %block_402db9
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.6, %block_402e1e ], [ %MEMORY.3, %block_402db9 ]
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 24
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 4
  store i64 %583, i64* %PC
  %584 = inttoptr i64 %581 to i64*
  %585 = load i64, i64* %584
  store i64 %585, i64* %RAX, align 8, !tbaa !2428
  %586 = load i64, i64* %RAX
  %587 = add i64 %586, 24
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 4
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i64*
  %591 = load i64, i64* %590
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = load i64, i64* %RBP
  %593 = sub i64 %592, 24
  %594 = load i64, i64* %RAX
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 4
  store i64 %596, i64* %PC
  %597 = inttoptr i64 %593 to i64*
  store i64 %594, i64* %597
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 192
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 5
  store i64 %601, i64* %PC
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %599, i64* %602, align 8, !tbaa !2428
  br label %block_402eef

block_402eb0:                                     ; preds = %block_402e91
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 5
  store i64 %604, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %605 = load i32, i32* %EAX
  %606 = zext i32 %605 to i64
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 2
  store i64 %608, i64* %PC
  %609 = and i64 %606, 4294967295
  store i64 %609, i64* %RCX, align 8, !tbaa !2428
  %610 = load i64, i64* %RBP
  %611 = sub i64 %610, 32
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 4
  store i64 %613, i64* %PC
  %614 = inttoptr i64 %611 to i64*
  %615 = load i64, i64* %614
  store i64 %615, i64* %RDX, align 8, !tbaa !2428
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 48
  %618 = load i64, i64* %RDX
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 4
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %617 to i64*
  store i64 %618, i64* %621
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 32
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 4
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i64*
  %627 = load i64, i64* %626
  store i64 %627, i64* %RDX, align 8, !tbaa !2428
  %628 = load i64, i64* %RCX
  %629 = load i64, i64* %RDX
  %630 = add i64 %629, 80
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 4
  store i64 %632, i64* %PC
  %633 = inttoptr i64 %630 to i64*
  %634 = load i64, i64* %633
  %635 = sub i64 %628, %634
  store i64 %635, i64* %RCX, align 8, !tbaa !2428
  %636 = icmp ugt i64 %634, %628
  %637 = zext i1 %636 to i8
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %637, i8* %638, align 1, !tbaa !2432
  %639 = trunc i64 %635 to i32
  %640 = and i32 %639, 255
  %641 = call i32 @llvm.ctpop.i32(i32 %640) #16
  %642 = trunc i32 %641 to i8
  %643 = and i8 %642, 1
  %644 = xor i8 %643, 1
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %644, i8* %645, align 1, !tbaa !2446
  %646 = xor i64 %634, %628
  %647 = xor i64 %646, %635
  %648 = lshr i64 %647, 4
  %649 = trunc i64 %648 to i8
  %650 = and i8 %649, 1
  %651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %650, i8* %651, align 1, !tbaa !2447
  %652 = icmp eq i64 %635, 0
  %653 = zext i1 %652 to i8
  %654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %653, i8* %654, align 1, !tbaa !2448
  %655 = lshr i64 %635, 63
  %656 = trunc i64 %655 to i8
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %656, i8* %657, align 1, !tbaa !2449
  %658 = lshr i64 %628, 63
  %659 = lshr i64 %634, 63
  %660 = xor i64 %659, %658
  %661 = xor i64 %655, %658
  %662 = add nuw nsw i64 %661, %660
  %663 = icmp eq i64 %662, 2
  %664 = zext i1 %663 to i8
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %664, i8* %665, align 1, !tbaa !2450
  %666 = load i64, i64* %RBP
  %667 = sub i64 %666, 8
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 4
  store i64 %669, i64* %PC
  %670 = inttoptr i64 %667 to i64*
  %671 = load i64, i64* %670
  store i64 %671, i64* %RDX, align 8, !tbaa !2428
  %672 = load i64, i64* %RDX
  %673 = load i64, i64* %RCX
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 3
  store i64 %675, i64* %PC
  %676 = inttoptr i64 %672 to i64*
  store i64 %673, i64* %676
  %677 = load i64, i64* %RBP
  %678 = sub i64 %677, 16
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 4
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %678 to i64*
  %682 = load i64, i64* %681
  store i64 %682, i64* %RCX, align 8, !tbaa !2428
  %683 = load i64, i64* %RCX
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 7
  store i64 %685, i64* %PC
  %686 = inttoptr i64 %683 to i64*
  store i64 1, i64* %686
  br label %block_402ed9

block_402e1e:                                     ; preds = %block_402e19, %block_402dbe
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.2, %block_402dbe ], [ %MEMORY.7, %block_402e19 ]
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 5
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 5
  store i64 %690, i64* %PC
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %688, i64* %691, align 8, !tbaa !2428
  br label %block_402e23

block_402e19:                                     ; preds = %block_402dd1, %block_402df0
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.2, %block_402dd1 ], [ %MEMORY.2, %block_402df0 ]
  %692 = load i64, i64* %PC
  %693 = add i64 %692, 5
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 5
  store i64 %695, i64* %PC
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %693, i64* %696, align 8, !tbaa !2428
  br label %block_402e1e

block_402dd1:                                     ; preds = %block_402dbe
  %697 = load i64, i64* %PC
  %698 = add i64 %697, 5
  store i64 %698, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %699 = load i32, i32* %EAX
  %700 = zext i32 %699 to i64
  %701 = load i64, i64* %PC
  %702 = add i64 %701, 2
  store i64 %702, i64* %PC
  %703 = and i64 %700, 4294967295
  store i64 %703, i64* %RCX, align 8, !tbaa !2428
  %704 = load i64, i64* %RBP
  %705 = sub i64 %704, 8
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 4
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %705 to i64*
  %709 = load i64, i64* %708
  store i64 %709, i64* %RDX, align 8, !tbaa !2428
  %710 = load i64, i64* %RDX
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 3
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RDX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 24
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 4
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i64*
  %720 = load i64, i64* %719
  store i64 %720, i64* %RSI, align 8, !tbaa !2428
  %721 = load i64, i64* %RCX
  %722 = load i64, i64* %RSI
  %723 = add i64 %722, 80
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 4
  store i64 %725, i64* %PC
  %726 = inttoptr i64 %723 to i64*
  %727 = load i64, i64* %726
  %728 = sub i64 %721, %727
  store i64 %728, i64* %RCX, align 8, !tbaa !2428
  %729 = icmp ugt i64 %727, %721
  %730 = zext i1 %729 to i8
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %730, i8* %731, align 1, !tbaa !2432
  %732 = trunc i64 %728 to i32
  %733 = and i32 %732, 255
  %734 = call i32 @llvm.ctpop.i32(i32 %733) #16
  %735 = trunc i32 %734 to i8
  %736 = and i8 %735, 1
  %737 = xor i8 %736, 1
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %737, i8* %738, align 1, !tbaa !2446
  %739 = xor i64 %727, %721
  %740 = xor i64 %739, %728
  %741 = lshr i64 %740, 4
  %742 = trunc i64 %741 to i8
  %743 = and i8 %742, 1
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %743, i8* %744, align 1, !tbaa !2447
  %745 = icmp eq i64 %728, 0
  %746 = zext i1 %745 to i8
  %747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %746, i8* %747, align 1, !tbaa !2448
  %748 = lshr i64 %728, 63
  %749 = trunc i64 %748 to i8
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %749, i8* %750, align 1, !tbaa !2449
  %751 = lshr i64 %721, 63
  %752 = lshr i64 %727, 63
  %753 = xor i64 %752, %751
  %754 = xor i64 %748, %751
  %755 = add nuw nsw i64 %754, %753
  %756 = icmp eq i64 %755, 2
  %757 = zext i1 %756 to i8
  %758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %757, i8* %758, align 1, !tbaa !2450
  %759 = load i64, i64* %RDX
  %760 = load i64, i64* %RCX
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 3
  store i64 %762, i64* %PC
  %763 = sub i64 %759, %760
  %764 = icmp ult i64 %759, %760
  %765 = zext i1 %764 to i8
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %765, i8* %766, align 1, !tbaa !2432
  %767 = trunc i64 %763 to i32
  %768 = and i32 %767, 255
  %769 = call i32 @llvm.ctpop.i32(i32 %768) #16
  %770 = trunc i32 %769 to i8
  %771 = and i8 %770, 1
  %772 = xor i8 %771, 1
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %772, i8* %773, align 1, !tbaa !2446
  %774 = xor i64 %760, %759
  %775 = xor i64 %774, %763
  %776 = lshr i64 %775, 4
  %777 = trunc i64 %776 to i8
  %778 = and i8 %777, 1
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %778, i8* %779, align 1, !tbaa !2447
  %780 = icmp eq i64 %763, 0
  %781 = zext i1 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %781, i8* %782, align 1, !tbaa !2448
  %783 = lshr i64 %763, 63
  %784 = trunc i64 %783 to i8
  %785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %784, i8* %785, align 1, !tbaa !2449
  %786 = lshr i64 %759, 63
  %787 = lshr i64 %760, 63
  %788 = xor i64 %787, %786
  %789 = xor i64 %783, %786
  %790 = add nuw nsw i64 %789, %788
  %791 = icmp eq i64 %790, 2
  %792 = zext i1 %791 to i8
  %793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %792, i8* %793, align 1, !tbaa !2450
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 47
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 6
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 6
  store i64 %799, i64* %PC
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %801 = load i8, i8* %800, align 1, !tbaa !2448
  %802 = icmp ne i8 %801, 0
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %804 = load i8, i8* %803, align 1, !tbaa !2449
  %805 = icmp ne i8 %804, 0
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %807 = load i8, i8* %806, align 1, !tbaa !2450
  %808 = icmp ne i8 %807, 0
  %809 = xor i1 %805, %808
  %810 = or i1 %802, %809
  %811 = zext i1 %810 to i8
  store i8 %811, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %813 = select i1 %810, i64 %795, i64 %797
  store i64 %813, i64* %812, align 8, !tbaa !2428
  %814 = load i8, i8* %BRANCH_TAKEN
  %815 = icmp eq i8 %814, 1
  br i1 %815, label %block_402e19, label %block_402df0

block_402d97:                                     ; preds = %block_402d82
  %816 = load i64, i64* %RBP
  %817 = sub i64 %816, 24
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 4
  store i64 %819, i64* %PC
  %820 = inttoptr i64 %817 to i64*
  %821 = load i64, i64* %820
  store i64 %821, i64* %RAX, align 8, !tbaa !2428
  %822 = load i64, i64* %RBP
  %823 = sub i64 %822, 48
  %824 = load i64, i64* %RAX
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 4
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %823 to i64*
  store i64 %824, i64* %827
  %828 = load i64, i64* %RBP
  %829 = sub i64 %828, 24
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 4
  store i64 %831, i64* %PC
  %832 = inttoptr i64 %829 to i64*
  %833 = load i64, i64* %832
  store i64 %833, i64* %RAX, align 8, !tbaa !2428
  %834 = load i64, i64* %RAX
  %835 = add i64 %834, 80
  %836 = load i64, i64* %PC
  %837 = add i64 %836, 4
  store i64 %837, i64* %PC
  %838 = inttoptr i64 %835 to i64*
  %839 = load i64, i64* %838
  store i64 %839, i64* %RAX, align 8, !tbaa !2428
  %840 = load i64, i64* %RBP
  %841 = sub i64 %840, 8
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 4
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %841 to i64*
  %845 = load i64, i64* %844
  store i64 %845, i64* %RCX, align 8, !tbaa !2428
  %846 = load i64, i64* %RCX
  %847 = load i64, i64* %RAX
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 3
  store i64 %849, i64* %PC
  %850 = inttoptr i64 %846 to i64*
  store i64 %847, i64* %850
  %851 = load i64, i64* %RBP
  %852 = sub i64 %851, 16
  %853 = load i64, i64* %PC
  %854 = add i64 %853, 4
  store i64 %854, i64* %PC
  %855 = inttoptr i64 %852 to i64*
  %856 = load i64, i64* %855
  store i64 %856, i64* %RAX, align 8, !tbaa !2428
  %857 = load i64, i64* %RAX
  %858 = load i64, i64* %PC
  %859 = add i64 %858, 7
  store i64 %859, i64* %PC
  %860 = inttoptr i64 %857 to i64*
  store i64 0, i64* %860
  br label %block_402db9

block_402e79:                                     ; preds = %block_402e57, %block_402e42
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.2, %block_402e42 ], [ %MEMORY.2, %block_402e57 ]
  %861 = load i64, i64* %PC
  %862 = add i64 %861, 106
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 5
  store i64 %864, i64* %PC
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %862, i64* %865, align 8, !tbaa !2428
  br label %block_402ee3

block_402d74:                                     ; preds = %block_402d5e
  %866 = sub i64 %515, 24
  %867 = load i64, i64* %PC
  %868 = add i64 %867, 4
  store i64 %868, i64* %PC
  %869 = inttoptr i64 %866 to i64*
  %870 = load i64, i64* %869
  store i64 %870, i64* %RAX, align 8, !tbaa !2428
  %871 = load i64, i64* %RAX
  %872 = add i64 %871, 8
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 4
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %872 to i32*
  %876 = load i32, i32* %875
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %877, align 1, !tbaa !2432
  %878 = and i32 %876, 255
  %879 = call i32 @llvm.ctpop.i32(i32 %878) #16
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %882, i8* %883, align 1, !tbaa !2446
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %884, align 1, !tbaa !2447
  %885 = icmp eq i32 %876, 0
  %886 = zext i1 %885 to i8
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %886, i8* %887, align 1, !tbaa !2448
  %888 = lshr i32 %876, 31
  %889 = trunc i32 %888 to i8
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %889, i8* %890, align 1, !tbaa !2449
  %891 = lshr i32 %876, 31
  %892 = xor i32 %888, %891
  %893 = add nuw nsw i32 %892, %891
  %894 = icmp eq i32 %893, 2
  %895 = zext i1 %894 to i8
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %895, i8* %896, align 1, !tbaa !2450
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 66
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 6
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 6
  store i64 %902, i64* %PC
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %904 = load i8, i8* %903, align 1, !tbaa !2448
  store i8 %904, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %906 = icmp ne i8 %904, 0
  %907 = select i1 %906, i64 %898, i64 %900
  store i64 %907, i64* %905, align 8, !tbaa !2428
  %908 = load i8, i8* %BRANCH_TAKEN
  %909 = icmp eq i8 %908, 1
  %910 = load i64, i64* %RBP
  br i1 %909, label %block_402dbe, label %block_402d82

block_402e57:                                     ; preds = %block_402e42
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 32
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 4
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i64*
  %916 = load i64, i64* %915
  store i64 %916, i64* %RAX, align 8, !tbaa !2428
  %917 = load i64, i64* %RBP
  %918 = sub i64 %917, 48
  %919 = load i64, i64* %RAX
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 4
  store i64 %921, i64* %PC
  %922 = inttoptr i64 %918 to i64*
  store i64 %919, i64* %922
  %923 = load i64, i64* %RBP
  %924 = sub i64 %923, 32
  %925 = load i64, i64* %PC
  %926 = add i64 %925, 4
  store i64 %926, i64* %PC
  %927 = inttoptr i64 %924 to i64*
  %928 = load i64, i64* %927
  store i64 %928, i64* %RAX, align 8, !tbaa !2428
  %929 = load i64, i64* %RAX
  %930 = add i64 %929, 80
  %931 = load i64, i64* %PC
  %932 = add i64 %931, 4
  store i64 %932, i64* %PC
  %933 = inttoptr i64 %930 to i64*
  %934 = load i64, i64* %933
  store i64 %934, i64* %RAX, align 8, !tbaa !2428
  %935 = load i64, i64* %RBP
  %936 = sub i64 %935, 8
  %937 = load i64, i64* %PC
  %938 = add i64 %937, 4
  store i64 %938, i64* %PC
  %939 = inttoptr i64 %936 to i64*
  %940 = load i64, i64* %939
  store i64 %940, i64* %RCX, align 8, !tbaa !2428
  %941 = load i64, i64* %RCX
  %942 = load i64, i64* %RAX
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 3
  store i64 %944, i64* %PC
  %945 = inttoptr i64 %941 to i64*
  store i64 %942, i64* %945
  %946 = load i64, i64* %RBP
  %947 = sub i64 %946, 16
  %948 = load i64, i64* %PC
  %949 = add i64 %948, 4
  store i64 %949, i64* %PC
  %950 = inttoptr i64 %947 to i64*
  %951 = load i64, i64* %950
  store i64 %951, i64* %RAX, align 8, !tbaa !2428
  %952 = load i64, i64* %RAX
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 7
  store i64 %954, i64* %PC
  %955 = inttoptr i64 %952 to i64*
  store i64 1, i64* %955
  br label %block_402e79

block_402e91:                                     ; preds = %block_402e7e
  %956 = load i64, i64* %PC
  %957 = add i64 %956, 5
  store i64 %957, i64* %PC
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %958 = load i32, i32* %EAX
  %959 = zext i32 %958 to i64
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 2
  store i64 %961, i64* %PC
  %962 = and i64 %959, 4294967295
  store i64 %962, i64* %RCX, align 8, !tbaa !2428
  %963 = load i64, i64* %RBP
  %964 = sub i64 %963, 8
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 4
  store i64 %966, i64* %PC
  %967 = inttoptr i64 %964 to i64*
  %968 = load i64, i64* %967
  store i64 %968, i64* %RDX, align 8, !tbaa !2428
  %969 = load i64, i64* %RDX
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 3
  store i64 %971, i64* %PC
  %972 = inttoptr i64 %969 to i64*
  %973 = load i64, i64* %972
  store i64 %973, i64* %RDX, align 8, !tbaa !2428
  %974 = load i64, i64* %RBP
  %975 = sub i64 %974, 32
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 4
  store i64 %977, i64* %PC
  %978 = inttoptr i64 %975 to i64*
  %979 = load i64, i64* %978
  store i64 %979, i64* %RSI, align 8, !tbaa !2428
  %980 = load i64, i64* %RCX
  %981 = load i64, i64* %RSI
  %982 = add i64 %981, 80
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 4
  store i64 %984, i64* %PC
  %985 = inttoptr i64 %982 to i64*
  %986 = load i64, i64* %985
  %987 = sub i64 %980, %986
  store i64 %987, i64* %RCX, align 8, !tbaa !2428
  %988 = icmp ugt i64 %986, %980
  %989 = zext i1 %988 to i8
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %989, i8* %990, align 1, !tbaa !2432
  %991 = trunc i64 %987 to i32
  %992 = and i32 %991, 255
  %993 = call i32 @llvm.ctpop.i32(i32 %992) #16
  %994 = trunc i32 %993 to i8
  %995 = and i8 %994, 1
  %996 = xor i8 %995, 1
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %996, i8* %997, align 1, !tbaa !2446
  %998 = xor i64 %986, %980
  %999 = xor i64 %998, %987
  %1000 = lshr i64 %999, 4
  %1001 = trunc i64 %1000 to i8
  %1002 = and i8 %1001, 1
  %1003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1002, i8* %1003, align 1, !tbaa !2447
  %1004 = icmp eq i64 %987, 0
  %1005 = zext i1 %1004 to i8
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1005, i8* %1006, align 1, !tbaa !2448
  %1007 = lshr i64 %987, 63
  %1008 = trunc i64 %1007 to i8
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1008, i8* %1009, align 1, !tbaa !2449
  %1010 = lshr i64 %980, 63
  %1011 = lshr i64 %986, 63
  %1012 = xor i64 %1011, %1010
  %1013 = xor i64 %1007, %1010
  %1014 = add nuw nsw i64 %1013, %1012
  %1015 = icmp eq i64 %1014, 2
  %1016 = zext i1 %1015 to i8
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1016, i8* %1017, align 1, !tbaa !2450
  %1018 = load i64, i64* %RDX
  %1019 = load i64, i64* %RCX
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 3
  store i64 %1021, i64* %PC
  %1022 = sub i64 %1018, %1019
  %1023 = icmp ult i64 %1018, %1019
  %1024 = zext i1 %1023 to i8
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1024, i8* %1025, align 1, !tbaa !2432
  %1026 = trunc i64 %1022 to i32
  %1027 = and i32 %1026, 255
  %1028 = call i32 @llvm.ctpop.i32(i32 %1027) #16
  %1029 = trunc i32 %1028 to i8
  %1030 = and i8 %1029, 1
  %1031 = xor i8 %1030, 1
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1031, i8* %1032, align 1, !tbaa !2446
  %1033 = xor i64 %1019, %1018
  %1034 = xor i64 %1033, %1022
  %1035 = lshr i64 %1034, 4
  %1036 = trunc i64 %1035 to i8
  %1037 = and i8 %1036, 1
  %1038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1037, i8* %1038, align 1, !tbaa !2447
  %1039 = icmp eq i64 %1022, 0
  %1040 = zext i1 %1039 to i8
  %1041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1040, i8* %1041, align 1, !tbaa !2448
  %1042 = lshr i64 %1022, 63
  %1043 = trunc i64 %1042 to i8
  %1044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1043, i8* %1044, align 1, !tbaa !2449
  %1045 = lshr i64 %1018, 63
  %1046 = lshr i64 %1019, 63
  %1047 = xor i64 %1046, %1045
  %1048 = xor i64 %1042, %1045
  %1049 = add nuw nsw i64 %1048, %1047
  %1050 = icmp eq i64 %1049, 2
  %1051 = zext i1 %1050 to i8
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1051, i8* %1052, align 1, !tbaa !2450
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 47
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 6
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 6
  store i64 %1058, i64* %PC
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1060 = load i8, i8* %1059, align 1, !tbaa !2449
  %1061 = icmp ne i8 %1060, 0
  %1062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1063 = load i8, i8* %1062, align 1, !tbaa !2450
  %1064 = icmp ne i8 %1063, 0
  %1065 = xor i1 %1061, %1064
  %1066 = zext i1 %1065 to i8
  store i8 %1066, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1068 = select i1 %1065, i64 %1054, i64 %1056
  store i64 %1068, i64* %1067, align 8, !tbaa !2428
  %1069 = load i8, i8* %BRANCH_TAKEN
  %1070 = icmp eq i8 %1069, 1
  br i1 %1070, label %block_402ed9, label %block_402eb0

block_402ede:                                     ; preds = %block_402ed9, %block_402e7e
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.2, %block_402e7e ], [ %MEMORY.1, %block_402ed9 ]
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 5
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 5
  store i64 %1074, i64* %PC
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1072, i64* %1075, align 8, !tbaa !2428
  br label %block_402ee3

block_402d82:                                     ; preds = %block_402d74
  %1076 = sub i64 %910, 8
  %1077 = load i64, i64* %PC
  %1078 = add i64 %1077, 4
  store i64 %1078, i64* %PC
  %1079 = inttoptr i64 %1076 to i64*
  %1080 = load i64, i64* %1079
  store i64 %1080, i64* %RAX, align 8, !tbaa !2428
  %1081 = load i64, i64* %RAX
  %1082 = load i64, i64* %PC
  %1083 = add i64 %1082, 3
  store i64 %1083, i64* %PC
  %1084 = inttoptr i64 %1081 to i64*
  %1085 = load i64, i64* %1084
  store i64 %1085, i64* %RAX, align 8, !tbaa !2428
  %1086 = load i64, i64* %RBP
  %1087 = sub i64 %1086, 24
  %1088 = load i64, i64* %PC
  %1089 = add i64 %1088, 4
  store i64 %1089, i64* %PC
  %1090 = inttoptr i64 %1087 to i64*
  %1091 = load i64, i64* %1090
  store i64 %1091, i64* %RCX, align 8, !tbaa !2428
  %1092 = load i64, i64* %RAX
  %1093 = load i64, i64* %RCX
  %1094 = add i64 %1093, 80
  %1095 = load i64, i64* %PC
  %1096 = add i64 %1095, 4
  store i64 %1096, i64* %PC
  %1097 = inttoptr i64 %1094 to i64*
  %1098 = load i64, i64* %1097
  %1099 = sub i64 %1092, %1098
  %1100 = icmp ugt i64 %1098, %1092
  %1101 = zext i1 %1100 to i8
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1101, i8* %1102, align 1, !tbaa !2432
  %1103 = trunc i64 %1099 to i32
  %1104 = and i32 %1103, 255
  %1105 = call i32 @llvm.ctpop.i32(i32 %1104) #16
  %1106 = trunc i32 %1105 to i8
  %1107 = and i8 %1106, 1
  %1108 = xor i8 %1107, 1
  %1109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1108, i8* %1109, align 1, !tbaa !2446
  %1110 = xor i64 %1098, %1092
  %1111 = xor i64 %1110, %1099
  %1112 = lshr i64 %1111, 4
  %1113 = trunc i64 %1112 to i8
  %1114 = and i8 %1113, 1
  %1115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1114, i8* %1115, align 1, !tbaa !2447
  %1116 = icmp eq i64 %1099, 0
  %1117 = zext i1 %1116 to i8
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1117, i8* %1118, align 1, !tbaa !2448
  %1119 = lshr i64 %1099, 63
  %1120 = trunc i64 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1120, i8* %1121, align 1, !tbaa !2449
  %1122 = lshr i64 %1092, 63
  %1123 = lshr i64 %1098, 63
  %1124 = xor i64 %1123, %1122
  %1125 = xor i64 %1119, %1122
  %1126 = add nuw nsw i64 %1125, %1124
  %1127 = icmp eq i64 %1126, 2
  %1128 = zext i1 %1127 to i8
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1128, i8* %1129, align 1, !tbaa !2450
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 40
  %1132 = load i64, i64* %PC
  %1133 = add i64 %1132, 6
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 6
  store i64 %1135, i64* %PC
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1137 = load i8, i8* %1136, align 1, !tbaa !2448
  %1138 = icmp ne i8 %1137, 0
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1140 = load i8, i8* %1139, align 1, !tbaa !2449
  %1141 = icmp ne i8 %1140, 0
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1143 = load i8, i8* %1142, align 1, !tbaa !2450
  %1144 = icmp ne i8 %1143, 0
  %1145 = xor i1 %1141, %1144
  %1146 = or i1 %1138, %1145
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1149 = select i1 %1146, i64 %1131, i64 %1133
  store i64 %1149, i64* %1148, align 8, !tbaa !2428
  %1150 = load i8, i8* %BRANCH_TAKEN
  %1151 = icmp eq i8 %1150, 1
  br i1 %1151, label %block_402db9, label %block_402d97
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009b0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 40) to i8*)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4009d0, label %block_4009b9

block_4009d0:                                     ; preds = %block_4009b0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4009b9:                                     ; preds = %block_4009b0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400940_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 40) to i8*)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009f0_resize_prob(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 5
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RCX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 9
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RSI = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 11
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 13
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSP = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 15
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RBP = bitcast %union.anon* %30 to i64*
  %31 = load i64, i64* %RBP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 1
  store i64 %33, i64* %PC
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = add i64 %35, -8
  %37 = inttoptr i64 %36 to i64*
  store i64 %31, i64* %37
  store i64 %36, i64* %34, align 8, !tbaa !2428
  %38 = load i64, i64* %RSP
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC
  store i64 %38, i64* %RBP, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = sub i64 %41, 80
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %41, 80
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %46, i8* %47, align 1, !tbaa !2432
  %48 = trunc i64 %44 to i32
  %49 = and i32 %48, 255
  %50 = call i32 @llvm.ctpop.i32(i32 %49) #16
  %51 = trunc i32 %50 to i8
  %52 = and i8 %51, 1
  %53 = xor i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %53, i8* %54, align 1, !tbaa !2446
  %55 = xor i64 80, %41
  %56 = xor i64 %55, %44
  %57 = lshr i64 %56, 4
  %58 = trunc i64 %57 to i8
  %59 = and i8 %58, 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %59, i8* %60, align 1, !tbaa !2447
  %61 = icmp eq i64 %44, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = lshr i64 %44, 63
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = lshr i64 %41, 63
  %68 = xor i64 %64, %67
  %69 = add nuw nsw i64 %68, %67
  %70 = icmp eq i64 %69, 2
  %71 = zext i1 %70 to i8
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %71, i8* %72, align 1, !tbaa !2450
  %73 = load i64, i64* %RBP
  %74 = sub i64 %73, 16
  %75 = load i64, i64* %RDI
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC
  %78 = inttoptr i64 %74 to i64*
  store i64 %75, i64* %78
  %79 = load i64, i64* %RBP
  %80 = sub i64 %79, 16
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 4
  store i64 %82, i64* %PC
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83
  store i64 %84, i64* %RDI, align 8, !tbaa !2428
  %85 = load i64, i64* %RDI
  %86 = add i64 %85, 456
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i64*
  %90 = load i64, i64* %89
  store i64 %90, i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RBP
  %92 = sub i64 %91, 16
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = inttoptr i64 %92 to i64*
  %96 = load i64, i64* %95
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RDI
  %98 = load i64, i64* %RAX
  %99 = add i64 %98, 416
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 7
  store i64 %101, i64* %PC
  %102 = inttoptr i64 %99 to i64*
  %103 = load i64, i64* %102
  %104 = add i64 %103, %97
  store i64 %104, i64* %RDI, align 8, !tbaa !2428
  %105 = icmp ult i64 %104, %97
  %106 = icmp ult i64 %104, %103
  %107 = or i1 %105, %106
  %108 = zext i1 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %108, i8* %109, align 1, !tbaa !2432
  %110 = trunc i64 %104 to i32
  %111 = and i32 %110, 255
  %112 = call i32 @llvm.ctpop.i32(i32 %111) #16
  %113 = trunc i32 %112 to i8
  %114 = and i8 %113, 1
  %115 = xor i8 %114, 1
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %115, i8* %116, align 1, !tbaa !2446
  %117 = xor i64 %103, %97
  %118 = xor i64 %117, %104
  %119 = lshr i64 %118, 4
  %120 = trunc i64 %119 to i8
  %121 = and i8 %120, 1
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %121, i8* %122, align 1, !tbaa !2447
  %123 = icmp eq i64 %104, 0
  %124 = zext i1 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %124, i8* %125, align 1, !tbaa !2448
  %126 = lshr i64 %104, 63
  %127 = trunc i64 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %127, i8* %128, align 1, !tbaa !2449
  %129 = lshr i64 %97, 63
  %130 = lshr i64 %103, 63
  %131 = xor i64 %126, %129
  %132 = xor i64 %126, %130
  %133 = add nuw nsw i64 %131, %132
  %134 = icmp eq i64 %133, 2
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %135, i8* %136, align 1, !tbaa !2450
  %137 = load i64, i64* %RAX
  %138 = add i64 %137, 416
  %139 = load i64, i64* %RDI
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %138 to i64*
  store i64 %139, i64* %142
  %143 = load i64, i64* %RBP
  %144 = sub i64 %143, 16
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = inttoptr i64 %144 to i64*
  %148 = load i64, i64* %147
  store i64 %148, i64* %RAX, align 8, !tbaa !2428
  %149 = load i64, i64* %RAX
  %150 = add i64 %149, 456
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 7
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %150 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = load i64, i64* %RBP
  %156 = sub i64 %155, 16
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 4
  store i64 %158, i64* %PC
  %159 = inttoptr i64 %156 to i64*
  %160 = load i64, i64* %159
  store i64 %160, i64* %RDI, align 8, !tbaa !2428
  %161 = load i64, i64* %RAX
  %162 = load i64, i64* %RDI
  %163 = add i64 %162, 448
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 7
  store i64 %165, i64* %PC
  %166 = inttoptr i64 %163 to i64*
  %167 = load i64, i64* %166
  %168 = add i64 %167, %161
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = icmp ult i64 %168, %161
  %170 = icmp ult i64 %168, %167
  %171 = or i1 %169, %170
  %172 = zext i1 %171 to i8
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %172, i8* %173, align 1, !tbaa !2432
  %174 = trunc i64 %168 to i32
  %175 = and i32 %174, 255
  %176 = call i32 @llvm.ctpop.i32(i32 %175) #16
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %179, i8* %180, align 1, !tbaa !2446
  %181 = xor i64 %167, %161
  %182 = xor i64 %181, %168
  %183 = lshr i64 %182, 4
  %184 = trunc i64 %183 to i8
  %185 = and i8 %184, 1
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %185, i8* %186, align 1, !tbaa !2447
  %187 = icmp eq i64 %168, 0
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %188, i8* %189, align 1, !tbaa !2448
  %190 = lshr i64 %168, 63
  %191 = trunc i64 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %191, i8* %192, align 1, !tbaa !2449
  %193 = lshr i64 %161, 63
  %194 = lshr i64 %167, 63
  %195 = xor i64 %190, %193
  %196 = xor i64 %190, %194
  %197 = add nuw nsw i64 %195, %196
  %198 = icmp eq i64 %197, 2
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %199, i8* %200, align 1, !tbaa !2450
  %201 = load i64, i64* %RDI
  %202 = add i64 %201, 448
  %203 = load i64, i64* %RAX
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 7
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %202 to i64*
  store i64 %203, i64* %206
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 16
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 4
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i64*
  %212 = load i64, i64* %211
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = load i64, i64* %RAX
  %214 = add i64 %213, 568
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 7
  store i64 %216, i64* %PC
  %217 = inttoptr i64 %214 to i64*
  %218 = load i64, i64* %217
  store i64 %218, i64* %RAX, align 8, !tbaa !2428
  %219 = load i64, i64* %RBP
  %220 = sub i64 %219, 16
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC
  %223 = inttoptr i64 %220 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RDI, align 8, !tbaa !2428
  %225 = load i64, i64* %RDI
  %226 = add i64 %225, 416
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 7
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i64*
  %230 = load i64, i64* %229
  store i64 %230, i64* %RDI, align 8, !tbaa !2428
  %231 = load i64, i64* %RDI
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC
  %234 = shl i64 %231, 5
  %235 = icmp slt i64 %234, 0
  %236 = shl i64 %234, 1
  store i64 %236, i64* %RDI, align 8, !tbaa !2428
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %238 = zext i1 %235 to i8
  store i8 %238, i8* %237, align 1, !tbaa !2451
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %240 = trunc i64 %236 to i32
  %241 = and i32 %240, 254
  %242 = call i32 @llvm.ctpop.i32(i32 %241) #16
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  store i8 %245, i8* %239, align 1, !tbaa !2451
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %246, align 1, !tbaa !2451
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %248 = icmp eq i64 %236, 0
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %247, align 1, !tbaa !2451
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %251 = lshr i64 %236, 63
  %252 = trunc i64 %251 to i8
  store i8 %252, i8* %250, align 1, !tbaa !2451
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %253, align 1, !tbaa !2451
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 64
  %256 = load i64, i64* %RDI
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 4
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %259
  %260 = load i64, i64* %RAX
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  store i64 %260, i64* %RDI, align 8, !tbaa !2428
  %263 = load i64, i64* %RBP
  %264 = sub i64 %263, 64
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 4
  store i64 %266, i64* %PC
  %267 = inttoptr i64 %264 to i64*
  %268 = load i64, i64* %267
  store i64 %268, i64* %RSI, align 8, !tbaa !2428
  %269 = load i64, i64* %PC
  %270 = sub i64 %269, 395
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 5
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 5
  store i64 %274, i64* %PC
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %276 = load i64, i64* %275, align 8, !tbaa !2428
  %277 = add i64 %276, -8
  %278 = inttoptr i64 %277 to i64*
  store i64 %272, i64* %278
  store i64 %277, i64* %275, align 8, !tbaa !2428
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %270, i64* %279, align 8, !tbaa !2428
  %280 = load i64, i64* %PC
  %281 = call %struct.Memory* @ext_609018_realloc(%struct.State* %0, i64 %280, %struct.Memory* %2)
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 24
  %284 = load i64, i64* %RAX
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC
  %287 = inttoptr i64 %283 to i64*
  store i64 %284, i64* %287
  %288 = load i64, i64* %RBP
  %289 = sub i64 %288, 24
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 5
  store i64 %291, i64* %PC
  %292 = inttoptr i64 %289 to i64*
  %293 = load i64, i64* %292
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %294, align 1, !tbaa !2432
  %295 = trunc i64 %293 to i32
  %296 = and i32 %295, 255
  %297 = call i32 @llvm.ctpop.i32(i32 %296) #16
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %300, i8* %301, align 1, !tbaa !2446
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %302, align 1, !tbaa !2447
  %303 = icmp eq i64 %293, 0
  %304 = zext i1 %303 to i8
  %305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %304, i8* %305, align 1, !tbaa !2448
  %306 = lshr i64 %293, 63
  %307 = trunc i64 %306 to i8
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %307, i8* %308, align 1, !tbaa !2449
  %309 = lshr i64 %293, 63
  %310 = xor i64 %306, %309
  %311 = add nuw nsw i64 %310, %309
  %312 = icmp eq i64 %311, 2
  %313 = zext i1 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %313, i8* %314, align 1, !tbaa !2450
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 59
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 6
  %319 = load i64, i64* %PC
  %320 = add i64 %319, 6
  store i64 %320, i64* %PC
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %322 = load i8, i8* %321, align 1, !tbaa !2448
  %323 = icmp eq i8 %322, 0
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %326 = select i1 %323, i64 %316, i64 %318
  store i64 %326, i64* %325, align 8, !tbaa !2428
  %327 = load i8, i8* %BRANCH_TAKEN
  %328 = icmp eq i8 %327, 1
  br i1 %328, label %block_400aa4, label %block_400a6f

block_400b38:                                     ; preds = %block_400b26
  %329 = load i64, i64* %RBP
  %330 = sub i64 %329, 32
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 4
  store i64 %332, i64* %PC
  %333 = inttoptr i64 %330 to i64*
  %334 = load i64, i64* %333
  store i64 %334, i64* %RAX, align 8, !tbaa !2428
  %335 = load i64, i64* %RAX
  %336 = add i64 %335, 48
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 4
  store i64 %338, i64* %PC
  %339 = inttoptr i64 %336 to i64*
  %340 = load i64, i64* %339
  store i64 %340, i64* %RAX, align 8, !tbaa !2428
  %341 = load i64, i64* %RAX
  %342 = load i64, i64* %RBP
  %343 = sub i64 %342, 56
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 4
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %343 to i64*
  %347 = load i64, i64* %346
  %348 = add i64 %347, %341
  store i64 %348, i64* %RAX, align 8, !tbaa !2428
  %349 = icmp ult i64 %348, %341
  %350 = icmp ult i64 %348, %347
  %351 = or i1 %349, %350
  %352 = zext i1 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %352, i8* %353, align 1, !tbaa !2432
  %354 = trunc i64 %348 to i32
  %355 = and i32 %354, 255
  %356 = call i32 @llvm.ctpop.i32(i32 %355) #16
  %357 = trunc i32 %356 to i8
  %358 = and i8 %357, 1
  %359 = xor i8 %358, 1
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %359, i8* %360, align 1, !tbaa !2446
  %361 = xor i64 %347, %341
  %362 = xor i64 %361, %348
  %363 = lshr i64 %362, 4
  %364 = trunc i64 %363 to i8
  %365 = and i8 %364, 1
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %365, i8* %366, align 1, !tbaa !2447
  %367 = icmp eq i64 %348, 0
  %368 = zext i1 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %368, i8* %369, align 1, !tbaa !2448
  %370 = lshr i64 %348, 63
  %371 = trunc i64 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %371, i8* %372, align 1, !tbaa !2449
  %373 = lshr i64 %341, 63
  %374 = lshr i64 %347, 63
  %375 = xor i64 %370, %373
  %376 = xor i64 %370, %374
  %377 = add nuw nsw i64 %375, %376
  %378 = icmp eq i64 %377, 2
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %379, i8* %380, align 1, !tbaa !2450
  %381 = load i64, i64* %RBP
  %382 = sub i64 %381, 32
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 4
  store i64 %384, i64* %PC
  %385 = inttoptr i64 %382 to i64*
  %386 = load i64, i64* %385
  store i64 %386, i64* %RCX, align 8, !tbaa !2428
  %387 = load i64, i64* %RCX
  %388 = add i64 %387, 48
  %389 = load i64, i64* %RAX
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 4
  store i64 %391, i64* %PC
  %392 = inttoptr i64 %388 to i64*
  store i64 %389, i64* %392
  br label %block_400b4c

block_400a6f:                                     ; preds = %block_4009f0
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 10
  store i64 %394, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !2428
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 16
  %397 = load i64, i64* %PC
  %398 = add i64 %397, 4
  store i64 %398, i64* %PC
  %399 = inttoptr i64 %396 to i64*
  %400 = load i64, i64* %399
  store i64 %400, i64* %RSI, align 8, !tbaa !2428
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 2
  store i64 %402, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %403 = load i64, i64* %PC
  %404 = sub i64 %403, 559
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 5
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 5
  store i64 %408, i64* %PC
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %410 = load i64, i64* %409, align 8, !tbaa !2428
  %411 = add i64 %410, -8
  %412 = inttoptr i64 %411 to i64*
  store i64 %406, i64* %412
  store i64 %411, i64* %409, align 8, !tbaa !2428
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %404, i64* %413, align 8, !tbaa !2428
  %414 = load i64, i64* %PC
  %415 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %414, %struct.Memory* %281)
  %416 = load i64, i64* %PC
  %417 = add i64 %416, 8
  store i64 %417, i64* %PC
  %418 = load i64, i64* @stdout
  store i64 %418, i64* %RDI, align 8, !tbaa !2428
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 68
  %421 = load i32, i32* %EAX
  %422 = zext i32 %421 to i64
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 3
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %420 to i32*
  store i32 %421, i32* %425
  %426 = load i64, i64* %PC
  %427 = sub i64 %426, 479
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 5
  %430 = load i64, i64* %PC
  %431 = add i64 %430, 5
  store i64 %431, i64* %PC
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %433 = load i64, i64* %432, align 8, !tbaa !2428
  %434 = add i64 %433, -8
  %435 = inttoptr i64 %434 to i64*
  store i64 %429, i64* %435
  store i64 %434, i64* %432, align 8, !tbaa !2428
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %427, i64* %436, align 8, !tbaa !2428
  %437 = load i64, i64* %PC
  %438 = call %struct.Memory* @ext_609008_fflush(%struct.State* %0, i64 %437, %struct.Memory* %415)
  %439 = load i64, i64* %RBP
  %440 = sub i64 %439, 8
  %441 = load i64, i64* %PC
  %442 = add i64 %441, 8
  store i64 %442, i64* %PC
  %443 = inttoptr i64 %440 to i64*
  store i64 -1, i64* %443
  %444 = load i64, i64* %RBP
  %445 = sub i64 %444, 72
  %446 = load i32, i32* %EAX
  %447 = zext i32 %446 to i64
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %445 to i32*
  store i32 %446, i32* %450
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 203
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 5
  store i64 %454, i64* %PC
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %452, i64* %455, align 8, !tbaa !2428
  br label %block_400b6a

block_400b18:                                     ; preds = %block_400b4c, %block_400aa4
  %MEMORY.0 = phi %struct.Memory* [ %281, %block_400aa4 ], [ %MEMORY.2, %block_400b4c ]
  %456 = load i64, i64* %RBP
  %457 = sub i64 %456, 32
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 4
  store i64 %459, i64* %PC
  %460 = inttoptr i64 %457 to i64*
  %461 = load i64, i64* %460
  store i64 %461, i64* %RAX, align 8, !tbaa !2428
  %462 = load i64, i64* %RAX
  %463 = load i64, i64* %RBP
  %464 = sub i64 %463, 40
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 4
  store i64 %466, i64* %PC
  %467 = inttoptr i64 %464 to i64*
  %468 = load i64, i64* %467
  %469 = sub i64 %462, %468
  %470 = icmp ugt i64 %468, %462
  %471 = zext i1 %470 to i8
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %471, i8* %472, align 1, !tbaa !2432
  %473 = trunc i64 %469 to i32
  %474 = and i32 %473, 255
  %475 = call i32 @llvm.ctpop.i32(i32 %474) #16
  %476 = trunc i32 %475 to i8
  %477 = and i8 %476, 1
  %478 = xor i8 %477, 1
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %478, i8* %479, align 1, !tbaa !2446
  %480 = xor i64 %468, %462
  %481 = xor i64 %480, %469
  %482 = lshr i64 %481, 4
  %483 = trunc i64 %482 to i8
  %484 = and i8 %483, 1
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %484, i8* %485, align 1, !tbaa !2447
  %486 = icmp eq i64 %469, 0
  %487 = zext i1 %486 to i8
  %488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %487, i8* %488, align 1, !tbaa !2448
  %489 = lshr i64 %469, 63
  %490 = trunc i64 %489 to i8
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %490, i8* %491, align 1, !tbaa !2449
  %492 = lshr i64 %462, 63
  %493 = lshr i64 %468, 63
  %494 = xor i64 %493, %492
  %495 = xor i64 %489, %492
  %496 = add nuw nsw i64 %495, %494
  %497 = icmp eq i64 %496, 2
  %498 = zext i1 %497 to i8
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %498, i8* %499, align 1, !tbaa !2450
  %500 = load i64, i64* %PC
  %501 = add i64 %500, 66
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 6
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 6
  store i64 %505, i64* %PC
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %507 = load i8, i8* %506, align 1, !tbaa !2432
  %508 = icmp eq i8 %507, 0
  %509 = zext i1 %508 to i8
  store i8 %509, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %511 = select i1 %508, i64 %501, i64 %503
  store i64 %511, i64* %510, align 8, !tbaa !2428
  %512 = load i8, i8* %BRANCH_TAKEN
  %513 = icmp eq i8 %512, 1
  %514 = load i64, i64* %RBP
  br i1 %513, label %block_400b62, label %block_400b26

block_400b26:                                     ; preds = %block_400b18
  %515 = sub i64 %514, 32
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 4
  store i64 %517, i64* %PC
  %518 = inttoptr i64 %515 to i64*
  %519 = load i64, i64* %518
  store i64 %519, i64* %RAX, align 8, !tbaa !2428
  %520 = load i64, i64* %RAX
  %521 = add i64 %520, 24
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i64*
  %525 = load i64, i64* %524
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = load i64, i64* %RAX
  %527 = load i64, i64* %RBP
  %528 = sub i64 %527, 48
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 4
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i64*
  %532 = load i64, i64* %531
  %533 = sub i64 %526, %532
  %534 = icmp ugt i64 %532, %526
  %535 = zext i1 %534 to i8
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %535, i8* %536, align 1, !tbaa !2432
  %537 = trunc i64 %533 to i32
  %538 = and i32 %537, 255
  %539 = call i32 @llvm.ctpop.i32(i32 %538) #16
  %540 = trunc i32 %539 to i8
  %541 = and i8 %540, 1
  %542 = xor i8 %541, 1
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %542, i8* %543, align 1, !tbaa !2446
  %544 = xor i64 %532, %526
  %545 = xor i64 %544, %533
  %546 = lshr i64 %545, 4
  %547 = trunc i64 %546 to i8
  %548 = and i8 %547, 1
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %548, i8* %549, align 1, !tbaa !2447
  %550 = icmp eq i64 %533, 0
  %551 = zext i1 %550 to i8
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %551, i8* %552, align 1, !tbaa !2448
  %553 = lshr i64 %533, 63
  %554 = trunc i64 %553 to i8
  %555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %554, i8* %555, align 1, !tbaa !2449
  %556 = lshr i64 %526, 63
  %557 = lshr i64 %532, 63
  %558 = xor i64 %557, %556
  %559 = xor i64 %553, %556
  %560 = add nuw nsw i64 %559, %558
  %561 = icmp eq i64 %560, 2
  %562 = zext i1 %561 to i8
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %562, i8* %563, align 1, !tbaa !2450
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 26
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 6
  %568 = load i64, i64* %PC
  %569 = add i64 %568, 6
  store i64 %569, i64* %PC
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %571 = load i8, i8* %570, align 1, !tbaa !2448
  store i8 %571, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %573 = icmp ne i8 %571, 0
  %574 = select i1 %573, i64 %565, i64 %567
  store i64 %574, i64* %572, align 8, !tbaa !2428
  %575 = load i8, i8* %BRANCH_TAKEN
  %576 = icmp eq i8 %575, 1
  br i1 %576, label %block_400b4c, label %block_400b38

block_400b6a:                                     ; preds = %block_400b62, %block_400a6f
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_400b62 ], [ %438, %block_400a6f ]
  %577 = load i64, i64* %RBP
  %578 = sub i64 %577, 8
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 4
  store i64 %580, i64* %PC
  %581 = inttoptr i64 %578 to i64*
  %582 = load i64, i64* %581
  store i64 %582, i64* %RAX, align 8, !tbaa !2428
  %583 = load i64, i64* %RSP
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 4
  store i64 %585, i64* %PC
  %586 = add i64 80, %583
  store i64 %586, i64* %RSP, align 8, !tbaa !2428
  %587 = icmp ult i64 %586, %583
  %588 = icmp ult i64 %586, 80
  %589 = or i1 %587, %588
  %590 = zext i1 %589 to i8
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %590, i8* %591, align 1, !tbaa !2432
  %592 = trunc i64 %586 to i32
  %593 = and i32 %592, 255
  %594 = call i32 @llvm.ctpop.i32(i32 %593) #16
  %595 = trunc i32 %594 to i8
  %596 = and i8 %595, 1
  %597 = xor i8 %596, 1
  %598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %597, i8* %598, align 1, !tbaa !2446
  %599 = xor i64 80, %583
  %600 = xor i64 %599, %586
  %601 = lshr i64 %600, 4
  %602 = trunc i64 %601 to i8
  %603 = and i8 %602, 1
  %604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %603, i8* %604, align 1, !tbaa !2447
  %605 = icmp eq i64 %586, 0
  %606 = zext i1 %605 to i8
  %607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %606, i8* %607, align 1, !tbaa !2448
  %608 = lshr i64 %586, 63
  %609 = trunc i64 %608 to i8
  %610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %609, i8* %610, align 1, !tbaa !2449
  %611 = lshr i64 %583, 63
  %612 = xor i64 %608, %611
  %613 = add nuw nsw i64 %612, %608
  %614 = icmp eq i64 %613, 2
  %615 = zext i1 %614 to i8
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %615, i8* %616, align 1, !tbaa !2450
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 1
  store i64 %618, i64* %PC
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %620 = load i64, i64* %619, align 8, !tbaa !2428
  %621 = add i64 %620, 8
  %622 = inttoptr i64 %620 to i64*
  %623 = load i64, i64* %622
  store i64 %623, i64* %RBP, align 8, !tbaa !2428
  store i64 %621, i64* %619, align 8, !tbaa !2428
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 1
  store i64 %625, i64* %PC
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %628 = load i64, i64* %627, align 8, !tbaa !2428
  %629 = inttoptr i64 %628 to i64*
  %630 = load i64, i64* %629
  store i64 %630, i64* %626, align 8, !tbaa !2428
  %631 = add i64 %628, 8
  store i64 %631, i64* %627, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400aa4:                                     ; preds = %block_4009f0
  %632 = load i64, i64* %RBP
  %633 = sub i64 %632, 24
  %634 = load i64, i64* %PC
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC
  %636 = inttoptr i64 %633 to i64*
  %637 = load i64, i64* %636
  store i64 %637, i64* %RAX, align 8, !tbaa !2428
  %638 = load i64, i64* %RBP
  %639 = sub i64 %638, 16
  %640 = load i64, i64* %PC
  %641 = add i64 %640, 4
  store i64 %641, i64* %PC
  %642 = inttoptr i64 %639 to i64*
  %643 = load i64, i64* %642
  store i64 %643, i64* %RCX, align 8, !tbaa !2428
  %644 = load i64, i64* %RCX
  %645 = add i64 %644, 568
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 7
  store i64 %647, i64* %PC
  %648 = inttoptr i64 %645 to i64*
  %649 = load i64, i64* %648
  store i64 %649, i64* %RCX, align 8, !tbaa !2428
  %650 = load i64, i64* %RAX
  %651 = load i64, i64* %RCX
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 3
  store i64 %653, i64* %PC
  %654 = sub i64 %650, %651
  store i64 %654, i64* %RAX, align 8, !tbaa !2428
  %655 = icmp ult i64 %650, %651
  %656 = zext i1 %655 to i8
  %657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %656, i8* %657, align 1, !tbaa !2432
  %658 = trunc i64 %654 to i32
  %659 = and i32 %658, 255
  %660 = call i32 @llvm.ctpop.i32(i32 %659) #16
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  %663 = xor i8 %662, 1
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %663, i8* %664, align 1, !tbaa !2446
  %665 = xor i64 %651, %650
  %666 = xor i64 %665, %654
  %667 = lshr i64 %666, 4
  %668 = trunc i64 %667 to i8
  %669 = and i8 %668, 1
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %669, i8* %670, align 1, !tbaa !2447
  %671 = icmp eq i64 %654, 0
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %672, i8* %673, align 1, !tbaa !2448
  %674 = lshr i64 %654, 63
  %675 = trunc i64 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %675, i8* %676, align 1, !tbaa !2449
  %677 = lshr i64 %650, 63
  %678 = lshr i64 %651, 63
  %679 = xor i64 %678, %677
  %680 = xor i64 %674, %677
  %681 = add nuw nsw i64 %680, %679
  %682 = icmp eq i64 %681, 2
  %683 = zext i1 %682 to i8
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %683, i8* %684, align 1, !tbaa !2450
  %685 = load i64, i64* %RBP
  %686 = sub i64 %685, 56
  %687 = load i64, i64* %RAX
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 4
  store i64 %689, i64* %PC
  %690 = inttoptr i64 %686 to i64*
  store i64 %687, i64* %690
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 24
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 4
  store i64 %694, i64* %PC
  %695 = inttoptr i64 %692 to i64*
  %696 = load i64, i64* %695
  store i64 %696, i64* %RAX, align 8, !tbaa !2428
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 16
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 4
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %698 to i64*
  %702 = load i64, i64* %701
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %703 = load i64, i64* %RCX
  %704 = add i64 %703, 568
  %705 = load i64, i64* %RAX
  %706 = load i64, i64* %PC
  %707 = add i64 %706, 7
  store i64 %707, i64* %PC
  %708 = inttoptr i64 %704 to i64*
  store i64 %705, i64* %708
  %709 = load i64, i64* %RBP
  %710 = sub i64 %709, 24
  %711 = load i64, i64* %PC
  %712 = add i64 %711, 4
  store i64 %712, i64* %PC
  %713 = inttoptr i64 %710 to i64*
  %714 = load i64, i64* %713
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RBP
  %716 = sub i64 %715, 16
  %717 = load i64, i64* %PC
  %718 = add i64 %717, 4
  store i64 %718, i64* %PC
  %719 = inttoptr i64 %716 to i64*
  %720 = load i64, i64* %719
  store i64 %720, i64* %RCX, align 8, !tbaa !2428
  %721 = load i64, i64* %RCX
  %722 = add i64 %721, 424
  %723 = load i64, i64* %PC
  %724 = add i64 %723, 7
  store i64 %724, i64* %PC
  %725 = inttoptr i64 %722 to i64*
  %726 = load i64, i64* %725
  store i64 %726, i64* %RCX, align 8, !tbaa !2428
  %727 = load i64, i64* %RCX
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 4
  store i64 %729, i64* %PC
  %730 = shl i64 %727, 5
  %731 = icmp slt i64 %730, 0
  %732 = shl i64 %730, 1
  store i64 %732, i64* %RCX, align 8, !tbaa !2428
  %733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %734 = zext i1 %731 to i8
  store i8 %734, i8* %733, align 1, !tbaa !2451
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %736 = trunc i64 %732 to i32
  %737 = and i32 %736, 254
  %738 = call i32 @llvm.ctpop.i32(i32 %737) #16
  %739 = trunc i32 %738 to i8
  %740 = and i8 %739, 1
  %741 = xor i8 %740, 1
  store i8 %741, i8* %735, align 1, !tbaa !2451
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %742, align 1, !tbaa !2451
  %743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %744 = icmp eq i64 %732, 0
  %745 = zext i1 %744 to i8
  store i8 %745, i8* %743, align 1, !tbaa !2451
  %746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %747 = lshr i64 %732, 63
  %748 = trunc i64 %747 to i8
  store i8 %748, i8* %746, align 1, !tbaa !2451
  %749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %749, align 1, !tbaa !2451
  %750 = load i64, i64* %RAX
  %751 = load i64, i64* %RCX
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 3
  store i64 %753, i64* %PC
  %754 = add i64 %751, %750
  store i64 %754, i64* %RAX, align 8, !tbaa !2428
  %755 = icmp ult i64 %754, %750
  %756 = icmp ult i64 %754, %751
  %757 = or i1 %755, %756
  %758 = zext i1 %757 to i8
  %759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %758, i8* %759, align 1, !tbaa !2432
  %760 = trunc i64 %754 to i32
  %761 = and i32 %760, 255
  %762 = call i32 @llvm.ctpop.i32(i32 %761) #16
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  %766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %765, i8* %766, align 1, !tbaa !2446
  %767 = xor i64 %751, %750
  %768 = xor i64 %767, %754
  %769 = lshr i64 %768, 4
  %770 = trunc i64 %769 to i8
  %771 = and i8 %770, 1
  %772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %771, i8* %772, align 1, !tbaa !2447
  %773 = icmp eq i64 %754, 0
  %774 = zext i1 %773 to i8
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %774, i8* %775, align 1, !tbaa !2448
  %776 = lshr i64 %754, 63
  %777 = trunc i64 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %777, i8* %778, align 1, !tbaa !2449
  %779 = lshr i64 %750, 63
  %780 = lshr i64 %751, 63
  %781 = xor i64 %776, %779
  %782 = xor i64 %776, %780
  %783 = add nuw nsw i64 %781, %782
  %784 = icmp eq i64 %783, 2
  %785 = zext i1 %784 to i8
  %786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %785, i8* %786, align 1, !tbaa !2450
  %787 = load i64, i64* %RBP
  %788 = sub i64 %787, 16
  %789 = load i64, i64* %PC
  %790 = add i64 %789, 4
  store i64 %790, i64* %PC
  %791 = inttoptr i64 %788 to i64*
  %792 = load i64, i64* %791
  store i64 %792, i64* %RCX, align 8, !tbaa !2428
  %793 = load i64, i64* %RCX
  %794 = add i64 %793, 576
  %795 = load i64, i64* %RAX
  %796 = load i64, i64* %PC
  %797 = add i64 %796, 7
  store i64 %797, i64* %PC
  %798 = inttoptr i64 %794 to i64*
  store i64 %795, i64* %798
  %799 = load i64, i64* %RBP
  %800 = sub i64 %799, 16
  %801 = load i64, i64* %PC
  %802 = add i64 %801, 4
  store i64 %802, i64* %PC
  %803 = inttoptr i64 %800 to i64*
  %804 = load i64, i64* %803
  store i64 %804, i64* %RAX, align 8, !tbaa !2428
  %805 = load i64, i64* %RAX
  %806 = add i64 %805, 552
  %807 = load i64, i64* %PC
  %808 = add i64 %807, 7
  store i64 %808, i64* %PC
  %809 = inttoptr i64 %806 to i64*
  %810 = load i64, i64* %809
  store i64 %810, i64* %RAX, align 8, !tbaa !2428
  %811 = load i64, i64* %RBP
  %812 = sub i64 %811, 32
  %813 = load i64, i64* %RAX
  %814 = load i64, i64* %PC
  %815 = add i64 %814, 4
  store i64 %815, i64* %PC
  %816 = inttoptr i64 %812 to i64*
  store i64 %813, i64* %816
  %817 = load i64, i64* %RBP
  %818 = sub i64 %817, 48
  %819 = load i64, i64* %RAX
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 4
  store i64 %821, i64* %PC
  %822 = inttoptr i64 %818 to i64*
  store i64 %819, i64* %822
  %823 = load i64, i64* %RBP
  %824 = sub i64 %823, 32
  %825 = load i64, i64* %PC
  %826 = add i64 %825, 4
  store i64 %826, i64* %PC
  %827 = inttoptr i64 %824 to i64*
  %828 = load i64, i64* %827
  store i64 %828, i64* %RAX, align 8, !tbaa !2428
  %829 = load i64, i64* %RAX
  %830 = load i64, i64* %PC
  %831 = add i64 %830, 4
  store i64 %831, i64* %PC
  %832 = add i64 104, %829
  store i64 %832, i64* %RAX, align 8, !tbaa !2428
  %833 = icmp ult i64 %832, %829
  %834 = icmp ult i64 %832, 104
  %835 = or i1 %833, %834
  %836 = zext i1 %835 to i8
  %837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %836, i8* %837, align 1, !tbaa !2432
  %838 = trunc i64 %832 to i32
  %839 = and i32 %838, 255
  %840 = call i32 @llvm.ctpop.i32(i32 %839) #16
  %841 = trunc i32 %840 to i8
  %842 = and i8 %841, 1
  %843 = xor i8 %842, 1
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %843, i8* %844, align 1, !tbaa !2446
  %845 = xor i64 104, %829
  %846 = xor i64 %845, %832
  %847 = lshr i64 %846, 4
  %848 = trunc i64 %847 to i8
  %849 = and i8 %848, 1
  %850 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %849, i8* %850, align 1, !tbaa !2447
  %851 = icmp eq i64 %832, 0
  %852 = zext i1 %851 to i8
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %852, i8* %853, align 1, !tbaa !2448
  %854 = lshr i64 %832, 63
  %855 = trunc i64 %854 to i8
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %855, i8* %856, align 1, !tbaa !2449
  %857 = lshr i64 %829, 63
  %858 = xor i64 %854, %857
  %859 = add nuw nsw i64 %858, %854
  %860 = icmp eq i64 %859, 2
  %861 = zext i1 %860 to i8
  %862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %861, i8* %862, align 1, !tbaa !2450
  %863 = load i64, i64* %RBP
  %864 = sub i64 %863, 32
  %865 = load i64, i64* %RAX
  %866 = load i64, i64* %PC
  %867 = add i64 %866, 4
  store i64 %867, i64* %PC
  %868 = inttoptr i64 %864 to i64*
  store i64 %865, i64* %868
  %869 = load i64, i64* %RBP
  %870 = sub i64 %869, 16
  %871 = load i64, i64* %PC
  %872 = add i64 %871, 4
  store i64 %872, i64* %PC
  %873 = inttoptr i64 %870 to i64*
  %874 = load i64, i64* %873
  store i64 %874, i64* %RAX, align 8, !tbaa !2428
  %875 = load i64, i64* %RAX
  %876 = add i64 %875, 560
  %877 = load i64, i64* %PC
  %878 = add i64 %877, 7
  store i64 %878, i64* %PC
  %879 = inttoptr i64 %876 to i64*
  %880 = load i64, i64* %879
  store i64 %880, i64* %RAX, align 8, !tbaa !2428
  %881 = load i64, i64* %RBP
  %882 = sub i64 %881, 40
  %883 = load i64, i64* %RAX
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 4
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %882 to i64*
  store i64 %883, i64* %886
  br label %block_400b18

block_400b4c:                                     ; preds = %block_400b26, %block_400b38
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_400b26 ], [ %MEMORY.0, %block_400b38 ]
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 5
  %889 = load i64, i64* %PC
  %890 = add i64 %889, 5
  store i64 %890, i64* %PC
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %888, i64* %891, align 8, !tbaa !2428
  %892 = load i64, i64* %RBP
  %893 = sub i64 %892, 32
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 4
  store i64 %895, i64* %PC
  %896 = inttoptr i64 %893 to i64*
  %897 = load i64, i64* %896
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = load i64, i64* %RAX
  %899 = load i64, i64* %PC
  %900 = add i64 %899, 4
  store i64 %900, i64* %PC
  %901 = add i64 104, %898
  store i64 %901, i64* %RAX, align 8, !tbaa !2428
  %902 = icmp ult i64 %901, %898
  %903 = icmp ult i64 %901, 104
  %904 = or i1 %902, %903
  %905 = zext i1 %904 to i8
  %906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %905, i8* %906, align 1, !tbaa !2432
  %907 = trunc i64 %901 to i32
  %908 = and i32 %907, 255
  %909 = call i32 @llvm.ctpop.i32(i32 %908) #16
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  %912 = xor i8 %911, 1
  %913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %912, i8* %913, align 1, !tbaa !2446
  %914 = xor i64 104, %898
  %915 = xor i64 %914, %901
  %916 = lshr i64 %915, 4
  %917 = trunc i64 %916 to i8
  %918 = and i8 %917, 1
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %918, i8* %919, align 1, !tbaa !2447
  %920 = icmp eq i64 %901, 0
  %921 = zext i1 %920 to i8
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %921, i8* %922, align 1, !tbaa !2448
  %923 = lshr i64 %901, 63
  %924 = trunc i64 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %924, i8* %925, align 1, !tbaa !2449
  %926 = lshr i64 %898, 63
  %927 = xor i64 %923, %926
  %928 = add nuw nsw i64 %927, %923
  %929 = icmp eq i64 %928, 2
  %930 = zext i1 %929 to i8
  %931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %930, i8* %931, align 1, !tbaa !2450
  %932 = load i64, i64* %RBP
  %933 = sub i64 %932, 32
  %934 = load i64, i64* %RAX
  %935 = load i64, i64* %PC
  %936 = add i64 %935, 4
  store i64 %936, i64* %PC
  %937 = inttoptr i64 %933 to i64*
  store i64 %934, i64* %937
  %938 = load i64, i64* %PC
  %939 = sub i64 %938, 69
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 5
  store i64 %941, i64* %PC
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %939, i64* %942, align 8, !tbaa !2428
  br label %block_400b18

block_400b62:                                     ; preds = %block_400b18
  %943 = sub i64 %514, 8
  %944 = load i64, i64* %PC
  %945 = add i64 %944, 8
  store i64 %945, i64* %PC
  %946 = inttoptr i64 %943 to i64*
  store i64 0, i64* %946
  br label %block_400b6a
}

; Function Attrs: noinline
define %struct.Memory* @sub_4046a0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4046a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_605de0__init_array_type* @seg_605de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_605de0__init_array_type* @seg_605de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 16092
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4007f0__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_4046f6, label %block_4046d6

block_4046f6:                                     ; preds = %block_4046e0, %block_4046a0
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_4046a0 ], [ %387, %block_4046e0 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4046d6:                                     ; preds = %block_4046a0
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_4046e0

block_4046e0:                                     ; preds = %block_4046e0, %block_4046d6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_4046d6 ], [ %387, %block_4046e0 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_4046e0, label %block_4046f6
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009e0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4009e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400970_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_4033a0_primal_start_artificial(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4033a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = load i64, i64* %RBP
  %35 = sub i64 %34, 8
  %36 = load i64, i64* %RDI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44
  store i64 %45, i64* %RDI, align 8, !tbaa !2428
  %46 = load i64, i64* %RDI
  %47 = add i64 %46, 552
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 7
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %47 to i64*
  %51 = load i64, i64* %50
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = load i64, i64* %RBP
  %53 = sub i64 %52, 16
  %54 = load i64, i64* %RDI
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 4
  store i64 %56, i64* %PC
  %57 = inttoptr i64 %53 to i64*
  store i64 %54, i64* %57
  %58 = load i64, i64* %RBP
  %59 = sub i64 %58, 24
  %60 = load i64, i64* %RDI
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %59 to i64*
  store i64 %60, i64* %63
  %64 = load i64, i64* %RBP
  %65 = sub i64 %64, 16
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 4
  store i64 %67, i64* %PC
  %68 = inttoptr i64 %65 to i64*
  %69 = load i64, i64* %68
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  %70 = load i64, i64* %RDI
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 4
  store i64 %72, i64* %PC
  %73 = add i64 104, %70
  store i64 %73, i64* %RDI, align 8, !tbaa !2428
  %74 = icmp ult i64 %73, %70
  %75 = icmp ult i64 %73, 104
  %76 = or i1 %74, %75
  %77 = zext i1 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %78, align 1, !tbaa !2432
  %79 = trunc i64 %73 to i32
  %80 = and i32 %79, 255
  %81 = call i32 @llvm.ctpop.i32(i32 %80) #16
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %84, i8* %85, align 1, !tbaa !2446
  %86 = xor i64 104, %70
  %87 = xor i64 %86, %73
  %88 = lshr i64 %87, 4
  %89 = trunc i64 %88 to i8
  %90 = and i8 %89, 1
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %90, i8* %91, align 1, !tbaa !2447
  %92 = icmp eq i64 %73, 0
  %93 = zext i1 %92 to i8
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %93, i8* %94, align 1, !tbaa !2448
  %95 = lshr i64 %73, 63
  %96 = trunc i64 %95 to i8
  %97 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %96, i8* %97, align 1, !tbaa !2449
  %98 = lshr i64 %70, 63
  %99 = xor i64 %95, %98
  %100 = add nuw nsw i64 %99, %95
  %101 = icmp eq i64 %100, 2
  %102 = zext i1 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %102, i8* %103, align 1, !tbaa !2450
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 16
  %106 = load i64, i64* %RDI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC
  %109 = inttoptr i64 %105 to i64*
  store i64 %106, i64* %109
  %110 = load i64, i64* %RBP
  %111 = sub i64 %110, 24
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC
  %114 = inttoptr i64 %111 to i64*
  %115 = load i64, i64* %114
  store i64 %115, i64* %RDI, align 8, !tbaa !2428
  %116 = load i64, i64* %RDI
  %117 = add i64 %116, 48
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 8
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i64*
  store i64 0, i64* %120
  %121 = load i64, i64* %RBP
  %122 = sub i64 %121, 24
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 4
  store i64 %124, i64* %PC
  %125 = inttoptr i64 %122 to i64*
  %126 = load i64, i64* %125
  store i64 %126, i64* %RDI, align 8, !tbaa !2428
  %127 = load i64, i64* %RDI
  %128 = add i64 %127, 24
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 8
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to i64*
  store i64 0, i64* %131
  %132 = load i64, i64* %RBP
  %133 = sub i64 %132, 16
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RDI, align 8, !tbaa !2428
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 24
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i64*
  %143 = load i64, i64* %142
  store i64 %143, i64* %RAX, align 8, !tbaa !2428
  %144 = load i64, i64* %RAX
  %145 = add i64 %144, 16
  %146 = load i64, i64* %RDI
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC
  %149 = inttoptr i64 %145 to i64*
  store i64 %146, i64* %149
  %150 = load i64, i64* %RBP
  %151 = sub i64 %150, 24
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 4
  store i64 %153, i64* %PC
  %154 = inttoptr i64 %151 to i64*
  %155 = load i64, i64* %154
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = load i64, i64* %RAX
  %157 = add i64 %156, 32
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 8
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i64*
  store i64 0, i64* %160
  %161 = load i64, i64* %RBP
  %162 = sub i64 %161, 24
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC
  %165 = inttoptr i64 %162 to i64*
  %166 = load i64, i64* %165
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  %167 = load i64, i64* %RAX
  %168 = add i64 %167, 40
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 8
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %168 to i64*
  store i64 0, i64* %171
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 8
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 4
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i64*
  %177 = load i64, i64* %176
  store i64 %177, i64* %RAX, align 8, !tbaa !2428
  %178 = load i64, i64* %RAX
  %179 = add i64 %178, 400
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 7
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i64*
  %183 = load i64, i64* %182
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = load i64, i64* %RAX
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 4
  store i64 %186, i64* %PC
  %187 = add i64 1, %184
  store i64 %187, i64* %RAX, align 8, !tbaa !2428
  %188 = icmp ult i64 %187, %184
  %189 = icmp ult i64 %187, 1
  %190 = or i1 %188, %189
  %191 = zext i1 %190 to i8
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %191, i8* %192, align 1, !tbaa !2432
  %193 = trunc i64 %187 to i32
  %194 = and i32 %193, 255
  %195 = call i32 @llvm.ctpop.i32(i32 %194) #16
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  %199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %198, i8* %199, align 1, !tbaa !2446
  %200 = xor i64 1, %184
  %201 = xor i64 %200, %187
  %202 = lshr i64 %201, 4
  %203 = trunc i64 %202 to i8
  %204 = and i8 %203, 1
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %204, i8* %205, align 1, !tbaa !2447
  %206 = icmp eq i64 %187, 0
  %207 = zext i1 %206 to i8
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %207, i8* %208, align 1, !tbaa !2448
  %209 = lshr i64 %187, 63
  %210 = trunc i64 %209 to i8
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %210, i8* %211, align 1, !tbaa !2449
  %212 = lshr i64 %184, 63
  %213 = xor i64 %209, %212
  %214 = add nuw nsw i64 %213, %209
  %215 = icmp eq i64 %214, 2
  %216 = zext i1 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %216, i8* %217, align 1, !tbaa !2450
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 24
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 4
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %219 to i64*
  %223 = load i64, i64* %222
  store i64 %223, i64* %RDI, align 8, !tbaa !2428
  %224 = load i64, i64* %RDI
  %225 = add i64 %224, 88
  %226 = load i64, i64* %RAX
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %225 to i64*
  store i64 %226, i64* %229
  %230 = load i64, i64* %RBP
  %231 = sub i64 %230, 24
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC
  %234 = inttoptr i64 %231 to i64*
  %235 = load i64, i64* %234
  store i64 %235, i64* %RAX, align 8, !tbaa !2428
  %236 = load i64, i64* %RAX
  %237 = add i64 %236, 8
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 7
  store i64 %239, i64* %PC
  %240 = inttoptr i64 %237 to i32*
  store i32 0, i32* %240
  %241 = load i64, i64* %RBP
  %242 = sub i64 %241, 24
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 4
  store i64 %244, i64* %PC
  %245 = inttoptr i64 %242 to i64*
  %246 = load i64, i64* %245
  store i64 %246, i64* %RAX, align 8, !tbaa !2428
  %247 = load i64, i64* %RAX
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 7
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %247 to i64*
  store i64 -100000000, i64* %250
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 24
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC
  %255 = inttoptr i64 %252 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = load i64, i64* %RAX
  %258 = add i64 %257, 80
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 8
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %258 to i64*
  store i64 0, i64* %261
  %262 = load i64, i64* %RBP
  %263 = sub i64 %262, 8
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 4
  store i64 %265, i64* %PC
  %266 = inttoptr i64 %263 to i64*
  %267 = load i64, i64* %266
  store i64 %267, i64* %RAX, align 8, !tbaa !2428
  %268 = load i64, i64* %RAX
  %269 = add i64 %268, 576
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 7
  store i64 %271, i64* %PC
  %272 = inttoptr i64 %269 to i64*
  %273 = load i64, i64* %272
  store i64 %273, i64* %RAX, align 8, !tbaa !2428
  %274 = load i64, i64* %RBP
  %275 = sub i64 %274, 40
  %276 = load i64, i64* %RAX
  %277 = load i64, i64* %PC
  %278 = add i64 %277, 4
  store i64 %278, i64* %PC
  %279 = inttoptr i64 %275 to i64*
  store i64 %276, i64* %279
  %280 = load i64, i64* %RBP
  %281 = sub i64 %280, 8
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 4
  store i64 %283, i64* %PC
  %284 = inttoptr i64 %281 to i64*
  %285 = load i64, i64* %284
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = load i64, i64* %RAX
  %287 = add i64 %286, 568
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 7
  store i64 %289, i64* %PC
  %290 = inttoptr i64 %287 to i64*
  %291 = load i64, i64* %290
  store i64 %291, i64* %RAX, align 8, !tbaa !2428
  %292 = load i64, i64* %RBP
  %293 = sub i64 %292, 32
  %294 = load i64, i64* %RAX
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 4
  store i64 %296, i64* %PC
  %297 = inttoptr i64 %293 to i64*
  store i64 %294, i64* %297
  br label %block_40345a

block_40345a:                                     ; preds = %block_403484, %block_4033a0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4033a0 ], [ %MEMORY.2, %block_403484 ]
  %298 = load i64, i64* %RBP
  %299 = sub i64 %298, 32
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 4
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %299 to i64*
  %303 = load i64, i64* %302
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = load i64, i64* %RBP
  %305 = sub i64 %304, 40
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 4
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %305 to i64*
  %309 = load i64, i64* %308
  store i64 %309, i64* %RCX, align 8, !tbaa !2428
  %310 = load i64, i64* %RAX
  %311 = load i64, i64* %RCX
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 3
  store i64 %313, i64* %PC
  %314 = sub i64 %310, %311
  %315 = icmp ult i64 %310, %311
  %316 = zext i1 %315 to i8
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %316, i8* %317, align 1, !tbaa !2432
  %318 = trunc i64 %314 to i32
  %319 = and i32 %318, 255
  %320 = call i32 @llvm.ctpop.i32(i32 %319) #16
  %321 = trunc i32 %320 to i8
  %322 = and i8 %321, 1
  %323 = xor i8 %322, 1
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %323, i8* %324, align 1, !tbaa !2446
  %325 = xor i64 %311, %310
  %326 = xor i64 %325, %314
  %327 = lshr i64 %326, 4
  %328 = trunc i64 %327 to i8
  %329 = and i8 %328, 1
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %329, i8* %330, align 1, !tbaa !2447
  %331 = icmp eq i64 %314, 0
  %332 = zext i1 %331 to i8
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %332, i8* %333, align 1, !tbaa !2448
  %334 = lshr i64 %314, 63
  %335 = trunc i64 %334 to i8
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %335, i8* %336, align 1, !tbaa !2449
  %337 = lshr i64 %310, 63
  %338 = lshr i64 %311, 63
  %339 = xor i64 %338, %337
  %340 = xor i64 %334, %337
  %341 = add nuw nsw i64 %340, %339
  %342 = icmp eq i64 %341, 2
  %343 = zext i1 %342 to i8
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %343, i8* %344, align 1, !tbaa !2450
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 53
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 6
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 6
  store i64 %350, i64* %PC
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %352 = load i8, i8* %351, align 1, !tbaa !2448
  store i8 %352, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %354 = icmp ne i8 %352, 0
  %355 = select i1 %354, i64 %346, i64 %348
  store i64 %355, i64* %353, align 8, !tbaa !2428
  %356 = load i8, i8* %BRANCH_TAKEN
  %357 = icmp eq i8 %356, 1
  %358 = load i64, i64* %RBP
  br i1 %357, label %block_40349a, label %block_40346b

block_4034b8:                                     ; preds = %block_4034c9, %block_40349a
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_40349a ], [ %MEMORY.1, %block_4034c9 ]
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 16
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 4
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363
  store i64 %364, i64* %RAX, align 8, !tbaa !2428
  %365 = load i64, i64* %RBP
  %366 = sub i64 %365, 40
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i64*
  %370 = load i64, i64* %369
  store i64 %370, i64* %RCX, align 8, !tbaa !2428
  %371 = load i64, i64* %RAX
  %372 = load i64, i64* %RCX
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = sub i64 %371, %372
  %376 = icmp ult i64 %371, %372
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %377, i8* %378, align 1, !tbaa !2432
  %379 = trunc i64 %375 to i32
  %380 = and i32 %379, 255
  %381 = call i32 @llvm.ctpop.i32(i32 %380) #16
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = xor i8 %383, 1
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %384, i8* %385, align 1, !tbaa !2446
  %386 = xor i64 %372, %371
  %387 = xor i64 %386, %375
  %388 = lshr i64 %387, 4
  %389 = trunc i64 %388 to i8
  %390 = and i8 %389, 1
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %390, i8* %391, align 1, !tbaa !2447
  %392 = icmp eq i64 %375, 0
  %393 = zext i1 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %393, i8* %394, align 1, !tbaa !2448
  %395 = lshr i64 %375, 63
  %396 = trunc i64 %395 to i8
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %396, i8* %397, align 1, !tbaa !2449
  %398 = lshr i64 %371, 63
  %399 = lshr i64 %372, 63
  %400 = xor i64 %399, %398
  %401 = xor i64 %395, %398
  %402 = add nuw nsw i64 %401, %400
  %403 = icmp eq i64 %402, 2
  %404 = zext i1 %403 to i8
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %404, i8* %405, align 1, !tbaa !2450
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 195
  %408 = load i64, i64* %PC
  %409 = add i64 %408, 6
  %410 = load i64, i64* %PC
  %411 = add i64 %410, 6
  store i64 %411, i64* %PC
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %413 = load i8, i8* %412, align 1, !tbaa !2448
  store i8 %413, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %415 = icmp ne i8 %413, 0
  %416 = select i1 %415, i64 %407, i64 %409
  store i64 %416, i64* %414, align 8, !tbaa !2428
  %417 = load i8, i8* %BRANCH_TAKEN
  %418 = icmp eq i8 %417, 1
  br i1 %418, label %block_403586, label %block_4034c9

block_40346b:                                     ; preds = %block_40345a
  %419 = sub i64 %358, 32
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 4
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i64*
  %423 = load i64, i64* %422
  store i64 %423, i64* %RAX, align 8, !tbaa !2428
  %424 = load i64, i64* %RAX
  %425 = add i64 %424, 24
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 4
  store i64 %427, i64* %PC
  %428 = inttoptr i64 %425 to i32*
  %429 = load i32, i32* %428
  %430 = sub i32 %429, -1
  %431 = icmp ult i32 %429, -1
  %432 = zext i1 %431 to i8
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %432, i8* %433, align 1, !tbaa !2432
  %434 = and i32 %430, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = xor i32 %429, -1
  %441 = xor i32 %440, %430
  %442 = lshr i32 %441, 4
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = icmp eq i32 %430, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i32 %430, 31
  %450 = trunc i32 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i32 %429, 31
  %453 = xor i32 %452, 1
  %454 = xor i32 %449, %452
  %455 = add nuw nsw i32 %454, %453
  %456 = icmp eq i32 %455, 2
  %457 = zext i1 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %457, i8* %458, align 1, !tbaa !2450
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 17
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 6
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 6
  store i64 %464, i64* %PC
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %466 = load i8, i8* %465, align 1, !tbaa !2448
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = icmp ne i8 %466, 0
  %469 = select i1 %468, i64 %460, i64 %462
  store i64 %469, i64* %467, align 8, !tbaa !2428
  %470 = load i8, i8* %BRANCH_TAKEN
  %471 = icmp eq i8 %470, 1
  br i1 %471, label %block_403484, label %block_403479

block_403586:                                     ; preds = %block_4034b8
  %472 = load i64, i64* %RAX
  %473 = load i32, i32* %EAX
  %474 = zext i32 %473 to i64
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 2
  store i64 %476, i64* %PC
  %477 = xor i64 %474, %472
  %478 = trunc i64 %477 to i32
  %479 = and i64 %477, 4294967295
  store i64 %479, i64* %RAX, align 8, !tbaa !2428
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %480, align 1, !tbaa !2432
  %481 = and i32 %478, 255
  %482 = call i32 @llvm.ctpop.i32(i32 %481) #16
  %483 = trunc i32 %482 to i8
  %484 = and i8 %483, 1
  %485 = xor i8 %484, 1
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %485, i8* %486, align 1, !tbaa !2446
  %487 = icmp eq i32 %478, 0
  %488 = zext i1 %487 to i8
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %488, i8* %489, align 1, !tbaa !2448
  %490 = lshr i32 %478, 31
  %491 = trunc i32 %490 to i8
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %491, i8* %492, align 1, !tbaa !2449
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %493, align 1, !tbaa !2450
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %494, align 1, !tbaa !2447
  %495 = load i64, i64* %RBP
  %496 = sub i64 %495, 16
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 4
  store i64 %498, i64* %PC
  %499 = inttoptr i64 %496 to i64*
  %500 = load i64, i64* %499
  store i64 %500, i64* %RCX, align 8, !tbaa !2428
  %501 = load i64, i64* %RCX
  %502 = load i64, i64* %PC
  %503 = add i64 %502, 4
  store i64 %503, i64* %PC
  %504 = add i64 -104, %501
  store i64 %504, i64* %RCX, align 8, !tbaa !2428
  %505 = icmp ult i64 %504, %501
  %506 = icmp ult i64 %504, -104
  %507 = or i1 %505, %506
  %508 = zext i1 %507 to i8
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %508, i8* %509, align 1, !tbaa !2432
  %510 = trunc i64 %504 to i32
  %511 = and i32 %510, 255
  %512 = call i32 @llvm.ctpop.i32(i32 %511) #16
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  %515 = xor i8 %514, 1
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %515, i8* %516, align 1, !tbaa !2446
  %517 = xor i64 -104, %501
  %518 = xor i64 %517, %504
  %519 = lshr i64 %518, 4
  %520 = trunc i64 %519 to i8
  %521 = and i8 %520, 1
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %521, i8* %522, align 1, !tbaa !2447
  %523 = icmp eq i64 %504, 0
  %524 = zext i1 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %524, i8* %525, align 1, !tbaa !2448
  %526 = lshr i64 %504, 63
  %527 = trunc i64 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %527, i8* %528, align 1, !tbaa !2449
  %529 = lshr i64 %501, 63
  %530 = xor i64 %526, %529
  %531 = xor i64 %526, 1
  %532 = add nuw nsw i64 %530, %531
  %533 = icmp eq i64 %532, 2
  %534 = zext i1 %533 to i8
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %534, i8* %535, align 1, !tbaa !2450
  %536 = load i64, i64* %RBP
  %537 = sub i64 %536, 16
  %538 = load i64, i64* %RCX
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 4
  store i64 %540, i64* %PC
  %541 = inttoptr i64 %537 to i64*
  store i64 %538, i64* %541
  %542 = load i64, i64* %RBP
  %543 = sub i64 %542, 24
  %544 = load i64, i64* %PC
  %545 = add i64 %544, 4
  store i64 %545, i64* %PC
  %546 = inttoptr i64 %543 to i64*
  %547 = load i64, i64* %546
  store i64 %547, i64* %RCX, align 8, !tbaa !2428
  %548 = load i64, i64* %RCX
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 4
  store i64 %550, i64* %PC
  %551 = add i64 104, %548
  store i64 %551, i64* %RCX, align 8, !tbaa !2428
  %552 = icmp ult i64 %551, %548
  %553 = icmp ult i64 %551, 104
  %554 = or i1 %552, %553
  %555 = zext i1 %554 to i8
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %555, i8* %556, align 1, !tbaa !2432
  %557 = trunc i64 %551 to i32
  %558 = and i32 %557, 255
  %559 = call i32 @llvm.ctpop.i32(i32 %558) #16
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  %562 = xor i8 %561, 1
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %562, i8* %563, align 1, !tbaa !2446
  %564 = xor i64 104, %548
  %565 = xor i64 %564, %551
  %566 = lshr i64 %565, 4
  %567 = trunc i64 %566 to i8
  %568 = and i8 %567, 1
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %568, i8* %569, align 1, !tbaa !2447
  %570 = icmp eq i64 %551, 0
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %571, i8* %572, align 1, !tbaa !2448
  %573 = lshr i64 %551, 63
  %574 = trunc i64 %573 to i8
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %574, i8* %575, align 1, !tbaa !2449
  %576 = lshr i64 %548, 63
  %577 = xor i64 %573, %576
  %578 = add nuw nsw i64 %577, %573
  %579 = icmp eq i64 %578, 2
  %580 = zext i1 %579 to i8
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %580, i8* %581, align 1, !tbaa !2450
  %582 = load i64, i64* %RBP
  %583 = sub i64 %582, 24
  %584 = load i64, i64* %RCX
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 4
  store i64 %586, i64* %PC
  %587 = inttoptr i64 %583 to i64*
  store i64 %584, i64* %587
  %588 = load i64, i64* %RBP
  %589 = sub i64 %588, 16
  %590 = load i64, i64* %PC
  %591 = add i64 %590, 4
  store i64 %591, i64* %PC
  %592 = inttoptr i64 %589 to i64*
  %593 = load i64, i64* %592
  store i64 %593, i64* %RCX, align 8, !tbaa !2428
  %594 = load i64, i64* %RCX
  %595 = add i64 %594, 32
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 8
  store i64 %597, i64* %PC
  %598 = inttoptr i64 %595 to i64*
  store i64 0, i64* %598
  %599 = load i64, i64* %RBP
  %600 = sub i64 %599, 24
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 4
  store i64 %602, i64* %PC
  %603 = inttoptr i64 %600 to i64*
  %604 = load i64, i64* %603
  store i64 %604, i64* %RCX, align 8, !tbaa !2428
  %605 = load i64, i64* %RCX
  %606 = add i64 %605, 40
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 8
  store i64 %608, i64* %PC
  %609 = inttoptr i64 %606 to i64*
  store i64 0, i64* %609
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 1
  store i64 %611, i64* %PC
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %613 = load i64, i64* %612, align 8, !tbaa !2428
  %614 = add i64 %613, 8
  %615 = inttoptr i64 %613 to i64*
  %616 = load i64, i64* %615
  store i64 %616, i64* %RBP, align 8, !tbaa !2428
  store i64 %614, i64* %612, align 8, !tbaa !2428
  %617 = load i64, i64* %PC
  %618 = add i64 %617, 1
  store i64 %618, i64* %PC
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %621 = load i64, i64* %620, align 8, !tbaa !2428
  %622 = inttoptr i64 %621 to i64*
  %623 = load i64, i64* %622
  store i64 %623, i64* %619, align 8, !tbaa !2428
  %624 = add i64 %621, 8
  store i64 %624, i64* %620, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40349a:                                     ; preds = %block_40345a
  %625 = sub i64 %358, 8
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 4
  store i64 %627, i64* %PC
  %628 = inttoptr i64 %625 to i64*
  %629 = load i64, i64* %628
  store i64 %629, i64* %RAX, align 8, !tbaa !2428
  %630 = load i64, i64* %RAX
  %631 = add i64 %630, 584
  %632 = load i64, i64* %PC
  %633 = add i64 %632, 7
  store i64 %633, i64* %PC
  %634 = inttoptr i64 %631 to i64*
  %635 = load i64, i64* %634
  store i64 %635, i64* %RAX, align 8, !tbaa !2428
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 32
  %638 = load i64, i64* %RAX
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 4
  store i64 %640, i64* %PC
  %641 = inttoptr i64 %637 to i64*
  store i64 %638, i64* %641
  %642 = load i64, i64* %RBP
  %643 = sub i64 %642, 8
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 4
  store i64 %645, i64* %PC
  %646 = inttoptr i64 %643 to i64*
  %647 = load i64, i64* %646
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = load i64, i64* %RAX
  %649 = add i64 %648, 560
  %650 = load i64, i64* %PC
  %651 = add i64 %650, 7
  store i64 %651, i64* %PC
  %652 = inttoptr i64 %649 to i64*
  %653 = load i64, i64* %652
  store i64 %653, i64* %RAX, align 8, !tbaa !2428
  %654 = load i64, i64* %RBP
  %655 = sub i64 %654, 40
  %656 = load i64, i64* %RAX
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 4
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %655 to i64*
  store i64 %656, i64* %659
  br label %block_4034b8

block_403479:                                     ; preds = %block_40346b
  %660 = load i64, i64* %RBP
  %661 = sub i64 %660, 32
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 4
  store i64 %663, i64* %PC
  %664 = inttoptr i64 %661 to i64*
  %665 = load i64, i64* %664
  store i64 %665, i64* %RAX, align 8, !tbaa !2428
  %666 = load i64, i64* %RAX
  %667 = add i64 %666, 24
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 7
  store i64 %669, i64* %PC
  %670 = inttoptr i64 %667 to i32*
  store i32 1, i32* %670
  br label %block_403484

block_403484:                                     ; preds = %block_403479, %block_40346b
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.0, %block_40346b ], [ %MEMORY.0, %block_403479 ]
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 5
  %673 = load i64, i64* %PC
  %674 = add i64 %673, 5
  store i64 %674, i64* %PC
  %675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %672, i64* %675, align 8, !tbaa !2428
  %676 = load i64, i64* %RBP
  %677 = sub i64 %676, 32
  %678 = load i64, i64* %PC
  %679 = add i64 %678, 4
  store i64 %679, i64* %PC
  %680 = inttoptr i64 %677 to i64*
  %681 = load i64, i64* %680
  store i64 %681, i64* %RAX, align 8, !tbaa !2428
  %682 = load i64, i64* %RAX
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 4
  store i64 %684, i64* %PC
  %685 = add i64 64, %682
  store i64 %685, i64* %RAX, align 8, !tbaa !2428
  %686 = icmp ult i64 %685, %682
  %687 = icmp ult i64 %685, 64
  %688 = or i1 %686, %687
  %689 = zext i1 %688 to i8
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %689, i8* %690, align 1, !tbaa !2432
  %691 = trunc i64 %685 to i32
  %692 = and i32 %691, 255
  %693 = call i32 @llvm.ctpop.i32(i32 %692) #16
  %694 = trunc i32 %693 to i8
  %695 = and i8 %694, 1
  %696 = xor i8 %695, 1
  %697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %696, i8* %697, align 1, !tbaa !2446
  %698 = xor i64 64, %682
  %699 = xor i64 %698, %685
  %700 = lshr i64 %699, 4
  %701 = trunc i64 %700 to i8
  %702 = and i8 %701, 1
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %702, i8* %703, align 1, !tbaa !2447
  %704 = icmp eq i64 %685, 0
  %705 = zext i1 %704 to i8
  %706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %705, i8* %706, align 1, !tbaa !2448
  %707 = lshr i64 %685, 63
  %708 = trunc i64 %707 to i8
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %708, i8* %709, align 1, !tbaa !2449
  %710 = lshr i64 %682, 63
  %711 = xor i64 %707, %710
  %712 = add nuw nsw i64 %711, %707
  %713 = icmp eq i64 %712, 2
  %714 = zext i1 %713 to i8
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %714, i8* %715, align 1, !tbaa !2450
  %716 = load i64, i64* %RBP
  %717 = sub i64 %716, 32
  %718 = load i64, i64* %RAX
  %719 = load i64, i64* %PC
  %720 = add i64 %719, 4
  store i64 %720, i64* %PC
  %721 = inttoptr i64 %717 to i64*
  store i64 %718, i64* %721
  %722 = load i64, i64* %PC
  %723 = sub i64 %722, 59
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 5
  store i64 %725, i64* %PC
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %723, i64* %726, align 8, !tbaa !2428
  br label %block_40345a

block_4034c9:                                     ; preds = %block_4034b8
  %727 = load i64, i64* %RBP
  %728 = sub i64 %727, 32
  %729 = load i64, i64* %PC
  %730 = add i64 %729, 4
  store i64 %730, i64* %PC
  %731 = inttoptr i64 %728 to i64*
  %732 = load i64, i64* %731
  store i64 %732, i64* %RAX, align 8, !tbaa !2428
  %733 = load i64, i64* %RBP
  %734 = sub i64 %733, 16
  %735 = load i64, i64* %PC
  %736 = add i64 %735, 4
  store i64 %736, i64* %PC
  %737 = inttoptr i64 %734 to i64*
  %738 = load i64, i64* %737
  store i64 %738, i64* %RCX, align 8, !tbaa !2428
  %739 = load i64, i64* %RCX
  %740 = add i64 %739, 48
  %741 = load i64, i64* %RAX
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = inttoptr i64 %740 to i64*
  store i64 %741, i64* %744
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 24
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 4
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i64*
  %750 = load i64, i64* %749
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = load i64, i64* %RBP
  %752 = sub i64 %751, 16
  %753 = load i64, i64* %PC
  %754 = add i64 %753, 4
  store i64 %754, i64* %PC
  %755 = inttoptr i64 %752 to i64*
  %756 = load i64, i64* %755
  store i64 %756, i64* %RCX, align 8, !tbaa !2428
  %757 = load i64, i64* %RCX
  %758 = add i64 %757, 24
  %759 = load i64, i64* %RAX
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 4
  store i64 %761, i64* %PC
  %762 = inttoptr i64 %758 to i64*
  store i64 %759, i64* %762
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 16
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 4
  store i64 %766, i64* %PC
  %767 = inttoptr i64 %764 to i64*
  %768 = load i64, i64* %767
  store i64 %768, i64* %RAX, align 8, !tbaa !2428
  %769 = load i64, i64* %RAX
  %770 = add i64 %769, 16
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 8
  store i64 %772, i64* %PC
  %773 = inttoptr i64 %770 to i64*
  store i64 0, i64* %773
  %774 = load i64, i64* %RBP
  %775 = sub i64 %774, 16
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 4
  store i64 %777, i64* %PC
  %778 = inttoptr i64 %775 to i64*
  %779 = load i64, i64* %778
  store i64 %779, i64* %RAX, align 8, !tbaa !2428
  %780 = load i64, i64* %RAX
  %781 = load i64, i64* %PC
  %782 = add i64 %781, 4
  store i64 %782, i64* %PC
  %783 = add i64 104, %780
  store i64 %783, i64* %RAX, align 8, !tbaa !2428
  %784 = icmp ult i64 %783, %780
  %785 = icmp ult i64 %783, 104
  %786 = or i1 %784, %785
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %787, i8* %788, align 1, !tbaa !2432
  %789 = trunc i64 %783 to i32
  %790 = and i32 %789, 255
  %791 = call i32 @llvm.ctpop.i32(i32 %790) #16
  %792 = trunc i32 %791 to i8
  %793 = and i8 %792, 1
  %794 = xor i8 %793, 1
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %794, i8* %795, align 1, !tbaa !2446
  %796 = xor i64 104, %780
  %797 = xor i64 %796, %783
  %798 = lshr i64 %797, 4
  %799 = trunc i64 %798 to i8
  %800 = and i8 %799, 1
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %800, i8* %801, align 1, !tbaa !2447
  %802 = icmp eq i64 %783, 0
  %803 = zext i1 %802 to i8
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %803, i8* %804, align 1, !tbaa !2448
  %805 = lshr i64 %783, 63
  %806 = trunc i64 %805 to i8
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %806, i8* %807, align 1, !tbaa !2449
  %808 = lshr i64 %780, 63
  %809 = xor i64 %805, %808
  %810 = add nuw nsw i64 %809, %805
  %811 = icmp eq i64 %810, 2
  %812 = zext i1 %811 to i8
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %812, i8* %813, align 1, !tbaa !2450
  %814 = load i64, i64* %RBP
  %815 = sub i64 %814, 16
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 4
  store i64 %817, i64* %PC
  %818 = inttoptr i64 %815 to i64*
  %819 = load i64, i64* %818
  store i64 %819, i64* %RCX, align 8, !tbaa !2428
  %820 = load i64, i64* %RCX
  %821 = add i64 %820, 32
  %822 = load i64, i64* %RAX
  %823 = load i64, i64* %PC
  %824 = add i64 %823, 4
  store i64 %824, i64* %PC
  %825 = inttoptr i64 %821 to i64*
  store i64 %822, i64* %825
  %826 = load i64, i64* %RBP
  %827 = sub i64 %826, 16
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 4
  store i64 %829, i64* %PC
  %830 = inttoptr i64 %827 to i64*
  %831 = load i64, i64* %830
  store i64 %831, i64* %RAX, align 8, !tbaa !2428
  %832 = load i64, i64* %RAX
  %833 = load i64, i64* %PC
  %834 = add i64 %833, 4
  store i64 %834, i64* %PC
  %835 = add i64 -104, %832
  store i64 %835, i64* %RAX, align 8, !tbaa !2428
  %836 = icmp ult i64 %835, %832
  %837 = icmp ult i64 %835, -104
  %838 = or i1 %836, %837
  %839 = zext i1 %838 to i8
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %839, i8* %840, align 1, !tbaa !2432
  %841 = trunc i64 %835 to i32
  %842 = and i32 %841, 255
  %843 = call i32 @llvm.ctpop.i32(i32 %842) #16
  %844 = trunc i32 %843 to i8
  %845 = and i8 %844, 1
  %846 = xor i8 %845, 1
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %846, i8* %847, align 1, !tbaa !2446
  %848 = xor i64 -104, %832
  %849 = xor i64 %848, %835
  %850 = lshr i64 %849, 4
  %851 = trunc i64 %850 to i8
  %852 = and i8 %851, 1
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %852, i8* %853, align 1, !tbaa !2447
  %854 = icmp eq i64 %835, 0
  %855 = zext i1 %854 to i8
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %855, i8* %856, align 1, !tbaa !2448
  %857 = lshr i64 %835, 63
  %858 = trunc i64 %857 to i8
  %859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %858, i8* %859, align 1, !tbaa !2449
  %860 = lshr i64 %832, 63
  %861 = xor i64 %857, %860
  %862 = xor i64 %857, 1
  %863 = add nuw nsw i64 %861, %862
  %864 = icmp eq i64 %863, 2
  %865 = zext i1 %864 to i8
  %866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %865, i8* %866, align 1, !tbaa !2450
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 16
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 4
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i64*
  %872 = load i64, i64* %871
  store i64 %872, i64* %RCX, align 8, !tbaa !2428
  %873 = load i64, i64* %RCX
  %874 = add i64 %873, 40
  %875 = load i64, i64* %RAX
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 4
  store i64 %877, i64* %PC
  %878 = inttoptr i64 %874 to i64*
  store i64 %875, i64* %878
  %879 = load i64, i64* %RBP
  %880 = sub i64 %879, 16
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 4
  store i64 %882, i64* %PC
  %883 = inttoptr i64 %880 to i64*
  %884 = load i64, i64* %883
  store i64 %884, i64* %RAX, align 8, !tbaa !2428
  %885 = load i64, i64* %RAX
  %886 = add i64 %885, 88
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 8
  store i64 %888, i64* %PC
  %889 = inttoptr i64 %886 to i64*
  store i64 1, i64* %889
  %890 = load i64, i64* %RBP
  %891 = sub i64 %890, 32
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 4
  store i64 %893, i64* %PC
  %894 = inttoptr i64 %891 to i64*
  %895 = load i64, i64* %894
  store i64 %895, i64* %RAX, align 8, !tbaa !2428
  %896 = load i64, i64* %RAX
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 7
  store i64 %898, i64* %PC
  %899 = inttoptr i64 %896 to i64*
  store i64 100000000, i64* %899
  %900 = load i64, i64* %RBP
  %901 = sub i64 %900, 32
  %902 = load i64, i64* %PC
  %903 = add i64 %902, 4
  store i64 %903, i64* %PC
  %904 = inttoptr i64 %901 to i64*
  %905 = load i64, i64* %904
  store i64 %905, i64* %RAX, align 8, !tbaa !2428
  %906 = load i64, i64* %RAX
  %907 = add i64 %906, 24
  %908 = load i64, i64* %PC
  %909 = add i64 %908, 7
  store i64 %909, i64* %PC
  %910 = inttoptr i64 %907 to i32*
  store i32 0, i32* %910
  %911 = load i64, i64* %RBP
  %912 = sub i64 %911, 16
  %913 = load i64, i64* %PC
  %914 = add i64 %913, 4
  store i64 %914, i64* %PC
  %915 = inttoptr i64 %912 to i64*
  %916 = load i64, i64* %915
  store i64 %916, i64* %RAX, align 8, !tbaa !2428
  %917 = load i64, i64* %RAX
  %918 = add i64 %917, 8
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 7
  store i64 %920, i64* %PC
  %921 = inttoptr i64 %918 to i32*
  store i32 1, i32* %921
  %922 = load i64, i64* %RBP
  %923 = sub i64 %922, 16
  %924 = load i64, i64* %PC
  %925 = add i64 %924, 4
  store i64 %925, i64* %PC
  %926 = inttoptr i64 %923 to i64*
  %927 = load i64, i64* %926
  store i64 %927, i64* %RAX, align 8, !tbaa !2428
  %928 = load i64, i64* %RAX
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 7
  store i64 %930, i64* %PC
  %931 = inttoptr i64 %928 to i64*
  store i64 0, i64* %931
  %932 = load i64, i64* %RBP
  %933 = sub i64 %932, 16
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 4
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to i64*
  %937 = load i64, i64* %936
  store i64 %937, i64* %RAX, align 8, !tbaa !2428
  %938 = load i64, i64* %RBP
  %939 = sub i64 %938, 32
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 4
  store i64 %941, i64* %PC
  %942 = inttoptr i64 %939 to i64*
  %943 = load i64, i64* %942
  store i64 %943, i64* %RCX, align 8, !tbaa !2428
  %944 = load i64, i64* %RCX
  %945 = add i64 %944, 8
  %946 = load i64, i64* %RAX
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 4
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %945 to i64*
  store i64 %946, i64* %949
  %950 = load i64, i64* %RBP
  %951 = sub i64 %950, 24
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 4
  store i64 %953, i64* %PC
  %954 = inttoptr i64 %951 to i64*
  %955 = load i64, i64* %954
  store i64 %955, i64* %RAX, align 8, !tbaa !2428
  %956 = load i64, i64* %RBP
  %957 = sub i64 %956, 32
  %958 = load i64, i64* %PC
  %959 = add i64 %958, 4
  store i64 %959, i64* %PC
  %960 = inttoptr i64 %957 to i64*
  %961 = load i64, i64* %960
  store i64 %961, i64* %RCX, align 8, !tbaa !2428
  %962 = load i64, i64* %RCX
  %963 = add i64 %962, 16
  %964 = load i64, i64* %RAX
  %965 = load i64, i64* %PC
  %966 = add i64 %965, 4
  store i64 %966, i64* %PC
  %967 = inttoptr i64 %963 to i64*
  store i64 %964, i64* %967
  %968 = load i64, i64* %RBP
  %969 = sub i64 %968, 16
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 4
  store i64 %971, i64* %PC
  %972 = inttoptr i64 %969 to i64*
  %973 = load i64, i64* %972
  store i64 %973, i64* %RAX, align 8, !tbaa !2428
  %974 = load i64, i64* %RAX
  %975 = add i64 %974, 80
  %976 = load i64, i64* %PC
  %977 = add i64 %976, 8
  store i64 %977, i64* %PC
  %978 = inttoptr i64 %975 to i64*
  store i64 0, i64* %978
  %979 = load i64, i64* %RBP
  %980 = sub i64 %979, 32
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 4
  store i64 %982, i64* %PC
  %983 = inttoptr i64 %980 to i64*
  %984 = load i64, i64* %983
  store i64 %984, i64* %RAX, align 8, !tbaa !2428
  %985 = load i64, i64* %RAX
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 4
  store i64 %987, i64* %PC
  %988 = add i64 64, %985
  store i64 %988, i64* %RAX, align 8, !tbaa !2428
  %989 = icmp ult i64 %988, %985
  %990 = icmp ult i64 %988, 64
  %991 = or i1 %989, %990
  %992 = zext i1 %991 to i8
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %992, i8* %993, align 1, !tbaa !2432
  %994 = trunc i64 %988 to i32
  %995 = and i32 %994, 255
  %996 = call i32 @llvm.ctpop.i32(i32 %995) #16
  %997 = trunc i32 %996 to i8
  %998 = and i8 %997, 1
  %999 = xor i8 %998, 1
  %1000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %999, i8* %1000, align 1, !tbaa !2446
  %1001 = xor i64 64, %985
  %1002 = xor i64 %1001, %988
  %1003 = lshr i64 %1002, 4
  %1004 = trunc i64 %1003 to i8
  %1005 = and i8 %1004, 1
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1005, i8* %1006, align 1, !tbaa !2447
  %1007 = icmp eq i64 %988, 0
  %1008 = zext i1 %1007 to i8
  %1009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1008, i8* %1009, align 1, !tbaa !2448
  %1010 = lshr i64 %988, 63
  %1011 = trunc i64 %1010 to i8
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1011, i8* %1012, align 1, !tbaa !2449
  %1013 = lshr i64 %985, 63
  %1014 = xor i64 %1010, %1013
  %1015 = add nuw nsw i64 %1014, %1010
  %1016 = icmp eq i64 %1015, 2
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1017, i8* %1018, align 1, !tbaa !2450
  %1019 = load i64, i64* %RBP
  %1020 = sub i64 %1019, 32
  %1021 = load i64, i64* %RAX
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 4
  store i64 %1023, i64* %PC
  %1024 = inttoptr i64 %1020 to i64*
  store i64 %1021, i64* %1024
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 16
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 4
  store i64 %1028, i64* %PC
  %1029 = inttoptr i64 %1026 to i64*
  %1030 = load i64, i64* %1029
  store i64 %1030, i64* %RAX, align 8, !tbaa !2428
  %1031 = load i64, i64* %RAX
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 4
  store i64 %1033, i64* %PC
  %1034 = add i64 104, %1031
  store i64 %1034, i64* %RAX, align 8, !tbaa !2428
  %1035 = icmp ult i64 %1034, %1031
  %1036 = icmp ult i64 %1034, 104
  %1037 = or i1 %1035, %1036
  %1038 = zext i1 %1037 to i8
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1038, i8* %1039, align 1, !tbaa !2432
  %1040 = trunc i64 %1034 to i32
  %1041 = and i32 %1040, 255
  %1042 = call i32 @llvm.ctpop.i32(i32 %1041) #16
  %1043 = trunc i32 %1042 to i8
  %1044 = and i8 %1043, 1
  %1045 = xor i8 %1044, 1
  %1046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1045, i8* %1046, align 1, !tbaa !2446
  %1047 = xor i64 104, %1031
  %1048 = xor i64 %1047, %1034
  %1049 = lshr i64 %1048, 4
  %1050 = trunc i64 %1049 to i8
  %1051 = and i8 %1050, 1
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1051, i8* %1052, align 1, !tbaa !2447
  %1053 = icmp eq i64 %1034, 0
  %1054 = zext i1 %1053 to i8
  %1055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1054, i8* %1055, align 1, !tbaa !2448
  %1056 = lshr i64 %1034, 63
  %1057 = trunc i64 %1056 to i8
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1057, i8* %1058, align 1, !tbaa !2449
  %1059 = lshr i64 %1031, 63
  %1060 = xor i64 %1056, %1059
  %1061 = add nuw nsw i64 %1060, %1056
  %1062 = icmp eq i64 %1061, 2
  %1063 = zext i1 %1062 to i8
  %1064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1063, i8* %1064, align 1, !tbaa !2450
  %1065 = load i64, i64* %RBP
  %1066 = sub i64 %1065, 16
  %1067 = load i64, i64* %RAX
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 4
  store i64 %1069, i64* %PC
  %1070 = inttoptr i64 %1066 to i64*
  store i64 %1067, i64* %1070
  %1071 = load i64, i64* %PC
  %1072 = sub i64 %1071, 201
  %1073 = load i64, i64* %PC
  %1074 = add i64 %1073, 5
  store i64 %1074, i64* %PC
  %1075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1072, i64* %1075, align 8, !tbaa !2428
  br label %block_4034b8
}

; Function Attrs: noinline
define %struct.Memory* @sub_404714__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404714:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400970_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400970:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (i64* @stdout to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (i64* @stdout to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (i64* @stdout to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (i64* @stdout to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_4009a8, label %block_400993

block_40099d:                                     ; preds = %block_400993
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 1
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RBP, align 8, !tbaa !2428
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  store i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 2
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  switch i64 %204, label %270 [
    i64 4196778, label %block_4009aa
    i64 4196773, label %block_4009a5
  ]

block_4009aa:                                     ; preds = %block_40099d
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %RAX
  %207 = add i64 %206, %205
  %208 = load i16, i16* %AX
  %209 = zext i16 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 6
  store i64 %211, i64* %PC
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @sub_4009b0___do_global_dtors_aux(%struct.State* %0, i64 %212, %struct.Memory* %2)
  ret %struct.Memory* %213

block_400993:                                     ; preds = %block_400970
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 3
  store i64 %219, i64* %PC
  %220 = and i64 %217, %216
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2432
  %222 = trunc i64 %220 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2446
  %229 = icmp eq i64 %220, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2448
  %232 = lshr i64 %220, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2449
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %235, align 1, !tbaa !2450
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2447
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 13
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 2
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %244 = load i8, i8* %243, align 1, !tbaa !2448
  store i8 %244, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %246 = icmp ne i8 %244, 0
  %247 = select i1 %246, i64 %238, i64 %240
  store i64 %247, i64* %245, align 8, !tbaa !2428
  %248 = load i8, i8* %BRANCH_TAKEN
  %249 = icmp eq i8 %248, 1
  br i1 %249, label %block_4009a8, label %block_40099d

block_4009a8:                                     ; preds = %block_4009a5, %block_400993, %block_400970
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400970 ], [ %2, %block_400993 ], [ %2, %block_4009a5 ]
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 1
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %253 = load i64, i64* %252, align 8, !tbaa !2428
  %254 = add i64 %253, 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RBP, align 8, !tbaa !2428
  store i64 %254, i64* %252, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 1
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %259, align 8, !tbaa !2428
  %264 = add i64 %261, 8
  store i64 %264, i64* %260, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4009a5:                                     ; preds = %block_40099d
  %265 = load i64, i64* %RAX
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  br label %block_4009a8

; <label>:270:                                    ; preds = %block_40099d
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_401db0_flow_cost(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401db0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RCX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RDI = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 13
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSP = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 15
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RBP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %22 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %21, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %22 to %"class.std::bitset"*
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %24 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %23, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %24 to %"class.std::bitset"*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %26 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %25, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %26 to %union.vec128_t*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i64, i64* %RDI
  %40 = load i64, i64* %PC
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42
  %43 = load i64, i64* %RBP
  %44 = sub i64 %43, 40
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 8
  store i64 %46, i64* %PC
  %47 = inttoptr i64 %44 to i64*
  store i64 0, i64* %47
  %48 = load i64, i64* %RBP
  %49 = sub i64 %48, 48
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 8
  store i64 %51, i64* %PC
  %52 = inttoptr i64 %49 to i64*
  store i64 0, i64* %52
  %53 = load i64, i64* %RBP
  %54 = sub i64 %53, 8
  %55 = load i64, i64* %PC
  %56 = add i64 %55, 4
  store i64 %56, i64* %PC
  %57 = inttoptr i64 %54 to i64*
  %58 = load i64, i64* %57
  store i64 %58, i64* %RDI, align 8, !tbaa !2428
  %59 = load i64, i64* %RDI
  %60 = add i64 %59, 576
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 7
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = load i64, i64* %RBP
  %66 = sub i64 %65, 32
  %67 = load i64, i64* %RDI
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC
  %70 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %70
  %71 = load i64, i64* %RBP
  %72 = sub i64 %71, 8
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75
  store i64 %76, i64* %RDI, align 8, !tbaa !2428
  %77 = load i64, i64* %RDI
  %78 = add i64 %77, 568
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81
  store i64 %82, i64* %RDI, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %RDI
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC
  %88 = inttoptr i64 %84 to i64*
  store i64 %85, i64* %88
  br label %block_401de6

block_401efa:                                     ; preds = %block_401ed6, %block_401ee8
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.5, %block_401ed6 ], [ %MEMORY.5, %block_401ee8 ]
  %89 = load i64, i64* %RBP
  %90 = sub i64 %89, 16
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC
  %93 = inttoptr i64 %90 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %95 = load i64, i64* %RAX
  %96 = add i64 %95, 8
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = load i64, i64* %RAX
  %102 = add i64 %101, 96
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %107, align 1, !tbaa !2432
  %108 = and i32 %106, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %112, i8* %113, align 1, !tbaa !2446
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i32 %106, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i32 %106, 31
  %119 = trunc i32 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i32 %106, 31
  %122 = xor i32 %118, %121
  %123 = add nuw nsw i32 %122, %121
  %124 = icmp eq i32 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 49
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 6
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 6
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %134 = load i8, i8* %133, align 1, !tbaa !2448
  %135 = icmp eq i8 %134, 0
  %136 = zext i1 %135 to i8
  store i8 %136, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %138 = select i1 %135, i64 %128, i64 %130
  store i64 %138, i64* %137, align 8, !tbaa !2428
  %139 = load i8, i8* %BRANCH_TAKEN
  %140 = icmp eq i8 %139, 1
  %141 = load i64, i64* %RBP
  %142 = sub i64 %141, 16
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 4
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %142 to i64*
  %146 = load i64, i64* %145
  store i64 %146, i64* %RAX, align 8, !tbaa !2428
  %147 = load i64, i64* %RAX
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 3
  store i64 %149, i64* %PC
  %150 = inttoptr i64 %147 to i64*
  %151 = load i64, i64* %150
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  br i1 %140, label %block_401f37, label %block_401f0c

block_401df7:                                     ; preds = %block_401de6
  %152 = sub i64 %416, 16
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 4
  store i64 %154, i64* %PC
  %155 = inttoptr i64 %152 to i64*
  %156 = load i64, i64* %155
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = load i64, i64* %RAX
  %158 = add i64 %157, 24
  %159 = load i64, i64* %PC
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC
  %161 = inttoptr i64 %158 to i32*
  %162 = load i32, i32* %161
  %163 = sub i32 %162, 2
  %164 = icmp ult i32 %162, 2
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %165, i8* %166, align 1, !tbaa !2432
  %167 = and i32 %163, 255
  %168 = call i32 @llvm.ctpop.i32(i32 %167) #16
  %169 = trunc i32 %168 to i8
  %170 = and i8 %169, 1
  %171 = xor i8 %170, 1
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %171, i8* %172, align 1, !tbaa !2446
  %173 = xor i32 %162, 2
  %174 = xor i32 %173, %163
  %175 = lshr i32 %174, 4
  %176 = trunc i32 %175 to i8
  %177 = and i8 %176, 1
  %178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %177, i8* %178, align 1, !tbaa !2447
  %179 = icmp eq i32 %163, 0
  %180 = zext i1 %179 to i8
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %180, i8* %181, align 1, !tbaa !2448
  %182 = lshr i32 %163, 31
  %183 = trunc i32 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %183, i8* %184, align 1, !tbaa !2449
  %185 = lshr i32 %162, 31
  %186 = xor i32 %182, %185
  %187 = add nuw nsw i32 %186, %185
  %188 = icmp eq i32 %187, 2
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %189, i8* %190, align 1, !tbaa !2450
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 23
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 6
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 6
  store i64 %196, i64* %PC
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %198 = load i8, i8* %197, align 1, !tbaa !2448
  %199 = icmp eq i8 %198, 0
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %202 = select i1 %199, i64 %192, i64 %194
  store i64 %202, i64* %201, align 8, !tbaa !2428
  %203 = load i8, i8* %BRANCH_TAKEN
  %204 = icmp eq i8 %203, 1
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 16
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = load i64, i64* %RAX
  %212 = add i64 %211, 48
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 8
  store i64 %214, i64* %PC
  br i1 %204, label %block_401e16, label %block_401e05

block_401e73:                                     ; preds = %block_401e62
  %215 = sub i64 %477, 24
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 4
  store i64 %217, i64* %PC
  %218 = inttoptr i64 %215 to i64*
  %219 = load i64, i64* %218
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = load i64, i64* %RAX
  %221 = add i64 %220, 80
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 4
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 24
  %228 = load i64, i64* %PC
  %229 = add i64 %228, 4
  store i64 %229, i64* %PC
  %230 = inttoptr i64 %227 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %RCX, align 8, !tbaa !2428
  %232 = load i64, i64* %RCX
  %233 = add i64 %232, 48
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i64*
  %237 = load i64, i64* %236
  store i64 %237, i64* %RCX, align 8, !tbaa !2428
  %238 = load i64, i64* %RCX
  %239 = add i64 %238, 48
  %240 = load i64, i64* %RAX
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 4
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %239 to i64*
  store i64 %240, i64* %243
  %244 = load i64, i64* %RBP
  %245 = sub i64 %244, 24
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC
  %248 = inttoptr i64 %245 to i64*
  %249 = load i64, i64* %248
  store i64 %249, i64* %RAX, align 8, !tbaa !2428
  %250 = load i64, i64* %RAX
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC
  %253 = add i64 104, %250
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = icmp ult i64 %253, %250
  %255 = icmp ult i64 %253, 104
  %256 = or i1 %254, %255
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %257, i8* %258, align 1, !tbaa !2432
  %259 = trunc i64 %253 to i32
  %260 = and i32 %259, 255
  %261 = call i32 @llvm.ctpop.i32(i32 %260) #16
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = xor i8 %263, 1
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %264, i8* %265, align 1, !tbaa !2446
  %266 = xor i64 104, %250
  %267 = xor i64 %266, %253
  %268 = lshr i64 %267, 4
  %269 = trunc i64 %268 to i8
  %270 = and i8 %269, 1
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %270, i8* %271, align 1, !tbaa !2447
  %272 = icmp eq i64 %253, 0
  %273 = zext i1 %272 to i8
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %273, i8* %274, align 1, !tbaa !2448
  %275 = lshr i64 %253, 63
  %276 = trunc i64 %275 to i8
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %276, i8* %277, align 1, !tbaa !2449
  %278 = lshr i64 %250, 63
  %279 = xor i64 %275, %278
  %280 = add nuw nsw i64 %279, %275
  %281 = icmp eq i64 %280, 2
  %282 = zext i1 %281 to i8
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %282, i8* %283, align 1, !tbaa !2450
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 24
  %286 = load i64, i64* %RAX
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC
  %289 = inttoptr i64 %285 to i64*
  store i64 %286, i64* %289
  %290 = load i64, i64* %PC
  %291 = sub i64 %290, 49
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 5
  store i64 %293, i64* %PC
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %291, i64* %294, align 8, !tbaa !2428
  br label %block_401e62

block_401ee8:                                     ; preds = %block_401ed6
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 16
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %296 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %RAX, align 8, !tbaa !2428
  %301 = load i64, i64* %RAX
  %302 = add i64 %301, 16
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 4
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %302 to i64*
  %306 = load i64, i64* %305
  store i64 %306, i64* %RAX, align 8, !tbaa !2428
  %307 = load i64, i64* %RAX
  %308 = add i64 %307, 96
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 4
  store i64 %310, i64* %PC
  %311 = inttoptr i64 %308 to i32*
  %312 = load i32, i32* %311
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %313, align 1, !tbaa !2432
  %314 = and i32 %312, 255
  %315 = call i32 @llvm.ctpop.i32(i32 %314) #16
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %318, i8* %319, align 1, !tbaa !2446
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %320, align 1, !tbaa !2447
  %321 = icmp eq i32 %312, 0
  %322 = zext i1 %321 to i8
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %322, i8* %323, align 1, !tbaa !2448
  %324 = lshr i32 %312, 31
  %325 = trunc i32 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %325, i8* %326, align 1, !tbaa !2449
  %327 = lshr i32 %312, 31
  %328 = xor i32 %324, %327
  %329 = add nuw nsw i32 %328, %327
  %330 = icmp eq i32 %329, 2
  %331 = zext i1 %330 to i8
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %331, i8* %332, align 1, !tbaa !2450
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 87
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 6
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 6
  store i64 %338, i64* %PC
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %340 = load i8, i8* %339, align 1, !tbaa !2448
  %341 = icmp eq i8 %340, 0
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %343 = load i8, i8* %342, align 1, !tbaa !2449
  %344 = icmp ne i8 %343, 0
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %346 = load i8, i8* %345, align 1, !tbaa !2450
  %347 = icmp ne i8 %346, 0
  %348 = xor i1 %344, %347
  %349 = xor i1 %348, true
  %350 = and i1 %341, %349
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %353 = select i1 %350, i64 %334, i64 %336
  store i64 %353, i64* %352, align 8, !tbaa !2428
  %354 = load i8, i8* %BRANCH_TAKEN
  %355 = icmp eq i8 %354, 1
  br i1 %355, label %block_401f4b, label %block_401efa

block_401de6:                                     ; preds = %block_401e22, %block_401db0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401db0 ], [ %MEMORY.7, %block_401e22 ]
  %356 = load i64, i64* %RBP
  %357 = sub i64 %356, 16
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 4
  store i64 %359, i64* %PC
  %360 = inttoptr i64 %357 to i64*
  %361 = load i64, i64* %360
  store i64 %361, i64* %RAX, align 8, !tbaa !2428
  %362 = load i64, i64* %RBP
  %363 = sub i64 %362, 32
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 4
  store i64 %365, i64* %PC
  %366 = inttoptr i64 %363 to i64*
  %367 = load i64, i64* %366
  store i64 %367, i64* %RCX, align 8, !tbaa !2428
  %368 = load i64, i64* %RAX
  %369 = load i64, i64* %RCX
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC
  %372 = sub i64 %368, %369
  %373 = icmp ult i64 %368, %369
  %374 = zext i1 %373 to i8
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %374, i8* %375, align 1, !tbaa !2432
  %376 = trunc i64 %372 to i32
  %377 = and i32 %376, 255
  %378 = call i32 @llvm.ctpop.i32(i32 %377) #16
  %379 = trunc i32 %378 to i8
  %380 = and i8 %379, 1
  %381 = xor i8 %380, 1
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %381, i8* %382, align 1, !tbaa !2446
  %383 = xor i64 %369, %368
  %384 = xor i64 %383, %372
  %385 = lshr i64 %384, 4
  %386 = trunc i64 %385 to i8
  %387 = and i8 %386, 1
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %387, i8* %388, align 1, !tbaa !2447
  %389 = icmp eq i64 %372, 0
  %390 = zext i1 %389 to i8
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %390, i8* %391, align 1, !tbaa !2448
  %392 = lshr i64 %372, 63
  %393 = trunc i64 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %393, i8* %394, align 1, !tbaa !2449
  %395 = lshr i64 %368, 63
  %396 = lshr i64 %369, 63
  %397 = xor i64 %396, %395
  %398 = xor i64 %392, %395
  %399 = add nuw nsw i64 %398, %397
  %400 = icmp eq i64 %399, 2
  %401 = zext i1 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %401, i8* %402, align 1, !tbaa !2450
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 71
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 6
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 6
  store i64 %408, i64* %PC
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %410 = load i8, i8* %409, align 1, !tbaa !2448
  store i8 %410, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %412 = icmp ne i8 %410, 0
  %413 = select i1 %412, i64 %404, i64 %406
  store i64 %413, i64* %411, align 8, !tbaa !2428
  %414 = load i8, i8* %BRANCH_TAKEN
  %415 = icmp eq i8 %414, 1
  %416 = load i64, i64* %RBP
  br i1 %415, label %block_401e38, label %block_401df7

block_401e62:                                     ; preds = %block_401e38, %block_401e73
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_401e38 ], [ %MEMORY.2, %block_401e73 ]
  %417 = load i64, i64* %RBP
  %418 = sub i64 %417, 24
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 4
  store i64 %420, i64* %PC
  %421 = inttoptr i64 %418 to i64*
  %422 = load i64, i64* %421
  store i64 %422, i64* %RAX, align 8, !tbaa !2428
  %423 = load i64, i64* %RBP
  %424 = sub i64 %423, 32
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 4
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i64*
  %428 = load i64, i64* %427
  store i64 %428, i64* %RCX, align 8, !tbaa !2428
  %429 = load i64, i64* %RAX
  %430 = load i64, i64* %RCX
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 3
  store i64 %432, i64* %PC
  %433 = sub i64 %429, %430
  %434 = icmp ult i64 %429, %430
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %435, i8* %436, align 1, !tbaa !2432
  %437 = trunc i64 %433 to i32
  %438 = and i32 %437, 255
  %439 = call i32 @llvm.ctpop.i32(i32 %438) #16
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  %442 = xor i8 %441, 1
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %442, i8* %443, align 1, !tbaa !2446
  %444 = xor i64 %430, %429
  %445 = xor i64 %444, %433
  %446 = lshr i64 %445, 4
  %447 = trunc i64 %446 to i8
  %448 = and i8 %447, 1
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %448, i8* %449, align 1, !tbaa !2447
  %450 = icmp eq i64 %433, 0
  %451 = zext i1 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %451, i8* %452, align 1, !tbaa !2448
  %453 = lshr i64 %433, 63
  %454 = trunc i64 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %454, i8* %455, align 1, !tbaa !2449
  %456 = lshr i64 %429, 63
  %457 = lshr i64 %430, 63
  %458 = xor i64 %457, %456
  %459 = xor i64 %453, %456
  %460 = add nuw nsw i64 %459, %458
  %461 = icmp eq i64 %460, 2
  %462 = zext i1 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %462, i8* %463, align 1, !tbaa !2450
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 43
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 6
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 6
  store i64 %469, i64* %PC
  %470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %471 = load i8, i8* %470, align 1, !tbaa !2448
  store i8 %471, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %473 = icmp ne i8 %471, 0
  %474 = select i1 %473, i64 %465, i64 %467
  store i64 %474, i64* %472, align 8, !tbaa !2428
  %475 = load i8, i8* %BRANCH_TAKEN
  %476 = icmp eq i8 %475, 1
  %477 = load i64, i64* %RBP
  br i1 %476, label %block_401e98, label %block_401e73

block_401ed6:                                     ; preds = %block_401ec7
  %478 = load i64, i64* %RBP
  %479 = sub i64 %478, 16
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 4
  store i64 %481, i64* %PC
  %482 = inttoptr i64 %479 to i64*
  %483 = load i64, i64* %482
  store i64 %483, i64* %RAX, align 8, !tbaa !2428
  %484 = load i64, i64* %RAX
  %485 = add i64 %484, 8
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 4
  store i64 %487, i64* %PC
  %488 = inttoptr i64 %485 to i64*
  %489 = load i64, i64* %488
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = load i64, i64* %RAX
  %491 = add i64 %490, 96
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 4
  store i64 %493, i64* %PC
  %494 = inttoptr i64 %491 to i32*
  %495 = load i32, i32* %494
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %496, align 1, !tbaa !2432
  %497 = and i32 %495, 255
  %498 = call i32 @llvm.ctpop.i32(i32 %497) #16
  %499 = trunc i32 %498 to i8
  %500 = and i8 %499, 1
  %501 = xor i8 %500, 1
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %501, i8* %502, align 1, !tbaa !2446
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %503, align 1, !tbaa !2447
  %504 = icmp eq i32 %495, 0
  %505 = zext i1 %504 to i8
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %505, i8* %506, align 1, !tbaa !2448
  %507 = lshr i32 %495, 31
  %508 = trunc i32 %507 to i8
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %508, i8* %509, align 1, !tbaa !2449
  %510 = lshr i32 %495, 31
  %511 = xor i32 %507, %510
  %512 = add nuw nsw i32 %511, %510
  %513 = icmp eq i32 %512, 2
  %514 = zext i1 %513 to i8
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %514, i8* %515, align 1, !tbaa !2450
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 24
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 6
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 6
  store i64 %521, i64* %PC
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %523 = load i8, i8* %522, align 1, !tbaa !2449
  %524 = icmp ne i8 %523, 0
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %526 = load i8, i8* %525, align 1, !tbaa !2450
  %527 = icmp ne i8 %526, 0
  %528 = xor i1 %524, %527
  %529 = xor i1 %528, true
  %530 = zext i1 %529 to i8
  store i8 %530, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %532 = select i1 %528, i64 %519, i64 %517
  store i64 %532, i64* %531, align 8, !tbaa !2428
  %533 = load i8, i8* %BRANCH_TAKEN
  %534 = icmp eq i8 %533, 1
  br i1 %534, label %block_401efa, label %block_401ee8

block_401f50:                                     ; preds = %block_401ec7, %block_401f4b
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.5, %block_401ec7 ], [ %MEMORY.4, %block_401f4b ]
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 5
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 5
  store i64 %538, i64* %PC
  %539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %536, i64* %539, align 8, !tbaa !2428
  %540 = load i64, i64* %RBP
  %541 = sub i64 %540, 16
  %542 = load i64, i64* %PC
  %543 = add i64 %542, 4
  store i64 %543, i64* %PC
  %544 = inttoptr i64 %541 to i64*
  %545 = load i64, i64* %544
  store i64 %545, i64* %RAX, align 8, !tbaa !2428
  %546 = load i64, i64* %RAX
  %547 = load i64, i64* %PC
  %548 = add i64 %547, 4
  store i64 %548, i64* %PC
  %549 = add i64 64, %546
  store i64 %549, i64* %RAX, align 8, !tbaa !2428
  %550 = icmp ult i64 %549, %546
  %551 = icmp ult i64 %549, 64
  %552 = or i1 %550, %551
  %553 = zext i1 %552 to i8
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %553, i8* %554, align 1, !tbaa !2432
  %555 = trunc i64 %549 to i32
  %556 = and i32 %555, 255
  %557 = call i32 @llvm.ctpop.i32(i32 %556) #16
  %558 = trunc i32 %557 to i8
  %559 = and i8 %558, 1
  %560 = xor i8 %559, 1
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %560, i8* %561, align 1, !tbaa !2446
  %562 = xor i64 64, %546
  %563 = xor i64 %562, %549
  %564 = lshr i64 %563, 4
  %565 = trunc i64 %564 to i8
  %566 = and i8 %565, 1
  %567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %566, i8* %567, align 1, !tbaa !2447
  %568 = icmp eq i64 %549, 0
  %569 = zext i1 %568 to i8
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %569, i8* %570, align 1, !tbaa !2448
  %571 = lshr i64 %549, 63
  %572 = trunc i64 %571 to i8
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %572, i8* %573, align 1, !tbaa !2449
  %574 = lshr i64 %546, 63
  %575 = xor i64 %571, %574
  %576 = add nuw nsw i64 %575, %571
  %577 = icmp eq i64 %576, 2
  %578 = zext i1 %577 to i8
  %579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %578, i8* %579, align 1, !tbaa !2450
  %580 = load i64, i64* %RBP
  %581 = sub i64 %580, 16
  %582 = load i64, i64* %RAX
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 4
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %581 to i64*
  store i64 %582, i64* %585
  %586 = load i64, i64* %PC
  %587 = sub i64 %586, 171
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 5
  store i64 %589, i64* %PC
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %587, i64* %590, align 8, !tbaa !2428
  br label %block_401eb6

block_401f4b:                                     ; preds = %block_401f46, %block_401ee8
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.6, %block_401f46 ], [ %MEMORY.5, %block_401ee8 ]
  %591 = load i64, i64* %PC
  %592 = add i64 %591, 5
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 5
  store i64 %594, i64* %PC
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %592, i64* %595, align 8, !tbaa !2428
  br label %block_401f50

block_401ec7:                                     ; preds = %block_401eb6
  %596 = load i64, i64* %RBP
  %597 = sub i64 %596, 16
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 4
  store i64 %599, i64* %PC
  %600 = inttoptr i64 %597 to i64*
  %601 = load i64, i64* %600
  store i64 %601, i64* %RAX, align 8, !tbaa !2428
  %602 = load i64, i64* %RAX
  %603 = add i64 %602, 48
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 5
  store i64 %605, i64* %PC
  %606 = inttoptr i64 %603 to i64*
  %607 = load i64, i64* %606
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %608, align 1, !tbaa !2432
  %609 = trunc i64 %607 to i32
  %610 = and i32 %609, 255
  %611 = call i32 @llvm.ctpop.i32(i32 %610) #16
  %612 = trunc i32 %611 to i8
  %613 = and i8 %612, 1
  %614 = xor i8 %613, 1
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %614, i8* %615, align 1, !tbaa !2446
  %616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %616, align 1, !tbaa !2447
  %617 = icmp eq i64 %607, 0
  %618 = zext i1 %617 to i8
  %619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %618, i8* %619, align 1, !tbaa !2448
  %620 = lshr i64 %607, 63
  %621 = trunc i64 %620 to i8
  %622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %621, i8* %622, align 1, !tbaa !2449
  %623 = lshr i64 %607, 63
  %624 = xor i64 %620, %623
  %625 = add nuw nsw i64 %624, %623
  %626 = icmp eq i64 %625, 2
  %627 = zext i1 %626 to i8
  %628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %627, i8* %628, align 1, !tbaa !2450
  %629 = load i64, i64* %PC
  %630 = add i64 %629, 128
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 6
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 6
  store i64 %634, i64* %PC
  %635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %636 = load i8, i8* %635, align 1, !tbaa !2448
  store i8 %636, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %638 = icmp ne i8 %636, 0
  %639 = select i1 %638, i64 %630, i64 %632
  store i64 %639, i64* %637, align 8, !tbaa !2428
  %640 = load i8, i8* %BRANCH_TAKEN
  %641 = icmp eq i8 %640, 1
  br i1 %641, label %block_401f50, label %block_401ed6

block_401e38:                                     ; preds = %block_401de6
  %642 = sub i64 %416, 8
  %643 = load i64, i64* %PC
  %644 = add i64 %643, 4
  store i64 %644, i64* %PC
  %645 = inttoptr i64 %642 to i64*
  %646 = load i64, i64* %645
  store i64 %646, i64* %RAX, align 8, !tbaa !2428
  %647 = load i64, i64* %RAX
  %648 = add i64 %647, 560
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 7
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 32
  %655 = load i64, i64* %RAX
  %656 = load i64, i64* %PC
  %657 = add i64 %656, 4
  store i64 %657, i64* %PC
  %658 = inttoptr i64 %654 to i64*
  store i64 %655, i64* %658
  %659 = load i64, i64* %RBP
  %660 = sub i64 %659, 8
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 4
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %660 to i64*
  %664 = load i64, i64* %663
  store i64 %664, i64* %RAX, align 8, !tbaa !2428
  %665 = load i64, i64* %RAX
  %666 = add i64 %665, 552
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 7
  store i64 %668, i64* %PC
  %669 = inttoptr i64 %666 to i64*
  %670 = load i64, i64* %669
  store i64 %670, i64* %RAX, align 8, !tbaa !2428
  %671 = load i64, i64* %RBP
  %672 = sub i64 %671, 24
  %673 = load i64, i64* %RAX
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 4
  store i64 %675, i64* %PC
  %676 = inttoptr i64 %672 to i64*
  store i64 %673, i64* %676
  %677 = load i64, i64* %RBP
  %678 = sub i64 %677, 24
  %679 = load i64, i64* %PC
  %680 = add i64 %679, 4
  store i64 %680, i64* %PC
  %681 = inttoptr i64 %678 to i64*
  %682 = load i64, i64* %681
  store i64 %682, i64* %RAX, align 8, !tbaa !2428
  %683 = load i64, i64* %RAX
  %684 = load i64, i64* %PC
  %685 = add i64 %684, 4
  store i64 %685, i64* %PC
  %686 = add i64 104, %683
  store i64 %686, i64* %RAX, align 8, !tbaa !2428
  %687 = icmp ult i64 %686, %683
  %688 = icmp ult i64 %686, 104
  %689 = or i1 %687, %688
  %690 = zext i1 %689 to i8
  %691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %690, i8* %691, align 1, !tbaa !2432
  %692 = trunc i64 %686 to i32
  %693 = and i32 %692, 255
  %694 = call i32 @llvm.ctpop.i32(i32 %693) #16
  %695 = trunc i32 %694 to i8
  %696 = and i8 %695, 1
  %697 = xor i8 %696, 1
  %698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %697, i8* %698, align 1, !tbaa !2446
  %699 = xor i64 104, %683
  %700 = xor i64 %699, %686
  %701 = lshr i64 %700, 4
  %702 = trunc i64 %701 to i8
  %703 = and i8 %702, 1
  %704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %703, i8* %704, align 1, !tbaa !2447
  %705 = icmp eq i64 %686, 0
  %706 = zext i1 %705 to i8
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %706, i8* %707, align 1, !tbaa !2448
  %708 = lshr i64 %686, 63
  %709 = trunc i64 %708 to i8
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %709, i8* %710, align 1, !tbaa !2449
  %711 = lshr i64 %683, 63
  %712 = xor i64 %708, %711
  %713 = add nuw nsw i64 %712, %708
  %714 = icmp eq i64 %713, 2
  %715 = zext i1 %714 to i8
  %716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %715, i8* %716, align 1, !tbaa !2450
  %717 = load i64, i64* %RBP
  %718 = sub i64 %717, 24
  %719 = load i64, i64* %RAX
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 4
  store i64 %721, i64* %PC
  %722 = inttoptr i64 %718 to i64*
  store i64 %719, i64* %722
  br label %block_401e62

block_401f37:                                     ; preds = %block_401efa
  %723 = load i64, i64* %RAX
  %724 = load i64, i64* %RBP
  %725 = sub i64 %724, 48
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 4
  store i64 %727, i64* %PC
  %728 = inttoptr i64 %725 to i64*
  %729 = load i64, i64* %728
  %730 = add i64 %729, %723
  store i64 %730, i64* %RAX, align 8, !tbaa !2428
  %731 = icmp ult i64 %730, %723
  %732 = icmp ult i64 %730, %729
  %733 = or i1 %731, %732
  %734 = zext i1 %733 to i8
  %735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %734, i8* %735, align 1, !tbaa !2432
  %736 = trunc i64 %730 to i32
  %737 = and i32 %736, 255
  %738 = call i32 @llvm.ctpop.i32(i32 %737) #16
  %739 = trunc i32 %738 to i8
  %740 = and i8 %739, 1
  %741 = xor i8 %740, 1
  %742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %741, i8* %742, align 1, !tbaa !2446
  %743 = xor i64 %729, %723
  %744 = xor i64 %743, %730
  %745 = lshr i64 %744, 4
  %746 = trunc i64 %745 to i8
  %747 = and i8 %746, 1
  %748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %747, i8* %748, align 1, !tbaa !2447
  %749 = icmp eq i64 %730, 0
  %750 = zext i1 %749 to i8
  %751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %750, i8* %751, align 1, !tbaa !2448
  %752 = lshr i64 %730, 63
  %753 = trunc i64 %752 to i8
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %753, i8* %754, align 1, !tbaa !2449
  %755 = lshr i64 %723, 63
  %756 = lshr i64 %729, 63
  %757 = xor i64 %752, %755
  %758 = xor i64 %752, %756
  %759 = add nuw nsw i64 %757, %758
  %760 = icmp eq i64 %759, 2
  %761 = zext i1 %760 to i8
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %761, i8* %762, align 1, !tbaa !2450
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 48
  %765 = load i64, i64* %RAX
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 4
  store i64 %767, i64* %PC
  %768 = inttoptr i64 %764 to i64*
  store i64 %765, i64* %768
  br label %block_401f46

block_401eb6:                                     ; preds = %block_401e98, %block_401f50
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.2, %block_401e98 ], [ %MEMORY.3, %block_401f50 ]
  %769 = load i64, i64* %RBP
  %770 = sub i64 %769, 16
  %771 = load i64, i64* %PC
  %772 = add i64 %771, 4
  store i64 %772, i64* %PC
  %773 = inttoptr i64 %770 to i64*
  %774 = load i64, i64* %773
  store i64 %774, i64* %RAX, align 8, !tbaa !2428
  %775 = load i64, i64* %RBP
  %776 = sub i64 %775, 32
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 4
  store i64 %778, i64* %PC
  %779 = inttoptr i64 %776 to i64*
  %780 = load i64, i64* %779
  store i64 %780, i64* %RCX, align 8, !tbaa !2428
  %781 = load i64, i64* %RAX
  %782 = load i64, i64* %RCX
  %783 = load i64, i64* %PC
  %784 = add i64 %783, 3
  store i64 %784, i64* %PC
  %785 = sub i64 %781, %782
  %786 = icmp ult i64 %781, %782
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %787, i8* %788, align 1, !tbaa !2432
  %789 = trunc i64 %785 to i32
  %790 = and i32 %789, 255
  %791 = call i32 @llvm.ctpop.i32(i32 %790) #16
  %792 = trunc i32 %791 to i8
  %793 = and i8 %792, 1
  %794 = xor i8 %793, 1
  %795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %794, i8* %795, align 1, !tbaa !2446
  %796 = xor i64 %782, %781
  %797 = xor i64 %796, %785
  %798 = lshr i64 %797, 4
  %799 = trunc i64 %798 to i8
  %800 = and i8 %799, 1
  %801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %800, i8* %801, align 1, !tbaa !2447
  %802 = icmp eq i64 %785, 0
  %803 = zext i1 %802 to i8
  %804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %803, i8* %804, align 1, !tbaa !2448
  %805 = lshr i64 %785, 63
  %806 = trunc i64 %805 to i8
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %806, i8* %807, align 1, !tbaa !2449
  %808 = lshr i64 %781, 63
  %809 = lshr i64 %782, 63
  %810 = xor i64 %809, %808
  %811 = xor i64 %805, %808
  %812 = add nuw nsw i64 %811, %810
  %813 = icmp eq i64 %812, 2
  %814 = zext i1 %813 to i8
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %814, i8* %815, align 1, !tbaa !2450
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 165
  %818 = load i64, i64* %PC
  %819 = add i64 %818, 6
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 6
  store i64 %821, i64* %PC
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %823 = load i8, i8* %822, align 1, !tbaa !2448
  store i8 %823, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %825 = icmp ne i8 %823, 0
  %826 = select i1 %825, i64 %817, i64 %819
  store i64 %826, i64* %824, align 8, !tbaa !2428
  %827 = load i8, i8* %BRANCH_TAKEN
  %828 = icmp eq i8 %827, 1
  br i1 %828, label %block_401f66, label %block_401ec7

block_401f66:                                     ; preds = %block_401eb6
  %829 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 40
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 6
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to i64*
  %835 = load i64, i64* %834
  %836 = sitofp i64 %835 to double
  %837 = bitcast i8* %829 to double*
  store double %836, double* %837, align 1, !tbaa !2452
  %838 = load i64, i64* %RBP
  %839 = sub i64 %838, 8
  %840 = load i64, i64* %PC
  %841 = add i64 %840, 4
  store i64 %841, i64* %PC
  %842 = inttoptr i64 %839 to i64*
  %843 = load i64, i64* %842
  store i64 %843, i64* %RAX, align 8, !tbaa !2428
  %844 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %845 = load i64, i64* %RAX
  %846 = add i64 %845, 528
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 9
  store i64 %848, i64* %PC
  %849 = inttoptr i64 %846 to i64*
  %850 = load i64, i64* %849
  %851 = sitofp i64 %850 to double
  %852 = bitcast i8* %844 to double*
  store double %851, double* %852, align 1, !tbaa !2452
  %853 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %854 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %855 = bitcast %union.vec128_t* %XMM1 to i8*
  %856 = load i64, i64* %PC
  %857 = add i64 %856, 4
  store i64 %857, i64* %PC
  %858 = bitcast i8* %854 to double*
  %859 = load double, double* %858, align 1
  %860 = getelementptr inbounds i8, i8* %854, i64 8
  %861 = bitcast i8* %860 to i64*
  %862 = load i64, i64* %861, align 1
  %863 = bitcast i8* %855 to double*
  %864 = load double, double* %863, align 1
  %865 = fmul double %859, %864
  %866 = bitcast i8* %853 to double*
  store double %865, double* %866, align 1, !tbaa !2452
  %867 = getelementptr inbounds i8, i8* %853, i64 8
  %868 = bitcast i8* %867 to i64*
  store i64 %862, i64* %868, align 1, !tbaa !2452
  %869 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %870 = load i64, i64* %RBP
  %871 = sub i64 %870, 48
  %872 = load i64, i64* %PC
  %873 = add i64 %872, 6
  store i64 %873, i64* %PC
  %874 = inttoptr i64 %871 to i64*
  %875 = load i64, i64* %874
  %876 = sitofp i64 %875 to double
  %877 = bitcast i8* %869 to double*
  store double %876, double* %877, align 1, !tbaa !2452
  %878 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %879 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %880 = bitcast %union.vec128_t* %XMM1 to i8*
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 4
  store i64 %882, i64* %PC
  %883 = bitcast i8* %879 to double*
  %884 = load double, double* %883, align 1
  %885 = getelementptr inbounds i8, i8* %879, i64 8
  %886 = bitcast i8* %885 to i64*
  %887 = load i64, i64* %886, align 1
  %888 = bitcast i8* %880 to double*
  %889 = load double, double* %888, align 1
  %890 = fadd double %884, %889
  %891 = bitcast i8* %878 to double*
  store double %890, double* %891, align 1, !tbaa !2452
  %892 = getelementptr inbounds i8, i8* %878, i64 8
  %893 = bitcast i8* %892 to i64*
  store i64 %887, i64* %893, align 1, !tbaa !2452
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 1
  store i64 %895, i64* %PC
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %897 = load i64, i64* %896, align 8, !tbaa !2428
  %898 = add i64 %897, 8
  %899 = inttoptr i64 %897 to i64*
  %900 = load i64, i64* %899
  store i64 %900, i64* %RBP, align 8, !tbaa !2428
  store i64 %898, i64* %896, align 8, !tbaa !2428
  %901 = load i64, i64* %PC
  %902 = add i64 %901, 1
  store i64 %902, i64* %PC
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %905 = load i64, i64* %904, align 8, !tbaa !2428
  %906 = inttoptr i64 %905 to i64*
  %907 = load i64, i64* %906
  store i64 %907, i64* %903, align 8, !tbaa !2428
  %908 = add i64 %905, 8
  store i64 %908, i64* %904, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_401e16:                                     ; preds = %block_401df7
  %909 = inttoptr i64 %212 to i64*
  store i64 0, i64* %909
  br label %block_401e22

block_401f46:                                     ; preds = %block_401f0c, %block_401f37
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.0, %block_401f37 ], [ %MEMORY.0, %block_401f0c ]
  %910 = load i64, i64* %PC
  %911 = add i64 %910, 5
  %912 = load i64, i64* %PC
  %913 = add i64 %912, 5
  store i64 %913, i64* %PC
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %911, i64* %914, align 8, !tbaa !2428
  br label %block_401f4b

block_401e98:                                     ; preds = %block_401e62
  %915 = sub i64 %477, 8
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 4
  store i64 %917, i64* %PC
  %918 = inttoptr i64 %915 to i64*
  %919 = load i64, i64* %918
  store i64 %919, i64* %RAX, align 8, !tbaa !2428
  %920 = load i64, i64* %RAX
  %921 = add i64 %920, 576
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 7
  store i64 %923, i64* %PC
  %924 = inttoptr i64 %921 to i64*
  %925 = load i64, i64* %924
  store i64 %925, i64* %RAX, align 8, !tbaa !2428
  %926 = load i64, i64* %RBP
  %927 = sub i64 %926, 32
  %928 = load i64, i64* %RAX
  %929 = load i64, i64* %PC
  %930 = add i64 %929, 4
  store i64 %930, i64* %PC
  %931 = inttoptr i64 %927 to i64*
  store i64 %928, i64* %931
  %932 = load i64, i64* %RBP
  %933 = sub i64 %932, 8
  %934 = load i64, i64* %PC
  %935 = add i64 %934, 4
  store i64 %935, i64* %PC
  %936 = inttoptr i64 %933 to i64*
  %937 = load i64, i64* %936
  store i64 %937, i64* %RAX, align 8, !tbaa !2428
  %938 = load i64, i64* %RAX
  %939 = add i64 %938, 568
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 7
  store i64 %941, i64* %PC
  %942 = inttoptr i64 %939 to i64*
  %943 = load i64, i64* %942
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = load i64, i64* %RBP
  %945 = sub i64 %944, 16
  %946 = load i64, i64* %RAX
  %947 = load i64, i64* %PC
  %948 = add i64 %947, 4
  store i64 %948, i64* %PC
  %949 = inttoptr i64 %945 to i64*
  store i64 %946, i64* %949
  br label %block_401eb6

block_401f0c:                                     ; preds = %block_401efa
  %950 = load i64, i64* %RBP
  %951 = sub i64 %950, 8
  %952 = load i64, i64* %PC
  %953 = add i64 %952, 4
  store i64 %953, i64* %PC
  %954 = inttoptr i64 %951 to i64*
  %955 = load i64, i64* %954
  store i64 %955, i64* %RCX, align 8, !tbaa !2428
  %956 = load i64, i64* %RAX
  %957 = load i64, i64* %RCX
  %958 = add i64 %957, 528
  %959 = load i64, i64* %PC
  %960 = add i64 %959, 7
  store i64 %960, i64* %PC
  %961 = inttoptr i64 %958 to i64*
  %962 = load i64, i64* %961
  %963 = sub i64 %956, %962
  store i64 %963, i64* %RAX, align 8, !tbaa !2428
  %964 = icmp ugt i64 %962, %956
  %965 = zext i1 %964 to i8
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %965, i8* %966, align 1, !tbaa !2432
  %967 = trunc i64 %963 to i32
  %968 = and i32 %967, 255
  %969 = call i32 @llvm.ctpop.i32(i32 %968) #16
  %970 = trunc i32 %969 to i8
  %971 = and i8 %970, 1
  %972 = xor i8 %971, 1
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %972, i8* %973, align 1, !tbaa !2446
  %974 = xor i64 %962, %956
  %975 = xor i64 %974, %963
  %976 = lshr i64 %975, 4
  %977 = trunc i64 %976 to i8
  %978 = and i8 %977, 1
  %979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %978, i8* %979, align 1, !tbaa !2447
  %980 = icmp eq i64 %963, 0
  %981 = zext i1 %980 to i8
  %982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %981, i8* %982, align 1, !tbaa !2448
  %983 = lshr i64 %963, 63
  %984 = trunc i64 %983 to i8
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %984, i8* %985, align 1, !tbaa !2449
  %986 = lshr i64 %956, 63
  %987 = lshr i64 %962, 63
  %988 = xor i64 %987, %986
  %989 = xor i64 %983, %986
  %990 = add nuw nsw i64 %989, %988
  %991 = icmp eq i64 %990, 2
  %992 = zext i1 %991 to i8
  %993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %992, i8* %993, align 1, !tbaa !2450
  %994 = load i64, i64* %RAX
  %995 = load i64, i64* %RBP
  %996 = sub i64 %995, 48
  %997 = load i64, i64* %PC
  %998 = add i64 %997, 4
  store i64 %998, i64* %PC
  %999 = inttoptr i64 %996 to i64*
  %1000 = load i64, i64* %999
  %1001 = add i64 %1000, %994
  store i64 %1001, i64* %RAX, align 8, !tbaa !2428
  %1002 = icmp ult i64 %1001, %994
  %1003 = icmp ult i64 %1001, %1000
  %1004 = or i1 %1002, %1003
  %1005 = zext i1 %1004 to i8
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1005, i8* %1006, align 1, !tbaa !2432
  %1007 = trunc i64 %1001 to i32
  %1008 = and i32 %1007, 255
  %1009 = call i32 @llvm.ctpop.i32(i32 %1008) #16
  %1010 = trunc i32 %1009 to i8
  %1011 = and i8 %1010, 1
  %1012 = xor i8 %1011, 1
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1012, i8* %1013, align 1, !tbaa !2446
  %1014 = xor i64 %1000, %994
  %1015 = xor i64 %1014, %1001
  %1016 = lshr i64 %1015, 4
  %1017 = trunc i64 %1016 to i8
  %1018 = and i8 %1017, 1
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1018, i8* %1019, align 1, !tbaa !2447
  %1020 = icmp eq i64 %1001, 0
  %1021 = zext i1 %1020 to i8
  %1022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1021, i8* %1022, align 1, !tbaa !2448
  %1023 = lshr i64 %1001, 63
  %1024 = trunc i64 %1023 to i8
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1024, i8* %1025, align 1, !tbaa !2449
  %1026 = lshr i64 %994, 63
  %1027 = lshr i64 %1000, 63
  %1028 = xor i64 %1023, %1026
  %1029 = xor i64 %1023, %1027
  %1030 = add nuw nsw i64 %1028, %1029
  %1031 = icmp eq i64 %1030, 2
  %1032 = zext i1 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1032, i8* %1033, align 1, !tbaa !2450
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 48
  %1036 = load i64, i64* %RAX
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 4
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1035 to i64*
  store i64 %1036, i64* %1039
  %1040 = load i64, i64* %RBP
  %1041 = sub i64 %1040, 40
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 4
  store i64 %1043, i64* %PC
  %1044 = inttoptr i64 %1041 to i64*
  %1045 = load i64, i64* %1044
  store i64 %1045, i64* %RAX, align 8, !tbaa !2428
  %1046 = load i64, i64* %RAX
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 4
  store i64 %1048, i64* %PC
  %1049 = add i64 1, %1046
  store i64 %1049, i64* %RAX, align 8, !tbaa !2428
  %1050 = icmp ult i64 %1049, %1046
  %1051 = icmp ult i64 %1049, 1
  %1052 = or i1 %1050, %1051
  %1053 = zext i1 %1052 to i8
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1053, i8* %1054, align 1, !tbaa !2432
  %1055 = trunc i64 %1049 to i32
  %1056 = and i32 %1055, 255
  %1057 = call i32 @llvm.ctpop.i32(i32 %1056) #16
  %1058 = trunc i32 %1057 to i8
  %1059 = and i8 %1058, 1
  %1060 = xor i8 %1059, 1
  %1061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1060, i8* %1061, align 1, !tbaa !2446
  %1062 = xor i64 1, %1046
  %1063 = xor i64 %1062, %1049
  %1064 = lshr i64 %1063, 4
  %1065 = trunc i64 %1064 to i8
  %1066 = and i8 %1065, 1
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1066, i8* %1067, align 1, !tbaa !2447
  %1068 = icmp eq i64 %1049, 0
  %1069 = zext i1 %1068 to i8
  %1070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1069, i8* %1070, align 1, !tbaa !2448
  %1071 = lshr i64 %1049, 63
  %1072 = trunc i64 %1071 to i8
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1072, i8* %1073, align 1, !tbaa !2449
  %1074 = lshr i64 %1046, 63
  %1075 = xor i64 %1071, %1074
  %1076 = add nuw nsw i64 %1075, %1071
  %1077 = icmp eq i64 %1076, 2
  %1078 = zext i1 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1078, i8* %1079, align 1, !tbaa !2450
  %1080 = load i64, i64* %RBP
  %1081 = sub i64 %1080, 40
  %1082 = load i64, i64* %RAX
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 4
  store i64 %1084, i64* %PC
  %1085 = inttoptr i64 %1081 to i64*
  store i64 %1082, i64* %1085
  %1086 = load i64, i64* %PC
  %1087 = add i64 %1086, 20
  %1088 = load i64, i64* %PC
  %1089 = add i64 %1088, 5
  store i64 %1089, i64* %PC
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1087, i64* %1090, align 8, !tbaa !2428
  br label %block_401f46

block_401e22:                                     ; preds = %block_401e05, %block_401e16
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.1, %block_401e16 ], [ %MEMORY.1, %block_401e05 ]
  %1091 = load i64, i64* %PC
  %1092 = add i64 %1091, 5
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 5
  store i64 %1094, i64* %PC
  %1095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1092, i64* %1095, align 8, !tbaa !2428
  %1096 = load i64, i64* %RBP
  %1097 = sub i64 %1096, 16
  %1098 = load i64, i64* %PC
  %1099 = add i64 %1098, 4
  store i64 %1099, i64* %PC
  %1100 = inttoptr i64 %1097 to i64*
  %1101 = load i64, i64* %1100
  store i64 %1101, i64* %RAX, align 8, !tbaa !2428
  %1102 = load i64, i64* %RAX
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 4
  store i64 %1104, i64* %PC
  %1105 = add i64 64, %1102
  store i64 %1105, i64* %RAX, align 8, !tbaa !2428
  %1106 = icmp ult i64 %1105, %1102
  %1107 = icmp ult i64 %1105, 64
  %1108 = or i1 %1106, %1107
  %1109 = zext i1 %1108 to i8
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1109, i8* %1110, align 1, !tbaa !2432
  %1111 = trunc i64 %1105 to i32
  %1112 = and i32 %1111, 255
  %1113 = call i32 @llvm.ctpop.i32(i32 %1112) #16
  %1114 = trunc i32 %1113 to i8
  %1115 = and i8 %1114, 1
  %1116 = xor i8 %1115, 1
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1116, i8* %1117, align 1, !tbaa !2446
  %1118 = xor i64 64, %1102
  %1119 = xor i64 %1118, %1105
  %1120 = lshr i64 %1119, 4
  %1121 = trunc i64 %1120 to i8
  %1122 = and i8 %1121, 1
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1122, i8* %1123, align 1, !tbaa !2447
  %1124 = icmp eq i64 %1105, 0
  %1125 = zext i1 %1124 to i8
  %1126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1125, i8* %1126, align 1, !tbaa !2448
  %1127 = lshr i64 %1105, 63
  %1128 = trunc i64 %1127 to i8
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1128, i8* %1129, align 1, !tbaa !2449
  %1130 = lshr i64 %1102, 63
  %1131 = xor i64 %1127, %1130
  %1132 = add nuw nsw i64 %1131, %1127
  %1133 = icmp eq i64 %1132, 2
  %1134 = zext i1 %1133 to i8
  %1135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1134, i8* %1135, align 1, !tbaa !2450
  %1136 = load i64, i64* %RBP
  %1137 = sub i64 %1136, 16
  %1138 = load i64, i64* %RAX
  %1139 = load i64, i64* %PC
  %1140 = add i64 %1139, 4
  store i64 %1140, i64* %PC
  %1141 = inttoptr i64 %1137 to i64*
  store i64 %1138, i64* %1141
  %1142 = load i64, i64* %PC
  %1143 = sub i64 %1142, 77
  %1144 = load i64, i64* %PC
  %1145 = add i64 %1144, 5
  store i64 %1145, i64* %PC
  %1146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1143, i64* %1146, align 8, !tbaa !2428
  br label %block_401de6

block_401e05:                                     ; preds = %block_401df7
  %1147 = inttoptr i64 %212 to i64*
  store i64 1, i64* %1147
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 17
  %1150 = load i64, i64* %PC
  %1151 = add i64 %1150, 5
  store i64 %1151, i64* %PC
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1149, i64* %1152, align 8, !tbaa !2428
  br label %block_401e22
}

; Function Attrs: noinline
define %struct.Memory* @sub_402170_primal_feasible(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402170:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %RAX = bitcast %union.anon* %15 to i64*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 5
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RCX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RDX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 9
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RSI = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 11
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RDI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 13
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RSP = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 15
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RBP = bitcast %union.anon* %33 to i64*
  %34 = load i64, i64* %RBP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %38 = load i64, i64* %37, align 8, !tbaa !2428
  %39 = add i64 %38, -8
  %40 = inttoptr i64 %39 to i64*
  store i64 %34, i64* %40
  store i64 %39, i64* %37, align 8, !tbaa !2428
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 3
  store i64 %43, i64* %PC
  store i64 %41, i64* %RBP, align 8, !tbaa !2428
  %44 = load i64, i64* %RSP
  %45 = load i64, i64* %PC
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC
  %47 = sub i64 %44, 96
  store i64 %47, i64* %RSP, align 8, !tbaa !2428
  %48 = icmp ult i64 %44, 96
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %49, i8* %50, align 1, !tbaa !2432
  %51 = trunc i64 %47 to i32
  %52 = and i32 %51, 255
  %53 = call i32 @llvm.ctpop.i32(i32 %52) #16
  %54 = trunc i32 %53 to i8
  %55 = and i8 %54, 1
  %56 = xor i8 %55, 1
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %56, i8* %57, align 1, !tbaa !2446
  %58 = xor i64 96, %44
  %59 = xor i64 %58, %47
  %60 = lshr i64 %59, 4
  %61 = trunc i64 %60 to i8
  %62 = and i8 %61, 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %62, i8* %63, align 1, !tbaa !2447
  %64 = icmp eq i64 %47, 0
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %65, i8* %66, align 1, !tbaa !2448
  %67 = lshr i64 %47, 63
  %68 = trunc i64 %67 to i8
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %68, i8* %69, align 1, !tbaa !2449
  %70 = lshr i64 %44, 63
  %71 = xor i64 %67, %70
  %72 = add nuw nsw i64 %71, %70
  %73 = icmp eq i64 %72, 2
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %74, i8* %75, align 1, !tbaa !2450
  %76 = load i64, i64* %RBP
  %77 = sub i64 %76, 16
  %78 = load i64, i64* %RDI
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC
  %81 = inttoptr i64 %77 to i64*
  store i64 %78, i64* %81
  %82 = load i64, i64* %RBP
  %83 = sub i64 %82, 16
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RDI, align 8, !tbaa !2428
  %88 = load i64, i64* %RDI
  %89 = add i64 %88, 584
  %90 = load i64, i64* %PC
  %91 = add i64 %90, 7
  store i64 %91, i64* %PC
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92
  store i64 %93, i64* %RDI, align 8, !tbaa !2428
  %94 = load i64, i64* %RBP
  %95 = sub i64 %94, 40
  %96 = load i64, i64* %RDI
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99
  %100 = load i64, i64* %RBP
  %101 = sub i64 %100, 16
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104
  store i64 %105, i64* %RDI, align 8, !tbaa !2428
  %106 = load i64, i64* %RDI
  %107 = add i64 %106, 592
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  %110 = inttoptr i64 %107 to i64*
  %111 = load i64, i64* %110
  store i64 %111, i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %RBP
  %113 = sub i64 %112, 48
  %114 = load i64, i64* %RDI
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC
  %117 = inttoptr i64 %113 to i64*
  store i64 %114, i64* %117
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 16
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %119 to i64*
  %123 = load i64, i64* %122
  store i64 %123, i64* %RDI, align 8, !tbaa !2428
  %124 = load i64, i64* %RDI
  %125 = add i64 %124, 552
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 7
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %RDI, align 8, !tbaa !2428
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 32
  %132 = load i64, i64* %RDI
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %131 to i64*
  store i64 %132, i64* %135
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 16
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %RDI, align 8, !tbaa !2428
  %142 = load i64, i64* %RDI
  %143 = add i64 %142, 560
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 7
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RDI, align 8, !tbaa !2428
  %148 = load i64, i64* %RBP
  %149 = sub i64 %148, 24
  %150 = load i64, i64* %RDI
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 4
  store i64 %152, i64* %PC
  %153 = inttoptr i64 %149 to i64*
  store i64 %150, i64* %153
  %154 = load i64, i64* %RBP
  %155 = sub i64 %154, 32
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %155 to i64*
  %159 = load i64, i64* %158
  store i64 %159, i64* %RDI, align 8, !tbaa !2428
  %160 = load i64, i64* %RDI
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC
  %163 = add i64 104, %160
  store i64 %163, i64* %RDI, align 8, !tbaa !2428
  %164 = icmp ult i64 %163, %160
  %165 = icmp ult i64 %163, 104
  %166 = or i1 %164, %165
  %167 = zext i1 %166 to i8
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %167, i8* %168, align 1, !tbaa !2432
  %169 = trunc i64 %163 to i32
  %170 = and i32 %169, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #16
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2446
  %176 = xor i64 104, %160
  %177 = xor i64 %176, %163
  %178 = lshr i64 %177, 4
  %179 = trunc i64 %178 to i8
  %180 = and i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %180, i8* %181, align 1, !tbaa !2447
  %182 = icmp eq i64 %163, 0
  %183 = zext i1 %182 to i8
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %183, i8* %184, align 1, !tbaa !2448
  %185 = lshr i64 %163, 63
  %186 = trunc i64 %185 to i8
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %186, i8* %187, align 1, !tbaa !2449
  %188 = lshr i64 %160, 63
  %189 = xor i64 %185, %188
  %190 = add nuw nsw i64 %189, %185
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %192, i8* %193, align 1, !tbaa !2450
  %194 = load i64, i64* %RBP
  %195 = sub i64 %194, 32
  %196 = load i64, i64* %RDI
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 4
  store i64 %198, i64* %PC
  %199 = inttoptr i64 %195 to i64*
  store i64 %196, i64* %199
  br label %block_4021c4

block_4022fc:                                     ; preds = %block_4022f7, %block_402275
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_4022f7 ], [ %MEMORY.1, %block_402275 ]
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 5
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 5
  store i64 %203, i64* %PC
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %201, i64* %204, align 8, !tbaa !2428
  %205 = load i64, i64* %RBP
  %206 = sub i64 %205, 32
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 4
  store i64 %208, i64* %PC
  %209 = inttoptr i64 %206 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RAX, align 8, !tbaa !2428
  %211 = load i64, i64* %RAX
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 4
  store i64 %213, i64* %PC
  %214 = add i64 104, %211
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = icmp ult i64 %214, %211
  %216 = icmp ult i64 %214, 104
  %217 = or i1 %215, %216
  %218 = zext i1 %217 to i8
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %218, i8* %219, align 1, !tbaa !2432
  %220 = trunc i64 %214 to i32
  %221 = and i32 %220, 255
  %222 = call i32 @llvm.ctpop.i32(i32 %221) #16
  %223 = trunc i32 %222 to i8
  %224 = and i8 %223, 1
  %225 = xor i8 %224, 1
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %225, i8* %226, align 1, !tbaa !2446
  %227 = xor i64 104, %211
  %228 = xor i64 %227, %214
  %229 = lshr i64 %228, 4
  %230 = trunc i64 %229 to i8
  %231 = and i8 %230, 1
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %231, i8* %232, align 1, !tbaa !2447
  %233 = icmp eq i64 %214, 0
  %234 = zext i1 %233 to i8
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %234, i8* %235, align 1, !tbaa !2448
  %236 = lshr i64 %214, 63
  %237 = trunc i64 %236 to i8
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %237, i8* %238, align 1, !tbaa !2449
  %239 = lshr i64 %211, 63
  %240 = xor i64 %236, %239
  %241 = add nuw nsw i64 %240, %236
  %242 = icmp eq i64 %241, 2
  %243 = zext i1 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %243, i8* %244, align 1, !tbaa !2450
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 32
  %247 = load i64, i64* %RAX
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 4
  store i64 %249, i64* %PC
  %250 = inttoptr i64 %246 to i64*
  store i64 %247, i64* %250
  %251 = load i64, i64* %PC
  %252 = sub i64 %251, 329
  %253 = load i64, i64* %PC
  %254 = add i64 %253, 5
  store i64 %254, i64* %PC
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %252, i64* %255, align 8, !tbaa !2428
  br label %block_4021c4

block_402296:                                     ; preds = %block_40227a
  %256 = load i64, i64* %RBP
  %257 = sub i64 %256, 64
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 4
  store i64 %259, i64* %PC
  %260 = inttoptr i64 %257 to i64*
  %261 = load i64, i64* %260
  store i64 %261, i64* %RAX, align 8, !tbaa !2428
  %262 = load i64, i64* %RAX
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 4
  store i64 %264, i64* %PC
  %265 = sub i64 %262, 1
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = icmp ult i64 %262, 1
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %267, i8* %268, align 1, !tbaa !2432
  %269 = trunc i64 %265 to i32
  %270 = and i32 %269, 255
  %271 = call i32 @llvm.ctpop.i32(i32 %270) #16
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  %274 = xor i8 %273, 1
  %275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %274, i8* %275, align 1, !tbaa !2446
  %276 = xor i64 1, %262
  %277 = xor i64 %276, %265
  %278 = lshr i64 %277, 4
  %279 = trunc i64 %278 to i8
  %280 = and i8 %279, 1
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %280, i8* %281, align 1, !tbaa !2447
  %282 = icmp eq i64 %265, 0
  %283 = zext i1 %282 to i8
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %283, i8* %284, align 1, !tbaa !2448
  %285 = lshr i64 %265, 63
  %286 = trunc i64 %285 to i8
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %286, i8* %287, align 1, !tbaa !2449
  %288 = lshr i64 %262, 63
  %289 = xor i64 %285, %288
  %290 = add nuw nsw i64 %289, %288
  %291 = icmp eq i64 %290, 2
  %292 = zext i1 %291 to i8
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %292, i8* %293, align 1, !tbaa !2450
  %294 = load i64, i64* %RBP
  %295 = sub i64 %294, 16
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 4
  store i64 %297, i64* %PC
  %298 = inttoptr i64 %295 to i64*
  %299 = load i64, i64* %298
  store i64 %299, i64* %RCX, align 8, !tbaa !2428
  %300 = load i64, i64* %RAX
  %301 = load i64, i64* %RCX
  %302 = add i64 %301, 512
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 7
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %302 to i64*
  %306 = load i64, i64* %305
  %307 = sub i64 %300, %306
  %308 = icmp ugt i64 %306, %300
  %309 = zext i1 %308 to i8
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %309, i8* %310, align 1, !tbaa !2432
  %311 = trunc i64 %307 to i32
  %312 = and i32 %311, 255
  %313 = call i32 @llvm.ctpop.i32(i32 %312) #16
  %314 = trunc i32 %313 to i8
  %315 = and i8 %314, 1
  %316 = xor i8 %315, 1
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %316, i8* %317, align 1, !tbaa !2446
  %318 = xor i64 %306, %300
  %319 = xor i64 %318, %307
  %320 = lshr i64 %319, 4
  %321 = trunc i64 %320 to i8
  %322 = and i8 %321, 1
  %323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %322, i8* %323, align 1, !tbaa !2447
  %324 = icmp eq i64 %307, 0
  %325 = zext i1 %324 to i8
  %326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %325, i8* %326, align 1, !tbaa !2448
  %327 = lshr i64 %307, 63
  %328 = trunc i64 %327 to i8
  %329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %328, i8* %329, align 1, !tbaa !2449
  %330 = lshr i64 %300, 63
  %331 = lshr i64 %306, 63
  %332 = xor i64 %331, %330
  %333 = xor i64 %327, %330
  %334 = add nuw nsw i64 %333, %332
  %335 = icmp eq i64 %334, 2
  %336 = zext i1 %335 to i8
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %336, i8* %337, align 1, !tbaa !2450
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 78
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 6
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 6
  store i64 %343, i64* %PC
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %345 = load i8, i8* %344, align 1, !tbaa !2448
  %346 = icmp ne i8 %345, 0
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %348 = load i8, i8* %347, align 1, !tbaa !2449
  %349 = icmp ne i8 %348, 0
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %351 = load i8, i8* %350, align 1, !tbaa !2450
  %352 = icmp ne i8 %351, 0
  %353 = xor i1 %349, %352
  %354 = or i1 %346, %353
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %357 = select i1 %354, i64 %339, i64 %341
  store i64 %357, i64* %356, align 8, !tbaa !2428
  %358 = load i8, i8* %BRANCH_TAKEN
  %359 = icmp eq i8 %358, 1
  br i1 %359, label %block_4022f7, label %block_4022af

block_402214:                                     ; preds = %block_402209
  %360 = load i64, i64* %RBP
  %361 = sub i64 %360, 64
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC
  %364 = inttoptr i64 %361 to i64*
  %365 = load i64, i64* %364
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = load i64, i64* %RBP
  %367 = sub i64 %366, 72
  %368 = load i64, i64* %RAX
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC
  %371 = inttoptr i64 %367 to i64*
  store i64 %368, i64* %371
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 17
  %374 = load i64, i64* %PC
  %375 = add i64 %374, 5
  store i64 %375, i64* %PC
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %373, i64* %376, align 8, !tbaa !2428
  br label %block_40222d

block_402275:                                     ; preds = %block_402242, %block_40222d
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_40222d ], [ %901, %block_402242 ]
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 135
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 5
  store i64 %380, i64* %PC
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %378, i64* %381, align 8, !tbaa !2428
  br label %block_4022fc

block_40227a:                                     ; preds = %block_4021d5, %block_4021fb
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.6, %block_4021d5 ], [ %MEMORY.6, %block_4021fb ]
  %382 = load i64, i64* %RAX
  %383 = load i32, i32* %EAX
  %384 = zext i32 %383 to i64
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 2
  store i64 %386, i64* %PC
  %387 = xor i64 %384, %382
  %388 = trunc i64 %387 to i32
  %389 = and i64 %387, 4294967295
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %390, align 1, !tbaa !2432
  %391 = and i32 %388, 255
  %392 = call i32 @llvm.ctpop.i32(i32 %391) #16
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  %395 = xor i8 %394, 1
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %395, i8* %396, align 1, !tbaa !2446
  %397 = icmp eq i32 %388, 0
  %398 = zext i1 %397 to i8
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %398, i8* %399, align 1, !tbaa !2448
  %400 = lshr i32 %388, 31
  %401 = trunc i32 %400 to i8
  %402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %401, i8* %402, align 1, !tbaa !2449
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %403, align 1, !tbaa !2450
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %404, align 1, !tbaa !2447
  %405 = load i32, i32* %EAX
  %406 = zext i32 %405 to i64
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 2
  store i64 %408, i64* %PC
  %409 = and i64 %406, 4294967295
  store i64 %409, i64* %RCX, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 64
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 4
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i64*
  %415 = load i64, i64* %414
  store i64 %415, i64* %RDX, align 8, !tbaa !2428
  %416 = load i64, i64* %RBP
  %417 = sub i64 %416, 16
  %418 = load i64, i64* %PC
  %419 = add i64 %418, 4
  store i64 %419, i64* %PC
  %420 = inttoptr i64 %417 to i64*
  %421 = load i64, i64* %420
  store i64 %421, i64* %RSI, align 8, !tbaa !2428
  %422 = load i64, i64* %RCX
  %423 = load i64, i64* %RSI
  %424 = add i64 %423, 512
  %425 = load i64, i64* %PC
  %426 = add i64 %425, 7
  store i64 %426, i64* %PC
  %427 = inttoptr i64 %424 to i64*
  %428 = load i64, i64* %427
  %429 = sub i64 %422, %428
  store i64 %429, i64* %RCX, align 8, !tbaa !2428
  %430 = icmp ugt i64 %428, %422
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %431, i8* %432, align 1, !tbaa !2432
  %433 = trunc i64 %429 to i32
  %434 = and i32 %433, 255
  %435 = call i32 @llvm.ctpop.i32(i32 %434) #16
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  %438 = xor i8 %437, 1
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %438, i8* %439, align 1, !tbaa !2446
  %440 = xor i64 %428, %422
  %441 = xor i64 %440, %429
  %442 = lshr i64 %441, 4
  %443 = trunc i64 %442 to i8
  %444 = and i8 %443, 1
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = icmp eq i64 %429, 0
  %447 = zext i1 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %429, 63
  %450 = trunc i64 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %450, i8* %451, align 1, !tbaa !2449
  %452 = lshr i64 %422, 63
  %453 = lshr i64 %428, 63
  %454 = xor i64 %453, %452
  %455 = xor i64 %449, %452
  %456 = add nuw nsw i64 %455, %454
  %457 = icmp eq i64 %456, 2
  %458 = zext i1 %457 to i8
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %458, i8* %459, align 1, !tbaa !2450
  %460 = load i64, i64* %RDX
  %461 = load i64, i64* %RCX
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 3
  store i64 %463, i64* %PC
  %464 = sub i64 %460, %461
  %465 = icmp ult i64 %460, %461
  %466 = zext i1 %465 to i8
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %466, i8* %467, align 1, !tbaa !2432
  %468 = trunc i64 %464 to i32
  %469 = and i32 %468, 255
  %470 = call i32 @llvm.ctpop.i32(i32 %469) #16
  %471 = trunc i32 %470 to i8
  %472 = and i8 %471, 1
  %473 = xor i8 %472, 1
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %473, i8* %474, align 1, !tbaa !2446
  %475 = xor i64 %461, %460
  %476 = xor i64 %475, %464
  %477 = lshr i64 %476, 4
  %478 = trunc i64 %477 to i8
  %479 = and i8 %478, 1
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %479, i8* %480, align 1, !tbaa !2447
  %481 = icmp eq i64 %464, 0
  %482 = zext i1 %481 to i8
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %482, i8* %483, align 1, !tbaa !2448
  %484 = lshr i64 %464, 63
  %485 = trunc i64 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %485, i8* %486, align 1, !tbaa !2449
  %487 = lshr i64 %460, 63
  %488 = lshr i64 %461, 63
  %489 = xor i64 %488, %487
  %490 = xor i64 %484, %487
  %491 = add nuw nsw i64 %490, %489
  %492 = icmp eq i64 %491, 2
  %493 = zext i1 %492 to i8
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %493, i8* %494, align 1, !tbaa !2450
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 31
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 6
  %499 = load i64, i64* %PC
  %500 = add i64 %499, 6
  store i64 %500, i64* %PC
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %502 = load i8, i8* %501, align 1, !tbaa !2449
  %503 = icmp ne i8 %502, 0
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %505 = load i8, i8* %504, align 1, !tbaa !2450
  %506 = icmp ne i8 %505, 0
  %507 = xor i1 %503, %506
  %508 = zext i1 %507 to i8
  store i8 %508, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %510 = select i1 %507, i64 %496, i64 %498
  store i64 %510, i64* %509, align 8, !tbaa !2428
  %511 = load i8, i8* %BRANCH_TAKEN
  %512 = icmp eq i8 %511, 1
  br i1 %512, label %block_4022af, label %block_402296

block_402312:                                     ; preds = %block_4021c4
  %513 = sub i64 %796, 16
  %514 = load i64, i64* %PC
  %515 = add i64 %514, 4
  store i64 %515, i64* %PC
  %516 = inttoptr i64 %513 to i64*
  %517 = load i64, i64* %516
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = load i64, i64* %RAX
  %519 = add i64 %518, 488
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 11
  store i64 %521, i64* %PC
  %522 = inttoptr i64 %519 to i64*
  store i64 1, i64* %522
  %523 = load i64, i64* %RBP
  %524 = sub i64 %523, 8
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 8
  store i64 %526, i64* %PC
  %527 = inttoptr i64 %524 to i64*
  store i64 0, i64* %527
  br label %block_402329

block_4022af:                                     ; preds = %block_40227a, %block_402296
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.2, %block_40227a ], [ %MEMORY.2, %block_402296 ]
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 10
  store i64 %529, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 506), i64* %RDI, align 8, !tbaa !2428
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 2
  store i64 %531, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %532 = load i64, i64* %PC
  %533 = sub i64 %532, 6763
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 5
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 5
  store i64 %537, i64* %PC
  %538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %539 = load i64, i64* %538, align 8, !tbaa !2428
  %540 = add i64 %539, -8
  %541 = inttoptr i64 %540 to i64*
  store i64 %535, i64* %541
  store i64 %540, i64* %538, align 8, !tbaa !2428
  %542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %533, i64* %542, align 8, !tbaa !2428
  %543 = load i64, i64* %PC
  %544 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %543, %struct.Memory* %MEMORY.3)
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 10
  store i64 %546, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 580), i64* %RDI, align 8, !tbaa !2428
  %547 = load i64, i64* %RBP
  %548 = sub i64 %547, 64
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 4
  store i64 %550, i64* %PC
  %551 = inttoptr i64 %548 to i64*
  %552 = load i64, i64* %551
  store i64 %552, i64* %RSI, align 8, !tbaa !2428
  %553 = load i64, i64* %RBP
  %554 = sub i64 %553, 84
  %555 = load i32, i32* %EAX
  %556 = zext i32 %555 to i64
  %557 = load i64, i64* %PC
  %558 = add i64 %557, 3
  store i64 %558, i64* %PC
  %559 = inttoptr i64 %554 to i32*
  store i32 %555, i32* %559
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 2
  store i64 %561, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %562 = load i64, i64* %PC
  %563 = sub i64 %562, 6787
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 5
  store i64 %567, i64* %PC
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %569 = load i64, i64* %568, align 8, !tbaa !2428
  %570 = add i64 %569, -8
  %571 = inttoptr i64 %570 to i64*
  store i64 %565, i64* %571
  store i64 %570, i64* %568, align 8, !tbaa !2428
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %563, i64* %572, align 8, !tbaa !2428
  %573 = load i64, i64* %PC
  %574 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %573, %struct.Memory* %544)
  %575 = load i64, i64* %RBP
  %576 = sub i64 %575, 16
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 4
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i64*
  %580 = load i64, i64* %579
  store i64 %580, i64* %RSI, align 8, !tbaa !2428
  %581 = load i64, i64* %RSI
  %582 = add i64 %581, 488
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 11
  store i64 %584, i64* %PC
  %585 = inttoptr i64 %582 to i64*
  store i64 0, i64* %585
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 8
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 8
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to i64*
  store i64 1, i64* %590
  %591 = load i64, i64* %RBP
  %592 = sub i64 %591, 88
  %593 = load i32, i32* %EAX
  %594 = zext i32 %593 to i64
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 3
  store i64 %596, i64* %PC
  %597 = inttoptr i64 %592 to i32*
  store i32 %593, i32* %597
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 55
  %600 = load i64, i64* %PC
  %601 = add i64 %600, 5
  store i64 %601, i64* %PC
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %599, i64* %602, align 8, !tbaa !2428
  br label %block_402329

block_40222d:                                     ; preds = %block_402221, %block_402214
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.6, %block_402221 ], [ %MEMORY.6, %block_402214 ]
  %603 = load i64, i64* %RBP
  %604 = sub i64 %603, 72
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 4
  store i64 %606, i64* %PC
  %607 = inttoptr i64 %604 to i64*
  %608 = load i64, i64* %607
  store i64 %608, i64* %RAX, align 8, !tbaa !2428
  %609 = load i64, i64* %RBP
  %610 = sub i64 %609, 16
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 4
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %610 to i64*
  %614 = load i64, i64* %613
  store i64 %614, i64* %RCX, align 8, !tbaa !2428
  %615 = load i64, i64* %RAX
  %616 = load i64, i64* %RCX
  %617 = add i64 %616, 512
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 7
  store i64 %619, i64* %PC
  %620 = inttoptr i64 %617 to i64*
  %621 = load i64, i64* %620
  %622 = sub i64 %615, %621
  %623 = icmp ugt i64 %621, %615
  %624 = zext i1 %623 to i8
  %625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %624, i8* %625, align 1, !tbaa !2432
  %626 = trunc i64 %622 to i32
  %627 = and i32 %626, 255
  %628 = call i32 @llvm.ctpop.i32(i32 %627) #16
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %631, i8* %632, align 1, !tbaa !2446
  %633 = xor i64 %621, %615
  %634 = xor i64 %633, %622
  %635 = lshr i64 %634, 4
  %636 = trunc i64 %635 to i8
  %637 = and i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %637, i8* %638, align 1, !tbaa !2447
  %639 = icmp eq i64 %622, 0
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %640, i8* %641, align 1, !tbaa !2448
  %642 = lshr i64 %622, 63
  %643 = trunc i64 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %643, i8* %644, align 1, !tbaa !2449
  %645 = lshr i64 %615, 63
  %646 = lshr i64 %621, 63
  %647 = xor i64 %646, %645
  %648 = xor i64 %642, %645
  %649 = add nuw nsw i64 %648, %647
  %650 = icmp eq i64 %649, 2
  %651 = zext i1 %650 to i8
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %651, i8* %652, align 1, !tbaa !2450
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 57
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 6
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 6
  store i64 %658, i64* %PC
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %660 = load i8, i8* %659, align 1, !tbaa !2448
  %661 = icmp ne i8 %660, 0
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %663 = load i8, i8* %662, align 1, !tbaa !2449
  %664 = icmp ne i8 %663, 0
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %666 = load i8, i8* %665, align 1, !tbaa !2450
  %667 = icmp ne i8 %666, 0
  %668 = xor i1 %664, %667
  %669 = or i1 %661, %668
  %670 = zext i1 %669 to i8
  store i8 %670, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %672 = select i1 %669, i64 %654, i64 %656
  store i64 %672, i64* %671, align 8, !tbaa !2428
  %673 = load i8, i8* %BRANCH_TAKEN
  %674 = icmp eq i8 %673, 1
  br i1 %674, label %block_402275, label %block_402242

block_4022f7:                                     ; preds = %block_402296
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 5
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 5
  store i64 %678, i64* %PC
  %679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %676, i64* %679, align 8, !tbaa !2428
  br label %block_4022fc

block_402329:                                     ; preds = %block_4022af, %block_402312
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.6, %block_402312 ], [ %574, %block_4022af ]
  %680 = load i64, i64* %RBP
  %681 = sub i64 %680, 8
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 4
  store i64 %683, i64* %PC
  %684 = inttoptr i64 %681 to i64*
  %685 = load i64, i64* %684
  store i64 %685, i64* %RAX, align 8, !tbaa !2428
  %686 = load i64, i64* %RSP
  %687 = load i64, i64* %PC
  %688 = add i64 %687, 4
  store i64 %688, i64* %PC
  %689 = add i64 96, %686
  store i64 %689, i64* %RSP, align 8, !tbaa !2428
  %690 = icmp ult i64 %689, %686
  %691 = icmp ult i64 %689, 96
  %692 = or i1 %690, %691
  %693 = zext i1 %692 to i8
  %694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %693, i8* %694, align 1, !tbaa !2432
  %695 = trunc i64 %689 to i32
  %696 = and i32 %695, 255
  %697 = call i32 @llvm.ctpop.i32(i32 %696) #16
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  %700 = xor i8 %699, 1
  %701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %700, i8* %701, align 1, !tbaa !2446
  %702 = xor i64 96, %686
  %703 = xor i64 %702, %689
  %704 = lshr i64 %703, 4
  %705 = trunc i64 %704 to i8
  %706 = and i8 %705, 1
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %706, i8* %707, align 1, !tbaa !2447
  %708 = icmp eq i64 %689, 0
  %709 = zext i1 %708 to i8
  %710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %709, i8* %710, align 1, !tbaa !2448
  %711 = lshr i64 %689, 63
  %712 = trunc i64 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %712, i8* %713, align 1, !tbaa !2449
  %714 = lshr i64 %686, 63
  %715 = xor i64 %711, %714
  %716 = add nuw nsw i64 %715, %711
  %717 = icmp eq i64 %716, 2
  %718 = zext i1 %717 to i8
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %718, i8* %719, align 1, !tbaa !2450
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 1
  store i64 %721, i64* %PC
  %722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %723 = load i64, i64* %722, align 8, !tbaa !2428
  %724 = add i64 %723, 8
  %725 = inttoptr i64 %723 to i64*
  %726 = load i64, i64* %725
  store i64 %726, i64* %RBP, align 8, !tbaa !2428
  store i64 %724, i64* %722, align 8, !tbaa !2428
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 1
  store i64 %728, i64* %PC
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %731 = load i64, i64* %730, align 8, !tbaa !2428
  %732 = inttoptr i64 %731 to i64*
  %733 = load i64, i64* %732
  store i64 %733, i64* %729, align 8, !tbaa !2428
  %734 = add i64 %731, 8
  store i64 %734, i64* %730, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_4021c4:                                     ; preds = %block_4022fc, %block_402170
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_402170 ], [ %MEMORY.0, %block_4022fc ]
  %735 = load i64, i64* %RBP
  %736 = sub i64 %735, 32
  %737 = load i64, i64* %PC
  %738 = add i64 %737, 4
  store i64 %738, i64* %PC
  %739 = inttoptr i64 %736 to i64*
  %740 = load i64, i64* %739
  store i64 %740, i64* %RAX, align 8, !tbaa !2428
  %741 = load i64, i64* %RBP
  %742 = sub i64 %741, 24
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 4
  store i64 %744, i64* %PC
  %745 = inttoptr i64 %742 to i64*
  %746 = load i64, i64* %745
  store i64 %746, i64* %RCX, align 8, !tbaa !2428
  %747 = load i64, i64* %RAX
  %748 = load i64, i64* %RCX
  %749 = load i64, i64* %PC
  %750 = add i64 %749, 3
  store i64 %750, i64* %PC
  %751 = sub i64 %747, %748
  %752 = icmp ult i64 %747, %748
  %753 = zext i1 %752 to i8
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %753, i8* %754, align 1, !tbaa !2432
  %755 = trunc i64 %751 to i32
  %756 = and i32 %755, 255
  %757 = call i32 @llvm.ctpop.i32(i32 %756) #16
  %758 = trunc i32 %757 to i8
  %759 = and i8 %758, 1
  %760 = xor i8 %759, 1
  %761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %760, i8* %761, align 1, !tbaa !2446
  %762 = xor i64 %748, %747
  %763 = xor i64 %762, %751
  %764 = lshr i64 %763, 4
  %765 = trunc i64 %764 to i8
  %766 = and i8 %765, 1
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %766, i8* %767, align 1, !tbaa !2447
  %768 = icmp eq i64 %751, 0
  %769 = zext i1 %768 to i8
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %769, i8* %770, align 1, !tbaa !2448
  %771 = lshr i64 %751, 63
  %772 = trunc i64 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %772, i8* %773, align 1, !tbaa !2449
  %774 = lshr i64 %747, 63
  %775 = lshr i64 %748, 63
  %776 = xor i64 %775, %774
  %777 = xor i64 %771, %774
  %778 = add nuw nsw i64 %777, %776
  %779 = icmp eq i64 %778, 2
  %780 = zext i1 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %780, i8* %781, align 1, !tbaa !2450
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 323
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 6
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 6
  store i64 %787, i64* %PC
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %789 = load i8, i8* %788, align 1, !tbaa !2432
  %790 = icmp eq i8 %789, 0
  %791 = zext i1 %790 to i8
  store i8 %791, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %793 = select i1 %790, i64 %783, i64 %785
  store i64 %793, i64* %792, align 8, !tbaa !2428
  %794 = load i8, i8* %BRANCH_TAKEN
  %795 = icmp eq i8 %794, 1
  %796 = load i64, i64* %RBP
  br i1 %795, label %block_402312, label %block_4021d5

block_402209:                                     ; preds = %block_4021fb
  %797 = load i64, i64* %RBP
  %798 = sub i64 %797, 64
  %799 = load i64, i64* %PC
  %800 = add i64 %799, 5
  store i64 %800, i64* %PC
  %801 = inttoptr i64 %798 to i64*
  %802 = load i64, i64* %801
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %803, align 1, !tbaa !2432
  %804 = trunc i64 %802 to i32
  %805 = and i32 %804, 255
  %806 = call i32 @llvm.ctpop.i32(i32 %805) #16
  %807 = trunc i32 %806 to i8
  %808 = and i8 %807, 1
  %809 = xor i8 %808, 1
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %809, i8* %810, align 1, !tbaa !2446
  %811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %811, align 1, !tbaa !2447
  %812 = icmp eq i64 %802, 0
  %813 = zext i1 %812 to i8
  %814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %813, i8* %814, align 1, !tbaa !2448
  %815 = lshr i64 %802, 63
  %816 = trunc i64 %815 to i8
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %816, i8* %817, align 1, !tbaa !2449
  %818 = lshr i64 %802, 63
  %819 = xor i64 %815, %818
  %820 = add nuw nsw i64 %819, %818
  %821 = icmp eq i64 %820, 2
  %822 = zext i1 %821 to i8
  %823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %822, i8* %823, align 1, !tbaa !2450
  %824 = load i64, i64* %PC
  %825 = add i64 %824, 19
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 6
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 6
  store i64 %829, i64* %PC
  %830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %831 = load i8, i8* %830, align 1, !tbaa !2449
  %832 = icmp ne i8 %831, 0
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %834 = load i8, i8* %833, align 1, !tbaa !2450
  %835 = icmp ne i8 %834, 0
  %836 = xor i1 %832, %835
  %837 = zext i1 %836 to i8
  store i8 %837, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %839 = select i1 %836, i64 %825, i64 %827
  store i64 %839, i64* %838, align 8, !tbaa !2428
  %840 = load i8, i8* %BRANCH_TAKEN
  %841 = icmp eq i8 %840, 1
  br i1 %841, label %block_402221, label %block_402214

block_402242:                                     ; preds = %block_40222d
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 10
  store i64 %843, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 506), i64* %RDI, align 8, !tbaa !2428
  %844 = load i64, i64* %PC
  %845 = add i64 %844, 2
  store i64 %845, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %846 = load i64, i64* %PC
  %847 = sub i64 %846, 6654
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 5
  %850 = load i64, i64* %PC
  %851 = add i64 %850, 5
  store i64 %851, i64* %PC
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %853 = load i64, i64* %852, align 8, !tbaa !2428
  %854 = add i64 %853, -8
  %855 = inttoptr i64 %854 to i64*
  store i64 %849, i64* %855
  store i64 %854, i64* %852, align 8, !tbaa !2428
  %856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %847, i64* %856, align 8, !tbaa !2428
  %857 = load i64, i64* %PC
  %858 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %857, %struct.Memory* %MEMORY.4)
  %859 = load i64, i64* %PC
  %860 = add i64 %859, 10
  store i64 %860, i64* %PC
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 531), i64* %RDI, align 8, !tbaa !2428
  %861 = load i64, i64* %RBP
  %862 = sub i64 %861, 32
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 4
  store i64 %864, i64* %PC
  %865 = inttoptr i64 %862 to i64*
  %866 = load i64, i64* %865
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = load i64, i64* %RCX
  %868 = add i64 %867, 96
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 3
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i32*
  %872 = load i32, i32* %871
  %873 = zext i32 %872 to i64
  store i64 %873, i64* %RSI, align 8, !tbaa !2428
  %874 = load i64, i64* %RBP
  %875 = sub i64 %874, 64
  %876 = load i64, i64* %PC
  %877 = add i64 %876, 4
  store i64 %877, i64* %PC
  %878 = inttoptr i64 %875 to i64*
  %879 = load i64, i64* %878
  store i64 %879, i64* %RDX, align 8, !tbaa !2428
  %880 = load i64, i64* %RBP
  %881 = sub i64 %880, 76
  %882 = load i32, i32* %EAX
  %883 = zext i32 %882 to i64
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 3
  store i64 %885, i64* %PC
  %886 = inttoptr i64 %881 to i32*
  store i32 %882, i32* %886
  %887 = load i64, i64* %PC
  %888 = add i64 %887, 2
  store i64 %888, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %889 = load i64, i64* %PC
  %890 = sub i64 %889, 6685
  %891 = load i64, i64* %PC
  %892 = add i64 %891, 5
  %893 = load i64, i64* %PC
  %894 = add i64 %893, 5
  store i64 %894, i64* %PC
  %895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %896 = load i64, i64* %895, align 8, !tbaa !2428
  %897 = add i64 %896, -8
  %898 = inttoptr i64 %897 to i64*
  store i64 %892, i64* %898
  store i64 %897, i64* %895, align 8, !tbaa !2428
  %899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %890, i64* %899, align 8, !tbaa !2428
  %900 = load i64, i64* %PC
  %901 = call %struct.Memory* @ext_608fd0_printf(%struct.State* %0, i64 %900, %struct.Memory* %858)
  %902 = load i64, i64* %RBP
  %903 = sub i64 %902, 80
  %904 = load i32, i32* %EAX
  %905 = zext i32 %904 to i64
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 3
  store i64 %907, i64* %PC
  %908 = inttoptr i64 %903 to i32*
  store i32 %904, i32* %908
  br label %block_402275

block_4021fb:                                     ; preds = %block_4021d5
  %909 = load i64, i64* %RBP
  %910 = sub i64 %909, 56
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 4
  store i64 %912, i64* %PC
  %913 = inttoptr i64 %910 to i64*
  %914 = load i64, i64* %913
  store i64 %914, i64* %RAX, align 8, !tbaa !2428
  %915 = load i64, i64* %RAX
  %916 = load i64, i64* %RBP
  %917 = sub i64 %916, 48
  %918 = load i64, i64* %PC
  %919 = add i64 %918, 4
  store i64 %919, i64* %PC
  %920 = inttoptr i64 %917 to i64*
  %921 = load i64, i64* %920
  %922 = sub i64 %915, %921
  %923 = icmp ugt i64 %921, %915
  %924 = zext i1 %923 to i8
  %925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %924, i8* %925, align 1, !tbaa !2432
  %926 = trunc i64 %922 to i32
  %927 = and i32 %926, 255
  %928 = call i32 @llvm.ctpop.i32(i32 %927) #16
  %929 = trunc i32 %928 to i8
  %930 = and i8 %929, 1
  %931 = xor i8 %930, 1
  %932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %931, i8* %932, align 1, !tbaa !2446
  %933 = xor i64 %921, %915
  %934 = xor i64 %933, %922
  %935 = lshr i64 %934, 4
  %936 = trunc i64 %935 to i8
  %937 = and i8 %936, 1
  %938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %937, i8* %938, align 1, !tbaa !2447
  %939 = icmp eq i64 %922, 0
  %940 = zext i1 %939 to i8
  %941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %940, i8* %941, align 1, !tbaa !2448
  %942 = lshr i64 %922, 63
  %943 = trunc i64 %942 to i8
  %944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %943, i8* %944, align 1, !tbaa !2449
  %945 = lshr i64 %915, 63
  %946 = lshr i64 %921, 63
  %947 = xor i64 %946, %945
  %948 = xor i64 %942, %945
  %949 = add nuw nsw i64 %948, %947
  %950 = icmp eq i64 %949, 2
  %951 = zext i1 %950 to i8
  %952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %951, i8* %952, align 1, !tbaa !2450
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 119
  %955 = load i64, i64* %PC
  %956 = add i64 %955, 6
  %957 = load i64, i64* %PC
  %958 = add i64 %957, 6
  store i64 %958, i64* %PC
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %960 = load i8, i8* %959, align 1, !tbaa !2432
  %961 = icmp eq i8 %960, 0
  %962 = zext i1 %961 to i8
  store i8 %962, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %964 = select i1 %961, i64 %954, i64 %956
  store i64 %964, i64* %963, align 8, !tbaa !2428
  %965 = load i8, i8* %BRANCH_TAKEN
  %966 = icmp eq i8 %965, 1
  br i1 %966, label %block_40227a, label %block_402209

block_4021d5:                                     ; preds = %block_4021c4
  %967 = sub i64 %796, 32
  %968 = load i64, i64* %PC
  %969 = add i64 %968, 4
  store i64 %969, i64* %PC
  %970 = inttoptr i64 %967 to i64*
  %971 = load i64, i64* %970
  store i64 %971, i64* %RAX, align 8, !tbaa !2428
  %972 = load i64, i64* %RAX
  %973 = add i64 %972, 48
  %974 = load i64, i64* %PC
  %975 = add i64 %974, 4
  store i64 %975, i64* %PC
  %976 = inttoptr i64 %973 to i64*
  %977 = load i64, i64* %976
  store i64 %977, i64* %RAX, align 8, !tbaa !2428
  %978 = load i64, i64* %RBP
  %979 = sub i64 %978, 56
  %980 = load i64, i64* %RAX
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 4
  store i64 %982, i64* %PC
  %983 = inttoptr i64 %979 to i64*
  store i64 %980, i64* %983
  %984 = load i64, i64* %RBP
  %985 = sub i64 %984, 32
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 4
  store i64 %987, i64* %PC
  %988 = inttoptr i64 %985 to i64*
  %989 = load i64, i64* %988
  store i64 %989, i64* %RAX, align 8, !tbaa !2428
  %990 = load i64, i64* %RAX
  %991 = add i64 %990, 80
  %992 = load i64, i64* %PC
  %993 = add i64 %992, 4
  store i64 %993, i64* %PC
  %994 = inttoptr i64 %991 to i64*
  %995 = load i64, i64* %994
  store i64 %995, i64* %RAX, align 8, !tbaa !2428
  %996 = load i64, i64* %RBP
  %997 = sub i64 %996, 64
  %998 = load i64, i64* %RAX
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 4
  store i64 %1000, i64* %PC
  %1001 = inttoptr i64 %997 to i64*
  store i64 %998, i64* %1001
  %1002 = load i64, i64* %RBP
  %1003 = sub i64 %1002, 56
  %1004 = load i64, i64* %PC
  %1005 = add i64 %1004, 4
  store i64 %1005, i64* %PC
  %1006 = inttoptr i64 %1003 to i64*
  %1007 = load i64, i64* %1006
  store i64 %1007, i64* %RAX, align 8, !tbaa !2428
  %1008 = load i64, i64* %RAX
  %1009 = load i64, i64* %RBP
  %1010 = sub i64 %1009, 40
  %1011 = load i64, i64* %PC
  %1012 = add i64 %1011, 4
  store i64 %1012, i64* %PC
  %1013 = inttoptr i64 %1010 to i64*
  %1014 = load i64, i64* %1013
  %1015 = sub i64 %1008, %1014
  %1016 = icmp ugt i64 %1014, %1008
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1017, i8* %1018, align 1, !tbaa !2432
  %1019 = trunc i64 %1015 to i32
  %1020 = and i32 %1019, 255
  %1021 = call i32 @llvm.ctpop.i32(i32 %1020) #16
  %1022 = trunc i32 %1021 to i8
  %1023 = and i8 %1022, 1
  %1024 = xor i8 %1023, 1
  %1025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1024, i8* %1025, align 1, !tbaa !2446
  %1026 = xor i64 %1014, %1008
  %1027 = xor i64 %1026, %1015
  %1028 = lshr i64 %1027, 4
  %1029 = trunc i64 %1028 to i8
  %1030 = and i8 %1029, 1
  %1031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1030, i8* %1031, align 1, !tbaa !2447
  %1032 = icmp eq i64 %1015, 0
  %1033 = zext i1 %1032 to i8
  %1034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1033, i8* %1034, align 1, !tbaa !2448
  %1035 = lshr i64 %1015, 63
  %1036 = trunc i64 %1035 to i8
  %1037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1036, i8* %1037, align 1, !tbaa !2449
  %1038 = lshr i64 %1008, 63
  %1039 = lshr i64 %1014, 63
  %1040 = xor i64 %1039, %1038
  %1041 = xor i64 %1035, %1038
  %1042 = add nuw nsw i64 %1041, %1040
  %1043 = icmp eq i64 %1042, 2
  %1044 = zext i1 %1043 to i8
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1044, i8* %1045, align 1, !tbaa !2450
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 133
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 6
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 6
  store i64 %1051, i64* %PC
  %1052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1053 = load i8, i8* %1052, align 1, !tbaa !2432
  store i8 %1053, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1055 = icmp ne i8 %1053, 0
  %1056 = select i1 %1055, i64 %1047, i64 %1049
  store i64 %1056, i64* %1054, align 8, !tbaa !2428
  %1057 = load i8, i8* %BRANCH_TAKEN
  %1058 = icmp eq i8 %1057, 1
  br i1 %1058, label %block_40227a, label %block_4021fb

block_402221:                                     ; preds = %block_402209
  %1059 = load i64, i64* %RAX
  %1060 = load i32, i32* %EAX
  %1061 = zext i32 %1060 to i64
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 2
  store i64 %1063, i64* %PC
  %1064 = xor i64 %1061, %1059
  %1065 = trunc i64 %1064 to i32
  %1066 = and i64 %1064, 4294967295
  store i64 %1066, i64* %RAX, align 8, !tbaa !2428
  %1067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1067, align 1, !tbaa !2432
  %1068 = and i32 %1065, 255
  %1069 = call i32 @llvm.ctpop.i32(i32 %1068) #16
  %1070 = trunc i32 %1069 to i8
  %1071 = and i8 %1070, 1
  %1072 = xor i8 %1071, 1
  %1073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1072, i8* %1073, align 1, !tbaa !2446
  %1074 = icmp eq i32 %1065, 0
  %1075 = zext i1 %1074 to i8
  %1076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1075, i8* %1076, align 1, !tbaa !2448
  %1077 = lshr i32 %1065, 31
  %1078 = trunc i32 %1077 to i8
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1078, i8* %1079, align 1, !tbaa !2449
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1080, align 1, !tbaa !2450
  %1081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1081, align 1, !tbaa !2447
  %1082 = load i32, i32* %EAX
  %1083 = zext i32 %1082 to i64
  %1084 = load i64, i64* %PC
  %1085 = add i64 %1084, 2
  store i64 %1085, i64* %PC
  %1086 = and i64 %1083, 4294967295
  store i64 %1086, i64* %RCX, align 8, !tbaa !2428
  %1087 = load i64, i64* %RCX
  %1088 = load i64, i64* %RBP
  %1089 = sub i64 %1088, 64
  %1090 = load i64, i64* %PC
  %1091 = add i64 %1090, 4
  store i64 %1091, i64* %PC
  %1092 = inttoptr i64 %1089 to i64*
  %1093 = load i64, i64* %1092
  %1094 = sub i64 %1087, %1093
  store i64 %1094, i64* %RCX, align 8, !tbaa !2428
  %1095 = icmp ugt i64 %1093, %1087
  %1096 = zext i1 %1095 to i8
  %1097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1096, i8* %1097, align 1, !tbaa !2432
  %1098 = trunc i64 %1094 to i32
  %1099 = and i32 %1098, 255
  %1100 = call i32 @llvm.ctpop.i32(i32 %1099) #16
  %1101 = trunc i32 %1100 to i8
  %1102 = and i8 %1101, 1
  %1103 = xor i8 %1102, 1
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1103, i8* %1104, align 1, !tbaa !2446
  %1105 = xor i64 %1093, %1087
  %1106 = xor i64 %1105, %1094
  %1107 = lshr i64 %1106, 4
  %1108 = trunc i64 %1107 to i8
  %1109 = and i8 %1108, 1
  %1110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1109, i8* %1110, align 1, !tbaa !2447
  %1111 = icmp eq i64 %1094, 0
  %1112 = zext i1 %1111 to i8
  %1113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1112, i8* %1113, align 1, !tbaa !2448
  %1114 = lshr i64 %1094, 63
  %1115 = trunc i64 %1114 to i8
  %1116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1115, i8* %1116, align 1, !tbaa !2449
  %1117 = lshr i64 %1087, 63
  %1118 = lshr i64 %1093, 63
  %1119 = xor i64 %1118, %1117
  %1120 = xor i64 %1114, %1117
  %1121 = add nuw nsw i64 %1120, %1119
  %1122 = icmp eq i64 %1121, 2
  %1123 = zext i1 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1123, i8* %1124, align 1, !tbaa !2450
  %1125 = load i64, i64* %RBP
  %1126 = sub i64 %1125, 72
  %1127 = load i64, i64* %RCX
  %1128 = load i64, i64* %PC
  %1129 = add i64 %1128, 4
  store i64 %1129, i64* %PC
  %1130 = inttoptr i64 %1126 to i64*
  store i64 %1127, i64* %1130
  br label %block_40222d
}

; Function Attrs: noinline
define %struct.Memory* @sub_404090_update_tree(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_404090:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 7
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %ESI = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RAX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 3
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RBX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 17
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0
  %R8 = bitcast %union.anon* %45 to i64*
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %47 = getelementptr inbounds %struct.GPR, %struct.GPR* %46, i32 0, i32 19
  %48 = getelementptr inbounds %struct.Reg, %struct.Reg* %47, i32 0, i32 0
  %R9 = bitcast %union.anon* %48 to i64*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %50 = getelementptr inbounds %struct.GPR, %struct.GPR* %49, i32 0, i32 21
  %51 = getelementptr inbounds %struct.Reg, %struct.Reg* %50, i32 0, i32 0
  %R10 = bitcast %union.anon* %51 to i64*
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %53 = getelementptr inbounds %struct.GPR, %struct.GPR* %52, i32 0, i32 23
  %54 = getelementptr inbounds %struct.Reg, %struct.Reg* %53, i32 0, i32 0
  %R11 = bitcast %union.anon* %54 to i64*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 29
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0
  %R14 = bitcast %union.anon* %57 to i64*
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %59 = getelementptr inbounds %struct.GPR, %struct.GPR* %58, i32 0, i32 31
  %60 = getelementptr inbounds %struct.Reg, %struct.Reg* %59, i32 0, i32 0
  %R15 = bitcast %union.anon* %60 to i64*
  %61 = load i64, i64* %RBP
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, -8
  %67 = inttoptr i64 %66 to i64*
  store i64 %61, i64* %67
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %R15
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %75 = load i64, i64* %74, align 8, !tbaa !2428
  %76 = add i64 %75, -8
  %77 = inttoptr i64 %76 to i64*
  store i64 %71, i64* %77
  store i64 %76, i64* %74, align 8, !tbaa !2428
  %78 = load i64, i64* %R14
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 2
  store i64 %80, i64* %PC
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %82 = load i64, i64* %81, align 8, !tbaa !2428
  %83 = add i64 %82, -8
  %84 = inttoptr i64 %83 to i64*
  store i64 %78, i64* %84
  store i64 %83, i64* %81, align 8, !tbaa !2428
  %85 = load i64, i64* %RBX
  %86 = load i64, i64* %PC
  %87 = add i64 %86, 1
  store i64 %87, i64* %PC
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %89 = load i64, i64* %88, align 8, !tbaa !2428
  %90 = add i64 %89, -8
  %91 = inttoptr i64 %90 to i64*
  store i64 %85, i64* %91
  store i64 %90, i64* %88, align 8, !tbaa !2428
  %92 = load i64, i64* %RSP
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 4
  store i64 %94, i64* %PC
  %95 = sub i64 %92, 64
  store i64 %95, i64* %RSP, align 8, !tbaa !2428
  %96 = icmp ult i64 %92, 64
  %97 = zext i1 %96 to i8
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %97, i8* %98, align 1, !tbaa !2432
  %99 = trunc i64 %95 to i32
  %100 = and i32 %99, 255
  %101 = call i32 @llvm.ctpop.i32(i32 %100) #16
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %104, i8* %105, align 1, !tbaa !2446
  %106 = xor i64 64, %92
  %107 = xor i64 %106, %95
  %108 = lshr i64 %107, 4
  %109 = trunc i64 %108 to i8
  %110 = and i8 %109, 1
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %110, i8* %111, align 1, !tbaa !2447
  %112 = icmp eq i64 %95, 0
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = lshr i64 %95, 63
  %116 = trunc i64 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %92, 63
  %119 = xor i64 %115, %118
  %120 = add nuw nsw i64 %119, %118
  %121 = icmp eq i64 %120, 2
  %122 = zext i1 %121 to i8
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %122, i8* %123, align 1, !tbaa !2450
  %124 = load i64, i64* %RBP
  %125 = add i64 %124, 56
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i64*
  %129 = load i64, i64* %128
  store i64 %129, i64* %RAX, align 8, !tbaa !2428
  %130 = load i64, i64* %RBP
  %131 = add i64 %130, 48
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i64*
  %135 = load i64, i64* %134
  store i64 %135, i64* %R10, align 8, !tbaa !2428
  %136 = load i64, i64* %RBP
  %137 = add i64 %136, 40
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 4
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %137 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %R11, align 8, !tbaa !2428
  %142 = load i64, i64* %RBP
  %143 = add i64 %142, 32
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RBX, align 8, !tbaa !2428
  %148 = load i64, i64* %RBP
  %149 = add i64 %148, 24
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152
  store i64 %153, i64* %R14, align 8, !tbaa !2428
  %154 = load i64, i64* %RBP
  %155 = add i64 %154, 16
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 4
  store i64 %157, i64* %PC
  %158 = inttoptr i64 %155 to i64*
  %159 = load i64, i64* %158
  store i64 %159, i64* %R15, align 8, !tbaa !2428
  %160 = load i64, i64* %RBP
  %161 = sub i64 %160, 32
  %162 = load i64, i64* %RDI
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 4
  store i64 %164, i64* %PC
  %165 = inttoptr i64 %161 to i64*
  store i64 %162, i64* %165
  %166 = load i64, i64* %RBP
  %167 = sub i64 %166, 40
  %168 = load i64, i64* %RSI
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 4
  store i64 %170, i64* %PC
  %171 = inttoptr i64 %167 to i64*
  store i64 %168, i64* %171
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 48
  %174 = load i64, i64* %RDX
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 4
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %173 to i64*
  store i64 %174, i64* %177
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 56
  %180 = load i64, i64* %RCX
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC
  %183 = inttoptr i64 %179 to i64*
  store i64 %180, i64* %183
  %184 = load i64, i64* %RBP
  %185 = sub i64 %184, 64
  %186 = load i64, i64* %R8
  %187 = load i64, i64* %PC
  %188 = add i64 %187, 4
  store i64 %188, i64* %PC
  %189 = inttoptr i64 %185 to i64*
  store i64 %186, i64* %189
  %190 = load i64, i64* %RBP
  %191 = sub i64 %190, 72
  %192 = load i64, i64* %R9
  %193 = load i64, i64* %PC
  %194 = add i64 %193, 4
  store i64 %194, i64* %PC
  %195 = inttoptr i64 %191 to i64*
  store i64 %192, i64* %195
  %196 = load i64, i64* %RBP
  %197 = sub i64 %196, 80
  %198 = load i64, i64* %R15
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 4
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %197 to i64*
  store i64 %198, i64* %201
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 88
  %204 = load i64, i64* %R14
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC
  %207 = inttoptr i64 %203 to i64*
  store i64 %204, i64* %207
  %208 = load i64, i64* %RBP
  %209 = sub i64 %208, 96
  %210 = load i64, i64* %RBX
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 4
  store i64 %212, i64* %PC
  %213 = inttoptr i64 %209 to i64*
  store i64 %210, i64* %213
  %214 = load i64, i64* %RBP
  %215 = sub i64 %214, 104
  %216 = load i64, i64* %R11
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %215 to i64*
  store i64 %216, i64* %219
  %220 = load i64, i64* %RBP
  %221 = sub i64 %220, 112
  %222 = load i64, i64* %R10
  %223 = load i64, i64* %PC
  %224 = add i64 %223, 4
  store i64 %224, i64* %PC
  %225 = inttoptr i64 %221 to i64*
  store i64 %222, i64* %225
  %226 = load i64, i64* %RBP
  %227 = sub i64 %226, 120
  %228 = load i64, i64* %RAX
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC
  %231 = inttoptr i64 %227 to i64*
  store i64 %228, i64* %231
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 104
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i64*
  %237 = load i64, i64* %236
  store i64 %237, i64* %RAX, align 8, !tbaa !2428
  %238 = load i64, i64* %RAX
  %239 = add i64 %238, 8
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC
  %242 = inttoptr i64 %239 to i64*
  %243 = load i64, i64* %242
  store i64 %243, i64* %RAX, align 8, !tbaa !2428
  %244 = load i64, i64* %RAX
  %245 = load i64, i64* %RBP
  %246 = sub i64 %245, 72
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = inttoptr i64 %246 to i64*
  %250 = load i64, i64* %249
  %251 = sub i64 %244, %250
  %252 = icmp ugt i64 %250, %244
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %251 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 %250, %244
  %263 = xor i64 %262, %251
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %251, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %251, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %244, 63
  %275 = lshr i64 %250, 63
  %276 = xor i64 %275, %274
  %277 = xor i64 %271, %274
  %278 = add nuw nsw i64 %277, %276
  %279 = icmp eq i64 %278, 2
  %280 = zext i1 %279 to i8
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %280, i8* %281, align 1, !tbaa !2450
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 17
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 6
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 6
  store i64 %287, i64* %PC
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %289 = load i8, i8* %288, align 1, !tbaa !2448
  %290 = icmp eq i8 %289, 0
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %293 = select i1 %290, i64 %283, i64 %285
  store i64 %293, i64* %292, align 8, !tbaa !2428
  %294 = load i8, i8* %BRANCH_TAKEN
  %295 = icmp eq i8 %294, 1
  br i1 %295, label %block_404102, label %block_4040f7

block_4041ff:                                     ; preds = %block_40423a, %block_4041b1
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.7, %block_4041b1 ], [ %MEMORY.0, %block_40423a ]
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 144
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 7
  store i64 %299, i64* %PC
  %300 = inttoptr i64 %297 to i64*
  %301 = load i64, i64* %300
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RAX
  %303 = load i64, i64* %RBP
  %304 = sub i64 %303, 80
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i64*
  %308 = load i64, i64* %307
  %309 = sub i64 %302, %308
  %310 = icmp ugt i64 %308, %302
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %311, i8* %312, align 1, !tbaa !2432
  %313 = trunc i64 %309 to i32
  %314 = and i32 %313, 255
  %315 = call i32 @llvm.ctpop.i32(i32 %314) #16
  %316 = trunc i32 %315 to i8
  %317 = and i8 %316, 1
  %318 = xor i8 %317, 1
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %318, i8* %319, align 1, !tbaa !2446
  %320 = xor i64 %308, %302
  %321 = xor i64 %320, %309
  %322 = lshr i64 %321, 4
  %323 = trunc i64 %322 to i8
  %324 = and i8 %323, 1
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %324, i8* %325, align 1, !tbaa !2447
  %326 = icmp eq i64 %309, 0
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %327, i8* %328, align 1, !tbaa !2448
  %329 = lshr i64 %309, 63
  %330 = trunc i64 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %330, i8* %331, align 1, !tbaa !2449
  %332 = lshr i64 %302, 63
  %333 = lshr i64 %308, 63
  %334 = xor i64 %333, %332
  %335 = xor i64 %329, %332
  %336 = add nuw nsw i64 %335, %334
  %337 = icmp eq i64 %336, 2
  %338 = zext i1 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %338, i8* %339, align 1, !tbaa !2450
  %340 = load i64, i64* %PC
  %341 = add i64 %340, 11
  %342 = load i64, i64* %PC
  %343 = add i64 %342, 6
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 6
  store i64 %345, i64* %PC
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %347 = load i8, i8* %346, align 1, !tbaa !2448
  %348 = icmp eq i8 %347, 0
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %351 = select i1 %348, i64 %341, i64 %343
  store i64 %351, i64* %350, align 8, !tbaa !2428
  %352 = load i8, i8* %BRANCH_TAKEN
  %353 = icmp eq i8 %352, 1
  br i1 %353, label %block_404215, label %block_404210

block_4044e9:                                     ; preds = %block_4044d8
  %354 = sub i64 %737, 184
  %355 = load i64, i64* %PC
  %356 = add i64 %355, 7
  store i64 %356, i64* %PC
  %357 = inttoptr i64 %354 to i64*
  %358 = load i64, i64* %357
  store i64 %358, i64* %RAX, align 8, !tbaa !2428
  %359 = load i64, i64* %RBP
  %360 = sub i64 %359, 152
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 7
  store i64 %362, i64* %PC
  %363 = inttoptr i64 %360 to i64*
  %364 = load i64, i64* %363
  store i64 %364, i64* %RCX, align 8, !tbaa !2428
  %365 = load i64, i64* %RCX
  %366 = add i64 %365, 88
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 4
  store i64 %368, i64* %PC
  %369 = inttoptr i64 %366 to i64*
  %370 = load i64, i64* %369
  store i64 %370, i64* %RDX, align 8, !tbaa !2428
  %371 = load i64, i64* %RDX
  %372 = load i64, i64* %RAX
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = sub i64 %371, %372
  store i64 %375, i64* %RDX, align 8, !tbaa !2428
  %376 = icmp ult i64 %371, %372
  %377 = zext i1 %376 to i8
  %378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %377, i8* %378, align 1, !tbaa !2432
  %379 = trunc i64 %375 to i32
  %380 = and i32 %379, 255
  %381 = call i32 @llvm.ctpop.i32(i32 %380) #16
  %382 = trunc i32 %381 to i8
  %383 = and i8 %382, 1
  %384 = xor i8 %383, 1
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %384, i8* %385, align 1, !tbaa !2446
  %386 = xor i64 %372, %371
  %387 = xor i64 %386, %375
  %388 = lshr i64 %387, 4
  %389 = trunc i64 %388 to i8
  %390 = and i8 %389, 1
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %390, i8* %391, align 1, !tbaa !2447
  %392 = icmp eq i64 %375, 0
  %393 = zext i1 %392 to i8
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %393, i8* %394, align 1, !tbaa !2448
  %395 = lshr i64 %375, 63
  %396 = trunc i64 %395 to i8
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %396, i8* %397, align 1, !tbaa !2449
  %398 = lshr i64 %371, 63
  %399 = lshr i64 %372, 63
  %400 = xor i64 %399, %398
  %401 = xor i64 %395, %398
  %402 = add nuw nsw i64 %401, %400
  %403 = icmp eq i64 %402, 2
  %404 = zext i1 %403 to i8
  %405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %404, i8* %405, align 1, !tbaa !2450
  %406 = load i64, i64* %RCX
  %407 = add i64 %406, 88
  %408 = load i64, i64* %RDX
  %409 = load i64, i64* %PC
  %410 = add i64 %409, 4
  store i64 %410, i64* %PC
  %411 = inttoptr i64 %407 to i64*
  store i64 %408, i64* %411
  %412 = load i64, i64* %RBP
  %413 = sub i64 %412, 152
  %414 = load i64, i64* %PC
  %415 = add i64 %414, 7
  store i64 %415, i64* %PC
  %416 = inttoptr i64 %413 to i64*
  %417 = load i64, i64* %416
  store i64 %417, i64* %RAX, align 8, !tbaa !2428
  %418 = load i64, i64* %RAX
  %419 = add i64 %418, 8
  %420 = load i64, i64* %PC
  %421 = add i64 %420, 4
  store i64 %421, i64* %PC
  %422 = inttoptr i64 %419 to i32*
  %423 = load i32, i32* %422
  %424 = sext i32 %423 to i64
  store i64 %424, i64* %RAX, align 8, !tbaa !2428
  %425 = load i64, i64* %RAX
  %426 = load i64, i64* %RBP
  %427 = sub i64 %426, 32
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 4
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %427 to i64*
  %431 = load i64, i64* %430
  %432 = sub i64 %425, %431
  %433 = icmp ugt i64 %431, %425
  %434 = zext i1 %433 to i8
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %434, i8* %435, align 1, !tbaa !2432
  %436 = trunc i64 %432 to i32
  %437 = and i32 %436, 255
  %438 = call i32 @llvm.ctpop.i32(i32 %437) #16
  %439 = trunc i32 %438 to i8
  %440 = and i8 %439, 1
  %441 = xor i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %441, i8* %442, align 1, !tbaa !2446
  %443 = xor i64 %431, %425
  %444 = xor i64 %443, %432
  %445 = lshr i64 %444, 4
  %446 = trunc i64 %445 to i8
  %447 = and i8 %446, 1
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %447, i8* %448, align 1, !tbaa !2447
  %449 = icmp eq i64 %432, 0
  %450 = zext i1 %449 to i8
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %450, i8* %451, align 1, !tbaa !2448
  %452 = lshr i64 %432, 63
  %453 = trunc i64 %452 to i8
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %453, i8* %454, align 1, !tbaa !2449
  %455 = lshr i64 %425, 63
  %456 = lshr i64 %431, 63
  %457 = xor i64 %456, %455
  %458 = xor i64 %452, %455
  %459 = add nuw nsw i64 %458, %457
  %460 = icmp eq i64 %459, 2
  %461 = zext i1 %460 to i8
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %461, i8* %462, align 1, !tbaa !2450
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 30
  %465 = load i64, i64* %PC
  %466 = add i64 %465, 6
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 6
  store i64 %468, i64* %PC
  %469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %470 = load i8, i8* %469, align 1, !tbaa !2448
  store i8 %470, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %472 = icmp ne i8 %470, 0
  %473 = select i1 %472, i64 %464, i64 %466
  store i64 %473, i64* %471, align 8, !tbaa !2428
  %474 = load i8, i8* %BRANCH_TAKEN
  %475 = icmp eq i8 %474, 1
  %476 = load i64, i64* %RBP
  %477 = sub i64 %476, 48
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 4
  store i64 %479, i64* %PC
  %480 = inttoptr i64 %477 to i64*
  %481 = load i64, i64* %480
  store i64 %481, i64* %RAX, align 8, !tbaa !2428
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 152
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 7
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i64*
  %487 = load i64, i64* %486
  store i64 %487, i64* %RCX, align 8, !tbaa !2428
  br i1 %475, label %block_40452f, label %block_404517

block_4045f2:                                     ; preds = %block_40456c
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 159
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 5
  store i64 %491, i64* %PC
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %489, i64* %492, align 8, !tbaa !2428
  br label %block_404691

block_40457d:                                     ; preds = %block_40456c
  %493 = load i64, i64* %RBP
  %494 = sub i64 %493, 184
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 7
  store i64 %496, i64* %PC
  %497 = inttoptr i64 %494 to i64*
  %498 = load i64, i64* %497
  store i64 %498, i64* %RAX, align 8, !tbaa !2428
  %499 = load i64, i64* %RBP
  %500 = sub i64 %499, 152
  %501 = load i64, i64* %PC
  %502 = add i64 %501, 7
  store i64 %502, i64* %PC
  %503 = inttoptr i64 %500 to i64*
  %504 = load i64, i64* %503
  store i64 %504, i64* %RCX, align 8, !tbaa !2428
  %505 = load i64, i64* %RAX
  %506 = load i64, i64* %RCX
  %507 = add i64 %506, 88
  %508 = load i64, i64* %PC
  %509 = add i64 %508, 4
  store i64 %509, i64* %PC
  %510 = inttoptr i64 %507 to i64*
  %511 = load i64, i64* %510
  %512 = add i64 %511, %505
  store i64 %512, i64* %RAX, align 8, !tbaa !2428
  %513 = icmp ult i64 %512, %505
  %514 = icmp ult i64 %512, %511
  %515 = or i1 %513, %514
  %516 = zext i1 %515 to i8
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %516, i8* %517, align 1, !tbaa !2432
  %518 = trunc i64 %512 to i32
  %519 = and i32 %518, 255
  %520 = call i32 @llvm.ctpop.i32(i32 %519) #16
  %521 = trunc i32 %520 to i8
  %522 = and i8 %521, 1
  %523 = xor i8 %522, 1
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %523, i8* %524, align 1, !tbaa !2446
  %525 = xor i64 %511, %505
  %526 = xor i64 %525, %512
  %527 = lshr i64 %526, 4
  %528 = trunc i64 %527 to i8
  %529 = and i8 %528, 1
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %529, i8* %530, align 1, !tbaa !2447
  %531 = icmp eq i64 %512, 0
  %532 = zext i1 %531 to i8
  %533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %532, i8* %533, align 1, !tbaa !2448
  %534 = lshr i64 %512, 63
  %535 = trunc i64 %534 to i8
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %535, i8* %536, align 1, !tbaa !2449
  %537 = lshr i64 %505, 63
  %538 = lshr i64 %511, 63
  %539 = xor i64 %534, %537
  %540 = xor i64 %534, %538
  %541 = add nuw nsw i64 %539, %540
  %542 = icmp eq i64 %541, 2
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %543, i8* %544, align 1, !tbaa !2450
  %545 = load i64, i64* %RCX
  %546 = add i64 %545, 88
  %547 = load i64, i64* %RAX
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 4
  store i64 %549, i64* %PC
  %550 = inttoptr i64 %546 to i64*
  store i64 %547, i64* %550
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 152
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 7
  store i64 %554, i64* %PC
  %555 = inttoptr i64 %552 to i64*
  %556 = load i64, i64* %555
  store i64 %556, i64* %RAX, align 8, !tbaa !2428
  %557 = load i64, i64* %RAX
  %558 = add i64 %557, 8
  %559 = load i64, i64* %PC
  %560 = add i64 %559, 4
  store i64 %560, i64* %PC
  %561 = inttoptr i64 %558 to i32*
  %562 = load i32, i32* %561
  %563 = sext i32 %562 to i64
  store i64 %563, i64* %RAX, align 8, !tbaa !2428
  %564 = load i64, i64* %RAX
  %565 = load i64, i64* %RBP
  %566 = sub i64 %565, 32
  %567 = load i64, i64* %PC
  %568 = add i64 %567, 4
  store i64 %568, i64* %PC
  %569 = inttoptr i64 %566 to i64*
  %570 = load i64, i64* %569
  %571 = sub i64 %564, %570
  %572 = icmp ugt i64 %570, %564
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %573, i8* %574, align 1, !tbaa !2432
  %575 = trunc i64 %571 to i32
  %576 = and i32 %575, 255
  %577 = call i32 @llvm.ctpop.i32(i32 %576) #16
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  %580 = xor i8 %579, 1
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %580, i8* %581, align 1, !tbaa !2446
  %582 = xor i64 %570, %564
  %583 = xor i64 %582, %571
  %584 = lshr i64 %583, 4
  %585 = trunc i64 %584 to i8
  %586 = and i8 %585, 1
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %586, i8* %587, align 1, !tbaa !2447
  %588 = icmp eq i64 %571, 0
  %589 = zext i1 %588 to i8
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %589, i8* %590, align 1, !tbaa !2448
  %591 = lshr i64 %571, 63
  %592 = trunc i64 %591 to i8
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %592, i8* %593, align 1, !tbaa !2449
  %594 = lshr i64 %564, 63
  %595 = lshr i64 %570, 63
  %596 = xor i64 %595, %594
  %597 = xor i64 %591, %594
  %598 = add nuw nsw i64 %597, %596
  %599 = icmp eq i64 %598, 2
  %600 = zext i1 %599 to i8
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %600, i8* %601, align 1, !tbaa !2450
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 30
  %604 = load i64, i64* %PC
  %605 = add i64 %604, 6
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 6
  store i64 %607, i64* %PC
  %608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %609 = load i8, i8* %608, align 1, !tbaa !2448
  %610 = icmp eq i8 %609, 0
  %611 = zext i1 %610 to i8
  store i8 %611, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %613 = select i1 %610, i64 %603, i64 %605
  store i64 %613, i64* %612, align 8, !tbaa !2428
  %614 = load i8, i8* %BRANCH_TAKEN
  %615 = icmp eq i8 %614, 1
  %616 = load i64, i64* %RBP
  %617 = sub i64 %616, 48
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 4
  store i64 %619, i64* %PC
  %620 = inttoptr i64 %617 to i64*
  %621 = load i64, i64* %620
  store i64 %621, i64* %RAX, align 8, !tbaa !2428
  %622 = load i64, i64* %RBP
  %623 = sub i64 %622, 152
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 7
  store i64 %625, i64* %PC
  %626 = inttoptr i64 %623 to i64*
  %627 = load i64, i64* %626
  store i64 %627, i64* %RCX, align 8, !tbaa !2428
  br i1 %615, label %block_4045c0, label %block_4045a8

block_404358:                                     ; preds = %block_40431e
  %628 = load i64, i64* %RBP
  %629 = sub i64 %628, 152
  %630 = load i64, i64* %PC
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC
  %632 = inttoptr i64 %629 to i64*
  %633 = load i64, i64* %632
  store i64 %633, i64* %RAX, align 8, !tbaa !2428
  %634 = load i64, i64* %RBP
  %635 = sub i64 %634, 152
  %636 = load i64, i64* %PC
  %637 = add i64 %636, 7
  store i64 %637, i64* %PC
  %638 = inttoptr i64 %635 to i64*
  %639 = load i64, i64* %638
  store i64 %639, i64* %RCX, align 8, !tbaa !2428
  %640 = load i64, i64* %RCX
  %641 = add i64 %640, 32
  %642 = load i64, i64* %PC
  %643 = add i64 %642, 4
  store i64 %643, i64* %PC
  %644 = inttoptr i64 %641 to i64*
  %645 = load i64, i64* %644
  store i64 %645, i64* %RCX, align 8, !tbaa !2428
  %646 = load i64, i64* %RCX
  %647 = add i64 %646, 40
  %648 = load i64, i64* %RAX
  %649 = load i64, i64* %PC
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC
  %651 = inttoptr i64 %647 to i64*
  store i64 %648, i64* %651
  br label %block_40436e

block_404164:                                     ; preds = %block_404159
  %652 = load i64, i64* %RBP
  %653 = sub i64 %652, 112
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 4
  store i64 %655, i64* %PC
  %656 = inttoptr i64 %653 to i64*
  %657 = load i64, i64* %656
  store i64 %657, i64* %RAX, align 8, !tbaa !2428
  %658 = load i64, i64* %RBP
  %659 = sub i64 %658, 216
  %660 = load i64, i64* %RAX
  %661 = load i64, i64* %PC
  %662 = add i64 %661, 7
  store i64 %662, i64* %PC
  %663 = inttoptr i64 %659 to i64*
  store i64 %660, i64* %663
  %664 = load i64, i64* %PC
  %665 = add i64 %664, 20
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 5
  store i64 %667, i64* %PC
  %668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %665, i64* %668, align 8, !tbaa !2428
  br label %block_404183

block_404561:                                     ; preds = %block_4044d8
  %669 = sub i64 %737, 72
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 4
  store i64 %671, i64* %PC
  %672 = inttoptr i64 %669 to i64*
  %673 = load i64, i64* %672
  store i64 %673, i64* %RAX, align 8, !tbaa !2428
  %674 = load i64, i64* %RBP
  %675 = sub i64 %674, 152
  %676 = load i64, i64* %RAX
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 7
  store i64 %678, i64* %PC
  %679 = inttoptr i64 %675 to i64*
  store i64 %676, i64* %679
  br label %block_40456c

block_4044d8:                                     ; preds = %block_4044bf, %block_404545
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.11, %block_4044bf ], [ %MEMORY.5, %block_404545 ]
  %680 = load i64, i64* %RBP
  %681 = sub i64 %680, 152
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 7
  store i64 %683, i64* %PC
  %684 = inttoptr i64 %681 to i64*
  %685 = load i64, i64* %684
  store i64 %685, i64* %RAX, align 8, !tbaa !2428
  %686 = load i64, i64* %RAX
  %687 = load i64, i64* %RBP
  %688 = sub i64 %687, 96
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 4
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %688 to i64*
  %692 = load i64, i64* %691
  %693 = sub i64 %686, %692
  %694 = icmp ugt i64 %692, %686
  %695 = zext i1 %694 to i8
  %696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %695, i8* %696, align 1, !tbaa !2432
  %697 = trunc i64 %693 to i32
  %698 = and i32 %697, 255
  %699 = call i32 @llvm.ctpop.i32(i32 %698) #16
  %700 = trunc i32 %699 to i8
  %701 = and i8 %700, 1
  %702 = xor i8 %701, 1
  %703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %702, i8* %703, align 1, !tbaa !2446
  %704 = xor i64 %692, %686
  %705 = xor i64 %704, %693
  %706 = lshr i64 %705, 4
  %707 = trunc i64 %706 to i8
  %708 = and i8 %707, 1
  %709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %708, i8* %709, align 1, !tbaa !2447
  %710 = icmp eq i64 %693, 0
  %711 = zext i1 %710 to i8
  %712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %711, i8* %712, align 1, !tbaa !2448
  %713 = lshr i64 %693, 63
  %714 = trunc i64 %713 to i8
  %715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %714, i8* %715, align 1, !tbaa !2449
  %716 = lshr i64 %686, 63
  %717 = lshr i64 %692, 63
  %718 = xor i64 %717, %716
  %719 = xor i64 %713, %716
  %720 = add nuw nsw i64 %719, %718
  %721 = icmp eq i64 %720, 2
  %722 = zext i1 %721 to i8
  %723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %722, i8* %723, align 1, !tbaa !2450
  %724 = load i64, i64* %PC
  %725 = add i64 %724, 126
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 6
  %728 = load i64, i64* %PC
  %729 = add i64 %728, 6
  store i64 %729, i64* %PC
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %731 = load i8, i8* %730, align 1, !tbaa !2448
  store i8 %731, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %733 = icmp ne i8 %731, 0
  %734 = select i1 %733, i64 %725, i64 %727
  store i64 %734, i64* %732, align 8, !tbaa !2428
  %735 = load i8, i8* %BRANCH_TAKEN
  %736 = icmp eq i8 %735, 1
  %737 = load i64, i64* %RBP
  br i1 %736, label %block_404561, label %block_4044e9

block_40464e:                                     ; preds = %block_40465f, %block_404643
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.16, %block_404643 ], [ %MEMORY.2, %block_40465f ]
  %738 = load i64, i64* %RBP
  %739 = sub i64 %738, 152
  %740 = load i64, i64* %PC
  %741 = add i64 %740, 7
  store i64 %741, i64* %PC
  %742 = inttoptr i64 %739 to i64*
  %743 = load i64, i64* %742
  store i64 %743, i64* %RAX, align 8, !tbaa !2428
  %744 = load i64, i64* %RAX
  %745 = load i64, i64* %RBP
  %746 = sub i64 %745, 96
  %747 = load i64, i64* %PC
  %748 = add i64 %747, 4
  store i64 %748, i64* %PC
  %749 = inttoptr i64 %746 to i64*
  %750 = load i64, i64* %749
  %751 = sub i64 %744, %750
  %752 = icmp ugt i64 %750, %744
  %753 = zext i1 %752 to i8
  %754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %753, i8* %754, align 1, !tbaa !2432
  %755 = trunc i64 %751 to i32
  %756 = and i32 %755, 255
  %757 = call i32 @llvm.ctpop.i32(i32 %756) #16
  %758 = trunc i32 %757 to i8
  %759 = and i8 %758, 1
  %760 = xor i8 %759, 1
  %761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %760, i8* %761, align 1, !tbaa !2446
  %762 = xor i64 %750, %744
  %763 = xor i64 %762, %751
  %764 = lshr i64 %763, 4
  %765 = trunc i64 %764 to i8
  %766 = and i8 %765, 1
  %767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %766, i8* %767, align 1, !tbaa !2447
  %768 = icmp eq i64 %751, 0
  %769 = zext i1 %768 to i8
  %770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %769, i8* %770, align 1, !tbaa !2448
  %771 = lshr i64 %751, 63
  %772 = trunc i64 %771 to i8
  %773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %772, i8* %773, align 1, !tbaa !2449
  %774 = lshr i64 %744, 63
  %775 = lshr i64 %750, 63
  %776 = xor i64 %775, %774
  %777 = xor i64 %771, %774
  %778 = add nuw nsw i64 %777, %776
  %779 = icmp eq i64 %778, 2
  %780 = zext i1 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %780, i8* %781, align 1, !tbaa !2450
  %782 = load i64, i64* %PC
  %783 = add i64 %782, 51
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 6
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 6
  store i64 %787, i64* %PC
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %789 = load i8, i8* %788, align 1, !tbaa !2448
  store i8 %789, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %791 = icmp ne i8 %789, 0
  %792 = select i1 %791, i64 %783, i64 %785
  store i64 %792, i64* %790, align 8, !tbaa !2428
  %793 = load i8, i8* %BRANCH_TAKEN
  %794 = icmp eq i8 %793, 1
  br i1 %794, label %block_40468c, label %block_40465f

block_40413a:                                     ; preds = %block_40411f
  %795 = load i64, i64* %RAX
  %796 = load i32, i32* %EAX
  %797 = zext i32 %796 to i64
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 2
  store i64 %799, i64* %PC
  %800 = xor i64 %797, %795
  %801 = trunc i64 %800 to i32
  %802 = and i64 %800, 4294967295
  store i64 %802, i64* %RAX, align 8, !tbaa !2428
  %803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %803, align 1, !tbaa !2432
  %804 = and i32 %801, 255
  %805 = call i32 @llvm.ctpop.i32(i32 %804) #16
  %806 = trunc i32 %805 to i8
  %807 = and i8 %806, 1
  %808 = xor i8 %807, 1
  %809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %808, i8* %809, align 1, !tbaa !2446
  %810 = icmp eq i32 %801, 0
  %811 = zext i1 %810 to i8
  %812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %811, i8* %812, align 1, !tbaa !2448
  %813 = lshr i32 %801, 31
  %814 = trunc i32 %813 to i8
  %815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %814, i8* %815, align 1, !tbaa !2449
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %816, align 1, !tbaa !2450
  %817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %817, align 1, !tbaa !2447
  %818 = load i32, i32* %EAX
  %819 = zext i32 %818 to i64
  %820 = load i64, i64* %PC
  %821 = add i64 %820, 2
  store i64 %821, i64* %PC
  %822 = and i64 %819, 4294967295
  store i64 %822, i64* %RCX, align 8, !tbaa !2428
  %823 = load i64, i64* %RCX
  %824 = load i64, i64* %RBP
  %825 = sub i64 %824, 112
  %826 = load i64, i64* %PC
  %827 = add i64 %826, 4
  store i64 %827, i64* %PC
  %828 = inttoptr i64 %825 to i64*
  %829 = load i64, i64* %828
  %830 = sub i64 %823, %829
  store i64 %830, i64* %RCX, align 8, !tbaa !2428
  %831 = icmp ugt i64 %829, %823
  %832 = zext i1 %831 to i8
  %833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %832, i8* %833, align 1, !tbaa !2432
  %834 = trunc i64 %830 to i32
  %835 = and i32 %834, 255
  %836 = call i32 @llvm.ctpop.i32(i32 %835) #16
  %837 = trunc i32 %836 to i8
  %838 = and i8 %837, 1
  %839 = xor i8 %838, 1
  %840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %839, i8* %840, align 1, !tbaa !2446
  %841 = xor i64 %829, %823
  %842 = xor i64 %841, %830
  %843 = lshr i64 %842, 4
  %844 = trunc i64 %843 to i8
  %845 = and i8 %844, 1
  %846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %845, i8* %846, align 1, !tbaa !2447
  %847 = icmp eq i64 %830, 0
  %848 = zext i1 %847 to i8
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %848, i8* %849, align 1, !tbaa !2448
  %850 = lshr i64 %830, 63
  %851 = trunc i64 %850 to i8
  %852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %851, i8* %852, align 1, !tbaa !2449
  %853 = lshr i64 %823, 63
  %854 = lshr i64 %829, 63
  %855 = xor i64 %854, %853
  %856 = xor i64 %850, %853
  %857 = add nuw nsw i64 %856, %855
  %858 = icmp eq i64 %857, 2
  %859 = zext i1 %858 to i8
  %860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %859, i8* %860, align 1, !tbaa !2450
  %861 = load i64, i64* %RBP
  %862 = sub i64 %861, 208
  %863 = load i64, i64* %RCX
  %864 = load i64, i64* %PC
  %865 = add i64 %864, 7
  store i64 %865, i64* %PC
  %866 = inttoptr i64 %862 to i64*
  store i64 %863, i64* %866
  br label %block_404149

block_4040f7:                                     ; preds = %block_404090
  %867 = load i64, i64* %RBP
  %868 = sub i64 %867, 112
  %869 = load i64, i64* %PC
  %870 = add i64 %869, 5
  store i64 %870, i64* %PC
  %871 = inttoptr i64 %868 to i64*
  %872 = load i64, i64* %871
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %873, align 1, !tbaa !2432
  %874 = trunc i64 %872 to i32
  %875 = and i32 %874, 255
  %876 = call i32 @llvm.ctpop.i32(i32 %875) #16
  %877 = trunc i32 %876 to i8
  %878 = and i8 %877, 1
  %879 = xor i8 %878, 1
  %880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %879, i8* %880, align 1, !tbaa !2446
  %881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %881, align 1, !tbaa !2447
  %882 = icmp eq i64 %872, 0
  %883 = zext i1 %882 to i8
  %884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %883, i8* %884, align 1, !tbaa !2448
  %885 = lshr i64 %872, 63
  %886 = trunc i64 %885 to i8
  %887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %886, i8* %887, align 1, !tbaa !2449
  %888 = lshr i64 %872, 63
  %889 = xor i64 %885, %888
  %890 = add nuw nsw i64 %889, %888
  %891 = icmp eq i64 %890, 2
  %892 = zext i1 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %892, i8* %893, align 1, !tbaa !2450
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 35
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 6
  %898 = load i64, i64* %PC
  %899 = add i64 %898, 6
  store i64 %899, i64* %PC
  %900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %901 = load i8, i8* %900, align 1, !tbaa !2449
  %902 = icmp ne i8 %901, 0
  %903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %904 = load i8, i8* %903, align 1, !tbaa !2450
  %905 = icmp ne i8 %904, 0
  %906 = xor i1 %902, %905
  %907 = zext i1 %906 to i8
  store i8 %907, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %909 = select i1 %906, i64 %895, i64 %897
  store i64 %909, i64* %908, align 8, !tbaa !2428
  %910 = load i8, i8* %BRANCH_TAKEN
  %911 = icmp eq i8 %910, 1
  br i1 %911, label %block_40411f, label %block_404102

block_40436e:                                     ; preds = %block_40431e, %block_404358
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.9, %block_40431e ], [ %MEMORY.9, %block_404358 ]
  %912 = load i64, i64* %RBP
  %913 = sub i64 %912, 152
  %914 = load i64, i64* %PC
  %915 = add i64 %914, 7
  store i64 %915, i64* %PC
  %916 = inttoptr i64 %913 to i64*
  %917 = load i64, i64* %916
  store i64 %917, i64* %RAX, align 8, !tbaa !2428
  %918 = load i64, i64* %RBP
  %919 = sub i64 %918, 160
  %920 = load i64, i64* %PC
  %921 = add i64 %920, 7
  store i64 %921, i64* %PC
  %922 = inttoptr i64 %919 to i64*
  %923 = load i64, i64* %922
  store i64 %923, i64* %RCX, align 8, !tbaa !2428
  %924 = load i64, i64* %RCX
  %925 = add i64 %924, 16
  %926 = load i64, i64* %RAX
  %927 = load i64, i64* %PC
  %928 = add i64 %927, 4
  store i64 %928, i64* %PC
  %929 = inttoptr i64 %925 to i64*
  store i64 %926, i64* %929
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 152
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 7
  store i64 %933, i64* %PC
  %934 = inttoptr i64 %931 to i64*
  %935 = load i64, i64* %934
  store i64 %935, i64* %RAX, align 8, !tbaa !2428
  %936 = load i64, i64* %RAX
  %937 = add i64 %936, 40
  %938 = load i64, i64* %PC
  %939 = add i64 %938, 8
  store i64 %939, i64* %PC
  %940 = inttoptr i64 %937 to i64*
  store i64 0, i64* %940
  %941 = load i64, i64* %RBP
  %942 = sub i64 %941, 152
  %943 = load i64, i64* %PC
  %944 = add i64 %943, 7
  store i64 %944, i64* %PC
  %945 = inttoptr i64 %942 to i64*
  %946 = load i64, i64* %945
  store i64 %946, i64* %RAX, align 8, !tbaa !2428
  %947 = load i64, i64* %RAX
  %948 = add i64 %947, 8
  %949 = load i64, i64* %PC
  %950 = add i64 %949, 4
  store i64 %950, i64* %PC
  %951 = inttoptr i64 %948 to i32*
  %952 = load i32, i32* %951
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %953, align 1, !tbaa !2432
  %954 = and i32 %952, 255
  %955 = call i32 @llvm.ctpop.i32(i32 %954) #16
  %956 = trunc i32 %955 to i8
  %957 = and i8 %956, 1
  %958 = xor i8 %957, 1
  %959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %958, i8* %959, align 1, !tbaa !2446
  %960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %960, align 1, !tbaa !2447
  %961 = icmp eq i32 %952, 0
  %962 = zext i1 %961 to i8
  %963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %962, i8* %963, align 1, !tbaa !2448
  %964 = lshr i32 %952, 31
  %965 = trunc i32 %964 to i8
  %966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %965, i8* %966, align 1, !tbaa !2449
  %967 = lshr i32 %952, 31
  %968 = xor i32 %964, %967
  %969 = add nuw nsw i32 %968, %967
  %970 = icmp eq i32 %969, 2
  %971 = zext i1 %970 to i8
  %972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %971, i8* %972, align 1, !tbaa !2450
  %973 = load i64, i64* %PC
  %974 = add i64 %973, 3
  store i64 %974, i64* %PC
  %975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %976 = load i8, i8* %975, align 1, !tbaa !2448
  %977 = icmp eq i8 %976, 0
  %978 = zext i1 %977 to i8
  store i8 %978, i8* %DL, align 1, !tbaa !2451
  %979 = load i8, i8* %DL
  %980 = zext i8 %979 to i64
  %981 = load i64, i64* %PC
  %982 = add i64 %981, 3
  store i64 %982, i64* %PC
  %983 = xor i64 255, %980
  %984 = trunc i64 %983 to i8
  store i8 %984, i8* %DL, align 1, !tbaa !2451
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %985, align 1, !tbaa !2432
  %986 = trunc i64 %983 to i32
  %987 = and i32 %986, 255
  %988 = call i32 @llvm.ctpop.i32(i32 %987) #16
  %989 = trunc i32 %988 to i8
  %990 = and i8 %989, 1
  %991 = xor i8 %990, 1
  %992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %991, i8* %992, align 1, !tbaa !2446
  %993 = icmp eq i8 %984, 0
  %994 = zext i1 %993 to i8
  %995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %994, i8* %995, align 1, !tbaa !2448
  %996 = lshr i8 %984, 7
  %997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %996, i8* %997, align 1, !tbaa !2449
  %998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %998, align 1, !tbaa !2450
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %999, align 1, !tbaa !2447
  %1000 = load i8, i8* %DL
  %1001 = zext i8 %1000 to i64
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 3
  store i64 %1003, i64* %PC
  %1004 = and i64 1, %1001
  %1005 = trunc i64 %1004 to i8
  store i8 %1005, i8* %DL, align 1, !tbaa !2451
  %1006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1006, align 1, !tbaa !2432
  %1007 = trunc i64 %1004 to i32
  %1008 = and i32 %1007, 255
  %1009 = call i32 @llvm.ctpop.i32(i32 %1008) #16
  %1010 = trunc i32 %1009 to i8
  %1011 = and i8 %1010, 1
  %1012 = xor i8 %1011, 1
  %1013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1012, i8* %1013, align 1, !tbaa !2446
  %1014 = icmp eq i8 %1005, 0
  %1015 = zext i1 %1014 to i8
  %1016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1015, i8* %1016, align 1, !tbaa !2448
  %1017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %1017, align 1, !tbaa !2449
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1018, align 1, !tbaa !2450
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1019, align 1, !tbaa !2447
  %1020 = load i8, i8* %DL
  %1021 = zext i8 %1020 to i64
  %1022 = load i64, i64* %PC
  %1023 = add i64 %1022, 3
  store i64 %1023, i64* %PC
  %1024 = and i64 %1021, 255
  store i64 %1024, i64* %RSI, align 8, !tbaa !2428
  %1025 = load i32, i32* %ESI
  %1026 = zext i32 %1025 to i64
  %1027 = load i64, i64* %PC
  %1028 = add i64 %1027, 3
  store i64 %1028, i64* %PC
  %1029 = shl i64 %1026, 32
  %1030 = ashr exact i64 %1029, 32
  store i64 %1030, i64* %RAX, align 8, !tbaa !2428
  %1031 = load i64, i64* %RBP
  %1032 = sub i64 %1031, 168
  %1033 = load i64, i64* %RAX
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 7
  store i64 %1035, i64* %PC
  %1036 = inttoptr i64 %1032 to i64*
  store i64 %1033, i64* %1036
  %1037 = load i64, i64* %RBP
  %1038 = sub i64 %1037, 168
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 7
  store i64 %1040, i64* %PC
  %1041 = inttoptr i64 %1038 to i64*
  %1042 = load i64, i64* %1041
  store i64 %1042, i64* %RAX, align 8, !tbaa !2428
  %1043 = load i64, i64* %RAX
  %1044 = load i64, i64* %RBP
  %1045 = sub i64 %1044, 32
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 4
  store i64 %1047, i64* %PC
  %1048 = inttoptr i64 %1045 to i64*
  %1049 = load i64, i64* %1048
  %1050 = sub i64 %1043, %1049
  %1051 = icmp ugt i64 %1049, %1043
  %1052 = zext i1 %1051 to i8
  %1053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1052, i8* %1053, align 1, !tbaa !2432
  %1054 = trunc i64 %1050 to i32
  %1055 = and i32 %1054, 255
  %1056 = call i32 @llvm.ctpop.i32(i32 %1055) #16
  %1057 = trunc i32 %1056 to i8
  %1058 = and i8 %1057, 1
  %1059 = xor i8 %1058, 1
  %1060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1059, i8* %1060, align 1, !tbaa !2446
  %1061 = xor i64 %1049, %1043
  %1062 = xor i64 %1061, %1050
  %1063 = lshr i64 %1062, 4
  %1064 = trunc i64 %1063 to i8
  %1065 = and i8 %1064, 1
  %1066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1065, i8* %1066, align 1, !tbaa !2447
  %1067 = icmp eq i64 %1050, 0
  %1068 = zext i1 %1067 to i8
  %1069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1068, i8* %1069, align 1, !tbaa !2448
  %1070 = lshr i64 %1050, 63
  %1071 = trunc i64 %1070 to i8
  %1072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1071, i8* %1072, align 1, !tbaa !2449
  %1073 = lshr i64 %1043, 63
  %1074 = lshr i64 %1049, 63
  %1075 = xor i64 %1074, %1073
  %1076 = xor i64 %1070, %1073
  %1077 = add nuw nsw i64 %1076, %1075
  %1078 = icmp eq i64 %1077, 2
  %1079 = zext i1 %1078 to i8
  %1080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1079, i8* %1080, align 1, !tbaa !2450
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 33
  %1083 = load i64, i64* %PC
  %1084 = add i64 %1083, 6
  %1085 = load i64, i64* %PC
  %1086 = add i64 %1085, 6
  store i64 %1086, i64* %PC
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1088 = load i8, i8* %1087, align 1, !tbaa !2448
  %1089 = icmp eq i8 %1088, 0
  %1090 = zext i1 %1089 to i8
  store i8 %1090, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1092 = select i1 %1089, i64 %1082, i64 %1084
  store i64 %1092, i64* %1091, align 8, !tbaa !2428
  %1093 = load i8, i8* %BRANCH_TAKEN
  %1094 = icmp eq i8 %1093, 1
  %1095 = load i64, i64* %RBP
  %1096 = sub i64 %1095, 152
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 7
  store i64 %1098, i64* %PC
  %1099 = inttoptr i64 %1096 to i64*
  %1100 = load i64, i64* %1099
  store i64 %1100, i64* %RAX, align 8, !tbaa !2428
  %1101 = load i64, i64* %RAX
  %1102 = add i64 %1101, 80
  %1103 = load i64, i64* %PC
  %1104 = add i64 %1103, 4
  store i64 %1104, i64* %PC
  %1105 = inttoptr i64 %1102 to i64*
  %1106 = load i64, i64* %1105
  store i64 %1106, i64* %RAX, align 8, !tbaa !2428
  %1107 = load i64, i64* %RAX
  %1108 = load i64, i64* %RBP
  %1109 = sub i64 %1108, 48
  %1110 = load i64, i64* %PC
  %1111 = add i64 %1110, 4
  store i64 %1111, i64* %PC
  br i1 %1094, label %block_4043dc, label %block_4043c1

block_404149:                                     ; preds = %block_40412a, %block_40413a
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.17, %block_40413a ], [ %MEMORY.17, %block_40412a ]
  %1112 = load i64, i64* %RBP
  %1113 = sub i64 %1112, 208
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 7
  store i64 %1115, i64* %PC
  %1116 = inttoptr i64 %1113 to i64*
  %1117 = load i64, i64* %1116
  store i64 %1117, i64* %RAX, align 8, !tbaa !2428
  %1118 = load i64, i64* %RBP
  %1119 = sub i64 %1118, 112
  %1120 = load i64, i64* %RAX
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 4
  store i64 %1122, i64* %PC
  %1123 = inttoptr i64 %1119 to i64*
  store i64 %1120, i64* %1123
  %1124 = load i64, i64* %PC
  %1125 = add i64 %1124, 65
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 5
  store i64 %1127, i64* %PC
  %1128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1125, i64* %1128, align 8, !tbaa !2428
  br label %block_404195

block_404545:                                     ; preds = %block_404517, %block_40452f
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.1, %block_40452f ], [ %MEMORY.1, %block_404517 ]
  %1129 = load i64, i64* %PC
  %1130 = add i64 %1129, 5
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 5
  store i64 %1132, i64* %PC
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1130, i64* %1133, align 8, !tbaa !2428
  %1134 = load i64, i64* %RBP
  %1135 = sub i64 %1134, 152
  %1136 = load i64, i64* %PC
  %1137 = add i64 %1136, 7
  store i64 %1137, i64* %PC
  %1138 = inttoptr i64 %1135 to i64*
  %1139 = load i64, i64* %1138
  store i64 %1139, i64* %RAX, align 8, !tbaa !2428
  %1140 = load i64, i64* %RAX
  %1141 = add i64 %1140, 24
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 4
  store i64 %1143, i64* %PC
  %1144 = inttoptr i64 %1141 to i64*
  %1145 = load i64, i64* %1144
  store i64 %1145, i64* %RAX, align 8, !tbaa !2428
  %1146 = load i64, i64* %RBP
  %1147 = sub i64 %1146, 152
  %1148 = load i64, i64* %RAX
  %1149 = load i64, i64* %PC
  %1150 = add i64 %1149, 7
  store i64 %1150, i64* %PC
  %1151 = inttoptr i64 %1147 to i64*
  store i64 %1148, i64* %1151
  %1152 = load i64, i64* %PC
  %1153 = sub i64 %1152, 132
  %1154 = load i64, i64* %PC
  %1155 = add i64 %1154, 5
  store i64 %1155, i64* %PC
  %1156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1153, i64* %1156, align 8, !tbaa !2428
  br label %block_4044d8

block_404643:                                     ; preds = %block_404602
  %1157 = sub i64 %2909, 72
  %1158 = load i64, i64* %PC
  %1159 = add i64 %1158, 4
  store i64 %1159, i64* %PC
  %1160 = inttoptr i64 %1157 to i64*
  %1161 = load i64, i64* %1160
  store i64 %1161, i64* %RAX, align 8, !tbaa !2428
  %1162 = load i64, i64* %RBP
  %1163 = sub i64 %1162, 152
  %1164 = load i64, i64* %RAX
  %1165 = load i64, i64* %PC
  %1166 = add i64 %1165, 7
  store i64 %1166, i64* %PC
  %1167 = inttoptr i64 %1163 to i64*
  store i64 %1164, i64* %1167
  br label %block_40464e

block_4045c0:                                     ; preds = %block_40457d
  %1168 = load i64, i64* %RCX
  %1169 = add i64 %1168, 80
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 4
  store i64 %1171, i64* %PC
  %1172 = inttoptr i64 %1169 to i64*
  %1173 = load i64, i64* %1172
  store i64 %1173, i64* %RDX, align 8, !tbaa !2428
  %1174 = load i64, i64* %RDX
  %1175 = load i64, i64* %RAX
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 3
  store i64 %1177, i64* %PC
  %1178 = sub i64 %1174, %1175
  store i64 %1178, i64* %RDX, align 8, !tbaa !2428
  %1179 = icmp ult i64 %1174, %1175
  %1180 = zext i1 %1179 to i8
  %1181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1180, i8* %1181, align 1, !tbaa !2432
  %1182 = trunc i64 %1178 to i32
  %1183 = and i32 %1182, 255
  %1184 = call i32 @llvm.ctpop.i32(i32 %1183) #16
  %1185 = trunc i32 %1184 to i8
  %1186 = and i8 %1185, 1
  %1187 = xor i8 %1186, 1
  %1188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1187, i8* %1188, align 1, !tbaa !2446
  %1189 = xor i64 %1175, %1174
  %1190 = xor i64 %1189, %1178
  %1191 = lshr i64 %1190, 4
  %1192 = trunc i64 %1191 to i8
  %1193 = and i8 %1192, 1
  %1194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1193, i8* %1194, align 1, !tbaa !2447
  %1195 = icmp eq i64 %1178, 0
  %1196 = zext i1 %1195 to i8
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1196, i8* %1197, align 1, !tbaa !2448
  %1198 = lshr i64 %1178, 63
  %1199 = trunc i64 %1198 to i8
  %1200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1199, i8* %1200, align 1, !tbaa !2449
  %1201 = lshr i64 %1174, 63
  %1202 = lshr i64 %1175, 63
  %1203 = xor i64 %1202, %1201
  %1204 = xor i64 %1198, %1201
  %1205 = add nuw nsw i64 %1204, %1203
  %1206 = icmp eq i64 %1205, 2
  %1207 = zext i1 %1206 to i8
  %1208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1207, i8* %1208, align 1, !tbaa !2450
  %1209 = load i64, i64* %RCX
  %1210 = add i64 %1209, 80
  %1211 = load i64, i64* %RDX
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 4
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1210 to i64*
  store i64 %1211, i64* %1214
  br label %block_4045d6

block_404195:                                     ; preds = %block_404183, %block_404149
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.19, %block_404183 ], [ %MEMORY.4, %block_404149 ]
  %1215 = load i64, i64* %RBP
  %1216 = sub i64 %1215, 80
  %1217 = load i64, i64* %PC
  %1218 = add i64 %1217, 4
  store i64 %1218, i64* %PC
  %1219 = inttoptr i64 %1216 to i64*
  %1220 = load i64, i64* %1219
  store i64 %1220, i64* %RAX, align 8, !tbaa !2428
  %1221 = load i64, i64* %RBP
  %1222 = sub i64 %1221, 144
  %1223 = load i64, i64* %RAX
  %1224 = load i64, i64* %PC
  %1225 = add i64 %1224, 7
  store i64 %1225, i64* %PC
  %1226 = inttoptr i64 %1222 to i64*
  store i64 %1223, i64* %1226
  %1227 = load i64, i64* %RBP
  %1228 = sub i64 %1227, 112
  %1229 = load i64, i64* %PC
  %1230 = add i64 %1229, 4
  store i64 %1230, i64* %PC
  %1231 = inttoptr i64 %1228 to i64*
  %1232 = load i64, i64* %1231
  store i64 %1232, i64* %RAX, align 8, !tbaa !2428
  %1233 = load i64, i64* %RBP
  %1234 = sub i64 %1233, 144
  %1235 = load i64, i64* %PC
  %1236 = add i64 %1235, 7
  store i64 %1236, i64* %PC
  %1237 = inttoptr i64 %1234 to i64*
  %1238 = load i64, i64* %1237
  store i64 %1238, i64* %RCX, align 8, !tbaa !2428
  %1239 = load i64, i64* %RAX
  %1240 = load i64, i64* %RCX
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 3
  store i64 %1242, i64* %PC
  %1243 = inttoptr i64 %1240 to i64*
  %1244 = load i64, i64* %1243
  %1245 = add i64 %1244, %1239
  store i64 %1245, i64* %RAX, align 8, !tbaa !2428
  %1246 = icmp ult i64 %1245, %1239
  %1247 = icmp ult i64 %1245, %1244
  %1248 = or i1 %1246, %1247
  %1249 = zext i1 %1248 to i8
  %1250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1249, i8* %1250, align 1, !tbaa !2432
  %1251 = trunc i64 %1245 to i32
  %1252 = and i32 %1251, 255
  %1253 = call i32 @llvm.ctpop.i32(i32 %1252) #16
  %1254 = trunc i32 %1253 to i8
  %1255 = and i8 %1254, 1
  %1256 = xor i8 %1255, 1
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1256, i8* %1257, align 1, !tbaa !2446
  %1258 = xor i64 %1244, %1239
  %1259 = xor i64 %1258, %1245
  %1260 = lshr i64 %1259, 4
  %1261 = trunc i64 %1260 to i8
  %1262 = and i8 %1261, 1
  %1263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1262, i8* %1263, align 1, !tbaa !2447
  %1264 = icmp eq i64 %1245, 0
  %1265 = zext i1 %1264 to i8
  %1266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1265, i8* %1266, align 1, !tbaa !2448
  %1267 = lshr i64 %1245, 63
  %1268 = trunc i64 %1267 to i8
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1268, i8* %1269, align 1, !tbaa !2449
  %1270 = lshr i64 %1239, 63
  %1271 = lshr i64 %1244, 63
  %1272 = xor i64 %1267, %1270
  %1273 = xor i64 %1267, %1271
  %1274 = add nuw nsw i64 %1272, %1273
  %1275 = icmp eq i64 %1274, 2
  %1276 = zext i1 %1275 to i8
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1276, i8* %1277, align 1, !tbaa !2450
  %1278 = load i64, i64* %RCX
  %1279 = load i64, i64* %RAX
  %1280 = load i64, i64* %PC
  %1281 = add i64 %1280, 3
  store i64 %1281, i64* %PC
  %1282 = inttoptr i64 %1278 to i64*
  store i64 %1279, i64* %1282
  br label %block_4041b1

block_404235:                                     ; preds = %block_404215
  %1283 = load i64, i64* %PC
  %1284 = sub i64 %1283, 95
  %1285 = load i64, i64* %PC
  %1286 = add i64 %1285, 5
  store i64 %1286, i64* %PC
  %1287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1284, i64* %1287, align 8, !tbaa !2428
  br label %block_4041d6

block_404174:                                     ; preds = %block_404159
  %1288 = load i64, i64* %RAX
  %1289 = load i32, i32* %EAX
  %1290 = zext i32 %1289 to i64
  %1291 = load i64, i64* %PC
  %1292 = add i64 %1291, 2
  store i64 %1292, i64* %PC
  %1293 = xor i64 %1290, %1288
  %1294 = trunc i64 %1293 to i32
  %1295 = and i64 %1293, 4294967295
  store i64 %1295, i64* %RAX, align 8, !tbaa !2428
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1296, align 1, !tbaa !2432
  %1297 = and i32 %1294, 255
  %1298 = call i32 @llvm.ctpop.i32(i32 %1297) #16
  %1299 = trunc i32 %1298 to i8
  %1300 = and i8 %1299, 1
  %1301 = xor i8 %1300, 1
  %1302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1301, i8* %1302, align 1, !tbaa !2446
  %1303 = icmp eq i32 %1294, 0
  %1304 = zext i1 %1303 to i8
  %1305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1304, i8* %1305, align 1, !tbaa !2448
  %1306 = lshr i32 %1294, 31
  %1307 = trunc i32 %1306 to i8
  %1308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1307, i8* %1308, align 1, !tbaa !2449
  %1309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1309, align 1, !tbaa !2450
  %1310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1310, align 1, !tbaa !2447
  %1311 = load i32, i32* %EAX
  %1312 = zext i32 %1311 to i64
  %1313 = load i64, i64* %PC
  %1314 = add i64 %1313, 2
  store i64 %1314, i64* %PC
  %1315 = and i64 %1312, 4294967295
  store i64 %1315, i64* %RCX, align 8, !tbaa !2428
  %1316 = load i64, i64* %RCX
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 112
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 4
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i64*
  %1322 = load i64, i64* %1321
  %1323 = sub i64 %1316, %1322
  store i64 %1323, i64* %RCX, align 8, !tbaa !2428
  %1324 = icmp ugt i64 %1322, %1316
  %1325 = zext i1 %1324 to i8
  %1326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1325, i8* %1326, align 1, !tbaa !2432
  %1327 = trunc i64 %1323 to i32
  %1328 = and i32 %1327, 255
  %1329 = call i32 @llvm.ctpop.i32(i32 %1328) #16
  %1330 = trunc i32 %1329 to i8
  %1331 = and i8 %1330, 1
  %1332 = xor i8 %1331, 1
  %1333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1332, i8* %1333, align 1, !tbaa !2446
  %1334 = xor i64 %1322, %1316
  %1335 = xor i64 %1334, %1323
  %1336 = lshr i64 %1335, 4
  %1337 = trunc i64 %1336 to i8
  %1338 = and i8 %1337, 1
  %1339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1338, i8* %1339, align 1, !tbaa !2447
  %1340 = icmp eq i64 %1323, 0
  %1341 = zext i1 %1340 to i8
  %1342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1341, i8* %1342, align 1, !tbaa !2448
  %1343 = lshr i64 %1323, 63
  %1344 = trunc i64 %1343 to i8
  %1345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1344, i8* %1345, align 1, !tbaa !2449
  %1346 = lshr i64 %1316, 63
  %1347 = lshr i64 %1322, 63
  %1348 = xor i64 %1347, %1346
  %1349 = xor i64 %1343, %1346
  %1350 = add nuw nsw i64 %1349, %1348
  %1351 = icmp eq i64 %1350, 2
  %1352 = zext i1 %1351 to i8
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1352, i8* %1353, align 1, !tbaa !2450
  %1354 = load i64, i64* %RBP
  %1355 = sub i64 %1354, 216
  %1356 = load i64, i64* %RCX
  %1357 = load i64, i64* %PC
  %1358 = add i64 %1357, 7
  store i64 %1358, i64* %PC
  %1359 = inttoptr i64 %1355 to i64*
  store i64 %1356, i64* %1359
  br label %block_404183

block_4041b1:                                     ; preds = %block_4041d6, %block_404195
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.6, %block_404195 ], [ %MEMORY.18, %block_4041d6 ]
  %1360 = load i64, i64* %RBP
  %1361 = sub i64 %1360, 144
  %1362 = load i64, i64* %PC
  %1363 = add i64 %1362, 7
  store i64 %1363, i64* %PC
  %1364 = inttoptr i64 %1361 to i64*
  %1365 = load i64, i64* %1364
  store i64 %1365, i64* %RAX, align 8, !tbaa !2428
  %1366 = load i64, i64* %RAX
  %1367 = add i64 %1366, 16
  %1368 = load i64, i64* %PC
  %1369 = add i64 %1368, 4
  store i64 %1369, i64* %PC
  %1370 = inttoptr i64 %1367 to i64*
  %1371 = load i64, i64* %1370
  store i64 %1371, i64* %RAX, align 8, !tbaa !2428
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 152
  %1374 = load i64, i64* %RAX
  %1375 = load i64, i64* %PC
  %1376 = add i64 %1375, 7
  store i64 %1376, i64* %PC
  %1377 = inttoptr i64 %1373 to i64*
  store i64 %1374, i64* %1377
  %1378 = load i64, i64* %RBP
  %1379 = sub i64 %1378, 152
  %1380 = load i64, i64* %PC
  %1381 = add i64 %1380, 8
  store i64 %1381, i64* %PC
  %1382 = inttoptr i64 %1379 to i64*
  %1383 = load i64, i64* %1382
  %1384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1384, align 1, !tbaa !2432
  %1385 = trunc i64 %1383 to i32
  %1386 = and i32 %1385, 255
  %1387 = call i32 @llvm.ctpop.i32(i32 %1386) #16
  %1388 = trunc i32 %1387 to i8
  %1389 = and i8 %1388, 1
  %1390 = xor i8 %1389, 1
  %1391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1390, i8* %1391, align 1, !tbaa !2446
  %1392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1392, align 1, !tbaa !2447
  %1393 = icmp eq i64 %1383, 0
  %1394 = zext i1 %1393 to i8
  %1395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1394, i8* %1395, align 1, !tbaa !2448
  %1396 = lshr i64 %1383, 63
  %1397 = trunc i64 %1396 to i8
  %1398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1397, i8* %1398, align 1, !tbaa !2449
  %1399 = lshr i64 %1383, 63
  %1400 = xor i64 %1396, %1399
  %1401 = add nuw nsw i64 %1400, %1399
  %1402 = icmp eq i64 %1401, 2
  %1403 = zext i1 %1402 to i8
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1403, i8* %1404, align 1, !tbaa !2450
  %1405 = load i64, i64* %PC
  %1406 = add i64 %1405, 47
  %1407 = load i64, i64* %PC
  %1408 = add i64 %1407, 6
  %1409 = load i64, i64* %PC
  %1410 = add i64 %1409, 6
  store i64 %1410, i64* %PC
  %1411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1412 = load i8, i8* %1411, align 1, !tbaa !2448
  store i8 %1412, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1414 = icmp ne i8 %1412, 0
  %1415 = select i1 %1414, i64 %1406, i64 %1408
  store i64 %1415, i64* %1413, align 8, !tbaa !2428
  %1416 = load i8, i8* %BRANCH_TAKEN
  %1417 = icmp eq i8 %1416, 1
  %1418 = load i64, i64* %PC
  %1419 = add i64 %1418, 5
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 5
  store i64 %1421, i64* %PC
  %1422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1419, i64* %1422, align 8, !tbaa !2428
  br i1 %1417, label %block_4041ff, label %block_4041d6

block_40456c:                                     ; preds = %block_4045d6, %block_404561
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.1, %block_404561 ], [ %MEMORY.12, %block_4045d6 ]
  %1423 = load i64, i64* %RBP
  %1424 = sub i64 %1423, 152
  %1425 = load i64, i64* %PC
  %1426 = add i64 %1425, 7
  store i64 %1426, i64* %PC
  %1427 = inttoptr i64 %1424 to i64*
  %1428 = load i64, i64* %1427
  store i64 %1428, i64* %RAX, align 8, !tbaa !2428
  %1429 = load i64, i64* %RAX
  %1430 = load i64, i64* %RBP
  %1431 = sub i64 %1430, 96
  %1432 = load i64, i64* %PC
  %1433 = add i64 %1432, 4
  store i64 %1433, i64* %PC
  %1434 = inttoptr i64 %1431 to i64*
  %1435 = load i64, i64* %1434
  %1436 = sub i64 %1429, %1435
  %1437 = icmp ugt i64 %1435, %1429
  %1438 = zext i1 %1437 to i8
  %1439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1438, i8* %1439, align 1, !tbaa !2432
  %1440 = trunc i64 %1436 to i32
  %1441 = and i32 %1440, 255
  %1442 = call i32 @llvm.ctpop.i32(i32 %1441) #16
  %1443 = trunc i32 %1442 to i8
  %1444 = and i8 %1443, 1
  %1445 = xor i8 %1444, 1
  %1446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1445, i8* %1446, align 1, !tbaa !2446
  %1447 = xor i64 %1435, %1429
  %1448 = xor i64 %1447, %1436
  %1449 = lshr i64 %1448, 4
  %1450 = trunc i64 %1449 to i8
  %1451 = and i8 %1450, 1
  %1452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1451, i8* %1452, align 1, !tbaa !2447
  %1453 = icmp eq i64 %1436, 0
  %1454 = zext i1 %1453 to i8
  %1455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1454, i8* %1455, align 1, !tbaa !2448
  %1456 = lshr i64 %1436, 63
  %1457 = trunc i64 %1456 to i8
  %1458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1457, i8* %1458, align 1, !tbaa !2449
  %1459 = lshr i64 %1429, 63
  %1460 = lshr i64 %1435, 63
  %1461 = xor i64 %1460, %1459
  %1462 = xor i64 %1456, %1459
  %1463 = add nuw nsw i64 %1462, %1461
  %1464 = icmp eq i64 %1463, 2
  %1465 = zext i1 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1465, i8* %1466, align 1, !tbaa !2450
  %1467 = load i64, i64* %PC
  %1468 = add i64 %1467, 123
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 6
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 6
  store i64 %1472, i64* %PC
  %1473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1474 = load i8, i8* %1473, align 1, !tbaa !2448
  store i8 %1474, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1476 = icmp ne i8 %1474, 0
  %1477 = select i1 %1476, i64 %1468, i64 %1470
  store i64 %1477, i64* %1475, align 8, !tbaa !2428
  %1478 = load i8, i8* %BRANCH_TAKEN
  %1479 = icmp eq i8 %1478, 1
  br i1 %1479, label %block_4045f2, label %block_40457d

block_4043c1:                                     ; preds = %block_40436e
  %1480 = inttoptr i64 %1109 to i64*
  %1481 = load i64, i64* %1480
  %1482 = add i64 %1481, %1107
  store i64 %1482, i64* %RAX, align 8, !tbaa !2428
  %1483 = icmp ult i64 %1482, %1107
  %1484 = icmp ult i64 %1482, %1481
  %1485 = or i1 %1483, %1484
  %1486 = zext i1 %1485 to i8
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1486, i8* %1487, align 1, !tbaa !2432
  %1488 = trunc i64 %1482 to i32
  %1489 = and i32 %1488, 255
  %1490 = call i32 @llvm.ctpop.i32(i32 %1489) #16
  %1491 = trunc i32 %1490 to i8
  %1492 = and i8 %1491, 1
  %1493 = xor i8 %1492, 1
  %1494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1493, i8* %1494, align 1, !tbaa !2446
  %1495 = xor i64 %1481, %1107
  %1496 = xor i64 %1495, %1482
  %1497 = lshr i64 %1496, 4
  %1498 = trunc i64 %1497 to i8
  %1499 = and i8 %1498, 1
  %1500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1499, i8* %1500, align 1, !tbaa !2447
  %1501 = icmp eq i64 %1482, 0
  %1502 = zext i1 %1501 to i8
  %1503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1502, i8* %1503, align 1, !tbaa !2448
  %1504 = lshr i64 %1482, 63
  %1505 = trunc i64 %1504 to i8
  %1506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1505, i8* %1506, align 1, !tbaa !2449
  %1507 = lshr i64 %1107, 63
  %1508 = lshr i64 %1481, 63
  %1509 = xor i64 %1504, %1507
  %1510 = xor i64 %1504, %1508
  %1511 = add nuw nsw i64 %1509, %1510
  %1512 = icmp eq i64 %1511, 2
  %1513 = zext i1 %1512 to i8
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1513, i8* %1514, align 1, !tbaa !2450
  %1515 = load i64, i64* %RBP
  %1516 = sub i64 %1515, 200
  %1517 = load i64, i64* %RAX
  %1518 = load i64, i64* %PC
  %1519 = add i64 %1518, 7
  store i64 %1519, i64* %PC
  %1520 = inttoptr i64 %1516 to i64*
  store i64 %1517, i64* %1520
  %1521 = load i64, i64* %PC
  %1522 = add i64 %1521, 27
  %1523 = load i64, i64* %PC
  %1524 = add i64 %1523, 5
  store i64 %1524, i64* %PC
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1522, i64* %1525, align 8, !tbaa !2428
  br label %block_4043f2

block_40452f:                                     ; preds = %block_4044e9
  %1526 = load i64, i64* %RCX
  %1527 = add i64 %1526, 80
  %1528 = load i64, i64* %PC
  %1529 = add i64 %1528, 4
  store i64 %1529, i64* %PC
  %1530 = inttoptr i64 %1527 to i64*
  %1531 = load i64, i64* %1530
  store i64 %1531, i64* %RDX, align 8, !tbaa !2428
  %1532 = load i64, i64* %RDX
  %1533 = load i64, i64* %RAX
  %1534 = load i64, i64* %PC
  %1535 = add i64 %1534, 3
  store i64 %1535, i64* %PC
  %1536 = sub i64 %1532, %1533
  store i64 %1536, i64* %RDX, align 8, !tbaa !2428
  %1537 = icmp ult i64 %1532, %1533
  %1538 = zext i1 %1537 to i8
  %1539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1538, i8* %1539, align 1, !tbaa !2432
  %1540 = trunc i64 %1536 to i32
  %1541 = and i32 %1540, 255
  %1542 = call i32 @llvm.ctpop.i32(i32 %1541) #16
  %1543 = trunc i32 %1542 to i8
  %1544 = and i8 %1543, 1
  %1545 = xor i8 %1544, 1
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1545, i8* %1546, align 1, !tbaa !2446
  %1547 = xor i64 %1533, %1532
  %1548 = xor i64 %1547, %1536
  %1549 = lshr i64 %1548, 4
  %1550 = trunc i64 %1549 to i8
  %1551 = and i8 %1550, 1
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1551, i8* %1552, align 1, !tbaa !2447
  %1553 = icmp eq i64 %1536, 0
  %1554 = zext i1 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1554, i8* %1555, align 1, !tbaa !2448
  %1556 = lshr i64 %1536, 63
  %1557 = trunc i64 %1556 to i8
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1557, i8* %1558, align 1, !tbaa !2449
  %1559 = lshr i64 %1532, 63
  %1560 = lshr i64 %1533, 63
  %1561 = xor i64 %1560, %1559
  %1562 = xor i64 %1556, %1559
  %1563 = add nuw nsw i64 %1562, %1561
  %1564 = icmp eq i64 %1563, 2
  %1565 = zext i1 %1564 to i8
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1565, i8* %1566, align 1, !tbaa !2450
  %1567 = load i64, i64* %RCX
  %1568 = add i64 %1567, 80
  %1569 = load i64, i64* %RDX
  %1570 = load i64, i64* %PC
  %1571 = add i64 %1570, 4
  store i64 %1571, i64* %PC
  %1572 = inttoptr i64 %1568 to i64*
  store i64 %1569, i64* %1572
  br label %block_404545

block_4043dc:                                     ; preds = %block_40436e
  %1573 = inttoptr i64 %1109 to i64*
  %1574 = load i64, i64* %1573
  %1575 = sub i64 %1107, %1574
  store i64 %1575, i64* %RAX, align 8, !tbaa !2428
  %1576 = icmp ugt i64 %1574, %1107
  %1577 = zext i1 %1576 to i8
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1577, i8* %1578, align 1, !tbaa !2432
  %1579 = trunc i64 %1575 to i32
  %1580 = and i32 %1579, 255
  %1581 = call i32 @llvm.ctpop.i32(i32 %1580) #16
  %1582 = trunc i32 %1581 to i8
  %1583 = and i8 %1582, 1
  %1584 = xor i8 %1583, 1
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1584, i8* %1585, align 1, !tbaa !2446
  %1586 = xor i64 %1574, %1107
  %1587 = xor i64 %1586, %1575
  %1588 = lshr i64 %1587, 4
  %1589 = trunc i64 %1588 to i8
  %1590 = and i8 %1589, 1
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1590, i8* %1591, align 1, !tbaa !2447
  %1592 = icmp eq i64 %1575, 0
  %1593 = zext i1 %1592 to i8
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1593, i8* %1594, align 1, !tbaa !2448
  %1595 = lshr i64 %1575, 63
  %1596 = trunc i64 %1595 to i8
  %1597 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1596, i8* %1597, align 1, !tbaa !2449
  %1598 = lshr i64 %1107, 63
  %1599 = lshr i64 %1574, 63
  %1600 = xor i64 %1599, %1598
  %1601 = xor i64 %1595, %1598
  %1602 = add nuw nsw i64 %1601, %1600
  %1603 = icmp eq i64 %1602, 2
  %1604 = zext i1 %1603 to i8
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1604, i8* %1605, align 1, !tbaa !2450
  %1606 = load i64, i64* %RBP
  %1607 = sub i64 %1606, 200
  %1608 = load i64, i64* %RAX
  %1609 = load i64, i64* %PC
  %1610 = add i64 %1609, 7
  store i64 %1610, i64* %PC
  %1611 = inttoptr i64 %1607 to i64*
  store i64 %1608, i64* %1611
  br label %block_4043f2

block_4042ab:                                     ; preds = %block_40429a
  %1612 = sub i64 %1955, 152
  %1613 = load i64, i64* %PC
  %1614 = add i64 %1613, 7
  store i64 %1614, i64* %PC
  %1615 = inttoptr i64 %1612 to i64*
  %1616 = load i64, i64* %1615
  store i64 %1616, i64* %RAX, align 8, !tbaa !2428
  %1617 = load i64, i64* %RAX
  %1618 = add i64 %1617, 32
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 5
  store i64 %1620, i64* %PC
  %1621 = inttoptr i64 %1618 to i64*
  %1622 = load i64, i64* %1621
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1623, align 1, !tbaa !2432
  %1624 = trunc i64 %1622 to i32
  %1625 = and i32 %1624, 255
  %1626 = call i32 @llvm.ctpop.i32(i32 %1625) #16
  %1627 = trunc i32 %1626 to i8
  %1628 = and i8 %1627, 1
  %1629 = xor i8 %1628, 1
  %1630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1629, i8* %1630, align 1, !tbaa !2446
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1631, align 1, !tbaa !2447
  %1632 = icmp eq i64 %1622, 0
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1633, i8* %1634, align 1, !tbaa !2448
  %1635 = lshr i64 %1622, 63
  %1636 = trunc i64 %1635 to i8
  %1637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1636, i8* %1637, align 1, !tbaa !2449
  %1638 = lshr i64 %1622, 63
  %1639 = xor i64 %1635, %1638
  %1640 = add nuw nsw i64 %1639, %1638
  %1641 = icmp eq i64 %1640, 2
  %1642 = zext i1 %1641 to i8
  %1643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1642, i8* %1643, align 1, !tbaa !2450
  %1644 = load i64, i64* %PC
  %1645 = add i64 %1644, 32
  %1646 = load i64, i64* %PC
  %1647 = add i64 %1646, 6
  %1648 = load i64, i64* %PC
  %1649 = add i64 %1648, 6
  store i64 %1649, i64* %PC
  %1650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1651 = load i8, i8* %1650, align 1, !tbaa !2448
  store i8 %1651, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1653 = icmp ne i8 %1651, 0
  %1654 = select i1 %1653, i64 %1645, i64 %1647
  store i64 %1654, i64* %1652, align 8, !tbaa !2428
  %1655 = load i8, i8* %BRANCH_TAKEN
  %1656 = icmp eq i8 %1655, 1
  br i1 %1656, label %block_4042d7, label %block_4042bd

block_40412a:                                     ; preds = %block_40411f
  %1657 = load i64, i64* %RBP
  %1658 = sub i64 %1657, 112
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 4
  store i64 %1660, i64* %PC
  %1661 = inttoptr i64 %1658 to i64*
  %1662 = load i64, i64* %1661
  store i64 %1662, i64* %RAX, align 8, !tbaa !2428
  %1663 = load i64, i64* %RBP
  %1664 = sub i64 %1663, 208
  %1665 = load i64, i64* %RAX
  %1666 = load i64, i64* %PC
  %1667 = add i64 %1666, 7
  store i64 %1667, i64* %PC
  %1668 = inttoptr i64 %1664 to i64*
  store i64 %1665, i64* %1668
  %1669 = load i64, i64* %PC
  %1670 = add i64 %1669, 20
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 5
  store i64 %1672, i64* %PC
  %1673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1670, i64* %1673, align 8, !tbaa !2428
  br label %block_404149

block_40431e:                                     ; preds = %block_404308, %block_4042e9
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.10, %block_404308 ], [ %MEMORY.10, %block_4042e9 ]
  %1674 = load i64, i64* %RBP
  %1675 = sub i64 %1674, 160
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 7
  store i64 %1677, i64* %PC
  %1678 = inttoptr i64 %1675 to i64*
  %1679 = load i64, i64* %1678
  store i64 %1679, i64* %RAX, align 8, !tbaa !2428
  %1680 = load i64, i64* %RBP
  %1681 = sub i64 %1680, 152
  %1682 = load i64, i64* %PC
  %1683 = add i64 %1682, 7
  store i64 %1683, i64* %PC
  %1684 = inttoptr i64 %1681 to i64*
  %1685 = load i64, i64* %1684
  store i64 %1685, i64* %RCX, align 8, !tbaa !2428
  %1686 = load i64, i64* %RCX
  %1687 = add i64 %1686, 24
  %1688 = load i64, i64* %RAX
  %1689 = load i64, i64* %PC
  %1690 = add i64 %1689, 4
  store i64 %1690, i64* %PC
  %1691 = inttoptr i64 %1687 to i64*
  store i64 %1688, i64* %1691
  %1692 = load i64, i64* %RBP
  %1693 = sub i64 %1692, 160
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 7
  store i64 %1695, i64* %PC
  %1696 = inttoptr i64 %1693 to i64*
  %1697 = load i64, i64* %1696
  store i64 %1697, i64* %RAX, align 8, !tbaa !2428
  %1698 = load i64, i64* %RAX
  %1699 = add i64 %1698, 16
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 4
  store i64 %1701, i64* %PC
  %1702 = inttoptr i64 %1699 to i64*
  %1703 = load i64, i64* %1702
  store i64 %1703, i64* %RAX, align 8, !tbaa !2428
  %1704 = load i64, i64* %RBP
  %1705 = sub i64 %1704, 152
  %1706 = load i64, i64* %PC
  %1707 = add i64 %1706, 7
  store i64 %1707, i64* %PC
  %1708 = inttoptr i64 %1705 to i64*
  %1709 = load i64, i64* %1708
  store i64 %1709, i64* %RCX, align 8, !tbaa !2428
  %1710 = load i64, i64* %RCX
  %1711 = add i64 %1710, 32
  %1712 = load i64, i64* %RAX
  %1713 = load i64, i64* %PC
  %1714 = add i64 %1713, 4
  store i64 %1714, i64* %PC
  %1715 = inttoptr i64 %1711 to i64*
  store i64 %1712, i64* %1715
  %1716 = load i64, i64* %RBP
  %1717 = sub i64 %1716, 152
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 7
  store i64 %1719, i64* %PC
  %1720 = inttoptr i64 %1717 to i64*
  %1721 = load i64, i64* %1720
  store i64 %1721, i64* %RAX, align 8, !tbaa !2428
  %1722 = load i64, i64* %RAX
  %1723 = add i64 %1722, 32
  %1724 = load i64, i64* %PC
  %1725 = add i64 %1724, 5
  store i64 %1725, i64* %PC
  %1726 = inttoptr i64 %1723 to i64*
  %1727 = load i64, i64* %1726
  %1728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1728, align 1, !tbaa !2432
  %1729 = trunc i64 %1727 to i32
  %1730 = and i32 %1729, 255
  %1731 = call i32 @llvm.ctpop.i32(i32 %1730) #16
  %1732 = trunc i32 %1731 to i8
  %1733 = and i8 %1732, 1
  %1734 = xor i8 %1733, 1
  %1735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1734, i8* %1735, align 1, !tbaa !2446
  %1736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1736, align 1, !tbaa !2447
  %1737 = icmp eq i64 %1727, 0
  %1738 = zext i1 %1737 to i8
  %1739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1738, i8* %1739, align 1, !tbaa !2448
  %1740 = lshr i64 %1727, 63
  %1741 = trunc i64 %1740 to i8
  %1742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1741, i8* %1742, align 1, !tbaa !2449
  %1743 = lshr i64 %1727, 63
  %1744 = xor i64 %1740, %1743
  %1745 = add nuw nsw i64 %1744, %1743
  %1746 = icmp eq i64 %1745, 2
  %1747 = zext i1 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1747, i8* %1748, align 1, !tbaa !2450
  %1749 = load i64, i64* %PC
  %1750 = add i64 %1749, 28
  %1751 = load i64, i64* %PC
  %1752 = add i64 %1751, 6
  %1753 = load i64, i64* %PC
  %1754 = add i64 %1753, 6
  store i64 %1754, i64* %PC
  %1755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1756 = load i8, i8* %1755, align 1, !tbaa !2448
  store i8 %1756, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1758 = icmp ne i8 %1756, 0
  %1759 = select i1 %1758, i64 %1750, i64 %1752
  store i64 %1759, i64* %1757, align 8, !tbaa !2428
  %1760 = load i8, i8* %BRANCH_TAKEN
  %1761 = icmp eq i8 %1760, 1
  br i1 %1761, label %block_40436e, label %block_404358

block_4042d7:                                     ; preds = %block_4042bd, %block_4042ab
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.11, %block_4042ab ], [ %MEMORY.11, %block_4042bd ]
  %1762 = load i64, i64* %RBP
  %1763 = sub i64 %1762, 152
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 7
  store i64 %1765, i64* %PC
  %1766 = inttoptr i64 %1763 to i64*
  %1767 = load i64, i64* %1766
  store i64 %1767, i64* %RAX, align 8, !tbaa !2428
  %1768 = load i64, i64* %RAX
  %1769 = add i64 %1768, 40
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 5
  store i64 %1771, i64* %PC
  %1772 = inttoptr i64 %1769 to i64*
  %1773 = load i64, i64* %1772
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1774, align 1, !tbaa !2432
  %1775 = trunc i64 %1773 to i32
  %1776 = and i32 %1775, 255
  %1777 = call i32 @llvm.ctpop.i32(i32 %1776) #16
  %1778 = trunc i32 %1777 to i8
  %1779 = and i8 %1778, 1
  %1780 = xor i8 %1779, 1
  %1781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1780, i8* %1781, align 1, !tbaa !2446
  %1782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1782, align 1, !tbaa !2447
  %1783 = icmp eq i64 %1773, 0
  %1784 = zext i1 %1783 to i8
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1784, i8* %1785, align 1, !tbaa !2448
  %1786 = lshr i64 %1773, 63
  %1787 = trunc i64 %1786 to i8
  %1788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1787, i8* %1788, align 1, !tbaa !2449
  %1789 = lshr i64 %1773, 63
  %1790 = xor i64 %1786, %1789
  %1791 = add nuw nsw i64 %1790, %1789
  %1792 = icmp eq i64 %1791, 2
  %1793 = zext i1 %1792 to i8
  %1794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1793, i8* %1794, align 1, !tbaa !2450
  %1795 = load i64, i64* %PC
  %1796 = add i64 %1795, 37
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 6
  %1799 = load i64, i64* %PC
  %1800 = add i64 %1799, 6
  store i64 %1800, i64* %PC
  %1801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1802 = load i8, i8* %1801, align 1, !tbaa !2448
  store i8 %1802, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1804 = icmp ne i8 %1802, 0
  %1805 = select i1 %1804, i64 %1796, i64 %1798
  store i64 %1805, i64* %1803, align 8, !tbaa !2428
  %1806 = load i8, i8* %BRANCH_TAKEN
  %1807 = icmp eq i8 %1806, 1
  %1808 = load i64, i64* %RBP
  %1809 = sub i64 %1808, 152
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 7
  store i64 %1811, i64* %PC
  %1812 = inttoptr i64 %1809 to i64*
  %1813 = load i64, i64* %1812
  store i64 %1813, i64* %RAX, align 8, !tbaa !2428
  %1814 = load i64, i64* %RAX
  %1815 = add i64 %1814, 32
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 4
  store i64 %1817, i64* %PC
  %1818 = inttoptr i64 %1815 to i64*
  %1819 = load i64, i64* %1818
  store i64 %1819, i64* %RAX, align 8, !tbaa !2428
  %1820 = load i64, i64* %RBP
  br i1 %1807, label %block_404308, label %block_4042e9

block_4044bf:                                     ; preds = %block_40429a
  %1821 = sub i64 %1955, 48
  %1822 = load i64, i64* %PC
  %1823 = add i64 %1822, 4
  store i64 %1823, i64* %PC
  %1824 = inttoptr i64 %1821 to i64*
  %1825 = load i64, i64* %1824
  store i64 %1825, i64* %RAX, align 8, !tbaa !2428
  %1826 = load i64, i64* %RAX
  %1827 = load i64, i64* %RBP
  %1828 = sub i64 %1827, 120
  %1829 = load i64, i64* %PC
  %1830 = add i64 %1829, 4
  store i64 %1830, i64* %PC
  %1831 = inttoptr i64 %1828 to i64*
  %1832 = load i64, i64* %1831
  %1833 = sub i64 %1826, %1832
  %1834 = icmp ugt i64 %1832, %1826
  %1835 = zext i1 %1834 to i8
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1835, i8* %1836, align 1, !tbaa !2432
  %1837 = trunc i64 %1833 to i32
  %1838 = and i32 %1837, 255
  %1839 = call i32 @llvm.ctpop.i32(i32 %1838) #16
  %1840 = trunc i32 %1839 to i8
  %1841 = and i8 %1840, 1
  %1842 = xor i8 %1841, 1
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1842, i8* %1843, align 1, !tbaa !2446
  %1844 = xor i64 %1832, %1826
  %1845 = xor i64 %1844, %1833
  %1846 = lshr i64 %1845, 4
  %1847 = trunc i64 %1846 to i8
  %1848 = and i8 %1847, 1
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1848, i8* %1849, align 1, !tbaa !2447
  %1850 = icmp eq i64 %1833, 0
  %1851 = zext i1 %1850 to i8
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1851, i8* %1852, align 1, !tbaa !2448
  %1853 = lshr i64 %1833, 63
  %1854 = trunc i64 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1854, i8* %1855, align 1, !tbaa !2449
  %1856 = lshr i64 %1826, 63
  %1857 = lshr i64 %1832, 63
  %1858 = xor i64 %1857, %1856
  %1859 = xor i64 %1853, %1856
  %1860 = add nuw nsw i64 %1859, %1858
  %1861 = icmp eq i64 %1860, 2
  %1862 = zext i1 %1861 to i8
  %1863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1862, i8* %1863, align 1, !tbaa !2450
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 304
  %1866 = load i64, i64* %PC
  %1867 = add i64 %1866, 6
  %1868 = load i64, i64* %PC
  %1869 = add i64 %1868, 6
  store i64 %1869, i64* %PC
  %1870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1871 = load i8, i8* %1870, align 1, !tbaa !2448
  %1872 = icmp ne i8 %1871, 0
  %1873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1874 = load i8, i8* %1873, align 1, !tbaa !2449
  %1875 = icmp ne i8 %1874, 0
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1877 = load i8, i8* %1876, align 1, !tbaa !2450
  %1878 = icmp ne i8 %1877, 0
  %1879 = xor i1 %1875, %1878
  %1880 = or i1 %1872, %1879
  %1881 = zext i1 %1880 to i8
  store i8 %1881, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1883 = select i1 %1880, i64 %1865, i64 %1867
  store i64 %1883, i64* %1882, align 8, !tbaa !2428
  %1884 = load i8, i8* %BRANCH_TAKEN
  %1885 = icmp eq i8 %1884, 1
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 88
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 4
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i64*
  %1891 = load i64, i64* %1890
  store i64 %1891, i64* %RAX, align 8, !tbaa !2428
  %1892 = load i64, i64* %RBP
  %1893 = sub i64 %1892, 152
  %1894 = load i64, i64* %RAX
  %1895 = load i64, i64* %PC
  %1896 = add i64 %1895, 7
  store i64 %1896, i64* %PC
  %1897 = inttoptr i64 %1893 to i64*
  store i64 %1894, i64* %1897
  br i1 %1885, label %block_404602, label %block_4044d8

block_40429a:                                     ; preds = %block_404210, %block_4043f2
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.0, %block_404210 ], [ %MEMORY.13, %block_4043f2 ]
  %1898 = load i64, i64* %RBP
  %1899 = sub i64 %1898, 152
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 7
  store i64 %1901, i64* %PC
  %1902 = inttoptr i64 %1899 to i64*
  %1903 = load i64, i64* %1902
  store i64 %1903, i64* %RAX, align 8, !tbaa !2428
  %1904 = load i64, i64* %RAX
  %1905 = load i64, i64* %RBP
  %1906 = sub i64 %1905, 88
  %1907 = load i64, i64* %PC
  %1908 = add i64 %1907, 4
  store i64 %1908, i64* %PC
  %1909 = inttoptr i64 %1906 to i64*
  %1910 = load i64, i64* %1909
  %1911 = sub i64 %1904, %1910
  %1912 = icmp ugt i64 %1910, %1904
  %1913 = zext i1 %1912 to i8
  %1914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1913, i8* %1914, align 1, !tbaa !2432
  %1915 = trunc i64 %1911 to i32
  %1916 = and i32 %1915, 255
  %1917 = call i32 @llvm.ctpop.i32(i32 %1916) #16
  %1918 = trunc i32 %1917 to i8
  %1919 = and i8 %1918, 1
  %1920 = xor i8 %1919, 1
  %1921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1920, i8* %1921, align 1, !tbaa !2446
  %1922 = xor i64 %1910, %1904
  %1923 = xor i64 %1922, %1911
  %1924 = lshr i64 %1923, 4
  %1925 = trunc i64 %1924 to i8
  %1926 = and i8 %1925, 1
  %1927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1926, i8* %1927, align 1, !tbaa !2447
  %1928 = icmp eq i64 %1911, 0
  %1929 = zext i1 %1928 to i8
  %1930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1929, i8* %1930, align 1, !tbaa !2448
  %1931 = lshr i64 %1911, 63
  %1932 = trunc i64 %1931 to i8
  %1933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1932, i8* %1933, align 1, !tbaa !2449
  %1934 = lshr i64 %1904, 63
  %1935 = lshr i64 %1910, 63
  %1936 = xor i64 %1935, %1934
  %1937 = xor i64 %1931, %1934
  %1938 = add nuw nsw i64 %1937, %1936
  %1939 = icmp eq i64 %1938, 2
  %1940 = zext i1 %1939 to i8
  %1941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1940, i8* %1941, align 1, !tbaa !2450
  %1942 = load i64, i64* %PC
  %1943 = add i64 %1942, 538
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 6
  %1946 = load i64, i64* %PC
  %1947 = add i64 %1946, 6
  store i64 %1947, i64* %PC
  %1948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1949 = load i8, i8* %1948, align 1, !tbaa !2448
  store i8 %1949, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1951 = icmp ne i8 %1949, 0
  %1952 = select i1 %1951, i64 %1943, i64 %1945
  store i64 %1952, i64* %1950, align 8, !tbaa !2428
  %1953 = load i8, i8* %BRANCH_TAKEN
  %1954 = icmp eq i8 %1953, 1
  %1955 = load i64, i64* %RBP
  br i1 %1954, label %block_4044bf, label %block_4042ab

block_404517:                                     ; preds = %block_4044e9
  %1956 = load i64, i64* %RAX
  %1957 = load i64, i64* %RCX
  %1958 = add i64 %1957, 80
  %1959 = load i64, i64* %PC
  %1960 = add i64 %1959, 4
  store i64 %1960, i64* %PC
  %1961 = inttoptr i64 %1958 to i64*
  %1962 = load i64, i64* %1961
  %1963 = add i64 %1962, %1956
  store i64 %1963, i64* %RAX, align 8, !tbaa !2428
  %1964 = icmp ult i64 %1963, %1956
  %1965 = icmp ult i64 %1963, %1962
  %1966 = or i1 %1964, %1965
  %1967 = zext i1 %1966 to i8
  %1968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1967, i8* %1968, align 1, !tbaa !2432
  %1969 = trunc i64 %1963 to i32
  %1970 = and i32 %1969, 255
  %1971 = call i32 @llvm.ctpop.i32(i32 %1970) #16
  %1972 = trunc i32 %1971 to i8
  %1973 = and i8 %1972, 1
  %1974 = xor i8 %1973, 1
  %1975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1974, i8* %1975, align 1, !tbaa !2446
  %1976 = xor i64 %1962, %1956
  %1977 = xor i64 %1976, %1963
  %1978 = lshr i64 %1977, 4
  %1979 = trunc i64 %1978 to i8
  %1980 = and i8 %1979, 1
  %1981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1980, i8* %1981, align 1, !tbaa !2447
  %1982 = icmp eq i64 %1963, 0
  %1983 = zext i1 %1982 to i8
  %1984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1983, i8* %1984, align 1, !tbaa !2448
  %1985 = lshr i64 %1963, 63
  %1986 = trunc i64 %1985 to i8
  %1987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1986, i8* %1987, align 1, !tbaa !2449
  %1988 = lshr i64 %1956, 63
  %1989 = lshr i64 %1962, 63
  %1990 = xor i64 %1985, %1988
  %1991 = xor i64 %1985, %1989
  %1992 = add nuw nsw i64 %1990, %1991
  %1993 = icmp eq i64 %1992, 2
  %1994 = zext i1 %1993 to i8
  %1995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1994, i8* %1995, align 1, !tbaa !2450
  %1996 = load i64, i64* %RCX
  %1997 = add i64 %1996, 80
  %1998 = load i64, i64* %RAX
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 4
  store i64 %2000, i64* %PC
  %2001 = inttoptr i64 %1997 to i64*
  store i64 %1998, i64* %2001
  %2002 = load i64, i64* %PC
  %2003 = add i64 %2002, 27
  %2004 = load i64, i64* %PC
  %2005 = add i64 %2004, 5
  store i64 %2005, i64* %PC
  %2006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2003, i64* %2006, align 8, !tbaa !2428
  br label %block_404545

block_40465f:                                     ; preds = %block_40464e
  %2007 = load i64, i64* %RBP
  %2008 = sub i64 %2007, 184
  %2009 = load i64, i64* %PC
  %2010 = add i64 %2009, 7
  store i64 %2010, i64* %PC
  %2011 = inttoptr i64 %2008 to i64*
  %2012 = load i64, i64* %2011
  store i64 %2012, i64* %RAX, align 8, !tbaa !2428
  %2013 = load i64, i64* %RBP
  %2014 = sub i64 %2013, 152
  %2015 = load i64, i64* %PC
  %2016 = add i64 %2015, 7
  store i64 %2016, i64* %PC
  %2017 = inttoptr i64 %2014 to i64*
  %2018 = load i64, i64* %2017
  store i64 %2018, i64* %RCX, align 8, !tbaa !2428
  %2019 = load i64, i64* %RAX
  %2020 = load i64, i64* %RCX
  %2021 = add i64 %2020, 88
  %2022 = load i64, i64* %PC
  %2023 = add i64 %2022, 4
  store i64 %2023, i64* %PC
  %2024 = inttoptr i64 %2021 to i64*
  %2025 = load i64, i64* %2024
  %2026 = add i64 %2025, %2019
  store i64 %2026, i64* %RAX, align 8, !tbaa !2428
  %2027 = icmp ult i64 %2026, %2019
  %2028 = icmp ult i64 %2026, %2025
  %2029 = or i1 %2027, %2028
  %2030 = zext i1 %2029 to i8
  %2031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2030, i8* %2031, align 1, !tbaa !2432
  %2032 = trunc i64 %2026 to i32
  %2033 = and i32 %2032, 255
  %2034 = call i32 @llvm.ctpop.i32(i32 %2033) #16
  %2035 = trunc i32 %2034 to i8
  %2036 = and i8 %2035, 1
  %2037 = xor i8 %2036, 1
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2037, i8* %2038, align 1, !tbaa !2446
  %2039 = xor i64 %2025, %2019
  %2040 = xor i64 %2039, %2026
  %2041 = lshr i64 %2040, 4
  %2042 = trunc i64 %2041 to i8
  %2043 = and i8 %2042, 1
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2043, i8* %2044, align 1, !tbaa !2447
  %2045 = icmp eq i64 %2026, 0
  %2046 = zext i1 %2045 to i8
  %2047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2046, i8* %2047, align 1, !tbaa !2448
  %2048 = lshr i64 %2026, 63
  %2049 = trunc i64 %2048 to i8
  %2050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2049, i8* %2050, align 1, !tbaa !2449
  %2051 = lshr i64 %2019, 63
  %2052 = lshr i64 %2025, 63
  %2053 = xor i64 %2048, %2051
  %2054 = xor i64 %2048, %2052
  %2055 = add nuw nsw i64 %2053, %2054
  %2056 = icmp eq i64 %2055, 2
  %2057 = zext i1 %2056 to i8
  %2058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2057, i8* %2058, align 1, !tbaa !2450
  %2059 = load i64, i64* %RCX
  %2060 = add i64 %2059, 88
  %2061 = load i64, i64* %RAX
  %2062 = load i64, i64* %PC
  %2063 = add i64 %2062, 4
  store i64 %2063, i64* %PC
  %2064 = inttoptr i64 %2060 to i64*
  store i64 %2061, i64* %2064
  %2065 = load i64, i64* %RBP
  %2066 = sub i64 %2065, 152
  %2067 = load i64, i64* %PC
  %2068 = add i64 %2067, 7
  store i64 %2068, i64* %PC
  %2069 = inttoptr i64 %2066 to i64*
  %2070 = load i64, i64* %2069
  store i64 %2070, i64* %RAX, align 8, !tbaa !2428
  %2071 = load i64, i64* %RAX
  %2072 = add i64 %2071, 24
  %2073 = load i64, i64* %PC
  %2074 = add i64 %2073, 4
  store i64 %2074, i64* %PC
  %2075 = inttoptr i64 %2072 to i64*
  %2076 = load i64, i64* %2075
  store i64 %2076, i64* %RAX, align 8, !tbaa !2428
  %2077 = load i64, i64* %RBP
  %2078 = sub i64 %2077, 152
  %2079 = load i64, i64* %RAX
  %2080 = load i64, i64* %PC
  %2081 = add i64 %2080, 7
  store i64 %2081, i64* %PC
  %2082 = inttoptr i64 %2078 to i64*
  store i64 %2079, i64* %2082
  %2083 = load i64, i64* %PC
  %2084 = sub i64 %2083, 57
  %2085 = load i64, i64* %PC
  %2086 = add i64 %2085, 5
  store i64 %2086, i64* %PC
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2084, i64* %2087, align 8, !tbaa !2428
  br label %block_40464e

block_4045a8:                                     ; preds = %block_40457d
  %2088 = load i64, i64* %RAX
  %2089 = load i64, i64* %RCX
  %2090 = add i64 %2089, 80
  %2091 = load i64, i64* %PC
  %2092 = add i64 %2091, 4
  store i64 %2092, i64* %PC
  %2093 = inttoptr i64 %2090 to i64*
  %2094 = load i64, i64* %2093
  %2095 = add i64 %2094, %2088
  store i64 %2095, i64* %RAX, align 8, !tbaa !2428
  %2096 = icmp ult i64 %2095, %2088
  %2097 = icmp ult i64 %2095, %2094
  %2098 = or i1 %2096, %2097
  %2099 = zext i1 %2098 to i8
  %2100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2099, i8* %2100, align 1, !tbaa !2432
  %2101 = trunc i64 %2095 to i32
  %2102 = and i32 %2101, 255
  %2103 = call i32 @llvm.ctpop.i32(i32 %2102) #16
  %2104 = trunc i32 %2103 to i8
  %2105 = and i8 %2104, 1
  %2106 = xor i8 %2105, 1
  %2107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2106, i8* %2107, align 1, !tbaa !2446
  %2108 = xor i64 %2094, %2088
  %2109 = xor i64 %2108, %2095
  %2110 = lshr i64 %2109, 4
  %2111 = trunc i64 %2110 to i8
  %2112 = and i8 %2111, 1
  %2113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2112, i8* %2113, align 1, !tbaa !2447
  %2114 = icmp eq i64 %2095, 0
  %2115 = zext i1 %2114 to i8
  %2116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2115, i8* %2116, align 1, !tbaa !2448
  %2117 = lshr i64 %2095, 63
  %2118 = trunc i64 %2117 to i8
  %2119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2118, i8* %2119, align 1, !tbaa !2449
  %2120 = lshr i64 %2088, 63
  %2121 = lshr i64 %2094, 63
  %2122 = xor i64 %2117, %2120
  %2123 = xor i64 %2117, %2121
  %2124 = add nuw nsw i64 %2122, %2123
  %2125 = icmp eq i64 %2124, 2
  %2126 = zext i1 %2125 to i8
  %2127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2126, i8* %2127, align 1, !tbaa !2450
  %2128 = load i64, i64* %RCX
  %2129 = add i64 %2128, 80
  %2130 = load i64, i64* %RAX
  %2131 = load i64, i64* %PC
  %2132 = add i64 %2131, 4
  store i64 %2132, i64* %PC
  %2133 = inttoptr i64 %2129 to i64*
  store i64 %2130, i64* %2133
  %2134 = load i64, i64* %PC
  %2135 = add i64 %2134, 27
  %2136 = load i64, i64* %PC
  %2137 = add i64 %2136, 5
  store i64 %2137, i64* %PC
  %2138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2135, i64* %2138, align 8, !tbaa !2428
  br label %block_4045d6

block_404215:                                     ; preds = %block_4041ff
  %2139 = load i64, i64* %RBP
  %2140 = sub i64 %2139, 144
  %2141 = load i64, i64* %PC
  %2142 = add i64 %2141, 7
  store i64 %2142, i64* %PC
  %2143 = inttoptr i64 %2140 to i64*
  %2144 = load i64, i64* %2143
  store i64 %2144, i64* %RAX, align 8, !tbaa !2428
  %2145 = load i64, i64* %RAX
  %2146 = add i64 %2145, 32
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 4
  store i64 %2148, i64* %PC
  %2149 = inttoptr i64 %2146 to i64*
  %2150 = load i64, i64* %2149
  store i64 %2150, i64* %RAX, align 8, !tbaa !2428
  %2151 = load i64, i64* %RBP
  %2152 = sub i64 %2151, 152
  %2153 = load i64, i64* %RAX
  %2154 = load i64, i64* %PC
  %2155 = add i64 %2154, 7
  store i64 %2155, i64* %PC
  %2156 = inttoptr i64 %2152 to i64*
  store i64 %2153, i64* %2156
  %2157 = load i64, i64* %RBP
  %2158 = sub i64 %2157, 152
  %2159 = load i64, i64* %PC
  %2160 = add i64 %2159, 8
  store i64 %2160, i64* %PC
  %2161 = inttoptr i64 %2158 to i64*
  %2162 = load i64, i64* %2161
  %2163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2163, align 1, !tbaa !2432
  %2164 = trunc i64 %2162 to i32
  %2165 = and i32 %2164, 255
  %2166 = call i32 @llvm.ctpop.i32(i32 %2165) #16
  %2167 = trunc i32 %2166 to i8
  %2168 = and i8 %2167, 1
  %2169 = xor i8 %2168, 1
  %2170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2169, i8* %2170, align 1, !tbaa !2446
  %2171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2171, align 1, !tbaa !2447
  %2172 = icmp eq i64 %2162, 0
  %2173 = zext i1 %2172 to i8
  %2174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2173, i8* %2174, align 1, !tbaa !2448
  %2175 = lshr i64 %2162, 63
  %2176 = trunc i64 %2175 to i8
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2176, i8* %2177, align 1, !tbaa !2449
  %2178 = lshr i64 %2162, 63
  %2179 = xor i64 %2175, %2178
  %2180 = add nuw nsw i64 %2179, %2178
  %2181 = icmp eq i64 %2180, 2
  %2182 = zext i1 %2181 to i8
  %2183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2182, i8* %2183, align 1, !tbaa !2450
  %2184 = load i64, i64* %PC
  %2185 = add i64 %2184, 11
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 6
  %2188 = load i64, i64* %PC
  %2189 = add i64 %2188, 6
  store i64 %2189, i64* %PC
  %2190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2191 = load i8, i8* %2190, align 1, !tbaa !2448
  store i8 %2191, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2193 = icmp ne i8 %2191, 0
  %2194 = select i1 %2193, i64 %2185, i64 %2187
  store i64 %2194, i64* %2192, align 8, !tbaa !2428
  %2195 = load i8, i8* %BRANCH_TAKEN
  %2196 = icmp eq i8 %2195, 1
  br i1 %2196, label %block_40423a, label %block_404235

block_404114:                                     ; preds = %block_404102
  %2197 = load i64, i64* %RBP
  %2198 = sub i64 %2197, 112
  %2199 = load i64, i64* %PC
  %2200 = add i64 %2199, 5
  store i64 %2200, i64* %PC
  %2201 = inttoptr i64 %2198 to i64*
  %2202 = load i64, i64* %2201
  %2203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2203, align 1, !tbaa !2432
  %2204 = trunc i64 %2202 to i32
  %2205 = and i32 %2204, 255
  %2206 = call i32 @llvm.ctpop.i32(i32 %2205) #16
  %2207 = trunc i32 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = xor i8 %2208, 1
  %2210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2209, i8* %2210, align 1, !tbaa !2446
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2211, align 1, !tbaa !2447
  %2212 = icmp eq i64 %2202, 0
  %2213 = zext i1 %2212 to i8
  %2214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2213, i8* %2214, align 1, !tbaa !2448
  %2215 = lshr i64 %2202, 63
  %2216 = trunc i64 %2215 to i8
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2216, i8* %2217, align 1, !tbaa !2449
  %2218 = lshr i64 %2202, 63
  %2219 = xor i64 %2215, %2218
  %2220 = add nuw nsw i64 %2219, %2218
  %2221 = icmp eq i64 %2220, 2
  %2222 = zext i1 %2221 to i8
  %2223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2222, i8* %2223, align 1, !tbaa !2450
  %2224 = load i64, i64* %PC
  %2225 = add i64 %2224, 64
  %2226 = load i64, i64* %PC
  %2227 = add i64 %2226, 6
  %2228 = load i64, i64* %PC
  %2229 = add i64 %2228, 6
  store i64 %2229, i64* %PC
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2231 = load i8, i8* %2230, align 1, !tbaa !2448
  %2232 = icmp ne i8 %2231, 0
  %2233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2234 = load i8, i8* %2233, align 1, !tbaa !2449
  %2235 = icmp ne i8 %2234, 0
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2237 = load i8, i8* %2236, align 1, !tbaa !2450
  %2238 = icmp ne i8 %2237, 0
  %2239 = xor i1 %2235, %2238
  %2240 = or i1 %2232, %2239
  %2241 = zext i1 %2240 to i8
  store i8 %2241, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2243 = select i1 %2240, i64 %2225, i64 %2227
  store i64 %2243, i64* %2242, align 8, !tbaa !2428
  %2244 = load i8, i8* %BRANCH_TAKEN
  %2245 = icmp eq i8 %2244, 1
  br i1 %2245, label %block_404159, label %block_40411f

block_4045d6:                                     ; preds = %block_4045a8, %block_4045c0
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.8, %block_4045c0 ], [ %MEMORY.8, %block_4045a8 ]
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 5
  %2248 = load i64, i64* %PC
  %2249 = add i64 %2248, 5
  store i64 %2249, i64* %PC
  %2250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2247, i64* %2250, align 8, !tbaa !2428
  %2251 = load i64, i64* %RBP
  %2252 = sub i64 %2251, 152
  %2253 = load i64, i64* %PC
  %2254 = add i64 %2253, 7
  store i64 %2254, i64* %PC
  %2255 = inttoptr i64 %2252 to i64*
  %2256 = load i64, i64* %2255
  store i64 %2256, i64* %RAX, align 8, !tbaa !2428
  %2257 = load i64, i64* %RAX
  %2258 = add i64 %2257, 24
  %2259 = load i64, i64* %PC
  %2260 = add i64 %2259, 4
  store i64 %2260, i64* %PC
  %2261 = inttoptr i64 %2258 to i64*
  %2262 = load i64, i64* %2261
  store i64 %2262, i64* %RAX, align 8, !tbaa !2428
  %2263 = load i64, i64* %RBP
  %2264 = sub i64 %2263, 152
  %2265 = load i64, i64* %RAX
  %2266 = load i64, i64* %PC
  %2267 = add i64 %2266, 7
  store i64 %2267, i64* %PC
  %2268 = inttoptr i64 %2264 to i64*
  store i64 %2265, i64* %2268
  %2269 = load i64, i64* %PC
  %2270 = sub i64 %2269, 129
  %2271 = load i64, i64* %PC
  %2272 = add i64 %2271, 5
  store i64 %2272, i64* %PC
  %2273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2270, i64* %2273, align 8, !tbaa !2428
  br label %block_40456c

block_4042bd:                                     ; preds = %block_4042ab
  %2274 = load i64, i64* %RBP
  %2275 = sub i64 %2274, 152
  %2276 = load i64, i64* %PC
  %2277 = add i64 %2276, 7
  store i64 %2277, i64* %PC
  %2278 = inttoptr i64 %2275 to i64*
  %2279 = load i64, i64* %2278
  store i64 %2279, i64* %RAX, align 8, !tbaa !2428
  %2280 = load i64, i64* %RAX
  %2281 = add i64 %2280, 40
  %2282 = load i64, i64* %PC
  %2283 = add i64 %2282, 4
  store i64 %2283, i64* %PC
  %2284 = inttoptr i64 %2281 to i64*
  %2285 = load i64, i64* %2284
  store i64 %2285, i64* %RAX, align 8, !tbaa !2428
  %2286 = load i64, i64* %RBP
  %2287 = sub i64 %2286, 152
  %2288 = load i64, i64* %PC
  %2289 = add i64 %2288, 7
  store i64 %2289, i64* %PC
  %2290 = inttoptr i64 %2287 to i64*
  %2291 = load i64, i64* %2290
  store i64 %2291, i64* %RCX, align 8, !tbaa !2428
  %2292 = load i64, i64* %RCX
  %2293 = add i64 %2292, 32
  %2294 = load i64, i64* %PC
  %2295 = add i64 %2294, 4
  store i64 %2295, i64* %PC
  %2296 = inttoptr i64 %2293 to i64*
  %2297 = load i64, i64* %2296
  store i64 %2297, i64* %RCX, align 8, !tbaa !2428
  %2298 = load i64, i64* %RCX
  %2299 = add i64 %2298, 40
  %2300 = load i64, i64* %RAX
  %2301 = load i64, i64* %PC
  %2302 = add i64 %2301, 4
  store i64 %2302, i64* %PC
  %2303 = inttoptr i64 %2299 to i64*
  store i64 %2300, i64* %2303
  br label %block_4042d7

block_404613:                                     ; preds = %block_404602
  %2304 = sub i64 %2909, 184
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 7
  store i64 %2306, i64* %PC
  %2307 = inttoptr i64 %2304 to i64*
  %2308 = load i64, i64* %2307
  store i64 %2308, i64* %RAX, align 8, !tbaa !2428
  %2309 = load i64, i64* %RBP
  %2310 = sub i64 %2309, 152
  %2311 = load i64, i64* %PC
  %2312 = add i64 %2311, 7
  store i64 %2312, i64* %PC
  %2313 = inttoptr i64 %2310 to i64*
  %2314 = load i64, i64* %2313
  store i64 %2314, i64* %RCX, align 8, !tbaa !2428
  %2315 = load i64, i64* %RCX
  %2316 = add i64 %2315, 88
  %2317 = load i64, i64* %PC
  %2318 = add i64 %2317, 4
  store i64 %2318, i64* %PC
  %2319 = inttoptr i64 %2316 to i64*
  %2320 = load i64, i64* %2319
  store i64 %2320, i64* %RDX, align 8, !tbaa !2428
  %2321 = load i64, i64* %RDX
  %2322 = load i64, i64* %RAX
  %2323 = load i64, i64* %PC
  %2324 = add i64 %2323, 3
  store i64 %2324, i64* %PC
  %2325 = sub i64 %2321, %2322
  store i64 %2325, i64* %RDX, align 8, !tbaa !2428
  %2326 = icmp ult i64 %2321, %2322
  %2327 = zext i1 %2326 to i8
  %2328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2327, i8* %2328, align 1, !tbaa !2432
  %2329 = trunc i64 %2325 to i32
  %2330 = and i32 %2329, 255
  %2331 = call i32 @llvm.ctpop.i32(i32 %2330) #16
  %2332 = trunc i32 %2331 to i8
  %2333 = and i8 %2332, 1
  %2334 = xor i8 %2333, 1
  %2335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2334, i8* %2335, align 1, !tbaa !2446
  %2336 = xor i64 %2322, %2321
  %2337 = xor i64 %2336, %2325
  %2338 = lshr i64 %2337, 4
  %2339 = trunc i64 %2338 to i8
  %2340 = and i8 %2339, 1
  %2341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2340, i8* %2341, align 1, !tbaa !2447
  %2342 = icmp eq i64 %2325, 0
  %2343 = zext i1 %2342 to i8
  %2344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2343, i8* %2344, align 1, !tbaa !2448
  %2345 = lshr i64 %2325, 63
  %2346 = trunc i64 %2345 to i8
  %2347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2346, i8* %2347, align 1, !tbaa !2449
  %2348 = lshr i64 %2321, 63
  %2349 = lshr i64 %2322, 63
  %2350 = xor i64 %2349, %2348
  %2351 = xor i64 %2345, %2348
  %2352 = add nuw nsw i64 %2351, %2350
  %2353 = icmp eq i64 %2352, 2
  %2354 = zext i1 %2353 to i8
  %2355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2354, i8* %2355, align 1, !tbaa !2450
  %2356 = load i64, i64* %RCX
  %2357 = add i64 %2356, 88
  %2358 = load i64, i64* %RDX
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 4
  store i64 %2360, i64* %PC
  %2361 = inttoptr i64 %2357 to i64*
  store i64 %2358, i64* %2361
  %2362 = load i64, i64* %RBP
  %2363 = sub i64 %2362, 152
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 7
  store i64 %2365, i64* %PC
  %2366 = inttoptr i64 %2363 to i64*
  %2367 = load i64, i64* %2366
  store i64 %2367, i64* %RAX, align 8, !tbaa !2428
  %2368 = load i64, i64* %RAX
  %2369 = add i64 %2368, 24
  %2370 = load i64, i64* %PC
  %2371 = add i64 %2370, 4
  store i64 %2371, i64* %PC
  %2372 = inttoptr i64 %2369 to i64*
  %2373 = load i64, i64* %2372
  store i64 %2373, i64* %RAX, align 8, !tbaa !2428
  %2374 = load i64, i64* %RBP
  %2375 = sub i64 %2374, 152
  %2376 = load i64, i64* %RAX
  %2377 = load i64, i64* %PC
  %2378 = add i64 %2377, 7
  store i64 %2378, i64* %PC
  %2379 = inttoptr i64 %2375 to i64*
  store i64 %2376, i64* %2379
  %2380 = load i64, i64* %PC
  %2381 = sub i64 %2380, 60
  %2382 = load i64, i64* %PC
  %2383 = add i64 %2382, 5
  store i64 %2383, i64* %PC
  %2384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2381, i64* %2384, align 8, !tbaa !2428
  br label %block_404602

block_4043f2:                                     ; preds = %block_4043dc, %block_4043c1
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.3, %block_4043dc ], [ %MEMORY.3, %block_4043c1 ]
  %2385 = load i64, i64* %RBP
  %2386 = sub i64 %2385, 152
  %2387 = load i64, i64* %PC
  %2388 = add i64 %2387, 7
  store i64 %2388, i64* %PC
  %2389 = inttoptr i64 %2386 to i64*
  %2390 = load i64, i64* %2389
  store i64 %2390, i64* %RAX, align 8, !tbaa !2428
  %2391 = load i64, i64* %RAX
  %2392 = add i64 %2391, 48
  %2393 = load i64, i64* %PC
  %2394 = add i64 %2393, 4
  store i64 %2394, i64* %PC
  %2395 = inttoptr i64 %2392 to i64*
  %2396 = load i64, i64* %2395
  store i64 %2396, i64* %RAX, align 8, !tbaa !2428
  %2397 = load i64, i64* %RBP
  %2398 = sub i64 %2397, 128
  %2399 = load i64, i64* %RAX
  %2400 = load i64, i64* %PC
  %2401 = add i64 %2400, 4
  store i64 %2401, i64* %PC
  %2402 = inttoptr i64 %2398 to i64*
  store i64 %2399, i64* %2402
  %2403 = load i64, i64* %RBP
  %2404 = sub i64 %2403, 152
  %2405 = load i64, i64* %PC
  %2406 = add i64 %2405, 7
  store i64 %2406, i64* %PC
  %2407 = inttoptr i64 %2404 to i64*
  %2408 = load i64, i64* %2407
  store i64 %2408, i64* %RAX, align 8, !tbaa !2428
  %2409 = load i64, i64* %RAX
  %2410 = add i64 %2409, 88
  %2411 = load i64, i64* %PC
  %2412 = add i64 %2411, 4
  store i64 %2412, i64* %PC
  %2413 = inttoptr i64 %2410 to i64*
  %2414 = load i64, i64* %2413
  store i64 %2414, i64* %RAX, align 8, !tbaa !2428
  %2415 = load i64, i64* %RBP
  %2416 = sub i64 %2415, 176
  %2417 = load i64, i64* %RAX
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 7
  store i64 %2419, i64* %PC
  %2420 = inttoptr i64 %2416 to i64*
  store i64 %2417, i64* %2420
  %2421 = load i64, i64* %RBP
  %2422 = sub i64 %2421, 40
  %2423 = load i64, i64* %PC
  %2424 = add i64 %2423, 4
  store i64 %2424, i64* %PC
  %2425 = inttoptr i64 %2422 to i64*
  %2426 = load i64, i64* %2425
  store i64 %2426, i64* %RAX, align 8, !tbaa !2428
  %2427 = load i32, i32* %EAX
  %2428 = zext i32 %2427 to i64
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 2
  store i64 %2430, i64* %PC
  %2431 = and i64 %2428, 4294967295
  store i64 %2431, i64* %RCX, align 8, !tbaa !2428
  %2432 = load i64, i64* %RBP
  %2433 = sub i64 %2432, 152
  %2434 = load i64, i64* %PC
  %2435 = add i64 %2434, 7
  store i64 %2435, i64* %PC
  %2436 = inttoptr i64 %2433 to i64*
  %2437 = load i64, i64* %2436
  store i64 %2437, i64* %RAX, align 8, !tbaa !2428
  %2438 = load i64, i64* %RAX
  %2439 = add i64 %2438, 8
  %2440 = load i32, i32* %ECX
  %2441 = zext i32 %2440 to i64
  %2442 = load i64, i64* %PC
  %2443 = add i64 %2442, 3
  store i64 %2443, i64* %PC
  %2444 = inttoptr i64 %2439 to i32*
  store i32 %2440, i32* %2444
  %2445 = load i64, i64* %RBP
  %2446 = sub i64 %2445, 56
  %2447 = load i64, i64* %PC
  %2448 = add i64 %2447, 4
  store i64 %2448, i64* %PC
  %2449 = inttoptr i64 %2446 to i64*
  %2450 = load i64, i64* %2449
  store i64 %2450, i64* %RAX, align 8, !tbaa !2428
  %2451 = load i64, i64* %RBP
  %2452 = sub i64 %2451, 152
  %2453 = load i64, i64* %PC
  %2454 = add i64 %2453, 7
  store i64 %2454, i64* %PC
  %2455 = inttoptr i64 %2452 to i64*
  %2456 = load i64, i64* %2455
  store i64 %2456, i64* %RDX, align 8, !tbaa !2428
  %2457 = load i64, i64* %RDX
  %2458 = add i64 %2457, 80
  %2459 = load i64, i64* %RAX
  %2460 = load i64, i64* %PC
  %2461 = add i64 %2460, 4
  store i64 %2461, i64* %PC
  %2462 = inttoptr i64 %2458 to i64*
  store i64 %2459, i64* %2462
  %2463 = load i64, i64* %RBP
  %2464 = sub i64 %2463, 136
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 7
  store i64 %2466, i64* %PC
  %2467 = inttoptr i64 %2464 to i64*
  %2468 = load i64, i64* %2467
  store i64 %2468, i64* %RAX, align 8, !tbaa !2428
  %2469 = load i64, i64* %RBP
  %2470 = sub i64 %2469, 152
  %2471 = load i64, i64* %PC
  %2472 = add i64 %2471, 7
  store i64 %2472, i64* %PC
  %2473 = inttoptr i64 %2470 to i64*
  %2474 = load i64, i64* %2473
  store i64 %2474, i64* %RDX, align 8, !tbaa !2428
  %2475 = load i64, i64* %RDX
  %2476 = add i64 %2475, 48
  %2477 = load i64, i64* %RAX
  %2478 = load i64, i64* %PC
  %2479 = add i64 %2478, 4
  store i64 %2479, i64* %PC
  %2480 = inttoptr i64 %2476 to i64*
  store i64 %2477, i64* %2480
  %2481 = load i64, i64* %RBP
  %2482 = sub i64 %2481, 192
  %2483 = load i64, i64* %PC
  %2484 = add i64 %2483, 7
  store i64 %2484, i64* %PC
  %2485 = inttoptr i64 %2482 to i64*
  %2486 = load i64, i64* %2485
  store i64 %2486, i64* %RAX, align 8, !tbaa !2428
  %2487 = load i64, i64* %RBP
  %2488 = sub i64 %2487, 152
  %2489 = load i64, i64* %PC
  %2490 = add i64 %2489, 7
  store i64 %2490, i64* %PC
  %2491 = inttoptr i64 %2488 to i64*
  %2492 = load i64, i64* %2491
  store i64 %2492, i64* %RDX, align 8, !tbaa !2428
  %2493 = load i64, i64* %RDX
  %2494 = add i64 %2493, 88
  %2495 = load i64, i64* %RAX
  %2496 = load i64, i64* %PC
  %2497 = add i64 %2496, 4
  store i64 %2497, i64* %PC
  %2498 = inttoptr i64 %2494 to i64*
  store i64 %2495, i64* %2498
  %2499 = load i64, i64* %RBP
  %2500 = sub i64 %2499, 152
  %2501 = load i64, i64* %PC
  %2502 = add i64 %2501, 7
  store i64 %2502, i64* %PC
  %2503 = inttoptr i64 %2500 to i64*
  %2504 = load i64, i64* %2503
  store i64 %2504, i64* %RAX, align 8, !tbaa !2428
  %2505 = load i64, i64* %RBP
  %2506 = sub i64 %2505, 160
  %2507 = load i64, i64* %RAX
  %2508 = load i64, i64* %PC
  %2509 = add i64 %2508, 7
  store i64 %2509, i64* %PC
  %2510 = inttoptr i64 %2506 to i64*
  store i64 %2507, i64* %2510
  %2511 = load i64, i64* %RBP
  %2512 = sub i64 %2511, 168
  %2513 = load i64, i64* %PC
  %2514 = add i64 %2513, 7
  store i64 %2514, i64* %PC
  %2515 = inttoptr i64 %2512 to i64*
  %2516 = load i64, i64* %2515
  store i64 %2516, i64* %RAX, align 8, !tbaa !2428
  %2517 = load i64, i64* %RBP
  %2518 = sub i64 %2517, 40
  %2519 = load i64, i64* %RAX
  %2520 = load i64, i64* %PC
  %2521 = add i64 %2520, 4
  store i64 %2521, i64* %PC
  %2522 = inttoptr i64 %2518 to i64*
  store i64 %2519, i64* %2522
  %2523 = load i64, i64* %RBP
  %2524 = sub i64 %2523, 200
  %2525 = load i64, i64* %PC
  %2526 = add i64 %2525, 7
  store i64 %2526, i64* %PC
  %2527 = inttoptr i64 %2524 to i64*
  %2528 = load i64, i64* %2527
  store i64 %2528, i64* %RAX, align 8, !tbaa !2428
  %2529 = load i64, i64* %RBP
  %2530 = sub i64 %2529, 56
  %2531 = load i64, i64* %RAX
  %2532 = load i64, i64* %PC
  %2533 = add i64 %2532, 4
  store i64 %2533, i64* %PC
  %2534 = inttoptr i64 %2530 to i64*
  store i64 %2531, i64* %2534
  %2535 = load i64, i64* %RBP
  %2536 = sub i64 %2535, 128
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 4
  store i64 %2538, i64* %PC
  %2539 = inttoptr i64 %2536 to i64*
  %2540 = load i64, i64* %2539
  store i64 %2540, i64* %RAX, align 8, !tbaa !2428
  %2541 = load i64, i64* %RBP
  %2542 = sub i64 %2541, 136
  %2543 = load i64, i64* %RAX
  %2544 = load i64, i64* %PC
  %2545 = add i64 %2544, 7
  store i64 %2545, i64* %PC
  %2546 = inttoptr i64 %2542 to i64*
  store i64 %2543, i64* %2546
  %2547 = load i64, i64* %RBP
  %2548 = sub i64 %2547, 184
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 7
  store i64 %2550, i64* %PC
  %2551 = inttoptr i64 %2548 to i64*
  %2552 = load i64, i64* %2551
  store i64 %2552, i64* %RAX, align 8, !tbaa !2428
  %2553 = load i64, i64* %RAX
  %2554 = load i64, i64* %RBP
  %2555 = sub i64 %2554, 176
  %2556 = load i64, i64* %PC
  %2557 = add i64 %2556, 7
  store i64 %2557, i64* %PC
  %2558 = inttoptr i64 %2555 to i64*
  %2559 = load i64, i64* %2558
  %2560 = sub i64 %2553, %2559
  store i64 %2560, i64* %RAX, align 8, !tbaa !2428
  %2561 = icmp ugt i64 %2559, %2553
  %2562 = zext i1 %2561 to i8
  %2563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2562, i8* %2563, align 1, !tbaa !2432
  %2564 = trunc i64 %2560 to i32
  %2565 = and i32 %2564, 255
  %2566 = call i32 @llvm.ctpop.i32(i32 %2565) #16
  %2567 = trunc i32 %2566 to i8
  %2568 = and i8 %2567, 1
  %2569 = xor i8 %2568, 1
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2569, i8* %2570, align 1, !tbaa !2446
  %2571 = xor i64 %2559, %2553
  %2572 = xor i64 %2571, %2560
  %2573 = lshr i64 %2572, 4
  %2574 = trunc i64 %2573 to i8
  %2575 = and i8 %2574, 1
  %2576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2575, i8* %2576, align 1, !tbaa !2447
  %2577 = icmp eq i64 %2560, 0
  %2578 = zext i1 %2577 to i8
  %2579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2578, i8* %2579, align 1, !tbaa !2448
  %2580 = lshr i64 %2560, 63
  %2581 = trunc i64 %2580 to i8
  %2582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2581, i8* %2582, align 1, !tbaa !2449
  %2583 = lshr i64 %2553, 63
  %2584 = lshr i64 %2559, 63
  %2585 = xor i64 %2584, %2583
  %2586 = xor i64 %2580, %2583
  %2587 = add nuw nsw i64 %2586, %2585
  %2588 = icmp eq i64 %2587, 2
  %2589 = zext i1 %2588 to i8
  %2590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2589, i8* %2590, align 1, !tbaa !2450
  %2591 = load i64, i64* %RBP
  %2592 = sub i64 %2591, 192
  %2593 = load i64, i64* %RAX
  %2594 = load i64, i64* %PC
  %2595 = add i64 %2594, 7
  store i64 %2595, i64* %PC
  %2596 = inttoptr i64 %2592 to i64*
  store i64 %2593, i64* %2596
  %2597 = load i64, i64* %RBP
  %2598 = sub i64 %2597, 144
  %2599 = load i64, i64* %PC
  %2600 = add i64 %2599, 7
  store i64 %2600, i64* %PC
  %2601 = inttoptr i64 %2598 to i64*
  %2602 = load i64, i64* %2601
  store i64 %2602, i64* %RAX, align 8, !tbaa !2428
  %2603 = load i64, i64* %RBP
  %2604 = sub i64 %2603, 152
  %2605 = load i64, i64* %RAX
  %2606 = load i64, i64* %PC
  %2607 = add i64 %2606, 7
  store i64 %2607, i64* %PC
  %2608 = inttoptr i64 %2604 to i64*
  store i64 %2605, i64* %2608
  %2609 = load i64, i64* %RBP
  %2610 = sub i64 %2609, 152
  %2611 = load i64, i64* %PC
  %2612 = add i64 %2611, 7
  store i64 %2612, i64* %PC
  %2613 = inttoptr i64 %2610 to i64*
  %2614 = load i64, i64* %2613
  store i64 %2614, i64* %RAX, align 8, !tbaa !2428
  %2615 = load i64, i64* %RAX
  %2616 = add i64 %2615, 24
  %2617 = load i64, i64* %PC
  %2618 = add i64 %2617, 4
  store i64 %2618, i64* %PC
  %2619 = inttoptr i64 %2616 to i64*
  %2620 = load i64, i64* %2619
  store i64 %2620, i64* %RAX, align 8, !tbaa !2428
  %2621 = load i64, i64* %RBP
  %2622 = sub i64 %2621, 144
  %2623 = load i64, i64* %RAX
  %2624 = load i64, i64* %PC
  %2625 = add i64 %2624, 7
  store i64 %2625, i64* %PC
  %2626 = inttoptr i64 %2622 to i64*
  store i64 %2623, i64* %2626
  %2627 = load i64, i64* %PC
  %2628 = sub i64 %2627, 544
  %2629 = load i64, i64* %PC
  %2630 = add i64 %2629, 5
  store i64 %2630, i64* %PC
  %2631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2628, i64* %2631, align 8, !tbaa !2428
  br label %block_40429a

block_404691:                                     ; preds = %block_40468c, %block_4045f2
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.2, %block_40468c ], [ %MEMORY.8, %block_4045f2 ]
  %2632 = load i64, i64* %RSP
  %2633 = load i64, i64* %PC
  %2634 = add i64 %2633, 4
  store i64 %2634, i64* %PC
  %2635 = add i64 64, %2632
  store i64 %2635, i64* %RSP, align 8, !tbaa !2428
  %2636 = icmp ult i64 %2635, %2632
  %2637 = icmp ult i64 %2635, 64
  %2638 = or i1 %2636, %2637
  %2639 = zext i1 %2638 to i8
  %2640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2639, i8* %2640, align 1, !tbaa !2432
  %2641 = trunc i64 %2635 to i32
  %2642 = and i32 %2641, 255
  %2643 = call i32 @llvm.ctpop.i32(i32 %2642) #16
  %2644 = trunc i32 %2643 to i8
  %2645 = and i8 %2644, 1
  %2646 = xor i8 %2645, 1
  %2647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2646, i8* %2647, align 1, !tbaa !2446
  %2648 = xor i64 64, %2632
  %2649 = xor i64 %2648, %2635
  %2650 = lshr i64 %2649, 4
  %2651 = trunc i64 %2650 to i8
  %2652 = and i8 %2651, 1
  %2653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2652, i8* %2653, align 1, !tbaa !2447
  %2654 = icmp eq i64 %2635, 0
  %2655 = zext i1 %2654 to i8
  %2656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2655, i8* %2656, align 1, !tbaa !2448
  %2657 = lshr i64 %2635, 63
  %2658 = trunc i64 %2657 to i8
  %2659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2658, i8* %2659, align 1, !tbaa !2449
  %2660 = lshr i64 %2632, 63
  %2661 = xor i64 %2657, %2660
  %2662 = add nuw nsw i64 %2661, %2657
  %2663 = icmp eq i64 %2662, 2
  %2664 = zext i1 %2663 to i8
  %2665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2664, i8* %2665, align 1, !tbaa !2450
  %2666 = load i64, i64* %PC
  %2667 = add i64 %2666, 1
  store i64 %2667, i64* %PC
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2669 = load i64, i64* %2668, align 8, !tbaa !2428
  %2670 = add i64 %2669, 8
  %2671 = inttoptr i64 %2669 to i64*
  %2672 = load i64, i64* %2671
  store i64 %2672, i64* %RBX, align 8, !tbaa !2428
  store i64 %2670, i64* %2668, align 8, !tbaa !2428
  %2673 = load i64, i64* %PC
  %2674 = add i64 %2673, 2
  store i64 %2674, i64* %PC
  %2675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2676 = load i64, i64* %2675, align 8, !tbaa !2428
  %2677 = add i64 %2676, 8
  %2678 = inttoptr i64 %2676 to i64*
  %2679 = load i64, i64* %2678
  store i64 %2679, i64* %R14, align 8, !tbaa !2428
  store i64 %2677, i64* %2675, align 8, !tbaa !2428
  %2680 = load i64, i64* %PC
  %2681 = add i64 %2680, 2
  store i64 %2681, i64* %PC
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2683 = load i64, i64* %2682, align 8, !tbaa !2428
  %2684 = add i64 %2683, 8
  %2685 = inttoptr i64 %2683 to i64*
  %2686 = load i64, i64* %2685
  store i64 %2686, i64* %R15, align 8, !tbaa !2428
  store i64 %2684, i64* %2682, align 8, !tbaa !2428
  %2687 = load i64, i64* %PC
  %2688 = add i64 %2687, 1
  store i64 %2688, i64* %PC
  %2689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2690 = load i64, i64* %2689, align 8, !tbaa !2428
  %2691 = add i64 %2690, 8
  %2692 = inttoptr i64 %2690 to i64*
  %2693 = load i64, i64* %2692
  store i64 %2693, i64* %RBP, align 8, !tbaa !2428
  store i64 %2691, i64* %2689, align 8, !tbaa !2428
  %2694 = load i64, i64* %PC
  %2695 = add i64 %2694, 1
  store i64 %2695, i64* %PC
  %2696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2698 = load i64, i64* %2697, align 8, !tbaa !2428
  %2699 = inttoptr i64 %2698 to i64*
  %2700 = load i64, i64* %2699
  store i64 %2700, i64* %2696, align 8, !tbaa !2428
  %2701 = add i64 %2698, 8
  store i64 %2701, i64* %2697, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.14

block_404159:                                     ; preds = %block_404102, %block_404114
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.20, %block_404102 ], [ %MEMORY.20, %block_404114 ]
  %2702 = load i64, i64* %RBP
  %2703 = sub i64 %2702, 112
  %2704 = load i64, i64* %PC
  %2705 = add i64 %2704, 5
  store i64 %2705, i64* %PC
  %2706 = inttoptr i64 %2703 to i64*
  %2707 = load i64, i64* %2706
  %2708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2708, align 1, !tbaa !2432
  %2709 = trunc i64 %2707 to i32
  %2710 = and i32 %2709, 255
  %2711 = call i32 @llvm.ctpop.i32(i32 %2710) #16
  %2712 = trunc i32 %2711 to i8
  %2713 = and i8 %2712, 1
  %2714 = xor i8 %2713, 1
  %2715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2714, i8* %2715, align 1, !tbaa !2446
  %2716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2716, align 1, !tbaa !2447
  %2717 = icmp eq i64 %2707, 0
  %2718 = zext i1 %2717 to i8
  %2719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2718, i8* %2719, align 1, !tbaa !2448
  %2720 = lshr i64 %2707, 63
  %2721 = trunc i64 %2720 to i8
  %2722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2721, i8* %2722, align 1, !tbaa !2449
  %2723 = lshr i64 %2707, 63
  %2724 = xor i64 %2720, %2723
  %2725 = add nuw nsw i64 %2724, %2723
  %2726 = icmp eq i64 %2725, 2
  %2727 = zext i1 %2726 to i8
  %2728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2727, i8* %2728, align 1, !tbaa !2450
  %2729 = load i64, i64* %PC
  %2730 = add i64 %2729, 22
  %2731 = load i64, i64* %PC
  %2732 = add i64 %2731, 6
  %2733 = load i64, i64* %PC
  %2734 = add i64 %2733, 6
  store i64 %2734, i64* %PC
  %2735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2736 = load i8, i8* %2735, align 1, !tbaa !2449
  %2737 = icmp ne i8 %2736, 0
  %2738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2739 = load i8, i8* %2738, align 1, !tbaa !2450
  %2740 = icmp ne i8 %2739, 0
  %2741 = xor i1 %2737, %2740
  %2742 = zext i1 %2741 to i8
  store i8 %2742, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2744 = select i1 %2741, i64 %2730, i64 %2732
  store i64 %2744, i64* %2743, align 8, !tbaa !2428
  %2745 = load i8, i8* %BRANCH_TAKEN
  %2746 = icmp eq i8 %2745, 1
  br i1 %2746, label %block_404174, label %block_404164

block_404210:                                     ; preds = %block_4041ff
  %2747 = load i64, i64* %PC
  %2748 = add i64 %2747, 65
  %2749 = load i64, i64* %PC
  %2750 = add i64 %2749, 5
  store i64 %2750, i64* %PC
  %2751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2748, i64* %2751, align 8, !tbaa !2428
  %2752 = load i64, i64* %RBP
  %2753 = sub i64 %2752, 64
  %2754 = load i64, i64* %PC
  %2755 = add i64 %2754, 4
  store i64 %2755, i64* %PC
  %2756 = inttoptr i64 %2753 to i64*
  %2757 = load i64, i64* %2756
  store i64 %2757, i64* %RAX, align 8, !tbaa !2428
  %2758 = load i64, i64* %RBP
  %2759 = sub i64 %2758, 152
  %2760 = load i64, i64* %RAX
  %2761 = load i64, i64* %PC
  %2762 = add i64 %2761, 7
  store i64 %2762, i64* %PC
  %2763 = inttoptr i64 %2759 to i64*
  store i64 %2760, i64* %2763
  %2764 = load i64, i64* %RBP
  %2765 = sub i64 %2764, 152
  %2766 = load i64, i64* %PC
  %2767 = add i64 %2766, 7
  store i64 %2767, i64* %PC
  %2768 = inttoptr i64 %2765 to i64*
  %2769 = load i64, i64* %2768
  store i64 %2769, i64* %RAX, align 8, !tbaa !2428
  %2770 = load i64, i64* %RAX
  %2771 = add i64 %2770, 24
  %2772 = load i64, i64* %PC
  %2773 = add i64 %2772, 4
  store i64 %2773, i64* %PC
  %2774 = inttoptr i64 %2771 to i64*
  %2775 = load i64, i64* %2774
  store i64 %2775, i64* %RAX, align 8, !tbaa !2428
  %2776 = load i64, i64* %RBP
  %2777 = sub i64 %2776, 144
  %2778 = load i64, i64* %RAX
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 7
  store i64 %2780, i64* %PC
  %2781 = inttoptr i64 %2777 to i64*
  store i64 %2778, i64* %2781
  %2782 = load i64, i64* %RBP
  %2783 = sub i64 %2782, 80
  %2784 = load i64, i64* %PC
  %2785 = add i64 %2784, 4
  store i64 %2785, i64* %PC
  %2786 = inttoptr i64 %2783 to i64*
  %2787 = load i64, i64* %2786
  store i64 %2787, i64* %RAX, align 8, !tbaa !2428
  %2788 = load i64, i64* %RAX
  %2789 = add i64 %2788, 88
  %2790 = load i64, i64* %PC
  %2791 = add i64 %2790, 4
  store i64 %2791, i64* %PC
  %2792 = inttoptr i64 %2789 to i64*
  %2793 = load i64, i64* %2792
  store i64 %2793, i64* %RAX, align 8, !tbaa !2428
  %2794 = load i64, i64* %RBP
  %2795 = sub i64 %2794, 184
  %2796 = load i64, i64* %RAX
  %2797 = load i64, i64* %PC
  %2798 = add i64 %2797, 7
  store i64 %2798, i64* %PC
  %2799 = inttoptr i64 %2795 to i64*
  store i64 %2796, i64* %2799
  %2800 = load i64, i64* %RBP
  %2801 = sub i64 %2800, 192
  %2802 = load i64, i64* %RAX
  %2803 = load i64, i64* %PC
  %2804 = add i64 %2803, 7
  store i64 %2804, i64* %PC
  %2805 = inttoptr i64 %2801 to i64*
  store i64 %2802, i64* %2805
  %2806 = load i64, i64* %RBP
  %2807 = sub i64 %2806, 72
  %2808 = load i64, i64* %PC
  %2809 = add i64 %2808, 4
  store i64 %2809, i64* %PC
  %2810 = inttoptr i64 %2807 to i64*
  %2811 = load i64, i64* %2810
  store i64 %2811, i64* %RAX, align 8, !tbaa !2428
  %2812 = load i64, i64* %RBP
  %2813 = sub i64 %2812, 160
  %2814 = load i64, i64* %RAX
  %2815 = load i64, i64* %PC
  %2816 = add i64 %2815, 7
  store i64 %2816, i64* %PC
  %2817 = inttoptr i64 %2813 to i64*
  store i64 %2814, i64* %2817
  %2818 = load i64, i64* %RBP
  %2819 = sub i64 %2818, 104
  %2820 = load i64, i64* %PC
  %2821 = add i64 %2820, 4
  store i64 %2821, i64* %PC
  %2822 = inttoptr i64 %2819 to i64*
  %2823 = load i64, i64* %2822
  store i64 %2823, i64* %RAX, align 8, !tbaa !2428
  %2824 = load i64, i64* %RBP
  %2825 = sub i64 %2824, 136
  %2826 = load i64, i64* %RAX
  %2827 = load i64, i64* %PC
  %2828 = add i64 %2827, 7
  store i64 %2828, i64* %PC
  %2829 = inttoptr i64 %2825 to i64*
  store i64 %2826, i64* %2829
  br label %block_40429a

block_4042e9:                                     ; preds = %block_4042d7
  %2830 = sub i64 %1820, 152
  %2831 = load i64, i64* %PC
  %2832 = add i64 %2831, 7
  store i64 %2832, i64* %PC
  %2833 = inttoptr i64 %2830 to i64*
  %2834 = load i64, i64* %2833
  store i64 %2834, i64* %RCX, align 8, !tbaa !2428
  %2835 = load i64, i64* %RCX
  %2836 = add i64 %2835, 40
  %2837 = load i64, i64* %PC
  %2838 = add i64 %2837, 4
  store i64 %2838, i64* %PC
  %2839 = inttoptr i64 %2836 to i64*
  %2840 = load i64, i64* %2839
  store i64 %2840, i64* %RCX, align 8, !tbaa !2428
  %2841 = load i64, i64* %RCX
  %2842 = add i64 %2841, 32
  %2843 = load i64, i64* %RAX
  %2844 = load i64, i64* %PC
  %2845 = add i64 %2844, 4
  store i64 %2845, i64* %PC
  %2846 = inttoptr i64 %2842 to i64*
  store i64 %2843, i64* %2846
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 27
  %2849 = load i64, i64* %PC
  %2850 = add i64 %2849, 5
  store i64 %2850, i64* %PC
  %2851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2848, i64* %2851, align 8, !tbaa !2428
  br label %block_40431e

block_404602:                                     ; preds = %block_404613, %block_4044bf
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.11, %block_4044bf ], [ %MEMORY.16, %block_404613 ]
  %2852 = load i64, i64* %RBP
  %2853 = sub i64 %2852, 152
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 7
  store i64 %2855, i64* %PC
  %2856 = inttoptr i64 %2853 to i64*
  %2857 = load i64, i64* %2856
  store i64 %2857, i64* %RAX, align 8, !tbaa !2428
  %2858 = load i64, i64* %RAX
  %2859 = load i64, i64* %RBP
  %2860 = sub i64 %2859, 96
  %2861 = load i64, i64* %PC
  %2862 = add i64 %2861, 4
  store i64 %2862, i64* %PC
  %2863 = inttoptr i64 %2860 to i64*
  %2864 = load i64, i64* %2863
  %2865 = sub i64 %2858, %2864
  %2866 = icmp ugt i64 %2864, %2858
  %2867 = zext i1 %2866 to i8
  %2868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2867, i8* %2868, align 1, !tbaa !2432
  %2869 = trunc i64 %2865 to i32
  %2870 = and i32 %2869, 255
  %2871 = call i32 @llvm.ctpop.i32(i32 %2870) #16
  %2872 = trunc i32 %2871 to i8
  %2873 = and i8 %2872, 1
  %2874 = xor i8 %2873, 1
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2874, i8* %2875, align 1, !tbaa !2446
  %2876 = xor i64 %2864, %2858
  %2877 = xor i64 %2876, %2865
  %2878 = lshr i64 %2877, 4
  %2879 = trunc i64 %2878 to i8
  %2880 = and i8 %2879, 1
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2880, i8* %2881, align 1, !tbaa !2447
  %2882 = icmp eq i64 %2865, 0
  %2883 = zext i1 %2882 to i8
  %2884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2883, i8* %2884, align 1, !tbaa !2448
  %2885 = lshr i64 %2865, 63
  %2886 = trunc i64 %2885 to i8
  %2887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2886, i8* %2887, align 1, !tbaa !2449
  %2888 = lshr i64 %2858, 63
  %2889 = lshr i64 %2864, 63
  %2890 = xor i64 %2889, %2888
  %2891 = xor i64 %2885, %2888
  %2892 = add nuw nsw i64 %2891, %2890
  %2893 = icmp eq i64 %2892, 2
  %2894 = zext i1 %2893 to i8
  %2895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2894, i8* %2895, align 1, !tbaa !2450
  %2896 = load i64, i64* %PC
  %2897 = add i64 %2896, 54
  %2898 = load i64, i64* %PC
  %2899 = add i64 %2898, 6
  %2900 = load i64, i64* %PC
  %2901 = add i64 %2900, 6
  store i64 %2901, i64* %PC
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2903 = load i8, i8* %2902, align 1, !tbaa !2448
  store i8 %2903, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2905 = icmp ne i8 %2903, 0
  %2906 = select i1 %2905, i64 %2897, i64 %2899
  store i64 %2906, i64* %2904, align 8, !tbaa !2428
  %2907 = load i8, i8* %BRANCH_TAKEN
  %2908 = icmp eq i8 %2907, 1
  %2909 = load i64, i64* %RBP
  br i1 %2908, label %block_404643, label %block_404613

block_40468c:                                     ; preds = %block_40464e
  %2910 = load i64, i64* %PC
  %2911 = add i64 %2910, 5
  %2912 = load i64, i64* %PC
  %2913 = add i64 %2912, 5
  store i64 %2913, i64* %PC
  %2914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2911, i64* %2914, align 8, !tbaa !2428
  br label %block_404691

block_404308:                                     ; preds = %block_4042d7
  %2915 = sub i64 %1820, 144
  %2916 = load i64, i64* %PC
  %2917 = add i64 %2916, 7
  store i64 %2917, i64* %PC
  %2918 = inttoptr i64 %2915 to i64*
  %2919 = load i64, i64* %2918
  store i64 %2919, i64* %RCX, align 8, !tbaa !2428
  %2920 = load i64, i64* %RCX
  %2921 = add i64 %2920, 16
  %2922 = load i64, i64* %RAX
  %2923 = load i64, i64* %PC
  %2924 = add i64 %2923, 4
  store i64 %2924, i64* %PC
  %2925 = inttoptr i64 %2921 to i64*
  store i64 %2922, i64* %2925
  br label %block_40431e

block_40411f:                                     ; preds = %block_404114, %block_4040f7
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.20, %block_404114 ], [ %2, %block_4040f7 ]
  %2926 = load i64, i64* %RBP
  %2927 = sub i64 %2926, 112
  %2928 = load i64, i64* %PC
  %2929 = add i64 %2928, 5
  store i64 %2929, i64* %PC
  %2930 = inttoptr i64 %2927 to i64*
  %2931 = load i64, i64* %2930
  %2932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2932, align 1, !tbaa !2432
  %2933 = trunc i64 %2931 to i32
  %2934 = and i32 %2933, 255
  %2935 = call i32 @llvm.ctpop.i32(i32 %2934) #16
  %2936 = trunc i32 %2935 to i8
  %2937 = and i8 %2936, 1
  %2938 = xor i8 %2937, 1
  %2939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2938, i8* %2939, align 1, !tbaa !2446
  %2940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2940, align 1, !tbaa !2447
  %2941 = icmp eq i64 %2931, 0
  %2942 = zext i1 %2941 to i8
  %2943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2942, i8* %2943, align 1, !tbaa !2448
  %2944 = lshr i64 %2931, 63
  %2945 = trunc i64 %2944 to i8
  %2946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2945, i8* %2946, align 1, !tbaa !2449
  %2947 = lshr i64 %2931, 63
  %2948 = xor i64 %2944, %2947
  %2949 = add nuw nsw i64 %2948, %2947
  %2950 = icmp eq i64 %2949, 2
  %2951 = zext i1 %2950 to i8
  %2952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2951, i8* %2952, align 1, !tbaa !2450
  %2953 = load i64, i64* %PC
  %2954 = add i64 %2953, 22
  %2955 = load i64, i64* %PC
  %2956 = add i64 %2955, 6
  %2957 = load i64, i64* %PC
  %2958 = add i64 %2957, 6
  store i64 %2958, i64* %PC
  %2959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2960 = load i8, i8* %2959, align 1, !tbaa !2449
  %2961 = icmp ne i8 %2960, 0
  %2962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2963 = load i8, i8* %2962, align 1, !tbaa !2450
  %2964 = icmp ne i8 %2963, 0
  %2965 = xor i1 %2961, %2964
  %2966 = zext i1 %2965 to i8
  store i8 %2966, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2968 = select i1 %2965, i64 %2954, i64 %2956
  store i64 %2968, i64* %2967, align 8, !tbaa !2428
  %2969 = load i8, i8* %BRANCH_TAKEN
  %2970 = icmp eq i8 %2969, 1
  br i1 %2970, label %block_40413a, label %block_40412a

block_4041d6:                                     ; preds = %block_4041b1, %block_404235
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.0, %block_404235 ], [ %MEMORY.7, %block_4041b1 ]
  %2971 = load i64, i64* %RBP
  %2972 = sub i64 %2971, 112
  %2973 = load i64, i64* %PC
  %2974 = add i64 %2973, 4
  store i64 %2974, i64* %PC
  %2975 = inttoptr i64 %2972 to i64*
  %2976 = load i64, i64* %2975
  store i64 %2976, i64* %RAX, align 8, !tbaa !2428
  %2977 = load i64, i64* %RBP
  %2978 = sub i64 %2977, 152
  %2979 = load i64, i64* %PC
  %2980 = add i64 %2979, 7
  store i64 %2980, i64* %PC
  %2981 = inttoptr i64 %2978 to i64*
  %2982 = load i64, i64* %2981
  store i64 %2982, i64* %RCX, align 8, !tbaa !2428
  %2983 = load i64, i64* %RAX
  %2984 = load i64, i64* %RCX
  %2985 = load i64, i64* %PC
  %2986 = add i64 %2985, 3
  store i64 %2986, i64* %PC
  %2987 = inttoptr i64 %2984 to i64*
  %2988 = load i64, i64* %2987
  %2989 = add i64 %2988, %2983
  store i64 %2989, i64* %RAX, align 8, !tbaa !2428
  %2990 = icmp ult i64 %2989, %2983
  %2991 = icmp ult i64 %2989, %2988
  %2992 = or i1 %2990, %2991
  %2993 = zext i1 %2992 to i8
  %2994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2993, i8* %2994, align 1, !tbaa !2432
  %2995 = trunc i64 %2989 to i32
  %2996 = and i32 %2995, 255
  %2997 = call i32 @llvm.ctpop.i32(i32 %2996) #16
  %2998 = trunc i32 %2997 to i8
  %2999 = and i8 %2998, 1
  %3000 = xor i8 %2999, 1
  %3001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3000, i8* %3001, align 1, !tbaa !2446
  %3002 = xor i64 %2988, %2983
  %3003 = xor i64 %3002, %2989
  %3004 = lshr i64 %3003, 4
  %3005 = trunc i64 %3004 to i8
  %3006 = and i8 %3005, 1
  %3007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3006, i8* %3007, align 1, !tbaa !2447
  %3008 = icmp eq i64 %2989, 0
  %3009 = zext i1 %3008 to i8
  %3010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3009, i8* %3010, align 1, !tbaa !2448
  %3011 = lshr i64 %2989, 63
  %3012 = trunc i64 %3011 to i8
  %3013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3012, i8* %3013, align 1, !tbaa !2449
  %3014 = lshr i64 %2983, 63
  %3015 = lshr i64 %2988, 63
  %3016 = xor i64 %3011, %3014
  %3017 = xor i64 %3011, %3015
  %3018 = add nuw nsw i64 %3016, %3017
  %3019 = icmp eq i64 %3018, 2
  %3020 = zext i1 %3019 to i8
  %3021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3020, i8* %3021, align 1, !tbaa !2450
  %3022 = load i64, i64* %RCX
  %3023 = load i64, i64* %RAX
  %3024 = load i64, i64* %PC
  %3025 = add i64 %3024, 3
  store i64 %3025, i64* %PC
  %3026 = inttoptr i64 %3022 to i64*
  store i64 %3023, i64* %3026
  %3027 = load i64, i64* %RBP
  %3028 = sub i64 %3027, 152
  %3029 = load i64, i64* %PC
  %3030 = add i64 %3029, 7
  store i64 %3030, i64* %PC
  %3031 = inttoptr i64 %3028 to i64*
  %3032 = load i64, i64* %3031
  store i64 %3032, i64* %RAX, align 8, !tbaa !2428
  %3033 = load i64, i64* %RBP
  %3034 = sub i64 %3033, 144
  %3035 = load i64, i64* %RAX
  %3036 = load i64, i64* %PC
  %3037 = add i64 %3036, 7
  store i64 %3037, i64* %PC
  %3038 = inttoptr i64 %3034 to i64*
  store i64 %3035, i64* %3038
  %3039 = load i64, i64* %PC
  %3040 = sub i64 %3039, 68
  %3041 = load i64, i64* %PC
  %3042 = add i64 %3041, 5
  store i64 %3042, i64* %PC
  %3043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3040, i64* %3043, align 8, !tbaa !2428
  br label %block_4041b1

block_40423a:                                     ; preds = %block_404215
  %3044 = load i64, i64* %RBP
  %3045 = sub i64 %3044, 144
  %3046 = load i64, i64* %PC
  %3047 = add i64 %3046, 7
  store i64 %3047, i64* %PC
  %3048 = inttoptr i64 %3045 to i64*
  %3049 = load i64, i64* %3048
  store i64 %3049, i64* %RAX, align 8, !tbaa !2428
  %3050 = load i64, i64* %RAX
  %3051 = add i64 %3050, 24
  %3052 = load i64, i64* %PC
  %3053 = add i64 %3052, 4
  store i64 %3053, i64* %PC
  %3054 = inttoptr i64 %3051 to i64*
  %3055 = load i64, i64* %3054
  store i64 %3055, i64* %RAX, align 8, !tbaa !2428
  %3056 = load i64, i64* %RBP
  %3057 = sub i64 %3056, 144
  %3058 = load i64, i64* %RAX
  %3059 = load i64, i64* %PC
  %3060 = add i64 %3059, 7
  store i64 %3060, i64* %PC
  %3061 = inttoptr i64 %3057 to i64*
  store i64 %3058, i64* %3061
  %3062 = load i64, i64* %PC
  %3063 = sub i64 %3062, 77
  %3064 = load i64, i64* %PC
  %3065 = add i64 %3064, 5
  store i64 %3065, i64* %PC
  %3066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3063, i64* %3066, align 8, !tbaa !2428
  br label %block_4041ff

block_404183:                                     ; preds = %block_404174, %block_404164
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.15, %block_404174 ], [ %MEMORY.15, %block_404164 ]
  %3067 = load i64, i64* %RBP
  %3068 = sub i64 %3067, 216
  %3069 = load i64, i64* %PC
  %3070 = add i64 %3069, 7
  store i64 %3070, i64* %PC
  %3071 = inttoptr i64 %3068 to i64*
  %3072 = load i64, i64* %3071
  store i64 %3072, i64* %RAX, align 8, !tbaa !2428
  %3073 = load i64, i64* %RCX
  %3074 = load i32, i32* %ECX
  %3075 = zext i32 %3074 to i64
  %3076 = load i64, i64* %PC
  %3077 = add i64 %3076, 2
  store i64 %3077, i64* %PC
  %3078 = xor i64 %3075, %3073
  %3079 = trunc i64 %3078 to i32
  %3080 = and i64 %3078, 4294967295
  store i64 %3080, i64* %RCX, align 8, !tbaa !2428
  %3081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3081, align 1, !tbaa !2432
  %3082 = and i32 %3079, 255
  %3083 = call i32 @llvm.ctpop.i32(i32 %3082) #16
  %3084 = trunc i32 %3083 to i8
  %3085 = and i8 %3084, 1
  %3086 = xor i8 %3085, 1
  %3087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3086, i8* %3087, align 1, !tbaa !2446
  %3088 = icmp eq i32 %3079, 0
  %3089 = zext i1 %3088 to i8
  %3090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3089, i8* %3090, align 1, !tbaa !2448
  %3091 = lshr i32 %3079, 31
  %3092 = trunc i32 %3091 to i8
  %3093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3092, i8* %3093, align 1, !tbaa !2449
  %3094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3094, align 1, !tbaa !2450
  %3095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3095, align 1, !tbaa !2447
  %3096 = load i32, i32* %ECX
  %3097 = zext i32 %3096 to i64
  %3098 = load i64, i64* %PC
  %3099 = add i64 %3098, 2
  store i64 %3099, i64* %PC
  %3100 = and i64 %3097, 4294967295
  store i64 %3100, i64* %RDX, align 8, !tbaa !2428
  %3101 = load i64, i64* %RDX
  %3102 = load i64, i64* %RAX
  %3103 = load i64, i64* %PC
  %3104 = add i64 %3103, 3
  store i64 %3104, i64* %PC
  %3105 = sub i64 %3101, %3102
  store i64 %3105, i64* %RDX, align 8, !tbaa !2428
  %3106 = icmp ult i64 %3101, %3102
  %3107 = zext i1 %3106 to i8
  %3108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3107, i8* %3108, align 1, !tbaa !2432
  %3109 = trunc i64 %3105 to i32
  %3110 = and i32 %3109, 255
  %3111 = call i32 @llvm.ctpop.i32(i32 %3110) #16
  %3112 = trunc i32 %3111 to i8
  %3113 = and i8 %3112, 1
  %3114 = xor i8 %3113, 1
  %3115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3114, i8* %3115, align 1, !tbaa !2446
  %3116 = xor i64 %3102, %3101
  %3117 = xor i64 %3116, %3105
  %3118 = lshr i64 %3117, 4
  %3119 = trunc i64 %3118 to i8
  %3120 = and i8 %3119, 1
  %3121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3120, i8* %3121, align 1, !tbaa !2447
  %3122 = icmp eq i64 %3105, 0
  %3123 = zext i1 %3122 to i8
  %3124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3123, i8* %3124, align 1, !tbaa !2448
  %3125 = lshr i64 %3105, 63
  %3126 = trunc i64 %3125 to i8
  %3127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3126, i8* %3127, align 1, !tbaa !2449
  %3128 = lshr i64 %3101, 63
  %3129 = lshr i64 %3102, 63
  %3130 = xor i64 %3129, %3128
  %3131 = xor i64 %3125, %3128
  %3132 = add nuw nsw i64 %3131, %3130
  %3133 = icmp eq i64 %3132, 2
  %3134 = zext i1 %3133 to i8
  %3135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3134, i8* %3135, align 1, !tbaa !2450
  %3136 = load i64, i64* %RBP
  %3137 = sub i64 %3136, 112
  %3138 = load i64, i64* %RDX
  %3139 = load i64, i64* %PC
  %3140 = add i64 %3139, 4
  store i64 %3140, i64* %PC
  %3141 = inttoptr i64 %3137 to i64*
  store i64 %3138, i64* %3141
  br label %block_404195

block_404102:                                     ; preds = %block_4040f7, %block_404090
  %MEMORY.20 = phi %struct.Memory* [ %2, %block_404090 ], [ %2, %block_4040f7 ]
  %3142 = load i64, i64* %RBP
  %3143 = sub i64 %3142, 104
  %3144 = load i64, i64* %PC
  %3145 = add i64 %3144, 4
  store i64 %3145, i64* %PC
  %3146 = inttoptr i64 %3143 to i64*
  %3147 = load i64, i64* %3146
  store i64 %3147, i64* %RAX, align 8, !tbaa !2428
  %3148 = load i64, i64* %RAX
  %3149 = add i64 %3148, 8
  %3150 = load i64, i64* %PC
  %3151 = add i64 %3150, 4
  store i64 %3151, i64* %PC
  %3152 = inttoptr i64 %3149 to i64*
  %3153 = load i64, i64* %3152
  store i64 %3153, i64* %RAX, align 8, !tbaa !2428
  %3154 = load i64, i64* %RAX
  %3155 = load i64, i64* %RBP
  %3156 = sub i64 %3155, 64
  %3157 = load i64, i64* %PC
  %3158 = add i64 %3157, 4
  store i64 %3158, i64* %PC
  %3159 = inttoptr i64 %3156 to i64*
  %3160 = load i64, i64* %3159
  %3161 = sub i64 %3154, %3160
  %3162 = icmp ugt i64 %3160, %3154
  %3163 = zext i1 %3162 to i8
  %3164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3163, i8* %3164, align 1, !tbaa !2432
  %3165 = trunc i64 %3161 to i32
  %3166 = and i32 %3165, 255
  %3167 = call i32 @llvm.ctpop.i32(i32 %3166) #16
  %3168 = trunc i32 %3167 to i8
  %3169 = and i8 %3168, 1
  %3170 = xor i8 %3169, 1
  %3171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3170, i8* %3171, align 1, !tbaa !2446
  %3172 = xor i64 %3160, %3154
  %3173 = xor i64 %3172, %3161
  %3174 = lshr i64 %3173, 4
  %3175 = trunc i64 %3174 to i8
  %3176 = and i8 %3175, 1
  %3177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3176, i8* %3177, align 1, !tbaa !2447
  %3178 = icmp eq i64 %3161, 0
  %3179 = zext i1 %3178 to i8
  %3180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3179, i8* %3180, align 1, !tbaa !2448
  %3181 = lshr i64 %3161, 63
  %3182 = trunc i64 %3181 to i8
  %3183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3182, i8* %3183, align 1, !tbaa !2449
  %3184 = lshr i64 %3154, 63
  %3185 = lshr i64 %3160, 63
  %3186 = xor i64 %3185, %3184
  %3187 = xor i64 %3181, %3184
  %3188 = add nuw nsw i64 %3187, %3186
  %3189 = icmp eq i64 %3188, 2
  %3190 = zext i1 %3189 to i8
  %3191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3190, i8* %3191, align 1, !tbaa !2450
  %3192 = load i64, i64* %PC
  %3193 = add i64 %3192, 75
  %3194 = load i64, i64* %PC
  %3195 = add i64 %3194, 6
  %3196 = load i64, i64* %PC
  %3197 = add i64 %3196, 6
  store i64 %3197, i64* %PC
  %3198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3199 = load i8, i8* %3198, align 1, !tbaa !2448
  %3200 = icmp eq i8 %3199, 0
  %3201 = zext i1 %3200 to i8
  store i8 %3201, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3203 = select i1 %3200, i64 %3193, i64 %3195
  store i64 %3203, i64* %3202, align 8, !tbaa !2428
  %3204 = load i8, i8* %BRANCH_TAKEN
  %3205 = icmp eq i8 %3204, 1
  br i1 %3205, label %block_404159, label %block_404114
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4009e0_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4009e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4009e0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4009e0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4009b0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4009b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4009b0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4009b0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4008a0_memcpy(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_608fd0_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_608f60_memset(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_400830_strcpy(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @strcpy to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_608f50_fclose(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @fclose to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_608ff8_fprintf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_609020_fopen(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @fopen to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_608fe8_fgets(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @fgets to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_609010___isoc99_sscanf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_sscanf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_608f78_calloc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_4008f0_exit(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_404710___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404710;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_404710___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404710___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4046a0___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4046a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4046a0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4046a0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4019c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4019c0_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_608f68___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_608fb8_free(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_609018_realloc(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @realloc to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_609008_fflush(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @fflush to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @flow_org_cost() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401f90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @flow_org_cost_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401f90_flow_org_cost(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @price_out_impl() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401110;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @price_out_impl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401110_price_out_impl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dual_feasible() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402340;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @dual_feasible_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402340_dual_feasible(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @global_opt() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401810;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @global_opt_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401810_global_opt(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @primal_update_flow() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402f10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @primal_update_flow_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402f10_primal_update_flow(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @update_tree() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404090;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @update_tree_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404090_update_tree(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @primal_start_artificial() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4033a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @primal_start_artificial_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4033a0_primal_start_artificial(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @write_circulations() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402580;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @write_circulations_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402580_write_circulations(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @sort_basket() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4027f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @sort_basket_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4027f0_sort_basket(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @primal_bea_mpp() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402960;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @16, void ()** @2)
  ret void
}

define internal %struct.Memory* @primal_bea_mpp_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402960_primal_bea_mpp(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @flow_cost() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @17, void ()** @2)
  ret void
}

define internal %struct.Memory* @flow_cost_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401db0_flow_cost(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @primal_net_simplex() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402fd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @18, void ()** @2)
  ret void
}

define internal %struct.Memory* @primal_net_simplex_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402fd0_primal_net_simplex(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x404714;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @19, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_404714__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @read_min() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4035c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @20, void ()** @2)
  ret void
}

define internal %struct.Memory* @read_min_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4035c0_read_min(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @suspend_impl() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @21, void ()** @2)
  ret void
}

define internal %struct.Memory* @suspend_impl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401600_suspend_impl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @resize_prob() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4009f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @22, void ()** @2)
  ret void
}

define internal %struct.Memory* @resize_prob_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4009f0_resize_prob(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @primal_iminus() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402d30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @23, void ()** @2)
  ret void
}

define internal %struct.Memory* @primal_iminus_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402d30_primal_iminus(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @primal_feasible() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402170;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @24, void ()** @2)
  ret void
}

define internal %struct.Memory* @primal_feasible_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402170_primal_feasible(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @refresh_neighbour_lists() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401b90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @25, void ()** @2)
  ret void
}

define internal %struct.Memory* @refresh_neighbour_lists_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401b90_refresh_neighbour_lists(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @replace_weaker_arc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400e50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @26, void ()** @2)
  ret void
}

define internal %struct.Memory* @replace_weaker_arc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400e50_replace_weaker_arc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @insert_new_arc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400b80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @27, void ()** @2)
  ret void
}

define internal %struct.Memory* @insert_new_arc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400b80_insert_new_arc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4007f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @28, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4007f0__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @refresh_potential() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401c80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @29, void ()** @2)
  ret void
}

define internal %struct.Memory* @refresh_potential_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401c80_refresh_potential(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @bea_is_dual_infeasible() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402790;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @30, void ()** @2)
  ret void
}

define internal %struct.Memory* @bea_is_dual_infeasible_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402790_bea_is_dual_infeasible(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @getfree() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4024a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @31, void ()** @2)
  ret void
}

define internal %struct.Memory* @getfree_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4024a0_getfree(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_404710___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_4046a0___libc_csu_init()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
