; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_404720__rodata_type = type <{ [4 x i8], [31 x i8], [34 x i8], [34 x i8], [36 x i8], [34 x i8], [34 x i8], [29 x i8], [34 x i8], [32 x i8], [52 x i8], [46 x i8], [40 x i8], [18 x i8], [34 x i8], [6 x i8], [8 x i8], [25 x i8], [49 x i8], [31 x i8], [23 x i8], [23 x i8], [11 x i8], [4 x i8], [2 x i8], [31 x i8], [4 x i8], [8 x i8] }>
%seg_605de0__init_array_type = type <{ i64, i64 }>
%seg_605ff0__got_type = type <{ i64, i64 }>
%seg_606088__data_type = type <{ [16 x i8], [8 x i8] }>
%seg_6060a0__bss_type = type <{ [32 x i8], [8 x i8], [8 x i8], [2816 x i8], [8424 x i8], [8 x i8], [8 x i8], [8 x i8] }>
%net_type = type <{ [624 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external local_unnamed_addr global i64, align 64
@stdout = external global i64, align 32
@seg_404720__rodata = internal constant %seg_404720__rodata_type <{ [4 x i8] c"\01\00\02\00", [31 x i8] c"network %s: not enough memory\0A\00", [34 x i8] c"active arcs                : %ld\0A\00", [34 x i8] c"simplex iterations         : %ld\0A\00", [36 x i8] c"objective value            : %0.0f\0A\00", [34 x i8] c"erased arcs                : %ld\0A\00", [34 x i8] c"new implicit arcs          : %ld\0A\00", [29 x i8] c"not enough memory, exit(-1)\0A\00", [34 x i8] c"checksum                   : %ld\0A\00", [32 x i8] c"\0AMCF SPEC CPU2006 version 1.10\0A\00", [52 x i8] c"Copyright (c) 1998-2000 Zuse Institut Berlin (ZIB)\0A\00", [46 x i8] c"Copyright (c) 2000-2002 Andreas Loebel & ZIB\0A\00", [40 x i8] c"Copyright (c) 2003-2005 Andreas Loebel\0A\00", [18 x i8] c"read error, exit\0A\00", [34 x i8] c"nodes                      : %ld\0A\00", [6 x i8] c"done\0A\00", [8 x i8] c"mcf.out\00", [25 x i8] c"PRIMAL NETWORK SIMPLEX: \00", [49 x i8] c"artificial arc with nonzero flow, node %d (%ld)\0A\00", [31 x i8] c"basis primal infeasible (%ld)\0A\00", [23 x i8] c"DUAL NETWORK SIMPLEX: \00", [23 x i8] c"basis dual infeasible\0A\00", [11 x i8] c"w\00()\0A\00***\0A\00", [4 x i8] c"%d\0A\00", [2 x i8] c"r\00", [31 x i8] c"read_min(): not enough memory\0A\00", [4 x i8] c"%ld ", [8 x i8] c"%ld %ld\00" }>
@seg_605de0__init_array = internal global %seg_605de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4009e0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4009b0___do_global_dtors_aux to i64) }>
@seg_605ff0__got = internal global %seg_605ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_606088__data = internal global %seg_606088__data_type <{ [16 x i8] zeroinitializer, [8 x i8] c"\01\00\00\00\00\00\00\00" }>
@seg_6060a0__bss = internal global %seg_6060a0__bss_type zeroinitializer
@net = global %net_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4009e0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4009b0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_404710___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4046a0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @flow_org_cost_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @price_out_impl_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dual_feasible_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @global_opt_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_update_flow_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @update_tree_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_start_artificial_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @write_circulations_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @sort_basket_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_bea_mpp_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @flow_cost_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_net_simplex_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @read_min_wrapper
@21 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @suspend_impl_wrapper
@22 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @resize_prob_wrapper
@23 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_iminus_wrapper
@24 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @primal_feasible_wrapper
@25 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @refresh_neighbour_lists_wrapper
@26 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @replace_weaker_arc_wrapper
@27 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @insert_new_arc_wrapper
@28 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@29 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @refresh_potential_wrapper
@30 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @bea_is_dual_infeasible_wrapper
@31 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @getfree_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_4027f0_sort_basket_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402340_dual_feasible_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401110_price_out_impl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401b90_refresh_neighbour_lists_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401c80_refresh_potential_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4009f0_resize_prob_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402d30_primal_iminus_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400b80_insert_new_arc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402170_primal_feasible_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402580_write_circulations_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402790_bea_is_dual_infeasible_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400e50_replace_weaker_arc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_404090_update_tree_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4007f0__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401db0_flow_cost_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401810_global_opt_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402960_primal_bea_mpp_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4035c0_read_min_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401600_suspend_impl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402fd0_primal_net_simplex_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402f10_primal_update_flow_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4033a0_primal_start_artificial_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400940_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fflush(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @realloc(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @calloc(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @strcpy(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__isoc99_sscanf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fclose(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fopen(i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fgets(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @exit(i64) #5

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401c80_refresh_potential(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401c80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %19, 552
  %21 = add i64 %16, 11
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %RDI, align 8, !tbaa !2428
  %24 = add i64 %14, -32
  %25 = add i64 %16, 15
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %26, align 8
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -40
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 8
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %28 to i64*
  store i64 0, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -32
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %38 = add i64 %34, 11
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %37 to i64*
  store i64 -100000000, i64* %39, align 8
  %40 = load i64, i64* %RBP, align 8
  %41 = add i64 %40, -32
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %41 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %RDI, align 8, !tbaa !2428
  %46 = add i64 %45, 16
  %47 = add i64 %42, 8
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %46 to i64*
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %RDI, align 8, !tbaa !2428
  %50 = add i64 %40, -16
  %51 = add i64 %42, 12
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %50 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -24
  %55 = load i64, i64* %RDI, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_401cba

block_401cd8:                                     ; preds = %block_401ccd
  %65 = add i64 %188, 4
  store i64 %65, i64* %PC, align 8
  %66 = load i64, i64* %176, align 8
  store i64 %66, i64* %RAX, align 8, !tbaa !2428
  %67 = add i64 %66, 8
  %68 = add i64 %188, 8
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %67 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, -1
  %72 = icmp eq i32 %70, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %59, align 1, !tbaa !2432
  %74 = and i32 %71, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #12
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %60, align 1, !tbaa !2446
  %79 = xor i32 %71, %70
  %80 = lshr i32 %79, 4
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  store i8 %82, i8* %61, align 1, !tbaa !2447
  %83 = icmp eq i32 %71, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %62, align 1, !tbaa !2448
  %85 = lshr i32 %71, 31
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %63, align 1, !tbaa !2449
  %87 = lshr i32 %70, 31
  %88 = xor i32 %85, %87
  %89 = add nuw nsw i32 %88, %87
  %90 = icmp eq i32 %89, 2
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %64, align 1, !tbaa !2450
  %.v = select i1 %83, i64 14, i64 48
  %92 = add i64 %188, %.v
  %93 = add i64 %92, 4
  store i64 %93, i64* %PC, align 8
  %94 = load i64, i64* %176, align 8
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  br i1 %83, label %block_401ce6, label %block_401d08

block_401d9b:                                     ; preds = %block_401cba
  %95 = add i64 %116, -40
  %96 = add i64 %150, 4
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = add i64 %150, 5
  store i64 %99, i64* %PC, align 8
  %100 = load i64, i64* %5, align 8, !tbaa !2428
  %101 = add i64 %100, 8
  %102 = inttoptr i64 %100 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RBP, align 8, !tbaa !2428
  store i64 %101, i64* %5, align 8, !tbaa !2428
  %104 = add i64 %150, 6
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %PC, align 8, !tbaa !2428
  %107 = add i64 %100, 16
  store i64 %107, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401d78:                                     ; preds = %block_401d61
  %108 = add i64 %253, 4
  store i64 %108, i64* %PC, align 8
  %109 = load i64, i64* %241, align 8
  store i64 %109, i64* %RAX, align 8, !tbaa !2428
  %110 = add i64 %237, -16
  %111 = add i64 %253, 8
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 22
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  br label %block_401d96

block_401cba:                                     ; preds = %block_401d96, %block_401c80
  %115 = phi i64 [ %195, %block_401d96 ], [ %.pre, %block_401c80 ]
  %116 = load i64, i64* %RBP, align 8
  %117 = add i64 %116, -16
  %118 = add i64 %115, 4
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %117 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %RAX, align 8, !tbaa !2428
  %121 = add i64 %116, -32
  %122 = add i64 %115, 8
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %121 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %120, %124
  %126 = icmp ult i64 %120, %124
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %59, align 1, !tbaa !2432
  %128 = trunc i64 %125 to i32
  %129 = and i32 %128, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #12
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %60, align 1, !tbaa !2446
  %134 = xor i64 %124, %120
  %135 = xor i64 %134, %125
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %61, align 1, !tbaa !2447
  %139 = icmp eq i64 %125, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %62, align 1, !tbaa !2448
  %141 = lshr i64 %125, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %63, align 1, !tbaa !2449
  %143 = lshr i64 %120, 63
  %144 = lshr i64 %124, 63
  %145 = xor i64 %144, %143
  %146 = xor i64 %141, %143
  %147 = add nuw nsw i64 %146, %145
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %64, align 1, !tbaa !2450
  %.v23 = select i1 %139, i64 225, i64 14
  %150 = add i64 %115, %.v23
  store i64 %150, i64* %PC, align 8, !tbaa !2428
  br i1 %139, label %block_401d9b, label %block_401ccd.preheader

block_401ccd.preheader:                           ; preds = %block_401cba
  br label %block_401ccd

block_401d31:                                     ; preds = %block_401ce6, %block_401d08
  %151 = phi i64 [ %377, %block_401ce6 ], [ %.pre20, %block_401d08 ]
  %152 = load i64, i64* %RBP, align 8
  %153 = add i64 %152, -16
  %154 = add i64 %151, 4
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %153 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = add i64 %152, -24
  %158 = add i64 %151, 8
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i64*
  store i64 %156, i64* %159, align 8
  %160 = load i64, i64* %RBP, align 8
  %161 = add i64 %160, -16
  %162 = load i64, i64* %PC, align 8
  %163 = add i64 %162, 4
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %161 to i64*
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %RAX, align 8, !tbaa !2428
  %166 = add i64 %165, 16
  %167 = add i64 %162, 8
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %162, 12
  store i64 %170, i64* %PC, align 8
  store i64 %169, i64* %164, align 8
  %.pre18 = load i64, i64* %PC, align 8
  %.pre19 = load i64, i64* %RBP, align 8
  br label %block_401ccd

block_401ccd:                                     ; preds = %block_401ccd.preheader, %block_401d31
  %171 = phi i64 [ %.pre19, %block_401d31 ], [ %116, %block_401ccd.preheader ]
  %172 = phi i64 [ %.pre18, %block_401d31 ], [ %150, %block_401ccd.preheader ]
  %.sink9 = phi i64 [ -120, %block_401d31 ], [ 5, %block_401ccd.preheader ]
  %173 = add i64 %172, %.sink9
  %174 = add i64 %171, -16
  %175 = add i64 %173, 5
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %174 to i64*
  %177 = load i64, i64* %176, align 8
  store i8 0, i8* %59, align 1, !tbaa !2432
  %178 = trunc i64 %177 to i32
  %179 = and i32 %178, 255
  %180 = tail call i32 @llvm.ctpop.i32(i32 %179) #12
  %181 = trunc i32 %180 to i8
  %182 = and i8 %181, 1
  %183 = xor i8 %182, 1
  store i8 %183, i8* %60, align 1, !tbaa !2446
  store i8 0, i8* %61, align 1, !tbaa !2447
  %184 = icmp eq i64 %177, 0
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %62, align 1, !tbaa !2448
  %186 = lshr i64 %177, 63
  %187 = trunc i64 %186 to i8
  store i8 %187, i8* %63, align 1, !tbaa !2449
  store i8 0, i8* %64, align 1, !tbaa !2450
  %.v22 = select i1 %184, i64 125, i64 11
  %188 = add i64 %173, %.v22
  store i64 %188, i64* %PC, align 8, !tbaa !2428
  br i1 %184, label %block_401d4a, label %block_401cd8

block_401d4a:                                     ; preds = %block_401ccd
  %189 = add i64 %171, -24
  %190 = add i64 %188, 4
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %RAX, align 8, !tbaa !2428
  %193 = add i64 %188, 8
  store i64 %193, i64* %PC, align 8
  store i64 %192, i64* %176, align 8
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_401d52

block_401d96.loopexit:                            ; preds = %block_401d52
  br label %block_401d96

block_401d96:                                     ; preds = %block_401d96.loopexit, %block_401d78
  %194 = phi i64 [ %114, %block_401d78 ], [ %216, %block_401d96.loopexit ]
  %195 = add i64 %194, -220
  store i64 %195, i64* %PC, align 8, !tbaa !2428
  br label %block_401cba

block_401d52:                                     ; preds = %block_401d85, %block_401d4a
  %196 = phi i64 [ %227, %block_401d85 ], [ %.pre21, %block_401d4a ]
  %197 = load i64, i64* %RBP, align 8
  %198 = add i64 %197, -16
  %199 = add i64 %196, 4
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %RAX, align 8, !tbaa !2428
  %202 = add i64 %201, 24
  %203 = add i64 %196, 9
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i8 0, i8* %59, align 1, !tbaa !2432
  %206 = trunc i64 %205 to i32
  %207 = and i32 %206, 255
  %208 = tail call i32 @llvm.ctpop.i32(i32 %207) #12
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  store i8 %211, i8* %60, align 1, !tbaa !2446
  store i8 0, i8* %61, align 1, !tbaa !2447
  %212 = icmp eq i64 %205, 0
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %62, align 1, !tbaa !2448
  %214 = lshr i64 %205, 63
  %215 = trunc i64 %214 to i8
  store i8 %215, i8* %63, align 1, !tbaa !2449
  store i8 0, i8* %64, align 1, !tbaa !2450
  %.v24 = select i1 %212, i64 68, i64 15
  %216 = add i64 %196, %.v24
  store i64 %216, i64* %PC, align 8, !tbaa !2428
  br i1 %212, label %block_401d96.loopexit, label %block_401d61

block_401d85:                                     ; preds = %block_401d61
  %217 = add i64 %237, -16
  %218 = add i64 %253, 4
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %217 to i64*
  %220 = load i64, i64* %219, align 8
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = add i64 %220, 24
  %222 = add i64 %253, 8
  store i64 %222, i64* %PC, align 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223, align 8
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = add i64 %253, 12
  store i64 %225, i64* %PC, align 8
  store i64 %224, i64* %219, align 8
  %226 = load i64, i64* %PC, align 8
  %227 = add i64 %226, -63
  store i64 %227, i64* %PC, align 8, !tbaa !2428
  br label %block_401d52

block_401d61:                                     ; preds = %block_401d52
  %228 = add i64 %216, 4
  store i64 %228, i64* %PC, align 8
  %229 = load i64, i64* %200, align 8
  store i64 %229, i64* %RAX, align 8, !tbaa !2428
  %230 = add i64 %229, 32
  %231 = add i64 %216, 8
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %230 to i64*
  %233 = load i64, i64* %232, align 8
  store i64 %233, i64* %RAX, align 8, !tbaa !2428
  %234 = add i64 %197, -24
  %235 = add i64 %216, 12
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i64*
  store i64 %233, i64* %236, align 8
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -24
  %239 = load i64, i64* %PC, align 8
  %240 = add i64 %239, 5
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %238 to i64*
  %242 = load i64, i64* %241, align 8
  store i8 0, i8* %59, align 1, !tbaa !2432
  %243 = trunc i64 %242 to i32
  %244 = and i32 %243, 255
  %245 = tail call i32 @llvm.ctpop.i32(i32 %244) #12
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = xor i8 %247, 1
  store i8 %248, i8* %60, align 1, !tbaa !2446
  store i8 0, i8* %61, align 1, !tbaa !2447
  %249 = icmp eq i64 %242, 0
  %250 = zext i1 %249 to i8
  store i8 %250, i8* %62, align 1, !tbaa !2448
  %251 = lshr i64 %242, 63
  %252 = trunc i64 %251 to i8
  store i8 %252, i8* %63, align 1, !tbaa !2449
  store i8 0, i8* %64, align 1, !tbaa !2450
  %.v25 = select i1 %249, i64 24, i64 11
  %253 = add i64 %239, %.v25
  store i64 %253, i64* %PC, align 8, !tbaa !2428
  br i1 %249, label %block_401d85, label %block_401d78

block_401d08:                                     ; preds = %block_401cd8
  %254 = add i64 %94, 24
  %255 = add i64 %92, 8
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i64*
  %257 = load i64, i64* %256, align 8
  store i64 %257, i64* %RAX, align 8, !tbaa !2428
  %258 = add i64 %92, 11
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  %260 = load i64, i64* %259, align 8
  store i64 %260, i64* %RAX, align 8, !tbaa !2428
  %261 = add i64 %92, 15
  store i64 %261, i64* %PC, align 8
  %262 = load i64, i64* %176, align 8
  store i64 %262, i64* %RCX, align 8, !tbaa !2428
  %263 = add i64 %262, 48
  %264 = add i64 %92, 19
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %263 to i64*
  %266 = load i64, i64* %265, align 8
  store i64 %266, i64* %RCX, align 8, !tbaa !2428
  %267 = add i64 %92, 22
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = sub i64 %260, %269
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = icmp ult i64 %260, %269
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %59, align 1, !tbaa !2432
  %273 = trunc i64 %270 to i32
  %274 = and i32 %273, 255
  %275 = tail call i32 @llvm.ctpop.i32(i32 %274) #12
  %276 = trunc i32 %275 to i8
  %277 = and i8 %276, 1
  %278 = xor i8 %277, 1
  store i8 %278, i8* %60, align 1, !tbaa !2446
  %279 = xor i64 %269, %260
  %280 = xor i64 %279, %270
  %281 = lshr i64 %280, 4
  %282 = trunc i64 %281 to i8
  %283 = and i8 %282, 1
  store i8 %283, i8* %61, align 1, !tbaa !2447
  %284 = icmp eq i64 %270, 0
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %62, align 1, !tbaa !2448
  %286 = lshr i64 %270, 63
  %287 = trunc i64 %286 to i8
  store i8 %287, i8* %63, align 1, !tbaa !2449
  %288 = lshr i64 %260, 63
  %289 = lshr i64 %269, 63
  %290 = xor i64 %289, %288
  %291 = xor i64 %286, %288
  %292 = add nuw nsw i64 %291, %290
  %293 = icmp eq i64 %292, 2
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %64, align 1, !tbaa !2450
  %295 = add i64 %92, 26
  store i64 %295, i64* %PC, align 8
  %296 = load i64, i64* %176, align 8
  store i64 %296, i64* %RCX, align 8, !tbaa !2428
  %297 = add i64 %92, 29
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to i64*
  store i64 %270, i64* %298, align 8
  %299 = load i64, i64* %RBP, align 8
  %300 = add i64 %299, -40
  %301 = load i64, i64* %PC, align 8
  %302 = add i64 %301, 4
  store i64 %302, i64* %PC, align 8
  %303 = inttoptr i64 %300 to i64*
  %304 = load i64, i64* %303, align 8
  %305 = add i64 %304, 1
  store i64 %305, i64* %RAX, align 8, !tbaa !2428
  %306 = icmp eq i64 %304, -1
  %307 = icmp eq i64 %305, 0
  %308 = or i1 %306, %307
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %59, align 1, !tbaa !2432
  %310 = trunc i64 %305 to i32
  %311 = and i32 %310, 255
  %312 = tail call i32 @llvm.ctpop.i32(i32 %311) #12
  %313 = trunc i32 %312 to i8
  %314 = and i8 %313, 1
  %315 = xor i8 %314, 1
  store i8 %315, i8* %60, align 1, !tbaa !2446
  %316 = xor i64 %305, %304
  %317 = lshr i64 %316, 4
  %318 = trunc i64 %317 to i8
  %319 = and i8 %318, 1
  store i8 %319, i8* %61, align 1, !tbaa !2447
  %320 = zext i1 %307 to i8
  store i8 %320, i8* %62, align 1, !tbaa !2448
  %321 = lshr i64 %305, 63
  %322 = trunc i64 %321 to i8
  store i8 %322, i8* %63, align 1, !tbaa !2449
  %323 = lshr i64 %304, 63
  %324 = xor i64 %321, %323
  %325 = add nuw nsw i64 %324, %321
  %326 = icmp eq i64 %325, 2
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %64, align 1, !tbaa !2450
  %328 = add i64 %301, 12
  store i64 %328, i64* %PC, align 8
  store i64 %305, i64* %303, align 8
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_401d31

block_401ce6:                                     ; preds = %block_401cd8
  %329 = add i64 %94, 48
  %330 = add i64 %92, 8
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %329 to i64*
  %332 = load i64, i64* %331, align 8
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = add i64 %92, 11
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i64*
  %335 = load i64, i64* %334, align 8
  store i64 %335, i64* %RAX, align 8, !tbaa !2428
  %336 = add i64 %92, 15
  store i64 %336, i64* %PC, align 8
  %337 = load i64, i64* %176, align 8
  store i64 %337, i64* %RCX, align 8, !tbaa !2428
  %338 = add i64 %337, 24
  %339 = add i64 %92, 19
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %338 to i64*
  %341 = load i64, i64* %340, align 8
  store i64 %341, i64* %RCX, align 8, !tbaa !2428
  %342 = add i64 %92, 22
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i64*
  %344 = load i64, i64* %343, align 8
  %345 = add i64 %344, %335
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = icmp ult i64 %345, %335
  %347 = icmp ult i64 %345, %344
  %348 = or i1 %346, %347
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %59, align 1, !tbaa !2432
  %350 = trunc i64 %345 to i32
  %351 = and i32 %350, 255
  %352 = tail call i32 @llvm.ctpop.i32(i32 %351) #12
  %353 = trunc i32 %352 to i8
  %354 = and i8 %353, 1
  %355 = xor i8 %354, 1
  store i8 %355, i8* %60, align 1, !tbaa !2446
  %356 = xor i64 %344, %335
  %357 = xor i64 %356, %345
  %358 = lshr i64 %357, 4
  %359 = trunc i64 %358 to i8
  %360 = and i8 %359, 1
  store i8 %360, i8* %61, align 1, !tbaa !2447
  %361 = icmp eq i64 %345, 0
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %62, align 1, !tbaa !2448
  %363 = lshr i64 %345, 63
  %364 = trunc i64 %363 to i8
  store i8 %364, i8* %63, align 1, !tbaa !2449
  %365 = lshr i64 %335, 63
  %366 = lshr i64 %344, 63
  %367 = xor i64 %363, %365
  %368 = xor i64 %363, %366
  %369 = add nuw nsw i64 %367, %368
  %370 = icmp eq i64 %369, 2
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %64, align 1, !tbaa !2450
  %372 = add i64 %92, 26
  store i64 %372, i64* %PC, align 8
  %373 = load i64, i64* %176, align 8
  store i64 %373, i64* %RCX, align 8, !tbaa !2428
  %374 = add i64 %92, 29
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  store i64 %345, i64* %375, align 8
  %376 = load i64, i64* %PC, align 8
  %377 = add i64 %376, 46
  store i64 %377, i64* %PC, align 8, !tbaa !2428
  br label %block_401d31
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401f90_flow_org_cost(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401f90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -16
  %12 = load i64, i64* %RDI, align 8
  %13 = add i64 %10, 7
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %12, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -40
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 8
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %16 to i64*
  store i64 0, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -48
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  store i64 0, i64* %24, align 8
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %26 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = add i64 %30, 576
  %32 = add i64 %27, 11
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %31 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RDI, align 8, !tbaa !2428
  %35 = add i64 %25, -32
  %36 = add i64 %27, 15
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %37, align 8
  %38 = load i64, i64* %RBP, align 8
  %39 = add i64 %38, -8
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %RDI, align 8, !tbaa !2428
  %44 = add i64 %43, 568
  %45 = add i64 %40, 11
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %44 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %38, -16
  %49 = add i64 %40, 15
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %48 to i64*
  store i64 %47, i64* %50, align 8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_401fc6

block_4020da:                                     ; preds = %block_4020b6, %block_4020c8
  %57 = phi i64 [ %287, %block_4020b6 ], [ %341, %block_4020c8 ]
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %419, align 8
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = add i64 %57, 8
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %60 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RAX, align 8, !tbaa !2428
  %64 = add i64 %63, 96
  %65 = add i64 %57, 12
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i32*
  %67 = load i32, i32* %66, align 4
  store i8 0, i8* %51, align 1, !tbaa !2432
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %52, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %73 = icmp eq i32 %67, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %54, align 1, !tbaa !2448
  %75 = lshr i32 %67, 31
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  %.v32 = select i1 %73, i64 18, i64 62
  %77 = add i64 %57, %.v32
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = load i64, i64* %419, align 8
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = add i64 %79, 56
  %81 = add i64 %77, 8
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  br i1 %73, label %block_4020ec, label %block_402118

block_401fd7:                                     ; preds = %block_401fc6
  %84 = add i64 %230, 4
  store i64 %84, i64* %PC, align 8
  %85 = load i64, i64* %199, align 8
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = add i64 %85, 24
  %87 = add i64 %230, 8
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = add i32 %89, -2
  %91 = icmp ult i32 %89, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %51, align 1, !tbaa !2432
  %93 = and i32 %90, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #12
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  store i8 %97, i8* %52, align 1, !tbaa !2446
  %98 = xor i32 %90, %89
  %99 = lshr i32 %98, 4
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  store i8 %101, i8* %53, align 1, !tbaa !2447
  %102 = icmp eq i32 %90, 0
  %103 = zext i1 %102 to i8
  store i8 %103, i8* %54, align 1, !tbaa !2448
  %104 = lshr i32 %90, 31
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %55, align 1, !tbaa !2449
  %106 = lshr i32 %89, 31
  %107 = xor i32 %104, %106
  %108 = add nuw nsw i32 %107, %106
  %109 = icmp eq i32 %108, 2
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %56, align 1, !tbaa !2450
  %.v30 = select i1 %102, i64 14, i64 31
  %111 = add i64 %230, %.v30
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC, align 8
  %113 = load i64, i64* %199, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %113, 48
  %115 = add i64 %111, 12
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  br i1 %102, label %block_401fe5, label %block_401ff6

block_402053:                                     ; preds = %block_402042
  %117 = add i64 %266, 4
  store i64 %117, i64* %PC, align 8
  %118 = load i64, i64* %235, align 8
  store i64 %118, i64* %RAX, align 8, !tbaa !2428
  %119 = add i64 %118, 80
  %120 = add i64 %266, 8
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %266, 12
  store i64 %123, i64* %PC, align 8
  %124 = load i64, i64* %235, align 8
  store i64 %124, i64* %RCX, align 8, !tbaa !2428
  %125 = add i64 %124, 48
  %126 = add i64 %266, 16
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %RCX, align 8, !tbaa !2428
  %129 = add i64 %128, 48
  %130 = add i64 %266, 20
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i64*
  store i64 %122, i64* %131, align 8
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -24
  %134 = load i64, i64* %PC, align 8
  %135 = add i64 %134, 4
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %133 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = add i64 %137, 104
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = icmp ugt i64 %137, -105
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %51, align 1, !tbaa !2432
  %141 = trunc i64 %138 to i32
  %142 = and i32 %141, 255
  %143 = tail call i32 @llvm.ctpop.i32(i32 %142) #12
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  store i8 %146, i8* %52, align 1, !tbaa !2446
  %147 = xor i64 %138, %137
  %148 = lshr i64 %147, 4
  %149 = trunc i64 %148 to i8
  %150 = and i8 %149, 1
  store i8 %150, i8* %53, align 1, !tbaa !2447
  %151 = icmp eq i64 %138, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %54, align 1, !tbaa !2448
  %153 = lshr i64 %138, 63
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* %55, align 1, !tbaa !2449
  %155 = lshr i64 %137, 63
  %156 = xor i64 %153, %155
  %157 = add nuw nsw i64 %156, %153
  %158 = icmp eq i64 %157, 2
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %56, align 1, !tbaa !2450
  %160 = add i64 %134, 12
  store i64 %160, i64* %PC, align 8
  store i64 %138, i64* %136, align 8
  %161 = load i64, i64* %PC, align 8
  %162 = add i64 %161, -49
  store i64 %162, i64* %PC, align 8, !tbaa !2428
  br label %block_402042

block_402148:                                     ; preds = %block_402096
  %163 = add i64 %416, -40
  %164 = add i64 %450, 6
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = sitofp i64 %166 to double
  %168 = bitcast [32 x %union.VectorReg]* %3 to double*
  store double %167, double* %168, align 1, !tbaa !2451
  %169 = add i64 %416, -8
  %170 = add i64 %450, 10
  store i64 %170, i64* %PC, align 8
  %171 = inttoptr i64 %169 to i64*
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = add i64 %172, 528
  %174 = add i64 %450, 19
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sitofp i64 %176 to double
  %178 = bitcast %union.VectorReg* %363 to double*
  store double %177, double* %178, align 1, !tbaa !2451
  %179 = fmul double %177, %167
  store double %179, double* %168, align 1, !tbaa !2451
  %180 = add i64 %416, -48
  %181 = add i64 %450, 29
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = sitofp i64 %183 to double
  store double %184, double* %178, align 1, !tbaa !2451
  %185 = fadd double %184, %179
  store double %185, double* %168, align 1, !tbaa !2451
  %186 = add i64 %450, 34
  store i64 %186, i64* %PC, align 8
  %187 = load i64, i64* %6, align 8, !tbaa !2428
  %188 = add i64 %187, 8
  %189 = inttoptr i64 %187 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %RBP, align 8, !tbaa !2428
  store i64 %188, i64* %6, align 8, !tbaa !2428
  %191 = add i64 %450, 35
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %188 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %PC, align 8, !tbaa !2428
  %194 = add i64 %187, 16
  store i64 %194, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401fc6:                                     ; preds = %block_402002, %block_401f90
  %195 = phi i64 [ %633, %block_402002 ], [ %.pre, %block_401f90 ]
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -16
  %198 = add i64 %195, 4
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  %200 = load i64, i64* %199, align 8
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = add i64 %196, -32
  %202 = add i64 %195, 8
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  %204 = load i64, i64* %203, align 8
  store i64 %204, i64* %RCX, align 8, !tbaa !2428
  %205 = sub i64 %200, %204
  %206 = icmp ult i64 %200, %204
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %51, align 1, !tbaa !2432
  %208 = trunc i64 %205 to i32
  %209 = and i32 %208, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #12
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %52, align 1, !tbaa !2446
  %214 = xor i64 %200, %204
  %215 = xor i64 %214, %205
  %216 = lshr i64 %215, 4
  %217 = trunc i64 %216 to i8
  %218 = and i8 %217, 1
  store i8 %218, i8* %53, align 1, !tbaa !2447
  %219 = icmp eq i64 %205, 0
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %54, align 1, !tbaa !2448
  %221 = lshr i64 %205, 63
  %222 = trunc i64 %221 to i8
  store i8 %222, i8* %55, align 1, !tbaa !2449
  %223 = lshr i64 %200, 63
  %224 = lshr i64 %204, 63
  %225 = xor i64 %223, %224
  %226 = xor i64 %221, %223
  %227 = add nuw nsw i64 %226, %225
  %228 = icmp eq i64 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %56, align 1, !tbaa !2450
  %.v31 = select i1 %219, i64 82, i64 17
  %230 = add i64 %195, %.v31
  store i64 %230, i64* %PC, align 8, !tbaa !2428
  br i1 %219, label %block_402018, label %block_401fd7

block_402042:                                     ; preds = %block_402018, %block_402053
  %231 = phi i64 [ %.pre25, %block_402018 ], [ %162, %block_402053 ]
  %232 = load i64, i64* %RBP, align 8
  %233 = add i64 %232, -24
  %234 = add i64 %231, 4
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %233 to i64*
  %236 = load i64, i64* %235, align 8
  store i64 %236, i64* %RAX, align 8, !tbaa !2428
  %237 = add i64 %232, -32
  %238 = add i64 %231, 8
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %237 to i64*
  %240 = load i64, i64* %239, align 8
  store i64 %240, i64* %RCX, align 8, !tbaa !2428
  %241 = sub i64 %236, %240
  %242 = icmp ult i64 %236, %240
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %51, align 1, !tbaa !2432
  %244 = trunc i64 %241 to i32
  %245 = and i32 %244, 255
  %246 = tail call i32 @llvm.ctpop.i32(i32 %245) #12
  %247 = trunc i32 %246 to i8
  %248 = and i8 %247, 1
  %249 = xor i8 %248, 1
  store i8 %249, i8* %52, align 1, !tbaa !2446
  %250 = xor i64 %236, %240
  %251 = xor i64 %250, %241
  %252 = lshr i64 %251, 4
  %253 = trunc i64 %252 to i8
  %254 = and i8 %253, 1
  store i8 %254, i8* %53, align 1, !tbaa !2447
  %255 = icmp eq i64 %241, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %54, align 1, !tbaa !2448
  %257 = lshr i64 %241, 63
  %258 = trunc i64 %257 to i8
  store i8 %258, i8* %55, align 1, !tbaa !2449
  %259 = lshr i64 %236, 63
  %260 = lshr i64 %240, 63
  %261 = xor i64 %259, %260
  %262 = xor i64 %257, %259
  %263 = add nuw nsw i64 %262, %261
  %264 = icmp eq i64 %263, 2
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %56, align 1, !tbaa !2450
  %.v33 = select i1 %255, i64 54, i64 17
  %266 = add i64 %231, %.v33
  store i64 %266, i64* %PC, align 8, !tbaa !2428
  br i1 %255, label %block_402078, label %block_402053

block_4020b6:                                     ; preds = %block_4020a7
  %267 = add i64 %362, 4
  store i64 %267, i64* %PC, align 8
  %268 = load i64, i64* %419, align 8
  store i64 %268, i64* %RAX, align 8, !tbaa !2428
  %269 = add i64 %268, 8
  %270 = add i64 %362, 8
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %269 to i64*
  %272 = load i64, i64* %271, align 8
  store i64 %272, i64* %RAX, align 8, !tbaa !2428
  %273 = add i64 %272, 96
  %274 = add i64 %362, 12
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i32*
  %276 = load i32, i32* %275, align 4
  store i8 0, i8* %51, align 1, !tbaa !2432
  %277 = and i32 %276, 255
  %278 = tail call i32 @llvm.ctpop.i32(i32 %277) #12
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  store i8 %281, i8* %52, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %282 = icmp eq i32 %276, 0
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %54, align 1, !tbaa !2448
  %284 = lshr i32 %276, 31
  %285 = trunc i32 %284 to i8
  store i8 %285, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  %286 = icmp ne i8 %285, 0
  %.v = select i1 %286, i64 6, i64 24
  %287 = add i64 %274, %.v
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  br i1 %286, label %block_4020c8, label %block_4020da

block_402132:                                     ; preds = %block_4020a7, %block_40212d
  %288 = phi i64 [ %416, %block_4020a7 ], [ %.pre28, %block_40212d ]
  %289 = phi i64 [ %362, %block_4020a7 ], [ %343, %block_40212d ]
  %290 = add i64 %288, -16
  %291 = add i64 %289, 9
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = add i64 %293, 64
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = icmp ugt i64 %293, -65
  %296 = zext i1 %295 to i8
  store i8 %296, i8* %51, align 1, !tbaa !2432
  %297 = trunc i64 %294 to i32
  %298 = and i32 %297, 255
  %299 = tail call i32 @llvm.ctpop.i32(i32 %298) #12
  %300 = trunc i32 %299 to i8
  %301 = and i8 %300, 1
  %302 = xor i8 %301, 1
  store i8 %302, i8* %52, align 1, !tbaa !2446
  %303 = xor i64 %294, %293
  %304 = lshr i64 %303, 4
  %305 = trunc i64 %304 to i8
  %306 = and i8 %305, 1
  store i8 %306, i8* %53, align 1, !tbaa !2447
  %307 = icmp eq i64 %294, 0
  %308 = zext i1 %307 to i8
  store i8 %308, i8* %54, align 1, !tbaa !2448
  %309 = lshr i64 %294, 63
  %310 = trunc i64 %309 to i8
  store i8 %310, i8* %55, align 1, !tbaa !2449
  %311 = lshr i64 %293, 63
  %312 = xor i64 %309, %311
  %313 = add nuw nsw i64 %312, %309
  %314 = icmp eq i64 %313, 2
  %315 = zext i1 %314 to i8
  store i8 %315, i8* %56, align 1, !tbaa !2450
  %316 = add i64 %289, 17
  store i64 %316, i64* %PC, align 8
  store i64 %294, i64* %292, align 8
  %317 = load i64, i64* %PC, align 8
  %318 = add i64 %317, -173
  store i64 %318, i64* %PC, align 8, !tbaa !2428
  br label %block_402096

block_4020c8:                                     ; preds = %block_4020b6
  %319 = add i64 %287, 4
  store i64 %319, i64* %PC, align 8
  %320 = load i64, i64* %419, align 8
  store i64 %320, i64* %RAX, align 8, !tbaa !2428
  %321 = add i64 %320, 16
  %322 = add i64 %287, 8
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %321 to i64*
  %324 = load i64, i64* %323, align 8
  store i64 %324, i64* %RAX, align 8, !tbaa !2428
  %325 = add i64 %324, 96
  %326 = add i64 %287, 12
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %325 to i32*
  %328 = load i32, i32* %327, align 4
  store i8 0, i8* %51, align 1, !tbaa !2432
  %329 = and i32 %328, 255
  %330 = tail call i32 @llvm.ctpop.i32(i32 %329) #12
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = xor i8 %332, 1
  store i8 %333, i8* %52, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %334 = icmp eq i32 %328, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %54, align 1, !tbaa !2448
  %336 = lshr i32 %328, 31
  %337 = trunc i32 %336 to i8
  store i8 %337, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  %338 = xor i1 %334, true
  %339 = icmp eq i8 %337, 0
  %340 = and i1 %339, %338
  %.v36 = select i1 %340, i64 101, i64 18
  %341 = add i64 %287, %.v36
  store i64 %341, i64* %PC, align 8, !tbaa !2428
  br i1 %340, label %block_40212d, label %block_4020da

block_40212d:                                     ; preds = %block_402128, %block_4020c8
  %.pre28 = phi i64 [ %.pre28.pre, %block_402128 ], [ %416, %block_4020c8 ]
  %342 = phi i64 [ %345, %block_402128 ], [ %341, %block_4020c8 ]
  %343 = add i64 %342, 5
  store i64 %343, i64* %PC, align 8, !tbaa !2428
  br label %block_402132

block_402128:                                     ; preds = %block_4020ec, %block_402118
  %344 = phi i64 [ %600, %block_4020ec ], [ %.pre27, %block_402118 ]
  %345 = add i64 %344, 5
  store i64 %345, i64* %PC, align 8, !tbaa !2428
  %.pre28.pre = load i64, i64* %RBP, align 8
  br label %block_40212d

block_4020a7:                                     ; preds = %block_402096
  %346 = add i64 %450, 4
  store i64 %346, i64* %PC, align 8
  %347 = load i64, i64* %419, align 8
  store i64 %347, i64* %RAX, align 8, !tbaa !2428
  %348 = add i64 %347, 48
  %349 = add i64 %450, 9
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %348 to i64*
  %351 = load i64, i64* %350, align 8
  store i8 0, i8* %51, align 1, !tbaa !2432
  %352 = trunc i64 %351 to i32
  %353 = and i32 %352, 255
  %354 = tail call i32 @llvm.ctpop.i32(i32 %353) #12
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  store i8 %357, i8* %52, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %358 = icmp eq i64 %351, 0
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %54, align 1, !tbaa !2448
  %360 = lshr i64 %351, 63
  %361 = trunc i64 %360 to i8
  store i8 %361, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  %.v35 = select i1 %358, i64 139, i64 15
  %362 = add i64 %450, %.v35
  store i64 %362, i64* %PC, align 8, !tbaa !2428
  br i1 %358, label %block_402132, label %block_4020b6

block_402018:                                     ; preds = %block_401fc6
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %364 = add i64 %196, -8
  %365 = add i64 %230, 4
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i64*
  %367 = load i64, i64* %366, align 8
  store i64 %367, i64* %RAX, align 8, !tbaa !2428
  %368 = add i64 %367, 560
  %369 = add i64 %230, 11
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i64*
  %371 = load i64, i64* %370, align 8
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = add i64 %230, 15
  store i64 %372, i64* %PC, align 8
  store i64 %371, i64* %203, align 8
  %373 = load i64, i64* %RBP, align 8
  %374 = add i64 %373, -8
  %375 = load i64, i64* %PC, align 8
  %376 = add i64 %375, 4
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %374 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = add i64 %378, 552
  %380 = add i64 %375, 11
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to i64*
  %382 = load i64, i64* %381, align 8
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = add i64 %373, -24
  %384 = add i64 %375, 15
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %383 to i64*
  store i64 %382, i64* %385, align 8
  %386 = load i64, i64* %RBP, align 8
  %387 = add i64 %386, -24
  %388 = load i64, i64* %PC, align 8
  %389 = add i64 %388, 4
  store i64 %389, i64* %PC, align 8
  %390 = inttoptr i64 %387 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = add i64 %391, 104
  store i64 %392, i64* %RAX, align 8, !tbaa !2428
  %393 = icmp ugt i64 %391, -105
  %394 = zext i1 %393 to i8
  store i8 %394, i8* %51, align 1, !tbaa !2432
  %395 = trunc i64 %392 to i32
  %396 = and i32 %395, 255
  %397 = tail call i32 @llvm.ctpop.i32(i32 %396) #12
  %398 = trunc i32 %397 to i8
  %399 = and i8 %398, 1
  %400 = xor i8 %399, 1
  store i8 %400, i8* %52, align 1, !tbaa !2446
  %401 = xor i64 %392, %391
  %402 = lshr i64 %401, 4
  %403 = trunc i64 %402 to i8
  %404 = and i8 %403, 1
  store i8 %404, i8* %53, align 1, !tbaa !2447
  %405 = icmp eq i64 %392, 0
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %54, align 1, !tbaa !2448
  %407 = lshr i64 %392, 63
  %408 = trunc i64 %407 to i8
  store i8 %408, i8* %55, align 1, !tbaa !2449
  %409 = lshr i64 %391, 63
  %410 = xor i64 %407, %409
  %411 = add nuw nsw i64 %410, %407
  %412 = icmp eq i64 %411, 2
  %413 = zext i1 %412 to i8
  store i8 %413, i8* %56, align 1, !tbaa !2450
  %414 = add i64 %388, 12
  store i64 %414, i64* %PC, align 8
  store i64 %392, i64* %390, align 8
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_402042

block_402096:                                     ; preds = %block_402078, %block_402132
  %415 = phi i64 [ %.pre26, %block_402078 ], [ %318, %block_402132 ]
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -16
  %418 = add i64 %415, 4
  store i64 %418, i64* %PC, align 8
  %419 = inttoptr i64 %417 to i64*
  %420 = load i64, i64* %419, align 8
  store i64 %420, i64* %RAX, align 8, !tbaa !2428
  %421 = add i64 %416, -32
  %422 = add i64 %415, 8
  store i64 %422, i64* %PC, align 8
  %423 = inttoptr i64 %421 to i64*
  %424 = load i64, i64* %423, align 8
  store i64 %424, i64* %RCX, align 8, !tbaa !2428
  %425 = sub i64 %420, %424
  %426 = icmp ult i64 %420, %424
  %427 = zext i1 %426 to i8
  store i8 %427, i8* %51, align 1, !tbaa !2432
  %428 = trunc i64 %425 to i32
  %429 = and i32 %428, 255
  %430 = tail call i32 @llvm.ctpop.i32(i32 %429) #12
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  %433 = xor i8 %432, 1
  store i8 %433, i8* %52, align 1, !tbaa !2446
  %434 = xor i64 %420, %424
  %435 = xor i64 %434, %425
  %436 = lshr i64 %435, 4
  %437 = trunc i64 %436 to i8
  %438 = and i8 %437, 1
  store i8 %438, i8* %53, align 1, !tbaa !2447
  %439 = icmp eq i64 %425, 0
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %54, align 1, !tbaa !2448
  %441 = lshr i64 %425, 63
  %442 = trunc i64 %441 to i8
  store i8 %442, i8* %55, align 1, !tbaa !2449
  %443 = lshr i64 %420, 63
  %444 = lshr i64 %424, 63
  %445 = xor i64 %443, %444
  %446 = xor i64 %441, %443
  %447 = add nuw nsw i64 %446, %445
  %448 = icmp eq i64 %447, 2
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %56, align 1, !tbaa !2450
  %.v34 = select i1 %439, i64 178, i64 17
  %450 = add i64 %415, %.v34
  store i64 %450, i64* %PC, align 8, !tbaa !2428
  br i1 %439, label %block_402148, label %block_4020a7

block_401ff6:                                     ; preds = %block_401fd7
  store i64 0, i64* %116, align 8
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_402002

block_402118:                                     ; preds = %block_4020da
  %451 = add i64 %416, -48
  %452 = add i64 %77, 12
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %451 to i64*
  %454 = load i64, i64* %453, align 8
  %455 = add i64 %454, %83
  store i64 %455, i64* %RAX, align 8, !tbaa !2428
  %456 = icmp ult i64 %455, %83
  %457 = icmp ult i64 %455, %454
  %458 = or i1 %456, %457
  %459 = zext i1 %458 to i8
  store i8 %459, i8* %51, align 1, !tbaa !2432
  %460 = trunc i64 %455 to i32
  %461 = and i32 %460, 255
  %462 = tail call i32 @llvm.ctpop.i32(i32 %461) #12
  %463 = trunc i32 %462 to i8
  %464 = and i8 %463, 1
  %465 = xor i8 %464, 1
  store i8 %465, i8* %52, align 1, !tbaa !2446
  %466 = xor i64 %454, %83
  %467 = xor i64 %466, %455
  %468 = lshr i64 %467, 4
  %469 = trunc i64 %468 to i8
  %470 = and i8 %469, 1
  store i8 %470, i8* %53, align 1, !tbaa !2447
  %471 = icmp eq i64 %455, 0
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %54, align 1, !tbaa !2448
  %473 = lshr i64 %455, 63
  %474 = trunc i64 %473 to i8
  store i8 %474, i8* %55, align 1, !tbaa !2449
  %475 = lshr i64 %83, 63
  %476 = lshr i64 %454, 63
  %477 = xor i64 %473, %475
  %478 = xor i64 %473, %476
  %479 = add nuw nsw i64 %477, %478
  %480 = icmp eq i64 %479, 2
  %481 = zext i1 %480 to i8
  store i8 %481, i8* %56, align 1, !tbaa !2450
  %482 = add i64 %77, 16
  store i64 %482, i64* %PC, align 8
  store i64 %455, i64* %453, align 8
  %.pre27 = load i64, i64* %PC, align 8
  br label %block_402128

block_402078:                                     ; preds = %block_402042
  %483 = add i64 %232, -8
  %484 = add i64 %266, 4
  store i64 %484, i64* %PC, align 8
  %485 = inttoptr i64 %483 to i64*
  %486 = load i64, i64* %485, align 8
  store i64 %486, i64* %RAX, align 8, !tbaa !2428
  %487 = add i64 %486, 576
  %488 = add i64 %266, 11
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to i64*
  %490 = load i64, i64* %489, align 8
  store i64 %490, i64* %RAX, align 8, !tbaa !2428
  %491 = add i64 %266, 15
  store i64 %491, i64* %PC, align 8
  store i64 %490, i64* %239, align 8
  %492 = load i64, i64* %RBP, align 8
  %493 = add i64 %492, -8
  %494 = load i64, i64* %PC, align 8
  %495 = add i64 %494, 4
  store i64 %495, i64* %PC, align 8
  %496 = inttoptr i64 %493 to i64*
  %497 = load i64, i64* %496, align 8
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = add i64 %497, 568
  %499 = add i64 %494, 11
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %498 to i64*
  %501 = load i64, i64* %500, align 8
  store i64 %501, i64* %RAX, align 8, !tbaa !2428
  %502 = add i64 %492, -16
  %503 = add i64 %494, 15
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %502 to i64*
  store i64 %501, i64* %504, align 8
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_402096

block_4020ec:                                     ; preds = %block_4020da
  %505 = add i64 %416, -8
  %506 = add i64 %77, 12
  store i64 %506, i64* %PC, align 8
  %507 = inttoptr i64 %505 to i64*
  %508 = load i64, i64* %507, align 8
  store i64 %508, i64* %RCX, align 8, !tbaa !2428
  %509 = add i64 %508, 528
  %510 = add i64 %77, 19
  store i64 %510, i64* %PC, align 8
  %511 = inttoptr i64 %509 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = sub i64 %83, %512
  store i64 %513, i64* %RAX, align 8, !tbaa !2428
  %514 = icmp ult i64 %83, %512
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %51, align 1, !tbaa !2432
  %516 = trunc i64 %513 to i32
  %517 = and i32 %516, 255
  %518 = tail call i32 @llvm.ctpop.i32(i32 %517) #12
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  store i8 %521, i8* %52, align 1, !tbaa !2446
  %522 = xor i64 %512, %83
  %523 = xor i64 %522, %513
  %524 = lshr i64 %523, 4
  %525 = trunc i64 %524 to i8
  %526 = and i8 %525, 1
  store i8 %526, i8* %53, align 1, !tbaa !2447
  %527 = icmp eq i64 %513, 0
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %54, align 1, !tbaa !2448
  %529 = lshr i64 %513, 63
  %530 = trunc i64 %529 to i8
  store i8 %530, i8* %55, align 1, !tbaa !2449
  %531 = lshr i64 %83, 63
  %532 = lshr i64 %512, 63
  %533 = xor i64 %532, %531
  %534 = xor i64 %529, %531
  %535 = add nuw nsw i64 %534, %533
  %536 = icmp eq i64 %535, 2
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %56, align 1, !tbaa !2450
  %538 = add i64 %416, -48
  %539 = add i64 %77, 23
  store i64 %539, i64* %PC, align 8
  %540 = inttoptr i64 %538 to i64*
  %541 = load i64, i64* %540, align 8
  %542 = add i64 %541, %513
  store i64 %542, i64* %RAX, align 8, !tbaa !2428
  %543 = icmp ult i64 %542, %513
  %544 = icmp ult i64 %542, %541
  %545 = or i1 %543, %544
  %546 = zext i1 %545 to i8
  store i8 %546, i8* %51, align 1, !tbaa !2432
  %547 = trunc i64 %542 to i32
  %548 = and i32 %547, 255
  %549 = tail call i32 @llvm.ctpop.i32(i32 %548) #12
  %550 = trunc i32 %549 to i8
  %551 = and i8 %550, 1
  %552 = xor i8 %551, 1
  store i8 %552, i8* %52, align 1, !tbaa !2446
  %553 = xor i64 %541, %513
  %554 = xor i64 %553, %542
  %555 = lshr i64 %554, 4
  %556 = trunc i64 %555 to i8
  %557 = and i8 %556, 1
  store i8 %557, i8* %53, align 1, !tbaa !2447
  %558 = icmp eq i64 %542, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %54, align 1, !tbaa !2448
  %560 = lshr i64 %542, 63
  %561 = trunc i64 %560 to i8
  store i8 %561, i8* %55, align 1, !tbaa !2449
  %562 = lshr i64 %541, 63
  %563 = xor i64 %560, %529
  %564 = xor i64 %560, %562
  %565 = add nuw nsw i64 %563, %564
  %566 = icmp eq i64 %565, 2
  %567 = zext i1 %566 to i8
  store i8 %567, i8* %56, align 1, !tbaa !2450
  %568 = add i64 %77, 27
  store i64 %568, i64* %PC, align 8
  store i64 %542, i64* %540, align 8
  %569 = load i64, i64* %RBP, align 8
  %570 = add i64 %569, -40
  %571 = load i64, i64* %PC, align 8
  %572 = add i64 %571, 4
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %570 to i64*
  %574 = load i64, i64* %573, align 8
  %575 = add i64 %574, 1
  store i64 %575, i64* %RAX, align 8, !tbaa !2428
  %576 = icmp eq i64 %574, -1
  %577 = icmp eq i64 %575, 0
  %578 = or i1 %576, %577
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %51, align 1, !tbaa !2432
  %580 = trunc i64 %575 to i32
  %581 = and i32 %580, 255
  %582 = tail call i32 @llvm.ctpop.i32(i32 %581) #12
  %583 = trunc i32 %582 to i8
  %584 = and i8 %583, 1
  %585 = xor i8 %584, 1
  store i8 %585, i8* %52, align 1, !tbaa !2446
  %586 = xor i64 %575, %574
  %587 = lshr i64 %586, 4
  %588 = trunc i64 %587 to i8
  %589 = and i8 %588, 1
  store i8 %589, i8* %53, align 1, !tbaa !2447
  %590 = zext i1 %577 to i8
  store i8 %590, i8* %54, align 1, !tbaa !2448
  %591 = lshr i64 %575, 63
  %592 = trunc i64 %591 to i8
  store i8 %592, i8* %55, align 1, !tbaa !2449
  %593 = lshr i64 %574, 63
  %594 = xor i64 %591, %593
  %595 = add nuw nsw i64 %594, %591
  %596 = icmp eq i64 %595, 2
  %597 = zext i1 %596 to i8
  store i8 %597, i8* %56, align 1, !tbaa !2450
  %598 = add i64 %571, 12
  store i64 %598, i64* %PC, align 8
  store i64 %575, i64* %573, align 8
  %599 = load i64, i64* %PC, align 8
  %600 = add i64 %599, 21
  store i64 %600, i64* %PC, align 8, !tbaa !2428
  br label %block_402128

block_401fe5:                                     ; preds = %block_401fd7
  store i64 1, i64* %116, align 8
  %601 = load i64, i64* %PC, align 8
  %602 = add i64 %601, 17
  store i64 %602, i64* %PC, align 8, !tbaa !2428
  br label %block_402002

block_402002:                                     ; preds = %block_401fe5, %block_401ff6
  %603 = phi i64 [ %602, %block_401fe5 ], [ %.pre24, %block_401ff6 ]
  %604 = load i64, i64* %RBP, align 8
  %605 = add i64 %604, -16
  %606 = add i64 %603, 9
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to i64*
  %608 = load i64, i64* %607, align 8
  %609 = add i64 %608, 64
  store i64 %609, i64* %RAX, align 8, !tbaa !2428
  %610 = icmp ugt i64 %608, -65
  %611 = zext i1 %610 to i8
  store i8 %611, i8* %51, align 1, !tbaa !2432
  %612 = trunc i64 %609 to i32
  %613 = and i32 %612, 255
  %614 = tail call i32 @llvm.ctpop.i32(i32 %613) #12
  %615 = trunc i32 %614 to i8
  %616 = and i8 %615, 1
  %617 = xor i8 %616, 1
  store i8 %617, i8* %52, align 1, !tbaa !2446
  %618 = xor i64 %609, %608
  %619 = lshr i64 %618, 4
  %620 = trunc i64 %619 to i8
  %621 = and i8 %620, 1
  store i8 %621, i8* %53, align 1, !tbaa !2447
  %622 = icmp eq i64 %609, 0
  %623 = zext i1 %622 to i8
  store i8 %623, i8* %54, align 1, !tbaa !2448
  %624 = lshr i64 %609, 63
  %625 = trunc i64 %624 to i8
  store i8 %625, i8* %55, align 1, !tbaa !2449
  %626 = lshr i64 %608, 63
  %627 = xor i64 %624, %626
  %628 = add nuw nsw i64 %627, %624
  %629 = icmp eq i64 %628, 2
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %56, align 1, !tbaa !2450
  %631 = add i64 %603, 17
  store i64 %631, i64* %PC, align 8
  store i64 %609, i64* %607, align 8
  %632 = load i64, i64* %PC, align 8
  %633 = add i64 %632, -77
  store i64 %633, i64* %PC, align 8, !tbaa !2428
  br label %block_401fc6
}

; Function Attrs: noinline
define %struct.Memory* @sub_401110_price_out_impl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401110:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -184
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 176
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -24
  %41 = load i64, i64* %RDI, align 8
  %42 = add i64 %10, 14
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -40
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 8
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %45 to i64*
  store i64 0, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -48
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 8
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  store i64 0, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -64
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 8
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %55 to i64*
  store i64 15, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -16
  %61 = load i64, i64* %PC, align 8
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = add i64 %64, 528
  %66 = add i64 %61, 11
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = add i64 %59, -72
  %70 = add i64 %61, 15
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -88
  %74 = load i64, i64* %PC, align 8
  %75 = add i64 %74, 8
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %73 to i64*
  store i64 30, i64* %76, align 8
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -72
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RDI, align 8, !tbaa !2428
  %83 = add i64 %77, -64
  %84 = add i64 %79, 8
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %83 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %82, %86
  store i64 %87, i64* %RDI, align 8, !tbaa !2428
  %88 = icmp ult i64 %82, %86
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %14, align 1, !tbaa !2432
  %90 = trunc i64 %87 to i32
  %91 = and i32 %90, 255
  %92 = tail call i32 @llvm.ctpop.i32(i32 %91) #12
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  store i8 %95, i8* %21, align 1, !tbaa !2446
  %96 = xor i64 %86, %82
  %97 = xor i64 %96, %87
  %98 = lshr i64 %97, 4
  %99 = trunc i64 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %27, align 1, !tbaa !2447
  %101 = icmp eq i64 %87, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %30, align 1, !tbaa !2448
  %103 = lshr i64 %87, 63
  %104 = trunc i64 %103 to i8
  store i8 %104, i8* %33, align 1, !tbaa !2449
  %105 = lshr i64 %82, 63
  %106 = lshr i64 %86, 63
  %107 = xor i64 %106, %105
  %108 = xor i64 %103, %105
  %109 = add nuw nsw i64 %108, %107
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %39, align 1, !tbaa !2450
  %112 = add i64 %77, -104
  %113 = add i64 %79, 12
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %112 to i64*
  store i64 %87, i64* %114, align 8
  %115 = load i64, i64* %RBP, align 8
  %116 = add i64 %115, -16
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %116 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %RDI, align 8, !tbaa !2428
  %121 = add i64 %120, 408
  %122 = add i64 %117, 15
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %121 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = add i64 %124, -15000
  %126 = icmp ult i64 %124, 15000
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %14, align 1, !tbaa !2432
  %128 = trunc i64 %125 to i32
  %129 = and i32 %128, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #12
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %21, align 1, !tbaa !2446
  %134 = xor i64 %124, 16
  %135 = xor i64 %134, %125
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %27, align 1, !tbaa !2447
  %139 = icmp eq i64 %125, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %30, align 1, !tbaa !2448
  %141 = lshr i64 %125, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %33, align 1, !tbaa !2449
  %143 = lshr i64 %124, 63
  %144 = xor i64 %141, %143
  %145 = add nuw nsw i64 %144, %143
  %146 = icmp eq i64 %145, 2
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %39, align 1, !tbaa !2450
  %148 = icmp ne i8 %142, 0
  %149 = xor i1 %148, %146
  %.demorgan = or i1 %139, %149
  %.v62 = select i1 %.demorgan, i64 21, i64 180
  %150 = add i64 %117, %.v62
  store i64 %150, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_40116f, label %block_40120e

block_40127f:                                     ; preds = %block_40126c
  %151 = add i64 %1088, -24
  %152 = add i64 %1100, 9
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %151 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = icmp eq i64 %154, -1
  %157 = icmp eq i64 %155, 0
  %158 = or i1 %156, %157
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %14, align 1, !tbaa !2432
  %160 = trunc i64 %155 to i32
  %161 = and i32 %160, 255
  %162 = tail call i32 @llvm.ctpop.i32(i32 %161) #12
  %163 = trunc i32 %162 to i8
  %164 = and i8 %163, 1
  %165 = xor i8 %164, 1
  store i8 %165, i8* %21, align 1, !tbaa !2446
  %166 = xor i64 %155, %154
  %167 = lshr i64 %166, 4
  %168 = trunc i64 %167 to i8
  %169 = and i8 %168, 1
  store i8 %169, i8* %27, align 1, !tbaa !2447
  %170 = zext i1 %157 to i8
  store i8 %170, i8* %30, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %33, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %171, %173
  %175 = add nuw nsw i64 %174, %171
  %176 = icmp eq i64 %175, 2
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %39, align 1, !tbaa !2450
  %178 = add i64 %1100, 17
  store i64 %178, i64* %PC, align 8
  store i64 %155, i64* %153, align 8
  %179 = load i64, i64* %RBP, align 8
  %180 = add i64 %179, -112
  %181 = load i64, i64* %PC, align 8
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = add i64 %184, 192
  store i64 %185, i64* %RAX, align 8, !tbaa !2428
  %186 = icmp ugt i64 %184, -193
  %187 = zext i1 %186 to i8
  store i8 %187, i8* %14, align 1, !tbaa !2432
  %188 = trunc i64 %185 to i32
  %189 = and i32 %188, 255
  %190 = tail call i32 @llvm.ctpop.i32(i32 %189) #12
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  %193 = xor i8 %192, 1
  store i8 %193, i8* %21, align 1, !tbaa !2446
  %194 = xor i64 %185, %184
  %195 = lshr i64 %194, 4
  %196 = trunc i64 %195 to i8
  %197 = and i8 %196, 1
  store i8 %197, i8* %27, align 1, !tbaa !2447
  %198 = icmp eq i64 %185, 0
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %30, align 1, !tbaa !2448
  %200 = lshr i64 %185, 63
  %201 = trunc i64 %200 to i8
  store i8 %201, i8* %33, align 1, !tbaa !2449
  %202 = lshr i64 %184, 63
  %203 = xor i64 %200, %202
  %204 = add nuw nsw i64 %203, %200
  %205 = icmp eq i64 %204, 2
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %39, align 1, !tbaa !2450
  %207 = add i64 %181, 14
  store i64 %207, i64* %PC, align 8
  store i64 %185, i64* %183, align 8
  %208 = load i64, i64* %PC, align 8
  %209 = add i64 %208, -91
  store i64 %209, i64* %PC, align 8, !tbaa !2428
  br label %block_401243

block_40127a:                                     ; preds = %block_40126c
  %210 = add i64 %1088, -144
  %211 = add i64 %1100, 52
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i64*
  store i64 0, i64* %212, align 8
  %.pre49 = load i64, i64* %PC, align 8
  br label %block_4012ae

block_4012f4:                                     ; preds = %block_4012bc, %block_4012ca
  %213 = phi i64 [ %892, %block_4012bc ], [ %.pre56, %block_4012ca ]
  %214 = phi i64 [ %997, %block_4012bc ], [ %.pre55, %block_4012ca ]
  %215 = add i64 %214, -112
  %216 = add i64 %213, 4
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %RAX, align 8, !tbaa !2428
  %219 = add i64 %218, 24
  %220 = add i64 %213, 8
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %221, align 4
  %223 = add i32 %222, 1
  %224 = icmp ne i32 %222, -1
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %14, align 1, !tbaa !2432
  %226 = and i32 %223, 255
  %227 = tail call i32 @llvm.ctpop.i32(i32 %226) #12
  %228 = trunc i32 %227 to i8
  %229 = and i8 %228, 1
  %230 = xor i8 %229, 1
  store i8 %230, i8* %21, align 1, !tbaa !2446
  %231 = xor i32 %222, 16
  %232 = xor i32 %231, %223
  %233 = lshr i32 %232, 4
  %234 = trunc i32 %233 to i8
  %235 = and i8 %234, 1
  store i8 %235, i8* %27, align 1, !tbaa !2447
  %236 = icmp eq i32 %223, 0
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %30, align 1, !tbaa !2448
  %238 = lshr i32 %223, 31
  %239 = trunc i32 %238 to i8
  store i8 %239, i8* %33, align 1, !tbaa !2449
  %240 = lshr i32 %222, 31
  %241 = xor i32 %240, 1
  %242 = xor i32 %238, %240
  %243 = add nuw nsw i32 %242, %241
  %244 = icmp eq i32 %243, 2
  %245 = zext i1 %244 to i8
  store i8 %245, i8* %39, align 1, !tbaa !2450
  %.v69 = select i1 %236, i64 14, i64 19
  %246 = add i64 %213, %.v69
  store i64 %246, i64* %PC, align 8, !tbaa !2428
  br i1 %236, label %block_401465, label %block_401307

block_4011f3:                                     ; preds = %block_4011d8
  %247 = add i64 %1062, -8
  %248 = add i64 %1061, 8
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  store i64 -1, i64* %249, align 8
  %250 = load i64, i64* %PC, align 8
  %251 = add i64 %250, 1013
  store i64 %251, i64* %PC, align 8, !tbaa !2428
  br label %block_4015f0

block_4015f0:                                     ; preds = %block_4015e8, %block_4011f3
  %252 = phi i64 [ %.pre54, %block_4015e8 ], [ %251, %block_4011f3 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.11, %block_4015e8 ], [ %1048, %block_4011f3 ]
  %253 = load i64, i64* %RBP, align 8
  %254 = add i64 %253, -8
  %255 = add i64 %252, 4
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i64*
  %257 = load i64, i64* %256, align 8
  store i64 %257, i64* %RAX, align 8, !tbaa !2428
  %258 = load i64, i64* %RSP, align 8
  %259 = add i64 %258, 176
  store i64 %259, i64* %RSP, align 8, !tbaa !2428
  %260 = icmp ugt i64 %258, -177
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %14, align 1, !tbaa !2432
  %262 = trunc i64 %259 to i32
  %263 = and i32 %262, 255
  %264 = tail call i32 @llvm.ctpop.i32(i32 %263) #12
  %265 = trunc i32 %264 to i8
  %266 = and i8 %265, 1
  %267 = xor i8 %266, 1
  store i8 %267, i8* %21, align 1, !tbaa !2446
  %268 = xor i64 %258, 16
  %269 = xor i64 %268, %259
  %270 = lshr i64 %269, 4
  %271 = trunc i64 %270 to i8
  %272 = and i8 %271, 1
  store i8 %272, i8* %27, align 1, !tbaa !2447
  %273 = icmp eq i64 %259, 0
  %274 = zext i1 %273 to i8
  store i8 %274, i8* %30, align 1, !tbaa !2448
  %275 = lshr i64 %259, 63
  %276 = trunc i64 %275 to i8
  store i8 %276, i8* %33, align 1, !tbaa !2449
  %277 = lshr i64 %258, 63
  %278 = xor i64 %275, %277
  %279 = add nuw nsw i64 %278, %275
  %280 = icmp eq i64 %279, 2
  %281 = zext i1 %280 to i8
  store i8 %281, i8* %39, align 1, !tbaa !2450
  %282 = add i64 %252, 12
  store i64 %282, i64* %PC, align 8
  %283 = add i64 %258, 184
  %284 = inttoptr i64 %259 to i64*
  %285 = load i64, i64* %284, align 8
  store i64 %285, i64* %RBP, align 8, !tbaa !2428
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  %286 = add i64 %252, 13
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %283 to i64*
  %288 = load i64, i64* %287, align 8
  store i64 %288, i64* %PC, align 8, !tbaa !2428
  %289 = add i64 %258, 192
  store i64 %289, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_40135d:                                     ; preds = %block_401352
  %290 = add i64 %704, 4
  store i64 %290, i64* %PC, align 8
  %291 = load i64, i64* %692, align 8
  store i64 %291, i64* %RAX, align 8, !tbaa !2428
  %292 = add i64 %291, 8
  %293 = add i64 %704, 8
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i64*
  %295 = load i64, i64* %294, align 8
  store i64 %295, i64* %RAX, align 8, !tbaa !2428
  %296 = add i64 %689, -152
  %297 = add i64 %704, 15
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to i64*
  store i64 %295, i64* %298, align 8
  %299 = load i64, i64* %RBP, align 8
  %300 = add i64 %299, -152
  %301 = load i64, i64* %PC, align 8
  %302 = add i64 %301, 7
  store i64 %302, i64* %PC, align 8
  %303 = inttoptr i64 %300 to i64*
  %304 = load i64, i64* %303, align 8
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = add i64 %304, 100
  %306 = add i64 %301, 11
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %305 to i32*
  %308 = load i32, i32* %307, align 4
  %309 = sext i32 %308 to i64
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = add i64 %299, -120
  %311 = add i64 %301, 15
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %310 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %RCX, align 8, !tbaa !2428
  %314 = add i64 %313, 56
  %315 = add i64 %301, 19
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %314 to i64*
  %317 = load i64, i64* %316, align 8
  %318 = add i64 %317, %309
  store i64 %318, i64* %RAX, align 8, !tbaa !2428
  %319 = icmp ult i64 %318, %309
  %320 = icmp ult i64 %318, %317
  %321 = or i1 %319, %320
  %322 = zext i1 %321 to i8
  store i8 %322, i8* %14, align 1, !tbaa !2432
  %323 = trunc i64 %318 to i32
  %324 = and i32 %323, 255
  %325 = tail call i32 @llvm.ctpop.i32(i32 %324) #12
  %326 = trunc i32 %325 to i8
  %327 = and i8 %326, 1
  %328 = xor i8 %327, 1
  store i8 %328, i8* %21, align 1, !tbaa !2446
  %329 = xor i64 %317, %309
  %330 = xor i64 %329, %318
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  store i8 %333, i8* %27, align 1, !tbaa !2447
  %334 = icmp eq i64 %318, 0
  %335 = zext i1 %334 to i8
  store i8 %335, i8* %30, align 1, !tbaa !2448
  %336 = lshr i64 %318, 63
  %337 = trunc i64 %336 to i8
  store i8 %337, i8* %33, align 1, !tbaa !2449
  %338 = lshr i64 %309, 63
  %339 = lshr i64 %317, 63
  %340 = xor i64 %336, %338
  %341 = xor i64 %336, %339
  %342 = add nuw nsw i64 %340, %341
  %343 = icmp eq i64 %342, 2
  %344 = zext i1 %343 to i8
  store i8 %344, i8* %39, align 1, !tbaa !2450
  %345 = add i64 %299, -56
  %346 = add i64 %301, 23
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %345 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = sub i64 %318, %348
  %350 = icmp ult i64 %318, %348
  %351 = zext i1 %350 to i8
  store i8 %351, i8* %14, align 1, !tbaa !2432
  %352 = trunc i64 %349 to i32
  %353 = and i32 %352, 255
  %354 = tail call i32 @llvm.ctpop.i32(i32 %353) #12
  %355 = trunc i32 %354 to i8
  %356 = and i8 %355, 1
  %357 = xor i8 %356, 1
  store i8 %357, i8* %21, align 1, !tbaa !2446
  %358 = xor i64 %348, %318
  %359 = xor i64 %358, %349
  %360 = lshr i64 %359, 4
  %361 = trunc i64 %360 to i8
  %362 = and i8 %361, 1
  store i8 %362, i8* %27, align 1, !tbaa !2447
  %363 = icmp eq i64 %349, 0
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %30, align 1, !tbaa !2448
  %365 = lshr i64 %349, 63
  %366 = trunc i64 %365 to i8
  store i8 %366, i8* %33, align 1, !tbaa !2449
  %367 = lshr i64 %348, 63
  %368 = xor i64 %367, %336
  %369 = xor i64 %365, %336
  %370 = add nuw nsw i64 %369, %368
  %371 = icmp eq i64 %370, 2
  %372 = zext i1 %371 to i8
  store i8 %372, i8* %39, align 1, !tbaa !2450
  %373 = icmp ne i8 %366, 0
  %374 = xor i1 %373, %371
  %375 = or i1 %363, %374
  %.v71 = select i1 %375, i64 49, i64 29
  %376 = add i64 %301, %.v71
  store i64 %376, i64* %PC, align 8, !tbaa !2428
  %377 = load i64, i64* %RBP, align 8
  br i1 %375, label %block_40139d, label %block_401389

block_40125b:                                     ; preds = %block_401243
  %378 = load i64, i64* %RBP, align 8
  %379 = add i64 %378, -112
  %380 = add i64 %1483, 4
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to i64*
  %382 = load i64, i64* %381, align 8
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = add i64 %382, 88
  %384 = add i64 %1483, 8
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %383 to i32*
  %386 = load i32, i32* %385, align 4
  %387 = add i32 %386, 1
  %388 = icmp ne i32 %386, -1
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %14, align 1, !tbaa !2432
  %390 = and i32 %387, 255
  %391 = tail call i32 @llvm.ctpop.i32(i32 %390) #12
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  %394 = xor i8 %393, 1
  store i8 %394, i8* %21, align 1, !tbaa !2446
  %395 = xor i32 %386, 16
  %396 = xor i32 %395, %387
  %397 = lshr i32 %396, 4
  %398 = trunc i32 %397 to i8
  %399 = and i8 %398, 1
  store i8 %399, i8* %27, align 1, !tbaa !2447
  %400 = icmp eq i32 %387, 0
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %30, align 1, !tbaa !2448
  %402 = lshr i32 %387, 31
  %403 = trunc i32 %402 to i8
  store i8 %403, i8* %33, align 1, !tbaa !2449
  %404 = lshr i32 %386, 31
  %405 = xor i32 %404, 1
  %406 = xor i32 %402, %404
  %407 = add nuw nsw i32 %406, %405
  %408 = icmp eq i32 %407, 2
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %39, align 1, !tbaa !2450
  store i8 %401, i8* %CL, align 1, !tbaa !2453
  %410 = add i64 %378, -161
  %411 = add i64 %1483, 17
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %410 to i8*
  store i8 %401, i8* %412, align 1
  %.pre48 = load i64, i64* %PC, align 8
  br label %block_40126c

block_4014da:                                     ; preds = %block_4014da.preheader, %block_4014eb
  %413 = phi i64 [ %749, %block_4014eb ], [ %1363, %block_4014da.preheader ]
  %414 = phi i64 [ %.pre50, %block_4014eb ], [ %1346, %block_4014da.preheader ]
  %415 = add i64 %414, -128
  %416 = add i64 %413, 4
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i64*
  %418 = load i64, i64* %417, align 8
  store i64 %418, i64* %RAX, align 8, !tbaa !2428
  %419 = add i64 %414, -136
  %420 = add i64 %413, 11
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = sub i64 %418, %422
  %424 = icmp ult i64 %418, %422
  %425 = zext i1 %424 to i8
  store i8 %425, i8* %14, align 1, !tbaa !2432
  %426 = trunc i64 %423 to i32
  %427 = and i32 %426, 255
  %428 = tail call i32 @llvm.ctpop.i32(i32 %427) #12
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  %431 = xor i8 %430, 1
  store i8 %431, i8* %21, align 1, !tbaa !2446
  %432 = xor i64 %422, %418
  %433 = xor i64 %432, %423
  %434 = lshr i64 %433, 4
  %435 = trunc i64 %434 to i8
  %436 = and i8 %435, 1
  store i8 %436, i8* %27, align 1, !tbaa !2447
  %437 = icmp eq i64 %423, 0
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %30, align 1, !tbaa !2448
  %439 = lshr i64 %423, 63
  %440 = trunc i64 %439 to i8
  store i8 %440, i8* %33, align 1, !tbaa !2449
  %441 = lshr i64 %418, 63
  %442 = lshr i64 %422, 63
  %443 = xor i64 %442, %441
  %444 = xor i64 %439, %441
  %445 = add nuw nsw i64 %444, %443
  %446 = icmp eq i64 %445, 2
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %39, align 1, !tbaa !2450
  %.v66 = select i1 %437, i64 57, i64 17
  %448 = add i64 %413, %.v66
  store i64 %448, i64* %PC, align 8, !tbaa !2428
  br i1 %437, label %block_4015a3.loopexit104, label %block_4014eb

block_4013d9:                                     ; preds = %block_4013c4
  store i64 %860, i64* %RDI, align 8, !tbaa !2428
  %449 = add i64 %856, 8
  store i64 %449, i64* %PC, align 8
  %450 = load i64, i64* %819, align 8
  store i64 %450, i64* %RSI, align 8, !tbaa !2428
  %451 = add i64 %978, -152
  %452 = add i64 %856, 15
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %451 to i64*
  %454 = load i64, i64* %453, align 8
  store i64 %454, i64* %RDX, align 8, !tbaa !2428
  %455 = add i64 %978, -160
  %456 = add i64 %856, 22
  store i64 %456, i64* %PC, align 8
  %457 = inttoptr i64 %455 to i64*
  %458 = load i64, i64* %457, align 8
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = add i64 %978, -88
  %460 = add i64 %856, 26
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %459 to i64*
  %462 = load i64, i64* %461, align 8
  store i64 %462, i64* %R8, align 8, !tbaa !2428
  %463 = add i64 %856, 30
  store i64 %463, i64* %PC, align 8
  %464 = load i64, i64* %982, align 8
  store i64 %464, i64* %R9, align 8, !tbaa !2428
  %465 = add i64 %856, -2137
  %466 = add i64 %856, 35
  %467 = load i64, i64* %RSP, align 8, !tbaa !2428
  %468 = add i64 %467, -8
  %469 = inttoptr i64 %468 to i64*
  store i64 %466, i64* %469, align 8
  store i64 %468, i64* %RSP, align 8, !tbaa !2428
  store i64 %465, i64* %PC, align 8, !tbaa !2428
  %470 = tail call %struct.Memory* @sub_400b80_insert_new_arc_renamed_(%struct.State* nonnull %0, i64 %465, %struct.Memory* %MEMORY.11)
  %471 = load i64, i64* %RBP, align 8
  %472 = add i64 %471, -40
  %473 = load i64, i64* %PC, align 8
  %474 = add i64 %473, 4
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %472 to i64*
  %476 = load i64, i64* %475, align 8
  %477 = add i64 %476, 1
  store i64 %477, i64* %RCX, align 8, !tbaa !2428
  %478 = icmp eq i64 %476, -1
  %479 = icmp eq i64 %477, 0
  %480 = or i1 %478, %479
  %481 = zext i1 %480 to i8
  store i8 %481, i8* %14, align 1, !tbaa !2432
  %482 = trunc i64 %477 to i32
  %483 = and i32 %482, 255
  %484 = tail call i32 @llvm.ctpop.i32(i32 %483) #12
  %485 = trunc i32 %484 to i8
  %486 = and i8 %485, 1
  %487 = xor i8 %486, 1
  store i8 %487, i8* %21, align 1, !tbaa !2446
  %488 = xor i64 %477, %476
  %489 = lshr i64 %488, 4
  %490 = trunc i64 %489 to i8
  %491 = and i8 %490, 1
  store i8 %491, i8* %27, align 1, !tbaa !2447
  %492 = zext i1 %479 to i8
  store i8 %492, i8* %30, align 1, !tbaa !2448
  %493 = lshr i64 %477, 63
  %494 = trunc i64 %493 to i8
  store i8 %494, i8* %33, align 1, !tbaa !2449
  %495 = lshr i64 %476, 63
  %496 = xor i64 %493, %495
  %497 = add nuw nsw i64 %496, %493
  %498 = icmp eq i64 %497, 2
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %39, align 1, !tbaa !2450
  %500 = add i64 %473, 12
  store i64 %500, i64* %PC, align 8
  store i64 %477, i64* %475, align 8
  br label %block_401447

block_401465.loopexit:                            ; preds = %block_401352
  br label %block_401465

block_401465:                                     ; preds = %block_401465.loopexit, %block_4012f4
  %501 = phi i64 [ %214, %block_4012f4 ], [ %689, %block_401465.loopexit ]
  %502 = phi i64 [ %246, %block_4012f4 ], [ %704, %block_401465.loopexit ]
  %.sink15 = phi i64 [ 355, %block_4012f4 ], [ 5, %block_401465.loopexit ]
  %503 = add i64 %502, %.sink15
  %504 = add i64 %501, -24
  %505 = add i64 %503, 4
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %504 to i64*
  %507 = load i64, i64* %506, align 8
  %508 = add i64 %507, 1
  store i64 %508, i64* %RAX, align 8, !tbaa !2428
  %509 = icmp eq i64 %507, -1
  %510 = icmp eq i64 %508, 0
  %511 = or i1 %509, %510
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %14, align 1, !tbaa !2432
  %513 = trunc i64 %508 to i32
  %514 = and i32 %513, 255
  %515 = tail call i32 @llvm.ctpop.i32(i32 %514) #12
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  store i8 %518, i8* %21, align 1, !tbaa !2446
  %519 = xor i64 %508, %507
  %520 = lshr i64 %519, 4
  %521 = trunc i64 %520 to i8
  %522 = and i8 %521, 1
  store i8 %522, i8* %27, align 1, !tbaa !2447
  %523 = zext i1 %510 to i8
  store i8 %523, i8* %30, align 1, !tbaa !2448
  %524 = lshr i64 %508, 63
  %525 = trunc i64 %524 to i8
  store i8 %525, i8* %33, align 1, !tbaa !2449
  %526 = lshr i64 %507, 63
  %527 = xor i64 %524, %526
  %528 = add nuw nsw i64 %527, %524
  %529 = icmp eq i64 %528, 2
  %530 = zext i1 %529 to i8
  store i8 %530, i8* %39, align 1, !tbaa !2450
  %531 = add i64 %503, 12
  store i64 %531, i64* %PC, align 8
  store i64 %508, i64* %506, align 8
  %532 = load i64, i64* %RBP, align 8
  %533 = add i64 %532, -112
  %534 = load i64, i64* %PC, align 8
  %535 = add i64 %534, 4
  store i64 %535, i64* %PC, align 8
  %536 = inttoptr i64 %533 to i64*
  %537 = load i64, i64* %536, align 8
  %538 = add i64 %537, 192
  store i64 %538, i64* %RAX, align 8, !tbaa !2428
  %539 = icmp ugt i64 %537, -193
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %14, align 1, !tbaa !2432
  %541 = trunc i64 %538 to i32
  %542 = and i32 %541, 255
  %543 = tail call i32 @llvm.ctpop.i32(i32 %542) #12
  %544 = trunc i32 %543 to i8
  %545 = and i8 %544, 1
  %546 = xor i8 %545, 1
  store i8 %546, i8* %21, align 1, !tbaa !2446
  %547 = xor i64 %538, %537
  %548 = lshr i64 %547, 4
  %549 = trunc i64 %548 to i8
  %550 = and i8 %549, 1
  store i8 %550, i8* %27, align 1, !tbaa !2447
  %551 = icmp eq i64 %538, 0
  %552 = zext i1 %551 to i8
  store i8 %552, i8* %30, align 1, !tbaa !2448
  %553 = lshr i64 %538, 63
  %554 = trunc i64 %553 to i8
  store i8 %554, i8* %33, align 1, !tbaa !2449
  %555 = lshr i64 %537, 63
  %556 = xor i64 %553, %555
  %557 = add nuw nsw i64 %556, %553
  %558 = icmp eq i64 %557, 2
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %39, align 1, !tbaa !2450
  %560 = add i64 %534, 14
  store i64 %560, i64* %PC, align 8
  store i64 %538, i64* %536, align 8
  %561 = load i64, i64* %PC, align 8
  %562 = add i64 %561, -465
  store i64 %562, i64* %PC, align 8, !tbaa !2428
  br label %block_4012ae

block_4015a3.loopexit:                            ; preds = %block_40151d
  br label %block_4015a3

block_4015a3.loopexit104:                         ; preds = %block_4014da
  br label %block_4015a3

block_4015a3:                                     ; preds = %block_4015a3.loopexit104, %block_4015a3.loopexit
  %563 = phi i64 [ %1102, %block_4015a3.loopexit ], [ %414, %block_4015a3.loopexit104 ]
  %564 = phi i64 [ %1136, %block_4015a3.loopexit ], [ %448, %block_4015a3.loopexit104 ]
  %.sink10 = phi i64 [ 5, %block_4015a3.loopexit ], [ 144, %block_4015a3.loopexit104 ]
  %565 = add i64 %564, %.sink10
  %566 = add i64 %563, -40
  %567 = add i64 %565, 4
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %566 to i64*
  %569 = load i64, i64* %568, align 8
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = add i64 %563, -16
  %571 = add i64 %565, 8
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %570 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RCX, align 8, !tbaa !2428
  %574 = add i64 %573, 424
  %575 = add i64 %565, 15
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %574 to i64*
  %577 = load i64, i64* %576, align 8
  %578 = add i64 %577, %569
  store i64 %578, i64* %RAX, align 8, !tbaa !2428
  %579 = icmp ult i64 %578, %569
  %580 = icmp ult i64 %578, %577
  %581 = or i1 %579, %580
  %582 = zext i1 %581 to i8
  store i8 %582, i8* %14, align 1, !tbaa !2432
  %583 = trunc i64 %578 to i32
  %584 = and i32 %583, 255
  %585 = tail call i32 @llvm.ctpop.i32(i32 %584) #12
  %586 = trunc i32 %585 to i8
  %587 = and i8 %586, 1
  %588 = xor i8 %587, 1
  store i8 %588, i8* %21, align 1, !tbaa !2446
  %589 = xor i64 %577, %569
  %590 = xor i64 %589, %578
  %591 = lshr i64 %590, 4
  %592 = trunc i64 %591 to i8
  %593 = and i8 %592, 1
  store i8 %593, i8* %27, align 1, !tbaa !2447
  %594 = icmp eq i64 %578, 0
  %595 = zext i1 %594 to i8
  store i8 %595, i8* %30, align 1, !tbaa !2448
  %596 = lshr i64 %578, 63
  %597 = trunc i64 %596 to i8
  store i8 %597, i8* %33, align 1, !tbaa !2449
  %598 = lshr i64 %569, 63
  %599 = lshr i64 %577, 63
  %600 = xor i64 %596, %598
  %601 = xor i64 %596, %599
  %602 = add nuw nsw i64 %600, %601
  %603 = icmp eq i64 %602, 2
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %39, align 1, !tbaa !2450
  %605 = add i64 %565, 22
  store i64 %605, i64* %PC, align 8
  store i64 %578, i64* %576, align 8
  %606 = load i64, i64* %RBP, align 8
  %607 = add i64 %606, -40
  %608 = load i64, i64* %PC, align 8
  %609 = add i64 %608, 4
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %607 to i64*
  %611 = load i64, i64* %610, align 8
  store i64 %611, i64* %RAX, align 8, !tbaa !2428
  %612 = add i64 %606, -16
  %613 = add i64 %608, 8
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %612 to i64*
  %615 = load i64, i64* %614, align 8
  store i64 %615, i64* %RCX, align 8, !tbaa !2428
  %616 = add i64 %615, 440
  %617 = add i64 %608, 15
  store i64 %617, i64* %PC, align 8
  %618 = inttoptr i64 %616 to i64*
  %619 = load i64, i64* %618, align 8
  %620 = add i64 %619, %611
  store i64 %620, i64* %RAX, align 8, !tbaa !2428
  %621 = icmp ult i64 %620, %611
  %622 = icmp ult i64 %620, %619
  %623 = or i1 %621, %622
  %624 = zext i1 %623 to i8
  store i8 %624, i8* %14, align 1, !tbaa !2432
  %625 = trunc i64 %620 to i32
  %626 = and i32 %625, 255
  %627 = tail call i32 @llvm.ctpop.i32(i32 %626) #12
  %628 = trunc i32 %627 to i8
  %629 = and i8 %628, 1
  %630 = xor i8 %629, 1
  store i8 %630, i8* %21, align 1, !tbaa !2446
  %631 = xor i64 %619, %611
  %632 = xor i64 %631, %620
  %633 = lshr i64 %632, 4
  %634 = trunc i64 %633 to i8
  %635 = and i8 %634, 1
  store i8 %635, i8* %27, align 1, !tbaa !2447
  %636 = icmp eq i64 %620, 0
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %30, align 1, !tbaa !2448
  %638 = lshr i64 %620, 63
  %639 = trunc i64 %638 to i8
  store i8 %639, i8* %33, align 1, !tbaa !2449
  %640 = lshr i64 %611, 63
  %641 = lshr i64 %619, 63
  %642 = xor i64 %638, %640
  %643 = xor i64 %638, %641
  %644 = add nuw nsw i64 %642, %643
  %645 = icmp eq i64 %644, 2
  %646 = zext i1 %645 to i8
  store i8 %646, i8* %39, align 1, !tbaa !2450
  %647 = add i64 %608, 22
  store i64 %647, i64* %PC, align 8
  store i64 %620, i64* %618, align 8
  %648 = load i64, i64* %RBP, align 8
  %649 = add i64 %648, -40
  %650 = load i64, i64* %PC, align 8
  %651 = add i64 %650, 4
  store i64 %651, i64* %PC, align 8
  %652 = inttoptr i64 %649 to i64*
  %653 = load i64, i64* %652, align 8
  store i64 %653, i64* %RAX, align 8, !tbaa !2428
  %654 = add i64 %648, -16
  %655 = add i64 %650, 8
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %654 to i64*
  %657 = load i64, i64* %656, align 8
  store i64 %657, i64* %RCX, align 8, !tbaa !2428
  %658 = add i64 %657, 448
  %659 = add i64 %650, 15
  store i64 %659, i64* %PC, align 8
  %660 = inttoptr i64 %658 to i64*
  %661 = load i64, i64* %660, align 8
  %662 = sub i64 %661, %653
  store i64 %662, i64* %RDX, align 8, !tbaa !2428
  %663 = icmp ult i64 %661, %653
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %14, align 1, !tbaa !2432
  %665 = trunc i64 %662 to i32
  %666 = and i32 %665, 255
  %667 = tail call i32 @llvm.ctpop.i32(i32 %666) #12
  %668 = trunc i32 %667 to i8
  %669 = and i8 %668, 1
  %670 = xor i8 %669, 1
  store i8 %670, i8* %21, align 1, !tbaa !2446
  %671 = xor i64 %653, %661
  %672 = xor i64 %671, %662
  %673 = lshr i64 %672, 4
  %674 = trunc i64 %673 to i8
  %675 = and i8 %674, 1
  store i8 %675, i8* %27, align 1, !tbaa !2447
  %676 = icmp eq i64 %662, 0
  %677 = zext i1 %676 to i8
  store i8 %677, i8* %30, align 1, !tbaa !2448
  %678 = lshr i64 %662, 63
  %679 = trunc i64 %678 to i8
  store i8 %679, i8* %33, align 1, !tbaa !2449
  %680 = lshr i64 %661, 63
  %681 = lshr i64 %653, 63
  %682 = xor i64 %681, %680
  %683 = xor i64 %678, %680
  %684 = add nuw nsw i64 %683, %682
  %685 = icmp eq i64 %684, 2
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %39, align 1, !tbaa !2450
  %687 = add i64 %650, 25
  store i64 %687, i64* %PC, align 8
  store i64 %662, i64* %660, align 8
  %.pre52 = load i64, i64* %RBP, align 8
  %.pre53 = load i64, i64* %PC, align 8
  br label %block_4015e8

block_401352:                                     ; preds = %block_401352.outer, %block_401389
  %688 = phi i64 [ %.pre57, %block_401352.outer ], [ %905, %block_401389 ]
  %689 = load i64, i64* %RBP, align 8
  %690 = add i64 %689, -120
  %691 = add i64 %688, 5
  store i64 %691, i64* %PC, align 8
  %692 = inttoptr i64 %690 to i64*
  %693 = load i64, i64* %692, align 8
  store i8 0, i8* %14, align 1, !tbaa !2432
  %694 = trunc i64 %693 to i32
  %695 = and i32 %694, 255
  %696 = tail call i32 @llvm.ctpop.i32(i32 %695) #12
  %697 = trunc i32 %696 to i8
  %698 = and i8 %697, 1
  %699 = xor i8 %698, 1
  store i8 %699, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  %700 = icmp eq i64 %693, 0
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %30, align 1, !tbaa !2448
  %702 = lshr i64 %693, 63
  %703 = trunc i64 %702 to i8
  store i8 %703, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  %.v70 = select i1 %700, i64 270, i64 11
  %704 = add i64 %688, %.v70
  store i64 %704, i64* %PC, align 8, !tbaa !2428
  br i1 %700, label %block_401465.loopexit, label %block_40135d

block_4014eb:                                     ; preds = %block_4014da
  %705 = add i64 %448, 4
  store i64 %705, i64* %PC, align 8
  %706 = load i64, i64* %417, align 8
  store i64 %706, i64* %RAX, align 8, !tbaa !2428
  %707 = add i64 %706, 48
  %708 = add i64 %448, 12
  store i64 %708, i64* %PC, align 8
  %709 = inttoptr i64 %707 to i64*
  store i64 0, i64* %709, align 8
  %710 = load i64, i64* %RBP, align 8
  %711 = add i64 %710, -128
  %712 = load i64, i64* %PC, align 8
  %713 = add i64 %712, 4
  store i64 %713, i64* %PC, align 8
  %714 = inttoptr i64 %711 to i64*
  %715 = load i64, i64* %714, align 8
  store i64 %715, i64* %RAX, align 8, !tbaa !2428
  %716 = add i64 %715, 24
  %717 = add i64 %712, 11
  store i64 %717, i64* %PC, align 8
  %718 = inttoptr i64 %716 to i32*
  store i32 1, i32* %718, align 4
  %719 = load i64, i64* %RBP, align 8
  %720 = add i64 %719, -128
  %721 = load i64, i64* %PC, align 8
  %722 = add i64 %721, 4
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %720 to i64*
  %724 = load i64, i64* %723, align 8
  %725 = add i64 %724, 64
  store i64 %725, i64* %RAX, align 8, !tbaa !2428
  %726 = icmp ugt i64 %724, -65
  %727 = zext i1 %726 to i8
  store i8 %727, i8* %14, align 1, !tbaa !2432
  %728 = trunc i64 %725 to i32
  %729 = and i32 %728, 255
  %730 = tail call i32 @llvm.ctpop.i32(i32 %729) #12
  %731 = trunc i32 %730 to i8
  %732 = and i8 %731, 1
  %733 = xor i8 %732, 1
  store i8 %733, i8* %21, align 1, !tbaa !2446
  %734 = xor i64 %725, %724
  %735 = lshr i64 %734, 4
  %736 = trunc i64 %735 to i8
  %737 = and i8 %736, 1
  store i8 %737, i8* %27, align 1, !tbaa !2447
  %738 = icmp eq i64 %725, 0
  %739 = zext i1 %738 to i8
  store i8 %739, i8* %30, align 1, !tbaa !2448
  %740 = lshr i64 %725, 63
  %741 = trunc i64 %740 to i8
  store i8 %741, i8* %33, align 1, !tbaa !2449
  %742 = lshr i64 %724, 63
  %743 = xor i64 %740, %742
  %744 = add nuw nsw i64 %743, %740
  %745 = icmp eq i64 %744, 2
  %746 = zext i1 %745 to i8
  store i8 %746, i8* %39, align 1, !tbaa !2450
  %747 = add i64 %721, 12
  store i64 %747, i64* %PC, align 8
  store i64 %725, i64* %723, align 8
  %748 = load i64, i64* %PC, align 8
  %749 = add i64 %748, -52
  store i64 %749, i64* %PC, align 8, !tbaa !2428
  %.pre50 = load i64, i64* %RBP, align 8
  br label %block_4014da

block_40144c:                                     ; preds = %block_40139d, %block_401447
  %750 = phi i64 [ %995, %block_40139d ], [ %1690, %block_401447 ]
  %751 = phi i64 [ %978, %block_40139d ], [ %.pre58, %block_401447 ]
  %752 = add i64 %751, -152
  %753 = add i64 %750, 7
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %752 to i64*
  %755 = load i64, i64* %754, align 8
  store i64 %755, i64* %RAX, align 8, !tbaa !2428
  %756 = add i64 %755, 72
  %757 = add i64 %750, 11
  store i64 %757, i64* %PC, align 8
  %758 = inttoptr i64 %756 to i64*
  %759 = load i64, i64* %758, align 8
  store i64 %759, i64* %RAX, align 8, !tbaa !2428
  %760 = add i64 %751, -120
  %761 = add i64 %750, 15
  store i64 %761, i64* %PC, align 8
  %762 = inttoptr i64 %760 to i64*
  store i64 %759, i64* %762, align 8
  %763 = load i64, i64* %PC, align 8
  %764 = add i64 %763, -265
  store i64 %764, i64* %PC, align 8, !tbaa !2428
  br label %block_401352.outer

block_4012ca:                                     ; preds = %block_4012bc
  %765 = add i64 %997, -144
  %766 = add i64 %892, 7
  store i64 %766, i64* %PC, align 8
  %767 = inttoptr i64 %765 to i64*
  %768 = load i64, i64* %767, align 8
  store i64 %768, i64* %RAX, align 8, !tbaa !2428
  %769 = add i64 %892, 11
  store i64 %769, i64* %PC, align 8
  %770 = load i64, i64* %863, align 8
  store i64 %770, i64* %RCX, align 8, !tbaa !2428
  %771 = add i64 %770, 16
  %772 = add i64 %892, 15
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %771 to i64*
  %774 = load i64, i64* %773, align 8
  store i64 %774, i64* %RCX, align 8, !tbaa !2428
  %775 = add i64 %774, 56
  %776 = add i64 %892, 19
  store i64 %776, i64* %PC, align 8
  %777 = inttoptr i64 %775 to i64*
  %778 = load i64, i64* %777, align 8
  store i64 %778, i64* %RCX, align 8, !tbaa !2428
  %779 = add i64 %778, 16
  %780 = add i64 %892, 23
  store i64 %780, i64* %PC, align 8
  %781 = inttoptr i64 %779 to i64*
  %782 = load i64, i64* %781, align 8
  store i64 %782, i64* %RCX, align 8, !tbaa !2428
  %783 = add i64 %782, 72
  %784 = add i64 %892, 27
  store i64 %784, i64* %PC, align 8
  %785 = inttoptr i64 %783 to i64*
  store i64 %768, i64* %785, align 8
  %786 = load i64, i64* %RBP, align 8
  %787 = add i64 %786, -112
  %788 = load i64, i64* %PC, align 8
  %789 = add i64 %788, 4
  store i64 %789, i64* %PC, align 8
  %790 = inttoptr i64 %787 to i64*
  %791 = load i64, i64* %790, align 8
  %792 = add i64 %791, 64
  store i64 %792, i64* %RAX, align 8, !tbaa !2428
  %793 = icmp ugt i64 %791, -65
  %794 = zext i1 %793 to i8
  store i8 %794, i8* %14, align 1, !tbaa !2432
  %795 = trunc i64 %792 to i32
  %796 = and i32 %795, 255
  %797 = tail call i32 @llvm.ctpop.i32(i32 %796) #12
  %798 = trunc i32 %797 to i8
  %799 = and i8 %798, 1
  %800 = xor i8 %799, 1
  store i8 %800, i8* %21, align 1, !tbaa !2446
  %801 = xor i64 %792, %791
  %802 = lshr i64 %801, 4
  %803 = trunc i64 %802 to i8
  %804 = and i8 %803, 1
  store i8 %804, i8* %27, align 1, !tbaa !2447
  %805 = icmp eq i64 %792, 0
  %806 = zext i1 %805 to i8
  store i8 %806, i8* %30, align 1, !tbaa !2448
  %807 = lshr i64 %792, 63
  %808 = trunc i64 %807 to i8
  store i8 %808, i8* %33, align 1, !tbaa !2449
  %809 = lshr i64 %791, 63
  %810 = xor i64 %807, %809
  %811 = add nuw nsw i64 %810, %807
  %812 = icmp eq i64 %811, 2
  %813 = zext i1 %812 to i8
  store i8 %813, i8* %39, align 1, !tbaa !2450
  %814 = add i64 %786, -144
  %815 = add i64 %788, 15
  store i64 %815, i64* %PC, align 8
  %816 = inttoptr i64 %814 to i64*
  store i64 %792, i64* %816, align 8
  %.pre55 = load i64, i64* %RBP, align 8
  %.pre56 = load i64, i64* %PC, align 8
  br label %block_4012f4

block_4013c4:                                     ; preds = %block_40139d
  %817 = add i64 %978, -40
  %818 = add i64 %995, 4
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %817 to i64*
  %820 = load i64, i64* %819, align 8
  store i64 %820, i64* %RAX, align 8, !tbaa !2428
  %821 = add i64 %978, -16
  %822 = add i64 %995, 8
  store i64 %822, i64* %PC, align 8
  %823 = inttoptr i64 %821 to i64*
  %824 = load i64, i64* %823, align 8
  store i64 %824, i64* %RCX, align 8, !tbaa !2428
  %825 = add i64 %824, 448
  %826 = add i64 %995, 15
  store i64 %826, i64* %PC, align 8
  %827 = inttoptr i64 %825 to i64*
  %828 = load i64, i64* %827, align 8
  %829 = sub i64 %820, %828
  %830 = icmp ult i64 %820, %828
  %831 = zext i1 %830 to i8
  store i8 %831, i8* %14, align 1, !tbaa !2432
  %832 = trunc i64 %829 to i32
  %833 = and i32 %832, 255
  %834 = tail call i32 @llvm.ctpop.i32(i32 %833) #12
  %835 = trunc i32 %834 to i8
  %836 = and i8 %835, 1
  %837 = xor i8 %836, 1
  store i8 %837, i8* %21, align 1, !tbaa !2446
  %838 = xor i64 %828, %820
  %839 = xor i64 %838, %829
  %840 = lshr i64 %839, 4
  %841 = trunc i64 %840 to i8
  %842 = and i8 %841, 1
  store i8 %842, i8* %27, align 1, !tbaa !2447
  %843 = icmp eq i64 %829, 0
  %844 = zext i1 %843 to i8
  store i8 %844, i8* %30, align 1, !tbaa !2448
  %845 = lshr i64 %829, 63
  %846 = trunc i64 %845 to i8
  store i8 %846, i8* %33, align 1, !tbaa !2449
  %847 = lshr i64 %820, 63
  %848 = lshr i64 %828, 63
  %849 = xor i64 %848, %847
  %850 = xor i64 %845, %847
  %851 = add nuw nsw i64 %850, %849
  %852 = icmp eq i64 %851, 2
  %853 = zext i1 %852 to i8
  store i8 %853, i8* %39, align 1, !tbaa !2450
  %854 = icmp ne i8 %846, 0
  %855 = xor i1 %854, %852
  %.v61 = select i1 %855, i64 21, i64 73
  %856 = add i64 %995, %.v61
  %857 = add i64 %978, -128
  %858 = add i64 %856, 4
  store i64 %858, i64* %PC, align 8
  %859 = inttoptr i64 %857 to i64*
  %860 = load i64, i64* %859, align 8
  br i1 %855, label %block_4013d9, label %block_40140d

block_4012bc:                                     ; preds = %block_4012ae
  %861 = add i64 %997, -112
  %862 = add i64 %1033, 4
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %861 to i64*
  %864 = load i64, i64* %863, align 8
  store i64 %864, i64* %RAX, align 8, !tbaa !2428
  %865 = add i64 %864, 88
  %866 = add i64 %1033, 8
  store i64 %866, i64* %PC, align 8
  %867 = inttoptr i64 %865 to i32*
  %868 = load i32, i32* %867, align 4
  %869 = add i32 %868, 1
  %870 = icmp ne i32 %868, -1
  %871 = zext i1 %870 to i8
  store i8 %871, i8* %14, align 1, !tbaa !2432
  %872 = and i32 %869, 255
  %873 = tail call i32 @llvm.ctpop.i32(i32 %872) #12
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = xor i8 %875, 1
  store i8 %876, i8* %21, align 1, !tbaa !2446
  %877 = xor i32 %868, 16
  %878 = xor i32 %877, %869
  %879 = lshr i32 %878, 4
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  store i8 %881, i8* %27, align 1, !tbaa !2447
  %882 = icmp eq i32 %869, 0
  %883 = zext i1 %882 to i8
  store i8 %883, i8* %30, align 1, !tbaa !2448
  %884 = lshr i32 %869, 31
  %885 = trunc i32 %884 to i8
  store i8 %885, i8* %33, align 1, !tbaa !2449
  %886 = lshr i32 %868, 31
  %887 = xor i32 %886, 1
  %888 = xor i32 %884, %886
  %889 = add nuw nsw i32 %888, %887
  %890 = icmp eq i32 %889, 2
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %39, align 1, !tbaa !2450
  %.v68 = select i1 %882, i64 56, i64 14
  %892 = add i64 %1033, %.v68
  store i64 %892, i64* %PC, align 8, !tbaa !2428
  br i1 %882, label %block_4012f4, label %block_4012ca

block_401389:                                     ; preds = %block_40135d
  %893 = add i64 %377, -152
  %894 = add i64 %376, 7
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %893 to i64*
  %896 = load i64, i64* %895, align 8
  store i64 %896, i64* %RAX, align 8, !tbaa !2428
  %897 = add i64 %896, 72
  %898 = add i64 %376, 11
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %897 to i64*
  %900 = load i64, i64* %899, align 8
  store i64 %900, i64* %RAX, align 8, !tbaa !2428
  %901 = add i64 %377, -120
  %902 = add i64 %376, 15
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %901 to i64*
  store i64 %900, i64* %903, align 8
  %904 = load i64, i64* %PC, align 8
  %905 = add i64 %904, -70
  store i64 %905, i64* %PC, align 8, !tbaa !2428
  br label %block_401352

block_40139d:                                     ; preds = %block_40135d
  %906 = add i64 %377, -88
  %907 = add i64 %376, 4
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %906 to i64*
  %909 = load i64, i64* %908, align 8
  store i64 %909, i64* %RAX, align 8, !tbaa !2428
  %910 = add i64 %377, -152
  %911 = add i64 %376, 11
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %910 to i64*
  %913 = load i64, i64* %912, align 8
  store i64 %913, i64* %RCX, align 8, !tbaa !2428
  %914 = add i64 %376, 14
  store i64 %914, i64* %PC, align 8
  %915 = inttoptr i64 %913 to i64*
  %916 = load i64, i64* %915, align 8
  %917 = sub i64 %909, %916
  store i64 %917, i64* %RAX, align 8, !tbaa !2428
  %918 = icmp ult i64 %909, %916
  %919 = zext i1 %918 to i8
  store i8 %919, i8* %14, align 1, !tbaa !2432
  %920 = trunc i64 %917 to i32
  %921 = and i32 %920, 255
  %922 = tail call i32 @llvm.ctpop.i32(i32 %921) #12
  %923 = trunc i32 %922 to i8
  %924 = and i8 %923, 1
  %925 = xor i8 %924, 1
  store i8 %925, i8* %21, align 1, !tbaa !2446
  %926 = xor i64 %916, %909
  %927 = xor i64 %926, %917
  %928 = lshr i64 %927, 4
  %929 = trunc i64 %928 to i8
  %930 = and i8 %929, 1
  store i8 %930, i8* %27, align 1, !tbaa !2447
  %931 = icmp eq i64 %917, 0
  %932 = zext i1 %931 to i8
  store i8 %932, i8* %30, align 1, !tbaa !2448
  %933 = lshr i64 %917, 63
  %934 = trunc i64 %933 to i8
  store i8 %934, i8* %33, align 1, !tbaa !2449
  %935 = lshr i64 %909, 63
  %936 = lshr i64 %916, 63
  %937 = xor i64 %936, %935
  %938 = xor i64 %933, %935
  %939 = add nuw nsw i64 %938, %937
  %940 = icmp eq i64 %939, 2
  %941 = zext i1 %940 to i8
  store i8 %941, i8* %39, align 1, !tbaa !2450
  %942 = add i64 %377, -160
  %943 = add i64 %376, 21
  store i64 %943, i64* %PC, align 8
  %944 = inttoptr i64 %942 to i64*
  %945 = load i64, i64* %944, align 8
  store i64 %945, i64* %RCX, align 8, !tbaa !2428
  %946 = add i64 %376, 24
  store i64 %946, i64* %PC, align 8
  %947 = inttoptr i64 %945 to i64*
  %948 = load i64, i64* %947, align 8
  %949 = add i64 %948, %917
  store i64 %949, i64* %RAX, align 8, !tbaa !2428
  %950 = icmp ult i64 %949, %917
  %951 = icmp ult i64 %949, %948
  %952 = or i1 %950, %951
  %953 = zext i1 %952 to i8
  store i8 %953, i8* %14, align 1, !tbaa !2432
  %954 = trunc i64 %949 to i32
  %955 = and i32 %954, 255
  %956 = tail call i32 @llvm.ctpop.i32(i32 %955) #12
  %957 = trunc i32 %956 to i8
  %958 = and i8 %957, 1
  %959 = xor i8 %958, 1
  store i8 %959, i8* %21, align 1, !tbaa !2446
  %960 = xor i64 %948, %917
  %961 = xor i64 %960, %949
  %962 = lshr i64 %961, 4
  %963 = trunc i64 %962 to i8
  %964 = and i8 %963, 1
  store i8 %964, i8* %27, align 1, !tbaa !2447
  %965 = icmp eq i64 %949, 0
  %966 = zext i1 %965 to i8
  store i8 %966, i8* %30, align 1, !tbaa !2448
  %967 = lshr i64 %949, 63
  %968 = trunc i64 %967 to i8
  store i8 %968, i8* %33, align 1, !tbaa !2449
  %969 = lshr i64 %948, 63
  %970 = xor i64 %967, %933
  %971 = xor i64 %967, %969
  %972 = add nuw nsw i64 %970, %971
  %973 = icmp eq i64 %972, 2
  %974 = zext i1 %973 to i8
  store i8 %974, i8* %39, align 1, !tbaa !2450
  %975 = add i64 %377, -96
  %976 = add i64 %376, 28
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %975 to i64*
  store i64 %949, i64* %977, align 8
  %978 = load i64, i64* %RBP, align 8
  %979 = add i64 %978, -96
  %980 = load i64, i64* %PC, align 8
  %981 = add i64 %980, 5
  store i64 %981, i64* %PC, align 8
  %982 = inttoptr i64 %979 to i64*
  %983 = load i64, i64* %982, align 8
  store i8 0, i8* %14, align 1, !tbaa !2432
  %984 = trunc i64 %983 to i32
  %985 = and i32 %984, 255
  %986 = tail call i32 @llvm.ctpop.i32(i32 %985) #12
  %987 = trunc i32 %986 to i8
  %988 = and i8 %987, 1
  %989 = xor i8 %988, 1
  store i8 %989, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  %990 = icmp eq i64 %983, 0
  %991 = zext i1 %990 to i8
  store i8 %991, i8* %30, align 1, !tbaa !2448
  %992 = lshr i64 %983, 63
  %993 = trunc i64 %992 to i8
  store i8 %993, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  %994 = icmp ne i8 %993, 0
  %.v = select i1 %994, i64 6, i64 142
  %995 = add i64 %981, %.v
  store i64 %995, i64* %PC, align 8, !tbaa !2428
  br i1 %994, label %block_4013c4, label %block_40144c

block_4012ae:                                     ; preds = %block_401465, %block_40127a
  %996 = phi i64 [ %.pre49, %block_40127a ], [ %562, %block_401465 ]
  %997 = load i64, i64* %RBP, align 8
  %998 = add i64 %997, -24
  %999 = add i64 %996, 4
  store i64 %999, i64* %PC, align 8
  %1000 = inttoptr i64 %998 to i64*
  %1001 = load i64, i64* %1000, align 8
  store i64 %1001, i64* %RAX, align 8, !tbaa !2428
  %1002 = add i64 %997, -32
  %1003 = add i64 %996, 8
  store i64 %1003, i64* %PC, align 8
  %1004 = inttoptr i64 %1002 to i64*
  %1005 = load i64, i64* %1004, align 8
  %1006 = sub i64 %1001, %1005
  %1007 = icmp ult i64 %1001, %1005
  %1008 = zext i1 %1007 to i8
  store i8 %1008, i8* %14, align 1, !tbaa !2432
  %1009 = trunc i64 %1006 to i32
  %1010 = and i32 %1009, 255
  %1011 = tail call i32 @llvm.ctpop.i32(i32 %1010) #12
  %1012 = trunc i32 %1011 to i8
  %1013 = and i8 %1012, 1
  %1014 = xor i8 %1013, 1
  store i8 %1014, i8* %21, align 1, !tbaa !2446
  %1015 = xor i64 %1005, %1001
  %1016 = xor i64 %1015, %1006
  %1017 = lshr i64 %1016, 4
  %1018 = trunc i64 %1017 to i8
  %1019 = and i8 %1018, 1
  store i8 %1019, i8* %27, align 1, !tbaa !2447
  %1020 = icmp eq i64 %1006, 0
  %1021 = zext i1 %1020 to i8
  store i8 %1021, i8* %30, align 1, !tbaa !2448
  %1022 = lshr i64 %1006, 63
  %1023 = trunc i64 %1022 to i8
  store i8 %1023, i8* %33, align 1, !tbaa !2449
  %1024 = lshr i64 %1001, 63
  %1025 = lshr i64 %1005, 63
  %1026 = xor i64 %1025, %1024
  %1027 = xor i64 %1022, %1024
  %1028 = add nuw nsw i64 %1027, %1026
  %1029 = icmp eq i64 %1028, 2
  %1030 = zext i1 %1029 to i8
  store i8 %1030, i8* %39, align 1, !tbaa !2450
  %1031 = icmp ne i8 %1023, 0
  %1032 = xor i1 %1031, %1029
  %.v63 = select i1 %1032, i64 14, i64 470
  %1033 = add i64 %996, %.v63
  store i64 %1033, i64* %PC, align 8, !tbaa !2428
  br i1 %1032, label %block_4012bc, label %block_401484

block_4011d8:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %1034 = add i64 %1748, -48
  %1035 = add i64 %1818, 8
  store i64 %1035, i64* %PC, align 8
  %1036 = inttoptr i64 %1034 to i64*
  store i64 1, i64* %1036, align 8
  %1037 = load i64, i64* %RBP, align 8
  %1038 = add i64 %1037, -16
  %1039 = load i64, i64* %PC, align 8
  %1040 = add i64 %1039, 4
  store i64 %1040, i64* %PC, align 8
  %1041 = inttoptr i64 %1038 to i64*
  %1042 = load i64, i64* %1041, align 8
  store i64 %1042, i64* %RDI, align 8, !tbaa !2428
  %1043 = add i64 %1039, -2032
  %1044 = add i64 %1039, 9
  %1045 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1046 = add i64 %1045, -8
  %1047 = inttoptr i64 %1046 to i64*
  store i64 %1044, i64* %1047, align 8
  store i64 %1046, i64* %RSP, align 8, !tbaa !2428
  store i64 %1043, i64* %PC, align 8, !tbaa !2428
  %1048 = tail call %struct.Memory* @sub_4009f0_resize_prob_renamed_(%struct.State* nonnull %0, i64 %1043, %struct.Memory* %1749)
  %1049 = load i64, i64* %RAX, align 8
  %1050 = load i64, i64* %PC, align 8
  store i8 0, i8* %14, align 1, !tbaa !2432
  %1051 = trunc i64 %1049 to i32
  %1052 = and i32 %1051, 255
  %1053 = tail call i32 @llvm.ctpop.i32(i32 %1052) #12
  %1054 = trunc i32 %1053 to i8
  %1055 = and i8 %1054, 1
  %1056 = xor i8 %1055, 1
  store i8 %1056, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  %1057 = icmp eq i64 %1049, 0
  %1058 = zext i1 %1057 to i8
  store i8 %1058, i8* %30, align 1, !tbaa !2448
  %1059 = lshr i64 %1049, 63
  %1060 = trunc i64 %1059 to i8
  store i8 %1060, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  %.v75 = select i1 %1057, i64 23, i64 10
  %1061 = add i64 %1050, %.v75
  store i64 %1061, i64* %PC, align 8, !tbaa !2428
  %1062 = load i64, i64* %RBP, align 8
  br i1 %1057, label %block_401200, label %block_4011f3

block_40141f:                                     ; preds = %block_40140d
  %1063 = add i64 %1562, 4
  store i64 %1063, i64* %PC, align 8
  %1064 = load i64, i64* %823, align 8
  store i64 %1064, i64* %RDI, align 8, !tbaa !2428
  %1065 = add i64 %1562, 8
  store i64 %1065, i64* %PC, align 8
  %1066 = load i64, i64* %859, align 8
  store i64 %1066, i64* %RSI, align 8, !tbaa !2428
  %1067 = add i64 %978, -152
  %1068 = add i64 %1562, 15
  store i64 %1068, i64* %PC, align 8
  %1069 = inttoptr i64 %1067 to i64*
  %1070 = load i64, i64* %1069, align 8
  store i64 %1070, i64* %RDX, align 8, !tbaa !2428
  %1071 = add i64 %978, -160
  %1072 = add i64 %1562, 22
  store i64 %1072, i64* %PC, align 8
  %1073 = inttoptr i64 %1071 to i64*
  %1074 = load i64, i64* %1073, align 8
  store i64 %1074, i64* %RCX, align 8, !tbaa !2428
  %1075 = add i64 %978, -88
  %1076 = add i64 %1562, 26
  store i64 %1076, i64* %PC, align 8
  %1077 = inttoptr i64 %1075 to i64*
  %1078 = load i64, i64* %1077, align 8
  store i64 %1078, i64* %R8, align 8, !tbaa !2428
  %1079 = add i64 %1562, 30
  store i64 %1079, i64* %PC, align 8
  %1080 = load i64, i64* %982, align 8
  store i64 %1080, i64* %R9, align 8, !tbaa !2428
  %1081 = add i64 %1562, -1487
  %1082 = add i64 %1562, 35
  %1083 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1084 = add i64 %1083, -8
  %1085 = inttoptr i64 %1084 to i64*
  store i64 %1082, i64* %1085, align 8
  store i64 %1084, i64* %RSP, align 8, !tbaa !2428
  store i64 %1081, i64* %PC, align 8, !tbaa !2428
  %1086 = tail call %struct.Memory* @sub_400e50_replace_weaker_arc_renamed_(%struct.State* nonnull %0, i64 %1081, %struct.Memory* %MEMORY.11)
  br label %block_401447

block_40126c:                                     ; preds = %block_401243, %block_40125b
  %1087 = phi i64 [ %1476, %block_401243 ], [ %.pre48, %block_40125b ]
  %1088 = load i64, i64* %RBP, align 8
  %1089 = add i64 %1088, -161
  %1090 = add i64 %1087, 6
  store i64 %1090, i64* %PC, align 8
  %1091 = inttoptr i64 %1089 to i8*
  %1092 = load i8, i8* %1091, align 1
  store i8 %1092, i8* %AL, align 1, !tbaa !2453
  %1093 = and i8 %1092, 1
  store i8 0, i8* %14, align 1, !tbaa !2432
  %1094 = zext i8 %1093 to i32
  %1095 = tail call i32 @llvm.ctpop.i32(i32 %1094) #12
  %1096 = trunc i32 %1095 to i8
  %1097 = xor i8 %1096, 1
  store i8 %1097, i8* %21, align 1, !tbaa !2446
  %1098 = xor i8 %1093, 1
  store i8 %1098, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  %1099 = icmp eq i8 %1098, 0
  %.v60 = select i1 %1099, i64 19, i64 14
  %1100 = add i64 %1087, %.v60
  store i64 %1100, i64* %PC, align 8, !tbaa !2428
  br i1 %1099, label %block_40127f, label %block_40127a

block_40151d:                                     ; preds = %block_40151d.preheader, %block_40152e
  %1101 = phi i64 [ %1264, %block_40152e ], [ %1363, %block_40151d.preheader ]
  %1102 = phi i64 [ %.pre51, %block_40152e ], [ %1346, %block_40151d.preheader ]
  %1103 = add i64 %1102, -128
  %1104 = add i64 %1101, 4
  store i64 %1104, i64* %PC, align 8
  %1105 = inttoptr i64 %1103 to i64*
  %1106 = load i64, i64* %1105, align 8
  store i64 %1106, i64* %RAX, align 8, !tbaa !2428
  %1107 = add i64 %1102, -136
  %1108 = add i64 %1101, 11
  store i64 %1108, i64* %PC, align 8
  %1109 = inttoptr i64 %1107 to i64*
  %1110 = load i64, i64* %1109, align 8
  %1111 = sub i64 %1106, %1110
  %1112 = icmp ult i64 %1106, %1110
  %1113 = zext i1 %1112 to i8
  store i8 %1113, i8* %14, align 1, !tbaa !2432
  %1114 = trunc i64 %1111 to i32
  %1115 = and i32 %1114, 255
  %1116 = tail call i32 @llvm.ctpop.i32(i32 %1115) #12
  %1117 = trunc i32 %1116 to i8
  %1118 = and i8 %1117, 1
  %1119 = xor i8 %1118, 1
  store i8 %1119, i8* %21, align 1, !tbaa !2446
  %1120 = xor i64 %1110, %1106
  %1121 = xor i64 %1120, %1111
  %1122 = lshr i64 %1121, 4
  %1123 = trunc i64 %1122 to i8
  %1124 = and i8 %1123, 1
  store i8 %1124, i8* %27, align 1, !tbaa !2447
  %1125 = icmp eq i64 %1111, 0
  %1126 = zext i1 %1125 to i8
  store i8 %1126, i8* %30, align 1, !tbaa !2448
  %1127 = lshr i64 %1111, 63
  %1128 = trunc i64 %1127 to i8
  store i8 %1128, i8* %33, align 1, !tbaa !2449
  %1129 = lshr i64 %1106, 63
  %1130 = lshr i64 %1110, 63
  %1131 = xor i64 %1130, %1129
  %1132 = xor i64 %1127, %1129
  %1133 = add nuw nsw i64 %1132, %1131
  %1134 = icmp eq i64 %1133, 2
  %1135 = zext i1 %1134 to i8
  store i8 %1135, i8* %39, align 1, !tbaa !2450
  %.v67 = select i1 %1125, i64 129, i64 17
  %1136 = add i64 %1101, %.v67
  store i64 %1136, i64* %PC, align 8, !tbaa !2428
  br i1 %1125, label %block_4015a3.loopexit, label %block_40152e

block_401484:                                     ; preds = %block_4012ae
  %1137 = add i64 %997, -40
  %1138 = add i64 %1033, 5
  store i64 %1138, i64* %PC, align 8
  %1139 = inttoptr i64 %1137 to i64*
  %1140 = load i64, i64* %1139, align 8
  store i8 0, i8* %14, align 1, !tbaa !2432
  %1141 = trunc i64 %1140 to i32
  %1142 = and i32 %1141, 255
  %1143 = tail call i32 @llvm.ctpop.i32(i32 %1142) #12
  %1144 = trunc i32 %1143 to i8
  %1145 = and i8 %1144, 1
  %1146 = xor i8 %1145, 1
  store i8 %1146, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  %1147 = icmp eq i64 %1140, 0
  %1148 = zext i1 %1147 to i8
  store i8 %1148, i8* %30, align 1, !tbaa !2448
  %1149 = lshr i64 %1140, 63
  %1150 = trunc i64 %1149 to i8
  store i8 %1150, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  %.v64 = select i1 %1147, i64 356, i64 11
  %1151 = add i64 %1033, %.v64
  store i64 %1151, i64* %PC, align 8, !tbaa !2428
  br i1 %1147, label %block_4015e8, label %block_40148f

block_40152e:                                     ; preds = %block_40151d
  %1152 = add i64 %1136, 4
  store i64 %1152, i64* %PC, align 8
  %1153 = load i64, i64* %1105, align 8
  store i64 %1153, i64* %RAX, align 8, !tbaa !2428
  %1154 = add i64 %1153, 48
  %1155 = add i64 %1136, 12
  store i64 %1155, i64* %PC, align 8
  %1156 = inttoptr i64 %1154 to i64*
  store i64 0, i64* %1156, align 8
  %1157 = load i64, i64* %RBP, align 8
  %1158 = add i64 %1157, -128
  %1159 = load i64, i64* %PC, align 8
  %1160 = add i64 %1159, 4
  store i64 %1160, i64* %PC, align 8
  %1161 = inttoptr i64 %1158 to i64*
  %1162 = load i64, i64* %1161, align 8
  store i64 %1162, i64* %RAX, align 8, !tbaa !2428
  %1163 = add i64 %1162, 24
  %1164 = add i64 %1159, 11
  store i64 %1164, i64* %PC, align 8
  %1165 = inttoptr i64 %1163 to i32*
  store i32 1, i32* %1165, align 4
  %1166 = load i64, i64* %RBP, align 8
  %1167 = add i64 %1166, -128
  %1168 = load i64, i64* %PC, align 8
  %1169 = add i64 %1168, 4
  store i64 %1169, i64* %PC, align 8
  %1170 = inttoptr i64 %1167 to i64*
  %1171 = load i64, i64* %1170, align 8
  store i64 %1171, i64* %RAX, align 8, !tbaa !2428
  %1172 = add i64 %1171, 8
  %1173 = add i64 %1168, 8
  store i64 %1173, i64* %PC, align 8
  %1174 = inttoptr i64 %1172 to i64*
  %1175 = load i64, i64* %1174, align 8
  store i64 %1175, i64* %RAX, align 8, !tbaa !2428
  %1176 = add i64 %1175, 56
  %1177 = add i64 %1168, 12
  store i64 %1177, i64* %PC, align 8
  %1178 = inttoptr i64 %1176 to i64*
  %1179 = load i64, i64* %1178, align 8
  store i64 %1179, i64* %RAX, align 8, !tbaa !2428
  %1180 = add i64 %1168, 16
  store i64 %1180, i64* %PC, align 8
  %1181 = load i64, i64* %1170, align 8
  store i64 %1181, i64* %RCX, align 8, !tbaa !2428
  %1182 = add i64 %1181, 32
  %1183 = add i64 %1168, 20
  store i64 %1183, i64* %PC, align 8
  %1184 = inttoptr i64 %1182 to i64*
  store i64 %1179, i64* %1184, align 8
  %1185 = load i64, i64* %RBP, align 8
  %1186 = add i64 %1185, -128
  %1187 = load i64, i64* %PC, align 8
  %1188 = add i64 %1187, 4
  store i64 %1188, i64* %PC, align 8
  %1189 = inttoptr i64 %1186 to i64*
  %1190 = load i64, i64* %1189, align 8
  store i64 %1190, i64* %RAX, align 8, !tbaa !2428
  %1191 = add i64 %1187, 8
  store i64 %1191, i64* %PC, align 8
  %1192 = load i64, i64* %1189, align 8
  store i64 %1192, i64* %RCX, align 8, !tbaa !2428
  %1193 = add i64 %1192, 8
  %1194 = add i64 %1187, 12
  store i64 %1194, i64* %PC, align 8
  %1195 = inttoptr i64 %1193 to i64*
  %1196 = load i64, i64* %1195, align 8
  store i64 %1196, i64* %RCX, align 8, !tbaa !2428
  %1197 = add i64 %1196, 56
  %1198 = add i64 %1187, 16
  store i64 %1198, i64* %PC, align 8
  %1199 = inttoptr i64 %1197 to i64*
  store i64 %1190, i64* %1199, align 8
  %1200 = load i64, i64* %RBP, align 8
  %1201 = add i64 %1200, -128
  %1202 = load i64, i64* %PC, align 8
  %1203 = add i64 %1202, 4
  store i64 %1203, i64* %PC, align 8
  %1204 = inttoptr i64 %1201 to i64*
  %1205 = load i64, i64* %1204, align 8
  store i64 %1205, i64* %RAX, align 8, !tbaa !2428
  %1206 = add i64 %1205, 16
  %1207 = add i64 %1202, 8
  store i64 %1207, i64* %PC, align 8
  %1208 = inttoptr i64 %1206 to i64*
  %1209 = load i64, i64* %1208, align 8
  store i64 %1209, i64* %RAX, align 8, !tbaa !2428
  %1210 = add i64 %1209, 64
  %1211 = add i64 %1202, 12
  store i64 %1211, i64* %PC, align 8
  %1212 = inttoptr i64 %1210 to i64*
  %1213 = load i64, i64* %1212, align 8
  store i64 %1213, i64* %RAX, align 8, !tbaa !2428
  %1214 = add i64 %1202, 16
  store i64 %1214, i64* %PC, align 8
  %1215 = load i64, i64* %1204, align 8
  store i64 %1215, i64* %RCX, align 8, !tbaa !2428
  %1216 = add i64 %1215, 40
  %1217 = add i64 %1202, 20
  store i64 %1217, i64* %PC, align 8
  %1218 = inttoptr i64 %1216 to i64*
  store i64 %1213, i64* %1218, align 8
  %1219 = load i64, i64* %RBP, align 8
  %1220 = add i64 %1219, -128
  %1221 = load i64, i64* %PC, align 8
  %1222 = add i64 %1221, 4
  store i64 %1222, i64* %PC, align 8
  %1223 = inttoptr i64 %1220 to i64*
  %1224 = load i64, i64* %1223, align 8
  store i64 %1224, i64* %RAX, align 8, !tbaa !2428
  %1225 = add i64 %1221, 8
  store i64 %1225, i64* %PC, align 8
  %1226 = load i64, i64* %1223, align 8
  store i64 %1226, i64* %RCX, align 8, !tbaa !2428
  %1227 = add i64 %1226, 16
  %1228 = add i64 %1221, 12
  store i64 %1228, i64* %PC, align 8
  %1229 = inttoptr i64 %1227 to i64*
  %1230 = load i64, i64* %1229, align 8
  store i64 %1230, i64* %RCX, align 8, !tbaa !2428
  %1231 = add i64 %1230, 64
  %1232 = add i64 %1221, 16
  store i64 %1232, i64* %PC, align 8
  %1233 = inttoptr i64 %1231 to i64*
  store i64 %1224, i64* %1233, align 8
  %1234 = load i64, i64* %RBP, align 8
  %1235 = add i64 %1234, -128
  %1236 = load i64, i64* %PC, align 8
  %1237 = add i64 %1236, 4
  store i64 %1237, i64* %PC, align 8
  %1238 = inttoptr i64 %1235 to i64*
  %1239 = load i64, i64* %1238, align 8
  %1240 = add i64 %1239, 64
  store i64 %1240, i64* %RAX, align 8, !tbaa !2428
  %1241 = icmp ugt i64 %1239, -65
  %1242 = zext i1 %1241 to i8
  store i8 %1242, i8* %14, align 1, !tbaa !2432
  %1243 = trunc i64 %1240 to i32
  %1244 = and i32 %1243, 255
  %1245 = tail call i32 @llvm.ctpop.i32(i32 %1244) #12
  %1246 = trunc i32 %1245 to i8
  %1247 = and i8 %1246, 1
  %1248 = xor i8 %1247, 1
  store i8 %1248, i8* %21, align 1, !tbaa !2446
  %1249 = xor i64 %1240, %1239
  %1250 = lshr i64 %1249, 4
  %1251 = trunc i64 %1250 to i8
  %1252 = and i8 %1251, 1
  store i8 %1252, i8* %27, align 1, !tbaa !2447
  %1253 = icmp eq i64 %1240, 0
  %1254 = zext i1 %1253 to i8
  store i8 %1254, i8* %30, align 1, !tbaa !2448
  %1255 = lshr i64 %1240, 63
  %1256 = trunc i64 %1255 to i8
  store i8 %1256, i8* %33, align 1, !tbaa !2449
  %1257 = lshr i64 %1239, 63
  %1258 = xor i64 %1255, %1257
  %1259 = add nuw nsw i64 %1258, %1255
  %1260 = icmp eq i64 %1259, 2
  %1261 = zext i1 %1260 to i8
  store i8 %1261, i8* %39, align 1, !tbaa !2450
  %1262 = add i64 %1236, 12
  store i64 %1262, i64* %PC, align 8
  store i64 %1240, i64* %1238, align 8
  %1263 = load i64, i64* %PC, align 8
  %1264 = add i64 %1263, -124
  store i64 %1264, i64* %PC, align 8, !tbaa !2428
  %.pre51 = load i64, i64* %RBP, align 8
  br label %block_40151d

block_40148f:                                     ; preds = %block_401484
  %1265 = add i64 %997, -16
  %1266 = add i64 %1151, 4
  store i64 %1266, i64* %PC, align 8
  %1267 = inttoptr i64 %1265 to i64*
  %1268 = load i64, i64* %1267, align 8
  store i64 %1268, i64* %RAX, align 8, !tbaa !2428
  %1269 = add i64 %1268, 576
  %1270 = add i64 %1151, 11
  store i64 %1270, i64* %PC, align 8
  %1271 = inttoptr i64 %1269 to i64*
  %1272 = load i64, i64* %1271, align 8
  store i64 %1272, i64* %RAX, align 8, !tbaa !2428
  %1273 = add i64 %997, -128
  %1274 = add i64 %1151, 15
  store i64 %1274, i64* %PC, align 8
  %1275 = inttoptr i64 %1273 to i64*
  store i64 %1272, i64* %1275, align 8
  %1276 = load i64, i64* %RBP, align 8
  %1277 = add i64 %1276, -40
  %1278 = load i64, i64* %PC, align 8
  %1279 = add i64 %1278, 4
  store i64 %1279, i64* %PC, align 8
  %1280 = inttoptr i64 %1277 to i64*
  %1281 = load i64, i64* %1280, align 8
  store i64 %1281, i64* %RAX, align 8, !tbaa !2428
  %1282 = add i64 %1276, -16
  %1283 = add i64 %1278, 8
  store i64 %1283, i64* %PC, align 8
  %1284 = inttoptr i64 %1282 to i64*
  %1285 = load i64, i64* %1284, align 8
  store i64 %1285, i64* %RCX, align 8, !tbaa !2428
  %1286 = shl i64 %1281, 6
  store i64 %1286, i64* %RAX, align 8, !tbaa !2428
  %1287 = lshr i64 %1281, 58
  %1288 = trunc i64 %1287 to i8
  %1289 = and i8 %1288, 1
  store i8 %1289, i8* %14, align 1, !tbaa !2453
  %1290 = trunc i64 %1286 to i32
  %1291 = and i32 %1290, 192
  %1292 = tail call i32 @llvm.ctpop.i32(i32 %1291) #12
  %1293 = trunc i32 %1292 to i8
  %1294 = and i8 %1293, 1
  %1295 = xor i8 %1294, 1
  store i8 %1295, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %27, align 1, !tbaa !2453
  %1296 = icmp eq i64 %1286, 0
  %1297 = zext i1 %1296 to i8
  store i8 %1297, i8* %30, align 1, !tbaa !2453
  %1298 = lshr i64 %1281, 57
  %1299 = trunc i64 %1298 to i8
  %1300 = and i8 %1299, 1
  store i8 %1300, i8* %33, align 1, !tbaa !2453
  store i8 0, i8* %39, align 1, !tbaa !2453
  %1301 = add i64 %1285, 576
  %1302 = add i64 %1278, 19
  store i64 %1302, i64* %PC, align 8
  %1303 = inttoptr i64 %1301 to i64*
  %1304 = load i64, i64* %1303, align 8
  %1305 = add i64 %1304, %1286
  store i64 %1305, i64* %RAX, align 8, !tbaa !2428
  %1306 = icmp ult i64 %1305, %1286
  %1307 = icmp ult i64 %1305, %1304
  %1308 = or i1 %1306, %1307
  %1309 = zext i1 %1308 to i8
  store i8 %1309, i8* %14, align 1, !tbaa !2432
  %1310 = trunc i64 %1305 to i32
  %1311 = and i32 %1310, 255
  %1312 = tail call i32 @llvm.ctpop.i32(i32 %1311) #12
  %1313 = trunc i32 %1312 to i8
  %1314 = and i8 %1313, 1
  %1315 = xor i8 %1314, 1
  store i8 %1315, i8* %21, align 1, !tbaa !2446
  %1316 = xor i64 %1304, %1305
  %1317 = lshr i64 %1316, 4
  %1318 = trunc i64 %1317 to i8
  %1319 = and i8 %1318, 1
  store i8 %1319, i8* %27, align 1, !tbaa !2447
  %1320 = icmp eq i64 %1305, 0
  %1321 = zext i1 %1320 to i8
  store i8 %1321, i8* %30, align 1, !tbaa !2448
  %1322 = lshr i64 %1305, 63
  %1323 = trunc i64 %1322 to i8
  store i8 %1323, i8* %33, align 1, !tbaa !2449
  %1324 = lshr i64 %1281, 57
  %1325 = and i64 %1324, 1
  %1326 = lshr i64 %1304, 63
  %1327 = xor i64 %1322, %1325
  %1328 = xor i64 %1322, %1326
  %1329 = add nuw nsw i64 %1327, %1328
  %1330 = icmp eq i64 %1329, 2
  %1331 = zext i1 %1330 to i8
  store i8 %1331, i8* %39, align 1, !tbaa !2450
  %1332 = add i64 %1278, 26
  store i64 %1332, i64* %PC, align 8
  store i64 %1305, i64* %1303, align 8
  %1333 = load i64, i64* %RBP, align 8
  %1334 = add i64 %1333, -16
  %1335 = load i64, i64* %PC, align 8
  %1336 = add i64 %1335, 4
  store i64 %1336, i64* %PC, align 8
  %1337 = inttoptr i64 %1334 to i64*
  %1338 = load i64, i64* %1337, align 8
  store i64 %1338, i64* %RAX, align 8, !tbaa !2428
  %1339 = add i64 %1338, 576
  %1340 = add i64 %1335, 11
  store i64 %1340, i64* %PC, align 8
  %1341 = inttoptr i64 %1339 to i64*
  %1342 = load i64, i64* %1341, align 8
  store i64 %1342, i64* %RAX, align 8, !tbaa !2428
  %1343 = add i64 %1333, -136
  %1344 = add i64 %1335, 18
  store i64 %1344, i64* %PC, align 8
  %1345 = inttoptr i64 %1343 to i64*
  store i64 %1342, i64* %1345, align 8
  %1346 = load i64, i64* %RBP, align 8
  %1347 = add i64 %1346, -48
  %1348 = load i64, i64* %PC, align 8
  %1349 = add i64 %1348, 5
  store i64 %1349, i64* %PC, align 8
  %1350 = inttoptr i64 %1347 to i64*
  %1351 = load i64, i64* %1350, align 8
  store i8 0, i8* %14, align 1, !tbaa !2432
  %1352 = trunc i64 %1351 to i32
  %1353 = and i32 %1352, 255
  %1354 = tail call i32 @llvm.ctpop.i32(i32 %1353) #12
  %1355 = trunc i32 %1354 to i8
  %1356 = and i8 %1355, 1
  %1357 = xor i8 %1356, 1
  store i8 %1357, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  %1358 = icmp eq i64 %1351, 0
  %1359 = zext i1 %1358 to i8
  store i8 %1359, i8* %30, align 1, !tbaa !2448
  %1360 = lshr i64 %1351, 63
  %1361 = trunc i64 %1360 to i8
  store i8 %1361, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  %.v65 = select i1 %1358, i64 78, i64 11
  %1362 = add i64 %1348, %.v65
  %1363 = add i64 %1362, 5
  store i64 %1363, i64* %PC, align 8, !tbaa !2428
  br i1 %1358, label %block_40151d.preheader, label %block_4014da.preheader

block_4014da.preheader:                           ; preds = %block_40148f
  br label %block_4014da

block_40151d.preheader:                           ; preds = %block_40148f
  br label %block_40151d

block_40116f:                                     ; preds = %block_401110
  %1364 = add i64 %150, 4
  store i64 %1364, i64* %PC, align 8
  %1365 = load i64, i64* %119, align 8
  store i64 %1365, i64* %RAX, align 8, !tbaa !2428
  %1366 = add i64 %1365, 424
  %1367 = add i64 %150, 11
  store i64 %1367, i64* %PC, align 8
  %1368 = inttoptr i64 %1366 to i64*
  %1369 = load i64, i64* %1368, align 8
  store i64 %1369, i64* %RAX, align 8, !tbaa !2428
  %1370 = add i64 %150, 15
  store i64 %1370, i64* %PC, align 8
  %1371 = load i64, i64* %119, align 8
  store i64 %1371, i64* %RCX, align 8, !tbaa !2428
  %1372 = add i64 %1371, 456
  %1373 = add i64 %150, 22
  store i64 %1373, i64* %PC, align 8
  %1374 = inttoptr i64 %1372 to i64*
  %1375 = load i64, i64* %1374, align 8
  %1376 = add i64 %1375, %1369
  store i64 %1376, i64* %RAX, align 8, !tbaa !2428
  %1377 = icmp ult i64 %1376, %1369
  %1378 = icmp ult i64 %1376, %1375
  %1379 = or i1 %1377, %1378
  %1380 = zext i1 %1379 to i8
  store i8 %1380, i8* %14, align 1, !tbaa !2432
  %1381 = trunc i64 %1376 to i32
  %1382 = and i32 %1381, 255
  %1383 = tail call i32 @llvm.ctpop.i32(i32 %1382) #12
  %1384 = trunc i32 %1383 to i8
  %1385 = and i8 %1384, 1
  %1386 = xor i8 %1385, 1
  store i8 %1386, i8* %21, align 1, !tbaa !2446
  %1387 = xor i64 %1375, %1369
  %1388 = xor i64 %1387, %1376
  %1389 = lshr i64 %1388, 4
  %1390 = trunc i64 %1389 to i8
  %1391 = and i8 %1390, 1
  store i8 %1391, i8* %27, align 1, !tbaa !2447
  %1392 = icmp eq i64 %1376, 0
  %1393 = zext i1 %1392 to i8
  store i8 %1393, i8* %30, align 1, !tbaa !2448
  %1394 = lshr i64 %1376, 63
  %1395 = trunc i64 %1394 to i8
  store i8 %1395, i8* %33, align 1, !tbaa !2449
  %1396 = lshr i64 %1369, 63
  %1397 = lshr i64 %1375, 63
  %1398 = xor i64 %1394, %1396
  %1399 = xor i64 %1394, %1397
  %1400 = add nuw nsw i64 %1398, %1399
  %1401 = icmp eq i64 %1400, 2
  %1402 = zext i1 %1401 to i8
  store i8 %1402, i8* %39, align 1, !tbaa !2450
  %1403 = add i64 %150, 26
  store i64 %1403, i64* %PC, align 8
  %1404 = load i64, i64* %119, align 8
  store i64 %1404, i64* %RCX, align 8, !tbaa !2428
  %1405 = add i64 %1404, 416
  %1406 = add i64 %150, 33
  store i64 %1406, i64* %PC, align 8
  %1407 = inttoptr i64 %1405 to i64*
  %1408 = load i64, i64* %1407, align 8
  %1409 = sub i64 %1376, %1408
  %1410 = icmp ult i64 %1376, %1408
  %1411 = zext i1 %1410 to i8
  store i8 %1411, i8* %14, align 1, !tbaa !2432
  %1412 = trunc i64 %1409 to i32
  %1413 = and i32 %1412, 255
  %1414 = tail call i32 @llvm.ctpop.i32(i32 %1413) #12
  %1415 = trunc i32 %1414 to i8
  %1416 = and i8 %1415, 1
  %1417 = xor i8 %1416, 1
  store i8 %1417, i8* %21, align 1, !tbaa !2446
  %1418 = xor i64 %1408, %1376
  %1419 = xor i64 %1418, %1409
  %1420 = lshr i64 %1419, 4
  %1421 = trunc i64 %1420 to i8
  %1422 = and i8 %1421, 1
  store i8 %1422, i8* %27, align 1, !tbaa !2447
  %1423 = icmp eq i64 %1409, 0
  %1424 = zext i1 %1423 to i8
  store i8 %1424, i8* %30, align 1, !tbaa !2448
  %1425 = lshr i64 %1409, 63
  %1426 = trunc i64 %1425 to i8
  store i8 %1426, i8* %33, align 1, !tbaa !2449
  %1427 = lshr i64 %1408, 63
  %1428 = xor i64 %1427, %1394
  %1429 = xor i64 %1425, %1394
  %1430 = add nuw nsw i64 %1429, %1428
  %1431 = icmp eq i64 %1430, 2
  %1432 = zext i1 %1431 to i8
  store i8 %1432, i8* %39, align 1, !tbaa !2450
  %1433 = icmp ne i8 %1426, 0
  %1434 = xor i1 %1433, %1431
  %1435 = or i1 %1423, %1434
  %.v73 = select i1 %1435, i64 154, i64 39
  %1436 = add i64 %150, %.v73
  store i64 %1436, i64* %PC, align 8, !tbaa !2428
  br i1 %1435, label %block_401209, label %block_401196

block_401243:                                     ; preds = %block_40120e, %block_40127f
  %1437 = phi i64 [ %.pre47, %block_40120e ], [ %209, %block_40127f ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %1438 = load i64, i64* %RBP, align 8
  %1439 = add i64 %1438, -24
  %1440 = add i64 %1437, 8
  store i64 %1440, i64* %PC, align 8
  %1441 = inttoptr i64 %1439 to i64*
  %1442 = load i64, i64* %1441, align 8
  store i64 %1442, i64* %RDX, align 8, !tbaa !2428
  %1443 = add i64 %1438, -32
  %1444 = add i64 %1437, 12
  store i64 %1444, i64* %PC, align 8
  %1445 = inttoptr i64 %1443 to i64*
  %1446 = load i64, i64* %1445, align 8
  %1447 = sub i64 %1442, %1446
  %1448 = icmp ult i64 %1442, %1446
  %1449 = zext i1 %1448 to i8
  store i8 %1449, i8* %14, align 1, !tbaa !2432
  %1450 = trunc i64 %1447 to i32
  %1451 = and i32 %1450, 255
  %1452 = tail call i32 @llvm.ctpop.i32(i32 %1451) #12
  %1453 = trunc i32 %1452 to i8
  %1454 = and i8 %1453, 1
  %1455 = xor i8 %1454, 1
  store i8 %1455, i8* %21, align 1, !tbaa !2446
  %1456 = xor i64 %1446, %1442
  %1457 = xor i64 %1456, %1447
  %1458 = lshr i64 %1457, 4
  %1459 = trunc i64 %1458 to i8
  %1460 = and i8 %1459, 1
  store i8 %1460, i8* %27, align 1, !tbaa !2447
  %1461 = icmp eq i64 %1447, 0
  %1462 = zext i1 %1461 to i8
  store i8 %1462, i8* %30, align 1, !tbaa !2448
  %1463 = lshr i64 %1447, 63
  %1464 = trunc i64 %1463 to i8
  store i8 %1464, i8* %33, align 1, !tbaa !2449
  %1465 = lshr i64 %1442, 63
  %1466 = lshr i64 %1446, 63
  %1467 = xor i64 %1466, %1465
  %1468 = xor i64 %1463, %1465
  %1469 = add nuw nsw i64 %1468, %1467
  %1470 = icmp eq i64 %1469, 2
  %1471 = zext i1 %1470 to i8
  store i8 %1471, i8* %39, align 1, !tbaa !2450
  %1472 = add i64 %1438, -161
  %1473 = add i64 %1437, 18
  store i64 %1473, i64* %PC, align 8
  %1474 = inttoptr i64 %1472 to i8*
  store i8 0, i8* %1474, align 1
  %1475 = load i64, i64* %PC, align 8
  %1476 = add i64 %1475, 23
  %1477 = add i64 %1475, 6
  %1478 = load i8, i8* %33, align 1, !tbaa !2449
  %1479 = icmp ne i8 %1478, 0
  %1480 = load i8, i8* %39, align 1, !tbaa !2450
  %1481 = icmp ne i8 %1480, 0
  %1482 = xor i1 %1479, %1481
  %1483 = select i1 %1482, i64 %1477, i64 %1476
  store i64 %1483, i64* %PC, align 8, !tbaa !2428
  br i1 %1482, label %block_40125b, label %block_40126c

block_40120e:                                     ; preds = %block_401110, %block_401209
  %1484 = phi i64 [ %150, %block_401110 ], [ %1564, %block_401209 ]
  %1485 = phi i64 [ %115, %block_401110 ], [ %.pre46, %block_401209 ]
  %MEMORY.11 = phi %struct.Memory* [ %2, %block_401110 ], [ %MEMORY.13, %block_401209 ]
  %1486 = add i64 %1485, -16
  %1487 = add i64 %1484, 4
  store i64 %1487, i64* %PC, align 8
  %1488 = inttoptr i64 %1486 to i64*
  %1489 = load i64, i64* %1488, align 8
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  %1490 = add i64 %1489, 576
  %1491 = add i64 %1484, 11
  store i64 %1491, i64* %PC, align 8
  %1492 = inttoptr i64 %1490 to i64*
  %1493 = load i64, i64* %1492, align 8
  store i64 %1493, i64* %RAX, align 8, !tbaa !2428
  %1494 = add i64 %1485, -128
  %1495 = add i64 %1484, 15
  store i64 %1495, i64* %PC, align 8
  %1496 = inttoptr i64 %1494 to i64*
  store i64 %1493, i64* %1496, align 8
  %1497 = load i64, i64* %RBP, align 8
  %1498 = add i64 %1497, -16
  %1499 = load i64, i64* %PC, align 8
  %1500 = add i64 %1499, 4
  store i64 %1500, i64* %PC, align 8
  %1501 = inttoptr i64 %1498 to i64*
  %1502 = load i64, i64* %1501, align 8
  store i64 %1502, i64* %RAX, align 8, !tbaa !2428
  %1503 = add i64 %1502, 408
  %1504 = add i64 %1499, 11
  store i64 %1504, i64* %PC, align 8
  %1505 = inttoptr i64 %1503 to i64*
  %1506 = load i64, i64* %1505, align 8
  store i64 %1506, i64* %RAX, align 8, !tbaa !2428
  %1507 = add i64 %1497, -32
  %1508 = add i64 %1499, 15
  store i64 %1508, i64* %PC, align 8
  %1509 = inttoptr i64 %1507 to i64*
  store i64 %1506, i64* %1509, align 8
  %1510 = load i64, i64* %RBP, align 8
  %1511 = add i64 %1510, -16
  %1512 = load i64, i64* %PC, align 8
  %1513 = add i64 %1512, 4
  store i64 %1513, i64* %PC, align 8
  %1514 = inttoptr i64 %1511 to i64*
  %1515 = load i64, i64* %1514, align 8
  store i64 %1515, i64* %RAX, align 8, !tbaa !2428
  %1516 = add i64 %1515, 568
  %1517 = add i64 %1512, 11
  store i64 %1517, i64* %PC, align 8
  %1518 = inttoptr i64 %1516 to i64*
  %1519 = load i64, i64* %1518, align 8
  store i64 %1519, i64* %RAX, align 8, !tbaa !2428
  %1520 = add i64 %1510, -112
  %1521 = add i64 %1512, 15
  store i64 %1521, i64* %PC, align 8
  %1522 = inttoptr i64 %1520 to i64*
  store i64 %1519, i64* %1522, align 8
  %1523 = load i64, i64* %RBP, align 8
  %1524 = add i64 %1523, -24
  %1525 = load i64, i64* %PC, align 8
  %1526 = add i64 %1525, 8
  store i64 %1526, i64* %PC, align 8
  %1527 = inttoptr i64 %1524 to i64*
  store i64 0, i64* %1527, align 8
  %.pre47 = load i64, i64* %PC, align 8
  br label %block_401243

block_40140d:                                     ; preds = %block_4013c4
  store i64 %860, i64* %RAX, align 8, !tbaa !2428
  %1528 = add i64 %860, 48
  %1529 = add i64 %856, 8
  store i64 %1529, i64* %PC, align 8
  %1530 = inttoptr i64 %1528 to i64*
  %1531 = load i64, i64* %1530, align 8
  store i64 %1531, i64* %RAX, align 8, !tbaa !2428
  %1532 = add i64 %856, 12
  store i64 %1532, i64* %PC, align 8
  %1533 = load i64, i64* %982, align 8
  %1534 = sub i64 %1531, %1533
  %1535 = icmp ult i64 %1531, %1533
  %1536 = zext i1 %1535 to i8
  store i8 %1536, i8* %14, align 1, !tbaa !2432
  %1537 = trunc i64 %1534 to i32
  %1538 = and i32 %1537, 255
  %1539 = tail call i32 @llvm.ctpop.i32(i32 %1538) #12
  %1540 = trunc i32 %1539 to i8
  %1541 = and i8 %1540, 1
  %1542 = xor i8 %1541, 1
  store i8 %1542, i8* %21, align 1, !tbaa !2446
  %1543 = xor i64 %1533, %1531
  %1544 = xor i64 %1543, %1534
  %1545 = lshr i64 %1544, 4
  %1546 = trunc i64 %1545 to i8
  %1547 = and i8 %1546, 1
  store i8 %1547, i8* %27, align 1, !tbaa !2447
  %1548 = icmp eq i64 %1534, 0
  %1549 = zext i1 %1548 to i8
  store i8 %1549, i8* %30, align 1, !tbaa !2448
  %1550 = lshr i64 %1534, 63
  %1551 = trunc i64 %1550 to i8
  store i8 %1551, i8* %33, align 1, !tbaa !2449
  %1552 = lshr i64 %1531, 63
  %1553 = lshr i64 %1533, 63
  %1554 = xor i64 %1553, %1552
  %1555 = xor i64 %1550, %1552
  %1556 = add nuw nsw i64 %1555, %1554
  %1557 = icmp eq i64 %1556, 2
  %1558 = zext i1 %1557 to i8
  store i8 %1558, i8* %39, align 1, !tbaa !2450
  %1559 = icmp ne i8 %1551, 0
  %1560 = xor i1 %1559, %1557
  %1561 = or i1 %1548, %1560
  %.v72 = select i1 %1561, i64 53, i64 18
  %1562 = add i64 %856, %.v72
  store i64 %1562, i64* %PC, align 8, !tbaa !2428
  br i1 %1561, label %block_401447, label %block_40141f

block_401209:                                     ; preds = %block_401200, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_40116f
  %1563 = phi i64 [ %1436, %block_40116f ], [ %1818, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %.pre45, %block_401200 ]
  %MEMORY.13 = phi %struct.Memory* [ %2, %block_40116f ], [ %1749, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %1828, %block_401200 ]
  %1564 = add i64 %1563, 5
  store i64 %1564, i64* %PC, align 8, !tbaa !2428
  %.pre46 = load i64, i64* %RBP, align 8
  br label %block_40120e

block_401307:                                     ; preds = %block_4012f4
  %1565 = add i64 %246, 4
  store i64 %1565, i64* %PC, align 8
  %1566 = load i64, i64* %217, align 8
  store i64 %1566, i64* %RAX, align 8, !tbaa !2428
  %1567 = add i64 %1566, 16
  %1568 = add i64 %246, 8
  store i64 %1568, i64* %PC, align 8
  %1569 = inttoptr i64 %1567 to i64*
  %1570 = load i64, i64* %1569, align 8
  store i64 %1570, i64* %RAX, align 8, !tbaa !2428
  %1571 = add i64 %214, -160
  %1572 = add i64 %246, 15
  store i64 %1572, i64* %PC, align 8
  %1573 = inttoptr i64 %1571 to i64*
  store i64 %1570, i64* %1573, align 8
  %1574 = load i64, i64* %RBP, align 8
  %1575 = add i64 %1574, -160
  %1576 = load i64, i64* %PC, align 8
  %1577 = add i64 %1576, 7
  store i64 %1577, i64* %PC, align 8
  %1578 = inttoptr i64 %1575 to i64*
  %1579 = load i64, i64* %1578, align 8
  store i64 %1579, i64* %RAX, align 8, !tbaa !2428
  %1580 = add i64 %1579, 100
  %1581 = add i64 %1576, 11
  store i64 %1581, i64* %PC, align 8
  %1582 = inttoptr i64 %1580 to i32*
  %1583 = load i32, i32* %1582, align 4
  %1584 = sext i32 %1583 to i64
  store i64 %1584, i64* %RAX, align 8, !tbaa !2428
  %1585 = add i64 %1574, -112
  %1586 = add i64 %1576, 15
  store i64 %1586, i64* %PC, align 8
  %1587 = inttoptr i64 %1585 to i64*
  %1588 = load i64, i64* %1587, align 8
  store i64 %1588, i64* %RCX, align 8, !tbaa !2428
  %1589 = add i64 %1588, 56
  %1590 = add i64 %1576, 19
  store i64 %1590, i64* %PC, align 8
  %1591 = inttoptr i64 %1589 to i64*
  %1592 = load i64, i64* %1591, align 8
  %1593 = sub i64 %1584, %1592
  store i64 %1593, i64* %RAX, align 8, !tbaa !2428
  %1594 = icmp ult i64 %1584, %1592
  %1595 = zext i1 %1594 to i8
  store i8 %1595, i8* %14, align 1, !tbaa !2432
  %1596 = trunc i64 %1593 to i32
  %1597 = and i32 %1596, 255
  %1598 = tail call i32 @llvm.ctpop.i32(i32 %1597) #12
  %1599 = trunc i32 %1598 to i8
  %1600 = and i8 %1599, 1
  %1601 = xor i8 %1600, 1
  store i8 %1601, i8* %21, align 1, !tbaa !2446
  %1602 = xor i64 %1592, %1584
  %1603 = xor i64 %1602, %1593
  %1604 = lshr i64 %1603, 4
  %1605 = trunc i64 %1604 to i8
  %1606 = and i8 %1605, 1
  store i8 %1606, i8* %27, align 1, !tbaa !2447
  %1607 = icmp eq i64 %1593, 0
  %1608 = zext i1 %1607 to i8
  store i8 %1608, i8* %30, align 1, !tbaa !2448
  %1609 = lshr i64 %1593, 63
  %1610 = trunc i64 %1609 to i8
  store i8 %1610, i8* %33, align 1, !tbaa !2449
  %1611 = lshr i64 %1584, 63
  %1612 = lshr i64 %1592, 63
  %1613 = xor i64 %1612, %1611
  %1614 = xor i64 %1609, %1611
  %1615 = add nuw nsw i64 %1614, %1613
  %1616 = icmp eq i64 %1615, 2
  %1617 = zext i1 %1616 to i8
  store i8 %1617, i8* %39, align 1, !tbaa !2450
  %1618 = add i64 %1574, -104
  %1619 = add i64 %1576, 23
  store i64 %1619, i64* %PC, align 8
  %1620 = inttoptr i64 %1618 to i64*
  %1621 = load i64, i64* %1620, align 8
  %1622 = add i64 %1621, %1593
  store i64 %1622, i64* %RAX, align 8, !tbaa !2428
  %1623 = icmp ult i64 %1622, %1593
  %1624 = icmp ult i64 %1622, %1621
  %1625 = or i1 %1623, %1624
  %1626 = zext i1 %1625 to i8
  store i8 %1626, i8* %14, align 1, !tbaa !2432
  %1627 = trunc i64 %1622 to i32
  %1628 = and i32 %1627, 255
  %1629 = tail call i32 @llvm.ctpop.i32(i32 %1628) #12
  %1630 = trunc i32 %1629 to i8
  %1631 = and i8 %1630, 1
  %1632 = xor i8 %1631, 1
  store i8 %1632, i8* %21, align 1, !tbaa !2446
  %1633 = xor i64 %1621, %1593
  %1634 = xor i64 %1633, %1622
  %1635 = lshr i64 %1634, 4
  %1636 = trunc i64 %1635 to i8
  %1637 = and i8 %1636, 1
  store i8 %1637, i8* %27, align 1, !tbaa !2447
  %1638 = icmp eq i64 %1622, 0
  %1639 = zext i1 %1638 to i8
  store i8 %1639, i8* %30, align 1, !tbaa !2448
  %1640 = lshr i64 %1622, 63
  %1641 = trunc i64 %1640 to i8
  store i8 %1641, i8* %33, align 1, !tbaa !2449
  %1642 = lshr i64 %1621, 63
  %1643 = xor i64 %1640, %1609
  %1644 = xor i64 %1640, %1642
  %1645 = add nuw nsw i64 %1643, %1644
  %1646 = icmp eq i64 %1645, 2
  %1647 = zext i1 %1646 to i8
  store i8 %1647, i8* %39, align 1, !tbaa !2450
  %1648 = add i64 %1574, -56
  %1649 = add i64 %1576, 27
  store i64 %1649, i64* %PC, align 8
  %1650 = inttoptr i64 %1648 to i64*
  store i64 %1622, i64* %1650, align 8
  %1651 = load i64, i64* %RBP, align 8
  %1652 = add i64 %1651, -160
  %1653 = load i64, i64* %PC, align 8
  %1654 = add i64 %1653, 7
  store i64 %1654, i64* %PC, align 8
  %1655 = inttoptr i64 %1652 to i64*
  %1656 = load i64, i64* %1655, align 8
  store i64 %1656, i64* %RAX, align 8, !tbaa !2428
  %1657 = add i64 %1653, 10
  store i64 %1657, i64* %PC, align 8
  %1658 = inttoptr i64 %1656 to i64*
  %1659 = load i64, i64* %1658, align 8
  store i64 %1659, i64* %RAX, align 8, !tbaa !2428
  %1660 = add i64 %1651, -80
  %1661 = add i64 %1653, 14
  store i64 %1661, i64* %PC, align 8
  %1662 = inttoptr i64 %1660 to i64*
  store i64 %1659, i64* %1662, align 8
  %1663 = load i64, i64* %RBP, align 8
  %1664 = add i64 %1663, -144
  %1665 = load i64, i64* %PC, align 8
  %1666 = add i64 %1665, 7
  store i64 %1666, i64* %PC, align 8
  %1667 = inttoptr i64 %1664 to i64*
  %1668 = load i64, i64* %1667, align 8
  store i64 %1668, i64* %RAX, align 8, !tbaa !2428
  %1669 = add i64 %1668, 8
  %1670 = add i64 %1665, 11
  store i64 %1670, i64* %PC, align 8
  %1671 = inttoptr i64 %1669 to i64*
  %1672 = load i64, i64* %1671, align 8
  store i64 %1672, i64* %RAX, align 8, !tbaa !2428
  %1673 = add i64 %1672, 72
  %1674 = add i64 %1665, 15
  store i64 %1674, i64* %PC, align 8
  %1675 = inttoptr i64 %1673 to i64*
  %1676 = load i64, i64* %1675, align 8
  store i64 %1676, i64* %RAX, align 8, !tbaa !2428
  %1677 = add i64 %1663, -120
  %1678 = add i64 %1665, 19
  store i64 %1678, i64* %PC, align 8
  %1679 = inttoptr i64 %1677 to i64*
  store i64 %1676, i64* %1679, align 8
  %.pre57.pre = load i64, i64* %PC, align 8
  br label %block_401352.outer

block_401352.outer:                               ; preds = %block_40144c, %block_401307
  %.pre57 = phi i64 [ %764, %block_40144c ], [ %.pre57.pre, %block_401307 ]
  br label %block_401352

block_4015e8:                                     ; preds = %block_401484, %block_4015a3
  %1680 = phi i64 [ %1151, %block_401484 ], [ %.pre53, %block_4015a3 ]
  %1681 = phi i64 [ %997, %block_401484 ], [ %.pre52, %block_4015a3 ]
  %1682 = add i64 %1681, -40
  %1683 = add i64 %1680, 4
  store i64 %1683, i64* %PC, align 8
  %1684 = inttoptr i64 %1682 to i64*
  %1685 = load i64, i64* %1684, align 8
  store i64 %1685, i64* %RAX, align 8, !tbaa !2428
  %1686 = add i64 %1681, -8
  %1687 = add i64 %1680, 8
  store i64 %1687, i64* %PC, align 8
  %1688 = inttoptr i64 %1686 to i64*
  store i64 %1685, i64* %1688, align 8
  %.pre54 = load i64, i64* %PC, align 8
  br label %block_4015f0

block_401447:                                     ; preds = %block_40141f, %block_40140d, %block_4013d9
  %.sink5 = phi i64 [ 68, %block_4013d9 ], [ 10, %block_40140d ], [ 10, %block_40141f ]
  %1689 = load i64, i64* %PC, align 8
  %1690 = add i64 %.sink5, %1689
  store i64 %1690, i64* %PC, align 8, !tbaa !2428
  %.pre58 = load i64, i64* %RBP, align 8
  br label %block_40144c

block_401196:                                     ; preds = %block_40116f
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %1691 = load i64, i64* %RBP, align 8
  %1692 = add i64 %1691, -16
  %1693 = add i64 %1436, 11
  store i64 %1693, i64* %PC, align 8
  %1694 = inttoptr i64 %1692 to i64*
  %1695 = load i64, i64* %1694, align 8
  store i64 %1695, i64* %RDX, align 8, !tbaa !2428
  %1696 = add i64 %1695, 408
  %1697 = add i64 %1436, 18
  store i64 %1697, i64* %PC, align 8
  %1698 = inttoptr i64 %1696 to i64*
  %1699 = load i64, i64* %1698, align 8
  store i64 %1699, i64* %RDX, align 8, !tbaa !2428
  %1700 = add i64 %1436, 22
  store i64 %1700, i64* %PC, align 8
  %1701 = load i64, i64* %1694, align 8
  store i64 %1701, i64* %RSI, align 8, !tbaa !2428
  %1702 = add i64 %1701, 408
  %1703 = add i64 %1436, 30
  store i64 %1703, i64* %PC, align 8
  %1704 = inttoptr i64 %1702 to i64*
  %1705 = load i64, i64* %1704, align 8
  %1706 = sext i64 %1699 to i128
  %1707 = and i128 %1706, -18446744073709551616
  %1708 = sext i64 %1705 to i128
  %1709 = and i128 %1708, -18446744073709551616
  %1710 = zext i64 %1699 to i128
  %1711 = or i128 %1707, %1710
  %1712 = zext i64 %1705 to i128
  %1713 = or i128 %1709, %1712
  %1714 = mul nsw i128 %1713, %1711
  %1715 = trunc i128 %1714 to i64
  %1716 = sext i64 %1715 to i128
  %1717 = icmp ne i128 %1716, %1714
  %1718 = zext i1 %1717 to i8
  store i8 %1718, i8* %14, align 1, !tbaa !2432
  %1719 = trunc i128 %1714 to i32
  %1720 = and i32 %1719, 255
  %1721 = tail call i32 @llvm.ctpop.i32(i32 %1720) #12
  %1722 = trunc i32 %1721 to i8
  %1723 = and i8 %1722, 1
  %1724 = xor i8 %1723, 1
  store i8 %1724, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %30, align 1, !tbaa !2448
  %1725 = lshr i64 %1715, 63
  %1726 = trunc i64 %1725 to i8
  store i8 %1726, i8* %33, align 1, !tbaa !2449
  store i8 %1718, i8* %39, align 1, !tbaa !2450
  store i64 %1715, i64* %RAX, align 8, !tbaa !2428
  %1727 = ashr i64 %1715, 63
  store i64 %1727, i64* %RDX, align 8, !tbaa !2428
  %1728 = add i64 %1436, 38
  store i64 %1728, i64* %PC, align 8
  %1729 = zext i64 %1727 to i128
  %1730 = shl nuw i128 %1729, 64
  %1731 = and i128 %1714, 18446744073709551615
  %1732 = or i128 %1730, %1731
  %1733 = sdiv i128 %1732, 2
  %1734 = trunc i128 %1733 to i64
  %1735 = and i128 %1733, 18446744073709551615
  %1736 = sext i64 %1734 to i128
  %1737 = and i128 %1736, -18446744073709551616
  %1738 = or i128 %1737, %1735
  %1739 = icmp eq i128 %1733, %1738
  br i1 %1739, label %1742, label %1740

; <label>:1740:                                   ; preds = %block_401196
  %1741 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1728, %struct.Memory* %2) #13
  %.pre = load i64, i64* %RBP, align 8
  %.pre43 = load i64, i64* %PC, align 8
  %.pre44 = load i64, i64* %RAX, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:1742:                                   ; preds = %block_401196
  %1743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %1744 = srem i128 %1732, 2
  %1745 = trunc i128 %1744 to i64
  store i64 %1734, i64* %1743, align 8, !tbaa !2428
  store i64 %1745, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 0, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %27, align 1, !tbaa !2447
  store i8 0, i8* %30, align 1, !tbaa !2448
  store i8 0, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %1742, %1740
  %1746 = phi i64 [ %.pre44, %1740 ], [ %1734, %1742 ]
  %1747 = phi i64 [ %.pre43, %1740 ], [ %1728, %1742 ]
  %1748 = phi i64 [ %.pre, %1740 ], [ %1691, %1742 ]
  %1749 = phi %struct.Memory* [ %1741, %1740 ], [ %2, %1742 ]
  %1750 = add i64 %1748, -16
  %1751 = add i64 %1747, 4
  store i64 %1751, i64* %PC, align 8
  %1752 = inttoptr i64 %1750 to i64*
  %1753 = load i64, i64* %1752, align 8
  store i64 %1753, i64* %RCX, align 8, !tbaa !2428
  %1754 = add i64 %1753, 424
  %1755 = add i64 %1747, 11
  store i64 %1755, i64* %PC, align 8
  %1756 = inttoptr i64 %1754 to i64*
  %1757 = load i64, i64* %1756, align 8
  %1758 = add i64 %1757, %1746
  store i64 %1758, i64* %RAX, align 8, !tbaa !2428
  %1759 = icmp ult i64 %1758, %1746
  %1760 = icmp ult i64 %1758, %1757
  %1761 = or i1 %1759, %1760
  %1762 = zext i1 %1761 to i8
  store i8 %1762, i8* %14, align 1, !tbaa !2432
  %1763 = trunc i64 %1758 to i32
  %1764 = and i32 %1763, 255
  %1765 = tail call i32 @llvm.ctpop.i32(i32 %1764) #12
  %1766 = trunc i32 %1765 to i8
  %1767 = and i8 %1766, 1
  %1768 = xor i8 %1767, 1
  store i8 %1768, i8* %21, align 1, !tbaa !2446
  %1769 = xor i64 %1757, %1746
  %1770 = xor i64 %1769, %1758
  %1771 = lshr i64 %1770, 4
  %1772 = trunc i64 %1771 to i8
  %1773 = and i8 %1772, 1
  store i8 %1773, i8* %27, align 1, !tbaa !2447
  %1774 = icmp eq i64 %1758, 0
  %1775 = zext i1 %1774 to i8
  store i8 %1775, i8* %30, align 1, !tbaa !2448
  %1776 = lshr i64 %1758, 63
  %1777 = trunc i64 %1776 to i8
  store i8 %1777, i8* %33, align 1, !tbaa !2449
  %1778 = lshr i64 %1746, 63
  %1779 = lshr i64 %1757, 63
  %1780 = xor i64 %1776, %1778
  %1781 = xor i64 %1776, %1779
  %1782 = add nuw nsw i64 %1780, %1781
  %1783 = icmp eq i64 %1782, 2
  %1784 = zext i1 %1783 to i8
  store i8 %1784, i8* %39, align 1, !tbaa !2450
  %1785 = add i64 %1747, 15
  store i64 %1785, i64* %PC, align 8
  %1786 = load i64, i64* %1752, align 8
  store i64 %1786, i64* %RCX, align 8, !tbaa !2428
  %1787 = add i64 %1786, 416
  %1788 = add i64 %1747, 22
  store i64 %1788, i64* %PC, align 8
  %1789 = inttoptr i64 %1787 to i64*
  %1790 = load i64, i64* %1789, align 8
  %1791 = sub i64 %1758, %1790
  %1792 = icmp ult i64 %1758, %1790
  %1793 = zext i1 %1792 to i8
  store i8 %1793, i8* %14, align 1, !tbaa !2432
  %1794 = trunc i64 %1791 to i32
  %1795 = and i32 %1794, 255
  %1796 = tail call i32 @llvm.ctpop.i32(i32 %1795) #12
  %1797 = trunc i32 %1796 to i8
  %1798 = and i8 %1797, 1
  %1799 = xor i8 %1798, 1
  store i8 %1799, i8* %21, align 1, !tbaa !2446
  %1800 = xor i64 %1790, %1758
  %1801 = xor i64 %1800, %1791
  %1802 = lshr i64 %1801, 4
  %1803 = trunc i64 %1802 to i8
  %1804 = and i8 %1803, 1
  store i8 %1804, i8* %27, align 1, !tbaa !2447
  %1805 = icmp eq i64 %1791, 0
  %1806 = zext i1 %1805 to i8
  store i8 %1806, i8* %30, align 1, !tbaa !2448
  %1807 = lshr i64 %1791, 63
  %1808 = trunc i64 %1807 to i8
  store i8 %1808, i8* %33, align 1, !tbaa !2449
  %1809 = lshr i64 %1790, 63
  %1810 = xor i64 %1809, %1776
  %1811 = xor i64 %1807, %1776
  %1812 = add nuw nsw i64 %1811, %1810
  %1813 = icmp eq i64 %1812, 2
  %1814 = zext i1 %1813 to i8
  store i8 %1814, i8* %39, align 1, !tbaa !2450
  %1815 = icmp ne i8 %1808, 0
  %1816 = xor i1 %1815, %1813
  %1817 = or i1 %1805, %1816
  %.v74 = select i1 %1817, i64 77, i64 28
  %1818 = add i64 %1747, %.v74
  store i64 %1818, i64* %PC, align 8, !tbaa !2428
  br i1 %1817, label %block_401209, label %block_4011d8

block_401200:                                     ; preds = %block_4011d8
  %1819 = add i64 %1062, -16
  %1820 = add i64 %1061, 4
  store i64 %1820, i64* %PC, align 8
  %1821 = inttoptr i64 %1819 to i64*
  %1822 = load i64, i64* %1821, align 8
  store i64 %1822, i64* %RDI, align 8, !tbaa !2428
  %1823 = add i64 %1061, 2448
  %1824 = add i64 %1061, 9
  %1825 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1826 = add i64 %1825, -8
  %1827 = inttoptr i64 %1826 to i64*
  store i64 %1824, i64* %1827, align 8
  store i64 %1826, i64* %RSP, align 8, !tbaa !2428
  store i64 %1823, i64* %PC, align 8, !tbaa !2428
  %1828 = tail call %struct.Memory* @sub_401b90_refresh_neighbour_lists_renamed_(%struct.State* nonnull %0, i64 %1823, %struct.Memory* %1048)
  %.pre45 = load i64, i64* %PC, align 8
  br label %block_401209
}

; Function Attrs: noinline
define %struct.Memory* @sub_401600_suspend_impl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401600:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -72
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 64
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, %9
  %21 = lshr i64 %20, 4
  %22 = trunc i64 %21 to i8
  %23 = and i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = icmp eq i64 %9, 0
  %26 = zext i1 %25 to i8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i64 %9, 63
  %29 = trunc i64 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %29, i8* %30, align 1, !tbaa !2449
  %31 = lshr i64 %6, 63
  %32 = xor i64 %28, %31
  %33 = add nuw nsw i64 %32, %31
  %34 = icmp eq i64 %33, 2
  %35 = zext i1 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %35, i8* %36, align 1, !tbaa !2450
  %37 = add i64 %5, -16
  %38 = load i64, i64* %RDI, align 8
  %39 = add i64 %8, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i64*
  store i64 %38, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -16
  %43 = load i64, i64* %RSI, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %RDX, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -24
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 5
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %54 to i64*
  %58 = load i64, i64* %57, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %59 = trunc i64 %58 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %24, align 1, !tbaa !2447
  %65 = icmp eq i64 %58, 0
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %27, align 1, !tbaa !2448
  %67 = lshr i64 %58, 63
  %68 = trunc i64 %67 to i8
  store i8 %68, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  %.v = select i1 %65, i64 31, i64 11
  %69 = add i64 %55, %.v
  %70 = add i64 %53, -8
  %71 = add i64 %69, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %70 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %RAX, align 8, !tbaa !2428
  br i1 %65, label %block_401633, label %block_40161f

block_4016ef:                                     ; preds = %block_4016d9
  %74 = add i64 %243, 8
  %75 = add i64 %237, 12
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RCX, align 8, !tbaa !2428
  %78 = add i64 %77, 48
  %79 = add i64 %237, 16
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %78 to i64*
  store i64 %241, i64* %80, align 8
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 21
  store i64 %82, i64* %PC, align 8, !tbaa !2428
  br label %block_401714

block_40173d:                                     ; preds = %block_40171e
  store i64 64, i64* %RAX, align 8, !tbaa !2428
  store i64 64, i64* %RDX, align 8, !tbaa !2428
  %83 = add i64 %246, -48
  %84 = add i64 %283, 11
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %83 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %RCX, align 8, !tbaa !2428
  %87 = add i64 %246, -56
  %88 = add i64 %283, 15
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RSI, align 8, !tbaa !2428
  store i64 %86, i64* %RDI, align 8, !tbaa !2428
  %91 = add i64 %283, -3741
  %92 = add i64 %283, 23
  %93 = load i64, i64* %RSP, align 8, !tbaa !2428
  %94 = add i64 %93, -8
  %95 = inttoptr i64 %94 to i64*
  store i64 %92, i64* %95, align 8
  store i64 %94, i64* %RSP, align 8, !tbaa !2428
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  %96 = tail call fastcc %struct.Memory* @ext_4008a0_memcpy(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %97 = load i64, i64* %RBP, align 8
  %98 = add i64 %97, -48
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %98 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %102, 64
  store i64 %103, i64* %RCX, align 8, !tbaa !2428
  %104 = icmp ugt i64 %102, -65
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %12, align 1, !tbaa !2432
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = tail call i32 @llvm.ctpop.i32(i32 %107) #12
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %19, align 1, !tbaa !2446
  %112 = xor i64 %103, %102
  %113 = lshr i64 %112, 4
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* %24, align 1, !tbaa !2447
  %116 = icmp eq i64 %103, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %27, align 1, !tbaa !2448
  %118 = lshr i64 %103, 63
  %119 = trunc i64 %118 to i8
  store i8 %119, i8* %30, align 1, !tbaa !2449
  %120 = lshr i64 %102, 63
  %121 = xor i64 %118, %120
  %122 = add nuw nsw i64 %121, %118
  %123 = icmp eq i64 %122, 2
  %124 = zext i1 %123 to i8
  store i8 %124, i8* %36, align 1, !tbaa !2450
  %125 = add i64 %99, 12
  store i64 %125, i64* %PC, align 8
  store i64 %103, i64* %101, align 8
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_401760

block_4017fb:                                     ; preds = %block_40177b, %block_401786
  %126 = phi i64 [ %697, %block_40177b ], [ %.pre23, %block_401786 ]
  %127 = phi i64 [ %680, %block_40177b ], [ %.pre22, %block_401786 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.4, %block_40177b ], [ %643, %block_401786 ]
  %128 = add i64 %127, -32
  %129 = add i64 %126, 4
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i64, i64* %RSP, align 8
  %133 = add i64 %132, 64
  store i64 %133, i64* %RSP, align 8, !tbaa !2428
  %134 = icmp ugt i64 %132, -65
  %135 = zext i1 %134 to i8
  store i8 %135, i8* %12, align 1, !tbaa !2432
  %136 = trunc i64 %133 to i32
  %137 = and i32 %136, 255
  %138 = tail call i32 @llvm.ctpop.i32(i32 %137) #12
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  %141 = xor i8 %140, 1
  store i8 %141, i8* %19, align 1, !tbaa !2446
  %142 = xor i64 %133, %132
  %143 = lshr i64 %142, 4
  %144 = trunc i64 %143 to i8
  %145 = and i8 %144, 1
  store i8 %145, i8* %24, align 1, !tbaa !2447
  %146 = icmp eq i64 %133, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %27, align 1, !tbaa !2448
  %148 = lshr i64 %133, 63
  %149 = trunc i64 %148 to i8
  store i8 %149, i8* %30, align 1, !tbaa !2449
  %150 = lshr i64 %132, 63
  %151 = xor i64 %148, %150
  %152 = add nuw nsw i64 %151, %148
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %36, align 1, !tbaa !2450
  %155 = add i64 %126, 9
  store i64 %155, i64* %PC, align 8
  %156 = add i64 %132, 72
  %157 = inttoptr i64 %133 to i64*
  %158 = load i64, i64* %157, align 8
  store i64 %158, i64* %RBP, align 8, !tbaa !2428
  store i64 %156, i64* %RSP, align 8, !tbaa !2428
  %159 = add i64 %126, 10
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %156 to i64*
  %161 = load i64, i64* %160, align 8
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %162 = add i64 %132, 80
  store i64 %162, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40172c:                                     ; preds = %block_40171e
  %163 = add i64 %246, -32
  %164 = add i64 %283, 4
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = add i64 %166, 1
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = icmp eq i64 %166, -1
  %169 = icmp eq i64 %167, 0
  %170 = or i1 %168, %169
  %171 = zext i1 %170 to i8
  store i8 %171, i8* %12, align 1, !tbaa !2432
  %172 = trunc i64 %167 to i32
  %173 = and i32 %172, 255
  %174 = tail call i32 @llvm.ctpop.i32(i32 %173) #12
  %175 = trunc i32 %174 to i8
  %176 = and i8 %175, 1
  %177 = xor i8 %176, 1
  store i8 %177, i8* %19, align 1, !tbaa !2446
  %178 = xor i64 %167, %166
  %179 = lshr i64 %178, 4
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %24, align 1, !tbaa !2447
  %182 = zext i1 %169 to i8
  store i8 %182, i8* %27, align 1, !tbaa !2448
  %183 = lshr i64 %167, 63
  %184 = trunc i64 %183 to i8
  store i8 %184, i8* %30, align 1, !tbaa !2449
  %185 = lshr i64 %166, 63
  %186 = xor i64 %183, %185
  %187 = add nuw nsw i64 %186, %183
  %188 = icmp eq i64 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %36, align 1, !tbaa !2450
  %190 = add i64 %283, 12
  store i64 %190, i64* %PC, align 8
  store i64 %167, i64* %165, align 8
  %191 = load i64, i64* %PC, align 8
  %192 = add i64 %191, 40
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  br label %block_401760

block_40161f:                                     ; preds = %block_401600
  %193 = add i64 %73, 440
  %194 = add i64 %69, 11
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = add i64 %53, -32
  %198 = add i64 %69, 15
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  store i64 %196, i64* %199, align 8
  %.pre20 = load i64, i64* %PC, align 8
  %.pre21 = load i64, i64* %RBP, align 8
  br label %block_40177b

block_4016d9:                                     ; preds = %block_4016c3
  %200 = add i64 %720, 4
  store i64 %200, i64* %PC, align 8
  %201 = load i64, i64* %705, align 8
  store i64 %201, i64* %RAX, align 8, !tbaa !2428
  %202 = add i64 %201, 8
  %203 = add i64 %720, 8
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %205, 48
  %207 = add i64 %720, 12
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208, align 8
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  %210 = add i64 %720, 16
  store i64 %210, i64* %PC, align 8
  %211 = load i64, i64* %705, align 8
  %212 = sub i64 %209, %211
  %213 = icmp ult i64 %209, %211
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %12, align 1, !tbaa !2432
  %215 = trunc i64 %212 to i32
  %216 = and i32 %215, 255
  %217 = tail call i32 @llvm.ctpop.i32(i32 %216) #12
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  store i8 %220, i8* %19, align 1, !tbaa !2446
  %221 = xor i64 %211, %209
  %222 = xor i64 %221, %212
  %223 = lshr i64 %222, 4
  %224 = trunc i64 %223 to i8
  %225 = and i8 %224, 1
  store i8 %225, i8* %24, align 1, !tbaa !2447
  %226 = icmp eq i64 %212, 0
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %27, align 1, !tbaa !2448
  %228 = lshr i64 %212, 63
  %229 = trunc i64 %228 to i8
  store i8 %229, i8* %30, align 1, !tbaa !2449
  %230 = lshr i64 %209, 63
  %231 = lshr i64 %211, 63
  %232 = xor i64 %231, %230
  %233 = xor i64 %228, %230
  %234 = add nuw nsw i64 %233, %232
  %235 = icmp eq i64 %234, 2
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %36, align 1, !tbaa !2450
  %.v24 = select i1 %226, i64 22, i64 43
  %237 = add i64 %720, %.v24
  %238 = add i64 %701, -48
  %239 = add i64 %237, 4
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %238 to i64*
  %241 = load i64, i64* %240, align 8
  store i64 %241, i64* %RAX, align 8, !tbaa !2428
  %242 = add i64 %237, 8
  store i64 %242, i64* %PC, align 8
  %243 = load i64, i64* %705, align 8
  store i64 %243, i64* %RCX, align 8, !tbaa !2428
  br i1 %226, label %block_4016ef, label %block_401704

block_40171e:                                     ; preds = %block_4016c3, %block_401714, %block_40169d
  %244 = phi i64 [ %.pre18, %block_40169d ], [ %760, %block_401714 ], [ %720, %block_4016c3 ]
  %.sink10 = phi i64 [ 96, %block_40169d ], [ 5, %block_401714 ], [ 5, %block_4016c3 ]
  %245 = add i64 %244, %.sink10
  %246 = load i64, i64* %RBP, align 8
  %247 = add i64 %246, -40
  %248 = add i64 %245, 4
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = add i64 %246, -16
  %252 = add i64 %245, 8
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = sub i64 %250, %254
  %256 = icmp ult i64 %250, %254
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %12, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #12
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %19, align 1, !tbaa !2446
  %264 = xor i64 %254, %250
  %265 = xor i64 %264, %255
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %24, align 1, !tbaa !2447
  %269 = icmp eq i64 %255, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %27, align 1, !tbaa !2448
  %271 = lshr i64 %255, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %30, align 1, !tbaa !2449
  %273 = lshr i64 %250, 63
  %274 = lshr i64 %254, 63
  %275 = xor i64 %274, %273
  %276 = xor i64 %271, %273
  %277 = add nuw nsw i64 %276, %275
  %278 = icmp eq i64 %277, 2
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %36, align 1, !tbaa !2450
  %280 = icmp ne i8 %272, 0
  %281 = xor i1 %280, %278
  %282 = or i1 %269, %281
  %.v29 = select i1 %282, i64 31, i64 14
  %283 = add i64 %245, %.v29
  store i64 %283, i64* %PC, align 8, !tbaa !2428
  br i1 %282, label %block_40173d, label %block_40172c

block_40169d:                                     ; preds = %block_40168f
  %284 = add i64 %465, 4
  store i64 %284, i64* %PC, align 8
  %285 = load i64, i64* %648, align 8
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = add i64 %465, 7
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %285 to i64*
  %288 = load i64, i64* %287, align 8
  store i64 %288, i64* %RAX, align 8, !tbaa !2428
  %289 = add i64 %465, 11
  store i64 %289, i64* %PC, align 8
  %290 = load i64, i64* %648, align 8
  store i64 %290, i64* %RCX, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = add i64 %465, 15
  store i64 %292, i64* %PC, align 8
  %293 = inttoptr i64 %291 to i64*
  %294 = load i64, i64* %293, align 8
  store i64 %294, i64* %RCX, align 8, !tbaa !2428
  %295 = add i64 %465, 18
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %294 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = sub i64 %288, %297
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = icmp ult i64 %288, %297
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %12, align 1, !tbaa !2432
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #12
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %19, align 1, !tbaa !2446
  %307 = xor i64 %297, %288
  %308 = xor i64 %307, %298
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %24, align 1, !tbaa !2447
  %312 = icmp eq i64 %298, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %27, align 1, !tbaa !2448
  %314 = lshr i64 %298, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %30, align 1, !tbaa !2449
  %316 = lshr i64 %288, 63
  %317 = lshr i64 %297, 63
  %318 = xor i64 %317, %316
  %319 = xor i64 %314, %316
  %320 = add nuw nsw i64 %319, %318
  %321 = icmp eq i64 %320, 2
  %322 = zext i1 %321 to i8
  store i8 %322, i8* %36, align 1, !tbaa !2450
  %323 = add i64 %465, 22
  store i64 %323, i64* %PC, align 8
  %324 = load i64, i64* %648, align 8
  store i64 %324, i64* %RCX, align 8, !tbaa !2428
  %325 = add i64 %324, 16
  %326 = add i64 %465, 26
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %325 to i64*
  %328 = load i64, i64* %327, align 8
  store i64 %328, i64* %RCX, align 8, !tbaa !2428
  %329 = add i64 %465, 29
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %328 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = add i64 %331, %298
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = icmp ult i64 %332, %298
  %334 = icmp ult i64 %332, %331
  %335 = or i1 %333, %334
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %12, align 1, !tbaa !2432
  %337 = trunc i64 %332 to i32
  %338 = and i32 %337, 255
  %339 = tail call i32 @llvm.ctpop.i32(i32 %338) #12
  %340 = trunc i32 %339 to i8
  %341 = and i8 %340, 1
  %342 = xor i8 %341, 1
  store i8 %342, i8* %19, align 1, !tbaa !2446
  %343 = xor i64 %331, %298
  %344 = xor i64 %343, %332
  %345 = lshr i64 %344, 4
  %346 = trunc i64 %345 to i8
  %347 = and i8 %346, 1
  store i8 %347, i8* %24, align 1, !tbaa !2447
  %348 = icmp eq i64 %332, 0
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %27, align 1, !tbaa !2448
  %350 = lshr i64 %332, 63
  %351 = trunc i64 %350 to i8
  store i8 %351, i8* %30, align 1, !tbaa !2449
  %352 = lshr i64 %331, 63
  %353 = xor i64 %350, %314
  %354 = xor i64 %350, %352
  %355 = add nuw nsw i64 %353, %354
  %356 = icmp eq i64 %355, 2
  %357 = zext i1 %356 to i8
  store i8 %357, i8* %36, align 1, !tbaa !2450
  %358 = load i64, i64* %RBP, align 8
  %359 = add i64 %358, -40
  %360 = add i64 %465, 33
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  store i64 %332, i64* %361, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_40171e

block_401633:                                     ; preds = %block_401600
  %362 = add i64 %73, 576
  %363 = add i64 %69, 11
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %362 to i64*
  %365 = load i64, i64* %364, align 8
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = add i64 %53, -64
  %367 = add i64 %69, 15
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i64*
  store i64 %365, i64* %368, align 8
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -8
  %371 = load i64, i64* %PC, align 8
  %372 = add i64 %371, 4
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %370 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RAX, align 8, !tbaa !2428
  %375 = add i64 %374, 568
  %376 = add i64 %371, 11
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %375 to i64*
  %378 = load i64, i64* %377, align 8
  store i64 %378, i64* %RAX, align 8, !tbaa !2428
  %379 = add i64 %371, 15
  store i64 %379, i64* %PC, align 8
  %380 = load i64, i64* %373, align 8
  store i64 %380, i64* %RCX, align 8, !tbaa !2428
  %381 = add i64 %380, 424
  %382 = add i64 %371, 22
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i64*
  %384 = load i64, i64* %383, align 8
  store i64 %384, i64* %RCX, align 8, !tbaa !2428
  %385 = add i64 %371, 26
  store i64 %385, i64* %PC, align 8
  %386 = load i64, i64* %373, align 8
  store i64 %386, i64* %RDX, align 8, !tbaa !2428
  %387 = add i64 %386, 440
  %388 = add i64 %371, 33
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  %390 = load i64, i64* %389, align 8
  %391 = sub i64 %384, %390
  %392 = shl i64 %391, 6
  store i64 %392, i64* %RCX, align 8, !tbaa !2428
  %393 = add i64 %392, %378
  store i64 %393, i64* %RAX, align 8, !tbaa !2428
  %394 = icmp ult i64 %393, %378
  %395 = icmp ult i64 %393, %392
  %396 = or i1 %394, %395
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %12, align 1, !tbaa !2432
  %398 = trunc i64 %393 to i32
  %399 = and i32 %398, 255
  %400 = tail call i32 @llvm.ctpop.i32(i32 %399) #12
  %401 = trunc i32 %400 to i8
  %402 = and i8 %401, 1
  %403 = xor i8 %402, 1
  store i8 %403, i8* %19, align 1, !tbaa !2446
  %404 = xor i64 %378, %393
  %405 = lshr i64 %404, 4
  %406 = trunc i64 %405 to i8
  %407 = and i8 %406, 1
  store i8 %407, i8* %24, align 1, !tbaa !2447
  %408 = icmp eq i64 %393, 0
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %27, align 1, !tbaa !2448
  %410 = lshr i64 %393, 63
  %411 = trunc i64 %410 to i8
  store i8 %411, i8* %30, align 1, !tbaa !2449
  %412 = lshr i64 %378, 63
  %413 = lshr i64 %391, 57
  %414 = and i64 %413, 1
  %415 = xor i64 %410, %412
  %416 = xor i64 %410, %414
  %417 = add nuw nsw i64 %415, %416
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  store i8 %419, i8* %36, align 1, !tbaa !2450
  %420 = load i64, i64* %RBP, align 8
  %421 = add i64 %420, -48
  %422 = add i64 %371, 44
  store i64 %422, i64* %PC, align 8
  %423 = inttoptr i64 %421 to i64*
  store i64 %393, i64* %423, align 8
  %424 = load i64, i64* %RBP, align 8
  %425 = add i64 %424, -32
  %426 = load i64, i64* %PC, align 8
  %427 = add i64 %426, 8
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %425 to i64*
  store i64 0, i64* %428, align 8
  %429 = load i64, i64* %RBP, align 8
  %430 = add i64 %429, -48
  %431 = load i64, i64* %PC, align 8
  %432 = add i64 %431, 4
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %430 to i64*
  %434 = load i64, i64* %433, align 8
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = add i64 %429, -56
  %436 = add i64 %431, 8
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %435 to i64*
  store i64 %434, i64* %437, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40167e

block_40168f:                                     ; preds = %block_40167e
  %438 = add i64 %679, 4
  store i64 %438, i64* %PC, align 8
  %439 = load i64, i64* %648, align 8
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = add i64 %439, 24
  %441 = add i64 %679, 8
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %440 to i32*
  %443 = load i32, i32* %442, align 4
  %444 = add i32 %443, -1
  %445 = icmp eq i32 %443, 0
  %446 = zext i1 %445 to i8
  store i8 %446, i8* %12, align 1, !tbaa !2432
  %447 = and i32 %444, 255
  %448 = tail call i32 @llvm.ctpop.i32(i32 %447) #12
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  %451 = xor i8 %450, 1
  store i8 %451, i8* %19, align 1, !tbaa !2446
  %452 = xor i32 %444, %443
  %453 = lshr i32 %452, 4
  %454 = trunc i32 %453 to i8
  %455 = and i8 %454, 1
  store i8 %455, i8* %24, align 1, !tbaa !2447
  %456 = icmp eq i32 %444, 0
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %27, align 1, !tbaa !2448
  %458 = lshr i32 %444, 31
  %459 = trunc i32 %458 to i8
  store i8 %459, i8* %30, align 1, !tbaa !2449
  %460 = lshr i32 %443, 31
  %461 = xor i32 %458, %460
  %462 = add nuw nsw i32 %461, %460
  %463 = icmp eq i32 %462, 2
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %36, align 1, !tbaa !2450
  %.v28 = select i1 %456, i64 14, i64 52
  %465 = add i64 %679, %.v28
  store i64 %465, i64* %PC, align 8, !tbaa !2428
  br i1 %456, label %block_40169d, label %block_4016c3

block_401786:                                     ; preds = %block_40177b
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %19, align 1, !tbaa !2446
  store i8 1, i8* %27, align 1, !tbaa !2448
  store i8 0, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  store i8 0, i8* %24, align 1, !tbaa !2447
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %466 = add i64 %697, 8
  store i64 %466, i64* %PC, align 8
  %467 = load i64, i64* %685, align 8
  store i64 %467, i64* %RDX, align 8, !tbaa !2428
  %468 = add i64 %680, -8
  %469 = add i64 %697, 12
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %468 to i64*
  %471 = load i64, i64* %470, align 8
  store i64 %471, i64* %RSI, align 8, !tbaa !2428
  %472 = add i64 %471, 424
  %473 = add i64 %697, 19
  store i64 %473, i64* %PC, align 8
  %474 = inttoptr i64 %472 to i64*
  %475 = load i64, i64* %474, align 8
  %476 = sub i64 %475, %467
  store i64 %476, i64* %RDI, align 8, !tbaa !2428
  %477 = icmp ult i64 %475, %467
  %478 = zext i1 %477 to i8
  store i8 %478, i8* %12, align 1, !tbaa !2432
  %479 = trunc i64 %476 to i32
  %480 = and i32 %479, 255
  %481 = tail call i32 @llvm.ctpop.i32(i32 %480) #12
  %482 = trunc i32 %481 to i8
  %483 = and i8 %482, 1
  %484 = xor i8 %483, 1
  store i8 %484, i8* %19, align 1, !tbaa !2446
  %485 = xor i64 %467, %475
  %486 = xor i64 %485, %476
  %487 = lshr i64 %486, 4
  %488 = trunc i64 %487 to i8
  %489 = and i8 %488, 1
  store i8 %489, i8* %24, align 1, !tbaa !2447
  %490 = icmp eq i64 %476, 0
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %27, align 1, !tbaa !2448
  %492 = lshr i64 %476, 63
  %493 = trunc i64 %492 to i8
  store i8 %493, i8* %30, align 1, !tbaa !2449
  %494 = lshr i64 %475, 63
  %495 = lshr i64 %467, 63
  %496 = xor i64 %495, %494
  %497 = xor i64 %492, %494
  %498 = add nuw nsw i64 %497, %496
  %499 = icmp eq i64 %498, 2
  %500 = zext i1 %499 to i8
  store i8 %500, i8* %36, align 1, !tbaa !2450
  %501 = add i64 %697, 29
  store i64 %501, i64* %PC, align 8
  store i64 %476, i64* %474, align 8
  %502 = load i64, i64* %RBP, align 8
  %503 = add i64 %502, -32
  %504 = load i64, i64* %PC, align 8
  %505 = add i64 %504, 4
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %503 to i64*
  %507 = load i64, i64* %506, align 8
  store i64 %507, i64* %RDX, align 8, !tbaa !2428
  %508 = add i64 %502, -8
  %509 = add i64 %504, 8
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %508 to i64*
  %511 = load i64, i64* %510, align 8
  store i64 %511, i64* %RSI, align 8, !tbaa !2428
  %512 = add i64 %511, 440
  %513 = add i64 %504, 15
  store i64 %513, i64* %PC, align 8
  %514 = inttoptr i64 %512 to i64*
  %515 = load i64, i64* %514, align 8
  %516 = sub i64 %515, %507
  store i64 %516, i64* %RDI, align 8, !tbaa !2428
  %517 = icmp ult i64 %515, %507
  %518 = zext i1 %517 to i8
  store i8 %518, i8* %12, align 1, !tbaa !2432
  %519 = trunc i64 %516 to i32
  %520 = and i32 %519, 255
  %521 = tail call i32 @llvm.ctpop.i32(i32 %520) #12
  %522 = trunc i32 %521 to i8
  %523 = and i8 %522, 1
  %524 = xor i8 %523, 1
  store i8 %524, i8* %19, align 1, !tbaa !2446
  %525 = xor i64 %507, %515
  %526 = xor i64 %525, %516
  %527 = lshr i64 %526, 4
  %528 = trunc i64 %527 to i8
  %529 = and i8 %528, 1
  store i8 %529, i8* %24, align 1, !tbaa !2447
  %530 = icmp eq i64 %516, 0
  %531 = zext i1 %530 to i8
  store i8 %531, i8* %27, align 1, !tbaa !2448
  %532 = lshr i64 %516, 63
  %533 = trunc i64 %532 to i8
  store i8 %533, i8* %30, align 1, !tbaa !2449
  %534 = lshr i64 %515, 63
  %535 = lshr i64 %507, 63
  %536 = xor i64 %535, %534
  %537 = xor i64 %532, %534
  %538 = add nuw nsw i64 %537, %536
  %539 = icmp eq i64 %538, 2
  %540 = zext i1 %539 to i8
  store i8 %540, i8* %36, align 1, !tbaa !2450
  %541 = add i64 %504, 25
  store i64 %541, i64* %PC, align 8
  store i64 %516, i64* %514, align 8
  %542 = load i64, i64* %RBP, align 8
  %543 = add i64 %542, -32
  %544 = load i64, i64* %PC, align 8
  %545 = add i64 %544, 4
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %543 to i64*
  %547 = load i64, i64* %546, align 8
  store i64 %547, i64* %RDX, align 8, !tbaa !2428
  %548 = add i64 %542, -8
  %549 = add i64 %544, 8
  store i64 %549, i64* %PC, align 8
  %550 = inttoptr i64 %548 to i64*
  %551 = load i64, i64* %550, align 8
  store i64 %551, i64* %RSI, align 8, !tbaa !2428
  %552 = add i64 %551, 576
  %553 = add i64 %544, 15
  store i64 %553, i64* %PC, align 8
  %554 = inttoptr i64 %552 to i64*
  %555 = load i64, i64* %554, align 8
  %556 = load i64, i64* %RCX, align 8
  %557 = sub i64 %556, %547
  %558 = shl i64 %557, 6
  store i64 %558, i64* %RCX, align 8, !tbaa !2428
  %559 = add i64 %558, %555
  store i64 %559, i64* %RDI, align 8, !tbaa !2428
  %560 = icmp ult i64 %559, %555
  %561 = icmp ult i64 %559, %558
  %562 = or i1 %560, %561
  %563 = zext i1 %562 to i8
  store i8 %563, i8* %12, align 1, !tbaa !2432
  %564 = trunc i64 %559 to i32
  %565 = and i32 %564, 255
  %566 = tail call i32 @llvm.ctpop.i32(i32 %565) #12
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  %569 = xor i8 %568, 1
  store i8 %569, i8* %19, align 1, !tbaa !2446
  %570 = xor i64 %555, %559
  %571 = lshr i64 %570, 4
  %572 = trunc i64 %571 to i8
  %573 = and i8 %572, 1
  store i8 %573, i8* %24, align 1, !tbaa !2447
  %574 = icmp eq i64 %559, 0
  %575 = zext i1 %574 to i8
  store i8 %575, i8* %27, align 1, !tbaa !2448
  %576 = lshr i64 %559, 63
  %577 = trunc i64 %576 to i8
  store i8 %577, i8* %30, align 1, !tbaa !2449
  %578 = lshr i64 %555, 63
  %579 = lshr i64 %557, 57
  %580 = and i64 %579, 1
  %581 = xor i64 %576, %578
  %582 = xor i64 %576, %580
  %583 = add nuw nsw i64 %581, %582
  %584 = icmp eq i64 %583, 2
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %36, align 1, !tbaa !2450
  %586 = load i64, i64* %RSI, align 8
  %587 = add i64 %586, 576
  %588 = add i64 %544, 32
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %587 to i64*
  store i64 %559, i64* %589, align 8
  %590 = load i64, i64* %RBP, align 8
  %591 = add i64 %590, -32
  %592 = load i64, i64* %PC, align 8
  %593 = add i64 %592, 4
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %591 to i64*
  %595 = load i64, i64* %594, align 8
  store i64 %595, i64* %RCX, align 8, !tbaa !2428
  %596 = add i64 %590, -8
  %597 = add i64 %592, 8
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %596 to i64*
  %599 = load i64, i64* %598, align 8
  store i64 %599, i64* %RDX, align 8, !tbaa !2428
  %600 = add i64 %599, 448
  %601 = add i64 %592, 15
  store i64 %601, i64* %PC, align 8
  %602 = inttoptr i64 %600 to i64*
  %603 = load i64, i64* %602, align 8
  %604 = add i64 %603, %595
  store i64 %604, i64* %RCX, align 8, !tbaa !2428
  %605 = icmp ult i64 %604, %595
  %606 = icmp ult i64 %604, %603
  %607 = or i1 %605, %606
  %608 = zext i1 %607 to i8
  store i8 %608, i8* %12, align 1, !tbaa !2432
  %609 = trunc i64 %604 to i32
  %610 = and i32 %609, 255
  %611 = tail call i32 @llvm.ctpop.i32(i32 %610) #12
  %612 = trunc i32 %611 to i8
  %613 = and i8 %612, 1
  %614 = xor i8 %613, 1
  store i8 %614, i8* %19, align 1, !tbaa !2446
  %615 = xor i64 %603, %595
  %616 = xor i64 %615, %604
  %617 = lshr i64 %616, 4
  %618 = trunc i64 %617 to i8
  %619 = and i8 %618, 1
  store i8 %619, i8* %24, align 1, !tbaa !2447
  %620 = icmp eq i64 %604, 0
  %621 = zext i1 %620 to i8
  store i8 %621, i8* %27, align 1, !tbaa !2448
  %622 = lshr i64 %604, 63
  %623 = trunc i64 %622 to i8
  store i8 %623, i8* %30, align 1, !tbaa !2449
  %624 = lshr i64 %595, 63
  %625 = lshr i64 %603, 63
  %626 = xor i64 %622, %624
  %627 = xor i64 %622, %625
  %628 = add nuw nsw i64 %626, %627
  %629 = icmp eq i64 %628, 2
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %36, align 1, !tbaa !2450
  %631 = add i64 %592, 22
  store i64 %631, i64* %PC, align 8
  store i64 %604, i64* %602, align 8
  %632 = load i64, i64* %RBP, align 8
  %633 = add i64 %632, -8
  %634 = load i64, i64* %PC, align 8
  %635 = add i64 %634, 4
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %633 to i64*
  %637 = load i64, i64* %636, align 8
  store i64 %637, i64* %RDI, align 8, !tbaa !2428
  %638 = add i64 %634, 926
  %639 = add i64 %634, 9
  %640 = load i64, i64* %RSP, align 8, !tbaa !2428
  %641 = add i64 %640, -8
  %642 = inttoptr i64 %641 to i64*
  store i64 %639, i64* %642, align 8
  store i64 %641, i64* %RSP, align 8, !tbaa !2428
  store i64 %638, i64* %PC, align 8, !tbaa !2428
  %643 = tail call %struct.Memory* @sub_401b90_refresh_neighbour_lists_renamed_(%struct.State* nonnull %0, i64 %638, %struct.Memory* %MEMORY.4)
  %.pre22 = load i64, i64* %RBP, align 8
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_4017fb

block_40167e:                                     ; preds = %block_401760, %block_401633
  %644 = phi i64 [ %.pre, %block_401633 ], [ %751, %block_401760 ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_401633 ], [ %MEMORY.5, %block_401760 ]
  %645 = load i64, i64* %RBP, align 8
  %646 = add i64 %645, -56
  %647 = add i64 %644, 4
  store i64 %647, i64* %PC, align 8
  %648 = inttoptr i64 %646 to i64*
  %649 = load i64, i64* %648, align 8
  store i64 %649, i64* %RAX, align 8, !tbaa !2428
  %650 = add i64 %645, -64
  %651 = add i64 %644, 8
  store i64 %651, i64* %PC, align 8
  %652 = inttoptr i64 %650 to i64*
  %653 = load i64, i64* %652, align 8
  store i64 %653, i64* %RCX, align 8, !tbaa !2428
  %654 = sub i64 %649, %653
  %655 = icmp ult i64 %649, %653
  %656 = zext i1 %655 to i8
  store i8 %656, i8* %12, align 1, !tbaa !2432
  %657 = trunc i64 %654 to i32
  %658 = and i32 %657, 255
  %659 = tail call i32 @llvm.ctpop.i32(i32 %658) #12
  %660 = trunc i32 %659 to i8
  %661 = and i8 %660, 1
  %662 = xor i8 %661, 1
  store i8 %662, i8* %19, align 1, !tbaa !2446
  %663 = xor i64 %649, %653
  %664 = xor i64 %663, %654
  %665 = lshr i64 %664, 4
  %666 = trunc i64 %665 to i8
  %667 = and i8 %666, 1
  store i8 %667, i8* %24, align 1, !tbaa !2447
  %668 = icmp eq i64 %654, 0
  %669 = zext i1 %668 to i8
  store i8 %669, i8* %27, align 1, !tbaa !2448
  %670 = lshr i64 %654, 63
  %671 = trunc i64 %670 to i8
  store i8 %671, i8* %30, align 1, !tbaa !2449
  %672 = lshr i64 %649, 63
  %673 = lshr i64 %653, 63
  %674 = xor i64 %672, %673
  %675 = xor i64 %670, %672
  %676 = add nuw nsw i64 %675, %674
  %677 = icmp eq i64 %676, 2
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %36, align 1, !tbaa !2450
  %.v27 = select i1 %655, i64 17, i64 248
  %679 = add i64 %644, %.v27
  store i64 %679, i64* %PC, align 8, !tbaa !2428
  br i1 %655, label %block_40168f, label %block_40177b.loopexit

block_40177b.loopexit:                            ; preds = %block_40167e
  br label %block_40177b

block_40177b:                                     ; preds = %block_40177b.loopexit, %block_40161f
  %680 = phi i64 [ %.pre21, %block_40161f ], [ %645, %block_40177b.loopexit ]
  %681 = phi i64 [ %.pre20, %block_40161f ], [ %679, %block_40177b.loopexit ]
  %.sink5 = phi i64 [ 333, %block_40161f ], [ 5, %block_40177b.loopexit ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_40161f ], [ %MEMORY.3, %block_40177b.loopexit ]
  %682 = add i64 %681, %.sink5
  %683 = add i64 %680, -32
  %684 = add i64 %682, 5
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i64*
  %686 = load i64, i64* %685, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %687 = trunc i64 %686 to i32
  %688 = and i32 %687, 255
  %689 = tail call i32 @llvm.ctpop.i32(i32 %688) #12
  %690 = trunc i32 %689 to i8
  %691 = and i8 %690, 1
  %692 = xor i8 %691, 1
  store i8 %692, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %24, align 1, !tbaa !2447
  %693 = icmp eq i64 %686, 0
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %27, align 1, !tbaa !2448
  %695 = lshr i64 %686, 63
  %696 = trunc i64 %695 to i8
  store i8 %696, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  %.v26 = select i1 %693, i64 128, i64 11
  %697 = add i64 %682, %.v26
  store i64 %697, i64* %PC, align 8, !tbaa !2428
  br i1 %693, label %block_4017fb, label %block_401786

block_4016c3:                                     ; preds = %block_40168f
  %698 = add i64 %645, -40
  %699 = add i64 %465, 8
  store i64 %699, i64* %PC, align 8
  %700 = inttoptr i64 %698 to i64*
  store i64 -2, i64* %700, align 8
  %701 = load i64, i64* %RBP, align 8
  %702 = add i64 %701, -56
  %703 = load i64, i64* %PC, align 8
  %704 = add i64 %703, 4
  store i64 %704, i64* %PC, align 8
  %705 = inttoptr i64 %702 to i64*
  %706 = load i64, i64* %705, align 8
  store i64 %706, i64* %RAX, align 8, !tbaa !2428
  %707 = add i64 %706, 24
  %708 = add i64 %703, 8
  store i64 %708, i64* %PC, align 8
  %709 = inttoptr i64 %707 to i32*
  %710 = load i32, i32* %709, align 4
  store i8 0, i8* %12, align 1, !tbaa !2432
  %711 = and i32 %710, 255
  %712 = tail call i32 @llvm.ctpop.i32(i32 %711) #12
  %713 = trunc i32 %712 to i8
  %714 = and i8 %713, 1
  %715 = xor i8 %714, 1
  store i8 %715, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %24, align 1, !tbaa !2447
  %716 = icmp eq i32 %710, 0
  %717 = zext i1 %716 to i8
  store i8 %717, i8* %27, align 1, !tbaa !2448
  %718 = lshr i32 %710, 31
  %719 = trunc i32 %718 to i8
  store i8 %719, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %36, align 1, !tbaa !2450
  %.v25 = select i1 %716, i64 14, i64 78
  %720 = add i64 %703, %.v25
  store i64 %720, i64* %PC, align 8, !tbaa !2428
  br i1 %716, label %block_4016d9, label %block_40171e

block_401760:                                     ; preds = %block_40172c, %block_40173d
  %721 = phi i64 [ %.pre19, %block_40173d ], [ %192, %block_40172c ]
  %MEMORY.5 = phi %struct.Memory* [ %96, %block_40173d ], [ %MEMORY.3, %block_40172c ]
  %722 = load i64, i64* %RBP, align 8
  %723 = add i64 %722, -56
  %724 = add i64 %721, 9
  store i64 %724, i64* %PC, align 8
  %725 = inttoptr i64 %723 to i64*
  %726 = load i64, i64* %725, align 8
  %727 = add i64 %726, 64
  store i64 %727, i64* %RAX, align 8, !tbaa !2428
  %728 = icmp ugt i64 %726, -65
  %729 = zext i1 %728 to i8
  store i8 %729, i8* %12, align 1, !tbaa !2432
  %730 = trunc i64 %727 to i32
  %731 = and i32 %730, 255
  %732 = tail call i32 @llvm.ctpop.i32(i32 %731) #12
  %733 = trunc i32 %732 to i8
  %734 = and i8 %733, 1
  %735 = xor i8 %734, 1
  store i8 %735, i8* %19, align 1, !tbaa !2446
  %736 = xor i64 %727, %726
  %737 = lshr i64 %736, 4
  %738 = trunc i64 %737 to i8
  %739 = and i8 %738, 1
  store i8 %739, i8* %24, align 1, !tbaa !2447
  %740 = icmp eq i64 %727, 0
  %741 = zext i1 %740 to i8
  store i8 %741, i8* %27, align 1, !tbaa !2448
  %742 = lshr i64 %727, 63
  %743 = trunc i64 %742 to i8
  store i8 %743, i8* %30, align 1, !tbaa !2449
  %744 = lshr i64 %726, 63
  %745 = xor i64 %742, %744
  %746 = add nuw nsw i64 %745, %742
  %747 = icmp eq i64 %746, 2
  %748 = zext i1 %747 to i8
  store i8 %748, i8* %36, align 1, !tbaa !2450
  %749 = add i64 %721, 17
  store i64 %749, i64* %PC, align 8
  store i64 %727, i64* %725, align 8
  %750 = load i64, i64* %PC, align 8
  %751 = add i64 %750, -243
  store i64 %751, i64* %PC, align 8, !tbaa !2428
  br label %block_40167e

block_401704:                                     ; preds = %block_4016d9
  %752 = add i64 %243, 16
  %753 = add i64 %237, 12
  store i64 %753, i64* %PC, align 8
  %754 = inttoptr i64 %752 to i64*
  %755 = load i64, i64* %754, align 8
  store i64 %755, i64* %RCX, align 8, !tbaa !2428
  %756 = add i64 %755, 48
  %757 = add i64 %237, 16
  store i64 %757, i64* %PC, align 8
  %758 = inttoptr i64 %756 to i64*
  store i64 %241, i64* %758, align 8
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_401714

block_401714:                                     ; preds = %block_401704, %block_4016ef
  %759 = phi i64 [ %.pre17, %block_401704 ], [ %82, %block_4016ef ]
  %760 = add i64 %759, 5
  store i64 %760, i64* %PC, align 8, !tbaa !2428
  br label %block_40171e
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4007f0__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4007f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_605ff0__got_type* @seg_605ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #12
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2447
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_400802, label %block_400800

block_400800:                                     ; preds = %block_4007f0
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_400802

block_400802:                                     ; preds = %block_400800, %block_4007f0
  %27 = phi i64 [ %22, %block_4007f0 ], [ %.pre1, %block_400800 ]
  %28 = phi i64 [ %4, %block_4007f0 ], [ %.pre, %block_400800 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4007f0 ], [ %26, %block_400800 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #12
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %29, %28
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2447
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2448
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2449
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2450
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400930__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_400930:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402fd0_primal_net_simplex(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402fd0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = load i64, i64* %R15, align 8
  %11 = add i64 %9, 5
  store i64 %11, i64* %PC, align 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13, align 8
  %14 = load i64, i64* %R14, align 8
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 2
  store i64 %16, i64* %PC, align 8
  %17 = add i64 %6, -24
  %18 = inttoptr i64 %17 to i64*
  store i64 %14, i64* %18, align 8
  %19 = load i64, i64* %R13, align 8
  %20 = load i64, i64* %PC, align 8
  %21 = add i64 %20, 2
  store i64 %21, i64* %PC, align 8
  %22 = add i64 %6, -32
  %23 = inttoptr i64 %22 to i64*
  store i64 %19, i64* %23, align 8
  %24 = load i64, i64* %R12, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 2
  store i64 %26, i64* %PC, align 8
  %27 = add i64 %6, -40
  %28 = inttoptr i64 %27 to i64*
  store i64 %24, i64* %28, align 8
  %29 = load i64, i64* %RBX, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %6, -48
  %33 = inttoptr i64 %32 to i64*
  store i64 %29, i64* %33, align 8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %6, -296
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  %36 = icmp ult i64 %32, 248
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %37, i8* %38, align 1, !tbaa !2432
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #12
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2446
  %46 = xor i64 %32, 16
  %47 = xor i64 %46, %35
  %48 = lshr i64 %47, 4
  %49 = trunc i64 %48 to i8
  %50 = and i8 %49, 1
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %50, i8* %51, align 1, !tbaa !2447
  %52 = icmp eq i64 %35, 0
  %53 = zext i1 %52 to i8
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %53, i8* %54, align 1, !tbaa !2448
  %55 = lshr i64 %35, 63
  %56 = trunc i64 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %56, i8* %57, align 1, !tbaa !2449
  %58 = lshr i64 %32, 63
  %59 = xor i64 %55, %58
  %60 = add nuw nsw i64 %59, %58
  %61 = icmp eq i64 %60, 2
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %62, i8* %63, align 1, !tbaa !2450
  %64 = load i64, i64* %RBP, align 8
  %65 = add i64 %64, -48
  %66 = load i64, i64* %RDI, align 8
  %67 = add i64 %34, 11
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %65 to i64*
  store i64 %66, i64* %68, align 8
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -72
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 8
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i64*
  store i64 0, i64* %73, align 8
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -48
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 4
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %75 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %80 = add i64 %79, 568
  %81 = add i64 %76, 11
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %RDI, align 8, !tbaa !2428
  %84 = add i64 %74, -152
  %85 = add i64 %76, 18
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %84 to i64*
  store i64 %83, i64* %86, align 8
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -48
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %88 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RDI, align 8, !tbaa !2428
  %93 = add i64 %92, 576
  %94 = add i64 %89, 11
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RDI, align 8, !tbaa !2428
  %97 = add i64 %87, -160
  %98 = add i64 %89, 18
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  store i64 %96, i64* %99, align 8
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -48
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RDI, align 8, !tbaa !2428
  %106 = add i64 %105, 424
  %107 = add i64 %102, 11
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = add i64 %100, -176
  %111 = add i64 %102, 18
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %109, i64* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -48
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = add i64 %118, 600
  store i64 %119, i64* %RDI, align 8, !tbaa !2428
  %120 = icmp ugt i64 %118, -601
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %38, align 1, !tbaa !2432
  %122 = trunc i64 %119 to i32
  %123 = and i32 %122, 255
  %124 = tail call i32 @llvm.ctpop.i32(i32 %123) #12
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = xor i8 %126, 1
  store i8 %127, i8* %45, align 1, !tbaa !2446
  %128 = xor i64 %118, 16
  %129 = xor i64 %128, %119
  %130 = lshr i64 %129, 4
  %131 = trunc i64 %130 to i8
  %132 = and i8 %131, 1
  store i8 %132, i8* %51, align 1, !tbaa !2447
  %133 = icmp eq i64 %119, 0
  %134 = zext i1 %133 to i8
  store i8 %134, i8* %54, align 1, !tbaa !2448
  %135 = lshr i64 %119, 63
  %136 = trunc i64 %135 to i8
  store i8 %136, i8* %57, align 1, !tbaa !2449
  %137 = lshr i64 %118, 63
  %138 = xor i64 %135, %137
  %139 = add nuw nsw i64 %138, %135
  %140 = icmp eq i64 %139, 2
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %63, align 1, !tbaa !2450
  %142 = add i64 %113, -200
  %143 = add i64 %115, 18
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %142 to i64*
  store i64 %119, i64* %144, align 8
  %145 = load i64, i64* %RBP, align 8
  %146 = add i64 %145, -48
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, 4
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %146 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = add i64 %150, 608
  store i64 %151, i64* %RDI, align 8, !tbaa !2428
  %152 = icmp ugt i64 %150, -609
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %38, align 1, !tbaa !2432
  %154 = trunc i64 %151 to i32
  %155 = and i32 %154, 255
  %156 = tail call i32 @llvm.ctpop.i32(i32 %155) #12
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  %159 = xor i8 %158, 1
  store i8 %159, i8* %45, align 1, !tbaa !2446
  %160 = xor i64 %151, %150
  %161 = lshr i64 %160, 4
  %162 = trunc i64 %161 to i8
  %163 = and i8 %162, 1
  store i8 %163, i8* %51, align 1, !tbaa !2447
  %164 = icmp eq i64 %151, 0
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %54, align 1, !tbaa !2448
  %166 = lshr i64 %151, 63
  %167 = trunc i64 %166 to i8
  store i8 %167, i8* %57, align 1, !tbaa !2449
  %168 = lshr i64 %150, 63
  %169 = xor i64 %166, %168
  %170 = add nuw nsw i64 %169, %166
  %171 = icmp eq i64 %170, 2
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %63, align 1, !tbaa !2450
  %173 = add i64 %145, -208
  %174 = add i64 %147, 18
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i64*
  store i64 %151, i64* %175, align 8
  %176 = load i64, i64* %RBP, align 8
  %177 = add i64 %176, -48
  %178 = load i64, i64* %PC, align 8
  %179 = add i64 %178, 4
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %177 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = add i64 %181, 616
  store i64 %182, i64* %RDI, align 8, !tbaa !2428
  %183 = icmp ugt i64 %181, -617
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %38, align 1, !tbaa !2432
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = tail call i32 @llvm.ctpop.i32(i32 %186) #12
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %45, align 1, !tbaa !2446
  %191 = xor i64 %182, %181
  %192 = lshr i64 %191, 4
  %193 = trunc i64 %192 to i8
  %194 = and i8 %193, 1
  store i8 %194, i8* %51, align 1, !tbaa !2447
  %195 = icmp eq i64 %182, 0
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %54, align 1, !tbaa !2448
  %197 = lshr i64 %182, 63
  %198 = trunc i64 %197 to i8
  store i8 %198, i8* %57, align 1, !tbaa !2449
  %199 = lshr i64 %181, 63
  %200 = xor i64 %197, %199
  %201 = add nuw nsw i64 %200, %197
  %202 = icmp eq i64 %201, 2
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %63, align 1, !tbaa !2450
  %204 = add i64 %176, -216
  %205 = add i64 %178, 18
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i64*
  store i64 %182, i64* %206, align 8
  %207 = bitcast i64* %RSP to i64**
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_40305c

block_40306e:                                     ; preds = %block_40305c
  %210 = add i64 %698, -48
  %211 = add i64 %713, 734
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i64*
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %214 = add i64 %713, -5102
  %215 = add i64 %713, 739
  %216 = load i64, i64* %RSP, align 8, !tbaa !2428
  %217 = add i64 %216, -8
  %218 = inttoptr i64 %217 to i64*
  store i64 %215, i64* %218, align 8
  store i64 %217, i64* %RSP, align 8, !tbaa !2428
  store i64 %214, i64* %PC, align 8, !tbaa !2428
  %219 = tail call %struct.Memory* @sub_401c80_refresh_potential_renamed_(%struct.State* nonnull %0, i64 %214, %struct.Memory* %MEMORY.6)
  %220 = load i64, i64* %RBP, align 8
  %221 = add i64 %220, -216
  %222 = load i64, i64* %PC, align 8
  %223 = add i64 %222, 7
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %221 to i64*
  %225 = load i64, i64* %224, align 8
  store i64 %225, i64* %RDI, align 8, !tbaa !2428
  %226 = load i64, i64* %RAX, align 8
  %227 = add i64 %222, 10
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %225 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = add i64 %229, %226
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = icmp ult i64 %230, %226
  %232 = icmp ult i64 %230, %229
  %233 = or i1 %231, %232
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %38, align 1, !tbaa !2432
  %235 = trunc i64 %230 to i32
  %236 = and i32 %235, 255
  %237 = tail call i32 @llvm.ctpop.i32(i32 %236) #12
  %238 = trunc i32 %237 to i8
  %239 = and i8 %238, 1
  %240 = xor i8 %239, 1
  store i8 %240, i8* %45, align 1, !tbaa !2446
  %241 = xor i64 %229, %226
  %242 = xor i64 %241, %230
  %243 = lshr i64 %242, 4
  %244 = trunc i64 %243 to i8
  %245 = and i8 %244, 1
  store i8 %245, i8* %51, align 1, !tbaa !2447
  %246 = icmp eq i64 %230, 0
  %247 = zext i1 %246 to i8
  store i8 %247, i8* %54, align 1, !tbaa !2448
  %248 = lshr i64 %230, 63
  %249 = trunc i64 %248 to i8
  store i8 %249, i8* %57, align 1, !tbaa !2449
  %250 = lshr i64 %226, 63
  %251 = lshr i64 %229, 63
  %252 = xor i64 %248, %250
  %253 = xor i64 %248, %251
  %254 = add nuw nsw i64 %252, %253
  %255 = icmp eq i64 %254, 2
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %63, align 1, !tbaa !2450
  %257 = add i64 %222, 13
  store i64 %257, i64* %PC, align 8
  store i64 %230, i64* %228, align 8
  %258 = load i64, i64* %RBP, align 8
  %259 = add i64 %258, -48
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, 4
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %259 to i64*
  %263 = load i64, i64* %262, align 8
  store i64 %263, i64* %RDI, align 8, !tbaa !2428
  %264 = add i64 %260, -4590
  %265 = add i64 %260, 9
  %266 = load i64, i64* %RSP, align 8, !tbaa !2428
  %267 = add i64 %266, -8
  %268 = inttoptr i64 %267 to i64*
  store i64 %265, i64* %268, align 8
  store i64 %267, i64* %RSP, align 8, !tbaa !2428
  store i64 %264, i64* %PC, align 8, !tbaa !2428
  %269 = tail call %struct.Memory* @sub_402170_primal_feasible_renamed_(%struct.State* nonnull %0, i64 %264, %struct.Memory* %219)
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -48
  %272 = load i64, i64* %PC, align 8
  %273 = add i64 %272, 4
  store i64 %273, i64* %PC, align 8
  %274 = inttoptr i64 %271 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %RDI, align 8, !tbaa !2428
  %276 = add i64 %270, -224
  %277 = load i64, i64* %RAX, align 8
  %278 = add i64 %272, 11
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %276 to i64*
  store i64 %277, i64* %279, align 8
  %280 = load i64, i64* %PC, align 8
  %281 = add i64 %280, -4146
  %282 = add i64 %280, 5
  %283 = load i64, i64* %RSP, align 8, !tbaa !2428
  %284 = add i64 %283, -8
  %285 = inttoptr i64 %284 to i64*
  store i64 %282, i64* %285, align 8
  store i64 %284, i64* %RSP, align 8, !tbaa !2428
  store i64 %281, i64* %PC, align 8, !tbaa !2428
  %286 = tail call %struct.Memory* @sub_402340_dual_feasible_renamed_(%struct.State* nonnull %0, i64 %281, %struct.Memory* %269)
  %287 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i64 0, i64* %RDI, align 8, !tbaa !2428
  %288 = load i64, i64* %RBP, align 8
  %289 = add i64 %288, -232
  %290 = load i64, i64* %RAX, align 8
  %291 = add i64 %287, 11
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %289 to i64*
  store i64 %290, i64* %292, align 8
  %293 = load i64, i64* %RDI, align 8
  %294 = load i64, i64* %PC, align 8
  store i64 %293, i64* %RAX, align 8, !tbaa !2428
  %295 = load i64, i64* %RSP, align 8
  %296 = add i64 %295, 248
  store i64 %296, i64* %RSP, align 8, !tbaa !2428
  %297 = icmp ugt i64 %295, -249
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %38, align 1, !tbaa !2432
  %299 = trunc i64 %296 to i32
  %300 = and i32 %299, 255
  %301 = tail call i32 @llvm.ctpop.i32(i32 %300) #12
  %302 = trunc i32 %301 to i8
  %303 = and i8 %302, 1
  %304 = xor i8 %303, 1
  store i8 %304, i8* %45, align 1, !tbaa !2446
  %305 = xor i64 %295, 16
  %306 = xor i64 %305, %296
  %307 = lshr i64 %306, 4
  %308 = trunc i64 %307 to i8
  %309 = and i8 %308, 1
  store i8 %309, i8* %51, align 1, !tbaa !2447
  %310 = icmp eq i64 %296, 0
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %54, align 1, !tbaa !2448
  %312 = lshr i64 %296, 63
  %313 = trunc i64 %312 to i8
  store i8 %313, i8* %57, align 1, !tbaa !2449
  %314 = lshr i64 %295, 63
  %315 = xor i64 %312, %314
  %316 = add nuw nsw i64 %315, %312
  %317 = icmp eq i64 %316, 2
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %63, align 1, !tbaa !2450
  %319 = add i64 %294, 11
  store i64 %319, i64* %PC, align 8
  %320 = add i64 %295, 256
  %321 = inttoptr i64 %296 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RBX, align 8, !tbaa !2428
  store i64 %320, i64* %RSP, align 8, !tbaa !2428
  %323 = add i64 %294, 13
  store i64 %323, i64* %PC, align 8
  %324 = add i64 %295, 264
  %325 = inttoptr i64 %320 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %R12, align 8, !tbaa !2428
  store i64 %324, i64* %RSP, align 8, !tbaa !2428
  %327 = add i64 %294, 15
  store i64 %327, i64* %PC, align 8
  %328 = add i64 %295, 272
  %329 = inttoptr i64 %324 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %R13, align 8, !tbaa !2428
  store i64 %328, i64* %RSP, align 8, !tbaa !2428
  %331 = add i64 %294, 17
  store i64 %331, i64* %PC, align 8
  %332 = add i64 %295, 280
  %333 = inttoptr i64 %328 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %R14, align 8, !tbaa !2428
  store i64 %332, i64* %RSP, align 8, !tbaa !2428
  %335 = add i64 %294, 19
  store i64 %335, i64* %PC, align 8
  %336 = add i64 %295, 288
  %337 = inttoptr i64 %332 to i64*
  %338 = load i64, i64* %337, align 8
  store i64 %338, i64* %R15, align 8, !tbaa !2428
  store i64 %336, i64* %RSP, align 8, !tbaa !2428
  %339 = add i64 %294, 20
  store i64 %339, i64* %PC, align 8
  %340 = add i64 %295, 296
  %341 = inttoptr i64 %336 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RBP, align 8, !tbaa !2428
  store i64 %340, i64* %RSP, align 8, !tbaa !2428
  %343 = add i64 %294, 21
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %340 to i64*
  %345 = load i64, i64* %344, align 8
  store i64 %345, i64* %PC, align 8, !tbaa !2428
  %346 = add i64 %295, 304
  store i64 %346, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %286

block_40316a:                                     ; preds = %block_403135
  store i32 2, i32* %639, align 4
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_403178

block_4030e7:                                     ; preds = %block_4030a5
  %347 = add i64 %1093, 8
  %348 = add i64 %1089, 11
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %347 to i64*
  %350 = load i64, i64* %349, align 8
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = add i64 %1071, -96
  %352 = add i64 %1089, 15
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  store i64 %350, i64* %353, align 8
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -136
  %356 = load i64, i64* %PC, align 8
  %357 = add i64 %356, 7
  store i64 %357, i64* %PC, align 8
  %358 = inttoptr i64 %355 to i64*
  %359 = load i64, i64* %358, align 8
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = add i64 %359, 16
  %361 = add i64 %356, 11
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %360 to i64*
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = add i64 %354, -104
  %365 = add i64 %356, 15
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i64*
  store i64 %363, i64* %366, align 8
  %.pre16 = load i64, i64* %PC, align 8
  br label %block_403105

block_403259:                                     ; preds = %block_403237
  store i64 0, i64* %520, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_403261

block_403157:                                     ; preds = %block_403135
  store i32 1, i32* %639, align 4
  %367 = load i64, i64* %PC, align 8
  %368 = add i64 %367, 19
  store i64 %368, i64* %PC, align 8, !tbaa !2428
  br label %block_403178

block_4030c4:                                     ; preds = %block_4030a5
  %369 = add i64 %1093, 16
  %370 = add i64 %1089, 11
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RAX, align 8, !tbaa !2428
  %373 = add i64 %1071, -96
  %374 = add i64 %1089, 15
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  store i64 %372, i64* %375, align 8
  %376 = load i64, i64* %RBP, align 8
  %377 = add i64 %376, -136
  %378 = load i64, i64* %PC, align 8
  %379 = add i64 %378, 7
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380, align 8
  store i64 %381, i64* %RAX, align 8, !tbaa !2428
  %382 = add i64 %381, 8
  %383 = add i64 %378, 11
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to i64*
  %385 = load i64, i64* %384, align 8
  store i64 %385, i64* %RAX, align 8, !tbaa !2428
  %386 = add i64 %376, -104
  %387 = add i64 %378, 15
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %386 to i64*
  store i64 %385, i64* %388, align 8
  %389 = load i64, i64* %PC, align 8
  %390 = add i64 %389, 35
  store i64 %390, i64* %PC, align 8, !tbaa !2428
  br label %block_403105

block_403178:                                     ; preds = %block_403157, %block_40316a
  %391 = phi i64 [ %368, %block_403157 ], [ %.pre17, %block_40316a ]
  %392 = load i64, i64* %RBP, align 8
  %393 = add i64 %392, -56
  %394 = add i64 %391, 5
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %393 to i64*
  %396 = load i64, i64* %395, align 8
  store i8 0, i8* %38, align 1, !tbaa !2432
  %397 = trunc i64 %396 to i32
  %398 = and i32 %397, 255
  %399 = tail call i32 @llvm.ctpop.i32(i32 %398) #12
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  store i8 %402, i8* %45, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2447
  %403 = icmp eq i64 %396, 0
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %54, align 1, !tbaa !2448
  %405 = lshr i64 %396, 63
  %406 = trunc i64 %405 to i8
  store i8 %406, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  %.v35 = select i1 %403, i64 28, i64 11
  %407 = add i64 %391, %.v35
  store i64 %407, i64* %PC, align 8, !tbaa !2428
  br i1 %403, label %block_403336, label %block_403183

block_4031c2:                                     ; preds = %block_403199, %block_4031a4
  %408 = phi i64 [ %796, %block_403199 ], [ %.pre19, %block_4031a4 ]
  %409 = phi i64 [ %826, %block_403199 ], [ %.pre18, %block_4031a4 ]
  %410 = add i64 %409, -112
  %411 = add i64 %408, 4
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %410 to i64*
  %413 = load i64, i64* %412, align 8
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = add i64 %413, 24
  %415 = add i64 %408, 8
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i64*
  %417 = load i64, i64* %416, align 8
  store i64 %417, i64* %RAX, align 8, !tbaa !2428
  %418 = add i64 %409, -120
  %419 = add i64 %408, 12
  store i64 %419, i64* %PC, align 8
  %420 = inttoptr i64 %418 to i64*
  store i64 %417, i64* %420, align 8
  %421 = load i64, i64* %RBP, align 8
  %422 = add i64 %421, -112
  %423 = load i64, i64* %PC, align 8
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %422 to i64*
  %426 = load i64, i64* %425, align 8
  store i64 %426, i64* %RAX, align 8, !tbaa !2428
  %427 = add i64 %426, 48
  %428 = add i64 %423, 8
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %421, -144
  %432 = add i64 %423, 15
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %431 to i64*
  store i64 %430, i64* %433, align 8
  %434 = load i64, i64* %RBP, align 8
  %435 = add i64 %434, -80
  %436 = load i64, i64* %PC, align 8
  %437 = add i64 %436, 4
  store i64 %437, i64* %PC, align 8
  %438 = inttoptr i64 %435 to i64*
  %439 = load i64, i64* %438, align 8
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = add i64 %434, -112
  %441 = add i64 %436, 8
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %440 to i64*
  %443 = load i64, i64* %442, align 8
  store i64 %443, i64* %RCX, align 8, !tbaa !2428
  %444 = add i64 %443, 8
  %445 = add i64 %436, 12
  store i64 %445, i64* %PC, align 8
  %446 = inttoptr i64 %444 to i32*
  %447 = load i32, i32* %446, align 4
  %448 = sext i32 %447 to i64
  store i64 %448, i64* %RCX, align 8, !tbaa !2428
  %449 = sub i64 %439, %448
  %450 = icmp ult i64 %439, %448
  %451 = zext i1 %450 to i8
  store i8 %451, i8* %38, align 1, !tbaa !2432
  %452 = trunc i64 %449 to i32
  %453 = and i32 %452, 255
  %454 = tail call i32 @llvm.ctpop.i32(i32 %453) #12
  %455 = trunc i32 %454 to i8
  %456 = and i8 %455, 1
  %457 = xor i8 %456, 1
  store i8 %457, i8* %45, align 1, !tbaa !2446
  %458 = xor i64 %439, %448
  %459 = xor i64 %458, %449
  %460 = lshr i64 %459, 4
  %461 = trunc i64 %460 to i8
  %462 = and i8 %461, 1
  store i8 %462, i8* %51, align 1, !tbaa !2447
  %463 = icmp eq i64 %449, 0
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %54, align 1, !tbaa !2448
  %465 = lshr i64 %449, 63
  %466 = trunc i64 %465 to i8
  store i8 %466, i8* %57, align 1, !tbaa !2449
  %467 = lshr i64 %439, 63
  %468 = lshr i64 %448, 63
  %469 = xor i64 %467, %468
  %470 = xor i64 %465, %467
  %471 = add nuw nsw i64 %470, %469
  %472 = icmp eq i64 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %63, align 1, !tbaa !2450
  %.v28 = select i1 %463, i64 37, i64 21
  %474 = add i64 %436, %.v28
  %475 = add i64 %434, -184
  %476 = add i64 %474, 11
  store i64 %476, i64* %PC, align 8
  %477 = inttoptr i64 %475 to i64*
  br i1 %463, label %block_403202, label %block_4031f2

block_403237:                                     ; preds = %block_40321b, %block_40322f
  %478 = phi i64 [ %696, %block_40321b ], [ %.pre21, %block_40322f ]
  %479 = load i64, i64* %RBP, align 8
  %480 = add i64 %479, -136
  %481 = add i64 %478, 7
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i64*
  %483 = load i64, i64* %482, align 8
  store i64 %483, i64* %RAX, align 8, !tbaa !2428
  %484 = add i64 %483, 8
  %485 = add i64 %478, 11
  store i64 %485, i64* %PC, align 8
  %486 = inttoptr i64 %484 to i64*
  %487 = load i64, i64* %486, align 8
  store i64 %487, i64* %RAX, align 8, !tbaa !2428
  %488 = add i64 %479, -96
  %489 = add i64 %478, 15
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %488 to i64*
  %491 = load i64, i64* %490, align 8
  %492 = sub i64 %487, %491
  %493 = icmp ult i64 %487, %491
  %494 = zext i1 %493 to i8
  store i8 %494, i8* %38, align 1, !tbaa !2432
  %495 = trunc i64 %492 to i32
  %496 = and i32 %495, 255
  %497 = tail call i32 @llvm.ctpop.i32(i32 %496) #12
  %498 = trunc i32 %497 to i8
  %499 = and i8 %498, 1
  %500 = xor i8 %499, 1
  store i8 %500, i8* %45, align 1, !tbaa !2446
  %501 = xor i64 %491, %487
  %502 = xor i64 %501, %492
  %503 = lshr i64 %502, 4
  %504 = trunc i64 %503 to i8
  %505 = and i8 %504, 1
  store i8 %505, i8* %51, align 1, !tbaa !2447
  %506 = icmp eq i64 %492, 0
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %54, align 1, !tbaa !2448
  %508 = lshr i64 %492, 63
  %509 = trunc i64 %508 to i8
  store i8 %509, i8* %57, align 1, !tbaa !2449
  %510 = lshr i64 %487, 63
  %511 = lshr i64 %491, 63
  %512 = xor i64 %511, %510
  %513 = xor i64 %508, %510
  %514 = add nuw nsw i64 %513, %512
  %515 = icmp eq i64 %514, 2
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %63, align 1, !tbaa !2450
  %.v29 = select i1 %506, i64 21, i64 34
  %517 = add i64 %478, %.v29
  %518 = add i64 %479, -88
  %519 = add i64 %517, 8
  store i64 %519, i64* %PC, align 8
  %520 = inttoptr i64 %518 to i64*
  br i1 %506, label %block_40324c, label %block_403259

block_403336:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_40331b, %block_403178, %block_403183
  %.sink5 = phi i64 [ 431, %block_403183 ], [ 431, %block_403178 ], [ 18, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ 18, %block_40331b ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.6, %block_403183 ], [ %MEMORY.6, %block_403178 ], [ %1028, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ], [ %724, %block_40331b ]
  %521 = load i64, i64* %PC, align 8
  %522 = add i64 %.sink5, %521
  store i64 %522, i64* %PC, align 8, !tbaa !2428
  br label %block_403343

block_403073:                                     ; preds = %block_40305c
  %523 = add i64 %698, -192
  store i64 %523, i64* %RCX, align 8, !tbaa !2428
  %524 = add i64 %698, -176
  %525 = add i64 %713, 14
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %524 to i64*
  %527 = load i64, i64* %526, align 8
  store i64 %527, i64* %RDI, align 8, !tbaa !2428
  %528 = add i64 %698, -152
  %529 = add i64 %713, 21
  store i64 %529, i64* %PC, align 8
  %530 = inttoptr i64 %528 to i64*
  %531 = load i64, i64* %530, align 8
  store i64 %531, i64* %RSI, align 8, !tbaa !2428
  %532 = add i64 %698, -160
  %533 = add i64 %713, 28
  store i64 %533, i64* %PC, align 8
  %534 = inttoptr i64 %532 to i64*
  %535 = load i64, i64* %534, align 8
  store i64 %535, i64* %RDX, align 8, !tbaa !2428
  %536 = add i64 %713, -1811
  %537 = add i64 %713, 33
  %538 = load i64, i64* %RSP, align 8, !tbaa !2428
  %539 = add i64 %538, -8
  %540 = inttoptr i64 %539 to i64*
  store i64 %537, i64* %540, align 8
  store i64 %539, i64* %RSP, align 8, !tbaa !2428
  store i64 %536, i64* %PC, align 8, !tbaa !2428
  %541 = tail call %struct.Memory* @sub_402960_primal_bea_mpp_renamed_(%struct.State* nonnull %0, i64 %536, %struct.Memory* %MEMORY.6)
  %542 = load i64, i64* %RBP, align 8
  %543 = add i64 %542, -136
  %544 = load i64, i64* %RAX, align 8
  %545 = load i64, i64* %PC, align 8
  %546 = add i64 %545, 7
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %543 to i64*
  store i64 %544, i64* %547, align 8
  %548 = load i64, i64* %RAX, align 8
  %549 = load i64, i64* %PC, align 8
  store i8 0, i8* %38, align 1, !tbaa !2432
  %550 = trunc i64 %548 to i32
  %551 = and i32 %550, 255
  %552 = tail call i32 @llvm.ctpop.i32(i32 %551) #12
  %553 = trunc i32 %552 to i8
  %554 = and i8 %553, 1
  %555 = xor i8 %554, 1
  store i8 %555, i8* %45, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2447
  %556 = icmp eq i64 %548, 0
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %54, align 1, !tbaa !2448
  %558 = lshr i64 %548, 63
  %559 = trunc i64 %558 to i8
  store i8 %559, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  %.v30 = select i1 %556, i64 672, i64 10
  %560 = add i64 %549, %.v30
  store i64 %560, i64* %PC, align 8, !tbaa !2428
  %561 = load i64, i64* %RBP, align 8
  br i1 %556, label %block_40333b, label %block_4030a5

block_40322f:                                     ; preds = %block_40320d
  %562 = add i64 %764, -56
  %563 = add i64 %781, 4
  store i64 %563, i64* %PC, align 8
  %564 = inttoptr i64 %562 to i64*
  %565 = load i64, i64* %564, align 8
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = add i64 %764, -64
  %567 = add i64 %781, 8
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %566 to i64*
  store i64 %565, i64* %568, align 8
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_403237

block_40333b:                                     ; preds = %block_403073
  %569 = add i64 %561, -72
  %570 = add i64 %560, 8
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %569 to i64*
  store i64 1, i64* %571, align 8
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_403343

block_403135:                                     ; preds = %block_403105
  %572 = add i64 %826, -208
  %573 = add i64 %842, 7
  store i64 %573, i64* %PC, align 8
  %574 = inttoptr i64 %572 to i64*
  %575 = load i64, i64* %574, align 8
  store i64 %575, i64* %RAX, align 8, !tbaa !2428
  %576 = add i64 %842, 10
  store i64 %576, i64* %PC, align 8
  %577 = inttoptr i64 %575 to i64*
  %578 = load i64, i64* %577, align 8
  %579 = add i64 %578, 1
  store i64 %579, i64* %RCX, align 8, !tbaa !2428
  %580 = icmp eq i64 %578, -1
  %581 = icmp eq i64 %579, 0
  %582 = or i1 %580, %581
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %38, align 1, !tbaa !2432
  %584 = trunc i64 %579 to i32
  %585 = and i32 %584, 255
  %586 = tail call i32 @llvm.ctpop.i32(i32 %585) #12
  %587 = trunc i32 %586 to i8
  %588 = and i8 %587, 1
  %589 = xor i8 %588, 1
  store i8 %589, i8* %45, align 1, !tbaa !2446
  %590 = xor i64 %579, %578
  %591 = lshr i64 %590, 4
  %592 = trunc i64 %591 to i8
  %593 = and i8 %592, 1
  store i8 %593, i8* %51, align 1, !tbaa !2447
  %594 = zext i1 %581 to i8
  store i8 %594, i8* %54, align 1, !tbaa !2448
  %595 = lshr i64 %579, 63
  %596 = trunc i64 %595 to i8
  store i8 %596, i8* %57, align 1, !tbaa !2449
  %597 = lshr i64 %578, 63
  %598 = xor i64 %595, %597
  %599 = add nuw nsw i64 %598, %595
  %600 = icmp eq i64 %599, 2
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %63, align 1, !tbaa !2450
  %602 = add i64 %842, 17
  store i64 %602, i64* %PC, align 8
  store i64 %579, i64* %577, align 8
  %603 = load i64, i64* %RBP, align 8
  %604 = add i64 %603, -136
  %605 = load i64, i64* %PC, align 8
  %606 = add i64 %605, 7
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %604 to i64*
  %608 = load i64, i64* %607, align 8
  store i64 %608, i64* %RAX, align 8, !tbaa !2428
  %609 = add i64 %608, 24
  %610 = add i64 %605, 11
  store i64 %610, i64* %PC, align 8
  %611 = inttoptr i64 %609 to i32*
  %612 = load i32, i32* %611, align 4
  %613 = add i32 %612, -2
  %614 = icmp ult i32 %612, 2
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %38, align 1, !tbaa !2432
  %616 = and i32 %613, 255
  %617 = tail call i32 @llvm.ctpop.i32(i32 %616) #12
  %618 = trunc i32 %617 to i8
  %619 = and i8 %618, 1
  %620 = xor i8 %619, 1
  store i8 %620, i8* %45, align 1, !tbaa !2446
  %621 = xor i32 %613, %612
  %622 = lshr i32 %621, 4
  %623 = trunc i32 %622 to i8
  %624 = and i8 %623, 1
  store i8 %624, i8* %51, align 1, !tbaa !2447
  %625 = icmp eq i32 %613, 0
  %626 = zext i1 %625 to i8
  store i8 %626, i8* %54, align 1, !tbaa !2448
  %627 = lshr i32 %613, 31
  %628 = trunc i32 %627 to i8
  store i8 %628, i8* %57, align 1, !tbaa !2449
  %629 = lshr i32 %612, 31
  %630 = xor i32 %627, %629
  %631 = add nuw nsw i32 %630, %629
  %632 = icmp eq i32 %631, 2
  %633 = zext i1 %632 to i8
  store i8 %633, i8* %63, align 1, !tbaa !2450
  %.v27 = select i1 %625, i64 17, i64 36
  %634 = add i64 %605, %.v27
  %635 = add i64 %634, 7
  store i64 %635, i64* %PC, align 8
  %636 = load i64, i64* %607, align 8
  store i64 %636, i64* %RAX, align 8, !tbaa !2428
  %637 = add i64 %636, 24
  %638 = add i64 %634, 14
  store i64 %638, i64* %PC, align 8
  %639 = inttoptr i64 %637 to i32*
  br i1 %625, label %block_403157, label %block_40316a

block_4031a4:                                     ; preds = %block_403199
  %640 = add i64 %826, -104
  %641 = add i64 %796, 4
  store i64 %641, i64* %PC, align 8
  %642 = inttoptr i64 %640 to i64*
  %643 = load i64, i64* %642, align 8
  store i64 %643, i64* %RAX, align 8, !tbaa !2428
  %644 = add i64 %826, -168
  %645 = add i64 %796, 11
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %644 to i64*
  store i64 %643, i64* %646, align 8
  %647 = load i64, i64* %RBP, align 8
  %648 = add i64 %647, -96
  %649 = load i64, i64* %PC, align 8
  %650 = add i64 %649, 4
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %648 to i64*
  %652 = load i64, i64* %651, align 8
  store i64 %652, i64* %RAX, align 8, !tbaa !2428
  %653 = add i64 %647, -104
  %654 = add i64 %649, 8
  store i64 %654, i64* %PC, align 8
  %655 = inttoptr i64 %653 to i64*
  store i64 %652, i64* %655, align 8
  %656 = load i64, i64* %RBP, align 8
  %657 = add i64 %656, -168
  %658 = load i64, i64* %PC, align 8
  %659 = add i64 %658, 7
  store i64 %659, i64* %PC, align 8
  %660 = inttoptr i64 %657 to i64*
  %661 = load i64, i64* %660, align 8
  store i64 %661, i64* %RAX, align 8, !tbaa !2428
  %662 = add i64 %656, -96
  %663 = add i64 %658, 11
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to i64*
  store i64 %661, i64* %664, align 8
  %.pre18 = load i64, i64* %RBP, align 8
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_4031c2

block_403343:                                     ; preds = %block_40333b, %block_403336
  %665 = phi i64 [ %.pre25, %block_40333b ], [ %522, %block_403336 ]
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.6, %block_40333b ], [ %MEMORY.3, %block_403336 ]
  %666 = add i64 %665, -743
  store i64 %666, i64* %PC, align 8, !tbaa !2428
  br label %block_40305c

block_40321b:                                     ; preds = %block_40320d
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RCX, align 8, !tbaa !2428
  %667 = add i64 %764, -56
  %668 = add i64 %781, 11
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to i64*
  %670 = load i64, i64* %669, align 8
  %671 = sub i64 1, %670
  store i64 %671, i64* %RCX, align 8, !tbaa !2428
  %672 = icmp ugt i64 %670, 1
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %38, align 1, !tbaa !2432
  %674 = trunc i64 %671 to i32
  %675 = and i32 %674, 255
  %676 = tail call i32 @llvm.ctpop.i32(i32 %675) #12
  %677 = trunc i32 %676 to i8
  %678 = and i8 %677, 1
  %679 = xor i8 %678, 1
  store i8 %679, i8* %45, align 1, !tbaa !2446
  %680 = xor i64 %670, %671
  %681 = lshr i64 %680, 4
  %682 = trunc i64 %681 to i8
  %683 = and i8 %682, 1
  store i8 %683, i8* %51, align 1, !tbaa !2447
  %684 = icmp eq i64 %671, 0
  %685 = zext i1 %684 to i8
  store i8 %685, i8* %54, align 1, !tbaa !2448
  %686 = lshr i64 %671, 63
  %687 = trunc i64 %686 to i8
  store i8 %687, i8* %57, align 1, !tbaa !2449
  %688 = lshr i64 %670, 63
  %689 = add nuw nsw i64 %686, %688
  %690 = icmp eq i64 %689, 2
  %691 = zext i1 %690 to i8
  store i8 %691, i8* %63, align 1, !tbaa !2450
  %692 = add i64 %764, -64
  %693 = add i64 %781, 15
  store i64 %693, i64* %PC, align 8
  %694 = inttoptr i64 %692 to i64*
  store i64 %671, i64* %694, align 8
  %695 = load i64, i64* %PC, align 8
  %696 = add i64 %695, 13
  store i64 %696, i64* %PC, align 8, !tbaa !2428
  br label %block_403237

block_40305c:                                     ; preds = %block_403343, %block_402fd0
  %697 = phi i64 [ %.pre, %block_402fd0 ], [ %666, %block_403343 ]
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_402fd0 ], [ %MEMORY.5, %block_403343 ]
  %698 = load i64, i64* %RBP, align 8
  %699 = add i64 %698, -72
  %700 = add i64 %697, 5
  store i64 %700, i64* %PC, align 8
  %701 = inttoptr i64 %699 to i64*
  %702 = load i64, i64* %701, align 8
  %703 = icmp ne i64 %702, 0
  %704 = zext i1 %703 to i8
  %705 = xor i8 %704, -1
  store i8 %705, i8* %AL, align 1, !tbaa !2453
  %706 = and i8 %705, 1
  store i8 0, i8* %38, align 1, !tbaa !2432
  %707 = zext i8 %706 to i32
  %708 = tail call i32 @llvm.ctpop.i32(i32 %707) #12
  %709 = trunc i32 %708 to i8
  %710 = xor i8 %709, 1
  store i8 %710, i8* %45, align 1, !tbaa !2446
  %711 = xor i8 %706, 1
  store i8 %711, i8* %54, align 1, !tbaa !2448
  store i8 0, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  store i8 0, i8* %51, align 1, !tbaa !2447
  %712 = icmp eq i8 %711, 0
  %.v = select i1 %712, i64 23, i64 18
  %713 = add i64 %697, %.v
  store i64 %713, i64* %PC, align 8, !tbaa !2428
  br i1 %712, label %block_403073, label %block_40306e

block_40331b:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %714 = load i64, i64* %RBP, align 8
  %715 = add i64 %714, -48
  %716 = add i64 %1039, 4
  store i64 %716, i64* %PC, align 8
  %717 = inttoptr i64 %715 to i64*
  %718 = load i64, i64* %717, align 8
  store i64 %718, i64* %RDI, align 8, !tbaa !2428
  %719 = add i64 %1039, -5787
  %720 = add i64 %1039, 9
  %721 = load i64, i64* %RSP, align 8, !tbaa !2428
  %722 = add i64 %721, -8
  %723 = inttoptr i64 %722 to i64*
  store i64 %720, i64* %723, align 8
  store i64 %722, i64* %RSP, align 8, !tbaa !2428
  store i64 %719, i64* %PC, align 8, !tbaa !2428
  %724 = tail call %struct.Memory* @sub_401c80_refresh_potential_renamed_(%struct.State* nonnull %0, i64 %719, %struct.Memory* %1028)
  %725 = load i64, i64* %RBP, align 8
  %726 = add i64 %725, -216
  %727 = load i64, i64* %PC, align 8
  %728 = add i64 %727, 7
  store i64 %728, i64* %PC, align 8
  %729 = inttoptr i64 %726 to i64*
  %730 = load i64, i64* %729, align 8
  store i64 %730, i64* %RDI, align 8, !tbaa !2428
  %731 = load i64, i64* %RAX, align 8
  %732 = add i64 %727, 10
  store i64 %732, i64* %PC, align 8
  %733 = inttoptr i64 %730 to i64*
  %734 = load i64, i64* %733, align 8
  %735 = add i64 %734, %731
  store i64 %735, i64* %RAX, align 8, !tbaa !2428
  %736 = icmp ult i64 %735, %731
  %737 = icmp ult i64 %735, %734
  %738 = or i1 %736, %737
  %739 = zext i1 %738 to i8
  store i8 %739, i8* %38, align 1, !tbaa !2432
  %740 = trunc i64 %735 to i32
  %741 = and i32 %740, 255
  %742 = tail call i32 @llvm.ctpop.i32(i32 %741) #12
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  store i8 %745, i8* %45, align 1, !tbaa !2446
  %746 = xor i64 %734, %731
  %747 = xor i64 %746, %735
  %748 = lshr i64 %747, 4
  %749 = trunc i64 %748 to i8
  %750 = and i8 %749, 1
  store i8 %750, i8* %51, align 1, !tbaa !2447
  %751 = icmp eq i64 %735, 0
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %54, align 1, !tbaa !2448
  %753 = lshr i64 %735, 63
  %754 = trunc i64 %753 to i8
  store i8 %754, i8* %57, align 1, !tbaa !2449
  %755 = lshr i64 %731, 63
  %756 = lshr i64 %734, 63
  %757 = xor i64 %753, %755
  %758 = xor i64 %753, %756
  %759 = add nuw nsw i64 %757, %758
  %760 = icmp eq i64 %759, 2
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %63, align 1, !tbaa !2450
  %762 = add i64 %727, 13
  store i64 %762, i64* %PC, align 8
  store i64 %735, i64* %733, align 8
  br label %block_403336

block_40320d:                                     ; preds = %block_403202, %block_4031f2
  %763 = phi i64 [ %.pre20, %block_403202 ], [ %844, %block_4031f2 ]
  %764 = load i64, i64* %RBP, align 8
  %765 = add i64 %764, -192
  %766 = add i64 %763, 8
  store i64 %766, i64* %PC, align 8
  %767 = inttoptr i64 %765 to i64*
  %768 = load i64, i64* %767, align 8
  store i8 0, i8* %38, align 1, !tbaa !2432
  %769 = trunc i64 %768 to i32
  %770 = and i32 %769, 255
  %771 = tail call i32 @llvm.ctpop.i32(i32 %770) #12
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  store i8 %774, i8* %45, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2447
  %775 = icmp eq i64 %768, 0
  %776 = zext i1 %775 to i8
  store i8 %776, i8* %54, align 1, !tbaa !2448
  %777 = lshr i64 %768, 63
  %778 = trunc i64 %777 to i8
  store i8 %778, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  %779 = icmp ne i8 %778, 0
  %780 = or i1 %775, %779
  %.v33 = select i1 %780, i64 34, i64 14
  %781 = add i64 %763, %.v33
  store i64 %781, i64* %PC, align 8, !tbaa !2428
  br i1 %780, label %block_40322f, label %block_40321b

block_403199:                                     ; preds = %block_403105
  %782 = add i64 %826, -80
  %783 = add i64 %842, 5
  store i64 %783, i64* %PC, align 8
  %784 = inttoptr i64 %782 to i64*
  %785 = load i64, i64* %784, align 8
  store i8 0, i8* %38, align 1, !tbaa !2432
  %786 = trunc i64 %785 to i32
  %787 = and i32 %786, 255
  %788 = tail call i32 @llvm.ctpop.i32(i32 %787) #12
  %789 = trunc i32 %788 to i8
  %790 = and i8 %789, 1
  %791 = xor i8 %790, 1
  store i8 %791, i8* %45, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2447
  %792 = icmp eq i64 %785, 0
  %793 = zext i1 %792 to i8
  store i8 %793, i8* %54, align 1, !tbaa !2448
  %794 = lshr i64 %785, 63
  %795 = trunc i64 %794 to i8
  store i8 %795, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  %.v32 = select i1 %792, i64 41, i64 11
  %796 = add i64 %842, %.v32
  store i64 %796, i64* %PC, align 8, !tbaa !2428
  br i1 %792, label %block_4031c2, label %block_4031a4

block_403105:                                     ; preds = %block_4030c4, %block_4030e7
  %797 = phi i64 [ %390, %block_4030c4 ], [ %.pre16, %block_4030e7 ]
  %798 = load i64, i64* %RBP, align 8
  %799 = add i64 %798, -56
  store i64 %799, i64* %RDI, align 8, !tbaa !2428
  %800 = add i64 %798, -80
  store i64 %800, i64* %RSI, align 8, !tbaa !2428
  %801 = add i64 %798, -128
  store i64 %801, i64* %R8, align 8, !tbaa !2428
  %802 = add i64 %797, 20
  store i64 %802, i64* %PC, align 8
  %803 = inttoptr i64 %799 to i64*
  store i64 1, i64* %803, align 8
  %804 = load i64, i64* %RBP, align 8
  %805 = add i64 %804, -96
  %806 = load i64, i64* %PC, align 8
  %807 = add i64 %806, 4
  store i64 %807, i64* %PC, align 8
  %808 = inttoptr i64 %805 to i64*
  %809 = load i64, i64* %808, align 8
  store i64 %809, i64* %RDX, align 8, !tbaa !2428
  %810 = add i64 %804, -104
  %811 = add i64 %806, 8
  store i64 %811, i64* %PC, align 8
  %812 = inttoptr i64 %810 to i64*
  %813 = load i64, i64* %812, align 8
  store i64 %813, i64* %RCX, align 8, !tbaa !2428
  %814 = add i64 %806, -1001
  %815 = add i64 %806, 13
  %816 = load i64, i64* %RSP, align 8, !tbaa !2428
  %817 = add i64 %816, -8
  %818 = inttoptr i64 %817 to i64*
  store i64 %815, i64* %818, align 8
  store i64 %817, i64* %RSP, align 8, !tbaa !2428
  store i64 %814, i64* %PC, align 8, !tbaa !2428
  %819 = tail call %struct.Memory* @sub_402d30_primal_iminus_renamed_(%struct.State* nonnull %0, i64 %814, %struct.Memory* %MEMORY.6)
  %820 = load i64, i64* %RBP, align 8
  %821 = add i64 %820, -112
  %822 = load i64, i64* %RAX, align 8
  %823 = load i64, i64* %PC, align 8
  %824 = add i64 %823, 4
  store i64 %824, i64* %PC, align 8
  %825 = inttoptr i64 %821 to i64*
  store i64 %822, i64* %825, align 8
  %826 = load i64, i64* %RBP, align 8
  %827 = add i64 %826, -112
  %828 = load i64, i64* %PC, align 8
  %829 = add i64 %828, 5
  store i64 %829, i64* %PC, align 8
  %830 = inttoptr i64 %827 to i64*
  %831 = load i64, i64* %830, align 8
  store i8 0, i8* %38, align 1, !tbaa !2432
  %832 = trunc i64 %831 to i32
  %833 = and i32 %832, 255
  %834 = tail call i32 @llvm.ctpop.i32(i32 %833) #12
  %835 = trunc i32 %834 to i8
  %836 = and i8 %835, 1
  %837 = xor i8 %836, 1
  store i8 %837, i8* %45, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2447
  %838 = icmp eq i64 %831, 0
  %839 = zext i1 %838 to i8
  store i8 %839, i8* %54, align 1, !tbaa !2448
  %840 = lshr i64 %831, 63
  %841 = trunc i64 %840 to i8
  store i8 %841, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  %.v31 = select i1 %838, i64 11, i64 111
  %842 = add i64 %828, %.v31
  store i64 %842, i64* %PC, align 8, !tbaa !2428
  br i1 %838, label %block_403135, label %block_403199

block_4031f2:                                     ; preds = %block_4031c2
  store i64 1, i64* %477, align 8
  %843 = load i64, i64* %PC, align 8
  %844 = add i64 %843, 16
  store i64 %844, i64* %PC, align 8, !tbaa !2428
  br label %block_40320d

block_403261:                                     ; preds = %block_40324c, %block_403259
  %845 = phi i64 [ %1113, %block_40324c ], [ %.pre22, %block_403259 ]
  %846 = load i64, i64* %RBP, align 8
  %847 = add i64 %846, -80
  %848 = add i64 %845, 5
  store i64 %848, i64* %PC, align 8
  %849 = inttoptr i64 %847 to i64*
  %850 = load i64, i64* %849, align 8
  %851 = icmp eq i64 %850, 0
  %852 = zext i1 %851 to i8
  store i8 %852, i8* %AL, align 1, !tbaa !2453
  store i8 0, i8* %38, align 1, !tbaa !2432
  %853 = zext i1 %851 to i32
  %854 = tail call i32 @llvm.ctpop.i32(i32 %853) #12
  %855 = trunc i32 %854 to i8
  %856 = xor i8 %855, 1
  store i8 %856, i8* %45, align 1, !tbaa !2446
  %857 = xor i8 %852, 1
  store i8 %857, i8* %54, align 1, !tbaa !2448
  store i8 0, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  store i8 0, i8* %51, align 1, !tbaa !2447
  %858 = zext i1 %851 to i64
  store i64 %858, i64* %RCX, align 8, !tbaa !2428
  %859 = zext i1 %851 to i64
  store i64 %859, i64* %RDI, align 8, !tbaa !2428
  %860 = add i64 %846, -88
  %861 = add i64 %845, 22
  store i64 %861, i64* %PC, align 8
  %862 = inttoptr i64 %860 to i64*
  %863 = load i64, i64* %862, align 8
  store i64 %863, i64* %RSI, align 8, !tbaa !2428
  %864 = add i64 %846, -56
  %865 = add i64 %845, 26
  store i64 %865, i64* %PC, align 8
  %866 = inttoptr i64 %864 to i64*
  %867 = load i64, i64* %866, align 8
  store i64 %867, i64* %RDX, align 8, !tbaa !2428
  %868 = add i64 %846, -64
  %869 = add i64 %845, 30
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i64*
  %871 = load i64, i64* %870, align 8
  store i64 %871, i64* %RCX, align 8, !tbaa !2428
  %872 = add i64 %846, -96
  %873 = add i64 %845, 34
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %872 to i64*
  %875 = load i64, i64* %874, align 8
  store i64 %875, i64* %R8, align 8, !tbaa !2428
  %876 = add i64 %846, -104
  %877 = add i64 %845, 38
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i64*
  %879 = load i64, i64* %878, align 8
  store i64 %879, i64* %R9, align 8, !tbaa !2428
  %880 = add i64 %846, -112
  %881 = add i64 %845, 42
  store i64 %881, i64* %PC, align 8
  %882 = inttoptr i64 %880 to i64*
  %883 = load i64, i64* %882, align 8
  store i64 %883, i64* %R10, align 8, !tbaa !2428
  %884 = load i64, i64* %RBP, align 8
  %885 = add i64 %884, -120
  %886 = add i64 %845, 46
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %885 to i64*
  %888 = load i64, i64* %887, align 8
  store i64 %888, i64* %R11, align 8, !tbaa !2428
  %889 = add i64 %884, -128
  %890 = add i64 %845, 50
  store i64 %890, i64* %PC, align 8
  %891 = inttoptr i64 %889 to i64*
  %892 = load i64, i64* %891, align 8
  store i64 %892, i64* %RBX, align 8, !tbaa !2428
  %893 = add i64 %884, -136
  %894 = add i64 %845, 57
  store i64 %894, i64* %PC, align 8
  %895 = inttoptr i64 %893 to i64*
  %896 = load i64, i64* %895, align 8
  store i64 %896, i64* %R14, align 8, !tbaa !2428
  %897 = add i64 %884, -192
  %898 = add i64 %845, 64
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %897 to i64*
  %900 = load i64, i64* %899, align 8
  store i64 %900, i64* %R15, align 8, !tbaa !2428
  %901 = add i64 %884, -48
  %902 = add i64 %845, 68
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %901 to i64*
  %904 = load i64, i64* %903, align 8
  store i64 %904, i64* %R12, align 8, !tbaa !2428
  %905 = add i64 %904, 512
  %906 = add i64 %845, 76
  store i64 %906, i64* %PC, align 8
  %907 = inttoptr i64 %905 to i64*
  %908 = load i64, i64* %907, align 8
  store i64 %908, i64* %R12, align 8, !tbaa !2428
  %909 = load i64*, i64** %207, align 8
  %910 = add i64 %845, 80
  store i64 %910, i64* %PC, align 8
  store i64 %883, i64* %909, align 8
  %911 = load i64, i64* %RSP, align 8
  %912 = add i64 %911, 8
  %913 = load i64, i64* %R11, align 8
  %914 = load i64, i64* %PC, align 8
  %915 = add i64 %914, 5
  store i64 %915, i64* %PC, align 8
  %916 = inttoptr i64 %912 to i64*
  store i64 %913, i64* %916, align 8
  %917 = load i64, i64* %RSP, align 8
  %918 = add i64 %917, 16
  %919 = load i64, i64* %RBX, align 8
  %920 = load i64, i64* %PC, align 8
  %921 = add i64 %920, 5
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %918 to i64*
  store i64 %919, i64* %922, align 8
  %923 = load i64, i64* %RSP, align 8
  %924 = add i64 %923, 24
  %925 = load i64, i64* %R14, align 8
  %926 = load i64, i64* %PC, align 8
  %927 = add i64 %926, 5
  store i64 %927, i64* %PC, align 8
  %928 = inttoptr i64 %924 to i64*
  store i64 %925, i64* %928, align 8
  %929 = load i64, i64* %RSP, align 8
  %930 = add i64 %929, 32
  %931 = load i64, i64* %R15, align 8
  %932 = load i64, i64* %PC, align 8
  %933 = add i64 %932, 5
  store i64 %933, i64* %PC, align 8
  %934 = inttoptr i64 %930 to i64*
  store i64 %931, i64* %934, align 8
  %935 = load i64, i64* %RSP, align 8
  %936 = add i64 %935, 40
  %937 = load i64, i64* %R12, align 8
  %938 = load i64, i64* %PC, align 8
  %939 = add i64 %938, 5
  store i64 %939, i64* %PC, align 8
  %940 = inttoptr i64 %936 to i64*
  store i64 %937, i64* %940, align 8
  %941 = load i64, i64* %PC, align 8
  %942 = add i64 %941, 3526
  %943 = add i64 %941, 5
  %944 = load i64, i64* %RSP, align 8, !tbaa !2428
  %945 = add i64 %944, -8
  %946 = inttoptr i64 %945 to i64*
  store i64 %943, i64* %946, align 8
  store i64 %945, i64* %RSP, align 8, !tbaa !2428
  store i64 %942, i64* %PC, align 8, !tbaa !2428
  %947 = tail call %struct.Memory* @sub_404090_update_tree_renamed_(%struct.State* nonnull %0, i64 %942, %struct.Memory* %MEMORY.6)
  %948 = load i64, i64* %PC, align 8
  store i64 200, i64* %R13, align 8, !tbaa !2428
  store i64 200, i64* %RCX, align 8, !tbaa !2428
  %949 = load i64, i64* %RBP, align 8
  %950 = add i64 %949, -136
  %951 = add i64 %948, 16
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %950 to i64*
  %953 = load i64, i64* %952, align 8
  store i64 %953, i64* %RDX, align 8, !tbaa !2428
  %954 = add i64 %953, 24
  %955 = add i64 %948, 23
  store i64 %955, i64* %PC, align 8
  %956 = inttoptr i64 %954 to i32*
  store i32 0, i32* %956, align 4
  %957 = load i64, i64* %RBP, align 8
  %958 = add i64 %957, -184
  %959 = load i64, i64* %PC, align 8
  %960 = add i64 %959, 7
  store i64 %960, i64* %PC, align 8
  %961 = inttoptr i64 %958 to i64*
  %962 = load i64, i64* %961, align 8
  store i64 %962, i64* %RDX, align 8, !tbaa !2428
  %963 = trunc i64 %962 to i32
  %964 = and i64 %962, 4294967295
  store i64 %964, i64* %R13, align 8, !tbaa !2428
  %965 = add i64 %957, -144
  %966 = add i64 %959, 17
  store i64 %966, i64* %PC, align 8
  %967 = inttoptr i64 %965 to i64*
  %968 = load i64, i64* %967, align 8
  store i64 %968, i64* %RDX, align 8, !tbaa !2428
  %969 = add i64 %968, 24
  %970 = add i64 %959, 21
  store i64 %970, i64* %PC, align 8
  %971 = inttoptr i64 %969 to i32*
  store i32 %963, i32* %971, align 4
  %972 = load i64, i64* %RBP, align 8
  %973 = add i64 %972, -200
  %974 = load i64, i64* %PC, align 8
  %975 = add i64 %974, 7
  store i64 %975, i64* %PC, align 8
  %976 = inttoptr i64 %973 to i64*
  %977 = load i64, i64* %976, align 8
  store i64 %977, i64* %RDX, align 8, !tbaa !2428
  %978 = add i64 %974, 10
  store i64 %978, i64* %PC, align 8
  %979 = inttoptr i64 %977 to i64*
  %980 = load i64, i64* %979, align 8
  %981 = add i64 %980, -1
  %982 = icmp eq i64 %980, 0
  %983 = zext i1 %982 to i8
  store i8 %983, i8* %38, align 1, !tbaa !2432
  %984 = trunc i64 %981 to i32
  %985 = and i32 %984, 255
  %986 = tail call i32 @llvm.ctpop.i32(i32 %985) #12
  %987 = trunc i32 %986 to i8
  %988 = and i8 %987, 1
  %989 = xor i8 %988, 1
  store i8 %989, i8* %45, align 1, !tbaa !2446
  %990 = xor i64 %981, %980
  %991 = lshr i64 %990, 4
  %992 = trunc i64 %991 to i8
  %993 = and i8 %992, 1
  store i8 %993, i8* %51, align 1, !tbaa !2447
  %994 = icmp eq i64 %981, 0
  %995 = zext i1 %994 to i8
  store i8 %995, i8* %54, align 1, !tbaa !2448
  %996 = lshr i64 %981, 63
  %997 = trunc i64 %996 to i8
  store i8 %997, i8* %57, align 1, !tbaa !2449
  %998 = lshr i64 %980, 63
  %999 = xor i64 %996, %998
  %1000 = add nuw nsw i64 %999, %998
  %1001 = icmp eq i64 %1000, 2
  %1002 = zext i1 %1001 to i8
  store i8 %1002, i8* %63, align 1, !tbaa !2450
  store i64 %981, i64* %RAX, align 8, !tbaa !2428
  %1003 = ashr i64 %981, 63
  store i64 %1003, i64* %208, align 8, !tbaa !2428
  %1004 = load i64, i64* %RCX, align 8
  %1005 = add i64 %974, 22
  store i64 %1005, i64* %PC, align 8
  %1006 = sext i64 %1004 to i128
  %1007 = and i128 %1006, -18446744073709551616
  %1008 = zext i64 %1003 to i128
  %1009 = shl nuw i128 %1008, 64
  %1010 = zext i64 %981 to i128
  %1011 = or i128 %1010, %1009
  %1012 = zext i64 %1004 to i128
  %1013 = or i128 %1007, %1012
  %1014 = sdiv i128 %1011, %1013
  %1015 = trunc i128 %1014 to i64
  %1016 = and i128 %1014, 18446744073709551615
  %1017 = sext i64 %1015 to i128
  %1018 = and i128 %1017, -18446744073709551616
  %1019 = or i128 %1018, %1016
  %1020 = icmp eq i128 %1014, %1019
  br i1 %1020, label %1023, label %1021

; <label>:1021:                                   ; preds = %block_403261
  %1022 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1005, %struct.Memory* %MEMORY.6) #13
  %.pre23 = load i64, i64* %RDX, align 8
  %.pre24 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:1023:                                   ; preds = %block_403261
  %1024 = srem i128 %1011, %1013
  %1025 = trunc i128 %1024 to i64
  store i64 %1015, i64* %209, align 8, !tbaa !2428
  store i64 %1025, i64* %208, align 8, !tbaa !2428
  store i8 0, i8* %38, align 1, !tbaa !2432
  store i8 0, i8* %45, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2447
  store i8 0, i8* %54, align 1, !tbaa !2448
  store i8 0, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %1023, %1021
  %1026 = phi i64 [ %.pre24, %1021 ], [ %1005, %1023 ]
  %1027 = phi i64 [ %.pre23, %1021 ], [ %1025, %1023 ]
  %1028 = phi %struct.Memory* [ %1022, %1021 ], [ %MEMORY.6, %1023 ]
  store i8 0, i8* %38, align 1, !tbaa !2432
  %1029 = trunc i64 %1027 to i32
  %1030 = and i32 %1029, 255
  %1031 = tail call i32 @llvm.ctpop.i32(i32 %1030) #12
  %1032 = trunc i32 %1031 to i8
  %1033 = and i8 %1032, 1
  %1034 = xor i8 %1033, 1
  store i8 %1034, i8* %45, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2447
  %1035 = icmp eq i64 %1027, 0
  %1036 = zext i1 %1035 to i8
  store i8 %1036, i8* %54, align 1, !tbaa !2448
  %1037 = lshr i64 %1027, 63
  %1038 = trunc i64 %1037 to i8
  store i8 %1038, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  %.v34 = select i1 %1035, i64 10, i64 32
  %1039 = add i64 %1026, %.v34
  store i64 %1039, i64* %PC, align 8, !tbaa !2428
  br i1 %1035, label %block_40331b, label %block_403336

block_4030a5:                                     ; preds = %block_403073
  %1040 = add i64 %561, -200
  %1041 = add i64 %560, 7
  store i64 %1041, i64* %PC, align 8
  %1042 = inttoptr i64 %1040 to i64*
  %1043 = load i64, i64* %1042, align 8
  store i64 %1043, i64* %RAX, align 8, !tbaa !2428
  %1044 = add i64 %560, 10
  store i64 %1044, i64* %PC, align 8
  %1045 = inttoptr i64 %1043 to i64*
  %1046 = load i64, i64* %1045, align 8
  %1047 = add i64 %1046, 1
  store i64 %1047, i64* %RCX, align 8, !tbaa !2428
  %1048 = icmp eq i64 %1046, -1
  %1049 = icmp eq i64 %1047, 0
  %1050 = or i1 %1048, %1049
  %1051 = zext i1 %1050 to i8
  store i8 %1051, i8* %38, align 1, !tbaa !2432
  %1052 = trunc i64 %1047 to i32
  %1053 = and i32 %1052, 255
  %1054 = tail call i32 @llvm.ctpop.i32(i32 %1053) #12
  %1055 = trunc i32 %1054 to i8
  %1056 = and i8 %1055, 1
  %1057 = xor i8 %1056, 1
  store i8 %1057, i8* %45, align 1, !tbaa !2446
  %1058 = xor i64 %1047, %1046
  %1059 = lshr i64 %1058, 4
  %1060 = trunc i64 %1059 to i8
  %1061 = and i8 %1060, 1
  store i8 %1061, i8* %51, align 1, !tbaa !2447
  %1062 = zext i1 %1049 to i8
  store i8 %1062, i8* %54, align 1, !tbaa !2448
  %1063 = lshr i64 %1047, 63
  %1064 = trunc i64 %1063 to i8
  store i8 %1064, i8* %57, align 1, !tbaa !2449
  %1065 = lshr i64 %1046, 63
  %1066 = xor i64 %1063, %1065
  %1067 = add nuw nsw i64 %1066, %1063
  %1068 = icmp eq i64 %1067, 2
  %1069 = zext i1 %1068 to i8
  store i8 %1069, i8* %63, align 1, !tbaa !2450
  %1070 = add i64 %560, 17
  store i64 %1070, i64* %PC, align 8
  store i64 %1047, i64* %1045, align 8
  %1071 = load i64, i64* %RBP, align 8
  %1072 = add i64 %1071, -192
  %1073 = load i64, i64* %PC, align 8
  %1074 = add i64 %1073, 8
  store i64 %1074, i64* %PC, align 8
  %1075 = inttoptr i64 %1072 to i64*
  %1076 = load i64, i64* %1075, align 8
  store i8 0, i8* %38, align 1, !tbaa !2432
  %1077 = trunc i64 %1076 to i32
  %1078 = and i32 %1077, 255
  %1079 = tail call i32 @llvm.ctpop.i32(i32 %1078) #12
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  store i8 %1082, i8* %45, align 1, !tbaa !2446
  store i8 0, i8* %51, align 1, !tbaa !2447
  %1083 = icmp eq i64 %1076, 0
  %1084 = zext i1 %1083 to i8
  store i8 %1084, i8* %54, align 1, !tbaa !2448
  %1085 = lshr i64 %1076, 63
  %1086 = trunc i64 %1085 to i8
  store i8 %1086, i8* %57, align 1, !tbaa !2449
  store i8 0, i8* %63, align 1, !tbaa !2450
  %1087 = icmp ne i8 %1086, 0
  %1088 = or i1 %1083, %1087
  %.v26 = select i1 %1088, i64 49, i64 14
  %1089 = add i64 %1073, %.v26
  %1090 = add i64 %1071, -136
  %1091 = add i64 %1089, 7
  store i64 %1091, i64* %PC, align 8
  %1092 = inttoptr i64 %1090 to i64*
  %1093 = load i64, i64* %1092, align 8
  store i64 %1093, i64* %RAX, align 8, !tbaa !2428
  br i1 %1088, label %block_4030e7, label %block_4030c4

block_403183:                                     ; preds = %block_403178
  %1094 = add i64 %392, -96
  %1095 = add i64 %407, 4
  store i64 %1095, i64* %PC, align 8
  %1096 = inttoptr i64 %1094 to i64*
  %1097 = load i64, i64* %1096, align 8
  store i64 %1097, i64* %RDI, align 8, !tbaa !2428
  %1098 = add i64 %392, -104
  %1099 = add i64 %407, 8
  store i64 %1099, i64* %PC, align 8
  %1100 = inttoptr i64 %1098 to i64*
  %1101 = load i64, i64* %1100, align 8
  store i64 %1101, i64* %RSI, align 8, !tbaa !2428
  %1102 = add i64 %392, -128
  %1103 = add i64 %407, 12
  store i64 %1103, i64* %PC, align 8
  %1104 = inttoptr i64 %1102 to i64*
  %1105 = load i64, i64* %1104, align 8
  store i64 %1105, i64* %RDX, align 8, !tbaa !2428
  %1106 = add i64 %407, -627
  %1107 = add i64 %407, 17
  %1108 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1109 = add i64 %1108, -8
  %1110 = inttoptr i64 %1109 to i64*
  store i64 %1107, i64* %1110, align 8
  store i64 %1109, i64* %RSP, align 8, !tbaa !2428
  store i64 %1106, i64* %PC, align 8, !tbaa !2428
  %1111 = tail call %struct.Memory* @sub_402f10_primal_update_flow_renamed_(%struct.State* nonnull %0, i64 %1106, %struct.Memory* %MEMORY.6)
  br label %block_403336

block_40324c:                                     ; preds = %block_403237
  store i64 1, i64* %520, align 8
  %1112 = load i64, i64* %PC, align 8
  %1113 = add i64 %1112, 13
  store i64 %1113, i64* %PC, align 8, !tbaa !2428
  br label %block_403261

block_403202:                                     ; preds = %block_4031c2
  store i64 2, i64* %477, align 8
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_40320d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400b80_insert_new_arc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400b80:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %DIL = bitcast %union.anon* %5 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -16
  %14 = load i64, i64* %RDI, align 8
  %15 = add i64 %12, 7
  store i64 %15, i64* %PC, align 8
  %16 = inttoptr i64 %13 to i64*
  store i64 %14, i64* %16, align 8
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -16
  %19 = load i64, i64* %RSI, align 8
  %20 = load i64, i64* %PC, align 8
  %21 = add i64 %20, 4
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %22, align 8
  %23 = load i64, i64* %RBP, align 8
  %24 = add i64 %23, -24
  %25 = load i64, i64* %RDX, align 8
  %26 = load i64, i64* %PC, align 8
  %27 = add i64 %26, 4
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %24 to i64*
  store i64 %25, i64* %28, align 8
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -32
  %31 = load i64, i64* %RCX, align 8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %30 to i64*
  store i64 %31, i64* %34, align 8
  %35 = load i64, i64* %RBP, align 8
  %36 = add i64 %35, -40
  %37 = load i64, i64* %R8, align 8
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i64*
  store i64 %37, i64* %40, align 8
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -48
  %43 = load i64, i64* %R9, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -24
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RCX, align 8, !tbaa !2428
  %53 = add i64 %47, -8
  %54 = add i64 %49, 8
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %RDX, align 8, !tbaa !2428
  %57 = add i64 %47, -16
  %58 = add i64 %49, 12
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %57 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = shl i64 %60, 6
  store i64 %61, i64* %RSI, align 8, !tbaa !2428
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %68 = add i64 %61, %56
  store i64 %68, i64* %RDX, align 8, !tbaa !2428
  %69 = icmp ult i64 %68, %56
  %70 = icmp ult i64 %68, %61
  %71 = or i1 %69, %70
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %62, align 1, !tbaa !2432
  %73 = trunc i64 %68 to i32
  %74 = and i32 %73, 255
  %75 = tail call i32 @llvm.ctpop.i32(i32 %74) #12
  %76 = trunc i32 %75 to i8
  %77 = and i8 %76, 1
  %78 = xor i8 %77, 1
  store i8 %78, i8* %63, align 1, !tbaa !2446
  %79 = xor i64 %56, %68
  %80 = lshr i64 %79, 4
  %81 = trunc i64 %80 to i8
  %82 = and i8 %81, 1
  store i8 %82, i8* %64, align 1, !tbaa !2447
  %83 = icmp eq i64 %68, 0
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %65, align 1, !tbaa !2448
  %85 = lshr i64 %68, 63
  %86 = trunc i64 %85 to i8
  store i8 %86, i8* %66, align 1, !tbaa !2449
  %87 = lshr i64 %56, 63
  %88 = lshr i64 %60, 57
  %89 = and i64 %88, 1
  %90 = xor i64 %85, %87
  %91 = xor i64 %85, %89
  %92 = add nuw nsw i64 %90, %91
  %93 = icmp eq i64 %92, 2
  %94 = zext i1 %93 to i8
  store i8 %94, i8* %67, align 1, !tbaa !2450
  %95 = add i64 %68, 8
  %96 = add i64 %49, 23
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i64*
  store i64 %52, i64* %97, align 8
  %98 = load i64, i64* %RBP, align 8
  %99 = add i64 %98, -32
  %100 = load i64, i64* %PC, align 8
  %101 = add i64 %100, 4
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %99 to i64*
  %103 = load i64, i64* %102, align 8
  store i64 %103, i64* %RCX, align 8, !tbaa !2428
  %104 = add i64 %98, -8
  %105 = add i64 %100, 8
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %RDX, align 8, !tbaa !2428
  %108 = add i64 %98, -16
  %109 = add i64 %100, 12
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = shl i64 %111, 6
  store i64 %112, i64* %RSI, align 8, !tbaa !2428
  %113 = add i64 %112, %107
  store i64 %113, i64* %RDX, align 8, !tbaa !2428
  %114 = icmp ult i64 %113, %107
  %115 = icmp ult i64 %113, %112
  %116 = or i1 %114, %115
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %62, align 1, !tbaa !2432
  %118 = trunc i64 %113 to i32
  %119 = and i32 %118, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119) #12
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %63, align 1, !tbaa !2446
  %124 = xor i64 %107, %113
  %125 = lshr i64 %124, 4
  %126 = trunc i64 %125 to i8
  %127 = and i8 %126, 1
  store i8 %127, i8* %64, align 1, !tbaa !2447
  %128 = icmp eq i64 %113, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %65, align 1, !tbaa !2448
  %130 = lshr i64 %113, 63
  %131 = trunc i64 %130 to i8
  store i8 %131, i8* %66, align 1, !tbaa !2449
  %132 = lshr i64 %107, 63
  %133 = lshr i64 %111, 57
  %134 = and i64 %133, 1
  %135 = xor i64 %130, %132
  %136 = xor i64 %130, %134
  %137 = add nuw nsw i64 %135, %136
  %138 = icmp eq i64 %137, 2
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %67, align 1, !tbaa !2450
  %140 = add i64 %113, 16
  %141 = add i64 %100, 23
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %140 to i64*
  store i64 %103, i64* %142, align 8
  %143 = load i64, i64* %RBP, align 8
  %144 = add i64 %143, -40
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %144 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %149 = add i64 %143, -8
  %150 = add i64 %145, 8
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %149 to i64*
  %152 = load i64, i64* %151, align 8
  store i64 %152, i64* %RDX, align 8, !tbaa !2428
  %153 = add i64 %143, -16
  %154 = add i64 %145, 12
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %153 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = shl i64 %156, 6
  store i64 %157, i64* %RSI, align 8, !tbaa !2428
  %158 = add i64 %157, %152
  store i64 %158, i64* %RDX, align 8, !tbaa !2428
  %159 = icmp ult i64 %158, %152
  %160 = icmp ult i64 %158, %157
  %161 = or i1 %159, %160
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %62, align 1, !tbaa !2432
  %163 = trunc i64 %158 to i32
  %164 = and i32 %163, 255
  %165 = tail call i32 @llvm.ctpop.i32(i32 %164) #12
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %63, align 1, !tbaa !2446
  %169 = xor i64 %152, %158
  %170 = lshr i64 %169, 4
  %171 = trunc i64 %170 to i8
  %172 = and i8 %171, 1
  store i8 %172, i8* %64, align 1, !tbaa !2447
  %173 = icmp eq i64 %158, 0
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %65, align 1, !tbaa !2448
  %175 = lshr i64 %158, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %66, align 1, !tbaa !2449
  %177 = lshr i64 %152, 63
  %178 = lshr i64 %156, 57
  %179 = and i64 %178, 1
  %180 = xor i64 %175, %177
  %181 = xor i64 %175, %179
  %182 = add nuw nsw i64 %180, %181
  %183 = icmp eq i64 %182, 2
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %67, align 1, !tbaa !2450
  %185 = add i64 %158, 56
  %186 = add i64 %145, 23
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %185 to i64*
  store i64 %148, i64* %187, align 8
  %188 = load i64, i64* %RBP, align 8
  %189 = add i64 %188, -40
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, 4
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %189 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RCX, align 8, !tbaa !2428
  %194 = add i64 %188, -8
  %195 = add i64 %190, 8
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RDX, align 8, !tbaa !2428
  %198 = add i64 %188, -16
  %199 = add i64 %190, 12
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = shl i64 %201, 6
  store i64 %202, i64* %RSI, align 8, !tbaa !2428
  %203 = add i64 %202, %197
  store i64 %203, i64* %RDX, align 8, !tbaa !2428
  %204 = icmp ult i64 %203, %197
  %205 = icmp ult i64 %203, %202
  %206 = or i1 %204, %205
  %207 = zext i1 %206 to i8
  store i8 %207, i8* %62, align 1, !tbaa !2432
  %208 = trunc i64 %203 to i32
  %209 = and i32 %208, 255
  %210 = tail call i32 @llvm.ctpop.i32(i32 %209) #12
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  store i8 %213, i8* %63, align 1, !tbaa !2446
  %214 = xor i64 %197, %203
  %215 = lshr i64 %214, 4
  %216 = trunc i64 %215 to i8
  %217 = and i8 %216, 1
  store i8 %217, i8* %64, align 1, !tbaa !2447
  %218 = icmp eq i64 %203, 0
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %65, align 1, !tbaa !2448
  %220 = lshr i64 %203, 63
  %221 = trunc i64 %220 to i8
  store i8 %221, i8* %66, align 1, !tbaa !2449
  %222 = lshr i64 %197, 63
  %223 = lshr i64 %201, 57
  %224 = and i64 %223, 1
  %225 = xor i64 %220, %222
  %226 = xor i64 %220, %224
  %227 = add nuw nsw i64 %225, %226
  %228 = icmp eq i64 %227, 2
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %67, align 1, !tbaa !2450
  %230 = inttoptr i64 %203 to i64*
  %231 = add i64 %190, 22
  store i64 %231, i64* %PC, align 8
  store i64 %193, i64* %230, align 8
  %232 = load i64, i64* %RBP, align 8
  %233 = add i64 %232, -48
  %234 = load i64, i64* %PC, align 8
  %235 = add i64 %234, 4
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %233 to i64*
  %237 = load i64, i64* %236, align 8
  store i64 %237, i64* %RCX, align 8, !tbaa !2428
  %238 = add i64 %232, -8
  %239 = add i64 %234, 8
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %238 to i64*
  %241 = load i64, i64* %240, align 8
  store i64 %241, i64* %RDX, align 8, !tbaa !2428
  %242 = add i64 %232, -16
  %243 = add i64 %234, 12
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %242 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = shl i64 %245, 6
  store i64 %246, i64* %RSI, align 8, !tbaa !2428
  %247 = add i64 %246, %241
  store i64 %247, i64* %RDX, align 8, !tbaa !2428
  %248 = icmp ult i64 %247, %241
  %249 = icmp ult i64 %247, %246
  %250 = or i1 %248, %249
  %251 = zext i1 %250 to i8
  store i8 %251, i8* %62, align 1, !tbaa !2432
  %252 = trunc i64 %247 to i32
  %253 = and i32 %252, 255
  %254 = tail call i32 @llvm.ctpop.i32(i32 %253) #12
  %255 = trunc i32 %254 to i8
  %256 = and i8 %255, 1
  %257 = xor i8 %256, 1
  store i8 %257, i8* %63, align 1, !tbaa !2446
  %258 = xor i64 %241, %247
  %259 = lshr i64 %258, 4
  %260 = trunc i64 %259 to i8
  %261 = and i8 %260, 1
  store i8 %261, i8* %64, align 1, !tbaa !2447
  %262 = icmp eq i64 %247, 0
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %65, align 1, !tbaa !2448
  %264 = lshr i64 %247, 63
  %265 = trunc i64 %264 to i8
  store i8 %265, i8* %66, align 1, !tbaa !2449
  %266 = lshr i64 %241, 63
  %267 = lshr i64 %245, 57
  %268 = and i64 %267, 1
  %269 = xor i64 %264, %266
  %270 = xor i64 %264, %268
  %271 = add nuw nsw i64 %269, %270
  %272 = icmp eq i64 %271, 2
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %67, align 1, !tbaa !2450
  %274 = add i64 %247, 48
  %275 = add i64 %234, 23
  store i64 %275, i64* %PC, align 8
  %276 = inttoptr i64 %274 to i64*
  store i64 %237, i64* %276, align 8
  %277 = load i64, i64* %RBP, align 8
  %278 = add i64 %277, -16
  %279 = load i64, i64* %PC, align 8
  %280 = add i64 %279, 4
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %278 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = add i64 %282, 1
  store i64 %283, i64* %RCX, align 8, !tbaa !2428
  %284 = icmp eq i64 %282, -1
  %285 = icmp eq i64 %283, 0
  %286 = or i1 %284, %285
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %62, align 1, !tbaa !2432
  %288 = trunc i64 %283 to i32
  %289 = and i32 %288, 255
  %290 = tail call i32 @llvm.ctpop.i32(i32 %289) #12
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  store i8 %293, i8* %63, align 1, !tbaa !2446
  %294 = xor i64 %283, %282
  %295 = lshr i64 %294, 4
  %296 = trunc i64 %295 to i8
  %297 = and i8 %296, 1
  store i8 %297, i8* %64, align 1, !tbaa !2447
  %298 = zext i1 %285 to i8
  store i8 %298, i8* %65, align 1, !tbaa !2448
  %299 = lshr i64 %283, 63
  %300 = trunc i64 %299 to i8
  store i8 %300, i8* %66, align 1, !tbaa !2449
  %301 = lshr i64 %282, 63
  %302 = xor i64 %299, %301
  %303 = add nuw nsw i64 %302, %299
  %304 = icmp eq i64 %303, 2
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %67, align 1, !tbaa !2450
  %306 = add i64 %277, -56
  %307 = add i64 %279, 12
  store i64 %307, i64* %PC, align 8
  %308 = inttoptr i64 %306 to i64*
  store i64 %283, i64* %308, align 8
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %.pre = load i64, i64* %PC, align 8
  br label %block_400c1a

block_400c7a:                                     ; preds = %block_400c6a
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %310 = add i64 %1372, -8
  %311 = add i64 %1384, 11
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %310 to i64*
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %RDX, align 8, !tbaa !2428
  %314 = add i64 %1372, -56
  %315 = add i64 %1384, 15
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %314 to i64*
  %317 = load i64, i64* %316, align 8
  store i64 %317, i64* %RAX, align 8, !tbaa !2428
  %318 = add i64 %1372, -80
  %319 = add i64 %1384, 19
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  store i64 %313, i64* %320, align 8
  %321 = load i64, i64* %PC, align 8
  %322 = load i64, i64* %309, align 8, !tbaa !2428
  %323 = ashr i64 %322, 63
  store i64 %323, i64* %RDX, align 8, !tbaa !2428
  %324 = load i64, i64* %RCX, align 8
  %325 = add i64 %321, 5
  store i64 %325, i64* %PC, align 8
  %326 = sext i64 %324 to i128
  %327 = and i128 %326, -18446744073709551616
  %328 = zext i64 %323 to i128
  %329 = shl nuw i128 %328, 64
  %330 = zext i64 %322 to i128
  %331 = or i128 %329, %330
  %332 = zext i64 %324 to i128
  %333 = or i128 %327, %332
  %334 = sdiv i128 %331, %333
  %335 = trunc i128 %334 to i64
  %336 = and i128 %334, 18446744073709551615
  %337 = sext i64 %335 to i128
  %338 = and i128 %337, -18446744073709551616
  %339 = or i128 %338, %336
  %340 = icmp eq i128 %334, %339
  br i1 %340, label %343, label %341

; <label>:341:                                    ; preds = %block_400c7a
  %342 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %325, %struct.Memory* %MEMORY.0) #13
  %.pre5 = load i64, i64* %RAX, align 8
  %.pre6 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6

; <label>:343:                                    ; preds = %block_400c7a
  %344 = srem i128 %331, %333
  %345 = trunc i128 %344 to i64
  store i64 %335, i64* %309, align 8, !tbaa !2428
  store i64 %345, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %62, align 1, !tbaa !2432
  store i8 0, i8* %63, align 1, !tbaa !2446
  store i8 0, i8* %64, align 1, !tbaa !2447
  store i8 0, i8* %65, align 1, !tbaa !2448
  store i8 0, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6: ; preds = %343, %341
  %346 = phi i64 [ %.pre6, %341 ], [ %325, %343 ]
  %347 = phi i64 [ %.pre5, %341 ], [ %335, %343 ]
  %348 = phi %struct.Memory* [ %342, %341 ], [ %MEMORY.0, %343 ]
  %349 = add i64 %347, -1
  %350 = shl i64 %349, 6
  store i64 %350, i64* %RAX, align 8, !tbaa !2428
  %351 = lshr i64 %349, 58
  %352 = trunc i64 %351 to i8
  %353 = and i8 %352, 1
  store i8 %353, i8* %62, align 1, !tbaa !2453
  %354 = trunc i64 %350 to i32
  %355 = and i32 %354, 192
  %356 = tail call i32 @llvm.ctpop.i32(i32 %355) #12
  %357 = trunc i32 %356 to i8
  %358 = and i8 %357, 1
  %359 = xor i8 %358, 1
  store i8 %359, i8* %63, align 1, !tbaa !2453
  store i8 0, i8* %64, align 1, !tbaa !2453
  %360 = icmp eq i64 %350, 0
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %65, align 1, !tbaa !2453
  %362 = lshr i64 %349, 57
  %363 = trunc i64 %362 to i8
  %364 = and i8 %363, 1
  store i8 %364, i8* %66, align 1, !tbaa !2453
  store i8 0, i8* %67, align 1, !tbaa !2453
  %365 = load i64, i64* %RBP, align 8
  %366 = add i64 %365, -80
  %367 = add i64 %346, 12
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = add i64 %350, %369
  store i64 %370, i64* %RSI, align 8, !tbaa !2428
  %371 = icmp ult i64 %370, %369
  %372 = icmp ult i64 %370, %350
  %373 = or i1 %371, %372
  %374 = zext i1 %373 to i8
  store i8 %374, i8* %62, align 1, !tbaa !2432
  %375 = trunc i64 %370 to i32
  %376 = and i32 %375, 255
  %377 = tail call i32 @llvm.ctpop.i32(i32 %376) #12
  %378 = trunc i32 %377 to i8
  %379 = and i8 %378, 1
  %380 = xor i8 %379, 1
  store i8 %380, i8* %63, align 1, !tbaa !2446
  %381 = xor i64 %369, %370
  %382 = lshr i64 %381, 4
  %383 = trunc i64 %382 to i8
  %384 = and i8 %383, 1
  store i8 %384, i8* %64, align 1, !tbaa !2447
  %385 = icmp eq i64 %370, 0
  %386 = zext i1 %385 to i8
  store i8 %386, i8* %65, align 1, !tbaa !2448
  %387 = lshr i64 %370, 63
  %388 = trunc i64 %387 to i8
  store i8 %388, i8* %66, align 1, !tbaa !2449
  %389 = lshr i64 %369, 63
  %390 = lshr i64 %349, 57
  %391 = and i64 %390, 1
  %392 = xor i64 %387, %389
  %393 = xor i64 %387, %391
  %394 = add nuw nsw i64 %392, %393
  %395 = icmp eq i64 %394, 2
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %67, align 1, !tbaa !2450
  %397 = add i64 %370, 8
  %398 = add i64 %346, 19
  store i64 %398, i64* %PC, align 8
  %399 = inttoptr i64 %397 to i64*
  %400 = load i64, i64* %399, align 8
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = add i64 %365, -8
  %402 = add i64 %346, 23
  store i64 %402, i64* %PC, align 8
  %403 = inttoptr i64 %401 to i64*
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %RSI, align 8, !tbaa !2428
  %405 = add i64 %365, -56
  %406 = add i64 %346, 27
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %405 to i64*
  %408 = load i64, i64* %407, align 8
  %409 = add i64 %408, -1
  %410 = shl i64 %409, 6
  store i64 %410, i64* %RDI, align 8, !tbaa !2428
  %411 = add i64 %410, %404
  store i64 %411, i64* %RSI, align 8, !tbaa !2428
  %412 = icmp ult i64 %411, %404
  %413 = icmp ult i64 %411, %410
  %414 = or i1 %412, %413
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %62, align 1, !tbaa !2432
  %416 = trunc i64 %411 to i32
  %417 = and i32 %416, 255
  %418 = tail call i32 @llvm.ctpop.i32(i32 %417) #12
  %419 = trunc i32 %418 to i8
  %420 = and i8 %419, 1
  %421 = xor i8 %420, 1
  store i8 %421, i8* %63, align 1, !tbaa !2446
  %422 = xor i64 %404, %411
  %423 = lshr i64 %422, 4
  %424 = trunc i64 %423 to i8
  %425 = and i8 %424, 1
  store i8 %425, i8* %64, align 1, !tbaa !2447
  %426 = icmp eq i64 %411, 0
  %427 = zext i1 %426 to i8
  store i8 %427, i8* %65, align 1, !tbaa !2448
  %428 = lshr i64 %411, 63
  %429 = trunc i64 %428 to i8
  store i8 %429, i8* %66, align 1, !tbaa !2449
  %430 = lshr i64 %404, 63
  %431 = lshr i64 %409, 57
  %432 = and i64 %431, 1
  %433 = xor i64 %428, %430
  %434 = xor i64 %428, %432
  %435 = add nuw nsw i64 %433, %434
  %436 = icmp eq i64 %435, 2
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %67, align 1, !tbaa !2450
  %438 = add i64 %411, 8
  %439 = load i64, i64* %RAX, align 8
  %440 = add i64 %346, 42
  store i64 %440, i64* %PC, align 8
  %441 = inttoptr i64 %438 to i64*
  store i64 %439, i64* %441, align 8
  %442 = load i64, i64* %RBP, align 8
  %443 = add i64 %442, -8
  %444 = load i64, i64* %PC, align 8
  %445 = add i64 %444, 4
  store i64 %445, i64* %PC, align 8
  %446 = inttoptr i64 %443 to i64*
  %447 = load i64, i64* %446, align 8
  store i64 %447, i64* %RAX, align 8, !tbaa !2428
  %448 = add i64 %442, -56
  %449 = add i64 %444, 8
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i64*
  %451 = load i64, i64* %450, align 8
  store i64 %451, i64* %RSI, align 8, !tbaa !2428
  %452 = add i64 %442, -88
  %453 = add i64 %444, 12
  store i64 %453, i64* %PC, align 8
  %454 = inttoptr i64 %452 to i64*
  store i64 %447, i64* %454, align 8
  %455 = load i64, i64* %RSI, align 8
  %456 = load i64, i64* %PC, align 8
  store i64 %455, i64* %RAX, align 8, !tbaa !2428
  %457 = ashr i64 %455, 63
  store i64 %457, i64* %RDX, align 8, !tbaa !2428
  %458 = load i64, i64* %RCX, align 8
  %459 = add i64 %456, 8
  store i64 %459, i64* %PC, align 8
  %460 = sext i64 %458 to i128
  %461 = and i128 %460, -18446744073709551616
  %462 = zext i64 %457 to i128
  %463 = shl nuw i128 %462, 64
  %464 = zext i64 %455 to i128
  %465 = or i128 %463, %464
  %466 = zext i64 %458 to i128
  %467 = or i128 %461, %466
  %468 = sdiv i128 %465, %467
  %469 = trunc i128 %468 to i64
  %470 = and i128 %468, 18446744073709551615
  %471 = sext i64 %469 to i128
  %472 = and i128 %471, -18446744073709551616
  %473 = or i128 %472, %470
  %474 = icmp eq i128 %468, %473
  br i1 %474, label %477, label %475

; <label>:475:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6
  %476 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %459, %struct.Memory* %348) #13
  %.pre7 = load i64, i64* %RAX, align 8
  %.pre8 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5

; <label>:477:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit6
  %478 = srem i128 %465, %467
  %479 = trunc i128 %478 to i64
  store i64 %469, i64* %309, align 8, !tbaa !2428
  store i64 %479, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %62, align 1, !tbaa !2432
  store i8 0, i8* %63, align 1, !tbaa !2446
  store i8 0, i8* %64, align 1, !tbaa !2447
  store i8 0, i8* %65, align 1, !tbaa !2448
  store i8 0, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5: ; preds = %477, %475
  %480 = phi i64 [ %.pre8, %475 ], [ %459, %477 ]
  %481 = phi i64 [ %.pre7, %475 ], [ %469, %477 ]
  %482 = phi %struct.Memory* [ %476, %475 ], [ %348, %477 ]
  %483 = add i64 %481, -1
  %484 = shl i64 %483, 6
  store i64 %484, i64* %RAX, align 8, !tbaa !2428
  %485 = lshr i64 %483, 58
  %486 = trunc i64 %485 to i8
  %487 = and i8 %486, 1
  store i8 %487, i8* %62, align 1, !tbaa !2453
  %488 = trunc i64 %484 to i32
  %489 = and i32 %488, 192
  %490 = tail call i32 @llvm.ctpop.i32(i32 %489) #12
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  %493 = xor i8 %492, 1
  store i8 %493, i8* %63, align 1, !tbaa !2453
  store i8 0, i8* %64, align 1, !tbaa !2453
  %494 = icmp eq i64 %484, 0
  %495 = zext i1 %494 to i8
  store i8 %495, i8* %65, align 1, !tbaa !2453
  %496 = lshr i64 %483, 57
  %497 = trunc i64 %496 to i8
  %498 = and i8 %497, 1
  store i8 %498, i8* %66, align 1, !tbaa !2453
  store i8 0, i8* %67, align 1, !tbaa !2453
  %499 = load i64, i64* %RBP, align 8
  %500 = add i64 %499, -88
  %501 = add i64 %480, 12
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %500 to i64*
  %503 = load i64, i64* %502, align 8
  %504 = add i64 %484, %503
  store i64 %504, i64* %RSI, align 8, !tbaa !2428
  %505 = icmp ult i64 %504, %503
  %506 = icmp ult i64 %504, %484
  %507 = or i1 %505, %506
  %508 = zext i1 %507 to i8
  store i8 %508, i8* %62, align 1, !tbaa !2432
  %509 = trunc i64 %504 to i32
  %510 = and i32 %509, 255
  %511 = tail call i32 @llvm.ctpop.i32(i32 %510) #12
  %512 = trunc i32 %511 to i8
  %513 = and i8 %512, 1
  %514 = xor i8 %513, 1
  store i8 %514, i8* %63, align 1, !tbaa !2446
  %515 = xor i64 %503, %504
  %516 = lshr i64 %515, 4
  %517 = trunc i64 %516 to i8
  %518 = and i8 %517, 1
  store i8 %518, i8* %64, align 1, !tbaa !2447
  %519 = icmp eq i64 %504, 0
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %65, align 1, !tbaa !2448
  %521 = lshr i64 %504, 63
  %522 = trunc i64 %521 to i8
  store i8 %522, i8* %66, align 1, !tbaa !2449
  %523 = lshr i64 %503, 63
  %524 = lshr i64 %483, 57
  %525 = and i64 %524, 1
  %526 = xor i64 %521, %523
  %527 = xor i64 %521, %525
  %528 = add nuw nsw i64 %526, %527
  %529 = icmp eq i64 %528, 2
  %530 = zext i1 %529 to i8
  store i8 %530, i8* %67, align 1, !tbaa !2450
  %531 = add i64 %504, 16
  %532 = add i64 %480, 19
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %531 to i64*
  %534 = load i64, i64* %533, align 8
  store i64 %534, i64* %RAX, align 8, !tbaa !2428
  %535 = add i64 %499, -8
  %536 = add i64 %480, 23
  store i64 %536, i64* %PC, align 8
  %537 = inttoptr i64 %535 to i64*
  %538 = load i64, i64* %537, align 8
  store i64 %538, i64* %RSI, align 8, !tbaa !2428
  %539 = add i64 %499, -56
  %540 = add i64 %480, 27
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %539 to i64*
  %542 = load i64, i64* %541, align 8
  %543 = add i64 %542, -1
  %544 = shl i64 %543, 6
  store i64 %544, i64* %RDI, align 8, !tbaa !2428
  %545 = add i64 %544, %538
  store i64 %545, i64* %RSI, align 8, !tbaa !2428
  %546 = icmp ult i64 %545, %538
  %547 = icmp ult i64 %545, %544
  %548 = or i1 %546, %547
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %62, align 1, !tbaa !2432
  %550 = trunc i64 %545 to i32
  %551 = and i32 %550, 255
  %552 = tail call i32 @llvm.ctpop.i32(i32 %551) #12
  %553 = trunc i32 %552 to i8
  %554 = and i8 %553, 1
  %555 = xor i8 %554, 1
  store i8 %555, i8* %63, align 1, !tbaa !2446
  %556 = xor i64 %538, %545
  %557 = lshr i64 %556, 4
  %558 = trunc i64 %557 to i8
  %559 = and i8 %558, 1
  store i8 %559, i8* %64, align 1, !tbaa !2447
  %560 = icmp eq i64 %545, 0
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %65, align 1, !tbaa !2448
  %562 = lshr i64 %545, 63
  %563 = trunc i64 %562 to i8
  store i8 %563, i8* %66, align 1, !tbaa !2449
  %564 = lshr i64 %538, 63
  %565 = lshr i64 %543, 57
  %566 = and i64 %565, 1
  %567 = xor i64 %562, %564
  %568 = xor i64 %562, %566
  %569 = add nuw nsw i64 %567, %568
  %570 = icmp eq i64 %569, 2
  %571 = zext i1 %570 to i8
  store i8 %571, i8* %67, align 1, !tbaa !2450
  %572 = add i64 %545, 16
  %573 = load i64, i64* %RAX, align 8
  %574 = add i64 %480, 42
  store i64 %574, i64* %PC, align 8
  %575 = inttoptr i64 %572 to i64*
  store i64 %573, i64* %575, align 8
  %576 = load i64, i64* %RBP, align 8
  %577 = add i64 %576, -8
  %578 = load i64, i64* %PC, align 8
  %579 = add i64 %578, 4
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %577 to i64*
  %581 = load i64, i64* %580, align 8
  store i64 %581, i64* %RAX, align 8, !tbaa !2428
  %582 = add i64 %576, -56
  %583 = add i64 %578, 8
  store i64 %583, i64* %PC, align 8
  %584 = inttoptr i64 %582 to i64*
  %585 = load i64, i64* %584, align 8
  store i64 %585, i64* %RSI, align 8, !tbaa !2428
  %586 = add i64 %576, -96
  %587 = add i64 %578, 12
  store i64 %587, i64* %PC, align 8
  %588 = inttoptr i64 %586 to i64*
  store i64 %581, i64* %588, align 8
  %589 = load i64, i64* %RSI, align 8
  %590 = load i64, i64* %PC, align 8
  store i64 %589, i64* %RAX, align 8, !tbaa !2428
  %591 = ashr i64 %589, 63
  store i64 %591, i64* %RDX, align 8, !tbaa !2428
  %592 = load i64, i64* %RCX, align 8
  %593 = add i64 %590, 8
  store i64 %593, i64* %PC, align 8
  %594 = sext i64 %592 to i128
  %595 = and i128 %594, -18446744073709551616
  %596 = zext i64 %591 to i128
  %597 = shl nuw i128 %596, 64
  %598 = zext i64 %589 to i128
  %599 = or i128 %597, %598
  %600 = zext i64 %592 to i128
  %601 = or i128 %595, %600
  %602 = sdiv i128 %599, %601
  %603 = trunc i128 %602 to i64
  %604 = and i128 %602, 18446744073709551615
  %605 = sext i64 %603 to i128
  %606 = and i128 %605, -18446744073709551616
  %607 = or i128 %606, %604
  %608 = icmp eq i128 %602, %607
  br i1 %608, label %611, label %609

; <label>:609:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5
  %610 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %593, %struct.Memory* %482) #13
  %.pre9 = load i64, i64* %RAX, align 8
  %.pre10 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4

; <label>:611:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit5
  %612 = srem i128 %599, %601
  %613 = trunc i128 %612 to i64
  store i64 %603, i64* %309, align 8, !tbaa !2428
  store i64 %613, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %62, align 1, !tbaa !2432
  store i8 0, i8* %63, align 1, !tbaa !2446
  store i8 0, i8* %64, align 1, !tbaa !2447
  store i8 0, i8* %65, align 1, !tbaa !2448
  store i8 0, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4: ; preds = %611, %609
  %614 = phi i64 [ %.pre10, %609 ], [ %593, %611 ]
  %615 = phi i64 [ %.pre9, %609 ], [ %603, %611 ]
  %616 = phi %struct.Memory* [ %610, %609 ], [ %482, %611 ]
  %617 = add i64 %615, -1
  %618 = shl i64 %617, 6
  store i64 %618, i64* %RAX, align 8, !tbaa !2428
  %619 = lshr i64 %617, 58
  %620 = trunc i64 %619 to i8
  %621 = and i8 %620, 1
  store i8 %621, i8* %62, align 1, !tbaa !2453
  %622 = trunc i64 %618 to i32
  %623 = and i32 %622, 192
  %624 = tail call i32 @llvm.ctpop.i32(i32 %623) #12
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  %627 = xor i8 %626, 1
  store i8 %627, i8* %63, align 1, !tbaa !2453
  store i8 0, i8* %64, align 1, !tbaa !2453
  %628 = icmp eq i64 %618, 0
  %629 = zext i1 %628 to i8
  store i8 %629, i8* %65, align 1, !tbaa !2453
  %630 = lshr i64 %617, 57
  %631 = trunc i64 %630 to i8
  %632 = and i8 %631, 1
  store i8 %632, i8* %66, align 1, !tbaa !2453
  store i8 0, i8* %67, align 1, !tbaa !2453
  %633 = load i64, i64* %RBP, align 8
  %634 = add i64 %633, -96
  %635 = add i64 %614, 12
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %634 to i64*
  %637 = load i64, i64* %636, align 8
  %638 = add i64 %618, %637
  store i64 %638, i64* %RSI, align 8, !tbaa !2428
  %639 = icmp ult i64 %638, %637
  %640 = icmp ult i64 %638, %618
  %641 = or i1 %639, %640
  %642 = zext i1 %641 to i8
  store i8 %642, i8* %62, align 1, !tbaa !2432
  %643 = trunc i64 %638 to i32
  %644 = and i32 %643, 255
  %645 = tail call i32 @llvm.ctpop.i32(i32 %644) #12
  %646 = trunc i32 %645 to i8
  %647 = and i8 %646, 1
  %648 = xor i8 %647, 1
  store i8 %648, i8* %63, align 1, !tbaa !2446
  %649 = xor i64 %637, %638
  %650 = lshr i64 %649, 4
  %651 = trunc i64 %650 to i8
  %652 = and i8 %651, 1
  store i8 %652, i8* %64, align 1, !tbaa !2447
  %653 = icmp eq i64 %638, 0
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %65, align 1, !tbaa !2448
  %655 = lshr i64 %638, 63
  %656 = trunc i64 %655 to i8
  store i8 %656, i8* %66, align 1, !tbaa !2449
  %657 = lshr i64 %637, 63
  %658 = lshr i64 %617, 57
  %659 = and i64 %658, 1
  %660 = xor i64 %655, %657
  %661 = xor i64 %655, %659
  %662 = add nuw nsw i64 %660, %661
  %663 = icmp eq i64 %662, 2
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %67, align 1, !tbaa !2450
  %665 = inttoptr i64 %638 to i64*
  %666 = add i64 %614, 18
  store i64 %666, i64* %PC, align 8
  %667 = load i64, i64* %665, align 8
  store i64 %667, i64* %RAX, align 8, !tbaa !2428
  %668 = add i64 %633, -8
  %669 = add i64 %614, 22
  store i64 %669, i64* %PC, align 8
  %670 = inttoptr i64 %668 to i64*
  %671 = load i64, i64* %670, align 8
  store i64 %671, i64* %RSI, align 8, !tbaa !2428
  %672 = add i64 %633, -56
  %673 = add i64 %614, 26
  store i64 %673, i64* %PC, align 8
  %674 = inttoptr i64 %672 to i64*
  %675 = load i64, i64* %674, align 8
  %676 = add i64 %675, -1
  %677 = shl i64 %676, 6
  store i64 %677, i64* %RDI, align 8, !tbaa !2428
  %678 = add i64 %677, %671
  store i64 %678, i64* %RSI, align 8, !tbaa !2428
  %679 = icmp ult i64 %678, %671
  %680 = icmp ult i64 %678, %677
  %681 = or i1 %679, %680
  %682 = zext i1 %681 to i8
  store i8 %682, i8* %62, align 1, !tbaa !2432
  %683 = trunc i64 %678 to i32
  %684 = and i32 %683, 255
  %685 = tail call i32 @llvm.ctpop.i32(i32 %684) #12
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  %688 = xor i8 %687, 1
  store i8 %688, i8* %63, align 1, !tbaa !2446
  %689 = xor i64 %671, %678
  %690 = lshr i64 %689, 4
  %691 = trunc i64 %690 to i8
  %692 = and i8 %691, 1
  store i8 %692, i8* %64, align 1, !tbaa !2447
  %693 = icmp eq i64 %678, 0
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %65, align 1, !tbaa !2448
  %695 = lshr i64 %678, 63
  %696 = trunc i64 %695 to i8
  store i8 %696, i8* %66, align 1, !tbaa !2449
  %697 = lshr i64 %671, 63
  %698 = lshr i64 %676, 57
  %699 = and i64 %698, 1
  %700 = xor i64 %695, %697
  %701 = xor i64 %695, %699
  %702 = add nuw nsw i64 %700, %701
  %703 = icmp eq i64 %702, 2
  %704 = zext i1 %703 to i8
  store i8 %704, i8* %67, align 1, !tbaa !2450
  %705 = inttoptr i64 %678 to i64*
  %706 = load i64, i64* %RAX, align 8
  %707 = add i64 %614, 40
  store i64 %707, i64* %PC, align 8
  store i64 %706, i64* %705, align 8
  %708 = load i64, i64* %RBP, align 8
  %709 = add i64 %708, -8
  %710 = load i64, i64* %PC, align 8
  %711 = add i64 %710, 4
  store i64 %711, i64* %PC, align 8
  %712 = inttoptr i64 %709 to i64*
  %713 = load i64, i64* %712, align 8
  store i64 %713, i64* %RAX, align 8, !tbaa !2428
  %714 = add i64 %708, -56
  %715 = add i64 %710, 8
  store i64 %715, i64* %PC, align 8
  %716 = inttoptr i64 %714 to i64*
  %717 = load i64, i64* %716, align 8
  store i64 %717, i64* %RSI, align 8, !tbaa !2428
  %718 = add i64 %708, -104
  %719 = add i64 %710, 12
  store i64 %719, i64* %PC, align 8
  %720 = inttoptr i64 %718 to i64*
  store i64 %713, i64* %720, align 8
  %721 = load i64, i64* %RSI, align 8
  %722 = load i64, i64* %PC, align 8
  store i64 %721, i64* %RAX, align 8, !tbaa !2428
  %723 = ashr i64 %721, 63
  store i64 %723, i64* %RDX, align 8, !tbaa !2428
  %724 = load i64, i64* %RCX, align 8
  %725 = add i64 %722, 8
  store i64 %725, i64* %PC, align 8
  %726 = sext i64 %724 to i128
  %727 = and i128 %726, -18446744073709551616
  %728 = zext i64 %723 to i128
  %729 = shl nuw i128 %728, 64
  %730 = zext i64 %721 to i128
  %731 = or i128 %729, %730
  %732 = zext i64 %724 to i128
  %733 = or i128 %727, %732
  %734 = sdiv i128 %731, %733
  %735 = trunc i128 %734 to i64
  %736 = and i128 %734, 18446744073709551615
  %737 = sext i64 %735 to i128
  %738 = and i128 %737, -18446744073709551616
  %739 = or i128 %738, %736
  %740 = icmp eq i128 %734, %739
  br i1 %740, label %743, label %741

; <label>:741:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4
  %742 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %725, %struct.Memory* %616) #13
  %.pre11 = load i64, i64* %RAX, align 8
  %.pre12 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3

; <label>:743:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit4
  %744 = srem i128 %731, %733
  %745 = trunc i128 %744 to i64
  store i64 %735, i64* %309, align 8, !tbaa !2428
  store i64 %745, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %62, align 1, !tbaa !2432
  store i8 0, i8* %63, align 1, !tbaa !2446
  store i8 0, i8* %64, align 1, !tbaa !2447
  store i8 0, i8* %65, align 1, !tbaa !2448
  store i8 0, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3: ; preds = %743, %741
  %746 = phi i64 [ %.pre12, %741 ], [ %725, %743 ]
  %747 = phi i64 [ %.pre11, %741 ], [ %735, %743 ]
  %748 = phi %struct.Memory* [ %742, %741 ], [ %616, %743 ]
  %749 = add i64 %747, -1
  %750 = shl i64 %749, 6
  store i64 %750, i64* %RAX, align 8, !tbaa !2428
  %751 = lshr i64 %749, 58
  %752 = trunc i64 %751 to i8
  %753 = and i8 %752, 1
  store i8 %753, i8* %62, align 1, !tbaa !2453
  %754 = trunc i64 %750 to i32
  %755 = and i32 %754, 192
  %756 = tail call i32 @llvm.ctpop.i32(i32 %755) #12
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  store i8 %759, i8* %63, align 1, !tbaa !2453
  store i8 0, i8* %64, align 1, !tbaa !2453
  %760 = icmp eq i64 %750, 0
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %65, align 1, !tbaa !2453
  %762 = lshr i64 %749, 57
  %763 = trunc i64 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %66, align 1, !tbaa !2453
  store i8 0, i8* %67, align 1, !tbaa !2453
  %765 = load i64, i64* %RBP, align 8
  %766 = add i64 %765, -104
  %767 = add i64 %746, 12
  store i64 %767, i64* %PC, align 8
  %768 = inttoptr i64 %766 to i64*
  %769 = load i64, i64* %768, align 8
  %770 = add i64 %750, %769
  store i64 %770, i64* %RSI, align 8, !tbaa !2428
  %771 = icmp ult i64 %770, %769
  %772 = icmp ult i64 %770, %750
  %773 = or i1 %771, %772
  %774 = zext i1 %773 to i8
  store i8 %774, i8* %62, align 1, !tbaa !2432
  %775 = trunc i64 %770 to i32
  %776 = and i32 %775, 255
  %777 = tail call i32 @llvm.ctpop.i32(i32 %776) #12
  %778 = trunc i32 %777 to i8
  %779 = and i8 %778, 1
  %780 = xor i8 %779, 1
  store i8 %780, i8* %63, align 1, !tbaa !2446
  %781 = xor i64 %769, %770
  %782 = lshr i64 %781, 4
  %783 = trunc i64 %782 to i8
  %784 = and i8 %783, 1
  store i8 %784, i8* %64, align 1, !tbaa !2447
  %785 = icmp eq i64 %770, 0
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %65, align 1, !tbaa !2448
  %787 = lshr i64 %770, 63
  %788 = trunc i64 %787 to i8
  store i8 %788, i8* %66, align 1, !tbaa !2449
  %789 = lshr i64 %769, 63
  %790 = lshr i64 %749, 57
  %791 = and i64 %790, 1
  %792 = xor i64 %787, %789
  %793 = xor i64 %787, %791
  %794 = add nuw nsw i64 %792, %793
  %795 = icmp eq i64 %794, 2
  %796 = zext i1 %795 to i8
  store i8 %796, i8* %67, align 1, !tbaa !2450
  %797 = inttoptr i64 %770 to i64*
  %798 = add i64 %746, 18
  store i64 %798, i64* %PC, align 8
  %799 = load i64, i64* %797, align 8
  store i64 %799, i64* %RAX, align 8, !tbaa !2428
  %800 = add i64 %765, -8
  %801 = add i64 %746, 22
  store i64 %801, i64* %PC, align 8
  %802 = inttoptr i64 %800 to i64*
  %803 = load i64, i64* %802, align 8
  store i64 %803, i64* %RSI, align 8, !tbaa !2428
  %804 = add i64 %765, -56
  %805 = add i64 %746, 26
  store i64 %805, i64* %PC, align 8
  %806 = inttoptr i64 %804 to i64*
  %807 = load i64, i64* %806, align 8
  %808 = add i64 %807, -1
  %809 = shl i64 %808, 6
  store i64 %809, i64* %RDI, align 8, !tbaa !2428
  %810 = add i64 %809, %803
  store i64 %810, i64* %RSI, align 8, !tbaa !2428
  %811 = icmp ult i64 %810, %803
  %812 = icmp ult i64 %810, %809
  %813 = or i1 %811, %812
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %62, align 1, !tbaa !2432
  %815 = trunc i64 %810 to i32
  %816 = and i32 %815, 255
  %817 = tail call i32 @llvm.ctpop.i32(i32 %816) #12
  %818 = trunc i32 %817 to i8
  %819 = and i8 %818, 1
  %820 = xor i8 %819, 1
  store i8 %820, i8* %63, align 1, !tbaa !2446
  %821 = xor i64 %803, %810
  %822 = lshr i64 %821, 4
  %823 = trunc i64 %822 to i8
  %824 = and i8 %823, 1
  store i8 %824, i8* %64, align 1, !tbaa !2447
  %825 = icmp eq i64 %810, 0
  %826 = zext i1 %825 to i8
  store i8 %826, i8* %65, align 1, !tbaa !2448
  %827 = lshr i64 %810, 63
  %828 = trunc i64 %827 to i8
  store i8 %828, i8* %66, align 1, !tbaa !2449
  %829 = lshr i64 %803, 63
  %830 = lshr i64 %808, 57
  %831 = and i64 %830, 1
  %832 = xor i64 %827, %829
  %833 = xor i64 %827, %831
  %834 = add nuw nsw i64 %832, %833
  %835 = icmp eq i64 %834, 2
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %67, align 1, !tbaa !2450
  %837 = add i64 %810, 56
  %838 = load i64, i64* %RAX, align 8
  %839 = add i64 %746, 41
  store i64 %839, i64* %PC, align 8
  %840 = inttoptr i64 %837 to i64*
  store i64 %838, i64* %840, align 8
  %841 = load i64, i64* %RBP, align 8
  %842 = add i64 %841, -8
  %843 = load i64, i64* %PC, align 8
  %844 = add i64 %843, 4
  store i64 %844, i64* %PC, align 8
  %845 = inttoptr i64 %842 to i64*
  %846 = load i64, i64* %845, align 8
  store i64 %846, i64* %RAX, align 8, !tbaa !2428
  %847 = add i64 %841, -56
  %848 = add i64 %843, 8
  store i64 %848, i64* %PC, align 8
  %849 = inttoptr i64 %847 to i64*
  %850 = load i64, i64* %849, align 8
  store i64 %850, i64* %RSI, align 8, !tbaa !2428
  %851 = add i64 %841, -112
  %852 = add i64 %843, 12
  store i64 %852, i64* %PC, align 8
  %853 = inttoptr i64 %851 to i64*
  store i64 %846, i64* %853, align 8
  %854 = load i64, i64* %RSI, align 8
  %855 = load i64, i64* %PC, align 8
  store i64 %854, i64* %RAX, align 8, !tbaa !2428
  %856 = ashr i64 %854, 63
  store i64 %856, i64* %RDX, align 8, !tbaa !2428
  %857 = load i64, i64* %RCX, align 8
  %858 = add i64 %855, 8
  store i64 %858, i64* %PC, align 8
  %859 = sext i64 %857 to i128
  %860 = and i128 %859, -18446744073709551616
  %861 = zext i64 %856 to i128
  %862 = shl nuw i128 %861, 64
  %863 = zext i64 %854 to i128
  %864 = or i128 %862, %863
  %865 = zext i64 %857 to i128
  %866 = or i128 %860, %865
  %867 = sdiv i128 %864, %866
  %868 = trunc i128 %867 to i64
  %869 = and i128 %867, 18446744073709551615
  %870 = sext i64 %868 to i128
  %871 = and i128 %870, -18446744073709551616
  %872 = or i128 %871, %869
  %873 = icmp eq i128 %867, %872
  br i1 %873, label %876, label %874

; <label>:874:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3
  %875 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %858, %struct.Memory* %748) #13
  %.pre13 = load i64, i64* %RAX, align 8
  %.pre14 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

; <label>:876:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit3
  %877 = srem i128 %864, %866
  %878 = trunc i128 %877 to i64
  store i64 %868, i64* %309, align 8, !tbaa !2428
  store i64 %878, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %62, align 1, !tbaa !2432
  store i8 0, i8* %63, align 1, !tbaa !2446
  store i8 0, i8* %64, align 1, !tbaa !2447
  store i8 0, i8* %65, align 1, !tbaa !2448
  store i8 0, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2: ; preds = %876, %874
  %879 = phi i64 [ %.pre14, %874 ], [ %858, %876 ]
  %880 = phi i64 [ %.pre13, %874 ], [ %868, %876 ]
  %881 = phi %struct.Memory* [ %875, %874 ], [ %748, %876 ]
  %882 = add i64 %880, -1
  %883 = shl i64 %882, 6
  store i64 %883, i64* %RAX, align 8, !tbaa !2428
  %884 = lshr i64 %882, 58
  %885 = trunc i64 %884 to i8
  %886 = and i8 %885, 1
  store i8 %886, i8* %62, align 1, !tbaa !2453
  %887 = trunc i64 %883 to i32
  %888 = and i32 %887, 192
  %889 = tail call i32 @llvm.ctpop.i32(i32 %888) #12
  %890 = trunc i32 %889 to i8
  %891 = and i8 %890, 1
  %892 = xor i8 %891, 1
  store i8 %892, i8* %63, align 1, !tbaa !2453
  store i8 0, i8* %64, align 1, !tbaa !2453
  %893 = icmp eq i64 %883, 0
  %894 = zext i1 %893 to i8
  store i8 %894, i8* %65, align 1, !tbaa !2453
  %895 = lshr i64 %882, 57
  %896 = trunc i64 %895 to i8
  %897 = and i8 %896, 1
  store i8 %897, i8* %66, align 1, !tbaa !2453
  store i8 0, i8* %67, align 1, !tbaa !2453
  %898 = load i64, i64* %RBP, align 8
  %899 = add i64 %898, -112
  %900 = add i64 %879, 12
  store i64 %900, i64* %PC, align 8
  %901 = inttoptr i64 %899 to i64*
  %902 = load i64, i64* %901, align 8
  %903 = add i64 %883, %902
  store i64 %903, i64* %RSI, align 8, !tbaa !2428
  %904 = icmp ult i64 %903, %902
  %905 = icmp ult i64 %903, %883
  %906 = or i1 %904, %905
  %907 = zext i1 %906 to i8
  store i8 %907, i8* %62, align 1, !tbaa !2432
  %908 = trunc i64 %903 to i32
  %909 = and i32 %908, 255
  %910 = tail call i32 @llvm.ctpop.i32(i32 %909) #12
  %911 = trunc i32 %910 to i8
  %912 = and i8 %911, 1
  %913 = xor i8 %912, 1
  store i8 %913, i8* %63, align 1, !tbaa !2446
  %914 = xor i64 %902, %903
  %915 = lshr i64 %914, 4
  %916 = trunc i64 %915 to i8
  %917 = and i8 %916, 1
  store i8 %917, i8* %64, align 1, !tbaa !2447
  %918 = icmp eq i64 %903, 0
  %919 = zext i1 %918 to i8
  store i8 %919, i8* %65, align 1, !tbaa !2448
  %920 = lshr i64 %903, 63
  %921 = trunc i64 %920 to i8
  store i8 %921, i8* %66, align 1, !tbaa !2449
  %922 = lshr i64 %902, 63
  %923 = lshr i64 %882, 57
  %924 = and i64 %923, 1
  %925 = xor i64 %920, %922
  %926 = xor i64 %920, %924
  %927 = add nuw nsw i64 %925, %926
  %928 = icmp eq i64 %927, 2
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %67, align 1, !tbaa !2450
  %930 = add i64 %903, 48
  %931 = add i64 %879, 19
  store i64 %931, i64* %PC, align 8
  %932 = inttoptr i64 %930 to i64*
  %933 = load i64, i64* %932, align 8
  store i64 %933, i64* %RAX, align 8, !tbaa !2428
  %934 = add i64 %898, -8
  %935 = add i64 %879, 23
  store i64 %935, i64* %PC, align 8
  %936 = inttoptr i64 %934 to i64*
  %937 = load i64, i64* %936, align 8
  store i64 %937, i64* %RSI, align 8, !tbaa !2428
  %938 = add i64 %898, -56
  %939 = add i64 %879, 27
  store i64 %939, i64* %PC, align 8
  %940 = inttoptr i64 %938 to i64*
  %941 = load i64, i64* %940, align 8
  %942 = add i64 %941, -1
  %943 = shl i64 %942, 6
  store i64 %943, i64* %RDI, align 8, !tbaa !2428
  %944 = add i64 %943, %937
  store i64 %944, i64* %RSI, align 8, !tbaa !2428
  %945 = icmp ult i64 %944, %937
  %946 = icmp ult i64 %944, %943
  %947 = or i1 %945, %946
  %948 = zext i1 %947 to i8
  store i8 %948, i8* %62, align 1, !tbaa !2432
  %949 = trunc i64 %944 to i32
  %950 = and i32 %949, 255
  %951 = tail call i32 @llvm.ctpop.i32(i32 %950) #12
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  %954 = xor i8 %953, 1
  store i8 %954, i8* %63, align 1, !tbaa !2446
  %955 = xor i64 %937, %944
  %956 = lshr i64 %955, 4
  %957 = trunc i64 %956 to i8
  %958 = and i8 %957, 1
  store i8 %958, i8* %64, align 1, !tbaa !2447
  %959 = icmp eq i64 %944, 0
  %960 = zext i1 %959 to i8
  store i8 %960, i8* %65, align 1, !tbaa !2448
  %961 = lshr i64 %944, 63
  %962 = trunc i64 %961 to i8
  store i8 %962, i8* %66, align 1, !tbaa !2449
  %963 = lshr i64 %937, 63
  %964 = lshr i64 %942, 57
  %965 = and i64 %964, 1
  %966 = xor i64 %961, %963
  %967 = xor i64 %961, %965
  %968 = add nuw nsw i64 %966, %967
  %969 = icmp eq i64 %968, 2
  %970 = zext i1 %969 to i8
  store i8 %970, i8* %67, align 1, !tbaa !2450
  %971 = add i64 %944, 48
  %972 = load i64, i64* %RAX, align 8
  %973 = add i64 %879, 42
  store i64 %973, i64* %PC, align 8
  %974 = inttoptr i64 %971 to i64*
  store i64 %972, i64* %974, align 8
  %975 = load i64, i64* %RBP, align 8
  %976 = add i64 %975, -56
  %977 = load i64, i64* %PC, align 8
  %978 = add i64 %977, 4
  store i64 %978, i64* %PC, align 8
  %979 = inttoptr i64 %976 to i64*
  %980 = load i64, i64* %979, align 8
  store i64 %980, i64* %RAX, align 8, !tbaa !2428
  %981 = ashr i64 %980, 63
  store i64 %981, i64* %RDX, align 8, !tbaa !2428
  %982 = load i64, i64* %RCX, align 8
  %983 = add i64 %977, 9
  store i64 %983, i64* %PC, align 8
  %984 = sext i64 %982 to i128
  %985 = and i128 %984, -18446744073709551616
  %986 = zext i64 %981 to i128
  %987 = shl nuw i128 %986, 64
  %988 = zext i64 %980 to i128
  %989 = or i128 %987, %988
  %990 = zext i64 %982 to i128
  %991 = or i128 %985, %990
  %992 = sdiv i128 %989, %991
  %993 = trunc i128 %992 to i64
  %994 = and i128 %992, 18446744073709551615
  %995 = sext i64 %993 to i128
  %996 = and i128 %995, -18446744073709551616
  %997 = or i128 %996, %994
  %998 = icmp eq i128 %992, %997
  br i1 %998, label %1001, label %999

; <label>:999:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2
  %1000 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %983, %struct.Memory* %881) #13
  %.pre15 = load i64, i64* %RBP, align 8
  %.pre16 = load i64, i64* %RAX, align 8
  %.pre17 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

; <label>:1001:                                   ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit2
  %1002 = srem i128 %989, %991
  %1003 = trunc i128 %1002 to i64
  store i64 %993, i64* %309, align 8, !tbaa !2428
  store i64 %1003, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %62, align 1, !tbaa !2432
  store i8 0, i8* %63, align 1, !tbaa !2446
  store i8 0, i8* %64, align 1, !tbaa !2447
  store i8 0, i8* %65, align 1, !tbaa !2448
  store i8 0, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1: ; preds = %1001, %999
  %1004 = phi i64 [ %.pre17, %999 ], [ %983, %1001 ]
  %1005 = phi i64 [ %.pre16, %999 ], [ %993, %1001 ]
  %1006 = phi i64 [ %.pre15, %999 ], [ %975, %1001 ]
  %1007 = phi %struct.Memory* [ %1000, %999 ], [ %881, %1001 ]
  %1008 = add i64 %1006, -56
  %1009 = add i64 %1004, 4
  store i64 %1009, i64* %PC, align 8
  %1010 = inttoptr i64 %1008 to i64*
  store i64 %1005, i64* %1010, align 8
  %1011 = load i64, i64* %RBP, align 8
  %1012 = add i64 %1011, -24
  %1013 = load i64, i64* %PC, align 8
  %1014 = add i64 %1013, 4
  store i64 %1014, i64* %PC, align 8
  %1015 = inttoptr i64 %1012 to i64*
  %1016 = load i64, i64* %1015, align 8
  store i64 %1016, i64* %RAX, align 8, !tbaa !2428
  %1017 = add i64 %1011, -8
  %1018 = add i64 %1013, 8
  store i64 %1018, i64* %PC, align 8
  %1019 = inttoptr i64 %1017 to i64*
  %1020 = load i64, i64* %1019, align 8
  store i64 %1020, i64* %RCX, align 8, !tbaa !2428
  %1021 = add i64 %1011, -56
  %1022 = add i64 %1013, 12
  store i64 %1022, i64* %PC, align 8
  %1023 = inttoptr i64 %1021 to i64*
  %1024 = load i64, i64* %1023, align 8
  %1025 = add i64 %1024, -1
  %1026 = shl i64 %1025, 6
  store i64 %1026, i64* %RSI, align 8, !tbaa !2428
  %1027 = add i64 %1026, %1020
  store i64 %1027, i64* %RCX, align 8, !tbaa !2428
  %1028 = icmp ult i64 %1027, %1020
  %1029 = icmp ult i64 %1027, %1026
  %1030 = or i1 %1028, %1029
  %1031 = zext i1 %1030 to i8
  store i8 %1031, i8* %62, align 1, !tbaa !2432
  %1032 = trunc i64 %1027 to i32
  %1033 = and i32 %1032, 255
  %1034 = tail call i32 @llvm.ctpop.i32(i32 %1033) #12
  %1035 = trunc i32 %1034 to i8
  %1036 = and i8 %1035, 1
  %1037 = xor i8 %1036, 1
  store i8 %1037, i8* %63, align 1, !tbaa !2446
  %1038 = xor i64 %1020, %1027
  %1039 = lshr i64 %1038, 4
  %1040 = trunc i64 %1039 to i8
  %1041 = and i8 %1040, 1
  store i8 %1041, i8* %64, align 1, !tbaa !2447
  %1042 = icmp eq i64 %1027, 0
  %1043 = zext i1 %1042 to i8
  store i8 %1043, i8* %65, align 1, !tbaa !2448
  %1044 = lshr i64 %1027, 63
  %1045 = trunc i64 %1044 to i8
  store i8 %1045, i8* %66, align 1, !tbaa !2449
  %1046 = lshr i64 %1020, 63
  %1047 = lshr i64 %1025, 57
  %1048 = and i64 %1047, 1
  %1049 = xor i64 %1044, %1046
  %1050 = xor i64 %1044, %1048
  %1051 = add nuw nsw i64 %1049, %1050
  %1052 = icmp eq i64 %1051, 2
  %1053 = zext i1 %1052 to i8
  store i8 %1053, i8* %67, align 1, !tbaa !2450
  %1054 = add i64 %1027, 8
  %1055 = load i64, i64* %RAX, align 8
  %1056 = add i64 %1013, 27
  store i64 %1056, i64* %PC, align 8
  %1057 = inttoptr i64 %1054 to i64*
  store i64 %1055, i64* %1057, align 8
  %1058 = load i64, i64* %RBP, align 8
  %1059 = add i64 %1058, -32
  %1060 = load i64, i64* %PC, align 8
  %1061 = add i64 %1060, 4
  store i64 %1061, i64* %PC, align 8
  %1062 = inttoptr i64 %1059 to i64*
  %1063 = load i64, i64* %1062, align 8
  store i64 %1063, i64* %RAX, align 8, !tbaa !2428
  %1064 = add i64 %1058, -8
  %1065 = add i64 %1060, 8
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1064 to i64*
  %1067 = load i64, i64* %1066, align 8
  store i64 %1067, i64* %RCX, align 8, !tbaa !2428
  %1068 = add i64 %1058, -56
  %1069 = add i64 %1060, 12
  store i64 %1069, i64* %PC, align 8
  %1070 = inttoptr i64 %1068 to i64*
  %1071 = load i64, i64* %1070, align 8
  %1072 = add i64 %1071, -1
  %1073 = shl i64 %1072, 6
  store i64 %1073, i64* %RSI, align 8, !tbaa !2428
  %1074 = add i64 %1073, %1067
  store i64 %1074, i64* %RCX, align 8, !tbaa !2428
  %1075 = icmp ult i64 %1074, %1067
  %1076 = icmp ult i64 %1074, %1073
  %1077 = or i1 %1075, %1076
  %1078 = zext i1 %1077 to i8
  store i8 %1078, i8* %62, align 1, !tbaa !2432
  %1079 = trunc i64 %1074 to i32
  %1080 = and i32 %1079, 255
  %1081 = tail call i32 @llvm.ctpop.i32(i32 %1080) #12
  %1082 = trunc i32 %1081 to i8
  %1083 = and i8 %1082, 1
  %1084 = xor i8 %1083, 1
  store i8 %1084, i8* %63, align 1, !tbaa !2446
  %1085 = xor i64 %1067, %1074
  %1086 = lshr i64 %1085, 4
  %1087 = trunc i64 %1086 to i8
  %1088 = and i8 %1087, 1
  store i8 %1088, i8* %64, align 1, !tbaa !2447
  %1089 = icmp eq i64 %1074, 0
  %1090 = zext i1 %1089 to i8
  store i8 %1090, i8* %65, align 1, !tbaa !2448
  %1091 = lshr i64 %1074, 63
  %1092 = trunc i64 %1091 to i8
  store i8 %1092, i8* %66, align 1, !tbaa !2449
  %1093 = lshr i64 %1067, 63
  %1094 = lshr i64 %1072, 57
  %1095 = and i64 %1094, 1
  %1096 = xor i64 %1091, %1093
  %1097 = xor i64 %1091, %1095
  %1098 = add nuw nsw i64 %1096, %1097
  %1099 = icmp eq i64 %1098, 2
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %67, align 1, !tbaa !2450
  %1101 = add i64 %1074, 16
  %1102 = load i64, i64* %RAX, align 8
  %1103 = add i64 %1060, 27
  store i64 %1103, i64* %PC, align 8
  %1104 = inttoptr i64 %1101 to i64*
  store i64 %1102, i64* %1104, align 8
  %1105 = load i64, i64* %RBP, align 8
  %1106 = add i64 %1105, -40
  %1107 = load i64, i64* %PC, align 8
  %1108 = add i64 %1107, 4
  store i64 %1108, i64* %PC, align 8
  %1109 = inttoptr i64 %1106 to i64*
  %1110 = load i64, i64* %1109, align 8
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = add i64 %1105, -8
  %1112 = add i64 %1107, 8
  store i64 %1112, i64* %PC, align 8
  %1113 = inttoptr i64 %1111 to i64*
  %1114 = load i64, i64* %1113, align 8
  store i64 %1114, i64* %RCX, align 8, !tbaa !2428
  %1115 = add i64 %1105, -56
  %1116 = add i64 %1107, 12
  store i64 %1116, i64* %PC, align 8
  %1117 = inttoptr i64 %1115 to i64*
  %1118 = load i64, i64* %1117, align 8
  %1119 = add i64 %1118, -1
  %1120 = shl i64 %1119, 6
  store i64 %1120, i64* %RSI, align 8, !tbaa !2428
  %1121 = add i64 %1120, %1114
  store i64 %1121, i64* %RCX, align 8, !tbaa !2428
  %1122 = icmp ult i64 %1121, %1114
  %1123 = icmp ult i64 %1121, %1120
  %1124 = or i1 %1122, %1123
  %1125 = zext i1 %1124 to i8
  store i8 %1125, i8* %62, align 1, !tbaa !2432
  %1126 = trunc i64 %1121 to i32
  %1127 = and i32 %1126, 255
  %1128 = tail call i32 @llvm.ctpop.i32(i32 %1127) #12
  %1129 = trunc i32 %1128 to i8
  %1130 = and i8 %1129, 1
  %1131 = xor i8 %1130, 1
  store i8 %1131, i8* %63, align 1, !tbaa !2446
  %1132 = xor i64 %1114, %1121
  %1133 = lshr i64 %1132, 4
  %1134 = trunc i64 %1133 to i8
  %1135 = and i8 %1134, 1
  store i8 %1135, i8* %64, align 1, !tbaa !2447
  %1136 = icmp eq i64 %1121, 0
  %1137 = zext i1 %1136 to i8
  store i8 %1137, i8* %65, align 1, !tbaa !2448
  %1138 = lshr i64 %1121, 63
  %1139 = trunc i64 %1138 to i8
  store i8 %1139, i8* %66, align 1, !tbaa !2449
  %1140 = lshr i64 %1114, 63
  %1141 = lshr i64 %1119, 57
  %1142 = and i64 %1141, 1
  %1143 = xor i64 %1138, %1140
  %1144 = xor i64 %1138, %1142
  %1145 = add nuw nsw i64 %1143, %1144
  %1146 = icmp eq i64 %1145, 2
  %1147 = zext i1 %1146 to i8
  store i8 %1147, i8* %67, align 1, !tbaa !2450
  %1148 = inttoptr i64 %1121 to i64*
  %1149 = load i64, i64* %RAX, align 8
  %1150 = add i64 %1107, 26
  store i64 %1150, i64* %PC, align 8
  store i64 %1149, i64* %1148, align 8
  %1151 = load i64, i64* %RBP, align 8
  %1152 = add i64 %1151, -40
  %1153 = load i64, i64* %PC, align 8
  %1154 = add i64 %1153, 4
  store i64 %1154, i64* %PC, align 8
  %1155 = inttoptr i64 %1152 to i64*
  %1156 = load i64, i64* %1155, align 8
  store i64 %1156, i64* %RAX, align 8, !tbaa !2428
  %1157 = add i64 %1151, -8
  %1158 = add i64 %1153, 8
  store i64 %1158, i64* %PC, align 8
  %1159 = inttoptr i64 %1157 to i64*
  %1160 = load i64, i64* %1159, align 8
  store i64 %1160, i64* %RCX, align 8, !tbaa !2428
  %1161 = add i64 %1151, -56
  %1162 = add i64 %1153, 12
  store i64 %1162, i64* %PC, align 8
  %1163 = inttoptr i64 %1161 to i64*
  %1164 = load i64, i64* %1163, align 8
  %1165 = add i64 %1164, -1
  %1166 = shl i64 %1165, 6
  store i64 %1166, i64* %RSI, align 8, !tbaa !2428
  %1167 = add i64 %1166, %1160
  store i64 %1167, i64* %RCX, align 8, !tbaa !2428
  %1168 = icmp ult i64 %1167, %1160
  %1169 = icmp ult i64 %1167, %1166
  %1170 = or i1 %1168, %1169
  %1171 = zext i1 %1170 to i8
  store i8 %1171, i8* %62, align 1, !tbaa !2432
  %1172 = trunc i64 %1167 to i32
  %1173 = and i32 %1172, 255
  %1174 = tail call i32 @llvm.ctpop.i32(i32 %1173) #12
  %1175 = trunc i32 %1174 to i8
  %1176 = and i8 %1175, 1
  %1177 = xor i8 %1176, 1
  store i8 %1177, i8* %63, align 1, !tbaa !2446
  %1178 = xor i64 %1160, %1167
  %1179 = lshr i64 %1178, 4
  %1180 = trunc i64 %1179 to i8
  %1181 = and i8 %1180, 1
  store i8 %1181, i8* %64, align 1, !tbaa !2447
  %1182 = icmp eq i64 %1167, 0
  %1183 = zext i1 %1182 to i8
  store i8 %1183, i8* %65, align 1, !tbaa !2448
  %1184 = lshr i64 %1167, 63
  %1185 = trunc i64 %1184 to i8
  store i8 %1185, i8* %66, align 1, !tbaa !2449
  %1186 = lshr i64 %1160, 63
  %1187 = lshr i64 %1165, 57
  %1188 = and i64 %1187, 1
  %1189 = xor i64 %1184, %1186
  %1190 = xor i64 %1184, %1188
  %1191 = add nuw nsw i64 %1189, %1190
  %1192 = icmp eq i64 %1191, 2
  %1193 = zext i1 %1192 to i8
  store i8 %1193, i8* %67, align 1, !tbaa !2450
  %1194 = add i64 %1167, 56
  %1195 = load i64, i64* %RAX, align 8
  %1196 = add i64 %1153, 27
  store i64 %1196, i64* %PC, align 8
  %1197 = inttoptr i64 %1194 to i64*
  store i64 %1195, i64* %1197, align 8
  %1198 = load i64, i64* %RBP, align 8
  %1199 = add i64 %1198, -48
  %1200 = load i64, i64* %PC, align 8
  %1201 = add i64 %1200, 4
  store i64 %1201, i64* %PC, align 8
  %1202 = inttoptr i64 %1199 to i64*
  %1203 = load i64, i64* %1202, align 8
  store i64 %1203, i64* %RAX, align 8, !tbaa !2428
  %1204 = add i64 %1198, -8
  %1205 = add i64 %1200, 8
  store i64 %1205, i64* %PC, align 8
  %1206 = inttoptr i64 %1204 to i64*
  %1207 = load i64, i64* %1206, align 8
  store i64 %1207, i64* %RCX, align 8, !tbaa !2428
  %1208 = add i64 %1198, -56
  %1209 = add i64 %1200, 12
  store i64 %1209, i64* %PC, align 8
  %1210 = inttoptr i64 %1208 to i64*
  %1211 = load i64, i64* %1210, align 8
  %1212 = add i64 %1211, -1
  %1213 = shl i64 %1212, 6
  store i64 %1213, i64* %RSI, align 8, !tbaa !2428
  %1214 = add i64 %1213, %1207
  store i64 %1214, i64* %RCX, align 8, !tbaa !2428
  %1215 = icmp ult i64 %1214, %1207
  %1216 = icmp ult i64 %1214, %1213
  %1217 = or i1 %1215, %1216
  %1218 = zext i1 %1217 to i8
  store i8 %1218, i8* %62, align 1, !tbaa !2432
  %1219 = trunc i64 %1214 to i32
  %1220 = and i32 %1219, 255
  %1221 = tail call i32 @llvm.ctpop.i32(i32 %1220) #12
  %1222 = trunc i32 %1221 to i8
  %1223 = and i8 %1222, 1
  %1224 = xor i8 %1223, 1
  store i8 %1224, i8* %63, align 1, !tbaa !2446
  %1225 = xor i64 %1207, %1214
  %1226 = lshr i64 %1225, 4
  %1227 = trunc i64 %1226 to i8
  %1228 = and i8 %1227, 1
  store i8 %1228, i8* %64, align 1, !tbaa !2447
  %1229 = icmp eq i64 %1214, 0
  %1230 = zext i1 %1229 to i8
  store i8 %1230, i8* %65, align 1, !tbaa !2448
  %1231 = lshr i64 %1214, 63
  %1232 = trunc i64 %1231 to i8
  store i8 %1232, i8* %66, align 1, !tbaa !2449
  %1233 = lshr i64 %1207, 63
  %1234 = lshr i64 %1212, 57
  %1235 = and i64 %1234, 1
  %1236 = xor i64 %1231, %1233
  %1237 = xor i64 %1231, %1235
  %1238 = add nuw nsw i64 %1236, %1237
  %1239 = icmp eq i64 %1238, 2
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %67, align 1, !tbaa !2450
  %1241 = add i64 %1214, 48
  %1242 = load i64, i64* %RAX, align 8
  %1243 = add i64 %1200, 27
  store i64 %1243, i64* %PC, align 8
  %1244 = inttoptr i64 %1241 to i64*
  store i64 %1242, i64* %1244, align 8
  %1245 = load i64, i64* %PC, align 8
  %1246 = add i64 %1245, -554
  store i64 %1246, i64* %PC, align 8, !tbaa !2428
  br label %block_400c1a

block_400c75:                                     ; preds = %block_400c6a
  %1247 = add i64 %1384, 469
  store i64 %1247, i64* %PC, align 8
  %1248 = load i64, i64* %8, align 8, !tbaa !2428
  %1249 = add i64 %1248, 8
  %1250 = inttoptr i64 %1248 to i64*
  %1251 = load i64, i64* %1250, align 8
  store i64 %1251, i64* %RBP, align 8, !tbaa !2428
  store i64 %1249, i64* %8, align 8, !tbaa !2428
  %1252 = add i64 %1384, 470
  store i64 %1252, i64* %PC, align 8
  %1253 = inttoptr i64 %1249 to i64*
  %1254 = load i64, i64* %1253, align 8
  store i64 %1254, i64* %PC, align 8, !tbaa !2428
  %1255 = add i64 %1248, 16
  store i64 %1255, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400c33:                                     ; preds = %block_400c1a
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %1256 = load i64, i64* %RBP, align 8
  %1257 = add i64 %1256, -48
  %1258 = add i64 %1408, 11
  store i64 %1258, i64* %PC, align 8
  %1259 = inttoptr i64 %1257 to i64*
  %1260 = load i64, i64* %1259, align 8
  store i64 %1260, i64* %RDX, align 8, !tbaa !2428
  %1261 = add i64 %1256, -8
  %1262 = add i64 %1408, 15
  store i64 %1262, i64* %PC, align 8
  %1263 = inttoptr i64 %1261 to i64*
  %1264 = load i64, i64* %1263, align 8
  store i64 %1264, i64* %RSI, align 8, !tbaa !2428
  %1265 = add i64 %1256, -56
  %1266 = add i64 %1408, 19
  store i64 %1266, i64* %PC, align 8
  %1267 = inttoptr i64 %1265 to i64*
  %1268 = load i64, i64* %1267, align 8
  store i64 %1268, i64* %RAX, align 8, !tbaa !2428
  %1269 = add i64 %1256, -72
  %1270 = add i64 %1408, 23
  store i64 %1270, i64* %PC, align 8
  %1271 = inttoptr i64 %1269 to i64*
  store i64 %1260, i64* %1271, align 8
  %1272 = load i64, i64* %PC, align 8
  %1273 = load i64, i64* %309, align 8, !tbaa !2428
  %1274 = ashr i64 %1273, 63
  store i64 %1274, i64* %RDX, align 8, !tbaa !2428
  %1275 = load i64, i64* %RCX, align 8
  %1276 = add i64 %1272, 5
  store i64 %1276, i64* %PC, align 8
  %1277 = sext i64 %1275 to i128
  %1278 = and i128 %1277, -18446744073709551616
  %1279 = zext i64 %1274 to i128
  %1280 = shl nuw i128 %1279, 64
  %1281 = zext i64 %1273 to i128
  %1282 = or i128 %1280, %1281
  %1283 = zext i64 %1275 to i128
  %1284 = or i128 %1278, %1283
  %1285 = sdiv i128 %1282, %1284
  %1286 = trunc i128 %1285 to i64
  %1287 = and i128 %1285, 18446744073709551615
  %1288 = sext i64 %1286 to i128
  %1289 = and i128 %1288, -18446744073709551616
  %1290 = or i128 %1289, %1287
  %1291 = icmp eq i128 %1285, %1290
  br i1 %1291, label %1294, label %1292

; <label>:1292:                                   ; preds = %block_400c33
  %1293 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1276, %struct.Memory* %MEMORY.1) #13
  %.pre2 = load i64, i64* %RAX, align 8
  %.pre3 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:1294:                                   ; preds = %block_400c33
  %1295 = srem i128 %1282, %1284
  %1296 = trunc i128 %1295 to i64
  store i64 %1286, i64* %309, align 8, !tbaa !2428
  store i64 %1296, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %62, align 1, !tbaa !2432
  store i8 0, i8* %63, align 1, !tbaa !2446
  store i8 0, i8* %64, align 1, !tbaa !2447
  store i8 0, i8* %65, align 1, !tbaa !2448
  store i8 0, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %1294, %1292
  %1297 = phi i64 [ %.pre3, %1292 ], [ %1276, %1294 ]
  %1298 = phi i64 [ %.pre2, %1292 ], [ %1286, %1294 ]
  %1299 = phi %struct.Memory* [ %1293, %1292 ], [ %MEMORY.1, %1294 ]
  %1300 = add i64 %1298, -1
  %1301 = shl i64 %1300, 6
  store i64 %1301, i64* %RAX, align 8, !tbaa !2428
  %1302 = load i64, i64* %RSI, align 8
  %1303 = add i64 %1301, %1302
  store i64 %1303, i64* %RSI, align 8, !tbaa !2428
  %1304 = icmp ult i64 %1303, %1302
  %1305 = icmp ult i64 %1303, %1301
  %1306 = or i1 %1304, %1305
  %1307 = zext i1 %1306 to i8
  store i8 %1307, i8* %62, align 1, !tbaa !2432
  %1308 = trunc i64 %1303 to i32
  %1309 = and i32 %1308, 255
  %1310 = tail call i32 @llvm.ctpop.i32(i32 %1309) #12
  %1311 = trunc i32 %1310 to i8
  %1312 = and i8 %1311, 1
  %1313 = xor i8 %1312, 1
  store i8 %1313, i8* %63, align 1, !tbaa !2446
  %1314 = xor i64 %1302, %1303
  %1315 = lshr i64 %1314, 4
  %1316 = trunc i64 %1315 to i8
  %1317 = and i8 %1316, 1
  store i8 %1317, i8* %64, align 1, !tbaa !2447
  %1318 = icmp eq i64 %1303, 0
  %1319 = zext i1 %1318 to i8
  store i8 %1319, i8* %65, align 1, !tbaa !2448
  %1320 = lshr i64 %1303, 63
  %1321 = trunc i64 %1320 to i8
  store i8 %1321, i8* %66, align 1, !tbaa !2449
  %1322 = lshr i64 %1302, 63
  %1323 = lshr i64 %1300, 57
  %1324 = and i64 %1323, 1
  %1325 = xor i64 %1320, %1322
  %1326 = xor i64 %1320, %1324
  %1327 = add nuw nsw i64 %1325, %1326
  %1328 = icmp eq i64 %1327, 2
  %1329 = zext i1 %1328 to i8
  store i8 %1329, i8* %67, align 1, !tbaa !2450
  %1330 = load i64, i64* %RBP, align 8
  %1331 = add i64 %1330, -72
  %1332 = add i64 %1297, 15
  store i64 %1332, i64* %PC, align 8
  %1333 = inttoptr i64 %1331 to i64*
  %1334 = load i64, i64* %1333, align 8
  store i64 %1334, i64* %RAX, align 8, !tbaa !2428
  %1335 = add i64 %1303, 48
  %1336 = add i64 %1297, 19
  store i64 %1336, i64* %PC, align 8
  %1337 = inttoptr i64 %1335 to i64*
  %1338 = load i64, i64* %1337, align 8
  %1339 = sub i64 %1334, %1338
  %1340 = icmp ult i64 %1334, %1338
  %1341 = zext i1 %1340 to i8
  store i8 %1341, i8* %62, align 1, !tbaa !2432
  %1342 = trunc i64 %1339 to i32
  %1343 = and i32 %1342, 255
  %1344 = tail call i32 @llvm.ctpop.i32(i32 %1343) #12
  %1345 = trunc i32 %1344 to i8
  %1346 = and i8 %1345, 1
  %1347 = xor i8 %1346, 1
  store i8 %1347, i8* %63, align 1, !tbaa !2446
  %1348 = xor i64 %1338, %1334
  %1349 = xor i64 %1348, %1339
  %1350 = lshr i64 %1349, 4
  %1351 = trunc i64 %1350 to i8
  %1352 = and i8 %1351, 1
  store i8 %1352, i8* %64, align 1, !tbaa !2447
  %1353 = icmp eq i64 %1339, 0
  %1354 = zext i1 %1353 to i8
  store i8 %1354, i8* %65, align 1, !tbaa !2448
  %1355 = lshr i64 %1339, 63
  %1356 = trunc i64 %1355 to i8
  store i8 %1356, i8* %66, align 1, !tbaa !2449
  %1357 = lshr i64 %1334, 63
  %1358 = lshr i64 %1338, 63
  %1359 = xor i64 %1358, %1357
  %1360 = xor i64 %1355, %1357
  %1361 = add nuw nsw i64 %1360, %1359
  %1362 = icmp eq i64 %1361, 2
  %1363 = zext i1 %1362 to i8
  store i8 %1363, i8* %67, align 1, !tbaa !2450
  %1364 = icmp ne i8 %1356, 0
  %1365 = xor i1 %1364, %1362
  %.demorgan = or i1 %1353, %1365
  %1366 = xor i1 %.demorgan, true
  %1367 = zext i1 %1366 to i8
  store i8 %1367, i8* %DIL, align 1, !tbaa !2453
  %1368 = add i64 %1330, -57
  %1369 = add i64 %1297, 27
  store i64 %1369, i64* %PC, align 8
  %1370 = inttoptr i64 %1368 to i8*
  store i8 %1367, i8* %1370, align 1
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_400c6a

block_400c6a:                                     ; preds = %block_400c1a, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  %1371 = phi i64 [ %1408, %block_400c1a ], [ %.pre4, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_400c1a ], [ %1299, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %1372 = load i64, i64* %RBP, align 8
  %1373 = add i64 %1372, -57
  %1374 = add i64 %1371, 3
  store i64 %1374, i64* %PC, align 8
  %1375 = inttoptr i64 %1373 to i8*
  %1376 = load i8, i8* %1375, align 1
  store i8 %1376, i8* %AL, align 1, !tbaa !2453
  %1377 = and i8 %1376, 1
  store i8 0, i8* %62, align 1, !tbaa !2432
  %1378 = zext i8 %1377 to i32
  %1379 = tail call i32 @llvm.ctpop.i32(i32 %1378) #12
  %1380 = trunc i32 %1379 to i8
  %1381 = xor i8 %1380, 1
  store i8 %1381, i8* %63, align 1, !tbaa !2446
  %1382 = xor i8 %1377, 1
  store i8 %1382, i8* %65, align 1, !tbaa !2448
  store i8 0, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  store i8 0, i8* %64, align 1, !tbaa !2447
  %1383 = icmp eq i8 %1382, 0
  %.v = select i1 %1383, i64 16, i64 11
  %1384 = add i64 %1371, %.v
  store i64 %1384, i64* %PC, align 8, !tbaa !2428
  br i1 %1383, label %block_400c7a, label %block_400c75

block_400c1a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1, %block_400b80
  %1385 = phi i64 [ %.pre, %block_400b80 ], [ %1246, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400b80 ], [ %1007, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit1 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %62, align 1, !tbaa !2432
  store i8 1, i8* %63, align 1, !tbaa !2446
  store i8 1, i8* %65, align 1, !tbaa !2448
  store i8 0, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  store i8 0, i8* %64, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %1386 = load i64, i64* %RBP, align 8
  %1387 = add i64 %1386, -56
  %1388 = add i64 %1385, 8
  store i64 %1388, i64* %PC, align 8
  %1389 = inttoptr i64 %1387 to i64*
  %1390 = load i64, i64* %1389, align 8
  %1391 = add i64 %1390, -1
  store i64 %1391, i64* %RDX, align 8, !tbaa !2428
  %1392 = trunc i64 %1391 to i32
  %1393 = and i32 %1392, 255
  %1394 = tail call i32 @llvm.ctpop.i32(i32 %1393) #12
  %1395 = trunc i32 %1394 to i8
  %1396 = and i8 %1395, 1
  %1397 = xor i8 %1396, 1
  %1398 = icmp eq i64 %1391, 0
  %1399 = zext i1 %1398 to i8
  %1400 = lshr i64 %1391, 63
  %1401 = trunc i64 %1400 to i8
  store i8 0, i8* %62, align 1, !tbaa !2432
  store i8 %1397, i8* %63, align 1, !tbaa !2446
  store i8 0, i8* %64, align 1, !tbaa !2447
  store i8 %1399, i8* %65, align 1, !tbaa !2448
  store i8 %1401, i8* %66, align 1, !tbaa !2449
  store i8 0, i8* %67, align 1, !tbaa !2450
  %1402 = add i64 %1386, -57
  %1403 = add i64 %1385, 19
  store i64 %1403, i64* %PC, align 8
  %1404 = inttoptr i64 %1402 to i8*
  store i8 0, i8* %1404, align 1
  %1405 = load i64, i64* %PC, align 8
  %1406 = load i8, i8* %65, align 1, !tbaa !2448
  %1407 = icmp ne i8 %1406, 0
  %.v18 = select i1 %1407, i64 61, i64 6
  %1408 = add i64 %1405, %.v18
  store i64 %1408, i64* %PC, align 8, !tbaa !2428
  %1409 = icmp eq i8 %1406, 1
  br i1 %1409, label %block_400c6a, label %block_400c33
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402f10_primal_update_flow(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_402f10:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_402f20

block_402f59:                                     ; preds = %block_402f4d, %block_402f3c
  %32 = phi i64 [ %.pre15, %block_402f4d ], [ %83, %block_402f3c ]
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -8
  %35 = add i64 %32, 9
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %RAX, align 8, !tbaa !2428
  %38 = add i64 %37, 24
  %39 = add i64 %32, 13
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %RAX, align 8, !tbaa !2428
  %42 = add i64 %32, 17
  store i64 %42, i64* %PC, align 8
  store i64 %41, i64* %36, align 8
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, -74
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  br label %block_402f20

block_402f74:                                     ; preds = %block_402f74.preheader, %block_402fad
  %45 = phi i64 [ %.pre17, %block_402fad ], [ %149, %block_402f74.preheader ]
  %46 = phi i64 [ %.pre16, %block_402fad ], [ %183, %block_402f74.preheader ]
  %.sink8 = phi i64 [ -74, %block_402fad ], [ 5, %block_402f74.preheader ]
  %47 = add i64 %46, %.sink8
  %48 = add i64 %45, -16
  %49 = add i64 %47, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %48 to i64*
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %RAX, align 8, !tbaa !2428
  %52 = add i64 %45, -24
  %53 = add i64 %47, 8
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %52 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %51, %55
  %57 = icmp ult i64 %51, %55
  %58 = zext i1 %57 to i8
  store i8 %58, i8* %26, align 1, !tbaa !2432
  %59 = trunc i64 %56 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %27, align 1, !tbaa !2446
  %65 = xor i64 %55, %51
  %66 = xor i64 %65, %56
  %67 = lshr i64 %66, 4
  %68 = trunc i64 %67 to i8
  %69 = and i8 %68, 1
  store i8 %69, i8* %28, align 1, !tbaa !2447
  %70 = icmp eq i64 %56, 0
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %29, align 1, !tbaa !2448
  %72 = lshr i64 %56, 63
  %73 = trunc i64 %72 to i8
  store i8 %73, i8* %30, align 1, !tbaa !2449
  %74 = lshr i64 %51, 63
  %75 = lshr i64 %55, 63
  %76 = xor i64 %75, %74
  %77 = xor i64 %72, %74
  %78 = add nuw nsw i64 %77, %76
  %79 = icmp eq i64 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %31, align 1, !tbaa !2450
  %.v21 = select i1 %70, i64 79, i64 14
  %81 = add i64 %47, %.v21
  store i64 %81, i64* %PC, align 8, !tbaa !2428
  br i1 %70, label %block_402fc3, label %block_402f82

block_402f3c:                                     ; preds = %block_402f2e
  store i64 0, i64* %104, align 8
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 17
  store i64 %83, i64* %PC, align 8, !tbaa !2428
  br label %block_402f59

block_402f4d:                                     ; preds = %block_402f2e
  store i64 1, i64* %104, align 8
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_402f59

block_402f2e:                                     ; preds = %block_402f20
  %84 = add i64 %183, 4
  store i64 %84, i64* %PC, align 8
  %85 = load i64, i64* %152, align 8
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = add i64 %183, 8
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i32*
  %89 = load i32, i32* %88, align 4
  store i8 0, i8* %26, align 1, !tbaa !2432
  %90 = and i32 %89, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #12
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %28, align 1, !tbaa !2447
  %95 = icmp eq i32 %89, 0
  %96 = zext i1 %95 to i8
  store i8 %96, i8* %29, align 1, !tbaa !2448
  %97 = lshr i32 %89, 31
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  %.v = select i1 %95, i64 31, i64 14
  %99 = add i64 %183, %.v
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC, align 8
  %101 = load i64, i64* %152, align 8
  store i64 %101, i64* %RAX, align 8, !tbaa !2428
  %102 = add i64 %101, 80
  %103 = add i64 %99, 12
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i64*
  br i1 %95, label %block_402f4d, label %block_402f3c

block_402fad:                                     ; preds = %block_402fa1, %block_402f90
  %105 = phi i64 [ %.pre18, %block_402fa1 ], [ %138, %block_402f90 ]
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -16
  %108 = add i64 %105, 9
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %RAX, align 8, !tbaa !2428
  %111 = add i64 %110, 24
  %112 = add i64 %105, 13
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RAX, align 8, !tbaa !2428
  %115 = add i64 %105, 17
  store i64 %115, i64* %PC, align 8
  store i64 %114, i64* %109, align 8
  %.pre16 = load i64, i64* %PC, align 8
  %.pre17 = load i64, i64* %RBP, align 8
  br label %block_402f74

block_402f82:                                     ; preds = %block_402f74
  %116 = add i64 %81, 4
  store i64 %116, i64* %PC, align 8
  %117 = load i64, i64* %50, align 8
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = add i64 %117, 8
  %119 = add i64 %81, 8
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %118 to i32*
  %121 = load i32, i32* %120, align 4
  store i8 0, i8* %26, align 1, !tbaa !2432
  %122 = and i32 %121, 255
  %123 = tail call i32 @llvm.ctpop.i32(i32 %122) #12
  %124 = trunc i32 %123 to i8
  %125 = and i8 %124, 1
  %126 = xor i8 %125, 1
  store i8 %126, i8* %27, align 1, !tbaa !2446
  store i8 0, i8* %28, align 1, !tbaa !2447
  %127 = icmp eq i32 %121, 0
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %29, align 1, !tbaa !2448
  %129 = lshr i32 %121, 31
  %130 = trunc i32 %129 to i8
  store i8 %130, i8* %30, align 1, !tbaa !2449
  store i8 0, i8* %31, align 1, !tbaa !2450
  %.v20 = select i1 %127, i64 31, i64 14
  %131 = add i64 %81, %.v20
  %132 = add i64 %131, 4
  store i64 %132, i64* %PC, align 8
  %133 = load i64, i64* %50, align 8
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = add i64 %133, 80
  %135 = add i64 %131, 12
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i64*
  br i1 %127, label %block_402fa1, label %block_402f90

block_402f90:                                     ; preds = %block_402f82
  store i64 1, i64* %136, align 8
  %137 = load i64, i64* %PC, align 8
  %138 = add i64 %137, 17
  store i64 %138, i64* %PC, align 8, !tbaa !2428
  br label %block_402fad

block_402fc3:                                     ; preds = %block_402f74
  %139 = add i64 %81, 1
  store i64 %139, i64* %PC, align 8
  %140 = load i64, i64* %5, align 8, !tbaa !2428
  %141 = add i64 %140, 8
  %142 = inttoptr i64 %140 to i64*
  %143 = load i64, i64* %142, align 8
  store i64 %143, i64* %RBP, align 8, !tbaa !2428
  store i64 %141, i64* %5, align 8, !tbaa !2428
  %144 = add i64 %81, 2
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %141 to i64*
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %PC, align 8, !tbaa !2428
  %147 = add i64 %140, 16
  store i64 %147, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402fa1:                                     ; preds = %block_402f82
  store i64 0, i64* %136, align 8
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_402fad

block_402f20:                                     ; preds = %block_402f59, %block_402f10
  %148 = phi i64 [ %44, %block_402f59 ], [ %.pre, %block_402f10 ]
  %149 = load i64, i64* %RBP, align 8
  %150 = add i64 %149, -8
  %151 = add i64 %148, 4
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %150 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = add i64 %149, -24
  %155 = add i64 %148, 8
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %154 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = sub i64 %153, %157
  %159 = icmp ult i64 %153, %157
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %26, align 1, !tbaa !2432
  %161 = trunc i64 %158 to i32
  %162 = and i32 %161, 255
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #12
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  store i8 %166, i8* %27, align 1, !tbaa !2446
  %167 = xor i64 %157, %153
  %168 = xor i64 %167, %158
  %169 = lshr i64 %168, 4
  %170 = trunc i64 %169 to i8
  %171 = and i8 %170, 1
  store i8 %171, i8* %28, align 1, !tbaa !2447
  %172 = icmp eq i64 %158, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %29, align 1, !tbaa !2448
  %174 = lshr i64 %158, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %30, align 1, !tbaa !2449
  %176 = lshr i64 %153, 63
  %177 = lshr i64 %157, 63
  %178 = xor i64 %177, %176
  %179 = xor i64 %174, %176
  %180 = add nuw nsw i64 %179, %178
  %181 = icmp eq i64 %180, 2
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %31, align 1, !tbaa !2450
  %.v19 = select i1 %172, i64 79, i64 14
  %183 = add i64 %148, %.v19
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  br i1 %172, label %block_402f74.preheader, label %block_402f2e

block_402f74.preheader:                           ; preds = %block_402f20
  br label %block_402f74
}

; Function Attrs: noinline
define %struct.Memory* @sub_4019c0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4019c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -136
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 128
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -12
  %40 = add i64 %10, 17
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %39 to i32*
  store i32 0, i32* %41, align 4
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i32, i32* %EDI, align 4
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 3
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %47, align 4
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %RSI, align 8
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %53, align 8
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %55 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = add i32 %59, -2
  %61 = icmp ult i32 %59, 2
  %62 = zext i1 %61 to i8
  store i8 %62, i8* %14, align 1, !tbaa !2432
  %63 = and i32 %60, 255
  %64 = tail call i32 @llvm.ctpop.i32(i32 %63) #12
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = xor i8 %66, 1
  store i8 %67, i8* %21, align 1, !tbaa !2446
  %68 = xor i32 %60, %59
  %69 = lshr i32 %68, 4
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  store i8 %71, i8* %26, align 1, !tbaa !2447
  %72 = icmp eq i32 %60, 0
  %73 = zext i1 %72 to i8
  store i8 %73, i8* %29, align 1, !tbaa !2448
  %74 = lshr i32 %60, 31
  %75 = trunc i32 %74 to i8
  store i8 %75, i8* %32, align 1, !tbaa !2449
  %76 = lshr i32 %59, 31
  %77 = xor i32 %74, %76
  %78 = add nuw nsw i32 %77, %76
  %79 = icmp eq i32 %78, 2
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %38, align 1, !tbaa !2450
  %81 = icmp ne i8 %75, 0
  %82 = xor i1 %81, %79
  %.v = select i1 %82, i64 10, i64 22
  %83 = add i64 %56, %.v
  store i64 %83, i64* %PC, align 8, !tbaa !2428
  br i1 %82, label %block_4019e3, label %block_4019ef

block_401ad9:                                     ; preds = %block_4019ef
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 458), i64* %RDI, align 8, !tbaa !2428
  %84 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 408) to i64*), align 8
  store i64 %84, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %85 = add i64 %278, -4745
  %86 = add i64 %278, 25
  %87 = load i64, i64* %RSP, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %86, i64* %89, align 8
  store i64 %88, i64* %RSP, align 8, !tbaa !2428
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  %90 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %265)
  %91 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %92 = load i64, i64* %RBP, align 8
  %93 = add i64 %92, -76
  %94 = load i32, i32* %EAX, align 4
  %95 = add i64 %91, 13
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i32*
  store i32 %94, i32* %96, align 4
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 6305
  %99 = add i64 %97, 5
  %100 = load i64, i64* %RSP, align 8, !tbaa !2428
  %101 = add i64 %100, -8
  %102 = inttoptr i64 %101 to i64*
  store i64 %99, i64* %102, align 8
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  store i64 %98, i64* %PC, align 8, !tbaa !2428
  %103 = tail call %struct.Memory* @sub_4033a0_primal_start_artificial_renamed_(%struct.State* nonnull %0, i64 %98, %struct.Memory* %90)
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -88
  %106 = load i64, i64* %RAX, align 8
  %107 = load i64, i64* %PC, align 8
  %108 = add i64 %107, 4
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %105 to i64*
  store i64 %106, i64* %109, align 8
  %110 = load i64, i64* %PC, align 8
  %111 = add i64 %110, -760
  %112 = add i64 %110, 5
  %113 = load i64, i64* %RSP, align 8, !tbaa !2428
  %114 = add i64 %113, -8
  %115 = inttoptr i64 %114 to i64*
  store i64 %112, i64* %115, align 8
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  store i64 %111, i64* %PC, align 8, !tbaa !2428
  %116 = tail call %struct.Memory* @sub_401810_global_opt_renamed_(%struct.State* nonnull %0, i64 %111, %struct.Memory* %103)
  %117 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 492), i64* %RDI, align 8, !tbaa !2428
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -96
  %120 = load i64, i64* %RAX, align 8
  %121 = add i64 %117, 14
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %122, align 8
  %123 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %124 = add i64 %123, -4811
  %125 = add i64 %123, 7
  %126 = load i64, i64* %RSP, align 8, !tbaa !2428
  %127 = add i64 %126, -8
  %128 = inttoptr i64 %127 to i64*
  store i64 %125, i64* %128, align 8
  store i64 %127, i64* %RSP, align 8, !tbaa !2428
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  %129 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %116)
  %130 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 498), i64* %RDI, align 8, !tbaa !2428
  store i64 ptrtoint (%net_type* @net to i64), i64* %RSI, align 8, !tbaa !2428
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -100
  %133 = load i32, i32* %EAX, align 4
  %134 = add i64 %130, 23
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %132 to i32*
  store i32 %133, i32* %135, align 4
  %136 = load i64, i64* %PC, align 8
  %137 = add i64 %136, 2631
  %138 = add i64 %136, 5
  %139 = load i64, i64* %RSP, align 8, !tbaa !2428
  %140 = add i64 %139, -8
  %141 = inttoptr i64 %140 to i64*
  store i64 %138, i64* %141, align 8
  store i64 %140, i64* %RSP, align 8, !tbaa !2428
  store i64 %137, i64* %PC, align 8, !tbaa !2428
  %142 = tail call %struct.Memory* @sub_402580_write_circulations_renamed_(%struct.State* nonnull %0, i64 %137, %struct.Memory* %129)
  %143 = load i64, i64* %RAX, align 8
  %144 = load i64, i64* %PC, align 8
  store i8 0, i8* %14, align 1, !tbaa !2432
  %145 = trunc i64 %143 to i32
  %146 = and i32 %145, 255
  %147 = tail call i32 @llvm.ctpop.i32(i32 %146) #12
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  store i8 %150, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %151 = icmp eq i64 %143, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %29, align 1, !tbaa !2448
  %153 = lshr i64 %143, 63
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %.v4 = select i1 %151, i64 41, i64 10
  %155 = add i64 %144, %.v4
  %156 = add i64 %155, 10
  store i64 %156, i64* %PC, align 8
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  br i1 %151, label %block_401b67, label %block_401b48

block_4019ef:                                     ; preds = %block_4019c0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 270), i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %157 = add i64 %83, -4511
  %158 = add i64 %83, 17
  %159 = load i64, i64* %RSP, align 8, !tbaa !2428
  %160 = add i64 %159, -8
  %161 = inttoptr i64 %160 to i64*
  store i64 %158, i64* %161, align 8
  store i64 %160, i64* %RSP, align 8, !tbaa !2428
  store i64 %157, i64* %PC, align 8, !tbaa !2428
  %162 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %2)
  %163 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 302), i64* %RDI, align 8, !tbaa !2428
  %164 = load i64, i64* %RBP, align 8
  %165 = add i64 %164, -20
  %166 = load i32, i32* %EAX, align 4
  %167 = add i64 %163, 13
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %165 to i32*
  store i32 %166, i32* %168, align 4
  %169 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %170 = add i64 %169, -4541
  %171 = add i64 %169, 7
  %172 = load i64, i64* %RSP, align 8, !tbaa !2428
  %173 = add i64 %172, -8
  %174 = inttoptr i64 %173 to i64*
  store i64 %171, i64* %174, align 8
  store i64 %173, i64* %RSP, align 8, !tbaa !2428
  store i64 %170, i64* %PC, align 8, !tbaa !2428
  %175 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %162)
  %176 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 354), i64* %RDI, align 8, !tbaa !2428
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -24
  %179 = load i32, i32* %EAX, align 4
  %180 = add i64 %176, 13
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %178 to i32*
  store i32 %179, i32* %181, align 4
  %182 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %183 = add i64 %182, -4561
  %184 = add i64 %182, 7
  %185 = load i64, i64* %RSP, align 8, !tbaa !2428
  %186 = add i64 %185, -8
  %187 = inttoptr i64 %186 to i64*
  store i64 %184, i64* %187, align 8
  store i64 %186, i64* %RSP, align 8, !tbaa !2428
  store i64 %183, i64* %PC, align 8, !tbaa !2428
  %188 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %175)
  %189 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 400), i64* %RDI, align 8, !tbaa !2428
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -28
  %192 = load i32, i32* %EAX, align 4
  %193 = add i64 %189, 13
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %191 to i32*
  store i32 %192, i32* %194, align 4
  %195 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %196 = add i64 %195, -4581
  %197 = add i64 %195, 7
  %198 = load i64, i64* %RSP, align 8, !tbaa !2428
  %199 = add i64 %198, -8
  %200 = inttoptr i64 %199 to i64*
  store i64 %197, i64* %200, align 8
  store i64 %199, i64* %RSP, align 8, !tbaa !2428
  store i64 %196, i64* %PC, align 8, !tbaa !2428
  %201 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %188)
  %202 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 661), i64* %RDI, align 8, !tbaa !2428
  %203 = load i64, i64* %RBP, align 8
  %204 = add i64 %203, -32
  %205 = load i32, i32* %EAX, align 4
  %206 = add i64 %202, 13
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %204 to i32*
  store i32 %205, i32* %207, align 4
  %208 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %209 = add i64 %208, -4601
  %210 = add i64 %208, 7
  %211 = load i64, i64* %RSP, align 8, !tbaa !2428
  %212 = add i64 %211, -8
  %213 = inttoptr i64 %212 to i64*
  store i64 %210, i64* %213, align 8
  store i64 %212, i64* %RSP, align 8, !tbaa !2428
  store i64 %209, i64* %PC, align 8, !tbaa !2428
  %214 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %201)
  %215 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i64 624, i64* %RCX, align 8, !tbaa !2428
  store i64 624, i64* %RDX, align 8, !tbaa !2428
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -40
  %218 = add i64 %215, 23
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %217 to i64*
  store i64 ptrtoint (%net_type* @net to i64), i64* %219, align 8
  %220 = load i64, i64* %RBP, align 8
  %221 = add i64 %220, -44
  %222 = load i32, i32* %EAX, align 4
  %223 = load i64, i64* %PC, align 8
  %224 = add i64 %223, 3
  store i64 %224, i64* %PC, align 8
  %225 = inttoptr i64 %221 to i32*
  store i32 %222, i32* %225, align 4
  %226 = load i64, i64* %PC, align 8
  %227 = add i64 %226, -4618
  %228 = add i64 %226, 5
  %229 = load i64, i64* %RSP, align 8, !tbaa !2428
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %228, i64* %231, align 8
  store i64 %230, i64* %RSP, align 8, !tbaa !2428
  store i64 %227, i64* %PC, align 8, !tbaa !2428
  %232 = tail call fastcc %struct.Memory* @ext_608f60_memset(%struct.State* nonnull %0, %struct.Memory* %214)
  %233 = load i64, i64* %PC, align 8
  store i64 10000000, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 528) to i64*), align 16
  %234 = load i64, i64* %RBP, align 8
  %235 = add i64 %234, -16
  %236 = add i64 %233, 16
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %235 to i64*
  %238 = load i64, i64* %237, align 8
  store i64 %238, i64* %RDX, align 8, !tbaa !2428
  %239 = add i64 %238, 8
  %240 = add i64 %233, 20
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241, align 8
  store i64 %242, i64* %RSI, align 8, !tbaa !2428
  store i64 and (i64 ptrtoint (%net_type* @net to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  store i64 zext (i32 trunc (i64 and (i64 ptrtoint (%net_type* @net to i64), i64 4294967295) to i32) to i64), i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %233, -4671
  %244 = add i64 %233, 32
  %245 = load i64, i64* %RSP, align 8, !tbaa !2428
  %246 = add i64 %245, -8
  %247 = inttoptr i64 %246 to i64*
  store i64 %244, i64* %247, align 8
  store i64 %246, i64* %RSP, align 8, !tbaa !2428
  store i64 %243, i64* %PC, align 8, !tbaa !2428
  %248 = tail call fastcc %struct.Memory* @ext_400830_strcpy(%struct.State* nonnull %0, %struct.Memory* %232)
  %249 = load i64, i64* %RBP, align 8
  %250 = add i64 %249, -40
  %251 = load i64, i64* %PC, align 8
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %250 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RDI, align 8, !tbaa !2428
  %255 = add i64 %249, -56
  %256 = load i64, i64* %RAX, align 8
  %257 = add i64 %251, 8
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %255 to i64*
  store i64 %256, i64* %258, align 8
  %259 = load i64, i64* %PC, align 8
  %260 = add i64 %259, 6953
  %261 = add i64 %259, 5
  %262 = load i64, i64* %RSP, align 8, !tbaa !2428
  %263 = add i64 %262, -8
  %264 = inttoptr i64 %263 to i64*
  store i64 %261, i64* %264, align 8
  store i64 %263, i64* %RSP, align 8, !tbaa !2428
  store i64 %260, i64* %PC, align 8, !tbaa !2428
  %265 = tail call %struct.Memory* @sub_4035c0_read_min_renamed_(%struct.State* nonnull %0, i64 %260, %struct.Memory* %248)
  %266 = load i64, i64* %RAX, align 8
  %267 = load i64, i64* %PC, align 8
  store i8 0, i8* %14, align 1, !tbaa !2432
  %268 = trunc i64 %266 to i32
  %269 = and i32 %268, 255
  %270 = tail call i32 @llvm.ctpop.i32(i32 %269) #12
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  %273 = xor i8 %272, 1
  store i8 %273, i8* %21, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %274 = icmp eq i64 %266, 0
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %29, align 1, !tbaa !2448
  %276 = lshr i64 %266, 63
  %277 = trunc i64 %276 to i8
  store i8 %277, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %.v3 = select i1 %274, i64 61, i64 10
  %278 = add i64 %267, %.v3
  %279 = add i64 %278, 10
  store i64 %279, i64* %PC, align 8
  br i1 %274, label %block_401ad9, label %block_401aa6

block_401b48:                                     ; preds = %block_401ad9
  %280 = add i64 %155, 2392
  %281 = add i64 %155, 15
  %282 = load i64, i64* %RSP, align 8, !tbaa !2428
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284, align 8
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  %285 = tail call %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* nonnull %0, i64 %280, %struct.Memory* %142)
  %286 = load i64, i64* %RBP, align 8
  %287 = add i64 %286, -4
  %288 = load i64, i64* %PC, align 8
  %289 = add i64 %288, 7
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %287 to i32*
  store i32 -1, i32* %290, align 4
  %291 = load i64, i64* %RBP, align 8
  %292 = add i64 %291, -112
  %293 = load i64, i64* %RAX, align 8
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %292 to i64*
  store i64 %293, i64* %296, align 8
  %297 = load i64, i64* %PC, align 8
  %298 = add i64 %297, 31
  store i64 %298, i64* %PC, align 8, !tbaa !2428
  br label %block_401b81

block_401b67:                                     ; preds = %block_401ad9
  %299 = add i64 %155, 2361
  %300 = add i64 %155, 15
  %301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %303, align 8
  store i64 %302, i64* %RSP, align 8, !tbaa !2428
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  %304 = tail call %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* nonnull %0, i64 %299, %struct.Memory* %142)
  %305 = load i64, i64* %RBP, align 8
  %306 = add i64 %305, -4
  %307 = load i64, i64* %PC, align 8
  %308 = add i64 %307, 7
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %306 to i32*
  store i32 0, i32* %309, align 4
  %310 = load i64, i64* %RBP, align 8
  %311 = add i64 %310, -120
  %312 = load i64, i64* %RAX, align 8
  %313 = load i64, i64* %PC, align 8
  %314 = add i64 %313, 4
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %311 to i64*
  store i64 %312, i64* %315, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_401b81

block_401aa6:                                     ; preds = %block_4019ef
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 440), i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %316 = add i64 %278, -4694
  %317 = add i64 %278, 17
  %318 = load i64, i64* %RSP, align 8, !tbaa !2428
  %319 = add i64 %318, -8
  %320 = inttoptr i64 %319 to i64*
  store i64 %317, i64* %320, align 8
  store i64 %319, i64* %RSP, align 8, !tbaa !2428
  store i64 %316, i64* %PC, align 8, !tbaa !2428
  %321 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %265)
  %322 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %323 = load i64, i64* %RBP, align 8
  %324 = add i64 %323, -60
  %325 = load i32, i32* %EAX, align 4
  %326 = add i64 %322, 13
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %324 to i32*
  store i32 %325, i32* %327, align 4
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 2524
  %330 = add i64 %328, 5
  %331 = load i64, i64* %RSP, align 8, !tbaa !2428
  %332 = add i64 %331, -8
  %333 = inttoptr i64 %332 to i64*
  store i64 %330, i64* %333, align 8
  store i64 %332, i64* %RSP, align 8, !tbaa !2428
  store i64 %329, i64* %PC, align 8, !tbaa !2428
  %334 = tail call %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* nonnull %0, i64 %329, %struct.Memory* %321)
  %335 = load i64, i64* %RBP, align 8
  %336 = add i64 %335, -4
  %337 = load i64, i64* %PC, align 8
  %338 = add i64 %337, 7
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %336 to i32*
  store i32 -1, i32* %339, align 4
  %340 = load i64, i64* %RBP, align 8
  %341 = add i64 %340, -72
  %342 = load i64, i64* %RAX, align 8
  %343 = load i64, i64* %PC, align 8
  %344 = add i64 %343, 4
  store i64 %344, i64* %PC, align 8
  %345 = inttoptr i64 %341 to i64*
  store i64 %342, i64* %345, align 8
  %346 = load i64, i64* %PC, align 8
  %347 = add i64 %346, 173
  store i64 %347, i64* %PC, align 8, !tbaa !2428
  br label %block_401b81

block_4019e3:                                     ; preds = %block_4019c0
  %348 = add i64 %54, -4
  %349 = add i64 %83, 7
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %348 to i32*
  store i32 -1, i32* %350, align 4
  %351 = load i64, i64* %PC, align 8
  %352 = add i64 %351, 407
  store i64 %352, i64* %PC, align 8, !tbaa !2428
  br label %block_401b81

block_401b81:                                     ; preds = %block_4019e3, %block_401aa6, %block_401b67, %block_401b48
  %353 = phi i64 [ %.pre, %block_401b67 ], [ %298, %block_401b48 ], [ %347, %block_401aa6 ], [ %352, %block_4019e3 ]
  %MEMORY.0 = phi %struct.Memory* [ %304, %block_401b67 ], [ %285, %block_401b48 ], [ %334, %block_401aa6 ], [ %2, %block_4019e3 ]
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -4
  %356 = add i64 %353, 3
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i32*
  %358 = load i32, i32* %357, align 4
  %359 = zext i32 %358 to i64
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = load i64, i64* %RSP, align 8
  %361 = add i64 %360, 128
  store i64 %361, i64* %RSP, align 8, !tbaa !2428
  %362 = icmp ugt i64 %360, -129
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %14, align 1, !tbaa !2432
  %364 = trunc i64 %361 to i32
  %365 = and i32 %364, 255
  %366 = tail call i32 @llvm.ctpop.i32(i32 %365) #12
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  store i8 %369, i8* %21, align 1, !tbaa !2446
  %370 = xor i64 %361, %360
  %371 = lshr i64 %370, 4
  %372 = trunc i64 %371 to i8
  %373 = and i8 %372, 1
  store i8 %373, i8* %26, align 1, !tbaa !2447
  %374 = icmp eq i64 %361, 0
  %375 = zext i1 %374 to i8
  store i8 %375, i8* %29, align 1, !tbaa !2448
  %376 = lshr i64 %361, 63
  %377 = trunc i64 %376 to i8
  store i8 %377, i8* %32, align 1, !tbaa !2449
  %378 = lshr i64 %360, 63
  %379 = xor i64 %376, %378
  %380 = add nuw nsw i64 %379, %376
  %381 = icmp eq i64 %380, 2
  %382 = zext i1 %381 to i8
  store i8 %382, i8* %38, align 1, !tbaa !2450
  %383 = add i64 %353, 11
  store i64 %383, i64* %PC, align 8
  %384 = add i64 %360, 136
  %385 = inttoptr i64 %361 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RBP, align 8, !tbaa !2428
  store i64 %384, i64* %RSP, align 8, !tbaa !2428
  %387 = add i64 %353, 12
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %384 to i64*
  %389 = load i64, i64* %388, align 8
  store i64 %389, i64* %PC, align 8, !tbaa !2428
  %390 = add i64 %360, 144
  store i64 %390, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_402580_write_circulations(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402580:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -104
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 657), i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2432
  store i8 1, i8* %12, align 1, !tbaa !2446
  store i8 1, i8* %14, align 1, !tbaa !2448
  store i8 0, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %13, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %17 = add i64 %6, -24
  %18 = load i64, i64* %RDI, align 8
  %19 = add i64 %9, 25
  store i64 %19, i64* %PC, align 8
  %20 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %20, align 8
  %21 = load i64, i64* %RBP, align 8
  %22 = add i64 %21, -24
  %23 = load i64, i64* %RSI, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 4
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %22 to i64*
  store i64 %23, i64* %26, align 8
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -32
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 8
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %28 to i64*
  store i64 0, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %RSI, align 8, !tbaa !2428
  %38 = add i64 %37, 576
  %39 = add i64 %34, 11
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %RSI, align 8, !tbaa !2428
  %42 = add i64 %34, 15
  store i64 %42, i64* %PC, align 8
  %43 = load i64, i64* %36, align 8
  store i64 %43, i64* %RDI, align 8, !tbaa !2428
  %44 = load i64, i64* %RDX, align 8
  %45 = add i64 %43, 440
  %46 = add i64 %34, 22
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %45 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %44, %48
  %50 = shl i64 %49, 6
  store i64 %50, i64* %RDX, align 8, !tbaa !2428
  %51 = add i64 %50, %41
  store i64 %51, i64* %RSI, align 8, !tbaa !2428
  %52 = icmp ult i64 %51, %41
  %53 = icmp ult i64 %51, %50
  %54 = or i1 %52, %53
  %55 = zext i1 %54 to i8
  store i8 %55, i8* %11, align 1, !tbaa !2432
  %56 = trunc i64 %51 to i32
  %57 = and i32 %56, 255
  %58 = tail call i32 @llvm.ctpop.i32(i32 %57) #12
  %59 = trunc i32 %58 to i8
  %60 = and i8 %59, 1
  %61 = xor i8 %60, 1
  store i8 %61, i8* %12, align 1, !tbaa !2446
  %62 = xor i64 %41, %51
  %63 = lshr i64 %62, 4
  %64 = trunc i64 %63 to i8
  %65 = and i8 %64, 1
  store i8 %65, i8* %13, align 1, !tbaa !2447
  %66 = icmp eq i64 %51, 0
  %67 = zext i1 %66 to i8
  store i8 %67, i8* %14, align 1, !tbaa !2448
  %68 = lshr i64 %51, 63
  %69 = trunc i64 %68 to i8
  store i8 %69, i8* %15, align 1, !tbaa !2449
  %70 = lshr i64 %41, 63
  %71 = lshr i64 %49, 57
  %72 = and i64 %71, 1
  %73 = xor i64 %68, %70
  %74 = xor i64 %68, %72
  %75 = add nuw nsw i64 %73, %74
  %76 = icmp eq i64 %75, 2
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %16, align 1, !tbaa !2450
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -64
  %80 = add i64 %34, 33
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i64*
  store i64 %51, i64* %81, align 8
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -16
  %84 = load i64, i64* %PC, align 8
  %85 = add i64 %84, 4
  store i64 %85, i64* %PC, align 8
  %86 = inttoptr i64 %83 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %RDI, align 8, !tbaa !2428
  %88 = load i64, i64* %RAX, align 8
  store i64 %88, i64* %RSI, align 8, !tbaa !2428
  %89 = add i64 %84, -7399
  %90 = add i64 %84, 12
  %91 = load i64, i64* %RSP, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %90, i64* %93, align 8
  store i64 %92, i64* %RSP, align 8, !tbaa !2428
  store i64 %89, i64* %PC, align 8, !tbaa !2428
  %94 = tail call fastcc %struct.Memory* @ext_609020_fopen(%struct.State* nonnull %0, %struct.Memory* %2)
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -32
  %97 = load i64, i64* %RAX, align 8
  %98 = load i64, i64* %PC, align 8
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %96 to i64*
  store i64 %97, i64* %100, align 8
  %101 = load i64, i64* %RAX, align 8
  %102 = load i64, i64* %PC, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %103 = trunc i64 %101 to i32
  %104 = and i32 %103, 255
  %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #12
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  store i8 %108, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %109 = icmp eq i64 %101, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %14, align 1, !tbaa !2448
  %111 = lshr i64 %101, 63
  %112 = trunc i64 %111 to i8
  store i8 %112, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v39 = select i1 %109, i64 10, i64 23
  %113 = add i64 %102, %.v39
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  %114 = load i64, i64* %RBP, align 8
  br i1 %109, label %block_4025e1, label %block_4025ee

block_4026ff.loopexit:                            ; preds = %block_4026ca
  br label %block_4026ff

block_4026ff:                                     ; preds = %block_4026ff.loopexit, %block_4026e4
  %115 = phi i64 [ %331, %block_4026e4 ], [ %220, %block_4026ff.loopexit ]
  %116 = add i64 %115, 5
  store i64 %116, i64* %PC, align 8
  %117 = load i64, i64* %208, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %118 = trunc i64 %117 to i32
  %119 = and i32 %118, 255
  %120 = tail call i32 @llvm.ctpop.i32(i32 %119) #12
  %121 = trunc i32 %120 to i8
  %122 = and i8 %121, 1
  %123 = xor i8 %122, 1
  store i8 %123, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %124 = icmp eq i64 %117, 0
  %125 = zext i1 %124 to i8
  store i8 %125, i8* %14, align 1, !tbaa !2448
  %126 = lshr i64 %117, 63
  %127 = trunc i64 %126 to i8
  store i8 %127, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v44 = select i1 %124, i64 11, i64 36
  %128 = add i64 %115, %.v44
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  br i1 %124, label %block_40270a, label %block_402723

block_40276a:                                     ; preds = %block_402619
  %129 = add i64 %350, -32
  %130 = add i64 %365, 4
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RDI, align 8, !tbaa !2428
  %133 = add i64 %365, -7978
  %134 = add i64 %365, 9
  %135 = load i64, i64* %RSP, align 8, !tbaa !2428
  %136 = add i64 %135, -8
  %137 = inttoptr i64 %136 to i64*
  store i64 %134, i64* %137, align 8
  store i64 %136, i64* %RSP, align 8, !tbaa !2428
  store i64 %133, i64* %PC, align 8, !tbaa !2428
  %138 = tail call fastcc %struct.Memory* @ext_608f50_fclose(%struct.State* nonnull %0, %struct.Memory* %MEMORY.4)
  %139 = load i64, i64* %RBP, align 8
  %140 = add i64 %139, -8
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, 8
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %140 to i64*
  store i64 0, i64* %143, align 8
  %144 = load i64, i64* %RBP, align 8
  %145 = add i64 %144, -84
  %146 = load i32, i32* %EAX, align 4
  %147 = load i64, i64* %PC, align 8
  %148 = add i64 %147, 3
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %145 to i32*
  store i32 %146, i32* %149, align 4
  %.pre37 = load i64, i64* %PC, align 8
  br label %block_40277e

block_4025e1:                                     ; preds = %block_402580
  %150 = add i64 %114, -8
  %151 = add i64 %113, 8
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %150 to i64*
  store i64 -1, i64* %152, align 8
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, 405
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  br label %block_40277e

block_4026d5:                                     ; preds = %block_4026ca
  %155 = add i64 %220, 4
  store i64 %155, i64* %PC, align 8
  %156 = load i64, i64* %208, align 8
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = add i64 %156, 48
  %158 = add i64 %220, 9
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %161 = trunc i64 %160 to i32
  %162 = and i32 %161, 255
  %163 = tail call i32 @llvm.ctpop.i32(i32 %162) #12
  %164 = trunc i32 %163 to i8
  %165 = and i8 %164, 1
  %166 = xor i8 %165, 1
  store i8 %166, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %167 = icmp eq i64 %160, 0
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %14, align 1, !tbaa !2448
  %169 = lshr i64 %160, 63
  %170 = trunc i64 %169 to i8
  store i8 %170, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v = select i1 %167, i64 20, i64 15
  %171 = add i64 %220, %.v
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  br i1 %167, label %block_4026e9, label %block_4026e4

block_40266c:                                     ; preds = %block_40265e
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 663), i64* %RSI, align 8, !tbaa !2428
  %172 = add i64 %333, -32
  %173 = add i64 %284, 14
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %176 = add i64 %284, -7644
  %177 = add i64 %284, 21
  %178 = load i64, i64* %RSP, align 8, !tbaa !2428
  %179 = add i64 %178, -8
  %180 = inttoptr i64 %179 to i64*
  store i64 %177, i64* %180, align 8
  store i64 %179, i64* %RSP, align 8, !tbaa !2428
  store i64 %176, i64* %PC, align 8, !tbaa !2428
  %181 = tail call fastcc %struct.Memory* @ext_608ff8_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %182 = load i64, i64* %RBP, align 8
  %183 = add i64 %182, -72
  %184 = load i32, i32* %EAX, align 4
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 3
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %183 to i32*
  store i32 %184, i32* %187, align 4
  %.pre32 = load i64, i64* %PC, align 8
  %.pre34 = load i64, i64* %RBP, align 8
  br label %block_402684

block_402754:                                     ; preds = %block_40274f, %block_402624
  %188 = phi i64 [ %350, %block_402624 ], [ %333, %block_40274f ]
  %189 = phi i64 [ %301, %block_402624 ], [ %489, %block_40274f ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.4, %block_402624 ], [ %MEMORY.3, %block_40274f ]
  %190 = add i64 %188, -40
  %191 = add i64 %189, 9
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %190 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RAX, align 8, !tbaa !2428
  %194 = add i64 %193, 32
  %195 = add i64 %189, 13
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = add i64 %189, 17
  store i64 %198, i64* %PC, align 8
  store i64 %197, i64* %192, align 8
  %199 = load i64, i64* %PC, align 8
  %200 = add i64 %199, -332
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  br label %block_402619

block_402742:                                     ; preds = %block_402723
  %201 = add i64 %205, -48
  %202 = add i64 %330, 8
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i64*
  store i64 0, i64* %203, align 8
  %.pre36 = load i64, i64* %PC, align 8
  br label %block_40274a

block_4026ca:                                     ; preds = %block_402684, %block_4026e9
  %204 = phi i64 [ %.pre35, %block_402684 ], [ %310, %block_4026e9 ]
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -56
  %207 = add i64 %204, 5
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %210 = trunc i64 %209 to i32
  %211 = and i32 %210, 255
  %212 = tail call i32 @llvm.ctpop.i32(i32 %211) #12
  %213 = trunc i32 %212 to i8
  %214 = and i8 %213, 1
  %215 = xor i8 %214, 1
  store i8 %215, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %216 = icmp eq i64 %209, 0
  %217 = zext i1 %216 to i8
  store i8 %217, i8* %14, align 1, !tbaa !2448
  %218 = lshr i64 %209, 63
  %219 = trunc i64 %218 to i8
  store i8 %219, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v38 = select i1 %216, i64 53, i64 11
  %220 = add i64 %204, %.v38
  store i64 %220, i64* %PC, align 8, !tbaa !2428
  br i1 %216, label %block_4026ff.loopexit, label %block_4026d5

block_402735:                                     ; preds = %block_402723
  %221 = add i64 %330, 4
  store i64 %221, i64* %PC, align 8
  %222 = load i64, i64* %208, align 8
  store i64 %222, i64* %RAX, align 8, !tbaa !2428
  %223 = add i64 %205, -48
  %224 = add i64 %330, 8
  store i64 %224, i64* %PC, align 8
  %225 = inttoptr i64 %223 to i64*
  store i64 %222, i64* %225, align 8
  %226 = load i64, i64* %PC, align 8
  %227 = add i64 %226, 13
  store i64 %227, i64* %PC, align 8, !tbaa !2428
  br label %block_40274a

block_402633:                                     ; preds = %block_402624
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 659), i64* %RSI, align 8, !tbaa !2428
  %228 = add i64 %350, -32
  %229 = add i64 %301, 14
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %228 to i64*
  %231 = load i64, i64* %230, align 8
  store i64 %231, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %232 = add i64 %301, -7587
  %233 = add i64 %301, 21
  %234 = load i64, i64* %RSP, align 8, !tbaa !2428
  %235 = add i64 %234, -8
  %236 = inttoptr i64 %235 to i64*
  store i64 %233, i64* %236, align 8
  store i64 %235, i64* %RSP, align 8, !tbaa !2428
  store i64 %232, i64* %PC, align 8, !tbaa !2428
  %237 = tail call fastcc %struct.Memory* @ext_608ff8_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.4)
  %238 = load i64, i64* %RBP, align 8
  %239 = add i64 %238, -40
  %240 = load i64, i64* %PC, align 8
  %241 = add i64 %240, 4
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %239 to i64*
  %243 = load i64, i64* %242, align 8
  store i64 %243, i64* %RSI, align 8, !tbaa !2428
  %244 = add i64 %238, -48
  %245 = add i64 %240, 8
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %244 to i64*
  store i64 %243, i64* %246, align 8
  %247 = load i64, i64* %RBP, align 8
  %248 = add i64 %247, -68
  %249 = load i32, i32* %EAX, align 4
  %250 = load i64, i64* %PC, align 8
  %251 = add i64 %250, 3
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %248 to i32*
  store i32 %249, i32* %252, align 4
  %.pre31 = load i64, i64* %PC, align 8
  br label %block_402653

block_40265e:                                     ; preds = %block_402653
  %253 = add i64 %348, 4
  store i64 %253, i64* %PC, align 8
  %254 = load i64, i64* %336, align 8
  store i64 %254, i64* %RAX, align 8, !tbaa !2428
  %255 = add i64 %333, -64
  %256 = add i64 %348, 8
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %255 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = sub i64 %254, %258
  %260 = icmp ult i64 %254, %258
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %11, align 1, !tbaa !2432
  %262 = trunc i64 %259 to i32
  %263 = and i32 %262, 255
  %264 = tail call i32 @llvm.ctpop.i32(i32 %263) #12
  %265 = trunc i32 %264 to i8
  %266 = and i8 %265, 1
  %267 = xor i8 %266, 1
  store i8 %267, i8* %12, align 1, !tbaa !2446
  %268 = xor i64 %258, %254
  %269 = xor i64 %268, %259
  %270 = lshr i64 %269, 4
  %271 = trunc i64 %270 to i8
  %272 = and i8 %271, 1
  store i8 %272, i8* %13, align 1, !tbaa !2447
  %273 = icmp eq i64 %259, 0
  %274 = zext i1 %273 to i8
  store i8 %274, i8* %14, align 1, !tbaa !2448
  %275 = lshr i64 %259, 63
  %276 = trunc i64 %275 to i8
  store i8 %276, i8* %15, align 1, !tbaa !2449
  %277 = lshr i64 %254, 63
  %278 = lshr i64 %258, 63
  %279 = xor i64 %278, %277
  %280 = xor i64 %275, %277
  %281 = add nuw nsw i64 %280, %279
  %282 = icmp eq i64 %281, 2
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %16, align 1, !tbaa !2450
  %.v43 = select i1 %260, i64 38, i64 14
  %284 = add i64 %348, %.v43
  store i64 %284, i64* %PC, align 8, !tbaa !2428
  br i1 %260, label %block_402684, label %block_40266c

block_402624:                                     ; preds = %block_402619
  %285 = add i64 %365, 4
  store i64 %285, i64* %PC, align 8
  %286 = load i64, i64* %353, align 8
  store i64 %286, i64* %RAX, align 8, !tbaa !2428
  %287 = add i64 %286, 48
  %288 = add i64 %365, 9
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i64*
  %290 = load i64, i64* %289, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %291 = trunc i64 %290 to i32
  %292 = and i32 %291, 255
  %293 = tail call i32 @llvm.ctpop.i32(i32 %292) #12
  %294 = trunc i32 %293 to i8
  %295 = and i8 %294, 1
  %296 = xor i8 %295, 1
  store i8 %296, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %297 = icmp eq i64 %290, 0
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %14, align 1, !tbaa !2448
  %299 = lshr i64 %290, 63
  %300 = trunc i64 %299 to i8
  store i8 %300, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v41 = select i1 %297, i64 304, i64 15
  %301 = add i64 %365, %.v41
  store i64 %301, i64* %PC, align 8, !tbaa !2428
  br i1 %297, label %block_402754, label %block_402633

block_4026e9:                                     ; preds = %block_4026d5
  %302 = add i64 %171, 9
  store i64 %302, i64* %PC, align 8
  %303 = load i64, i64* %208, align 8
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = add i64 %303, 32
  %305 = add i64 %171, 13
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306, align 8
  store i64 %307, i64* %RAX, align 8, !tbaa !2428
  %308 = add i64 %171, 17
  store i64 %308, i64* %PC, align 8
  store i64 %307, i64* %208, align 8
  %309 = load i64, i64* %PC, align 8
  %310 = add i64 %309, -48
  store i64 %310, i64* %PC, align 8, !tbaa !2428
  br label %block_4026ca

block_402723:                                     ; preds = %block_4026ff
  %311 = add i64 %128, 4
  store i64 %311, i64* %PC, align 8
  %312 = load i64, i64* %208, align 8
  store i64 %312, i64* %RAX, align 8, !tbaa !2428
  %313 = add i64 %312, 16
  %314 = add i64 %128, 8
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i64*
  %316 = load i64, i64* %315, align 8
  store i64 %316, i64* %RAX, align 8, !tbaa !2428
  %317 = add i64 %316, 96
  %318 = add i64 %128, 12
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i32*
  %320 = load i32, i32* %319, align 4
  store i8 0, i8* %11, align 1, !tbaa !2432
  %321 = and i32 %320, 255
  %322 = tail call i32 @llvm.ctpop.i32(i32 %321) #12
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  store i8 %325, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %326 = icmp eq i32 %320, 0
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %14, align 1, !tbaa !2448
  %328 = lshr i32 %320, 31
  %329 = trunc i32 %328 to i8
  store i8 %329, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v45 = select i1 %326, i64 31, i64 18
  %330 = add i64 %128, %.v45
  store i64 %330, i64* %PC, align 8, !tbaa !2428
  br i1 %326, label %block_402742, label %block_402735

block_4026e4:                                     ; preds = %block_4026d5
  %331 = add i64 %171, 27
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  br label %block_4026ff

block_402653:                                     ; preds = %block_40274a, %block_402633
  %332 = phi i64 [ %.pre31, %block_402633 ], [ %367, %block_40274a ]
  %MEMORY.3 = phi %struct.Memory* [ %237, %block_402633 ], [ %534, %block_40274a ]
  %333 = load i64, i64* %RBP, align 8
  %334 = add i64 %333, -48
  %335 = add i64 %332, 5
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %334 to i64*
  %337 = load i64, i64* %336, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %338 = trunc i64 %337 to i32
  %339 = and i32 %338, 255
  %340 = tail call i32 @llvm.ctpop.i32(i32 %339) #12
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  store i8 %343, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %344 = icmp eq i64 %337, 0
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %14, align 1, !tbaa !2448
  %346 = lshr i64 %337, 63
  %347 = trunc i64 %346 to i8
  store i8 %347, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v42 = select i1 %344, i64 252, i64 11
  %348 = add i64 %332, %.v42
  store i64 %348, i64* %PC, align 8, !tbaa !2428
  br i1 %344, label %block_40274f, label %block_40265e

block_402619:                                     ; preds = %block_4025ee, %block_402754
  %349 = phi i64 [ %.pre, %block_4025ee ], [ %200, %block_402754 ]
  %MEMORY.4 = phi %struct.Memory* [ %377, %block_4025ee ], [ %MEMORY.1, %block_402754 ]
  %350 = load i64, i64* %RBP, align 8
  %351 = add i64 %350, -40
  %352 = add i64 %349, 5
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i64*
  %354 = load i64, i64* %353, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %355 = trunc i64 %354 to i32
  %356 = and i32 %355, 255
  %357 = tail call i32 @llvm.ctpop.i32(i32 %356) #12
  %358 = trunc i32 %357 to i8
  %359 = and i8 %358, 1
  %360 = xor i8 %359, 1
  store i8 %360, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %361 = icmp eq i64 %354, 0
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %14, align 1, !tbaa !2448
  %363 = lshr i64 %354, 63
  %364 = trunc i64 %363 to i8
  store i8 %364, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v40 = select i1 %361, i64 337, i64 11
  %365 = add i64 %349, %.v40
  store i64 %365, i64* %PC, align 8, !tbaa !2428
  br i1 %361, label %block_40276a, label %block_402624

block_40274a:                                     ; preds = %block_402735, %block_402742
  %366 = phi i64 [ %227, %block_402735 ], [ %.pre36, %block_402742 ]
  %367 = add i64 %366, -247
  store i64 %367, i64* %PC, align 8, !tbaa !2428
  br label %block_402653

block_4025ee:                                     ; preds = %block_402580
  %368 = add i64 %114, -24
  %369 = add i64 %113, 4
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i64*
  %371 = load i64, i64* %370, align 8
  store i64 %371, i64* %RDI, align 8, !tbaa !2428
  %372 = add i64 %113, -2654
  %373 = add i64 %113, 9
  %374 = load i64, i64* %RSP, align 8, !tbaa !2428
  %375 = add i64 %374, -8
  %376 = inttoptr i64 %375 to i64*
  store i64 %373, i64* %376, align 8
  store i64 %375, i64* %RSP, align 8, !tbaa !2428
  store i64 %372, i64* %PC, align 8, !tbaa !2428
  %377 = tail call %struct.Memory* @sub_401b90_refresh_neighbour_lists_renamed_(%struct.State* nonnull %0, i64 %372, %struct.Memory* %94)
  %378 = load i64, i64* %RBP, align 8
  %379 = add i64 %378, -24
  %380 = load i64, i64* %PC, align 8
  %381 = add i64 %380, 4
  store i64 %381, i64* %PC, align 8
  %382 = inttoptr i64 %379 to i64*
  %383 = load i64, i64* %382, align 8
  store i64 %383, i64* %RDI, align 8, !tbaa !2428
  %384 = add i64 %383, 552
  %385 = add i64 %380, 11
  store i64 %385, i64* %PC, align 8
  %386 = inttoptr i64 %384 to i64*
  %387 = load i64, i64* %386, align 8
  store i64 %387, i64* %RDI, align 8, !tbaa !2428
  %388 = add i64 %380, 15
  store i64 %388, i64* %PC, align 8
  %389 = load i64, i64* %382, align 8
  store i64 %389, i64* %RAX, align 8, !tbaa !2428
  %390 = add i64 %389, 400
  %391 = add i64 %380, 23
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %390 to i64*
  %393 = load i64, i64* %392, align 8
  %394 = mul i64 %393, 104
  store i64 %394, i64* %RAX, align 8, !tbaa !2428
  %395 = lshr i64 %394, 63
  %396 = add i64 %394, %387
  store i64 %396, i64* %RDI, align 8, !tbaa !2428
  %397 = icmp ult i64 %396, %387
  %398 = icmp ult i64 %396, %394
  %399 = or i1 %397, %398
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %11, align 1, !tbaa !2432
  %401 = trunc i64 %396 to i32
  %402 = and i32 %401, 255
  %403 = tail call i32 @llvm.ctpop.i32(i32 %402) #12
  %404 = trunc i32 %403 to i8
  %405 = and i8 %404, 1
  %406 = xor i8 %405, 1
  store i8 %406, i8* %12, align 1, !tbaa !2446
  %407 = xor i64 %394, %387
  %408 = xor i64 %407, %396
  %409 = lshr i64 %408, 4
  %410 = trunc i64 %409 to i8
  %411 = and i8 %410, 1
  store i8 %411, i8* %13, align 1, !tbaa !2447
  %412 = icmp eq i64 %396, 0
  %413 = zext i1 %412 to i8
  store i8 %413, i8* %14, align 1, !tbaa !2448
  %414 = lshr i64 %396, 63
  %415 = trunc i64 %414 to i8
  store i8 %415, i8* %15, align 1, !tbaa !2449
  %416 = lshr i64 %387, 63
  %417 = xor i64 %414, %416
  %418 = xor i64 %414, %395
  %419 = add nuw nsw i64 %417, %418
  %420 = icmp eq i64 %419, 2
  %421 = zext i1 %420 to i8
  store i8 %421, i8* %16, align 1, !tbaa !2450
  %422 = add i64 %396, 56
  %423 = add i64 %380, 30
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %422 to i64*
  %425 = load i64, i64* %424, align 8
  store i64 %425, i64* %RAX, align 8, !tbaa !2428
  %426 = add i64 %378, -40
  %427 = add i64 %380, 34
  store i64 %427, i64* %PC, align 8
  %428 = inttoptr i64 %426 to i64*
  store i64 %425, i64* %428, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_402619

block_40277e:                                     ; preds = %block_40270a, %block_4025e1, %block_40276a
  %429 = phi i64 [ %.pre37, %block_40276a ], [ %488, %block_40270a ], [ %154, %block_4025e1 ]
  %MEMORY.6 = phi %struct.Memory* [ %138, %block_40276a ], [ %475, %block_40270a ], [ %94, %block_4025e1 ]
  %430 = load i64, i64* %RBP, align 8
  %431 = add i64 %430, -8
  %432 = add i64 %429, 4
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %431 to i64*
  %434 = load i64, i64* %433, align 8
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %435 = load i64, i64* %RSP, align 8
  %436 = add i64 %435, 96
  store i64 %436, i64* %RSP, align 8, !tbaa !2428
  %437 = icmp ugt i64 %435, -97
  %438 = zext i1 %437 to i8
  store i8 %438, i8* %11, align 1, !tbaa !2432
  %439 = trunc i64 %436 to i32
  %440 = and i32 %439, 255
  %441 = tail call i32 @llvm.ctpop.i32(i32 %440) #12
  %442 = trunc i32 %441 to i8
  %443 = and i8 %442, 1
  %444 = xor i8 %443, 1
  store i8 %444, i8* %12, align 1, !tbaa !2446
  %445 = xor i64 %436, %435
  %446 = lshr i64 %445, 4
  %447 = trunc i64 %446 to i8
  %448 = and i8 %447, 1
  store i8 %448, i8* %13, align 1, !tbaa !2447
  %449 = icmp eq i64 %436, 0
  %450 = zext i1 %449 to i8
  store i8 %450, i8* %14, align 1, !tbaa !2448
  %451 = lshr i64 %436, 63
  %452 = trunc i64 %451 to i8
  store i8 %452, i8* %15, align 1, !tbaa !2449
  %453 = lshr i64 %435, 63
  %454 = xor i64 %451, %453
  %455 = add nuw nsw i64 %454, %451
  %456 = icmp eq i64 %455, 2
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %16, align 1, !tbaa !2450
  %458 = add i64 %429, 9
  store i64 %458, i64* %PC, align 8
  %459 = add i64 %435, 104
  %460 = inttoptr i64 %436 to i64*
  %461 = load i64, i64* %460, align 8
  store i64 %461, i64* %RBP, align 8, !tbaa !2428
  store i64 %459, i64* %RSP, align 8, !tbaa !2428
  %462 = add i64 %429, 10
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %459 to i64*
  %464 = load i64, i64* %463, align 8
  store i64 %464, i64* %PC, align 8, !tbaa !2428
  %465 = add i64 %435, 112
  store i64 %465, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_40270a:                                     ; preds = %block_4026ff
  %466 = add i64 %205, -32
  %467 = add i64 %128, 4
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to i64*
  %469 = load i64, i64* %468, align 8
  store i64 %469, i64* %RDI, align 8, !tbaa !2428
  %470 = add i64 %128, -7882
  %471 = add i64 %128, 9
  %472 = load i64, i64* %RSP, align 8, !tbaa !2428
  %473 = add i64 %472, -8
  %474 = inttoptr i64 %473 to i64*
  store i64 %471, i64* %474, align 8
  store i64 %473, i64* %RSP, align 8, !tbaa !2428
  store i64 %470, i64* %PC, align 8, !tbaa !2428
  %475 = tail call fastcc %struct.Memory* @ext_608f50_fclose(%struct.State* nonnull %0, %struct.Memory* %534)
  %476 = load i64, i64* %RBP, align 8
  %477 = add i64 %476, -8
  %478 = load i64, i64* %PC, align 8
  %479 = add i64 %478, 8
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %477 to i64*
  store i64 -1, i64* %480, align 8
  %481 = load i64, i64* %RBP, align 8
  %482 = add i64 %481, -80
  %483 = load i32, i32* %EAX, align 4
  %484 = load i64, i64* %PC, align 8
  %485 = add i64 %484, 3
  store i64 %485, i64* %PC, align 8
  %486 = inttoptr i64 %482 to i32*
  store i32 %483, i32* %486, align 4
  %487 = load i64, i64* %PC, align 8
  %488 = add i64 %487, 96
  store i64 %488, i64* %PC, align 8, !tbaa !2428
  br label %block_40277e

block_40274f:                                     ; preds = %block_402653
  %489 = add i64 %348, 5
  store i64 %489, i64* %PC, align 8, !tbaa !2428
  br label %block_402754

block_402684:                                     ; preds = %block_40265e, %block_40266c
  %490 = phi i64 [ %333, %block_40265e ], [ %.pre34, %block_40266c ]
  %491 = phi i64 [ %284, %block_40265e ], [ %.pre32, %block_40266c ]
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.3, %block_40265e ], [ %181, %block_40266c ]
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 668), i64* %RSI, align 8, !tbaa !2428
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2432
  store i8 1, i8* %12, align 1, !tbaa !2446
  store i8 1, i8* %14, align 1, !tbaa !2448
  store i8 0, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %13, align 1, !tbaa !2447
  %492 = add i64 %490, -32
  %493 = add i64 %491, 16
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to i64*
  %495 = load i64, i64* %494, align 8
  store i64 %495, i64* %RDI, align 8, !tbaa !2428
  %496 = add i64 %490, -48
  %497 = add i64 %491, 20
  store i64 %497, i64* %PC, align 8
  %498 = inttoptr i64 %496 to i64*
  %499 = load i64, i64* %498, align 8
  store i64 %499, i64* %RCX, align 8, !tbaa !2428
  %500 = add i64 %499, 16
  %501 = add i64 %491, 24
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %500 to i64*
  %503 = load i64, i64* %502, align 8
  store i64 %503, i64* %RCX, align 8, !tbaa !2428
  %504 = add i64 %503, 96
  %505 = add i64 %491, 27
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %504 to i32*
  %507 = load i32, i32* %506, align 4
  %508 = sub i32 0, %507
  %509 = zext i32 %508 to i64
  store i64 %509, i64* %RAX, align 8, !tbaa !2428
  %510 = icmp ne i32 %507, 0
  %511 = zext i1 %510 to i8
  store i8 %511, i8* %11, align 1, !tbaa !2432
  %512 = and i32 %508, 255
  %513 = tail call i32 @llvm.ctpop.i32(i32 %512) #12
  %514 = trunc i32 %513 to i8
  %515 = and i8 %514, 1
  %516 = xor i8 %515, 1
  store i8 %516, i8* %12, align 1, !tbaa !2446
  %517 = xor i32 %507, %508
  %518 = lshr i32 %517, 4
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  store i8 %520, i8* %13, align 1, !tbaa !2447
  %521 = icmp eq i32 %507, 0
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %14, align 1, !tbaa !2448
  %523 = lshr i32 %508, 31
  %524 = trunc i32 %523 to i8
  store i8 %524, i8* %15, align 1, !tbaa !2449
  %525 = lshr i32 %507, 31
  %526 = add nuw nsw i32 %523, %525
  %527 = icmp eq i32 %526, 2
  %528 = zext i1 %527 to i8
  store i8 %528, i8* %16, align 1, !tbaa !2450
  store i64 %509, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %529 = add i64 %491, -7668
  %530 = add i64 %491, 36
  %531 = load i64, i64* %RSP, align 8, !tbaa !2428
  %532 = add i64 %531, -8
  %533 = inttoptr i64 %532 to i64*
  store i64 %530, i64* %533, align 8
  store i64 %532, i64* %RSP, align 8, !tbaa !2428
  store i64 %529, i64* %PC, align 8, !tbaa !2428
  %534 = tail call fastcc %struct.Memory* @ext_608ff8_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.7)
  %535 = load i64, i64* %RBP, align 8
  %536 = add i64 %535, -48
  %537 = load i64, i64* %PC, align 8
  %538 = add i64 %537, 4
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %536 to i64*
  %540 = load i64, i64* %539, align 8
  store i64 %540, i64* %RCX, align 8, !tbaa !2428
  %541 = add i64 %540, 16
  %542 = add i64 %537, 8
  store i64 %542, i64* %PC, align 8
  %543 = inttoptr i64 %541 to i64*
  %544 = load i64, i64* %543, align 8
  store i64 %544, i64* %RCX, align 8, !tbaa !2428
  %545 = add i64 %535, -24
  %546 = add i64 %537, 12
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %545 to i64*
  %548 = load i64, i64* %547, align 8
  store i64 %548, i64* %RSI, align 8, !tbaa !2428
  %549 = add i64 %548, 408
  %550 = add i64 %537, 20
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i64*
  %552 = load i64, i64* %551, align 8
  %553 = mul i64 %552, 104
  store i64 %553, i64* %RSI, align 8, !tbaa !2428
  %554 = lshr i64 %553, 63
  %555 = add i64 %553, %544
  store i64 %555, i64* %RCX, align 8, !tbaa !2428
  %556 = icmp ult i64 %555, %544
  %557 = icmp ult i64 %555, %553
  %558 = or i1 %556, %557
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %11, align 1, !tbaa !2432
  %560 = trunc i64 %555 to i32
  %561 = and i32 %560, 255
  %562 = tail call i32 @llvm.ctpop.i32(i32 %561) #12
  %563 = trunc i32 %562 to i8
  %564 = and i8 %563, 1
  %565 = xor i8 %564, 1
  store i8 %565, i8* %12, align 1, !tbaa !2446
  %566 = xor i64 %553, %544
  %567 = xor i64 %566, %555
  %568 = lshr i64 %567, 4
  %569 = trunc i64 %568 to i8
  %570 = and i8 %569, 1
  store i8 %570, i8* %13, align 1, !tbaa !2447
  %571 = icmp eq i64 %555, 0
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %14, align 1, !tbaa !2448
  %573 = lshr i64 %555, 63
  %574 = trunc i64 %573 to i8
  store i8 %574, i8* %15, align 1, !tbaa !2449
  %575 = lshr i64 %544, 63
  %576 = xor i64 %573, %575
  %577 = xor i64 %573, %554
  %578 = add nuw nsw i64 %576, %577
  %579 = icmp eq i64 %578, 2
  %580 = zext i1 %579 to i8
  store i8 %580, i8* %16, align 1, !tbaa !2450
  %581 = add i64 %555, 56
  %582 = add i64 %537, 27
  store i64 %582, i64* %PC, align 8
  %583 = inttoptr i64 %581 to i64*
  %584 = load i64, i64* %583, align 8
  store i64 %584, i64* %RCX, align 8, !tbaa !2428
  %585 = add i64 %535, -56
  %586 = add i64 %537, 31
  store i64 %586, i64* %PC, align 8
  %587 = inttoptr i64 %585 to i64*
  store i64 %584, i64* %587, align 8
  %588 = load i64, i64* %RBP, align 8
  %589 = add i64 %588, -76
  %590 = load i32, i32* %EAX, align 4
  %591 = load i64, i64* %PC, align 8
  %592 = add i64 %591, 3
  store i64 %592, i64* %PC, align 8
  %593 = inttoptr i64 %589 to i32*
  store i32 %590, i32* %593, align 4
  %.pre35 = load i64, i64* %PC, align 8
  br label %block_4026ca
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400e50_replace_weaker_arc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_400e50:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %SIL = bitcast %union.anon* %5 to i8*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0
  %R10D = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  store i64 %11, i64* %9, align 8, !tbaa !2428
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 3, i64* %RAX, align 8, !tbaa !2428
  %14 = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  store i64 2, i64* %14, align 8, !tbaa !2428
  %15 = add i64 %10, -16
  %16 = load i64, i64* %RDI, align 8
  %17 = add i64 %13, 18
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %18, align 8
  %19 = load i64, i64* %RBP, align 8
  %20 = add i64 %19, -16
  %21 = load i64, i64* %RSI, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 4
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %20 to i64*
  store i64 %21, i64* %24, align 8
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -24
  %27 = load i64, i64* %RDX, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -32
  %33 = load i64, i64* %RCX, align 8
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 4
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %32 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -40
  %39 = load i64, i64* %R8, align 8
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -48
  %45 = load i64, i64* %R9, align 8
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 4
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -24
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 4
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %50 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RCX, align 8, !tbaa !2428
  %55 = add i64 %49, -16
  %56 = add i64 %51, 8
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RDX, align 8, !tbaa !2428
  %59 = add i64 %58, 8
  %60 = add i64 %51, 12
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  store i64 %54, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -32
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %RCX, align 8, !tbaa !2428
  %68 = add i64 %62, -16
  %69 = add i64 %64, 8
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RDX, align 8, !tbaa !2428
  %72 = add i64 %71, 16
  %73 = add i64 %64, 12
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %67, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -40
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RCX, align 8, !tbaa !2428
  %81 = add i64 %75, -16
  %82 = add i64 %77, 8
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RDX, align 8, !tbaa !2428
  %85 = add i64 %84, 56
  %86 = add i64 %77, 12
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  store i64 %80, i64* %87, align 8
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -40
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 4
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %94 = add i64 %88, -16
  %95 = add i64 %90, 8
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %RDX, align 8, !tbaa !2428
  %98 = add i64 %90, 11
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i64*
  store i64 %93, i64* %99, align 8
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -48
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RCX, align 8, !tbaa !2428
  %106 = add i64 %100, -16
  %107 = add i64 %102, 8
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i64*
  %109 = load i64, i64* %108, align 8
  store i64 %109, i64* %RDX, align 8, !tbaa !2428
  %110 = add i64 %109, 48
  %111 = add i64 %102, 12
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i64*
  store i64 %105, i64* %112, align 8
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -56
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 8
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i64*
  store i64 1, i64* %117, align 8
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -16
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %119 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = add i64 %123, 112
  %125 = add i64 %120, 8
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %124 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RCX, align 8, !tbaa !2428
  %128 = add i64 %120, 12
  store i64 %128, i64* %PC, align 8
  %129 = load i64, i64* %122, align 8
  store i64 %129, i64* %RDX, align 8, !tbaa !2428
  %130 = add i64 %129, 176
  %131 = add i64 %120, 19
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = sub i64 %127, %133
  %135 = icmp ult i64 %127, %133
  %136 = zext i1 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %136, i8* %137, align 1, !tbaa !2432
  %138 = trunc i64 %134 to i32
  %139 = and i32 %138, 255
  %140 = tail call i32 @llvm.ctpop.i32(i32 %139) #12
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %143, i8* %144, align 1, !tbaa !2446
  %145 = xor i64 %133, %127
  %146 = xor i64 %145, %134
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %149, i8* %150, align 1, !tbaa !2447
  %151 = icmp eq i64 %134, 0
  %152 = zext i1 %151 to i8
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %152, i8* %153, align 1, !tbaa !2448
  %154 = lshr i64 %134, 63
  %155 = trunc i64 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %155, i8* %156, align 1, !tbaa !2449
  %157 = lshr i64 %127, 63
  %158 = lshr i64 %133, 63
  %159 = xor i64 %158, %157
  %160 = xor i64 %154, %157
  %161 = add nuw nsw i64 %160, %159
  %162 = icmp eq i64 %161, 2
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %163, i8* %164, align 1, !tbaa !2450
  %165 = load i32, i32* %R10D, align 4
  %166 = zext i32 %165 to i64
  %167 = icmp ne i8 %155, 0
  %168 = xor i1 %167, %162
  %.demorgan = or i1 %151, %168
  %169 = load i64, i64* %RAX, align 8, !tbaa !2428
  %170 = select i1 %.demorgan, i64 %169, i64 %166
  %171 = and i64 %170, 4294967295
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %sext = shl i64 %170, 32
  %172 = ashr exact i64 %sext, 32
  store i64 %172, i64* %RCX, align 8, !tbaa !2428
  %173 = add i64 %118, -64
  %174 = add i64 %120, 30
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %173 to i64*
  store i64 %172, i64* %175, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_400ed8

block_4010fe:                                     ; preds = %block_400f27, %block_4010f9
  %176 = phi i64 [ %1201, %block_400f27 ], [ %287, %block_4010f9 ]
  %177 = add i64 %176, -550
  store i64 %177, i64* %PC, align 8, !tbaa !2428
  br label %block_400ed8

block_4010bd:                                     ; preds = %block_400f27
  %178 = add i64 %1138, -16
  %179 = add i64 %1201, 4
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* %RAX, align 8, !tbaa !2428
  %182 = add i64 %1201, 8
  store i64 %182, i64* %PC, align 8
  %183 = load i64, i64* %1142, align 8
  %184 = add i64 %183, -1
  %185 = shl i64 %184, 6
  store i64 %185, i64* %RCX, align 8, !tbaa !2428
  %186 = add i64 %185, %181
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = icmp ult i64 %186, %181
  %188 = icmp ult i64 %186, %185
  %189 = or i1 %187, %188
  %190 = zext i1 %189 to i8
  store i8 %190, i8* %137, align 1, !tbaa !2432
  %191 = trunc i64 %186 to i32
  %192 = and i32 %191, 255
  %193 = tail call i32 @llvm.ctpop.i32(i32 %192) #12
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  store i8 %196, i8* %144, align 1, !tbaa !2446
  %197 = xor i64 %181, %186
  %198 = lshr i64 %197, 4
  %199 = trunc i64 %198 to i8
  %200 = and i8 %199, 1
  store i8 %200, i8* %150, align 1, !tbaa !2447
  %201 = icmp eq i64 %186, 0
  %202 = zext i1 %201 to i8
  store i8 %202, i8* %153, align 1, !tbaa !2448
  %203 = lshr i64 %186, 63
  %204 = trunc i64 %203 to i8
  store i8 %204, i8* %156, align 1, !tbaa !2449
  %205 = lshr i64 %181, 63
  %206 = lshr i64 %184, 57
  %207 = and i64 %206, 1
  %208 = xor i64 %203, %205
  %209 = xor i64 %203, %207
  %210 = add nuw nsw i64 %208, %209
  %211 = icmp eq i64 %210, 2
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %164, align 1, !tbaa !2450
  %213 = add i64 %186, 48
  %214 = add i64 %1201, 23
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = load i64, i64* %RBP, align 8
  %218 = add i64 %217, -16
  %219 = add i64 %1201, 27
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to i64*
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %RCX, align 8, !tbaa !2428
  %222 = add i64 %217, -64
  %223 = add i64 %1201, 31
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = shl i64 %225, 6
  store i64 %226, i64* %RDX, align 8, !tbaa !2428
  %227 = add i64 %226, %221
  store i64 %227, i64* %RCX, align 8, !tbaa !2428
  %228 = icmp ult i64 %227, %221
  %229 = icmp ult i64 %227, %226
  %230 = or i1 %228, %229
  %231 = zext i1 %230 to i8
  store i8 %231, i8* %137, align 1, !tbaa !2432
  %232 = trunc i64 %227 to i32
  %233 = and i32 %232, 255
  %234 = tail call i32 @llvm.ctpop.i32(i32 %233) #12
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  store i8 %237, i8* %144, align 1, !tbaa !2446
  %238 = xor i64 %221, %227
  %239 = lshr i64 %238, 4
  %240 = trunc i64 %239 to i8
  %241 = and i8 %240, 1
  store i8 %241, i8* %150, align 1, !tbaa !2447
  %242 = icmp eq i64 %227, 0
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %153, align 1, !tbaa !2448
  %244 = lshr i64 %227, 63
  %245 = trunc i64 %244 to i8
  store i8 %245, i8* %156, align 1, !tbaa !2449
  %246 = lshr i64 %221, 63
  %247 = lshr i64 %225, 57
  %248 = and i64 %247, 1
  %249 = xor i64 %244, %246
  %250 = xor i64 %244, %248
  %251 = add nuw nsw i64 %249, %250
  %252 = icmp eq i64 %251, 2
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %164, align 1, !tbaa !2450
  %254 = add i64 %227, 48
  %255 = add i64 %1201, 42
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = sub i64 %216, %257
  %259 = icmp ult i64 %216, %257
  %260 = zext i1 %259 to i8
  store i8 %260, i8* %137, align 1, !tbaa !2432
  %261 = trunc i64 %258 to i32
  %262 = and i32 %261, 255
  %263 = tail call i32 @llvm.ctpop.i32(i32 %262) #12
  %264 = trunc i32 %263 to i8
  %265 = and i8 %264, 1
  %266 = xor i8 %265, 1
  store i8 %266, i8* %144, align 1, !tbaa !2446
  %267 = xor i64 %257, %216
  %268 = xor i64 %267, %258
  %269 = lshr i64 %268, 4
  %270 = trunc i64 %269 to i8
  %271 = and i8 %270, 1
  store i8 %271, i8* %150, align 1, !tbaa !2447
  %272 = icmp eq i64 %258, 0
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %153, align 1, !tbaa !2448
  %274 = lshr i64 %258, 63
  %275 = trunc i64 %274 to i8
  store i8 %275, i8* %156, align 1, !tbaa !2449
  %276 = lshr i64 %216, 63
  %277 = lshr i64 %257, 63
  %278 = xor i64 %277, %276
  %279 = xor i64 %274, %276
  %280 = add nuw nsw i64 %279, %278
  %281 = icmp eq i64 %280, 2
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %164, align 1, !tbaa !2450
  %283 = icmp ne i8 %275, 0
  %284 = xor i1 %283, %281
  %.v10 = select i1 %284, i64 48, i64 60
  %285 = add i64 %1201, %.v10
  store i64 %285, i64* %PC, align 8, !tbaa !2428
  br i1 %284, label %block_4010ed, label %block_4010f9

block_4010f9:                                     ; preds = %block_4010bd, %block_4010ed
  %286 = phi i64 [ %285, %block_4010bd ], [ %.pre7, %block_4010ed ]
  %287 = add i64 %286, 5
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  br label %block_4010fe

block_400ef4:                                     ; preds = %block_400ed8
  %288 = load i64, i64* %RBP, align 8
  %289 = add i64 %288, -48
  %290 = add i64 %421, 4
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %RAX, align 8, !tbaa !2428
  %293 = add i64 %288, -16
  %294 = add i64 %421, 8
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i64*
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %RCX, align 8, !tbaa !2428
  %297 = add i64 %288, -64
  %298 = add i64 %421, 12
  store i64 %298, i64* %PC, align 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = add i64 %300, -1
  %302 = shl i64 %301, 6
  store i64 %302, i64* %RDX, align 8, !tbaa !2428
  %303 = add i64 %302, %296
  store i64 %303, i64* %RCX, align 8, !tbaa !2428
  %304 = icmp ult i64 %303, %296
  %305 = icmp ult i64 %303, %302
  %306 = or i1 %304, %305
  %307 = zext i1 %306 to i8
  store i8 %307, i8* %137, align 1, !tbaa !2432
  %308 = trunc i64 %303 to i32
  %309 = and i32 %308, 255
  %310 = tail call i32 @llvm.ctpop.i32(i32 %309) #12
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  %313 = xor i8 %312, 1
  store i8 %313, i8* %144, align 1, !tbaa !2446
  %314 = xor i64 %296, %303
  %315 = lshr i64 %314, 4
  %316 = trunc i64 %315 to i8
  %317 = and i8 %316, 1
  store i8 %317, i8* %150, align 1, !tbaa !2447
  %318 = icmp eq i64 %303, 0
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %153, align 1, !tbaa !2448
  %320 = lshr i64 %303, 63
  %321 = trunc i64 %320 to i8
  store i8 %321, i8* %156, align 1, !tbaa !2449
  %322 = lshr i64 %296, 63
  %323 = lshr i64 %301, 57
  %324 = and i64 %323, 1
  %325 = xor i64 %320, %322
  %326 = xor i64 %320, %324
  %327 = add nuw nsw i64 %325, %326
  %328 = icmp eq i64 %327, 2
  %329 = zext i1 %328 to i8
  store i8 %329, i8* %164, align 1, !tbaa !2450
  %330 = load i64, i64* %RAX, align 8
  %331 = add i64 %303, 48
  %332 = add i64 %421, 27
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  %334 = load i64, i64* %333, align 8
  %335 = sub i64 %330, %334
  %336 = icmp ult i64 %330, %334
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %137, align 1, !tbaa !2432
  %338 = trunc i64 %335 to i32
  %339 = and i32 %338, 255
  %340 = tail call i32 @llvm.ctpop.i32(i32 %339) #12
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  store i8 %343, i8* %144, align 1, !tbaa !2446
  %344 = xor i64 %334, %330
  %345 = xor i64 %344, %335
  %346 = lshr i64 %345, 4
  %347 = trunc i64 %346 to i8
  %348 = and i8 %347, 1
  store i8 %348, i8* %150, align 1, !tbaa !2447
  %349 = icmp eq i64 %335, 0
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %153, align 1, !tbaa !2448
  %351 = lshr i64 %335, 63
  %352 = trunc i64 %351 to i8
  store i8 %352, i8* %156, align 1, !tbaa !2449
  %353 = lshr i64 %330, 63
  %354 = lshr i64 %334, 63
  %355 = xor i64 %354, %353
  %356 = xor i64 %351, %353
  %357 = add nuw nsw i64 %356, %355
  %358 = icmp eq i64 %357, 2
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %164, align 1, !tbaa !2450
  %360 = icmp ne i8 %352, 0
  %361 = xor i1 %358, %360
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %SIL, align 1, !tbaa !2453
  %363 = load i64, i64* %RBP, align 8
  %364 = add i64 %363, -65
  %365 = add i64 %421, 35
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i8*
  store i8 %362, i8* %366, align 1
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_400f17

block_400ed8:                                     ; preds = %block_4010fe, %block_400e50
  %367 = phi i64 [ %177, %block_4010fe ], [ %.pre, %block_400e50 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %137, align 1, !tbaa !2432
  store i8 1, i8* %144, align 1, !tbaa !2446
  store i8 1, i8* %153, align 1, !tbaa !2448
  store i8 0, i8* %156, align 1, !tbaa !2449
  store i8 0, i8* %164, align 1, !tbaa !2450
  store i8 0, i8* %150, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -64
  %370 = add i64 %367, 8
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RDX, align 8, !tbaa !2428
  %373 = add i64 %368, -8
  %374 = add i64 %367, 12
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  %376 = load i64, i64* %375, align 8
  store i64 %376, i64* %RSI, align 8, !tbaa !2428
  %377 = add i64 %376, 448
  %378 = add i64 %367, 19
  store i64 %378, i64* %PC, align 8
  %379 = inttoptr i64 %377 to i64*
  %380 = load i64, i64* %379, align 8
  %381 = sub i64 %372, %380
  %382 = icmp ult i64 %372, %380
  %383 = zext i1 %382 to i8
  store i8 %383, i8* %137, align 1, !tbaa !2432
  %384 = trunc i64 %381 to i32
  %385 = and i32 %384, 255
  %386 = tail call i32 @llvm.ctpop.i32(i32 %385) #12
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  store i8 %389, i8* %144, align 1, !tbaa !2446
  %390 = xor i64 %380, %372
  %391 = xor i64 %390, %381
  %392 = lshr i64 %391, 4
  %393 = trunc i64 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* %150, align 1, !tbaa !2447
  %395 = icmp eq i64 %381, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %153, align 1, !tbaa !2448
  %397 = lshr i64 %381, 63
  %398 = trunc i64 %397 to i8
  store i8 %398, i8* %156, align 1, !tbaa !2449
  %399 = lshr i64 %372, 63
  %400 = lshr i64 %380, 63
  %401 = xor i64 %400, %399
  %402 = xor i64 %397, %399
  %403 = add nuw nsw i64 %402, %401
  %404 = icmp eq i64 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %164, align 1, !tbaa !2450
  %406 = add i64 %368, -65
  %407 = add i64 %367, 22
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %406 to i8*
  store i8 0, i8* %408, align 1
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, 41
  %411 = add i64 %409, 6
  %412 = load i8, i8* %153, align 1, !tbaa !2448
  %413 = icmp eq i8 %412, 0
  %414 = load i8, i8* %156, align 1, !tbaa !2449
  %415 = icmp ne i8 %414, 0
  %416 = load i8, i8* %164, align 1, !tbaa !2450
  %417 = icmp ne i8 %416, 0
  %418 = xor i1 %415, %417
  %419 = xor i1 %418, true
  %420 = and i1 %413, %419
  %421 = select i1 %420, i64 %410, i64 %411
  store i64 %421, i64* %PC, align 8, !tbaa !2428
  br i1 %420, label %block_400f17, label %block_400ef4

block_4010ed:                                     ; preds = %block_4010bd
  %422 = load i64, i64* %RBP, align 8
  %423 = add i64 %422, -64
  %424 = add i64 %285, 4
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i64*
  %426 = load i64, i64* %425, align 8
  %427 = add i64 %426, 1
  store i64 %427, i64* %RAX, align 8, !tbaa !2428
  %428 = icmp eq i64 %426, -1
  %429 = icmp eq i64 %427, 0
  %430 = or i1 %428, %429
  %431 = zext i1 %430 to i8
  store i8 %431, i8* %137, align 1, !tbaa !2432
  %432 = trunc i64 %427 to i32
  %433 = and i32 %432, 255
  %434 = tail call i32 @llvm.ctpop.i32(i32 %433) #12
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  %437 = xor i8 %436, 1
  store i8 %437, i8* %144, align 1, !tbaa !2446
  %438 = xor i64 %427, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  store i8 %441, i8* %150, align 1, !tbaa !2447
  %442 = zext i1 %429 to i8
  store i8 %442, i8* %153, align 1, !tbaa !2448
  %443 = lshr i64 %427, 63
  %444 = trunc i64 %443 to i8
  store i8 %444, i8* %156, align 1, !tbaa !2449
  %445 = lshr i64 %426, 63
  %446 = xor i64 %443, %445
  %447 = add nuw nsw i64 %446, %443
  %448 = icmp eq i64 %447, 2
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %164, align 1, !tbaa !2450
  %450 = add i64 %285, 12
  store i64 %450, i64* %PC, align 8
  store i64 %427, i64* %425, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4010f9

block_400f27:                                     ; preds = %block_400f17
  %451 = add i64 %1203, -16
  %452 = add i64 %1215, 4
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %451 to i64*
  %454 = load i64, i64* %453, align 8
  store i64 %454, i64* %RAX, align 8, !tbaa !2428
  %455 = add i64 %1203, -64
  %456 = add i64 %1215, 8
  store i64 %456, i64* %PC, align 8
  %457 = inttoptr i64 %455 to i64*
  %458 = load i64, i64* %457, align 8
  %459 = add i64 %458, -1
  %460 = shl i64 %459, 6
  store i64 %460, i64* %RCX, align 8, !tbaa !2428
  %461 = add i64 %460, %454
  store i64 %461, i64* %RAX, align 8, !tbaa !2428
  %462 = icmp ult i64 %461, %454
  %463 = icmp ult i64 %461, %460
  %464 = or i1 %462, %463
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %137, align 1, !tbaa !2432
  %466 = trunc i64 %461 to i32
  %467 = and i32 %466, 255
  %468 = tail call i32 @llvm.ctpop.i32(i32 %467) #12
  %469 = trunc i32 %468 to i8
  %470 = and i8 %469, 1
  %471 = xor i8 %470, 1
  store i8 %471, i8* %144, align 1, !tbaa !2446
  %472 = xor i64 %454, %461
  %473 = lshr i64 %472, 4
  %474 = trunc i64 %473 to i8
  %475 = and i8 %474, 1
  store i8 %475, i8* %150, align 1, !tbaa !2447
  %476 = icmp eq i64 %461, 0
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %153, align 1, !tbaa !2448
  %478 = lshr i64 %461, 63
  %479 = trunc i64 %478 to i8
  store i8 %479, i8* %156, align 1, !tbaa !2449
  %480 = lshr i64 %454, 63
  %481 = lshr i64 %459, 57
  %482 = and i64 %481, 1
  %483 = xor i64 %478, %480
  %484 = xor i64 %478, %482
  %485 = add nuw nsw i64 %483, %484
  %486 = icmp eq i64 %485, 2
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %164, align 1, !tbaa !2450
  %488 = add i64 %461, 8
  %489 = add i64 %1215, 23
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %488 to i64*
  %491 = load i64, i64* %490, align 8
  store i64 %491, i64* %RAX, align 8, !tbaa !2428
  %492 = load i64, i64* %RBP, align 8
  %493 = add i64 %492, -16
  %494 = add i64 %1215, 27
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %493 to i64*
  %496 = load i64, i64* %495, align 8
  store i64 %496, i64* %RCX, align 8, !tbaa !2428
  %497 = add i64 %492, -56
  %498 = add i64 %1215, 31
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i64*
  %500 = load i64, i64* %499, align 8
  %501 = add i64 %500, -1
  %502 = shl i64 %501, 6
  store i64 %502, i64* %RDX, align 8, !tbaa !2428
  %503 = add i64 %502, %496
  store i64 %503, i64* %RCX, align 8, !tbaa !2428
  %504 = icmp ult i64 %503, %496
  %505 = icmp ult i64 %503, %502
  %506 = or i1 %504, %505
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %137, align 1, !tbaa !2432
  %508 = trunc i64 %503 to i32
  %509 = and i32 %508, 255
  %510 = tail call i32 @llvm.ctpop.i32(i32 %509) #12
  %511 = trunc i32 %510 to i8
  %512 = and i8 %511, 1
  %513 = xor i8 %512, 1
  store i8 %513, i8* %144, align 1, !tbaa !2446
  %514 = xor i64 %496, %503
  %515 = lshr i64 %514, 4
  %516 = trunc i64 %515 to i8
  %517 = and i8 %516, 1
  store i8 %517, i8* %150, align 1, !tbaa !2447
  %518 = icmp eq i64 %503, 0
  %519 = zext i1 %518 to i8
  store i8 %519, i8* %153, align 1, !tbaa !2448
  %520 = lshr i64 %503, 63
  %521 = trunc i64 %520 to i8
  store i8 %521, i8* %156, align 1, !tbaa !2449
  %522 = lshr i64 %496, 63
  %523 = lshr i64 %501, 57
  %524 = and i64 %523, 1
  %525 = xor i64 %520, %522
  %526 = xor i64 %520, %524
  %527 = add nuw nsw i64 %525, %526
  %528 = icmp eq i64 %527, 2
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %164, align 1, !tbaa !2450
  %530 = add i64 %503, 8
  %531 = load i64, i64* %RAX, align 8
  %532 = add i64 %1215, 46
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %530 to i64*
  store i64 %531, i64* %533, align 8
  %534 = load i64, i64* %RBP, align 8
  %535 = add i64 %534, -16
  %536 = load i64, i64* %PC, align 8
  %537 = add i64 %536, 4
  store i64 %537, i64* %PC, align 8
  %538 = inttoptr i64 %535 to i64*
  %539 = load i64, i64* %538, align 8
  store i64 %539, i64* %RAX, align 8, !tbaa !2428
  %540 = add i64 %534, -64
  %541 = add i64 %536, 8
  store i64 %541, i64* %PC, align 8
  %542 = inttoptr i64 %540 to i64*
  %543 = load i64, i64* %542, align 8
  %544 = add i64 %543, -1
  %545 = shl i64 %544, 6
  store i64 %545, i64* %RCX, align 8, !tbaa !2428
  %546 = add i64 %545, %539
  store i64 %546, i64* %RAX, align 8, !tbaa !2428
  %547 = icmp ult i64 %546, %539
  %548 = icmp ult i64 %546, %545
  %549 = or i1 %547, %548
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %137, align 1, !tbaa !2432
  %551 = trunc i64 %546 to i32
  %552 = and i32 %551, 255
  %553 = tail call i32 @llvm.ctpop.i32(i32 %552) #12
  %554 = trunc i32 %553 to i8
  %555 = and i8 %554, 1
  %556 = xor i8 %555, 1
  store i8 %556, i8* %144, align 1, !tbaa !2446
  %557 = xor i64 %539, %546
  %558 = lshr i64 %557, 4
  %559 = trunc i64 %558 to i8
  %560 = and i8 %559, 1
  store i8 %560, i8* %150, align 1, !tbaa !2447
  %561 = icmp eq i64 %546, 0
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %153, align 1, !tbaa !2448
  %563 = lshr i64 %546, 63
  %564 = trunc i64 %563 to i8
  store i8 %564, i8* %156, align 1, !tbaa !2449
  %565 = lshr i64 %539, 63
  %566 = lshr i64 %544, 57
  %567 = and i64 %566, 1
  %568 = xor i64 %563, %565
  %569 = xor i64 %563, %567
  %570 = add nuw nsw i64 %568, %569
  %571 = icmp eq i64 %570, 2
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %164, align 1, !tbaa !2450
  %573 = add i64 %546, 16
  %574 = add i64 %536, 23
  store i64 %574, i64* %PC, align 8
  %575 = inttoptr i64 %573 to i64*
  %576 = load i64, i64* %575, align 8
  store i64 %576, i64* %RAX, align 8, !tbaa !2428
  %577 = load i64, i64* %RBP, align 8
  %578 = add i64 %577, -16
  %579 = add i64 %536, 27
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i64*
  %581 = load i64, i64* %580, align 8
  store i64 %581, i64* %RCX, align 8, !tbaa !2428
  %582 = add i64 %577, -56
  %583 = add i64 %536, 31
  store i64 %583, i64* %PC, align 8
  %584 = inttoptr i64 %582 to i64*
  %585 = load i64, i64* %584, align 8
  %586 = add i64 %585, -1
  %587 = shl i64 %586, 6
  store i64 %587, i64* %RDX, align 8, !tbaa !2428
  %588 = add i64 %587, %581
  store i64 %588, i64* %RCX, align 8, !tbaa !2428
  %589 = icmp ult i64 %588, %581
  %590 = icmp ult i64 %588, %587
  %591 = or i1 %589, %590
  %592 = zext i1 %591 to i8
  store i8 %592, i8* %137, align 1, !tbaa !2432
  %593 = trunc i64 %588 to i32
  %594 = and i32 %593, 255
  %595 = tail call i32 @llvm.ctpop.i32(i32 %594) #12
  %596 = trunc i32 %595 to i8
  %597 = and i8 %596, 1
  %598 = xor i8 %597, 1
  store i8 %598, i8* %144, align 1, !tbaa !2446
  %599 = xor i64 %581, %588
  %600 = lshr i64 %599, 4
  %601 = trunc i64 %600 to i8
  %602 = and i8 %601, 1
  store i8 %602, i8* %150, align 1, !tbaa !2447
  %603 = icmp eq i64 %588, 0
  %604 = zext i1 %603 to i8
  store i8 %604, i8* %153, align 1, !tbaa !2448
  %605 = lshr i64 %588, 63
  %606 = trunc i64 %605 to i8
  store i8 %606, i8* %156, align 1, !tbaa !2449
  %607 = lshr i64 %581, 63
  %608 = lshr i64 %586, 57
  %609 = and i64 %608, 1
  %610 = xor i64 %605, %607
  %611 = xor i64 %605, %609
  %612 = add nuw nsw i64 %610, %611
  %613 = icmp eq i64 %612, 2
  %614 = zext i1 %613 to i8
  store i8 %614, i8* %164, align 1, !tbaa !2450
  %615 = add i64 %588, 16
  %616 = load i64, i64* %RAX, align 8
  %617 = add i64 %536, 46
  store i64 %617, i64* %PC, align 8
  %618 = inttoptr i64 %615 to i64*
  store i64 %616, i64* %618, align 8
  %619 = load i64, i64* %RBP, align 8
  %620 = add i64 %619, -16
  %621 = load i64, i64* %PC, align 8
  %622 = add i64 %621, 4
  store i64 %622, i64* %PC, align 8
  %623 = inttoptr i64 %620 to i64*
  %624 = load i64, i64* %623, align 8
  store i64 %624, i64* %RAX, align 8, !tbaa !2428
  %625 = add i64 %619, -64
  %626 = add i64 %621, 8
  store i64 %626, i64* %PC, align 8
  %627 = inttoptr i64 %625 to i64*
  %628 = load i64, i64* %627, align 8
  %629 = add i64 %628, -1
  %630 = shl i64 %629, 6
  store i64 %630, i64* %RCX, align 8, !tbaa !2428
  %631 = add i64 %630, %624
  store i64 %631, i64* %RAX, align 8, !tbaa !2428
  %632 = icmp ult i64 %631, %624
  %633 = icmp ult i64 %631, %630
  %634 = or i1 %632, %633
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %137, align 1, !tbaa !2432
  %636 = trunc i64 %631 to i32
  %637 = and i32 %636, 255
  %638 = tail call i32 @llvm.ctpop.i32(i32 %637) #12
  %639 = trunc i32 %638 to i8
  %640 = and i8 %639, 1
  %641 = xor i8 %640, 1
  store i8 %641, i8* %144, align 1, !tbaa !2446
  %642 = xor i64 %624, %631
  %643 = lshr i64 %642, 4
  %644 = trunc i64 %643 to i8
  %645 = and i8 %644, 1
  store i8 %645, i8* %150, align 1, !tbaa !2447
  %646 = icmp eq i64 %631, 0
  %647 = zext i1 %646 to i8
  store i8 %647, i8* %153, align 1, !tbaa !2448
  %648 = lshr i64 %631, 63
  %649 = trunc i64 %648 to i8
  store i8 %649, i8* %156, align 1, !tbaa !2449
  %650 = lshr i64 %624, 63
  %651 = lshr i64 %629, 57
  %652 = and i64 %651, 1
  %653 = xor i64 %648, %650
  %654 = xor i64 %648, %652
  %655 = add nuw nsw i64 %653, %654
  %656 = icmp eq i64 %655, 2
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %164, align 1, !tbaa !2450
  %658 = inttoptr i64 %631 to i64*
  %659 = add i64 %621, 22
  store i64 %659, i64* %PC, align 8
  %660 = load i64, i64* %658, align 8
  store i64 %660, i64* %RAX, align 8, !tbaa !2428
  %661 = load i64, i64* %RBP, align 8
  %662 = add i64 %661, -16
  %663 = add i64 %621, 26
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to i64*
  %665 = load i64, i64* %664, align 8
  store i64 %665, i64* %RCX, align 8, !tbaa !2428
  %666 = add i64 %661, -56
  %667 = add i64 %621, 30
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to i64*
  %669 = load i64, i64* %668, align 8
  %670 = add i64 %669, -1
  %671 = shl i64 %670, 6
  store i64 %671, i64* %RDX, align 8, !tbaa !2428
  %672 = add i64 %671, %665
  store i64 %672, i64* %RCX, align 8, !tbaa !2428
  %673 = icmp ult i64 %672, %665
  %674 = icmp ult i64 %672, %671
  %675 = or i1 %673, %674
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %137, align 1, !tbaa !2432
  %677 = trunc i64 %672 to i32
  %678 = and i32 %677, 255
  %679 = tail call i32 @llvm.ctpop.i32(i32 %678) #12
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  %682 = xor i8 %681, 1
  store i8 %682, i8* %144, align 1, !tbaa !2446
  %683 = xor i64 %665, %672
  %684 = lshr i64 %683, 4
  %685 = trunc i64 %684 to i8
  %686 = and i8 %685, 1
  store i8 %686, i8* %150, align 1, !tbaa !2447
  %687 = icmp eq i64 %672, 0
  %688 = zext i1 %687 to i8
  store i8 %688, i8* %153, align 1, !tbaa !2448
  %689 = lshr i64 %672, 63
  %690 = trunc i64 %689 to i8
  store i8 %690, i8* %156, align 1, !tbaa !2449
  %691 = lshr i64 %665, 63
  %692 = lshr i64 %670, 57
  %693 = and i64 %692, 1
  %694 = xor i64 %689, %691
  %695 = xor i64 %689, %693
  %696 = add nuw nsw i64 %694, %695
  %697 = icmp eq i64 %696, 2
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %164, align 1, !tbaa !2450
  %699 = inttoptr i64 %672 to i64*
  %700 = load i64, i64* %RAX, align 8
  %701 = add i64 %621, 44
  store i64 %701, i64* %PC, align 8
  store i64 %700, i64* %699, align 8
  %702 = load i64, i64* %RBP, align 8
  %703 = add i64 %702, -16
  %704 = load i64, i64* %PC, align 8
  %705 = add i64 %704, 4
  store i64 %705, i64* %PC, align 8
  %706 = inttoptr i64 %703 to i64*
  %707 = load i64, i64* %706, align 8
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = add i64 %702, -64
  %709 = add i64 %704, 8
  store i64 %709, i64* %PC, align 8
  %710 = inttoptr i64 %708 to i64*
  %711 = load i64, i64* %710, align 8
  %712 = add i64 %711, -1
  %713 = shl i64 %712, 6
  store i64 %713, i64* %RCX, align 8, !tbaa !2428
  %714 = add i64 %713, %707
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = icmp ult i64 %714, %707
  %716 = icmp ult i64 %714, %713
  %717 = or i1 %715, %716
  %718 = zext i1 %717 to i8
  store i8 %718, i8* %137, align 1, !tbaa !2432
  %719 = trunc i64 %714 to i32
  %720 = and i32 %719, 255
  %721 = tail call i32 @llvm.ctpop.i32(i32 %720) #12
  %722 = trunc i32 %721 to i8
  %723 = and i8 %722, 1
  %724 = xor i8 %723, 1
  store i8 %724, i8* %144, align 1, !tbaa !2446
  %725 = xor i64 %707, %714
  %726 = lshr i64 %725, 4
  %727 = trunc i64 %726 to i8
  %728 = and i8 %727, 1
  store i8 %728, i8* %150, align 1, !tbaa !2447
  %729 = icmp eq i64 %714, 0
  %730 = zext i1 %729 to i8
  store i8 %730, i8* %153, align 1, !tbaa !2448
  %731 = lshr i64 %714, 63
  %732 = trunc i64 %731 to i8
  store i8 %732, i8* %156, align 1, !tbaa !2449
  %733 = lshr i64 %707, 63
  %734 = lshr i64 %712, 57
  %735 = and i64 %734, 1
  %736 = xor i64 %731, %733
  %737 = xor i64 %731, %735
  %738 = add nuw nsw i64 %736, %737
  %739 = icmp eq i64 %738, 2
  %740 = zext i1 %739 to i8
  store i8 %740, i8* %164, align 1, !tbaa !2450
  %741 = inttoptr i64 %714 to i64*
  %742 = add i64 %704, 22
  store i64 %742, i64* %PC, align 8
  %743 = load i64, i64* %741, align 8
  store i64 %743, i64* %RAX, align 8, !tbaa !2428
  %744 = load i64, i64* %RBP, align 8
  %745 = add i64 %744, -16
  %746 = add i64 %704, 26
  store i64 %746, i64* %PC, align 8
  %747 = inttoptr i64 %745 to i64*
  %748 = load i64, i64* %747, align 8
  store i64 %748, i64* %RCX, align 8, !tbaa !2428
  %749 = add i64 %744, -56
  %750 = add i64 %704, 30
  store i64 %750, i64* %PC, align 8
  %751 = inttoptr i64 %749 to i64*
  %752 = load i64, i64* %751, align 8
  %753 = add i64 %752, -1
  %754 = shl i64 %753, 6
  store i64 %754, i64* %RDX, align 8, !tbaa !2428
  %755 = add i64 %754, %748
  store i64 %755, i64* %RCX, align 8, !tbaa !2428
  %756 = icmp ult i64 %755, %748
  %757 = icmp ult i64 %755, %754
  %758 = or i1 %756, %757
  %759 = zext i1 %758 to i8
  store i8 %759, i8* %137, align 1, !tbaa !2432
  %760 = trunc i64 %755 to i32
  %761 = and i32 %760, 255
  %762 = tail call i32 @llvm.ctpop.i32(i32 %761) #12
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  store i8 %765, i8* %144, align 1, !tbaa !2446
  %766 = xor i64 %748, %755
  %767 = lshr i64 %766, 4
  %768 = trunc i64 %767 to i8
  %769 = and i8 %768, 1
  store i8 %769, i8* %150, align 1, !tbaa !2447
  %770 = icmp eq i64 %755, 0
  %771 = zext i1 %770 to i8
  store i8 %771, i8* %153, align 1, !tbaa !2448
  %772 = lshr i64 %755, 63
  %773 = trunc i64 %772 to i8
  store i8 %773, i8* %156, align 1, !tbaa !2449
  %774 = lshr i64 %748, 63
  %775 = lshr i64 %753, 57
  %776 = and i64 %775, 1
  %777 = xor i64 %772, %774
  %778 = xor i64 %772, %776
  %779 = add nuw nsw i64 %777, %778
  %780 = icmp eq i64 %779, 2
  %781 = zext i1 %780 to i8
  store i8 %781, i8* %164, align 1, !tbaa !2450
  %782 = add i64 %755, 56
  %783 = load i64, i64* %RAX, align 8
  %784 = add i64 %704, 45
  store i64 %784, i64* %PC, align 8
  %785 = inttoptr i64 %782 to i64*
  store i64 %783, i64* %785, align 8
  %786 = load i64, i64* %RBP, align 8
  %787 = add i64 %786, -16
  %788 = load i64, i64* %PC, align 8
  %789 = add i64 %788, 4
  store i64 %789, i64* %PC, align 8
  %790 = inttoptr i64 %787 to i64*
  %791 = load i64, i64* %790, align 8
  store i64 %791, i64* %RAX, align 8, !tbaa !2428
  %792 = add i64 %786, -64
  %793 = add i64 %788, 8
  store i64 %793, i64* %PC, align 8
  %794 = inttoptr i64 %792 to i64*
  %795 = load i64, i64* %794, align 8
  %796 = add i64 %795, -1
  %797 = shl i64 %796, 6
  store i64 %797, i64* %RCX, align 8, !tbaa !2428
  %798 = add i64 %797, %791
  store i64 %798, i64* %RAX, align 8, !tbaa !2428
  %799 = icmp ult i64 %798, %791
  %800 = icmp ult i64 %798, %797
  %801 = or i1 %799, %800
  %802 = zext i1 %801 to i8
  store i8 %802, i8* %137, align 1, !tbaa !2432
  %803 = trunc i64 %798 to i32
  %804 = and i32 %803, 255
  %805 = tail call i32 @llvm.ctpop.i32(i32 %804) #12
  %806 = trunc i32 %805 to i8
  %807 = and i8 %806, 1
  %808 = xor i8 %807, 1
  store i8 %808, i8* %144, align 1, !tbaa !2446
  %809 = xor i64 %791, %798
  %810 = lshr i64 %809, 4
  %811 = trunc i64 %810 to i8
  %812 = and i8 %811, 1
  store i8 %812, i8* %150, align 1, !tbaa !2447
  %813 = icmp eq i64 %798, 0
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %153, align 1, !tbaa !2448
  %815 = lshr i64 %798, 63
  %816 = trunc i64 %815 to i8
  store i8 %816, i8* %156, align 1, !tbaa !2449
  %817 = lshr i64 %791, 63
  %818 = lshr i64 %796, 57
  %819 = and i64 %818, 1
  %820 = xor i64 %815, %817
  %821 = xor i64 %815, %819
  %822 = add nuw nsw i64 %820, %821
  %823 = icmp eq i64 %822, 2
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %164, align 1, !tbaa !2450
  %825 = add i64 %798, 48
  %826 = add i64 %788, 23
  store i64 %826, i64* %PC, align 8
  %827 = inttoptr i64 %825 to i64*
  %828 = load i64, i64* %827, align 8
  store i64 %828, i64* %RAX, align 8, !tbaa !2428
  %829 = load i64, i64* %RBP, align 8
  %830 = add i64 %829, -16
  %831 = add i64 %788, 27
  store i64 %831, i64* %PC, align 8
  %832 = inttoptr i64 %830 to i64*
  %833 = load i64, i64* %832, align 8
  store i64 %833, i64* %RCX, align 8, !tbaa !2428
  %834 = add i64 %829, -56
  %835 = add i64 %788, 31
  store i64 %835, i64* %PC, align 8
  %836 = inttoptr i64 %834 to i64*
  %837 = load i64, i64* %836, align 8
  %838 = add i64 %837, -1
  %839 = shl i64 %838, 6
  store i64 %839, i64* %RDX, align 8, !tbaa !2428
  %840 = add i64 %839, %833
  store i64 %840, i64* %RCX, align 8, !tbaa !2428
  %841 = icmp ult i64 %840, %833
  %842 = icmp ult i64 %840, %839
  %843 = or i1 %841, %842
  %844 = zext i1 %843 to i8
  store i8 %844, i8* %137, align 1, !tbaa !2432
  %845 = trunc i64 %840 to i32
  %846 = and i32 %845, 255
  %847 = tail call i32 @llvm.ctpop.i32(i32 %846) #12
  %848 = trunc i32 %847 to i8
  %849 = and i8 %848, 1
  %850 = xor i8 %849, 1
  store i8 %850, i8* %144, align 1, !tbaa !2446
  %851 = xor i64 %833, %840
  %852 = lshr i64 %851, 4
  %853 = trunc i64 %852 to i8
  %854 = and i8 %853, 1
  store i8 %854, i8* %150, align 1, !tbaa !2447
  %855 = icmp eq i64 %840, 0
  %856 = zext i1 %855 to i8
  store i8 %856, i8* %153, align 1, !tbaa !2448
  %857 = lshr i64 %840, 63
  %858 = trunc i64 %857 to i8
  store i8 %858, i8* %156, align 1, !tbaa !2449
  %859 = lshr i64 %833, 63
  %860 = lshr i64 %838, 57
  %861 = and i64 %860, 1
  %862 = xor i64 %857, %859
  %863 = xor i64 %857, %861
  %864 = add nuw nsw i64 %862, %863
  %865 = icmp eq i64 %864, 2
  %866 = zext i1 %865 to i8
  store i8 %866, i8* %164, align 1, !tbaa !2450
  %867 = add i64 %840, 48
  %868 = load i64, i64* %RAX, align 8
  %869 = add i64 %788, 46
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %867 to i64*
  store i64 %868, i64* %870, align 8
  %871 = load i64, i64* %RBP, align 8
  %872 = add i64 %871, -24
  %873 = load i64, i64* %PC, align 8
  %874 = add i64 %873, 4
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %872 to i64*
  %876 = load i64, i64* %875, align 8
  store i64 %876, i64* %RAX, align 8, !tbaa !2428
  %877 = add i64 %871, -16
  %878 = add i64 %873, 8
  store i64 %878, i64* %PC, align 8
  %879 = inttoptr i64 %877 to i64*
  %880 = load i64, i64* %879, align 8
  store i64 %880, i64* %RCX, align 8, !tbaa !2428
  %881 = add i64 %871, -64
  %882 = add i64 %873, 12
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %881 to i64*
  %884 = load i64, i64* %883, align 8
  %885 = add i64 %884, -1
  %886 = shl i64 %885, 6
  store i64 %886, i64* %RDX, align 8, !tbaa !2428
  %887 = add i64 %886, %880
  store i64 %887, i64* %RCX, align 8, !tbaa !2428
  %888 = icmp ult i64 %887, %880
  %889 = icmp ult i64 %887, %886
  %890 = or i1 %888, %889
  %891 = zext i1 %890 to i8
  store i8 %891, i8* %137, align 1, !tbaa !2432
  %892 = trunc i64 %887 to i32
  %893 = and i32 %892, 255
  %894 = tail call i32 @llvm.ctpop.i32(i32 %893) #12
  %895 = trunc i32 %894 to i8
  %896 = and i8 %895, 1
  %897 = xor i8 %896, 1
  store i8 %897, i8* %144, align 1, !tbaa !2446
  %898 = xor i64 %880, %887
  %899 = lshr i64 %898, 4
  %900 = trunc i64 %899 to i8
  %901 = and i8 %900, 1
  store i8 %901, i8* %150, align 1, !tbaa !2447
  %902 = icmp eq i64 %887, 0
  %903 = zext i1 %902 to i8
  store i8 %903, i8* %153, align 1, !tbaa !2448
  %904 = lshr i64 %887, 63
  %905 = trunc i64 %904 to i8
  store i8 %905, i8* %156, align 1, !tbaa !2449
  %906 = lshr i64 %880, 63
  %907 = lshr i64 %885, 57
  %908 = and i64 %907, 1
  %909 = xor i64 %904, %906
  %910 = xor i64 %904, %908
  %911 = add nuw nsw i64 %909, %910
  %912 = icmp eq i64 %911, 2
  %913 = zext i1 %912 to i8
  store i8 %913, i8* %164, align 1, !tbaa !2450
  %914 = add i64 %887, 8
  %915 = load i64, i64* %RAX, align 8
  %916 = add i64 %873, 27
  store i64 %916, i64* %PC, align 8
  %917 = inttoptr i64 %914 to i64*
  store i64 %915, i64* %917, align 8
  %918 = load i64, i64* %RBP, align 8
  %919 = add i64 %918, -32
  %920 = load i64, i64* %PC, align 8
  %921 = add i64 %920, 4
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %919 to i64*
  %923 = load i64, i64* %922, align 8
  store i64 %923, i64* %RAX, align 8, !tbaa !2428
  %924 = add i64 %918, -16
  %925 = add i64 %920, 8
  store i64 %925, i64* %PC, align 8
  %926 = inttoptr i64 %924 to i64*
  %927 = load i64, i64* %926, align 8
  store i64 %927, i64* %RCX, align 8, !tbaa !2428
  %928 = add i64 %918, -64
  %929 = add i64 %920, 12
  store i64 %929, i64* %PC, align 8
  %930 = inttoptr i64 %928 to i64*
  %931 = load i64, i64* %930, align 8
  %932 = add i64 %931, -1
  %933 = shl i64 %932, 6
  store i64 %933, i64* %RDX, align 8, !tbaa !2428
  %934 = add i64 %933, %927
  store i64 %934, i64* %RCX, align 8, !tbaa !2428
  %935 = icmp ult i64 %934, %927
  %936 = icmp ult i64 %934, %933
  %937 = or i1 %935, %936
  %938 = zext i1 %937 to i8
  store i8 %938, i8* %137, align 1, !tbaa !2432
  %939 = trunc i64 %934 to i32
  %940 = and i32 %939, 255
  %941 = tail call i32 @llvm.ctpop.i32(i32 %940) #12
  %942 = trunc i32 %941 to i8
  %943 = and i8 %942, 1
  %944 = xor i8 %943, 1
  store i8 %944, i8* %144, align 1, !tbaa !2446
  %945 = xor i64 %927, %934
  %946 = lshr i64 %945, 4
  %947 = trunc i64 %946 to i8
  %948 = and i8 %947, 1
  store i8 %948, i8* %150, align 1, !tbaa !2447
  %949 = icmp eq i64 %934, 0
  %950 = zext i1 %949 to i8
  store i8 %950, i8* %153, align 1, !tbaa !2448
  %951 = lshr i64 %934, 63
  %952 = trunc i64 %951 to i8
  store i8 %952, i8* %156, align 1, !tbaa !2449
  %953 = lshr i64 %927, 63
  %954 = lshr i64 %932, 57
  %955 = and i64 %954, 1
  %956 = xor i64 %951, %953
  %957 = xor i64 %951, %955
  %958 = add nuw nsw i64 %956, %957
  %959 = icmp eq i64 %958, 2
  %960 = zext i1 %959 to i8
  store i8 %960, i8* %164, align 1, !tbaa !2450
  %961 = add i64 %934, 16
  %962 = load i64, i64* %RAX, align 8
  %963 = add i64 %920, 27
  store i64 %963, i64* %PC, align 8
  %964 = inttoptr i64 %961 to i64*
  store i64 %962, i64* %964, align 8
  %965 = load i64, i64* %RBP, align 8
  %966 = add i64 %965, -40
  %967 = load i64, i64* %PC, align 8
  %968 = add i64 %967, 4
  store i64 %968, i64* %PC, align 8
  %969 = inttoptr i64 %966 to i64*
  %970 = load i64, i64* %969, align 8
  store i64 %970, i64* %RAX, align 8, !tbaa !2428
  %971 = add i64 %965, -16
  %972 = add i64 %967, 8
  store i64 %972, i64* %PC, align 8
  %973 = inttoptr i64 %971 to i64*
  %974 = load i64, i64* %973, align 8
  store i64 %974, i64* %RCX, align 8, !tbaa !2428
  %975 = add i64 %965, -64
  %976 = add i64 %967, 12
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %975 to i64*
  %978 = load i64, i64* %977, align 8
  %979 = add i64 %978, -1
  %980 = shl i64 %979, 6
  store i64 %980, i64* %RDX, align 8, !tbaa !2428
  %981 = add i64 %980, %974
  store i64 %981, i64* %RCX, align 8, !tbaa !2428
  %982 = icmp ult i64 %981, %974
  %983 = icmp ult i64 %981, %980
  %984 = or i1 %982, %983
  %985 = zext i1 %984 to i8
  store i8 %985, i8* %137, align 1, !tbaa !2432
  %986 = trunc i64 %981 to i32
  %987 = and i32 %986, 255
  %988 = tail call i32 @llvm.ctpop.i32(i32 %987) #12
  %989 = trunc i32 %988 to i8
  %990 = and i8 %989, 1
  %991 = xor i8 %990, 1
  store i8 %991, i8* %144, align 1, !tbaa !2446
  %992 = xor i64 %974, %981
  %993 = lshr i64 %992, 4
  %994 = trunc i64 %993 to i8
  %995 = and i8 %994, 1
  store i8 %995, i8* %150, align 1, !tbaa !2447
  %996 = icmp eq i64 %981, 0
  %997 = zext i1 %996 to i8
  store i8 %997, i8* %153, align 1, !tbaa !2448
  %998 = lshr i64 %981, 63
  %999 = trunc i64 %998 to i8
  store i8 %999, i8* %156, align 1, !tbaa !2449
  %1000 = lshr i64 %974, 63
  %1001 = lshr i64 %979, 57
  %1002 = and i64 %1001, 1
  %1003 = xor i64 %998, %1000
  %1004 = xor i64 %998, %1002
  %1005 = add nuw nsw i64 %1003, %1004
  %1006 = icmp eq i64 %1005, 2
  %1007 = zext i1 %1006 to i8
  store i8 %1007, i8* %164, align 1, !tbaa !2450
  %1008 = inttoptr i64 %981 to i64*
  %1009 = load i64, i64* %RAX, align 8
  %1010 = add i64 %967, 26
  store i64 %1010, i64* %PC, align 8
  store i64 %1009, i64* %1008, align 8
  %1011 = load i64, i64* %RBP, align 8
  %1012 = add i64 %1011, -40
  %1013 = load i64, i64* %PC, align 8
  %1014 = add i64 %1013, 4
  store i64 %1014, i64* %PC, align 8
  %1015 = inttoptr i64 %1012 to i64*
  %1016 = load i64, i64* %1015, align 8
  store i64 %1016, i64* %RAX, align 8, !tbaa !2428
  %1017 = add i64 %1011, -16
  %1018 = add i64 %1013, 8
  store i64 %1018, i64* %PC, align 8
  %1019 = inttoptr i64 %1017 to i64*
  %1020 = load i64, i64* %1019, align 8
  store i64 %1020, i64* %RCX, align 8, !tbaa !2428
  %1021 = add i64 %1011, -64
  %1022 = add i64 %1013, 12
  store i64 %1022, i64* %PC, align 8
  %1023 = inttoptr i64 %1021 to i64*
  %1024 = load i64, i64* %1023, align 8
  %1025 = add i64 %1024, -1
  %1026 = shl i64 %1025, 6
  store i64 %1026, i64* %RDX, align 8, !tbaa !2428
  %1027 = add i64 %1026, %1020
  store i64 %1027, i64* %RCX, align 8, !tbaa !2428
  %1028 = icmp ult i64 %1027, %1020
  %1029 = icmp ult i64 %1027, %1026
  %1030 = or i1 %1028, %1029
  %1031 = zext i1 %1030 to i8
  store i8 %1031, i8* %137, align 1, !tbaa !2432
  %1032 = trunc i64 %1027 to i32
  %1033 = and i32 %1032, 255
  %1034 = tail call i32 @llvm.ctpop.i32(i32 %1033) #12
  %1035 = trunc i32 %1034 to i8
  %1036 = and i8 %1035, 1
  %1037 = xor i8 %1036, 1
  store i8 %1037, i8* %144, align 1, !tbaa !2446
  %1038 = xor i64 %1020, %1027
  %1039 = lshr i64 %1038, 4
  %1040 = trunc i64 %1039 to i8
  %1041 = and i8 %1040, 1
  store i8 %1041, i8* %150, align 1, !tbaa !2447
  %1042 = icmp eq i64 %1027, 0
  %1043 = zext i1 %1042 to i8
  store i8 %1043, i8* %153, align 1, !tbaa !2448
  %1044 = lshr i64 %1027, 63
  %1045 = trunc i64 %1044 to i8
  store i8 %1045, i8* %156, align 1, !tbaa !2449
  %1046 = lshr i64 %1020, 63
  %1047 = lshr i64 %1025, 57
  %1048 = and i64 %1047, 1
  %1049 = xor i64 %1044, %1046
  %1050 = xor i64 %1044, %1048
  %1051 = add nuw nsw i64 %1049, %1050
  %1052 = icmp eq i64 %1051, 2
  %1053 = zext i1 %1052 to i8
  store i8 %1053, i8* %164, align 1, !tbaa !2450
  %1054 = add i64 %1027, 56
  %1055 = load i64, i64* %RAX, align 8
  %1056 = add i64 %1013, 27
  store i64 %1056, i64* %PC, align 8
  %1057 = inttoptr i64 %1054 to i64*
  store i64 %1055, i64* %1057, align 8
  %1058 = load i64, i64* %RBP, align 8
  %1059 = add i64 %1058, -48
  %1060 = load i64, i64* %PC, align 8
  %1061 = add i64 %1060, 4
  store i64 %1061, i64* %PC, align 8
  %1062 = inttoptr i64 %1059 to i64*
  %1063 = load i64, i64* %1062, align 8
  store i64 %1063, i64* %RAX, align 8, !tbaa !2428
  %1064 = add i64 %1058, -16
  %1065 = add i64 %1060, 8
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1064 to i64*
  %1067 = load i64, i64* %1066, align 8
  store i64 %1067, i64* %RCX, align 8, !tbaa !2428
  %1068 = add i64 %1058, -64
  %1069 = add i64 %1060, 12
  store i64 %1069, i64* %PC, align 8
  %1070 = inttoptr i64 %1068 to i64*
  %1071 = load i64, i64* %1070, align 8
  %1072 = add i64 %1071, -1
  %1073 = shl i64 %1072, 6
  store i64 %1073, i64* %RDX, align 8, !tbaa !2428
  %1074 = add i64 %1073, %1067
  store i64 %1074, i64* %RCX, align 8, !tbaa !2428
  %1075 = icmp ult i64 %1074, %1067
  %1076 = icmp ult i64 %1074, %1073
  %1077 = or i1 %1075, %1076
  %1078 = zext i1 %1077 to i8
  store i8 %1078, i8* %137, align 1, !tbaa !2432
  %1079 = trunc i64 %1074 to i32
  %1080 = and i32 %1079, 255
  %1081 = tail call i32 @llvm.ctpop.i32(i32 %1080) #12
  %1082 = trunc i32 %1081 to i8
  %1083 = and i8 %1082, 1
  %1084 = xor i8 %1083, 1
  store i8 %1084, i8* %144, align 1, !tbaa !2446
  %1085 = xor i64 %1067, %1074
  %1086 = lshr i64 %1085, 4
  %1087 = trunc i64 %1086 to i8
  %1088 = and i8 %1087, 1
  store i8 %1088, i8* %150, align 1, !tbaa !2447
  %1089 = icmp eq i64 %1074, 0
  %1090 = zext i1 %1089 to i8
  store i8 %1090, i8* %153, align 1, !tbaa !2448
  %1091 = lshr i64 %1074, 63
  %1092 = trunc i64 %1091 to i8
  store i8 %1092, i8* %156, align 1, !tbaa !2449
  %1093 = lshr i64 %1067, 63
  %1094 = lshr i64 %1072, 57
  %1095 = and i64 %1094, 1
  %1096 = xor i64 %1091, %1093
  %1097 = xor i64 %1091, %1095
  %1098 = add nuw nsw i64 %1096, %1097
  %1099 = icmp eq i64 %1098, 2
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %164, align 1, !tbaa !2450
  %1101 = add i64 %1074, 48
  %1102 = load i64, i64* %RAX, align 8
  %1103 = add i64 %1060, 27
  store i64 %1103, i64* %PC, align 8
  %1104 = inttoptr i64 %1101 to i64*
  store i64 %1102, i64* %1104, align 8
  %1105 = load i64, i64* %RBP, align 8
  %1106 = add i64 %1105, -64
  %1107 = load i64, i64* %PC, align 8
  %1108 = add i64 %1107, 4
  store i64 %1108, i64* %PC, align 8
  %1109 = inttoptr i64 %1106 to i64*
  %1110 = load i64, i64* %1109, align 8
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = add i64 %1105, -56
  %1112 = add i64 %1107, 8
  store i64 %1112, i64* %PC, align 8
  %1113 = inttoptr i64 %1111 to i64*
  store i64 %1110, i64* %1113, align 8
  %1114 = load i64, i64* %RBP, align 8
  %1115 = add i64 %1114, -64
  %1116 = load i64, i64* %PC, align 8
  %1117 = add i64 %1116, 4
  store i64 %1117, i64* %PC, align 8
  %1118 = inttoptr i64 %1115 to i64*
  %1119 = load i64, i64* %1118, align 8
  %1120 = shl i64 %1119, 1
  %1121 = icmp slt i64 %1119, 0
  %1122 = icmp slt i64 %1120, 0
  %1123 = xor i1 %1121, %1122
  store i64 %1120, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i64 %1119, 63
  %1124 = trunc i64 %.lobit to i8
  store i8 %1124, i8* %137, align 1, !tbaa !2453
  %1125 = trunc i64 %1120 to i32
  %1126 = and i32 %1125, 254
  %1127 = tail call i32 @llvm.ctpop.i32(i32 %1126) #12
  %1128 = trunc i32 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = xor i8 %1129, 1
  store i8 %1130, i8* %144, align 1, !tbaa !2453
  store i8 0, i8* %150, align 1, !tbaa !2453
  %1131 = icmp eq i64 %1120, 0
  %1132 = zext i1 %1131 to i8
  store i8 %1132, i8* %153, align 1, !tbaa !2453
  %1133 = lshr i64 %1119, 62
  %1134 = trunc i64 %1133 to i8
  %1135 = and i8 %1134, 1
  store i8 %1135, i8* %156, align 1, !tbaa !2453
  %1136 = zext i1 %1123 to i8
  store i8 %1136, i8* %164, align 1, !tbaa !2453
  %1137 = add i64 %1116, 12
  store i64 %1137, i64* %PC, align 8
  store i64 %1120, i64* %1118, align 8
  %1138 = load i64, i64* %RBP, align 8
  %1139 = add i64 %1138, -64
  %1140 = load i64, i64* %PC, align 8
  %1141 = add i64 %1140, 4
  store i64 %1141, i64* %PC, align 8
  %1142 = inttoptr i64 %1139 to i64*
  %1143 = load i64, i64* %1142, align 8
  %1144 = add i64 %1143, 1
  store i64 %1144, i64* %RAX, align 8, !tbaa !2428
  %1145 = icmp eq i64 %1143, -1
  %1146 = icmp eq i64 %1144, 0
  %1147 = or i1 %1145, %1146
  %1148 = zext i1 %1147 to i8
  store i8 %1148, i8* %137, align 1, !tbaa !2432
  %1149 = trunc i64 %1144 to i32
  %1150 = and i32 %1149, 255
  %1151 = tail call i32 @llvm.ctpop.i32(i32 %1150) #12
  %1152 = trunc i32 %1151 to i8
  %1153 = and i8 %1152, 1
  %1154 = xor i8 %1153, 1
  store i8 %1154, i8* %144, align 1, !tbaa !2446
  %1155 = xor i64 %1144, %1143
  %1156 = lshr i64 %1155, 4
  %1157 = trunc i64 %1156 to i8
  %1158 = and i8 %1157, 1
  store i8 %1158, i8* %150, align 1, !tbaa !2447
  %1159 = zext i1 %1146 to i8
  store i8 %1159, i8* %153, align 1, !tbaa !2448
  %1160 = lshr i64 %1144, 63
  %1161 = trunc i64 %1160 to i8
  store i8 %1161, i8* %156, align 1, !tbaa !2449
  %1162 = lshr i64 %1143, 63
  %1163 = xor i64 %1160, %1162
  %1164 = add nuw nsw i64 %1163, %1160
  %1165 = icmp eq i64 %1164, 2
  %1166 = zext i1 %1165 to i8
  store i8 %1166, i8* %164, align 1, !tbaa !2450
  %1167 = add i64 %1138, -8
  %1168 = add i64 %1140, 12
  store i64 %1168, i64* %PC, align 8
  %1169 = inttoptr i64 %1167 to i64*
  %1170 = load i64, i64* %1169, align 8
  store i64 %1170, i64* %RCX, align 8, !tbaa !2428
  %1171 = add i64 %1170, 448
  %1172 = add i64 %1140, 19
  store i64 %1172, i64* %PC, align 8
  %1173 = inttoptr i64 %1171 to i64*
  %1174 = load i64, i64* %1173, align 8
  %1175 = sub i64 %1144, %1174
  %1176 = icmp ult i64 %1144, %1174
  %1177 = zext i1 %1176 to i8
  store i8 %1177, i8* %137, align 1, !tbaa !2432
  %1178 = trunc i64 %1175 to i32
  %1179 = and i32 %1178, 255
  %1180 = tail call i32 @llvm.ctpop.i32(i32 %1179) #12
  %1181 = trunc i32 %1180 to i8
  %1182 = and i8 %1181, 1
  %1183 = xor i8 %1182, 1
  store i8 %1183, i8* %144, align 1, !tbaa !2446
  %1184 = xor i64 %1174, %1144
  %1185 = xor i64 %1184, %1175
  %1186 = lshr i64 %1185, 4
  %1187 = trunc i64 %1186 to i8
  %1188 = and i8 %1187, 1
  store i8 %1188, i8* %150, align 1, !tbaa !2447
  %1189 = icmp eq i64 %1175, 0
  %1190 = zext i1 %1189 to i8
  store i8 %1190, i8* %153, align 1, !tbaa !2448
  %1191 = lshr i64 %1175, 63
  %1192 = trunc i64 %1191 to i8
  store i8 %1192, i8* %156, align 1, !tbaa !2449
  %1193 = lshr i64 %1174, 63
  %1194 = xor i64 %1193, %1160
  %1195 = xor i64 %1191, %1160
  %1196 = add nuw nsw i64 %1195, %1194
  %1197 = icmp eq i64 %1196, 2
  %1198 = zext i1 %1197 to i8
  store i8 %1198, i8* %164, align 1, !tbaa !2450
  %1199 = icmp ne i8 %1192, 0
  %1200 = xor i1 %1199, %1197
  %.demorgan8 = or i1 %1189, %1200
  %.v9 = select i1 %.demorgan8, i64 25, i64 90
  %1201 = add i64 %1140, %.v9
  store i64 %1201, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan8, label %block_4010bd, label %block_4010fe

block_400f17:                                     ; preds = %block_400ed8, %block_400ef4
  %1202 = phi i64 [ %410, %block_400ed8 ], [ %.pre6, %block_400ef4 ]
  %1203 = load i64, i64* %RBP, align 8
  %1204 = add i64 %1203, -65
  %1205 = add i64 %1202, 3
  store i64 %1205, i64* %PC, align 8
  %1206 = inttoptr i64 %1204 to i8*
  %1207 = load i8, i8* %1206, align 1
  store i8 %1207, i8* %AL, align 1, !tbaa !2453
  %1208 = and i8 %1207, 1
  store i8 0, i8* %137, align 1, !tbaa !2432
  %1209 = zext i8 %1208 to i32
  %1210 = tail call i32 @llvm.ctpop.i32(i32 %1209) #12
  %1211 = trunc i32 %1210 to i8
  %1212 = xor i8 %1211, 1
  store i8 %1212, i8* %144, align 1, !tbaa !2446
  %1213 = xor i8 %1208, 1
  store i8 %1213, i8* %153, align 1, !tbaa !2448
  store i8 0, i8* %156, align 1, !tbaa !2449
  store i8 0, i8* %164, align 1, !tbaa !2450
  store i8 0, i8* %150, align 1, !tbaa !2447
  %1214 = icmp eq i8 %1213, 0
  %.v = select i1 %1214, i64 16, i64 11
  %1215 = add i64 %1202, %.v
  store i64 %1215, i64* %PC, align 8, !tbaa !2428
  br i1 %1214, label %block_400f27, label %block_400f22

block_400f22:                                     ; preds = %block_400f17
  %1216 = add i64 %1215, 482
  store i64 %1216, i64* %PC, align 8
  %1217 = load i64, i64* %9, align 8, !tbaa !2428
  %1218 = add i64 %1217, 8
  %1219 = inttoptr i64 %1217 to i64*
  %1220 = load i64, i64* %1219, align 8
  store i64 %1220, i64* %RBP, align 8, !tbaa !2428
  store i64 %1218, i64* %9, align 8, !tbaa !2428
  %1221 = add i64 %1215, 483
  store i64 %1221, i64* %PC, align 8
  %1222 = inttoptr i64 %1218 to i64*
  %1223 = load i64, i64* %1222, align 8
  store i64 %1223, i64* %PC, align 8, !tbaa !2428
  %1224 = add i64 %1217, 16
  store i64 %1224, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4035c0_read_min(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4035c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -376
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 368
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 672), i64* %RSI, align 8, !tbaa !2428
  %39 = add i64 %6, -24
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 24
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -24
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 8
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 0, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -16
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RDI, align 8, !tbaa !2428
  %54 = add i64 %50, -11521
  %55 = add i64 %50, 9
  %56 = load i64, i64* %RSP, align 8, !tbaa !2428
  %57 = add i64 %56, -8
  %58 = inttoptr i64 %57 to i64*
  store i64 %55, i64* %58, align 8
  store i64 %57, i64* %RSP, align 8, !tbaa !2428
  store i64 %54, i64* %PC, align 8, !tbaa !2428
  %59 = tail call fastcc %struct.Memory* @ext_609020_fopen(%struct.State* nonnull %0, %struct.Memory* %2)
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -24
  %62 = load i64, i64* %RAX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RAX, align 8
  %67 = load i64, i64* %PC, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %68 = trunc i64 %66 to i32
  %69 = and i32 %68, 255
  %70 = tail call i32 @llvm.ctpop.i32(i32 %69) #12
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %74 = icmp eq i64 %66, 0
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %29, align 1, !tbaa !2448
  %76 = lshr i64 %66, 63
  %77 = trunc i64 %76 to i8
  store i8 %77, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %.v84 = select i1 %74, i64 10, i64 23
  %78 = add i64 %67, %.v84
  store i64 %78, i64* %PC, align 8, !tbaa !2428
  br i1 %74, label %block_4035f8, label %block_403605

block_4035f8:                                     ; preds = %block_4035c0
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -8
  %81 = add i64 %78, 8
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %80 to i64*
  store i64 -1, i64* %82, align 8
  %83 = load i64, i64* %PC, align 8
  %84 = add i64 %83, 2686
  store i64 %84, i64* %PC, align 8, !tbaa !2428
  br label %block_40407e

block_403f70:                                     ; preds = %block_404032, %block_403f4b
  %85 = phi i64 [ %2676, %block_404032 ], [ %.pre79, %block_403f4b ]
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -272
  %88 = add i64 %85, 7
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %86, -16
  %92 = add i64 %85, 11
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %RCX, align 8, !tbaa !2428
  %95 = add i64 %94, 408
  %96 = add i64 %85, 18
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = sub i64 %90, %98
  %100 = icmp ult i64 %90, %98
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %13, align 1, !tbaa !2432
  %102 = trunc i64 %99 to i32
  %103 = and i32 %102, 255
  %104 = tail call i32 @llvm.ctpop.i32(i32 %103) #12
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  store i8 %107, i8* %20, align 1, !tbaa !2446
  %108 = xor i64 %98, %90
  %109 = xor i64 %108, %99
  %110 = lshr i64 %109, 4
  %111 = trunc i64 %110 to i8
  %112 = and i8 %111, 1
  store i8 %112, i8* %26, align 1, !tbaa !2447
  %113 = icmp eq i64 %99, 0
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %29, align 1, !tbaa !2448
  %115 = lshr i64 %99, 63
  %116 = trunc i64 %115 to i8
  store i8 %116, i8* %32, align 1, !tbaa !2449
  %117 = lshr i64 %90, 63
  %118 = lshr i64 %98, 63
  %119 = xor i64 %118, %117
  %120 = xor i64 %115, %117
  %121 = add nuw nsw i64 %120, %119
  %122 = icmp eq i64 %121, 2
  %123 = zext i1 %122 to i8
  store i8 %123, i8* %38, align 1, !tbaa !2450
  %124 = icmp ne i8 %116, 0
  %125 = xor i1 %124, %122
  %.demorgan83 = or i1 %113, %125
  %.v93 = select i1 %.demorgan83, i64 24, i64 262
  %126 = add i64 %85, %.v93
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan83, label %block_403f88, label %block_404076

block_403ea5:                                     ; preds = %block_403d3a
  %127 = add i64 %1563, 4
  store i64 %127, i64* %PC, align 8
  %128 = load i64, i64* %1530, align 8
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = add i64 %128, 576
  %130 = add i64 %1563, 11
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = add i64 %1523, -280
  %134 = add i64 %1563, 18
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %133 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = sub i64 %132, %136
  %138 = icmp ult i64 %132, %136
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %13, align 1, !tbaa !2432
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #12
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %20, align 1, !tbaa !2446
  %146 = xor i64 %136, %132
  %147 = xor i64 %146, %137
  %148 = lshr i64 %147, 4
  %149 = trunc i64 %148 to i8
  %150 = and i8 %149, 1
  store i8 %150, i8* %26, align 1, !tbaa !2447
  %151 = icmp eq i64 %137, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %29, align 1, !tbaa !2448
  %153 = lshr i64 %137, 63
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* %32, align 1, !tbaa !2449
  %155 = lshr i64 %132, 63
  %156 = lshr i64 %136, 63
  %157 = xor i64 %156, %155
  %158 = xor i64 %153, %155
  %159 = add nuw nsw i64 %158, %157
  %160 = icmp eq i64 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %38, align 1, !tbaa !2450
  %.v92 = select i1 %151, i64 166, i64 24
  %162 = add i64 %1563, %.v92
  store i64 %162, i64* %PC, align 8, !tbaa !2428
  br i1 %151, label %block_403f4b, label %block_403ebd

block_404076:                                     ; preds = %block_403f70
  %163 = add i64 %86, -8
  %164 = add i64 %126, 8
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i64*
  store i64 0, i64* %165, align 8
  %.pre80 = load i64, i64* %PC, align 8
  br label %block_40407e

block_40365d:                                     ; preds = %block_403605
  %166 = add i64 %2569, -248
  %167 = add i64 %2568, 7
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %RAX, align 8, !tbaa !2428
  %170 = add i64 %2569, -16
  %171 = add i64 %2568, 11
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %RCX, align 8, !tbaa !2428
  %174 = add i64 %173, 408
  %175 = add i64 %2568, 18
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %174 to i64*
  store i64 %169, i64* %176, align 8
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -256
  %179 = load i64, i64* %PC, align 8
  %180 = add i64 %179, 7
  store i64 %180, i64* %PC, align 8
  %181 = inttoptr i64 %178 to i64*
  %182 = load i64, i64* %181, align 8
  store i64 %182, i64* %RAX, align 8, !tbaa !2428
  %183 = add i64 %177, -16
  %184 = add i64 %179, 11
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %183 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %RCX, align 8, !tbaa !2428
  %187 = add i64 %186, 432
  %188 = add i64 %179, 18
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  store i64 %182, i64* %189, align 8
  %190 = load i64, i64* %RBP, align 8
  %191 = add i64 %190, -248
  %192 = load i64, i64* %PC, align 8
  %193 = add i64 %192, 7
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %191 to i64*
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %RAX, align 8, !tbaa !2428
  %196 = add i64 %192, 14
  store i64 %196, i64* %PC, align 8
  %197 = load i64, i64* %194, align 8
  %198 = add i64 %197, %195
  %199 = lshr i64 %198, 63
  %200 = add i64 %198, 1
  store i64 %200, i64* %RAX, align 8, !tbaa !2428
  %201 = icmp eq i64 %198, -1
  %202 = icmp eq i64 %200, 0
  %203 = or i1 %201, %202
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %13, align 1, !tbaa !2432
  %205 = trunc i64 %200 to i32
  %206 = and i32 %205, 255
  %207 = tail call i32 @llvm.ctpop.i32(i32 %206) #12
  %208 = trunc i32 %207 to i8
  %209 = and i8 %208, 1
  %210 = xor i8 %209, 1
  store i8 %210, i8* %20, align 1, !tbaa !2446
  %211 = xor i64 %200, %198
  %212 = lshr i64 %211, 4
  %213 = trunc i64 %212 to i8
  %214 = and i8 %213, 1
  store i8 %214, i8* %26, align 1, !tbaa !2447
  %215 = zext i1 %202 to i8
  store i8 %215, i8* %29, align 1, !tbaa !2448
  %216 = lshr i64 %200, 63
  %217 = trunc i64 %216 to i8
  store i8 %217, i8* %32, align 1, !tbaa !2449
  %218 = xor i64 %216, %199
  %219 = add nuw nsw i64 %218, %216
  %220 = icmp eq i64 %219, 2
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %38, align 1, !tbaa !2450
  %222 = add i64 %190, -16
  %223 = add i64 %192, 22
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224, align 8
  store i64 %225, i64* %RCX, align 8, !tbaa !2428
  %226 = add i64 %225, 400
  %227 = add i64 %192, 29
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i64*
  store i64 %200, i64* %228, align 8
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -248
  %231 = load i64, i64* %PC, align 8
  %232 = add i64 %231, 7
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %230 to i64*
  %234 = load i64, i64* %233, align 8
  store i64 %234, i64* %RAX, align 8, !tbaa !2428
  %235 = add i64 %231, 14
  store i64 %235, i64* %PC, align 8
  %236 = load i64, i64* %233, align 8
  %237 = add i64 %236, %234
  store i64 %237, i64* %RAX, align 8, !tbaa !2428
  %238 = icmp ult i64 %237, %234
  %239 = icmp ult i64 %237, %236
  %240 = or i1 %238, %239
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %13, align 1, !tbaa !2432
  %242 = trunc i64 %237 to i32
  %243 = and i32 %242, 255
  %244 = tail call i32 @llvm.ctpop.i32(i32 %243) #12
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  store i8 %247, i8* %20, align 1, !tbaa !2446
  %248 = xor i64 %236, %234
  %249 = xor i64 %248, %237
  %250 = lshr i64 %249, 4
  %251 = trunc i64 %250 to i8
  %252 = and i8 %251, 1
  store i8 %252, i8* %26, align 1, !tbaa !2447
  %253 = icmp eq i64 %237, 0
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %29, align 1, !tbaa !2448
  %255 = lshr i64 %237, 63
  %256 = trunc i64 %255 to i8
  store i8 %256, i8* %32, align 1, !tbaa !2449
  %257 = lshr i64 %234, 63
  %258 = lshr i64 %236, 63
  %259 = xor i64 %255, %257
  %260 = xor i64 %255, %258
  %261 = add nuw nsw i64 %259, %260
  %262 = icmp eq i64 %261, 2
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %38, align 1, !tbaa !2450
  %264 = add i64 %231, 21
  store i64 %264, i64* %PC, align 8
  %265 = load i64, i64* %233, align 8
  %266 = add i64 %265, %237
  store i64 %266, i64* %RAX, align 8, !tbaa !2428
  %267 = icmp ult i64 %266, %237
  %268 = icmp ult i64 %266, %265
  %269 = or i1 %267, %268
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %13, align 1, !tbaa !2432
  %271 = trunc i64 %266 to i32
  %272 = and i32 %271, 255
  %273 = tail call i32 @llvm.ctpop.i32(i32 %272) #12
  %274 = trunc i32 %273 to i8
  %275 = and i8 %274, 1
  %276 = xor i8 %275, 1
  store i8 %276, i8* %20, align 1, !tbaa !2446
  %277 = xor i64 %265, %237
  %278 = xor i64 %277, %266
  %279 = lshr i64 %278, 4
  %280 = trunc i64 %279 to i8
  %281 = and i8 %280, 1
  store i8 %281, i8* %26, align 1, !tbaa !2447
  %282 = icmp eq i64 %266, 0
  %283 = zext i1 %282 to i8
  store i8 %283, i8* %29, align 1, !tbaa !2448
  %284 = lshr i64 %266, 63
  %285 = trunc i64 %284 to i8
  store i8 %285, i8* %32, align 1, !tbaa !2449
  %286 = lshr i64 %265, 63
  %287 = xor i64 %284, %255
  %288 = xor i64 %284, %286
  %289 = add nuw nsw i64 %287, %288
  %290 = icmp eq i64 %289, 2
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %38, align 1, !tbaa !2450
  %292 = add i64 %229, -256
  %293 = add i64 %231, 28
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %292 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = add i64 %295, %266
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = icmp ult i64 %296, %266
  %298 = icmp ult i64 %296, %295
  %299 = or i1 %297, %298
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %13, align 1, !tbaa !2432
  %301 = trunc i64 %296 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #12
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %20, align 1, !tbaa !2446
  %307 = xor i64 %295, %266
  %308 = xor i64 %307, %296
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %26, align 1, !tbaa !2447
  %312 = icmp eq i64 %296, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %29, align 1, !tbaa !2448
  %314 = lshr i64 %296, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %32, align 1, !tbaa !2449
  %316 = lshr i64 %295, 63
  %317 = xor i64 %314, %284
  %318 = xor i64 %314, %316
  %319 = add nuw nsw i64 %317, %318
  %320 = icmp eq i64 %319, 2
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %38, align 1, !tbaa !2450
  %322 = load i64, i64* %RBP, align 8
  %323 = add i64 %322, -16
  %324 = add i64 %231, 32
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %RCX, align 8, !tbaa !2428
  %327 = add i64 %326, 424
  %328 = add i64 %231, 39
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i64*
  store i64 %296, i64* %329, align 8
  %330 = load i64, i64* %RBP, align 8
  %331 = add i64 %330, -16
  %332 = load i64, i64* %PC, align 8
  %333 = add i64 %332, 4
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %331 to i64*
  %335 = load i64, i64* %334, align 8
  store i64 %335, i64* %RAX, align 8, !tbaa !2428
  %336 = add i64 %335, 408
  %337 = add i64 %332, 15
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  %339 = load i64, i64* %338, align 8
  %340 = add i64 %339, -15000
  %341 = icmp ult i64 %339, 15000
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %13, align 1, !tbaa !2432
  %343 = trunc i64 %340 to i32
  %344 = and i32 %343, 255
  %345 = tail call i32 @llvm.ctpop.i32(i32 %344) #12
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  store i8 %348, i8* %20, align 1, !tbaa !2446
  %349 = xor i64 %339, 16
  %350 = xor i64 %349, %340
  %351 = lshr i64 %350, 4
  %352 = trunc i64 %351 to i8
  %353 = and i8 %352, 1
  store i8 %353, i8* %26, align 1, !tbaa !2447
  %354 = icmp eq i64 %340, 0
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %29, align 1, !tbaa !2448
  %356 = lshr i64 %340, 63
  %357 = trunc i64 %356 to i8
  store i8 %357, i8* %32, align 1, !tbaa !2449
  %358 = lshr i64 %339, 63
  %359 = xor i64 %356, %358
  %360 = add nuw nsw i64 %359, %358
  %361 = icmp eq i64 %360, 2
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %38, align 1, !tbaa !2450
  %363 = icmp ne i8 %357, 0
  %364 = xor i1 %363, %361
  %.demorgan = or i1 %354, %364
  %.v = select i1 %.demorgan, i64 21, i64 63
  %365 = add i64 %332, %.v
  %366 = add i64 %365, 4
  store i64 %366, i64* %PC, align 8
  %367 = load i64, i64* %334, align 8
  store i64 %367, i64* %RAX, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_4036da, label %block_403704

block_4037d8:                                     ; preds = %block_4037c6
  %368 = add i64 %1929, 4
  store i64 %368, i64* %PC, align 8
  %369 = load i64, i64* %2170, align 8
  store i64 %369, i64* %RAX, align 8, !tbaa !2428
  %370 = add i64 %369, 584
  %371 = add i64 %1929, 12
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %370 to i64*
  %373 = load i64, i64* %372, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %374 = trunc i64 %373 to i32
  %375 = and i32 %374, 255
  %376 = tail call i32 @llvm.ctpop.i32(i32 %375) #12
  %377 = trunc i32 %376 to i8
  %378 = and i8 %377, 1
  %379 = xor i8 %378, 1
  store i8 %379, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %380 = icmp eq i64 %373, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %29, align 1, !tbaa !2448
  %382 = lshr i64 %373, 63
  %383 = trunc i64 %382 to i8
  store i8 %383, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %.v88 = select i1 %380, i64 18, i64 70
  %384 = add i64 %1929, %.v88
  store i64 %384, i64* %PC, align 8, !tbaa !2428
  br i1 %380, label %block_4037ea, label %block_40381e

block_403d52:                                     ; preds = %block_403d3a
  store i64 200, i64* %RSI, align 8, !tbaa !2428
  %385 = add i64 %1523, -240
  store i64 %385, i64* %RDI, align 8, !tbaa !2428
  %386 = add i64 %1523, -24
  %387 = add i64 %1563, 16
  store i64 %387, i64* %PC, align 8
  %388 = inttoptr i64 %386 to i64*
  %389 = load i64, i64* %388, align 8
  store i64 %389, i64* %RDX, align 8, !tbaa !2428
  %390 = add i64 %1563, -13538
  %391 = add i64 %1563, 21
  %392 = load i64, i64* %RSP, align 8, !tbaa !2428
  %393 = add i64 %392, -8
  %394 = inttoptr i64 %393 to i64*
  store i64 %391, i64* %394, align 8
  store i64 %393, i64* %RSP, align 8, !tbaa !2428
  store i64 %390, i64* %PC, align 8, !tbaa !2428
  %395 = tail call fastcc %struct.Memory* @ext_608fe8_fgets(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %396 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 705), i64* %RSI, align 8, !tbaa !2428
  %397 = load i64, i64* %RBP, align 8
  %398 = add i64 %397, -248
  store i64 %398, i64* %RDX, align 8, !tbaa !2428
  %399 = add i64 %397, -256
  store i64 %399, i64* %RCX, align 8, !tbaa !2428
  %400 = add i64 %397, -264
  store i64 %400, i64* %R8, align 8, !tbaa !2428
  %401 = add i64 %397, -240
  store i64 %401, i64* %RDI, align 8, !tbaa !2428
  %402 = add i64 %397, -336
  %403 = load i64, i64* %RAX, align 8
  %404 = add i64 %396, 45
  store i64 %404, i64* %PC, align 8
  %405 = inttoptr i64 %402 to i64*
  store i64 %403, i64* %405, align 8
  %406 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %407 = add i64 %406, -13524
  %408 = add i64 %406, 7
  %409 = load i64, i64* %RSP, align 8, !tbaa !2428
  %410 = add i64 %409, -8
  %411 = inttoptr i64 %410 to i64*
  store i64 %408, i64* %411, align 8
  store i64 %410, i64* %RSP, align 8, !tbaa !2428
  store i64 %407, i64* %PC, align 8, !tbaa !2428
  %412 = tail call fastcc %struct.Memory* @ext_609010___isoc99_sscanf(%struct.State* nonnull %0, %struct.Memory* %395)
  %413 = load i32, i32* %EAX, align 4
  %414 = load i64, i64* %PC, align 8
  %415 = add i32 %413, -3
  %416 = icmp ult i32 %413, 3
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %13, align 1, !tbaa !2432
  %418 = and i32 %415, 255
  %419 = tail call i32 @llvm.ctpop.i32(i32 %418) #12
  %420 = trunc i32 %419 to i8
  %421 = and i8 %420, 1
  %422 = xor i8 %421, 1
  store i8 %422, i8* %20, align 1, !tbaa !2446
  %423 = xor i32 %415, %413
  %424 = lshr i32 %423, 4
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  store i8 %426, i8* %26, align 1, !tbaa !2447
  %427 = icmp eq i32 %415, 0
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %29, align 1, !tbaa !2448
  %429 = lshr i32 %415, 31
  %430 = trunc i32 %429 to i8
  store i8 %430, i8* %32, align 1, !tbaa !2449
  %431 = lshr i32 %413, 31
  %432 = xor i32 %429, %431
  %433 = add nuw nsw i32 %432, %431
  %434 = icmp eq i32 %433, 2
  %435 = zext i1 %434 to i8
  store i8 %435, i8* %38, align 1, !tbaa !2450
  %.v96 = select i1 %427, i64 22, i64 9
  %436 = add i64 %414, %.v96
  store i64 %436, i64* %PC, align 8, !tbaa !2428
  %437 = load i64, i64* %RBP, align 8
  br i1 %427, label %block_403db1, label %block_403da4

block_403f88:                                     ; preds = %block_403f70
  %438 = add i64 %126, 4
  store i64 %438, i64* %PC, align 8
  %439 = load i64, i64* %93, align 8
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = add i64 %439, 528
  %441 = add i64 %126, 15
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %440 to i64*
  %443 = load i64, i64* %442, align 8
  %444 = add i64 %443, -10000000
  %445 = icmp ult i64 %443, 10000000
  %446 = zext i1 %445 to i8
  store i8 %446, i8* %13, align 1, !tbaa !2432
  %447 = trunc i64 %444 to i32
  %448 = and i32 %447, 255
  %449 = tail call i32 @llvm.ctpop.i32(i32 %448) #12
  %450 = trunc i32 %449 to i8
  %451 = and i8 %450, 1
  %452 = xor i8 %451, 1
  store i8 %452, i8* %20, align 1, !tbaa !2446
  %453 = xor i64 %444, %443
  %454 = lshr i64 %453, 4
  %455 = trunc i64 %454 to i8
  %456 = and i8 %455, 1
  store i8 %456, i8* %26, align 1, !tbaa !2447
  %457 = icmp eq i64 %444, 0
  %458 = zext i1 %457 to i8
  store i8 %458, i8* %29, align 1, !tbaa !2448
  %459 = lshr i64 %444, 63
  %460 = trunc i64 %459 to i8
  store i8 %460, i8* %32, align 1, !tbaa !2449
  %461 = lshr i64 %443, 63
  %462 = xor i64 %459, %461
  %463 = add nuw nsw i64 %462, %461
  %464 = icmp eq i64 %463, 2
  %465 = zext i1 %464 to i8
  store i8 %465, i8* %38, align 1, !tbaa !2450
  %466 = icmp ne i8 %460, 0
  %467 = xor i1 %466, %464
  %468 = or i1 %457, %467
  %.v94 = select i1 %468, i64 44, i64 21
  %469 = add i64 %126, %.v94
  store i64 %469, i64* %PC, align 8, !tbaa !2428
  br i1 %468, label %block_403fb4, label %block_403f9d

block_40394a:                                     ; preds = %block_403929
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %470 = add i64 %1981, -272
  %471 = add i64 %1912, 11
  store i64 %471, i64* %PC, align 8
  %472 = inttoptr i64 %470 to i64*
  %473 = load i64, i64* %472, align 8
  %474 = sub i64 0, %473
  store i64 %474, i64* %RCX, align 8, !tbaa !2428
  %475 = icmp ne i64 %473, 0
  %476 = zext i1 %475 to i8
  store i8 %476, i8* %13, align 1, !tbaa !2432
  %477 = trunc i64 %474 to i32
  %478 = and i32 %477, 255
  %479 = tail call i32 @llvm.ctpop.i32(i32 %478) #12
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  %482 = xor i8 %481, 1
  store i8 %482, i8* %20, align 1, !tbaa !2446
  %483 = xor i64 %473, %474
  %484 = lshr i64 %483, 4
  %485 = trunc i64 %484 to i8
  %486 = and i8 %485, 1
  store i8 %486, i8* %26, align 1, !tbaa !2447
  %487 = icmp eq i64 %473, 0
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %29, align 1, !tbaa !2448
  %489 = lshr i64 %474, 63
  %490 = trunc i64 %489 to i8
  store i8 %490, i8* %32, align 1, !tbaa !2449
  %491 = lshr i64 %473, 63
  %492 = add nuw nsw i64 %489, %491
  %493 = icmp eq i64 %492, 2
  %494 = zext i1 %493 to i8
  store i8 %494, i8* %38, align 1, !tbaa !2450
  %495 = and i64 %474, 4294967295
  store i64 %495, i64* %RAX, align 8, !tbaa !2428
  %496 = add i64 %1981, -288
  %497 = add i64 %1912, 20
  store i64 %497, i64* %PC, align 8
  %498 = inttoptr i64 %496 to i64*
  %499 = load i64, i64* %498, align 8
  store i64 %499, i64* %RCX, align 8, !tbaa !2428
  %500 = add i64 %1912, 28
  store i64 %500, i64* %PC, align 8
  %501 = load i64, i64* %472, align 8
  %502 = mul i64 %501, 104
  store i64 %502, i64* %RDX, align 8, !tbaa !2428
  %503 = lshr i64 %502, 63
  %504 = add i64 %502, %499
  store i64 %504, i64* %RCX, align 8, !tbaa !2428
  %505 = icmp ult i64 %504, %499
  %506 = icmp ult i64 %504, %502
  %507 = or i1 %505, %506
  %508 = zext i1 %507 to i8
  store i8 %508, i8* %13, align 1, !tbaa !2432
  %509 = trunc i64 %504 to i32
  %510 = and i32 %509, 255
  %511 = tail call i32 @llvm.ctpop.i32(i32 %510) #12
  %512 = trunc i32 %511 to i8
  %513 = and i8 %512, 1
  %514 = xor i8 %513, 1
  store i8 %514, i8* %20, align 1, !tbaa !2446
  %515 = xor i64 %502, %499
  %516 = xor i64 %515, %504
  %517 = lshr i64 %516, 4
  %518 = trunc i64 %517 to i8
  %519 = and i8 %518, 1
  store i8 %519, i8* %26, align 1, !tbaa !2447
  %520 = icmp eq i64 %504, 0
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %29, align 1, !tbaa !2448
  %522 = lshr i64 %504, 63
  %523 = trunc i64 %522 to i8
  store i8 %523, i8* %32, align 1, !tbaa !2449
  %524 = lshr i64 %499, 63
  %525 = xor i64 %522, %524
  %526 = xor i64 %522, %503
  %527 = add nuw nsw i64 %525, %526
  %528 = icmp eq i64 %527, 2
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %38, align 1, !tbaa !2450
  %530 = add i64 %504, 96
  %531 = add i64 %1912, 34
  store i64 %531, i64* %PC, align 8
  %532 = inttoptr i64 %530 to i32*
  store i32 %477, i32* %532, align 4
  %533 = load i64, i64* %RBP, align 8
  %534 = add i64 %533, -288
  %535 = load i64, i64* %PC, align 8
  %536 = add i64 %535, 7
  store i64 %536, i64* %PC, align 8
  %537 = inttoptr i64 %534 to i64*
  %538 = load i64, i64* %537, align 8
  store i64 %538, i64* %RCX, align 8, !tbaa !2428
  %539 = add i64 %533, -272
  %540 = add i64 %535, 15
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %539 to i64*
  %542 = load i64, i64* %541, align 8
  %543 = mul i64 %542, 104
  store i64 %543, i64* %RDX, align 8, !tbaa !2428
  %544 = lshr i64 %543, 63
  %545 = add i64 %543, %538
  store i64 %545, i64* %RCX, align 8, !tbaa !2428
  %546 = icmp ult i64 %545, %538
  %547 = icmp ult i64 %545, %543
  %548 = or i1 %546, %547
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %13, align 1, !tbaa !2432
  %550 = trunc i64 %545 to i32
  %551 = and i32 %550, 255
  %552 = tail call i32 @llvm.ctpop.i32(i32 %551) #12
  %553 = trunc i32 %552 to i8
  %554 = and i8 %553, 1
  %555 = xor i8 %554, 1
  store i8 %555, i8* %20, align 1, !tbaa !2446
  %556 = xor i64 %543, %538
  %557 = xor i64 %556, %545
  %558 = lshr i64 %557, 4
  %559 = trunc i64 %558 to i8
  %560 = and i8 %559, 1
  store i8 %560, i8* %26, align 1, !tbaa !2447
  %561 = icmp eq i64 %545, 0
  %562 = zext i1 %561 to i8
  store i8 %562, i8* %29, align 1, !tbaa !2448
  %563 = lshr i64 %545, 63
  %564 = trunc i64 %563 to i8
  store i8 %564, i8* %32, align 1, !tbaa !2449
  %565 = lshr i64 %538, 63
  %566 = xor i64 %563, %565
  %567 = xor i64 %563, %544
  %568 = add nuw nsw i64 %566, %567
  %569 = icmp eq i64 %568, 2
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %38, align 1, !tbaa !2450
  %571 = add i64 %545, 80
  %572 = add i64 %535, 26
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %571 to i64*
  store i64 -1, i64* %573, align 8
  %574 = load i64, i64* %RBP, align 8
  %575 = add i64 %574, -272
  %576 = load i64, i64* %PC, align 8
  %577 = add i64 %576, 7
  store i64 %577, i64* %PC, align 8
  %578 = inttoptr i64 %575 to i64*
  %579 = load i64, i64* %578, align 8
  store i64 %579, i64* %RCX, align 8, !tbaa !2428
  %580 = and i64 %579, 4294967295
  store i64 %580, i64* %RAX, align 8, !tbaa !2428
  %581 = add i64 %574, -288
  %582 = add i64 %576, 16
  store i64 %582, i64* %PC, align 8
  %583 = inttoptr i64 %581 to i64*
  %584 = load i64, i64* %583, align 8
  store i64 %584, i64* %RCX, align 8, !tbaa !2428
  %585 = add i64 %576, 23
  store i64 %585, i64* %PC, align 8
  %586 = load i64, i64* %578, align 8
  store i64 %586, i64* %RDX, align 8, !tbaa !2428
  %587 = add i64 %574, -16
  %588 = add i64 %576, 27
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %587 to i64*
  %590 = load i64, i64* %589, align 8
  store i64 %590, i64* %RSI, align 8, !tbaa !2428
  %591 = add i64 %590, 408
  %592 = add i64 %576, 34
  store i64 %592, i64* %PC, align 8
  %593 = inttoptr i64 %591 to i64*
  %594 = load i64, i64* %593, align 8
  %595 = add i64 %594, %586
  %596 = mul i64 %595, 104
  store i64 %596, i64* %RDX, align 8, !tbaa !2428
  %597 = lshr i64 %596, 63
  %598 = add i64 %596, %584
  store i64 %598, i64* %RCX, align 8, !tbaa !2428
  %599 = icmp ult i64 %598, %584
  %600 = icmp ult i64 %598, %596
  %601 = or i1 %599, %600
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %13, align 1, !tbaa !2432
  %603 = trunc i64 %598 to i32
  %604 = and i32 %603, 255
  %605 = tail call i32 @llvm.ctpop.i32(i32 %604) #12
  %606 = trunc i32 %605 to i8
  %607 = and i8 %606, 1
  %608 = xor i8 %607, 1
  store i8 %608, i8* %20, align 1, !tbaa !2446
  %609 = xor i64 %596, %584
  %610 = xor i64 %609, %598
  %611 = lshr i64 %610, 4
  %612 = trunc i64 %611 to i8
  %613 = and i8 %612, 1
  store i8 %613, i8* %26, align 1, !tbaa !2447
  %614 = icmp eq i64 %598, 0
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %29, align 1, !tbaa !2448
  %616 = lshr i64 %598, 63
  %617 = trunc i64 %616 to i8
  store i8 %617, i8* %32, align 1, !tbaa !2449
  %618 = lshr i64 %584, 63
  %619 = xor i64 %616, %618
  %620 = xor i64 %616, %597
  %621 = add nuw nsw i64 %619, %620
  %622 = icmp eq i64 %621, 2
  %623 = zext i1 %622 to i8
  store i8 %623, i8* %38, align 1, !tbaa !2450
  %624 = add i64 %598, 96
  %625 = load i32, i32* %EAX, align 4
  %626 = add i64 %576, 44
  store i64 %626, i64* %PC, align 8
  %627 = inttoptr i64 %624 to i32*
  store i32 %625, i32* %627, align 4
  %628 = load i64, i64* %RBP, align 8
  %629 = add i64 %628, -288
  %630 = load i64, i64* %PC, align 8
  %631 = add i64 %630, 7
  store i64 %631, i64* %PC, align 8
  %632 = inttoptr i64 %629 to i64*
  %633 = load i64, i64* %632, align 8
  store i64 %633, i64* %RCX, align 8, !tbaa !2428
  %634 = add i64 %628, -272
  %635 = add i64 %630, 14
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %634 to i64*
  %637 = load i64, i64* %636, align 8
  store i64 %637, i64* %RDX, align 8, !tbaa !2428
  %638 = add i64 %628, -16
  %639 = add i64 %630, 18
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %638 to i64*
  %641 = load i64, i64* %640, align 8
  store i64 %641, i64* %RSI, align 8, !tbaa !2428
  %642 = add i64 %641, 408
  %643 = add i64 %630, 25
  store i64 %643, i64* %PC, align 8
  %644 = inttoptr i64 %642 to i64*
  %645 = load i64, i64* %644, align 8
  %646 = add i64 %645, %637
  %647 = mul i64 %646, 104
  store i64 %647, i64* %RDX, align 8, !tbaa !2428
  %648 = lshr i64 %647, 63
  %649 = add i64 %647, %633
  store i64 %649, i64* %RCX, align 8, !tbaa !2428
  %650 = icmp ult i64 %649, %633
  %651 = icmp ult i64 %649, %647
  %652 = or i1 %650, %651
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %13, align 1, !tbaa !2432
  %654 = trunc i64 %649 to i32
  %655 = and i32 %654, 255
  %656 = tail call i32 @llvm.ctpop.i32(i32 %655) #12
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  %659 = xor i8 %658, 1
  store i8 %659, i8* %20, align 1, !tbaa !2446
  %660 = xor i64 %647, %633
  %661 = xor i64 %660, %649
  %662 = lshr i64 %661, 4
  %663 = trunc i64 %662 to i8
  %664 = and i8 %663, 1
  store i8 %664, i8* %26, align 1, !tbaa !2447
  %665 = icmp eq i64 %649, 0
  %666 = zext i1 %665 to i8
  store i8 %666, i8* %29, align 1, !tbaa !2448
  %667 = lshr i64 %649, 63
  %668 = trunc i64 %667 to i8
  store i8 %668, i8* %32, align 1, !tbaa !2449
  %669 = lshr i64 %633, 63
  %670 = xor i64 %667, %669
  %671 = xor i64 %667, %648
  %672 = add nuw nsw i64 %670, %671
  %673 = icmp eq i64 %672, 2
  %674 = zext i1 %673 to i8
  store i8 %674, i8* %38, align 1, !tbaa !2450
  %675 = add i64 %649, 80
  %676 = add i64 %630, 40
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i64*
  store i64 1, i64* %677, align 8
  %678 = load i64, i64* %RBP, align 8
  %679 = add i64 %678, -248
  %680 = load i64, i64* %PC, align 8
  %681 = add i64 %680, 7
  store i64 %681, i64* %PC, align 8
  %682 = inttoptr i64 %679 to i64*
  %683 = load i64, i64* %682, align 8
  store i64 %683, i64* %RCX, align 8, !tbaa !2428
  %684 = trunc i64 %683 to i32
  %685 = and i64 %683, 4294967295
  store i64 %685, i64* %RAX, align 8, !tbaa !2428
  %686 = add i64 %678, -288
  %687 = add i64 %680, 16
  store i64 %687, i64* %PC, align 8
  %688 = inttoptr i64 %686 to i64*
  %689 = load i64, i64* %688, align 8
  store i64 %689, i64* %RCX, align 8, !tbaa !2428
  %690 = add i64 %678, -272
  %691 = add i64 %680, 24
  store i64 %691, i64* %PC, align 8
  %692 = inttoptr i64 %690 to i64*
  %693 = load i64, i64* %692, align 8
  %694 = mul i64 %693, 104
  store i64 %694, i64* %RDX, align 8, !tbaa !2428
  %695 = lshr i64 %694, 63
  %696 = add i64 %694, %689
  store i64 %696, i64* %RCX, align 8, !tbaa !2428
  %697 = icmp ult i64 %696, %689
  %698 = icmp ult i64 %696, %694
  %699 = or i1 %697, %698
  %700 = zext i1 %699 to i8
  store i8 %700, i8* %13, align 1, !tbaa !2432
  %701 = trunc i64 %696 to i32
  %702 = and i32 %701, 255
  %703 = tail call i32 @llvm.ctpop.i32(i32 %702) #12
  %704 = trunc i32 %703 to i8
  %705 = and i8 %704, 1
  %706 = xor i8 %705, 1
  store i8 %706, i8* %20, align 1, !tbaa !2446
  %707 = xor i64 %694, %689
  %708 = xor i64 %707, %696
  %709 = lshr i64 %708, 4
  %710 = trunc i64 %709 to i8
  %711 = and i8 %710, 1
  store i8 %711, i8* %26, align 1, !tbaa !2447
  %712 = icmp eq i64 %696, 0
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %29, align 1, !tbaa !2448
  %714 = lshr i64 %696, 63
  %715 = trunc i64 %714 to i8
  store i8 %715, i8* %32, align 1, !tbaa !2449
  %716 = lshr i64 %689, 63
  %717 = xor i64 %714, %716
  %718 = xor i64 %714, %695
  %719 = add nuw nsw i64 %717, %718
  %720 = icmp eq i64 %719, 2
  %721 = zext i1 %720 to i8
  store i8 %721, i8* %38, align 1, !tbaa !2450
  %722 = add i64 %696, 100
  %723 = add i64 %680, 30
  store i64 %723, i64* %PC, align 8
  %724 = inttoptr i64 %722 to i32*
  store i32 %684, i32* %724, align 4
  %725 = load i64, i64* %RBP, align 8
  %726 = add i64 %725, -256
  %727 = load i64, i64* %PC, align 8
  %728 = add i64 %727, 7
  store i64 %728, i64* %PC, align 8
  %729 = inttoptr i64 %726 to i64*
  %730 = load i64, i64* %729, align 8
  store i64 %730, i64* %RCX, align 8, !tbaa !2428
  %731 = and i64 %730, 4294967295
  store i64 %731, i64* %RAX, align 8, !tbaa !2428
  %732 = add i64 %725, -288
  %733 = add i64 %727, 16
  store i64 %733, i64* %PC, align 8
  %734 = inttoptr i64 %732 to i64*
  %735 = load i64, i64* %734, align 8
  store i64 %735, i64* %RCX, align 8, !tbaa !2428
  %736 = add i64 %725, -272
  %737 = add i64 %727, 23
  store i64 %737, i64* %PC, align 8
  %738 = inttoptr i64 %736 to i64*
  %739 = load i64, i64* %738, align 8
  store i64 %739, i64* %RDX, align 8, !tbaa !2428
  %740 = add i64 %725, -16
  %741 = add i64 %727, 27
  store i64 %741, i64* %PC, align 8
  %742 = inttoptr i64 %740 to i64*
  %743 = load i64, i64* %742, align 8
  store i64 %743, i64* %RSI, align 8, !tbaa !2428
  %744 = add i64 %743, 408
  %745 = add i64 %727, 34
  store i64 %745, i64* %PC, align 8
  %746 = inttoptr i64 %744 to i64*
  %747 = load i64, i64* %746, align 8
  %748 = add i64 %747, %739
  %749 = mul i64 %748, 104
  store i64 %749, i64* %RDX, align 8, !tbaa !2428
  %750 = lshr i64 %749, 63
  %751 = add i64 %749, %735
  store i64 %751, i64* %RCX, align 8, !tbaa !2428
  %752 = icmp ult i64 %751, %735
  %753 = icmp ult i64 %751, %749
  %754 = or i1 %752, %753
  %755 = zext i1 %754 to i8
  store i8 %755, i8* %13, align 1, !tbaa !2432
  %756 = trunc i64 %751 to i32
  %757 = and i32 %756, 255
  %758 = tail call i32 @llvm.ctpop.i32(i32 %757) #12
  %759 = trunc i32 %758 to i8
  %760 = and i8 %759, 1
  %761 = xor i8 %760, 1
  store i8 %761, i8* %20, align 1, !tbaa !2446
  %762 = xor i64 %749, %735
  %763 = xor i64 %762, %751
  %764 = lshr i64 %763, 4
  %765 = trunc i64 %764 to i8
  %766 = and i8 %765, 1
  store i8 %766, i8* %26, align 1, !tbaa !2447
  %767 = icmp eq i64 %751, 0
  %768 = zext i1 %767 to i8
  store i8 %768, i8* %29, align 1, !tbaa !2448
  %769 = lshr i64 %751, 63
  %770 = trunc i64 %769 to i8
  store i8 %770, i8* %32, align 1, !tbaa !2449
  %771 = lshr i64 %735, 63
  %772 = xor i64 %769, %771
  %773 = xor i64 %769, %750
  %774 = add nuw nsw i64 %772, %773
  %775 = icmp eq i64 %774, 2
  %776 = zext i1 %775 to i8
  store i8 %776, i8* %38, align 1, !tbaa !2450
  %777 = add i64 %751, 100
  %778 = load i32, i32* %EAX, align 4
  %779 = add i64 %727, 44
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %777 to i32*
  store i32 %778, i32* %780, align 4
  %781 = load i64, i64* %RBP, align 8
  %782 = add i64 %781, -288
  %783 = load i64, i64* %PC, align 8
  %784 = add i64 %783, 7
  store i64 %784, i64* %PC, align 8
  %785 = inttoptr i64 %782 to i64*
  %786 = load i64, i64* %785, align 8
  store i64 %786, i64* %RCX, align 8, !tbaa !2428
  %787 = add i64 %781, -16
  %788 = add i64 %783, 11
  store i64 %788, i64* %PC, align 8
  %789 = inttoptr i64 %787 to i64*
  %790 = load i64, i64* %789, align 8
  store i64 %790, i64* %RDX, align 8, !tbaa !2428
  %791 = add i64 %790, 400
  %792 = add i64 %783, 19
  store i64 %792, i64* %PC, align 8
  %793 = inttoptr i64 %791 to i64*
  %794 = load i64, i64* %793, align 8
  %795 = mul i64 %794, 104
  store i64 %795, i64* %RDX, align 8, !tbaa !2428
  %796 = lshr i64 %795, 63
  %797 = add i64 %795, %786
  store i64 %797, i64* %RCX, align 8, !tbaa !2428
  %798 = icmp ult i64 %797, %786
  %799 = icmp ult i64 %797, %795
  %800 = or i1 %798, %799
  %801 = zext i1 %800 to i8
  store i8 %801, i8* %13, align 1, !tbaa !2432
  %802 = trunc i64 %797 to i32
  %803 = and i32 %802, 255
  %804 = tail call i32 @llvm.ctpop.i32(i32 %803) #12
  %805 = trunc i32 %804 to i8
  %806 = and i8 %805, 1
  %807 = xor i8 %806, 1
  store i8 %807, i8* %20, align 1, !tbaa !2446
  %808 = xor i64 %795, %786
  %809 = xor i64 %808, %797
  %810 = lshr i64 %809, 4
  %811 = trunc i64 %810 to i8
  %812 = and i8 %811, 1
  store i8 %812, i8* %26, align 1, !tbaa !2447
  %813 = icmp eq i64 %797, 0
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %29, align 1, !tbaa !2448
  %815 = lshr i64 %797, 63
  %816 = trunc i64 %815 to i8
  store i8 %816, i8* %32, align 1, !tbaa !2449
  %817 = lshr i64 %786, 63
  %818 = xor i64 %815, %817
  %819 = xor i64 %815, %796
  %820 = add nuw nsw i64 %818, %819
  %821 = icmp eq i64 %820, 2
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %38, align 1, !tbaa !2450
  %823 = add i64 %781, -280
  %824 = add i64 %783, 29
  store i64 %824, i64* %PC, align 8
  %825 = inttoptr i64 %823 to i64*
  %826 = load i64, i64* %825, align 8
  store i64 %826, i64* %RDX, align 8, !tbaa !2428
  %827 = add i64 %826, 8
  %828 = add i64 %783, 33
  store i64 %828, i64* %PC, align 8
  %829 = inttoptr i64 %827 to i64*
  store i64 %797, i64* %829, align 8
  %830 = load i64, i64* %RBP, align 8
  %831 = add i64 %830, -288
  %832 = load i64, i64* %PC, align 8
  %833 = add i64 %832, 7
  store i64 %833, i64* %PC, align 8
  %834 = inttoptr i64 %831 to i64*
  %835 = load i64, i64* %834, align 8
  store i64 %835, i64* %RCX, align 8, !tbaa !2428
  %836 = add i64 %830, -272
  %837 = add i64 %832, 15
  store i64 %837, i64* %PC, align 8
  %838 = inttoptr i64 %836 to i64*
  %839 = load i64, i64* %838, align 8
  %840 = mul i64 %839, 104
  store i64 %840, i64* %RDX, align 8, !tbaa !2428
  %841 = lshr i64 %840, 63
  %842 = add i64 %840, %835
  store i64 %842, i64* %RCX, align 8, !tbaa !2428
  %843 = icmp ult i64 %842, %835
  %844 = icmp ult i64 %842, %840
  %845 = or i1 %843, %844
  %846 = zext i1 %845 to i8
  store i8 %846, i8* %13, align 1, !tbaa !2432
  %847 = trunc i64 %842 to i32
  %848 = and i32 %847, 255
  %849 = tail call i32 @llvm.ctpop.i32(i32 %848) #12
  %850 = trunc i32 %849 to i8
  %851 = and i8 %850, 1
  %852 = xor i8 %851, 1
  store i8 %852, i8* %20, align 1, !tbaa !2446
  %853 = xor i64 %840, %835
  %854 = xor i64 %853, %842
  %855 = lshr i64 %854, 4
  %856 = trunc i64 %855 to i8
  %857 = and i8 %856, 1
  store i8 %857, i8* %26, align 1, !tbaa !2447
  %858 = icmp eq i64 %842, 0
  %859 = zext i1 %858 to i8
  store i8 %859, i8* %29, align 1, !tbaa !2448
  %860 = lshr i64 %842, 63
  %861 = trunc i64 %860 to i8
  store i8 %861, i8* %32, align 1, !tbaa !2449
  %862 = lshr i64 %835, 63
  %863 = xor i64 %860, %862
  %864 = xor i64 %860, %841
  %865 = add nuw nsw i64 %863, %864
  %866 = icmp eq i64 %865, 2
  %867 = zext i1 %866 to i8
  store i8 %867, i8* %38, align 1, !tbaa !2450
  %868 = add i64 %830, -280
  %869 = add i64 %832, 25
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i64*
  %871 = load i64, i64* %870, align 8
  store i64 %871, i64* %RDX, align 8, !tbaa !2428
  %872 = add i64 %871, 16
  %873 = add i64 %832, 29
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %872 to i64*
  store i64 %842, i64* %874, align 8
  %875 = load i64, i64* %RBP, align 8
  %876 = add i64 %875, -16
  %877 = load i64, i64* %PC, align 8
  %878 = add i64 %877, 4
  store i64 %878, i64* %PC, align 8
  %879 = inttoptr i64 %876 to i64*
  %880 = load i64, i64* %879, align 8
  store i64 %880, i64* %RCX, align 8, !tbaa !2428
  %881 = add i64 %880, 528
  %882 = add i64 %877, 11
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %881 to i64*
  %884 = load i64, i64* %883, align 8
  %885 = add i64 %884, 15
  store i64 %885, i64* %RCX, align 8, !tbaa !2428
  %886 = icmp ugt i64 %884, -16
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %13, align 1, !tbaa !2432
  %888 = trunc i64 %885 to i32
  %889 = and i32 %888, 255
  %890 = tail call i32 @llvm.ctpop.i32(i32 %889) #12
  %891 = trunc i32 %890 to i8
  %892 = and i8 %891, 1
  %893 = xor i8 %892, 1
  store i8 %893, i8* %20, align 1, !tbaa !2446
  %894 = xor i64 %885, %884
  %895 = lshr i64 %894, 4
  %896 = trunc i64 %895 to i8
  %897 = and i8 %896, 1
  store i8 %897, i8* %26, align 1, !tbaa !2447
  %898 = icmp eq i64 %885, 0
  %899 = zext i1 %898 to i8
  store i8 %899, i8* %29, align 1, !tbaa !2448
  %900 = lshr i64 %885, 63
  %901 = trunc i64 %900 to i8
  store i8 %901, i8* %32, align 1, !tbaa !2449
  %902 = lshr i64 %884, 63
  %903 = xor i64 %900, %902
  %904 = add nuw nsw i64 %903, %900
  %905 = icmp eq i64 %904, 2
  %906 = zext i1 %905 to i8
  store i8 %906, i8* %38, align 1, !tbaa !2450
  %907 = add i64 %875, -280
  %908 = add i64 %877, 22
  store i64 %908, i64* %PC, align 8
  %909 = inttoptr i64 %907 to i64*
  %910 = load i64, i64* %909, align 8
  store i64 %910, i64* %RDX, align 8, !tbaa !2428
  %911 = add i64 %877, 25
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %910 to i64*
  store i64 %885, i64* %912, align 8
  %913 = load i64, i64* %RBP, align 8
  %914 = add i64 %913, -280
  %915 = load i64, i64* %PC, align 8
  %916 = add i64 %915, 7
  store i64 %916, i64* %PC, align 8
  %917 = inttoptr i64 %914 to i64*
  %918 = load i64, i64* %917, align 8
  store i64 %918, i64* %RDX, align 8, !tbaa !2428
  %919 = add i64 %918, 56
  %920 = load i64, i64* %RCX, align 8
  %921 = add i64 %915, 11
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %919 to i64*
  store i64 %920, i64* %922, align 8
  %923 = load i64, i64* %RBP, align 8
  %924 = add i64 %923, -280
  %925 = load i64, i64* %PC, align 8
  %926 = add i64 %925, 7
  store i64 %926, i64* %PC, align 8
  %927 = inttoptr i64 %924 to i64*
  %928 = load i64, i64* %927, align 8
  store i64 %928, i64* %RCX, align 8, !tbaa !2428
  %929 = add i64 %928, 8
  %930 = add i64 %925, 11
  store i64 %930, i64* %PC, align 8
  %931 = inttoptr i64 %929 to i64*
  %932 = load i64, i64* %931, align 8
  store i64 %932, i64* %RCX, align 8, !tbaa !2428
  %933 = add i64 %932, 56
  %934 = add i64 %925, 15
  store i64 %934, i64* %PC, align 8
  %935 = inttoptr i64 %933 to i64*
  %936 = load i64, i64* %935, align 8
  store i64 %936, i64* %RCX, align 8, !tbaa !2428
  %937 = add i64 %925, 22
  store i64 %937, i64* %PC, align 8
  %938 = load i64, i64* %927, align 8
  store i64 %938, i64* %RDX, align 8, !tbaa !2428
  %939 = add i64 %938, 32
  %940 = add i64 %925, 26
  store i64 %940, i64* %PC, align 8
  %941 = inttoptr i64 %939 to i64*
  store i64 %936, i64* %941, align 8
  %942 = load i64, i64* %RBP, align 8
  %943 = add i64 %942, -280
  %944 = load i64, i64* %PC, align 8
  %945 = add i64 %944, 7
  store i64 %945, i64* %PC, align 8
  %946 = inttoptr i64 %943 to i64*
  %947 = load i64, i64* %946, align 8
  store i64 %947, i64* %RCX, align 8, !tbaa !2428
  %948 = add i64 %944, 14
  store i64 %948, i64* %PC, align 8
  %949 = load i64, i64* %946, align 8
  store i64 %949, i64* %RDX, align 8, !tbaa !2428
  %950 = add i64 %949, 8
  %951 = add i64 %944, 18
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %950 to i64*
  %953 = load i64, i64* %952, align 8
  store i64 %953, i64* %RDX, align 8, !tbaa !2428
  %954 = add i64 %953, 56
  %955 = add i64 %944, 22
  store i64 %955, i64* %PC, align 8
  %956 = inttoptr i64 %954 to i64*
  store i64 %947, i64* %956, align 8
  %957 = load i64, i64* %RBP, align 8
  %958 = add i64 %957, -280
  %959 = load i64, i64* %PC, align 8
  %960 = add i64 %959, 7
  store i64 %960, i64* %PC, align 8
  %961 = inttoptr i64 %958 to i64*
  %962 = load i64, i64* %961, align 8
  store i64 %962, i64* %RCX, align 8, !tbaa !2428
  %963 = add i64 %962, 16
  %964 = add i64 %959, 11
  store i64 %964, i64* %PC, align 8
  %965 = inttoptr i64 %963 to i64*
  %966 = load i64, i64* %965, align 8
  store i64 %966, i64* %RCX, align 8, !tbaa !2428
  %967 = add i64 %966, 64
  %968 = add i64 %959, 15
  store i64 %968, i64* %PC, align 8
  %969 = inttoptr i64 %967 to i64*
  %970 = load i64, i64* %969, align 8
  store i64 %970, i64* %RCX, align 8, !tbaa !2428
  %971 = add i64 %959, 22
  store i64 %971, i64* %PC, align 8
  %972 = load i64, i64* %961, align 8
  store i64 %972, i64* %RDX, align 8, !tbaa !2428
  %973 = add i64 %972, 40
  %974 = add i64 %959, 26
  store i64 %974, i64* %PC, align 8
  %975 = inttoptr i64 %973 to i64*
  store i64 %970, i64* %975, align 8
  %976 = load i64, i64* %RBP, align 8
  %977 = add i64 %976, -280
  %978 = load i64, i64* %PC, align 8
  %979 = add i64 %978, 7
  store i64 %979, i64* %PC, align 8
  %980 = inttoptr i64 %977 to i64*
  %981 = load i64, i64* %980, align 8
  store i64 %981, i64* %RCX, align 8, !tbaa !2428
  %982 = add i64 %978, 14
  store i64 %982, i64* %PC, align 8
  %983 = load i64, i64* %980, align 8
  store i64 %983, i64* %RDX, align 8, !tbaa !2428
  %984 = add i64 %983, 16
  %985 = add i64 %978, 18
  store i64 %985, i64* %PC, align 8
  %986 = inttoptr i64 %984 to i64*
  %987 = load i64, i64* %986, align 8
  store i64 %987, i64* %RDX, align 8, !tbaa !2428
  %988 = add i64 %987, 64
  %989 = add i64 %978, 22
  store i64 %989, i64* %PC, align 8
  %990 = inttoptr i64 %988 to i64*
  store i64 %981, i64* %990, align 8
  %991 = load i64, i64* %RBP, align 8
  %992 = add i64 %991, -280
  %993 = load i64, i64* %PC, align 8
  %994 = add i64 %993, 7
  store i64 %994, i64* %PC, align 8
  %995 = inttoptr i64 %992 to i64*
  %996 = load i64, i64* %995, align 8
  %997 = add i64 %996, 64
  store i64 %997, i64* %RCX, align 8, !tbaa !2428
  %998 = icmp ugt i64 %996, -65
  %999 = zext i1 %998 to i8
  store i8 %999, i8* %13, align 1, !tbaa !2432
  %1000 = trunc i64 %997 to i32
  %1001 = and i32 %1000, 255
  %1002 = tail call i32 @llvm.ctpop.i32(i32 %1001) #12
  %1003 = trunc i32 %1002 to i8
  %1004 = and i8 %1003, 1
  %1005 = xor i8 %1004, 1
  store i8 %1005, i8* %20, align 1, !tbaa !2446
  %1006 = xor i64 %997, %996
  %1007 = lshr i64 %1006, 4
  %1008 = trunc i64 %1007 to i8
  %1009 = and i8 %1008, 1
  store i8 %1009, i8* %26, align 1, !tbaa !2447
  %1010 = icmp eq i64 %997, 0
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %29, align 1, !tbaa !2448
  %1012 = lshr i64 %997, 63
  %1013 = trunc i64 %1012 to i8
  store i8 %1013, i8* %32, align 1, !tbaa !2449
  %1014 = lshr i64 %996, 63
  %1015 = xor i64 %1012, %1014
  %1016 = add nuw nsw i64 %1015, %1012
  %1017 = icmp eq i64 %1016, 2
  %1018 = zext i1 %1017 to i8
  store i8 %1018, i8* %38, align 1, !tbaa !2450
  %1019 = add i64 %993, 18
  store i64 %1019, i64* %PC, align 8
  store i64 %997, i64* %995, align 8
  %1020 = load i64, i64* %RBP, align 8
  %1021 = add i64 %1020, -288
  %1022 = load i64, i64* %PC, align 8
  %1023 = add i64 %1022, 7
  store i64 %1023, i64* %PC, align 8
  %1024 = inttoptr i64 %1021 to i64*
  %1025 = load i64, i64* %1024, align 8
  store i64 %1025, i64* %RCX, align 8, !tbaa !2428
  %1026 = add i64 %1020, -272
  %1027 = add i64 %1022, 14
  store i64 %1027, i64* %PC, align 8
  %1028 = inttoptr i64 %1026 to i64*
  %1029 = load i64, i64* %1028, align 8
  store i64 %1029, i64* %RDX, align 8, !tbaa !2428
  %1030 = add i64 %1020, -16
  %1031 = add i64 %1022, 18
  store i64 %1031, i64* %PC, align 8
  %1032 = inttoptr i64 %1030 to i64*
  %1033 = load i64, i64* %1032, align 8
  store i64 %1033, i64* %RSI, align 8, !tbaa !2428
  %1034 = add i64 %1033, 408
  %1035 = add i64 %1022, 25
  store i64 %1035, i64* %PC, align 8
  %1036 = inttoptr i64 %1034 to i64*
  %1037 = load i64, i64* %1036, align 8
  %1038 = add i64 %1037, %1029
  %1039 = mul i64 %1038, 104
  store i64 %1039, i64* %RDX, align 8, !tbaa !2428
  %1040 = lshr i64 %1039, 63
  %1041 = add i64 %1039, %1025
  store i64 %1041, i64* %RCX, align 8, !tbaa !2428
  %1042 = icmp ult i64 %1041, %1025
  %1043 = icmp ult i64 %1041, %1039
  %1044 = or i1 %1042, %1043
  %1045 = zext i1 %1044 to i8
  store i8 %1045, i8* %13, align 1, !tbaa !2432
  %1046 = trunc i64 %1041 to i32
  %1047 = and i32 %1046, 255
  %1048 = tail call i32 @llvm.ctpop.i32(i32 %1047) #12
  %1049 = trunc i32 %1048 to i8
  %1050 = and i8 %1049, 1
  %1051 = xor i8 %1050, 1
  store i8 %1051, i8* %20, align 1, !tbaa !2446
  %1052 = xor i64 %1039, %1025
  %1053 = xor i64 %1052, %1041
  %1054 = lshr i64 %1053, 4
  %1055 = trunc i64 %1054 to i8
  %1056 = and i8 %1055, 1
  store i8 %1056, i8* %26, align 1, !tbaa !2447
  %1057 = icmp eq i64 %1041, 0
  %1058 = zext i1 %1057 to i8
  store i8 %1058, i8* %29, align 1, !tbaa !2448
  %1059 = lshr i64 %1041, 63
  %1060 = trunc i64 %1059 to i8
  store i8 %1060, i8* %32, align 1, !tbaa !2449
  %1061 = lshr i64 %1025, 63
  %1062 = xor i64 %1059, %1061
  %1063 = xor i64 %1059, %1040
  %1064 = add nuw nsw i64 %1062, %1063
  %1065 = icmp eq i64 %1064, 2
  %1066 = zext i1 %1065 to i8
  store i8 %1066, i8* %38, align 1, !tbaa !2450
  %1067 = load i64, i64* %RBP, align 8
  %1068 = add i64 %1067, -280
  %1069 = add i64 %1022, 39
  store i64 %1069, i64* %PC, align 8
  %1070 = inttoptr i64 %1068 to i64*
  %1071 = load i64, i64* %1070, align 8
  store i64 %1071, i64* %RDX, align 8, !tbaa !2428
  %1072 = add i64 %1071, 8
  %1073 = add i64 %1022, 43
  store i64 %1073, i64* %PC, align 8
  %1074 = inttoptr i64 %1072 to i64*
  store i64 %1041, i64* %1074, align 8
  %1075 = load i64, i64* %RBP, align 8
  %1076 = add i64 %1075, -288
  %1077 = load i64, i64* %PC, align 8
  %1078 = add i64 %1077, 7
  store i64 %1078, i64* %PC, align 8
  %1079 = inttoptr i64 %1076 to i64*
  %1080 = load i64, i64* %1079, align 8
  store i64 %1080, i64* %RCX, align 8, !tbaa !2428
  %1081 = add i64 %1075, -16
  %1082 = add i64 %1077, 11
  store i64 %1082, i64* %PC, align 8
  %1083 = inttoptr i64 %1081 to i64*
  %1084 = load i64, i64* %1083, align 8
  store i64 %1084, i64* %RDX, align 8, !tbaa !2428
  %1085 = add i64 %1084, 400
  %1086 = add i64 %1077, 19
  store i64 %1086, i64* %PC, align 8
  %1087 = inttoptr i64 %1085 to i64*
  %1088 = load i64, i64* %1087, align 8
  %1089 = mul i64 %1088, 104
  store i64 %1089, i64* %RDX, align 8, !tbaa !2428
  %1090 = lshr i64 %1089, 63
  %1091 = add i64 %1089, %1080
  store i64 %1091, i64* %RCX, align 8, !tbaa !2428
  %1092 = icmp ult i64 %1091, %1080
  %1093 = icmp ult i64 %1091, %1089
  %1094 = or i1 %1092, %1093
  %1095 = zext i1 %1094 to i8
  store i8 %1095, i8* %13, align 1, !tbaa !2432
  %1096 = trunc i64 %1091 to i32
  %1097 = and i32 %1096, 255
  %1098 = tail call i32 @llvm.ctpop.i32(i32 %1097) #12
  %1099 = trunc i32 %1098 to i8
  %1100 = and i8 %1099, 1
  %1101 = xor i8 %1100, 1
  store i8 %1101, i8* %20, align 1, !tbaa !2446
  %1102 = xor i64 %1089, %1080
  %1103 = xor i64 %1102, %1091
  %1104 = lshr i64 %1103, 4
  %1105 = trunc i64 %1104 to i8
  %1106 = and i8 %1105, 1
  store i8 %1106, i8* %26, align 1, !tbaa !2447
  %1107 = icmp eq i64 %1091, 0
  %1108 = zext i1 %1107 to i8
  store i8 %1108, i8* %29, align 1, !tbaa !2448
  %1109 = lshr i64 %1091, 63
  %1110 = trunc i64 %1109 to i8
  store i8 %1110, i8* %32, align 1, !tbaa !2449
  %1111 = lshr i64 %1080, 63
  %1112 = xor i64 %1109, %1111
  %1113 = xor i64 %1109, %1090
  %1114 = add nuw nsw i64 %1112, %1113
  %1115 = icmp eq i64 %1114, 2
  %1116 = zext i1 %1115 to i8
  store i8 %1116, i8* %38, align 1, !tbaa !2450
  %1117 = add i64 %1075, -280
  %1118 = add i64 %1077, 29
  store i64 %1118, i64* %PC, align 8
  %1119 = inttoptr i64 %1117 to i64*
  %1120 = load i64, i64* %1119, align 8
  store i64 %1120, i64* %RDX, align 8, !tbaa !2428
  %1121 = add i64 %1120, 16
  %1122 = add i64 %1077, 33
  store i64 %1122, i64* %PC, align 8
  %1123 = inttoptr i64 %1121 to i64*
  store i64 %1091, i64* %1123, align 8
  %1124 = load i64, i64* %RBP, align 8
  %1125 = add i64 %1124, -280
  %1126 = load i64, i64* %PC, align 8
  %1127 = add i64 %1126, 7
  store i64 %1127, i64* %PC, align 8
  %1128 = inttoptr i64 %1125 to i64*
  %1129 = load i64, i64* %1128, align 8
  store i64 %1129, i64* %RCX, align 8, !tbaa !2428
  %1130 = add i64 %1126, 14
  store i64 %1130, i64* %PC, align 8
  %1131 = inttoptr i64 %1129 to i64*
  store i64 15, i64* %1131, align 8
  %1132 = load i64, i64* %RBP, align 8
  %1133 = add i64 %1132, -280
  %1134 = load i64, i64* %PC, align 8
  %1135 = add i64 %1134, 7
  store i64 %1135, i64* %PC, align 8
  %1136 = inttoptr i64 %1133 to i64*
  %1137 = load i64, i64* %1136, align 8
  store i64 %1137, i64* %RCX, align 8, !tbaa !2428
  %1138 = add i64 %1137, 56
  %1139 = add i64 %1134, 15
  store i64 %1139, i64* %PC, align 8
  %1140 = inttoptr i64 %1138 to i64*
  store i64 15, i64* %1140, align 8
  %1141 = load i64, i64* %RBP, align 8
  %1142 = add i64 %1141, -280
  %1143 = load i64, i64* %PC, align 8
  %1144 = add i64 %1143, 7
  store i64 %1144, i64* %PC, align 8
  %1145 = inttoptr i64 %1142 to i64*
  %1146 = load i64, i64* %1145, align 8
  store i64 %1146, i64* %RCX, align 8, !tbaa !2428
  %1147 = add i64 %1146, 8
  %1148 = add i64 %1143, 11
  store i64 %1148, i64* %PC, align 8
  %1149 = inttoptr i64 %1147 to i64*
  %1150 = load i64, i64* %1149, align 8
  store i64 %1150, i64* %RCX, align 8, !tbaa !2428
  %1151 = add i64 %1150, 56
  %1152 = add i64 %1143, 15
  store i64 %1152, i64* %PC, align 8
  %1153 = inttoptr i64 %1151 to i64*
  %1154 = load i64, i64* %1153, align 8
  store i64 %1154, i64* %RCX, align 8, !tbaa !2428
  %1155 = add i64 %1143, 22
  store i64 %1155, i64* %PC, align 8
  %1156 = load i64, i64* %1145, align 8
  store i64 %1156, i64* %RDX, align 8, !tbaa !2428
  %1157 = add i64 %1156, 32
  %1158 = add i64 %1143, 26
  store i64 %1158, i64* %PC, align 8
  %1159 = inttoptr i64 %1157 to i64*
  store i64 %1154, i64* %1159, align 8
  %1160 = load i64, i64* %RBP, align 8
  %1161 = add i64 %1160, -280
  %1162 = load i64, i64* %PC, align 8
  %1163 = add i64 %1162, 7
  store i64 %1163, i64* %PC, align 8
  %1164 = inttoptr i64 %1161 to i64*
  %1165 = load i64, i64* %1164, align 8
  store i64 %1165, i64* %RCX, align 8, !tbaa !2428
  %1166 = add i64 %1162, 14
  store i64 %1166, i64* %PC, align 8
  %1167 = load i64, i64* %1164, align 8
  store i64 %1167, i64* %RDX, align 8, !tbaa !2428
  %1168 = add i64 %1167, 8
  %1169 = add i64 %1162, 18
  store i64 %1169, i64* %PC, align 8
  %1170 = inttoptr i64 %1168 to i64*
  %1171 = load i64, i64* %1170, align 8
  store i64 %1171, i64* %RDX, align 8, !tbaa !2428
  %1172 = add i64 %1171, 56
  %1173 = add i64 %1162, 22
  store i64 %1173, i64* %PC, align 8
  %1174 = inttoptr i64 %1172 to i64*
  store i64 %1165, i64* %1174, align 8
  %1175 = load i64, i64* %RBP, align 8
  %1176 = add i64 %1175, -280
  %1177 = load i64, i64* %PC, align 8
  %1178 = add i64 %1177, 7
  store i64 %1178, i64* %PC, align 8
  %1179 = inttoptr i64 %1176 to i64*
  %1180 = load i64, i64* %1179, align 8
  store i64 %1180, i64* %RCX, align 8, !tbaa !2428
  %1181 = add i64 %1180, 16
  %1182 = add i64 %1177, 11
  store i64 %1182, i64* %PC, align 8
  %1183 = inttoptr i64 %1181 to i64*
  %1184 = load i64, i64* %1183, align 8
  store i64 %1184, i64* %RCX, align 8, !tbaa !2428
  %1185 = add i64 %1184, 64
  %1186 = add i64 %1177, 15
  store i64 %1186, i64* %PC, align 8
  %1187 = inttoptr i64 %1185 to i64*
  %1188 = load i64, i64* %1187, align 8
  store i64 %1188, i64* %RCX, align 8, !tbaa !2428
  %1189 = add i64 %1177, 22
  store i64 %1189, i64* %PC, align 8
  %1190 = load i64, i64* %1179, align 8
  store i64 %1190, i64* %RDX, align 8, !tbaa !2428
  %1191 = add i64 %1190, 40
  %1192 = add i64 %1177, 26
  store i64 %1192, i64* %PC, align 8
  %1193 = inttoptr i64 %1191 to i64*
  store i64 %1188, i64* %1193, align 8
  %1194 = load i64, i64* %RBP, align 8
  %1195 = add i64 %1194, -280
  %1196 = load i64, i64* %PC, align 8
  %1197 = add i64 %1196, 7
  store i64 %1197, i64* %PC, align 8
  %1198 = inttoptr i64 %1195 to i64*
  %1199 = load i64, i64* %1198, align 8
  store i64 %1199, i64* %RCX, align 8, !tbaa !2428
  %1200 = add i64 %1196, 14
  store i64 %1200, i64* %PC, align 8
  %1201 = load i64, i64* %1198, align 8
  store i64 %1201, i64* %RDX, align 8, !tbaa !2428
  %1202 = add i64 %1201, 16
  %1203 = add i64 %1196, 18
  store i64 %1203, i64* %PC, align 8
  %1204 = inttoptr i64 %1202 to i64*
  %1205 = load i64, i64* %1204, align 8
  store i64 %1205, i64* %RDX, align 8, !tbaa !2428
  %1206 = add i64 %1205, 64
  %1207 = add i64 %1196, 22
  store i64 %1207, i64* %PC, align 8
  %1208 = inttoptr i64 %1206 to i64*
  store i64 %1199, i64* %1208, align 8
  %1209 = load i64, i64* %RBP, align 8
  %1210 = add i64 %1209, -280
  %1211 = load i64, i64* %PC, align 8
  %1212 = add i64 %1211, 7
  store i64 %1212, i64* %PC, align 8
  %1213 = inttoptr i64 %1210 to i64*
  %1214 = load i64, i64* %1213, align 8
  %1215 = add i64 %1214, 64
  store i64 %1215, i64* %RCX, align 8, !tbaa !2428
  %1216 = icmp ugt i64 %1214, -65
  %1217 = zext i1 %1216 to i8
  store i8 %1217, i8* %13, align 1, !tbaa !2432
  %1218 = trunc i64 %1215 to i32
  %1219 = and i32 %1218, 255
  %1220 = tail call i32 @llvm.ctpop.i32(i32 %1219) #12
  %1221 = trunc i32 %1220 to i8
  %1222 = and i8 %1221, 1
  %1223 = xor i8 %1222, 1
  store i8 %1223, i8* %20, align 1, !tbaa !2446
  %1224 = xor i64 %1215, %1214
  %1225 = lshr i64 %1224, 4
  %1226 = trunc i64 %1225 to i8
  %1227 = and i8 %1226, 1
  store i8 %1227, i8* %26, align 1, !tbaa !2447
  %1228 = icmp eq i64 %1215, 0
  %1229 = zext i1 %1228 to i8
  store i8 %1229, i8* %29, align 1, !tbaa !2448
  %1230 = lshr i64 %1215, 63
  %1231 = trunc i64 %1230 to i8
  store i8 %1231, i8* %32, align 1, !tbaa !2449
  %1232 = lshr i64 %1214, 63
  %1233 = xor i64 %1230, %1232
  %1234 = add nuw nsw i64 %1233, %1230
  %1235 = icmp eq i64 %1234, 2
  %1236 = zext i1 %1235 to i8
  store i8 %1236, i8* %38, align 1, !tbaa !2450
  %1237 = add i64 %1211, 18
  store i64 %1237, i64* %PC, align 8
  store i64 %1215, i64* %1213, align 8
  %1238 = load i64, i64* %RBP, align 8
  %1239 = add i64 %1238, -288
  %1240 = load i64, i64* %PC, align 8
  %1241 = add i64 %1240, 7
  store i64 %1241, i64* %PC, align 8
  %1242 = inttoptr i64 %1239 to i64*
  %1243 = load i64, i64* %1242, align 8
  store i64 %1243, i64* %RCX, align 8, !tbaa !2428
  %1244 = add i64 %1238, -272
  %1245 = add i64 %1240, 15
  store i64 %1245, i64* %PC, align 8
  %1246 = inttoptr i64 %1244 to i64*
  %1247 = load i64, i64* %1246, align 8
  %1248 = mul i64 %1247, 104
  store i64 %1248, i64* %RDX, align 8, !tbaa !2428
  %1249 = lshr i64 %1248, 63
  %1250 = add i64 %1248, %1243
  store i64 %1250, i64* %RCX, align 8, !tbaa !2428
  %1251 = icmp ult i64 %1250, %1243
  %1252 = icmp ult i64 %1250, %1248
  %1253 = or i1 %1251, %1252
  %1254 = zext i1 %1253 to i8
  store i8 %1254, i8* %13, align 1, !tbaa !2432
  %1255 = trunc i64 %1250 to i32
  %1256 = and i32 %1255, 255
  %1257 = tail call i32 @llvm.ctpop.i32(i32 %1256) #12
  %1258 = trunc i32 %1257 to i8
  %1259 = and i8 %1258, 1
  %1260 = xor i8 %1259, 1
  store i8 %1260, i8* %20, align 1, !tbaa !2446
  %1261 = xor i64 %1248, %1243
  %1262 = xor i64 %1261, %1250
  %1263 = lshr i64 %1262, 4
  %1264 = trunc i64 %1263 to i8
  %1265 = and i8 %1264, 1
  store i8 %1265, i8* %26, align 1, !tbaa !2447
  %1266 = icmp eq i64 %1250, 0
  %1267 = zext i1 %1266 to i8
  store i8 %1267, i8* %29, align 1, !tbaa !2448
  %1268 = lshr i64 %1250, 63
  %1269 = trunc i64 %1268 to i8
  store i8 %1269, i8* %32, align 1, !tbaa !2449
  %1270 = lshr i64 %1243, 63
  %1271 = xor i64 %1268, %1270
  %1272 = xor i64 %1268, %1249
  %1273 = add nuw nsw i64 %1271, %1272
  %1274 = icmp eq i64 %1273, 2
  %1275 = zext i1 %1274 to i8
  store i8 %1275, i8* %38, align 1, !tbaa !2450
  %1276 = add i64 %1238, -280
  %1277 = add i64 %1240, 25
  store i64 %1277, i64* %PC, align 8
  %1278 = inttoptr i64 %1276 to i64*
  %1279 = load i64, i64* %1278, align 8
  store i64 %1279, i64* %RDX, align 8, !tbaa !2428
  %1280 = add i64 %1279, 8
  %1281 = add i64 %1240, 29
  store i64 %1281, i64* %PC, align 8
  %1282 = inttoptr i64 %1280 to i64*
  store i64 %1250, i64* %1282, align 8
  %1283 = load i64, i64* %RBP, align 8
  %1284 = add i64 %1283, -288
  %1285 = load i64, i64* %PC, align 8
  %1286 = add i64 %1285, 7
  store i64 %1286, i64* %PC, align 8
  %1287 = inttoptr i64 %1284 to i64*
  %1288 = load i64, i64* %1287, align 8
  store i64 %1288, i64* %RCX, align 8, !tbaa !2428
  %1289 = add i64 %1283, -272
  %1290 = add i64 %1285, 14
  store i64 %1290, i64* %PC, align 8
  %1291 = inttoptr i64 %1289 to i64*
  %1292 = load i64, i64* %1291, align 8
  store i64 %1292, i64* %RDX, align 8, !tbaa !2428
  %1293 = add i64 %1283, -16
  %1294 = add i64 %1285, 18
  store i64 %1294, i64* %PC, align 8
  %1295 = inttoptr i64 %1293 to i64*
  %1296 = load i64, i64* %1295, align 8
  store i64 %1296, i64* %RSI, align 8, !tbaa !2428
  %1297 = add i64 %1296, 408
  %1298 = add i64 %1285, 25
  store i64 %1298, i64* %PC, align 8
  %1299 = inttoptr i64 %1297 to i64*
  %1300 = load i64, i64* %1299, align 8
  %1301 = add i64 %1300, %1292
  %1302 = mul i64 %1301, 104
  store i64 %1302, i64* %RDX, align 8, !tbaa !2428
  %1303 = lshr i64 %1302, 63
  %1304 = add i64 %1302, %1288
  store i64 %1304, i64* %RCX, align 8, !tbaa !2428
  %1305 = icmp ult i64 %1304, %1288
  %1306 = icmp ult i64 %1304, %1302
  %1307 = or i1 %1305, %1306
  %1308 = zext i1 %1307 to i8
  store i8 %1308, i8* %13, align 1, !tbaa !2432
  %1309 = trunc i64 %1304 to i32
  %1310 = and i32 %1309, 255
  %1311 = tail call i32 @llvm.ctpop.i32(i32 %1310) #12
  %1312 = trunc i32 %1311 to i8
  %1313 = and i8 %1312, 1
  %1314 = xor i8 %1313, 1
  store i8 %1314, i8* %20, align 1, !tbaa !2446
  %1315 = xor i64 %1302, %1288
  %1316 = xor i64 %1315, %1304
  %1317 = lshr i64 %1316, 4
  %1318 = trunc i64 %1317 to i8
  %1319 = and i8 %1318, 1
  store i8 %1319, i8* %26, align 1, !tbaa !2447
  %1320 = icmp eq i64 %1304, 0
  %1321 = zext i1 %1320 to i8
  store i8 %1321, i8* %29, align 1, !tbaa !2448
  %1322 = lshr i64 %1304, 63
  %1323 = trunc i64 %1322 to i8
  store i8 %1323, i8* %32, align 1, !tbaa !2449
  %1324 = lshr i64 %1288, 63
  %1325 = xor i64 %1322, %1324
  %1326 = xor i64 %1322, %1303
  %1327 = add nuw nsw i64 %1325, %1326
  %1328 = icmp eq i64 %1327, 2
  %1329 = zext i1 %1328 to i8
  store i8 %1329, i8* %38, align 1, !tbaa !2450
  %1330 = load i64, i64* %RBP, align 8
  %1331 = add i64 %1330, -280
  %1332 = add i64 %1285, 39
  store i64 %1332, i64* %PC, align 8
  %1333 = inttoptr i64 %1331 to i64*
  %1334 = load i64, i64* %1333, align 8
  store i64 %1334, i64* %RDX, align 8, !tbaa !2428
  %1335 = add i64 %1334, 16
  %1336 = add i64 %1285, 43
  store i64 %1336, i64* %PC, align 8
  %1337 = inttoptr i64 %1335 to i64*
  store i64 %1304, i64* %1337, align 8
  %1338 = load i64, i64* %RBP, align 8
  %1339 = add i64 %1338, -16
  %1340 = load i64, i64* %PC, align 8
  %1341 = add i64 %1340, 4
  store i64 %1341, i64* %PC, align 8
  %1342 = inttoptr i64 %1339 to i64*
  %1343 = load i64, i64* %1342, align 8
  store i64 %1343, i64* %RCX, align 8, !tbaa !2428
  %1344 = add i64 %1343, 528
  %1345 = add i64 %1340, 15
  store i64 %1345, i64* %PC, align 8
  %1346 = inttoptr i64 %1344 to i64*
  %1347 = load i64, i64* %1346, align 8
  %1348 = add i64 %1347, -10000000
  %1349 = icmp ult i64 %1347, 10000000
  %1350 = zext i1 %1349 to i8
  store i8 %1350, i8* %13, align 1, !tbaa !2432
  %1351 = trunc i64 %1348 to i32
  %1352 = and i32 %1351, 255
  %1353 = tail call i32 @llvm.ctpop.i32(i32 %1352) #12
  %1354 = trunc i32 %1353 to i8
  %1355 = and i8 %1354, 1
  %1356 = xor i8 %1355, 1
  store i8 %1356, i8* %20, align 1, !tbaa !2446
  %1357 = xor i64 %1348, %1347
  %1358 = lshr i64 %1357, 4
  %1359 = trunc i64 %1358 to i8
  %1360 = and i8 %1359, 1
  store i8 %1360, i8* %26, align 1, !tbaa !2447
  %1361 = icmp eq i64 %1348, 0
  %1362 = zext i1 %1361 to i8
  store i8 %1362, i8* %29, align 1, !tbaa !2448
  %1363 = lshr i64 %1348, 63
  %1364 = trunc i64 %1363 to i8
  store i8 %1364, i8* %32, align 1, !tbaa !2449
  %1365 = lshr i64 %1347, 63
  %1366 = xor i64 %1363, %1365
  %1367 = add nuw nsw i64 %1366, %1365
  %1368 = icmp eq i64 %1367, 2
  %1369 = zext i1 %1368 to i8
  store i8 %1369, i8* %38, align 1, !tbaa !2450
  %1370 = icmp ne i8 %1364, 0
  %1371 = xor i1 %1370, %1368
  %1372 = or i1 %1361, %1371
  %.v99 = select i1 %1372, i64 44, i64 21
  %1373 = add i64 %1340, %.v99
  store i64 %1373, i64* %PC, align 8, !tbaa !2428
  br i1 %1372, label %block_403c47, label %block_403c30

block_403fc7:                                     ; preds = %block_403fb4, %block_403f9d
  %1374 = phi i64 [ %1612, %block_403fb4 ], [ %1519, %block_403f9d ]
  %1375 = phi i64 [ 10000000, %block_403fb4 ], [ %1521, %block_403f9d ]
  %.sink14 = phi i64 [ 5, %block_403fb4 ], [ 24, %block_403f9d ]
  %1376 = add i64 %86, -352
  %1377 = add i64 %1374, 7
  store i64 %1377, i64* %PC, align 8
  %1378 = inttoptr i64 %1376 to i64*
  store i64 %1375, i64* %1378, align 8
  %1379 = load i64, i64* %PC, align 8
  %1380 = add i64 %1379, %.sink14
  %1381 = load i64, i64* %RBP, align 8
  %1382 = add i64 %1381, -352
  %1383 = add i64 %1380, 7
  store i64 %1383, i64* %PC, align 8
  %1384 = inttoptr i64 %1382 to i64*
  %1385 = load i64, i64* %1384, align 8
  %1386 = sext i64 %1385 to i128
  %1387 = and i128 %1386, -18446744073709551616
  %1388 = zext i64 %1385 to i128
  %1389 = or i128 %1387, %1388
  %1390 = mul nsw i128 %1389, -2
  %1391 = trunc i128 %1390 to i64
  store i64 %1391, i64* %RAX, align 8, !tbaa !2428
  %1392 = sext i64 %1391 to i128
  %1393 = icmp ne i128 %1392, %1390
  %1394 = zext i1 %1393 to i8
  store i8 %1394, i8* %13, align 1, !tbaa !2432
  %1395 = trunc i128 %1390 to i32
  %1396 = and i32 %1395, 254
  %1397 = tail call i32 @llvm.ctpop.i32(i32 %1396) #12
  %1398 = trunc i32 %1397 to i8
  %1399 = and i8 %1398, 1
  %1400 = xor i8 %1399, 1
  store i8 %1400, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  %1401 = lshr i64 %1391, 63
  %1402 = trunc i64 %1401 to i8
  store i8 %1402, i8* %32, align 1, !tbaa !2449
  store i8 %1394, i8* %38, align 1, !tbaa !2450
  %1403 = add i64 %1381, -16
  %1404 = add i64 %1380, 15
  store i64 %1404, i64* %PC, align 8
  %1405 = inttoptr i64 %1403 to i64*
  %1406 = load i64, i64* %1405, align 8
  store i64 %1406, i64* %RCX, align 8, !tbaa !2428
  %1407 = add i64 %1406, 568
  %1408 = add i64 %1380, 22
  store i64 %1408, i64* %PC, align 8
  %1409 = inttoptr i64 %1407 to i64*
  %1410 = load i64, i64* %1409, align 8
  store i64 %1410, i64* %RCX, align 8, !tbaa !2428
  %1411 = add i64 %1381, -272
  %1412 = add i64 %1380, 30
  store i64 %1412, i64* %PC, align 8
  %1413 = inttoptr i64 %1411 to i64*
  %1414 = load i64, i64* %1413, align 8
  %1415 = mul i64 %1414, 3
  %1416 = add i64 %1415, -1
  %1417 = shl i64 %1416, 6
  store i64 %1417, i64* %RDX, align 8, !tbaa !2428
  %1418 = add i64 %1417, %1410
  store i64 %1418, i64* %RCX, align 8, !tbaa !2428
  %1419 = icmp ult i64 %1418, %1410
  %1420 = icmp ult i64 %1418, %1417
  %1421 = or i1 %1419, %1420
  %1422 = zext i1 %1421 to i8
  store i8 %1422, i8* %13, align 1, !tbaa !2432
  %1423 = trunc i64 %1418 to i32
  %1424 = and i32 %1423, 255
  %1425 = tail call i32 @llvm.ctpop.i32(i32 %1424) #12
  %1426 = trunc i32 %1425 to i8
  %1427 = and i8 %1426, 1
  %1428 = xor i8 %1427, 1
  store i8 %1428, i8* %20, align 1, !tbaa !2446
  %1429 = xor i64 %1410, %1418
  %1430 = lshr i64 %1429, 4
  %1431 = trunc i64 %1430 to i8
  %1432 = and i8 %1431, 1
  store i8 %1432, i8* %26, align 1, !tbaa !2447
  %1433 = icmp eq i64 %1418, 0
  %1434 = zext i1 %1433 to i8
  store i8 %1434, i8* %29, align 1, !tbaa !2448
  %1435 = lshr i64 %1418, 63
  %1436 = trunc i64 %1435 to i8
  store i8 %1436, i8* %32, align 1, !tbaa !2449
  %1437 = lshr i64 %1410, 63
  %1438 = lshr i64 %1416, 57
  %1439 = and i64 %1438, 1
  %1440 = xor i64 %1435, %1437
  %1441 = xor i64 %1435, %1439
  %1442 = add nuw nsw i64 %1440, %1441
  %1443 = icmp eq i64 %1442, 2
  %1444 = zext i1 %1443 to i8
  store i8 %1444, i8* %38, align 1, !tbaa !2450
  %1445 = inttoptr i64 %1418 to i64*
  %1446 = load i64, i64* %RAX, align 8
  %1447 = add i64 %1380, 44
  store i64 %1447, i64* %PC, align 8
  store i64 %1446, i64* %1445, align 8
  %1448 = load i64, i64* %RBP, align 8
  %1449 = add i64 %1448, -16
  %1450 = load i64, i64* %PC, align 8
  %1451 = add i64 %1450, 4
  store i64 %1451, i64* %PC, align 8
  %1452 = inttoptr i64 %1449 to i64*
  %1453 = load i64, i64* %1452, align 8
  store i64 %1453, i64* %RAX, align 8, !tbaa !2428
  %1454 = add i64 %1453, 528
  %1455 = add i64 %1450, 15
  store i64 %1455, i64* %PC, align 8
  %1456 = inttoptr i64 %1454 to i64*
  %1457 = load i64, i64* %1456, align 8
  %1458 = add i64 %1457, -10000000
  %1459 = icmp ult i64 %1457, 10000000
  %1460 = zext i1 %1459 to i8
  store i8 %1460, i8* %13, align 1, !tbaa !2432
  %1461 = trunc i64 %1458 to i32
  %1462 = and i32 %1461, 255
  %1463 = tail call i32 @llvm.ctpop.i32(i32 %1462) #12
  %1464 = trunc i32 %1463 to i8
  %1465 = and i8 %1464, 1
  %1466 = xor i8 %1465, 1
  store i8 %1466, i8* %20, align 1, !tbaa !2446
  %1467 = xor i64 %1458, %1457
  %1468 = lshr i64 %1467, 4
  %1469 = trunc i64 %1468 to i8
  %1470 = and i8 %1469, 1
  store i8 %1470, i8* %26, align 1, !tbaa !2447
  %1471 = icmp eq i64 %1458, 0
  %1472 = zext i1 %1471 to i8
  store i8 %1472, i8* %29, align 1, !tbaa !2448
  %1473 = lshr i64 %1458, 63
  %1474 = trunc i64 %1473 to i8
  store i8 %1474, i8* %32, align 1, !tbaa !2449
  %1475 = lshr i64 %1457, 63
  %1476 = xor i64 %1473, %1475
  %1477 = add nuw nsw i64 %1476, %1475
  %1478 = icmp eq i64 %1477, 2
  %1479 = zext i1 %1478 to i8
  store i8 %1479, i8* %38, align 1, !tbaa !2450
  %1480 = icmp ne i8 %1474, 0
  %1481 = xor i1 %1480, %1478
  %1482 = or i1 %1471, %1481
  %.v95 = select i1 %1482, i64 44, i64 21
  %1483 = add i64 %1450, %.v95
  store i64 %1483, i64* %PC, align 8, !tbaa !2428
  br i1 %1482, label %block_40401f, label %block_404008

block_404008:                                     ; preds = %block_403fc7
  %1484 = add i64 %1483, 4
  store i64 %1484, i64* %PC, align 8
  %1485 = load i64, i64* %1452, align 8
  store i64 %1485, i64* %RAX, align 8, !tbaa !2428
  %1486 = add i64 %1485, 528
  %1487 = add i64 %1483, 11
  store i64 %1487, i64* %PC, align 8
  %1488 = inttoptr i64 %1486 to i64*
  %1489 = load i64, i64* %1488, align 8
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  br label %block_404032

block_4036da:                                     ; preds = %block_40365d
  %1490 = add i64 %367, 424
  %1491 = add i64 %365, 11
  store i64 %1491, i64* %PC, align 8
  %1492 = inttoptr i64 %1490 to i64*
  %1493 = load i64, i64* %1492, align 8
  store i64 %1493, i64* %RAX, align 8, !tbaa !2428
  %1494 = add i64 %365, 15
  store i64 %1494, i64* %PC, align 8
  %1495 = load i64, i64* %334, align 8
  store i64 %1495, i64* %RCX, align 8, !tbaa !2428
  %1496 = add i64 %1495, 416
  %1497 = add i64 %365, 22
  store i64 %1497, i64* %PC, align 8
  %1498 = inttoptr i64 %1496 to i64*
  store i64 %1493, i64* %1498, align 8
  %1499 = load i64, i64* %RBP, align 8
  %1500 = add i64 %1499, -16
  %1501 = load i64, i64* %PC, align 8
  %1502 = add i64 %1501, 4
  store i64 %1502, i64* %PC, align 8
  %1503 = inttoptr i64 %1500 to i64*
  %1504 = load i64, i64* %1503, align 8
  store i64 %1504, i64* %RAX, align 8, !tbaa !2428
  %1505 = add i64 %1504, 456
  %1506 = add i64 %1501, 15
  store i64 %1506, i64* %PC, align 8
  %1507 = inttoptr i64 %1505 to i64*
  store i64 3000000, i64* %1507, align 8
  %1508 = load i64, i64* %PC, align 8
  %1509 = add i64 %1508, 35
  store i64 %1509, i64* %PC, align 8, !tbaa !2428
  br label %block_403722

block_40393d:                                     ; preds = %block_4038de, %block_403929
  %1510 = phi i64 [ %1912, %block_403929 ], [ %1980, %block_4038de ]
  %1511 = add i64 %1981, -8
  %1512 = add i64 %1510, 8
  store i64 %1512, i64* %PC, align 8
  %1513 = inttoptr i64 %1511 to i64*
  store i64 -1, i64* %1513, align 8
  %1514 = load i64, i64* %PC, align 8
  %1515 = add i64 %1514, 1849
  store i64 %1515, i64* %PC, align 8, !tbaa !2428
  br label %block_40407e

block_403f9d:                                     ; preds = %block_403f88
  %1516 = add i64 %469, 4
  store i64 %1516, i64* %PC, align 8
  %1517 = load i64, i64* %93, align 8
  store i64 %1517, i64* %RAX, align 8, !tbaa !2428
  %1518 = add i64 %1517, 528
  %1519 = add i64 %469, 11
  store i64 %1519, i64* %PC, align 8
  %1520 = inttoptr i64 %1518 to i64*
  %1521 = load i64, i64* %1520, align 8
  store i64 %1521, i64* %RAX, align 8, !tbaa !2428
  br label %block_403fc7

block_403d3a:                                     ; preds = %block_403d2f, %block_403db1
  %1522 = phi i64 [ %.pre75, %block_403d2f ], [ %1864, %block_403db1 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.10, %block_403d2f ], [ %412, %block_403db1 ]
  %1523 = load i64, i64* %RBP, align 8
  %1524 = add i64 %1523, -272
  %1525 = add i64 %1522, 7
  store i64 %1525, i64* %PC, align 8
  %1526 = inttoptr i64 %1524 to i64*
  %1527 = load i64, i64* %1526, align 8
  store i64 %1527, i64* %RAX, align 8, !tbaa !2428
  %1528 = add i64 %1523, -16
  %1529 = add i64 %1522, 11
  store i64 %1529, i64* %PC, align 8
  %1530 = inttoptr i64 %1528 to i64*
  %1531 = load i64, i64* %1530, align 8
  store i64 %1531, i64* %RCX, align 8, !tbaa !2428
  %1532 = add i64 %1531, 432
  %1533 = add i64 %1522, 18
  store i64 %1533, i64* %PC, align 8
  %1534 = inttoptr i64 %1532 to i64*
  %1535 = load i64, i64* %1534, align 8
  %1536 = sub i64 %1527, %1535
  %1537 = icmp ult i64 %1527, %1535
  %1538 = zext i1 %1537 to i8
  store i8 %1538, i8* %13, align 1, !tbaa !2432
  %1539 = trunc i64 %1536 to i32
  %1540 = and i32 %1539, 255
  %1541 = tail call i32 @llvm.ctpop.i32(i32 %1540) #12
  %1542 = trunc i32 %1541 to i8
  %1543 = and i8 %1542, 1
  %1544 = xor i8 %1543, 1
  store i8 %1544, i8* %20, align 1, !tbaa !2446
  %1545 = xor i64 %1535, %1527
  %1546 = xor i64 %1545, %1536
  %1547 = lshr i64 %1546, 4
  %1548 = trunc i64 %1547 to i8
  %1549 = and i8 %1548, 1
  store i8 %1549, i8* %26, align 1, !tbaa !2447
  %1550 = icmp eq i64 %1536, 0
  %1551 = zext i1 %1550 to i8
  store i8 %1551, i8* %29, align 1, !tbaa !2448
  %1552 = lshr i64 %1536, 63
  %1553 = trunc i64 %1552 to i8
  store i8 %1553, i8* %32, align 1, !tbaa !2449
  %1554 = lshr i64 %1527, 63
  %1555 = lshr i64 %1535, 63
  %1556 = xor i64 %1555, %1554
  %1557 = xor i64 %1552, %1554
  %1558 = add nuw nsw i64 %1557, %1556
  %1559 = icmp eq i64 %1558, 2
  %1560 = zext i1 %1559 to i8
  store i8 %1560, i8* %38, align 1, !tbaa !2450
  %1561 = icmp ne i8 %1553, 0
  %1562 = xor i1 %1561, %1559
  %.v91 = select i1 %1562, i64 24, i64 363
  %1563 = add i64 %1522, %.v91
  store i64 %1563, i64* %PC, align 8, !tbaa !2428
  br i1 %1562, label %block_403d52, label %block_403ea5

block_40407e:                                     ; preds = %block_4037ea, %block_403da4, %block_403650, %block_403d22, %block_40393d, %block_404076, %block_4035f8
  %1564 = phi i64 [ %2474, %block_4037ea ], [ %.pre80, %block_404076 ], [ %2018, %block_403da4 ], [ %1611, %block_403d22 ], [ %1515, %block_40393d ], [ %1869, %block_403650 ], [ %84, %block_4035f8 ]
  %MEMORY.4 = phi %struct.Memory* [ %2461, %block_4037ea ], [ %1993, %block_404076 ], [ %412, %block_403da4 ], [ %MEMORY.10, %block_403d22 ], [ %1956, %block_40393d ], [ %2544, %block_403650 ], [ %59, %block_4035f8 ]
  %1565 = load i64, i64* %RBP, align 8
  %1566 = add i64 %1565, -8
  %1567 = add i64 %1564, 4
  store i64 %1567, i64* %PC, align 8
  %1568 = inttoptr i64 %1566 to i64*
  %1569 = load i64, i64* %1568, align 8
  store i64 %1569, i64* %RAX, align 8, !tbaa !2428
  %1570 = load i64, i64* %RSP, align 8
  %1571 = add i64 %1570, 368
  store i64 %1571, i64* %RSP, align 8, !tbaa !2428
  %1572 = icmp ugt i64 %1570, -369
  %1573 = zext i1 %1572 to i8
  store i8 %1573, i8* %13, align 1, !tbaa !2432
  %1574 = trunc i64 %1571 to i32
  %1575 = and i32 %1574, 255
  %1576 = tail call i32 @llvm.ctpop.i32(i32 %1575) #12
  %1577 = trunc i32 %1576 to i8
  %1578 = and i8 %1577, 1
  %1579 = xor i8 %1578, 1
  store i8 %1579, i8* %20, align 1, !tbaa !2446
  %1580 = xor i64 %1570, 16
  %1581 = xor i64 %1580, %1571
  %1582 = lshr i64 %1581, 4
  %1583 = trunc i64 %1582 to i8
  %1584 = and i8 %1583, 1
  store i8 %1584, i8* %26, align 1, !tbaa !2447
  %1585 = icmp eq i64 %1571, 0
  %1586 = zext i1 %1585 to i8
  store i8 %1586, i8* %29, align 1, !tbaa !2448
  %1587 = lshr i64 %1571, 63
  %1588 = trunc i64 %1587 to i8
  store i8 %1588, i8* %32, align 1, !tbaa !2449
  %1589 = lshr i64 %1570, 63
  %1590 = xor i64 %1587, %1589
  %1591 = add nuw nsw i64 %1590, %1587
  %1592 = icmp eq i64 %1591, 2
  %1593 = zext i1 %1592 to i8
  store i8 %1593, i8* %38, align 1, !tbaa !2450
  %1594 = add i64 %1564, 12
  store i64 %1594, i64* %PC, align 8
  %1595 = add i64 %1570, 376
  %1596 = inttoptr i64 %1571 to i64*
  %1597 = load i64, i64* %1596, align 8
  store i64 %1597, i64* %RBP, align 8, !tbaa !2428
  store i64 %1595, i64* %RSP, align 8, !tbaa !2428
  %1598 = add i64 %1564, 13
  store i64 %1598, i64* %PC, align 8
  %1599 = inttoptr i64 %1595 to i64*
  %1600 = load i64, i64* %1599, align 8
  store i64 %1600, i64* %PC, align 8, !tbaa !2428
  %1601 = add i64 %1570, 384
  store i64 %1601, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_403f35:                                     ; preds = %block_403ef0
  store i64 %2232, i64* %RAX, align 8, !tbaa !2428
  %1602 = add i64 %2226, 15
  store i64 %1602, i64* %PC, align 8
  %1603 = load i64, i64* %2195, align 8
  store i64 %1603, i64* %RCX, align 8, !tbaa !2428
  %1604 = add i64 %1603, 432
  %1605 = add i64 %2226, 22
  store i64 %1605, i64* %PC, align 8
  %1606 = inttoptr i64 %1604 to i64*
  store i64 %2232, i64* %1606, align 8
  %.pre77 = load i64, i64* %RBP, align 8
  %.pre78 = load i64, i64* %PC, align 8
  br label %block_403f4b

block_403d22:                                     ; preds = %block_403d03
  %1607 = add i64 %2476, -8
  %1608 = add i64 %2952, 8
  store i64 %1608, i64* %PC, align 8
  %1609 = inttoptr i64 %1607 to i64*
  store i64 -1, i64* %1609, align 8
  %1610 = load i64, i64* %PC, align 8
  %1611 = add i64 %1610, 852
  store i64 %1611, i64* %PC, align 8, !tbaa !2428
  br label %block_40407e

block_403fb4:                                     ; preds = %block_403f88
  store i64 10000000, i64* %RAX, align 8, !tbaa !2428
  %1612 = add i64 %469, 7
  store i64 %1612, i64* %PC, align 8
  store i64 10000000, i64* %RCX, align 8, !tbaa !2428
  br label %block_403fc7

block_403db1:                                     ; preds = %block_403d52
  %1613 = add i64 %437, -288
  %1614 = add i64 %436, 7
  store i64 %1614, i64* %PC, align 8
  %1615 = inttoptr i64 %1613 to i64*
  %1616 = load i64, i64* %1615, align 8
  store i64 %1616, i64* %RAX, align 8, !tbaa !2428
  %1617 = add i64 %437, -248
  %1618 = add i64 %436, 14
  store i64 %1618, i64* %PC, align 8
  %1619 = inttoptr i64 %1617 to i64*
  %1620 = load i64, i64* %1619, align 8
  store i64 %1620, i64* %RCX, align 8, !tbaa !2428
  %1621 = add i64 %437, -16
  %1622 = add i64 %436, 18
  store i64 %1622, i64* %PC, align 8
  %1623 = inttoptr i64 %1621 to i64*
  %1624 = load i64, i64* %1623, align 8
  store i64 %1624, i64* %RDX, align 8, !tbaa !2428
  %1625 = add i64 %1624, 408
  %1626 = add i64 %436, 25
  store i64 %1626, i64* %PC, align 8
  %1627 = inttoptr i64 %1625 to i64*
  %1628 = load i64, i64* %1627, align 8
  %1629 = add i64 %1628, %1620
  %1630 = mul i64 %1629, 104
  store i64 %1630, i64* %RCX, align 8, !tbaa !2428
  %1631 = lshr i64 %1630, 63
  %1632 = add i64 %1630, %1616
  store i64 %1632, i64* %RAX, align 8, !tbaa !2428
  %1633 = icmp ult i64 %1632, %1616
  %1634 = icmp ult i64 %1632, %1630
  %1635 = or i1 %1633, %1634
  %1636 = zext i1 %1635 to i8
  store i8 %1636, i8* %13, align 1, !tbaa !2432
  %1637 = trunc i64 %1632 to i32
  %1638 = and i32 %1637, 255
  %1639 = tail call i32 @llvm.ctpop.i32(i32 %1638) #12
  %1640 = trunc i32 %1639 to i8
  %1641 = and i8 %1640, 1
  %1642 = xor i8 %1641, 1
  store i8 %1642, i8* %20, align 1, !tbaa !2446
  %1643 = xor i64 %1630, %1616
  %1644 = xor i64 %1643, %1632
  %1645 = lshr i64 %1644, 4
  %1646 = trunc i64 %1645 to i8
  %1647 = and i8 %1646, 1
  store i8 %1647, i8* %26, align 1, !tbaa !2447
  %1648 = icmp eq i64 %1632, 0
  %1649 = zext i1 %1648 to i8
  store i8 %1649, i8* %29, align 1, !tbaa !2448
  %1650 = lshr i64 %1632, 63
  %1651 = trunc i64 %1650 to i8
  store i8 %1651, i8* %32, align 1, !tbaa !2449
  %1652 = lshr i64 %1616, 63
  %1653 = xor i64 %1650, %1652
  %1654 = xor i64 %1650, %1631
  %1655 = add nuw nsw i64 %1653, %1654
  %1656 = icmp eq i64 %1655, 2
  %1657 = zext i1 %1656 to i8
  store i8 %1657, i8* %38, align 1, !tbaa !2450
  %1658 = load i64, i64* %RBP, align 8
  %1659 = add i64 %1658, -280
  %1660 = add i64 %436, 39
  store i64 %1660, i64* %PC, align 8
  %1661 = inttoptr i64 %1659 to i64*
  %1662 = load i64, i64* %1661, align 8
  store i64 %1662, i64* %RCX, align 8, !tbaa !2428
  %1663 = add i64 %1662, 8
  %1664 = add i64 %436, 43
  store i64 %1664, i64* %PC, align 8
  %1665 = inttoptr i64 %1663 to i64*
  store i64 %1632, i64* %1665, align 8
  %1666 = load i64, i64* %RBP, align 8
  %1667 = add i64 %1666, -288
  %1668 = load i64, i64* %PC, align 8
  %1669 = add i64 %1668, 7
  store i64 %1669, i64* %PC, align 8
  %1670 = inttoptr i64 %1667 to i64*
  %1671 = load i64, i64* %1670, align 8
  store i64 %1671, i64* %RAX, align 8, !tbaa !2428
  %1672 = add i64 %1666, -256
  %1673 = add i64 %1668, 15
  store i64 %1673, i64* %PC, align 8
  %1674 = inttoptr i64 %1672 to i64*
  %1675 = load i64, i64* %1674, align 8
  %1676 = mul i64 %1675, 104
  store i64 %1676, i64* %RCX, align 8, !tbaa !2428
  %1677 = lshr i64 %1676, 63
  %1678 = add i64 %1676, %1671
  store i64 %1678, i64* %RAX, align 8, !tbaa !2428
  %1679 = icmp ult i64 %1678, %1671
  %1680 = icmp ult i64 %1678, %1676
  %1681 = or i1 %1679, %1680
  %1682 = zext i1 %1681 to i8
  store i8 %1682, i8* %13, align 1, !tbaa !2432
  %1683 = trunc i64 %1678 to i32
  %1684 = and i32 %1683, 255
  %1685 = tail call i32 @llvm.ctpop.i32(i32 %1684) #12
  %1686 = trunc i32 %1685 to i8
  %1687 = and i8 %1686, 1
  %1688 = xor i8 %1687, 1
  store i8 %1688, i8* %20, align 1, !tbaa !2446
  %1689 = xor i64 %1676, %1671
  %1690 = xor i64 %1689, %1678
  %1691 = lshr i64 %1690, 4
  %1692 = trunc i64 %1691 to i8
  %1693 = and i8 %1692, 1
  store i8 %1693, i8* %26, align 1, !tbaa !2447
  %1694 = icmp eq i64 %1678, 0
  %1695 = zext i1 %1694 to i8
  store i8 %1695, i8* %29, align 1, !tbaa !2448
  %1696 = lshr i64 %1678, 63
  %1697 = trunc i64 %1696 to i8
  store i8 %1697, i8* %32, align 1, !tbaa !2449
  %1698 = lshr i64 %1671, 63
  %1699 = xor i64 %1696, %1698
  %1700 = xor i64 %1696, %1677
  %1701 = add nuw nsw i64 %1699, %1700
  %1702 = icmp eq i64 %1701, 2
  %1703 = zext i1 %1702 to i8
  store i8 %1703, i8* %38, align 1, !tbaa !2450
  %1704 = add i64 %1666, -280
  %1705 = add i64 %1668, 25
  store i64 %1705, i64* %PC, align 8
  %1706 = inttoptr i64 %1704 to i64*
  %1707 = load i64, i64* %1706, align 8
  store i64 %1707, i64* %RCX, align 8, !tbaa !2428
  %1708 = add i64 %1707, 16
  %1709 = add i64 %1668, 29
  store i64 %1709, i64* %PC, align 8
  %1710 = inttoptr i64 %1708 to i64*
  store i64 %1678, i64* %1710, align 8
  %1711 = load i64, i64* %RBP, align 8
  %1712 = add i64 %1711, -264
  %1713 = load i64, i64* %PC, align 8
  %1714 = add i64 %1713, 7
  store i64 %1714, i64* %PC, align 8
  %1715 = inttoptr i64 %1712 to i64*
  %1716 = load i64, i64* %1715, align 8
  store i64 %1716, i64* %RAX, align 8, !tbaa !2428
  %1717 = add i64 %1711, -280
  %1718 = add i64 %1713, 14
  store i64 %1718, i64* %PC, align 8
  %1719 = inttoptr i64 %1717 to i64*
  %1720 = load i64, i64* %1719, align 8
  store i64 %1720, i64* %RCX, align 8, !tbaa !2428
  %1721 = add i64 %1720, 56
  %1722 = add i64 %1713, 18
  store i64 %1722, i64* %PC, align 8
  %1723 = inttoptr i64 %1721 to i64*
  store i64 %1716, i64* %1723, align 8
  %1724 = load i64, i64* %RBP, align 8
  %1725 = add i64 %1724, -264
  %1726 = load i64, i64* %PC, align 8
  %1727 = add i64 %1726, 7
  store i64 %1727, i64* %PC, align 8
  %1728 = inttoptr i64 %1725 to i64*
  %1729 = load i64, i64* %1728, align 8
  store i64 %1729, i64* %RAX, align 8, !tbaa !2428
  %1730 = add i64 %1724, -280
  %1731 = add i64 %1726, 14
  store i64 %1731, i64* %PC, align 8
  %1732 = inttoptr i64 %1730 to i64*
  %1733 = load i64, i64* %1732, align 8
  store i64 %1733, i64* %RCX, align 8, !tbaa !2428
  %1734 = add i64 %1726, 17
  store i64 %1734, i64* %PC, align 8
  %1735 = inttoptr i64 %1733 to i64*
  store i64 %1729, i64* %1735, align 8
  %1736 = load i64, i64* %RBP, align 8
  %1737 = add i64 %1736, -280
  %1738 = load i64, i64* %PC, align 8
  %1739 = add i64 %1738, 7
  store i64 %1739, i64* %PC, align 8
  %1740 = inttoptr i64 %1737 to i64*
  %1741 = load i64, i64* %1740, align 8
  store i64 %1741, i64* %RAX, align 8, !tbaa !2428
  %1742 = add i64 %1741, 8
  %1743 = add i64 %1738, 11
  store i64 %1743, i64* %PC, align 8
  %1744 = inttoptr i64 %1742 to i64*
  %1745 = load i64, i64* %1744, align 8
  store i64 %1745, i64* %RAX, align 8, !tbaa !2428
  %1746 = add i64 %1745, 56
  %1747 = add i64 %1738, 15
  store i64 %1747, i64* %PC, align 8
  %1748 = inttoptr i64 %1746 to i64*
  %1749 = load i64, i64* %1748, align 8
  store i64 %1749, i64* %RAX, align 8, !tbaa !2428
  %1750 = add i64 %1738, 22
  store i64 %1750, i64* %PC, align 8
  %1751 = load i64, i64* %1740, align 8
  store i64 %1751, i64* %RCX, align 8, !tbaa !2428
  %1752 = add i64 %1751, 32
  %1753 = add i64 %1738, 26
  store i64 %1753, i64* %PC, align 8
  %1754 = inttoptr i64 %1752 to i64*
  store i64 %1749, i64* %1754, align 8
  %1755 = load i64, i64* %RBP, align 8
  %1756 = add i64 %1755, -280
  %1757 = load i64, i64* %PC, align 8
  %1758 = add i64 %1757, 7
  store i64 %1758, i64* %PC, align 8
  %1759 = inttoptr i64 %1756 to i64*
  %1760 = load i64, i64* %1759, align 8
  store i64 %1760, i64* %RAX, align 8, !tbaa !2428
  %1761 = add i64 %1757, 14
  store i64 %1761, i64* %PC, align 8
  %1762 = load i64, i64* %1759, align 8
  store i64 %1762, i64* %RCX, align 8, !tbaa !2428
  %1763 = add i64 %1762, 8
  %1764 = add i64 %1757, 18
  store i64 %1764, i64* %PC, align 8
  %1765 = inttoptr i64 %1763 to i64*
  %1766 = load i64, i64* %1765, align 8
  store i64 %1766, i64* %RCX, align 8, !tbaa !2428
  %1767 = add i64 %1766, 56
  %1768 = add i64 %1757, 22
  store i64 %1768, i64* %PC, align 8
  %1769 = inttoptr i64 %1767 to i64*
  store i64 %1760, i64* %1769, align 8
  %1770 = load i64, i64* %RBP, align 8
  %1771 = add i64 %1770, -280
  %1772 = load i64, i64* %PC, align 8
  %1773 = add i64 %1772, 7
  store i64 %1773, i64* %PC, align 8
  %1774 = inttoptr i64 %1771 to i64*
  %1775 = load i64, i64* %1774, align 8
  store i64 %1775, i64* %RAX, align 8, !tbaa !2428
  %1776 = add i64 %1775, 16
  %1777 = add i64 %1772, 11
  store i64 %1777, i64* %PC, align 8
  %1778 = inttoptr i64 %1776 to i64*
  %1779 = load i64, i64* %1778, align 8
  store i64 %1779, i64* %RAX, align 8, !tbaa !2428
  %1780 = add i64 %1779, 64
  %1781 = add i64 %1772, 15
  store i64 %1781, i64* %PC, align 8
  %1782 = inttoptr i64 %1780 to i64*
  %1783 = load i64, i64* %1782, align 8
  store i64 %1783, i64* %RAX, align 8, !tbaa !2428
  %1784 = add i64 %1772, 22
  store i64 %1784, i64* %PC, align 8
  %1785 = load i64, i64* %1774, align 8
  store i64 %1785, i64* %RCX, align 8, !tbaa !2428
  %1786 = add i64 %1785, 40
  %1787 = add i64 %1772, 26
  store i64 %1787, i64* %PC, align 8
  %1788 = inttoptr i64 %1786 to i64*
  store i64 %1783, i64* %1788, align 8
  %1789 = load i64, i64* %RBP, align 8
  %1790 = add i64 %1789, -280
  %1791 = load i64, i64* %PC, align 8
  %1792 = add i64 %1791, 7
  store i64 %1792, i64* %PC, align 8
  %1793 = inttoptr i64 %1790 to i64*
  %1794 = load i64, i64* %1793, align 8
  store i64 %1794, i64* %RAX, align 8, !tbaa !2428
  %1795 = add i64 %1791, 14
  store i64 %1795, i64* %PC, align 8
  %1796 = load i64, i64* %1793, align 8
  store i64 %1796, i64* %RCX, align 8, !tbaa !2428
  %1797 = add i64 %1796, 16
  %1798 = add i64 %1791, 18
  store i64 %1798, i64* %PC, align 8
  %1799 = inttoptr i64 %1797 to i64*
  %1800 = load i64, i64* %1799, align 8
  store i64 %1800, i64* %RCX, align 8, !tbaa !2428
  %1801 = add i64 %1800, 64
  %1802 = add i64 %1791, 22
  store i64 %1802, i64* %PC, align 8
  %1803 = inttoptr i64 %1801 to i64*
  store i64 %1794, i64* %1803, align 8
  %1804 = load i64, i64* %RBP, align 8
  %1805 = add i64 %1804, -272
  %1806 = load i64, i64* %PC, align 8
  %1807 = add i64 %1806, 7
  store i64 %1807, i64* %PC, align 8
  %1808 = inttoptr i64 %1805 to i64*
  %1809 = load i64, i64* %1808, align 8
  %1810 = add i64 %1809, 1
  store i64 %1810, i64* %RAX, align 8, !tbaa !2428
  %1811 = icmp eq i64 %1809, -1
  %1812 = icmp eq i64 %1810, 0
  %1813 = or i1 %1811, %1812
  %1814 = zext i1 %1813 to i8
  store i8 %1814, i8* %13, align 1, !tbaa !2432
  %1815 = trunc i64 %1810 to i32
  %1816 = and i32 %1815, 255
  %1817 = tail call i32 @llvm.ctpop.i32(i32 %1816) #12
  %1818 = trunc i32 %1817 to i8
  %1819 = and i8 %1818, 1
  %1820 = xor i8 %1819, 1
  store i8 %1820, i8* %20, align 1, !tbaa !2446
  %1821 = xor i64 %1810, %1809
  %1822 = lshr i64 %1821, 4
  %1823 = trunc i64 %1822 to i8
  %1824 = and i8 %1823, 1
  store i8 %1824, i8* %26, align 1, !tbaa !2447
  %1825 = zext i1 %1812 to i8
  store i8 %1825, i8* %29, align 1, !tbaa !2448
  %1826 = lshr i64 %1810, 63
  %1827 = trunc i64 %1826 to i8
  store i8 %1827, i8* %32, align 1, !tbaa !2449
  %1828 = lshr i64 %1809, 63
  %1829 = xor i64 %1826, %1828
  %1830 = add nuw nsw i64 %1829, %1826
  %1831 = icmp eq i64 %1830, 2
  %1832 = zext i1 %1831 to i8
  store i8 %1832, i8* %38, align 1, !tbaa !2450
  %1833 = add i64 %1806, 18
  store i64 %1833, i64* %PC, align 8
  store i64 %1810, i64* %1808, align 8
  %1834 = load i64, i64* %RBP, align 8
  %1835 = add i64 %1834, -280
  %1836 = load i64, i64* %PC, align 8
  %1837 = add i64 %1836, 7
  store i64 %1837, i64* %PC, align 8
  %1838 = inttoptr i64 %1835 to i64*
  %1839 = load i64, i64* %1838, align 8
  %1840 = add i64 %1839, 64
  store i64 %1840, i64* %RAX, align 8, !tbaa !2428
  %1841 = icmp ugt i64 %1839, -65
  %1842 = zext i1 %1841 to i8
  store i8 %1842, i8* %13, align 1, !tbaa !2432
  %1843 = trunc i64 %1840 to i32
  %1844 = and i32 %1843, 255
  %1845 = tail call i32 @llvm.ctpop.i32(i32 %1844) #12
  %1846 = trunc i32 %1845 to i8
  %1847 = and i8 %1846, 1
  %1848 = xor i8 %1847, 1
  store i8 %1848, i8* %20, align 1, !tbaa !2446
  %1849 = xor i64 %1840, %1839
  %1850 = lshr i64 %1849, 4
  %1851 = trunc i64 %1850 to i8
  %1852 = and i8 %1851, 1
  store i8 %1852, i8* %26, align 1, !tbaa !2447
  %1853 = icmp eq i64 %1840, 0
  %1854 = zext i1 %1853 to i8
  store i8 %1854, i8* %29, align 1, !tbaa !2448
  %1855 = lshr i64 %1840, 63
  %1856 = trunc i64 %1855 to i8
  store i8 %1856, i8* %32, align 1, !tbaa !2449
  %1857 = lshr i64 %1839, 63
  %1858 = xor i64 %1855, %1857
  %1859 = add nuw nsw i64 %1858, %1855
  %1860 = icmp eq i64 %1859, 2
  %1861 = zext i1 %1860 to i8
  store i8 %1861, i8* %38, align 1, !tbaa !2450
  %1862 = add i64 %1836, 18
  store i64 %1862, i64* %PC, align 8
  store i64 %1840, i64* %1838, align 8
  %1863 = load i64, i64* %PC, align 8
  %1864 = add i64 %1863, -358
  store i64 %1864, i64* %PC, align 8, !tbaa !2428
  br label %block_403d3a

block_403650:                                     ; preds = %block_403605
  %1865 = add i64 %2569, -8
  %1866 = add i64 %2568, 8
  store i64 %1866, i64* %PC, align 8
  %1867 = inttoptr i64 %1865 to i64*
  store i64 -1, i64* %1867, align 8
  %1868 = load i64, i64* %PC, align 8
  %1869 = add i64 %1868, 2598
  store i64 %1869, i64* %PC, align 8, !tbaa !2428
  br label %block_40407e

block_403c30:                                     ; preds = %block_40394a
  %1870 = add i64 %1373, 4
  store i64 %1870, i64* %PC, align 8
  %1871 = load i64, i64* %1342, align 8
  store i64 %1871, i64* %RAX, align 8, !tbaa !2428
  %1872 = add i64 %1871, 528
  %1873 = add i64 %1373, 11
  store i64 %1873, i64* %PC, align 8
  %1874 = inttoptr i64 %1872 to i64*
  %1875 = load i64, i64* %1874, align 8
  store i64 %1875, i64* %RAX, align 8, !tbaa !2428
  br label %block_403c5a

block_403929:                                     ; preds = %block_4038de
  %1876 = add i64 %1981, -248
  %1877 = add i64 %1980, 7
  store i64 %1877, i64* %PC, align 8
  %1878 = inttoptr i64 %1876 to i64*
  %1879 = load i64, i64* %1878, align 8
  store i64 %1879, i64* %RAX, align 8, !tbaa !2428
  %1880 = add i64 %1981, -256
  %1881 = add i64 %1980, 14
  store i64 %1881, i64* %PC, align 8
  %1882 = inttoptr i64 %1880 to i64*
  %1883 = load i64, i64* %1882, align 8
  %1884 = sub i64 %1879, %1883
  %1885 = icmp ult i64 %1879, %1883
  %1886 = zext i1 %1885 to i8
  store i8 %1886, i8* %13, align 1, !tbaa !2432
  %1887 = trunc i64 %1884 to i32
  %1888 = and i32 %1887, 255
  %1889 = tail call i32 @llvm.ctpop.i32(i32 %1888) #12
  %1890 = trunc i32 %1889 to i8
  %1891 = and i8 %1890, 1
  %1892 = xor i8 %1891, 1
  store i8 %1892, i8* %20, align 1, !tbaa !2446
  %1893 = xor i64 %1883, %1879
  %1894 = xor i64 %1893, %1884
  %1895 = lshr i64 %1894, 4
  %1896 = trunc i64 %1895 to i8
  %1897 = and i8 %1896, 1
  store i8 %1897, i8* %26, align 1, !tbaa !2447
  %1898 = icmp eq i64 %1884, 0
  %1899 = zext i1 %1898 to i8
  store i8 %1899, i8* %29, align 1, !tbaa !2448
  %1900 = lshr i64 %1884, 63
  %1901 = trunc i64 %1900 to i8
  store i8 %1901, i8* %32, align 1, !tbaa !2449
  %1902 = lshr i64 %1879, 63
  %1903 = lshr i64 %1883, 63
  %1904 = xor i64 %1903, %1902
  %1905 = xor i64 %1900, %1902
  %1906 = add nuw nsw i64 %1905, %1904
  %1907 = icmp eq i64 %1906, 2
  %1908 = zext i1 %1907 to i8
  store i8 %1908, i8* %38, align 1, !tbaa !2450
  %1909 = icmp ne i8 %1901, 0
  %1910 = xor i1 %1909, %1907
  %1911 = or i1 %1898, %1910
  %.v98 = select i1 %1911, i64 33, i64 20
  %1912 = add i64 %1980, %.v98
  store i64 %1912, i64* %PC, align 8, !tbaa !2428
  br i1 %1911, label %block_40394a, label %block_40393d

block_4037c6:                                     ; preds = %block_403722
  %1913 = add i64 %2186, 4
  store i64 %1913, i64* %PC, align 8
  %1914 = load i64, i64* %2170, align 8
  store i64 %1914, i64* %RAX, align 8, !tbaa !2428
  %1915 = add i64 %1914, 568
  %1916 = add i64 %2186, 12
  store i64 %1916, i64* %PC, align 8
  %1917 = inttoptr i64 %1915 to i64*
  %1918 = load i64, i64* %1917, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %1919 = trunc i64 %1918 to i32
  %1920 = and i32 %1919, 255
  %1921 = tail call i32 @llvm.ctpop.i32(i32 %1920) #12
  %1922 = trunc i32 %1921 to i8
  %1923 = and i8 %1922, 1
  %1924 = xor i8 %1923, 1
  store i8 %1924, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %1925 = icmp eq i64 %1918, 0
  %1926 = zext i1 %1925 to i8
  store i8 %1926, i8* %29, align 1, !tbaa !2448
  %1927 = lshr i64 %1918, 63
  %1928 = trunc i64 %1927 to i8
  store i8 %1928, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %.v87 = select i1 %1925, i64 36, i64 18
  %1929 = add i64 %2186, %.v87
  store i64 %1929, i64* %PC, align 8, !tbaa !2428
  br i1 %1925, label %block_4037ea, label %block_4037d8

block_4038de:                                     ; preds = %block_4038c6
  store i64 200, i64* %RSI, align 8, !tbaa !2428
  %1930 = add i64 %2476, -240
  store i64 %1930, i64* %RDI, align 8, !tbaa !2428
  %1931 = add i64 %2476, -24
  %1932 = add i64 %2516, 16
  store i64 %1932, i64* %PC, align 8
  %1933 = inttoptr i64 %1931 to i64*
  %1934 = load i64, i64* %1933, align 8
  store i64 %1934, i64* %RDX, align 8, !tbaa !2428
  %1935 = add i64 %2516, -12398
  %1936 = add i64 %2516, 21
  %1937 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1938 = add i64 %1937, -8
  %1939 = inttoptr i64 %1938 to i64*
  store i64 %1936, i64* %1939, align 8
  store i64 %1938, i64* %RSP, align 8, !tbaa !2428
  store i64 %1935, i64* %PC, align 8, !tbaa !2428
  %1940 = tail call fastcc %struct.Memory* @ext_608fe8_fgets(%struct.State* nonnull %0, %struct.Memory* %MEMORY.10)
  %1941 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 709), i64* %RSI, align 8, !tbaa !2428
  %1942 = load i64, i64* %RBP, align 8
  %1943 = add i64 %1942, -248
  store i64 %1943, i64* %RDX, align 8, !tbaa !2428
  %1944 = add i64 %1942, -256
  store i64 %1944, i64* %RCX, align 8, !tbaa !2428
  %1945 = add i64 %1942, -240
  store i64 %1945, i64* %RDI, align 8, !tbaa !2428
  %1946 = add i64 %1942, -320
  %1947 = load i64, i64* %RAX, align 8
  %1948 = add i64 %1941, 38
  store i64 %1948, i64* %PC, align 8
  %1949 = inttoptr i64 %1946 to i64*
  store i64 %1947, i64* %1949, align 8
  %1950 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %1951 = add i64 %1950, -12377
  %1952 = add i64 %1950, 7
  %1953 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1954 = add i64 %1953, -8
  %1955 = inttoptr i64 %1954 to i64*
  store i64 %1952, i64* %1955, align 8
  store i64 %1954, i64* %RSP, align 8, !tbaa !2428
  store i64 %1951, i64* %PC, align 8, !tbaa !2428
  %1956 = tail call fastcc %struct.Memory* @ext_609010___isoc99_sscanf(%struct.State* nonnull %0, %struct.Memory* %1940)
  %1957 = load i32, i32* %EAX, align 4
  %1958 = load i64, i64* %PC, align 8
  %1959 = add i32 %1957, -2
  %1960 = icmp ult i32 %1957, 2
  %1961 = zext i1 %1960 to i8
  store i8 %1961, i8* %13, align 1, !tbaa !2432
  %1962 = and i32 %1959, 255
  %1963 = tail call i32 @llvm.ctpop.i32(i32 %1962) #12
  %1964 = trunc i32 %1963 to i8
  %1965 = and i8 %1964, 1
  %1966 = xor i8 %1965, 1
  store i8 %1966, i8* %20, align 1, !tbaa !2446
  %1967 = xor i32 %1959, %1957
  %1968 = lshr i32 %1967, 4
  %1969 = trunc i32 %1968 to i8
  %1970 = and i8 %1969, 1
  store i8 %1970, i8* %26, align 1, !tbaa !2447
  %1971 = icmp eq i32 %1959, 0
  %1972 = zext i1 %1971 to i8
  store i8 %1972, i8* %29, align 1, !tbaa !2448
  %1973 = lshr i32 %1959, 31
  %1974 = trunc i32 %1973 to i8
  store i8 %1974, i8* %32, align 1, !tbaa !2449
  %1975 = lshr i32 %1957, 31
  %1976 = xor i32 %1973, %1975
  %1977 = add nuw nsw i32 %1976, %1975
  %1978 = icmp eq i32 %1977, 2
  %1979 = zext i1 %1978 to i8
  store i8 %1979, i8* %38, align 1, !tbaa !2450
  %.v97 = select i1 %1971, i64 9, i64 29
  %1980 = add i64 %1958, %.v97
  store i64 %1980, i64* %PC, align 8, !tbaa !2428
  %1981 = load i64, i64* %RBP, align 8
  br i1 %1971, label %block_403929, label %block_40393d

block_403f4b:                                     ; preds = %block_403f35, %block_403ea5
  %1982 = phi i64 [ %.pre78, %block_403f35 ], [ %162, %block_403ea5 ]
  %1983 = phi i64 [ %.pre77, %block_403f35 ], [ %1523, %block_403ea5 ]
  %1984 = add i64 %1983, -24
  %1985 = add i64 %1982, 4
  store i64 %1985, i64* %PC, align 8
  %1986 = inttoptr i64 %1984 to i64*
  %1987 = load i64, i64* %1986, align 8
  store i64 %1987, i64* %RDI, align 8, !tbaa !2428
  %1988 = add i64 %1982, -14091
  %1989 = add i64 %1982, 9
  %1990 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1991 = add i64 %1990, -8
  %1992 = inttoptr i64 %1991 to i64*
  store i64 %1989, i64* %1992, align 8
  store i64 %1991, i64* %RSP, align 8, !tbaa !2428
  store i64 %1988, i64* %PC, align 8, !tbaa !2428
  %1993 = tail call fastcc %struct.Memory* @ext_608f50_fclose(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %1994 = load i64, i64* %RBP, align 8
  %1995 = add i64 %1994, -16
  %1996 = load i64, i64* %PC, align 8
  %1997 = add i64 %1996, 4
  store i64 %1997, i64* %PC, align 8
  %1998 = inttoptr i64 %1995 to i64*
  %1999 = load i64, i64* %1998, align 8
  store i64 %1999, i64* %RDI, align 8, !tbaa !2428
  %2000 = add i64 %1999, 200
  %2001 = add i64 %1996, 11
  store i64 %2001, i64* %PC, align 8
  %2002 = inttoptr i64 %2000 to i8*
  store i8 0, i8* %2002, align 1
  %2003 = load i64, i64* %RBP, align 8
  %2004 = add i64 %2003, -272
  %2005 = load i64, i64* %PC, align 8
  %2006 = add i64 %2005, 11
  store i64 %2006, i64* %PC, align 8
  %2007 = inttoptr i64 %2004 to i64*
  store i64 1, i64* %2007, align 8
  %2008 = load i64, i64* %RBP, align 8
  %2009 = add i64 %2008, -340
  %2010 = load i32, i32* %EAX, align 4
  %2011 = load i64, i64* %PC, align 8
  %2012 = add i64 %2011, 6
  store i64 %2012, i64* %PC, align 8
  %2013 = inttoptr i64 %2009 to i32*
  store i32 %2010, i32* %2013, align 4
  %.pre79 = load i64, i64* %PC, align 8
  br label %block_403f70

block_403da4:                                     ; preds = %block_403d52
  %2014 = add i64 %437, -8
  %2015 = add i64 %436, 8
  store i64 %2015, i64* %PC, align 8
  %2016 = inttoptr i64 %2014 to i64*
  store i64 -1, i64* %2016, align 8
  %2017 = load i64, i64* %PC, align 8
  %2018 = add i64 %2017, 722
  store i64 %2018, i64* %PC, align 8, !tbaa !2428
  br label %block_40407e

block_403722:                                     ; preds = %block_403704, %block_4036da
  %2019 = phi i64 [ %.pre, %block_403704 ], [ %1509, %block_4036da ]
  store i64 104, i64* %RAX, align 8, !tbaa !2428
  store i64 104, i64* %RSI, align 8, !tbaa !2428
  %2020 = load i64, i64* %RBP, align 8
  %2021 = add i64 %2020, -16
  %2022 = add i64 %2019, 11
  store i64 %2022, i64* %PC, align 8
  %2023 = inttoptr i64 %2021 to i64*
  %2024 = load i64, i64* %2023, align 8
  store i64 %2024, i64* %RCX, align 8, !tbaa !2428
  %2025 = add i64 %2024, 416
  %2026 = add i64 %2019, 18
  store i64 %2026, i64* %PC, align 8
  %2027 = inttoptr i64 %2025 to i64*
  %2028 = load i64, i64* %2027, align 8
  store i64 %2028, i64* %RCX, align 8, !tbaa !2428
  %2029 = add i64 %2019, 22
  store i64 %2029, i64* %PC, align 8
  %2030 = load i64, i64* %2023, align 8
  store i64 %2030, i64* %RDX, align 8, !tbaa !2428
  %2031 = add i64 %2030, 424
  %2032 = add i64 %2019, 29
  store i64 %2032, i64* %PC, align 8
  %2033 = inttoptr i64 %2031 to i64*
  %2034 = load i64, i64* %2033, align 8
  %2035 = sub i64 %2028, %2034
  store i64 %2035, i64* %RCX, align 8, !tbaa !2428
  %2036 = icmp ult i64 %2028, %2034
  %2037 = zext i1 %2036 to i8
  store i8 %2037, i8* %13, align 1, !tbaa !2432
  %2038 = trunc i64 %2035 to i32
  %2039 = and i32 %2038, 255
  %2040 = tail call i32 @llvm.ctpop.i32(i32 %2039) #12
  %2041 = trunc i32 %2040 to i8
  %2042 = and i8 %2041, 1
  %2043 = xor i8 %2042, 1
  store i8 %2043, i8* %20, align 1, !tbaa !2446
  %2044 = xor i64 %2034, %2028
  %2045 = xor i64 %2044, %2035
  %2046 = lshr i64 %2045, 4
  %2047 = trunc i64 %2046 to i8
  %2048 = and i8 %2047, 1
  store i8 %2048, i8* %26, align 1, !tbaa !2447
  %2049 = icmp eq i64 %2035, 0
  %2050 = zext i1 %2049 to i8
  store i8 %2050, i8* %29, align 1, !tbaa !2448
  %2051 = lshr i64 %2035, 63
  %2052 = trunc i64 %2051 to i8
  store i8 %2052, i8* %32, align 1, !tbaa !2449
  %2053 = lshr i64 %2028, 63
  %2054 = lshr i64 %2034, 63
  %2055 = xor i64 %2054, %2053
  %2056 = xor i64 %2051, %2053
  %2057 = add nuw nsw i64 %2056, %2055
  %2058 = icmp eq i64 %2057, 2
  %2059 = zext i1 %2058 to i8
  store i8 %2059, i8* %38, align 1, !tbaa !2450
  %2060 = add i64 %2019, 33
  store i64 %2060, i64* %PC, align 8
  %2061 = load i64, i64* %2023, align 8
  store i64 %2061, i64* %RDX, align 8, !tbaa !2428
  %2062 = add i64 %2061, 448
  %2063 = add i64 %2019, 40
  store i64 %2063, i64* %PC, align 8
  %2064 = inttoptr i64 %2062 to i64*
  store i64 %2035, i64* %2064, align 8
  %2065 = load i64, i64* %RBP, align 8
  %2066 = add i64 %2065, -16
  %2067 = load i64, i64* %PC, align 8
  %2068 = add i64 %2067, 4
  store i64 %2068, i64* %PC, align 8
  %2069 = inttoptr i64 %2066 to i64*
  %2070 = load i64, i64* %2069, align 8
  store i64 %2070, i64* %RCX, align 8, !tbaa !2428
  %2071 = add i64 %2070, 400
  %2072 = add i64 %2067, 11
  store i64 %2072, i64* %PC, align 8
  %2073 = inttoptr i64 %2071 to i64*
  %2074 = load i64, i64* %2073, align 8
  %2075 = add i64 %2074, 1
  store i64 %2075, i64* %RCX, align 8, !tbaa !2428
  %2076 = icmp eq i64 %2074, -1
  %2077 = icmp eq i64 %2075, 0
  %2078 = or i1 %2076, %2077
  %2079 = zext i1 %2078 to i8
  store i8 %2079, i8* %13, align 1, !tbaa !2432
  %2080 = trunc i64 %2075 to i32
  %2081 = and i32 %2080, 255
  %2082 = tail call i32 @llvm.ctpop.i32(i32 %2081) #12
  %2083 = trunc i32 %2082 to i8
  %2084 = and i8 %2083, 1
  %2085 = xor i8 %2084, 1
  store i8 %2085, i8* %20, align 1, !tbaa !2446
  %2086 = xor i64 %2075, %2074
  %2087 = lshr i64 %2086, 4
  %2088 = trunc i64 %2087 to i8
  %2089 = and i8 %2088, 1
  store i8 %2089, i8* %26, align 1, !tbaa !2447
  %2090 = zext i1 %2077 to i8
  store i8 %2090, i8* %29, align 1, !tbaa !2448
  %2091 = lshr i64 %2075, 63
  %2092 = trunc i64 %2091 to i8
  store i8 %2092, i8* %32, align 1, !tbaa !2449
  %2093 = lshr i64 %2074, 63
  %2094 = xor i64 %2091, %2093
  %2095 = add nuw nsw i64 %2094, %2091
  %2096 = icmp eq i64 %2095, 2
  %2097 = zext i1 %2096 to i8
  store i8 %2097, i8* %38, align 1, !tbaa !2450
  store i64 %2075, i64* %RDI, align 8, !tbaa !2428
  %2098 = add i64 %2067, -11978
  %2099 = add i64 %2067, 23
  %2100 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2101 = add i64 %2100, -8
  %2102 = inttoptr i64 %2101 to i64*
  store i64 %2099, i64* %2102, align 8
  store i64 %2101, i64* %RSP, align 8, !tbaa !2428
  store i64 %2098, i64* %PC, align 8, !tbaa !2428
  %2103 = tail call fastcc %struct.Memory* @ext_608f78_calloc(%struct.State* nonnull %0, %struct.Memory* %2544)
  %2104 = load i64, i64* %PC, align 8
  store i64 64, i64* %R8, align 8, !tbaa !2428
  store i64 64, i64* %RSI, align 8, !tbaa !2428
  %2105 = load i64, i64* %RBP, align 8
  %2106 = add i64 %2105, -16
  %2107 = add i64 %2104, 13
  store i64 %2107, i64* %PC, align 8
  %2108 = inttoptr i64 %2106 to i64*
  %2109 = load i64, i64* %2108, align 8
  store i64 %2109, i64* %RCX, align 8, !tbaa !2428
  %2110 = add i64 %2109, 552
  %2111 = load i64, i64* %RAX, align 8
  %2112 = add i64 %2104, 20
  store i64 %2112, i64* %PC, align 8
  %2113 = inttoptr i64 %2110 to i64*
  store i64 %2111, i64* %2113, align 8
  %2114 = load i64, i64* %RBP, align 8
  %2115 = add i64 %2114, -16
  %2116 = load i64, i64* %PC, align 8
  %2117 = add i64 %2116, 4
  store i64 %2117, i64* %PC, align 8
  %2118 = inttoptr i64 %2115 to i64*
  %2119 = load i64, i64* %2118, align 8
  store i64 %2119, i64* %RAX, align 8, !tbaa !2428
  %2120 = add i64 %2119, 400
  %2121 = add i64 %2116, 11
  store i64 %2121, i64* %PC, align 8
  %2122 = inttoptr i64 %2120 to i64*
  %2123 = load i64, i64* %2122, align 8
  store i64 %2123, i64* %RDI, align 8, !tbaa !2428
  %2124 = add i64 %2116, -12021
  %2125 = add i64 %2116, 16
  %2126 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2127 = add i64 %2126, -8
  %2128 = inttoptr i64 %2127 to i64*
  store i64 %2125, i64* %2128, align 8
  store i64 %2127, i64* %RSP, align 8, !tbaa !2428
  store i64 %2124, i64* %PC, align 8, !tbaa !2428
  %2129 = tail call fastcc %struct.Memory* @ext_608f78_calloc(%struct.State* nonnull %0, %struct.Memory* %2103)
  %2130 = load i64, i64* %PC, align 8
  store i64 64, i64* %R8, align 8, !tbaa !2428
  store i64 64, i64* %RSI, align 8, !tbaa !2428
  %2131 = load i64, i64* %RBP, align 8
  %2132 = add i64 %2131, -16
  %2133 = add i64 %2130, 13
  store i64 %2133, i64* %PC, align 8
  %2134 = inttoptr i64 %2132 to i64*
  %2135 = load i64, i64* %2134, align 8
  store i64 %2135, i64* %RCX, align 8, !tbaa !2428
  %2136 = add i64 %2135, 584
  %2137 = load i64, i64* %RAX, align 8
  %2138 = add i64 %2130, 20
  store i64 %2138, i64* %PC, align 8
  %2139 = inttoptr i64 %2136 to i64*
  store i64 %2137, i64* %2139, align 8
  %2140 = load i64, i64* %RBP, align 8
  %2141 = add i64 %2140, -16
  %2142 = load i64, i64* %PC, align 8
  %2143 = add i64 %2142, 4
  store i64 %2143, i64* %PC, align 8
  %2144 = inttoptr i64 %2141 to i64*
  %2145 = load i64, i64* %2144, align 8
  store i64 %2145, i64* %RAX, align 8, !tbaa !2428
  %2146 = add i64 %2145, 416
  %2147 = add i64 %2142, 11
  store i64 %2147, i64* %PC, align 8
  %2148 = inttoptr i64 %2146 to i64*
  %2149 = load i64, i64* %2148, align 8
  store i64 %2149, i64* %RDI, align 8, !tbaa !2428
  %2150 = add i64 %2142, -12057
  %2151 = add i64 %2142, 16
  %2152 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2153 = add i64 %2152, -8
  %2154 = inttoptr i64 %2153 to i64*
  store i64 %2151, i64* %2154, align 8
  store i64 %2153, i64* %RSP, align 8, !tbaa !2428
  store i64 %2150, i64* %PC, align 8, !tbaa !2428
  %2155 = tail call fastcc %struct.Memory* @ext_608f78_calloc(%struct.State* nonnull %0, %struct.Memory* %2129)
  %2156 = load i64, i64* %RBP, align 8
  %2157 = add i64 %2156, -16
  %2158 = load i64, i64* %PC, align 8
  %2159 = add i64 %2158, 4
  store i64 %2159, i64* %PC, align 8
  %2160 = inttoptr i64 %2157 to i64*
  %2161 = load i64, i64* %2160, align 8
  store i64 %2161, i64* %RCX, align 8, !tbaa !2428
  %2162 = add i64 %2161, 568
  %2163 = load i64, i64* %RAX, align 8
  %2164 = add i64 %2158, 11
  store i64 %2164, i64* %PC, align 8
  %2165 = inttoptr i64 %2162 to i64*
  store i64 %2163, i64* %2165, align 8
  %2166 = load i64, i64* %RBP, align 8
  %2167 = add i64 %2166, -16
  %2168 = load i64, i64* %PC, align 8
  %2169 = add i64 %2168, 4
  store i64 %2169, i64* %PC, align 8
  %2170 = inttoptr i64 %2167 to i64*
  %2171 = load i64, i64* %2170, align 8
  store i64 %2171, i64* %RAX, align 8, !tbaa !2428
  %2172 = add i64 %2171, 552
  %2173 = add i64 %2168, 12
  store i64 %2173, i64* %PC, align 8
  %2174 = inttoptr i64 %2172 to i64*
  %2175 = load i64, i64* %2174, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %2176 = trunc i64 %2175 to i32
  %2177 = and i32 %2176, 255
  %2178 = tail call i32 @llvm.ctpop.i32(i32 %2177) #12
  %2179 = trunc i32 %2178 to i8
  %2180 = and i8 %2179, 1
  %2181 = xor i8 %2180, 1
  store i8 %2181, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %2182 = icmp eq i64 %2175, 0
  %2183 = zext i1 %2182 to i8
  store i8 %2183, i8* %29, align 1, !tbaa !2448
  %2184 = lshr i64 %2175, 63
  %2185 = trunc i64 %2184 to i8
  store i8 %2185, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %.v86 = select i1 %2182, i64 54, i64 18
  %2186 = add i64 %2168, %.v86
  store i64 %2186, i64* %PC, align 8, !tbaa !2428
  br i1 %2182, label %block_4037ea, label %block_4037c6

block_403ef0:                                     ; preds = %block_403f08, %block_403ebd
  %2187 = phi i64 [ %2917, %block_403f08 ], [ %.pre76, %block_403ebd ]
  %2188 = load i64, i64* %RBP, align 8
  %2189 = add i64 %2188, -280
  %2190 = add i64 %2187, 7
  store i64 %2190, i64* %PC, align 8
  %2191 = inttoptr i64 %2189 to i64*
  %2192 = load i64, i64* %2191, align 8
  store i64 %2192, i64* %RAX, align 8, !tbaa !2428
  %2193 = add i64 %2188, -16
  %2194 = add i64 %2187, 11
  store i64 %2194, i64* %PC, align 8
  %2195 = inttoptr i64 %2193 to i64*
  %2196 = load i64, i64* %2195, align 8
  store i64 %2196, i64* %RCX, align 8, !tbaa !2428
  %2197 = add i64 %2196, 576
  %2198 = add i64 %2187, 18
  store i64 %2198, i64* %PC, align 8
  %2199 = inttoptr i64 %2197 to i64*
  %2200 = load i64, i64* %2199, align 8
  %2201 = sub i64 %2192, %2200
  %2202 = icmp ult i64 %2192, %2200
  %2203 = zext i1 %2202 to i8
  store i8 %2203, i8* %13, align 1, !tbaa !2432
  %2204 = trunc i64 %2201 to i32
  %2205 = and i32 %2204, 255
  %2206 = tail call i32 @llvm.ctpop.i32(i32 %2205) #12
  %2207 = trunc i32 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = xor i8 %2208, 1
  store i8 %2209, i8* %20, align 1, !tbaa !2446
  %2210 = xor i64 %2200, %2192
  %2211 = xor i64 %2210, %2201
  %2212 = lshr i64 %2211, 4
  %2213 = trunc i64 %2212 to i8
  %2214 = and i8 %2213, 1
  store i8 %2214, i8* %26, align 1, !tbaa !2447
  %2215 = icmp eq i64 %2201, 0
  %2216 = zext i1 %2215 to i8
  store i8 %2216, i8* %29, align 1, !tbaa !2448
  %2217 = lshr i64 %2201, 63
  %2218 = trunc i64 %2217 to i8
  store i8 %2218, i8* %32, align 1, !tbaa !2449
  %2219 = lshr i64 %2192, 63
  %2220 = lshr i64 %2200, 63
  %2221 = xor i64 %2220, %2219
  %2222 = xor i64 %2217, %2219
  %2223 = add nuw nsw i64 %2222, %2221
  %2224 = icmp eq i64 %2223, 2
  %2225 = zext i1 %2224 to i8
  store i8 %2225, i8* %38, align 1, !tbaa !2450
  %.v82 = select i1 %2202, i64 24, i64 69
  %2226 = add i64 %2187, %.v82
  %2227 = add i64 %2226, 4
  store i64 %2227, i64* %PC, align 8
  %2228 = load i64, i64* %2195, align 8
  store i64 %2228, i64* %RAX, align 8, !tbaa !2428
  %2229 = add i64 %2228, 424
  %2230 = add i64 %2226, 11
  store i64 %2230, i64* %PC, align 8
  %2231 = inttoptr i64 %2229 to i64*
  %2232 = load i64, i64* %2231, align 8
  br i1 %2202, label %block_403f08, label %block_403f35

block_403d2f:                                     ; preds = %block_403d03
  %2233 = add i64 %2952, 11
  store i64 %2233, i64* %PC, align 8
  store i64 0, i64* %2479, align 8
  %.pre75 = load i64, i64* %PC, align 8
  br label %block_403d3a

block_40401f:                                     ; preds = %block_403fc7
  store i64 10000000, i64* %RAX, align 8, !tbaa !2428
  %2234 = add i64 %1483, 7
  store i64 %2234, i64* %PC, align 8
  store i64 10000000, i64* %RCX, align 8, !tbaa !2428
  br label %block_404032

block_403ebd:                                     ; preds = %block_403ea5
  %2235 = add i64 %162, 7
  store i64 %2235, i64* %PC, align 8
  %2236 = load i64, i64* %135, align 8
  store i64 %2236, i64* %RAX, align 8, !tbaa !2428
  %2237 = add i64 %162, 11
  store i64 %2237, i64* %PC, align 8
  %2238 = load i64, i64* %1530, align 8
  store i64 %2238, i64* %RCX, align 8, !tbaa !2428
  %2239 = add i64 %2238, 576
  %2240 = add i64 %162, 18
  store i64 %2240, i64* %PC, align 8
  %2241 = inttoptr i64 %2239 to i64*
  store i64 %2236, i64* %2241, align 8
  %2242 = load i64, i64* %RBP, align 8
  %2243 = add i64 %2242, -16
  %2244 = load i64, i64* %PC, align 8
  %2245 = add i64 %2244, 4
  store i64 %2245, i64* %PC, align 8
  %2246 = inttoptr i64 %2243 to i64*
  %2247 = load i64, i64* %2246, align 8
  store i64 %2247, i64* %RAX, align 8, !tbaa !2428
  %2248 = add i64 %2247, 568
  %2249 = add i64 %2244, 11
  store i64 %2249, i64* %PC, align 8
  %2250 = inttoptr i64 %2248 to i64*
  %2251 = load i64, i64* %2250, align 8
  store i64 %2251, i64* %RAX, align 8, !tbaa !2428
  %2252 = add i64 %2242, -280
  %2253 = add i64 %2244, 18
  store i64 %2253, i64* %PC, align 8
  %2254 = inttoptr i64 %2252 to i64*
  store i64 %2251, i64* %2254, align 8
  %2255 = load i64, i64* %RBP, align 8
  %2256 = add i64 %2255, -16
  %2257 = load i64, i64* %PC, align 8
  %2258 = add i64 %2257, 4
  store i64 %2258, i64* %PC, align 8
  %2259 = inttoptr i64 %2256 to i64*
  %2260 = load i64, i64* %2259, align 8
  store i64 %2260, i64* %RAX, align 8, !tbaa !2428
  %2261 = add i64 %2260, 424
  %2262 = add i64 %2257, 15
  store i64 %2262, i64* %PC, align 8
  %2263 = inttoptr i64 %2261 to i64*
  store i64 0, i64* %2263, align 8
  %.pre76 = load i64, i64* %PC, align 8
  br label %block_403ef0

block_403c5a:                                     ; preds = %block_403c47, %block_403c30
  %2264 = phi i64 [ %2862, %block_403c47 ], [ %1873, %block_403c30 ]
  %2265 = phi i64 [ 10000000, %block_403c47 ], [ %1875, %block_403c30 ]
  %.sink24 = phi i64 [ 5, %block_403c47 ], [ 24, %block_403c30 ]
  %2266 = add i64 %1338, -328
  %2267 = add i64 %2264, 7
  store i64 %2267, i64* %PC, align 8
  %2268 = inttoptr i64 %2266 to i64*
  store i64 %2265, i64* %2268, align 8
  %2269 = load i64, i64* %PC, align 8
  %2270 = add i64 %2269, %.sink24
  %2271 = load i64, i64* %RBP, align 8
  %2272 = add i64 %2271, -328
  %2273 = add i64 %2270, 7
  store i64 %2273, i64* %PC, align 8
  %2274 = inttoptr i64 %2272 to i64*
  %2275 = load i64, i64* %2274, align 8
  %2276 = shl i64 %2275, 1
  %2277 = icmp slt i64 %2275, 0
  %2278 = icmp slt i64 %2276, 0
  %2279 = xor i1 %2277, %2278
  store i64 %2276, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i64 %2275, 63
  %2280 = trunc i64 %.lobit to i8
  store i8 %2280, i8* %13, align 1, !tbaa !2453
  %2281 = trunc i64 %2276 to i32
  %2282 = and i32 %2281, 254
  %2283 = tail call i32 @llvm.ctpop.i32(i32 %2282) #12
  %2284 = trunc i32 %2283 to i8
  %2285 = and i8 %2284, 1
  %2286 = xor i8 %2285, 1
  store i8 %2286, i8* %20, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %2287 = icmp eq i64 %2276, 0
  %2288 = zext i1 %2287 to i8
  store i8 %2288, i8* %29, align 1, !tbaa !2453
  %2289 = lshr i64 %2275, 62
  %2290 = trunc i64 %2289 to i8
  %2291 = and i8 %2290, 1
  store i8 %2291, i8* %32, align 1, !tbaa !2453
  %2292 = zext i1 %2279 to i8
  store i8 %2292, i8* %38, align 1, !tbaa !2453
  %2293 = add i64 %2271, -280
  %2294 = add i64 %2270, 18
  store i64 %2294, i64* %PC, align 8
  %2295 = inttoptr i64 %2293 to i64*
  %2296 = load i64, i64* %2295, align 8
  store i64 %2296, i64* %RCX, align 8, !tbaa !2428
  %2297 = add i64 %2270, 21
  store i64 %2297, i64* %PC, align 8
  %2298 = inttoptr i64 %2296 to i64*
  store i64 %2276, i64* %2298, align 8
  %2299 = load i64, i64* %RBP, align 8
  %2300 = add i64 %2299, -280
  %2301 = load i64, i64* %PC, align 8
  %2302 = add i64 %2301, 7
  store i64 %2302, i64* %PC, align 8
  %2303 = inttoptr i64 %2300 to i64*
  %2304 = load i64, i64* %2303, align 8
  store i64 %2304, i64* %RCX, align 8, !tbaa !2428
  %2305 = add i64 %2304, 56
  %2306 = load i64, i64* %RAX, align 8
  %2307 = add i64 %2301, 11
  store i64 %2307, i64* %PC, align 8
  %2308 = inttoptr i64 %2305 to i64*
  store i64 %2306, i64* %2308, align 8
  %2309 = load i64, i64* %RBP, align 8
  %2310 = add i64 %2309, -280
  %2311 = load i64, i64* %PC, align 8
  %2312 = add i64 %2311, 7
  store i64 %2312, i64* %PC, align 8
  %2313 = inttoptr i64 %2310 to i64*
  %2314 = load i64, i64* %2313, align 8
  store i64 %2314, i64* %RAX, align 8, !tbaa !2428
  %2315 = add i64 %2314, 8
  %2316 = add i64 %2311, 11
  store i64 %2316, i64* %PC, align 8
  %2317 = inttoptr i64 %2315 to i64*
  %2318 = load i64, i64* %2317, align 8
  store i64 %2318, i64* %RAX, align 8, !tbaa !2428
  %2319 = add i64 %2318, 56
  %2320 = add i64 %2311, 15
  store i64 %2320, i64* %PC, align 8
  %2321 = inttoptr i64 %2319 to i64*
  %2322 = load i64, i64* %2321, align 8
  store i64 %2322, i64* %RAX, align 8, !tbaa !2428
  %2323 = add i64 %2311, 22
  store i64 %2323, i64* %PC, align 8
  %2324 = load i64, i64* %2313, align 8
  store i64 %2324, i64* %RCX, align 8, !tbaa !2428
  %2325 = add i64 %2324, 32
  %2326 = add i64 %2311, 26
  store i64 %2326, i64* %PC, align 8
  %2327 = inttoptr i64 %2325 to i64*
  store i64 %2322, i64* %2327, align 8
  %2328 = load i64, i64* %RBP, align 8
  %2329 = add i64 %2328, -280
  %2330 = load i64, i64* %PC, align 8
  %2331 = add i64 %2330, 7
  store i64 %2331, i64* %PC, align 8
  %2332 = inttoptr i64 %2329 to i64*
  %2333 = load i64, i64* %2332, align 8
  store i64 %2333, i64* %RAX, align 8, !tbaa !2428
  %2334 = add i64 %2330, 14
  store i64 %2334, i64* %PC, align 8
  %2335 = load i64, i64* %2332, align 8
  store i64 %2335, i64* %RCX, align 8, !tbaa !2428
  %2336 = add i64 %2335, 8
  %2337 = add i64 %2330, 18
  store i64 %2337, i64* %PC, align 8
  %2338 = inttoptr i64 %2336 to i64*
  %2339 = load i64, i64* %2338, align 8
  store i64 %2339, i64* %RCX, align 8, !tbaa !2428
  %2340 = add i64 %2339, 56
  %2341 = add i64 %2330, 22
  store i64 %2341, i64* %PC, align 8
  %2342 = inttoptr i64 %2340 to i64*
  store i64 %2333, i64* %2342, align 8
  %2343 = load i64, i64* %RBP, align 8
  %2344 = add i64 %2343, -280
  %2345 = load i64, i64* %PC, align 8
  %2346 = add i64 %2345, 7
  store i64 %2346, i64* %PC, align 8
  %2347 = inttoptr i64 %2344 to i64*
  %2348 = load i64, i64* %2347, align 8
  store i64 %2348, i64* %RAX, align 8, !tbaa !2428
  %2349 = add i64 %2348, 16
  %2350 = add i64 %2345, 11
  store i64 %2350, i64* %PC, align 8
  %2351 = inttoptr i64 %2349 to i64*
  %2352 = load i64, i64* %2351, align 8
  store i64 %2352, i64* %RAX, align 8, !tbaa !2428
  %2353 = add i64 %2352, 64
  %2354 = add i64 %2345, 15
  store i64 %2354, i64* %PC, align 8
  %2355 = inttoptr i64 %2353 to i64*
  %2356 = load i64, i64* %2355, align 8
  store i64 %2356, i64* %RAX, align 8, !tbaa !2428
  %2357 = add i64 %2345, 22
  store i64 %2357, i64* %PC, align 8
  %2358 = load i64, i64* %2347, align 8
  store i64 %2358, i64* %RCX, align 8, !tbaa !2428
  %2359 = add i64 %2358, 40
  %2360 = add i64 %2345, 26
  store i64 %2360, i64* %PC, align 8
  %2361 = inttoptr i64 %2359 to i64*
  store i64 %2356, i64* %2361, align 8
  %2362 = load i64, i64* %RBP, align 8
  %2363 = add i64 %2362, -280
  %2364 = load i64, i64* %PC, align 8
  %2365 = add i64 %2364, 7
  store i64 %2365, i64* %PC, align 8
  %2366 = inttoptr i64 %2363 to i64*
  %2367 = load i64, i64* %2366, align 8
  store i64 %2367, i64* %RAX, align 8, !tbaa !2428
  %2368 = add i64 %2364, 14
  store i64 %2368, i64* %PC, align 8
  %2369 = load i64, i64* %2366, align 8
  store i64 %2369, i64* %RCX, align 8, !tbaa !2428
  %2370 = add i64 %2369, 16
  %2371 = add i64 %2364, 18
  store i64 %2371, i64* %PC, align 8
  %2372 = inttoptr i64 %2370 to i64*
  %2373 = load i64, i64* %2372, align 8
  store i64 %2373, i64* %RCX, align 8, !tbaa !2428
  %2374 = add i64 %2373, 64
  %2375 = add i64 %2364, 22
  store i64 %2375, i64* %PC, align 8
  %2376 = inttoptr i64 %2374 to i64*
  store i64 %2367, i64* %2376, align 8
  %2377 = load i64, i64* %RBP, align 8
  %2378 = add i64 %2377, -280
  %2379 = load i64, i64* %PC, align 8
  %2380 = add i64 %2379, 7
  store i64 %2380, i64* %PC, align 8
  %2381 = inttoptr i64 %2378 to i64*
  %2382 = load i64, i64* %2381, align 8
  %2383 = add i64 %2382, 64
  store i64 %2383, i64* %RAX, align 8, !tbaa !2428
  %2384 = icmp ugt i64 %2382, -65
  %2385 = zext i1 %2384 to i8
  store i8 %2385, i8* %13, align 1, !tbaa !2432
  %2386 = trunc i64 %2383 to i32
  %2387 = and i32 %2386, 255
  %2388 = tail call i32 @llvm.ctpop.i32(i32 %2387) #12
  %2389 = trunc i32 %2388 to i8
  %2390 = and i8 %2389, 1
  %2391 = xor i8 %2390, 1
  store i8 %2391, i8* %20, align 1, !tbaa !2446
  %2392 = xor i64 %2383, %2382
  %2393 = lshr i64 %2392, 4
  %2394 = trunc i64 %2393 to i8
  %2395 = and i8 %2394, 1
  store i8 %2395, i8* %26, align 1, !tbaa !2447
  %2396 = icmp eq i64 %2383, 0
  %2397 = zext i1 %2396 to i8
  store i8 %2397, i8* %29, align 1, !tbaa !2448
  %2398 = lshr i64 %2383, 63
  %2399 = trunc i64 %2398 to i8
  store i8 %2399, i8* %32, align 1, !tbaa !2449
  %2400 = lshr i64 %2382, 63
  %2401 = xor i64 %2398, %2400
  %2402 = add nuw nsw i64 %2401, %2398
  %2403 = icmp eq i64 %2402, 2
  %2404 = zext i1 %2403 to i8
  store i8 %2404, i8* %38, align 1, !tbaa !2450
  %2405 = add i64 %2379, 18
  store i64 %2405, i64* %PC, align 8
  store i64 %2383, i64* %2381, align 8
  %2406 = load i64, i64* %RBP, align 8
  %2407 = add i64 %2406, -272
  %2408 = load i64, i64* %PC, align 8
  %2409 = add i64 %2408, 7
  store i64 %2409, i64* %PC, align 8
  %2410 = inttoptr i64 %2407 to i64*
  %2411 = load i64, i64* %2410, align 8
  %2412 = add i64 %2411, 1
  store i64 %2412, i64* %RAX, align 8, !tbaa !2428
  %2413 = icmp eq i64 %2411, -1
  %2414 = icmp eq i64 %2412, 0
  %2415 = or i1 %2413, %2414
  %2416 = zext i1 %2415 to i8
  store i8 %2416, i8* %13, align 1, !tbaa !2432
  %2417 = trunc i64 %2412 to i32
  %2418 = and i32 %2417, 255
  %2419 = tail call i32 @llvm.ctpop.i32(i32 %2418) #12
  %2420 = trunc i32 %2419 to i8
  %2421 = and i8 %2420, 1
  %2422 = xor i8 %2421, 1
  store i8 %2422, i8* %20, align 1, !tbaa !2446
  %2423 = xor i64 %2412, %2411
  %2424 = lshr i64 %2423, 4
  %2425 = trunc i64 %2424 to i8
  %2426 = and i8 %2425, 1
  store i8 %2426, i8* %26, align 1, !tbaa !2447
  %2427 = zext i1 %2414 to i8
  store i8 %2427, i8* %29, align 1, !tbaa !2448
  %2428 = lshr i64 %2412, 63
  %2429 = trunc i64 %2428 to i8
  store i8 %2429, i8* %32, align 1, !tbaa !2449
  %2430 = lshr i64 %2411, 63
  %2431 = xor i64 %2428, %2430
  %2432 = add nuw nsw i64 %2431, %2428
  %2433 = icmp eq i64 %2432, 2
  %2434 = zext i1 %2433 to i8
  store i8 %2434, i8* %38, align 1, !tbaa !2450
  %2435 = add i64 %2408, 18
  store i64 %2435, i64* %PC, align 8
  store i64 %2412, i64* %2410, align 8
  %2436 = load i64, i64* %PC, align 8
  %2437 = add i64 %2436, -1080
  store i64 %2437, i64* %PC, align 8, !tbaa !2428
  br label %block_4038c6

block_4037ea:                                     ; preds = %block_4037d8, %block_403722, %block_4037c6
  %2438 = phi i64 [ %2186, %block_403722 ], [ %1929, %block_4037c6 ], [ %384, %block_4037d8 ]
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 674), i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2439 = add i64 %2438, -12186
  %2440 = add i64 %2438, 17
  %2441 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2442 = add i64 %2441, -8
  %2443 = inttoptr i64 %2442 to i64*
  store i64 %2440, i64* %2443, align 8
  store i64 %2442, i64* %RSP, align 8, !tbaa !2428
  store i64 %2439, i64* %PC, align 8, !tbaa !2428
  %2444 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %2155)
  %2445 = load i64, i64* %RBP, align 8
  %2446 = add i64 %2445, -16
  %2447 = load i64, i64* %PC, align 8
  %2448 = add i64 %2447, 4
  store i64 %2448, i64* %PC, align 8
  %2449 = inttoptr i64 %2446 to i64*
  %2450 = load i64, i64* %2449, align 8
  store i64 %2450, i64* %RDI, align 8, !tbaa !2428
  %2451 = add i64 %2445, -300
  %2452 = load i32, i32* %EAX, align 4
  %2453 = add i64 %2447, 10
  store i64 %2453, i64* %PC, align 8
  %2454 = inttoptr i64 %2451 to i32*
  store i32 %2452, i32* %2454, align 4
  %2455 = load i64, i64* %PC, align 8
  %2456 = add i64 %2455, -4965
  %2457 = add i64 %2455, 5
  %2458 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2459 = add i64 %2458, -8
  %2460 = inttoptr i64 %2459 to i64*
  store i64 %2457, i64* %2460, align 8
  store i64 %2459, i64* %RSP, align 8, !tbaa !2428
  store i64 %2456, i64* %PC, align 8, !tbaa !2428
  %2461 = tail call %struct.Memory* @sub_4024a0_getfree_renamed_(%struct.State* nonnull %0, i64 %2456, %struct.Memory* %2444)
  %2462 = load i64, i64* %RBP, align 8
  %2463 = add i64 %2462, -8
  %2464 = load i64, i64* %PC, align 8
  %2465 = add i64 %2464, 8
  store i64 %2465, i64* %PC, align 8
  %2466 = inttoptr i64 %2463 to i64*
  store i64 -1, i64* %2466, align 8
  %2467 = load i64, i64* %RBP, align 8
  %2468 = add i64 %2467, -312
  %2469 = load i64, i64* %RAX, align 8
  %2470 = load i64, i64* %PC, align 8
  %2471 = add i64 %2470, 7
  store i64 %2471, i64* %PC, align 8
  %2472 = inttoptr i64 %2468 to i64*
  store i64 %2469, i64* %2472, align 8
  %2473 = load i64, i64* %PC, align 8
  %2474 = add i64 %2473, 2149
  store i64 %2474, i64* %PC, align 8, !tbaa !2428
  br label %block_40407e

block_4038c6:                                     ; preds = %block_40381e, %block_403c5a
  %2475 = phi i64 [ %.pre73, %block_40381e ], [ %2437, %block_403c5a ]
  %MEMORY.10 = phi %struct.Memory* [ %2155, %block_40381e ], [ %1956, %block_403c5a ]
  %2476 = load i64, i64* %RBP, align 8
  %2477 = add i64 %2476, -272
  %2478 = add i64 %2475, 7
  store i64 %2478, i64* %PC, align 8
  %2479 = inttoptr i64 %2477 to i64*
  %2480 = load i64, i64* %2479, align 8
  store i64 %2480, i64* %RAX, align 8, !tbaa !2428
  %2481 = add i64 %2476, -16
  %2482 = add i64 %2475, 11
  store i64 %2482, i64* %PC, align 8
  %2483 = inttoptr i64 %2481 to i64*
  %2484 = load i64, i64* %2483, align 8
  store i64 %2484, i64* %RCX, align 8, !tbaa !2428
  %2485 = add i64 %2484, 408
  %2486 = add i64 %2475, 18
  store i64 %2486, i64* %PC, align 8
  %2487 = inttoptr i64 %2485 to i64*
  %2488 = load i64, i64* %2487, align 8
  %2489 = sub i64 %2480, %2488
  %2490 = icmp ult i64 %2480, %2488
  %2491 = zext i1 %2490 to i8
  store i8 %2491, i8* %13, align 1, !tbaa !2432
  %2492 = trunc i64 %2489 to i32
  %2493 = and i32 %2492, 255
  %2494 = tail call i32 @llvm.ctpop.i32(i32 %2493) #12
  %2495 = trunc i32 %2494 to i8
  %2496 = and i8 %2495, 1
  %2497 = xor i8 %2496, 1
  store i8 %2497, i8* %20, align 1, !tbaa !2446
  %2498 = xor i64 %2488, %2480
  %2499 = xor i64 %2498, %2489
  %2500 = lshr i64 %2499, 4
  %2501 = trunc i64 %2500 to i8
  %2502 = and i8 %2501, 1
  store i8 %2502, i8* %26, align 1, !tbaa !2447
  %2503 = icmp eq i64 %2489, 0
  %2504 = zext i1 %2503 to i8
  store i8 %2504, i8* %29, align 1, !tbaa !2448
  %2505 = lshr i64 %2489, 63
  %2506 = trunc i64 %2505 to i8
  store i8 %2506, i8* %32, align 1, !tbaa !2449
  %2507 = lshr i64 %2480, 63
  %2508 = lshr i64 %2488, 63
  %2509 = xor i64 %2508, %2507
  %2510 = xor i64 %2505, %2507
  %2511 = add nuw nsw i64 %2510, %2509
  %2512 = icmp eq i64 %2511, 2
  %2513 = zext i1 %2512 to i8
  store i8 %2513, i8* %38, align 1, !tbaa !2450
  %2514 = icmp ne i8 %2506, 0
  %2515 = xor i1 %2514, %2512
  %.demorgan81 = or i1 %2503, %2515
  %.v89 = select i1 %.demorgan81, i64 24, i64 1085
  %2516 = add i64 %2475, %.v89
  store i64 %2516, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan81, label %block_4038de, label %block_403d03

block_403605:                                     ; preds = %block_4035c0
  store i64 200, i64* %RSI, align 8, !tbaa !2428
  %2517 = load i64, i64* %RBP, align 8
  %2518 = add i64 %2517, -240
  store i64 %2518, i64* %RDI, align 8, !tbaa !2428
  %2519 = add i64 %2517, -24
  %2520 = add i64 %78, 16
  store i64 %2520, i64* %PC, align 8
  %2521 = inttoptr i64 %2519 to i64*
  %2522 = load i64, i64* %2521, align 8
  store i64 %2522, i64* %RDX, align 8, !tbaa !2428
  %2523 = add i64 %78, -11669
  %2524 = add i64 %78, 21
  %2525 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2526 = add i64 %2525, -8
  %2527 = inttoptr i64 %2526 to i64*
  store i64 %2524, i64* %2527, align 8
  store i64 %2526, i64* %RSP, align 8, !tbaa !2428
  store i64 %2523, i64* %PC, align 8, !tbaa !2428
  %2528 = tail call fastcc %struct.Memory* @ext_608fe8_fgets(%struct.State* nonnull %0, %struct.Memory* %59)
  %2529 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 709), i64* %RSI, align 8, !tbaa !2428
  %2530 = load i64, i64* %RBP, align 8
  %2531 = add i64 %2530, -248
  store i64 %2531, i64* %RDX, align 8, !tbaa !2428
  %2532 = add i64 %2530, -256
  store i64 %2532, i64* %RCX, align 8, !tbaa !2428
  %2533 = add i64 %2530, -240
  store i64 %2533, i64* %RDI, align 8, !tbaa !2428
  %2534 = add i64 %2530, -296
  %2535 = load i64, i64* %RAX, align 8
  %2536 = add i64 %2529, 38
  store i64 %2536, i64* %PC, align 8
  %2537 = inttoptr i64 %2534 to i64*
  store i64 %2535, i64* %2537, align 8
  %2538 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2539 = add i64 %2538, -11648
  %2540 = add i64 %2538, 7
  %2541 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2542 = add i64 %2541, -8
  %2543 = inttoptr i64 %2542 to i64*
  store i64 %2540, i64* %2543, align 8
  store i64 %2542, i64* %RSP, align 8, !tbaa !2428
  store i64 %2539, i64* %PC, align 8, !tbaa !2428
  %2544 = tail call fastcc %struct.Memory* @ext_609010___isoc99_sscanf(%struct.State* nonnull %0, %struct.Memory* %2528)
  %2545 = load i32, i32* %EAX, align 4
  %2546 = load i64, i64* %PC, align 8
  %2547 = add i32 %2545, -2
  %2548 = icmp ult i32 %2545, 2
  %2549 = zext i1 %2548 to i8
  store i8 %2549, i8* %13, align 1, !tbaa !2432
  %2550 = and i32 %2547, 255
  %2551 = tail call i32 @llvm.ctpop.i32(i32 %2550) #12
  %2552 = trunc i32 %2551 to i8
  %2553 = and i8 %2552, 1
  %2554 = xor i8 %2553, 1
  store i8 %2554, i8* %20, align 1, !tbaa !2446
  %2555 = xor i32 %2547, %2545
  %2556 = lshr i32 %2555, 4
  %2557 = trunc i32 %2556 to i8
  %2558 = and i8 %2557, 1
  store i8 %2558, i8* %26, align 1, !tbaa !2447
  %2559 = icmp eq i32 %2547, 0
  %2560 = zext i1 %2559 to i8
  store i8 %2560, i8* %29, align 1, !tbaa !2448
  %2561 = lshr i32 %2547, 31
  %2562 = trunc i32 %2561 to i8
  store i8 %2562, i8* %32, align 1, !tbaa !2449
  %2563 = lshr i32 %2545, 31
  %2564 = xor i32 %2561, %2563
  %2565 = add nuw nsw i32 %2564, %2563
  %2566 = icmp eq i32 %2565, 2
  %2567 = zext i1 %2566 to i8
  store i8 %2567, i8* %38, align 1, !tbaa !2450
  %.v85 = select i1 %2559, i64 22, i64 9
  %2568 = add i64 %2546, %.v85
  store i64 %2568, i64* %PC, align 8, !tbaa !2428
  %2569 = load i64, i64* %RBP, align 8
  br i1 %2559, label %block_40365d, label %block_403650

block_404032:                                     ; preds = %block_40401f, %block_404008
  %2570 = phi i64 [ %2234, %block_40401f ], [ %1487, %block_404008 ]
  %2571 = phi i64 [ 10000000, %block_40401f ], [ %1489, %block_404008 ]
  %.sink5 = phi i64 [ 5, %block_40401f ], [ 24, %block_404008 ]
  %2572 = add i64 %1448, -360
  %2573 = add i64 %2570, 7
  store i64 %2573, i64* %PC, align 8
  %2574 = inttoptr i64 %2572 to i64*
  store i64 %2571, i64* %2574, align 8
  %2575 = load i64, i64* %PC, align 8
  %2576 = add i64 %2575, %.sink5
  %2577 = load i64, i64* %RBP, align 8
  %2578 = add i64 %2577, -360
  %2579 = add i64 %2576, 7
  store i64 %2579, i64* %PC, align 8
  %2580 = inttoptr i64 %2578 to i64*
  %2581 = load i64, i64* %2580, align 8
  %2582 = sext i64 %2581 to i128
  %2583 = and i128 %2582, -18446744073709551616
  %2584 = zext i64 %2581 to i128
  %2585 = or i128 %2583, %2584
  %2586 = mul nsw i128 %2585, -2
  %2587 = trunc i128 %2586 to i64
  store i64 %2587, i64* %RAX, align 8, !tbaa !2428
  %2588 = sext i64 %2587 to i128
  %2589 = icmp ne i128 %2588, %2586
  %2590 = zext i1 %2589 to i8
  store i8 %2590, i8* %13, align 1, !tbaa !2432
  %2591 = trunc i128 %2586 to i32
  %2592 = and i32 %2591, 254
  %2593 = tail call i32 @llvm.ctpop.i32(i32 %2592) #12
  %2594 = trunc i32 %2593 to i8
  %2595 = and i8 %2594, 1
  %2596 = xor i8 %2595, 1
  store i8 %2596, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %29, align 1, !tbaa !2448
  %2597 = lshr i64 %2587, 63
  %2598 = trunc i64 %2597 to i8
  store i8 %2598, i8* %32, align 1, !tbaa !2449
  store i8 %2590, i8* %38, align 1, !tbaa !2450
  %2599 = add i64 %2577, -16
  %2600 = add i64 %2576, 15
  store i64 %2600, i64* %PC, align 8
  %2601 = inttoptr i64 %2599 to i64*
  %2602 = load i64, i64* %2601, align 8
  store i64 %2602, i64* %RCX, align 8, !tbaa !2428
  %2603 = add i64 %2602, 568
  %2604 = add i64 %2576, 22
  store i64 %2604, i64* %PC, align 8
  %2605 = inttoptr i64 %2603 to i64*
  %2606 = load i64, i64* %2605, align 8
  store i64 %2606, i64* %RCX, align 8, !tbaa !2428
  %2607 = add i64 %2577, -272
  %2608 = add i64 %2576, 30
  store i64 %2608, i64* %PC, align 8
  %2609 = inttoptr i64 %2607 to i64*
  %2610 = load i64, i64* %2609, align 8
  %2611 = mul i64 %2610, 3
  %2612 = add i64 %2611, -1
  %2613 = shl i64 %2612, 6
  store i64 %2613, i64* %RDX, align 8, !tbaa !2428
  %2614 = add i64 %2613, %2606
  store i64 %2614, i64* %RCX, align 8, !tbaa !2428
  %2615 = icmp ult i64 %2614, %2606
  %2616 = icmp ult i64 %2614, %2613
  %2617 = or i1 %2615, %2616
  %2618 = zext i1 %2617 to i8
  store i8 %2618, i8* %13, align 1, !tbaa !2432
  %2619 = trunc i64 %2614 to i32
  %2620 = and i32 %2619, 255
  %2621 = tail call i32 @llvm.ctpop.i32(i32 %2620) #12
  %2622 = trunc i32 %2621 to i8
  %2623 = and i8 %2622, 1
  %2624 = xor i8 %2623, 1
  store i8 %2624, i8* %20, align 1, !tbaa !2446
  %2625 = xor i64 %2606, %2614
  %2626 = lshr i64 %2625, 4
  %2627 = trunc i64 %2626 to i8
  %2628 = and i8 %2627, 1
  store i8 %2628, i8* %26, align 1, !tbaa !2447
  %2629 = icmp eq i64 %2614, 0
  %2630 = zext i1 %2629 to i8
  store i8 %2630, i8* %29, align 1, !tbaa !2448
  %2631 = lshr i64 %2614, 63
  %2632 = trunc i64 %2631 to i8
  store i8 %2632, i8* %32, align 1, !tbaa !2449
  %2633 = lshr i64 %2606, 63
  %2634 = lshr i64 %2612, 57
  %2635 = and i64 %2634, 1
  %2636 = xor i64 %2631, %2633
  %2637 = xor i64 %2631, %2635
  %2638 = add nuw nsw i64 %2636, %2637
  %2639 = icmp eq i64 %2638, 2
  %2640 = zext i1 %2639 to i8
  store i8 %2640, i8* %38, align 1, !tbaa !2450
  %2641 = add i64 %2614, 56
  %2642 = load i64, i64* %RAX, align 8
  %2643 = add i64 %2576, 45
  store i64 %2643, i64* %PC, align 8
  %2644 = inttoptr i64 %2641 to i64*
  store i64 %2642, i64* %2644, align 8
  %2645 = load i64, i64* %RBP, align 8
  %2646 = add i64 %2645, -272
  %2647 = load i64, i64* %PC, align 8
  %2648 = add i64 %2647, 7
  store i64 %2648, i64* %PC, align 8
  %2649 = inttoptr i64 %2646 to i64*
  %2650 = load i64, i64* %2649, align 8
  %2651 = add i64 %2650, 1
  store i64 %2651, i64* %RAX, align 8, !tbaa !2428
  %2652 = icmp eq i64 %2650, -1
  %2653 = icmp eq i64 %2651, 0
  %2654 = or i1 %2652, %2653
  %2655 = zext i1 %2654 to i8
  store i8 %2655, i8* %13, align 1, !tbaa !2432
  %2656 = trunc i64 %2651 to i32
  %2657 = and i32 %2656, 255
  %2658 = tail call i32 @llvm.ctpop.i32(i32 %2657) #12
  %2659 = trunc i32 %2658 to i8
  %2660 = and i8 %2659, 1
  %2661 = xor i8 %2660, 1
  store i8 %2661, i8* %20, align 1, !tbaa !2446
  %2662 = xor i64 %2651, %2650
  %2663 = lshr i64 %2662, 4
  %2664 = trunc i64 %2663 to i8
  %2665 = and i8 %2664, 1
  store i8 %2665, i8* %26, align 1, !tbaa !2447
  %2666 = zext i1 %2653 to i8
  store i8 %2666, i8* %29, align 1, !tbaa !2448
  %2667 = lshr i64 %2651, 63
  %2668 = trunc i64 %2667 to i8
  store i8 %2668, i8* %32, align 1, !tbaa !2449
  %2669 = lshr i64 %2650, 63
  %2670 = xor i64 %2667, %2669
  %2671 = add nuw nsw i64 %2670, %2667
  %2672 = icmp eq i64 %2671, 2
  %2673 = zext i1 %2672 to i8
  store i8 %2673, i8* %38, align 1, !tbaa !2450
  %2674 = add i64 %2647, 18
  store i64 %2674, i64* %PC, align 8
  store i64 %2651, i64* %2649, align 8
  %2675 = load i64, i64* %PC, align 8
  %2676 = add i64 %2675, -257
  store i64 %2676, i64* %PC, align 8, !tbaa !2428
  br label %block_403f70

block_40381e:                                     ; preds = %block_4037d8
  %2677 = add i64 %384, 4
  store i64 %2677, i64* %PC, align 8
  %2678 = load i64, i64* %2170, align 8
  store i64 %2678, i64* %RAX, align 8, !tbaa !2428
  %2679 = add i64 %2678, 552
  %2680 = add i64 %384, 11
  store i64 %2680, i64* %PC, align 8
  %2681 = inttoptr i64 %2679 to i64*
  %2682 = load i64, i64* %2681, align 8
  store i64 %2682, i64* %RAX, align 8, !tbaa !2428
  %2683 = add i64 %384, 15
  store i64 %2683, i64* %PC, align 8
  %2684 = load i64, i64* %2170, align 8
  store i64 %2684, i64* %RCX, align 8, !tbaa !2428
  %2685 = add i64 %2684, 400
  %2686 = add i64 %384, 23
  store i64 %2686, i64* %PC, align 8
  %2687 = inttoptr i64 %2685 to i64*
  %2688 = load i64, i64* %2687, align 8
  %2689 = mul i64 %2688, 104
  store i64 %2689, i64* %RCX, align 8, !tbaa !2428
  %2690 = add i64 %2689, %2682
  %2691 = lshr i64 %2690, 63
  %2692 = add i64 %2690, 104
  store i64 %2692, i64* %RAX, align 8, !tbaa !2428
  %2693 = icmp ugt i64 %2690, -105
  %2694 = zext i1 %2693 to i8
  store i8 %2694, i8* %13, align 1, !tbaa !2432
  %2695 = trunc i64 %2692 to i32
  %2696 = and i32 %2695, 255
  %2697 = tail call i32 @llvm.ctpop.i32(i32 %2696) #12
  %2698 = trunc i32 %2697 to i8
  %2699 = and i8 %2698, 1
  %2700 = xor i8 %2699, 1
  store i8 %2700, i8* %20, align 1, !tbaa !2446
  %2701 = xor i64 %2692, %2690
  %2702 = lshr i64 %2701, 4
  %2703 = trunc i64 %2702 to i8
  %2704 = and i8 %2703, 1
  store i8 %2704, i8* %26, align 1, !tbaa !2447
  %2705 = icmp eq i64 %2692, 0
  %2706 = zext i1 %2705 to i8
  store i8 %2706, i8* %29, align 1, !tbaa !2448
  %2707 = lshr i64 %2692, 63
  %2708 = trunc i64 %2707 to i8
  store i8 %2708, i8* %32, align 1, !tbaa !2449
  %2709 = xor i64 %2707, %2691
  %2710 = add nuw nsw i64 %2709, %2707
  %2711 = icmp eq i64 %2710, 2
  %2712 = zext i1 %2711 to i8
  store i8 %2712, i8* %38, align 1, !tbaa !2450
  %2713 = load i64, i64* %RBP, align 8
  %2714 = add i64 %2713, -16
  %2715 = add i64 %384, 34
  store i64 %2715, i64* %PC, align 8
  %2716 = inttoptr i64 %2714 to i64*
  %2717 = load i64, i64* %2716, align 8
  store i64 %2717, i64* %RCX, align 8, !tbaa !2428
  %2718 = add i64 %2717, 560
  %2719 = add i64 %384, 41
  store i64 %2719, i64* %PC, align 8
  %2720 = inttoptr i64 %2718 to i64*
  store i64 %2692, i64* %2720, align 8
  %2721 = load i64, i64* %RBP, align 8
  %2722 = add i64 %2721, -16
  %2723 = load i64, i64* %PC, align 8
  %2724 = add i64 %2723, 4
  store i64 %2724, i64* %PC, align 8
  %2725 = inttoptr i64 %2722 to i64*
  %2726 = load i64, i64* %2725, align 8
  store i64 %2726, i64* %RAX, align 8, !tbaa !2428
  %2727 = add i64 %2726, 568
  %2728 = add i64 %2723, 11
  store i64 %2728, i64* %PC, align 8
  %2729 = inttoptr i64 %2727 to i64*
  %2730 = load i64, i64* %2729, align 8
  store i64 %2730, i64* %RAX, align 8, !tbaa !2428
  %2731 = add i64 %2723, 15
  store i64 %2731, i64* %PC, align 8
  %2732 = load i64, i64* %2725, align 8
  store i64 %2732, i64* %RCX, align 8, !tbaa !2428
  %2733 = add i64 %2732, 424
  %2734 = add i64 %2723, 22
  store i64 %2734, i64* %PC, align 8
  %2735 = inttoptr i64 %2733 to i64*
  %2736 = load i64, i64* %2735, align 8
  %2737 = shl i64 %2736, 6
  store i64 %2737, i64* %RCX, align 8, !tbaa !2428
  %2738 = add i64 %2737, %2730
  store i64 %2738, i64* %RAX, align 8, !tbaa !2428
  %2739 = icmp ult i64 %2738, %2730
  %2740 = icmp ult i64 %2738, %2737
  %2741 = or i1 %2739, %2740
  %2742 = zext i1 %2741 to i8
  store i8 %2742, i8* %13, align 1, !tbaa !2432
  %2743 = trunc i64 %2738 to i32
  %2744 = and i32 %2743, 255
  %2745 = tail call i32 @llvm.ctpop.i32(i32 %2744) #12
  %2746 = trunc i32 %2745 to i8
  %2747 = and i8 %2746, 1
  %2748 = xor i8 %2747, 1
  store i8 %2748, i8* %20, align 1, !tbaa !2446
  %2749 = xor i64 %2730, %2738
  %2750 = lshr i64 %2749, 4
  %2751 = trunc i64 %2750 to i8
  %2752 = and i8 %2751, 1
  store i8 %2752, i8* %26, align 1, !tbaa !2447
  %2753 = icmp eq i64 %2738, 0
  %2754 = zext i1 %2753 to i8
  store i8 %2754, i8* %29, align 1, !tbaa !2448
  %2755 = lshr i64 %2738, 63
  %2756 = trunc i64 %2755 to i8
  store i8 %2756, i8* %32, align 1, !tbaa !2449
  %2757 = lshr i64 %2730, 63
  %2758 = lshr i64 %2736, 57
  %2759 = and i64 %2758, 1
  %2760 = xor i64 %2755, %2757
  %2761 = xor i64 %2755, %2759
  %2762 = add nuw nsw i64 %2760, %2761
  %2763 = icmp eq i64 %2762, 2
  %2764 = zext i1 %2763 to i8
  store i8 %2764, i8* %38, align 1, !tbaa !2450
  %2765 = add i64 %2723, 33
  store i64 %2765, i64* %PC, align 8
  %2766 = load i64, i64* %2725, align 8
  store i64 %2766, i64* %RCX, align 8, !tbaa !2428
  %2767 = add i64 %2766, 576
  %2768 = add i64 %2723, 40
  store i64 %2768, i64* %PC, align 8
  %2769 = inttoptr i64 %2767 to i64*
  store i64 %2738, i64* %2769, align 8
  %2770 = load i64, i64* %RBP, align 8
  %2771 = add i64 %2770, -16
  %2772 = load i64, i64* %PC, align 8
  %2773 = add i64 %2772, 4
  store i64 %2773, i64* %PC, align 8
  %2774 = inttoptr i64 %2771 to i64*
  %2775 = load i64, i64* %2774, align 8
  store i64 %2775, i64* %RAX, align 8, !tbaa !2428
  %2776 = add i64 %2775, 584
  %2777 = add i64 %2772, 11
  store i64 %2777, i64* %PC, align 8
  %2778 = inttoptr i64 %2776 to i64*
  %2779 = load i64, i64* %2778, align 8
  store i64 %2779, i64* %RAX, align 8, !tbaa !2428
  %2780 = add i64 %2772, 15
  store i64 %2780, i64* %PC, align 8
  %2781 = load i64, i64* %2774, align 8
  store i64 %2781, i64* %RCX, align 8, !tbaa !2428
  %2782 = add i64 %2781, 400
  %2783 = add i64 %2772, 22
  store i64 %2783, i64* %PC, align 8
  %2784 = inttoptr i64 %2782 to i64*
  %2785 = load i64, i64* %2784, align 8
  %2786 = shl i64 %2785, 6
  store i64 %2786, i64* %RCX, align 8, !tbaa !2428
  %2787 = add i64 %2786, %2779
  store i64 %2787, i64* %RAX, align 8, !tbaa !2428
  %2788 = icmp ult i64 %2787, %2779
  %2789 = icmp ult i64 %2787, %2786
  %2790 = or i1 %2788, %2789
  %2791 = zext i1 %2790 to i8
  store i8 %2791, i8* %13, align 1, !tbaa !2432
  %2792 = trunc i64 %2787 to i32
  %2793 = and i32 %2792, 255
  %2794 = tail call i32 @llvm.ctpop.i32(i32 %2793) #12
  %2795 = trunc i32 %2794 to i8
  %2796 = and i8 %2795, 1
  %2797 = xor i8 %2796, 1
  store i8 %2797, i8* %20, align 1, !tbaa !2446
  %2798 = xor i64 %2779, %2787
  %2799 = lshr i64 %2798, 4
  %2800 = trunc i64 %2799 to i8
  %2801 = and i8 %2800, 1
  store i8 %2801, i8* %26, align 1, !tbaa !2447
  %2802 = icmp eq i64 %2787, 0
  %2803 = zext i1 %2802 to i8
  store i8 %2803, i8* %29, align 1, !tbaa !2448
  %2804 = lshr i64 %2787, 63
  %2805 = trunc i64 %2804 to i8
  store i8 %2805, i8* %32, align 1, !tbaa !2449
  %2806 = lshr i64 %2779, 63
  %2807 = lshr i64 %2785, 57
  %2808 = and i64 %2807, 1
  %2809 = xor i64 %2804, %2806
  %2810 = xor i64 %2804, %2808
  %2811 = add nuw nsw i64 %2809, %2810
  %2812 = icmp eq i64 %2811, 2
  %2813 = zext i1 %2812 to i8
  store i8 %2813, i8* %38, align 1, !tbaa !2450
  %2814 = add i64 %2772, 33
  store i64 %2814, i64* %PC, align 8
  %2815 = load i64, i64* %2774, align 8
  store i64 %2815, i64* %RCX, align 8, !tbaa !2428
  %2816 = add i64 %2815, 592
  %2817 = add i64 %2772, 40
  store i64 %2817, i64* %PC, align 8
  %2818 = inttoptr i64 %2816 to i64*
  store i64 %2787, i64* %2818, align 8
  %2819 = load i64, i64* %RBP, align 8
  %2820 = add i64 %2819, -16
  %2821 = load i64, i64* %PC, align 8
  %2822 = add i64 %2821, 4
  store i64 %2822, i64* %PC, align 8
  %2823 = inttoptr i64 %2820 to i64*
  %2824 = load i64, i64* %2823, align 8
  store i64 %2824, i64* %RAX, align 8, !tbaa !2428
  %2825 = add i64 %2824, 552
  %2826 = add i64 %2821, 11
  store i64 %2826, i64* %PC, align 8
  %2827 = inttoptr i64 %2825 to i64*
  %2828 = load i64, i64* %2827, align 8
  store i64 %2828, i64* %RAX, align 8, !tbaa !2428
  %2829 = add i64 %2819, -288
  %2830 = add i64 %2821, 18
  store i64 %2830, i64* %PC, align 8
  %2831 = inttoptr i64 %2829 to i64*
  store i64 %2828, i64* %2831, align 8
  %2832 = load i64, i64* %RBP, align 8
  %2833 = add i64 %2832, -16
  %2834 = load i64, i64* %PC, align 8
  %2835 = add i64 %2834, 4
  store i64 %2835, i64* %PC, align 8
  %2836 = inttoptr i64 %2833 to i64*
  %2837 = load i64, i64* %2836, align 8
  store i64 %2837, i64* %RAX, align 8, !tbaa !2428
  %2838 = add i64 %2837, 568
  %2839 = add i64 %2834, 11
  store i64 %2839, i64* %PC, align 8
  %2840 = inttoptr i64 %2838 to i64*
  %2841 = load i64, i64* %2840, align 8
  store i64 %2841, i64* %RAX, align 8, !tbaa !2428
  %2842 = add i64 %2832, -280
  %2843 = add i64 %2834, 18
  store i64 %2843, i64* %PC, align 8
  %2844 = inttoptr i64 %2842 to i64*
  store i64 %2841, i64* %2844, align 8
  %2845 = load i64, i64* %RBP, align 8
  %2846 = add i64 %2845, -272
  %2847 = load i64, i64* %PC, align 8
  %2848 = add i64 %2847, 11
  store i64 %2848, i64* %PC, align 8
  %2849 = inttoptr i64 %2846 to i64*
  store i64 1, i64* %2849, align 8
  %.pre73 = load i64, i64* %PC, align 8
  br label %block_4038c6

block_403704:                                     ; preds = %block_40365d
  %2850 = add i64 %367, 416
  %2851 = add i64 %365, 15
  store i64 %2851, i64* %PC, align 8
  %2852 = inttoptr i64 %2850 to i64*
  store i64 27328512, i64* %2852, align 8
  %2853 = load i64, i64* %RBP, align 8
  %2854 = add i64 %2853, -16
  %2855 = load i64, i64* %PC, align 8
  %2856 = add i64 %2855, 4
  store i64 %2856, i64* %PC, align 8
  %2857 = inttoptr i64 %2854 to i64*
  %2858 = load i64, i64* %2857, align 8
  store i64 %2858, i64* %RAX, align 8, !tbaa !2428
  %2859 = add i64 %2858, 456
  %2860 = add i64 %2855, 15
  store i64 %2860, i64* %PC, align 8
  %2861 = inttoptr i64 %2859 to i64*
  store i64 28900000, i64* %2861, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_403722

block_403c47:                                     ; preds = %block_40394a
  store i64 10000000, i64* %RAX, align 8, !tbaa !2428
  %2862 = add i64 %1373, 7
  store i64 %2862, i64* %PC, align 8
  store i64 10000000, i64* %RCX, align 8, !tbaa !2428
  br label %block_403c5a

block_403f08:                                     ; preds = %block_403ef0
  %2863 = add i64 %2232, 1
  store i64 %2863, i64* %RCX, align 8, !tbaa !2428
  %2864 = icmp eq i64 %2232, -1
  %2865 = icmp eq i64 %2863, 0
  %2866 = or i1 %2864, %2865
  %2867 = zext i1 %2866 to i8
  store i8 %2867, i8* %13, align 1, !tbaa !2432
  %2868 = trunc i64 %2863 to i32
  %2869 = and i32 %2868, 255
  %2870 = tail call i32 @llvm.ctpop.i32(i32 %2869) #12
  %2871 = trunc i32 %2870 to i8
  %2872 = and i8 %2871, 1
  %2873 = xor i8 %2872, 1
  store i8 %2873, i8* %20, align 1, !tbaa !2446
  %2874 = xor i64 %2863, %2232
  %2875 = lshr i64 %2874, 4
  %2876 = trunc i64 %2875 to i8
  %2877 = and i8 %2876, 1
  store i8 %2877, i8* %26, align 1, !tbaa !2447
  %2878 = zext i1 %2865 to i8
  store i8 %2878, i8* %29, align 1, !tbaa !2448
  %2879 = lshr i64 %2863, 63
  %2880 = trunc i64 %2879 to i8
  store i8 %2880, i8* %32, align 1, !tbaa !2449
  %2881 = lshr i64 %2232, 63
  %2882 = xor i64 %2879, %2881
  %2883 = add nuw nsw i64 %2882, %2879
  %2884 = icmp eq i64 %2883, 2
  %2885 = zext i1 %2884 to i8
  store i8 %2885, i8* %38, align 1, !tbaa !2450
  %2886 = add i64 %2226, 22
  store i64 %2886, i64* %PC, align 8
  store i64 %2863, i64* %2231, align 8
  %2887 = load i64, i64* %RBP, align 8
  %2888 = add i64 %2887, -280
  %2889 = load i64, i64* %PC, align 8
  %2890 = add i64 %2889, 7
  store i64 %2890, i64* %PC, align 8
  %2891 = inttoptr i64 %2888 to i64*
  %2892 = load i64, i64* %2891, align 8
  %2893 = add i64 %2892, 64
  store i64 %2893, i64* %RAX, align 8, !tbaa !2428
  %2894 = icmp ugt i64 %2892, -65
  %2895 = zext i1 %2894 to i8
  store i8 %2895, i8* %13, align 1, !tbaa !2432
  %2896 = trunc i64 %2893 to i32
  %2897 = and i32 %2896, 255
  %2898 = tail call i32 @llvm.ctpop.i32(i32 %2897) #12
  %2899 = trunc i32 %2898 to i8
  %2900 = and i8 %2899, 1
  %2901 = xor i8 %2900, 1
  store i8 %2901, i8* %20, align 1, !tbaa !2446
  %2902 = xor i64 %2893, %2892
  %2903 = lshr i64 %2902, 4
  %2904 = trunc i64 %2903 to i8
  %2905 = and i8 %2904, 1
  store i8 %2905, i8* %26, align 1, !tbaa !2447
  %2906 = icmp eq i64 %2893, 0
  %2907 = zext i1 %2906 to i8
  store i8 %2907, i8* %29, align 1, !tbaa !2448
  %2908 = lshr i64 %2893, 63
  %2909 = trunc i64 %2908 to i8
  store i8 %2909, i8* %32, align 1, !tbaa !2449
  %2910 = lshr i64 %2892, 63
  %2911 = xor i64 %2908, %2910
  %2912 = add nuw nsw i64 %2911, %2908
  %2913 = icmp eq i64 %2912, 2
  %2914 = zext i1 %2913 to i8
  store i8 %2914, i8* %38, align 1, !tbaa !2450
  %2915 = add i64 %2889, 18
  store i64 %2915, i64* %PC, align 8
  store i64 %2893, i64* %2891, align 8
  %2916 = load i64, i64* %PC, align 8
  %2917 = add i64 %2916, -64
  store i64 %2917, i64* %PC, align 8, !tbaa !2428
  br label %block_403ef0

block_403d03:                                     ; preds = %block_4038c6
  %2918 = add i64 %2516, 7
  store i64 %2918, i64* %PC, align 8
  %2919 = load i64, i64* %2479, align 8
  store i64 %2919, i64* %RAX, align 8, !tbaa !2428
  %2920 = add i64 %2516, 11
  store i64 %2920, i64* %PC, align 8
  %2921 = load i64, i64* %2483, align 8
  store i64 %2921, i64* %RCX, align 8, !tbaa !2428
  %2922 = add i64 %2921, 408
  %2923 = add i64 %2516, 18
  store i64 %2923, i64* %PC, align 8
  %2924 = inttoptr i64 %2922 to i64*
  %2925 = load i64, i64* %2924, align 8
  %2926 = add i64 %2925, 1
  store i64 %2926, i64* %RCX, align 8, !tbaa !2428
  %2927 = lshr i64 %2926, 63
  %2928 = sub i64 %2919, %2926
  %2929 = icmp ult i64 %2919, %2926
  %2930 = zext i1 %2929 to i8
  store i8 %2930, i8* %13, align 1, !tbaa !2432
  %2931 = trunc i64 %2928 to i32
  %2932 = and i32 %2931, 255
  %2933 = tail call i32 @llvm.ctpop.i32(i32 %2932) #12
  %2934 = trunc i32 %2933 to i8
  %2935 = and i8 %2934, 1
  %2936 = xor i8 %2935, 1
  store i8 %2936, i8* %20, align 1, !tbaa !2446
  %2937 = xor i64 %2926, %2919
  %2938 = xor i64 %2937, %2928
  %2939 = lshr i64 %2938, 4
  %2940 = trunc i64 %2939 to i8
  %2941 = and i8 %2940, 1
  store i8 %2941, i8* %26, align 1, !tbaa !2447
  %2942 = icmp eq i64 %2928, 0
  %2943 = zext i1 %2942 to i8
  store i8 %2943, i8* %29, align 1, !tbaa !2448
  %2944 = lshr i64 %2928, 63
  %2945 = trunc i64 %2944 to i8
  store i8 %2945, i8* %32, align 1, !tbaa !2449
  %2946 = lshr i64 %2919, 63
  %2947 = xor i64 %2927, %2946
  %2948 = xor i64 %2944, %2946
  %2949 = add nuw nsw i64 %2948, %2947
  %2950 = icmp eq i64 %2949, 2
  %2951 = zext i1 %2950 to i8
  store i8 %2951, i8* %38, align 1, !tbaa !2450
  %.v90 = select i1 %2942, i64 44, i64 31
  %2952 = add i64 %2516, %.v90
  store i64 %2952, i64* %PC, align 8, !tbaa !2428
  br i1 %2942, label %block_403d2f, label %block_403d22
}

; Function Attrs: noinline
define %struct.Memory* @sub_401810_global_opt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401810:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -72
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 5, i64* %RAX, align 8, !tbaa !2428
  %17 = add i64 %6, -16
  %18 = add i64 %9, 20
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %17 to i64*
  store i64 -1, i64* %19, align 8
  %20 = load i64, i64* %PC, align 8
  %21 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 408) to i64*), align 8
  %22 = add i64 %21, -15000
  %23 = icmp ult i64 %21, 15000
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %11, align 1, !tbaa !2432
  %25 = trunc i64 %22 to i32
  %26 = and i32 %25, 255
  %27 = tail call i32 @llvm.ctpop.i32(i32 %26) #12
  %28 = trunc i32 %27 to i8
  %29 = and i8 %28, 1
  %30 = xor i8 %29, 1
  store i8 %30, i8* %12, align 1, !tbaa !2446
  %31 = xor i64 %21, 16
  %32 = xor i64 %31, %22
  %33 = lshr i64 %32, 4
  %34 = trunc i64 %33 to i8
  %35 = and i8 %34, 1
  store i8 %35, i8* %13, align 1, !tbaa !2447
  %36 = icmp eq i64 %22, 0
  %37 = zext i1 %36 to i8
  store i8 %37, i8* %14, align 1, !tbaa !2448
  %38 = lshr i64 %22, 63
  %39 = trunc i64 %38 to i8
  store i8 %39, i8* %15, align 1, !tbaa !2449
  %40 = lshr i64 %21, 63
  %41 = xor i64 %38, %40
  %42 = add nuw nsw i64 %41, %40
  %43 = icmp eq i64 %42, 2
  %44 = zext i1 %43 to i8
  store i8 %44, i8* %16, align 1, !tbaa !2450
  %45 = load i32, i32* %EAX, align 4
  %46 = zext i32 %45 to i64
  %47 = icmp ne i8 %39, 0
  %48 = xor i1 %47, %43
  %49 = or i1 %36, %48
  %50 = load i64, i64* %RAX, align 8, !tbaa !2428
  %51 = select i1 %49, i64 %46, i64 %50
  %52 = and i64 %51, 4294967295
  store i64 %52, i64* %RAX, align 8, !tbaa !2428
  %sext = shl i64 %51, 32
  %53 = ashr exact i64 %sext, 32
  store i64 %53, i64* %RCX, align 8, !tbaa !2428
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  %56 = add i64 %20, 22
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  store i64 %53, i64* %57, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40183b

block_4018fc:                                     ; preds = %block_4018d3
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 139), i64* %RDI, align 8, !tbaa !2428
  %58 = add i64 %155, 14
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %143, align 8
  store i64 %59, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %60 = add i64 %155, -4268
  %61 = add i64 %155, 21
  %62 = load i64, i64* %RSP, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64, align 8
  store i64 %63, i64* %RSP, align 8, !tbaa !2428
  store i64 %60, i64* %PC, align 8, !tbaa !2428
  %65 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %132)
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -44
  %68 = load i32, i32* %EAX, align 4
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %71, align 4
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_401914

block_40183b:                                     ; preds = %block_401978, %block_401810
  %72 = phi i64 [ %.pre, %block_401810 ], [ %204, %block_401978 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401810 ], [ %MEMORY.2, %block_401978 ]
  %73 = load i64, i64* %RBP, align 8
  %74 = add i64 %73, -8
  %75 = add i64 %72, 5
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i64*
  %77 = load i64, i64* %76, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %78 = trunc i64 %77 to i32
  %79 = and i32 %78, 255
  %80 = tail call i32 @llvm.ctpop.i32(i32 %79) #12
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  %83 = xor i8 %82, 1
  store i8 %83, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %84 = icmp eq i64 %77, 0
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %14, align 1, !tbaa !2448
  %86 = lshr i64 %77, 63
  %87 = trunc i64 %86 to i8
  store i8 %87, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v21 = select i1 %84, i64 334, i64 11
  %88 = add i64 %72, %.v21
  store i64 %88, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_401989.loopexit, label %block_401846

block_40195a:                                     ; preds = %block_40194f
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 207), i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %89 = add i64 %173, -4362
  %90 = add i64 %173, 17
  %91 = load i64, i64* %RSP, align 8, !tbaa !2428
  %92 = add i64 %91, -8
  %93 = inttoptr i64 %92 to i64*
  store i64 %90, i64* %93, align 8
  store i64 %92, i64* %RSP, align 8, !tbaa !2428
  store i64 %89, i64* %PC, align 8, !tbaa !2428
  %94 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %95 = load i64, i64* %PC, align 8
  store i64 4294967295, i64* %RDI, align 8, !tbaa !2428
  %96 = load i64, i64* %RBP, align 8
  %97 = add i64 %96, -52
  %98 = load i32, i32* %EAX, align 4
  %99 = add i64 %95, 8
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %97 to i32*
  store i32 %98, i32* %100, align 4
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, -4227
  %103 = add i64 %101, 5
  %104 = load i64, i64* %RSP, align 8, !tbaa !2428
  %105 = add i64 %104, -8
  %106 = inttoptr i64 %105 to i64*
  store i64 %103, i64* %106, align 8
  store i64 %105, i64* %RSP, align 8, !tbaa !2428
  store i64 %102, i64* %PC, align 8, !tbaa !2428
  %107 = tail call fastcc %struct.Memory* @ext_4008f0_exit(%struct.State* nonnull %0, %struct.Memory* %94)
  %108 = load i64, i64* %PC, align 8
  %109 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %108, %struct.Memory* %107)
  ret %struct.Memory* %109

block_401937:                                     ; preds = %block_401919
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 173), i64* %RDI, align 8, !tbaa !2428
  %110 = add i64 %359, 14
  store i64 %110, i64* %PC, align 8
  %111 = load i64, i64* %347, align 8
  store i64 %111, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %112 = add i64 %359, -4327
  %113 = add i64 %359, 21
  %114 = load i64, i64* %RSP, align 8, !tbaa !2428
  %115 = add i64 %114, -8
  %116 = inttoptr i64 %115 to i64*
  store i64 %113, i64* %116, align 8
  store i64 %115, i64* %RSP, align 8, !tbaa !2428
  store i64 %112, i64* %PC, align 8, !tbaa !2428
  %117 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %336)
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -48
  %120 = load i32, i32* %EAX, align 4
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %119 to i32*
  store i32 %120, i32* %123, align 4
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_40194f

block_4018bf:                                     ; preds = %block_401846
  %124 = add i64 %329, 202
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  br label %block_401989

block_401914:                                     ; preds = %block_4018d3, %block_4018fc
  %125 = phi i64 [ %155, %block_4018d3 ], [ %.pre18, %block_4018fc ]
  %MEMORY.1 = phi %struct.Memory* [ %132, %block_4018d3 ], [ %65, %block_4018fc ]
  %126 = add i64 %125, 5
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br label %block_401919

block_4018d3:                                     ; preds = %block_4018c4
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  store i64 -1, i64* %RSI, align 8, !tbaa !2428
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2432
  store i8 1, i8* %12, align 1, !tbaa !2446
  store i8 1, i8* %14, align 1, !tbaa !2448
  store i8 0, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %13, align 1, !tbaa !2447
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  %127 = add i64 %371, -723
  %128 = add i64 %371, 26
  %129 = load i64, i64* %RSP, align 8, !tbaa !2428
  %130 = add i64 %129, -8
  %131 = inttoptr i64 %130 to i64*
  store i64 %128, i64* %131, align 8
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  store i64 %127, i64* %PC, align 8, !tbaa !2428
  %132 = tail call %struct.Memory* @sub_401600_suspend_impl_renamed_(%struct.State* nonnull %0, i64 %127, %struct.Memory* %305)
  %133 = load i64, i64* %RBP, align 8
  %134 = add i64 %133, -8
  %135 = load i64, i64* %RAX, align 8
  %136 = load i64, i64* %PC, align 8
  %137 = add i64 %136, 4
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %134 to i64*
  store i64 %135, i64* %138, align 8
  %139 = load i64, i64* %RBP, align 8
  %140 = add i64 %139, -8
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, 5
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %140 to i64*
  %144 = load i64, i64* %143, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %145 = trunc i64 %144 to i32
  %146 = and i32 %145, 255
  %147 = tail call i32 @llvm.ctpop.i32(i32 %146) #12
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  store i8 %150, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %151 = icmp eq i64 %144, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %14, align 1, !tbaa !2448
  %153 = lshr i64 %144, 63
  %154 = trunc i64 %153 to i8
  store i8 %154, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v23 = select i1 %151, i64 35, i64 11
  %155 = add i64 %141, %.v23
  store i64 %155, i64* %PC, align 8, !tbaa !2428
  br i1 %151, label %block_401914, label %block_4018fc

block_40194f:                                     ; preds = %block_401919, %block_401937
  %156 = phi i64 [ %359, %block_401919 ], [ %.pre20, %block_401937 ]
  %157 = phi i64 [ %343, %block_401919 ], [ %.pre19, %block_401937 ]
  %MEMORY.2 = phi %struct.Memory* [ %336, %block_401919 ], [ %117, %block_401937 ]
  %158 = add i64 %157, -8
  %159 = add i64 %156, 5
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i64*
  %161 = load i64, i64* %160, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %162 = trunc i64 %161 to i32
  %163 = and i32 %162, 255
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #12
  %165 = trunc i32 %164 to i8
  %166 = and i8 %165, 1
  %167 = xor i8 %166, 1
  store i8 %167, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %168 = icmp eq i64 %161, 0
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %14, align 1, !tbaa !2448
  %170 = lshr i64 %161, 63
  %171 = trunc i64 %170 to i8
  store i8 %171, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %172 = icmp ne i8 %171, 0
  %.v = select i1 %172, i64 6, i64 36
  %173 = add i64 %159, %.v
  store i64 %173, i64* %PC, align 8, !tbaa !2428
  br i1 %172, label %block_40195a, label %block_401978

block_401978:                                     ; preds = %block_40194f
  %174 = add i64 %157, -16
  %175 = add i64 %173, 4
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %174 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = add i64 %177, -1
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = icmp ne i64 %177, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %11, align 1, !tbaa !2432
  %181 = trunc i64 %178 to i32
  %182 = and i32 %181, 255
  %183 = tail call i32 @llvm.ctpop.i32(i32 %182) #12
  %184 = trunc i32 %183 to i8
  %185 = and i8 %184, 1
  %186 = xor i8 %185, 1
  store i8 %186, i8* %12, align 1, !tbaa !2446
  %187 = xor i64 %177, 16
  %188 = xor i64 %187, %178
  %189 = lshr i64 %188, 4
  %190 = trunc i64 %189 to i8
  %191 = and i8 %190, 1
  store i8 %191, i8* %13, align 1, !tbaa !2447
  %192 = icmp eq i64 %178, 0
  %193 = zext i1 %192 to i8
  store i8 %193, i8* %14, align 1, !tbaa !2448
  %194 = lshr i64 %178, 63
  %195 = trunc i64 %194 to i8
  store i8 %195, i8* %15, align 1, !tbaa !2449
  %196 = lshr i64 %177, 63
  %197 = xor i64 %194, %196
  %198 = xor i64 %194, 1
  %199 = add nuw nsw i64 %197, %198
  %200 = icmp eq i64 %199, 2
  %201 = zext i1 %200 to i8
  store i8 %201, i8* %16, align 1, !tbaa !2450
  %202 = add i64 %173, 12
  store i64 %202, i64* %PC, align 8
  store i64 %178, i64* %176, align 8
  %203 = load i64, i64* %PC, align 8
  %204 = add i64 %203, -329
  store i64 %204, i64* %PC, align 8, !tbaa !2428
  br label %block_40183b

block_401989.loopexit:                            ; preds = %block_40183b
  br label %block_401989

block_401989:                                     ; preds = %block_401989.loopexit, %block_4018bf
  %205 = phi i64 [ %124, %block_4018bf ], [ %88, %block_401989.loopexit ]
  %MEMORY.3 = phi %struct.Memory* [ %305, %block_4018bf ], [ %MEMORY.0, %block_401989.loopexit ]
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 236), i64* %RDI, align 8, !tbaa !2428
  %206 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 616) to i64*), align 8
  store i64 %206, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %207 = add i64 %205, -4409
  %208 = add i64 %205, 25
  %209 = load i64, i64* %RSP, align 8, !tbaa !2428
  %210 = add i64 %209, -8
  %211 = inttoptr i64 %210 to i64*
  store i64 %208, i64* %211, align 8
  store i64 %210, i64* %RSP, align 8, !tbaa !2428
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  %212 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.3)
  %213 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  %214 = load i64, i64* %RBP, align 8
  %215 = add i64 %214, -56
  %216 = load i32, i32* %EAX, align 4
  %217 = add i64 %213, 7
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %215 to i32*
  store i32 %216, i32* %218, align 4
  %219 = load i64, i64* %RSI, align 8
  %220 = load i64, i64* %PC, align 8
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %221 = load i64, i64* %RSP, align 8
  %222 = add i64 %221, 64
  store i64 %222, i64* %RSP, align 8, !tbaa !2428
  %223 = icmp ugt i64 %221, -65
  %224 = zext i1 %223 to i8
  store i8 %224, i8* %11, align 1, !tbaa !2432
  %225 = trunc i64 %222 to i32
  %226 = and i32 %225, 255
  %227 = tail call i32 @llvm.ctpop.i32(i32 %226) #12
  %228 = trunc i32 %227 to i8
  %229 = and i8 %228, 1
  %230 = xor i8 %229, 1
  store i8 %230, i8* %12, align 1, !tbaa !2446
  %231 = xor i64 %222, %221
  %232 = lshr i64 %231, 4
  %233 = trunc i64 %232 to i8
  %234 = and i8 %233, 1
  store i8 %234, i8* %13, align 1, !tbaa !2447
  %235 = icmp eq i64 %222, 0
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %14, align 1, !tbaa !2448
  %237 = lshr i64 %222, 63
  %238 = trunc i64 %237 to i8
  store i8 %238, i8* %15, align 1, !tbaa !2449
  %239 = lshr i64 %221, 63
  %240 = xor i64 %237, %239
  %241 = add nuw nsw i64 %240, %237
  %242 = icmp eq i64 %241, 2
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %16, align 1, !tbaa !2450
  %244 = add i64 %220, 8
  store i64 %244, i64* %PC, align 8
  %245 = add i64 %221, 72
  %246 = inttoptr i64 %222 to i64*
  %247 = load i64, i64* %246, align 8
  store i64 %247, i64* %RBP, align 8, !tbaa !2428
  store i64 %245, i64* %RSP, align 8, !tbaa !2428
  %248 = add i64 %220, 9
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %245 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %PC, align 8, !tbaa !2428
  %251 = add i64 %221, 80
  store i64 %251, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %212

block_401846:                                     ; preds = %block_40183b
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 35), i64* %RDI, align 8, !tbaa !2428
  %252 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 424) to i64*), align 8
  store i64 %252, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %253 = add i64 %88, -4086
  %254 = add i64 %88, 25
  %255 = load i64, i64* %RSP, align 8, !tbaa !2428
  %256 = add i64 %255, -8
  %257 = inttoptr i64 %256 to i64*
  store i64 %254, i64* %257, align 8
  store i64 %256, i64* %RSP, align 8, !tbaa !2428
  store i64 %253, i64* %PC, align 8, !tbaa !2428
  %258 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %259 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %260 = load i64, i64* %RBP, align 8
  %261 = add i64 %260, -20
  %262 = load i32, i32* %EAX, align 4
  %263 = add i64 %259, 13
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %261 to i32*
  store i32 %262, i32* %264, align 4
  %265 = load i64, i64* %PC, align 8
  %266 = add i64 %265, 5988
  %267 = add i64 %265, 5
  %268 = load i64, i64* %RSP, align 8, !tbaa !2428
  %269 = add i64 %268, -8
  %270 = inttoptr i64 %269 to i64*
  store i64 %267, i64* %270, align 8
  store i64 %269, i64* %RSP, align 8, !tbaa !2428
  store i64 %266, i64* %PC, align 8, !tbaa !2428
  %271 = tail call %struct.Memory* @sub_402fd0_primal_net_simplex_renamed_(%struct.State* nonnull %0, i64 %266, %struct.Memory* %258)
  %272 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 69), i64* %RDI, align 8, !tbaa !2428
  %273 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 600) to i64*), align 8
  store i64 %273, i64* %RSI, align 8, !tbaa !2428
  %274 = load i64, i64* %RBP, align 8
  %275 = add i64 %274, -32
  %276 = load i64, i64* %RAX, align 8
  %277 = add i64 %272, 22
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %275 to i64*
  store i64 %276, i64* %278, align 8
  %279 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %280 = add i64 %279, -4151
  %281 = add i64 %279, 7
  %282 = load i64, i64* %RSP, align 8, !tbaa !2428
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284, align 8
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  %285 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %271)
  %286 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %287 = load i64, i64* %RBP, align 8
  %288 = add i64 %287, -36
  %289 = load i32, i32* %EAX, align 4
  %290 = add i64 %286, 13
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %288 to i32*
  store i32 %289, i32* %291, align 4
  %292 = load i64, i64* %PC, align 8
  %293 = add i64 %292, 1301
  %294 = add i64 %292, 5
  %295 = load i64, i64* %RSP, align 8, !tbaa !2428
  %296 = add i64 %295, -8
  %297 = inttoptr i64 %296 to i64*
  store i64 %294, i64* %297, align 8
  store i64 %296, i64* %RSP, align 8, !tbaa !2428
  store i64 %293, i64* %PC, align 8, !tbaa !2428
  %298 = tail call %struct.Memory* @sub_401db0_flow_cost_renamed_(%struct.State* nonnull %0, i64 %293, %struct.Memory* %285)
  %299 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 103), i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %300 = add i64 %299, -4176
  %301 = add i64 %299, 17
  %302 = load i64, i64* %RSP, align 8, !tbaa !2428
  %303 = add i64 %302, -8
  %304 = inttoptr i64 %303 to i64*
  store i64 %301, i64* %304, align 8
  store i64 %303, i64* %RSP, align 8, !tbaa !2428
  store i64 %300, i64* %PC, align 8, !tbaa !2428
  %305 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %298)
  %306 = load i64, i64* %RBP, align 8
  %307 = add i64 %306, -16
  %308 = load i64, i64* %PC, align 8
  %309 = add i64 %308, 5
  store i64 %309, i64* %PC, align 8
  %310 = inttoptr i64 %307 to i64*
  %311 = load i64, i64* %310, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %312 = trunc i64 %311 to i32
  %313 = and i32 %312, 255
  %314 = tail call i32 @llvm.ctpop.i32(i32 %313) #12
  %315 = trunc i32 %314 to i8
  %316 = and i8 %315, 1
  %317 = xor i8 %316, 1
  store i8 %317, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %318 = icmp eq i64 %311, 0
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %14, align 1, !tbaa !2448
  %320 = lshr i64 %311, 63
  %321 = trunc i64 %320 to i8
  store i8 %321, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %322 = add i64 %306, -40
  %323 = load i32, i32* %EAX, align 4
  %324 = add i64 %308, 8
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %322 to i32*
  store i32 %323, i32* %325, align 4
  %326 = load i64, i64* %PC, align 8
  %327 = load i8, i8* %14, align 1, !tbaa !2448
  %328 = icmp eq i8 %327, 0
  %.v34 = select i1 %328, i64 11, i64 6
  %329 = add i64 %326, %.v34
  store i64 %329, i64* %PC, align 8, !tbaa !2428
  br i1 %328, label %block_4018c4, label %block_4018bf

block_401919:                                     ; preds = %block_4018c4, %block_401914
  %330 = phi i64 [ %371, %block_4018c4 ], [ %126, %block_401914 ]
  %MEMORY.4 = phi %struct.Memory* [ %305, %block_4018c4 ], [ %MEMORY.1, %block_401914 ]
  store i64 ptrtoint (%net_type* @net to i64), i64* %RDI, align 8, !tbaa !2428
  %331 = add i64 %330, -2057
  %332 = add i64 %330, 15
  %333 = load i64, i64* %RSP, align 8, !tbaa !2428
  %334 = add i64 %333, -8
  %335 = inttoptr i64 %334 to i64*
  store i64 %332, i64* %335, align 8
  store i64 %334, i64* %RSP, align 8, !tbaa !2428
  store i64 %331, i64* %PC, align 8, !tbaa !2428
  %336 = tail call %struct.Memory* @sub_401110_price_out_impl_renamed_(%struct.State* nonnull %0, i64 %331, %struct.Memory* %MEMORY.4)
  %337 = load i64, i64* %RBP, align 8
  %338 = add i64 %337, -8
  %339 = load i64, i64* %RAX, align 8
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %338 to i64*
  store i64 %339, i64* %342, align 8
  %343 = load i64, i64* %RBP, align 8
  %344 = add i64 %343, -8
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, 5
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %344 to i64*
  %348 = load i64, i64* %347, align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %349 = trunc i64 %348 to i32
  %350 = and i32 %349, 255
  %351 = tail call i32 @llvm.ctpop.i32(i32 %350) #12
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  store i8 %354, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %355 = icmp eq i64 %348, 0
  %356 = zext i1 %355 to i8
  store i8 %356, i8* %14, align 1, !tbaa !2448
  %357 = lshr i64 %348, 63
  %358 = trunc i64 %357 to i8
  store i8 %358, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v24 = select i1 %355, i64 35, i64 11
  %359 = add i64 %345, %.v24
  store i64 %359, i64* %PC, align 8, !tbaa !2428
  br i1 %355, label %block_40194f, label %block_401937

block_4018c4:                                     ; preds = %block_401846
  %360 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%net_type* @net to i64), i64 440) to i64*), align 8
  store i8 0, i8* %11, align 1, !tbaa !2432
  %361 = trunc i64 %360 to i32
  %362 = and i32 %361, 255
  %363 = tail call i32 @llvm.ctpop.i32(i32 %362) #12
  %364 = trunc i32 %363 to i8
  %365 = and i8 %364, 1
  %366 = xor i8 %365, 1
  store i8 %366, i8* %12, align 1, !tbaa !2446
  store i8 0, i8* %13, align 1, !tbaa !2447
  %367 = icmp eq i64 %360, 0
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %14, align 1, !tbaa !2448
  %369 = lshr i64 %360, 63
  %370 = trunc i64 %369 to i8
  store i8 %370, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  %.v22 = select i1 %367, i64 85, i64 15
  %371 = add i64 %329, %.v22
  store i64 %371, i64* %PC, align 8, !tbaa !2428
  br i1 %367, label %block_401919, label %block_4018d3
}

; Function Attrs: noinline
define %struct.Memory* @sub_400940_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400940:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %PC, align 8
  store i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)) to i8), i8* %9, align 1, !tbaa !2432
  %10 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)) to i32), i32 255)) #12
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !2446
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (i64* @stdout to i64), i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64))), i64 4) to i8), i8 1), i8* %15, align 1, !tbaa !2447
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 0) to i8), i8* %16, align 1, !tbaa !2448
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 63) to i8), i8* %17, align 1, !tbaa !2449
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (i64* @stdout to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %18, align 1, !tbaa !2450
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %19 = add i64 %8, select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 0), i64 39, i64 16)
  store i64 %19, i64* %PC, align 8, !tbaa !2428
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 0), label %block_400968, label %block_400951

block_400951:                                     ; preds = %block_400940
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %9, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %20 = add i64 %8, add (i64 select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64 ptrtoint (i64* @stdout to i64)), i64 0), i64 39, i64 16), i64 23)
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  br label %block_400968

block_400968:                                     ; preds = %block_400951, %block_400940
  %21 = phi i64 [ %20, %block_400951 ], [ %19, %block_400940 ]
  %22 = add i64 %21, 1
  store i64 %22, i64* %PC, align 8
  %23 = load i64, i64* %7, align 8
  store i64 %23, i64* %RBP, align 8, !tbaa !2428
  store i64 %5, i64* %RSP, align 8, !tbaa !2428
  %24 = add i64 %21, 2
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %5 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %PC, align 8, !tbaa !2428
  %27 = add i64 %5, 8
  store i64 %27, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400900__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_400900:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2447
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %11 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %RSI, align 8, !tbaa !2428
  store i64 %12, i64* %RDX, align 8, !tbaa !2428
  %15 = and i64 %12, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 240
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #12
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %4, align 1, !tbaa !2446
  %22 = icmp eq i64 %15, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %5, align 1, !tbaa !2448
  %24 = lshr i64 %12, 63
  %25 = trunc i64 %24 to i8
  store i8 %25, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2447
  %26 = load i64, i64* %RAX, align 8
  %27 = add i64 %1, 14
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %15, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %15, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %28, i64* %33, align 16
  %34 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_404710___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_4046a0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %35 = add i64 %34, 27
  %36 = add i64 %15, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37, align 8
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %38 = load i64, i64* getelementptr inbounds (%seg_605ff0__got_type, %seg_605ff0__got_type* @seg_605ff0__got, i64 0, i32 0), align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = tail call fastcc %struct.Memory* @ext_608f68___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC, align 8
  %42 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %41, %struct.Memory* %39)
  ret %struct.Memory* %42
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402340_dual_feasible(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402340:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -72
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 64
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #12
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -24
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %10, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = add i64 %48, 576
  %50 = add i64 %45, 11
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %43, -32
  %54 = add i64 %45, 15
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %53 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -16
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %RDI, align 8, !tbaa !2428
  %62 = add i64 %61, 568
  %63 = add i64 %58, 11
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %RDI, align 8, !tbaa !2428
  %66 = add i64 %56, -24
  %67 = add i64 %58, 15
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %66 to i64*
  store i64 %65, i64* %68, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40236a

block_40244e:                                     ; preds = %block_402417, %block_4023f8
  %.sink4 = phi i64 [ %290, %block_402417 ], [ %243, %block_4023f8 ]
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 611), i64* %RSI, align 8, !tbaa !2428
  %69 = load i64, i64* @stderr, align 64
  store i64 %69, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %70 = add i64 %.sink4, -7102
  %71 = add i64 %.sink4, 25
  %72 = load i64, i64* %RSP, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %71, i64* %74, align 8
  store i64 %73, i64* %RSP, align 8, !tbaa !2428
  store i64 %70, i64* %PC, align 8, !tbaa !2428
  %75 = tail call fastcc %struct.Memory* @ext_608ff8_fprintf(%struct.State* nonnull %0, %struct.Memory* %2)
  %76 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 634), i64* %RSI, align 8, !tbaa !2428
  %77 = load i64, i64* @stderr, align 64
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -60
  %80 = load i32, i32* %EAX, align 4
  %81 = add i64 %76, 21
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i32*
  store i32 %80, i32* %82, align 4
  %83 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %84 = add i64 %83, -7148
  %85 = add i64 %83, 7
  %86 = load i64, i64* %RSP, align 8, !tbaa !2428
  %87 = add i64 %86, -8
  %88 = inttoptr i64 %87 to i64*
  store i64 %85, i64* %88, align 8
  store i64 %87, i64* %RSP, align 8, !tbaa !2428
  store i64 %84, i64* %PC, align 8, !tbaa !2428
  %89 = tail call fastcc %struct.Memory* @ext_608ff8_fprintf(%struct.State* nonnull %0, %struct.Memory* %75)
  %90 = load i64, i64* %RBP, align 8
  %91 = add i64 %90, -8
  %92 = load i64, i64* %PC, align 8
  %93 = add i64 %92, 8
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %91 to i64*
  store i64 1, i64* %94, align 8
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -64
  %97 = load i32, i32* %EAX, align 4
  %98 = load i64, i64* %PC, align 8
  %99 = add i64 %98, 3
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %96 to i32*
  store i32 %97, i32* %100, align 4
  %.pre28 = load i64, i64* %PC, align 8
  br label %block_40248e

block_4023c3:                                     ; preds = %block_4023af
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -44
  %103 = add i64 %210, 8
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, -2
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RAX, align 8, !tbaa !2428
  %108 = icmp ult i32 %105, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %14, align 1, !tbaa !2432
  %110 = and i32 %106, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #12
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %21, align 1, !tbaa !2446
  %115 = xor i32 %106, %105
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2447
  %119 = icmp eq i32 %106, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %29, align 1, !tbaa !2448
  %121 = lshr i32 %106, 31
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %32, align 1, !tbaa !2449
  %123 = lshr i32 %105, 31
  %124 = xor i32 %121, %123
  %125 = add nuw nsw i32 %124, %123
  %126 = icmp eq i32 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %38, align 1, !tbaa !2450
  %128 = add i64 %101, -56
  %129 = add i64 %210, 14
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i32*
  store i32 %106, i32* %130, align 4
  %131 = load i64, i64* %PC, align 8
  %132 = load i8, i8* %29, align 1, !tbaa !2448
  %133 = icmp ne i8 %132, 0
  %.v40 = select i1 %133, i64 49, i64 6
  %134 = add i64 %131, %.v40
  store i64 %134, i64* %PC, align 8, !tbaa !2428
  %135 = icmp eq i8 %132, 1
  br i1 %135, label %block_402402, label %block_4023d7

block_402441:                                     ; preds = %block_40236a
  %136 = add i64 %142, -8
  %137 = add i64 %176, 8
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i64*
  store i64 0, i64* %138, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, 69
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  br label %block_40248e

block_40236a:                                     ; preds = %block_40242b, %block_402340
  %141 = phi i64 [ %242, %block_40242b ], [ %.pre, %block_402340 ]
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -24
  %144 = add i64 %141, 4
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i64*
  %146 = load i64, i64* %145, align 8
  store i64 %146, i64* %RAX, align 8, !tbaa !2428
  %147 = add i64 %142, -32
  %148 = add i64 %141, 8
  store i64 %148, i64* %PC, align 8
  %149 = inttoptr i64 %147 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = sub i64 %146, %150
  %152 = icmp ult i64 %146, %150
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %14, align 1, !tbaa !2432
  %154 = trunc i64 %151 to i32
  %155 = and i32 %154, 255
  %156 = tail call i32 @llvm.ctpop.i32(i32 %155) #12
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  %159 = xor i8 %158, 1
  store i8 %159, i8* %21, align 1, !tbaa !2446
  %160 = xor i64 %150, %146
  %161 = xor i64 %160, %151
  %162 = lshr i64 %161, 4
  %163 = trunc i64 %162 to i8
  %164 = and i8 %163, 1
  store i8 %164, i8* %26, align 1, !tbaa !2447
  %165 = icmp eq i64 %151, 0
  %166 = zext i1 %165 to i8
  store i8 %166, i8* %29, align 1, !tbaa !2448
  %167 = lshr i64 %151, 63
  %168 = trunc i64 %167 to i8
  store i8 %168, i8* %32, align 1, !tbaa !2449
  %169 = lshr i64 %146, 63
  %170 = lshr i64 %150, 63
  %171 = xor i64 %170, %169
  %172 = xor i64 %167, %169
  %173 = add nuw nsw i64 %172, %171
  %174 = icmp eq i64 %173, 2
  %175 = zext i1 %174 to i8
  store i8 %175, i8* %38, align 1, !tbaa !2450
  %.v = select i1 %152, i64 14, i64 215
  %176 = add i64 %141, %.v
  store i64 %176, i64* %PC, align 8, !tbaa !2428
  br i1 %152, label %block_402378, label %block_402441

block_4023af:                                     ; preds = %block_402378
  %177 = load i64, i64* %RBP, align 8
  %178 = add i64 %177, -44
  %179 = add i64 %449, 8
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = add i32 %181, -2
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %RAX, align 8, !tbaa !2428
  %184 = icmp ult i32 %181, 2
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %14, align 1, !tbaa !2432
  %186 = and i32 %182, 255
  %187 = tail call i32 @llvm.ctpop.i32(i32 %186) #12
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %21, align 1, !tbaa !2446
  %191 = xor i32 %182, %181
  %192 = lshr i32 %191, 4
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  store i8 %194, i8* %26, align 1, !tbaa !2447
  %195 = icmp eq i32 %182, 0
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %29, align 1, !tbaa !2448
  %197 = lshr i32 %182, 31
  %198 = trunc i32 %197 to i8
  store i8 %198, i8* %32, align 1, !tbaa !2449
  %199 = lshr i32 %181, 31
  %200 = xor i32 %197, %199
  %201 = add nuw nsw i32 %200, %199
  %202 = icmp eq i32 %201, 2
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %38, align 1, !tbaa !2450
  %204 = add i64 %177, -52
  %205 = add i64 %449, 14
  store i64 %205, i64* %PC, align 8
  %206 = inttoptr i64 %204 to i32*
  store i32 %182, i32* %206, align 4
  %207 = load i64, i64* %PC, align 8
  %208 = load i8, i8* %14, align 1, !tbaa !2432
  %209 = icmp ne i8 %208, 0
  %.v39 = select i1 %209, i64 31, i64 6
  %210 = add i64 %207, %.v39
  store i64 %210, i64* %PC, align 8, !tbaa !2428
  %211 = icmp eq i8 %208, 1
  br i1 %211, label %block_4023dc, label %block_4023c3

block_4023fd:                                     ; preds = %block_4023dc
  %212 = add i64 %287, 46
  br label %block_40242b

block_40242b:                                     ; preds = %block_40241c, %block_402426, %block_4023fd
  %213 = phi i64 [ %452, %block_40241c ], [ %.pre27, %block_402426 ], [ %246, %block_4023fd ]
  %.sink = phi i64 [ %289, %block_40241c ], [ %245, %block_402426 ], [ %212, %block_4023fd ]
  %214 = add i64 %213, -24
  %215 = add i64 %.sink, 9
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = add i64 %217, 64
  store i64 %218, i64* %RAX, align 8, !tbaa !2428
  %219 = icmp ugt i64 %217, -65
  %220 = zext i1 %219 to i8
  store i8 %220, i8* %14, align 1, !tbaa !2432
  %221 = trunc i64 %218 to i32
  %222 = and i32 %221, 255
  %223 = tail call i32 @llvm.ctpop.i32(i32 %222) #12
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  store i8 %226, i8* %21, align 1, !tbaa !2446
  %227 = xor i64 %218, %217
  %228 = lshr i64 %227, 4
  %229 = trunc i64 %228 to i8
  %230 = and i8 %229, 1
  store i8 %230, i8* %26, align 1, !tbaa !2447
  %231 = icmp eq i64 %218, 0
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %29, align 1, !tbaa !2448
  %233 = lshr i64 %218, 63
  %234 = trunc i64 %233 to i8
  store i8 %234, i8* %32, align 1, !tbaa !2449
  %235 = lshr i64 %217, 63
  %236 = xor i64 %233, %235
  %237 = add nuw nsw i64 %236, %233
  %238 = icmp eq i64 %237, 2
  %239 = zext i1 %238 to i8
  store i8 %239, i8* %38, align 1, !tbaa !2450
  %240 = add i64 %.sink, 17
  store i64 %240, i64* %PC, align 8
  store i64 %218, i64* %216, align 8
  %241 = load i64, i64* %PC, align 8
  %242 = add i64 %241, -210
  store i64 %242, i64* %PC, align 8, !tbaa !2428
  br label %block_40236a

block_4023f8:                                     ; preds = %block_4023dc
  %243 = add i64 %287, 86
  br label %block_40244e

block_402426:                                     ; preds = %block_402378, %block_4023d7
  %244 = phi i64 [ %451, %block_402378 ], [ %288, %block_4023d7 ]
  %245 = add i64 %244, 5
  %.pre27 = load i64, i64* %RBP, align 8
  br label %block_40242b

block_4023dc:                                     ; preds = %block_4023af
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2432
  store i8 1, i8* %21, align 1, !tbaa !2446
  store i8 1, i8* %29, align 1, !tbaa !2448
  store i8 0, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  store i8 0, i8* %26, align 1, !tbaa !2447
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %246 = load i64, i64* %RBP, align 8
  %247 = add i64 %246, -40
  %248 = add i64 %210, 8
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %RDX, align 8, !tbaa !2428
  %251 = add i64 %246, -16
  %252 = add i64 %210, 12
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RSI, align 8, !tbaa !2428
  %255 = add i64 %254, 512
  %256 = add i64 %210, 19
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %255 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = sub i64 0, %258
  store i64 %259, i64* %RCX, align 8, !tbaa !2428
  %260 = lshr i64 %259, 63
  %261 = add i64 %250, %258
  %262 = icmp ult i64 %250, %259
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %14, align 1, !tbaa !2432
  %264 = trunc i64 %261 to i32
  %265 = and i32 %264, 255
  %266 = tail call i32 @llvm.ctpop.i32(i32 %265) #12
  %267 = trunc i32 %266 to i8
  %268 = and i8 %267, 1
  %269 = xor i8 %268, 1
  store i8 %269, i8* %21, align 1, !tbaa !2446
  %270 = xor i64 %250, %259
  %271 = xor i64 %270, %261
  %272 = lshr i64 %271, 4
  %273 = trunc i64 %272 to i8
  %274 = and i8 %273, 1
  store i8 %274, i8* %26, align 1, !tbaa !2447
  %275 = icmp eq i64 %261, 0
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %29, align 1, !tbaa !2448
  %277 = lshr i64 %261, 63
  %278 = trunc i64 %277 to i8
  store i8 %278, i8* %32, align 1, !tbaa !2449
  %279 = lshr i64 %250, 63
  %280 = xor i64 %260, %279
  %281 = xor i64 %277, %279
  %282 = add nuw nsw i64 %281, %280
  %283 = icmp eq i64 %282, 2
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %38, align 1, !tbaa !2450
  %285 = icmp ne i8 %278, 0
  %286 = xor i1 %285, %283
  %.v30 = select i1 %286, i64 28, i64 33
  %287 = add i64 %210, %.v30
  store i64 %287, i64* %PC, align 8, !tbaa !2428
  br i1 %286, label %block_4023f8, label %block_4023fd

block_4023d7:                                     ; preds = %block_4023c3
  %288 = add i64 %134, 79
  store i64 %288, i64* %PC, align 8, !tbaa !2428
  br label %block_402426

block_40241c:                                     ; preds = %block_402402
  %289 = add i64 %493, 15
  br label %block_40242b

block_402417:                                     ; preds = %block_402402
  %290 = add i64 %493, 55
  br label %block_40244e

block_40248e:                                     ; preds = %block_402441, %block_40244e
  %291 = phi i64 [ %140, %block_402441 ], [ %.pre28, %block_40244e ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_402441 ], [ %89, %block_40244e ]
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -8
  %294 = add i64 %291, 4
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %293 to i64*
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %RAX, align 8, !tbaa !2428
  %297 = load i64, i64* %RSP, align 8
  %298 = add i64 %297, 64
  store i64 %298, i64* %RSP, align 8, !tbaa !2428
  %299 = icmp ugt i64 %297, -65
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %14, align 1, !tbaa !2432
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #12
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %21, align 1, !tbaa !2446
  %307 = xor i64 %298, %297
  %308 = lshr i64 %307, 4
  %309 = trunc i64 %308 to i8
  %310 = and i8 %309, 1
  store i8 %310, i8* %26, align 1, !tbaa !2447
  %311 = icmp eq i64 %298, 0
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %29, align 1, !tbaa !2448
  %313 = lshr i64 %298, 63
  %314 = trunc i64 %313 to i8
  store i8 %314, i8* %32, align 1, !tbaa !2449
  %315 = lshr i64 %297, 63
  %316 = xor i64 %313, %315
  %317 = add nuw nsw i64 %316, %313
  %318 = icmp eq i64 %317, 2
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %38, align 1, !tbaa !2450
  %320 = add i64 %291, 9
  store i64 %320, i64* %PC, align 8
  %321 = add i64 %297, 72
  %322 = inttoptr i64 %298 to i64*
  %323 = load i64, i64* %322, align 8
  store i64 %323, i64* %RBP, align 8, !tbaa !2428
  store i64 %321, i64* %RSP, align 8, !tbaa !2428
  %324 = add i64 %291, 10
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %321 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %PC, align 8, !tbaa !2428
  %327 = add i64 %297, 80
  store i64 %327, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_402378:                                     ; preds = %block_40236a
  %328 = add i64 %176, 4
  store i64 %328, i64* %PC, align 8
  %329 = load i64, i64* %145, align 8
  store i64 %329, i64* %RAX, align 8, !tbaa !2428
  %330 = add i64 %176, 7
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %329 to i64*
  %332 = load i64, i64* %331, align 8
  store i64 %332, i64* %RCX, align 8, !tbaa !2428
  %333 = add i64 %329, 8
  %334 = add i64 %176, 11
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RDX, align 8, !tbaa !2428
  %337 = add i64 %176, 14
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i64*
  %339 = load i64, i64* %338, align 8
  store i64 %339, i64* %RDX, align 8, !tbaa !2428
  %340 = sub i64 %332, %339
  store i64 %340, i64* %RCX, align 8, !tbaa !2428
  %341 = icmp ult i64 %332, %339
  %342 = zext i1 %341 to i8
  store i8 %342, i8* %14, align 1, !tbaa !2432
  %343 = trunc i64 %340 to i32
  %344 = and i32 %343, 255
  %345 = tail call i32 @llvm.ctpop.i32(i32 %344) #12
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  store i8 %348, i8* %21, align 1, !tbaa !2446
  %349 = xor i64 %332, %339
  %350 = xor i64 %349, %340
  %351 = lshr i64 %350, 4
  %352 = trunc i64 %351 to i8
  %353 = and i8 %352, 1
  store i8 %353, i8* %26, align 1, !tbaa !2447
  %354 = icmp eq i64 %340, 0
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %29, align 1, !tbaa !2448
  %356 = lshr i64 %340, 63
  %357 = trunc i64 %356 to i8
  store i8 %357, i8* %32, align 1, !tbaa !2449
  %358 = lshr i64 %332, 63
  %359 = lshr i64 %339, 63
  %360 = xor i64 %358, %359
  %361 = xor i64 %356, %358
  %362 = add nuw nsw i64 %361, %360
  %363 = icmp eq i64 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %38, align 1, !tbaa !2450
  %365 = add i64 %329, 16
  %366 = add i64 %176, 21
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i64*
  %368 = load i64, i64* %367, align 8
  store i64 %368, i64* %RAX, align 8, !tbaa !2428
  %369 = add i64 %176, 24
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i64*
  %371 = load i64, i64* %370, align 8
  store i64 %371, i64* %RAX, align 8, !tbaa !2428
  %372 = add i64 %340, %371
  store i64 %372, i64* %RCX, align 8, !tbaa !2428
  %373 = icmp ult i64 %372, %340
  %374 = icmp ult i64 %372, %371
  %375 = or i1 %373, %374
  %376 = zext i1 %375 to i8
  store i8 %376, i8* %14, align 1, !tbaa !2432
  %377 = trunc i64 %372 to i32
  %378 = and i32 %377, 255
  %379 = tail call i32 @llvm.ctpop.i32(i32 %378) #12
  %380 = trunc i32 %379 to i8
  %381 = and i8 %380, 1
  %382 = xor i8 %381, 1
  store i8 %382, i8* %21, align 1, !tbaa !2446
  %383 = xor i64 %340, %371
  %384 = xor i64 %383, %372
  %385 = lshr i64 %384, 4
  %386 = trunc i64 %385 to i8
  %387 = and i8 %386, 1
  store i8 %387, i8* %26, align 1, !tbaa !2447
  %388 = icmp eq i64 %372, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %29, align 1, !tbaa !2448
  %390 = lshr i64 %372, 63
  %391 = trunc i64 %390 to i8
  store i8 %391, i8* %32, align 1, !tbaa !2449
  %392 = lshr i64 %371, 63
  %393 = xor i64 %390, %356
  %394 = xor i64 %390, %392
  %395 = add nuw nsw i64 %393, %394
  %396 = icmp eq i64 %395, 2
  %397 = zext i1 %396 to i8
  store i8 %397, i8* %38, align 1, !tbaa !2450
  %398 = load i64, i64* %RBP, align 8
  %399 = add i64 %398, -40
  %400 = add i64 %176, 31
  store i64 %400, i64* %PC, align 8
  %401 = inttoptr i64 %399 to i64*
  store i64 %372, i64* %401, align 8
  %402 = load i64, i64* %RBP, align 8
  %403 = add i64 %402, -24
  %404 = load i64, i64* %PC, align 8
  %405 = add i64 %404, 4
  store i64 %405, i64* %PC, align 8
  %406 = inttoptr i64 %403 to i64*
  %407 = load i64, i64* %406, align 8
  store i64 %407, i64* %RAX, align 8, !tbaa !2428
  %408 = add i64 %407, 24
  %409 = add i64 %404, 7
  store i64 %409, i64* %PC, align 8
  %410 = inttoptr i64 %408 to i32*
  %411 = load i32, i32* %410, align 4
  %412 = zext i32 %411 to i64
  store i64 %412, i64* %RSI, align 8, !tbaa !2428
  %413 = add i32 %411, 1
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %RDI, align 8, !tbaa !2428
  %415 = icmp ne i32 %411, -1
  %416 = zext i1 %415 to i8
  store i8 %416, i8* %14, align 1, !tbaa !2432
  %417 = and i32 %413, 255
  %418 = tail call i32 @llvm.ctpop.i32(i32 %417) #12
  %419 = trunc i32 %418 to i8
  %420 = and i8 %419, 1
  %421 = xor i8 %420, 1
  store i8 %421, i8* %21, align 1, !tbaa !2446
  %422 = xor i32 %411, 16
  %423 = xor i32 %422, %413
  %424 = lshr i32 %423, 4
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  store i8 %426, i8* %26, align 1, !tbaa !2447
  %427 = icmp eq i32 %413, 0
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %29, align 1, !tbaa !2448
  %429 = lshr i32 %413, 31
  %430 = trunc i32 %429 to i8
  store i8 %430, i8* %32, align 1, !tbaa !2449
  %431 = lshr i32 %411, 31
  %432 = xor i32 %431, 1
  %433 = xor i32 %429, %431
  %434 = add nuw nsw i32 %433, %432
  %435 = icmp eq i32 %434, 2
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %38, align 1, !tbaa !2450
  %437 = add i64 %402, -44
  %438 = add i64 %404, 15
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %437 to i32*
  store i32 %411, i32* %439, align 4
  %440 = load i64, i64* %RBP, align 8
  %441 = add i64 %440, -48
  %442 = load i32, i32* %EDI, align 4
  %443 = load i64, i64* %PC, align 8
  %444 = add i64 %443, 3
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %441 to i32*
  store i32 %442, i32* %445, align 4
  %446 = load i64, i64* %PC, align 8
  %447 = load i8, i8* %29, align 1, !tbaa !2448
  %448 = icmp ne i8 %447, 0
  %.v38 = select i1 %448, i64 120, i64 6
  %449 = add i64 %446, %.v38
  %450 = icmp eq i8 %447, 1
  %451 = add i64 %449, 5
  store i64 %451, i64* %PC, align 8, !tbaa !2428
  br i1 %450, label %block_402426, label %block_4023af

block_402402:                                     ; preds = %block_4023c3
  %452 = load i64, i64* %RBP, align 8
  %453 = add i64 %452, -40
  %454 = add i64 %134, 4
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %453 to i64*
  %456 = load i64, i64* %455, align 8
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = add i64 %452, -16
  %458 = add i64 %134, 8
  store i64 %458, i64* %PC, align 8
  %459 = inttoptr i64 %457 to i64*
  %460 = load i64, i64* %459, align 8
  store i64 %460, i64* %RCX, align 8, !tbaa !2428
  %461 = add i64 %460, 512
  %462 = add i64 %134, 15
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %461 to i64*
  %464 = load i64, i64* %463, align 8
  %465 = sub i64 %456, %464
  %466 = icmp ult i64 %456, %464
  %467 = zext i1 %466 to i8
  store i8 %467, i8* %14, align 1, !tbaa !2432
  %468 = trunc i64 %465 to i32
  %469 = and i32 %468, 255
  %470 = tail call i32 @llvm.ctpop.i32(i32 %469) #12
  %471 = trunc i32 %470 to i8
  %472 = and i8 %471, 1
  %473 = xor i8 %472, 1
  store i8 %473, i8* %21, align 1, !tbaa !2446
  %474 = xor i64 %464, %456
  %475 = xor i64 %474, %465
  %476 = lshr i64 %475, 4
  %477 = trunc i64 %476 to i8
  %478 = and i8 %477, 1
  store i8 %478, i8* %26, align 1, !tbaa !2447
  %479 = icmp eq i64 %465, 0
  %480 = zext i1 %479 to i8
  store i8 %480, i8* %29, align 1, !tbaa !2448
  %481 = lshr i64 %465, 63
  %482 = trunc i64 %481 to i8
  store i8 %482, i8* %32, align 1, !tbaa !2449
  %483 = lshr i64 %456, 63
  %484 = lshr i64 %464, 63
  %485 = xor i64 %484, %483
  %486 = xor i64 %481, %483
  %487 = add nuw nsw i64 %486, %485
  %488 = icmp eq i64 %487, 2
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %38, align 1, !tbaa !2450
  %490 = icmp ne i8 %482, 0
  %491 = xor i1 %490, %488
  %492 = or i1 %479, %491
  %.v29 = select i1 %492, i64 26, i64 21
  %493 = add i64 %134, %.v29
  store i64 %493, i64* %PC, align 8, !tbaa !2428
  br i1 %492, label %block_40241c, label %block_402417
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4024a0_getfree(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4024a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -24
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 16
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %47, 552
  %49 = add i64 %44, 12
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %48 to i64*
  %51 = load i64, i64* %50, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %52 = trunc i64 %51 to i32
  %53 = and i32 %52, 255
  %54 = tail call i32 @llvm.ctpop.i32(i32 %53) #12
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  store i8 %57, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %58 = icmp eq i64 %51, 0
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %28, align 1, !tbaa !2448
  %60 = lshr i64 %51, 63
  %61 = trunc i64 %60 to i8
  store i8 %61, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %.v = select i1 %58, i64 37, i64 18
  %62 = add i64 %44, %.v
  store i64 %62, i64* %PC, align 8, !tbaa !2428
  br i1 %58, label %block_4024d1, label %block_4024be

block_4024be:                                     ; preds = %block_4024a0
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = load i64, i64* %46, align 8
  store i64 %64, i64* %RAX, align 8, !tbaa !2428
  %65 = add i64 %64, 552
  %66 = add i64 %62, 11
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RAX, align 8, !tbaa !2428
  store i64 %68, i64* %RDI, align 8, !tbaa !2428
  %69 = add i64 %62, -7326
  %70 = add i64 %62, 19
  %71 = load i64, i64* %RSP, align 8, !tbaa !2428
  %72 = add i64 %71, -8
  %73 = inttoptr i64 %72 to i64*
  store i64 %70, i64* %73, align 8
  store i64 %72, i64* %RSP, align 8, !tbaa !2428
  store i64 %69, i64* %PC, align 8, !tbaa !2428
  %74 = tail call fastcc %struct.Memory* @ext_608fb8_free(%struct.State* nonnull %0, %struct.Memory* %2)
  %.pre = load i64, i64* %RBP, align 8
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_4024d1

block_40251b:                                     ; preds = %block_402508, %block_4024f6
  %75 = phi i64 [ %163, %block_4024f6 ], [ %.pre8, %block_402508 ]
  %76 = phi i64 [ %182, %block_4024f6 ], [ %.pre7, %block_402508 ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4024f6 ], [ %215, %block_402508 ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %19, align 1, !tbaa !2446
  store i8 1, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  %77 = add i64 %75, -8
  %78 = add i64 %76, 6
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RCX, align 8, !tbaa !2428
  %81 = add i64 %80, 560
  %82 = add i64 %76, 17
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  store i64 0, i64* %83, align 8
  %84 = load i64, i64* %RBP, align 8
  %85 = add i64 %84, -8
  %86 = load i64, i64* %PC, align 8
  %87 = add i64 %86, 4
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %85 to i64*
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %RCX, align 8, !tbaa !2428
  %90 = add i64 %89, 552
  %91 = add i64 %86, 15
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %90 to i64*
  store i64 0, i64* %92, align 8
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -8
  %95 = load i64, i64* %PC, align 8
  %96 = add i64 %95, 4
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %94 to i64*
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %RCX, align 8, !tbaa !2428
  %99 = add i64 %98, 576
  %100 = add i64 %95, 15
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  store i64 0, i64* %101, align 8
  %102 = load i64, i64* %RBP, align 8
  %103 = add i64 %102, -8
  %104 = load i64, i64* %PC, align 8
  %105 = add i64 %104, 4
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %103 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %RCX, align 8, !tbaa !2428
  %108 = add i64 %107, 568
  %109 = add i64 %104, 15
  store i64 %109, i64* %PC, align 8
  %110 = inttoptr i64 %108 to i64*
  store i64 0, i64* %110, align 8
  %111 = load i64, i64* %RBP, align 8
  %112 = add i64 %111, -8
  %113 = load i64, i64* %PC, align 8
  %114 = add i64 %113, 4
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %112 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %RCX, align 8, !tbaa !2428
  %117 = add i64 %116, 592
  %118 = add i64 %113, 15
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %117 to i64*
  store i64 0, i64* %119, align 8
  %120 = load i64, i64* %RBP, align 8
  %121 = add i64 %120, -8
  %122 = load i64, i64* %PC, align 8
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %121 to i64*
  %125 = load i64, i64* %124, align 8
  store i64 %125, i64* %RCX, align 8, !tbaa !2428
  %126 = add i64 %125, 584
  %127 = add i64 %122, 15
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i64*
  store i64 0, i64* %128, align 8
  %129 = load i64, i64* %RSP, align 8
  %130 = load i64, i64* %PC, align 8
  %131 = add i64 %129, 16
  store i64 %131, i64* %RSP, align 8, !tbaa !2428
  %132 = icmp ugt i64 %129, -17
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %12, align 1, !tbaa !2432
  %134 = trunc i64 %131 to i32
  %135 = and i32 %134, 255
  %136 = tail call i32 @llvm.ctpop.i32(i32 %135) #12
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  store i8 %139, i8* %19, align 1, !tbaa !2446
  %140 = xor i64 %129, 16
  %141 = xor i64 %140, %131
  %142 = lshr i64 %141, 4
  %143 = trunc i64 %142 to i8
  %144 = and i8 %143, 1
  store i8 %144, i8* %25, align 1, !tbaa !2447
  %145 = icmp eq i64 %131, 0
  %146 = zext i1 %145 to i8
  store i8 %146, i8* %28, align 1, !tbaa !2448
  %147 = lshr i64 %131, 63
  %148 = trunc i64 %147 to i8
  store i8 %148, i8* %31, align 1, !tbaa !2449
  %149 = lshr i64 %129, 63
  %150 = xor i64 %147, %149
  %151 = add nuw nsw i64 %150, %147
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  store i8 %153, i8* %37, align 1, !tbaa !2450
  %154 = add i64 %130, 5
  store i64 %154, i64* %PC, align 8
  %155 = add i64 %129, 24
  %156 = inttoptr i64 %131 to i64*
  %157 = load i64, i64* %156, align 8
  store i64 %157, i64* %RBP, align 8, !tbaa !2428
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  %158 = add i64 %130, 6
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %155 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %PC, align 8, !tbaa !2428
  %161 = add i64 %129, 32
  store i64 %161, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4024f6:                                     ; preds = %block_4024e3, %block_4024d1
  %162 = phi i64 [ %203, %block_4024d1 ], [ %.pre5, %block_4024e3 ]
  %163 = phi i64 [ %184, %block_4024d1 ], [ %.pre4, %block_4024e3 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_4024d1 ], [ %227, %block_4024e3 ]
  %164 = add i64 %163, -8
  %165 = add i64 %162, 4
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = add i64 %167, 584
  %169 = add i64 %162, 12
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i64*
  %171 = load i64, i64* %170, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %172 = trunc i64 %171 to i32
  %173 = and i32 %172, 255
  %174 = tail call i32 @llvm.ctpop.i32(i32 %173) #12
  %175 = trunc i32 %174 to i8
  %176 = and i8 %175, 1
  %177 = xor i8 %176, 1
  store i8 %177, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %178 = icmp eq i64 %171, 0
  %179 = zext i1 %178 to i8
  store i8 %179, i8* %28, align 1, !tbaa !2448
  %180 = lshr i64 %171, 63
  %181 = trunc i64 %180 to i8
  store i8 %181, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %.v10 = select i1 %178, i64 37, i64 18
  %182 = add i64 %162, %.v10
  store i64 %182, i64* %PC, align 8, !tbaa !2428
  br i1 %178, label %block_40251b, label %block_402508

block_4024d1:                                     ; preds = %block_4024be, %block_4024a0
  %183 = phi i64 [ %62, %block_4024a0 ], [ %.pre3, %block_4024be ]
  %184 = phi i64 [ %42, %block_4024a0 ], [ %.pre, %block_4024be ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_4024a0 ], [ %74, %block_4024be ]
  %185 = add i64 %184, -8
  %186 = add i64 %183, 4
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %185 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = add i64 %188, 568
  %190 = add i64 %183, 12
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  %192 = load i64, i64* %191, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %193 = trunc i64 %192 to i32
  %194 = and i32 %193, 255
  %195 = tail call i32 @llvm.ctpop.i32(i32 %194) #12
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  store i8 %198, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %199 = icmp eq i64 %192, 0
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %28, align 1, !tbaa !2448
  %201 = lshr i64 %192, 63
  %202 = trunc i64 %201 to i8
  store i8 %202, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %.v9 = select i1 %199, i64 37, i64 18
  %203 = add i64 %183, %.v9
  store i64 %203, i64* %PC, align 8, !tbaa !2428
  br i1 %199, label %block_4024f6, label %block_4024e3

block_402508:                                     ; preds = %block_4024f6
  %204 = add i64 %182, 4
  store i64 %204, i64* %PC, align 8
  %205 = load i64, i64* %166, align 8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %205, 584
  %207 = add i64 %182, 11
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i64*
  %209 = load i64, i64* %208, align 8
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  store i64 %209, i64* %RDI, align 8, !tbaa !2428
  %210 = add i64 %182, -7400
  %211 = add i64 %182, 19
  %212 = load i64, i64* %RSP, align 8, !tbaa !2428
  %213 = add i64 %212, -8
  %214 = inttoptr i64 %213 to i64*
  store i64 %211, i64* %214, align 8
  store i64 %213, i64* %RSP, align 8, !tbaa !2428
  store i64 %210, i64* %PC, align 8, !tbaa !2428
  %215 = tail call fastcc %struct.Memory* @ext_608fb8_free(%struct.State* nonnull %0, %struct.Memory* %MEMORY.1)
  %.pre7 = load i64, i64* %PC, align 8
  %.pre8 = load i64, i64* %RBP, align 8
  br label %block_40251b

block_4024e3:                                     ; preds = %block_4024d1
  %216 = add i64 %203, 4
  store i64 %216, i64* %PC, align 8
  %217 = load i64, i64* %187, align 8
  store i64 %217, i64* %RAX, align 8, !tbaa !2428
  %218 = add i64 %217, 568
  %219 = add i64 %203, 11
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to i64*
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  store i64 %221, i64* %RDI, align 8, !tbaa !2428
  %222 = add i64 %203, -7363
  %223 = add i64 %203, 19
  %224 = load i64, i64* %RSP, align 8, !tbaa !2428
  %225 = add i64 %224, -8
  %226 = inttoptr i64 %225 to i64*
  store i64 %223, i64* %226, align 8
  store i64 %225, i64* %RSP, align 8, !tbaa !2428
  store i64 %222, i64* %PC, align 8, !tbaa !2428
  %227 = tail call fastcc %struct.Memory* @ext_608fb8_free(%struct.State* nonnull %0, %struct.Memory* %MEMORY.2)
  %.pre4 = load i64, i64* %RBP, align 8
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_4024f6
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402790_bea_is_dual_infeasible(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_402790:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  store i64 %9, i64* %7, align 8, !tbaa !2428
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -16
  %13 = load i64, i64* %RDI, align 8
  %14 = add i64 %11, 7
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %12 to i64*
  store i64 %13, i64* %15, align 8
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -16
  %18 = load i64, i64* %RSI, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -16
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %24, 5
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %23 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %28, align 1, !tbaa !2432
  %29 = trunc i64 %27 to i32
  %30 = and i32 %29, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #12
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %34, i8* %35, align 1, !tbaa !2446
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %36, align 1, !tbaa !2447
  %37 = icmp eq i64 %27, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %38, i8* %39, align 1, !tbaa !2448
  %40 = lshr i64 %27, 63
  %41 = trunc i64 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %41, i8* %42, align 1, !tbaa !2449
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %43, align 1, !tbaa !2450
  %44 = icmp ne i8 %41, 0
  %.v = select i1 %44, i64 11, i64 30
  %45 = add i64 %24, %.v
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  br i1 %44, label %block_4027a7, label %block_4027ba

block_4027ba:                                     ; preds = %block_4027a7.block_4027ba_crit_edge, %block_402790
  %46 = phi i64 [ %22, %block_402790 ], [ %.pre, %block_4027a7.block_4027ba_crit_edge ]
  %47 = phi i64 [ %45, %block_402790 ], [ %154, %block_4027a7.block_4027ba_crit_edge ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %28, align 1, !tbaa !2432
  store i8 1, i8* %35, align 1, !tbaa !2446
  store i8 1, i8* %39, align 1, !tbaa !2448
  store i8 0, i8* %42, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %48 = add i64 %46, -16
  %49 = add i64 %47, 9
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %48 to i64*
  %51 = load i64, i64* %50, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %52 = trunc i64 %51 to i32
  %53 = and i32 %52, 255
  %54 = tail call i32 @llvm.ctpop.i32(i32 %53) #12
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 1
  %57 = xor i8 %56, 1
  store i8 %57, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %36, align 1, !tbaa !2447
  %58 = icmp eq i64 %51, 0
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %39, align 1, !tbaa !2448
  %60 = lshr i64 %51, 63
  %61 = trunc i64 %60 to i8
  store i8 %61, i8* %42, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %62 = add i64 %46, -18
  %63 = add i64 %47, 12
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %62 to i8*
  store i8 0, i8* %64, align 1
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %65, 20
  %67 = add i64 %65, 6
  %68 = load i8, i8* %39, align 1, !tbaa !2448
  %69 = icmp ne i8 %68, 0
  %70 = load i8, i8* %42, align 1, !tbaa !2449
  %71 = icmp ne i8 %70, 0
  %72 = load i8, i8* %43, align 1, !tbaa !2450
  %73 = icmp ne i8 %72, 0
  %74 = xor i1 %71, %73
  %75 = or i1 %69, %74
  %76 = select i1 %75, i64 %66, i64 %67
  store i64 %76, i64* %PC, align 8, !tbaa !2428
  br i1 %75, label %block_4027da, label %block_4027cc

block_4027da:                                     ; preds = %block_4027cc, %block_4027ba
  %77 = phi i64 [ %.pre3, %block_4027cc ], [ %66, %block_4027ba ]
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -18
  %80 = add i64 %77, 3
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i8*
  %82 = load i8, i8* %81, align 1
  store i8 %82, i8* %AL, align 1, !tbaa !2453
  %83 = add i64 %78, -17
  %84 = add i64 %77, 6
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %83 to i8*
  store i8 %82, i8* %85, align 1
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_4027e0

block_4027cc:                                     ; preds = %block_4027ba
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -8
  %88 = add i64 %76, 4
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RAX, align 8, !tbaa !2428
  %91 = add i64 %90, 24
  %92 = add i64 %76, 8
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = add i32 %94, -2
  %96 = icmp ult i32 %94, 2
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %28, align 1, !tbaa !2432
  %98 = and i32 %95, 255
  %99 = tail call i32 @llvm.ctpop.i32(i32 %98) #12
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 1
  %102 = xor i8 %101, 1
  store i8 %102, i8* %35, align 1, !tbaa !2446
  %103 = xor i32 %95, %94
  %104 = lshr i32 %103, 4
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  store i8 %106, i8* %36, align 1, !tbaa !2447
  %107 = icmp eq i32 %95, 0
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %39, align 1, !tbaa !2448
  %109 = lshr i32 %95, 31
  %110 = trunc i32 %109 to i8
  store i8 %110, i8* %42, align 1, !tbaa !2449
  %111 = lshr i32 %94, 31
  %112 = xor i32 %109, %111
  %113 = add nuw nsw i32 %112, %111
  %114 = icmp eq i32 %113, 2
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %43, align 1, !tbaa !2450
  store i8 %108, i8* %CL, align 1, !tbaa !2453
  %116 = add i64 %86, -18
  %117 = add i64 %76, 14
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to i8*
  store i8 %108, i8* %118, align 1
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_4027da

block_4027a7:                                     ; preds = %block_402790
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %119 = add i64 %22, -8
  %120 = add i64 %45, 6
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = add i64 %122, 24
  %124 = add i64 %45, 10
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = add i32 %126, -1
  %128 = icmp eq i32 %126, 0
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %28, align 1, !tbaa !2432
  %130 = and i32 %127, 255
  %131 = tail call i32 @llvm.ctpop.i32(i32 %130) #12
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  store i8 %134, i8* %35, align 1, !tbaa !2446
  %135 = xor i32 %127, %126
  %136 = lshr i32 %135, 4
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %36, align 1, !tbaa !2447
  %139 = icmp eq i32 %127, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %39, align 1, !tbaa !2448
  %141 = lshr i32 %127, 31
  %142 = trunc i32 %141 to i8
  store i8 %142, i8* %42, align 1, !tbaa !2449
  %143 = lshr i32 %126, 31
  %144 = xor i32 %141, %143
  %145 = add nuw nsw i32 %144, %143
  %146 = icmp eq i32 %145, 2
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %43, align 1, !tbaa !2450
  %148 = add i64 %22, -17
  %149 = add i64 %45, 13
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i8*
  store i8 1, i8* %150, align 1
  %151 = load i64, i64* %PC, align 8
  %152 = load i8, i8* %39, align 1, !tbaa !2448
  %153 = icmp ne i8 %152, 0
  %.v5 = select i1 %153, i64 44, i64 6
  %154 = add i64 %151, %.v5
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  %155 = icmp eq i8 %152, 1
  br i1 %155, label %block_4027e0, label %block_4027a7.block_4027ba_crit_edge

block_4027a7.block_4027ba_crit_edge:              ; preds = %block_4027a7
  %.pre = load i64, i64* %RBP, align 8
  br label %block_4027ba

block_4027e0:                                     ; preds = %block_4027a7, %block_4027da
  %156 = phi i64 [ %154, %block_4027a7 ], [ %.pre4, %block_4027da ]
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -17
  %159 = add i64 %156, 3
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i8*
  %161 = load i8, i8* %160, align 1
  %162 = and i8 %161, 1
  store i8 0, i8* %28, align 1, !tbaa !2432
  %163 = zext i8 %162 to i32
  %164 = tail call i32 @llvm.ctpop.i32(i32 %163) #12
  %165 = trunc i32 %164 to i8
  %166 = xor i8 %165, 1
  store i8 %166, i8* %35, align 1, !tbaa !2446
  %167 = xor i8 %162, 1
  store i8 %167, i8* %39, align 1, !tbaa !2448
  store i8 0, i8* %42, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %36, align 1, !tbaa !2447
  %168 = zext i8 %162 to i64
  store i64 %168, i64* %RAX, align 8, !tbaa !2428
  %169 = add i64 %156, 9
  store i64 %169, i64* %PC, align 8
  %170 = load i64, i64* %7, align 8, !tbaa !2428
  %171 = add i64 %170, 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %RBP, align 8, !tbaa !2428
  store i64 %171, i64* %7, align 8, !tbaa !2428
  %174 = add i64 %156, 10
  store i64 %174, i64* %PC, align 8
  %175 = inttoptr i64 %171 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %PC, align 8, !tbaa !2428
  %177 = add i64 %170, 16
  store i64 %177, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402960_primal_bea_mpp(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402960:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %CL = bitcast %union.anon* %4 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -120
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = add i64 %7, -24
  %19 = load i64, i64* %RDI, align 8
  %20 = add i64 %10, 11
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %18 to i64*
  store i64 %19, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RSI, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -32
  %30 = load i64, i64* %RDX, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33, align 8
  %34 = load i64, i64* %RBP, align 8
  %35 = add i64 %34, -40
  %36 = load i64, i64* %RCX, align 8
  %37 = load i64, i64* %PC, align 8
  %38 = add i64 %37, 4
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i64*
  store i64 %36, i64* %39, align 8
  %40 = load i64, i64* %PC, align 8
  %41 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_606088__data_type* @seg_606088__data to i64), i64 16) to i64*), align 16
  store i8 0, i8* %12, align 1, !tbaa !2432
  %42 = trunc i64 %41 to i32
  %43 = and i32 %42, 255
  %44 = tail call i32 @llvm.ctpop.i32(i32 %43) #12
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = xor i8 %46, 1
  store i8 %47, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %48 = icmp eq i64 %41, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %15, align 1, !tbaa !2448
  %50 = lshr i64 %41, 63
  %51 = trunc i64 %50 to i8
  store i8 %51, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v41 = select i1 %48, i64 160, i64 15
  %52 = add i64 %40, %.v41
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -48
  %55 = add i64 %52, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  br i1 %48, label %block_402a18, label %block_402987

block_402cee:                                     ; preds = %block_402cbb
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RDI, align 8, !tbaa !2428
  store i64 %912, i64* %RSI, align 8, !tbaa !2428
  %57 = add i64 %981, -1278
  %58 = add i64 %981, 20
  %59 = load i64, i64* %RSP, align 8, !tbaa !2428
  %60 = add i64 %59, -8
  %61 = inttoptr i64 %60 to i64*
  store i64 %58, i64* %61, align 8
  store i64 %60, i64* %RSP, align 8, !tbaa !2428
  store i64 %57, i64* %PC, align 8, !tbaa !2428
  %62 = tail call %struct.Memory* @sub_4027f0_sort_basket_renamed_(%struct.State* nonnull %0, i64 %57, %struct.Memory* %MEMORY.1)
  %63 = load i64, i64* %PC, align 8
  %64 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 56) to i64*), align 8
  store i64 %64, i64* %RSI, align 8, !tbaa !2428
  %65 = add i64 %64, 8
  %66 = add i64 %63, 12
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -40
  %71 = add i64 %63, 16
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %70 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %RDI, align 8, !tbaa !2428
  %74 = add i64 %63, 19
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %75, align 8
  %76 = load i64, i64* %PC, align 8
  %77 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 56) to i64*), align 8
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = add i64 %76, 11
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RSI, align 8, !tbaa !2428
  %81 = load i64, i64* %RBP, align 8
  %82 = add i64 %81, -8
  %83 = add i64 %76, 15
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  store i64 %80, i64* %84, align 8
  %.pre35 = load i64, i64* %PC, align 8
  br label %block_402d24

block_402c67:                                     ; preds = %block_402b72
  %85 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*), align 16
  %86 = add i64 %85, 1
  store i64 %86, i64* %RAX, align 8, !tbaa !2428
  %87 = lshr i64 %86, 63
  store i64 %86, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*), align 16
  %88 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11288) to i64*), align 8
  %89 = sub i64 %86, %88
  %90 = icmp ult i64 %86, %88
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %12, align 1, !tbaa !2432
  %92 = trunc i64 %89 to i32
  %93 = and i32 %92, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #12
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  store i8 %97, i8* %13, align 1, !tbaa !2446
  %98 = xor i64 %88, %86
  %99 = xor i64 %98, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %14, align 1, !tbaa !2447
  %103 = icmp eq i64 %89, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %15, align 1, !tbaa !2448
  %105 = lshr i64 %89, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %16, align 1, !tbaa !2449
  %107 = lshr i64 %88, 63
  %108 = xor i64 %107, %87
  %109 = xor i64 %105, %87
  %110 = add nuw nsw i64 %109, %108
  %111 = icmp eq i64 %110, 2
  %112 = zext i1 %111 to i8
  store i8 %112, i8* %17, align 1, !tbaa !2450
  %.v44 = select i1 %103, i64 34, i64 46
  %113 = add i64 %677, %.v44
  store i64 %113, i64* %PC, align 8, !tbaa !2428
  br i1 %103, label %block_402c89, label %block_402c95

block_402b5b:                                     ; preds = %block_402cb6, %block_402b4f
  %114 = phi i64 [ %.pre30, %block_402b4f ], [ %910, %block_402cb6 ]
  %115 = phi i64 [ %.pre29, %block_402b4f ], [ %448, %block_402cb6 ]
  %116 = phi i64 [ %.pre28, %block_402b4f ], [ %643, %block_402cb6 ]
  %117 = add i64 %116, -24
  %118 = add i64 %115, 4
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %117 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = shl i64 %114, 6
  store i64 %121, i64* %RCX, align 8, !tbaa !2428
  %122 = add i64 %121, %120
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %120
  %124 = icmp ult i64 %122, %121
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %12, align 1, !tbaa !2432
  %127 = trunc i64 %122 to i32
  %128 = and i32 %127, 255
  %129 = tail call i32 @llvm.ctpop.i32(i32 %128) #12
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  %132 = xor i8 %131, 1
  store i8 %132, i8* %13, align 1, !tbaa !2446
  %133 = xor i64 %120, %122
  %134 = lshr i64 %133, 4
  %135 = trunc i64 %134 to i8
  %136 = and i8 %135, 1
  store i8 %136, i8* %14, align 1, !tbaa !2447
  %137 = icmp eq i64 %122, 0
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %15, align 1, !tbaa !2448
  %139 = lshr i64 %122, 63
  %140 = trunc i64 %139 to i8
  store i8 %140, i8* %16, align 1, !tbaa !2449
  %141 = lshr i64 %120, 63
  %142 = lshr i64 %114, 57
  %143 = and i64 %142, 1
  %144 = xor i64 %139, %141
  %145 = xor i64 %139, %143
  %146 = add nuw nsw i64 %144, %145
  %147 = icmp eq i64 %146, 2
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %17, align 1, !tbaa !2450
  %149 = add i64 %116, -72
  %150 = add i64 %115, 23
  store i64 %150, i64* %PC, align 8
  %151 = inttoptr i64 %149 to i64*
  store i64 %122, i64* %151, align 8
  %.pre31 = load i64, i64* %PC, align 8
  br label %block_402b72

block_402a57:                                     ; preds = %block_402a4c
  %152 = add i64 %320, -56
  %153 = add i64 %332, 240
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RAX, align 8, !tbaa !2428
  %156 = add i64 %332, 248
  store i64 %156, i64* %PC, align 8
  store i64 %155, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*), align 8
  br label %block_402b4f

block_402b4f:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit, %block_402a57
  %157 = phi i64 [ %320, %block_402a57 ], [ %.pre27, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %158 = phi i64 [ %156, %block_402a57 ], [ %234, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_402a57 ], [ %210, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit ]
  %159 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*), align 16
  store i64 %159, i64* %RAX, align 8, !tbaa !2428
  %160 = add i64 %157, -64
  %161 = add i64 %158, 12
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i64*
  store i64 %159, i64* %162, align 8
  %.pre28 = load i64, i64* %RBP, align 8
  %.pre29 = load i64, i64* %PC, align 8
  %.pre30 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*), align 16
  br label %block_402b5b

block_4029cc:                                     ; preds = %block_40298f
  store i64 300, i64* %RAX, align 8, !tbaa !2428
  store i64 300, i64* %RCX, align 8, !tbaa !2428
  %163 = add i64 %940, -16
  %164 = add i64 %970, 11
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = add i64 %166, -1
  %168 = icmp eq i64 %166, 0
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %12, align 1, !tbaa !2432
  %170 = trunc i64 %167 to i32
  %171 = and i32 %170, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #12
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %13, align 1, !tbaa !2446
  %176 = xor i64 %167, %166
  %177 = lshr i64 %176, 4
  %178 = trunc i64 %177 to i8
  %179 = and i8 %178, 1
  store i8 %179, i8* %14, align 1, !tbaa !2447
  %180 = icmp eq i64 %167, 0
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %15, align 1, !tbaa !2448
  %182 = lshr i64 %167, 63
  %183 = trunc i64 %182 to i8
  store i8 %183, i8* %16, align 1, !tbaa !2449
  %184 = lshr i64 %166, 63
  %185 = xor i64 %182, %184
  %186 = add nuw nsw i64 %185, %184
  %187 = icmp eq i64 %186, 2
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %17, align 1, !tbaa !2450
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %189 = ashr i64 %167, 63
  store i64 %189, i64* %RDX, align 8, !tbaa !2428
  %190 = add i64 %970, 23
  store i64 %190, i64* %PC, align 8
  %191 = zext i64 %189 to i128
  %192 = shl nuw i128 %191, 64
  %193 = zext i64 %167 to i128
  %194 = or i128 %192, %193
  %195 = sdiv i128 %194, 300
  %196 = trunc i128 %195 to i64
  %197 = and i128 %195, 18446744073709551615
  %198 = sext i64 %196 to i128
  %199 = and i128 %198, -18446744073709551616
  %200 = or i128 %199, %197
  %201 = icmp eq i128 %195, %200
  br i1 %201, label %204, label %202

; <label>:202:                                    ; preds = %block_4029cc
  %203 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %190, %struct.Memory* %2) #13
  %.pre23 = load i64, i64* %RAX, align 8
  %.pre24 = load i64, i64* %PC, align 8
  %.pre27.pre = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:204:                                    ; preds = %block_4029cc
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %206 = srem i128 %194, 300
  %207 = trunc i128 %206 to i64
  store i64 %196, i64* %205, align 8, !tbaa !2428
  store i64 %207, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  store i8 0, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %204, %202
  %.pre27 = phi i64 [ %.pre27.pre, %202 ], [ %940, %204 ]
  %208 = phi i64 [ %.pre24, %202 ], [ %190, %204 ]
  %209 = phi i64 [ %.pre23, %202 ], [ %196, %204 ]
  %210 = phi %struct.Memory* [ %203, %202 ], [ %2, %204 ]
  %211 = add i64 %209, 1
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = icmp eq i64 %209, -1
  %213 = icmp eq i64 %211, 0
  %214 = or i1 %212, %213
  %215 = zext i1 %214 to i8
  store i8 %215, i8* %12, align 1, !tbaa !2432
  %216 = trunc i64 %211 to i32
  %217 = and i32 %216, 255
  %218 = tail call i32 @llvm.ctpop.i32(i32 %217) #12
  %219 = trunc i32 %218 to i8
  %220 = and i8 %219, 1
  %221 = xor i8 %220, 1
  store i8 %221, i8* %13, align 1, !tbaa !2446
  %222 = xor i64 %211, %209
  %223 = lshr i64 %222, 4
  %224 = trunc i64 %223 to i8
  %225 = and i8 %224, 1
  store i8 %225, i8* %14, align 1, !tbaa !2447
  %226 = zext i1 %213 to i8
  store i8 %226, i8* %15, align 1, !tbaa !2448
  %227 = lshr i64 %211, 63
  %228 = trunc i64 %227 to i8
  store i8 %228, i8* %16, align 1, !tbaa !2449
  %229 = lshr i64 %209, 63
  %230 = xor i64 %227, %229
  %231 = add nuw nsw i64 %230, %227
  %232 = icmp eq i64 %231, 2
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %17, align 1, !tbaa !2450
  store i64 %211, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11288) to i64*), align 8
  store i64 0, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*), align 16
  store i64 0, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*), align 8
  store i64 0, i64* inttoptr (i64 add (i64 ptrtoint (%seg_606088__data_type* @seg_606088__data to i64), i64 16) to i64*), align 16
  %234 = add i64 %208, 364
  store i64 %234, i64* %PC, align 8, !tbaa !2428
  br label %block_402b4f

block_402c44:                                     ; preds = %block_402c2c, %block_402b8e
  %235 = phi i64 [ %.pre33, %block_402c2c ], [ %1087, %block_402b8e ]
  %236 = add i64 %235, 5
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  %.pre34 = load i64, i64* %RBP, align 8
  br label %block_402c49

block_402ac2:                                     ; preds = %block_402ab4, %block_402a9b
  %237 = phi i64 [ %1144, %block_402ab4 ], [ %772, %block_402a9b ]
  %238 = add i64 %430, -56
  %239 = add i64 %237, 4
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %238 to i64*
  %241 = load i64, i64* %240, align 8
  %242 = add i64 %241, 1
  store i64 %242, i64* %RAX, align 8, !tbaa !2428
  %243 = icmp eq i64 %241, -1
  %244 = icmp eq i64 %242, 0
  %245 = or i1 %243, %244
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %12, align 1, !tbaa !2432
  %247 = trunc i64 %242 to i32
  %248 = and i32 %247, 255
  %249 = tail call i32 @llvm.ctpop.i32(i32 %248) #12
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  %252 = xor i8 %251, 1
  store i8 %252, i8* %13, align 1, !tbaa !2446
  %253 = xor i64 %242, %241
  %254 = lshr i64 %253, 4
  %255 = trunc i64 %254 to i8
  %256 = and i8 %255, 1
  store i8 %256, i8* %14, align 1, !tbaa !2447
  %257 = zext i1 %244 to i8
  store i8 %257, i8* %15, align 1, !tbaa !2448
  %258 = lshr i64 %242, 63
  %259 = trunc i64 %258 to i8
  store i8 %259, i8* %16, align 1, !tbaa !2449
  %260 = lshr i64 %241, 63
  %261 = xor i64 %258, %260
  %262 = add nuw nsw i64 %261, %258
  %263 = icmp eq i64 %262, 2
  %264 = zext i1 %263 to i8
  store i8 %264, i8* %17, align 1, !tbaa !2450
  %265 = add i64 %237, 12
  store i64 %265, i64* %PC, align 8
  store i64 %242, i64* %240, align 8
  %266 = load i64, i64* %RBP, align 8
  %267 = add i64 %266, -72
  %268 = load i64, i64* %PC, align 8
  %269 = add i64 %268, 4
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %267 to i64*
  %271 = load i64, i64* %270, align 8
  store i64 %271, i64* %RAX, align 8, !tbaa !2428
  %272 = add i64 %266, -56
  %273 = add i64 %268, 8
  store i64 %273, i64* %PC, align 8
  %274 = inttoptr i64 %272 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %RCX, align 8, !tbaa !2428
  %276 = shl i64 %275, 3
  %277 = add i64 %276, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %278 = add i64 %268, 16
  store i64 %278, i64* %PC, align 8
  %279 = inttoptr i64 %277 to i64*
  %280 = load i64, i64* %279, align 8
  store i64 %280, i64* %RCX, align 8, !tbaa !2428
  %281 = add i64 %268, 19
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %280 to i64*
  store i64 %271, i64* %282, align 8
  %283 = load i64, i64* %RBP, align 8
  %284 = add i64 %283, -80
  %285 = load i64, i64* %PC, align 8
  %286 = add i64 %285, 4
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %284 to i64*
  %288 = load i64, i64* %287, align 8
  store i64 %288, i64* %RAX, align 8, !tbaa !2428
  %289 = add i64 %283, -56
  %290 = add i64 %285, 8
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %289 to i64*
  %292 = load i64, i64* %291, align 8
  store i64 %292, i64* %RCX, align 8, !tbaa !2428
  %293 = shl i64 %292, 3
  %294 = add i64 %293, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %295 = add i64 %285, 16
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %294 to i64*
  %297 = load i64, i64* %296, align 8
  store i64 %297, i64* %RCX, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = add i64 %285, 20
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %298 to i64*
  store i64 %288, i64* %300, align 8
  %301 = load i64, i64* %RBP, align 8
  %302 = add i64 %301, -80
  %303 = load i64, i64* %PC, align 8
  %304 = add i64 %303, 5
  store i64 %304, i64* %PC, align 8
  %305 = inttoptr i64 %302 to i64*
  %306 = load i64, i64* %305, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %307 = trunc i64 %306 to i32
  %308 = and i32 %307, 255
  %309 = tail call i32 @llvm.ctpop.i32(i32 %308) #12
  %310 = trunc i32 %309 to i8
  %311 = and i8 %310, 1
  %312 = xor i8 %311, 1
  store i8 %312, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %313 = icmp eq i64 %306, 0
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %15, align 1, !tbaa !2448
  %315 = lshr i64 %306, 63
  %316 = trunc i64 %315 to i8
  store i8 %316, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %317 = icmp ne i8 %316, 0
  %.v18 = select i1 %317, i64 19, i64 6
  %318 = add i64 %304, %.v18
  store i64 %318, i64* %PC, align 8, !tbaa !2428
  br i1 %317, label %block_402b0d, label %block_402b00

block_402a4c:                                     ; preds = %block_402a28, %block_402a3a
  %319 = phi i64 [ %1209, %block_402a28 ], [ %.pre26, %block_402a3a ]
  %320 = load i64, i64* %RBP, align 8
  %321 = add i64 %320, -81
  %322 = add i64 %319, 3
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %321 to i8*
  %324 = load i8, i8* %323, align 1
  store i8 %324, i8* %AL, align 1, !tbaa !2453
  %325 = and i8 %324, 1
  store i8 0, i8* %12, align 1, !tbaa !2432
  %326 = zext i8 %325 to i32
  %327 = tail call i32 @llvm.ctpop.i32(i32 %326) #12
  %328 = trunc i32 %327 to i8
  %329 = xor i8 %328, 1
  store i8 %329, i8* %13, align 1, !tbaa !2446
  %330 = xor i8 %325, 1
  store i8 %330, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  %331 = icmp eq i8 %330, 0
  %.v40 = select i1 %331, i64 16, i64 11
  %332 = add i64 %319, %.v40
  store i64 %332, i64* %PC, align 8, !tbaa !2428
  br i1 %331, label %block_402a5c, label %block_402a57

block_402a5c:                                     ; preds = %block_402a4c
  %333 = add i64 %320, -48
  %334 = add i64 %332, 4
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = shl i64 %336, 3
  %338 = add i64 %337, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %339 = add i64 %332, 12
  store i64 %339, i64* %PC, align 8
  %340 = inttoptr i64 %338 to i64*
  %341 = load i64, i64* %340, align 8
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = add i64 %332, 15
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i64*
  %344 = load i64, i64* %343, align 8
  store i64 %344, i64* %RAX, align 8, !tbaa !2428
  %345 = add i64 %320, -72
  %346 = add i64 %332, 19
  store i64 %346, i64* %PC, align 8
  %347 = inttoptr i64 %345 to i64*
  store i64 %344, i64* %347, align 8
  %348 = load i64, i64* %RBP, align 8
  %349 = add i64 %348, -72
  %350 = load i64, i64* %PC, align 8
  %351 = add i64 %350, 4
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %349 to i64*
  %353 = load i64, i64* %352, align 8
  store i64 %353, i64* %RAX, align 8, !tbaa !2428
  %354 = add i64 %350, 7
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %353 to i64*
  %356 = load i64, i64* %355, align 8
  store i64 %356, i64* %RAX, align 8, !tbaa !2428
  %357 = add i64 %350, 11
  store i64 %357, i64* %PC, align 8
  %358 = load i64, i64* %352, align 8
  store i64 %358, i64* %RCX, align 8, !tbaa !2428
  %359 = add i64 %358, 8
  %360 = add i64 %350, 15
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to i64*
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %RCX, align 8, !tbaa !2428
  %363 = add i64 %350, 18
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %362 to i64*
  %365 = load i64, i64* %364, align 8
  %366 = sub i64 %356, %365
  store i64 %366, i64* %RAX, align 8, !tbaa !2428
  %367 = icmp ult i64 %356, %365
  %368 = zext i1 %367 to i8
  store i8 %368, i8* %12, align 1, !tbaa !2432
  %369 = trunc i64 %366 to i32
  %370 = and i32 %369, 255
  %371 = tail call i32 @llvm.ctpop.i32(i32 %370) #12
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  %374 = xor i8 %373, 1
  store i8 %374, i8* %13, align 1, !tbaa !2446
  %375 = xor i64 %365, %356
  %376 = xor i64 %375, %366
  %377 = lshr i64 %376, 4
  %378 = trunc i64 %377 to i8
  %379 = and i8 %378, 1
  store i8 %379, i8* %14, align 1, !tbaa !2447
  %380 = icmp eq i64 %366, 0
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %15, align 1, !tbaa !2448
  %382 = lshr i64 %366, 63
  %383 = trunc i64 %382 to i8
  store i8 %383, i8* %16, align 1, !tbaa !2449
  %384 = lshr i64 %356, 63
  %385 = lshr i64 %365, 63
  %386 = xor i64 %385, %384
  %387 = xor i64 %382, %384
  %388 = add nuw nsw i64 %387, %386
  %389 = icmp eq i64 %388, 2
  %390 = zext i1 %389 to i8
  store i8 %390, i8* %17, align 1, !tbaa !2450
  %391 = add i64 %350, 22
  store i64 %391, i64* %PC, align 8
  %392 = load i64, i64* %352, align 8
  store i64 %392, i64* %RCX, align 8, !tbaa !2428
  %393 = add i64 %392, 16
  %394 = add i64 %350, 26
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %393 to i64*
  %396 = load i64, i64* %395, align 8
  store i64 %396, i64* %RCX, align 8, !tbaa !2428
  %397 = add i64 %350, 29
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = add i64 %399, %366
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = icmp ult i64 %400, %366
  %402 = icmp ult i64 %400, %399
  %403 = or i1 %401, %402
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %12, align 1, !tbaa !2432
  %405 = trunc i64 %400 to i32
  %406 = and i32 %405, 255
  %407 = tail call i32 @llvm.ctpop.i32(i32 %406) #12
  %408 = trunc i32 %407 to i8
  %409 = and i8 %408, 1
  %410 = xor i8 %409, 1
  store i8 %410, i8* %13, align 1, !tbaa !2446
  %411 = xor i64 %399, %366
  %412 = xor i64 %411, %400
  %413 = lshr i64 %412, 4
  %414 = trunc i64 %413 to i8
  %415 = and i8 %414, 1
  store i8 %415, i8* %14, align 1, !tbaa !2447
  %416 = icmp eq i64 %400, 0
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %15, align 1, !tbaa !2448
  %418 = lshr i64 %400, 63
  %419 = trunc i64 %418 to i8
  store i8 %419, i8* %16, align 1, !tbaa !2449
  %420 = lshr i64 %399, 63
  %421 = xor i64 %418, %382
  %422 = xor i64 %418, %420
  %423 = add nuw nsw i64 %421, %422
  %424 = icmp eq i64 %423, 2
  %425 = zext i1 %424 to i8
  store i8 %425, i8* %17, align 1, !tbaa !2450
  %426 = load i64, i64* %RBP, align 8
  %427 = add i64 %426, -80
  %428 = add i64 %350, 33
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i64*
  store i64 %400, i64* %429, align 8
  %430 = load i64, i64* %RBP, align 8
  %431 = add i64 %430, -80
  %432 = load i64, i64* %PC, align 8
  %433 = add i64 %432, 5
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %431 to i64*
  %435 = load i64, i64* %434, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %436 = trunc i64 %435 to i32
  %437 = and i32 %436, 255
  %438 = tail call i32 @llvm.ctpop.i32(i32 %437) #12
  %439 = trunc i32 %438 to i8
  %440 = and i8 %439, 1
  %441 = xor i8 %440, 1
  store i8 %441, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %442 = icmp eq i64 %435, 0
  %443 = zext i1 %442 to i8
  store i8 %443, i8* %15, align 1, !tbaa !2448
  %444 = lshr i64 %435, 63
  %445 = trunc i64 %444 to i8
  store i8 %445, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %446 = icmp ne i8 %445, 0
  %.v17 = select i1 %446, i64 6, i64 20
  %447 = add i64 %433, %.v17
  store i64 %447, i64* %PC, align 8, !tbaa !2428
  br i1 %446, label %block_402a9b, label %block_402aa9

block_402cb6:                                     ; preds = %block_402ca4
  %448 = add i64 %510, -347
  store i64 %448, i64* %PC, align 8, !tbaa !2428
  br label %block_402b5b

block_402b2d:                                     ; preds = %block_402ab4, %block_402aa9, %block_402b19
  %449 = phi i64 [ %430, %block_402aa9 ], [ %430, %block_402ab4 ], [ %.pre38, %block_402b19 ]
  %450 = phi i64 [ %1175, %block_402aa9 ], [ %1144, %block_402ab4 ], [ %.pre37, %block_402b19 ]
  %451 = add i64 %449, -48
  %452 = add i64 %450, 9
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %451 to i64*
  %454 = load i64, i64* %453, align 8
  %455 = add i64 %454, 1
  store i64 %455, i64* %RAX, align 8, !tbaa !2428
  %456 = icmp eq i64 %454, -1
  %457 = icmp eq i64 %455, 0
  %458 = or i1 %456, %457
  %459 = zext i1 %458 to i8
  store i8 %459, i8* %12, align 1, !tbaa !2432
  %460 = trunc i64 %455 to i32
  %461 = and i32 %460, 255
  %462 = tail call i32 @llvm.ctpop.i32(i32 %461) #12
  %463 = trunc i32 %462 to i8
  %464 = and i8 %463, 1
  %465 = xor i8 %464, 1
  store i8 %465, i8* %13, align 1, !tbaa !2446
  %466 = xor i64 %455, %454
  %467 = lshr i64 %466, 4
  %468 = trunc i64 %467 to i8
  %469 = and i8 %468, 1
  store i8 %469, i8* %14, align 1, !tbaa !2447
  %470 = zext i1 %457 to i8
  store i8 %470, i8* %15, align 1, !tbaa !2448
  %471 = lshr i64 %455, 63
  %472 = trunc i64 %471 to i8
  store i8 %472, i8* %16, align 1, !tbaa !2449
  %473 = lshr i64 %454, 63
  %474 = xor i64 %471, %473
  %475 = add nuw nsw i64 %474, %471
  %476 = icmp eq i64 %475, 2
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %17, align 1, !tbaa !2450
  %478 = add i64 %450, 17
  store i64 %478, i64* %PC, align 8
  store i64 %455, i64* %453, align 8
  %479 = load i64, i64* %PC, align 8
  %480 = add i64 %479, -278
  store i64 %480, i64* %PC, align 8, !tbaa !2428
  br label %block_402a28

block_402ca4:                                     ; preds = %block_402c95
  store i64 %910, i64* %RAX, align 8, !tbaa !2428
  %481 = add i64 %643, -64
  %482 = add i64 %938, 12
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i64*
  %484 = load i64, i64* %483, align 8
  %485 = sub i64 %910, %484
  %486 = icmp ult i64 %910, %484
  %487 = zext i1 %486 to i8
  store i8 %487, i8* %12, align 1, !tbaa !2432
  %488 = trunc i64 %485 to i32
  %489 = and i32 %488, 255
  %490 = tail call i32 @llvm.ctpop.i32(i32 %489) #12
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  %493 = xor i8 %492, 1
  store i8 %493, i8* %13, align 1, !tbaa !2446
  %494 = xor i64 %484, %910
  %495 = xor i64 %494, %485
  %496 = lshr i64 %495, 4
  %497 = trunc i64 %496 to i8
  %498 = and i8 %497, 1
  store i8 %498, i8* %14, align 1, !tbaa !2447
  %499 = icmp eq i64 %485, 0
  %500 = zext i1 %499 to i8
  store i8 %500, i8* %15, align 1, !tbaa !2448
  %501 = lshr i64 %485, 63
  %502 = trunc i64 %501 to i8
  store i8 %502, i8* %16, align 1, !tbaa !2449
  %503 = lshr i64 %910, 63
  %504 = lshr i64 %484, 63
  %505 = xor i64 %504, %503
  %506 = xor i64 %501, %503
  %507 = add nuw nsw i64 %506, %505
  %508 = icmp eq i64 %507, 2
  %509 = zext i1 %508 to i8
  store i8 %509, i8* %17, align 1, !tbaa !2450
  %.v47 = select i1 %499, i64 23, i64 18
  %510 = add i64 %938, %.v47
  store i64 %510, i64* %PC, align 8, !tbaa !2428
  br i1 %499, label %block_402cbb, label %block_402cb6

block_402c20:                                     ; preds = %block_402bc5
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %511 = add i64 %841, 8
  store i64 %511, i64* %PC, align 8
  %512 = load i64, i64* %828, align 8
  %513 = sub i64 0, %512
  store i64 %513, i64* %RCX, align 8, !tbaa !2428
  %514 = icmp ne i64 %512, 0
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %12, align 1, !tbaa !2432
  %516 = trunc i64 %513 to i32
  %517 = and i32 %516, 255
  %518 = tail call i32 @llvm.ctpop.i32(i32 %517) #12
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  store i8 %521, i8* %13, align 1, !tbaa !2446
  %522 = xor i64 %512, %513
  %523 = lshr i64 %522, 4
  %524 = trunc i64 %523 to i8
  %525 = and i8 %524, 1
  store i8 %525, i8* %14, align 1, !tbaa !2447
  %526 = icmp eq i64 %512, 0
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %15, align 1, !tbaa !2448
  %528 = lshr i64 %513, 63
  %529 = trunc i64 %528 to i8
  store i8 %529, i8* %16, align 1, !tbaa !2449
  %530 = lshr i64 %512, 63
  %531 = add nuw nsw i64 %528, %530
  %532 = icmp eq i64 %531, 2
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %17, align 1, !tbaa !2450
  %534 = add i64 %824, -104
  %535 = add i64 %841, 12
  store i64 %535, i64* %PC, align 8
  %536 = inttoptr i64 %534 to i64*
  store i64 %513, i64* %536, align 8
  %.pre32 = load i64, i64* %PC, align 8
  br label %block_402c2c

block_402d24:                                     ; preds = %block_402cca, %block_402cee
  %537 = phi i64 [ %.pre35, %block_402cee ], [ %690, %block_402cca ]
  %MEMORY.6 = phi %struct.Memory* [ %62, %block_402cee ], [ %MEMORY.1, %block_402cca ]
  %538 = load i64, i64* %RBP, align 8
  %539 = add i64 %538, -8
  %540 = add i64 %537, 4
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %539 to i64*
  %542 = load i64, i64* %541, align 8
  store i64 %542, i64* %RAX, align 8, !tbaa !2428
  %543 = load i64, i64* %RSP, align 8
  %544 = add i64 %543, 112
  store i64 %544, i64* %RSP, align 8, !tbaa !2428
  %545 = icmp ugt i64 %543, -113
  %546 = zext i1 %545 to i8
  store i8 %546, i8* %12, align 1, !tbaa !2432
  %547 = trunc i64 %544 to i32
  %548 = and i32 %547, 255
  %549 = tail call i32 @llvm.ctpop.i32(i32 %548) #12
  %550 = trunc i32 %549 to i8
  %551 = and i8 %550, 1
  %552 = xor i8 %551, 1
  store i8 %552, i8* %13, align 1, !tbaa !2446
  %553 = xor i64 %543, 16
  %554 = xor i64 %553, %544
  %555 = lshr i64 %554, 4
  %556 = trunc i64 %555 to i8
  %557 = and i8 %556, 1
  store i8 %557, i8* %14, align 1, !tbaa !2447
  %558 = icmp eq i64 %544, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %15, align 1, !tbaa !2448
  %560 = lshr i64 %544, 63
  %561 = trunc i64 %560 to i8
  store i8 %561, i8* %16, align 1, !tbaa !2449
  %562 = lshr i64 %543, 63
  %563 = xor i64 %560, %562
  %564 = add nuw nsw i64 %563, %560
  %565 = icmp eq i64 %564, 2
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %17, align 1, !tbaa !2450
  %567 = add i64 %537, 9
  store i64 %567, i64* %PC, align 8
  %568 = add i64 %543, 120
  %569 = inttoptr i64 %544 to i64*
  %570 = load i64, i64* %569, align 8
  store i64 %570, i64* %RBP, align 8, !tbaa !2428
  store i64 %568, i64* %RSP, align 8, !tbaa !2428
  %571 = add i64 %537, 10
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %568 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %PC, align 8, !tbaa !2428
  %574 = add i64 %543, 128
  store i64 %574, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6

block_40299d:                                     ; preds = %block_40298f
  store i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 2864), i64* %RAX, align 8, !tbaa !2428
  %575 = add i64 %970, 15
  store i64 %575, i64* %PC, align 8
  %576 = load i64, i64* %943, align 8
  %577 = mul i64 %576, 24
  store i64 %577, i64* %RCX, align 8, !tbaa !2428
  %578 = lshr i64 %577, 63
  %579 = add i64 %577, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 2864)
  store i64 %579, i64* %RAX, align 8, !tbaa !2428
  %580 = icmp ult i64 %579, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 2864)
  %581 = icmp ult i64 %579, %577
  %582 = or i1 %580, %581
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %12, align 1, !tbaa !2432
  %584 = trunc i64 %579 to i32
  %585 = and i32 %584, 248
  %586 = tail call i32 @llvm.ctpop.i32(i32 %585) #12
  %587 = trunc i32 %586 to i8
  %588 = and i8 %587, 1
  %589 = xor i8 %588, 1
  store i8 %589, i8* %13, align 1, !tbaa !2446
  %590 = xor i64 %577, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 2864)
  %591 = xor i64 %590, %579
  %592 = lshr i64 %591, 4
  %593 = trunc i64 %592 to i8
  %594 = and i8 %593, 1
  store i8 %594, i8* %14, align 1, !tbaa !2447
  %595 = icmp eq i64 %579, 0
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %15, align 1, !tbaa !2448
  %597 = lshr i64 %579, 63
  %598 = trunc i64 %597 to i8
  store i8 %598, i8* %16, align 1, !tbaa !2449
  %599 = xor i64 %597, lshr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 2864), i64 63)
  %600 = xor i64 %597, %578
  %601 = add nuw nsw i64 %599, %600
  %602 = icmp eq i64 %601, 2
  %603 = zext i1 %602 to i8
  store i8 %603, i8* %17, align 1, !tbaa !2450
  %604 = add i64 %970, 22
  store i64 %604, i64* %PC, align 8
  %605 = load i64, i64* %943, align 8
  store i64 %605, i64* %RCX, align 8, !tbaa !2428
  %606 = shl i64 %605, 3
  %607 = add i64 %606, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %608 = add i64 %970, 30
  store i64 %608, i64* %PC, align 8
  %609 = inttoptr i64 %607 to i64*
  store i64 %579, i64* %609, align 8
  %610 = load i64, i64* %RBP, align 8
  %611 = add i64 %610, -48
  %612 = load i64, i64* %PC, align 8
  %613 = add i64 %612, 4
  store i64 %613, i64* %PC, align 8
  %614 = inttoptr i64 %611 to i64*
  %615 = load i64, i64* %614, align 8
  %616 = add i64 %615, 1
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = icmp eq i64 %615, -1
  %618 = icmp eq i64 %616, 0
  %619 = or i1 %617, %618
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %12, align 1, !tbaa !2432
  %621 = trunc i64 %616 to i32
  %622 = and i32 %621, 255
  %623 = tail call i32 @llvm.ctpop.i32(i32 %622) #12
  %624 = trunc i32 %623 to i8
  %625 = and i8 %624, 1
  %626 = xor i8 %625, 1
  store i8 %626, i8* %13, align 1, !tbaa !2446
  %627 = xor i64 %616, %615
  %628 = lshr i64 %627, 4
  %629 = trunc i64 %628 to i8
  %630 = and i8 %629, 1
  store i8 %630, i8* %14, align 1, !tbaa !2447
  %631 = zext i1 %618 to i8
  store i8 %631, i8* %15, align 1, !tbaa !2448
  %632 = lshr i64 %616, 63
  %633 = trunc i64 %632 to i8
  store i8 %633, i8* %16, align 1, !tbaa !2449
  %634 = lshr i64 %615, 63
  %635 = xor i64 %632, %634
  %636 = add nuw nsw i64 %635, %632
  %637 = icmp eq i64 %636, 2
  %638 = zext i1 %637 to i8
  store i8 %638, i8* %17, align 1, !tbaa !2450
  %639 = add i64 %612, 12
  store i64 %639, i64* %PC, align 8
  store i64 %616, i64* %614, align 8
  %640 = load i64, i64* %PC, align 8
  %641 = add i64 %640, -56
  store i64 %641, i64* %PC, align 8, !tbaa !2428
  br label %block_40298f

block_402b72:                                     ; preds = %block_402c49, %block_402b5b
  %642 = phi i64 [ %.pre31, %block_402b5b ], [ %742, %block_402c49 ]
  %643 = load i64, i64* %RBP, align 8
  %644 = add i64 %643, -72
  %645 = add i64 %642, 4
  store i64 %645, i64* %PC, align 8
  %646 = inttoptr i64 %644 to i64*
  %647 = load i64, i64* %646, align 8
  store i64 %647, i64* %RAX, align 8, !tbaa !2428
  %648 = add i64 %643, -32
  %649 = add i64 %642, 8
  store i64 %649, i64* %PC, align 8
  %650 = inttoptr i64 %648 to i64*
  %651 = load i64, i64* %650, align 8
  %652 = sub i64 %647, %651
  %653 = icmp ult i64 %647, %651
  %654 = zext i1 %653 to i8
  store i8 %654, i8* %12, align 1, !tbaa !2432
  %655 = trunc i64 %652 to i32
  %656 = and i32 %655, 255
  %657 = tail call i32 @llvm.ctpop.i32(i32 %656) #12
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  store i8 %660, i8* %13, align 1, !tbaa !2446
  %661 = xor i64 %651, %647
  %662 = xor i64 %661, %652
  %663 = lshr i64 %662, 4
  %664 = trunc i64 %663 to i8
  %665 = and i8 %664, 1
  store i8 %665, i8* %14, align 1, !tbaa !2447
  %666 = icmp eq i64 %652, 0
  %667 = zext i1 %666 to i8
  store i8 %667, i8* %15, align 1, !tbaa !2448
  %668 = lshr i64 %652, 63
  %669 = trunc i64 %668 to i8
  store i8 %669, i8* %16, align 1, !tbaa !2449
  %670 = lshr i64 %647, 63
  %671 = lshr i64 %651, 63
  %672 = xor i64 %671, %670
  %673 = xor i64 %668, %670
  %674 = add nuw nsw i64 %673, %672
  %675 = icmp eq i64 %674, 2
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %17, align 1, !tbaa !2450
  %.v43 = select i1 %653, i64 14, i64 245
  %677 = add i64 %642, %.v43
  store i64 %677, i64* %PC, align 8, !tbaa !2428
  br i1 %653, label %block_402b80, label %block_402c67

block_402cca:                                     ; preds = %block_402cbb
  store i64 1, i64* inttoptr (i64 add (i64 ptrtoint (%seg_606088__data_type* @seg_606088__data to i64), i64 16) to i64*), align 16
  %678 = add i64 %643, -40
  %679 = add i64 %981, 16
  store i64 %679, i64* %PC, align 8
  %680 = inttoptr i64 %678 to i64*
  %681 = load i64, i64* %680, align 8
  store i64 %681, i64* %RAX, align 8, !tbaa !2428
  %682 = add i64 %981, 23
  store i64 %682, i64* %PC, align 8
  %683 = inttoptr i64 %681 to i64*
  store i64 0, i64* %683, align 8
  %684 = load i64, i64* %RBP, align 8
  %685 = add i64 %684, -8
  %686 = load i64, i64* %PC, align 8
  %687 = add i64 %686, 8
  store i64 %687, i64* %PC, align 8
  %688 = inttoptr i64 %685 to i64*
  store i64 0, i64* %688, align 8
  %689 = load i64, i64* %PC, align 8
  %690 = add i64 %689, 59
  store i64 %690, i64* %PC, align 8, !tbaa !2428
  br label %block_402d24

block_402c49:                                     ; preds = %block_402b80, %block_402c44
  %691 = phi i64 [ %643, %block_402b80 ], [ %.pre34, %block_402c44 ]
  %692 = phi i64 [ %1238, %block_402b80 ], [ %236, %block_402c44 ]
  %693 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11288) to i64*), align 8
  %694 = shl i64 %693, 6
  store i64 %694, i64* %RAX, align 8, !tbaa !2428
  %695 = lshr i64 %693, 58
  %696 = trunc i64 %695 to i8
  %697 = and i8 %696, 1
  store i8 %697, i8* %12, align 1, !tbaa !2453
  %698 = trunc i64 %694 to i32
  %699 = and i32 %698, 192
  %700 = tail call i32 @llvm.ctpop.i32(i32 %699) #12
  %701 = trunc i32 %700 to i8
  %702 = and i8 %701, 1
  %703 = xor i8 %702, 1
  store i8 %703, i8* %13, align 1, !tbaa !2453
  store i8 0, i8* %14, align 1, !tbaa !2453
  %704 = icmp eq i64 %694, 0
  %705 = zext i1 %704 to i8
  store i8 %705, i8* %15, align 1, !tbaa !2453
  %706 = lshr i64 %693, 57
  %707 = trunc i64 %706 to i8
  %708 = and i8 %707, 1
  store i8 %708, i8* %16, align 1, !tbaa !2453
  store i8 0, i8* %17, align 1, !tbaa !2453
  %709 = add i64 %691, -72
  %710 = add i64 %692, 21
  store i64 %710, i64* %PC, align 8
  %711 = inttoptr i64 %709 to i64*
  %712 = load i64, i64* %711, align 8
  %713 = add i64 %712, %694
  store i64 %713, i64* %RAX, align 8, !tbaa !2428
  %714 = icmp ult i64 %713, %694
  %715 = icmp ult i64 %713, %712
  %716 = or i1 %714, %715
  %717 = zext i1 %716 to i8
  store i8 %717, i8* %12, align 1, !tbaa !2432
  %718 = trunc i64 %713 to i32
  %719 = and i32 %718, 255
  %720 = tail call i32 @llvm.ctpop.i32(i32 %719) #12
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  %723 = xor i8 %722, 1
  store i8 %723, i8* %13, align 1, !tbaa !2446
  %724 = xor i64 %712, %713
  %725 = lshr i64 %724, 4
  %726 = trunc i64 %725 to i8
  %727 = and i8 %726, 1
  store i8 %727, i8* %14, align 1, !tbaa !2447
  %728 = icmp eq i64 %713, 0
  %729 = zext i1 %728 to i8
  store i8 %729, i8* %15, align 1, !tbaa !2448
  %730 = lshr i64 %713, 63
  %731 = trunc i64 %730 to i8
  store i8 %731, i8* %16, align 1, !tbaa !2449
  %732 = lshr i64 %693, 57
  %733 = and i64 %732, 1
  %734 = lshr i64 %712, 63
  %735 = xor i64 %730, %733
  %736 = xor i64 %730, %734
  %737 = add nuw nsw i64 %735, %736
  %738 = icmp eq i64 %737, 2
  %739 = zext i1 %738 to i8
  store i8 %739, i8* %17, align 1, !tbaa !2450
  %740 = add i64 %692, 25
  store i64 %740, i64* %PC, align 8
  store i64 %713, i64* %711, align 8
  %741 = load i64, i64* %PC, align 8
  %742 = add i64 %741, -240
  store i64 %742, i64* %PC, align 8, !tbaa !2428
  br label %block_402b72

block_402a9b:                                     ; preds = %block_402a5c
  %743 = add i64 %430, -72
  %744 = add i64 %447, 4
  store i64 %744, i64* %PC, align 8
  %745 = inttoptr i64 %743 to i64*
  %746 = load i64, i64* %745, align 8
  store i64 %746, i64* %RAX, align 8, !tbaa !2428
  %747 = add i64 %746, 24
  %748 = add i64 %447, 8
  store i64 %748, i64* %PC, align 8
  %749 = inttoptr i64 %747 to i32*
  %750 = load i32, i32* %749, align 4
  %751 = add i32 %750, -1
  %752 = icmp eq i32 %750, 0
  %753 = zext i1 %752 to i8
  store i8 %753, i8* %12, align 1, !tbaa !2432
  %754 = and i32 %751, 255
  %755 = tail call i32 @llvm.ctpop.i32(i32 %754) #12
  %756 = trunc i32 %755 to i8
  %757 = and i8 %756, 1
  %758 = xor i8 %757, 1
  store i8 %758, i8* %13, align 1, !tbaa !2446
  %759 = xor i32 %751, %750
  %760 = lshr i32 %759, 4
  %761 = trunc i32 %760 to i8
  %762 = and i8 %761, 1
  store i8 %762, i8* %14, align 1, !tbaa !2447
  %763 = icmp eq i32 %751, 0
  %764 = zext i1 %763 to i8
  store i8 %764, i8* %15, align 1, !tbaa !2448
  %765 = lshr i32 %751, 31
  %766 = trunc i32 %765 to i8
  store i8 %766, i8* %16, align 1, !tbaa !2449
  %767 = lshr i32 %750, 31
  %768 = xor i32 %765, %767
  %769 = add nuw nsw i32 %768, %767
  %770 = icmp eq i32 %769, 2
  %771 = zext i1 %770 to i8
  store i8 %771, i8* %17, align 1, !tbaa !2450
  %.v52 = select i1 %763, i64 39, i64 14
  %772 = add i64 %447, %.v52
  store i64 %772, i64* %PC, align 8, !tbaa !2428
  br i1 %763, label %block_402ac2, label %block_402aa9

block_402bc5:                                     ; preds = %block_402b8e
  %773 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*), align 8
  %774 = add i64 %773, 1
  store i64 %774, i64* %RAX, align 8, !tbaa !2428
  %775 = icmp eq i64 %773, -1
  %776 = icmp eq i64 %774, 0
  %777 = or i1 %775, %776
  %778 = zext i1 %777 to i8
  store i8 %778, i8* %12, align 1, !tbaa !2432
  %779 = trunc i64 %774 to i32
  %780 = and i32 %779, 255
  %781 = tail call i32 @llvm.ctpop.i32(i32 %780) #12
  %782 = trunc i32 %781 to i8
  %783 = and i8 %782, 1
  %784 = xor i8 %783, 1
  store i8 %784, i8* %13, align 1, !tbaa !2446
  %785 = xor i64 %774, %773
  %786 = lshr i64 %785, 4
  %787 = trunc i64 %786 to i8
  %788 = and i8 %787, 1
  store i8 %788, i8* %14, align 1, !tbaa !2447
  %789 = zext i1 %776 to i8
  store i8 %789, i8* %15, align 1, !tbaa !2448
  %790 = lshr i64 %774, 63
  %791 = trunc i64 %790 to i8
  store i8 %791, i8* %16, align 1, !tbaa !2449
  %792 = lshr i64 %773, 63
  %793 = xor i64 %790, %792
  %794 = add nuw nsw i64 %793, %790
  %795 = icmp eq i64 %794, 2
  %796 = zext i1 %795 to i8
  store i8 %796, i8* %17, align 1, !tbaa !2450
  store i64 %774, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*), align 8
  %797 = load i64, i64* %RBP, align 8
  %798 = add i64 %797, -72
  %799 = add i64 %1087, 24
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %798 to i64*
  %801 = load i64, i64* %800, align 8
  store i64 %801, i64* %RAX, align 8, !tbaa !2428
  store i64 %774, i64* %RCX, align 8, !tbaa !2428
  %802 = shl i64 %774, 3
  %803 = add i64 %802, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %804 = add i64 %1087, 40
  store i64 %804, i64* %PC, align 8
  %805 = inttoptr i64 %803 to i64*
  %806 = load i64, i64* %805, align 8
  store i64 %806, i64* %RCX, align 8, !tbaa !2428
  %807 = add i64 %1087, 43
  store i64 %807, i64* %PC, align 8
  %808 = inttoptr i64 %806 to i64*
  store i64 %801, i64* %808, align 8
  %809 = load i64, i64* %RBP, align 8
  %810 = add i64 %809, -80
  %811 = load i64, i64* %PC, align 8
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC, align 8
  %813 = inttoptr i64 %810 to i64*
  %814 = load i64, i64* %813, align 8
  store i64 %814, i64* %RAX, align 8, !tbaa !2428
  %815 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*), align 8
  store i64 %815, i64* %RCX, align 8, !tbaa !2428
  %816 = shl i64 %815, 3
  %817 = add i64 %816, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %818 = add i64 %811, 20
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %817 to i64*
  %820 = load i64, i64* %819, align 8
  store i64 %820, i64* %RCX, align 8, !tbaa !2428
  %821 = add i64 %820, 8
  %822 = add i64 %811, 24
  store i64 %822, i64* %PC, align 8
  %823 = inttoptr i64 %821 to i64*
  store i64 %814, i64* %823, align 8
  %824 = load i64, i64* %RBP, align 8
  %825 = add i64 %824, -80
  %826 = load i64, i64* %PC, align 8
  %827 = add i64 %826, 5
  store i64 %827, i64* %PC, align 8
  %828 = inttoptr i64 %825 to i64*
  %829 = load i64, i64* %828, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %830 = trunc i64 %829 to i32
  %831 = and i32 %830, 255
  %832 = tail call i32 @llvm.ctpop.i32(i32 %831) #12
  %833 = trunc i32 %832 to i8
  %834 = and i8 %833, 1
  %835 = xor i8 %834, 1
  store i8 %835, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %836 = icmp eq i64 %829, 0
  %837 = zext i1 %836 to i8
  store i8 %837, i8* %15, align 1, !tbaa !2448
  %838 = lshr i64 %829, 63
  %839 = trunc i64 %838 to i8
  store i8 %839, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %840 = icmp ne i8 %839, 0
  %.v = select i1 %840, i64 19, i64 6
  %841 = add i64 %827, %.v
  store i64 %841, i64* %PC, align 8, !tbaa !2428
  br i1 %840, label %block_402c20, label %block_402c13

block_402b19:                                     ; preds = %block_402b00, %block_402b0d
  %842 = phi i64 [ %1245, %block_402b00 ], [ %.pre36, %block_402b0d ]
  %843 = load i64, i64* %RBP, align 8
  %844 = add i64 %843, -96
  %845 = add i64 %842, 4
  store i64 %845, i64* %PC, align 8
  %846 = inttoptr i64 %844 to i64*
  %847 = load i64, i64* %846, align 8
  store i64 %847, i64* %RAX, align 8, !tbaa !2428
  %848 = add i64 %843, -56
  %849 = add i64 %842, 8
  store i64 %849, i64* %PC, align 8
  %850 = inttoptr i64 %848 to i64*
  %851 = load i64, i64* %850, align 8
  store i64 %851, i64* %RCX, align 8, !tbaa !2428
  %852 = shl i64 %851, 3
  %853 = add i64 %852, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %854 = add i64 %842, 16
  store i64 %854, i64* %PC, align 8
  %855 = inttoptr i64 %853 to i64*
  %856 = load i64, i64* %855, align 8
  store i64 %856, i64* %RCX, align 8, !tbaa !2428
  %857 = add i64 %856, 16
  %858 = add i64 %842, 20
  store i64 %858, i64* %PC, align 8
  %859 = inttoptr i64 %857 to i64*
  store i64 %847, i64* %859, align 8
  %.pre37 = load i64, i64* %PC, align 8
  %.pre38 = load i64, i64* %RBP, align 8
  br label %block_402b2d

block_402a18:                                     ; preds = %block_402960
  store i64 2, i64* %56, align 8
  %860 = load i64, i64* %RBP, align 8
  %861 = add i64 %860, -56
  %862 = load i64, i64* %PC, align 8
  %863 = add i64 %862, 8
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %861 to i64*
  store i64 0, i64* %864, align 8
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_402a28

block_402a3a:                                     ; preds = %block_402a28
  %865 = load i64, i64* %RBP, align 8
  %866 = add i64 %865, -48
  %867 = add i64 %1220, 4
  store i64 %867, i64* %PC, align 8
  %868 = inttoptr i64 %866 to i64*
  %869 = load i64, i64* %868, align 8
  store i64 %869, i64* %RAX, align 8, !tbaa !2428
  %870 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*), align 8
  %871 = sub i64 %869, %870
  %872 = icmp ult i64 %869, %870
  %873 = zext i1 %872 to i8
  store i8 %873, i8* %12, align 1, !tbaa !2432
  %874 = trunc i64 %871 to i32
  %875 = and i32 %874, 255
  %876 = tail call i32 @llvm.ctpop.i32(i32 %875) #12
  %877 = trunc i32 %876 to i8
  %878 = and i8 %877, 1
  %879 = xor i8 %878, 1
  store i8 %879, i8* %13, align 1, !tbaa !2446
  %880 = xor i64 %870, %869
  %881 = xor i64 %880, %871
  %882 = lshr i64 %881, 4
  %883 = trunc i64 %882 to i8
  %884 = and i8 %883, 1
  store i8 %884, i8* %14, align 1, !tbaa !2447
  %885 = icmp eq i64 %871, 0
  %886 = zext i1 %885 to i8
  store i8 %886, i8* %15, align 1, !tbaa !2448
  %887 = lshr i64 %871, 63
  %888 = trunc i64 %887 to i8
  store i8 %888, i8* %16, align 1, !tbaa !2449
  %889 = lshr i64 %869, 63
  %890 = lshr i64 %870, 63
  %891 = xor i64 %890, %889
  %892 = xor i64 %887, %889
  %893 = add nuw nsw i64 %892, %891
  %894 = icmp eq i64 %893, 2
  %895 = zext i1 %894 to i8
  store i8 %895, i8* %17, align 1, !tbaa !2450
  %896 = icmp ne i8 %888, 0
  %897 = xor i1 %896, %894
  %898 = or i1 %885, %897
  %899 = zext i1 %898 to i8
  store i8 %899, i8* %CL, align 1, !tbaa !2453
  %900 = add i64 %865, -81
  %901 = add i64 %1220, 18
  store i64 %901, i64* %PC, align 8
  %902 = inttoptr i64 %900 to i8*
  store i8 %899, i8* %902, align 1
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_402a4c

block_402c13:                                     ; preds = %block_402bc5
  %903 = add i64 %841, 4
  store i64 %903, i64* %PC, align 8
  %904 = load i64, i64* %828, align 8
  store i64 %904, i64* %RAX, align 8, !tbaa !2428
  %905 = add i64 %824, -104
  %906 = add i64 %841, 8
  store i64 %906, i64* %PC, align 8
  %907 = inttoptr i64 %905 to i64*
  store i64 %904, i64* %907, align 8
  %908 = load i64, i64* %PC, align 8
  %909 = add i64 %908, 17
  store i64 %909, i64* %PC, align 8, !tbaa !2428
  br label %block_402c2c

block_402c95:                                     ; preds = %block_402c67, %block_402c89
  %910 = phi i64 [ 0, %block_402c89 ], [ %86, %block_402c67 ]
  %911 = phi i64 [ %1114, %block_402c89 ], [ %113, %block_402c67 ]
  %912 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*), align 8
  %913 = add i64 %912, -50
  %914 = icmp ult i64 %912, 50
  %915 = zext i1 %914 to i8
  store i8 %915, i8* %12, align 1, !tbaa !2432
  %916 = trunc i64 %913 to i32
  %917 = and i32 %916, 255
  %918 = tail call i32 @llvm.ctpop.i32(i32 %917) #12
  %919 = trunc i32 %918 to i8
  %920 = and i8 %919, 1
  %921 = xor i8 %920, 1
  store i8 %921, i8* %13, align 1, !tbaa !2446
  %922 = xor i64 %912, 16
  %923 = xor i64 %922, %913
  %924 = lshr i64 %923, 4
  %925 = trunc i64 %924 to i8
  %926 = and i8 %925, 1
  store i8 %926, i8* %14, align 1, !tbaa !2447
  %927 = icmp eq i64 %913, 0
  %928 = zext i1 %927 to i8
  store i8 %928, i8* %15, align 1, !tbaa !2448
  %929 = lshr i64 %913, 63
  %930 = trunc i64 %929 to i8
  store i8 %930, i8* %16, align 1, !tbaa !2449
  %931 = lshr i64 %912, 63
  %932 = xor i64 %929, %931
  %933 = add nuw nsw i64 %932, %931
  %934 = icmp eq i64 %933, 2
  %935 = zext i1 %934 to i8
  store i8 %935, i8* %17, align 1, !tbaa !2450
  %936 = icmp ne i8 %930, 0
  %937 = xor i1 %936, %934
  %.v45 = select i1 %937, i64 15, i64 38
  %938 = add i64 %911, %.v45
  store i64 %938, i64* %PC, align 8, !tbaa !2428
  br i1 %937, label %block_402ca4, label %block_402cbb

block_40298f:                                     ; preds = %block_402987, %block_40299d
  %939 = phi i64 [ %.pre, %block_402987 ], [ %641, %block_40299d ]
  %940 = load i64, i64* %RBP, align 8
  %941 = add i64 %940, -48
  %942 = add i64 %939, 8
  store i64 %942, i64* %PC, align 8
  %943 = inttoptr i64 %941 to i64*
  %944 = load i64, i64* %943, align 8
  %945 = add i64 %944, -351
  %946 = icmp ult i64 %944, 351
  %947 = zext i1 %946 to i8
  store i8 %947, i8* %12, align 1, !tbaa !2432
  %948 = trunc i64 %945 to i32
  %949 = and i32 %948, 255
  %950 = tail call i32 @llvm.ctpop.i32(i32 %949) #12
  %951 = trunc i32 %950 to i8
  %952 = and i8 %951, 1
  %953 = xor i8 %952, 1
  store i8 %953, i8* %13, align 1, !tbaa !2446
  %954 = xor i64 %944, 16
  %955 = xor i64 %954, %945
  %956 = lshr i64 %955, 4
  %957 = trunc i64 %956 to i8
  %958 = and i8 %957, 1
  store i8 %958, i8* %14, align 1, !tbaa !2447
  %959 = icmp eq i64 %945, 0
  %960 = zext i1 %959 to i8
  store i8 %960, i8* %15, align 1, !tbaa !2448
  %961 = lshr i64 %945, 63
  %962 = trunc i64 %961 to i8
  store i8 %962, i8* %16, align 1, !tbaa !2449
  %963 = lshr i64 %944, 63
  %964 = xor i64 %961, %963
  %965 = add nuw nsw i64 %964, %963
  %966 = icmp eq i64 %965, 2
  %967 = zext i1 %966 to i8
  store i8 %967, i8* %17, align 1, !tbaa !2450
  %968 = icmp ne i8 %962, 0
  %969 = xor i1 %968, %966
  %.v42 = select i1 %969, i64 14, i64 61
  %970 = add i64 %939, %.v42
  store i64 %970, i64* %PC, align 8, !tbaa !2428
  br i1 %969, label %block_40299d, label %block_4029cc

block_402cbb:                                     ; preds = %block_402c95, %block_402ca4
  %971 = phi i64 [ %938, %block_402c95 ], [ %510, %block_402ca4 ]
  store i8 0, i8* %12, align 1, !tbaa !2432
  %972 = trunc i64 %912 to i32
  %973 = and i32 %972, 255
  %974 = tail call i32 @llvm.ctpop.i32(i32 %973) #12
  %975 = trunc i32 %974 to i8
  %976 = and i8 %975, 1
  %977 = xor i8 %976, 1
  store i8 %977, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %978 = icmp eq i64 %912, 0
  %979 = zext i1 %978 to i8
  store i8 %979, i8* %15, align 1, !tbaa !2448
  %980 = trunc i64 %931 to i8
  store i8 %980, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v46 = select i1 %978, i64 15, i64 51
  %981 = add i64 %971, %.v46
  store i64 %981, i64* %PC, align 8, !tbaa !2428
  br i1 %978, label %block_402cca, label %block_402cee

block_402b8e:                                     ; preds = %block_402b80
  %982 = add i64 %1238, 4
  store i64 %982, i64* %PC, align 8
  %983 = load i64, i64* %646, align 8
  store i64 %983, i64* %RAX, align 8, !tbaa !2428
  %984 = add i64 %1238, 7
  store i64 %984, i64* %PC, align 8
  %985 = inttoptr i64 %983 to i64*
  %986 = load i64, i64* %985, align 8
  store i64 %986, i64* %RAX, align 8, !tbaa !2428
  %987 = add i64 %1238, 11
  store i64 %987, i64* %PC, align 8
  %988 = load i64, i64* %646, align 8
  store i64 %988, i64* %RCX, align 8, !tbaa !2428
  %989 = add i64 %988, 8
  %990 = add i64 %1238, 15
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to i64*
  %992 = load i64, i64* %991, align 8
  store i64 %992, i64* %RCX, align 8, !tbaa !2428
  %993 = add i64 %1238, 18
  store i64 %993, i64* %PC, align 8
  %994 = inttoptr i64 %992 to i64*
  %995 = load i64, i64* %994, align 8
  %996 = sub i64 %986, %995
  store i64 %996, i64* %RAX, align 8, !tbaa !2428
  %997 = icmp ult i64 %986, %995
  %998 = zext i1 %997 to i8
  store i8 %998, i8* %12, align 1, !tbaa !2432
  %999 = trunc i64 %996 to i32
  %1000 = and i32 %999, 255
  %1001 = tail call i32 @llvm.ctpop.i32(i32 %1000) #12
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  store i8 %1004, i8* %13, align 1, !tbaa !2446
  %1005 = xor i64 %995, %986
  %1006 = xor i64 %1005, %996
  %1007 = lshr i64 %1006, 4
  %1008 = trunc i64 %1007 to i8
  %1009 = and i8 %1008, 1
  store i8 %1009, i8* %14, align 1, !tbaa !2447
  %1010 = icmp eq i64 %996, 0
  %1011 = zext i1 %1010 to i8
  store i8 %1011, i8* %15, align 1, !tbaa !2448
  %1012 = lshr i64 %996, 63
  %1013 = trunc i64 %1012 to i8
  store i8 %1013, i8* %16, align 1, !tbaa !2449
  %1014 = lshr i64 %986, 63
  %1015 = lshr i64 %995, 63
  %1016 = xor i64 %1015, %1014
  %1017 = xor i64 %1012, %1014
  %1018 = add nuw nsw i64 %1017, %1016
  %1019 = icmp eq i64 %1018, 2
  %1020 = zext i1 %1019 to i8
  store i8 %1020, i8* %17, align 1, !tbaa !2450
  %1021 = add i64 %1238, 22
  store i64 %1021, i64* %PC, align 8
  %1022 = load i64, i64* %646, align 8
  store i64 %1022, i64* %RCX, align 8, !tbaa !2428
  %1023 = add i64 %1022, 16
  %1024 = add i64 %1238, 26
  store i64 %1024, i64* %PC, align 8
  %1025 = inttoptr i64 %1023 to i64*
  %1026 = load i64, i64* %1025, align 8
  store i64 %1026, i64* %RCX, align 8, !tbaa !2428
  %1027 = add i64 %1238, 29
  store i64 %1027, i64* %PC, align 8
  %1028 = inttoptr i64 %1026 to i64*
  %1029 = load i64, i64* %1028, align 8
  %1030 = add i64 %1029, %996
  store i64 %1030, i64* %RAX, align 8, !tbaa !2428
  %1031 = icmp ult i64 %1030, %996
  %1032 = icmp ult i64 %1030, %1029
  %1033 = or i1 %1031, %1032
  %1034 = zext i1 %1033 to i8
  store i8 %1034, i8* %12, align 1, !tbaa !2432
  %1035 = trunc i64 %1030 to i32
  %1036 = and i32 %1035, 255
  %1037 = tail call i32 @llvm.ctpop.i32(i32 %1036) #12
  %1038 = trunc i32 %1037 to i8
  %1039 = and i8 %1038, 1
  %1040 = xor i8 %1039, 1
  store i8 %1040, i8* %13, align 1, !tbaa !2446
  %1041 = xor i64 %1029, %996
  %1042 = xor i64 %1041, %1030
  %1043 = lshr i64 %1042, 4
  %1044 = trunc i64 %1043 to i8
  %1045 = and i8 %1044, 1
  store i8 %1045, i8* %14, align 1, !tbaa !2447
  %1046 = icmp eq i64 %1030, 0
  %1047 = zext i1 %1046 to i8
  store i8 %1047, i8* %15, align 1, !tbaa !2448
  %1048 = lshr i64 %1030, 63
  %1049 = trunc i64 %1048 to i8
  store i8 %1049, i8* %16, align 1, !tbaa !2449
  %1050 = lshr i64 %1029, 63
  %1051 = xor i64 %1048, %1012
  %1052 = xor i64 %1048, %1050
  %1053 = add nuw nsw i64 %1051, %1052
  %1054 = icmp eq i64 %1053, 2
  %1055 = zext i1 %1054 to i8
  store i8 %1055, i8* %17, align 1, !tbaa !2450
  %1056 = load i64, i64* %RBP, align 8
  %1057 = add i64 %1056, -80
  %1058 = add i64 %1238, 33
  store i64 %1058, i64* %PC, align 8
  %1059 = inttoptr i64 %1057 to i64*
  store i64 %1030, i64* %1059, align 8
  %1060 = load i64, i64* %RBP, align 8
  %1061 = add i64 %1060, -72
  %1062 = load i64, i64* %PC, align 8
  %1063 = add i64 %1062, 4
  store i64 %1063, i64* %PC, align 8
  %1064 = inttoptr i64 %1061 to i64*
  %1065 = load i64, i64* %1064, align 8
  store i64 %1065, i64* %RDI, align 8, !tbaa !2428
  %1066 = add i64 %1060, -80
  %1067 = add i64 %1062, 8
  store i64 %1067, i64* %PC, align 8
  %1068 = inttoptr i64 %1066 to i64*
  %1069 = load i64, i64* %1068, align 8
  store i64 %1069, i64* %RSI, align 8, !tbaa !2428
  %1070 = add i64 %1062, -1055
  %1071 = add i64 %1062, 13
  %1072 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1073 = add i64 %1072, -8
  %1074 = inttoptr i64 %1073 to i64*
  store i64 %1071, i64* %1074, align 8
  store i64 %1073, i64* %RSP, align 8, !tbaa !2428
  store i64 %1070, i64* %PC, align 8, !tbaa !2428
  %1075 = tail call %struct.Memory* @sub_402790_bea_is_dual_infeasible_renamed_(%struct.State* nonnull %0, i64 %1070, %struct.Memory* %MEMORY.1)
  %1076 = load i32, i32* %EAX, align 4
  %1077 = load i64, i64* %PC, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %1078 = and i32 %1076, 255
  %1079 = tail call i32 @llvm.ctpop.i32(i32 %1078) #12
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  store i8 %1082, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %1083 = icmp eq i32 %1076, 0
  %1084 = zext i1 %1083 to i8
  store i8 %1084, i8* %15, align 1, !tbaa !2448
  %1085 = lshr i32 %1076, 31
  %1086 = trunc i32 %1085 to i8
  store i8 %1086, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v49 = select i1 %1083, i64 136, i64 9
  %1087 = add i64 %1077, %.v49
  store i64 %1087, i64* %PC, align 8, !tbaa !2428
  br i1 %1083, label %block_402c44, label %block_402bc5

block_402b0d:                                     ; preds = %block_402ac2
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %1088 = add i64 %318, 8
  store i64 %1088, i64* %PC, align 8
  %1089 = load i64, i64* %305, align 8
  %1090 = sub i64 0, %1089
  store i64 %1090, i64* %RCX, align 8, !tbaa !2428
  %1091 = icmp ne i64 %1089, 0
  %1092 = zext i1 %1091 to i8
  store i8 %1092, i8* %12, align 1, !tbaa !2432
  %1093 = trunc i64 %1090 to i32
  %1094 = and i32 %1093, 255
  %1095 = tail call i32 @llvm.ctpop.i32(i32 %1094) #12
  %1096 = trunc i32 %1095 to i8
  %1097 = and i8 %1096, 1
  %1098 = xor i8 %1097, 1
  store i8 %1098, i8* %13, align 1, !tbaa !2446
  %1099 = xor i64 %1089, %1090
  %1100 = lshr i64 %1099, 4
  %1101 = trunc i64 %1100 to i8
  %1102 = and i8 %1101, 1
  store i8 %1102, i8* %14, align 1, !tbaa !2447
  %1103 = icmp eq i64 %1089, 0
  %1104 = zext i1 %1103 to i8
  store i8 %1104, i8* %15, align 1, !tbaa !2448
  %1105 = lshr i64 %1090, 63
  %1106 = trunc i64 %1105 to i8
  store i8 %1106, i8* %16, align 1, !tbaa !2449
  %1107 = lshr i64 %1089, 63
  %1108 = add nuw nsw i64 %1105, %1107
  %1109 = icmp eq i64 %1108, 2
  %1110 = zext i1 %1109 to i8
  store i8 %1110, i8* %17, align 1, !tbaa !2450
  %1111 = add i64 %301, -96
  %1112 = add i64 %318, 12
  store i64 %1112, i64* %PC, align 8
  %1113 = inttoptr i64 %1111 to i64*
  store i64 %1090, i64* %1113, align 8
  %.pre36 = load i64, i64* %PC, align 8
  br label %block_402b19

block_402c89:                                     ; preds = %block_402c67
  %1114 = add i64 %113, 12
  store i64 %1114, i64* %PC, align 8
  store i64 0, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11296) to i64*), align 16
  br label %block_402c95

block_402ab4:                                     ; preds = %block_402aa9
  %1115 = add i64 %430, -72
  %1116 = add i64 %1175, 4
  store i64 %1116, i64* %PC, align 8
  %1117 = inttoptr i64 %1115 to i64*
  %1118 = load i64, i64* %1117, align 8
  store i64 %1118, i64* %RAX, align 8, !tbaa !2428
  %1119 = add i64 %1118, 24
  %1120 = add i64 %1175, 8
  store i64 %1120, i64* %PC, align 8
  %1121 = inttoptr i64 %1119 to i32*
  %1122 = load i32, i32* %1121, align 4
  %1123 = add i32 %1122, -2
  %1124 = icmp ult i32 %1122, 2
  %1125 = zext i1 %1124 to i8
  store i8 %1125, i8* %12, align 1, !tbaa !2432
  %1126 = and i32 %1123, 255
  %1127 = tail call i32 @llvm.ctpop.i32(i32 %1126) #12
  %1128 = trunc i32 %1127 to i8
  %1129 = and i8 %1128, 1
  %1130 = xor i8 %1129, 1
  store i8 %1130, i8* %13, align 1, !tbaa !2446
  %1131 = xor i32 %1123, %1122
  %1132 = lshr i32 %1131, 4
  %1133 = trunc i32 %1132 to i8
  %1134 = and i8 %1133, 1
  store i8 %1134, i8* %14, align 1, !tbaa !2447
  %1135 = icmp eq i32 %1123, 0
  %1136 = zext i1 %1135 to i8
  store i8 %1136, i8* %15, align 1, !tbaa !2448
  %1137 = lshr i32 %1123, 31
  %1138 = trunc i32 %1137 to i8
  store i8 %1138, i8* %16, align 1, !tbaa !2449
  %1139 = lshr i32 %1122, 31
  %1140 = xor i32 %1137, %1139
  %1141 = add nuw nsw i32 %1140, %1139
  %1142 = icmp eq i32 %1141, 2
  %1143 = zext i1 %1142 to i8
  store i8 %1143, i8* %17, align 1, !tbaa !2450
  %.v51 = select i1 %1135, i64 14, i64 121
  %1144 = add i64 %1175, %.v51
  store i64 %1144, i64* %PC, align 8, !tbaa !2428
  br i1 %1135, label %block_402ac2, label %block_402b2d

block_402987:                                     ; preds = %block_402960
  store i64 1, i64* %56, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40298f

block_402c2c:                                     ; preds = %block_402c13, %block_402c20
  %1145 = phi i64 [ %909, %block_402c13 ], [ %.pre32, %block_402c20 ]
  %1146 = load i64, i64* %RBP, align 8
  %1147 = add i64 %1146, -104
  %1148 = add i64 %1145, 4
  store i64 %1148, i64* %PC, align 8
  %1149 = inttoptr i64 %1147 to i64*
  %1150 = load i64, i64* %1149, align 8
  store i64 %1150, i64* %RAX, align 8, !tbaa !2428
  %1151 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 11304) to i64*), align 8
  store i64 %1151, i64* %RCX, align 8, !tbaa !2428
  %1152 = shl i64 %1151, 3
  %1153 = add i64 %1152, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %1154 = add i64 %1145, 20
  store i64 %1154, i64* %PC, align 8
  %1155 = inttoptr i64 %1153 to i64*
  %1156 = load i64, i64* %1155, align 8
  store i64 %1156, i64* %RCX, align 8, !tbaa !2428
  %1157 = add i64 %1156, 16
  %1158 = add i64 %1145, 24
  store i64 %1158, i64* %PC, align 8
  %1159 = inttoptr i64 %1157 to i64*
  store i64 %1150, i64* %1159, align 8
  %.pre33 = load i64, i64* %PC, align 8
  br label %block_402c44

block_402aa9:                                     ; preds = %block_402a5c, %block_402a9b
  %1160 = phi i64 [ %447, %block_402a5c ], [ %772, %block_402a9b ]
  %1161 = add i64 %1160, 5
  store i64 %1161, i64* %PC, align 8
  %1162 = load i64, i64* %434, align 8
  store i8 0, i8* %12, align 1, !tbaa !2432
  %1163 = trunc i64 %1162 to i32
  %1164 = and i32 %1163, 255
  %1165 = tail call i32 @llvm.ctpop.i32(i32 %1164) #12
  %1166 = trunc i32 %1165 to i8
  %1167 = and i8 %1166, 1
  %1168 = xor i8 %1167, 1
  store i8 %1168, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %1169 = icmp eq i64 %1162, 0
  %1170 = zext i1 %1169 to i8
  store i8 %1170, i8* %15, align 1, !tbaa !2448
  %1171 = lshr i64 %1162, 63
  %1172 = trunc i64 %1171 to i8
  store i8 %1172, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %1173 = icmp ne i8 %1172, 0
  %1174 = or i1 %1169, %1173
  %.v50 = select i1 %1174, i64 132, i64 11
  %1175 = add i64 %1160, %.v50
  store i64 %1175, i64* %PC, align 8, !tbaa !2428
  br i1 %1174, label %block_402b2d, label %block_402ab4

block_402a28:                                     ; preds = %block_402a18, %block_402b2d
  %1176 = phi i64 [ %.pre25, %block_402a18 ], [ %480, %block_402b2d ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 1, i8* %13, align 1, !tbaa !2446
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2447
  store i8 0, i8* %CL, align 1, !tbaa !2453
  %1177 = load i64, i64* %RBP, align 8
  %1178 = add i64 %1177, -48
  %1179 = add i64 %1176, 9
  store i64 %1179, i64* %PC, align 8
  %1180 = inttoptr i64 %1178 to i64*
  %1181 = load i64, i64* %1180, align 8
  %1182 = add i64 %1181, -50
  %1183 = icmp ult i64 %1181, 50
  %1184 = zext i1 %1183 to i8
  store i8 %1184, i8* %12, align 1, !tbaa !2432
  %1185 = trunc i64 %1182 to i32
  %1186 = and i32 %1185, 255
  %1187 = tail call i32 @llvm.ctpop.i32(i32 %1186) #12
  %1188 = trunc i32 %1187 to i8
  %1189 = and i8 %1188, 1
  %1190 = xor i8 %1189, 1
  store i8 %1190, i8* %13, align 1, !tbaa !2446
  %1191 = xor i64 %1181, 16
  %1192 = xor i64 %1191, %1182
  %1193 = lshr i64 %1192, 4
  %1194 = trunc i64 %1193 to i8
  %1195 = and i8 %1194, 1
  store i8 %1195, i8* %14, align 1, !tbaa !2447
  %1196 = icmp eq i64 %1182, 0
  %1197 = zext i1 %1196 to i8
  store i8 %1197, i8* %15, align 1, !tbaa !2448
  %1198 = lshr i64 %1182, 63
  %1199 = trunc i64 %1198 to i8
  store i8 %1199, i8* %16, align 1, !tbaa !2449
  %1200 = lshr i64 %1181, 63
  %1201 = xor i64 %1198, %1200
  %1202 = add nuw nsw i64 %1201, %1200
  %1203 = icmp eq i64 %1202, 2
  %1204 = zext i1 %1203 to i8
  store i8 %1204, i8* %17, align 1, !tbaa !2450
  %1205 = add i64 %1177, -81
  %1206 = add i64 %1176, 12
  store i64 %1206, i64* %PC, align 8
  %1207 = inttoptr i64 %1205 to i8*
  store i8 0, i8* %1207, align 1
  %1208 = load i64, i64* %PC, align 8
  %1209 = add i64 %1208, 24
  %1210 = add i64 %1208, 6
  %1211 = load i8, i8* %15, align 1, !tbaa !2448
  %1212 = icmp eq i8 %1211, 0
  %1213 = load i8, i8* %16, align 1, !tbaa !2449
  %1214 = icmp ne i8 %1213, 0
  %1215 = load i8, i8* %17, align 1, !tbaa !2450
  %1216 = icmp ne i8 %1215, 0
  %1217 = xor i1 %1214, %1216
  %1218 = xor i1 %1217, true
  %1219 = and i1 %1212, %1218
  %1220 = select i1 %1219, i64 %1209, i64 %1210
  store i64 %1220, i64* %PC, align 8, !tbaa !2428
  br i1 %1219, label %block_402a4c, label %block_402a3a

block_402b80:                                     ; preds = %block_402b72
  %1221 = add i64 %677, 4
  store i64 %1221, i64* %PC, align 8
  %1222 = load i64, i64* %646, align 8
  store i64 %1222, i64* %RAX, align 8, !tbaa !2428
  %1223 = add i64 %1222, 24
  %1224 = add i64 %677, 8
  store i64 %1224, i64* %PC, align 8
  %1225 = inttoptr i64 %1223 to i32*
  %1226 = load i32, i32* %1225, align 4
  store i8 0, i8* %12, align 1, !tbaa !2432
  %1227 = and i32 %1226, 255
  %1228 = tail call i32 @llvm.ctpop.i32(i32 %1227) #12
  %1229 = trunc i32 %1228 to i8
  %1230 = and i8 %1229, 1
  %1231 = xor i8 %1230, 1
  store i8 %1231, i8* %13, align 1, !tbaa !2446
  store i8 0, i8* %14, align 1, !tbaa !2447
  %1232 = icmp eq i32 %1226, 0
  %1233 = zext i1 %1232 to i8
  store i8 %1233, i8* %15, align 1, !tbaa !2448
  %1234 = lshr i32 %1226, 31
  %1235 = trunc i32 %1234 to i8
  store i8 %1235, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  %1236 = icmp ne i8 %1235, 0
  %1237 = or i1 %1232, %1236
  %.v48 = select i1 %1237, i64 201, i64 14
  %1238 = add i64 %677, %.v48
  store i64 %1238, i64* %PC, align 8, !tbaa !2428
  br i1 %1237, label %block_402c49, label %block_402b8e

block_402b00:                                     ; preds = %block_402ac2
  %1239 = add i64 %318, 4
  store i64 %1239, i64* %PC, align 8
  %1240 = load i64, i64* %305, align 8
  store i64 %1240, i64* %RAX, align 8, !tbaa !2428
  %1241 = add i64 %301, -96
  %1242 = add i64 %318, 8
  store i64 %1242, i64* %PC, align 8
  %1243 = inttoptr i64 %1241 to i64*
  store i64 %1240, i64* %1243, align 8
  %1244 = load i64, i64* %PC, align 8
  %1245 = add i64 %1244, 17
  store i64 %1245, i64* %PC, align 8, !tbaa !2428
  br label %block_402b19
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_404710___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #8 {
block_404710:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4027f0_sort_basket(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4027f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = load i64, i64* %PC, align 8
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %9 = add i64 %5, -56
  store i64 %9, i64* %RSP, align 8, !tbaa !2428
  %10 = icmp ult i64 %6, 48
  %11 = zext i1 %10 to i8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11, i8* %12, align 1, !tbaa !2432
  %13 = trunc i64 %9 to i32
  %14 = and i32 %13, 255
  %15 = tail call i32 @llvm.ctpop.i32(i32 %14) #12
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 1
  %18 = xor i8 %17, 1
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %18, i8* %19, align 1, !tbaa !2446
  %20 = xor i64 %6, 16
  %21 = xor i64 %20, %9
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %9, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %9, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %6, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  store i64 2, i64* %RCX, align 8, !tbaa !2428
  %38 = add i64 %5, -16
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %8, 18
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %RSI, align 8
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %RSI, align 8, !tbaa !2428
  %54 = add i64 %48, -24
  %55 = add i64 %50, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -16
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RSI, align 8, !tbaa !2428
  %63 = add i64 %57, -32
  %64 = add i64 %59, 8
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %63 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -24
  %68 = load i64, i64* %PC, align 8
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %67 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RSI, align 8, !tbaa !2428
  %72 = add i64 %66, -32
  %73 = add i64 %68, 8
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, %71
  store i64 %76, i64* %RSI, align 8, !tbaa !2428
  %77 = icmp ult i64 %76, %71
  %78 = icmp ult i64 %76, %75
  %79 = or i1 %77, %78
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %12, align 1, !tbaa !2432
  %81 = trunc i64 %76 to i32
  %82 = and i32 %81, 255
  %83 = tail call i32 @llvm.ctpop.i32(i32 %82) #12
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %19, align 1, !tbaa !2446
  %87 = xor i64 %75, %71
  %88 = xor i64 %87, %76
  %89 = lshr i64 %88, 4
  %90 = trunc i64 %89 to i8
  %91 = and i8 %90, 1
  store i8 %91, i8* %25, align 1, !tbaa !2447
  %92 = icmp eq i64 %76, 0
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %28, align 1, !tbaa !2448
  %94 = lshr i64 %76, 63
  %95 = trunc i64 %94 to i8
  store i8 %95, i8* %31, align 1, !tbaa !2449
  %96 = lshr i64 %71, 63
  %97 = lshr i64 %75, 63
  %98 = xor i64 %94, %96
  %99 = xor i64 %94, %97
  %100 = add nuw nsw i64 %98, %99
  %101 = icmp eq i64 %100, 2
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %37, align 1, !tbaa !2450
  store i64 %76, i64* %RAX, align 8, !tbaa !2428
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %104 = ashr i64 %76, 63
  store i64 %104, i64* %103, align 8, !tbaa !2428
  %105 = load i64, i64* %RCX, align 8
  %106 = add i64 %68, 16
  store i64 %106, i64* %PC, align 8
  %107 = sext i64 %105 to i128
  %108 = and i128 %107, -18446744073709551616
  %109 = zext i64 %104 to i128
  %110 = shl nuw i128 %109, 64
  %111 = zext i64 %76 to i128
  %112 = or i128 %111, %110
  %113 = zext i64 %105 to i128
  %114 = or i128 %108, %113
  %115 = sdiv i128 %112, %114
  %116 = trunc i128 %115 to i64
  %117 = and i128 %115, 18446744073709551615
  %118 = sext i64 %116 to i128
  %119 = and i128 %118, -18446744073709551616
  %120 = or i128 %119, %117
  %121 = icmp eq i128 %115, %120
  br i1 %121, label %124, label %122

; <label>:122:                                    ; preds = %block_4027f0
  %123 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %106, %struct.Memory* %2) #13
  %.pre = load i64, i64* %RAX, align 8
  %.pre22 = load i64, i64* %PC, align 8
  %.pre23 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

; <label>:124:                                    ; preds = %block_4027f0
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %126 = srem i128 %112, %114
  %127 = trunc i128 %126 to i64
  store i64 %116, i64* %125, align 8, !tbaa !2428
  store i64 %127, i64* %103, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2432
  store i8 0, i8* %19, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i8 0, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit: ; preds = %124, %122
  %128 = phi i64 [ %.pre23, %122 ], [ %66, %124 ]
  %129 = phi i64 [ %.pre22, %122 ], [ %106, %124 ]
  %130 = phi i64 [ %.pre, %122 ], [ %116, %124 ]
  %131 = phi %struct.Memory* [ %123, %122 ], [ %2, %124 ]
  %132 = shl i64 %130, 3
  %133 = add i64 %132, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %134 = add i64 %129, 8
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %133 to i64*
  %136 = load i64, i64* %135, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = add i64 %136, 16
  %138 = add i64 %129, 12
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = add i64 %128, -40
  %142 = add i64 %129, 16
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %141 to i64*
  store i64 %140, i64* %143, align 8
  br label %block_402837

block_40293f:                                     ; preds = %block_402931
  %144 = add i64 %586, 5
  store i64 %144, i64* %PC, align 8
  %145 = load i64, i64* %553, align 8
  %146 = add i64 %145, -50
  %147 = icmp ult i64 %145, 50
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %12, align 1, !tbaa !2432
  %149 = trunc i64 %146 to i32
  %150 = and i32 %149, 255
  %151 = tail call i32 @llvm.ctpop.i32(i32 %150) #12
  %152 = trunc i32 %151 to i8
  %153 = and i8 %152, 1
  %154 = xor i8 %153, 1
  store i8 %154, i8* %19, align 1, !tbaa !2446
  %155 = xor i64 %145, 16
  %156 = xor i64 %155, %146
  %157 = lshr i64 %156, 4
  %158 = trunc i64 %157 to i8
  %159 = and i8 %158, 1
  store i8 %159, i8* %25, align 1, !tbaa !2447
  %160 = icmp eq i64 %146, 0
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %28, align 1, !tbaa !2448
  %162 = lshr i64 %146, 63
  %163 = trunc i64 %162 to i8
  store i8 %163, i8* %31, align 1, !tbaa !2449
  %164 = lshr i64 %145, 63
  %165 = xor i64 %162, %164
  %166 = add nuw nsw i64 %165, %164
  %167 = icmp eq i64 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %37, align 1, !tbaa !2450
  %169 = icmp ne i8 %163, 0
  %170 = xor i1 %169, %167
  %.demorgan33 = or i1 %160, %170
  %.v40 = select i1 %.demorgan33, i64 11, i64 24
  %171 = add i64 %586, %.v40
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan33, label %block_40294a, label %block_402957

block_402856:                                     ; preds = %block_40283c
  %172 = add i64 %419, 4
  store i64 %172, i64* %PC, align 8
  %173 = load i64, i64* %376, align 8
  %174 = add i64 %173, 1
  store i64 %174, i64* %RAX, align 8, !tbaa !2428
  %175 = icmp eq i64 %173, -1
  %176 = icmp eq i64 %174, 0
  %177 = or i1 %175, %176
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %12, align 1, !tbaa !2432
  %179 = trunc i64 %174 to i32
  %180 = and i32 %179, 255
  %181 = tail call i32 @llvm.ctpop.i32(i32 %180) #12
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  %184 = xor i8 %183, 1
  store i8 %184, i8* %19, align 1, !tbaa !2446
  %185 = xor i64 %174, %173
  %186 = lshr i64 %185, 4
  %187 = trunc i64 %186 to i8
  %188 = and i8 %187, 1
  store i8 %188, i8* %25, align 1, !tbaa !2447
  %189 = zext i1 %176 to i8
  store i8 %189, i8* %28, align 1, !tbaa !2448
  %190 = lshr i64 %174, 63
  %191 = trunc i64 %190 to i8
  store i8 %191, i8* %31, align 1, !tbaa !2449
  %192 = lshr i64 %173, 63
  %193 = xor i64 %190, %192
  %194 = add nuw nsw i64 %193, %190
  %195 = icmp eq i64 %194, 2
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %37, align 1, !tbaa !2450
  %197 = add i64 %419, 12
  store i64 %197, i64* %PC, align 8
  store i64 %174, i64* %376, align 8
  br label %block_40283c

block_402837:                                     ; preds = %block_402903, %_ZN12_GLOBAL__N_1L10IDIVrdxraxI2RnImEEEP6MemoryS4_R5StateT_.exit
  br label %block_40283c

block_402897:                                     ; preds = %block_40286c
  %198 = add i64 %490, -24
  %199 = add i64 %538, 4
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %RAX, align 8, !tbaa !2428
  %202 = add i64 %538, 8
  store i64 %202, i64* %PC, align 8
  %203 = load i64, i64* %499, align 8
  %204 = sub i64 %201, %203
  %205 = icmp ult i64 %201, %203
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %12, align 1, !tbaa !2432
  %207 = trunc i64 %204 to i32
  %208 = and i32 %207, 255
  %209 = tail call i32 @llvm.ctpop.i32(i32 %208) #12
  %210 = trunc i32 %209 to i8
  %211 = and i8 %210, 1
  %212 = xor i8 %211, 1
  store i8 %212, i8* %19, align 1, !tbaa !2446
  %213 = xor i64 %203, %201
  %214 = xor i64 %213, %204
  %215 = lshr i64 %214, 4
  %216 = trunc i64 %215 to i8
  %217 = and i8 %216, 1
  store i8 %217, i8* %25, align 1, !tbaa !2447
  %218 = icmp eq i64 %204, 0
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %28, align 1, !tbaa !2448
  %220 = lshr i64 %204, 63
  %221 = trunc i64 %220 to i8
  store i8 %221, i8* %31, align 1, !tbaa !2449
  %222 = lshr i64 %201, 63
  %223 = lshr i64 %203, 63
  %224 = xor i64 %223, %222
  %225 = xor i64 %220, %222
  %226 = add nuw nsw i64 %225, %224
  %227 = icmp eq i64 %226, 2
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %37, align 1, !tbaa !2450
  %229 = icmp ne i8 %221, 0
  %230 = xor i1 %229, %227
  %.v35 = select i1 %230, i64 14, i64 70
  %231 = add i64 %538, %.v35
  store i64 %231, i64* %PC, align 8, !tbaa !2428
  br i1 %230, label %block_4028a5, label %block_4028dd

block_402916:                                     ; preds = %block_402903
  %232 = add i64 %587, -8
  %233 = add i64 %625, 4
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %232 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %RAX, align 8, !tbaa !2428
  %236 = add i64 %625, 8
  store i64 %236, i64* %PC, align 8
  %237 = load i64, i64* %595, align 8
  %238 = sub i64 %235, %237
  %239 = icmp ult i64 %235, %237
  %240 = zext i1 %239 to i8
  store i8 %240, i8* %12, align 1, !tbaa !2432
  %241 = trunc i64 %238 to i32
  %242 = and i32 %241, 255
  %243 = tail call i32 @llvm.ctpop.i32(i32 %242) #12
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  store i8 %246, i8* %19, align 1, !tbaa !2446
  %247 = xor i64 %237, %235
  %248 = xor i64 %247, %238
  %249 = lshr i64 %248, 4
  %250 = trunc i64 %249 to i8
  %251 = and i8 %250, 1
  store i8 %251, i8* %25, align 1, !tbaa !2447
  %252 = icmp eq i64 %238, 0
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %28, align 1, !tbaa !2448
  %254 = lshr i64 %238, 63
  %255 = trunc i64 %254 to i8
  store i8 %255, i8* %31, align 1, !tbaa !2449
  %256 = lshr i64 %235, 63
  %257 = lshr i64 %237, 63
  %258 = xor i64 %257, %256
  %259 = xor i64 %254, %256
  %260 = add nuw nsw i64 %259, %258
  %261 = icmp eq i64 %260, 2
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %37, align 1, !tbaa !2450
  %263 = icmp ne i8 %255, 0
  %264 = xor i1 %263, %261
  %.v38 = select i1 %264, i64 14, i64 27
  %265 = add i64 %625, %.v38
  store i64 %265, i64* %PC, align 8, !tbaa !2428
  br i1 %264, label %block_402924, label %block_402931

block_4028eb:                                     ; preds = %block_4028dd
  %266 = add i64 %370, 4
  store i64 %266, i64* %PC, align 8
  %267 = load i64, i64* %337, align 8
  %268 = add i64 %267, 1
  store i64 %268, i64* %RAX, align 8, !tbaa !2428
  %269 = icmp eq i64 %267, -1
  %270 = icmp eq i64 %268, 0
  %271 = or i1 %269, %270
  %272 = zext i1 %271 to i8
  store i8 %272, i8* %12, align 1, !tbaa !2432
  %273 = trunc i64 %268 to i32
  %274 = and i32 %273, 255
  %275 = tail call i32 @llvm.ctpop.i32(i32 %274) #12
  %276 = trunc i32 %275 to i8
  %277 = and i8 %276, 1
  %278 = xor i8 %277, 1
  store i8 %278, i8* %19, align 1, !tbaa !2446
  %279 = xor i64 %268, %267
  %280 = lshr i64 %279, 4
  %281 = trunc i64 %280 to i8
  %282 = and i8 %281, 1
  store i8 %282, i8* %25, align 1, !tbaa !2447
  %283 = zext i1 %270 to i8
  store i8 %283, i8* %28, align 1, !tbaa !2448
  %284 = lshr i64 %268, 63
  %285 = trunc i64 %284 to i8
  store i8 %285, i8* %31, align 1, !tbaa !2449
  %286 = lshr i64 %267, 63
  %287 = xor i64 %284, %286
  %288 = add nuw nsw i64 %287, %284
  %289 = icmp eq i64 %288, 2
  %290 = zext i1 %289 to i8
  store i8 %290, i8* %37, align 1, !tbaa !2450
  %291 = add i64 %370, 12
  store i64 %291, i64* %PC, align 8
  store i64 %268, i64* %337, align 8
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -32
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %293 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = add i64 %297, -1
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = icmp ne i64 %297, 0
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %12, align 1, !tbaa !2432
  %301 = trunc i64 %298 to i32
  %302 = and i32 %301, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #12
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %19, align 1, !tbaa !2446
  %307 = xor i64 %297, 16
  %308 = xor i64 %307, %298
  %309 = lshr i64 %308, 4
  %310 = trunc i64 %309 to i8
  %311 = and i8 %310, 1
  store i8 %311, i8* %25, align 1, !tbaa !2447
  %312 = icmp eq i64 %298, 0
  %313 = zext i1 %312 to i8
  store i8 %313, i8* %28, align 1, !tbaa !2448
  %314 = lshr i64 %298, 63
  %315 = trunc i64 %314 to i8
  store i8 %315, i8* %31, align 1, !tbaa !2449
  %316 = lshr i64 %297, 63
  %317 = xor i64 %314, %316
  %318 = xor i64 %314, 1
  %319 = add nuw nsw i64 %317, %318
  %320 = icmp eq i64 %319, 2
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %37, align 1, !tbaa !2450
  %322 = add i64 %294, 12
  store i64 %322, i64* %PC, align 8
  store i64 %298, i64* %296, align 8
  %.pre28 = load i64, i64* %PC, align 8
  %.pre29 = load i64, i64* %RBP, align 8
  br label %block_402903

block_40294a:                                     ; preds = %block_40293f
  %323 = add i64 %171, 4
  store i64 %323, i64* %PC, align 8
  %324 = load i64, i64* %553, align 8
  store i64 %324, i64* %RDI, align 8, !tbaa !2428
  %325 = add i64 %171, 8
  store i64 %325, i64* %PC, align 8
  %326 = load i64, i64* %557, align 8
  store i64 %326, i64* %RSI, align 8, !tbaa !2428
  %327 = add i64 %171, -346
  %328 = add i64 %171, 13
  %329 = load i64, i64* %RSP, align 8, !tbaa !2428
  %330 = add i64 %329, -8
  %331 = inttoptr i64 %330 to i64*
  store i64 %328, i64* %331, align 8
  store i64 %330, i64* %RSP, align 8, !tbaa !2428
  store i64 %327, i64* %PC, align 8, !tbaa !2428
  %332 = tail call %struct.Memory* @sub_4027f0_sort_basket_renamed_(%struct.State* nonnull %0, i64 %327, %struct.Memory* %MEMORY.4)
  %.pre32 = load i64, i64* %PC, align 8
  br label %block_402957

block_4028dd:                                     ; preds = %block_402897, %block_4028a5
  %333 = phi i64 [ %231, %block_402897 ], [ %.pre27, %block_4028a5 ]
  %334 = phi i64 [ %490, %block_402897 ], [ %.pre26, %block_4028a5 ]
  %335 = add i64 %334, -24
  %336 = add i64 %333, 4
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i64*
  %338 = load i64, i64* %337, align 8
  store i64 %338, i64* %RAX, align 8, !tbaa !2428
  %339 = add i64 %334, -32
  %340 = add i64 %333, 8
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i64*
  %342 = load i64, i64* %341, align 8
  %343 = sub i64 %338, %342
  %344 = icmp ult i64 %338, %342
  %345 = zext i1 %344 to i8
  store i8 %345, i8* %12, align 1, !tbaa !2432
  %346 = trunc i64 %343 to i32
  %347 = and i32 %346, 255
  %348 = tail call i32 @llvm.ctpop.i32(i32 %347) #12
  %349 = trunc i32 %348 to i8
  %350 = and i8 %349, 1
  %351 = xor i8 %350, 1
  store i8 %351, i8* %19, align 1, !tbaa !2446
  %352 = xor i64 %342, %338
  %353 = xor i64 %352, %343
  %354 = lshr i64 %353, 4
  %355 = trunc i64 %354 to i8
  %356 = and i8 %355, 1
  store i8 %356, i8* %25, align 1, !tbaa !2447
  %357 = icmp eq i64 %343, 0
  %358 = zext i1 %357 to i8
  store i8 %358, i8* %28, align 1, !tbaa !2448
  %359 = lshr i64 %343, 63
  %360 = trunc i64 %359 to i8
  store i8 %360, i8* %31, align 1, !tbaa !2449
  %361 = lshr i64 %338, 63
  %362 = lshr i64 %342, 63
  %363 = xor i64 %362, %361
  %364 = xor i64 %359, %361
  %365 = add nuw nsw i64 %364, %363
  %366 = icmp eq i64 %365, 2
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %37, align 1, !tbaa !2450
  %368 = icmp ne i8 %360, 0
  %369 = xor i1 %368, %366
  %.demorgan = or i1 %357, %369
  %.v36 = select i1 %.demorgan, i64 14, i64 38
  %370 = add i64 %333, %.v36
  store i64 %370, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_4028eb, label %block_402903

block_40283c:                                     ; preds = %block_402837, %block_402856
  %.sink16 = phi i64 [ 5, %block_402837 ], [ -38, %block_402856 ]
  %371 = load i64, i64* %PC, align 8
  %372 = add i64 %371, %.sink16
  %373 = load i64, i64* %RBP, align 8
  %374 = add i64 %373, -24
  %375 = add i64 %372, 4
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %RAX, align 8, !tbaa !2428
  %378 = shl i64 %377, 3
  %379 = add i64 %378, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %380 = add i64 %372, 12
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to i64*
  %382 = load i64, i64* %381, align 8
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = add i64 %382, 16
  %384 = add i64 %372, 16
  store i64 %384, i64* %PC, align 8
  %385 = inttoptr i64 %383 to i64*
  %386 = load i64, i64* %385, align 8
  store i64 %386, i64* %RAX, align 8, !tbaa !2428
  %387 = add i64 %373, -40
  %388 = add i64 %372, 20
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  %390 = load i64, i64* %389, align 8
  %391 = sub i64 %386, %390
  %392 = icmp ult i64 %386, %390
  %393 = zext i1 %392 to i8
  store i8 %393, i8* %12, align 1, !tbaa !2432
  %394 = trunc i64 %391 to i32
  %395 = and i32 %394, 255
  %396 = tail call i32 @llvm.ctpop.i32(i32 %395) #12
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  store i8 %399, i8* %19, align 1, !tbaa !2446
  %400 = xor i64 %390, %386
  %401 = xor i64 %400, %391
  %402 = lshr i64 %401, 4
  %403 = trunc i64 %402 to i8
  %404 = and i8 %403, 1
  store i8 %404, i8* %25, align 1, !tbaa !2447
  %405 = icmp eq i64 %391, 0
  %406 = zext i1 %405 to i8
  store i8 %406, i8* %28, align 1, !tbaa !2448
  %407 = lshr i64 %391, 63
  %408 = trunc i64 %407 to i8
  store i8 %408, i8* %31, align 1, !tbaa !2449
  %409 = lshr i64 %386, 63
  %410 = lshr i64 %390, 63
  %411 = xor i64 %410, %409
  %412 = xor i64 %407, %409
  %413 = add nuw nsw i64 %412, %411
  %414 = icmp eq i64 %413, 2
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %37, align 1, !tbaa !2450
  %416 = icmp ne i8 %408, 0
  %417 = xor i1 %416, %414
  %418 = or i1 %405, %417
  %.v = select i1 %418, i64 43, i64 26
  %419 = add i64 %372, %.v
  store i64 %419, i64* %PC, align 8, !tbaa !2428
  br i1 %418, label %block_40286c.preheader, label %block_402856

block_40286c.preheader:                           ; preds = %block_40283c
  br label %block_40286c

block_402886:                                     ; preds = %block_40286c
  %420 = add i64 %538, 4
  store i64 %420, i64* %PC, align 8
  %421 = load i64, i64* %499, align 8
  %422 = add i64 %421, -1
  store i64 %422, i64* %RAX, align 8, !tbaa !2428
  %423 = icmp ne i64 %421, 0
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %12, align 1, !tbaa !2432
  %425 = trunc i64 %422 to i32
  %426 = and i32 %425, 255
  %427 = tail call i32 @llvm.ctpop.i32(i32 %426) #12
  %428 = trunc i32 %427 to i8
  %429 = and i8 %428, 1
  %430 = xor i8 %429, 1
  store i8 %430, i8* %19, align 1, !tbaa !2446
  %431 = xor i64 %421, 16
  %432 = xor i64 %431, %422
  %433 = lshr i64 %432, 4
  %434 = trunc i64 %433 to i8
  %435 = and i8 %434, 1
  store i8 %435, i8* %25, align 1, !tbaa !2447
  %436 = icmp eq i64 %422, 0
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %28, align 1, !tbaa !2448
  %438 = lshr i64 %422, 63
  %439 = trunc i64 %438 to i8
  store i8 %439, i8* %31, align 1, !tbaa !2449
  %440 = lshr i64 %421, 63
  %441 = xor i64 %438, %440
  %442 = xor i64 %438, 1
  %443 = add nuw nsw i64 %441, %442
  %444 = icmp eq i64 %443, 2
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %37, align 1, !tbaa !2450
  %446 = add i64 %538, 12
  store i64 %446, i64* %PC, align 8
  store i64 %422, i64* %499, align 8
  %.pre24 = load i64, i64* %PC, align 8
  %.pre25 = load i64, i64* %RBP, align 8
  br label %block_40286c

block_4028a5:                                     ; preds = %block_402897
  %447 = add i64 %231, 4
  store i64 %447, i64* %PC, align 8
  %448 = load i64, i64* %200, align 8
  store i64 %448, i64* %RAX, align 8, !tbaa !2428
  %449 = shl i64 %448, 3
  %450 = add i64 %449, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %451 = add i64 %231, 12
  store i64 %451, i64* %PC, align 8
  %452 = inttoptr i64 %450 to i64*
  %453 = load i64, i64* %452, align 8
  store i64 %453, i64* %RAX, align 8, !tbaa !2428
  %454 = add i64 %490, -48
  %455 = add i64 %231, 16
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %454 to i64*
  store i64 %453, i64* %456, align 8
  %457 = load i64, i64* %RBP, align 8
  %458 = add i64 %457, -32
  %459 = load i64, i64* %PC, align 8
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %458 to i64*
  %462 = load i64, i64* %461, align 8
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = shl i64 %462, 3
  %464 = add i64 %463, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %465 = add i64 %459, 12
  store i64 %465, i64* %PC, align 8
  %466 = inttoptr i64 %464 to i64*
  %467 = load i64, i64* %466, align 8
  store i64 %467, i64* %RAX, align 8, !tbaa !2428
  %468 = add i64 %457, -24
  %469 = add i64 %459, 16
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %468 to i64*
  %471 = load i64, i64* %470, align 8
  store i64 %471, i64* %RCX, align 8, !tbaa !2428
  %472 = shl i64 %471, 3
  %473 = add i64 %472, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %474 = add i64 %459, 24
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %473 to i64*
  store i64 %467, i64* %475, align 8
  %476 = load i64, i64* %RBP, align 8
  %477 = add i64 %476, -48
  %478 = load i64, i64* %PC, align 8
  %479 = add i64 %478, 4
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %477 to i64*
  %481 = load i64, i64* %480, align 8
  store i64 %481, i64* %RAX, align 8, !tbaa !2428
  %482 = add i64 %476, -32
  %483 = add i64 %478, 8
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i64*
  %485 = load i64, i64* %484, align 8
  store i64 %485, i64* %RCX, align 8, !tbaa !2428
  %486 = shl i64 %485, 3
  %487 = add i64 %486, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %488 = add i64 %478, 16
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to i64*
  store i64 %481, i64* %489, align 8
  %.pre26 = load i64, i64* %RBP, align 8
  %.pre27 = load i64, i64* %PC, align 8
  br label %block_4028dd

block_40286c:                                     ; preds = %block_40286c.preheader, %block_402886
  %490 = phi i64 [ %.pre25, %block_402886 ], [ %373, %block_40286c.preheader ]
  %491 = phi i64 [ %.pre24, %block_402886 ], [ %419, %block_40286c.preheader ]
  %.sink17 = phi i64 [ -38, %block_402886 ], [ 5, %block_40286c.preheader ]
  %492 = add i64 %491, %.sink17
  %493 = add i64 %490, -40
  %494 = add i64 %492, 4
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %493 to i64*
  %496 = load i64, i64* %495, align 8
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %497 = add i64 %490, -32
  %498 = add i64 %492, 8
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i64*
  %500 = load i64, i64* %499, align 8
  store i64 %500, i64* %RCX, align 8, !tbaa !2428
  %501 = shl i64 %500, 3
  %502 = add i64 %501, add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 48)
  %503 = add i64 %492, 16
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %502 to i64*
  %505 = load i64, i64* %504, align 8
  store i64 %505, i64* %RCX, align 8, !tbaa !2428
  %506 = add i64 %505, 16
  %507 = add i64 %492, 20
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %506 to i64*
  %509 = load i64, i64* %508, align 8
  %510 = sub i64 %496, %509
  %511 = icmp ult i64 %496, %509
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %12, align 1, !tbaa !2432
  %513 = trunc i64 %510 to i32
  %514 = and i32 %513, 255
  %515 = tail call i32 @llvm.ctpop.i32(i32 %514) #12
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  store i8 %518, i8* %19, align 1, !tbaa !2446
  %519 = xor i64 %509, %496
  %520 = xor i64 %519, %510
  %521 = lshr i64 %520, 4
  %522 = trunc i64 %521 to i8
  %523 = and i8 %522, 1
  store i8 %523, i8* %25, align 1, !tbaa !2447
  %524 = icmp eq i64 %510, 0
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %28, align 1, !tbaa !2448
  %526 = lshr i64 %510, 63
  %527 = trunc i64 %526 to i8
  store i8 %527, i8* %31, align 1, !tbaa !2449
  %528 = lshr i64 %496, 63
  %529 = lshr i64 %509, 63
  %530 = xor i64 %529, %528
  %531 = xor i64 %526, %528
  %532 = add nuw nsw i64 %531, %530
  %533 = icmp eq i64 %532, 2
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %37, align 1, !tbaa !2450
  %535 = icmp ne i8 %527, 0
  %536 = xor i1 %535, %533
  %537 = or i1 %524, %536
  %.v34 = select i1 %537, i64 43, i64 26
  %538 = add i64 %492, %.v34
  store i64 %538, i64* %PC, align 8, !tbaa !2428
  br i1 %537, label %block_402897, label %block_402886

block_402924:                                     ; preds = %block_402916
  %539 = add i64 %265, 4
  store i64 %539, i64* %PC, align 8
  %540 = load i64, i64* %234, align 8
  store i64 %540, i64* %RDI, align 8, !tbaa !2428
  %541 = add i64 %265, 8
  store i64 %541, i64* %PC, align 8
  %542 = load i64, i64* %595, align 8
  store i64 %542, i64* %RSI, align 8, !tbaa !2428
  %543 = add i64 %265, -308
  %544 = add i64 %265, 13
  %545 = load i64, i64* %RSP, align 8, !tbaa !2428
  %546 = add i64 %545, -8
  %547 = inttoptr i64 %546 to i64*
  store i64 %544, i64* %547, align 8
  store i64 %546, i64* %RSP, align 8, !tbaa !2428
  store i64 %543, i64* %PC, align 8, !tbaa !2428
  %548 = tail call %struct.Memory* @sub_4027f0_sort_basket_renamed_(%struct.State* nonnull %0, i64 %543, %struct.Memory* %131)
  %.pre30 = load i64, i64* %RBP, align 8
  %.pre31 = load i64, i64* %PC, align 8
  br label %block_402931

block_402931:                                     ; preds = %block_402916, %block_402924
  %549 = phi i64 [ %265, %block_402916 ], [ %.pre31, %block_402924 ]
  %550 = phi i64 [ %587, %block_402916 ], [ %.pre30, %block_402924 ]
  %MEMORY.4 = phi %struct.Memory* [ %131, %block_402916 ], [ %548, %block_402924 ]
  %551 = add i64 %550, -24
  %552 = add i64 %549, 4
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %551 to i64*
  %554 = load i64, i64* %553, align 8
  store i64 %554, i64* %RAX, align 8, !tbaa !2428
  %555 = add i64 %550, -16
  %556 = add i64 %549, 8
  store i64 %556, i64* %PC, align 8
  %557 = inttoptr i64 %555 to i64*
  %558 = load i64, i64* %557, align 8
  %559 = sub i64 %554, %558
  %560 = icmp ult i64 %554, %558
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %12, align 1, !tbaa !2432
  %562 = trunc i64 %559 to i32
  %563 = and i32 %562, 255
  %564 = tail call i32 @llvm.ctpop.i32(i32 %563) #12
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  store i8 %567, i8* %19, align 1, !tbaa !2446
  %568 = xor i64 %558, %554
  %569 = xor i64 %568, %559
  %570 = lshr i64 %569, 4
  %571 = trunc i64 %570 to i8
  %572 = and i8 %571, 1
  store i8 %572, i8* %25, align 1, !tbaa !2447
  %573 = icmp eq i64 %559, 0
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %28, align 1, !tbaa !2448
  %575 = lshr i64 %559, 63
  %576 = trunc i64 %575 to i8
  store i8 %576, i8* %31, align 1, !tbaa !2449
  %577 = lshr i64 %554, 63
  %578 = lshr i64 %558, 63
  %579 = xor i64 %578, %577
  %580 = xor i64 %575, %577
  %581 = add nuw nsw i64 %580, %579
  %582 = icmp eq i64 %581, 2
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %37, align 1, !tbaa !2450
  %584 = icmp ne i8 %576, 0
  %585 = xor i1 %584, %582
  %.v39 = select i1 %585, i64 14, i64 38
  %586 = add i64 %549, %.v39
  store i64 %586, i64* %PC, align 8, !tbaa !2428
  br i1 %585, label %block_40293f, label %block_402957

block_402903:                                     ; preds = %block_4028dd, %block_4028eb
  %587 = phi i64 [ %334, %block_4028dd ], [ %.pre29, %block_4028eb ]
  %588 = phi i64 [ %370, %block_4028dd ], [ %.pre28, %block_4028eb ]
  %589 = add i64 %587, -24
  %590 = add i64 %588, 9
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %589 to i64*
  %592 = load i64, i64* %591, align 8
  store i64 %592, i64* %RAX, align 8, !tbaa !2428
  %593 = add i64 %587, -32
  %594 = add i64 %588, 13
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i64*
  %596 = load i64, i64* %595, align 8
  %597 = sub i64 %592, %596
  %598 = icmp ult i64 %592, %596
  %599 = zext i1 %598 to i8
  store i8 %599, i8* %12, align 1, !tbaa !2432
  %600 = trunc i64 %597 to i32
  %601 = and i32 %600, 255
  %602 = tail call i32 @llvm.ctpop.i32(i32 %601) #12
  %603 = trunc i32 %602 to i8
  %604 = and i8 %603, 1
  %605 = xor i8 %604, 1
  store i8 %605, i8* %19, align 1, !tbaa !2446
  %606 = xor i64 %596, %592
  %607 = xor i64 %606, %597
  %608 = lshr i64 %607, 4
  %609 = trunc i64 %608 to i8
  %610 = and i8 %609, 1
  store i8 %610, i8* %25, align 1, !tbaa !2447
  %611 = icmp eq i64 %597, 0
  %612 = zext i1 %611 to i8
  store i8 %612, i8* %28, align 1, !tbaa !2448
  %613 = lshr i64 %597, 63
  %614 = trunc i64 %613 to i8
  store i8 %614, i8* %31, align 1, !tbaa !2449
  %615 = lshr i64 %592, 63
  %616 = lshr i64 %596, 63
  %617 = xor i64 %616, %615
  %618 = xor i64 %613, %615
  %619 = add nuw nsw i64 %618, %617
  %620 = icmp eq i64 %619, 2
  %621 = zext i1 %620 to i8
  store i8 %621, i8* %37, align 1, !tbaa !2450
  %622 = icmp ne i8 %614, 0
  %623 = xor i1 %622, %620
  %624 = or i1 %611, %623
  %.v37 = select i1 %624, i64 -204, i64 19
  %625 = add i64 %588, %.v37
  store i64 %625, i64* %PC, align 8, !tbaa !2428
  br i1 %624, label %block_402837, label %block_402916

block_402957:                                     ; preds = %block_40293f, %block_402931, %block_40294a
  %626 = phi i64 [ %586, %block_402931 ], [ %171, %block_40293f ], [ %.pre32, %block_40294a ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.4, %block_402931 ], [ %MEMORY.4, %block_40293f ], [ %332, %block_40294a ]
  %627 = load i64, i64* %RSP, align 8
  %628 = add i64 %627, 48
  store i64 %628, i64* %RSP, align 8, !tbaa !2428
  %629 = icmp ugt i64 %627, -49
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %12, align 1, !tbaa !2432
  %631 = trunc i64 %628 to i32
  %632 = and i32 %631, 255
  %633 = tail call i32 @llvm.ctpop.i32(i32 %632) #12
  %634 = trunc i32 %633 to i8
  %635 = and i8 %634, 1
  %636 = xor i8 %635, 1
  store i8 %636, i8* %19, align 1, !tbaa !2446
  %637 = xor i64 %627, 16
  %638 = xor i64 %637, %628
  %639 = lshr i64 %638, 4
  %640 = trunc i64 %639 to i8
  %641 = and i8 %640, 1
  store i8 %641, i8* %25, align 1, !tbaa !2447
  %642 = icmp eq i64 %628, 0
  %643 = zext i1 %642 to i8
  store i8 %643, i8* %28, align 1, !tbaa !2448
  %644 = lshr i64 %628, 63
  %645 = trunc i64 %644 to i8
  store i8 %645, i8* %31, align 1, !tbaa !2449
  %646 = lshr i64 %627, 63
  %647 = xor i64 %644, %646
  %648 = add nuw nsw i64 %647, %644
  %649 = icmp eq i64 %648, 2
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %37, align 1, !tbaa !2450
  %651 = add i64 %626, 5
  store i64 %651, i64* %PC, align 8
  %652 = add i64 %627, 56
  %653 = inttoptr i64 %628 to i64*
  %654 = load i64, i64* %653, align 8
  store i64 %654, i64* %RBP, align 8, !tbaa !2428
  store i64 %652, i64* %RSP, align 8, !tbaa !2428
  %655 = add i64 %626, 6
  store i64 %655, i64* %PC, align 8
  %656 = inttoptr i64 %652 to i64*
  %657 = load i64, i64* %656, align 8
  store i64 %657, i64* %PC, align 8, !tbaa !2428
  %658 = add i64 %627, 64
  store i64 %658, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.6
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401b90_refresh_neighbour_lists(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401b90:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %19, 552
  %21 = add i64 %16, 11
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %RDI, align 8, !tbaa !2428
  %24 = add i64 %14, -16
  %25 = add i64 %16, 15
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %26, align 8
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %28 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %RDI, align 8, !tbaa !2428
  %33 = add i64 %32, 560
  %34 = add i64 %29, 11
  store i64 %34, i64* %PC, align 8
  %35 = inttoptr i64 %33 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %RDI, align 8, !tbaa !2428
  %37 = add i64 %27, -32
  %38 = add i64 %29, 15
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %39, align 8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_401bb6

block_401c78:                                     ; preds = %block_401c0e
  %46 = add i64 %150, 1
  store i64 %46, i64* %PC, align 8
  %47 = load i64, i64* %5, align 8, !tbaa !2428
  %48 = add i64 %47, 8
  %49 = inttoptr i64 %47 to i64*
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  store i64 %48, i64* %5, align 8, !tbaa !2428
  %51 = add i64 %150, 2
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %47, 16
  store i64 %54, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401bf0:                                     ; preds = %block_401bb6
  %55 = add i64 %80, -8
  %56 = add i64 %114, 4
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %RAX, align 8, !tbaa !2428
  %59 = add i64 %58, 568
  %60 = add i64 %114, 11
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %RAX, align 8, !tbaa !2428
  %63 = add i64 %80, -24
  %64 = add i64 %114, 15
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %63 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -8
  %68 = load i64, i64* %PC, align 8
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %67 to i64*
  %71 = load i64, i64* %70, align 8
  store i64 %71, i64* %RAX, align 8, !tbaa !2428
  %72 = add i64 %71, 576
  %73 = add i64 %68, 11
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %RAX, align 8, !tbaa !2428
  %76 = add i64 %66, -32
  %77 = add i64 %68, 15
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i64*
  store i64 %75, i64* %78, align 8
  %.pre12 = load i64, i64* %PC, align 8
  br label %block_401c0e

block_401bb6:                                     ; preds = %block_401bc7, %block_401b90
  %79 = phi i64 [ %290, %block_401bc7 ], [ %.pre, %block_401b90 ]
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -16
  %82 = add i64 %79, 4
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RAX, align 8, !tbaa !2428
  %85 = add i64 %80, -32
  %86 = add i64 %79, 8
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %RCX, align 8, !tbaa !2428
  %89 = sub i64 %84, %88
  %90 = icmp ult i64 %84, %88
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %40, align 1, !tbaa !2432
  %92 = trunc i64 %89 to i32
  %93 = and i32 %92, 255
  %94 = tail call i32 @llvm.ctpop.i32(i32 %93) #12
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  store i8 %97, i8* %41, align 1, !tbaa !2446
  %98 = xor i64 %84, %88
  %99 = xor i64 %98, %89
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %42, align 1, !tbaa !2447
  %103 = icmp eq i64 %89, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %43, align 1, !tbaa !2448
  %105 = lshr i64 %89, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %44, align 1, !tbaa !2449
  %107 = lshr i64 %84, 63
  %108 = lshr i64 %88, 63
  %109 = xor i64 %107, %108
  %110 = xor i64 %105, %107
  %111 = add nuw nsw i64 %110, %109
  %112 = icmp eq i64 %111, 2
  %113 = zext i1 %112 to i8
  store i8 %113, i8* %45, align 1, !tbaa !2450
  %.v = select i1 %90, i64 17, i64 58
  %114 = add i64 %79, %.v
  store i64 %114, i64* %PC, align 8, !tbaa !2428
  br i1 %90, label %block_401bc7, label %block_401bf0

block_401c0e:                                     ; preds = %block_401c1f, %block_401bf0
  %115 = phi i64 [ %245, %block_401c1f ], [ %.pre12, %block_401bf0 ]
  %116 = load i64, i64* %RBP, align 8
  %117 = add i64 %116, -24
  %118 = add i64 %115, 4
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %117 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %RAX, align 8, !tbaa !2428
  %121 = add i64 %116, -32
  %122 = add i64 %115, 8
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %121 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %RCX, align 8, !tbaa !2428
  %125 = sub i64 %120, %124
  %126 = icmp ult i64 %120, %124
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %40, align 1, !tbaa !2432
  %128 = trunc i64 %125 to i32
  %129 = and i32 %128, 255
  %130 = tail call i32 @llvm.ctpop.i32(i32 %129) #12
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  store i8 %133, i8* %41, align 1, !tbaa !2446
  %134 = xor i64 %120, %124
  %135 = xor i64 %134, %125
  %136 = lshr i64 %135, 4
  %137 = trunc i64 %136 to i8
  %138 = and i8 %137, 1
  store i8 %138, i8* %42, align 1, !tbaa !2447
  %139 = icmp eq i64 %125, 0
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %43, align 1, !tbaa !2448
  %141 = lshr i64 %125, 63
  %142 = trunc i64 %141 to i8
  store i8 %142, i8* %44, align 1, !tbaa !2449
  %143 = lshr i64 %120, 63
  %144 = lshr i64 %124, 63
  %145 = xor i64 %143, %144
  %146 = xor i64 %141, %143
  %147 = add nuw nsw i64 %146, %145
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %45, align 1, !tbaa !2450
  %.v13 = select i1 %126, i64 17, i64 106
  %150 = add i64 %115, %.v13
  store i64 %150, i64* %PC, align 8, !tbaa !2428
  br i1 %126, label %block_401c1f, label %block_401c78

block_401c1f:                                     ; preds = %block_401c0e
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC, align 8
  %152 = load i64, i64* %119, align 8
  store i64 %152, i64* %RAX, align 8, !tbaa !2428
  %153 = add i64 %152, 8
  %154 = add i64 %150, 8
  store i64 %154, i64* %PC, align 8
  %155 = inttoptr i64 %153 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %RAX, align 8, !tbaa !2428
  %157 = add i64 %156, 56
  %158 = add i64 %150, 12
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i64*
  %160 = load i64, i64* %159, align 8
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = add i64 %150, 16
  store i64 %161, i64* %PC, align 8
  %162 = load i64, i64* %119, align 8
  store i64 %162, i64* %RCX, align 8, !tbaa !2428
  %163 = add i64 %162, 32
  %164 = add i64 %150, 20
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i64*
  store i64 %160, i64* %165, align 8
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -24
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %167 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = add i64 %168, 8
  store i64 %172, i64* %PC, align 8
  %173 = load i64, i64* %170, align 8
  store i64 %173, i64* %RCX, align 8, !tbaa !2428
  %174 = add i64 %173, 8
  %175 = add i64 %168, 12
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %174 to i64*
  %177 = load i64, i64* %176, align 8
  store i64 %177, i64* %RCX, align 8, !tbaa !2428
  %178 = add i64 %177, 56
  %179 = add i64 %168, 16
  store i64 %179, i64* %PC, align 8
  %180 = inttoptr i64 %178 to i64*
  store i64 %171, i64* %180, align 8
  %181 = load i64, i64* %RBP, align 8
  %182 = add i64 %181, -24
  %183 = load i64, i64* %PC, align 8
  %184 = add i64 %183, 4
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %182 to i64*
  %186 = load i64, i64* %185, align 8
  store i64 %186, i64* %RAX, align 8, !tbaa !2428
  %187 = add i64 %186, 16
  %188 = add i64 %183, 8
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = add i64 %190, 64
  %192 = add i64 %183, 12
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %191 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RAX, align 8, !tbaa !2428
  %195 = add i64 %183, 16
  store i64 %195, i64* %PC, align 8
  %196 = load i64, i64* %185, align 8
  store i64 %196, i64* %RCX, align 8, !tbaa !2428
  %197 = add i64 %196, 40
  %198 = add i64 %183, 20
  store i64 %198, i64* %PC, align 8
  %199 = inttoptr i64 %197 to i64*
  store i64 %194, i64* %199, align 8
  %200 = load i64, i64* %RBP, align 8
  %201 = add i64 %200, -24
  %202 = load i64, i64* %PC, align 8
  %203 = add i64 %202, 4
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %201 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %202, 8
  store i64 %206, i64* %PC, align 8
  %207 = load i64, i64* %204, align 8
  store i64 %207, i64* %RCX, align 8, !tbaa !2428
  %208 = add i64 %207, 16
  %209 = add i64 %202, 12
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %RCX, align 8, !tbaa !2428
  %212 = add i64 %211, 64
  %213 = add i64 %202, 16
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %212 to i64*
  store i64 %205, i64* %214, align 8
  %215 = load i64, i64* %RBP, align 8
  %216 = add i64 %215, -24
  %217 = load i64, i64* %PC, align 8
  %218 = add i64 %217, 4
  store i64 %218, i64* %PC, align 8
  %219 = inttoptr i64 %216 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = add i64 %220, 64
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = icmp ugt i64 %220, -65
  %223 = zext i1 %222 to i8
  store i8 %223, i8* %40, align 1, !tbaa !2432
  %224 = trunc i64 %221 to i32
  %225 = and i32 %224, 255
  %226 = tail call i32 @llvm.ctpop.i32(i32 %225) #12
  %227 = trunc i32 %226 to i8
  %228 = and i8 %227, 1
  %229 = xor i8 %228, 1
  store i8 %229, i8* %41, align 1, !tbaa !2446
  %230 = xor i64 %221, %220
  %231 = lshr i64 %230, 4
  %232 = trunc i64 %231 to i8
  %233 = and i8 %232, 1
  store i8 %233, i8* %42, align 1, !tbaa !2447
  %234 = icmp eq i64 %221, 0
  %235 = zext i1 %234 to i8
  store i8 %235, i8* %43, align 1, !tbaa !2448
  %236 = lshr i64 %221, 63
  %237 = trunc i64 %236 to i8
  store i8 %237, i8* %44, align 1, !tbaa !2449
  %238 = lshr i64 %220, 63
  %239 = xor i64 %236, %238
  %240 = add nuw nsw i64 %239, %236
  %241 = icmp eq i64 %240, 2
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %45, align 1, !tbaa !2450
  %243 = add i64 %217, 12
  store i64 %243, i64* %PC, align 8
  store i64 %221, i64* %219, align 8
  %244 = load i64, i64* %PC, align 8
  %245 = add i64 %244, -101
  store i64 %245, i64* %PC, align 8, !tbaa !2428
  br label %block_401c0e

block_401bc7:                                     ; preds = %block_401bb6
  %246 = add i64 %114, 4
  store i64 %246, i64* %PC, align 8
  %247 = load i64, i64* %83, align 8
  store i64 %247, i64* %RAX, align 8, !tbaa !2428
  %248 = add i64 %247, 64
  %249 = add i64 %114, 12
  store i64 %249, i64* %PC, align 8
  %250 = inttoptr i64 %248 to i64*
  store i64 0, i64* %250, align 8
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -16
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, 4
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %252 to i64*
  %256 = load i64, i64* %255, align 8
  store i64 %256, i64* %RAX, align 8, !tbaa !2428
  %257 = add i64 %256, 56
  %258 = add i64 %253, 12
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %257 to i64*
  store i64 0, i64* %259, align 8
  %260 = load i64, i64* %RBP, align 8
  %261 = add i64 %260, -16
  %262 = load i64, i64* %PC, align 8
  %263 = add i64 %262, 4
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = add i64 %265, 104
  store i64 %266, i64* %RAX, align 8, !tbaa !2428
  %267 = icmp ugt i64 %265, -105
  %268 = zext i1 %267 to i8
  store i8 %268, i8* %40, align 1, !tbaa !2432
  %269 = trunc i64 %266 to i32
  %270 = and i32 %269, 255
  %271 = tail call i32 @llvm.ctpop.i32(i32 %270) #12
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  %274 = xor i8 %273, 1
  store i8 %274, i8* %41, align 1, !tbaa !2446
  %275 = xor i64 %266, %265
  %276 = lshr i64 %275, 4
  %277 = trunc i64 %276 to i8
  %278 = and i8 %277, 1
  store i8 %278, i8* %42, align 1, !tbaa !2447
  %279 = icmp eq i64 %266, 0
  %280 = zext i1 %279 to i8
  store i8 %280, i8* %43, align 1, !tbaa !2448
  %281 = lshr i64 %266, 63
  %282 = trunc i64 %281 to i8
  store i8 %282, i8* %44, align 1, !tbaa !2449
  %283 = lshr i64 %265, 63
  %284 = xor i64 %281, %283
  %285 = add nuw nsw i64 %284, %281
  %286 = icmp eq i64 %285, 2
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %45, align 1, !tbaa !2450
  %288 = add i64 %262, 12
  store i64 %288, i64* %PC, align 8
  store i64 %266, i64* %264, align 8
  %289 = load i64, i64* %PC, align 8
  %290 = add i64 %289, -53
  store i64 %290, i64* %PC, align 8, !tbaa !2428
  br label %block_401bb6
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402d30_primal_iminus(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_402d30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -16
  %16 = load i64, i64* %RSI, align 8
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 4
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %15 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -24
  %22 = load i64, i64* %RDX, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -32
  %28 = load i64, i64* %RCX, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -40
  %34 = load i64, i64* %R8, align 8
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i64*
  store i64 %34, i64* %37, align 8
  %38 = load i64, i64* %RBP, align 8
  %39 = add i64 %38, -48
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 8
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 0, i64* %42, align 8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_402d50

block_402e7e:                                     ; preds = %block_402e34
  %49 = add i64 %303, 4
  store i64 %49, i64* %PC, align 8
  %50 = load i64, i64* %137, align 8
  store i64 %50, i64* %RAX, align 8, !tbaa !2428
  %51 = add i64 %50, 24
  %52 = add i64 %303, 8
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %RAX, align 8, !tbaa !2428
  %55 = add i64 %54, 24
  %56 = add i64 %303, 13
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %59 = trunc i64 %58 to i32
  %60 = and i32 %59, 255
  %61 = tail call i32 @llvm.ctpop.i32(i32 %60) #12
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  store i8 %64, i8* %44, align 1, !tbaa !2446
  store i8 0, i8* %45, align 1, !tbaa !2447
  %65 = icmp eq i64 %58, 0
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %46, align 1, !tbaa !2448
  %67 = lshr i64 %58, 63
  %68 = trunc i64 %67 to i8
  store i8 %68, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  %.v27 = select i1 %65, i64 96, i64 19
  %69 = add i64 %303, %.v27
  store i64 %69, i64* %PC, align 8, !tbaa !2428
  br i1 %65, label %block_402ee3, label %block_402e91

block_402df0:                                     ; preds = %block_402dd1
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RCX, align 8, !tbaa !2428
  %70 = add i64 %429, 11
  store i64 %70, i64* %PC, align 8
  %71 = load i64, i64* %133, align 8
  store i64 %71, i64* %RDX, align 8, !tbaa !2428
  %72 = add i64 %130, -48
  %73 = add i64 %429, 15
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to i64*
  store i64 %71, i64* %74, align 8
  %75 = load i64, i64* %RBP, align 8
  %76 = add i64 %75, -24
  %77 = load i64, i64* %PC, align 8
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %76 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %RDX, align 8, !tbaa !2428
  %81 = load i64, i64* %RCX, align 8
  %82 = add i64 %80, 80
  %83 = add i64 %77, 8
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %82 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = sub i64 %81, %85
  store i64 %86, i64* %RCX, align 8, !tbaa !2428
  %87 = icmp ult i64 %81, %85
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %43, align 1, !tbaa !2432
  %89 = trunc i64 %86 to i32
  %90 = and i32 %89, 255
  %91 = tail call i32 @llvm.ctpop.i32(i32 %90) #12
  %92 = trunc i32 %91 to i8
  %93 = and i8 %92, 1
  %94 = xor i8 %93, 1
  store i8 %94, i8* %44, align 1, !tbaa !2446
  %95 = xor i64 %85, %81
  %96 = xor i64 %95, %86
  %97 = lshr i64 %96, 4
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  store i8 %99, i8* %45, align 1, !tbaa !2447
  %100 = icmp eq i64 %86, 0
  %101 = zext i1 %100 to i8
  store i8 %101, i8* %46, align 1, !tbaa !2448
  %102 = lshr i64 %86, 63
  %103 = trunc i64 %102 to i8
  store i8 %103, i8* %47, align 1, !tbaa !2449
  %104 = lshr i64 %81, 63
  %105 = lshr i64 %85, 63
  %106 = xor i64 %105, %104
  %107 = xor i64 %102, %104
  %108 = add nuw nsw i64 %107, %106
  %109 = icmp eq i64 %108, 2
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %48, align 1, !tbaa !2450
  %111 = add i64 %75, -8
  %112 = add i64 %77, 12
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RDX, align 8, !tbaa !2428
  %115 = add i64 %77, 15
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 %86, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -16
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = add i64 %119, 11
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %122 to i64*
  store i64 0, i64* %124, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_402e19

block_402eef:                                     ; preds = %block_402e23, %block_402ee3
  %125 = phi i64 [ %329, %block_402e23 ], [ %.pre24, %block_402ee3 ]
  %126 = add i64 %125, -415
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br label %block_402d50

block_402ed9:                                     ; preds = %block_402e91, %block_402eb0
  %127 = phi i64 [ %544, %block_402e91 ], [ %.pre20, %block_402eb0 ]
  %128 = add i64 %127, 5
  store i64 %128, i64* %PC, align 8, !tbaa !2428
  br label %block_402ee3

block_402d50:                                     ; preds = %block_402eef, %block_402d30
  %129 = phi i64 [ %126, %block_402eef ], [ %.pre, %block_402d30 ]
  %130 = load i64, i64* %RBP, align 8
  %131 = add i64 %130, -24
  %132 = add i64 %129, 4
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %RAX, align 8, !tbaa !2428
  %135 = add i64 %130, -32
  %136 = add i64 %129, 8
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = sub i64 %134, %138
  %140 = icmp ult i64 %134, %138
  %141 = zext i1 %140 to i8
  store i8 %141, i8* %43, align 1, !tbaa !2432
  %142 = trunc i64 %139 to i32
  %143 = and i32 %142, 255
  %144 = tail call i32 @llvm.ctpop.i32(i32 %143) #12
  %145 = trunc i32 %144 to i8
  %146 = and i8 %145, 1
  %147 = xor i8 %146, 1
  store i8 %147, i8* %44, align 1, !tbaa !2446
  %148 = xor i64 %138, %134
  %149 = xor i64 %148, %139
  %150 = lshr i64 %149, 4
  %151 = trunc i64 %150 to i8
  %152 = and i8 %151, 1
  store i8 %152, i8* %45, align 1, !tbaa !2447
  %153 = icmp eq i64 %139, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %46, align 1, !tbaa !2448
  %155 = lshr i64 %139, 63
  %156 = trunc i64 %155 to i8
  store i8 %156, i8* %47, align 1, !tbaa !2449
  %157 = lshr i64 %134, 63
  %158 = lshr i64 %138, 63
  %159 = xor i64 %158, %157
  %160 = xor i64 %155, %157
  %161 = add nuw nsw i64 %160, %159
  %162 = icmp eq i64 %161, 2
  %163 = zext i1 %162 to i8
  store i8 %163, i8* %48, align 1, !tbaa !2450
  %.v = select i1 %153, i64 420, i64 14
  %164 = add i64 %129, %.v
  %165 = add i64 %164, 4
  store i64 %165, i64* %PC, align 8
  %166 = load i64, i64* %133, align 8
  store i64 %166, i64* %RAX, align 8, !tbaa !2428
  br i1 %153, label %block_402ef4, label %block_402d5e

block_402e42:                                     ; preds = %block_402e34
  %167 = add i64 %130, -8
  %168 = add i64 %303, 4
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i64*
  %170 = load i64, i64* %169, align 8
  store i64 %170, i64* %RAX, align 8, !tbaa !2428
  %171 = add i64 %303, 7
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %RAX, align 8, !tbaa !2428
  %174 = add i64 %303, 11
  store i64 %174, i64* %PC, align 8
  %175 = load i64, i64* %137, align 8
  store i64 %175, i64* %RCX, align 8, !tbaa !2428
  %176 = add i64 %175, 80
  %177 = add i64 %303, 15
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = sub i64 %173, %179
  %181 = icmp ult i64 %173, %179
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %43, align 1, !tbaa !2432
  %183 = trunc i64 %180 to i32
  %184 = and i32 %183, 255
  %185 = tail call i32 @llvm.ctpop.i32(i32 %184) #12
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  %188 = xor i8 %187, 1
  store i8 %188, i8* %44, align 1, !tbaa !2446
  %189 = xor i64 %179, %173
  %190 = xor i64 %189, %180
  %191 = lshr i64 %190, 4
  %192 = trunc i64 %191 to i8
  %193 = and i8 %192, 1
  store i8 %193, i8* %45, align 1, !tbaa !2447
  %194 = icmp eq i64 %180, 0
  %195 = zext i1 %194 to i8
  store i8 %195, i8* %46, align 1, !tbaa !2448
  %196 = lshr i64 %180, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %47, align 1, !tbaa !2449
  %198 = lshr i64 %173, 63
  %199 = lshr i64 %179, 63
  %200 = xor i64 %199, %198
  %201 = xor i64 %196, %198
  %202 = add nuw nsw i64 %201, %200
  %203 = icmp eq i64 %202, 2
  %204 = zext i1 %203 to i8
  store i8 %204, i8* %48, align 1, !tbaa !2450
  %205 = icmp ne i8 %197, 0
  %206 = xor i1 %205, %203
  %.v29 = select i1 %206, i64 55, i64 21
  %207 = add i64 %303, %.v29
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  br i1 %206, label %block_402ee3, label %block_402e57

block_402dbe:                                     ; preds = %block_402d74
  %208 = add i64 %473, 4
  store i64 %208, i64* %PC, align 8
  %209 = load i64, i64* %133, align 8
  store i64 %209, i64* %RAX, align 8, !tbaa !2428
  %210 = add i64 %209, 24
  %211 = add i64 %473, 8
  store i64 %211, i64* %PC, align 8
  %212 = inttoptr i64 %210 to i64*
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = add i64 %213, 24
  %215 = add i64 %473, 13
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %218 = trunc i64 %217 to i32
  %219 = and i32 %218, 255
  %220 = tail call i32 @llvm.ctpop.i32(i32 %219) #12
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  store i8 %223, i8* %44, align 1, !tbaa !2446
  store i8 0, i8* %45, align 1, !tbaa !2447
  %224 = icmp eq i64 %217, 0
  %225 = zext i1 %224 to i8
  store i8 %225, i8* %46, align 1, !tbaa !2448
  %226 = lshr i64 %217, 63
  %227 = trunc i64 %226 to i8
  store i8 %227, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  %.v32 = select i1 %224, i64 96, i64 19
  %228 = add i64 %473, %.v32
  store i64 %228, i64* %PC, align 8, !tbaa !2428
  br i1 %224, label %block_402e23, label %block_402dd1

block_402ef4:                                     ; preds = %block_402d50
  %229 = add i64 %130, -40
  %230 = add i64 %164, 8
  store i64 %230, i64* %PC, align 8
  %231 = inttoptr i64 %229 to i64*
  %232 = load i64, i64* %231, align 8
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %233 = add i64 %164, 11
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %232 to i64*
  store i64 %166, i64* %234, align 8
  %235 = load i64, i64* %RBP, align 8
  %236 = add i64 %235, -48
  %237 = load i64, i64* %PC, align 8
  %238 = add i64 %237, 4
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %236 to i64*
  %240 = load i64, i64* %239, align 8
  store i64 %240, i64* %RAX, align 8, !tbaa !2428
  %241 = add i64 %237, 5
  store i64 %241, i64* %PC, align 8
  %242 = load i64, i64* %5, align 8, !tbaa !2428
  %243 = add i64 %242, 8
  %244 = inttoptr i64 %242 to i64*
  %245 = load i64, i64* %244, align 8
  store i64 %245, i64* %RBP, align 8, !tbaa !2428
  store i64 %243, i64* %5, align 8, !tbaa !2428
  %246 = add i64 %237, 6
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %243 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %PC, align 8, !tbaa !2428
  %249 = add i64 %242, 16
  store i64 %249, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402d5e:                                     ; preds = %block_402d50
  %250 = add i64 %166, 88
  %251 = add i64 %164, 8
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 8
  store i64 %253, i64* %RAX, align 8, !tbaa !2428
  %254 = add i64 %164, 12
  store i64 %254, i64* %PC, align 8
  %255 = load i64, i64* %137, align 8
  store i64 %255, i64* %RCX, align 8, !tbaa !2428
  %256 = add i64 %255, 88
  %257 = add i64 %164, 16
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %256 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = sub i64 %253, %259
  %261 = icmp ult i64 %253, %259
  %262 = zext i1 %261 to i8
  store i8 %262, i8* %43, align 1, !tbaa !2432
  %263 = trunc i64 %260 to i32
  %264 = and i32 %263, 255
  %265 = tail call i32 @llvm.ctpop.i32(i32 %264) #12
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  store i8 %268, i8* %44, align 1, !tbaa !2446
  %269 = xor i64 %259, %253
  %270 = xor i64 %269, %260
  %271 = lshr i64 %270, 4
  %272 = trunc i64 %271 to i8
  %273 = and i8 %272, 1
  store i8 %273, i8* %45, align 1, !tbaa !2447
  %274 = icmp eq i64 %260, 0
  %275 = zext i1 %274 to i8
  store i8 %275, i8* %46, align 1, !tbaa !2448
  %276 = lshr i64 %260, 63
  %277 = trunc i64 %276 to i8
  store i8 %277, i8* %47, align 1, !tbaa !2449
  %278 = lshr i64 %253, 63
  %279 = lshr i64 %259, 63
  %280 = xor i64 %279, %278
  %281 = xor i64 %276, %278
  %282 = add nuw nsw i64 %281, %280
  %283 = icmp eq i64 %282, 2
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %48, align 1, !tbaa !2450
  %285 = icmp ne i8 %277, 0
  %286 = xor i1 %285, %283
  %.v25 = select i1 %286, i64 22, i64 214
  %287 = add i64 %164, %.v25
  %288 = add i64 %287, 4
  store i64 %288, i64* %PC, align 8
  br i1 %286, label %block_402d74, label %block_402e34

block_402e34:                                     ; preds = %block_402d5e
  %289 = load i64, i64* %137, align 8
  store i64 %289, i64* %RAX, align 8, !tbaa !2428
  %290 = add i64 %289, 8
  %291 = add i64 %287, 8
  store i64 %291, i64* %PC, align 8
  %292 = inttoptr i64 %290 to i32*
  %293 = load i32, i32* %292, align 4
  store i8 0, i8* %43, align 1, !tbaa !2432
  %294 = and i32 %293, 255
  %295 = tail call i32 @llvm.ctpop.i32(i32 %294) #12
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  store i8 %298, i8* %44, align 1, !tbaa !2446
  store i8 0, i8* %45, align 1, !tbaa !2447
  %299 = icmp eq i32 %293, 0
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %46, align 1, !tbaa !2448
  %301 = lshr i32 %293, 31
  %302 = trunc i32 %301 to i8
  store i8 %302, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  %.v26 = select i1 %299, i64 14, i64 74
  %303 = add i64 %287, %.v26
  store i64 %303, i64* %PC, align 8, !tbaa !2428
  br i1 %299, label %block_402e42, label %block_402e7e

block_402ee3:                                     ; preds = %block_402e42, %block_402e57, %block_402e7e, %block_402ed9
  %304 = phi i64 [ %128, %block_402ed9 ], [ %69, %block_402e7e ], [ %.pre21, %block_402e57 ], [ %207, %block_402e42 ]
  %.sink10 = phi i64 [ 5, %block_402ed9 ], [ 5, %block_402e7e ], [ 106, %block_402e57 ], [ 106, %block_402e42 ]
  %305 = add i64 %304, %.sink10
  %306 = load i64, i64* %RBP, align 8
  %307 = add i64 %306, -32
  %308 = add i64 %305, 4
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %307 to i64*
  %310 = load i64, i64* %309, align 8
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = add i64 %310, 24
  %312 = add i64 %305, 8
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313, align 8
  store i64 %314, i64* %RAX, align 8, !tbaa !2428
  %315 = add i64 %305, 12
  store i64 %315, i64* %PC, align 8
  store i64 %314, i64* %309, align 8
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_402eef

block_402e23:                                     ; preds = %block_402d97, %block_402d82, %block_402dbe, %block_402e19
  %316 = phi i64 [ %386, %block_402e19 ], [ %228, %block_402dbe ], [ %586, %block_402d82 ], [ %.pre23, %block_402d97 ]
  %.sink5 = phi i64 [ 5, %block_402e19 ], [ 5, %block_402dbe ], [ 106, %block_402d82 ], [ 106, %block_402d97 ]
  %317 = add i64 %316, %.sink5
  %318 = load i64, i64* %RBP, align 8
  %319 = add i64 %318, -24
  %320 = add i64 %317, 4
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = add i64 %322, 24
  %324 = add i64 %317, 8
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to i64*
  %326 = load i64, i64* %325, align 8
  store i64 %326, i64* %RAX, align 8, !tbaa !2428
  %327 = add i64 %317, 12
  store i64 %327, i64* %PC, align 8
  store i64 %326, i64* %321, align 8
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 192
  store i64 %329, i64* %PC, align 8, !tbaa !2428
  br label %block_402eef

block_402eb0:                                     ; preds = %block_402e91
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RCX, align 8, !tbaa !2428
  %330 = add i64 %544, 11
  store i64 %330, i64* %PC, align 8
  %331 = load i64, i64* %137, align 8
  store i64 %331, i64* %RDX, align 8, !tbaa !2428
  %332 = add i64 %130, -48
  %333 = add i64 %544, 15
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i64*
  store i64 %331, i64* %334, align 8
  %335 = load i64, i64* %RBP, align 8
  %336 = add i64 %335, -32
  %337 = load i64, i64* %PC, align 8
  %338 = add i64 %337, 4
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %336 to i64*
  %340 = load i64, i64* %339, align 8
  store i64 %340, i64* %RDX, align 8, !tbaa !2428
  %341 = load i64, i64* %RCX, align 8
  %342 = add i64 %340, 80
  %343 = add i64 %337, 8
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i64*
  %345 = load i64, i64* %344, align 8
  %346 = sub i64 %341, %345
  store i64 %346, i64* %RCX, align 8, !tbaa !2428
  %347 = icmp ult i64 %341, %345
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %43, align 1, !tbaa !2432
  %349 = trunc i64 %346 to i32
  %350 = and i32 %349, 255
  %351 = tail call i32 @llvm.ctpop.i32(i32 %350) #12
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  store i8 %354, i8* %44, align 1, !tbaa !2446
  %355 = xor i64 %345, %341
  %356 = xor i64 %355, %346
  %357 = lshr i64 %356, 4
  %358 = trunc i64 %357 to i8
  %359 = and i8 %358, 1
  store i8 %359, i8* %45, align 1, !tbaa !2447
  %360 = icmp eq i64 %346, 0
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %46, align 1, !tbaa !2448
  %362 = lshr i64 %346, 63
  %363 = trunc i64 %362 to i8
  store i8 %363, i8* %47, align 1, !tbaa !2449
  %364 = lshr i64 %341, 63
  %365 = lshr i64 %345, 63
  %366 = xor i64 %365, %364
  %367 = xor i64 %362, %364
  %368 = add nuw nsw i64 %367, %366
  %369 = icmp eq i64 %368, 2
  %370 = zext i1 %369 to i8
  store i8 %370, i8* %48, align 1, !tbaa !2450
  %371 = add i64 %335, -8
  %372 = add i64 %337, 12
  store i64 %372, i64* %PC, align 8
  %373 = inttoptr i64 %371 to i64*
  %374 = load i64, i64* %373, align 8
  store i64 %374, i64* %RDX, align 8, !tbaa !2428
  %375 = add i64 %337, 15
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i64*
  store i64 %346, i64* %376, align 8
  %377 = load i64, i64* %RBP, align 8
  %378 = add i64 %377, -16
  %379 = load i64, i64* %PC, align 8
  %380 = add i64 %379, 4
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %378 to i64*
  %382 = load i64, i64* %381, align 8
  store i64 %382, i64* %RCX, align 8, !tbaa !2428
  %383 = add i64 %379, 11
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to i64*
  store i64 1, i64* %384, align 8
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_402ed9

block_402e19:                                     ; preds = %block_402dd1, %block_402df0
  %385 = phi i64 [ %429, %block_402dd1 ], [ %.pre22, %block_402df0 ]
  %386 = add i64 %385, 5
  store i64 %386, i64* %PC, align 8, !tbaa !2428
  br label %block_402e23

block_402dd1:                                     ; preds = %block_402dbe
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RCX, align 8, !tbaa !2428
  %387 = add i64 %130, -8
  %388 = add i64 %228, 11
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  %390 = load i64, i64* %389, align 8
  store i64 %390, i64* %RDX, align 8, !tbaa !2428
  %391 = add i64 %228, 14
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %390 to i64*
  %393 = load i64, i64* %392, align 8
  store i64 %393, i64* %RDX, align 8, !tbaa !2428
  %394 = add i64 %228, 18
  store i64 %394, i64* %PC, align 8
  %395 = load i64, i64* %133, align 8
  store i64 %395, i64* %RSI, align 8, !tbaa !2428
  %396 = add i64 %395, 80
  %397 = add i64 %228, 22
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = sub i64 1, %399
  store i64 %400, i64* %RCX, align 8, !tbaa !2428
  %401 = lshr i64 %400, 63
  %402 = sub i64 %393, %400
  %403 = icmp ult i64 %393, %400
  %404 = zext i1 %403 to i8
  store i8 %404, i8* %43, align 1, !tbaa !2432
  %405 = trunc i64 %402 to i32
  %406 = and i32 %405, 255
  %407 = tail call i32 @llvm.ctpop.i32(i32 %406) #12
  %408 = trunc i32 %407 to i8
  %409 = and i8 %408, 1
  %410 = xor i8 %409, 1
  store i8 %410, i8* %44, align 1, !tbaa !2446
  %411 = xor i64 %400, %393
  %412 = xor i64 %411, %402
  %413 = lshr i64 %412, 4
  %414 = trunc i64 %413 to i8
  %415 = and i8 %414, 1
  store i8 %415, i8* %45, align 1, !tbaa !2447
  %416 = icmp eq i64 %402, 0
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %46, align 1, !tbaa !2448
  %418 = lshr i64 %402, 63
  %419 = trunc i64 %418 to i8
  store i8 %419, i8* %47, align 1, !tbaa !2449
  %420 = lshr i64 %393, 63
  %421 = xor i64 %401, %420
  %422 = xor i64 %418, %420
  %423 = add nuw nsw i64 %422, %421
  %424 = icmp eq i64 %423, 2
  %425 = zext i1 %424 to i8
  store i8 %425, i8* %48, align 1, !tbaa !2450
  %426 = icmp ne i8 %419, 0
  %427 = xor i1 %426, %424
  %428 = or i1 %416, %427
  %.v33 = select i1 %428, i64 72, i64 31
  %429 = add i64 %228, %.v33
  store i64 %429, i64* %PC, align 8, !tbaa !2428
  br i1 %428, label %block_402e19, label %block_402df0

block_402d97:                                     ; preds = %block_402d82
  %430 = add i64 %586, 4
  store i64 %430, i64* %PC, align 8
  %431 = load i64, i64* %133, align 8
  store i64 %431, i64* %RAX, align 8, !tbaa !2428
  %432 = add i64 %130, -48
  %433 = add i64 %586, 8
  store i64 %433, i64* %PC, align 8
  %434 = inttoptr i64 %432 to i64*
  store i64 %431, i64* %434, align 8
  %435 = load i64, i64* %RBP, align 8
  %436 = add i64 %435, -24
  %437 = load i64, i64* %PC, align 8
  %438 = add i64 %437, 4
  store i64 %438, i64* %PC, align 8
  %439 = inttoptr i64 %436 to i64*
  %440 = load i64, i64* %439, align 8
  store i64 %440, i64* %RAX, align 8, !tbaa !2428
  %441 = add i64 %440, 80
  %442 = add i64 %437, 8
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i64*
  %444 = load i64, i64* %443, align 8
  store i64 %444, i64* %RAX, align 8, !tbaa !2428
  %445 = add i64 %435, -8
  %446 = add i64 %437, 12
  store i64 %446, i64* %PC, align 8
  %447 = inttoptr i64 %445 to i64*
  %448 = load i64, i64* %447, align 8
  store i64 %448, i64* %RCX, align 8, !tbaa !2428
  %449 = add i64 %437, 15
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i64*
  store i64 %444, i64* %450, align 8
  %451 = load i64, i64* %RBP, align 8
  %452 = add i64 %451, -16
  %453 = load i64, i64* %PC, align 8
  %454 = add i64 %453, 4
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %452 to i64*
  %456 = load i64, i64* %455, align 8
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = add i64 %453, 11
  store i64 %457, i64* %PC, align 8
  %458 = inttoptr i64 %456 to i64*
  store i64 0, i64* %458, align 8
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_402e23

block_402d74:                                     ; preds = %block_402d5e
  %459 = load i64, i64* %133, align 8
  store i64 %459, i64* %RAX, align 8, !tbaa !2428
  %460 = add i64 %459, 8
  %461 = add i64 %287, 8
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %460 to i32*
  %463 = load i32, i32* %462, align 4
  store i8 0, i8* %43, align 1, !tbaa !2432
  %464 = and i32 %463, 255
  %465 = tail call i32 @llvm.ctpop.i32(i32 %464) #12
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  %468 = xor i8 %467, 1
  store i8 %468, i8* %44, align 1, !tbaa !2446
  store i8 0, i8* %45, align 1, !tbaa !2447
  %469 = icmp eq i32 %463, 0
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %46, align 1, !tbaa !2448
  %471 = lshr i32 %463, 31
  %472 = trunc i32 %471 to i8
  store i8 %472, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  %.v30 = select i1 %469, i64 74, i64 14
  %473 = add i64 %287, %.v30
  store i64 %473, i64* %PC, align 8, !tbaa !2428
  br i1 %469, label %block_402dbe, label %block_402d82

block_402e57:                                     ; preds = %block_402e42
  %474 = add i64 %207, 4
  store i64 %474, i64* %PC, align 8
  %475 = load i64, i64* %137, align 8
  store i64 %475, i64* %RAX, align 8, !tbaa !2428
  %476 = add i64 %130, -48
  %477 = add i64 %207, 8
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %476 to i64*
  store i64 %475, i64* %478, align 8
  %479 = load i64, i64* %RBP, align 8
  %480 = add i64 %479, -32
  %481 = load i64, i64* %PC, align 8
  %482 = add i64 %481, 4
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %480 to i64*
  %484 = load i64, i64* %483, align 8
  store i64 %484, i64* %RAX, align 8, !tbaa !2428
  %485 = add i64 %484, 80
  %486 = add i64 %481, 8
  store i64 %486, i64* %PC, align 8
  %487 = inttoptr i64 %485 to i64*
  %488 = load i64, i64* %487, align 8
  store i64 %488, i64* %RAX, align 8, !tbaa !2428
  %489 = add i64 %479, -8
  %490 = add i64 %481, 12
  store i64 %490, i64* %PC, align 8
  %491 = inttoptr i64 %489 to i64*
  %492 = load i64, i64* %491, align 8
  store i64 %492, i64* %RCX, align 8, !tbaa !2428
  %493 = add i64 %481, 15
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to i64*
  store i64 %488, i64* %494, align 8
  %495 = load i64, i64* %RBP, align 8
  %496 = add i64 %495, -16
  %497 = load i64, i64* %PC, align 8
  %498 = add i64 %497, 4
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %496 to i64*
  %500 = load i64, i64* %499, align 8
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = add i64 %497, 11
  store i64 %501, i64* %PC, align 8
  %502 = inttoptr i64 %500 to i64*
  store i64 1, i64* %502, align 8
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_402ee3

block_402e91:                                     ; preds = %block_402e7e
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  store i64 1, i64* %RCX, align 8, !tbaa !2428
  %503 = add i64 %130, -8
  %504 = add i64 %69, 11
  store i64 %504, i64* %PC, align 8
  %505 = inttoptr i64 %503 to i64*
  %506 = load i64, i64* %505, align 8
  store i64 %506, i64* %RDX, align 8, !tbaa !2428
  %507 = add i64 %69, 14
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %506 to i64*
  %509 = load i64, i64* %508, align 8
  store i64 %509, i64* %RDX, align 8, !tbaa !2428
  %510 = add i64 %69, 18
  store i64 %510, i64* %PC, align 8
  %511 = load i64, i64* %137, align 8
  store i64 %511, i64* %RSI, align 8, !tbaa !2428
  %512 = add i64 %511, 80
  %513 = add i64 %69, 22
  store i64 %513, i64* %PC, align 8
  %514 = inttoptr i64 %512 to i64*
  %515 = load i64, i64* %514, align 8
  %516 = sub i64 1, %515
  store i64 %516, i64* %RCX, align 8, !tbaa !2428
  %517 = lshr i64 %516, 63
  %518 = sub i64 %509, %516
  %519 = icmp ult i64 %509, %516
  %520 = zext i1 %519 to i8
  store i8 %520, i8* %43, align 1, !tbaa !2432
  %521 = trunc i64 %518 to i32
  %522 = and i32 %521, 255
  %523 = tail call i32 @llvm.ctpop.i32(i32 %522) #12
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  %526 = xor i8 %525, 1
  store i8 %526, i8* %44, align 1, !tbaa !2446
  %527 = xor i64 %516, %509
  %528 = xor i64 %527, %518
  %529 = lshr i64 %528, 4
  %530 = trunc i64 %529 to i8
  %531 = and i8 %530, 1
  store i8 %531, i8* %45, align 1, !tbaa !2447
  %532 = icmp eq i64 %518, 0
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %46, align 1, !tbaa !2448
  %534 = lshr i64 %518, 63
  %535 = trunc i64 %534 to i8
  store i8 %535, i8* %47, align 1, !tbaa !2449
  %536 = lshr i64 %509, 63
  %537 = xor i64 %517, %536
  %538 = xor i64 %534, %536
  %539 = add nuw nsw i64 %538, %537
  %540 = icmp eq i64 %539, 2
  %541 = zext i1 %540 to i8
  store i8 %541, i8* %48, align 1, !tbaa !2450
  %542 = icmp ne i8 %535, 0
  %543 = xor i1 %542, %540
  %.v28 = select i1 %543, i64 72, i64 31
  %544 = add i64 %69, %.v28
  store i64 %544, i64* %PC, align 8, !tbaa !2428
  br i1 %543, label %block_402ed9, label %block_402eb0

block_402d82:                                     ; preds = %block_402d74
  %545 = add i64 %130, -8
  %546 = add i64 %473, 4
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %545 to i64*
  %548 = load i64, i64* %547, align 8
  store i64 %548, i64* %RAX, align 8, !tbaa !2428
  %549 = add i64 %473, 7
  store i64 %549, i64* %PC, align 8
  %550 = inttoptr i64 %548 to i64*
  %551 = load i64, i64* %550, align 8
  store i64 %551, i64* %RAX, align 8, !tbaa !2428
  %552 = add i64 %473, 11
  store i64 %552, i64* %PC, align 8
  %553 = load i64, i64* %133, align 8
  store i64 %553, i64* %RCX, align 8, !tbaa !2428
  %554 = add i64 %553, 80
  %555 = add i64 %473, 15
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %554 to i64*
  %557 = load i64, i64* %556, align 8
  %558 = sub i64 %551, %557
  %559 = icmp ult i64 %551, %557
  %560 = zext i1 %559 to i8
  store i8 %560, i8* %43, align 1, !tbaa !2432
  %561 = trunc i64 %558 to i32
  %562 = and i32 %561, 255
  %563 = tail call i32 @llvm.ctpop.i32(i32 %562) #12
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  store i8 %566, i8* %44, align 1, !tbaa !2446
  %567 = xor i64 %557, %551
  %568 = xor i64 %567, %558
  %569 = lshr i64 %568, 4
  %570 = trunc i64 %569 to i8
  %571 = and i8 %570, 1
  store i8 %571, i8* %45, align 1, !tbaa !2447
  %572 = icmp eq i64 %558, 0
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %46, align 1, !tbaa !2448
  %574 = lshr i64 %558, 63
  %575 = trunc i64 %574 to i8
  store i8 %575, i8* %47, align 1, !tbaa !2449
  %576 = lshr i64 %551, 63
  %577 = lshr i64 %557, 63
  %578 = xor i64 %577, %576
  %579 = xor i64 %574, %576
  %580 = add nuw nsw i64 %579, %578
  %581 = icmp eq i64 %580, 2
  %582 = zext i1 %581 to i8
  store i8 %582, i8* %48, align 1, !tbaa !2450
  %583 = icmp ne i8 %575, 0
  %584 = xor i1 %583, %581
  %585 = or i1 %572, %584
  %.v31 = select i1 %585, i64 55, i64 21
  %586 = add i64 %473, %.v31
  store i64 %586, i64* %PC, align 8, !tbaa !2428
  br i1 %585, label %block_402e23, label %block_402d97
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009b0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4009b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 40) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #12
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2447
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2448
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2449
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_4009b9, label %block_4009d0

block_4009d0:                                     ; preds = %block_4009b0
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4009b9:                                     ; preds = %block_4009b0
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_400940_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_6060a0__bss_type* @seg_6060a0__bss to i64), i64 40) to i8*), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4009f0_resize_prob(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_4009f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -88
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 80
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, 16
  %22 = xor i64 %21, %10
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = icmp eq i64 %10, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %10, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %7, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %6, -24
  %40 = load i64, i64* %RDI, align 8
  %41 = add i64 %9, 11
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %42, align 8
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -16
  %45 = load i64, i64* %PC, align 8
  %46 = add i64 %45, 4
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %RDI, align 8, !tbaa !2428
  %49 = add i64 %48, 456
  %50 = add i64 %45, 11
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %RDI, align 8, !tbaa !2428
  %53 = add i64 %45, 15
  store i64 %53, i64* %PC, align 8
  %54 = load i64, i64* %47, align 8
  store i64 %54, i64* %RAX, align 8, !tbaa !2428
  %55 = add i64 %54, 416
  %56 = add i64 %45, 22
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %55 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, %52
  store i64 %59, i64* %RDI, align 8, !tbaa !2428
  %60 = icmp ult i64 %59, %52
  %61 = icmp ult i64 %59, %58
  %62 = or i1 %60, %61
  %63 = zext i1 %62 to i8
  store i8 %63, i8* %13, align 1, !tbaa !2432
  %64 = trunc i64 %59 to i32
  %65 = and i32 %64, 255
  %66 = tail call i32 @llvm.ctpop.i32(i32 %65) #12
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 1
  %69 = xor i8 %68, 1
  store i8 %69, i8* %20, align 1, !tbaa !2446
  %70 = xor i64 %58, %52
  %71 = xor i64 %70, %59
  %72 = lshr i64 %71, 4
  %73 = trunc i64 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %26, align 1, !tbaa !2447
  %75 = icmp eq i64 %59, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %29, align 1, !tbaa !2448
  %77 = lshr i64 %59, 63
  %78 = trunc i64 %77 to i8
  store i8 %78, i8* %32, align 1, !tbaa !2449
  %79 = lshr i64 %52, 63
  %80 = lshr i64 %58, 63
  %81 = xor i64 %77, %79
  %82 = xor i64 %77, %80
  %83 = add nuw nsw i64 %81, %82
  %84 = icmp eq i64 %83, 2
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %38, align 1, !tbaa !2450
  %86 = add i64 %45, 29
  store i64 %86, i64* %PC, align 8
  store i64 %59, i64* %57, align 8
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -16
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 4
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %88 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %RAX, align 8, !tbaa !2428
  %93 = add i64 %92, 456
  %94 = add i64 %89, 11
  store i64 %94, i64* %PC, align 8
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = add i64 %89, 15
  store i64 %97, i64* %PC, align 8
  %98 = load i64, i64* %91, align 8
  store i64 %98, i64* %RDI, align 8, !tbaa !2428
  %99 = add i64 %98, 448
  %100 = add i64 %89, 22
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = add i64 %102, %96
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = icmp ult i64 %103, %96
  %105 = icmp ult i64 %103, %102
  %106 = or i1 %104, %105
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %13, align 1, !tbaa !2432
  %108 = trunc i64 %103 to i32
  %109 = and i32 %108, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #12
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %20, align 1, !tbaa !2446
  %114 = xor i64 %102, %96
  %115 = xor i64 %114, %103
  %116 = lshr i64 %115, 4
  %117 = trunc i64 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %26, align 1, !tbaa !2447
  %119 = icmp eq i64 %103, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %29, align 1, !tbaa !2448
  %121 = lshr i64 %103, 63
  %122 = trunc i64 %121 to i8
  store i8 %122, i8* %32, align 1, !tbaa !2449
  %123 = lshr i64 %96, 63
  %124 = lshr i64 %102, 63
  %125 = xor i64 %121, %123
  %126 = xor i64 %121, %124
  %127 = add nuw nsw i64 %125, %126
  %128 = icmp eq i64 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %38, align 1, !tbaa !2450
  %130 = add i64 %89, 29
  store i64 %130, i64* %PC, align 8
  store i64 %103, i64* %101, align 8
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -16
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135, align 8
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = add i64 %136, 568
  %138 = add i64 %133, 11
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i64*
  %140 = load i64, i64* %139, align 8
  store i64 %140, i64* %RAX, align 8, !tbaa !2428
  %141 = add i64 %133, 15
  store i64 %141, i64* %PC, align 8
  %142 = load i64, i64* %135, align 8
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  %143 = add i64 %142, 416
  %144 = add i64 %133, 22
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = shl i64 %146, 6
  %148 = lshr i64 %146, 58
  %149 = trunc i64 %148 to i8
  %150 = and i8 %149, 1
  store i8 %150, i8* %13, align 1, !tbaa !2453
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 192
  %153 = tail call i32 @llvm.ctpop.i32(i32 %152) #12
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  store i8 %156, i8* %20, align 1, !tbaa !2453
  store i8 0, i8* %26, align 1, !tbaa !2453
  %157 = icmp eq i64 %147, 0
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %29, align 1, !tbaa !2453
  %159 = lshr i64 %146, 57
  %160 = trunc i64 %159 to i8
  %161 = and i8 %160, 1
  store i8 %161, i8* %32, align 1, !tbaa !2453
  store i8 0, i8* %38, align 1, !tbaa !2453
  %162 = add i64 %131, -64
  %163 = add i64 %133, 30
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %162 to i64*
  store i64 %147, i64* %164, align 8
  %165 = load i64, i64* %RAX, align 8
  %166 = load i64, i64* %PC, align 8
  store i64 %165, i64* %RDI, align 8, !tbaa !2428
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -64
  %169 = add i64 %166, 7
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %RSI, align 8, !tbaa !2428
  %172 = add i64 %166, -388
  %173 = add i64 %166, 12
  %174 = load i64, i64* %RSP, align 8, !tbaa !2428
  %175 = add i64 %174, -8
  %176 = inttoptr i64 %175 to i64*
  store i64 %173, i64* %176, align 8
  store i64 %175, i64* %RSP, align 8, !tbaa !2428
  store i64 %172, i64* %PC, align 8, !tbaa !2428
  %177 = tail call fastcc %struct.Memory* @ext_609018_realloc(%struct.State* nonnull %0, %struct.Memory* %2)
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -24
  %180 = load i64, i64* %RAX, align 8
  %181 = load i64, i64* %PC, align 8
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %179 to i64*
  store i64 %180, i64* %183, align 8
  %184 = load i64, i64* %RBP, align 8
  %185 = add i64 %184, -24
  %186 = load i64, i64* %PC, align 8
  %187 = add i64 %186, 5
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %185 to i64*
  %189 = load i64, i64* %188, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %190 = trunc i64 %189 to i32
  %191 = and i32 %190, 255
  %192 = tail call i32 @llvm.ctpop.i32(i32 %191) #12
  %193 = trunc i32 %192 to i8
  %194 = and i8 %193, 1
  %195 = xor i8 %194, 1
  store i8 %195, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %26, align 1, !tbaa !2447
  %196 = icmp eq i64 %189, 0
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %29, align 1, !tbaa !2448
  %198 = lshr i64 %189, 63
  %199 = trunc i64 %198 to i8
  store i8 %199, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %.v = select i1 %196, i64 11, i64 64
  %200 = add i64 %186, %.v
  store i64 %200, i64* %PC, align 8, !tbaa !2428
  br i1 %196, label %block_400a6f, label %block_400aa4

block_400b38:                                     ; preds = %block_400b26
  %201 = add i64 %351, 4
  store i64 %201, i64* %PC, align 8
  %202 = load i64, i64* %284, align 8
  store i64 %202, i64* %RAX, align 8, !tbaa !2428
  %203 = add i64 %202, 48
  %204 = add i64 %351, 8
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %RAX, align 8, !tbaa !2428
  %207 = add i64 %281, -56
  %208 = add i64 %351, 12
  store i64 %208, i64* %PC, align 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = add i64 %210, %206
  store i64 %211, i64* %RAX, align 8, !tbaa !2428
  %212 = icmp ult i64 %211, %206
  %213 = icmp ult i64 %211, %210
  %214 = or i1 %212, %213
  %215 = zext i1 %214 to i8
  store i8 %215, i8* %13, align 1, !tbaa !2432
  %216 = trunc i64 %211 to i32
  %217 = and i32 %216, 255
  %218 = tail call i32 @llvm.ctpop.i32(i32 %217) #12
  %219 = trunc i32 %218 to i8
  %220 = and i8 %219, 1
  %221 = xor i8 %220, 1
  store i8 %221, i8* %20, align 1, !tbaa !2446
  %222 = xor i64 %210, %206
  %223 = xor i64 %222, %211
  %224 = lshr i64 %223, 4
  %225 = trunc i64 %224 to i8
  %226 = and i8 %225, 1
  store i8 %226, i8* %26, align 1, !tbaa !2447
  %227 = icmp eq i64 %211, 0
  %228 = zext i1 %227 to i8
  store i8 %228, i8* %29, align 1, !tbaa !2448
  %229 = lshr i64 %211, 63
  %230 = trunc i64 %229 to i8
  store i8 %230, i8* %32, align 1, !tbaa !2449
  %231 = lshr i64 %206, 63
  %232 = lshr i64 %210, 63
  %233 = xor i64 %229, %231
  %234 = xor i64 %229, %232
  %235 = add nuw nsw i64 %233, %234
  %236 = icmp eq i64 %235, 2
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %38, align 1, !tbaa !2450
  %238 = add i64 %351, 16
  store i64 %238, i64* %PC, align 8
  %239 = load i64, i64* %284, align 8
  store i64 %239, i64* %RCX, align 8, !tbaa !2428
  %240 = add i64 %239, 48
  %241 = add i64 %351, 20
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %240 to i64*
  store i64 %211, i64* %242, align 8
  %.pre5 = load i64, i64* %PC, align 8
  %.pre6 = load i64, i64* %RBP, align 8
  br label %block_400b4c

block_400a6f:                                     ; preds = %block_4009f0
  %AL = bitcast %union.anon* %3 to i8*
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !2428
  %243 = add i64 %184, -16
  %244 = add i64 %200, 14
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i64*
  %246 = load i64, i64* %245, align 8
  store i64 %246, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %247 = add i64 %200, -543
  %248 = add i64 %200, 21
  %249 = load i64, i64* %RSP, align 8, !tbaa !2428
  %250 = add i64 %249, -8
  %251 = inttoptr i64 %250 to i64*
  store i64 %248, i64* %251, align 8
  store i64 %250, i64* %RSP, align 8, !tbaa !2428
  store i64 %247, i64* %PC, align 8, !tbaa !2428
  %252 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %177)
  %253 = load i64, i64* %PC, align 8
  %254 = load i64, i64* @stdout, align 32
  store i64 %254, i64* %RDI, align 8, !tbaa !2428
  %255 = load i64, i64* %RBP, align 8
  %256 = add i64 %255, -68
  %257 = load i32, i32* %EAX, align 4
  %258 = add i64 %253, 11
  store i64 %258, i64* %PC, align 8
  %259 = inttoptr i64 %256 to i32*
  store i32 %257, i32* %259, align 4
  %260 = load i64, i64* %PC, align 8
  %261 = add i64 %260, -479
  %262 = add i64 %260, 5
  %263 = load i64, i64* %RSP, align 8, !tbaa !2428
  %264 = add i64 %263, -8
  %265 = inttoptr i64 %264 to i64*
  store i64 %262, i64* %265, align 8
  store i64 %264, i64* %RSP, align 8, !tbaa !2428
  store i64 %261, i64* %PC, align 8, !tbaa !2428
  %266 = tail call fastcc %struct.Memory* @ext_609008_fflush(%struct.State* nonnull %0, %struct.Memory* %252)
  %267 = load i64, i64* %RBP, align 8
  %268 = add i64 %267, -8
  %269 = load i64, i64* %PC, align 8
  %270 = add i64 %269, 8
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %268 to i64*
  store i64 -1, i64* %271, align 8
  %272 = load i64, i64* %RBP, align 8
  %273 = add i64 %272, -72
  %274 = load i32, i32* %EAX, align 4
  %275 = load i64, i64* %PC, align 8
  %276 = add i64 %275, 3
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %273 to i32*
  store i32 %274, i32* %277, align 4
  %278 = load i64, i64* %PC, align 8
  %279 = add i64 %278, 203
  store i64 %279, i64* %PC, align 8, !tbaa !2428
  br label %block_400b6a

block_400b18:                                     ; preds = %block_400b4c, %block_400aa4
  %280 = phi i64 [ %579, %block_400b4c ], [ %.pre, %block_400aa4 ]
  %281 = load i64, i64* %RBP, align 8
  %282 = add i64 %281, -32
  %283 = add i64 %280, 4
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i64*
  %285 = load i64, i64* %284, align 8
  store i64 %285, i64* %RAX, align 8, !tbaa !2428
  %286 = add i64 %281, -40
  %287 = add i64 %280, 8
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = sub i64 %285, %289
  %291 = icmp ult i64 %285, %289
  %292 = zext i1 %291 to i8
  store i8 %292, i8* %13, align 1, !tbaa !2432
  %293 = trunc i64 %290 to i32
  %294 = and i32 %293, 255
  %295 = tail call i32 @llvm.ctpop.i32(i32 %294) #12
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  store i8 %298, i8* %20, align 1, !tbaa !2446
  %299 = xor i64 %289, %285
  %300 = xor i64 %299, %290
  %301 = lshr i64 %300, 4
  %302 = trunc i64 %301 to i8
  %303 = and i8 %302, 1
  store i8 %303, i8* %26, align 1, !tbaa !2447
  %304 = icmp eq i64 %290, 0
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %29, align 1, !tbaa !2448
  %306 = lshr i64 %290, 63
  %307 = trunc i64 %306 to i8
  store i8 %307, i8* %32, align 1, !tbaa !2449
  %308 = lshr i64 %285, 63
  %309 = lshr i64 %289, 63
  %310 = xor i64 %309, %308
  %311 = xor i64 %306, %308
  %312 = add nuw nsw i64 %311, %310
  %313 = icmp eq i64 %312, 2
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %38, align 1, !tbaa !2450
  %.v8 = select i1 %291, i64 14, i64 74
  %315 = add i64 %280, %.v8
  store i64 %315, i64* %PC, align 8, !tbaa !2428
  br i1 %291, label %block_400b26, label %block_400b62

block_400b26:                                     ; preds = %block_400b18
  %316 = add i64 %315, 4
  store i64 %316, i64* %PC, align 8
  %317 = load i64, i64* %284, align 8
  store i64 %317, i64* %RAX, align 8, !tbaa !2428
  %318 = add i64 %317, 24
  %319 = add i64 %315, 8
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = add i64 %281, -48
  %323 = add i64 %315, 12
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i64*
  %325 = load i64, i64* %324, align 8
  %326 = sub i64 %321, %325
  %327 = icmp ult i64 %321, %325
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %13, align 1, !tbaa !2432
  %329 = trunc i64 %326 to i32
  %330 = and i32 %329, 255
  %331 = tail call i32 @llvm.ctpop.i32(i32 %330) #12
  %332 = trunc i32 %331 to i8
  %333 = and i8 %332, 1
  %334 = xor i8 %333, 1
  store i8 %334, i8* %20, align 1, !tbaa !2446
  %335 = xor i64 %325, %321
  %336 = xor i64 %335, %326
  %337 = lshr i64 %336, 4
  %338 = trunc i64 %337 to i8
  %339 = and i8 %338, 1
  store i8 %339, i8* %26, align 1, !tbaa !2447
  %340 = icmp eq i64 %326, 0
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %29, align 1, !tbaa !2448
  %342 = lshr i64 %326, 63
  %343 = trunc i64 %342 to i8
  store i8 %343, i8* %32, align 1, !tbaa !2449
  %344 = lshr i64 %321, 63
  %345 = lshr i64 %325, 63
  %346 = xor i64 %345, %344
  %347 = xor i64 %342, %344
  %348 = add nuw nsw i64 %347, %346
  %349 = icmp eq i64 %348, 2
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %38, align 1, !tbaa !2450
  %.v9 = select i1 %340, i64 38, i64 18
  %351 = add i64 %315, %.v9
  store i64 %351, i64* %PC, align 8, !tbaa !2428
  br i1 %340, label %block_400b4c, label %block_400b38

block_400b6a:                                     ; preds = %block_400b62, %block_400a6f
  %352 = phi i64 [ %.pre7, %block_400b62 ], [ %279, %block_400a6f ]
  %MEMORY.1 = phi %struct.Memory* [ %177, %block_400b62 ], [ %266, %block_400a6f ]
  %353 = load i64, i64* %RBP, align 8
  %354 = add i64 %353, -8
  %355 = add i64 %352, 4
  store i64 %355, i64* %PC, align 8
  %356 = inttoptr i64 %354 to i64*
  %357 = load i64, i64* %356, align 8
  store i64 %357, i64* %RAX, align 8, !tbaa !2428
  %358 = load i64, i64* %RSP, align 8
  %359 = add i64 %358, 80
  store i64 %359, i64* %RSP, align 8, !tbaa !2428
  %360 = icmp ugt i64 %358, -81
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %13, align 1, !tbaa !2432
  %362 = trunc i64 %359 to i32
  %363 = and i32 %362, 255
  %364 = tail call i32 @llvm.ctpop.i32(i32 %363) #12
  %365 = trunc i32 %364 to i8
  %366 = and i8 %365, 1
  %367 = xor i8 %366, 1
  store i8 %367, i8* %20, align 1, !tbaa !2446
  %368 = xor i64 %358, 16
  %369 = xor i64 %368, %359
  %370 = lshr i64 %369, 4
  %371 = trunc i64 %370 to i8
  %372 = and i8 %371, 1
  store i8 %372, i8* %26, align 1, !tbaa !2447
  %373 = icmp eq i64 %359, 0
  %374 = zext i1 %373 to i8
  store i8 %374, i8* %29, align 1, !tbaa !2448
  %375 = lshr i64 %359, 63
  %376 = trunc i64 %375 to i8
  store i8 %376, i8* %32, align 1, !tbaa !2449
  %377 = lshr i64 %358, 63
  %378 = xor i64 %375, %377
  %379 = add nuw nsw i64 %378, %375
  %380 = icmp eq i64 %379, 2
  %381 = zext i1 %380 to i8
  store i8 %381, i8* %38, align 1, !tbaa !2450
  %382 = add i64 %352, 9
  store i64 %382, i64* %PC, align 8
  %383 = add i64 %358, 88
  %384 = inttoptr i64 %359 to i64*
  %385 = load i64, i64* %384, align 8
  store i64 %385, i64* %RBP, align 8, !tbaa !2428
  store i64 %383, i64* %RSP, align 8, !tbaa !2428
  %386 = add i64 %352, 10
  store i64 %386, i64* %PC, align 8
  %387 = inttoptr i64 %383 to i64*
  %388 = load i64, i64* %387, align 8
  store i64 %388, i64* %PC, align 8, !tbaa !2428
  %389 = add i64 %358, 96
  store i64 %389, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400aa4:                                     ; preds = %block_4009f0
  %390 = add i64 %200, 4
  store i64 %390, i64* %PC, align 8
  %391 = load i64, i64* %188, align 8
  store i64 %391, i64* %RAX, align 8, !tbaa !2428
  %392 = add i64 %184, -16
  %393 = add i64 %200, 8
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %392 to i64*
  %395 = load i64, i64* %394, align 8
  store i64 %395, i64* %RCX, align 8, !tbaa !2428
  %396 = add i64 %395, 568
  %397 = add i64 %200, 15
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i64*
  %399 = load i64, i64* %398, align 8
  store i64 %399, i64* %RCX, align 8, !tbaa !2428
  %400 = sub i64 %391, %399
  store i64 %400, i64* %RAX, align 8, !tbaa !2428
  %401 = icmp ult i64 %391, %399
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %13, align 1, !tbaa !2432
  %403 = trunc i64 %400 to i32
  %404 = and i32 %403, 255
  %405 = tail call i32 @llvm.ctpop.i32(i32 %404) #12
  %406 = trunc i32 %405 to i8
  %407 = and i8 %406, 1
  %408 = xor i8 %407, 1
  store i8 %408, i8* %20, align 1, !tbaa !2446
  %409 = xor i64 %391, %399
  %410 = xor i64 %409, %400
  %411 = lshr i64 %410, 4
  %412 = trunc i64 %411 to i8
  %413 = and i8 %412, 1
  store i8 %413, i8* %26, align 1, !tbaa !2447
  %414 = icmp eq i64 %400, 0
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %29, align 1, !tbaa !2448
  %416 = lshr i64 %400, 63
  %417 = trunc i64 %416 to i8
  store i8 %417, i8* %32, align 1, !tbaa !2449
  %418 = lshr i64 %391, 63
  %419 = lshr i64 %399, 63
  %420 = xor i64 %418, %419
  %421 = xor i64 %416, %418
  %422 = add nuw nsw i64 %421, %420
  %423 = icmp eq i64 %422, 2
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %38, align 1, !tbaa !2450
  %425 = add i64 %184, -56
  %426 = add i64 %200, 22
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %425 to i64*
  store i64 %400, i64* %427, align 8
  %428 = load i64, i64* %RBP, align 8
  %429 = add i64 %428, -24
  %430 = load i64, i64* %PC, align 8
  %431 = add i64 %430, 4
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %429 to i64*
  %433 = load i64, i64* %432, align 8
  store i64 %433, i64* %RAX, align 8, !tbaa !2428
  %434 = add i64 %428, -16
  %435 = add i64 %430, 8
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %434 to i64*
  %437 = load i64, i64* %436, align 8
  store i64 %437, i64* %RCX, align 8, !tbaa !2428
  %438 = add i64 %437, 568
  %439 = add i64 %430, 15
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %438 to i64*
  store i64 %433, i64* %440, align 8
  %441 = load i64, i64* %RBP, align 8
  %442 = add i64 %441, -24
  %443 = load i64, i64* %PC, align 8
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %442 to i64*
  %446 = load i64, i64* %445, align 8
  store i64 %446, i64* %RAX, align 8, !tbaa !2428
  %447 = add i64 %441, -16
  %448 = add i64 %443, 8
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %447 to i64*
  %450 = load i64, i64* %449, align 8
  store i64 %450, i64* %RCX, align 8, !tbaa !2428
  %451 = add i64 %450, 424
  %452 = add i64 %443, 15
  store i64 %452, i64* %PC, align 8
  %453 = inttoptr i64 %451 to i64*
  %454 = load i64, i64* %453, align 8
  %455 = shl i64 %454, 6
  store i64 %455, i64* %RCX, align 8, !tbaa !2428
  %456 = add i64 %455, %446
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = icmp ult i64 %456, %446
  %458 = icmp ult i64 %456, %455
  %459 = or i1 %457, %458
  %460 = zext i1 %459 to i8
  store i8 %460, i8* %13, align 1, !tbaa !2432
  %461 = trunc i64 %456 to i32
  %462 = and i32 %461, 255
  %463 = tail call i32 @llvm.ctpop.i32(i32 %462) #12
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  %466 = xor i8 %465, 1
  store i8 %466, i8* %20, align 1, !tbaa !2446
  %467 = xor i64 %446, %456
  %468 = lshr i64 %467, 4
  %469 = trunc i64 %468 to i8
  %470 = and i8 %469, 1
  store i8 %470, i8* %26, align 1, !tbaa !2447
  %471 = icmp eq i64 %456, 0
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %29, align 1, !tbaa !2448
  %473 = lshr i64 %456, 63
  %474 = trunc i64 %473 to i8
  store i8 %474, i8* %32, align 1, !tbaa !2449
  %475 = lshr i64 %446, 63
  %476 = lshr i64 %454, 57
  %477 = and i64 %476, 1
  %478 = xor i64 %473, %475
  %479 = xor i64 %473, %477
  %480 = add nuw nsw i64 %478, %479
  %481 = icmp eq i64 %480, 2
  %482 = zext i1 %481 to i8
  store i8 %482, i8* %38, align 1, !tbaa !2450
  %483 = add i64 %443, 26
  store i64 %483, i64* %PC, align 8
  %484 = load i64, i64* %449, align 8
  store i64 %484, i64* %RCX, align 8, !tbaa !2428
  %485 = add i64 %484, 576
  %486 = add i64 %443, 33
  store i64 %486, i64* %PC, align 8
  %487 = inttoptr i64 %485 to i64*
  store i64 %456, i64* %487, align 8
  %488 = load i64, i64* %RBP, align 8
  %489 = add i64 %488, -16
  %490 = load i64, i64* %PC, align 8
  %491 = add i64 %490, 4
  store i64 %491, i64* %PC, align 8
  %492 = inttoptr i64 %489 to i64*
  %493 = load i64, i64* %492, align 8
  store i64 %493, i64* %RAX, align 8, !tbaa !2428
  %494 = add i64 %493, 552
  %495 = add i64 %490, 11
  store i64 %495, i64* %PC, align 8
  %496 = inttoptr i64 %494 to i64*
  %497 = load i64, i64* %496, align 8
  store i64 %497, i64* %RAX, align 8, !tbaa !2428
  %498 = add i64 %488, -32
  %499 = add i64 %490, 15
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %498 to i64*
  store i64 %497, i64* %500, align 8
  %501 = load i64, i64* %RBP, align 8
  %502 = add i64 %501, -48
  %503 = load i64, i64* %RAX, align 8
  %504 = load i64, i64* %PC, align 8
  %505 = add i64 %504, 4
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %502 to i64*
  store i64 %503, i64* %506, align 8
  %507 = load i64, i64* %RBP, align 8
  %508 = add i64 %507, -32
  %509 = load i64, i64* %PC, align 8
  %510 = add i64 %509, 4
  store i64 %510, i64* %PC, align 8
  %511 = inttoptr i64 %508 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = add i64 %512, 104
  store i64 %513, i64* %RAX, align 8, !tbaa !2428
  %514 = icmp ugt i64 %512, -105
  %515 = zext i1 %514 to i8
  store i8 %515, i8* %13, align 1, !tbaa !2432
  %516 = trunc i64 %513 to i32
  %517 = and i32 %516, 255
  %518 = tail call i32 @llvm.ctpop.i32(i32 %517) #12
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  store i8 %521, i8* %20, align 1, !tbaa !2446
  %522 = xor i64 %513, %512
  %523 = lshr i64 %522, 4
  %524 = trunc i64 %523 to i8
  %525 = and i8 %524, 1
  store i8 %525, i8* %26, align 1, !tbaa !2447
  %526 = icmp eq i64 %513, 0
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %29, align 1, !tbaa !2448
  %528 = lshr i64 %513, 63
  %529 = trunc i64 %528 to i8
  store i8 %529, i8* %32, align 1, !tbaa !2449
  %530 = lshr i64 %512, 63
  %531 = xor i64 %528, %530
  %532 = add nuw nsw i64 %531, %528
  %533 = icmp eq i64 %532, 2
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %38, align 1, !tbaa !2450
  %535 = add i64 %509, 12
  store i64 %535, i64* %PC, align 8
  store i64 %513, i64* %511, align 8
  %536 = load i64, i64* %RBP, align 8
  %537 = add i64 %536, -16
  %538 = load i64, i64* %PC, align 8
  %539 = add i64 %538, 4
  store i64 %539, i64* %PC, align 8
  %540 = inttoptr i64 %537 to i64*
  %541 = load i64, i64* %540, align 8
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = add i64 %541, 560
  %543 = add i64 %538, 11
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to i64*
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %RAX, align 8, !tbaa !2428
  %546 = add i64 %536, -40
  %547 = add i64 %538, 15
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i64*
  store i64 %545, i64* %548, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_400b18

block_400b4c:                                     ; preds = %block_400b26, %block_400b38
  %549 = phi i64 [ %281, %block_400b26 ], [ %.pre6, %block_400b38 ]
  %550 = phi i64 [ %351, %block_400b26 ], [ %.pre5, %block_400b38 ]
  %551 = add i64 %549, -32
  %552 = add i64 %550, 9
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %551 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = add i64 %554, 104
  store i64 %555, i64* %RAX, align 8, !tbaa !2428
  %556 = icmp ugt i64 %554, -105
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %13, align 1, !tbaa !2432
  %558 = trunc i64 %555 to i32
  %559 = and i32 %558, 255
  %560 = tail call i32 @llvm.ctpop.i32(i32 %559) #12
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  %563 = xor i8 %562, 1
  store i8 %563, i8* %20, align 1, !tbaa !2446
  %564 = xor i64 %555, %554
  %565 = lshr i64 %564, 4
  %566 = trunc i64 %565 to i8
  %567 = and i8 %566, 1
  store i8 %567, i8* %26, align 1, !tbaa !2447
  %568 = icmp eq i64 %555, 0
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %29, align 1, !tbaa !2448
  %570 = lshr i64 %555, 63
  %571 = trunc i64 %570 to i8
  store i8 %571, i8* %32, align 1, !tbaa !2449
  %572 = lshr i64 %554, 63
  %573 = xor i64 %570, %572
  %574 = add nuw nsw i64 %573, %570
  %575 = icmp eq i64 %574, 2
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %38, align 1, !tbaa !2450
  %577 = add i64 %550, 17
  store i64 %577, i64* %PC, align 8
  store i64 %555, i64* %553, align 8
  %578 = load i64, i64* %PC, align 8
  %579 = add i64 %578, -69
  store i64 %579, i64* %PC, align 8, !tbaa !2428
  br label %block_400b18

block_400b62:                                     ; preds = %block_400b18
  %580 = add i64 %281, -8
  %581 = add i64 %315, 8
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i64*
  store i64 0, i64* %582, align 8
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_400b6a
}

; Function Attrs: noinline
define %struct.Memory* @sub_4046a0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4046a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_605de0__init_array_type* @seg_605de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_605de0__init_array_type* @seg_605de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2453
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #12
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2453
  store i8 0, i8* %45, align 1, !tbaa !2453
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2453
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2453
  store i8 0, i8* %48, align 1, !tbaa !2453
  %63 = add i64 %38, -16075
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_4007f0__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #12
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2448
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_4046f6, label %block_4046d6

block_4046f6.loopexit:                            ; preds = %block_4046e0
  br label %block_4046f6

block_4046f6:                                     ; preds = %block_4046f6.loopexit, %block_4046a0
  %81 = phi i64 [ %80, %block_4046a0 ], [ %179, %block_4046f6.loopexit ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_4046a0 ], [ %149, %block_4046f6.loopexit ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #12
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2450
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4046d6:                                     ; preds = %block_4046a0
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2448
  store i8 0, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_4046e0

block_4046e0:                                     ; preds = %block_4046e0, %block_4046d6
  %134 = phi i64 [ 0, %block_4046d6 ], [ %152, %block_4046e0 ]
  %135 = phi i64 [ %133, %block_4046d6 ], [ %179, %block_4046e0 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_4046d6 ], [ %149, %block_4046e0 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #12
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2447
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2450
  %.v2 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v2
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_4046f6.loopexit, label %block_4046e0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4009e0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4009e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400970_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4033a0_primal_start_artificial(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_4033a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -16
  %11 = load i64, i64* %RDI, align 8
  %12 = add i64 %9, 7
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %10 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load i64, i64* %RBP, align 8
  %15 = add i64 %14, -8
  %16 = load i64, i64* %PC, align 8
  %17 = add i64 %16, 4
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  %20 = add i64 %19, 552
  %21 = add i64 %16, 11
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %20 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %RDI, align 8, !tbaa !2428
  %24 = add i64 %14, -16
  %25 = add i64 %16, 15
  store i64 %25, i64* %PC, align 8
  %26 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %26, align 8
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -24
  %29 = load i64, i64* %RDI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -16
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 4
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %34 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, 104
  store i64 %39, i64* %RDI, align 8, !tbaa !2428
  %40 = icmp ugt i64 %38, -105
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = tail call i32 @llvm.ctpop.i32(i32 %44) #12
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 %39, %38
  %51 = lshr i64 %50, 4
  %52 = trunc i64 %51 to i8
  %53 = and i8 %52, 1
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %53, i8* %54, align 1, !tbaa !2447
  %55 = icmp eq i64 %39, 0
  %56 = zext i1 %55 to i8
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %56, i8* %57, align 1, !tbaa !2448
  %58 = lshr i64 %39, 63
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %59, i8* %60, align 1, !tbaa !2449
  %61 = lshr i64 %38, 63
  %62 = xor i64 %58, %61
  %63 = add nuw nsw i64 %62, %58
  %64 = icmp eq i64 %63, 2
  %65 = zext i1 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %65, i8* %66, align 1, !tbaa !2450
  %67 = add i64 %35, 12
  store i64 %67, i64* %PC, align 8
  store i64 %39, i64* %37, align 8
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -24
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %69 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %RDI, align 8, !tbaa !2428
  %74 = add i64 %73, 48
  %75 = add i64 %70, 12
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i64*
  store i64 0, i64* %76, align 8
  %77 = load i64, i64* %RBP, align 8
  %78 = add i64 %77, -24
  %79 = load i64, i64* %PC, align 8
  %80 = add i64 %79, 4
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RDI, align 8, !tbaa !2428
  %83 = add i64 %82, 24
  %84 = add i64 %79, 12
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %83 to i64*
  store i64 0, i64* %85, align 8
  %86 = load i64, i64* %RBP, align 8
  %87 = add i64 %86, -16
  %88 = load i64, i64* %PC, align 8
  %89 = add i64 %88, 4
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %87 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RDI, align 8, !tbaa !2428
  %92 = add i64 %86, -24
  %93 = add i64 %88, 8
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i64*
  %95 = load i64, i64* %94, align 8
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = add i64 %95, 16
  %97 = add i64 %88, 12
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i64*
  store i64 %91, i64* %98, align 8
  %99 = load i64, i64* %RBP, align 8
  %100 = add i64 %99, -24
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 4
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %100 to i64*
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = add i64 %104, 32
  %106 = add i64 %101, 12
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %105 to i64*
  store i64 0, i64* %107, align 8
  %108 = load i64, i64* %RBP, align 8
  %109 = add i64 %108, -24
  %110 = load i64, i64* %PC, align 8
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %109 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %RAX, align 8, !tbaa !2428
  %114 = add i64 %113, 40
  %115 = add i64 %110, 12
  store i64 %115, i64* %PC, align 8
  %116 = inttoptr i64 %114 to i64*
  store i64 0, i64* %116, align 8
  %117 = load i64, i64* %RBP, align 8
  %118 = add i64 %117, -8
  %119 = load i64, i64* %PC, align 8
  %120 = add i64 %119, 4
  store i64 %120, i64* %PC, align 8
  %121 = inttoptr i64 %118 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = add i64 %122, 400
  %124 = add i64 %119, 11
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %123 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = add i64 %126, 1
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = icmp eq i64 %126, -1
  %129 = icmp eq i64 %127, 0
  %130 = or i1 %128, %129
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %42, align 1, !tbaa !2432
  %132 = trunc i64 %127 to i32
  %133 = and i32 %132, 255
  %134 = tail call i32 @llvm.ctpop.i32(i32 %133) #12
  %135 = trunc i32 %134 to i8
  %136 = and i8 %135, 1
  %137 = xor i8 %136, 1
  store i8 %137, i8* %49, align 1, !tbaa !2446
  %138 = xor i64 %127, %126
  %139 = lshr i64 %138, 4
  %140 = trunc i64 %139 to i8
  %141 = and i8 %140, 1
  store i8 %141, i8* %54, align 1, !tbaa !2447
  %142 = zext i1 %129 to i8
  store i8 %142, i8* %57, align 1, !tbaa !2448
  %143 = lshr i64 %127, 63
  %144 = trunc i64 %143 to i8
  store i8 %144, i8* %60, align 1, !tbaa !2449
  %145 = lshr i64 %126, 63
  %146 = xor i64 %143, %145
  %147 = add nuw nsw i64 %146, %143
  %148 = icmp eq i64 %147, 2
  %149 = zext i1 %148 to i8
  store i8 %149, i8* %66, align 1, !tbaa !2450
  %150 = add i64 %117, -24
  %151 = add i64 %119, 19
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %150 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RDI, align 8, !tbaa !2428
  %154 = add i64 %153, 88
  %155 = add i64 %119, 23
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %154 to i64*
  store i64 %127, i64* %156, align 8
  %157 = load i64, i64* %RBP, align 8
  %158 = add i64 %157, -24
  %159 = load i64, i64* %PC, align 8
  %160 = add i64 %159, 4
  store i64 %160, i64* %PC, align 8
  %161 = inttoptr i64 %158 to i64*
  %162 = load i64, i64* %161, align 8
  store i64 %162, i64* %RAX, align 8, !tbaa !2428
  %163 = add i64 %162, 8
  %164 = add i64 %159, 11
  store i64 %164, i64* %PC, align 8
  %165 = inttoptr i64 %163 to i32*
  store i32 0, i32* %165, align 4
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -24
  %168 = load i64, i64* %PC, align 8
  %169 = add i64 %168, 4
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %167 to i64*
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = add i64 %168, 11
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %171 to i64*
  store i64 -100000000, i64* %173, align 8
  %174 = load i64, i64* %RBP, align 8
  %175 = add i64 %174, -24
  %176 = load i64, i64* %PC, align 8
  %177 = add i64 %176, 4
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %175 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %RAX, align 8, !tbaa !2428
  %180 = add i64 %179, 80
  %181 = add i64 %176, 12
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to i64*
  store i64 0, i64* %182, align 8
  %183 = load i64, i64* %RBP, align 8
  %184 = add i64 %183, -8
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 4
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i64*
  %188 = load i64, i64* %187, align 8
  store i64 %188, i64* %RAX, align 8, !tbaa !2428
  %189 = add i64 %188, 576
  %190 = add i64 %185, 11
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %189 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %RAX, align 8, !tbaa !2428
  %193 = add i64 %183, -40
  %194 = add i64 %185, 15
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %193 to i64*
  store i64 %192, i64* %195, align 8
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -8
  %198 = load i64, i64* %PC, align 8
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %RAX, align 8, !tbaa !2428
  %202 = add i64 %201, 568
  %203 = add i64 %198, 11
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i64*
  %205 = load i64, i64* %204, align 8
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %196, -32
  %207 = add i64 %198, 15
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i64*
  store i64 %205, i64* %208, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_40345a

block_40345a:                                     ; preds = %block_403484, %block_4033a0
  %209 = phi i64 [ %452, %block_403484 ], [ %.pre, %block_4033a0 ]
  %210 = load i64, i64* %RBP, align 8
  %211 = add i64 %210, -32
  %212 = add i64 %209, 4
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to i64*
  %214 = load i64, i64* %213, align 8
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = add i64 %210, -40
  %216 = add i64 %209, 8
  store i64 %216, i64* %PC, align 8
  %217 = inttoptr i64 %215 to i64*
  %218 = load i64, i64* %217, align 8
  store i64 %218, i64* %RCX, align 8, !tbaa !2428
  %219 = sub i64 %214, %218
  %220 = icmp ult i64 %214, %218
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %42, align 1, !tbaa !2432
  %222 = trunc i64 %219 to i32
  %223 = and i32 %222, 255
  %224 = tail call i32 @llvm.ctpop.i32(i32 %223) #12
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  store i8 %227, i8* %49, align 1, !tbaa !2446
  %228 = xor i64 %214, %218
  %229 = xor i64 %228, %219
  %230 = lshr i64 %229, 4
  %231 = trunc i64 %230 to i8
  %232 = and i8 %231, 1
  store i8 %232, i8* %54, align 1, !tbaa !2447
  %233 = icmp eq i64 %219, 0
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %57, align 1, !tbaa !2448
  %235 = lshr i64 %219, 63
  %236 = trunc i64 %235 to i8
  store i8 %236, i8* %60, align 1, !tbaa !2449
  %237 = lshr i64 %214, 63
  %238 = lshr i64 %218, 63
  %239 = xor i64 %237, %238
  %240 = xor i64 %235, %237
  %241 = add nuw nsw i64 %240, %239
  %242 = icmp eq i64 %241, 2
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %66, align 1, !tbaa !2450
  %.v = select i1 %233, i64 64, i64 17
  %244 = add i64 %209, %.v
  store i64 %244, i64* %PC, align 8, !tbaa !2428
  br i1 %233, label %block_40349a, label %block_40346b

block_4034b8:                                     ; preds = %block_4034c9, %block_40349a
  %245 = phi i64 [ %689, %block_4034c9 ], [ %.pre9, %block_40349a ]
  %246 = load i64, i64* %RBP, align 8
  %247 = add i64 %246, -16
  %248 = add i64 %245, 4
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %RAX, align 8, !tbaa !2428
  %251 = add i64 %246, -40
  %252 = add i64 %245, 8
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i64*
  %254 = load i64, i64* %253, align 8
  store i64 %254, i64* %RCX, align 8, !tbaa !2428
  %255 = sub i64 %250, %254
  %256 = icmp ult i64 %250, %254
  %257 = zext i1 %256 to i8
  store i8 %257, i8* %42, align 1, !tbaa !2432
  %258 = trunc i64 %255 to i32
  %259 = and i32 %258, 255
  %260 = tail call i32 @llvm.ctpop.i32(i32 %259) #12
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  store i8 %263, i8* %49, align 1, !tbaa !2446
  %264 = xor i64 %250, %254
  %265 = xor i64 %264, %255
  %266 = lshr i64 %265, 4
  %267 = trunc i64 %266 to i8
  %268 = and i8 %267, 1
  store i8 %268, i8* %54, align 1, !tbaa !2447
  %269 = icmp eq i64 %255, 0
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %57, align 1, !tbaa !2448
  %271 = lshr i64 %255, 63
  %272 = trunc i64 %271 to i8
  store i8 %272, i8* %60, align 1, !tbaa !2449
  %273 = lshr i64 %250, 63
  %274 = lshr i64 %254, 63
  %275 = xor i64 %273, %274
  %276 = xor i64 %271, %273
  %277 = add nuw nsw i64 %276, %275
  %278 = icmp eq i64 %277, 2
  %279 = zext i1 %278 to i8
  store i8 %279, i8* %66, align 1, !tbaa !2450
  %.v11 = select i1 %269, i64 206, i64 17
  %280 = add i64 %245, %.v11
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  br i1 %269, label %block_403586, label %block_4034c9

block_40346b:                                     ; preds = %block_40345a
  %281 = add i64 %244, 4
  store i64 %281, i64* %PC, align 8
  %282 = load i64, i64* %213, align 8
  store i64 %282, i64* %RAX, align 8, !tbaa !2428
  %283 = add i64 %282, 24
  %284 = add i64 %244, 8
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %283 to i32*
  %286 = load i32, i32* %285, align 4
  %287 = add i32 %286, 1
  %288 = icmp ne i32 %286, -1
  %289 = zext i1 %288 to i8
  store i8 %289, i8* %42, align 1, !tbaa !2432
  %290 = and i32 %287, 255
  %291 = tail call i32 @llvm.ctpop.i32(i32 %290) #12
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  store i8 %294, i8* %49, align 1, !tbaa !2446
  %295 = xor i32 %286, 16
  %296 = xor i32 %295, %287
  %297 = lshr i32 %296, 4
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  store i8 %299, i8* %54, align 1, !tbaa !2447
  %300 = icmp eq i32 %287, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %57, align 1, !tbaa !2448
  %302 = lshr i32 %287, 31
  %303 = trunc i32 %302 to i8
  store i8 %303, i8* %60, align 1, !tbaa !2449
  %304 = lshr i32 %286, 31
  %305 = xor i32 %304, 1
  %306 = xor i32 %302, %304
  %307 = add nuw nsw i32 %306, %305
  %308 = icmp eq i32 %307, 2
  %309 = zext i1 %308 to i8
  store i8 %309, i8* %66, align 1, !tbaa !2450
  %.v10 = select i1 %300, i64 25, i64 14
  %310 = add i64 %244, %.v10
  store i64 %310, i64* %PC, align 8, !tbaa !2428
  br i1 %300, label %block_403484, label %block_403479

block_403586:                                     ; preds = %block_4034b8
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %42, align 1, !tbaa !2432
  store i8 1, i8* %49, align 1, !tbaa !2446
  store i8 1, i8* %57, align 1, !tbaa !2448
  store i8 0, i8* %60, align 1, !tbaa !2449
  store i8 0, i8* %66, align 1, !tbaa !2450
  store i8 0, i8* %54, align 1, !tbaa !2447
  %311 = add i64 %280, 6
  store i64 %311, i64* %PC, align 8
  %312 = load i64, i64* %249, align 8
  %313 = add i64 %312, -104
  store i64 %313, i64* %RCX, align 8, !tbaa !2428
  %314 = icmp ugt i64 %312, 103
  %315 = zext i1 %314 to i8
  store i8 %315, i8* %42, align 1, !tbaa !2432
  %316 = trunc i64 %313 to i32
  %317 = and i32 %316, 255
  %318 = tail call i32 @llvm.ctpop.i32(i32 %317) #12
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  store i8 %321, i8* %49, align 1, !tbaa !2446
  %322 = xor i64 %312, 16
  %323 = xor i64 %322, %313
  %324 = lshr i64 %323, 4
  %325 = trunc i64 %324 to i8
  %326 = and i8 %325, 1
  store i8 %326, i8* %54, align 1, !tbaa !2447
  %327 = icmp eq i64 %313, 0
  %328 = zext i1 %327 to i8
  store i8 %328, i8* %57, align 1, !tbaa !2448
  %329 = lshr i64 %313, 63
  %330 = trunc i64 %329 to i8
  store i8 %330, i8* %60, align 1, !tbaa !2449
  %331 = lshr i64 %312, 63
  %332 = xor i64 %329, %331
  %333 = xor i64 %329, 1
  %334 = add nuw nsw i64 %332, %333
  %335 = icmp eq i64 %334, 2
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %66, align 1, !tbaa !2450
  %337 = add i64 %280, 14
  store i64 %337, i64* %PC, align 8
  store i64 %313, i64* %249, align 8
  %338 = load i64, i64* %RBP, align 8
  %339 = add i64 %338, -24
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %339 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = add i64 %343, 104
  store i64 %344, i64* %RCX, align 8, !tbaa !2428
  %345 = icmp ugt i64 %343, -105
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %42, align 1, !tbaa !2432
  %347 = trunc i64 %344 to i32
  %348 = and i32 %347, 255
  %349 = tail call i32 @llvm.ctpop.i32(i32 %348) #12
  %350 = trunc i32 %349 to i8
  %351 = and i8 %350, 1
  %352 = xor i8 %351, 1
  store i8 %352, i8* %49, align 1, !tbaa !2446
  %353 = xor i64 %344, %343
  %354 = lshr i64 %353, 4
  %355 = trunc i64 %354 to i8
  %356 = and i8 %355, 1
  store i8 %356, i8* %54, align 1, !tbaa !2447
  %357 = icmp eq i64 %344, 0
  %358 = zext i1 %357 to i8
  store i8 %358, i8* %57, align 1, !tbaa !2448
  %359 = lshr i64 %344, 63
  %360 = trunc i64 %359 to i8
  store i8 %360, i8* %60, align 1, !tbaa !2449
  %361 = lshr i64 %343, 63
  %362 = xor i64 %359, %361
  %363 = add nuw nsw i64 %362, %359
  %364 = icmp eq i64 %363, 2
  %365 = zext i1 %364 to i8
  store i8 %365, i8* %66, align 1, !tbaa !2450
  %366 = add i64 %340, 12
  store i64 %366, i64* %PC, align 8
  store i64 %344, i64* %342, align 8
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -16
  %369 = load i64, i64* %PC, align 8
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %368 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RCX, align 8, !tbaa !2428
  %373 = add i64 %372, 32
  %374 = add i64 %369, 12
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  store i64 0, i64* %375, align 8
  %376 = load i64, i64* %RBP, align 8
  %377 = add i64 %376, -24
  %378 = load i64, i64* %PC, align 8
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380, align 8
  store i64 %381, i64* %RCX, align 8, !tbaa !2428
  %382 = add i64 %381, 40
  %383 = add i64 %378, 12
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to i64*
  store i64 0, i64* %384, align 8
  %385 = load i64, i64* %PC, align 8
  %386 = add i64 %385, 1
  store i64 %386, i64* %PC, align 8
  %387 = load i64, i64* %5, align 8, !tbaa !2428
  %388 = add i64 %387, 8
  %389 = inttoptr i64 %387 to i64*
  %390 = load i64, i64* %389, align 8
  store i64 %390, i64* %RBP, align 8, !tbaa !2428
  store i64 %388, i64* %5, align 8, !tbaa !2428
  %391 = add i64 %385, 2
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %388 to i64*
  %393 = load i64, i64* %392, align 8
  store i64 %393, i64* %PC, align 8, !tbaa !2428
  %394 = add i64 %387, 16
  store i64 %394, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_40349a:                                     ; preds = %block_40345a
  %395 = add i64 %210, -8
  %396 = add i64 %244, 4
  store i64 %396, i64* %PC, align 8
  %397 = inttoptr i64 %395 to i64*
  %398 = load i64, i64* %397, align 8
  store i64 %398, i64* %RAX, align 8, !tbaa !2428
  %399 = add i64 %398, 584
  %400 = add i64 %244, 11
  store i64 %400, i64* %PC, align 8
  %401 = inttoptr i64 %399 to i64*
  %402 = load i64, i64* %401, align 8
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = add i64 %244, 15
  store i64 %403, i64* %PC, align 8
  store i64 %402, i64* %213, align 8
  %404 = load i64, i64* %RBP, align 8
  %405 = add i64 %404, -8
  %406 = load i64, i64* %PC, align 8
  %407 = add i64 %406, 4
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %405 to i64*
  %409 = load i64, i64* %408, align 8
  store i64 %409, i64* %RAX, align 8, !tbaa !2428
  %410 = add i64 %409, 560
  %411 = add i64 %406, 11
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %410 to i64*
  %413 = load i64, i64* %412, align 8
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = add i64 %404, -40
  %415 = add i64 %406, 15
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i64*
  store i64 %413, i64* %416, align 8
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_4034b8

block_403479:                                     ; preds = %block_40346b
  %417 = add i64 %310, 4
  store i64 %417, i64* %PC, align 8
  %418 = load i64, i64* %213, align 8
  store i64 %418, i64* %RAX, align 8, !tbaa !2428
  %419 = add i64 %418, 24
  %420 = add i64 %310, 11
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i32*
  store i32 1, i32* %421, align 4
  %.pre7 = load i64, i64* %PC, align 8
  %.pre8 = load i64, i64* %RBP, align 8
  br label %block_403484

block_403484:                                     ; preds = %block_403479, %block_40346b
  %422 = phi i64 [ %.pre8, %block_403479 ], [ %210, %block_40346b ]
  %423 = phi i64 [ %.pre7, %block_403479 ], [ %310, %block_40346b ]
  %424 = add i64 %422, -32
  %425 = add i64 %423, 9
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %424 to i64*
  %427 = load i64, i64* %426, align 8
  %428 = add i64 %427, 64
  store i64 %428, i64* %RAX, align 8, !tbaa !2428
  %429 = icmp ugt i64 %427, -65
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %42, align 1, !tbaa !2432
  %431 = trunc i64 %428 to i32
  %432 = and i32 %431, 255
  %433 = tail call i32 @llvm.ctpop.i32(i32 %432) #12
  %434 = trunc i32 %433 to i8
  %435 = and i8 %434, 1
  %436 = xor i8 %435, 1
  store i8 %436, i8* %49, align 1, !tbaa !2446
  %437 = xor i64 %428, %427
  %438 = lshr i64 %437, 4
  %439 = trunc i64 %438 to i8
  %440 = and i8 %439, 1
  store i8 %440, i8* %54, align 1, !tbaa !2447
  %441 = icmp eq i64 %428, 0
  %442 = zext i1 %441 to i8
  store i8 %442, i8* %57, align 1, !tbaa !2448
  %443 = lshr i64 %428, 63
  %444 = trunc i64 %443 to i8
  store i8 %444, i8* %60, align 1, !tbaa !2449
  %445 = lshr i64 %427, 63
  %446 = xor i64 %443, %445
  %447 = add nuw nsw i64 %446, %443
  %448 = icmp eq i64 %447, 2
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %66, align 1, !tbaa !2450
  %450 = add i64 %423, 17
  store i64 %450, i64* %PC, align 8
  store i64 %428, i64* %426, align 8
  %451 = load i64, i64* %PC, align 8
  %452 = add i64 %451, -59
  store i64 %452, i64* %PC, align 8, !tbaa !2428
  br label %block_40345a

block_4034c9:                                     ; preds = %block_4034b8
  %453 = add i64 %246, -32
  %454 = add i64 %280, 4
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %453 to i64*
  %456 = load i64, i64* %455, align 8
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = add i64 %280, 8
  store i64 %457, i64* %PC, align 8
  %458 = load i64, i64* %249, align 8
  store i64 %458, i64* %RCX, align 8, !tbaa !2428
  %459 = add i64 %458, 48
  %460 = add i64 %280, 12
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %459 to i64*
  store i64 %456, i64* %461, align 8
  %462 = load i64, i64* %RBP, align 8
  %463 = add i64 %462, -24
  %464 = load i64, i64* %PC, align 8
  %465 = add i64 %464, 4
  store i64 %465, i64* %PC, align 8
  %466 = inttoptr i64 %463 to i64*
  %467 = load i64, i64* %466, align 8
  store i64 %467, i64* %RAX, align 8, !tbaa !2428
  %468 = add i64 %462, -16
  %469 = add i64 %464, 8
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %468 to i64*
  %471 = load i64, i64* %470, align 8
  store i64 %471, i64* %RCX, align 8, !tbaa !2428
  %472 = add i64 %471, 24
  %473 = add i64 %464, 12
  store i64 %473, i64* %PC, align 8
  %474 = inttoptr i64 %472 to i64*
  store i64 %467, i64* %474, align 8
  %475 = load i64, i64* %RBP, align 8
  %476 = add i64 %475, -16
  %477 = load i64, i64* %PC, align 8
  %478 = add i64 %477, 4
  store i64 %478, i64* %PC, align 8
  %479 = inttoptr i64 %476 to i64*
  %480 = load i64, i64* %479, align 8
  store i64 %480, i64* %RAX, align 8, !tbaa !2428
  %481 = add i64 %480, 16
  %482 = add i64 %477, 12
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to i64*
  store i64 0, i64* %483, align 8
  %484 = load i64, i64* %RBP, align 8
  %485 = add i64 %484, -16
  %486 = load i64, i64* %PC, align 8
  %487 = add i64 %486, 4
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %485 to i64*
  %489 = load i64, i64* %488, align 8
  %490 = add i64 %489, 104
  store i64 %490, i64* %RAX, align 8, !tbaa !2428
  %491 = icmp ugt i64 %489, -105
  %492 = zext i1 %491 to i8
  store i8 %492, i8* %42, align 1, !tbaa !2432
  %493 = trunc i64 %490 to i32
  %494 = and i32 %493, 255
  %495 = tail call i32 @llvm.ctpop.i32(i32 %494) #12
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  %498 = xor i8 %497, 1
  store i8 %498, i8* %49, align 1, !tbaa !2446
  %499 = xor i64 %490, %489
  %500 = lshr i64 %499, 4
  %501 = trunc i64 %500 to i8
  %502 = and i8 %501, 1
  store i8 %502, i8* %54, align 1, !tbaa !2447
  %503 = icmp eq i64 %490, 0
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %57, align 1, !tbaa !2448
  %505 = lshr i64 %490, 63
  %506 = trunc i64 %505 to i8
  store i8 %506, i8* %60, align 1, !tbaa !2449
  %507 = lshr i64 %489, 63
  %508 = xor i64 %505, %507
  %509 = add nuw nsw i64 %508, %505
  %510 = icmp eq i64 %509, 2
  %511 = zext i1 %510 to i8
  store i8 %511, i8* %66, align 1, !tbaa !2450
  %512 = add i64 %486, 12
  store i64 %512, i64* %PC, align 8
  %513 = load i64, i64* %488, align 8
  store i64 %513, i64* %RCX, align 8, !tbaa !2428
  %514 = add i64 %513, 32
  %515 = add i64 %486, 16
  store i64 %515, i64* %PC, align 8
  %516 = inttoptr i64 %514 to i64*
  store i64 %490, i64* %516, align 8
  %517 = load i64, i64* %RBP, align 8
  %518 = add i64 %517, -16
  %519 = load i64, i64* %PC, align 8
  %520 = add i64 %519, 4
  store i64 %520, i64* %PC, align 8
  %521 = inttoptr i64 %518 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = add i64 %522, -104
  store i64 %523, i64* %RAX, align 8, !tbaa !2428
  %524 = icmp ugt i64 %522, 103
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %42, align 1, !tbaa !2432
  %526 = trunc i64 %523 to i32
  %527 = and i32 %526, 255
  %528 = tail call i32 @llvm.ctpop.i32(i32 %527) #12
  %529 = trunc i32 %528 to i8
  %530 = and i8 %529, 1
  %531 = xor i8 %530, 1
  store i8 %531, i8* %49, align 1, !tbaa !2446
  %532 = xor i64 %522, 16
  %533 = xor i64 %532, %523
  %534 = lshr i64 %533, 4
  %535 = trunc i64 %534 to i8
  %536 = and i8 %535, 1
  store i8 %536, i8* %54, align 1, !tbaa !2447
  %537 = icmp eq i64 %523, 0
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %57, align 1, !tbaa !2448
  %539 = lshr i64 %523, 63
  %540 = trunc i64 %539 to i8
  store i8 %540, i8* %60, align 1, !tbaa !2449
  %541 = lshr i64 %522, 63
  %542 = xor i64 %539, %541
  %543 = xor i64 %539, 1
  %544 = add nuw nsw i64 %542, %543
  %545 = icmp eq i64 %544, 2
  %546 = zext i1 %545 to i8
  store i8 %546, i8* %66, align 1, !tbaa !2450
  %547 = add i64 %519, 12
  store i64 %547, i64* %PC, align 8
  %548 = load i64, i64* %521, align 8
  store i64 %548, i64* %RCX, align 8, !tbaa !2428
  %549 = add i64 %548, 40
  %550 = add i64 %519, 16
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i64*
  store i64 %523, i64* %551, align 8
  %552 = load i64, i64* %RBP, align 8
  %553 = add i64 %552, -16
  %554 = load i64, i64* %PC, align 8
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %553 to i64*
  %557 = load i64, i64* %556, align 8
  store i64 %557, i64* %RAX, align 8, !tbaa !2428
  %558 = add i64 %557, 88
  %559 = add i64 %554, 12
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i64*
  store i64 1, i64* %560, align 8
  %561 = load i64, i64* %RBP, align 8
  %562 = add i64 %561, -32
  %563 = load i64, i64* %PC, align 8
  %564 = add i64 %563, 4
  store i64 %564, i64* %PC, align 8
  %565 = inttoptr i64 %562 to i64*
  %566 = load i64, i64* %565, align 8
  store i64 %566, i64* %RAX, align 8, !tbaa !2428
  %567 = add i64 %563, 11
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %566 to i64*
  store i64 100000000, i64* %568, align 8
  %569 = load i64, i64* %RBP, align 8
  %570 = add i64 %569, -32
  %571 = load i64, i64* %PC, align 8
  %572 = add i64 %571, 4
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %570 to i64*
  %574 = load i64, i64* %573, align 8
  store i64 %574, i64* %RAX, align 8, !tbaa !2428
  %575 = add i64 %574, 24
  %576 = add i64 %571, 11
  store i64 %576, i64* %PC, align 8
  %577 = inttoptr i64 %575 to i32*
  store i32 0, i32* %577, align 4
  %578 = load i64, i64* %RBP, align 8
  %579 = add i64 %578, -16
  %580 = load i64, i64* %PC, align 8
  %581 = add i64 %580, 4
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %579 to i64*
  %583 = load i64, i64* %582, align 8
  store i64 %583, i64* %RAX, align 8, !tbaa !2428
  %584 = add i64 %583, 8
  %585 = add i64 %580, 11
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i32*
  store i32 1, i32* %586, align 4
  %587 = load i64, i64* %RBP, align 8
  %588 = add i64 %587, -16
  %589 = load i64, i64* %PC, align 8
  %590 = add i64 %589, 4
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %588 to i64*
  %592 = load i64, i64* %591, align 8
  store i64 %592, i64* %RAX, align 8, !tbaa !2428
  %593 = add i64 %589, 11
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %592 to i64*
  store i64 0, i64* %594, align 8
  %595 = load i64, i64* %RBP, align 8
  %596 = add i64 %595, -16
  %597 = load i64, i64* %PC, align 8
  %598 = add i64 %597, 4
  store i64 %598, i64* %PC, align 8
  %599 = inttoptr i64 %596 to i64*
  %600 = load i64, i64* %599, align 8
  store i64 %600, i64* %RAX, align 8, !tbaa !2428
  %601 = add i64 %595, -32
  %602 = add i64 %597, 8
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %601 to i64*
  %604 = load i64, i64* %603, align 8
  store i64 %604, i64* %RCX, align 8, !tbaa !2428
  %605 = add i64 %604, 8
  %606 = add i64 %597, 12
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to i64*
  store i64 %600, i64* %607, align 8
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -24
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, 4
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to i64*
  %613 = load i64, i64* %612, align 8
  store i64 %613, i64* %RAX, align 8, !tbaa !2428
  %614 = add i64 %608, -32
  %615 = add i64 %610, 8
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %614 to i64*
  %617 = load i64, i64* %616, align 8
  store i64 %617, i64* %RCX, align 8, !tbaa !2428
  %618 = add i64 %617, 16
  %619 = add i64 %610, 12
  store i64 %619, i64* %PC, align 8
  %620 = inttoptr i64 %618 to i64*
  store i64 %613, i64* %620, align 8
  %621 = load i64, i64* %RBP, align 8
  %622 = add i64 %621, -16
  %623 = load i64, i64* %PC, align 8
  %624 = add i64 %623, 4
  store i64 %624, i64* %PC, align 8
  %625 = inttoptr i64 %622 to i64*
  %626 = load i64, i64* %625, align 8
  store i64 %626, i64* %RAX, align 8, !tbaa !2428
  %627 = add i64 %626, 80
  %628 = add i64 %623, 12
  store i64 %628, i64* %PC, align 8
  %629 = inttoptr i64 %627 to i64*
  store i64 0, i64* %629, align 8
  %630 = load i64, i64* %RBP, align 8
  %631 = add i64 %630, -32
  %632 = load i64, i64* %PC, align 8
  %633 = add i64 %632, 4
  store i64 %633, i64* %PC, align 8
  %634 = inttoptr i64 %631 to i64*
  %635 = load i64, i64* %634, align 8
  %636 = add i64 %635, 64
  store i64 %636, i64* %RAX, align 8, !tbaa !2428
  %637 = icmp ugt i64 %635, -65
  %638 = zext i1 %637 to i8
  store i8 %638, i8* %42, align 1, !tbaa !2432
  %639 = trunc i64 %636 to i32
  %640 = and i32 %639, 255
  %641 = tail call i32 @llvm.ctpop.i32(i32 %640) #12
  %642 = trunc i32 %641 to i8
  %643 = and i8 %642, 1
  %644 = xor i8 %643, 1
  store i8 %644, i8* %49, align 1, !tbaa !2446
  %645 = xor i64 %636, %635
  %646 = lshr i64 %645, 4
  %647 = trunc i64 %646 to i8
  %648 = and i8 %647, 1
  store i8 %648, i8* %54, align 1, !tbaa !2447
  %649 = icmp eq i64 %636, 0
  %650 = zext i1 %649 to i8
  store i8 %650, i8* %57, align 1, !tbaa !2448
  %651 = lshr i64 %636, 63
  %652 = trunc i64 %651 to i8
  store i8 %652, i8* %60, align 1, !tbaa !2449
  %653 = lshr i64 %635, 63
  %654 = xor i64 %651, %653
  %655 = add nuw nsw i64 %654, %651
  %656 = icmp eq i64 %655, 2
  %657 = zext i1 %656 to i8
  store i8 %657, i8* %66, align 1, !tbaa !2450
  %658 = add i64 %632, 12
  store i64 %658, i64* %PC, align 8
  store i64 %636, i64* %634, align 8
  %659 = load i64, i64* %RBP, align 8
  %660 = add i64 %659, -16
  %661 = load i64, i64* %PC, align 8
  %662 = add i64 %661, 4
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %660 to i64*
  %664 = load i64, i64* %663, align 8
  %665 = add i64 %664, 104
  store i64 %665, i64* %RAX, align 8, !tbaa !2428
  %666 = icmp ugt i64 %664, -105
  %667 = zext i1 %666 to i8
  store i8 %667, i8* %42, align 1, !tbaa !2432
  %668 = trunc i64 %665 to i32
  %669 = and i32 %668, 255
  %670 = tail call i32 @llvm.ctpop.i32(i32 %669) #12
  %671 = trunc i32 %670 to i8
  %672 = and i8 %671, 1
  %673 = xor i8 %672, 1
  store i8 %673, i8* %49, align 1, !tbaa !2446
  %674 = xor i64 %665, %664
  %675 = lshr i64 %674, 4
  %676 = trunc i64 %675 to i8
  %677 = and i8 %676, 1
  store i8 %677, i8* %54, align 1, !tbaa !2447
  %678 = icmp eq i64 %665, 0
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %57, align 1, !tbaa !2448
  %680 = lshr i64 %665, 63
  %681 = trunc i64 %680 to i8
  store i8 %681, i8* %60, align 1, !tbaa !2449
  %682 = lshr i64 %664, 63
  %683 = xor i64 %680, %682
  %684 = add nuw nsw i64 %683, %680
  %685 = icmp eq i64 %684, 2
  %686 = zext i1 %685 to i8
  store i8 %686, i8* %66, align 1, !tbaa !2450
  %687 = add i64 %661, 12
  store i64 %687, i64* %PC, align 8
  store i64 %665, i64* %663, align 8
  %688 = load i64, i64* %PC, align 8
  %689 = add i64 %688, -201
  store i64 %689, i64* %PC, align 8, !tbaa !2428
  br label %block_4034b8
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404714__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404714:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = xor i64 %4, %3
  %8 = lshr i64 %7, 4
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13 = lshr i64 %4, 63
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15 = lshr i64 %3, 63
  %16 = xor i64 %13, %15
  %17 = add nuw nsw i64 %16, %15
  %18 = icmp eq i64 %17, 2
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %3, i64* %RSP, align 8, !tbaa !2428
  %21 = icmp ult i64 %3, 8
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1, !tbaa !2432
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #12
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %6, align 1, !tbaa !2446
  store i8 %10, i8* %11, align 1, !tbaa !2447
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %12, align 1, !tbaa !2448
  %31 = trunc i64 %15 to i8
  store i8 %31, i8* %14, align 1, !tbaa !2449
  store i8 %19, i8* %20, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400970_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400970:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 and (i64 ptrtoint (i64* @stdout to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %RSI, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = sub i64 %8, ptrtoint (i64* @stdout to i64)
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %17 = ashr i64 %10, 3
  %18 = lshr i64 %17, 63
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  %19 = add nsw i64 %18, %17
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %19, 1
  store i64 %22, i64* %RSI, align 8, !tbaa !2428
  store i8 %21, i8* %11, align 1, !tbaa !2453
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #12
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %12, align 1, !tbaa !2453
  store i8 0, i8* %13, align 1, !tbaa !2453
  %29 = icmp eq i64 %22, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %14, align 1, !tbaa !2453
  %31 = lshr i64 %22, 63
  %32 = trunc i64 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !2453
  store i8 0, i8* %16, align 1, !tbaa !2453
  %.v = select i1 %29, i64 50, i64 29
  %33 = add i64 %9, %.v
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  br i1 %29, label %block_4009a8, label %block_400993

block_400993:                                     ; preds = %block_400970
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2432
  store i8 1, i8* %12, align 1, !tbaa !2446
  store i8 1, i8* %14, align 1, !tbaa !2448
  store i8 0, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %13, align 1, !tbaa !2447
  %34 = add i64 %33, 21
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br label %block_4009a8

block_4009a8:                                     ; preds = %block_400993, %block_400970
  %35 = phi i64 [ %34, %block_400993 ], [ %33, %block_400970 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %RSP, align 8, !tbaa !2428
  %38 = add i64 %37, 8
  %39 = inttoptr i64 %37 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %RBP, align 8, !tbaa !2428
  store i64 %38, i64* %RSP, align 8, !tbaa !2428
  %41 = add i64 %35, 2
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %38 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %PC, align 8, !tbaa !2428
  %44 = add i64 %37, 16
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401db0_flow_cost(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_401db0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -16
  %12 = load i64, i64* %RDI, align 8
  %13 = add i64 %10, 7
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i64*
  store i64 %12, i64* %14, align 8
  %15 = load i64, i64* %RBP, align 8
  %16 = add i64 %15, -40
  %17 = load i64, i64* %PC, align 8
  %18 = add i64 %17, 8
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %16 to i64*
  store i64 0, i64* %19, align 8
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -48
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 8
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %21 to i64*
  store i64 0, i64* %24, align 8
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -8
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 4
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %26 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %RDI, align 8, !tbaa !2428
  %31 = add i64 %30, 576
  %32 = add i64 %27, 11
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %31 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %RDI, align 8, !tbaa !2428
  %35 = add i64 %25, -32
  %36 = add i64 %27, 15
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %35 to i64*
  store i64 %34, i64* %37, align 8
  %38 = load i64, i64* %RBP, align 8
  %39 = add i64 %38, -8
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 4
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %RDI, align 8, !tbaa !2428
  %44 = add i64 %43, 568
  %45 = add i64 %40, 11
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %44 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %38, -16
  %49 = add i64 %40, 15
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %48 to i64*
  store i64 %47, i64* %50, align 8
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_401de6

block_401efa:                                     ; preds = %block_401ed6, %block_401ee8
  %57 = phi i64 [ %277, %block_401ed6 ], [ %184, %block_401ee8 ]
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = load i64, i64* %416, align 8
  store i64 %59, i64* %RAX, align 8, !tbaa !2428
  %60 = add i64 %59, 8
  %61 = add i64 %57, 8
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %60 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RAX, align 8, !tbaa !2428
  %64 = add i64 %63, 96
  %65 = add i64 %57, 12
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i32*
  %67 = load i32, i32* %66, align 4
  store i8 0, i8* %51, align 1, !tbaa !2432
  %68 = and i32 %67, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #12
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  store i8 %72, i8* %52, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %73 = icmp eq i32 %67, 0
  %74 = zext i1 %73 to i8
  store i8 %74, i8* %54, align 1, !tbaa !2448
  %75 = lshr i32 %67, 31
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  %.v32 = select i1 %73, i64 18, i64 61
  %77 = add i64 %57, %.v32
  %78 = add i64 %77, 4
  store i64 %78, i64* %PC, align 8
  %79 = load i64, i64* %416, align 8
  store i64 %79, i64* %RAX, align 8, !tbaa !2428
  %80 = add i64 %77, 7
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %79 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %RAX, align 8, !tbaa !2428
  br i1 %73, label %block_401f0c, label %block_401f37

block_401df7:                                     ; preds = %block_401de6
  %83 = add i64 %220, 4
  store i64 %83, i64* %PC, align 8
  %84 = load i64, i64* %189, align 8
  store i64 %84, i64* %RAX, align 8, !tbaa !2428
  %85 = add i64 %84, 24
  %86 = add i64 %220, 8
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = add i32 %88, -2
  %90 = icmp ult i32 %88, 2
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %51, align 1, !tbaa !2432
  %92 = and i32 %89, 255
  %93 = tail call i32 @llvm.ctpop.i32(i32 %92) #12
  %94 = trunc i32 %93 to i8
  %95 = and i8 %94, 1
  %96 = xor i8 %95, 1
  store i8 %96, i8* %52, align 1, !tbaa !2446
  %97 = xor i32 %89, %88
  %98 = lshr i32 %97, 4
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  store i8 %100, i8* %53, align 1, !tbaa !2447
  %101 = icmp eq i32 %89, 0
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %54, align 1, !tbaa !2448
  %103 = lshr i32 %89, 31
  %104 = trunc i32 %103 to i8
  store i8 %104, i8* %55, align 1, !tbaa !2449
  %105 = lshr i32 %88, 31
  %106 = xor i32 %103, %105
  %107 = add nuw nsw i32 %106, %105
  %108 = icmp eq i32 %107, 2
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %56, align 1, !tbaa !2450
  %.v30 = select i1 %101, i64 14, i64 31
  %110 = add i64 %220, %.v30
  %111 = add i64 %110, 4
  store i64 %111, i64* %PC, align 8
  %112 = load i64, i64* %189, align 8
  store i64 %112, i64* %RAX, align 8, !tbaa !2428
  %113 = add i64 %112, 48
  %114 = add i64 %110, 12
  store i64 %114, i64* %PC, align 8
  %115 = inttoptr i64 %113 to i64*
  br i1 %101, label %block_401e05, label %block_401e16

block_401e73:                                     ; preds = %block_401e62
  %116 = add i64 %256, 4
  store i64 %116, i64* %PC, align 8
  %117 = load i64, i64* %225, align 8
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = add i64 %117, 80
  %119 = add i64 %256, 8
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %118 to i64*
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %RAX, align 8, !tbaa !2428
  %122 = add i64 %256, 12
  store i64 %122, i64* %PC, align 8
  %123 = load i64, i64* %225, align 8
  store i64 %123, i64* %RCX, align 8, !tbaa !2428
  %124 = add i64 %123, 48
  %125 = add i64 %256, 16
  store i64 %125, i64* %PC, align 8
  %126 = inttoptr i64 %124 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %RCX, align 8, !tbaa !2428
  %128 = add i64 %127, 48
  %129 = add i64 %256, 20
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i64*
  store i64 %121, i64* %130, align 8
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -24
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %132 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = add i64 %136, 104
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = icmp ugt i64 %136, -105
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %51, align 1, !tbaa !2432
  %140 = trunc i64 %137 to i32
  %141 = and i32 %140, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #12
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %52, align 1, !tbaa !2446
  %146 = xor i64 %137, %136
  %147 = lshr i64 %146, 4
  %148 = trunc i64 %147 to i8
  %149 = and i8 %148, 1
  store i8 %149, i8* %53, align 1, !tbaa !2447
  %150 = icmp eq i64 %137, 0
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %54, align 1, !tbaa !2448
  %152 = lshr i64 %137, 63
  %153 = trunc i64 %152 to i8
  store i8 %153, i8* %55, align 1, !tbaa !2449
  %154 = lshr i64 %136, 63
  %155 = xor i64 %152, %154
  %156 = add nuw nsw i64 %155, %152
  %157 = icmp eq i64 %156, 2
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %56, align 1, !tbaa !2450
  %159 = add i64 %133, 12
  store i64 %159, i64* %PC, align 8
  store i64 %137, i64* %135, align 8
  %160 = load i64, i64* %PC, align 8
  %161 = add i64 %160, -49
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  br label %block_401e62

block_401ee8:                                     ; preds = %block_401ed6
  %162 = add i64 %277, 4
  store i64 %162, i64* %PC, align 8
  %163 = load i64, i64* %416, align 8
  store i64 %163, i64* %RAX, align 8, !tbaa !2428
  %164 = add i64 %163, 16
  %165 = add i64 %277, 8
  store i64 %165, i64* %PC, align 8
  %166 = inttoptr i64 %164 to i64*
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %RAX, align 8, !tbaa !2428
  %168 = add i64 %167, 96
  %169 = add i64 %277, 12
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i32*
  %171 = load i32, i32* %170, align 4
  store i8 0, i8* %51, align 1, !tbaa !2432
  %172 = and i32 %171, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #12
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %52, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %177 = icmp eq i32 %171, 0
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %54, align 1, !tbaa !2448
  %179 = lshr i32 %171, 31
  %180 = trunc i32 %179 to i8
  store i8 %180, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  %181 = xor i1 %177, true
  %182 = icmp eq i8 %180, 0
  %183 = and i1 %182, %181
  %.v36 = select i1 %183, i64 99, i64 18
  %184 = add i64 %277, %.v36
  store i64 %184, i64* %PC, align 8, !tbaa !2428
  br i1 %183, label %block_401f4b, label %block_401efa

block_401de6:                                     ; preds = %block_401e22, %block_401db0
  %185 = phi i64 [ %630, %block_401e22 ], [ %.pre, %block_401db0 ]
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -16
  %188 = add i64 %185, 4
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %187 to i64*
  %190 = load i64, i64* %189, align 8
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = add i64 %186, -32
  %192 = add i64 %185, 8
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %191 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %RCX, align 8, !tbaa !2428
  %195 = sub i64 %190, %194
  %196 = icmp ult i64 %190, %194
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %51, align 1, !tbaa !2432
  %198 = trunc i64 %195 to i32
  %199 = and i32 %198, 255
  %200 = tail call i32 @llvm.ctpop.i32(i32 %199) #12
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  store i8 %203, i8* %52, align 1, !tbaa !2446
  %204 = xor i64 %190, %194
  %205 = xor i64 %204, %195
  %206 = lshr i64 %205, 4
  %207 = trunc i64 %206 to i8
  %208 = and i8 %207, 1
  store i8 %208, i8* %53, align 1, !tbaa !2447
  %209 = icmp eq i64 %195, 0
  %210 = zext i1 %209 to i8
  store i8 %210, i8* %54, align 1, !tbaa !2448
  %211 = lshr i64 %195, 63
  %212 = trunc i64 %211 to i8
  store i8 %212, i8* %55, align 1, !tbaa !2449
  %213 = lshr i64 %190, 63
  %214 = lshr i64 %194, 63
  %215 = xor i64 %213, %214
  %216 = xor i64 %211, %213
  %217 = add nuw nsw i64 %216, %215
  %218 = icmp eq i64 %217, 2
  %219 = zext i1 %218 to i8
  store i8 %219, i8* %56, align 1, !tbaa !2450
  %.v31 = select i1 %209, i64 82, i64 17
  %220 = add i64 %185, %.v31
  store i64 %220, i64* %PC, align 8, !tbaa !2428
  br i1 %209, label %block_401e38, label %block_401df7

block_401e62:                                     ; preds = %block_401e38, %block_401e73
  %221 = phi i64 [ %.pre25, %block_401e38 ], [ %161, %block_401e73 ]
  %222 = load i64, i64* %RBP, align 8
  %223 = add i64 %222, -24
  %224 = add i64 %221, 4
  store i64 %224, i64* %PC, align 8
  %225 = inttoptr i64 %223 to i64*
  %226 = load i64, i64* %225, align 8
  store i64 %226, i64* %RAX, align 8, !tbaa !2428
  %227 = add i64 %222, -32
  %228 = add i64 %221, 8
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %227 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %RCX, align 8, !tbaa !2428
  %231 = sub i64 %226, %230
  %232 = icmp ult i64 %226, %230
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %51, align 1, !tbaa !2432
  %234 = trunc i64 %231 to i32
  %235 = and i32 %234, 255
  %236 = tail call i32 @llvm.ctpop.i32(i32 %235) #12
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  %239 = xor i8 %238, 1
  store i8 %239, i8* %52, align 1, !tbaa !2446
  %240 = xor i64 %226, %230
  %241 = xor i64 %240, %231
  %242 = lshr i64 %241, 4
  %243 = trunc i64 %242 to i8
  %244 = and i8 %243, 1
  store i8 %244, i8* %53, align 1, !tbaa !2447
  %245 = icmp eq i64 %231, 0
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %54, align 1, !tbaa !2448
  %247 = lshr i64 %231, 63
  %248 = trunc i64 %247 to i8
  store i8 %248, i8* %55, align 1, !tbaa !2449
  %249 = lshr i64 %226, 63
  %250 = lshr i64 %230, 63
  %251 = xor i64 %249, %250
  %252 = xor i64 %247, %249
  %253 = add nuw nsw i64 %252, %251
  %254 = icmp eq i64 %253, 2
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %56, align 1, !tbaa !2450
  %.v33 = select i1 %245, i64 54, i64 17
  %256 = add i64 %221, %.v33
  store i64 %256, i64* %PC, align 8, !tbaa !2428
  br i1 %245, label %block_401e98, label %block_401e73

block_401ed6:                                     ; preds = %block_401ec7
  %257 = add i64 %327, 4
  store i64 %257, i64* %PC, align 8
  %258 = load i64, i64* %416, align 8
  store i64 %258, i64* %RAX, align 8, !tbaa !2428
  %259 = add i64 %258, 8
  %260 = add i64 %327, 8
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to i64*
  %262 = load i64, i64* %261, align 8
  store i64 %262, i64* %RAX, align 8, !tbaa !2428
  %263 = add i64 %262, 96
  %264 = add i64 %327, 12
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %263 to i32*
  %266 = load i32, i32* %265, align 4
  store i8 0, i8* %51, align 1, !tbaa !2432
  %267 = and i32 %266, 255
  %268 = tail call i32 @llvm.ctpop.i32(i32 %267) #12
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  store i8 %271, i8* %52, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %272 = icmp eq i32 %266, 0
  %273 = zext i1 %272 to i8
  store i8 %273, i8* %54, align 1, !tbaa !2448
  %274 = lshr i32 %266, 31
  %275 = trunc i32 %274 to i8
  store i8 %275, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  %276 = icmp ne i8 %275, 0
  %.v = select i1 %276, i64 6, i64 24
  %277 = add i64 %264, %.v
  store i64 %277, i64* %PC, align 8, !tbaa !2428
  br i1 %276, label %block_401ee8, label %block_401efa

block_401f50:                                     ; preds = %block_401ec7, %block_401f4b
  %278 = phi i64 [ %413, %block_401ec7 ], [ %.pre28, %block_401f4b ]
  %279 = phi i64 [ %327, %block_401ec7 ], [ %310, %block_401f4b ]
  %280 = add i64 %278, -16
  %281 = add i64 %279, 9
  store i64 %281, i64* %PC, align 8
  %282 = inttoptr i64 %280 to i64*
  %283 = load i64, i64* %282, align 8
  %284 = add i64 %283, 64
  store i64 %284, i64* %RAX, align 8, !tbaa !2428
  %285 = icmp ugt i64 %283, -65
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %51, align 1, !tbaa !2432
  %287 = trunc i64 %284 to i32
  %288 = and i32 %287, 255
  %289 = tail call i32 @llvm.ctpop.i32(i32 %288) #12
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  store i8 %292, i8* %52, align 1, !tbaa !2446
  %293 = xor i64 %284, %283
  %294 = lshr i64 %293, 4
  %295 = trunc i64 %294 to i8
  %296 = and i8 %295, 1
  store i8 %296, i8* %53, align 1, !tbaa !2447
  %297 = icmp eq i64 %284, 0
  %298 = zext i1 %297 to i8
  store i8 %298, i8* %54, align 1, !tbaa !2448
  %299 = lshr i64 %284, 63
  %300 = trunc i64 %299 to i8
  store i8 %300, i8* %55, align 1, !tbaa !2449
  %301 = lshr i64 %283, 63
  %302 = xor i64 %299, %301
  %303 = add nuw nsw i64 %302, %299
  %304 = icmp eq i64 %303, 2
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %56, align 1, !tbaa !2450
  %306 = add i64 %279, 17
  store i64 %306, i64* %PC, align 8
  store i64 %284, i64* %282, align 8
  %307 = load i64, i64* %PC, align 8
  %308 = add i64 %307, -171
  store i64 %308, i64* %PC, align 8, !tbaa !2428
  br label %block_401eb6

block_401f4b:                                     ; preds = %block_401f46, %block_401ee8
  %.pre28 = phi i64 [ %.pre28.pre, %block_401f46 ], [ %413, %block_401ee8 ]
  %309 = phi i64 [ %481, %block_401f46 ], [ %184, %block_401ee8 ]
  %310 = add i64 %309, 5
  store i64 %310, i64* %PC, align 8, !tbaa !2428
  br label %block_401f50

block_401ec7:                                     ; preds = %block_401eb6
  %311 = add i64 %447, 4
  store i64 %311, i64* %PC, align 8
  %312 = load i64, i64* %416, align 8
  store i64 %312, i64* %RAX, align 8, !tbaa !2428
  %313 = add i64 %312, 48
  %314 = add i64 %447, 9
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i64*
  %316 = load i64, i64* %315, align 8
  store i8 0, i8* %51, align 1, !tbaa !2432
  %317 = trunc i64 %316 to i32
  %318 = and i32 %317, 255
  %319 = tail call i32 @llvm.ctpop.i32(i32 %318) #12
  %320 = trunc i32 %319 to i8
  %321 = and i8 %320, 1
  %322 = xor i8 %321, 1
  store i8 %322, i8* %52, align 1, !tbaa !2446
  store i8 0, i8* %53, align 1, !tbaa !2447
  %323 = icmp eq i64 %316, 0
  %324 = zext i1 %323 to i8
  store i8 %324, i8* %54, align 1, !tbaa !2448
  %325 = lshr i64 %316, 63
  %326 = trunc i64 %325 to i8
  store i8 %326, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  %.v35 = select i1 %323, i64 137, i64 15
  %327 = add i64 %447, %.v35
  store i64 %327, i64* %PC, align 8, !tbaa !2428
  br i1 %323, label %block_401f50, label %block_401ed6

block_401e38:                                     ; preds = %block_401de6
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %329 = add i64 %186, -8
  %330 = add i64 %220, 4
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %329 to i64*
  %332 = load i64, i64* %331, align 8
  store i64 %332, i64* %RAX, align 8, !tbaa !2428
  %333 = add i64 %332, 560
  %334 = add i64 %220, 11
  store i64 %334, i64* %PC, align 8
  %335 = inttoptr i64 %333 to i64*
  %336 = load i64, i64* %335, align 8
  store i64 %336, i64* %RAX, align 8, !tbaa !2428
  %337 = add i64 %220, 15
  store i64 %337, i64* %PC, align 8
  store i64 %336, i64* %193, align 8
  %338 = load i64, i64* %RBP, align 8
  %339 = add i64 %338, -8
  %340 = load i64, i64* %PC, align 8
  %341 = add i64 %340, 4
  store i64 %341, i64* %PC, align 8
  %342 = inttoptr i64 %339 to i64*
  %343 = load i64, i64* %342, align 8
  store i64 %343, i64* %RAX, align 8, !tbaa !2428
  %344 = add i64 %343, 552
  %345 = add i64 %340, 11
  store i64 %345, i64* %PC, align 8
  %346 = inttoptr i64 %344 to i64*
  %347 = load i64, i64* %346, align 8
  store i64 %347, i64* %RAX, align 8, !tbaa !2428
  %348 = add i64 %338, -24
  %349 = add i64 %340, 15
  store i64 %349, i64* %PC, align 8
  %350 = inttoptr i64 %348 to i64*
  store i64 %347, i64* %350, align 8
  %351 = load i64, i64* %RBP, align 8
  %352 = add i64 %351, -24
  %353 = load i64, i64* %PC, align 8
  %354 = add i64 %353, 4
  store i64 %354, i64* %PC, align 8
  %355 = inttoptr i64 %352 to i64*
  %356 = load i64, i64* %355, align 8
  %357 = add i64 %356, 104
  store i64 %357, i64* %RAX, align 8, !tbaa !2428
  %358 = icmp ugt i64 %356, -105
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %51, align 1, !tbaa !2432
  %360 = trunc i64 %357 to i32
  %361 = and i32 %360, 255
  %362 = tail call i32 @llvm.ctpop.i32(i32 %361) #12
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  store i8 %365, i8* %52, align 1, !tbaa !2446
  %366 = xor i64 %357, %356
  %367 = lshr i64 %366, 4
  %368 = trunc i64 %367 to i8
  %369 = and i8 %368, 1
  store i8 %369, i8* %53, align 1, !tbaa !2447
  %370 = icmp eq i64 %357, 0
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %54, align 1, !tbaa !2448
  %372 = lshr i64 %357, 63
  %373 = trunc i64 %372 to i8
  store i8 %373, i8* %55, align 1, !tbaa !2449
  %374 = lshr i64 %356, 63
  %375 = xor i64 %372, %374
  %376 = add nuw nsw i64 %375, %372
  %377 = icmp eq i64 %376, 2
  %378 = zext i1 %377 to i8
  store i8 %378, i8* %56, align 1, !tbaa !2450
  %379 = add i64 %353, 12
  store i64 %379, i64* %PC, align 8
  store i64 %357, i64* %355, align 8
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_401e62

block_401f37:                                     ; preds = %block_401efa
  %380 = add i64 %413, -48
  %381 = add i64 %77, 11
  store i64 %381, i64* %PC, align 8
  %382 = inttoptr i64 %380 to i64*
  %383 = load i64, i64* %382, align 8
  %384 = add i64 %383, %82
  store i64 %384, i64* %RAX, align 8, !tbaa !2428
  %385 = icmp ult i64 %384, %82
  %386 = icmp ult i64 %384, %383
  %387 = or i1 %385, %386
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %51, align 1, !tbaa !2432
  %389 = trunc i64 %384 to i32
  %390 = and i32 %389, 255
  %391 = tail call i32 @llvm.ctpop.i32(i32 %390) #12
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  %394 = xor i8 %393, 1
  store i8 %394, i8* %52, align 1, !tbaa !2446
  %395 = xor i64 %383, %82
  %396 = xor i64 %395, %384
  %397 = lshr i64 %396, 4
  %398 = trunc i64 %397 to i8
  %399 = and i8 %398, 1
  store i8 %399, i8* %53, align 1, !tbaa !2447
  %400 = icmp eq i64 %384, 0
  %401 = zext i1 %400 to i8
  store i8 %401, i8* %54, align 1, !tbaa !2448
  %402 = lshr i64 %384, 63
  %403 = trunc i64 %402 to i8
  store i8 %403, i8* %55, align 1, !tbaa !2449
  %404 = lshr i64 %82, 63
  %405 = lshr i64 %383, 63
  %406 = xor i64 %402, %404
  %407 = xor i64 %402, %405
  %408 = add nuw nsw i64 %406, %407
  %409 = icmp eq i64 %408, 2
  %410 = zext i1 %409 to i8
  store i8 %410, i8* %56, align 1, !tbaa !2450
  %411 = add i64 %77, 15
  store i64 %411, i64* %PC, align 8
  store i64 %384, i64* %382, align 8
  %.pre27 = load i64, i64* %PC, align 8
  br label %block_401f46

block_401eb6:                                     ; preds = %block_401e98, %block_401f50
  %412 = phi i64 [ %.pre26, %block_401e98 ], [ %308, %block_401f50 ]
  %413 = load i64, i64* %RBP, align 8
  %414 = add i64 %413, -16
  %415 = add i64 %412, 4
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i64*
  %417 = load i64, i64* %416, align 8
  store i64 %417, i64* %RAX, align 8, !tbaa !2428
  %418 = add i64 %413, -32
  %419 = add i64 %412, 8
  store i64 %419, i64* %PC, align 8
  %420 = inttoptr i64 %418 to i64*
  %421 = load i64, i64* %420, align 8
  store i64 %421, i64* %RCX, align 8, !tbaa !2428
  %422 = sub i64 %417, %421
  %423 = icmp ult i64 %417, %421
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %51, align 1, !tbaa !2432
  %425 = trunc i64 %422 to i32
  %426 = and i32 %425, 255
  %427 = tail call i32 @llvm.ctpop.i32(i32 %426) #12
  %428 = trunc i32 %427 to i8
  %429 = and i8 %428, 1
  %430 = xor i8 %429, 1
  store i8 %430, i8* %52, align 1, !tbaa !2446
  %431 = xor i64 %417, %421
  %432 = xor i64 %431, %422
  %433 = lshr i64 %432, 4
  %434 = trunc i64 %433 to i8
  %435 = and i8 %434, 1
  store i8 %435, i8* %53, align 1, !tbaa !2447
  %436 = icmp eq i64 %422, 0
  %437 = zext i1 %436 to i8
  store i8 %437, i8* %54, align 1, !tbaa !2448
  %438 = lshr i64 %422, 63
  %439 = trunc i64 %438 to i8
  store i8 %439, i8* %55, align 1, !tbaa !2449
  %440 = lshr i64 %417, 63
  %441 = lshr i64 %421, 63
  %442 = xor i64 %440, %441
  %443 = xor i64 %438, %440
  %444 = add nuw nsw i64 %443, %442
  %445 = icmp eq i64 %444, 2
  %446 = zext i1 %445 to i8
  store i8 %446, i8* %56, align 1, !tbaa !2450
  %.v34 = select i1 %436, i64 176, i64 17
  %447 = add i64 %412, %.v34
  store i64 %447, i64* %PC, align 8, !tbaa !2428
  br i1 %436, label %block_401f66, label %block_401ec7

block_401f66:                                     ; preds = %block_401eb6
  %448 = add i64 %413, -40
  %449 = add i64 %447, 6
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i64*
  %451 = load i64, i64* %450, align 8
  %452 = sitofp i64 %451 to double
  %453 = bitcast [32 x %union.VectorReg]* %3 to double*
  store double %452, double* %453, align 1, !tbaa !2451
  %454 = add i64 %413, -8
  %455 = add i64 %447, 10
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %454 to i64*
  %457 = load i64, i64* %456, align 8
  store i64 %457, i64* %RAX, align 8, !tbaa !2428
  %458 = add i64 %457, 528
  %459 = add i64 %447, 19
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %458 to i64*
  %461 = load i64, i64* %460, align 8
  %462 = sitofp i64 %461 to double
  %463 = bitcast %union.VectorReg* %328 to double*
  store double %462, double* %463, align 1, !tbaa !2451
  %464 = fmul double %462, %452
  store double %464, double* %453, align 1, !tbaa !2451
  %465 = add i64 %413, -48
  %466 = add i64 %447, 29
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %465 to i64*
  %468 = load i64, i64* %467, align 8
  %469 = sitofp i64 %468 to double
  store double %469, double* %463, align 1, !tbaa !2451
  %470 = fadd double %469, %464
  store double %470, double* %453, align 1, !tbaa !2451
  %471 = add i64 %447, 34
  store i64 %471, i64* %PC, align 8
  %472 = load i64, i64* %6, align 8, !tbaa !2428
  %473 = add i64 %472, 8
  %474 = inttoptr i64 %472 to i64*
  %475 = load i64, i64* %474, align 8
  store i64 %475, i64* %RBP, align 8, !tbaa !2428
  store i64 %473, i64* %6, align 8, !tbaa !2428
  %476 = add i64 %447, 35
  store i64 %476, i64* %PC, align 8
  %477 = inttoptr i64 %473 to i64*
  %478 = load i64, i64* %477, align 8
  store i64 %478, i64* %PC, align 8, !tbaa !2428
  %479 = add i64 %472, 16
  store i64 %479, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401e16:                                     ; preds = %block_401df7
  store i64 0, i64* %115, align 8
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_401e22

block_401f46:                                     ; preds = %block_401f0c, %block_401f37
  %480 = phi i64 [ %599, %block_401f0c ], [ %.pre27, %block_401f37 ]
  %481 = add i64 %480, 5
  store i64 %481, i64* %PC, align 8, !tbaa !2428
  %.pre28.pre = load i64, i64* %RBP, align 8
  br label %block_401f4b

block_401e98:                                     ; preds = %block_401e62
  %482 = add i64 %222, -8
  %483 = add i64 %256, 4
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i64*
  %485 = load i64, i64* %484, align 8
  store i64 %485, i64* %RAX, align 8, !tbaa !2428
  %486 = add i64 %485, 576
  %487 = add i64 %256, 11
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i64*
  %489 = load i64, i64* %488, align 8
  store i64 %489, i64* %RAX, align 8, !tbaa !2428
  %490 = add i64 %256, 15
  store i64 %490, i64* %PC, align 8
  store i64 %489, i64* %229, align 8
  %491 = load i64, i64* %RBP, align 8
  %492 = add i64 %491, -8
  %493 = load i64, i64* %PC, align 8
  %494 = add i64 %493, 4
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %492 to i64*
  %496 = load i64, i64* %495, align 8
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %497 = add i64 %496, 568
  %498 = add i64 %493, 11
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i64*
  %500 = load i64, i64* %499, align 8
  store i64 %500, i64* %RAX, align 8, !tbaa !2428
  %501 = add i64 %491, -16
  %502 = add i64 %493, 15
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %501 to i64*
  store i64 %500, i64* %503, align 8
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_401eb6

block_401f0c:                                     ; preds = %block_401efa
  %504 = add i64 %413, -8
  %505 = add i64 %77, 11
  store i64 %505, i64* %PC, align 8
  %506 = inttoptr i64 %504 to i64*
  %507 = load i64, i64* %506, align 8
  store i64 %507, i64* %RCX, align 8, !tbaa !2428
  %508 = add i64 %507, 528
  %509 = add i64 %77, 18
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %508 to i64*
  %511 = load i64, i64* %510, align 8
  %512 = sub i64 %82, %511
  store i64 %512, i64* %RAX, align 8, !tbaa !2428
  %513 = icmp ult i64 %82, %511
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %51, align 1, !tbaa !2432
  %515 = trunc i64 %512 to i32
  %516 = and i32 %515, 255
  %517 = tail call i32 @llvm.ctpop.i32(i32 %516) #12
  %518 = trunc i32 %517 to i8
  %519 = and i8 %518, 1
  %520 = xor i8 %519, 1
  store i8 %520, i8* %52, align 1, !tbaa !2446
  %521 = xor i64 %511, %82
  %522 = xor i64 %521, %512
  %523 = lshr i64 %522, 4
  %524 = trunc i64 %523 to i8
  %525 = and i8 %524, 1
  store i8 %525, i8* %53, align 1, !tbaa !2447
  %526 = icmp eq i64 %512, 0
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %54, align 1, !tbaa !2448
  %528 = lshr i64 %512, 63
  %529 = trunc i64 %528 to i8
  store i8 %529, i8* %55, align 1, !tbaa !2449
  %530 = lshr i64 %82, 63
  %531 = lshr i64 %511, 63
  %532 = xor i64 %531, %530
  %533 = xor i64 %528, %530
  %534 = add nuw nsw i64 %533, %532
  %535 = icmp eq i64 %534, 2
  %536 = zext i1 %535 to i8
  store i8 %536, i8* %56, align 1, !tbaa !2450
  %537 = add i64 %413, -48
  %538 = add i64 %77, 22
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %537 to i64*
  %540 = load i64, i64* %539, align 8
  %541 = add i64 %540, %512
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = icmp ult i64 %541, %512
  %543 = icmp ult i64 %541, %540
  %544 = or i1 %542, %543
  %545 = zext i1 %544 to i8
  store i8 %545, i8* %51, align 1, !tbaa !2432
  %546 = trunc i64 %541 to i32
  %547 = and i32 %546, 255
  %548 = tail call i32 @llvm.ctpop.i32(i32 %547) #12
  %549 = trunc i32 %548 to i8
  %550 = and i8 %549, 1
  %551 = xor i8 %550, 1
  store i8 %551, i8* %52, align 1, !tbaa !2446
  %552 = xor i64 %540, %512
  %553 = xor i64 %552, %541
  %554 = lshr i64 %553, 4
  %555 = trunc i64 %554 to i8
  %556 = and i8 %555, 1
  store i8 %556, i8* %53, align 1, !tbaa !2447
  %557 = icmp eq i64 %541, 0
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %54, align 1, !tbaa !2448
  %559 = lshr i64 %541, 63
  %560 = trunc i64 %559 to i8
  store i8 %560, i8* %55, align 1, !tbaa !2449
  %561 = lshr i64 %540, 63
  %562 = xor i64 %559, %528
  %563 = xor i64 %559, %561
  %564 = add nuw nsw i64 %562, %563
  %565 = icmp eq i64 %564, 2
  %566 = zext i1 %565 to i8
  store i8 %566, i8* %56, align 1, !tbaa !2450
  %567 = add i64 %77, 26
  store i64 %567, i64* %PC, align 8
  store i64 %541, i64* %539, align 8
  %568 = load i64, i64* %RBP, align 8
  %569 = add i64 %568, -40
  %570 = load i64, i64* %PC, align 8
  %571 = add i64 %570, 4
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %569 to i64*
  %573 = load i64, i64* %572, align 8
  %574 = add i64 %573, 1
  store i64 %574, i64* %RAX, align 8, !tbaa !2428
  %575 = icmp eq i64 %573, -1
  %576 = icmp eq i64 %574, 0
  %577 = or i1 %575, %576
  %578 = zext i1 %577 to i8
  store i8 %578, i8* %51, align 1, !tbaa !2432
  %579 = trunc i64 %574 to i32
  %580 = and i32 %579, 255
  %581 = tail call i32 @llvm.ctpop.i32(i32 %580) #12
  %582 = trunc i32 %581 to i8
  %583 = and i8 %582, 1
  %584 = xor i8 %583, 1
  store i8 %584, i8* %52, align 1, !tbaa !2446
  %585 = xor i64 %574, %573
  %586 = lshr i64 %585, 4
  %587 = trunc i64 %586 to i8
  %588 = and i8 %587, 1
  store i8 %588, i8* %53, align 1, !tbaa !2447
  %589 = zext i1 %576 to i8
  store i8 %589, i8* %54, align 1, !tbaa !2448
  %590 = lshr i64 %574, 63
  %591 = trunc i64 %590 to i8
  store i8 %591, i8* %55, align 1, !tbaa !2449
  %592 = lshr i64 %573, 63
  %593 = xor i64 %590, %592
  %594 = add nuw nsw i64 %593, %590
  %595 = icmp eq i64 %594, 2
  %596 = zext i1 %595 to i8
  store i8 %596, i8* %56, align 1, !tbaa !2450
  %597 = add i64 %570, 12
  store i64 %597, i64* %PC, align 8
  store i64 %574, i64* %572, align 8
  %598 = load i64, i64* %PC, align 8
  %599 = add i64 %598, 20
  store i64 %599, i64* %PC, align 8, !tbaa !2428
  br label %block_401f46

block_401e22:                                     ; preds = %block_401e05, %block_401e16
  %600 = phi i64 [ %632, %block_401e05 ], [ %.pre24, %block_401e16 ]
  %601 = load i64, i64* %RBP, align 8
  %602 = add i64 %601, -16
  %603 = add i64 %600, 9
  store i64 %603, i64* %PC, align 8
  %604 = inttoptr i64 %602 to i64*
  %605 = load i64, i64* %604, align 8
  %606 = add i64 %605, 64
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = icmp ugt i64 %605, -65
  %608 = zext i1 %607 to i8
  store i8 %608, i8* %51, align 1, !tbaa !2432
  %609 = trunc i64 %606 to i32
  %610 = and i32 %609, 255
  %611 = tail call i32 @llvm.ctpop.i32(i32 %610) #12
  %612 = trunc i32 %611 to i8
  %613 = and i8 %612, 1
  %614 = xor i8 %613, 1
  store i8 %614, i8* %52, align 1, !tbaa !2446
  %615 = xor i64 %606, %605
  %616 = lshr i64 %615, 4
  %617 = trunc i64 %616 to i8
  %618 = and i8 %617, 1
  store i8 %618, i8* %53, align 1, !tbaa !2447
  %619 = icmp eq i64 %606, 0
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %54, align 1, !tbaa !2448
  %621 = lshr i64 %606, 63
  %622 = trunc i64 %621 to i8
  store i8 %622, i8* %55, align 1, !tbaa !2449
  %623 = lshr i64 %605, 63
  %624 = xor i64 %621, %623
  %625 = add nuw nsw i64 %624, %621
  %626 = icmp eq i64 %625, 2
  %627 = zext i1 %626 to i8
  store i8 %627, i8* %56, align 1, !tbaa !2450
  %628 = add i64 %600, 17
  store i64 %628, i64* %PC, align 8
  store i64 %606, i64* %604, align 8
  %629 = load i64, i64* %PC, align 8
  %630 = add i64 %629, -77
  store i64 %630, i64* %PC, align 8, !tbaa !2428
  br label %block_401de6

block_401e05:                                     ; preds = %block_401df7
  store i64 1, i64* %115, align 8
  %631 = load i64, i64* %PC, align 8
  %632 = add i64 %631, 17
  store i64 %632, i64* %PC, align 8, !tbaa !2428
  br label %block_401e22
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402170_primal_feasible(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #6 {
block_402170:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %6, -104
  store i64 %10, i64* %RSP, align 8, !tbaa !2428
  %11 = icmp ult i64 %7, 96
  %12 = zext i1 %11 to i8
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12, i8* %13, align 1, !tbaa !2432
  %14 = trunc i64 %10 to i32
  %15 = and i32 %14, 255
  %16 = tail call i32 @llvm.ctpop.i32(i32 %15) #12
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  %19 = xor i8 %18, 1
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %19, i8* %20, align 1, !tbaa !2446
  %21 = xor i64 %7, %10
  %22 = lshr i64 %21, 4
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = icmp eq i64 %10, 0
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = lshr i64 %10, 63
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %7, 63
  %33 = xor i64 %29, %32
  %34 = add nuw nsw i64 %33, %32
  %35 = icmp eq i64 %34, 2
  %36 = zext i1 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = add i64 %6, -24
  %39 = load i64, i64* %RDI, align 8
  %40 = add i64 %9, 11
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i64*
  store i64 %39, i64* %41, align 8
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -16
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %RDI, align 8, !tbaa !2428
  %48 = add i64 %47, 584
  %49 = add i64 %44, 11
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %48 to i64*
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %RDI, align 8, !tbaa !2428
  %52 = add i64 %42, -40
  %53 = add i64 %44, 15
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %52 to i64*
  store i64 %51, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -16
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 4
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %56 to i64*
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %RDI, align 8, !tbaa !2428
  %61 = add i64 %60, 592
  %62 = add i64 %57, 11
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %61 to i64*
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %RDI, align 8, !tbaa !2428
  %65 = add i64 %55, -48
  %66 = add i64 %57, 15
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %67, align 8
  %68 = load i64, i64* %RBP, align 8
  %69 = add i64 %68, -16
  %70 = load i64, i64* %PC, align 8
  %71 = add i64 %70, 4
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %69 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %RDI, align 8, !tbaa !2428
  %74 = add i64 %73, 552
  %75 = add i64 %70, 11
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %RDI, align 8, !tbaa !2428
  %78 = add i64 %68, -32
  %79 = add i64 %70, 15
  store i64 %79, i64* %PC, align 8
  %80 = inttoptr i64 %78 to i64*
  store i64 %77, i64* %80, align 8
  %81 = load i64, i64* %RBP, align 8
  %82 = add i64 %81, -16
  %83 = load i64, i64* %PC, align 8
  %84 = add i64 %83, 4
  store i64 %84, i64* %PC, align 8
  %85 = inttoptr i64 %82 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %RDI, align 8, !tbaa !2428
  %87 = add i64 %86, 560
  %88 = add i64 %83, 11
  store i64 %88, i64* %PC, align 8
  %89 = inttoptr i64 %87 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %RDI, align 8, !tbaa !2428
  %91 = add i64 %81, -24
  %92 = add i64 %83, 15
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %91 to i64*
  store i64 %90, i64* %93, align 8
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -32
  %96 = load i64, i64* %PC, align 8
  %97 = add i64 %96, 4
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %95 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = add i64 %99, 104
  store i64 %100, i64* %RDI, align 8, !tbaa !2428
  %101 = icmp ugt i64 %99, -105
  %102 = zext i1 %101 to i8
  store i8 %102, i8* %13, align 1, !tbaa !2432
  %103 = trunc i64 %100 to i32
  %104 = and i32 %103, 255
  %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #12
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  store i8 %108, i8* %20, align 1, !tbaa !2446
  %109 = xor i64 %100, %99
  %110 = lshr i64 %109, 4
  %111 = trunc i64 %110 to i8
  %112 = and i8 %111, 1
  store i8 %112, i8* %25, align 1, !tbaa !2447
  %113 = icmp eq i64 %100, 0
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %28, align 1, !tbaa !2448
  %115 = lshr i64 %100, 63
  %116 = trunc i64 %115 to i8
  store i8 %116, i8* %31, align 1, !tbaa !2449
  %117 = lshr i64 %99, 63
  %118 = xor i64 %115, %117
  %119 = add nuw nsw i64 %118, %115
  %120 = icmp eq i64 %119, 2
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %37, align 1, !tbaa !2450
  %122 = add i64 %96, 12
  store i64 %122, i64* %PC, align 8
  store i64 %100, i64* %98, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_4021c4

block_4022fc:                                     ; preds = %block_40222d, %block_402242, %block_402296
  %123 = phi i64 [ %155, %block_402296 ], [ %.pre22, %block_402242 ], [ %326, %block_40222d ]
  %124 = phi i64 [ %217, %block_402296 ], [ %.pre21, %block_402242 ], [ %367, %block_40222d ]
  %.sink5 = phi i64 [ 5, %block_402296 ], [ 135, %block_402242 ], [ 135, %block_40222d ]
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.6, %block_402296 ], [ %488, %block_402242 ], [ %MEMORY.6, %block_40222d ]
  %125 = add i64 %124, %.sink5
  %126 = add i64 %123, -32
  %127 = add i64 %125, 9
  store i64 %127, i64* %PC, align 8
  %128 = inttoptr i64 %126 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = add i64 %129, 104
  store i64 %130, i64* %RAX, align 8, !tbaa !2428
  %131 = icmp ugt i64 %129, -105
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %13, align 1, !tbaa !2432
  %133 = trunc i64 %130 to i32
  %134 = and i32 %133, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #12
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %20, align 1, !tbaa !2446
  %139 = xor i64 %130, %129
  %140 = lshr i64 %139, 4
  %141 = trunc i64 %140 to i8
  %142 = and i8 %141, 1
  store i8 %142, i8* %25, align 1, !tbaa !2447
  %143 = icmp eq i64 %130, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %28, align 1, !tbaa !2448
  %145 = lshr i64 %130, 63
  %146 = trunc i64 %145 to i8
  store i8 %146, i8* %31, align 1, !tbaa !2449
  %147 = lshr i64 %129, 63
  %148 = xor i64 %145, %147
  %149 = add nuw nsw i64 %148, %145
  %150 = icmp eq i64 %149, 2
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %37, align 1, !tbaa !2450
  %152 = add i64 %125, 17
  store i64 %152, i64* %PC, align 8
  store i64 %130, i64* %128, align 8
  %153 = load i64, i64* %PC, align 8
  %154 = add i64 %153, -329
  store i64 %154, i64* %PC, align 8, !tbaa !2428
  br label %block_4021c4

block_402296:                                     ; preds = %block_40227a
  %155 = load i64, i64* %RBP, align 8
  %156 = add i64 %155, -64
  %157 = add i64 %266, 4
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = add i64 %159, -1
  store i64 %160, i64* %RAX, align 8, !tbaa !2428
  %161 = icmp eq i64 %159, 0
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %13, align 1, !tbaa !2432
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = tail call i32 @llvm.ctpop.i32(i32 %164) #12
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %20, align 1, !tbaa !2446
  %169 = xor i64 %160, %159
  %170 = lshr i64 %169, 4
  %171 = trunc i64 %170 to i8
  %172 = and i8 %171, 1
  store i8 %172, i8* %25, align 1, !tbaa !2447
  %173 = icmp eq i64 %160, 0
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %28, align 1, !tbaa !2448
  %175 = lshr i64 %160, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %31, align 1, !tbaa !2449
  %177 = lshr i64 %159, 63
  %178 = xor i64 %175, %177
  %179 = add nuw nsw i64 %178, %177
  %180 = icmp eq i64 %179, 2
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %37, align 1, !tbaa !2450
  %182 = add i64 %155, -16
  %183 = add i64 %266, 12
  store i64 %183, i64* %PC, align 8
  %184 = inttoptr i64 %182 to i64*
  %185 = load i64, i64* %184, align 8
  store i64 %185, i64* %RCX, align 8, !tbaa !2428
  %186 = add i64 %185, 512
  %187 = add i64 %266, 19
  store i64 %187, i64* %PC, align 8
  %188 = inttoptr i64 %186 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = sub i64 %160, %189
  %191 = icmp ult i64 %160, %189
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %13, align 1, !tbaa !2432
  %193 = trunc i64 %190 to i32
  %194 = and i32 %193, 255
  %195 = tail call i32 @llvm.ctpop.i32(i32 %194) #12
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  %198 = xor i8 %197, 1
  store i8 %198, i8* %20, align 1, !tbaa !2446
  %199 = xor i64 %189, %160
  %200 = xor i64 %199, %190
  %201 = lshr i64 %200, 4
  %202 = trunc i64 %201 to i8
  %203 = and i8 %202, 1
  store i8 %203, i8* %25, align 1, !tbaa !2447
  %204 = icmp eq i64 %190, 0
  %205 = zext i1 %204 to i8
  store i8 %205, i8* %28, align 1, !tbaa !2448
  %206 = lshr i64 %190, 63
  %207 = trunc i64 %206 to i8
  store i8 %207, i8* %31, align 1, !tbaa !2449
  %208 = lshr i64 %189, 63
  %209 = xor i64 %208, %175
  %210 = xor i64 %206, %175
  %211 = add nuw nsw i64 %210, %209
  %212 = icmp eq i64 %211, 2
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %37, align 1, !tbaa !2450
  %214 = icmp ne i8 %207, 0
  %215 = xor i1 %214, %212
  %216 = or i1 %204, %215
  %.v28 = select i1 %216, i64 97, i64 25
  %217 = add i64 %266, %.v28
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  br i1 %216, label %block_4022fc, label %block_4022af

block_402214:                                     ; preds = %block_402209
  %218 = add i64 %456, 4
  store i64 %218, i64* %PC, align 8
  %219 = load i64, i64* %443, align 8
  store i64 %219, i64* %RAX, align 8, !tbaa !2428
  %220 = add i64 %549, -72
  %221 = add i64 %456, 8
  store i64 %221, i64* %PC, align 8
  %222 = inttoptr i64 %220 to i64*
  store i64 %219, i64* %222, align 8
  %223 = load i64, i64* %PC, align 8
  %224 = add i64 %223, 17
  store i64 %224, i64* %PC, align 8, !tbaa !2428
  br label %block_40222d

block_40227a:                                     ; preds = %block_4021fb, %block_4021d5
  %225 = phi i64 [ %584, %block_4021d5 ], [ %526, %block_4021fb ]
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %226 = add i64 %549, -64
  %227 = add i64 %225, 8
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i64*
  %229 = load i64, i64* %228, align 8
  store i64 %229, i64* %RDX, align 8, !tbaa !2428
  %230 = add i64 %549, -16
  %231 = add i64 %225, 12
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %230 to i64*
  %233 = load i64, i64* %232, align 8
  store i64 %233, i64* %RSI, align 8, !tbaa !2428
  %234 = add i64 %233, 512
  %235 = add i64 %225, 19
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = sub i64 0, %237
  store i64 %238, i64* %RCX, align 8, !tbaa !2428
  %239 = lshr i64 %238, 63
  %240 = add i64 %229, %237
  %241 = icmp ult i64 %229, %238
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %13, align 1, !tbaa !2432
  %243 = trunc i64 %240 to i32
  %244 = and i32 %243, 255
  %245 = tail call i32 @llvm.ctpop.i32(i32 %244) #12
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = xor i8 %247, 1
  store i8 %248, i8* %20, align 1, !tbaa !2446
  %249 = xor i64 %229, %238
  %250 = xor i64 %249, %240
  %251 = lshr i64 %250, 4
  %252 = trunc i64 %251 to i8
  %253 = and i8 %252, 1
  store i8 %253, i8* %25, align 1, !tbaa !2447
  %254 = icmp eq i64 %240, 0
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %28, align 1, !tbaa !2448
  %256 = lshr i64 %240, 63
  %257 = trunc i64 %256 to i8
  store i8 %257, i8* %31, align 1, !tbaa !2449
  %258 = lshr i64 %229, 63
  %259 = xor i64 %239, %258
  %260 = xor i64 %256, %258
  %261 = add nuw nsw i64 %260, %259
  %262 = icmp eq i64 %261, 2
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %37, align 1, !tbaa !2450
  %264 = icmp ne i8 %257, 0
  %265 = xor i1 %264, %262
  %.v27 = select i1 %265, i64 53, i64 28
  %266 = add i64 %225, %.v27
  store i64 %266, i64* %PC, align 8, !tbaa !2428
  br i1 %265, label %block_4022af, label %block_402296

block_402312:                                     ; preds = %block_4021c4
  %267 = add i64 %406, -16
  %268 = add i64 %440, 4
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %267 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = add i64 %270, 488
  %272 = add i64 %440, 15
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i64*
  store i64 1, i64* %273, align 8
  %274 = load i64, i64* %RBP, align 8
  %275 = add i64 %274, -8
  %276 = load i64, i64* %PC, align 8
  %277 = add i64 %276, 8
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %275 to i64*
  store i64 0, i64* %278, align 8
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_402329

block_4022af:                                     ; preds = %block_40227a, %block_402296
  %279 = phi i64 [ %266, %block_40227a ], [ %217, %block_402296 ]
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 506), i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %280 = add i64 %279, -6751
  %281 = add i64 %279, 17
  %282 = load i64, i64* %RSP, align 8, !tbaa !2428
  %283 = add i64 %282, -8
  %284 = inttoptr i64 %283 to i64*
  store i64 %281, i64* %284, align 8
  store i64 %283, i64* %RSP, align 8, !tbaa !2428
  store i64 %280, i64* %PC, align 8, !tbaa !2428
  %285 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.6)
  %286 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 580), i64* %RDI, align 8, !tbaa !2428
  %287 = load i64, i64* %RBP, align 8
  %288 = add i64 %287, -64
  %289 = add i64 %286, 14
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %288 to i64*
  %291 = load i64, i64* %290, align 8
  store i64 %291, i64* %RSI, align 8, !tbaa !2428
  %292 = add i64 %287, -84
  %293 = load i32, i32* %EAX, align 4
  %294 = add i64 %286, 17
  store i64 %294, i64* %PC, align 8
  %295 = inttoptr i64 %292 to i32*
  store i32 %293, i32* %295, align 4
  %296 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %297 = add i64 %296, -6785
  %298 = add i64 %296, 7
  %299 = load i64, i64* %RSP, align 8, !tbaa !2428
  %300 = add i64 %299, -8
  %301 = inttoptr i64 %300 to i64*
  store i64 %298, i64* %301, align 8
  store i64 %300, i64* %RSP, align 8, !tbaa !2428
  store i64 %297, i64* %PC, align 8, !tbaa !2428
  %302 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %285)
  %303 = load i64, i64* %RBP, align 8
  %304 = add i64 %303, -16
  %305 = load i64, i64* %PC, align 8
  %306 = add i64 %305, 4
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %304 to i64*
  %308 = load i64, i64* %307, align 8
  store i64 %308, i64* %RSI, align 8, !tbaa !2428
  %309 = add i64 %308, 488
  %310 = add i64 %305, 15
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %309 to i64*
  store i64 0, i64* %311, align 8
  %312 = load i64, i64* %RBP, align 8
  %313 = add i64 %312, -8
  %314 = load i64, i64* %PC, align 8
  %315 = add i64 %314, 8
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %313 to i64*
  store i64 1, i64* %316, align 8
  %317 = load i64, i64* %RBP, align 8
  %318 = add i64 %317, -88
  %319 = load i32, i32* %EAX, align 4
  %320 = load i64, i64* %PC, align 8
  %321 = add i64 %320, 3
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %318 to i32*
  store i32 %319, i32* %322, align 4
  %323 = load i64, i64* %PC, align 8
  %324 = add i64 %323, 55
  store i64 %324, i64* %PC, align 8, !tbaa !2428
  br label %block_402329

block_40222d:                                     ; preds = %block_402221, %block_402214
  %325 = phi i64 [ %.pre20, %block_402221 ], [ %224, %block_402214 ]
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -72
  %328 = add i64 %325, 4
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i64*
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %RAX, align 8, !tbaa !2428
  %331 = add i64 %326, -16
  %332 = add i64 %325, 8
  store i64 %332, i64* %PC, align 8
  %333 = inttoptr i64 %331 to i64*
  %334 = load i64, i64* %333, align 8
  store i64 %334, i64* %RCX, align 8, !tbaa !2428
  %335 = add i64 %334, 512
  %336 = add i64 %325, 15
  store i64 %336, i64* %PC, align 8
  %337 = inttoptr i64 %335 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = sub i64 %330, %338
  %340 = icmp ult i64 %330, %338
  %341 = zext i1 %340 to i8
  store i8 %341, i8* %13, align 1, !tbaa !2432
  %342 = trunc i64 %339 to i32
  %343 = and i32 %342, 255
  %344 = tail call i32 @llvm.ctpop.i32(i32 %343) #12
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  %347 = xor i8 %346, 1
  store i8 %347, i8* %20, align 1, !tbaa !2446
  %348 = xor i64 %338, %330
  %349 = xor i64 %348, %339
  %350 = lshr i64 %349, 4
  %351 = trunc i64 %350 to i8
  %352 = and i8 %351, 1
  store i8 %352, i8* %25, align 1, !tbaa !2447
  %353 = icmp eq i64 %339, 0
  %354 = zext i1 %353 to i8
  store i8 %354, i8* %28, align 1, !tbaa !2448
  %355 = lshr i64 %339, 63
  %356 = trunc i64 %355 to i8
  store i8 %356, i8* %31, align 1, !tbaa !2449
  %357 = lshr i64 %330, 63
  %358 = lshr i64 %338, 63
  %359 = xor i64 %358, %357
  %360 = xor i64 %355, %357
  %361 = add nuw nsw i64 %360, %359
  %362 = icmp eq i64 %361, 2
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %37, align 1, !tbaa !2450
  %364 = icmp ne i8 %356, 0
  %365 = xor i1 %364, %362
  %366 = or i1 %353, %365
  %.v29 = select i1 %366, i64 72, i64 21
  %367 = add i64 %325, %.v29
  store i64 %367, i64* %PC, align 8, !tbaa !2428
  br i1 %366, label %block_4022fc, label %block_402242

block_402329:                                     ; preds = %block_4022af, %block_402312
  %368 = phi i64 [ %.pre23, %block_402312 ], [ %324, %block_4022af ]
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.6, %block_402312 ], [ %302, %block_4022af ]
  %369 = load i64, i64* %RBP, align 8
  %370 = add i64 %369, -8
  %371 = add i64 %368, 4
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %370 to i64*
  %373 = load i64, i64* %372, align 8
  store i64 %373, i64* %RAX, align 8, !tbaa !2428
  %374 = load i64, i64* %RSP, align 8
  %375 = add i64 %374, 96
  store i64 %375, i64* %RSP, align 8, !tbaa !2428
  %376 = icmp ugt i64 %374, -97
  %377 = zext i1 %376 to i8
  store i8 %377, i8* %13, align 1, !tbaa !2432
  %378 = trunc i64 %375 to i32
  %379 = and i32 %378, 255
  %380 = tail call i32 @llvm.ctpop.i32(i32 %379) #12
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  %383 = xor i8 %382, 1
  store i8 %383, i8* %20, align 1, !tbaa !2446
  %384 = xor i64 %375, %374
  %385 = lshr i64 %384, 4
  %386 = trunc i64 %385 to i8
  %387 = and i8 %386, 1
  store i8 %387, i8* %25, align 1, !tbaa !2447
  %388 = icmp eq i64 %375, 0
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %28, align 1, !tbaa !2448
  %390 = lshr i64 %375, 63
  %391 = trunc i64 %390 to i8
  store i8 %391, i8* %31, align 1, !tbaa !2449
  %392 = lshr i64 %374, 63
  %393 = xor i64 %390, %392
  %394 = add nuw nsw i64 %393, %390
  %395 = icmp eq i64 %394, 2
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %37, align 1, !tbaa !2450
  %397 = add i64 %368, 9
  store i64 %397, i64* %PC, align 8
  %398 = add i64 %374, 104
  %399 = inttoptr i64 %375 to i64*
  %400 = load i64, i64* %399, align 8
  store i64 %400, i64* %RBP, align 8, !tbaa !2428
  store i64 %398, i64* %RSP, align 8, !tbaa !2428
  %401 = add i64 %368, 10
  store i64 %401, i64* %PC, align 8
  %402 = inttoptr i64 %398 to i64*
  %403 = load i64, i64* %402, align 8
  store i64 %403, i64* %PC, align 8, !tbaa !2428
  %404 = add i64 %374, 112
  store i64 %404, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_4021c4:                                     ; preds = %block_4022fc, %block_402170
  %405 = phi i64 [ %.pre, %block_402170 ], [ %154, %block_4022fc ]
  %MEMORY.6 = phi %struct.Memory* [ %2, %block_402170 ], [ %MEMORY.0, %block_4022fc ]
  %406 = load i64, i64* %RBP, align 8
  %407 = add i64 %406, -32
  %408 = add i64 %405, 4
  store i64 %408, i64* %PC, align 8
  %409 = inttoptr i64 %407 to i64*
  %410 = load i64, i64* %409, align 8
  store i64 %410, i64* %RAX, align 8, !tbaa !2428
  %411 = add i64 %406, -24
  %412 = add i64 %405, 8
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i64*
  %414 = load i64, i64* %413, align 8
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %415 = sub i64 %410, %414
  %416 = icmp ult i64 %410, %414
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %13, align 1, !tbaa !2432
  %418 = trunc i64 %415 to i32
  %419 = and i32 %418, 255
  %420 = tail call i32 @llvm.ctpop.i32(i32 %419) #12
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  store i8 %423, i8* %20, align 1, !tbaa !2446
  %424 = xor i64 %410, %414
  %425 = xor i64 %424, %415
  %426 = lshr i64 %425, 4
  %427 = trunc i64 %426 to i8
  %428 = and i8 %427, 1
  store i8 %428, i8* %25, align 1, !tbaa !2447
  %429 = icmp eq i64 %415, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %28, align 1, !tbaa !2448
  %431 = lshr i64 %415, 63
  %432 = trunc i64 %431 to i8
  store i8 %432, i8* %31, align 1, !tbaa !2449
  %433 = lshr i64 %410, 63
  %434 = lshr i64 %414, 63
  %435 = xor i64 %433, %434
  %436 = xor i64 %431, %433
  %437 = add nuw nsw i64 %436, %435
  %438 = icmp eq i64 %437, 2
  %439 = zext i1 %438 to i8
  store i8 %439, i8* %37, align 1, !tbaa !2450
  %.v24 = select i1 %416, i64 17, i64 334
  %440 = add i64 %405, %.v24
  store i64 %440, i64* %PC, align 8, !tbaa !2428
  br i1 %416, label %block_4021d5, label %block_402312

block_402209:                                     ; preds = %block_4021fb
  %441 = add i64 %549, -64
  %442 = add i64 %526, 5
  store i64 %442, i64* %PC, align 8
  %443 = inttoptr i64 %441 to i64*
  %444 = load i64, i64* %443, align 8
  store i8 0, i8* %13, align 1, !tbaa !2432
  %445 = trunc i64 %444 to i32
  %446 = and i32 %445, 255
  %447 = tail call i32 @llvm.ctpop.i32(i32 %446) #12
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  store i8 %450, i8* %20, align 1, !tbaa !2446
  store i8 0, i8* %25, align 1, !tbaa !2447
  %451 = icmp eq i64 %444, 0
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %28, align 1, !tbaa !2448
  %453 = lshr i64 %444, 63
  %454 = trunc i64 %453 to i8
  store i8 %454, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  %455 = icmp ne i8 %454, 0
  %.v = select i1 %455, i64 19, i64 6
  %456 = add i64 %442, %.v
  store i64 %456, i64* %PC, align 8, !tbaa !2428
  br i1 %455, label %block_402221, label %block_402214

block_402242:                                     ; preds = %block_40222d
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 506), i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %457 = add i64 %367, -6642
  %458 = add i64 %367, 17
  %459 = load i64, i64* %RSP, align 8, !tbaa !2428
  %460 = add i64 %459, -8
  %461 = inttoptr i64 %460 to i64*
  store i64 %458, i64* %461, align 8
  store i64 %460, i64* %RSP, align 8, !tbaa !2428
  store i64 %457, i64* %PC, align 8, !tbaa !2428
  %462 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.6)
  %463 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_404720__rodata_type* @seg_404720__rodata to i64), i64 531), i64* %RDI, align 8, !tbaa !2428
  %464 = load i64, i64* %RBP, align 8
  %465 = add i64 %464, -32
  %466 = add i64 %463, 14
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %465 to i64*
  %468 = load i64, i64* %467, align 8
  store i64 %468, i64* %RCX, align 8, !tbaa !2428
  %469 = add i64 %468, 96
  %470 = add i64 %463, 17
  store i64 %470, i64* %PC, align 8
  %471 = inttoptr i64 %469 to i32*
  %472 = load i32, i32* %471, align 4
  %473 = zext i32 %472 to i64
  store i64 %473, i64* %RSI, align 8, !tbaa !2428
  %474 = add i64 %464, -64
  %475 = add i64 %463, 21
  store i64 %475, i64* %PC, align 8
  %476 = inttoptr i64 %474 to i64*
  %477 = load i64, i64* %476, align 8
  store i64 %477, i64* %RDX, align 8, !tbaa !2428
  %478 = add i64 %464, -76
  %479 = load i32, i32* %EAX, align 4
  %480 = add i64 %463, 24
  store i64 %480, i64* %PC, align 8
  %481 = inttoptr i64 %478 to i32*
  store i32 %479, i32* %481, align 4
  %482 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %483 = add i64 %482, -6683
  %484 = add i64 %482, 7
  %485 = load i64, i64* %RSP, align 8, !tbaa !2428
  %486 = add i64 %485, -8
  %487 = inttoptr i64 %486 to i64*
  store i64 %484, i64* %487, align 8
  store i64 %486, i64* %RSP, align 8, !tbaa !2428
  store i64 %483, i64* %PC, align 8, !tbaa !2428
  %488 = tail call fastcc %struct.Memory* @ext_608fd0_printf(%struct.State* nonnull %0, %struct.Memory* %462)
  %489 = load i64, i64* %RBP, align 8
  %490 = add i64 %489, -80
  %491 = load i32, i32* %EAX, align 4
  %492 = load i64, i64* %PC, align 8
  %493 = add i64 %492, 3
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %490 to i32*
  store i32 %491, i32* %494, align 4
  %.pre21 = load i64, i64* %PC, align 8
  %.pre22 = load i64, i64* %RBP, align 8
  br label %block_4022fc

block_4021fb:                                     ; preds = %block_4021d5
  %495 = add i64 %584, 4
  store i64 %495, i64* %PC, align 8
  %496 = load i64, i64* %553, align 8
  store i64 %496, i64* %RAX, align 8, !tbaa !2428
  %497 = add i64 %549, -48
  %498 = add i64 %584, 8
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i64*
  %500 = load i64, i64* %499, align 8
  %501 = sub i64 %496, %500
  %502 = icmp ult i64 %496, %500
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %13, align 1, !tbaa !2432
  %504 = trunc i64 %501 to i32
  %505 = and i32 %504, 255
  %506 = tail call i32 @llvm.ctpop.i32(i32 %505) #12
  %507 = trunc i32 %506 to i8
  %508 = and i8 %507, 1
  %509 = xor i8 %508, 1
  store i8 %509, i8* %20, align 1, !tbaa !2446
  %510 = xor i64 %500, %496
  %511 = xor i64 %510, %501
  %512 = lshr i64 %511, 4
  %513 = trunc i64 %512 to i8
  %514 = and i8 %513, 1
  store i8 %514, i8* %25, align 1, !tbaa !2447
  %515 = icmp eq i64 %501, 0
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %28, align 1, !tbaa !2448
  %517 = lshr i64 %501, 63
  %518 = trunc i64 %517 to i8
  store i8 %518, i8* %31, align 1, !tbaa !2449
  %519 = lshr i64 %496, 63
  %520 = lshr i64 %500, 63
  %521 = xor i64 %520, %519
  %522 = xor i64 %517, %519
  %523 = add nuw nsw i64 %522, %521
  %524 = icmp eq i64 %523, 2
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %37, align 1, !tbaa !2450
  %.v26 = select i1 %502, i64 14, i64 127
  %526 = add i64 %584, %.v26
  store i64 %526, i64* %PC, align 8, !tbaa !2428
  br i1 %502, label %block_402209, label %block_40227a

block_4021d5:                                     ; preds = %block_4021c4
  %527 = add i64 %440, 4
  store i64 %527, i64* %PC, align 8
  %528 = load i64, i64* %409, align 8
  store i64 %528, i64* %RAX, align 8, !tbaa !2428
  %529 = add i64 %528, 48
  %530 = add i64 %440, 8
  store i64 %530, i64* %PC, align 8
  %531 = inttoptr i64 %529 to i64*
  %532 = load i64, i64* %531, align 8
  store i64 %532, i64* %RAX, align 8, !tbaa !2428
  %533 = add i64 %406, -56
  %534 = add i64 %440, 12
  store i64 %534, i64* %PC, align 8
  %535 = inttoptr i64 %533 to i64*
  store i64 %532, i64* %535, align 8
  %536 = load i64, i64* %RBP, align 8
  %537 = add i64 %536, -32
  %538 = load i64, i64* %PC, align 8
  %539 = add i64 %538, 4
  store i64 %539, i64* %PC, align 8
  %540 = inttoptr i64 %537 to i64*
  %541 = load i64, i64* %540, align 8
  store i64 %541, i64* %RAX, align 8, !tbaa !2428
  %542 = add i64 %541, 80
  %543 = add i64 %538, 8
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to i64*
  %545 = load i64, i64* %544, align 8
  store i64 %545, i64* %RAX, align 8, !tbaa !2428
  %546 = add i64 %536, -64
  %547 = add i64 %538, 12
  store i64 %547, i64* %PC, align 8
  %548 = inttoptr i64 %546 to i64*
  store i64 %545, i64* %548, align 8
  %549 = load i64, i64* %RBP, align 8
  %550 = add i64 %549, -56
  %551 = load i64, i64* %PC, align 8
  %552 = add i64 %551, 4
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %550 to i64*
  %554 = load i64, i64* %553, align 8
  store i64 %554, i64* %RAX, align 8, !tbaa !2428
  %555 = add i64 %549, -40
  %556 = add i64 %551, 8
  store i64 %556, i64* %PC, align 8
  %557 = inttoptr i64 %555 to i64*
  %558 = load i64, i64* %557, align 8
  %559 = sub i64 %554, %558
  %560 = icmp ult i64 %554, %558
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %13, align 1, !tbaa !2432
  %562 = trunc i64 %559 to i32
  %563 = and i32 %562, 255
  %564 = tail call i32 @llvm.ctpop.i32(i32 %563) #12
  %565 = trunc i32 %564 to i8
  %566 = and i8 %565, 1
  %567 = xor i8 %566, 1
  store i8 %567, i8* %20, align 1, !tbaa !2446
  %568 = xor i64 %558, %554
  %569 = xor i64 %568, %559
  %570 = lshr i64 %569, 4
  %571 = trunc i64 %570 to i8
  %572 = and i8 %571, 1
  store i8 %572, i8* %25, align 1, !tbaa !2447
  %573 = icmp eq i64 %559, 0
  %574 = zext i1 %573 to i8
  store i8 %574, i8* %28, align 1, !tbaa !2448
  %575 = lshr i64 %559, 63
  %576 = trunc i64 %575 to i8
  store i8 %576, i8* %31, align 1, !tbaa !2449
  %577 = lshr i64 %554, 63
  %578 = lshr i64 %558, 63
  %579 = xor i64 %578, %577
  %580 = xor i64 %575, %577
  %581 = add nuw nsw i64 %580, %579
  %582 = icmp eq i64 %581, 2
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %37, align 1, !tbaa !2450
  %.v25 = select i1 %560, i64 141, i64 14
  %584 = add i64 %551, %.v25
  store i64 %584, i64* %PC, align 8, !tbaa !2428
  br i1 %560, label %block_40227a, label %block_4021fb

block_402221:                                     ; preds = %block_402209
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2432
  store i8 1, i8* %20, align 1, !tbaa !2446
  store i8 1, i8* %28, align 1, !tbaa !2448
  store i8 0, i8* %31, align 1, !tbaa !2449
  store i8 0, i8* %37, align 1, !tbaa !2450
  store i8 0, i8* %25, align 1, !tbaa !2447
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %585 = add i64 %456, 8
  store i64 %585, i64* %PC, align 8
  %586 = load i64, i64* %443, align 8
  %587 = sub i64 0, %586
  store i64 %587, i64* %RCX, align 8, !tbaa !2428
  %588 = icmp ne i64 %586, 0
  %589 = zext i1 %588 to i8
  store i8 %589, i8* %13, align 1, !tbaa !2432
  %590 = trunc i64 %587 to i32
  %591 = and i32 %590, 255
  %592 = tail call i32 @llvm.ctpop.i32(i32 %591) #12
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  %595 = xor i8 %594, 1
  store i8 %595, i8* %20, align 1, !tbaa !2446
  %596 = xor i64 %586, %587
  %597 = lshr i64 %596, 4
  %598 = trunc i64 %597 to i8
  %599 = and i8 %598, 1
  store i8 %599, i8* %25, align 1, !tbaa !2447
  %600 = icmp eq i64 %586, 0
  %601 = zext i1 %600 to i8
  store i8 %601, i8* %28, align 1, !tbaa !2448
  %602 = lshr i64 %587, 63
  %603 = trunc i64 %602 to i8
  store i8 %603, i8* %31, align 1, !tbaa !2449
  %604 = lshr i64 %586, 63
  %605 = add nuw nsw i64 %602, %604
  %606 = icmp eq i64 %605, 2
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %37, align 1, !tbaa !2450
  %608 = add i64 %549, -72
  %609 = add i64 %456, 12
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %608 to i64*
  store i64 %587, i64* %610, align 8
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_40222d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_404090_update_tree(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_404090:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %DL = bitcast %union.anon* %3 to i8*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %R10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %R11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 23, i32 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = load i64, i64* %RSP, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = load i64, i64* %R15, align 8
  %11 = add i64 %9, 5
  store i64 %11, i64* %PC, align 8
  %12 = add i64 %6, -16
  %13 = inttoptr i64 %12 to i64*
  store i64 %10, i64* %13, align 8
  %14 = load i64, i64* %R14, align 8
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 2
  store i64 %16, i64* %PC, align 8
  %17 = add i64 %6, -24
  %18 = inttoptr i64 %17 to i64*
  store i64 %14, i64* %18, align 8
  %19 = load i64, i64* %RBX, align 8
  %20 = load i64, i64* %PC, align 8
  %21 = add i64 %20, 1
  store i64 %21, i64* %PC, align 8
  %22 = add i64 %6, -32
  %23 = inttoptr i64 %22 to i64*
  store i64 %19, i64* %23, align 8
  %24 = load i64, i64* %PC, align 8
  %25 = add i64 %6, -96
  store i64 %25, i64* %RSP, align 8, !tbaa !2428
  %26 = icmp ult i64 %22, 64
  %27 = zext i1 %26 to i8
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %27, i8* %28, align 1, !tbaa !2432
  %29 = trunc i64 %25 to i32
  %30 = and i32 %29, 255
  %31 = tail call i32 @llvm.ctpop.i32(i32 %30) #12
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  %34 = xor i8 %33, 1
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %34, i8* %35, align 1, !tbaa !2446
  %36 = xor i64 %22, %25
  %37 = lshr i64 %36, 4
  %38 = trunc i64 %37 to i8
  %39 = and i8 %38, 1
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %39, i8* %40, align 1, !tbaa !2447
  %41 = icmp eq i64 %25, 0
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %42, i8* %43, align 1, !tbaa !2448
  %44 = lshr i64 %25, 63
  %45 = trunc i64 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %45, i8* %46, align 1, !tbaa !2449
  %47 = lshr i64 %22, 63
  %48 = xor i64 %44, %47
  %49 = add nuw nsw i64 %48, %47
  %50 = icmp eq i64 %49, 2
  %51 = zext i1 %50 to i8
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %51, i8* %52, align 1, !tbaa !2450
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, 56
  %55 = add i64 %24, 8
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %54 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %RAX, align 8, !tbaa !2428
  %58 = add i64 %53, 48
  %59 = add i64 %24, 12
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %58 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %R10, align 8, !tbaa !2428
  %62 = add i64 %53, 40
  %63 = add i64 %24, 16
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %R11, align 8, !tbaa !2428
  %66 = add i64 %53, 32
  %67 = add i64 %24, 20
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %66 to i64*
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %RBX, align 8, !tbaa !2428
  %70 = add i64 %53, 24
  %71 = add i64 %24, 24
  store i64 %71, i64* %PC, align 8
  %72 = inttoptr i64 %70 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %R14, align 8, !tbaa !2428
  %74 = add i64 %53, 16
  %75 = add i64 %24, 28
  store i64 %75, i64* %PC, align 8
  %76 = inttoptr i64 %74 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %R15, align 8, !tbaa !2428
  %78 = add i64 %53, -32
  %79 = load i64, i64* %RDI, align 8
  %80 = add i64 %24, 32
  store i64 %80, i64* %PC, align 8
  %81 = inttoptr i64 %78 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load i64, i64* %RBP, align 8
  %83 = add i64 %82, -40
  %84 = load i64, i64* %RSI, align 8
  %85 = load i64, i64* %PC, align 8
  %86 = add i64 %85, 4
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %83 to i64*
  store i64 %84, i64* %87, align 8
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -48
  %90 = load i64, i64* %RDX, align 8
  %91 = load i64, i64* %PC, align 8
  %92 = add i64 %91, 4
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %89 to i64*
  store i64 %90, i64* %93, align 8
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -56
  %96 = load i64, i64* %RCX, align 8
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %95 to i64*
  store i64 %96, i64* %99, align 8
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -64
  %102 = load i64, i64* %R8, align 8
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %101 to i64*
  store i64 %102, i64* %105, align 8
  %106 = load i64, i64* %RBP, align 8
  %107 = add i64 %106, -72
  %108 = load i64, i64* %R9, align 8
  %109 = load i64, i64* %PC, align 8
  %110 = add i64 %109, 4
  store i64 %110, i64* %PC, align 8
  %111 = inttoptr i64 %107 to i64*
  store i64 %108, i64* %111, align 8
  %112 = load i64, i64* %RBP, align 8
  %113 = add i64 %112, -80
  %114 = load i64, i64* %R15, align 8
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 4
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  store i64 %114, i64* %117, align 8
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -88
  %120 = load i64, i64* %R14, align 8
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %119 to i64*
  store i64 %120, i64* %123, align 8
  %124 = load i64, i64* %RBP, align 8
  %125 = add i64 %124, -96
  %126 = load i64, i64* %RBX, align 8
  %127 = load i64, i64* %PC, align 8
  %128 = add i64 %127, 4
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %125 to i64*
  store i64 %126, i64* %129, align 8
  %130 = load i64, i64* %RBP, align 8
  %131 = add i64 %130, -104
  %132 = load i64, i64* %R11, align 8
  %133 = load i64, i64* %PC, align 8
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %131 to i64*
  store i64 %132, i64* %135, align 8
  %136 = load i64, i64* %RBP, align 8
  %137 = add i64 %136, -112
  %138 = load i64, i64* %R10, align 8
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %137 to i64*
  store i64 %138, i64* %141, align 8
  %142 = load i64, i64* %RBP, align 8
  %143 = add i64 %142, -120
  %144 = load i64, i64* %RAX, align 8
  %145 = load i64, i64* %PC, align 8
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %143 to i64*
  store i64 %144, i64* %147, align 8
  %148 = load i64, i64* %RBP, align 8
  %149 = add i64 %148, -104
  %150 = load i64, i64* %PC, align 8
  %151 = add i64 %150, 4
  store i64 %151, i64* %PC, align 8
  %152 = inttoptr i64 %149 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = add i64 %153, 8
  %155 = add i64 %150, 8
  store i64 %155, i64* %PC, align 8
  %156 = inttoptr i64 %154 to i64*
  %157 = load i64, i64* %156, align 8
  store i64 %157, i64* %RAX, align 8, !tbaa !2428
  %158 = add i64 %148, -72
  %159 = add i64 %150, 12
  store i64 %159, i64* %PC, align 8
  %160 = inttoptr i64 %158 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = sub i64 %157, %161
  %163 = icmp ult i64 %157, %161
  %164 = zext i1 %163 to i8
  store i8 %164, i8* %28, align 1, !tbaa !2432
  %165 = trunc i64 %162 to i32
  %166 = and i32 %165, 255
  %167 = tail call i32 @llvm.ctpop.i32(i32 %166) #12
  %168 = trunc i32 %167 to i8
  %169 = and i8 %168, 1
  %170 = xor i8 %169, 1
  store i8 %170, i8* %35, align 1, !tbaa !2446
  %171 = xor i64 %161, %157
  %172 = xor i64 %171, %162
  %173 = lshr i64 %172, 4
  %174 = trunc i64 %173 to i8
  %175 = and i8 %174, 1
  store i8 %175, i8* %40, align 1, !tbaa !2447
  %176 = icmp eq i64 %162, 0
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %43, align 1, !tbaa !2448
  %178 = lshr i64 %162, 63
  %179 = trunc i64 %178 to i8
  store i8 %179, i8* %46, align 1, !tbaa !2449
  %180 = lshr i64 %157, 63
  %181 = lshr i64 %161, 63
  %182 = xor i64 %181, %180
  %183 = xor i64 %178, %180
  %184 = add nuw nsw i64 %183, %182
  %185 = icmp eq i64 %184, 2
  %186 = zext i1 %185 to i8
  store i8 %186, i8* %52, align 1, !tbaa !2450
  %.v75 = select i1 %176, i64 18, i64 29
  %187 = add i64 %150, %.v75
  store i64 %187, i64* %PC, align 8, !tbaa !2428
  br i1 %176, label %block_4040f7, label %block_404102

block_4041ff:                                     ; preds = %block_4041ff.preheader, %block_40423a
  %188 = phi i64 [ %1748, %block_40423a ], [ %791, %block_4041ff.preheader ]
  %189 = phi i64 [ %.pre49, %block_40423a ], [ %774, %block_4041ff.preheader ]
  %190 = add i64 %189, -144
  %191 = add i64 %188, 7
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %190 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RAX, align 8, !tbaa !2428
  %194 = add i64 %189, -80
  %195 = add i64 %188, 11
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = sub i64 %193, %197
  %199 = icmp ult i64 %193, %197
  %200 = zext i1 %199 to i8
  store i8 %200, i8* %28, align 1, !tbaa !2432
  %201 = trunc i64 %198 to i32
  %202 = and i32 %201, 255
  %203 = tail call i32 @llvm.ctpop.i32(i32 %202) #12
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  store i8 %206, i8* %35, align 1, !tbaa !2446
  %207 = xor i64 %197, %193
  %208 = xor i64 %207, %198
  %209 = lshr i64 %208, 4
  %210 = trunc i64 %209 to i8
  %211 = and i8 %210, 1
  store i8 %211, i8* %40, align 1, !tbaa !2447
  %212 = icmp eq i64 %198, 0
  %213 = zext i1 %212 to i8
  store i8 %213, i8* %43, align 1, !tbaa !2448
  %214 = lshr i64 %198, 63
  %215 = trunc i64 %214 to i8
  store i8 %215, i8* %46, align 1, !tbaa !2449
  %216 = lshr i64 %193, 63
  %217 = lshr i64 %197, 63
  %218 = xor i64 %217, %216
  %219 = xor i64 %214, %216
  %220 = add nuw nsw i64 %219, %218
  %221 = icmp eq i64 %220, 2
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %52, align 1, !tbaa !2450
  %.v68 = select i1 %212, i64 17, i64 22
  %223 = add i64 %188, %.v68
  store i64 %223, i64* %PC, align 8, !tbaa !2428
  br i1 %212, label %block_404210, label %block_404215

block_4044e9:                                     ; preds = %block_4044d8
  %224 = add i64 %424, -184
  %225 = add i64 %458, 7
  store i64 %225, i64* %PC, align 8
  %226 = inttoptr i64 %224 to i64*
  %227 = load i64, i64* %226, align 8
  store i64 %227, i64* %RAX, align 8, !tbaa !2428
  %228 = add i64 %458, 14
  store i64 %228, i64* %PC, align 8
  %229 = load i64, i64* %427, align 8
  store i64 %229, i64* %RCX, align 8, !tbaa !2428
  %230 = add i64 %229, 88
  %231 = add i64 %458, 18
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %230 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = sub i64 %233, %227
  store i64 %234, i64* %RDX, align 8, !tbaa !2428
  %235 = icmp ult i64 %233, %227
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %28, align 1, !tbaa !2432
  %237 = trunc i64 %234 to i32
  %238 = and i32 %237, 255
  %239 = tail call i32 @llvm.ctpop.i32(i32 %238) #12
  %240 = trunc i32 %239 to i8
  %241 = and i8 %240, 1
  %242 = xor i8 %241, 1
  store i8 %242, i8* %35, align 1, !tbaa !2446
  %243 = xor i64 %227, %233
  %244 = xor i64 %243, %234
  %245 = lshr i64 %244, 4
  %246 = trunc i64 %245 to i8
  %247 = and i8 %246, 1
  store i8 %247, i8* %40, align 1, !tbaa !2447
  %248 = icmp eq i64 %234, 0
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %43, align 1, !tbaa !2448
  %250 = lshr i64 %234, 63
  %251 = trunc i64 %250 to i8
  store i8 %251, i8* %46, align 1, !tbaa !2449
  %252 = lshr i64 %233, 63
  %253 = lshr i64 %227, 63
  %254 = xor i64 %253, %252
  %255 = xor i64 %250, %252
  %256 = add nuw nsw i64 %255, %254
  %257 = icmp eq i64 %256, 2
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %52, align 1, !tbaa !2450
  %259 = add i64 %458, 25
  store i64 %259, i64* %PC, align 8
  store i64 %234, i64* %232, align 8
  %260 = load i64, i64* %RBP, align 8
  %261 = add i64 %260, -152
  %262 = load i64, i64* %PC, align 8
  %263 = add i64 %262, 7
  store i64 %263, i64* %PC, align 8
  %264 = inttoptr i64 %261 to i64*
  %265 = load i64, i64* %264, align 8
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = add i64 %265, 8
  %267 = add i64 %262, 11
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to i32*
  %269 = load i32, i32* %268, align 4
  %270 = sext i32 %269 to i64
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = add i64 %260, -32
  %272 = add i64 %262, 15
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = sub i64 %270, %274
  %276 = icmp ult i64 %270, %274
  %277 = zext i1 %276 to i8
  store i8 %277, i8* %28, align 1, !tbaa !2432
  %278 = trunc i64 %275 to i32
  %279 = and i32 %278, 255
  %280 = tail call i32 @llvm.ctpop.i32(i32 %279) #12
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = xor i8 %282, 1
  store i8 %283, i8* %35, align 1, !tbaa !2446
  %284 = xor i64 %274, %270
  %285 = xor i64 %284, %275
  %286 = lshr i64 %285, 4
  %287 = trunc i64 %286 to i8
  %288 = and i8 %287, 1
  store i8 %288, i8* %40, align 1, !tbaa !2447
  %289 = icmp eq i64 %275, 0
  %290 = zext i1 %289 to i8
  store i8 %290, i8* %43, align 1, !tbaa !2448
  %291 = lshr i64 %275, 63
  %292 = trunc i64 %291 to i8
  store i8 %292, i8* %46, align 1, !tbaa !2449
  %293 = lshr i64 %270, 63
  %294 = lshr i64 %274, 63
  %295 = xor i64 %294, %293
  %296 = xor i64 %291, %293
  %297 = add nuw nsw i64 %296, %295
  %298 = icmp eq i64 %297, 2
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %52, align 1, !tbaa !2450
  %.v73 = select i1 %289, i64 45, i64 21
  %300 = add i64 %262, %.v73
  %301 = add i64 %260, -48
  %302 = add i64 %300, 4
  store i64 %302, i64* %PC, align 8
  %303 = inttoptr i64 %301 to i64*
  %304 = load i64, i64* %303, align 8
  store i64 %304, i64* %RAX, align 8, !tbaa !2428
  %305 = add i64 %300, 11
  store i64 %305, i64* %PC, align 8
  %306 = load i64, i64* %264, align 8
  store i64 %306, i64* %RCX, align 8, !tbaa !2428
  %307 = add i64 %306, 80
  %308 = add i64 %300, 15
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %307 to i64*
  %310 = load i64, i64* %309, align 8
  br i1 %289, label %block_40452f, label %block_404517

block_40457d:                                     ; preds = %block_40456c
  %311 = add i64 %793, -184
  %312 = add i64 %827, 7
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313, align 8
  store i64 %314, i64* %RAX, align 8, !tbaa !2428
  %315 = add i64 %827, 14
  store i64 %315, i64* %PC, align 8
  %316 = load i64, i64* %796, align 8
  store i64 %316, i64* %RCX, align 8, !tbaa !2428
  %317 = add i64 %316, 88
  %318 = add i64 %827, 18
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i64*
  %320 = load i64, i64* %319, align 8
  %321 = add i64 %320, %314
  store i64 %321, i64* %RAX, align 8, !tbaa !2428
  %322 = icmp ult i64 %321, %314
  %323 = icmp ult i64 %321, %320
  %324 = or i1 %322, %323
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %28, align 1, !tbaa !2432
  %326 = trunc i64 %321 to i32
  %327 = and i32 %326, 255
  %328 = tail call i32 @llvm.ctpop.i32(i32 %327) #12
  %329 = trunc i32 %328 to i8
  %330 = and i8 %329, 1
  %331 = xor i8 %330, 1
  store i8 %331, i8* %35, align 1, !tbaa !2446
  %332 = xor i64 %320, %314
  %333 = xor i64 %332, %321
  %334 = lshr i64 %333, 4
  %335 = trunc i64 %334 to i8
  %336 = and i8 %335, 1
  store i8 %336, i8* %40, align 1, !tbaa !2447
  %337 = icmp eq i64 %321, 0
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %43, align 1, !tbaa !2448
  %339 = lshr i64 %321, 63
  %340 = trunc i64 %339 to i8
  store i8 %340, i8* %46, align 1, !tbaa !2449
  %341 = lshr i64 %314, 63
  %342 = lshr i64 %320, 63
  %343 = xor i64 %339, %341
  %344 = xor i64 %339, %342
  %345 = add nuw nsw i64 %343, %344
  %346 = icmp eq i64 %345, 2
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %52, align 1, !tbaa !2450
  %348 = add i64 %827, 22
  store i64 %348, i64* %PC, align 8
  store i64 %321, i64* %319, align 8
  %349 = load i64, i64* %RBP, align 8
  %350 = add i64 %349, -152
  %351 = load i64, i64* %PC, align 8
  %352 = add i64 %351, 7
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %350 to i64*
  %354 = load i64, i64* %353, align 8
  store i64 %354, i64* %RAX, align 8, !tbaa !2428
  %355 = add i64 %354, 8
  %356 = add i64 %351, 11
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i32*
  %358 = load i32, i32* %357, align 4
  %359 = sext i32 %358 to i64
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = add i64 %349, -32
  %361 = add i64 %351, 15
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %360 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = sub i64 %359, %363
  %365 = icmp ult i64 %359, %363
  %366 = zext i1 %365 to i8
  store i8 %366, i8* %28, align 1, !tbaa !2432
  %367 = trunc i64 %364 to i32
  %368 = and i32 %367, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #12
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %35, align 1, !tbaa !2446
  %373 = xor i64 %363, %359
  %374 = xor i64 %373, %364
  %375 = lshr i64 %374, 4
  %376 = trunc i64 %375 to i8
  %377 = and i8 %376, 1
  store i8 %377, i8* %40, align 1, !tbaa !2447
  %378 = icmp eq i64 %364, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %43, align 1, !tbaa !2448
  %380 = lshr i64 %364, 63
  %381 = trunc i64 %380 to i8
  store i8 %381, i8* %46, align 1, !tbaa !2449
  %382 = lshr i64 %359, 63
  %383 = lshr i64 %363, 63
  %384 = xor i64 %383, %382
  %385 = xor i64 %380, %382
  %386 = add nuw nsw i64 %385, %384
  %387 = icmp eq i64 %386, 2
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %52, align 1, !tbaa !2450
  %.v74 = select i1 %378, i64 21, i64 45
  %389 = add i64 %351, %.v74
  %390 = add i64 %349, -48
  %391 = add i64 %389, 4
  store i64 %391, i64* %PC, align 8
  %392 = inttoptr i64 %390 to i64*
  %393 = load i64, i64* %392, align 8
  store i64 %393, i64* %RAX, align 8, !tbaa !2428
  %394 = add i64 %389, 11
  store i64 %394, i64* %PC, align 8
  %395 = load i64, i64* %353, align 8
  store i64 %395, i64* %RCX, align 8, !tbaa !2428
  %396 = add i64 %395, 80
  %397 = add i64 %389, 15
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i64*
  %399 = load i64, i64* %398, align 8
  br i1 %378, label %block_4045a8, label %block_4045c0

block_404358:                                     ; preds = %block_40431e
  %400 = add i64 %988, 7
  store i64 %400, i64* %PC, align 8
  %401 = load i64, i64* %972, align 8
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = add i64 %988, 14
  store i64 %402, i64* %PC, align 8
  %403 = load i64, i64* %972, align 8
  store i64 %403, i64* %RCX, align 8, !tbaa !2428
  %404 = add i64 %403, 32
  %405 = add i64 %988, 18
  store i64 %405, i64* %PC, align 8
  %406 = inttoptr i64 %404 to i64*
  %407 = load i64, i64* %406, align 8
  store i64 %407, i64* %RCX, align 8, !tbaa !2428
  %408 = add i64 %407, 40
  %409 = add i64 %988, 22
  store i64 %409, i64* %PC, align 8
  %410 = inttoptr i64 %408 to i64*
  store i64 %401, i64* %410, align 8
  %.pre54 = load i64, i64* %RBP, align 8
  %.pre55 = load i64, i64* %PC, align 8
  br label %block_40436e

block_404164:                                     ; preds = %block_404159
  %411 = add i64 %1559, 4
  store i64 %411, i64* %PC, align 8
  %412 = load i64, i64* %.pre-phi67, align 8
  store i64 %412, i64* %RAX, align 8, !tbaa !2428
  %413 = add i64 %148, -216
  %414 = add i64 %1559, 11
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %413 to i64*
  store i64 %412, i64* %415, align 8
  %416 = load i64, i64* %PC, align 8
  %417 = add i64 %416, 20
  store i64 %417, i64* %PC, align 8, !tbaa !2428
  br label %block_404183

block_404561:                                     ; preds = %block_4044d8
  %418 = add i64 %424, -72
  %419 = add i64 %458, 4
  store i64 %419, i64* %PC, align 8
  %420 = inttoptr i64 %418 to i64*
  %421 = load i64, i64* %420, align 8
  store i64 %421, i64* %RAX, align 8, !tbaa !2428
  %422 = add i64 %458, 11
  store i64 %422, i64* %PC, align 8
  store i64 %421, i64* %427, align 8
  %.pre59 = load i64, i64* %PC, align 8
  br label %block_40456c

block_4044d8:                                     ; preds = %block_4044d8.preheader, %block_404545
  %423 = phi i64 [ %652, %block_404545 ], [ %.pre61, %block_4044d8.preheader ]
  %424 = load i64, i64* %RBP, align 8
  %425 = add i64 %424, -152
  %426 = add i64 %423, 7
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %425 to i64*
  %428 = load i64, i64* %427, align 8
  store i64 %428, i64* %RAX, align 8, !tbaa !2428
  %429 = add i64 %424, -96
  %430 = add i64 %423, 11
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %429 to i64*
  %432 = load i64, i64* %431, align 8
  %433 = sub i64 %428, %432
  %434 = icmp ult i64 %428, %432
  %435 = zext i1 %434 to i8
  store i8 %435, i8* %28, align 1, !tbaa !2432
  %436 = trunc i64 %433 to i32
  %437 = and i32 %436, 255
  %438 = tail call i32 @llvm.ctpop.i32(i32 %437) #12
  %439 = trunc i32 %438 to i8
  %440 = and i8 %439, 1
  %441 = xor i8 %440, 1
  store i8 %441, i8* %35, align 1, !tbaa !2446
  %442 = xor i64 %432, %428
  %443 = xor i64 %442, %433
  %444 = lshr i64 %443, 4
  %445 = trunc i64 %444 to i8
  %446 = and i8 %445, 1
  store i8 %446, i8* %40, align 1, !tbaa !2447
  %447 = icmp eq i64 %433, 0
  %448 = zext i1 %447 to i8
  store i8 %448, i8* %43, align 1, !tbaa !2448
  %449 = lshr i64 %433, 63
  %450 = trunc i64 %449 to i8
  store i8 %450, i8* %46, align 1, !tbaa !2449
  %451 = lshr i64 %428, 63
  %452 = lshr i64 %432, 63
  %453 = xor i64 %452, %451
  %454 = xor i64 %449, %451
  %455 = add nuw nsw i64 %454, %453
  %456 = icmp eq i64 %455, 2
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %52, align 1, !tbaa !2450
  %.v81 = select i1 %447, i64 137, i64 17
  %458 = add i64 %423, %.v81
  store i64 %458, i64* %PC, align 8, !tbaa !2428
  br i1 %447, label %block_404561, label %block_4044e9

block_40464e:                                     ; preds = %block_40465f, %block_404643
  %459 = phi i64 [ %1172, %block_40465f ], [ %.pre62, %block_404643 ]
  %460 = load i64, i64* %RBP, align 8
  %461 = add i64 %460, -152
  %462 = add i64 %459, 7
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %461 to i64*
  %464 = load i64, i64* %463, align 8
  store i64 %464, i64* %RAX, align 8, !tbaa !2428
  %465 = add i64 %460, -96
  %466 = add i64 %459, 11
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %465 to i64*
  %468 = load i64, i64* %467, align 8
  %469 = sub i64 %464, %468
  %470 = icmp ult i64 %464, %468
  %471 = zext i1 %470 to i8
  store i8 %471, i8* %28, align 1, !tbaa !2432
  %472 = trunc i64 %469 to i32
  %473 = and i32 %472, 255
  %474 = tail call i32 @llvm.ctpop.i32(i32 %473) #12
  %475 = trunc i32 %474 to i8
  %476 = and i8 %475, 1
  %477 = xor i8 %476, 1
  store i8 %477, i8* %35, align 1, !tbaa !2446
  %478 = xor i64 %468, %464
  %479 = xor i64 %478, %469
  %480 = lshr i64 %479, 4
  %481 = trunc i64 %480 to i8
  %482 = and i8 %481, 1
  store i8 %482, i8* %40, align 1, !tbaa !2447
  %483 = icmp eq i64 %469, 0
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %43, align 1, !tbaa !2448
  %485 = lshr i64 %469, 63
  %486 = trunc i64 %485 to i8
  store i8 %486, i8* %46, align 1, !tbaa !2449
  %487 = lshr i64 %464, 63
  %488 = lshr i64 %468, 63
  %489 = xor i64 %488, %487
  %490 = xor i64 %485, %487
  %491 = add nuw nsw i64 %490, %489
  %492 = icmp eq i64 %491, 2
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %52, align 1, !tbaa !2450
  %.v84 = select i1 %483, i64 62, i64 17
  %494 = add i64 %459, %.v84
  store i64 %494, i64* %PC, align 8, !tbaa !2428
  br i1 %483, label %block_404691.loopexit, label %block_40465f

block_40413a:                                     ; preds = %block_40411f
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %28, align 1, !tbaa !2432
  store i8 1, i8* %35, align 1, !tbaa !2446
  store i8 1, i8* %43, align 1, !tbaa !2448
  store i8 0, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  store i8 0, i8* %40, align 1, !tbaa !2447
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %495 = add i64 %1685, 8
  store i64 %495, i64* %PC, align 8
  %496 = load i64, i64* %.pre-phi63, align 8
  %497 = sub i64 0, %496
  store i64 %497, i64* %RCX, align 8, !tbaa !2428
  %498 = icmp ne i64 %496, 0
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %28, align 1, !tbaa !2432
  %500 = trunc i64 %497 to i32
  %501 = and i32 %500, 255
  %502 = tail call i32 @llvm.ctpop.i32(i32 %501) #12
  %503 = trunc i32 %502 to i8
  %504 = and i8 %503, 1
  %505 = xor i8 %504, 1
  store i8 %505, i8* %35, align 1, !tbaa !2446
  %506 = xor i64 %496, %497
  %507 = lshr i64 %506, 4
  %508 = trunc i64 %507 to i8
  %509 = and i8 %508, 1
  store i8 %509, i8* %40, align 1, !tbaa !2447
  %510 = icmp eq i64 %496, 0
  %511 = zext i1 %510 to i8
  store i8 %511, i8* %43, align 1, !tbaa !2448
  %512 = lshr i64 %497, 63
  %513 = trunc i64 %512 to i8
  store i8 %513, i8* %46, align 1, !tbaa !2449
  %514 = lshr i64 %496, 63
  %515 = add nuw nsw i64 %512, %514
  %516 = icmp eq i64 %515, 2
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %52, align 1, !tbaa !2450
  %518 = add i64 %148, -208
  %519 = add i64 %1685, 15
  store i64 %519, i64* %PC, align 8
  %520 = inttoptr i64 %518 to i64*
  store i64 %497, i64* %520, align 8
  %.pre = load i64, i64* %PC, align 8
  br label %block_404149

block_4040f7:                                     ; preds = %block_404090
  %521 = add i64 %148, -112
  %522 = add i64 %187, 5
  store i64 %522, i64* %PC, align 8
  %523 = inttoptr i64 %521 to i64*
  %524 = load i64, i64* %523, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %525 = trunc i64 %524 to i32
  %526 = and i32 %525, 255
  %527 = tail call i32 @llvm.ctpop.i32(i32 %526) #12
  %528 = trunc i32 %527 to i8
  %529 = and i8 %528, 1
  %530 = xor i8 %529, 1
  store i8 %530, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %40, align 1, !tbaa !2447
  %531 = icmp eq i64 %524, 0
  %532 = zext i1 %531 to i8
  store i8 %532, i8* %43, align 1, !tbaa !2448
  %533 = lshr i64 %524, 63
  %534 = trunc i64 %533 to i8
  store i8 %534, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %535 = icmp ne i8 %534, 0
  %.v = select i1 %535, i64 35, i64 6
  %536 = add i64 %522, %.v
  store i64 %536, i64* %PC, align 8, !tbaa !2428
  br i1 %535, label %block_40411f, label %block_404102

block_40436e:                                     ; preds = %block_40431e, %block_404358
  %537 = phi i64 [ %988, %block_40431e ], [ %.pre55, %block_404358 ]
  %538 = phi i64 [ %968, %block_40431e ], [ %.pre54, %block_404358 ]
  %539 = add i64 %538, -152
  %540 = add i64 %537, 7
  store i64 %540, i64* %PC, align 8
  %541 = inttoptr i64 %539 to i64*
  %542 = load i64, i64* %541, align 8
  store i64 %542, i64* %RAX, align 8, !tbaa !2428
  %543 = add i64 %538, -160
  %544 = add i64 %537, 14
  store i64 %544, i64* %PC, align 8
  %545 = inttoptr i64 %543 to i64*
  %546 = load i64, i64* %545, align 8
  store i64 %546, i64* %RCX, align 8, !tbaa !2428
  %547 = add i64 %546, 16
  %548 = add i64 %537, 18
  store i64 %548, i64* %PC, align 8
  %549 = inttoptr i64 %547 to i64*
  store i64 %542, i64* %549, align 8
  %550 = load i64, i64* %RBP, align 8
  %551 = add i64 %550, -152
  %552 = load i64, i64* %PC, align 8
  %553 = add i64 %552, 7
  store i64 %553, i64* %PC, align 8
  %554 = inttoptr i64 %551 to i64*
  %555 = load i64, i64* %554, align 8
  store i64 %555, i64* %RAX, align 8, !tbaa !2428
  %556 = add i64 %555, 40
  %557 = add i64 %552, 15
  store i64 %557, i64* %PC, align 8
  %558 = inttoptr i64 %556 to i64*
  store i64 0, i64* %558, align 8
  %559 = load i64, i64* %RBP, align 8
  %560 = add i64 %559, -152
  %561 = load i64, i64* %PC, align 8
  %562 = add i64 %561, 7
  store i64 %562, i64* %PC, align 8
  %563 = inttoptr i64 %560 to i64*
  %564 = load i64, i64* %563, align 8
  store i64 %564, i64* %RAX, align 8, !tbaa !2428
  %565 = add i64 %564, 8
  %566 = add i64 %561, 11
  store i64 %566, i64* %PC, align 8
  %567 = inttoptr i64 %565 to i32*
  %568 = load i32, i32* %567, align 4
  %569 = icmp eq i32 %568, 0
  %570 = zext i1 %569 to i8
  store i8 %570, i8* %DL, align 1, !tbaa !2453
  store i8 0, i8* %28, align 1, !tbaa !2432
  %571 = zext i1 %569 to i32
  %572 = tail call i32 @llvm.ctpop.i32(i32 %571) #12
  %573 = trunc i32 %572 to i8
  %574 = xor i8 %573, 1
  store i8 %574, i8* %35, align 1, !tbaa !2446
  %575 = xor i8 %570, 1
  store i8 %575, i8* %43, align 1, !tbaa !2448
  store i8 0, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  store i8 0, i8* %40, align 1, !tbaa !2447
  %576 = zext i1 %569 to i64
  store i64 %576, i64* %RSI, align 8, !tbaa !2428
  %577 = zext i1 %569 to i64
  store i64 %577, i64* %RAX, align 8, !tbaa !2428
  %578 = add i64 %559, -168
  %579 = add i64 %561, 33
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to i64*
  store i64 %577, i64* %580, align 8
  %581 = load i64, i64* %RBP, align 8
  %582 = add i64 %581, -168
  %583 = load i64, i64* %PC, align 8
  %584 = add i64 %583, 7
  store i64 %584, i64* %PC, align 8
  %585 = inttoptr i64 %582 to i64*
  %586 = load i64, i64* %585, align 8
  store i64 %586, i64* %RAX, align 8, !tbaa !2428
  %587 = add i64 %581, -32
  %588 = add i64 %583, 11
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %587 to i64*
  %590 = load i64, i64* %589, align 8
  %591 = sub i64 %586, %590
  %592 = icmp ult i64 %586, %590
  %593 = zext i1 %592 to i8
  store i8 %593, i8* %28, align 1, !tbaa !2432
  %594 = trunc i64 %591 to i32
  %595 = and i32 %594, 255
  %596 = tail call i32 @llvm.ctpop.i32(i32 %595) #12
  %597 = trunc i32 %596 to i8
  %598 = and i8 %597, 1
  %599 = xor i8 %598, 1
  store i8 %599, i8* %35, align 1, !tbaa !2446
  %600 = xor i64 %590, %586
  %601 = xor i64 %600, %591
  %602 = lshr i64 %601, 4
  %603 = trunc i64 %602 to i8
  %604 = and i8 %603, 1
  store i8 %604, i8* %40, align 1, !tbaa !2447
  %605 = icmp eq i64 %591, 0
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %43, align 1, !tbaa !2448
  %607 = lshr i64 %591, 63
  %608 = trunc i64 %607 to i8
  store i8 %608, i8* %46, align 1, !tbaa !2449
  %609 = lshr i64 %586, 63
  %610 = lshr i64 %590, 63
  %611 = xor i64 %610, %609
  %612 = xor i64 %607, %609
  %613 = add nuw nsw i64 %612, %611
  %614 = icmp eq i64 %613, 2
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %52, align 1, !tbaa !2450
  %.v70 = select i1 %605, i64 17, i64 44
  %616 = add i64 %583, %.v70
  %617 = add i64 %581, -152
  %618 = add i64 %616, 7
  store i64 %618, i64* %PC, align 8
  %619 = inttoptr i64 %617 to i64*
  %620 = load i64, i64* %619, align 8
  store i64 %620, i64* %RAX, align 8, !tbaa !2428
  %621 = add i64 %620, 80
  %622 = add i64 %616, 11
  store i64 %622, i64* %PC, align 8
  %623 = inttoptr i64 %621 to i64*
  %624 = load i64, i64* %623, align 8
  store i64 %624, i64* %RAX, align 8, !tbaa !2428
  %625 = add i64 %581, -48
  %626 = add i64 %616, 15
  store i64 %626, i64* %PC, align 8
  %627 = inttoptr i64 %625 to i64*
  %628 = load i64, i64* %627, align 8
  br i1 %605, label %block_4043c1, label %block_4043dc

block_404149:                                     ; preds = %block_40412a, %block_40413a
  %629 = phi i64 [ %937, %block_40412a ], [ %.pre, %block_40413a ]
  %630 = load i64, i64* %RBP, align 8
  %631 = add i64 %630, -208
  %632 = add i64 %629, 7
  store i64 %632, i64* %PC, align 8
  %633 = inttoptr i64 %631 to i64*
  %634 = load i64, i64* %633, align 8
  store i64 %634, i64* %RAX, align 8, !tbaa !2428
  %635 = add i64 %630, -112
  %636 = add i64 %629, 11
  store i64 %636, i64* %PC, align 8
  %637 = inttoptr i64 %635 to i64*
  store i64 %634, i64* %637, align 8
  %638 = load i64, i64* %PC, align 8
  %639 = add i64 %638, 65
  store i64 %639, i64* %PC, align 8, !tbaa !2428
  br label %block_404195

block_404545:                                     ; preds = %block_404517, %block_40452f
  %640 = phi i64 [ %1121, %block_404517 ], [ %.pre58, %block_40452f ]
  %641 = load i64, i64* %RBP, align 8
  %642 = add i64 %641, -152
  %643 = add i64 %640, 12
  store i64 %643, i64* %PC, align 8
  %644 = inttoptr i64 %642 to i64*
  %645 = load i64, i64* %644, align 8
  store i64 %645, i64* %RAX, align 8, !tbaa !2428
  %646 = add i64 %645, 24
  %647 = add i64 %640, 16
  store i64 %647, i64* %PC, align 8
  %648 = inttoptr i64 %646 to i64*
  %649 = load i64, i64* %648, align 8
  store i64 %649, i64* %RAX, align 8, !tbaa !2428
  %650 = add i64 %640, 23
  store i64 %650, i64* %PC, align 8
  store i64 %649, i64* %644, align 8
  %651 = load i64, i64* %PC, align 8
  %652 = add i64 %651, -132
  store i64 %652, i64* %PC, align 8, !tbaa !2428
  br label %block_4044d8

block_404643:                                     ; preds = %block_404602
  %653 = add i64 %1629, -72
  %654 = add i64 %1663, 4
  store i64 %654, i64* %PC, align 8
  %655 = inttoptr i64 %653 to i64*
  %656 = load i64, i64* %655, align 8
  store i64 %656, i64* %RAX, align 8, !tbaa !2428
  %657 = add i64 %1663, 11
  store i64 %657, i64* %PC, align 8
  store i64 %656, i64* %1632, align 8
  %.pre62 = load i64, i64* %PC, align 8
  br label %block_40464e

block_4045c0:                                     ; preds = %block_40457d
  %658 = sub i64 %399, %393
  store i64 %658, i64* %RDX, align 8, !tbaa !2428
  %659 = icmp ult i64 %399, %393
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %28, align 1, !tbaa !2432
  %661 = trunc i64 %658 to i32
  %662 = and i32 %661, 255
  %663 = tail call i32 @llvm.ctpop.i32(i32 %662) #12
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = xor i8 %665, 1
  store i8 %666, i8* %35, align 1, !tbaa !2446
  %667 = xor i64 %393, %399
  %668 = xor i64 %667, %658
  %669 = lshr i64 %668, 4
  %670 = trunc i64 %669 to i8
  %671 = and i8 %670, 1
  store i8 %671, i8* %40, align 1, !tbaa !2447
  %672 = icmp eq i64 %658, 0
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %43, align 1, !tbaa !2448
  %674 = lshr i64 %658, 63
  %675 = trunc i64 %674 to i8
  store i8 %675, i8* %46, align 1, !tbaa !2449
  %676 = lshr i64 %399, 63
  %677 = lshr i64 %393, 63
  %678 = xor i64 %677, %676
  %679 = xor i64 %674, %676
  %680 = add nuw nsw i64 %679, %678
  %681 = icmp eq i64 %680, 2
  %682 = zext i1 %681 to i8
  store i8 %682, i8* %52, align 1, !tbaa !2450
  %683 = add i64 %389, 22
  store i64 %683, i64* %PC, align 8
  store i64 %658, i64* %398, align 8
  %.pre60 = load i64, i64* %PC, align 8
  br label %block_4045d6

block_404195:                                     ; preds = %block_404183, %block_404149
  %684 = phi i64 [ %.pre47, %block_404183 ], [ %639, %block_404149 ]
  %685 = load i64, i64* %RBP, align 8
  %686 = add i64 %685, -80
  %687 = add i64 %684, 4
  store i64 %687, i64* %PC, align 8
  %688 = inttoptr i64 %686 to i64*
  %689 = load i64, i64* %688, align 8
  store i64 %689, i64* %RAX, align 8, !tbaa !2428
  %690 = add i64 %685, -144
  %691 = add i64 %684, 11
  store i64 %691, i64* %PC, align 8
  %692 = inttoptr i64 %690 to i64*
  store i64 %689, i64* %692, align 8
  %693 = load i64, i64* %RBP, align 8
  %694 = add i64 %693, -112
  %695 = load i64, i64* %PC, align 8
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC, align 8
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697, align 8
  store i64 %698, i64* %RAX, align 8, !tbaa !2428
  %699 = add i64 %693, -144
  %700 = add i64 %695, 11
  store i64 %700, i64* %PC, align 8
  %701 = inttoptr i64 %699 to i64*
  %702 = load i64, i64* %701, align 8
  store i64 %702, i64* %RCX, align 8, !tbaa !2428
  %703 = add i64 %695, 14
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %702 to i64*
  %705 = load i64, i64* %704, align 8
  %706 = add i64 %705, %698
  store i64 %706, i64* %RAX, align 8, !tbaa !2428
  %707 = icmp ult i64 %706, %698
  %708 = icmp ult i64 %706, %705
  %709 = or i1 %707, %708
  %710 = zext i1 %709 to i8
  store i8 %710, i8* %28, align 1, !tbaa !2432
  %711 = trunc i64 %706 to i32
  %712 = and i32 %711, 255
  %713 = tail call i32 @llvm.ctpop.i32(i32 %712) #12
  %714 = trunc i32 %713 to i8
  %715 = and i8 %714, 1
  %716 = xor i8 %715, 1
  store i8 %716, i8* %35, align 1, !tbaa !2446
  %717 = xor i64 %705, %698
  %718 = xor i64 %717, %706
  %719 = lshr i64 %718, 4
  %720 = trunc i64 %719 to i8
  %721 = and i8 %720, 1
  store i8 %721, i8* %40, align 1, !tbaa !2447
  %722 = icmp eq i64 %706, 0
  %723 = zext i1 %722 to i8
  store i8 %723, i8* %43, align 1, !tbaa !2448
  %724 = lshr i64 %706, 63
  %725 = trunc i64 %724 to i8
  store i8 %725, i8* %46, align 1, !tbaa !2449
  %726 = lshr i64 %698, 63
  %727 = lshr i64 %705, 63
  %728 = xor i64 %724, %726
  %729 = xor i64 %724, %727
  %730 = add nuw nsw i64 %728, %729
  %731 = icmp eq i64 %730, 2
  %732 = zext i1 %731 to i8
  store i8 %732, i8* %52, align 1, !tbaa !2450
  %733 = add i64 %695, 17
  store i64 %733, i64* %PC, align 8
  store i64 %706, i64* %704, align 8
  %.pre48 = load i64, i64* %PC, align 8
  br label %block_4041b1

block_404235:                                     ; preds = %block_404215
  %734 = add i64 %1228, -95
  store i64 %734, i64* %PC, align 8, !tbaa !2428
  br label %block_4041d6

block_404174:                                     ; preds = %block_404159
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %28, align 1, !tbaa !2432
  store i8 1, i8* %35, align 1, !tbaa !2446
  store i8 1, i8* %43, align 1, !tbaa !2448
  store i8 0, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  store i8 0, i8* %40, align 1, !tbaa !2447
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %735 = add i64 %1559, 8
  store i64 %735, i64* %PC, align 8
  %736 = load i64, i64* %.pre-phi67, align 8
  %737 = sub i64 0, %736
  store i64 %737, i64* %RCX, align 8, !tbaa !2428
  %738 = icmp ne i64 %736, 0
  %739 = zext i1 %738 to i8
  store i8 %739, i8* %28, align 1, !tbaa !2432
  %740 = trunc i64 %737 to i32
  %741 = and i32 %740, 255
  %742 = tail call i32 @llvm.ctpop.i32(i32 %741) #12
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  store i8 %745, i8* %35, align 1, !tbaa !2446
  %746 = xor i64 %736, %737
  %747 = lshr i64 %746, 4
  %748 = trunc i64 %747 to i8
  %749 = and i8 %748, 1
  store i8 %749, i8* %40, align 1, !tbaa !2447
  %750 = icmp eq i64 %736, 0
  %751 = zext i1 %750 to i8
  store i8 %751, i8* %43, align 1, !tbaa !2448
  %752 = lshr i64 %737, 63
  %753 = trunc i64 %752 to i8
  store i8 %753, i8* %46, align 1, !tbaa !2449
  %754 = lshr i64 %736, 63
  %755 = add nuw nsw i64 %752, %754
  %756 = icmp eq i64 %755, 2
  %757 = zext i1 %756 to i8
  store i8 %757, i8* %52, align 1, !tbaa !2450
  %758 = add i64 %148, -216
  %759 = add i64 %1559, 15
  store i64 %759, i64* %PC, align 8
  %760 = inttoptr i64 %758 to i64*
  store i64 %737, i64* %760, align 8
  %.pre46 = load i64, i64* %PC, align 8
  br label %block_404183

block_4041b1:                                     ; preds = %block_4041d6, %block_404195
  %761 = phi i64 [ %1737, %block_4041d6 ], [ %.pre48, %block_404195 ]
  %762 = load i64, i64* %RBP, align 8
  %763 = add i64 %762, -144
  %764 = add i64 %761, 7
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %763 to i64*
  %766 = load i64, i64* %765, align 8
  store i64 %766, i64* %RAX, align 8, !tbaa !2428
  %767 = add i64 %766, 16
  %768 = add i64 %761, 11
  store i64 %768, i64* %PC, align 8
  %769 = inttoptr i64 %767 to i64*
  %770 = load i64, i64* %769, align 8
  store i64 %770, i64* %RAX, align 8, !tbaa !2428
  %771 = add i64 %762, -152
  %772 = add i64 %761, 18
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %771 to i64*
  store i64 %770, i64* %773, align 8
  %774 = load i64, i64* %RBP, align 8
  %775 = add i64 %774, -152
  %776 = load i64, i64* %PC, align 8
  %777 = add i64 %776, 8
  store i64 %777, i64* %PC, align 8
  %778 = inttoptr i64 %775 to i64*
  %779 = load i64, i64* %778, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %780 = trunc i64 %779 to i32
  %781 = and i32 %780, 255
  %782 = tail call i32 @llvm.ctpop.i32(i32 %781) #12
  %783 = trunc i32 %782 to i8
  %784 = and i8 %783, 1
  %785 = xor i8 %784, 1
  store i8 %785, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %40, align 1, !tbaa !2447
  %786 = icmp eq i64 %779, 0
  %787 = zext i1 %786 to i8
  store i8 %787, i8* %43, align 1, !tbaa !2448
  %788 = lshr i64 %779, 63
  %789 = trunc i64 %788 to i8
  store i8 %789, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %.v77 = select i1 %786, i64 55, i64 14
  %790 = add i64 %776, %.v77
  %791 = add i64 %790, 5
  store i64 %791, i64* %PC, align 8, !tbaa !2428
  br i1 %786, label %block_4041ff.preheader, label %block_4041d6

block_4041ff.preheader:                           ; preds = %block_4041b1
  br label %block_4041ff

block_40456c:                                     ; preds = %block_4045d6, %block_404561
  %792 = phi i64 [ %1257, %block_4045d6 ], [ %.pre59, %block_404561 ]
  %793 = load i64, i64* %RBP, align 8
  %794 = add i64 %793, -152
  %795 = add i64 %792, 7
  store i64 %795, i64* %PC, align 8
  %796 = inttoptr i64 %794 to i64*
  %797 = load i64, i64* %796, align 8
  store i64 %797, i64* %RAX, align 8, !tbaa !2428
  %798 = add i64 %793, -96
  %799 = add i64 %792, 11
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %798 to i64*
  %801 = load i64, i64* %800, align 8
  %802 = sub i64 %797, %801
  %803 = icmp ult i64 %797, %801
  %804 = zext i1 %803 to i8
  store i8 %804, i8* %28, align 1, !tbaa !2432
  %805 = trunc i64 %802 to i32
  %806 = and i32 %805, 255
  %807 = tail call i32 @llvm.ctpop.i32(i32 %806) #12
  %808 = trunc i32 %807 to i8
  %809 = and i8 %808, 1
  %810 = xor i8 %809, 1
  store i8 %810, i8* %35, align 1, !tbaa !2446
  %811 = xor i64 %801, %797
  %812 = xor i64 %811, %802
  %813 = lshr i64 %812, 4
  %814 = trunc i64 %813 to i8
  %815 = and i8 %814, 1
  store i8 %815, i8* %40, align 1, !tbaa !2447
  %816 = icmp eq i64 %802, 0
  %817 = zext i1 %816 to i8
  store i8 %817, i8* %43, align 1, !tbaa !2448
  %818 = lshr i64 %802, 63
  %819 = trunc i64 %818 to i8
  store i8 %819, i8* %46, align 1, !tbaa !2449
  %820 = lshr i64 %797, 63
  %821 = lshr i64 %801, 63
  %822 = xor i64 %821, %820
  %823 = xor i64 %818, %820
  %824 = add nuw nsw i64 %823, %822
  %825 = icmp eq i64 %824, 2
  %826 = zext i1 %825 to i8
  store i8 %826, i8* %52, align 1, !tbaa !2450
  %.v82 = select i1 %816, i64 134, i64 17
  %827 = add i64 %792, %.v82
  store i64 %827, i64* %PC, align 8, !tbaa !2428
  br i1 %816, label %block_404691.loopexit122, label %block_40457d

block_4043c1:                                     ; preds = %block_40436e
  %828 = add i64 %628, %624
  store i64 %828, i64* %RAX, align 8, !tbaa !2428
  %829 = icmp ult i64 %828, %624
  %830 = icmp ult i64 %828, %628
  %831 = or i1 %829, %830
  %832 = zext i1 %831 to i8
  store i8 %832, i8* %28, align 1, !tbaa !2432
  %833 = trunc i64 %828 to i32
  %834 = and i32 %833, 255
  %835 = tail call i32 @llvm.ctpop.i32(i32 %834) #12
  %836 = trunc i32 %835 to i8
  %837 = and i8 %836, 1
  %838 = xor i8 %837, 1
  store i8 %838, i8* %35, align 1, !tbaa !2446
  %839 = xor i64 %628, %624
  %840 = xor i64 %839, %828
  %841 = lshr i64 %840, 4
  %842 = trunc i64 %841 to i8
  %843 = and i8 %842, 1
  store i8 %843, i8* %40, align 1, !tbaa !2447
  %844 = icmp eq i64 %828, 0
  %845 = zext i1 %844 to i8
  store i8 %845, i8* %43, align 1, !tbaa !2448
  %846 = lshr i64 %828, 63
  %847 = trunc i64 %846 to i8
  store i8 %847, i8* %46, align 1, !tbaa !2449
  %848 = lshr i64 %624, 63
  %849 = lshr i64 %628, 63
  %850 = xor i64 %846, %848
  %851 = xor i64 %846, %849
  %852 = add nuw nsw i64 %850, %851
  %853 = icmp eq i64 %852, 2
  %854 = zext i1 %853 to i8
  store i8 %854, i8* %52, align 1, !tbaa !2450
  %855 = add i64 %581, -200
  %856 = add i64 %616, 22
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %855 to i64*
  store i64 %828, i64* %857, align 8
  %858 = load i64, i64* %PC, align 8
  %859 = add i64 %858, 27
  store i64 %859, i64* %PC, align 8, !tbaa !2428
  br label %block_4043f2

block_40452f:                                     ; preds = %block_4044e9
  %860 = sub i64 %310, %304
  store i64 %860, i64* %RDX, align 8, !tbaa !2428
  %861 = icmp ult i64 %310, %304
  %862 = zext i1 %861 to i8
  store i8 %862, i8* %28, align 1, !tbaa !2432
  %863 = trunc i64 %860 to i32
  %864 = and i32 %863, 255
  %865 = tail call i32 @llvm.ctpop.i32(i32 %864) #12
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  %868 = xor i8 %867, 1
  store i8 %868, i8* %35, align 1, !tbaa !2446
  %869 = xor i64 %304, %310
  %870 = xor i64 %869, %860
  %871 = lshr i64 %870, 4
  %872 = trunc i64 %871 to i8
  %873 = and i8 %872, 1
  store i8 %873, i8* %40, align 1, !tbaa !2447
  %874 = icmp eq i64 %860, 0
  %875 = zext i1 %874 to i8
  store i8 %875, i8* %43, align 1, !tbaa !2448
  %876 = lshr i64 %860, 63
  %877 = trunc i64 %876 to i8
  store i8 %877, i8* %46, align 1, !tbaa !2449
  %878 = lshr i64 %310, 63
  %879 = lshr i64 %304, 63
  %880 = xor i64 %879, %878
  %881 = xor i64 %876, %878
  %882 = add nuw nsw i64 %881, %880
  %883 = icmp eq i64 %882, 2
  %884 = zext i1 %883 to i8
  store i8 %884, i8* %52, align 1, !tbaa !2450
  %885 = add i64 %300, 22
  store i64 %885, i64* %PC, align 8
  store i64 %860, i64* %309, align 8
  %.pre58 = load i64, i64* %PC, align 8
  br label %block_404545

block_4043dc:                                     ; preds = %block_40436e
  %886 = sub i64 %624, %628
  store i64 %886, i64* %RAX, align 8, !tbaa !2428
  %887 = icmp ult i64 %624, %628
  %888 = zext i1 %887 to i8
  store i8 %888, i8* %28, align 1, !tbaa !2432
  %889 = trunc i64 %886 to i32
  %890 = and i32 %889, 255
  %891 = tail call i32 @llvm.ctpop.i32(i32 %890) #12
  %892 = trunc i32 %891 to i8
  %893 = and i8 %892, 1
  %894 = xor i8 %893, 1
  store i8 %894, i8* %35, align 1, !tbaa !2446
  %895 = xor i64 %628, %624
  %896 = xor i64 %895, %886
  %897 = lshr i64 %896, 4
  %898 = trunc i64 %897 to i8
  %899 = and i8 %898, 1
  store i8 %899, i8* %40, align 1, !tbaa !2447
  %900 = icmp eq i64 %886, 0
  %901 = zext i1 %900 to i8
  store i8 %901, i8* %43, align 1, !tbaa !2448
  %902 = lshr i64 %886, 63
  %903 = trunc i64 %902 to i8
  store i8 %903, i8* %46, align 1, !tbaa !2449
  %904 = lshr i64 %624, 63
  %905 = lshr i64 %628, 63
  %906 = xor i64 %905, %904
  %907 = xor i64 %902, %904
  %908 = add nuw nsw i64 %907, %906
  %909 = icmp eq i64 %908, 2
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %52, align 1, !tbaa !2450
  %911 = add i64 %581, -200
  %912 = add i64 %616, 22
  store i64 %912, i64* %PC, align 8
  %913 = inttoptr i64 %911 to i64*
  store i64 %886, i64* %913, align 8
  %.pre56 = load i64, i64* %PC, align 8
  br label %block_4043f2

block_4042ab:                                     ; preds = %block_40429a
  %914 = add i64 %1091, 7
  store i64 %914, i64* %PC, align 8
  %915 = load i64, i64* %1060, align 8
  store i64 %915, i64* %RAX, align 8, !tbaa !2428
  %916 = add i64 %915, 32
  %917 = add i64 %1091, 12
  store i64 %917, i64* %PC, align 8
  %918 = inttoptr i64 %916 to i64*
  %919 = load i64, i64* %918, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %920 = trunc i64 %919 to i32
  %921 = and i32 %920, 255
  %922 = tail call i32 @llvm.ctpop.i32(i32 %921) #12
  %923 = trunc i32 %922 to i8
  %924 = and i8 %923, 1
  %925 = xor i8 %924, 1
  store i8 %925, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %40, align 1, !tbaa !2447
  %926 = icmp eq i64 %919, 0
  %927 = zext i1 %926 to i8
  store i8 %927, i8* %43, align 1, !tbaa !2448
  %928 = lshr i64 %919, 63
  %929 = trunc i64 %928 to i8
  store i8 %929, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %.v79 = select i1 %926, i64 44, i64 18
  %930 = add i64 %1091, %.v79
  store i64 %930, i64* %PC, align 8, !tbaa !2428
  br i1 %926, label %block_4042d7, label %block_4042bd

block_40412a:                                     ; preds = %block_40411f
  %931 = add i64 %1685, 4
  store i64 %931, i64* %PC, align 8
  %932 = load i64, i64* %.pre-phi63, align 8
  store i64 %932, i64* %RAX, align 8, !tbaa !2428
  %933 = add i64 %148, -208
  %934 = add i64 %1685, 11
  store i64 %934, i64* %PC, align 8
  %935 = inttoptr i64 %933 to i64*
  store i64 %932, i64* %935, align 8
  %936 = load i64, i64* %PC, align 8
  %937 = add i64 %936, 20
  store i64 %937, i64* %PC, align 8, !tbaa !2428
  br label %block_404149

block_40431e:                                     ; preds = %block_404308, %block_4042e9
  %938 = phi i64 [ %.pre53, %block_404308 ], [ %1627, %block_4042e9 ]
  %939 = load i64, i64* %RBP, align 8
  %940 = add i64 %939, -160
  %941 = add i64 %938, 7
  store i64 %941, i64* %PC, align 8
  %942 = inttoptr i64 %940 to i64*
  %943 = load i64, i64* %942, align 8
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = add i64 %939, -152
  %945 = add i64 %938, 14
  store i64 %945, i64* %PC, align 8
  %946 = inttoptr i64 %944 to i64*
  %947 = load i64, i64* %946, align 8
  store i64 %947, i64* %RCX, align 8, !tbaa !2428
  %948 = add i64 %947, 24
  %949 = add i64 %938, 18
  store i64 %949, i64* %PC, align 8
  %950 = inttoptr i64 %948 to i64*
  store i64 %943, i64* %950, align 8
  %951 = load i64, i64* %RBP, align 8
  %952 = add i64 %951, -160
  %953 = load i64, i64* %PC, align 8
  %954 = add i64 %953, 7
  store i64 %954, i64* %PC, align 8
  %955 = inttoptr i64 %952 to i64*
  %956 = load i64, i64* %955, align 8
  store i64 %956, i64* %RAX, align 8, !tbaa !2428
  %957 = add i64 %956, 16
  %958 = add i64 %953, 11
  store i64 %958, i64* %PC, align 8
  %959 = inttoptr i64 %957 to i64*
  %960 = load i64, i64* %959, align 8
  store i64 %960, i64* %RAX, align 8, !tbaa !2428
  %961 = add i64 %951, -152
  %962 = add i64 %953, 18
  store i64 %962, i64* %PC, align 8
  %963 = inttoptr i64 %961 to i64*
  %964 = load i64, i64* %963, align 8
  store i64 %964, i64* %RCX, align 8, !tbaa !2428
  %965 = add i64 %964, 32
  %966 = add i64 %953, 22
  store i64 %966, i64* %PC, align 8
  %967 = inttoptr i64 %965 to i64*
  store i64 %960, i64* %967, align 8
  %968 = load i64, i64* %RBP, align 8
  %969 = add i64 %968, -152
  %970 = load i64, i64* %PC, align 8
  %971 = add i64 %970, 7
  store i64 %971, i64* %PC, align 8
  %972 = inttoptr i64 %969 to i64*
  %973 = load i64, i64* %972, align 8
  store i64 %973, i64* %RAX, align 8, !tbaa !2428
  %974 = add i64 %973, 32
  %975 = add i64 %970, 12
  store i64 %975, i64* %PC, align 8
  %976 = inttoptr i64 %974 to i64*
  %977 = load i64, i64* %976, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %978 = trunc i64 %977 to i32
  %979 = and i32 %978, 255
  %980 = tail call i32 @llvm.ctpop.i32(i32 %979) #12
  %981 = trunc i32 %980 to i8
  %982 = and i8 %981, 1
  %983 = xor i8 %982, 1
  store i8 %983, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %40, align 1, !tbaa !2447
  %984 = icmp eq i64 %977, 0
  %985 = zext i1 %984 to i8
  store i8 %985, i8* %43, align 1, !tbaa !2448
  %986 = lshr i64 %977, 63
  %987 = trunc i64 %986 to i8
  store i8 %987, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %.v80 = select i1 %984, i64 40, i64 18
  %988 = add i64 %970, %.v80
  store i64 %988, i64* %PC, align 8, !tbaa !2428
  br i1 %984, label %block_40436e, label %block_404358

block_4042d7:                                     ; preds = %block_4042bd, %block_4042ab
  %989 = phi i64 [ %.pre52, %block_4042bd ], [ %930, %block_4042ab ]
  %990 = phi i64 [ %.pre51, %block_4042bd ], [ %1057, %block_4042ab ]
  %991 = add i64 %990, -152
  %992 = add i64 %989, 7
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %991 to i64*
  %994 = load i64, i64* %993, align 8
  store i64 %994, i64* %RAX, align 8, !tbaa !2428
  %995 = add i64 %994, 40
  %996 = add i64 %989, 12
  store i64 %996, i64* %PC, align 8
  %997 = inttoptr i64 %995 to i64*
  %998 = load i64, i64* %997, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %999 = trunc i64 %998 to i32
  %1000 = and i32 %999, 255
  %1001 = tail call i32 @llvm.ctpop.i32(i32 %1000) #12
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  store i8 %1004, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %40, align 1, !tbaa !2447
  %1005 = icmp eq i64 %998, 0
  %1006 = zext i1 %1005 to i8
  store i8 %1006, i8* %43, align 1, !tbaa !2448
  %1007 = lshr i64 %998, 63
  %1008 = trunc i64 %1007 to i8
  store i8 %1008, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %.v69 = select i1 %1005, i64 49, i64 18
  %1009 = add i64 %989, %.v69
  %1010 = add i64 %1009, 7
  store i64 %1010, i64* %PC, align 8
  %1011 = load i64, i64* %993, align 8
  store i64 %1011, i64* %RAX, align 8, !tbaa !2428
  %1012 = add i64 %1011, 32
  %1013 = add i64 %1009, 11
  store i64 %1013, i64* %PC, align 8
  %1014 = inttoptr i64 %1012 to i64*
  %1015 = load i64, i64* %1014, align 8
  store i64 %1015, i64* %RAX, align 8, !tbaa !2428
  br i1 %1005, label %block_404308, label %block_4042e9

block_4044bf:                                     ; preds = %block_40429a
  %1016 = add i64 %1057, -48
  %1017 = add i64 %1091, 4
  store i64 %1017, i64* %PC, align 8
  %1018 = inttoptr i64 %1016 to i64*
  %1019 = load i64, i64* %1018, align 8
  store i64 %1019, i64* %RAX, align 8, !tbaa !2428
  %1020 = add i64 %1057, -120
  %1021 = add i64 %1091, 8
  store i64 %1021, i64* %PC, align 8
  %1022 = inttoptr i64 %1020 to i64*
  %1023 = load i64, i64* %1022, align 8
  %1024 = sub i64 %1019, %1023
  %1025 = icmp ult i64 %1019, %1023
  %1026 = zext i1 %1025 to i8
  store i8 %1026, i8* %28, align 1, !tbaa !2432
  %1027 = trunc i64 %1024 to i32
  %1028 = and i32 %1027, 255
  %1029 = tail call i32 @llvm.ctpop.i32(i32 %1028) #12
  %1030 = trunc i32 %1029 to i8
  %1031 = and i8 %1030, 1
  %1032 = xor i8 %1031, 1
  store i8 %1032, i8* %35, align 1, !tbaa !2446
  %1033 = xor i64 %1023, %1019
  %1034 = xor i64 %1033, %1024
  %1035 = lshr i64 %1034, 4
  %1036 = trunc i64 %1035 to i8
  %1037 = and i8 %1036, 1
  store i8 %1037, i8* %40, align 1, !tbaa !2447
  %1038 = icmp eq i64 %1024, 0
  %1039 = zext i1 %1038 to i8
  store i8 %1039, i8* %43, align 1, !tbaa !2448
  %1040 = lshr i64 %1024, 63
  %1041 = trunc i64 %1040 to i8
  store i8 %1041, i8* %46, align 1, !tbaa !2449
  %1042 = lshr i64 %1019, 63
  %1043 = lshr i64 %1023, 63
  %1044 = xor i64 %1043, %1042
  %1045 = xor i64 %1040, %1042
  %1046 = add nuw nsw i64 %1045, %1044
  %1047 = icmp eq i64 %1046, 2
  %1048 = zext i1 %1047 to i8
  store i8 %1048, i8* %52, align 1, !tbaa !2450
  %1049 = icmp ne i8 %1041, 0
  %1050 = xor i1 %1049, %1047
  %1051 = or i1 %1038, %1050
  %.v71 = select i1 %1051, i64 312, i64 14
  %1052 = add i64 %1091, %.v71
  %1053 = add i64 %1052, 4
  store i64 %1053, i64* %PC, align 8
  %1054 = load i64, i64* %1064, align 8
  store i64 %1054, i64* %RAX, align 8, !tbaa !2428
  %1055 = add i64 %1052, 11
  store i64 %1055, i64* %PC, align 8
  store i64 %1054, i64* %1060, align 8
  %.pre61 = load i64, i64* %PC, align 8
  br i1 %1051, label %block_404602.preheader, label %block_4044d8.preheader

block_4044d8.preheader:                           ; preds = %block_4044bf
  br label %block_4044d8

block_404602.preheader:                           ; preds = %block_4044bf
  br label %block_404602

block_40429a:                                     ; preds = %block_404210, %block_4043f2
  %1056 = phi i64 [ %.pre50, %block_404210 ], [ %1499, %block_4043f2 ]
  %1057 = load i64, i64* %RBP, align 8
  %1058 = add i64 %1057, -152
  %1059 = add i64 %1056, 7
  store i64 %1059, i64* %PC, align 8
  %1060 = inttoptr i64 %1058 to i64*
  %1061 = load i64, i64* %1060, align 8
  store i64 %1061, i64* %RAX, align 8, !tbaa !2428
  %1062 = add i64 %1057, -88
  %1063 = add i64 %1056, 11
  store i64 %1063, i64* %PC, align 8
  %1064 = inttoptr i64 %1062 to i64*
  %1065 = load i64, i64* %1064, align 8
  %1066 = sub i64 %1061, %1065
  %1067 = icmp ult i64 %1061, %1065
  %1068 = zext i1 %1067 to i8
  store i8 %1068, i8* %28, align 1, !tbaa !2432
  %1069 = trunc i64 %1066 to i32
  %1070 = and i32 %1069, 255
  %1071 = tail call i32 @llvm.ctpop.i32(i32 %1070) #12
  %1072 = trunc i32 %1071 to i8
  %1073 = and i8 %1072, 1
  %1074 = xor i8 %1073, 1
  store i8 %1074, i8* %35, align 1, !tbaa !2446
  %1075 = xor i64 %1065, %1061
  %1076 = xor i64 %1075, %1066
  %1077 = lshr i64 %1076, 4
  %1078 = trunc i64 %1077 to i8
  %1079 = and i8 %1078, 1
  store i8 %1079, i8* %40, align 1, !tbaa !2447
  %1080 = icmp eq i64 %1066, 0
  %1081 = zext i1 %1080 to i8
  store i8 %1081, i8* %43, align 1, !tbaa !2448
  %1082 = lshr i64 %1066, 63
  %1083 = trunc i64 %1082 to i8
  store i8 %1083, i8* %46, align 1, !tbaa !2449
  %1084 = lshr i64 %1061, 63
  %1085 = lshr i64 %1065, 63
  %1086 = xor i64 %1085, %1084
  %1087 = xor i64 %1082, %1084
  %1088 = add nuw nsw i64 %1087, %1086
  %1089 = icmp eq i64 %1088, 2
  %1090 = zext i1 %1089 to i8
  store i8 %1090, i8* %52, align 1, !tbaa !2450
  %.v72 = select i1 %1080, i64 549, i64 17
  %1091 = add i64 %1056, %.v72
  store i64 %1091, i64* %PC, align 8, !tbaa !2428
  br i1 %1080, label %block_4044bf, label %block_4042ab

block_404517:                                     ; preds = %block_4044e9
  %1092 = add i64 %310, %304
  store i64 %1092, i64* %RAX, align 8, !tbaa !2428
  %1093 = icmp ult i64 %1092, %304
  %1094 = icmp ult i64 %1092, %310
  %1095 = or i1 %1093, %1094
  %1096 = zext i1 %1095 to i8
  store i8 %1096, i8* %28, align 1, !tbaa !2432
  %1097 = trunc i64 %1092 to i32
  %1098 = and i32 %1097, 255
  %1099 = tail call i32 @llvm.ctpop.i32(i32 %1098) #12
  %1100 = trunc i32 %1099 to i8
  %1101 = and i8 %1100, 1
  %1102 = xor i8 %1101, 1
  store i8 %1102, i8* %35, align 1, !tbaa !2446
  %1103 = xor i64 %310, %304
  %1104 = xor i64 %1103, %1092
  %1105 = lshr i64 %1104, 4
  %1106 = trunc i64 %1105 to i8
  %1107 = and i8 %1106, 1
  store i8 %1107, i8* %40, align 1, !tbaa !2447
  %1108 = icmp eq i64 %1092, 0
  %1109 = zext i1 %1108 to i8
  store i8 %1109, i8* %43, align 1, !tbaa !2448
  %1110 = lshr i64 %1092, 63
  %1111 = trunc i64 %1110 to i8
  store i8 %1111, i8* %46, align 1, !tbaa !2449
  %1112 = lshr i64 %304, 63
  %1113 = lshr i64 %310, 63
  %1114 = xor i64 %1110, %1112
  %1115 = xor i64 %1110, %1113
  %1116 = add nuw nsw i64 %1114, %1115
  %1117 = icmp eq i64 %1116, 2
  %1118 = zext i1 %1117 to i8
  store i8 %1118, i8* %52, align 1, !tbaa !2450
  %1119 = add i64 %300, 19
  store i64 %1119, i64* %PC, align 8
  store i64 %1092, i64* %309, align 8
  %1120 = load i64, i64* %PC, align 8
  %1121 = add i64 %1120, 27
  store i64 %1121, i64* %PC, align 8, !tbaa !2428
  br label %block_404545

block_40465f:                                     ; preds = %block_40464e
  %1122 = add i64 %460, -184
  %1123 = add i64 %494, 7
  store i64 %1123, i64* %PC, align 8
  %1124 = inttoptr i64 %1122 to i64*
  %1125 = load i64, i64* %1124, align 8
  store i64 %1125, i64* %RAX, align 8, !tbaa !2428
  %1126 = add i64 %494, 14
  store i64 %1126, i64* %PC, align 8
  %1127 = load i64, i64* %463, align 8
  store i64 %1127, i64* %RCX, align 8, !tbaa !2428
  %1128 = add i64 %1127, 88
  %1129 = add i64 %494, 18
  store i64 %1129, i64* %PC, align 8
  %1130 = inttoptr i64 %1128 to i64*
  %1131 = load i64, i64* %1130, align 8
  %1132 = add i64 %1131, %1125
  store i64 %1132, i64* %RAX, align 8, !tbaa !2428
  %1133 = icmp ult i64 %1132, %1125
  %1134 = icmp ult i64 %1132, %1131
  %1135 = or i1 %1133, %1134
  %1136 = zext i1 %1135 to i8
  store i8 %1136, i8* %28, align 1, !tbaa !2432
  %1137 = trunc i64 %1132 to i32
  %1138 = and i32 %1137, 255
  %1139 = tail call i32 @llvm.ctpop.i32(i32 %1138) #12
  %1140 = trunc i32 %1139 to i8
  %1141 = and i8 %1140, 1
  %1142 = xor i8 %1141, 1
  store i8 %1142, i8* %35, align 1, !tbaa !2446
  %1143 = xor i64 %1131, %1125
  %1144 = xor i64 %1143, %1132
  %1145 = lshr i64 %1144, 4
  %1146 = trunc i64 %1145 to i8
  %1147 = and i8 %1146, 1
  store i8 %1147, i8* %40, align 1, !tbaa !2447
  %1148 = icmp eq i64 %1132, 0
  %1149 = zext i1 %1148 to i8
  store i8 %1149, i8* %43, align 1, !tbaa !2448
  %1150 = lshr i64 %1132, 63
  %1151 = trunc i64 %1150 to i8
  store i8 %1151, i8* %46, align 1, !tbaa !2449
  %1152 = lshr i64 %1125, 63
  %1153 = lshr i64 %1131, 63
  %1154 = xor i64 %1150, %1152
  %1155 = xor i64 %1150, %1153
  %1156 = add nuw nsw i64 %1154, %1155
  %1157 = icmp eq i64 %1156, 2
  %1158 = zext i1 %1157 to i8
  store i8 %1158, i8* %52, align 1, !tbaa !2450
  %1159 = add i64 %494, 22
  store i64 %1159, i64* %PC, align 8
  store i64 %1132, i64* %1130, align 8
  %1160 = load i64, i64* %RBP, align 8
  %1161 = add i64 %1160, -152
  %1162 = load i64, i64* %PC, align 8
  %1163 = add i64 %1162, 7
  store i64 %1163, i64* %PC, align 8
  %1164 = inttoptr i64 %1161 to i64*
  %1165 = load i64, i64* %1164, align 8
  store i64 %1165, i64* %RAX, align 8, !tbaa !2428
  %1166 = add i64 %1165, 24
  %1167 = add i64 %1162, 11
  store i64 %1167, i64* %PC, align 8
  %1168 = inttoptr i64 %1166 to i64*
  %1169 = load i64, i64* %1168, align 8
  store i64 %1169, i64* %RAX, align 8, !tbaa !2428
  %1170 = add i64 %1162, 18
  store i64 %1170, i64* %PC, align 8
  store i64 %1169, i64* %1164, align 8
  %1171 = load i64, i64* %PC, align 8
  %1172 = add i64 %1171, -57
  store i64 %1172, i64* %PC, align 8, !tbaa !2428
  br label %block_40464e

block_4045a8:                                     ; preds = %block_40457d
  %1173 = add i64 %399, %393
  store i64 %1173, i64* %RAX, align 8, !tbaa !2428
  %1174 = icmp ult i64 %1173, %393
  %1175 = icmp ult i64 %1173, %399
  %1176 = or i1 %1174, %1175
  %1177 = zext i1 %1176 to i8
  store i8 %1177, i8* %28, align 1, !tbaa !2432
  %1178 = trunc i64 %1173 to i32
  %1179 = and i32 %1178, 255
  %1180 = tail call i32 @llvm.ctpop.i32(i32 %1179) #12
  %1181 = trunc i32 %1180 to i8
  %1182 = and i8 %1181, 1
  %1183 = xor i8 %1182, 1
  store i8 %1183, i8* %35, align 1, !tbaa !2446
  %1184 = xor i64 %399, %393
  %1185 = xor i64 %1184, %1173
  %1186 = lshr i64 %1185, 4
  %1187 = trunc i64 %1186 to i8
  %1188 = and i8 %1187, 1
  store i8 %1188, i8* %40, align 1, !tbaa !2447
  %1189 = icmp eq i64 %1173, 0
  %1190 = zext i1 %1189 to i8
  store i8 %1190, i8* %43, align 1, !tbaa !2448
  %1191 = lshr i64 %1173, 63
  %1192 = trunc i64 %1191 to i8
  store i8 %1192, i8* %46, align 1, !tbaa !2449
  %1193 = lshr i64 %393, 63
  %1194 = lshr i64 %399, 63
  %1195 = xor i64 %1191, %1193
  %1196 = xor i64 %1191, %1194
  %1197 = add nuw nsw i64 %1195, %1196
  %1198 = icmp eq i64 %1197, 2
  %1199 = zext i1 %1198 to i8
  store i8 %1199, i8* %52, align 1, !tbaa !2450
  %1200 = add i64 %389, 19
  store i64 %1200, i64* %PC, align 8
  store i64 %1173, i64* %398, align 8
  %1201 = load i64, i64* %PC, align 8
  %1202 = add i64 %1201, 27
  store i64 %1202, i64* %PC, align 8, !tbaa !2428
  br label %block_4045d6

block_404215:                                     ; preds = %block_4041ff
  %1203 = add i64 %223, 7
  store i64 %1203, i64* %PC, align 8
  %1204 = load i64, i64* %192, align 8
  store i64 %1204, i64* %RAX, align 8, !tbaa !2428
  %1205 = add i64 %1204, 32
  %1206 = add i64 %223, 11
  store i64 %1206, i64* %PC, align 8
  %1207 = inttoptr i64 %1205 to i64*
  %1208 = load i64, i64* %1207, align 8
  store i64 %1208, i64* %RAX, align 8, !tbaa !2428
  %1209 = add i64 %189, -152
  %1210 = add i64 %223, 18
  store i64 %1210, i64* %PC, align 8
  %1211 = inttoptr i64 %1209 to i64*
  store i64 %1208, i64* %1211, align 8
  %1212 = load i64, i64* %RBP, align 8
  %1213 = add i64 %1212, -152
  %1214 = load i64, i64* %PC, align 8
  %1215 = add i64 %1214, 8
  store i64 %1215, i64* %PC, align 8
  %1216 = inttoptr i64 %1213 to i64*
  %1217 = load i64, i64* %1216, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %1218 = trunc i64 %1217 to i32
  %1219 = and i32 %1218, 255
  %1220 = tail call i32 @llvm.ctpop.i32(i32 %1219) #12
  %1221 = trunc i32 %1220 to i8
  %1222 = and i8 %1221, 1
  %1223 = xor i8 %1222, 1
  store i8 %1223, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %40, align 1, !tbaa !2447
  %1224 = icmp eq i64 %1217, 0
  %1225 = zext i1 %1224 to i8
  store i8 %1225, i8* %43, align 1, !tbaa !2448
  %1226 = lshr i64 %1217, 63
  %1227 = trunc i64 %1226 to i8
  store i8 %1227, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %.v78 = select i1 %1224, i64 19, i64 14
  %1228 = add i64 %1214, %.v78
  store i64 %1228, i64* %PC, align 8, !tbaa !2428
  br i1 %1224, label %block_40423a, label %block_404235

block_404114:                                     ; preds = %block_404102
  %1229 = add i64 %1815, 5
  store i64 %1229, i64* %PC, align 8
  %1230 = inttoptr i64 %1816 to i64*
  %1231 = load i64, i64* %1230, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %1232 = trunc i64 %1231 to i32
  %1233 = and i32 %1232, 255
  %1234 = tail call i32 @llvm.ctpop.i32(i32 %1233) #12
  %1235 = trunc i32 %1234 to i8
  %1236 = and i8 %1235, 1
  %1237 = xor i8 %1236, 1
  store i8 %1237, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %40, align 1, !tbaa !2447
  %1238 = icmp eq i64 %1231, 0
  %1239 = zext i1 %1238 to i8
  store i8 %1239, i8* %43, align 1, !tbaa !2448
  %1240 = lshr i64 %1231, 63
  %1241 = trunc i64 %1240 to i8
  store i8 %1241, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %1242 = icmp ne i8 %1241, 0
  %1243 = or i1 %1238, %1242
  %.v85 = select i1 %1243, i64 69, i64 11
  %1244 = add i64 %1815, %.v85
  store i64 %1244, i64* %PC, align 8, !tbaa !2428
  br i1 %1243, label %block_404159, label %block_40411f

block_4045d6:                                     ; preds = %block_4045a8, %block_4045c0
  %1245 = phi i64 [ %1202, %block_4045a8 ], [ %.pre60, %block_4045c0 ]
  %1246 = load i64, i64* %RBP, align 8
  %1247 = add i64 %1246, -152
  %1248 = add i64 %1245, 12
  store i64 %1248, i64* %PC, align 8
  %1249 = inttoptr i64 %1247 to i64*
  %1250 = load i64, i64* %1249, align 8
  store i64 %1250, i64* %RAX, align 8, !tbaa !2428
  %1251 = add i64 %1250, 24
  %1252 = add i64 %1245, 16
  store i64 %1252, i64* %PC, align 8
  %1253 = inttoptr i64 %1251 to i64*
  %1254 = load i64, i64* %1253, align 8
  store i64 %1254, i64* %RAX, align 8, !tbaa !2428
  %1255 = add i64 %1245, 23
  store i64 %1255, i64* %PC, align 8
  store i64 %1254, i64* %1249, align 8
  %1256 = load i64, i64* %PC, align 8
  %1257 = add i64 %1256, -129
  store i64 %1257, i64* %PC, align 8, !tbaa !2428
  br label %block_40456c

block_4042bd:                                     ; preds = %block_4042ab
  %1258 = add i64 %930, 7
  store i64 %1258, i64* %PC, align 8
  %1259 = load i64, i64* %1060, align 8
  store i64 %1259, i64* %RAX, align 8, !tbaa !2428
  %1260 = add i64 %1259, 40
  %1261 = add i64 %930, 11
  store i64 %1261, i64* %PC, align 8
  %1262 = inttoptr i64 %1260 to i64*
  %1263 = load i64, i64* %1262, align 8
  store i64 %1263, i64* %RAX, align 8, !tbaa !2428
  %1264 = add i64 %930, 18
  store i64 %1264, i64* %PC, align 8
  %1265 = load i64, i64* %1060, align 8
  store i64 %1265, i64* %RCX, align 8, !tbaa !2428
  %1266 = add i64 %1265, 32
  %1267 = add i64 %930, 22
  store i64 %1267, i64* %PC, align 8
  %1268 = inttoptr i64 %1266 to i64*
  %1269 = load i64, i64* %1268, align 8
  store i64 %1269, i64* %RCX, align 8, !tbaa !2428
  %1270 = add i64 %1269, 40
  %1271 = add i64 %930, 26
  store i64 %1271, i64* %PC, align 8
  %1272 = inttoptr i64 %1270 to i64*
  store i64 %1263, i64* %1272, align 8
  %.pre51 = load i64, i64* %RBP, align 8
  %.pre52 = load i64, i64* %PC, align 8
  br label %block_4042d7

block_404613:                                     ; preds = %block_404602
  %1273 = add i64 %1629, -184
  %1274 = add i64 %1663, 7
  store i64 %1274, i64* %PC, align 8
  %1275 = inttoptr i64 %1273 to i64*
  %1276 = load i64, i64* %1275, align 8
  store i64 %1276, i64* %RAX, align 8, !tbaa !2428
  %1277 = add i64 %1663, 14
  store i64 %1277, i64* %PC, align 8
  %1278 = load i64, i64* %1632, align 8
  store i64 %1278, i64* %RCX, align 8, !tbaa !2428
  %1279 = add i64 %1278, 88
  %1280 = add i64 %1663, 18
  store i64 %1280, i64* %PC, align 8
  %1281 = inttoptr i64 %1279 to i64*
  %1282 = load i64, i64* %1281, align 8
  %1283 = sub i64 %1282, %1276
  store i64 %1283, i64* %RDX, align 8, !tbaa !2428
  %1284 = icmp ult i64 %1282, %1276
  %1285 = zext i1 %1284 to i8
  store i8 %1285, i8* %28, align 1, !tbaa !2432
  %1286 = trunc i64 %1283 to i32
  %1287 = and i32 %1286, 255
  %1288 = tail call i32 @llvm.ctpop.i32(i32 %1287) #12
  %1289 = trunc i32 %1288 to i8
  %1290 = and i8 %1289, 1
  %1291 = xor i8 %1290, 1
  store i8 %1291, i8* %35, align 1, !tbaa !2446
  %1292 = xor i64 %1276, %1282
  %1293 = xor i64 %1292, %1283
  %1294 = lshr i64 %1293, 4
  %1295 = trunc i64 %1294 to i8
  %1296 = and i8 %1295, 1
  store i8 %1296, i8* %40, align 1, !tbaa !2447
  %1297 = icmp eq i64 %1283, 0
  %1298 = zext i1 %1297 to i8
  store i8 %1298, i8* %43, align 1, !tbaa !2448
  %1299 = lshr i64 %1283, 63
  %1300 = trunc i64 %1299 to i8
  store i8 %1300, i8* %46, align 1, !tbaa !2449
  %1301 = lshr i64 %1282, 63
  %1302 = lshr i64 %1276, 63
  %1303 = xor i64 %1302, %1301
  %1304 = xor i64 %1299, %1301
  %1305 = add nuw nsw i64 %1304, %1303
  %1306 = icmp eq i64 %1305, 2
  %1307 = zext i1 %1306 to i8
  store i8 %1307, i8* %52, align 1, !tbaa !2450
  %1308 = add i64 %1663, 25
  store i64 %1308, i64* %PC, align 8
  store i64 %1283, i64* %1281, align 8
  %1309 = load i64, i64* %RBP, align 8
  %1310 = add i64 %1309, -152
  %1311 = load i64, i64* %PC, align 8
  %1312 = add i64 %1311, 7
  store i64 %1312, i64* %PC, align 8
  %1313 = inttoptr i64 %1310 to i64*
  %1314 = load i64, i64* %1313, align 8
  store i64 %1314, i64* %RAX, align 8, !tbaa !2428
  %1315 = add i64 %1314, 24
  %1316 = add i64 %1311, 11
  store i64 %1316, i64* %PC, align 8
  %1317 = inttoptr i64 %1315 to i64*
  %1318 = load i64, i64* %1317, align 8
  store i64 %1318, i64* %RAX, align 8, !tbaa !2428
  %1319 = add i64 %1311, 18
  store i64 %1319, i64* %PC, align 8
  store i64 %1318, i64* %1313, align 8
  %1320 = load i64, i64* %PC, align 8
  %1321 = add i64 %1320, -60
  store i64 %1321, i64* %PC, align 8, !tbaa !2428
  br label %block_404602

block_4043f2:                                     ; preds = %block_4043dc, %block_4043c1
  %1322 = phi i64 [ %.pre56, %block_4043dc ], [ %859, %block_4043c1 ]
  %1323 = load i64, i64* %RBP, align 8
  %1324 = add i64 %1323, -152
  %1325 = add i64 %1322, 7
  store i64 %1325, i64* %PC, align 8
  %1326 = inttoptr i64 %1324 to i64*
  %1327 = load i64, i64* %1326, align 8
  store i64 %1327, i64* %RAX, align 8, !tbaa !2428
  %1328 = add i64 %1327, 48
  %1329 = add i64 %1322, 11
  store i64 %1329, i64* %PC, align 8
  %1330 = inttoptr i64 %1328 to i64*
  %1331 = load i64, i64* %1330, align 8
  store i64 %1331, i64* %RAX, align 8, !tbaa !2428
  %1332 = add i64 %1323, -128
  %1333 = add i64 %1322, 15
  store i64 %1333, i64* %PC, align 8
  %1334 = inttoptr i64 %1332 to i64*
  store i64 %1331, i64* %1334, align 8
  %1335 = load i64, i64* %RBP, align 8
  %1336 = add i64 %1335, -152
  %1337 = load i64, i64* %PC, align 8
  %1338 = add i64 %1337, 7
  store i64 %1338, i64* %PC, align 8
  %1339 = inttoptr i64 %1336 to i64*
  %1340 = load i64, i64* %1339, align 8
  store i64 %1340, i64* %RAX, align 8, !tbaa !2428
  %1341 = add i64 %1340, 88
  %1342 = add i64 %1337, 11
  store i64 %1342, i64* %PC, align 8
  %1343 = inttoptr i64 %1341 to i64*
  %1344 = load i64, i64* %1343, align 8
  store i64 %1344, i64* %RAX, align 8, !tbaa !2428
  %1345 = add i64 %1335, -176
  %1346 = add i64 %1337, 18
  store i64 %1346, i64* %PC, align 8
  %1347 = inttoptr i64 %1345 to i64*
  store i64 %1344, i64* %1347, align 8
  %1348 = load i64, i64* %RBP, align 8
  %1349 = add i64 %1348, -40
  %1350 = load i64, i64* %PC, align 8
  %1351 = add i64 %1350, 4
  store i64 %1351, i64* %PC, align 8
  %1352 = inttoptr i64 %1349 to i64*
  %1353 = load i64, i64* %1352, align 8
  store i64 %1353, i64* %RAX, align 8, !tbaa !2428
  %1354 = trunc i64 %1353 to i32
  %1355 = and i64 %1353, 4294967295
  store i64 %1355, i64* %RCX, align 8, !tbaa !2428
  %1356 = add i64 %1348, -152
  %1357 = add i64 %1350, 13
  store i64 %1357, i64* %PC, align 8
  %1358 = inttoptr i64 %1356 to i64*
  %1359 = load i64, i64* %1358, align 8
  store i64 %1359, i64* %RAX, align 8, !tbaa !2428
  %1360 = add i64 %1359, 8
  %1361 = add i64 %1350, 16
  store i64 %1361, i64* %PC, align 8
  %1362 = inttoptr i64 %1360 to i32*
  store i32 %1354, i32* %1362, align 4
  %1363 = load i64, i64* %RBP, align 8
  %1364 = add i64 %1363, -56
  %1365 = load i64, i64* %PC, align 8
  %1366 = add i64 %1365, 4
  store i64 %1366, i64* %PC, align 8
  %1367 = inttoptr i64 %1364 to i64*
  %1368 = load i64, i64* %1367, align 8
  store i64 %1368, i64* %RAX, align 8, !tbaa !2428
  %1369 = add i64 %1363, -152
  %1370 = add i64 %1365, 11
  store i64 %1370, i64* %PC, align 8
  %1371 = inttoptr i64 %1369 to i64*
  %1372 = load i64, i64* %1371, align 8
  store i64 %1372, i64* %RDX, align 8, !tbaa !2428
  %1373 = add i64 %1372, 80
  %1374 = add i64 %1365, 15
  store i64 %1374, i64* %PC, align 8
  %1375 = inttoptr i64 %1373 to i64*
  store i64 %1368, i64* %1375, align 8
  %1376 = load i64, i64* %RBP, align 8
  %1377 = add i64 %1376, -136
  %1378 = load i64, i64* %PC, align 8
  %1379 = add i64 %1378, 7
  store i64 %1379, i64* %PC, align 8
  %1380 = inttoptr i64 %1377 to i64*
  %1381 = load i64, i64* %1380, align 8
  store i64 %1381, i64* %RAX, align 8, !tbaa !2428
  %1382 = add i64 %1376, -152
  %1383 = add i64 %1378, 14
  store i64 %1383, i64* %PC, align 8
  %1384 = inttoptr i64 %1382 to i64*
  %1385 = load i64, i64* %1384, align 8
  store i64 %1385, i64* %RDX, align 8, !tbaa !2428
  %1386 = add i64 %1385, 48
  %1387 = add i64 %1378, 18
  store i64 %1387, i64* %PC, align 8
  %1388 = inttoptr i64 %1386 to i64*
  store i64 %1381, i64* %1388, align 8
  %1389 = load i64, i64* %RBP, align 8
  %1390 = add i64 %1389, -192
  %1391 = load i64, i64* %PC, align 8
  %1392 = add i64 %1391, 7
  store i64 %1392, i64* %PC, align 8
  %1393 = inttoptr i64 %1390 to i64*
  %1394 = load i64, i64* %1393, align 8
  store i64 %1394, i64* %RAX, align 8, !tbaa !2428
  %1395 = add i64 %1389, -152
  %1396 = add i64 %1391, 14
  store i64 %1396, i64* %PC, align 8
  %1397 = inttoptr i64 %1395 to i64*
  %1398 = load i64, i64* %1397, align 8
  store i64 %1398, i64* %RDX, align 8, !tbaa !2428
  %1399 = add i64 %1398, 88
  %1400 = add i64 %1391, 18
  store i64 %1400, i64* %PC, align 8
  %1401 = inttoptr i64 %1399 to i64*
  store i64 %1394, i64* %1401, align 8
  %1402 = load i64, i64* %RBP, align 8
  %1403 = add i64 %1402, -152
  %1404 = load i64, i64* %PC, align 8
  %1405 = add i64 %1404, 7
  store i64 %1405, i64* %PC, align 8
  %1406 = inttoptr i64 %1403 to i64*
  %1407 = load i64, i64* %1406, align 8
  store i64 %1407, i64* %RAX, align 8, !tbaa !2428
  %1408 = add i64 %1402, -160
  %1409 = add i64 %1404, 14
  store i64 %1409, i64* %PC, align 8
  %1410 = inttoptr i64 %1408 to i64*
  store i64 %1407, i64* %1410, align 8
  %1411 = load i64, i64* %RBP, align 8
  %1412 = add i64 %1411, -168
  %1413 = load i64, i64* %PC, align 8
  %1414 = add i64 %1413, 7
  store i64 %1414, i64* %PC, align 8
  %1415 = inttoptr i64 %1412 to i64*
  %1416 = load i64, i64* %1415, align 8
  store i64 %1416, i64* %RAX, align 8, !tbaa !2428
  %1417 = add i64 %1411, -40
  %1418 = add i64 %1413, 11
  store i64 %1418, i64* %PC, align 8
  %1419 = inttoptr i64 %1417 to i64*
  store i64 %1416, i64* %1419, align 8
  %1420 = load i64, i64* %RBP, align 8
  %1421 = add i64 %1420, -200
  %1422 = load i64, i64* %PC, align 8
  %1423 = add i64 %1422, 7
  store i64 %1423, i64* %PC, align 8
  %1424 = inttoptr i64 %1421 to i64*
  %1425 = load i64, i64* %1424, align 8
  store i64 %1425, i64* %RAX, align 8, !tbaa !2428
  %1426 = add i64 %1420, -56
  %1427 = add i64 %1422, 11
  store i64 %1427, i64* %PC, align 8
  %1428 = inttoptr i64 %1426 to i64*
  store i64 %1425, i64* %1428, align 8
  %1429 = load i64, i64* %RBP, align 8
  %1430 = add i64 %1429, -128
  %1431 = load i64, i64* %PC, align 8
  %1432 = add i64 %1431, 4
  store i64 %1432, i64* %PC, align 8
  %1433 = inttoptr i64 %1430 to i64*
  %1434 = load i64, i64* %1433, align 8
  store i64 %1434, i64* %RAX, align 8, !tbaa !2428
  %1435 = add i64 %1429, -136
  %1436 = add i64 %1431, 11
  store i64 %1436, i64* %PC, align 8
  %1437 = inttoptr i64 %1435 to i64*
  store i64 %1434, i64* %1437, align 8
  %1438 = load i64, i64* %RBP, align 8
  %1439 = add i64 %1438, -184
  %1440 = load i64, i64* %PC, align 8
  %1441 = add i64 %1440, 7
  store i64 %1441, i64* %PC, align 8
  %1442 = inttoptr i64 %1439 to i64*
  %1443 = load i64, i64* %1442, align 8
  store i64 %1443, i64* %RAX, align 8, !tbaa !2428
  %1444 = add i64 %1438, -176
  %1445 = add i64 %1440, 14
  store i64 %1445, i64* %PC, align 8
  %1446 = inttoptr i64 %1444 to i64*
  %1447 = load i64, i64* %1446, align 8
  %1448 = sub i64 %1443, %1447
  store i64 %1448, i64* %RAX, align 8, !tbaa !2428
  %1449 = icmp ult i64 %1443, %1447
  %1450 = zext i1 %1449 to i8
  store i8 %1450, i8* %28, align 1, !tbaa !2432
  %1451 = trunc i64 %1448 to i32
  %1452 = and i32 %1451, 255
  %1453 = tail call i32 @llvm.ctpop.i32(i32 %1452) #12
  %1454 = trunc i32 %1453 to i8
  %1455 = and i8 %1454, 1
  %1456 = xor i8 %1455, 1
  store i8 %1456, i8* %35, align 1, !tbaa !2446
  %1457 = xor i64 %1447, %1443
  %1458 = xor i64 %1457, %1448
  %1459 = lshr i64 %1458, 4
  %1460 = trunc i64 %1459 to i8
  %1461 = and i8 %1460, 1
  store i8 %1461, i8* %40, align 1, !tbaa !2447
  %1462 = icmp eq i64 %1448, 0
  %1463 = zext i1 %1462 to i8
  store i8 %1463, i8* %43, align 1, !tbaa !2448
  %1464 = lshr i64 %1448, 63
  %1465 = trunc i64 %1464 to i8
  store i8 %1465, i8* %46, align 1, !tbaa !2449
  %1466 = lshr i64 %1443, 63
  %1467 = lshr i64 %1447, 63
  %1468 = xor i64 %1467, %1466
  %1469 = xor i64 %1464, %1466
  %1470 = add nuw nsw i64 %1469, %1468
  %1471 = icmp eq i64 %1470, 2
  %1472 = zext i1 %1471 to i8
  store i8 %1472, i8* %52, align 1, !tbaa !2450
  %1473 = add i64 %1438, -192
  %1474 = add i64 %1440, 21
  store i64 %1474, i64* %PC, align 8
  %1475 = inttoptr i64 %1473 to i64*
  store i64 %1448, i64* %1475, align 8
  %1476 = load i64, i64* %RBP, align 8
  %1477 = add i64 %1476, -144
  %1478 = load i64, i64* %PC, align 8
  %1479 = add i64 %1478, 7
  store i64 %1479, i64* %PC, align 8
  %1480 = inttoptr i64 %1477 to i64*
  %1481 = load i64, i64* %1480, align 8
  store i64 %1481, i64* %RAX, align 8, !tbaa !2428
  %1482 = add i64 %1476, -152
  %1483 = add i64 %1478, 14
  store i64 %1483, i64* %PC, align 8
  %1484 = inttoptr i64 %1482 to i64*
  store i64 %1481, i64* %1484, align 8
  %1485 = load i64, i64* %RBP, align 8
  %1486 = add i64 %1485, -152
  %1487 = load i64, i64* %PC, align 8
  %1488 = add i64 %1487, 7
  store i64 %1488, i64* %PC, align 8
  %1489 = inttoptr i64 %1486 to i64*
  %1490 = load i64, i64* %1489, align 8
  store i64 %1490, i64* %RAX, align 8, !tbaa !2428
  %1491 = add i64 %1490, 24
  %1492 = add i64 %1487, 11
  store i64 %1492, i64* %PC, align 8
  %1493 = inttoptr i64 %1491 to i64*
  %1494 = load i64, i64* %1493, align 8
  store i64 %1494, i64* %RAX, align 8, !tbaa !2428
  %1495 = add i64 %1485, -144
  %1496 = add i64 %1487, 18
  store i64 %1496, i64* %PC, align 8
  %1497 = inttoptr i64 %1495 to i64*
  store i64 %1494, i64* %1497, align 8
  %1498 = load i64, i64* %PC, align 8
  %1499 = add i64 %1498, -544
  store i64 %1499, i64* %PC, align 8, !tbaa !2428
  br label %block_40429a

block_404691.loopexit:                            ; preds = %block_40464e
  br label %block_404691

block_404691.loopexit122:                         ; preds = %block_40456c
  br label %block_404691

block_404691:                                     ; preds = %block_404691.loopexit122, %block_404691.loopexit
  %1500 = phi i64 [ %494, %block_404691.loopexit ], [ %827, %block_404691.loopexit122 ]
  %.sink5 = phi i64 [ 5, %block_404691.loopexit ], [ 159, %block_404691.loopexit122 ]
  %1501 = add i64 %1500, %.sink5
  %1502 = load i64, i64* %RSP, align 8
  %1503 = add i64 %1502, 64
  store i64 %1503, i64* %RSP, align 8, !tbaa !2428
  %1504 = icmp ugt i64 %1502, -65
  %1505 = zext i1 %1504 to i8
  store i8 %1505, i8* %28, align 1, !tbaa !2432
  %1506 = trunc i64 %1503 to i32
  %1507 = and i32 %1506, 255
  %1508 = tail call i32 @llvm.ctpop.i32(i32 %1507) #12
  %1509 = trunc i32 %1508 to i8
  %1510 = and i8 %1509, 1
  %1511 = xor i8 %1510, 1
  store i8 %1511, i8* %35, align 1, !tbaa !2446
  %1512 = xor i64 %1503, %1502
  %1513 = lshr i64 %1512, 4
  %1514 = trunc i64 %1513 to i8
  %1515 = and i8 %1514, 1
  store i8 %1515, i8* %40, align 1, !tbaa !2447
  %1516 = icmp eq i64 %1503, 0
  %1517 = zext i1 %1516 to i8
  store i8 %1517, i8* %43, align 1, !tbaa !2448
  %1518 = lshr i64 %1503, 63
  %1519 = trunc i64 %1518 to i8
  store i8 %1519, i8* %46, align 1, !tbaa !2449
  %1520 = lshr i64 %1502, 63
  %1521 = xor i64 %1518, %1520
  %1522 = add nuw nsw i64 %1521, %1518
  %1523 = icmp eq i64 %1522, 2
  %1524 = zext i1 %1523 to i8
  store i8 %1524, i8* %52, align 1, !tbaa !2450
  %1525 = add i64 %1501, 5
  store i64 %1525, i64* %PC, align 8
  %1526 = add i64 %1502, 72
  %1527 = inttoptr i64 %1503 to i64*
  %1528 = load i64, i64* %1527, align 8
  store i64 %1528, i64* %RBX, align 8, !tbaa !2428
  store i64 %1526, i64* %RSP, align 8, !tbaa !2428
  %1529 = add i64 %1501, 7
  store i64 %1529, i64* %PC, align 8
  %1530 = add i64 %1502, 80
  %1531 = inttoptr i64 %1526 to i64*
  %1532 = load i64, i64* %1531, align 8
  store i64 %1532, i64* %R14, align 8, !tbaa !2428
  store i64 %1530, i64* %RSP, align 8, !tbaa !2428
  %1533 = add i64 %1501, 9
  store i64 %1533, i64* %PC, align 8
  %1534 = add i64 %1502, 88
  %1535 = inttoptr i64 %1530 to i64*
  %1536 = load i64, i64* %1535, align 8
  store i64 %1536, i64* %R15, align 8, !tbaa !2428
  store i64 %1534, i64* %RSP, align 8, !tbaa !2428
  %1537 = add i64 %1501, 10
  store i64 %1537, i64* %PC, align 8
  %1538 = add i64 %1502, 96
  %1539 = inttoptr i64 %1534 to i64*
  %1540 = load i64, i64* %1539, align 8
  store i64 %1540, i64* %RBP, align 8, !tbaa !2428
  store i64 %1538, i64* %RSP, align 8, !tbaa !2428
  %1541 = add i64 %1501, 11
  store i64 %1541, i64* %PC, align 8
  %1542 = inttoptr i64 %1538 to i64*
  %1543 = load i64, i64* %1542, align 8
  store i64 %1543, i64* %PC, align 8, !tbaa !2428
  %1544 = add i64 %1502, 104
  store i64 %1544, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_404159:                                     ; preds = %block_404102.block_404159_crit_edge, %block_404114
  %.pre-phi67 = phi i64* [ %.pre66, %block_404102.block_404159_crit_edge ], [ %1230, %block_404114 ]
  %1545 = phi i64 [ %1815, %block_404102.block_404159_crit_edge ], [ %1244, %block_404114 ]
  %1546 = add i64 %1545, 5
  store i64 %1546, i64* %PC, align 8
  %1547 = load i64, i64* %.pre-phi67, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %1548 = trunc i64 %1547 to i32
  %1549 = and i32 %1548, 255
  %1550 = tail call i32 @llvm.ctpop.i32(i32 %1549) #12
  %1551 = trunc i32 %1550 to i8
  %1552 = and i8 %1551, 1
  %1553 = xor i8 %1552, 1
  store i8 %1553, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %40, align 1, !tbaa !2447
  %1554 = icmp eq i64 %1547, 0
  %1555 = zext i1 %1554 to i8
  store i8 %1555, i8* %43, align 1, !tbaa !2448
  %1556 = lshr i64 %1547, 63
  %1557 = trunc i64 %1556 to i8
  store i8 %1557, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %1558 = icmp ne i8 %1557, 0
  %.v27 = select i1 %1558, i64 22, i64 6
  %1559 = add i64 %1546, %.v27
  store i64 %1559, i64* %PC, align 8, !tbaa !2428
  br i1 %1558, label %block_404174, label %block_404164

block_404210:                                     ; preds = %block_4041ff
  %1560 = add i64 %189, -64
  %1561 = add i64 %223, 69
  store i64 %1561, i64* %PC, align 8
  %1562 = inttoptr i64 %1560 to i64*
  %1563 = load i64, i64* %1562, align 8
  store i64 %1563, i64* %RAX, align 8, !tbaa !2428
  %1564 = add i64 %189, -152
  %1565 = add i64 %223, 76
  store i64 %1565, i64* %PC, align 8
  %1566 = inttoptr i64 %1564 to i64*
  store i64 %1563, i64* %1566, align 8
  %1567 = load i64, i64* %RBP, align 8
  %1568 = add i64 %1567, -152
  %1569 = load i64, i64* %PC, align 8
  %1570 = add i64 %1569, 7
  store i64 %1570, i64* %PC, align 8
  %1571 = inttoptr i64 %1568 to i64*
  %1572 = load i64, i64* %1571, align 8
  store i64 %1572, i64* %RAX, align 8, !tbaa !2428
  %1573 = add i64 %1572, 24
  %1574 = add i64 %1569, 11
  store i64 %1574, i64* %PC, align 8
  %1575 = inttoptr i64 %1573 to i64*
  %1576 = load i64, i64* %1575, align 8
  store i64 %1576, i64* %RAX, align 8, !tbaa !2428
  %1577 = add i64 %1567, -144
  %1578 = add i64 %1569, 18
  store i64 %1578, i64* %PC, align 8
  %1579 = inttoptr i64 %1577 to i64*
  store i64 %1576, i64* %1579, align 8
  %1580 = load i64, i64* %RBP, align 8
  %1581 = add i64 %1580, -80
  %1582 = load i64, i64* %PC, align 8
  %1583 = add i64 %1582, 4
  store i64 %1583, i64* %PC, align 8
  %1584 = inttoptr i64 %1581 to i64*
  %1585 = load i64, i64* %1584, align 8
  store i64 %1585, i64* %RAX, align 8, !tbaa !2428
  %1586 = add i64 %1585, 88
  %1587 = add i64 %1582, 8
  store i64 %1587, i64* %PC, align 8
  %1588 = inttoptr i64 %1586 to i64*
  %1589 = load i64, i64* %1588, align 8
  store i64 %1589, i64* %RAX, align 8, !tbaa !2428
  %1590 = add i64 %1580, -184
  %1591 = add i64 %1582, 15
  store i64 %1591, i64* %PC, align 8
  %1592 = inttoptr i64 %1590 to i64*
  store i64 %1589, i64* %1592, align 8
  %1593 = load i64, i64* %RBP, align 8
  %1594 = add i64 %1593, -192
  %1595 = load i64, i64* %RAX, align 8
  %1596 = load i64, i64* %PC, align 8
  %1597 = add i64 %1596, 7
  store i64 %1597, i64* %PC, align 8
  %1598 = inttoptr i64 %1594 to i64*
  store i64 %1595, i64* %1598, align 8
  %1599 = load i64, i64* %RBP, align 8
  %1600 = add i64 %1599, -72
  %1601 = load i64, i64* %PC, align 8
  %1602 = add i64 %1601, 4
  store i64 %1602, i64* %PC, align 8
  %1603 = inttoptr i64 %1600 to i64*
  %1604 = load i64, i64* %1603, align 8
  store i64 %1604, i64* %RAX, align 8, !tbaa !2428
  %1605 = add i64 %1599, -160
  %1606 = add i64 %1601, 11
  store i64 %1606, i64* %PC, align 8
  %1607 = inttoptr i64 %1605 to i64*
  store i64 %1604, i64* %1607, align 8
  %1608 = load i64, i64* %RBP, align 8
  %1609 = add i64 %1608, -104
  %1610 = load i64, i64* %PC, align 8
  %1611 = add i64 %1610, 4
  store i64 %1611, i64* %PC, align 8
  %1612 = inttoptr i64 %1609 to i64*
  %1613 = load i64, i64* %1612, align 8
  store i64 %1613, i64* %RAX, align 8, !tbaa !2428
  %1614 = add i64 %1608, -136
  %1615 = add i64 %1610, 11
  store i64 %1615, i64* %PC, align 8
  %1616 = inttoptr i64 %1614 to i64*
  store i64 %1613, i64* %1616, align 8
  %.pre50 = load i64, i64* %PC, align 8
  br label %block_40429a

block_4042e9:                                     ; preds = %block_4042d7
  %1617 = add i64 %1009, 18
  store i64 %1617, i64* %PC, align 8
  %1618 = load i64, i64* %993, align 8
  store i64 %1618, i64* %RCX, align 8, !tbaa !2428
  %1619 = add i64 %1618, 40
  %1620 = add i64 %1009, 22
  store i64 %1620, i64* %PC, align 8
  %1621 = inttoptr i64 %1619 to i64*
  %1622 = load i64, i64* %1621, align 8
  store i64 %1622, i64* %RCX, align 8, !tbaa !2428
  %1623 = add i64 %1622, 32
  %1624 = add i64 %1009, 26
  store i64 %1624, i64* %PC, align 8
  %1625 = inttoptr i64 %1623 to i64*
  store i64 %1015, i64* %1625, align 8
  %1626 = load i64, i64* %PC, align 8
  %1627 = add i64 %1626, 27
  store i64 %1627, i64* %PC, align 8, !tbaa !2428
  br label %block_40431e

block_404602:                                     ; preds = %block_404602.preheader, %block_404613
  %1628 = phi i64 [ %1321, %block_404613 ], [ %.pre61, %block_404602.preheader ]
  %1629 = load i64, i64* %RBP, align 8
  %1630 = add i64 %1629, -152
  %1631 = add i64 %1628, 7
  store i64 %1631, i64* %PC, align 8
  %1632 = inttoptr i64 %1630 to i64*
  %1633 = load i64, i64* %1632, align 8
  store i64 %1633, i64* %RAX, align 8, !tbaa !2428
  %1634 = add i64 %1629, -96
  %1635 = add i64 %1628, 11
  store i64 %1635, i64* %PC, align 8
  %1636 = inttoptr i64 %1634 to i64*
  %1637 = load i64, i64* %1636, align 8
  %1638 = sub i64 %1633, %1637
  %1639 = icmp ult i64 %1633, %1637
  %1640 = zext i1 %1639 to i8
  store i8 %1640, i8* %28, align 1, !tbaa !2432
  %1641 = trunc i64 %1638 to i32
  %1642 = and i32 %1641, 255
  %1643 = tail call i32 @llvm.ctpop.i32(i32 %1642) #12
  %1644 = trunc i32 %1643 to i8
  %1645 = and i8 %1644, 1
  %1646 = xor i8 %1645, 1
  store i8 %1646, i8* %35, align 1, !tbaa !2446
  %1647 = xor i64 %1637, %1633
  %1648 = xor i64 %1647, %1638
  %1649 = lshr i64 %1648, 4
  %1650 = trunc i64 %1649 to i8
  %1651 = and i8 %1650, 1
  store i8 %1651, i8* %40, align 1, !tbaa !2447
  %1652 = icmp eq i64 %1638, 0
  %1653 = zext i1 %1652 to i8
  store i8 %1653, i8* %43, align 1, !tbaa !2448
  %1654 = lshr i64 %1638, 63
  %1655 = trunc i64 %1654 to i8
  store i8 %1655, i8* %46, align 1, !tbaa !2449
  %1656 = lshr i64 %1633, 63
  %1657 = lshr i64 %1637, 63
  %1658 = xor i64 %1657, %1656
  %1659 = xor i64 %1654, %1656
  %1660 = add nuw nsw i64 %1659, %1658
  %1661 = icmp eq i64 %1660, 2
  %1662 = zext i1 %1661 to i8
  store i8 %1662, i8* %52, align 1, !tbaa !2450
  %.v83 = select i1 %1652, i64 65, i64 17
  %1663 = add i64 %1628, %.v83
  store i64 %1663, i64* %PC, align 8, !tbaa !2428
  br i1 %1652, label %block_404643, label %block_404613

block_404308:                                     ; preds = %block_4042d7
  %1664 = add i64 %990, -144
  %1665 = add i64 %1009, 18
  store i64 %1665, i64* %PC, align 8
  %1666 = inttoptr i64 %1664 to i64*
  %1667 = load i64, i64* %1666, align 8
  store i64 %1667, i64* %RCX, align 8, !tbaa !2428
  %1668 = add i64 %1667, 16
  %1669 = add i64 %1009, 22
  store i64 %1669, i64* %PC, align 8
  %1670 = inttoptr i64 %1668 to i64*
  store i64 %1015, i64* %1670, align 8
  %.pre53 = load i64, i64* %PC, align 8
  br label %block_40431e

block_40411f:                                     ; preds = %block_404114, %block_4040f7
  %.pre-phi63 = phi i64* [ %1230, %block_404114 ], [ %523, %block_4040f7 ]
  %1671 = phi i64 [ %1244, %block_404114 ], [ %536, %block_4040f7 ]
  %1672 = add i64 %1671, 5
  store i64 %1672, i64* %PC, align 8
  %1673 = load i64, i64* %.pre-phi63, align 8
  store i8 0, i8* %28, align 1, !tbaa !2432
  %1674 = trunc i64 %1673 to i32
  %1675 = and i32 %1674, 255
  %1676 = tail call i32 @llvm.ctpop.i32(i32 %1675) #12
  %1677 = trunc i32 %1676 to i8
  %1678 = and i8 %1677, 1
  %1679 = xor i8 %1678, 1
  store i8 %1679, i8* %35, align 1, !tbaa !2446
  store i8 0, i8* %40, align 1, !tbaa !2447
  %1680 = icmp eq i64 %1673, 0
  %1681 = zext i1 %1680 to i8
  store i8 %1681, i8* %43, align 1, !tbaa !2448
  %1682 = lshr i64 %1673, 63
  %1683 = trunc i64 %1682 to i8
  store i8 %1683, i8* %46, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %1684 = icmp ne i8 %1683, 0
  %.v26 = select i1 %1684, i64 22, i64 6
  %1685 = add i64 %1672, %.v26
  store i64 %1685, i64* %PC, align 8, !tbaa !2428
  br i1 %1684, label %block_40413a, label %block_40412a

block_4041d6:                                     ; preds = %block_4041b1, %block_404235
  %1686 = phi i64 [ %791, %block_4041b1 ], [ %734, %block_404235 ]
  %1687 = phi i64 [ %774, %block_4041b1 ], [ %1212, %block_404235 ]
  %1688 = add i64 %1687, -112
  %1689 = add i64 %1686, 4
  store i64 %1689, i64* %PC, align 8
  %1690 = inttoptr i64 %1688 to i64*
  %1691 = load i64, i64* %1690, align 8
  store i64 %1691, i64* %RAX, align 8, !tbaa !2428
  %1692 = add i64 %1687, -152
  %1693 = add i64 %1686, 11
  store i64 %1693, i64* %PC, align 8
  %1694 = inttoptr i64 %1692 to i64*
  %1695 = load i64, i64* %1694, align 8
  store i64 %1695, i64* %RCX, align 8, !tbaa !2428
  %1696 = add i64 %1686, 14
  store i64 %1696, i64* %PC, align 8
  %1697 = inttoptr i64 %1695 to i64*
  %1698 = load i64, i64* %1697, align 8
  %1699 = add i64 %1698, %1691
  store i64 %1699, i64* %RAX, align 8, !tbaa !2428
  %1700 = icmp ult i64 %1699, %1691
  %1701 = icmp ult i64 %1699, %1698
  %1702 = or i1 %1700, %1701
  %1703 = zext i1 %1702 to i8
  store i8 %1703, i8* %28, align 1, !tbaa !2432
  %1704 = trunc i64 %1699 to i32
  %1705 = and i32 %1704, 255
  %1706 = tail call i32 @llvm.ctpop.i32(i32 %1705) #12
  %1707 = trunc i32 %1706 to i8
  %1708 = and i8 %1707, 1
  %1709 = xor i8 %1708, 1
  store i8 %1709, i8* %35, align 1, !tbaa !2446
  %1710 = xor i64 %1698, %1691
  %1711 = xor i64 %1710, %1699
  %1712 = lshr i64 %1711, 4
  %1713 = trunc i64 %1712 to i8
  %1714 = and i8 %1713, 1
  store i8 %1714, i8* %40, align 1, !tbaa !2447
  %1715 = icmp eq i64 %1699, 0
  %1716 = zext i1 %1715 to i8
  store i8 %1716, i8* %43, align 1, !tbaa !2448
  %1717 = lshr i64 %1699, 63
  %1718 = trunc i64 %1717 to i8
  store i8 %1718, i8* %46, align 1, !tbaa !2449
  %1719 = lshr i64 %1691, 63
  %1720 = lshr i64 %1698, 63
  %1721 = xor i64 %1717, %1719
  %1722 = xor i64 %1717, %1720
  %1723 = add nuw nsw i64 %1721, %1722
  %1724 = icmp eq i64 %1723, 2
  %1725 = zext i1 %1724 to i8
  store i8 %1725, i8* %52, align 1, !tbaa !2450
  %1726 = add i64 %1686, 17
  store i64 %1726, i64* %PC, align 8
  store i64 %1699, i64* %1697, align 8
  %1727 = load i64, i64* %RBP, align 8
  %1728 = add i64 %1727, -152
  %1729 = load i64, i64* %PC, align 8
  %1730 = add i64 %1729, 7
  store i64 %1730, i64* %PC, align 8
  %1731 = inttoptr i64 %1728 to i64*
  %1732 = load i64, i64* %1731, align 8
  store i64 %1732, i64* %RAX, align 8, !tbaa !2428
  %1733 = add i64 %1727, -144
  %1734 = add i64 %1729, 14
  store i64 %1734, i64* %PC, align 8
  %1735 = inttoptr i64 %1733 to i64*
  store i64 %1732, i64* %1735, align 8
  %1736 = load i64, i64* %PC, align 8
  %1737 = add i64 %1736, -68
  store i64 %1737, i64* %PC, align 8, !tbaa !2428
  br label %block_4041b1

block_40423a:                                     ; preds = %block_404215
  %1738 = add i64 %1212, -144
  %1739 = add i64 %1228, 7
  store i64 %1739, i64* %PC, align 8
  %1740 = inttoptr i64 %1738 to i64*
  %1741 = load i64, i64* %1740, align 8
  store i64 %1741, i64* %RAX, align 8, !tbaa !2428
  %1742 = add i64 %1741, 24
  %1743 = add i64 %1228, 11
  store i64 %1743, i64* %PC, align 8
  %1744 = inttoptr i64 %1742 to i64*
  %1745 = load i64, i64* %1744, align 8
  store i64 %1745, i64* %RAX, align 8, !tbaa !2428
  %1746 = add i64 %1228, 18
  store i64 %1746, i64* %PC, align 8
  store i64 %1745, i64* %1740, align 8
  %1747 = load i64, i64* %PC, align 8
  %1748 = add i64 %1747, -77
  store i64 %1748, i64* %PC, align 8, !tbaa !2428
  %.pre49 = load i64, i64* %RBP, align 8
  br label %block_4041ff

block_404183:                                     ; preds = %block_404174, %block_404164
  %1749 = phi i64 [ %.pre46, %block_404174 ], [ %417, %block_404164 ]
  %1750 = load i64, i64* %RBP, align 8
  %1751 = add i64 %1750, -216
  %1752 = add i64 %1749, 7
  store i64 %1752, i64* %PC, align 8
  %1753 = inttoptr i64 %1751 to i64*
  %1754 = load i64, i64* %1753, align 8
  store i64 %1754, i64* %RAX, align 8, !tbaa !2428
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %1755 = sub i64 0, %1754
  store i64 %1755, i64* %RDX, align 8, !tbaa !2428
  %1756 = icmp ne i64 %1754, 0
  %1757 = zext i1 %1756 to i8
  store i8 %1757, i8* %28, align 1, !tbaa !2432
  %1758 = trunc i64 %1755 to i32
  %1759 = and i32 %1758, 255
  %1760 = tail call i32 @llvm.ctpop.i32(i32 %1759) #12
  %1761 = trunc i32 %1760 to i8
  %1762 = and i8 %1761, 1
  %1763 = xor i8 %1762, 1
  store i8 %1763, i8* %35, align 1, !tbaa !2446
  %1764 = xor i64 %1754, %1755
  %1765 = lshr i64 %1764, 4
  %1766 = trunc i64 %1765 to i8
  %1767 = and i8 %1766, 1
  store i8 %1767, i8* %40, align 1, !tbaa !2447
  %1768 = icmp eq i64 %1754, 0
  %1769 = zext i1 %1768 to i8
  store i8 %1769, i8* %43, align 1, !tbaa !2448
  %1770 = lshr i64 %1755, 63
  %1771 = trunc i64 %1770 to i8
  store i8 %1771, i8* %46, align 1, !tbaa !2449
  %1772 = lshr i64 %1754, 63
  %1773 = add nuw nsw i64 %1770, %1772
  %1774 = icmp eq i64 %1773, 2
  %1775 = zext i1 %1774 to i8
  store i8 %1775, i8* %52, align 1, !tbaa !2450
  %1776 = add i64 %1750, -112
  %1777 = add i64 %1749, 18
  store i64 %1777, i64* %PC, align 8
  %1778 = inttoptr i64 %1776 to i64*
  store i64 %1755, i64* %1778, align 8
  %.pre47 = load i64, i64* %PC, align 8
  br label %block_404195

block_404102:                                     ; preds = %block_404090, %block_4040f7
  %1779 = phi i64 [ %536, %block_4040f7 ], [ %187, %block_404090 ]
  %1780 = add i64 %1779, 4
  store i64 %1780, i64* %PC, align 8
  %1781 = load i64, i64* %152, align 8
  store i64 %1781, i64* %RAX, align 8, !tbaa !2428
  %1782 = add i64 %1781, 8
  %1783 = add i64 %1779, 8
  store i64 %1783, i64* %PC, align 8
  %1784 = inttoptr i64 %1782 to i64*
  %1785 = load i64, i64* %1784, align 8
  store i64 %1785, i64* %RAX, align 8, !tbaa !2428
  %1786 = add i64 %148, -64
  %1787 = add i64 %1779, 12
  store i64 %1787, i64* %PC, align 8
  %1788 = inttoptr i64 %1786 to i64*
  %1789 = load i64, i64* %1788, align 8
  %1790 = sub i64 %1785, %1789
  %1791 = icmp ult i64 %1785, %1789
  %1792 = zext i1 %1791 to i8
  store i8 %1792, i8* %28, align 1, !tbaa !2432
  %1793 = trunc i64 %1790 to i32
  %1794 = and i32 %1793, 255
  %1795 = tail call i32 @llvm.ctpop.i32(i32 %1794) #12
  %1796 = trunc i32 %1795 to i8
  %1797 = and i8 %1796, 1
  %1798 = xor i8 %1797, 1
  store i8 %1798, i8* %35, align 1, !tbaa !2446
  %1799 = xor i64 %1789, %1785
  %1800 = xor i64 %1799, %1790
  %1801 = lshr i64 %1800, 4
  %1802 = trunc i64 %1801 to i8
  %1803 = and i8 %1802, 1
  store i8 %1803, i8* %40, align 1, !tbaa !2447
  %1804 = icmp eq i64 %1790, 0
  %1805 = zext i1 %1804 to i8
  store i8 %1805, i8* %43, align 1, !tbaa !2448
  %1806 = lshr i64 %1790, 63
  %1807 = trunc i64 %1806 to i8
  store i8 %1807, i8* %46, align 1, !tbaa !2449
  %1808 = lshr i64 %1785, 63
  %1809 = lshr i64 %1789, 63
  %1810 = xor i64 %1809, %1808
  %1811 = xor i64 %1806, %1808
  %1812 = add nuw nsw i64 %1811, %1810
  %1813 = icmp eq i64 %1812, 2
  %1814 = zext i1 %1813 to i8
  store i8 %1814, i8* %52, align 1, !tbaa !2450
  %.v76 = select i1 %1804, i64 18, i64 87
  %1815 = add i64 %1779, %.v76
  store i64 %1815, i64* %PC, align 8, !tbaa !2428
  %1816 = add i64 %148, -112
  br i1 %1804, label %block_404114, label %block_404102.block_404159_crit_edge

block_404102.block_404159_crit_edge:              ; preds = %block_404102
  %.pre66 = inttoptr i64 %1816 to i64*
  br label %block_404159
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4009e0_frame_dummy() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4009e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @callback_sub_4009e0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4009e0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4009b0___do_global_dtors_aux() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4009b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @callback_sub_4009b0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4009b0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4008a0_memcpy(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_608fd0_printf(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_608f60_memset(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_400830_strcpy(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @strcpy to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_608f50_fclose(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @fclose to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_608ff8_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_609020_fopen(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @fopen to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_608fe8_fgets(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @fgets to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_609010___isoc99_sscanf(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @__isoc99_sscanf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_608f78_calloc(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @calloc to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4008f0_exit(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @exit to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_404710___libc_csu_fini() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404710;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @callback_sub_404710___libc_csu_fini_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404710___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4046a0___libc_csu_init() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4046a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @callback_sub_4046a0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4046a0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @main() #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4019c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4019c0_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_608f68___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_608fb8_free(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_609018_realloc(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @realloc to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_609008_fflush(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @fflush to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @flow_org_cost() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401f90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @flow_org_cost_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401f90_flow_org_cost(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @price_out_impl() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401110;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @price_out_impl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401110_price_out_impl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dual_feasible() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402340;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @dual_feasible_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402340_dual_feasible(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @global_opt() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401810;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @global_opt_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401810_global_opt(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @primal_update_flow() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402f10;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @primal_update_flow_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402f10_primal_update_flow(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @update_tree() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404090;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @update_tree_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404090_update_tree(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @primal_start_artificial() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4033a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @primal_start_artificial_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4033a0_primal_start_artificial(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @write_circulations() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402580;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @write_circulations_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402580_write_circulations(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @sort_basket() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4027f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @sort_basket_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4027f0_sort_basket(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @primal_bea_mpp() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402960;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @primal_bea_mpp_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402960_primal_bea_mpp(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @flow_cost() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @flow_cost_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401db0_flow_cost(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @primal_net_simplex() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402fd0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @primal_net_simplex_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402fd0_primal_net_simplex(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.term_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404714;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.term_proc_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404714__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @read_min() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4035c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @read_min_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4035c0_read_min(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @suspend_impl() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @21, void ()** nonnull @2) #12
  ret void
}

define internal %struct.Memory* @suspend_impl_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401600_suspend_impl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @resize_prob() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4009f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @22, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @resize_prob_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4009f0_resize_prob(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @primal_iminus() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402d30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @23, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @primal_iminus_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402d30_primal_iminus(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @primal_feasible() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402170;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @24, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @primal_feasible_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402170_primal_feasible(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @refresh_neighbour_lists() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401b90;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @25, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @refresh_neighbour_lists_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401b90_refresh_neighbour_lists(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @replace_weaker_arc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400e50;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @26, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @replace_weaker_arc_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400e50_replace_weaker_arc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @insert_new_arc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400b80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @27, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @insert_new_arc_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400b80_insert_new_arc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.init_proc() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4007f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @28, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4007f0__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @refresh_potential() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c80;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @29, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @refresh_potential_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c80_refresh_potential(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @bea_is_dual_infeasible() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402790;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @30, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @bea_is_dual_infeasible_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402790_bea_is_dual_infeasible(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @getfree() local_unnamed_addr #9 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4024a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @31, void ()** nonnull @2) #12
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @getfree_wrapper(%struct.State*, i64, %struct.Memory*) #12 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4024a0_getfree(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #12 {
  tail call void @callback_sub_404710___libc_csu_fini()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #12 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_4046a0___libc_csu_init()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { naked nobuiltin noinline nounwind }
attributes #10 = { noinline nounwind }
attributes #11 = { norecurse nounwind }
attributes #12 = { nounwind }
attributes #13 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2452, !2452, i64 0}
!2452 = !{!"double", !2430, i64 0}
!2453 = !{!2430, !2430, i64 0}
