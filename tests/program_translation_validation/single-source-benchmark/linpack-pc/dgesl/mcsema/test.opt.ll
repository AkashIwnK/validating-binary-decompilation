; ModuleID = 'mcsema/test.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_402e30__rodata_type = type <{ [112 x i8], [26 x i8], [33 x i8], [8 x i8], [8 x i8], [54 x i8], [17 x i8], [18 x i8], [39 x i8], [35 x i8], [33 x i8], [53 x i8], [54 x i8], [56 x i8], [13 x i8], [30 x i8], [26 x i8], [39 x i8], [47 x i8], [20 x i8], [47 x i8], [41 x i8], [31 x i8] }>
%seg_603df0__init_array_type = type <{ i64, i64 }>
%seg_603ff0__got_type = type <{ i64, i64 }>
%seg_604040__bss_type = type <{ [8 x i8], [8 x i8], [4 x i8], [4 x i8], [8 x i8], [160800 x i8], [800 x i8], [800 x i8], [16 x i8], [540 x i8], [4 x i8], [800 x i8], [4 x i8], [12 x i8], [160000 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@stderr = external global i64, align 64
@seg_402e30__rodata = internal constant %seg_402e30__rodata_type <{ [112 x i8] c"\01\00\02\00\00$tIB`e=\00\00\80?\AB\AA\AA?\00\00\00\00\00\00\00\00\00\00\00@\00\00\00\00\00\00\08@\00\00\00\00\80\84.A\00\00\00\00\00\00\14@\00\00\00\00\00\00\D0@\00\00\00\00\00\00\E0@\00\00\00\00\00\00\F0\BF\00\00\00\00\00\00\F0?\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [26 x i8] c"INSERT COMPILER NAME HERE\00", [33 x i8] c"INSERT OPTIMISATION OPTIONS HERE\00", [8 x i8] c"Rolled \00", [8 x i8] c"Single \00", [54 x i8] c"Precision Linpack Benchmark - PC Version in 'C/C++'\0A\0A\00", [17 x i8] c"Compiler     %s\0A\00", [18 x i8] c"Optimisation %s\0A\0A\00", [39 x i8] c"norm resid      resid           machep\00", [35 x i8] c"         x[0]-1          x[n-1]-1\0A\00", [33 x i8] c"%6.1f %17.8e%17.8e%17.8e%17.8e\0A\0A\00", [53 x i8] c"Times are reported for matrices of order        %5d\0A\00", [54 x i8] c"1 pass times for array with leading dimension of%5d\0A\0A\00", [56 x i8] c"      dgefa      dgesl      total     Mflops       unit\00", [13 x i8] c"      ratio\0A\00", [30 x i8] c"\0ACalculating matgen overhead\0A\00", [26 x i8] c"%10d times %6.2f seconds\0A\00", [39 x i8] c"Overhead for 1 matgen %12.5f seconds\0A\0A\00", [47 x i8] c"Calculating matgen/dgefa passes for 5 seconds\0A\00", [20 x i8] c"Passes used %10d \0A\0A\00", [47 x i8] c"Times for array with leading dimension of%4d\0A\0A\00", [41 x i8] c"Average                          %11.2f\0A\00", [31 x i8] c"\0ACalculating matgen2 overhead\0A\00" }>
@seg_603df0__init_array = internal global %seg_603df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4005d0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4005a0___do_global_dtors_aux to i64) }>
@seg_603ff0__got = internal global %seg_603ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_604040__bss = internal global %seg_604040__bss_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005d0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4005a0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402e20___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402db0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @what_date_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dmxpy_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgefa_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @daxpy_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @ddot_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @epslon_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dgesl_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@16 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @matgen_wrapper
@17 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dscal_wrapper
@18 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @second_wrapper
@19 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @idamax_wrapper
@20 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @print_time_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #2 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #3 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #4

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @clock() #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @fprintf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #5

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400620_what_date(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_400620:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, 5
  store i64 %12, i64* %PC, align 8
  %13 = inttoptr i64 %6 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %PC, align 8, !tbaa !2428
  %15 = add i64 %6, 8
  store i64 %15, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4005a0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4005a0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2432
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #9
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2446
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2447
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2448
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2449
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_4005a9, label %block_4005c0

block_4005c0:                                     ; preds = %block_4005a0
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4005a9:                                     ; preds = %block_4005a0
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_400530_deregister_tm_clones(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 8) to i8*), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400630_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400630:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -1016
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 171), i64* %RSI, align 8, !tbaa !2428
  %23 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %24 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 8) to i32*), align 8
  %25 = bitcast [32 x %union.VectorReg]* %6 to float*
  %26 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %24, i32* %26, align 1, !tbaa !2451
  %27 = getelementptr inbounds i8, i8* %23, i64 4
  %28 = bitcast i8* %27 to float*
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to float*
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  %31 = getelementptr inbounds i8, i8* %23, i64 12
  %32 = bitcast i8* %31 to float*
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 138), i64* %RAX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 112), i64* %RCX, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i64 720, i64* %R8, align 8, !tbaa !2428
  %33 = add i64 %12, -840
  store i64 %33, i64* %R9, align 8, !tbaa !2428
  %34 = add i64 %12, -12
  %35 = add i64 %15, 72
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %34 to i32*
  store i32 0, i32* %36, align 4
  %37 = load i64, i64* %R9, align 8
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %RDI, align 8, !tbaa !2428
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -840
  %41 = load i64, i64* %RSI, align 8
  %42 = add i64 %38, 10
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %43, align 8
  %44 = load i32, i32* %EDX, align 4
  %45 = zext i32 %44 to i64
  %46 = load i64, i64* %PC, align 8
  store i64 %45, i64* %RSI, align 8, !tbaa !2428
  %47 = load i64, i64* %R8, align 8
  store i64 %47, i64* %RDX, align 8, !tbaa !2428
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -848
  %50 = load i64, i64* %RCX, align 8
  %51 = add i64 %46, 12
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %49 to i64*
  store i64 %50, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -852
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 8
  store i64 %56, i64* %PC, align 8
  %57 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %58 = load <2 x float>, <2 x float>* %57, align 1
  %59 = extractelement <2 x float> %58, i32 0
  %60 = inttoptr i64 %54 to float*
  store float %59, float* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -864
  %63 = load i64, i64* %RAX, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 7
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, -462
  %69 = add i64 %67, 5
  %70 = load i64, i64* %RSP, align 8, !tbaa !2428
  %71 = add i64 %70, -8
  %72 = inttoptr i64 %71 to i64*
  store i64 %69, i64* %72, align 8
  store i64 %71, i64* %RSP, align 8, !tbaa !2428
  store i64 %68, i64* %PC, align 8, !tbaa !2428
  %73 = tail call fastcc %struct.Memory* @ext_4004d0_memset(%struct.State* nonnull %0, %struct.Memory* %2)
  %74 = load i64, i64* %RBP, align 8
  %75 = add i64 %74, -832
  %76 = load i64, i64* %PC, align 8
  %77 = add i64 %76, 7
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %75 to i8*
  store i8 32, i8* %78, align 1
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -848
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 7
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i64*
  %84 = load i64, i64* %83, align 8
  store i64 %84, i64* %RAX, align 8, !tbaa !2428
  %85 = add i64 %79, -96
  %86 = add i64 %81, 11
  store i64 %86, i64* %PC, align 8
  %87 = inttoptr i64 %85 to i64*
  store i64 %84, i64* %87, align 8
  %88 = load i64, i64* %RBP, align 8
  %89 = add i64 %88, -864
  %90 = load i64, i64* %PC, align 8
  %91 = add i64 %90, 7
  store i64 %91, i64* %PC, align 8
  %92 = inttoptr i64 %89 to i64*
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %94 = add i64 %88, -104
  %95 = add i64 %90, 11
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i64*
  store i64 %93, i64* %96, align 8
  %97 = load i64, i64* %PC, align 8
  store i32 201, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %98 = load i64, i64* %RBP, align 8
  %99 = add i64 %98, -852
  %100 = add i64 %97, 30
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i32*
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %103 = add i64 %98, -8
  %104 = add i64 %97, 35
  store i64 %104, i64* %PC, align 8
  %105 = load <2 x float>, <2 x float>* %57, align 1
  %106 = extractelement <2 x float> %105, i32 0
  %107 = inttoptr i64 %103 to float*
  store float %106, float* %107, align 4
  %108 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %109 = load i64, i64* @stderr, align 64
  store i64 %109, i64* %RDI, align 8, !tbaa !2428
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -840
  %112 = add i64 %108, 26
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RSI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %115 = add i64 %108, -515
  %116 = add i64 %108, 33
  %117 = load i64, i64* %RSP, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %116, i64* %119, align 8
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  store i64 %115, i64* %PC, align 8, !tbaa !2428
  %120 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %73)
  %121 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 179), i64* %RSI, align 8, !tbaa !2428
  %122 = load i64, i64* @stderr, align 64
  store i64 %122, i64* %RDI, align 8, !tbaa !2428
  %123 = load i64, i64* %RBP, align 8
  %124 = add i64 %123, -868
  %125 = load i32, i32* %EAX, align 4
  %126 = add i64 %121, 24
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %124 to i32*
  store i32 %125, i32* %127, align 4
  %128 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %129 = add i64 %128, -572
  %130 = add i64 %128, 7
  %131 = load i64, i64* %RSP, align 8, !tbaa !2428
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %130, i64* %133, align 8
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  %134 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %120)
  %135 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 187), i64* %RSI, align 8, !tbaa !2428
  %136 = load i64, i64* @stderr, align 64
  store i64 %136, i64* %RDI, align 8, !tbaa !2428
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -872
  %139 = load i32, i32* %EAX, align 4
  %140 = add i64 %135, 24
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %138 to i32*
  store i32 %139, i32* %141, align 4
  %142 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %143 = add i64 %142, -603
  %144 = add i64 %142, 7
  %145 = load i64, i64* %RSP, align 8, !tbaa !2428
  %146 = add i64 %145, -8
  %147 = inttoptr i64 %146 to i64*
  store i64 %144, i64* %147, align 8
  store i64 %146, i64* %RSP, align 8, !tbaa !2428
  store i64 %143, i64* %PC, align 8, !tbaa !2428
  %148 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %134)
  %149 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 241), i64* %RSI, align 8, !tbaa !2428
  %150 = load i64, i64* @stderr, align 64
  store i64 %150, i64* %RDI, align 8, !tbaa !2428
  %151 = load i64, i64* %RBP, align 8
  %152 = add i64 %151, -96
  %153 = add i64 %149, 22
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i64*
  %155 = load i64, i64* %154, align 8
  store i64 %155, i64* %RDX, align 8, !tbaa !2428
  %156 = add i64 %151, -876
  %157 = load i32, i32* %EAX, align 4
  %158 = add i64 %149, 28
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %156 to i32*
  store i32 %157, i32* %159, align 4
  %160 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %161 = add i64 %160, -638
  %162 = add i64 %160, 7
  %163 = load i64, i64* %RSP, align 8, !tbaa !2428
  %164 = add i64 %163, -8
  %165 = inttoptr i64 %164 to i64*
  store i64 %162, i64* %165, align 8
  store i64 %164, i64* %RSP, align 8, !tbaa !2428
  store i64 %161, i64* %PC, align 8, !tbaa !2428
  %166 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %148)
  %167 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 258), i64* %RSI, align 8, !tbaa !2428
  %168 = load i64, i64* @stderr, align 64
  store i64 %168, i64* %RDI, align 8, !tbaa !2428
  %169 = load i64, i64* %RBP, align 8
  %170 = add i64 %169, -104
  %171 = add i64 %167, 22
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %RDX, align 8, !tbaa !2428
  %174 = add i64 %169, -880
  %175 = load i32, i32* %EAX, align 4
  %176 = add i64 %167, 28
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %174 to i32*
  store i32 %175, i32* %177, align 4
  %178 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %179 = add i64 %178, -673
  %180 = add i64 %178, 7
  %181 = load i64, i64* %RSP, align 8, !tbaa !2428
  %182 = add i64 %181, -8
  %183 = inttoptr i64 %182 to i64*
  store i64 %180, i64* %183, align 8
  store i64 %182, i64* %RSP, align 8, !tbaa !2428
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  %184 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %166)
  %185 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %186 = load i64, i64* %RBP, align 8
  %187 = add i64 %186, -20
  store i64 %187, i64* %R8, align 8, !tbaa !2428
  %188 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 24) to i64*), align 8
  %189 = bitcast [32 x %union.VectorReg]* %6 to double*
  %190 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %188, i64* %190, align 1, !tbaa !2454
  %191 = bitcast i64* %29 to double*
  store double 0.000000e+00, double* %191, align 1, !tbaa !2454
  %192 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 32) to double*), align 16
  %193 = bitcast %union.VectorReg* %7 to double*
  %194 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %196 = bitcast i64* %195 to double*
  store double 0.000000e+00, double* %196, align 1, !tbaa !2454
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 21, i32 0, i32 0
  %198 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %199 = sext i32 %198 to i64
  %200 = mul nsw i64 %199, %199
  %201 = trunc i64 %200 to i32
  %202 = and i64 %200, 4294967295
  %203 = shl i64 %200, 32
  %204 = ashr exact i64 %203, 32
  %205 = icmp ne i64 %204, %200
  %206 = zext i1 %205 to i8
  %207 = and i32 %201, 255
  %208 = tail call i32 @llvm.ctpop.i32(i32 %207) #9
  %209 = trunc i32 %208 to i8
  %210 = and i8 %209, 1
  %211 = xor i8 %210, 1
  %212 = lshr i32 %201, 31
  %213 = trunc i32 %212 to i8
  %214 = trunc i64 %200 to i32
  %sext = shl i64 %200, 32
  %215 = ashr exact i64 %sext, 32
  %216 = mul nsw i64 %199, %215
  %217 = trunc i64 %216 to i32
  %218 = sitofp i32 %217 to double
  %219 = bitcast %union.VectorReg* %8 to double*
  store double %218, double* %219, align 1, !tbaa !2454
  %220 = bitcast %union.VectorReg* %9 to i8*
  %221 = bitcast i64 %188 to <2 x i32>
  %222 = bitcast i64* %29 to <2 x i32>*
  %223 = extractelement <2 x i32> %221, i32 0
  %224 = bitcast %union.VectorReg* %9 to i32*
  store i32 %223, i32* %224, align 1, !tbaa !2451
  %225 = extractelement <2 x i32> %221, i32 1
  %226 = getelementptr inbounds i8, i8* %220, i64 4
  %227 = bitcast i8* %226 to i32*
  store i32 %225, i32* %227, align 1, !tbaa !2451
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %229 = bitcast i64* %228 to i32*
  store i32 0, i32* %229, align 1, !tbaa !2451
  %230 = getelementptr inbounds i8, i8* %220, i64 12
  %231 = bitcast i8* %230 to i32*
  store i32 0, i32* %231, align 1, !tbaa !2451
  %232 = bitcast %union.VectorReg* %9 to double*
  %233 = load double, double* %232, align 1
  %234 = fmul double %233, %218
  %235 = fdiv double %234, %192
  store i64 %202, i64* %197, align 8, !tbaa !2428
  store i8 %206, i8* %17, align 1, !tbaa !2432
  store i8 %211, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i8 0, i8* %20, align 1, !tbaa !2448
  store i8 %213, i8* %21, align 1, !tbaa !2449
  store i8 %206, i8* %22, align 1, !tbaa !2450
  %236 = sitofp i32 %214 to double
  store double %236, double* %193, align 1, !tbaa !2454
  %237 = load double, double* %189, align 1
  %238 = bitcast i64* %29 to <2 x i32>*
  %239 = load <2 x i32>, <2 x i32>* %238, align 1
  %240 = fmul double %236, %237
  %241 = fadd double %240, %235
  store double %241, double* %232, align 1, !tbaa !2454
  %242 = bitcast double %240 to <2 x i32>
  %243 = fptrunc double %241 to float
  store float %243, float* %25, align 1, !tbaa !2451
  %244 = extractelement <2 x i32> %242, i32 1
  %245 = bitcast i8* %27 to i32*
  store i32 %244, i32* %245, align 1, !tbaa !2451
  %246 = extractelement <2 x i32> %239, i32 0
  %247 = bitcast i64* %29 to i32*
  store i32 %246, i32* %247, align 1, !tbaa !2451
  %248 = extractelement <2 x i32> %239, i32 1
  %249 = bitcast i8* %31 to i32*
  store i32 %248, i32* %249, align 1, !tbaa !2451
  %250 = load i64, i64* %RBP, align 8
  %251 = add i64 %250, -12
  %252 = add i64 %185, 121
  store i64 %252, i64* %PC, align 8
  %253 = load <2 x float>, <2 x float>* %57, align 1
  %254 = extractelement <2 x float> %253, i32 0
  %255 = inttoptr i64 %251 to float*
  store float %254, float* %255, align 4
  %256 = load i64, i64* %PC, align 8
  %257 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %258 = zext i32 %257 to i64
  store i64 %258, i64* %RSI, align 8, !tbaa !2428
  %259 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %260 = zext i32 %259 to i64
  store i64 %260, i64* %RDX, align 8, !tbaa !2428
  %261 = load i64, i64* %RBP, align 8
  %262 = add i64 %261, -884
  %263 = load i32, i32* %EAX, align 4
  %264 = add i64 %256, 20
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %262 to i32*
  store i32 %263, i32* %265, align 4
  %266 = load i64, i64* %PC, align 8
  %267 = add i64 %266, 3899
  %268 = add i64 %266, 5
  %269 = load i64, i64* %RSP, align 8, !tbaa !2428
  %270 = add i64 %269, -8
  %271 = inttoptr i64 %270 to i64*
  store i64 %268, i64* %271, align 8
  store i64 %270, i64* %RSP, align 8, !tbaa !2428
  store i64 %267, i64* %PC, align 8, !tbaa !2428
  %272 = tail call %struct.Memory* @sub_401750_matgen(%struct.State* nonnull %0, i64 %267, %struct.Memory* %184)
  %273 = load i64, i64* %PC, align 8
  %274 = add i64 %273, -570
  %275 = add i64 %273, 5
  %276 = load i64, i64* %RSP, align 8, !tbaa !2428
  %277 = add i64 %276, -8
  %278 = inttoptr i64 %277 to i64*
  store i64 %275, i64* %278, align 8
  store i64 %277, i64* %RSP, align 8, !tbaa !2428
  store i64 %274, i64* %PC, align 8, !tbaa !2428
  %279 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %274, %struct.Memory* %272)
  %280 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %281 = load i64, i64* %RBP, align 8
  %282 = add i64 %281, -40
  %283 = add i64 %280, 35
  store i64 %283, i64* %PC, align 8
  %284 = load <2 x float>, <2 x float>* %57, align 1
  %285 = extractelement <2 x float> %284, i32 0
  %286 = inttoptr i64 %282 to float*
  store float %285, float* %286, align 4
  %287 = load i64, i64* %PC, align 8
  %288 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %289 = zext i32 %288 to i64
  store i64 %289, i64* %RSI, align 8, !tbaa !2428
  %290 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %291 = zext i32 %290 to i64
  store i64 %291, i64* %RDX, align 8, !tbaa !2428
  %292 = add i64 %287, 4318
  %293 = add i64 %287, 19
  %294 = load i64, i64* %RSP, align 8, !tbaa !2428
  %295 = add i64 %294, -8
  %296 = inttoptr i64 %295 to i64*
  store i64 %293, i64* %296, align 8
  store i64 %295, i64* %RSP, align 8, !tbaa !2428
  store i64 %292, i64* %PC, align 8, !tbaa !2428
  %297 = tail call %struct.Memory* @sub_401920_dgefa(%struct.State* nonnull %0, i64 %292, %struct.Memory* %279)
  %298 = load i64, i64* %PC, align 8
  %299 = add i64 %298, -629
  %300 = add i64 %298, 5
  %301 = load i64, i64* %RSP, align 8, !tbaa !2428
  %302 = add i64 %301, -8
  %303 = inttoptr i64 %302 to i64*
  store i64 %300, i64* %303, align 8
  store i64 %302, i64* %RSP, align 8, !tbaa !2428
  store i64 %299, i64* %PC, align 8, !tbaa !2428
  %304 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %299, %struct.Memory* %297)
  %305 = load i64, i64* %RBP, align 8
  %306 = add i64 %305, -40
  %307 = load i64, i64* %PC, align 8
  %308 = add i64 %307, 5
  store i64 %308, i64* %PC, align 8
  %309 = load <2 x float>, <2 x float>* %57, align 1
  %310 = load <2 x i32>, <2 x i32>* %222, align 1
  %311 = inttoptr i64 %306 to float*
  %312 = load float, float* %311, align 4
  %313 = extractelement <2 x float> %309, i32 0
  %314 = fsub float %313, %312
  store float %314, float* %25, align 1, !tbaa !2451
  %315 = bitcast <2 x float> %309 to <2 x i32>
  %316 = extractelement <2 x i32> %315, i32 1
  store i32 %316, i32* %245, align 1, !tbaa !2451
  %317 = extractelement <2 x i32> %310, i32 0
  store i32 %317, i32* %247, align 1, !tbaa !2451
  %318 = extractelement <2 x i32> %310, i32 1
  store i32 %318, i32* %249, align 1, !tbaa !2451
  %319 = load <2 x float>, <2 x float>* %57, align 1
  %320 = extractelement <2 x float> %319, i32 0
  store float %320, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to float*), align 16
  %321 = add i64 %307, -634
  %322 = add i64 %307, 19
  %323 = load i64, i64* %RSP, align 8, !tbaa !2428
  %324 = add i64 %323, -8
  %325 = inttoptr i64 %324 to i64*
  store i64 %322, i64* %325, align 8
  store i64 %324, i64* %RSP, align 8, !tbaa !2428
  store i64 %321, i64* %PC, align 8, !tbaa !2428
  %326 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %321, %struct.Memory* %304)
  %327 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %328 = load i64, i64* %RBP, align 8
  %329 = add i64 %328, -40
  %330 = add i64 %327, 38
  store i64 %330, i64* %PC, align 8
  %331 = load <2 x float>, <2 x float>* %57, align 1
  %332 = extractelement <2 x float> %331, i32 0
  %333 = inttoptr i64 %329 to float*
  store float %332, float* %333, align 4
  %334 = load i64, i64* %PC, align 8
  %335 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %336 = zext i32 %335 to i64
  store i64 %336, i64* %RSI, align 8, !tbaa !2428
  %337 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %338 = zext i32 %337 to i64
  store i64 %338, i64* %RDX, align 8, !tbaa !2428
  %339 = add i64 %334, 5021
  %340 = add i64 %334, 19
  %341 = load i64, i64* %RSP, align 8, !tbaa !2428
  %342 = add i64 %341, -8
  %343 = inttoptr i64 %342 to i64*
  store i64 %340, i64* %343, align 8
  store i64 %342, i64* %RSP, align 8, !tbaa !2428
  store i64 %339, i64* %PC, align 8, !tbaa !2428
  %344 = tail call %struct.Memory* @sub_401c30_dgesl(%struct.State* nonnull %0, i64 %339, %struct.Memory* %326)
  %345 = load i64, i64* %PC, align 8
  %346 = add i64 %345, -710
  %347 = add i64 %345, 5
  %348 = load i64, i64* %RSP, align 8, !tbaa !2428
  %349 = add i64 %348, -8
  %350 = inttoptr i64 %349 to i64*
  store i64 %347, i64* %350, align 8
  store i64 %349, i64* %RSP, align 8, !tbaa !2428
  store i64 %346, i64* %PC, align 8, !tbaa !2428
  %351 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %346, %struct.Memory* %344)
  %352 = load i64, i64* %RBP, align 8
  %353 = add i64 %352, -40
  %354 = load i64, i64* %PC, align 8
  %355 = add i64 %354, 5
  store i64 %355, i64* %PC, align 8
  %356 = load <2 x float>, <2 x float>* %57, align 1
  %357 = inttoptr i64 %353 to float*
  %358 = load float, float* %357, align 4
  %359 = extractelement <2 x float> %356, i32 0
  %360 = fsub float %359, %358
  store float %360, float* %25, align 1, !tbaa !2451
  %361 = bitcast <2 x float> %356 to <2 x i32>
  %362 = extractelement <2 x i32> %361, i32 1
  store i32 %362, i32* %245, align 1, !tbaa !2451
  %363 = load <2 x float>, <2 x float>* %57, align 1
  %364 = extractelement <2 x float> %363, i32 0
  store float %364, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508) to float*), align 4
  %365 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448) to i32*), align 16
  store i32 %365, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %366 = load <2 x float>, <2 x float>* %57, align 1
  %367 = load <2 x i32>, <2 x i32>* %222, align 1
  %368 = extractelement <2 x float> %366, i32 0
  %369 = fadd float %368, %364
  store float %369, float* %25, align 1, !tbaa !2451
  %370 = bitcast <2 x float> %366 to <2 x i32>
  %371 = extractelement <2 x i32> %370, i32 1
  store i32 %371, i32* %245, align 1, !tbaa !2451
  %372 = extractelement <2 x i32> %367, i32 0
  store i32 %372, i32* %247, align 1, !tbaa !2451
  %373 = extractelement <2 x i32> %367, i32 1
  store i32 %373, i32* %249, align 1, !tbaa !2451
  %374 = add i64 %352, -16
  %375 = add i64 %354, 37
  store i64 %375, i64* %PC, align 8
  %376 = load <2 x float>, <2 x float>* %57, align 1
  %377 = extractelement <2 x float> %376, i32 0
  %378 = inttoptr i64 %374 to float*
  store float %377, float* %378, align 4
  %379 = load i64, i64* %PC, align 8
  %380 = add i64 %379, 11
  store i64 %380, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4008db

block_400cfe:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %381 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %381, align 1, !tbaa !2456
  %382 = load <2 x float>, <2 x float>* %57, align 1
  %383 = extractelement <2 x float> %382, i32 0
  store float %383, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  %384 = add i64 %2650, 21
  store i64 %384, i64* %PC, align 8
  store float %383, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %.pre75 = load i64, i64* %RBP, align 8
  br label %block_400d13

block_401072:                                     ; preds = %block_4011bb, %block_400fc3
  %385 = phi i32 [ %.pre81, %block_400fc3 ], [ %1473, %block_4011bb ]
  %386 = phi i64 [ %.pre80, %block_400fc3 ], [ %1496, %block_4011bb ]
  %MEMORY.0 = phi %struct.Memory* [ %1197, %block_400fc3 ], [ %1470, %block_4011bb ]
  %387 = add i32 %385, -6
  %388 = icmp ult i32 %385, 6
  %389 = zext i1 %388 to i8
  store i8 %389, i8* %17, align 1, !tbaa !2432
  %390 = and i32 %387, 255
  %391 = tail call i32 @llvm.ctpop.i32(i32 %390) #9
  %392 = trunc i32 %391 to i8
  %393 = and i8 %392, 1
  %394 = xor i8 %393, 1
  store i8 %394, i8* %18, align 1, !tbaa !2446
  %395 = xor i32 %387, %385
  %396 = lshr i32 %395, 4
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  store i8 %398, i8* %19, align 1, !tbaa !2447
  %399 = icmp eq i32 %387, 0
  %400 = zext i1 %399 to i8
  store i8 %400, i8* %20, align 1, !tbaa !2448
  %401 = lshr i32 %387, 31
  %402 = trunc i32 %401 to i8
  store i8 %402, i8* %21, align 1, !tbaa !2449
  %403 = lshr i32 %385, 31
  %404 = xor i32 %401, %403
  %405 = add nuw nsw i32 %404, %403
  %406 = icmp eq i32 %405, 2
  %407 = zext i1 %406 to i8
  store i8 %407, i8* %22, align 1, !tbaa !2450
  %408 = icmp ne i8 %402, 0
  %409 = xor i1 %408, %406
  %.v98 = select i1 %409, i64 14, i64 623
  %410 = add i64 %386, %.v98
  store i64 %410, i64* %PC, align 8, !tbaa !2428
  br i1 %409, label %block_401080, label %block_4012e1

block_401171:                                     ; preds = %block_40115d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %411 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %412 = zext i32 %411 to i64
  store i64 %412, i64* %RSI, align 8, !tbaa !2428
  %413 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %RDX, align 8, !tbaa !2428
  %415 = add i64 %530, 2751
  %416 = add i64 %530, 52
  %417 = load i64, i64* %RSP, align 8, !tbaa !2428
  %418 = add i64 %417, -8
  %419 = inttoptr i64 %418 to i64*
  store i64 %416, i64* %419, align 8
  store i64 %418, i64* %RSP, align 8, !tbaa !2428
  store i64 %415, i64* %PC, align 8, !tbaa !2428
  %420 = tail call %struct.Memory* @sub_401c30_dgesl(%struct.State* nonnull %0, i64 %415, %struct.Memory* %MEMORY.1)
  %421 = load i64, i64* %PC, align 8
  %422 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %423 = add i32 %422, 1
  %424 = zext i32 %423 to i64
  store i64 %424, i64* %RAX, align 8, !tbaa !2428
  %425 = icmp eq i32 %422, -1
  %426 = icmp eq i32 %423, 0
  %427 = or i1 %425, %426
  %428 = zext i1 %427 to i8
  store i8 %428, i8* %17, align 1, !tbaa !2432
  %429 = and i32 %423, 255
  %430 = tail call i32 @llvm.ctpop.i32(i32 %429) #9
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  %433 = xor i8 %432, 1
  store i8 %433, i8* %18, align 1, !tbaa !2446
  %434 = xor i32 %423, %422
  %435 = lshr i32 %434, 4
  %436 = trunc i32 %435 to i8
  %437 = and i8 %436, 1
  store i8 %437, i8* %19, align 1, !tbaa !2447
  %438 = zext i1 %426 to i8
  store i8 %438, i8* %20, align 1, !tbaa !2448
  %439 = lshr i32 %423, 31
  %440 = trunc i32 %439 to i8
  store i8 %440, i8* %21, align 1, !tbaa !2449
  %441 = lshr i32 %422, 31
  %442 = xor i32 %439, %441
  %443 = add nuw nsw i32 %442, %439
  %444 = icmp eq i32 %443, 2
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %22, align 1, !tbaa !2450
  store i32 %423, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %446 = add i64 %421, -72
  store i64 %446, i64* %PC, align 8, !tbaa !2428
  br label %block_40115d

block_4012e1:                                     ; preds = %block_401072
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %447 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %447, align 1, !tbaa !2456
  %448 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 48) to i64*), align 16
  %449 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %450 = fpext float %449 to double
  %451 = bitcast i64 %448 to double
  %452 = fdiv double %450, %451
  store double %452, double* %219, align 1, !tbaa !2454
  %.cast30 = bitcast i64 %448 to <2 x i32>
  %453 = fptrunc double %452 to float
  store float %453, float* %2325, align 1, !tbaa !2451
  %454 = extractelement <2 x i32> %.cast30, i32 1
  store i32 %454, i32* %1630, align 1, !tbaa !2451
  store i32 0, i32* %1631, align 1, !tbaa !2451
  store i32 0, i32* %1633, align 1, !tbaa !2451
  %455 = load <2 x float>, <2 x float>* %2418, align 1
  %456 = extractelement <2 x float> %455, i32 0
  store float %456, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %457 = load i64, i64* @stderr, align 64
  store i64 %457, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %458 = add i64 %410, -3585
  %459 = add i64 %410, 62
  %460 = load i64, i64* %RSP, align 8, !tbaa !2428
  %461 = add i64 %460, -8
  %462 = inttoptr i64 %461 to i64*
  store i64 %459, i64* %462, align 8
  store i64 %461, i64* %RSP, align 8, !tbaa !2428
  store i64 %458, i64* %PC, align 8, !tbaa !2428
  %463 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %464 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 809), i64* %RSI, align 8, !tbaa !2428
  %465 = load i64, i64* @stderr, align 64
  store i64 %465, i64* %RDI, align 8, !tbaa !2428
  %466 = load i64, i64* %RBP, align 8
  %467 = add i64 %466, -972
  %468 = load i32, i32* %EAX, align 4
  %469 = add i64 %464, 24
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %467 to i32*
  store i32 %468, i32* %470, align 4
  %471 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %472 = add i64 %471, -3671
  %473 = add i64 %471, 7
  %474 = load i64, i64* %RSP, align 8, !tbaa !2428
  %475 = add i64 %474, -8
  %476 = inttoptr i64 %475 to i64*
  store i64 %473, i64* %476, align 8
  store i64 %475, i64* %RSP, align 8, !tbaa !2428
  store i64 %472, i64* %PC, align 8, !tbaa !2428
  %477 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %463)
  %478 = load i64, i64* %RBP, align 8
  %479 = add i64 %478, -976
  %480 = load i32, i32* %EAX, align 4
  %481 = load i64, i64* %PC, align 8
  %482 = add i64 %481, 6
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %479 to i32*
  store i32 %480, i32* %483, align 4
  %484 = load i64, i64* %PC, align 8
  %485 = add i64 %484, -3428
  %486 = add i64 %484, 5
  %487 = load i64, i64* %RSP, align 8, !tbaa !2428
  %488 = add i64 %487, -8
  %489 = inttoptr i64 %488 to i64*
  store i64 %486, i64* %489, align 8
  store i64 %488, i64* %RSP, align 8, !tbaa !2428
  store i64 %485, i64* %PC, align 8, !tbaa !2428
  %490 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %485, %struct.Memory* %477)
  %491 = load i64, i64* %RBP, align 8
  %492 = add i64 %491, -80
  %493 = load i64, i64* %PC, align 8
  %494 = add i64 %493, 5
  store i64 %494, i64* %PC, align 8
  %495 = load <2 x float>, <2 x float>* %57, align 1
  %496 = extractelement <2 x float> %495, i32 0
  %497 = inttoptr i64 %492 to float*
  store float %496, float* %497, align 4
  %498 = load i64, i64* %PC, align 8
  %499 = add i64 %498, 11
  store i64 %499, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_401359

block_40115d:                                     ; preds = %block_40111b, %block_401171
  %500 = phi i32 [ 0, %block_40111b ], [ %423, %block_401171 ]
  %501 = phi i64 [ %2154, %block_40111b ], [ %446, %block_401171 ]
  %MEMORY.1 = phi %struct.Memory* [ %2145, %block_40111b ], [ %420, %block_401171 ]
  %502 = zext i32 %500 to i64
  store i64 %502, i64* %RAX, align 8, !tbaa !2428
  %503 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %504 = sub i32 %500, %503
  %505 = icmp ult i32 %500, %503
  %506 = zext i1 %505 to i8
  store i8 %506, i8* %17, align 1, !tbaa !2432
  %507 = and i32 %504, 255
  %508 = tail call i32 @llvm.ctpop.i32(i32 %507) #9
  %509 = trunc i32 %508 to i8
  %510 = and i8 %509, 1
  %511 = xor i8 %510, 1
  store i8 %511, i8* %18, align 1, !tbaa !2446
  %512 = xor i32 %503, %500
  %513 = xor i32 %512, %504
  %514 = lshr i32 %513, 4
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  store i8 %516, i8* %19, align 1, !tbaa !2447
  %517 = icmp eq i32 %504, 0
  %518 = zext i1 %517 to i8
  store i8 %518, i8* %20, align 1, !tbaa !2448
  %519 = lshr i32 %504, 31
  %520 = trunc i32 %519 to i8
  store i8 %520, i8* %21, align 1, !tbaa !2449
  %521 = lshr i32 %500, 31
  %522 = lshr i32 %503, 31
  %523 = xor i32 %522, %521
  %524 = xor i32 %519, %521
  %525 = add nuw nsw i32 %524, %523
  %526 = icmp eq i32 %525, 2
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %22, align 1, !tbaa !2450
  %528 = icmp ne i8 %520, 0
  %529 = xor i1 %528, %526
  %.v104 = select i1 %529, i64 20, i64 94
  %530 = add i64 %501, %.v104
  store i64 %530, i64* %PC, align 8, !tbaa !2428
  br i1 %529, label %block_401171, label %block_4011bb

block_400aee:                                     ; preds = %block_400ab8, %block_400aca
  %531 = phi i64 [ %3099, %block_400ab8 ], [ %.pre89, %block_400aca ]
  %532 = load i64, i64* %RBP, align 8
  %533 = add i64 %532, -904
  %534 = add i64 %531, 8
  store i64 %534, i64* %PC, align 8
  %535 = inttoptr i64 %533 to i64*
  %536 = load i64, i64* %535, align 8
  %.cast21 = bitcast i64 %536 to <2 x i32>
  %.cast22 = bitcast i64 %536 to double
  %537 = fptrunc double %.cast22 to float
  store float %537, float* %25, align 1, !tbaa !2451
  %538 = extractelement <2 x i32> %.cast21, i32 1
  store i32 %538, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  store i32 0, i32* %249, align 1, !tbaa !2451
  %539 = add i64 %532, -24
  %540 = add i64 %531, 17
  store i64 %540, i64* %PC, align 8
  %541 = load <2 x float>, <2 x float>* %57, align 1
  %542 = extractelement <2 x float> %541, i32 0
  %543 = inttoptr i64 %539 to float*
  store float %542, float* %543, align 4
  %544 = load i64, i64* %PC, align 8
  %545 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %546 = add i32 %545, 1
  %547 = zext i32 %546 to i64
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %548 = icmp eq i32 %545, -1
  %549 = icmp eq i32 %546, 0
  %550 = or i1 %548, %549
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %17, align 1, !tbaa !2432
  %552 = and i32 %546, 255
  %553 = tail call i32 @llvm.ctpop.i32(i32 %552) #9
  %554 = trunc i32 %553 to i8
  %555 = and i8 %554, 1
  %556 = xor i8 %555, 1
  store i8 %556, i8* %18, align 1, !tbaa !2446
  %557 = xor i32 %546, %545
  %558 = lshr i32 %557, 4
  %559 = trunc i32 %558 to i8
  %560 = and i8 %559, 1
  store i8 %560, i8* %19, align 1, !tbaa !2447
  %561 = zext i1 %549 to i8
  store i8 %561, i8* %20, align 1, !tbaa !2448
  %562 = lshr i32 %546, 31
  %563 = trunc i32 %562 to i8
  store i8 %563, i8* %21, align 1, !tbaa !2449
  %564 = lshr i32 %545, 31
  %565 = xor i32 %562, %564
  %566 = add nuw nsw i32 %565, %562
  %567 = icmp eq i32 %566, 2
  %568 = zext i1 %567 to i8
  store i8 %568, i8* %22, align 1, !tbaa !2450
  store i32 %546, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %569 = add i64 %544, -248
  store i64 %569, i64* %PC, align 8, !tbaa !2428
  br label %block_400a07

block_4008db:                                     ; preds = %block_4008ef, %block_400630
  %570 = phi i32 [ %871, %block_4008ef ], [ 0, %block_400630 ]
  %571 = phi i64 [ %894, %block_4008ef ], [ %380, %block_400630 ]
  %572 = zext i32 %570 to i64
  store i64 %572, i64* %RAX, align 8, !tbaa !2428
  %573 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %574 = sub i32 %570, %573
  %575 = icmp ult i32 %570, %573
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %17, align 1, !tbaa !2432
  %577 = and i32 %574, 255
  %578 = tail call i32 @llvm.ctpop.i32(i32 %577) #9
  %579 = trunc i32 %578 to i8
  %580 = and i8 %579, 1
  %581 = xor i8 %580, 1
  store i8 %581, i8* %18, align 1, !tbaa !2446
  %582 = xor i32 %573, %570
  %583 = xor i32 %582, %574
  %584 = lshr i32 %583, 4
  %585 = trunc i32 %584 to i8
  %586 = and i8 %585, 1
  store i8 %586, i8* %19, align 1, !tbaa !2447
  %587 = icmp eq i32 %574, 0
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %20, align 1, !tbaa !2448
  %589 = lshr i32 %574, 31
  %590 = trunc i32 %589 to i8
  store i8 %590, i8* %21, align 1, !tbaa !2449
  %591 = lshr i32 %570, 31
  %592 = lshr i32 %573, 31
  %593 = xor i32 %592, %591
  %594 = xor i32 %589, %591
  %595 = add nuw nsw i32 %594, %593
  %596 = icmp eq i32 %595, 2
  %597 = zext i1 %596 to i8
  store i8 %597, i8* %22, align 1, !tbaa !2450
  %598 = icmp ne i8 %590, 0
  %599 = xor i1 %598, %596
  %.v93 = select i1 %599, i64 20, i64 76
  %600 = add i64 %571, %.v93
  store i64 %600, i64* %PC, align 8, !tbaa !2428
  br i1 %599, label %block_4008ef, label %block_400927

block_400a58:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %601 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %602 = sext i32 %601 to i64
  store i64 %602, i64* %RAX, align 8, !tbaa !2428
  %603 = shl nsw i64 %602, 2
  %604 = add i64 %603, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %605 = add i64 %1830, 17
  store i64 %605, i64* %PC, align 8
  %606 = inttoptr i64 %604 to float*
  %607 = load float, float* %606, align 4
  %608 = fpext float %607 to double
  %609 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %610 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %611 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %612 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %609, i32* %1628, align 1, !tbaa !2451
  store i32 %610, i32* %1630, align 1, !tbaa !2451
  store i32 %611, i32* %1631, align 1, !tbaa !2451
  store i32 %612, i32* %1633, align 1, !tbaa !2451
  %613 = bitcast double %608 to i64
  %614 = load i64, i64* %29, align 1
  %615 = load i64, i64* %194, align 1
  %616 = load i64, i64* %195, align 1
  %617 = and i64 %615, %613
  %618 = and i64 %616, %614
  %619 = trunc i64 %617 to i32
  %620 = lshr i64 %617, 32
  %621 = trunc i64 %620 to i32
  store i32 %619, i32* %26, align 1, !tbaa !2456
  store i32 %621, i32* %245, align 1, !tbaa !2456
  %622 = trunc i64 %618 to i32
  store i32 %622, i32* %247, align 1, !tbaa !2456
  %623 = lshr i64 %618, 32
  %624 = trunc i64 %623 to i32
  store i32 %624, i32* %249, align 1, !tbaa !2456
  %625 = load i64, i64* %RBP, align 8
  %626 = add i64 %625, -896
  %627 = add i64 %1830, 36
  store i64 %627, i64* %PC, align 8
  %628 = load i64, i64* %190, align 1
  %629 = inttoptr i64 %626 to i64*
  store i64 %628, i64* %629, align 8
  %.pre87 = load i64, i64* %PC, align 8
  br label %block_400a7c

block_4015d6:                                     ; preds = %block_401578
  %630 = add i64 %1593, -4086
  %631 = add i64 %1593, 5
  %632 = load i64, i64* %RSP, align 8, !tbaa !2428
  %633 = add i64 %632, -8
  %634 = inttoptr i64 %633 to i64*
  store i64 %631, i64* %634, align 8
  store i64 %633, i64* %RSP, align 8, !tbaa !2428
  store i64 %630, i64* %PC, align 8, !tbaa !2428
  %635 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %630, %struct.Memory* %MEMORY.7)
  %636 = load i64, i64* %PC, align 8
  %637 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 24) to i64*), align 8
  store i64 %637, i64* %194, align 1, !tbaa !2454
  store double 0.000000e+00, double* %196, align 1, !tbaa !2454
  %638 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 40) to i64*), align 8
  store i64 %638, i64* %1627, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1232, align 1, !tbaa !2454
  %639 = load i64, i64* %RBP, align 8
  %640 = add i64 %639, -40
  %641 = add i64 %636, 21
  store i64 %641, i64* %PC, align 8
  %642 = load <2 x float>, <2 x float>* %57, align 1
  %643 = load <2 x i32>, <2 x i32>* %222, align 1
  %644 = inttoptr i64 %640 to float*
  %645 = load float, float* %644, align 4
  %646 = extractelement <2 x float> %642, i32 0
  %647 = fsub float %646, %645
  store float %647, float* %25, align 1, !tbaa !2451
  %648 = bitcast <2 x float> %642 to <2 x i32>
  %649 = extractelement <2 x i32> %648, i32 1
  store i32 %649, i32* %245, align 1, !tbaa !2451
  %650 = extractelement <2 x i32> %643, i32 0
  store i32 %650, i32* %247, align 1, !tbaa !2451
  %651 = extractelement <2 x i32> %643, i32 1
  store i32 %651, i32* %249, align 1, !tbaa !2451
  %652 = load <2 x i32>, <2 x i32>* %1233, align 1
  %653 = load <2 x i32>, <2 x i32>* %1234, align 1
  %654 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %655 = sitofp i32 %654 to float
  store float %655, float* %1235, align 1, !tbaa !2451
  %656 = extractelement <2 x i32> %652, i32 1
  store i32 %656, i32* %227, align 1, !tbaa !2451
  %657 = extractelement <2 x i32> %653, i32 0
  store i32 %657, i32* %229, align 1, !tbaa !2451
  %658 = extractelement <2 x i32> %653, i32 1
  store i32 %658, i32* %231, align 1, !tbaa !2451
  %659 = load <2 x float>, <2 x float>* %57, align 1
  %660 = load <2 x i32>, <2 x i32>* %222, align 1
  %661 = load <2 x float>, <2 x float>* %1236, align 1
  %662 = extractelement <2 x float> %659, i32 0
  %663 = extractelement <2 x float> %661, i32 0
  %664 = fdiv float %662, %663
  store float %664, float* %25, align 1, !tbaa !2451
  %665 = bitcast <2 x float> %659 to <2 x i32>
  %666 = extractelement <2 x i32> %665, i32 1
  store i32 %666, i32* %245, align 1, !tbaa !2451
  %667 = extractelement <2 x i32> %660, i32 0
  store i32 %667, i32* %247, align 1, !tbaa !2451
  %668 = extractelement <2 x i32> %660, i32 1
  store i32 %668, i32* %249, align 1, !tbaa !2451
  %669 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %670 = sext i32 %669 to i64
  %671 = shl nsw i64 %670, 2
  %672 = add i64 %671, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %673 = add i64 %636, 51
  store i64 %673, i64* %PC, align 8
  %674 = load <2 x float>, <2 x float>* %57, align 1
  %675 = extractelement <2 x float> %674, i32 0
  %676 = inttoptr i64 %672 to float*
  store float %675, float* %676, align 4
  %677 = load i64, i64* %PC, align 8
  %678 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %679 = sext i32 %678 to i64
  store i64 %679, i64* %RAX, align 8, !tbaa !2428
  %680 = shl nsw i64 %679, 2
  %681 = add i64 %680, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %682 = add i64 %677, 17
  store i64 %682, i64* %PC, align 8
  %683 = inttoptr i64 %681 to i32*
  %684 = load i32, i32* %683, align 4
  store i32 %684, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  store i64 %679, i64* %RAX, align 8, !tbaa !2428
  %685 = add i64 %680, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %686 = add i64 %677, 34
  store i64 %686, i64* %PC, align 8
  %687 = load <2 x float>, <2 x float>* %57, align 1
  %688 = load <2 x i32>, <2 x i32>* %222, align 1
  %689 = inttoptr i64 %685 to float*
  %690 = load float, float* %689, align 4
  %691 = extractelement <2 x float> %687, i32 0
  %692 = fadd float %691, %690
  store float %692, float* %25, align 1, !tbaa !2451
  %693 = bitcast <2 x float> %687 to <2 x i32>
  %694 = extractelement <2 x i32> %693, i32 1
  store i32 %694, i32* %245, align 1, !tbaa !2451
  %695 = extractelement <2 x i32> %688, i32 0
  store i32 %695, i32* %247, align 1, !tbaa !2451
  %696 = extractelement <2 x i32> %688, i32 1
  store i32 %696, i32* %249, align 1, !tbaa !2451
  %697 = load i64, i64* %RBP, align 8
  %698 = add i64 %697, -16
  %699 = add i64 %677, 39
  store i64 %699, i64* %PC, align 8
  %700 = load <2 x float>, <2 x float>* %57, align 1
  %701 = extractelement <2 x float> %700, i32 0
  %702 = inttoptr i64 %698 to float*
  store float %701, float* %702, align 4
  %703 = load i64, i64* %RBP, align 8
  %704 = add i64 %703, -16
  %705 = load i64, i64* %PC, align 8
  %706 = add i64 %705, 5
  store i64 %706, i64* %PC, align 8
  %707 = inttoptr i64 %704 to i32*
  %708 = load i32, i32* %707, align 4
  store i32 %708, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %709 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %710 = sext i32 %709 to i64
  store i64 %710, i64* %RAX, align 8, !tbaa !2428
  %711 = shl nsw i64 %710, 2
  %712 = add i64 %711, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %713 = add i64 %705, 22
  store i64 %713, i64* %PC, align 8
  %714 = load <2 x float>, <2 x float>* %57, align 1
  %715 = extractelement <2 x float> %714, i32 0
  %716 = inttoptr i64 %712 to float*
  store float %715, float* %716, align 4
  %717 = load i64, i64* %RBP, align 8
  %718 = add i64 %717, -12
  %719 = load i64, i64* %PC, align 8
  %720 = add i64 %719, 5
  store i64 %720, i64* %PC, align 8
  %721 = inttoptr i64 %718 to float*
  %722 = load float, float* %721, align 4
  %723 = fpext float %722 to double
  store double %723, double* %189, align 1, !tbaa !2454
  %724 = add i64 %717, -16
  %725 = add i64 %719, 10
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to float*
  %727 = load float, float* %726, align 4
  %728 = fpext float %727 to double
  store double %728, double* %232, align 1, !tbaa !2454
  %729 = load double, double* %219, align 1
  %730 = fmul double %728, %729
  store double %730, double* %219, align 1, !tbaa !2454
  %731 = load <2 x i32>, <2 x i32>* %1979, align 1
  %732 = fdiv double %723, %730
  %.cast33 = bitcast double %732 to <2 x i32>
  %733 = fptrunc double %732 to float
  store float %733, float* %25, align 1, !tbaa !2451
  %734 = extractelement <2 x i32> %.cast33, i32 1
  store i32 %734, i32* %245, align 1, !tbaa !2451
  %735 = extractelement <2 x i32> %731, i32 0
  store i32 %735, i32* %247, align 1, !tbaa !2451
  %736 = extractelement <2 x i32> %731, i32 1
  store i32 %736, i32* %249, align 1, !tbaa !2451
  %737 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %738 = sext i32 %737 to i64
  %739 = shl nsw i64 %738, 2
  %740 = add i64 %739, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %741 = add i64 %719, 39
  store i64 %741, i64* %PC, align 8
  %742 = load <2 x float>, <2 x float>* %57, align 1
  %743 = extractelement <2 x float> %742, i32 0
  %744 = inttoptr i64 %740 to float*
  store float %743, float* %744, align 4
  %745 = load i64, i64* %PC, align 8
  %746 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %747 = sext i32 %746 to i64
  store i64 %747, i64* %RAX, align 8, !tbaa !2428
  %748 = shl nsw i64 %747, 2
  %749 = add i64 %748, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %750 = add i64 %745, 17
  store i64 %750, i64* %PC, align 8
  %751 = inttoptr i64 %749 to float*
  %752 = load float, float* %751, align 4
  %753 = fpext float %752 to double
  %754 = load double, double* %193, align 1
  %755 = fdiv double %754, %753
  store double %755, double* %193, align 1, !tbaa !2454
  %756 = bitcast double %753 to <2 x i32>
  %757 = load <2 x i32>, <2 x i32>* %222, align 1
  %758 = fptrunc double %755 to float
  store float %758, float* %25, align 1, !tbaa !2451
  %759 = extractelement <2 x i32> %756, i32 1
  store i32 %759, i32* %245, align 1, !tbaa !2451
  %760 = extractelement <2 x i32> %757, i32 0
  store i32 %760, i32* %247, align 1, !tbaa !2451
  %761 = extractelement <2 x i32> %757, i32 1
  store i32 %761, i32* %249, align 1, !tbaa !2451
  store i64 %747, i64* %RAX, align 8, !tbaa !2428
  %762 = add i64 %748, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %763 = add i64 %745, 42
  store i64 %763, i64* %PC, align 8
  %764 = load <2 x float>, <2 x float>* %57, align 1
  %765 = extractelement <2 x float> %764, i32 0
  %766 = inttoptr i64 %762 to float*
  store float %765, float* %766, align 4
  %767 = load i64, i64* %RBP, align 8
  %768 = add i64 %767, -16
  %769 = load i64, i64* %PC, align 8
  %770 = add i64 %769, 5
  store i64 %770, i64* %PC, align 8
  %771 = inttoptr i64 %768 to i32*
  %772 = load i32, i32* %771, align 4
  store i32 %772, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %773 = add i64 %767, -8
  %774 = add i64 %769, 10
  store i64 %774, i64* %PC, align 8
  %775 = load <2 x float>, <2 x float>* %57, align 1
  %776 = inttoptr i64 %773 to float*
  %777 = load float, float* %776, align 4
  %778 = extractelement <2 x float> %775, i32 0
  %779 = fdiv float %778, %777
  store float %779, float* %25, align 1, !tbaa !2451
  %780 = bitcast <2 x float> %775 to <2 x i32>
  %781 = extractelement <2 x i32> %780, i32 1
  store i32 %781, i32* %245, align 1, !tbaa !2451
  %782 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %783 = sext i32 %782 to i64
  %784 = shl nsw i64 %783, 2
  %785 = add i64 %784, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %786 = add i64 %769, 27
  store i64 %786, i64* %PC, align 8
  %787 = load <2 x float>, <2 x float>* %57, align 1
  %788 = extractelement <2 x float> %787, i32 0
  %789 = inttoptr i64 %785 to float*
  store float %788, float* %789, align 4
  %790 = load i64, i64* %PC, align 8
  %791 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to i32*), align 4
  store i32 %791, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %792 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %793 = sext i32 %792 to i64
  store i64 %793, i64* %RAX, align 8, !tbaa !2428
  %794 = shl nsw i64 %793, 2
  %795 = add i64 %794, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %796 = add i64 %790, 26
  store i64 %796, i64* %PC, align 8
  %797 = load <2 x float>, <2 x float>* %57, align 1
  %798 = load <2 x i32>, <2 x i32>* %222, align 1
  %799 = inttoptr i64 %795 to float*
  %800 = load float, float* %799, align 4
  %801 = extractelement <2 x float> %797, i32 0
  %802 = fadd float %801, %800
  store float %802, float* %25, align 1, !tbaa !2451
  %803 = bitcast <2 x float> %797 to <2 x i32>
  %804 = extractelement <2 x i32> %803, i32 1
  store i32 %804, i32* %245, align 1, !tbaa !2451
  %805 = extractelement <2 x i32> %798, i32 0
  store i32 %805, i32* %247, align 1, !tbaa !2451
  %806 = extractelement <2 x i32> %798, i32 1
  store i32 %806, i32* %249, align 1, !tbaa !2451
  %807 = load <2 x float>, <2 x float>* %57, align 1
  %808 = extractelement <2 x float> %807, i32 0
  store float %808, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %809 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %810 = zext i32 %809 to i64
  store i64 %810, i64* %RDI, align 8, !tbaa !2428
  %811 = add i64 %790, 4521
  %812 = add i64 %790, 47
  %813 = load i64, i64* %RSP, align 8, !tbaa !2428
  %814 = add i64 %813, -8
  %815 = inttoptr i64 %814 to i64*
  store i64 %812, i64* %815, align 8
  store i64 %814, i64* %RSP, align 8, !tbaa !2428
  store i64 %811, i64* %PC, align 8, !tbaa !2428
  %816 = tail call %struct.Memory* @sub_402860_print_time(%struct.State* nonnull %0, i64 %811, %struct.Memory* %635)
  %817 = load i64, i64* %PC, align 8
  %818 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %819 = add i32 %818, 1
  %820 = zext i32 %819 to i64
  store i64 %820, i64* %RAX, align 8, !tbaa !2428
  %821 = icmp eq i32 %818, -1
  %822 = icmp eq i32 %819, 0
  %823 = or i1 %821, %822
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %17, align 1, !tbaa !2432
  %825 = and i32 %819, 255
  %826 = tail call i32 @llvm.ctpop.i32(i32 %825) #9
  %827 = trunc i32 %826 to i8
  %828 = and i8 %827, 1
  %829 = xor i8 %828, 1
  store i8 %829, i8* %18, align 1, !tbaa !2446
  %830 = xor i32 %819, %818
  %831 = lshr i32 %830, 4
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  store i8 %833, i8* %19, align 1, !tbaa !2447
  %834 = zext i1 %822 to i8
  store i8 %834, i8* %20, align 1, !tbaa !2448
  %835 = lshr i32 %819, 31
  %836 = trunc i32 %835 to i8
  store i8 %836, i8* %21, align 1, !tbaa !2449
  %837 = lshr i32 %818, 31
  %838 = xor i32 %835, %837
  %839 = add nuw nsw i32 %838, %835
  %840 = icmp eq i32 %839, 2
  %841 = zext i1 %840 to i8
  store i8 %841, i8* %22, align 1, !tbaa !2450
  store i32 %819, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %842 = add i64 %817, -601
  store i64 %842, i64* %PC, align 8, !tbaa !2428
  br label %block_40148d

block_40149b:                                     ; preds = %block_40148d
  %843 = add i64 %2867, -3771
  %844 = add i64 %2867, 5
  %845 = load i64, i64* %RSP, align 8, !tbaa !2428
  %846 = add i64 %845, -8
  %847 = inttoptr i64 %846 to i64*
  store i64 %844, i64* %847, align 8
  store i64 %846, i64* %RSP, align 8, !tbaa !2428
  store i64 %843, i64* %PC, align 8, !tbaa !2428
  %848 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %843, %struct.Memory* %MEMORY.16)
  %849 = load i64, i64* %RBP, align 8
  %850 = add i64 %849, -40
  %851 = load i64, i64* %PC, align 8
  %852 = add i64 %851, 5
  store i64 %852, i64* %PC, align 8
  %853 = load <2 x float>, <2 x float>* %57, align 1
  %854 = extractelement <2 x float> %853, i32 0
  %855 = inttoptr i64 %850 to float*
  store float %854, float* %855, align 4
  %856 = load i64, i64* %PC, align 8
  %857 = add i64 %856, 11
  store i64 %857, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_4014b0

block_4008ef:                                     ; preds = %block_4008db
  %858 = sext i32 %570 to i64
  store i64 %858, i64* %RAX, align 8, !tbaa !2428
  %859 = shl nsw i64 %858, 2
  %860 = add i64 %859, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %861 = add i64 %600, 17
  store i64 %861, i64* %PC, align 8
  %862 = inttoptr i64 %860 to i32*
  %863 = load i32, i32* %862, align 4
  store i32 %863, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %864 = add i64 %859, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %865 = add i64 %600, 34
  store i64 %865, i64* %PC, align 8
  %866 = load <2 x float>, <2 x float>* %57, align 1
  %867 = extractelement <2 x float> %866, i32 0
  %868 = inttoptr i64 %864 to float*
  store float %867, float* %868, align 4
  %869 = load i64, i64* %PC, align 8
  %870 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %871 = add i32 %870, 1
  %872 = zext i32 %871 to i64
  store i64 %872, i64* %RAX, align 8, !tbaa !2428
  %873 = icmp eq i32 %870, -1
  %874 = icmp eq i32 %871, 0
  %875 = or i1 %873, %874
  %876 = zext i1 %875 to i8
  store i8 %876, i8* %17, align 1, !tbaa !2432
  %877 = and i32 %871, 255
  %878 = tail call i32 @llvm.ctpop.i32(i32 %877) #9
  %879 = trunc i32 %878 to i8
  %880 = and i8 %879, 1
  %881 = xor i8 %880, 1
  store i8 %881, i8* %18, align 1, !tbaa !2446
  %882 = xor i32 %871, %870
  %883 = lshr i32 %882, 4
  %884 = trunc i32 %883 to i8
  %885 = and i8 %884, 1
  store i8 %885, i8* %19, align 1, !tbaa !2447
  %886 = zext i1 %874 to i8
  store i8 %886, i8* %20, align 1, !tbaa !2448
  %887 = lshr i32 %871, 31
  %888 = trunc i32 %887 to i8
  store i8 %888, i8* %21, align 1, !tbaa !2449
  %889 = lshr i32 %870, 31
  %890 = xor i32 %887, %889
  %891 = add nuw nsw i32 %890, %887
  %892 = icmp eq i32 %891, 2
  %893 = zext i1 %892 to i8
  store i8 %893, i8* %22, align 1, !tbaa !2450
  store i32 %871, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %894 = add i64 %869, -54
  store i64 %894, i64* %PC, align 8, !tbaa !2428
  br label %block_4008db

block_4014b0:                                     ; preds = %block_4014c4, %block_40149b
  %895 = phi i32 [ 0, %block_40149b ], [ %1124, %block_4014c4 ]
  %896 = phi i64 [ %857, %block_40149b ], [ %1147, %block_4014c4 ]
  %MEMORY.4 = phi %struct.Memory* [ %848, %block_40149b ], [ %1121, %block_4014c4 ]
  %897 = zext i32 %895 to i64
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %899 = sub i32 %895, %898
  %900 = icmp ult i32 %895, %898
  %901 = zext i1 %900 to i8
  store i8 %901, i8* %17, align 1, !tbaa !2432
  %902 = and i32 %899, 255
  %903 = tail call i32 @llvm.ctpop.i32(i32 %902) #9
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = xor i8 %905, 1
  store i8 %906, i8* %18, align 1, !tbaa !2446
  %907 = xor i32 %898, %895
  %908 = xor i32 %907, %899
  %909 = lshr i32 %908, 4
  %910 = trunc i32 %909 to i8
  %911 = and i8 %910, 1
  store i8 %911, i8* %19, align 1, !tbaa !2447
  %912 = icmp eq i32 %899, 0
  %913 = zext i1 %912 to i8
  store i8 %913, i8* %20, align 1, !tbaa !2448
  %914 = lshr i32 %899, 31
  %915 = trunc i32 %914 to i8
  store i8 %915, i8* %21, align 1, !tbaa !2449
  %916 = lshr i32 %895, 31
  %917 = lshr i32 %898, 31
  %918 = xor i32 %917, %916
  %919 = xor i32 %914, %916
  %920 = add nuw nsw i32 %919, %918
  %921 = icmp eq i32 %920, 2
  %922 = zext i1 %921 to i8
  store i8 %922, i8* %22, align 1, !tbaa !2450
  %923 = icmp ne i8 %915, 0
  %924 = xor i1 %923, %921
  %.v101 = select i1 %924, i64 20, i64 134
  %925 = add i64 %896, %.v101
  store i64 %925, i64* %PC, align 8, !tbaa !2428
  br i1 %924, label %block_4014c4, label %block_401536

block_400aca:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %926 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %927 = sext i32 %926 to i64
  store i64 %927, i64* %RAX, align 8, !tbaa !2428
  %928 = shl nsw i64 %927, 2
  %929 = add i64 %928, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %930 = add i64 %2942, 17
  store i64 %930, i64* %PC, align 8
  %931 = inttoptr i64 %929 to float*
  %932 = load float, float* %931, align 4
  %933 = fpext float %932 to double
  %934 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %935 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %936 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %937 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %934, i32* %1628, align 1, !tbaa !2451
  store i32 %935, i32* %1630, align 1, !tbaa !2451
  store i32 %936, i32* %1631, align 1, !tbaa !2451
  store i32 %937, i32* %1633, align 1, !tbaa !2451
  %938 = bitcast double %933 to i64
  %939 = load i64, i64* %29, align 1
  %940 = load i64, i64* %194, align 1
  %941 = load i64, i64* %195, align 1
  %942 = and i64 %940, %938
  %943 = and i64 %941, %939
  %944 = trunc i64 %942 to i32
  %945 = lshr i64 %942, 32
  %946 = trunc i64 %945 to i32
  store i32 %944, i32* %26, align 1, !tbaa !2456
  store i32 %946, i32* %245, align 1, !tbaa !2456
  %947 = trunc i64 %943 to i32
  store i32 %947, i32* %247, align 1, !tbaa !2456
  %948 = lshr i64 %943, 32
  %949 = trunc i64 %948 to i32
  store i32 %949, i32* %249, align 1, !tbaa !2456
  %950 = load i64, i64* %RBP, align 8
  %951 = add i64 %950, -904
  %952 = add i64 %2942, 36
  store i64 %952, i64* %PC, align 8
  %953 = load i64, i64* %190, align 1
  %954 = inttoptr i64 %951 to i64*
  store i64 %953, i64* %954, align 8
  %.pre89 = load i64, i64* %PC, align 8
  br label %block_400aee

block_400dc9:                                     ; preds = %block_400d78
  %955 = add i64 %3165, -2025
  %956 = add i64 %3165, 5
  %957 = load i64, i64* %RSP, align 8, !tbaa !2428
  %958 = add i64 %957, -8
  %959 = inttoptr i64 %958 to i64*
  store i64 %956, i64* %959, align 8
  store i64 %958, i64* %RSP, align 8, !tbaa !2428
  store i64 %955, i64* %PC, align 8, !tbaa !2428
  %960 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %955, %struct.Memory* %MEMORY.19)
  %961 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %2782, align 1, !tbaa !2456
  %962 = load i64, i64* %RBP, align 8
  %963 = add i64 %962, -84
  %964 = add i64 %961, 18
  store i64 %964, i64* %PC, align 8
  %965 = load <2 x float>, <2 x float>* %57, align 1
  %966 = extractelement <2 x float> %965, i32 0
  %967 = inttoptr i64 %963 to float*
  store float %966, float* %967, align 4
  %968 = load i64, i64* %RBP, align 8
  %969 = add i64 %968, -84
  %970 = load i64, i64* %PC, align 8
  %971 = add i64 %970, 5
  store i64 %971, i64* %PC, align 8
  %972 = inttoptr i64 %969 to i32*
  %973 = load i32, i32* %972, align 4
  store i32 %973, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %974 = add i64 %968, -80
  %975 = add i64 %970, 10
  store i64 %975, i64* %PC, align 8
  %976 = load <2 x float>, <2 x float>* %57, align 1
  %977 = load <2 x i32>, <2 x i32>* %222, align 1
  %978 = inttoptr i64 %974 to float*
  %979 = load float, float* %978, align 4
  %980 = extractelement <2 x float> %976, i32 0
  %981 = fsub float %980, %979
  store float %981, float* %25, align 1, !tbaa !2451
  %982 = bitcast <2 x float> %976 to <2 x i32>
  %983 = extractelement <2 x i32> %982, i32 1
  store i32 %983, i32* %245, align 1, !tbaa !2451
  %984 = extractelement <2 x i32> %977, i32 0
  store i32 %984, i32* %247, align 1, !tbaa !2451
  %985 = extractelement <2 x i32> %977, i32 1
  store i32 %985, i32* %249, align 1, !tbaa !2451
  %986 = add i64 %968, -72
  %987 = add i64 %970, 15
  store i64 %987, i64* %PC, align 8
  %988 = load <2 x float>, <2 x float>* %57, align 1
  %989 = extractelement <2 x float> %988, i32 0
  %990 = inttoptr i64 %986 to float*
  store float %989, float* %990, align 4
  %991 = load i64, i64* %PC, align 8
  %992 = load i64, i64* @stderr, align 64
  store i64 %992, i64* %RDI, align 8, !tbaa !2428
  %993 = load i64, i64* %RBP, align 8
  %994 = add i64 %993, -68
  %995 = add i64 %991, 11
  store i64 %995, i64* %PC, align 8
  %996 = inttoptr i64 %994 to i32*
  %997 = load i32, i32* %996, align 4
  %998 = zext i32 %997 to i64
  store i64 %998, i64* %RDX, align 8, !tbaa !2428
  %999 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1000 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1001 = extractelement <2 x i32> %999, i32 0
  store i32 %1001, i32* %26, align 1, !tbaa !2451
  %1002 = extractelement <2 x i32> %999, i32 1
  store i32 %1002, i32* %245, align 1, !tbaa !2451
  %1003 = extractelement <2 x i32> %1000, i32 0
  store i32 %1003, i32* %247, align 1, !tbaa !2451
  %1004 = extractelement <2 x i32> %1000, i32 1
  store i32 %1004, i32* %249, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %1005 = add i64 %991, -2319
  %1006 = add i64 %991, 21
  %1007 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1008 = add i64 %1007, -8
  %1009 = inttoptr i64 %1008 to i64*
  store i64 %1006, i64* %1009, align 8
  store i64 %1008, i64* %RSP, align 8, !tbaa !2428
  store i64 %1005, i64* %PC, align 8, !tbaa !2428
  %1010 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %960)
  %1011 = load i64, i64* %RBP, align 8
  %1012 = add i64 %1011, -64
  %1013 = load i64, i64* %PC, align 8
  %1014 = add i64 %1013, 4
  store i64 %1014, i64* %PC, align 8
  %1015 = inttoptr i64 %1012 to i32*
  %1016 = load i32, i32* %1015, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %1017 = and i32 %1016, 255
  %1018 = tail call i32 @llvm.ctpop.i32(i32 %1017) #9
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = xor i8 %1020, 1
  store i8 %1021, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %1022 = icmp eq i32 %1016, 0
  %1023 = zext i1 %1022 to i8
  store i8 %1023, i8* %20, align 1, !tbaa !2448
  %1024 = lshr i32 %1016, 31
  %1025 = trunc i32 %1024 to i8
  store i8 %1025, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1026 = add i64 %1011, -940
  %1027 = load i32, i32* %EAX, align 4
  %1028 = add i64 %1013, 10
  store i64 %1028, i64* %PC, align 8
  %1029 = inttoptr i64 %1026 to i32*
  store i32 %1027, i32* %1029, align 4
  %1030 = load i64, i64* %PC, align 8
  %1031 = add i64 %1030, 15
  %1032 = add i64 %1030, 6
  %1033 = load i8, i8* %21, align 1, !tbaa !2449
  %1034 = icmp ne i8 %1033, 0
  %1035 = load i8, i8* %22, align 1, !tbaa !2450
  %1036 = icmp ne i8 %1035, 0
  %1037 = xor i1 %1034, %1036
  %1038 = select i1 %1037, i64 %1032, i64 %1031
  store i64 %1038, i64* %PC, align 8, !tbaa !2428
  br i1 %1037, label %block_400e14, label %block_400e1d

block_400ec8:                                     ; preds = %block_400eb4
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %1039 = load i64, i64* %RBP, align 8
  %1040 = add i64 %1039, -20
  store i64 %1040, i64* %R8, align 8, !tbaa !2428
  %1041 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1042 = zext i32 %1041 to i64
  store i64 %1042, i64* %RSI, align 8, !tbaa !2428
  %1043 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1044 = zext i32 %1043 to i64
  store i64 %1044, i64* %RDX, align 8, !tbaa !2428
  %1045 = add i64 %1737, 2184
  %1046 = add i64 %1737, 43
  %1047 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1048 = add i64 %1047, -8
  %1049 = inttoptr i64 %1048 to i64*
  store i64 %1046, i64* %1049, align 8
  store i64 %1048, i64* %RSP, align 8, !tbaa !2428
  store i64 %1045, i64* %PC, align 8, !tbaa !2428
  %1050 = tail call %struct.Memory* @sub_401750_matgen(%struct.State* nonnull %0, i64 %1045, %struct.Memory* %MEMORY.8)
  %1051 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %1052 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1053 = zext i32 %1052 to i64
  store i64 %1053, i64* %RSI, align 8, !tbaa !2428
  %1054 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1055 = zext i32 %1054 to i64
  store i64 %1055, i64* %RDX, align 8, !tbaa !2428
  %1056 = add i64 %1051, 2605
  %1057 = add i64 %1051, 49
  %1058 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1059 = add i64 %1058, -8
  %1060 = inttoptr i64 %1059 to i64*
  store i64 %1057, i64* %1060, align 8
  store i64 %1059, i64* %RSP, align 8, !tbaa !2428
  store i64 %1056, i64* %PC, align 8, !tbaa !2428
  %1061 = tail call %struct.Memory* @sub_401920_dgefa(%struct.State* nonnull %0, i64 %1056, %struct.Memory* %1050)
  %1062 = load i64, i64* %PC, align 8
  %1063 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1064 = add i32 %1063, 1
  %1065 = zext i32 %1064 to i64
  store i64 %1065, i64* %RAX, align 8, !tbaa !2428
  %1066 = icmp eq i32 %1063, -1
  %1067 = icmp eq i32 %1064, 0
  %1068 = or i1 %1066, %1067
  %1069 = zext i1 %1068 to i8
  store i8 %1069, i8* %17, align 1, !tbaa !2432
  %1070 = and i32 %1064, 255
  %1071 = tail call i32 @llvm.ctpop.i32(i32 %1070) #9
  %1072 = trunc i32 %1071 to i8
  %1073 = and i8 %1072, 1
  %1074 = xor i8 %1073, 1
  store i8 %1074, i8* %18, align 1, !tbaa !2446
  %1075 = xor i32 %1064, %1063
  %1076 = lshr i32 %1075, 4
  %1077 = trunc i32 %1076 to i8
  %1078 = and i8 %1077, 1
  store i8 %1078, i8* %19, align 1, !tbaa !2447
  %1079 = zext i1 %1067 to i8
  store i8 %1079, i8* %20, align 1, !tbaa !2448
  %1080 = lshr i32 %1064, 31
  %1081 = trunc i32 %1080 to i8
  store i8 %1081, i8* %21, align 1, !tbaa !2449
  %1082 = lshr i32 %1063, 31
  %1083 = xor i32 %1080, %1082
  %1084 = add nuw nsw i32 %1083, %1080
  %1085 = icmp eq i32 %1084, 2
  %1086 = zext i1 %1085 to i8
  store i8 %1086, i8* %22, align 1, !tbaa !2450
  store i32 %1064, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1087 = add i64 %1062, -112
  store i64 %1087, i64* %PC, align 8, !tbaa !2428
  br label %block_400eb4

block_400a46:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  %1088 = load i64, i64* %RBP, align 8
  %1089 = add i64 %1088, -28
  %1090 = add i64 %1830, 5
  store i64 %1090, i64* %PC, align 8
  %1091 = inttoptr i64 %1089 to float*
  %1092 = load float, float* %1091, align 4
  %1093 = fpext float %1092 to double
  store double %1093, double* %189, align 1, !tbaa !2454
  %1094 = add i64 %1088, -896
  %1095 = add i64 %1830, 13
  store i64 %1095, i64* %PC, align 8
  %1096 = inttoptr i64 %1094 to double*
  store double %1093, double* %1096, align 8
  %1097 = load i64, i64* %PC, align 8
  %1098 = add i64 %1097, 41
  store i64 %1098, i64* %PC, align 8, !tbaa !2428
  br label %block_400a7c

block_4014c4:                                     ; preds = %block_4014b0
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %1099 = load i64, i64* %RBP, align 8
  %1100 = add i64 %1099, -20
  store i64 %1100, i64* %R8, align 8, !tbaa !2428
  %1101 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1102 = zext i32 %1101 to i64
  store i64 %1102, i64* %RSI, align 8, !tbaa !2428
  %1103 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1104 = zext i32 %1103 to i64
  store i64 %1104, i64* %RDX, align 8, !tbaa !2428
  %1105 = add i64 %925, 652
  %1106 = add i64 %925, 43
  %1107 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1108 = add i64 %1107, -8
  %1109 = inttoptr i64 %1108 to i64*
  store i64 %1106, i64* %1109, align 8
  store i64 %1108, i64* %RSP, align 8, !tbaa !2428
  store i64 %1105, i64* %PC, align 8, !tbaa !2428
  %1110 = tail call %struct.Memory* @sub_401750_matgen(%struct.State* nonnull %0, i64 %1105, %struct.Memory* %MEMORY.4)
  %1111 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %1112 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RSI, align 8, !tbaa !2428
  %1114 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1115 = zext i32 %1114 to i64
  store i64 %1115, i64* %RDX, align 8, !tbaa !2428
  %1116 = add i64 %1111, 1073
  %1117 = add i64 %1111, 49
  %1118 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1119 = add i64 %1118, -8
  %1120 = inttoptr i64 %1119 to i64*
  store i64 %1117, i64* %1120, align 8
  store i64 %1119, i64* %RSP, align 8, !tbaa !2428
  store i64 %1116, i64* %PC, align 8, !tbaa !2428
  %1121 = tail call %struct.Memory* @sub_401920_dgefa(%struct.State* nonnull %0, i64 %1116, %struct.Memory* %1110)
  %1122 = load i64, i64* %PC, align 8
  %1123 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1124 = add i32 %1123, 1
  %1125 = zext i32 %1124 to i64
  store i64 %1125, i64* %RAX, align 8, !tbaa !2428
  %1126 = icmp eq i32 %1123, -1
  %1127 = icmp eq i32 %1124, 0
  %1128 = or i1 %1126, %1127
  %1129 = zext i1 %1128 to i8
  store i8 %1129, i8* %17, align 1, !tbaa !2432
  %1130 = and i32 %1124, 255
  %1131 = tail call i32 @llvm.ctpop.i32(i32 %1130) #9
  %1132 = trunc i32 %1131 to i8
  %1133 = and i8 %1132, 1
  %1134 = xor i8 %1133, 1
  store i8 %1134, i8* %18, align 1, !tbaa !2446
  %1135 = xor i32 %1124, %1123
  %1136 = lshr i32 %1135, 4
  %1137 = trunc i32 %1136 to i8
  %1138 = and i8 %1137, 1
  store i8 %1138, i8* %19, align 1, !tbaa !2447
  %1139 = zext i1 %1127 to i8
  store i8 %1139, i8* %20, align 1, !tbaa !2448
  %1140 = lshr i32 %1124, 31
  %1141 = trunc i32 %1140 to i8
  store i8 %1141, i8* %21, align 1, !tbaa !2449
  %1142 = lshr i32 %1123, 31
  %1143 = xor i32 %1140, %1142
  %1144 = add nuw nsw i32 %1143, %1140
  %1145 = icmp eq i32 %1144, 2
  %1146 = zext i1 %1145 to i8
  store i8 %1146, i8* %22, align 1, !tbaa !2450
  store i32 %1124, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1147 = add i64 %1122, -112
  store i64 %1147, i64* %PC, align 8, !tbaa !2428
  br label %block_4014b0

block_400fc3:                                     ; preds = %block_400f90
  store i32 1000, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %.pre79 = load i64, i64* @stderr, align 64
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 701), i64* %RSI, align 8, !tbaa !2428
  store i64 0, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  store i64 %.pre79, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %1148 = add i64 %2799, -2751
  %1149 = add i64 %2799, 63
  %1150 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1151 = add i64 %1150, -8
  %1152 = inttoptr i64 %1151 to i64*
  store i64 %1149, i64* %1152, align 8
  store i64 %1151, i64* %RSP, align 8, !tbaa !2428
  store i64 %1148, i64* %PC, align 8, !tbaa !2428
  %1153 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1534)
  %1154 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %1155 = load i64, i64* @stderr, align 64
  store i64 %1155, i64* %RDI, align 8, !tbaa !2428
  %1156 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1157 = zext i32 %1156 to i64
  store i64 %1157, i64* %RDX, align 8, !tbaa !2428
  %1158 = load i64, i64* %RBP, align 8
  %1159 = add i64 %1158, -956
  %1160 = load i32, i32* %EAX, align 4
  %1161 = add i64 %1154, 31
  store i64 %1161, i64* %PC, align 8
  %1162 = inttoptr i64 %1159 to i32*
  store i32 %1160, i32* %1162, align 4
  %1163 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %1164 = add i64 %1163, -2845
  %1165 = add i64 %1163, 7
  %1166 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1167 = add i64 %1166, -8
  %1168 = inttoptr i64 %1167 to i64*
  store i64 %1165, i64* %1168, align 8
  store i64 %1167, i64* %RSP, align 8, !tbaa !2428
  store i64 %1164, i64* %PC, align 8, !tbaa !2428
  %1169 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1153)
  %1170 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %1171 = load i64, i64* @stderr, align 64
  store i64 %1171, i64* %RDI, align 8, !tbaa !2428
  %1172 = load i64, i64* %RBP, align 8
  %1173 = add i64 %1172, -960
  %1174 = load i32, i32* %EAX, align 4
  %1175 = add i64 %1170, 24
  store i64 %1175, i64* %PC, align 8
  %1176 = inttoptr i64 %1173 to i32*
  store i32 %1174, i32* %1176, align 4
  %1177 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %1178 = add i64 %1177, -2876
  %1179 = add i64 %1177, 7
  %1180 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1181 = add i64 %1180, -8
  %1182 = inttoptr i64 %1181 to i64*
  store i64 %1179, i64* %1182, align 8
  store i64 %1181, i64* %RSP, align 8, !tbaa !2428
  store i64 %1178, i64* %PC, align 8, !tbaa !2428
  %1183 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1169)
  %1184 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %1185 = load i64, i64* @stderr, align 64
  store i64 %1185, i64* %RDI, align 8, !tbaa !2428
  %1186 = load i64, i64* %RBP, align 8
  %1187 = add i64 %1186, -964
  %1188 = load i32, i32* %EAX, align 4
  %1189 = add i64 %1184, 24
  store i64 %1189, i64* %PC, align 8
  %1190 = inttoptr i64 %1187 to i32*
  store i32 %1188, i32* %1190, align 4
  %1191 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %1192 = add i64 %1191, -2907
  %1193 = add i64 %1191, 7
  %1194 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1195 = add i64 %1194, -8
  %1196 = inttoptr i64 %1195 to i64*
  store i64 %1193, i64* %1196, align 8
  store i64 %1195, i64* %RSP, align 8, !tbaa !2428
  store i64 %1192, i64* %PC, align 8, !tbaa !2428
  %1197 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1183)
  %1198 = load i64, i64* %PC, align 8
  store i32 0, i32* %26, align 1, !tbaa !2456
  store i32 0, i32* %245, align 1, !tbaa !2456
  store i32 0, i32* %247, align 1, !tbaa !2456
  store i32 0, i32* %249, align 1, !tbaa !2456
  %1199 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1200 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1201 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1202 = sitofp i32 %1201 to float
  store float %1202, float* %2325, align 1, !tbaa !2451
  %1203 = extractelement <2 x i32> %1199, i32 1
  store i32 %1203, i32* %1630, align 1, !tbaa !2451
  %1204 = extractelement <2 x i32> %1200, i32 0
  store i32 %1204, i32* %1631, align 1, !tbaa !2451
  %1205 = extractelement <2 x i32> %1200, i32 1
  store i32 %1205, i32* %1633, align 1, !tbaa !2451
  %1206 = load i64, i64* %RBP, align 8
  %1207 = add i64 %1206, -72
  %1208 = add i64 %1198, 17
  store i64 %1208, i64* %PC, align 8
  %1209 = load <2 x float>, <2 x float>* %2418, align 1
  %1210 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1211 = inttoptr i64 %1207 to float*
  %1212 = load float, float* %1211, align 4
  %1213 = extractelement <2 x float> %1209, i32 0
  %1214 = fmul float %1213, %1212
  store float %1214, float* %2325, align 1, !tbaa !2451
  %1215 = bitcast <2 x float> %1209 to <2 x i32>
  %1216 = extractelement <2 x i32> %1215, i32 1
  store i32 %1216, i32* %1630, align 1, !tbaa !2451
  %1217 = extractelement <2 x i32> %1210, i32 0
  store i32 %1217, i32* %1631, align 1, !tbaa !2451
  %1218 = extractelement <2 x i32> %1210, i32 1
  store i32 %1218, i32* %1633, align 1, !tbaa !2451
  %1219 = add i64 %1206, -44
  %1220 = add i64 %1198, 22
  store i64 %1220, i64* %PC, align 8
  %1221 = load <2 x float>, <2 x float>* %2418, align 1
  %1222 = extractelement <2 x float> %1221, i32 0
  %1223 = inttoptr i64 %1219 to float*
  store float %1222, float* %1223, align 4
  %1224 = load i64, i64* %PC, align 8
  %1225 = load <2 x float>, <2 x float>* %57, align 1
  %1226 = extractelement <2 x float> %1225, i32 0
  store float %1226, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1227 = load i64, i64* %RBP, align 8
  %1228 = add i64 %1227, -968
  %1229 = load i32, i32* %EAX, align 4
  %1230 = add i64 %1224, 26
  store i64 %1230, i64* %PC, align 8
  %1231 = inttoptr i64 %1228 to i32*
  store i32 %1229, i32* %1231, align 4
  %1232 = bitcast i64* %1623 to double*
  %1233 = bitcast %union.VectorReg* %9 to <2 x i32>*
  %1234 = bitcast i64* %228 to <2 x i32>*
  %1235 = bitcast %union.VectorReg* %9 to float*
  %1236 = bitcast %union.VectorReg* %9 to <2 x float>*
  %.pre80 = load i64, i64* %PC, align 8
  %.pre81 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1237 = bitcast i64* %29 to <2 x i32>*
  br label %block_401072

block_400d5a:                                     ; preds = %block_400d13, %block_400e1d
  %1238 = phi i64 [ %.pre76, %block_400d13 ], [ %2044, %block_400e1d ]
  %MEMORY.6 = phi %struct.Memory* [ %2765, %block_400d13 ], [ %1010, %block_400e1d ]
  %1239 = add i64 %1238, -1914
  %1240 = add i64 %1238, 5
  %1241 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1242 = add i64 %1241, -8
  %1243 = inttoptr i64 %1242 to i64*
  store i64 %1240, i64* %1243, align 8
  store i64 %1242, i64* %RSP, align 8, !tbaa !2428
  store i64 %1239, i64* %PC, align 8, !tbaa !2428
  %1244 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %1239, %struct.Memory* %MEMORY.6)
  %1245 = load i64, i64* %RBP, align 8
  %1246 = add i64 %1245, -80
  %1247 = load i64, i64* %PC, align 8
  %1248 = add i64 %1247, 5
  store i64 %1248, i64* %PC, align 8
  %1249 = load <2 x float>, <2 x float>* %57, align 1
  %1250 = extractelement <2 x float> %1249, i32 0
  %1251 = inttoptr i64 %1246 to float*
  store float %1250, float* %1251, align 4
  %1252 = load i64, i64* %RBP, align 8
  %1253 = add i64 %1252, -64
  %1254 = load i64, i64* %PC, align 8
  %1255 = add i64 %1254, 3
  store i64 %1255, i64* %PC, align 8
  %1256 = inttoptr i64 %1253 to i32*
  %1257 = load i32, i32* %1256, align 4
  %1258 = add i32 %1257, 1
  %1259 = zext i32 %1258 to i64
  store i64 %1259, i64* %RAX, align 8, !tbaa !2428
  %1260 = icmp eq i32 %1257, -1
  %1261 = icmp eq i32 %1258, 0
  %1262 = or i1 %1260, %1261
  %1263 = zext i1 %1262 to i8
  store i8 %1263, i8* %17, align 1, !tbaa !2432
  %1264 = and i32 %1258, 255
  %1265 = tail call i32 @llvm.ctpop.i32(i32 %1264) #9
  %1266 = trunc i32 %1265 to i8
  %1267 = and i8 %1266, 1
  %1268 = xor i8 %1267, 1
  store i8 %1268, i8* %18, align 1, !tbaa !2446
  %1269 = xor i32 %1258, %1257
  %1270 = lshr i32 %1269, 4
  %1271 = trunc i32 %1270 to i8
  %1272 = and i8 %1271, 1
  store i8 %1272, i8* %19, align 1, !tbaa !2447
  %1273 = zext i1 %1261 to i8
  store i8 %1273, i8* %20, align 1, !tbaa !2448
  %1274 = lshr i32 %1258, 31
  %1275 = trunc i32 %1274 to i8
  store i8 %1275, i8* %21, align 1, !tbaa !2449
  %1276 = lshr i32 %1257, 31
  %1277 = xor i32 %1274, %1276
  %1278 = add nuw nsw i32 %1277, %1274
  %1279 = icmp eq i32 %1278, 2
  %1280 = zext i1 %1279 to i8
  store i8 %1280, i8* %22, align 1, !tbaa !2450
  %1281 = add i64 %1254, 9
  store i64 %1281, i64* %PC, align 8
  store i32 %1258, i32* %1256, align 4
  %1282 = load i64, i64* %PC, align 8
  %1283 = add i64 %1282, 11
  store i64 %1283, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400d78

block_4011bb:                                     ; preds = %block_40115d
  %1284 = add i64 %530, -3035
  %1285 = add i64 %530, 5
  %1286 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1287 = add i64 %1286, -8
  %1288 = inttoptr i64 %1287 to i64*
  store i64 %1285, i64* %1288, align 8
  store i64 %1287, i64* %RSP, align 8, !tbaa !2428
  store i64 %1284, i64* %PC, align 8, !tbaa !2428
  %1289 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %1284, %struct.Memory* %MEMORY.1)
  %1290 = load i64, i64* %PC, align 8
  %1291 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 24) to i64*), align 8
  store i64 %1291, i64* %194, align 1, !tbaa !2454
  store double 0.000000e+00, double* %196, align 1, !tbaa !2454
  %1292 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 40) to i64*), align 8
  store i64 %1292, i64* %1627, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1232, align 1, !tbaa !2454
  %1293 = load i64, i64* %RBP, align 8
  %1294 = add i64 %1293, -40
  %1295 = add i64 %1290, 21
  store i64 %1295, i64* %PC, align 8
  %1296 = load <2 x float>, <2 x float>* %57, align 1
  %1297 = load <2 x i32>, <2 x i32>* %222, align 1
  %1298 = inttoptr i64 %1294 to float*
  %1299 = load float, float* %1298, align 4
  %1300 = extractelement <2 x float> %1296, i32 0
  %1301 = fsub float %1300, %1299
  store float %1301, float* %25, align 1, !tbaa !2451
  %1302 = bitcast <2 x float> %1296 to <2 x i32>
  %1303 = extractelement <2 x i32> %1302, i32 1
  store i32 %1303, i32* %245, align 1, !tbaa !2451
  %1304 = extractelement <2 x i32> %1297, i32 0
  store i32 %1304, i32* %247, align 1, !tbaa !2451
  %1305 = extractelement <2 x i32> %1297, i32 1
  store i32 %1305, i32* %249, align 1, !tbaa !2451
  %1306 = load <2 x i32>, <2 x i32>* %1233, align 1
  %1307 = load <2 x i32>, <2 x i32>* %1234, align 1
  %1308 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1309 = sitofp i32 %1308 to float
  store float %1309, float* %1235, align 1, !tbaa !2451
  %1310 = extractelement <2 x i32> %1306, i32 1
  store i32 %1310, i32* %227, align 1, !tbaa !2451
  %1311 = extractelement <2 x i32> %1307, i32 0
  store i32 %1311, i32* %229, align 1, !tbaa !2451
  %1312 = extractelement <2 x i32> %1307, i32 1
  store i32 %1312, i32* %231, align 1, !tbaa !2451
  %1313 = load <2 x float>, <2 x float>* %57, align 1
  %1314 = load <2 x i32>, <2 x i32>* %222, align 1
  %1315 = load <2 x float>, <2 x float>* %1236, align 1
  %1316 = extractelement <2 x float> %1313, i32 0
  %1317 = extractelement <2 x float> %1315, i32 0
  %1318 = fdiv float %1316, %1317
  store float %1318, float* %25, align 1, !tbaa !2451
  %1319 = bitcast <2 x float> %1313 to <2 x i32>
  %1320 = extractelement <2 x i32> %1319, i32 1
  store i32 %1320, i32* %245, align 1, !tbaa !2451
  %1321 = extractelement <2 x i32> %1314, i32 0
  store i32 %1321, i32* %247, align 1, !tbaa !2451
  %1322 = extractelement <2 x i32> %1314, i32 1
  store i32 %1322, i32* %249, align 1, !tbaa !2451
  %1323 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1324 = sext i32 %1323 to i64
  %1325 = shl nsw i64 %1324, 2
  %1326 = add i64 %1325, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1327 = add i64 %1290, 51
  store i64 %1327, i64* %PC, align 8
  %1328 = load <2 x float>, <2 x float>* %57, align 1
  %1329 = extractelement <2 x float> %1328, i32 0
  %1330 = inttoptr i64 %1326 to float*
  store float %1329, float* %1330, align 4
  %1331 = load i64, i64* %PC, align 8
  %1332 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1333 = sext i32 %1332 to i64
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  %1334 = shl nsw i64 %1333, 2
  %1335 = add i64 %1334, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1336 = add i64 %1331, 17
  store i64 %1336, i64* %PC, align 8
  %1337 = inttoptr i64 %1335 to i32*
  %1338 = load i32, i32* %1337, align 4
  store i32 %1338, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  %1339 = add i64 %1334, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162508)
  %1340 = add i64 %1331, 34
  store i64 %1340, i64* %PC, align 8
  %1341 = load <2 x float>, <2 x float>* %57, align 1
  %1342 = load <2 x i32>, <2 x i32>* %222, align 1
  %1343 = inttoptr i64 %1339 to float*
  %1344 = load float, float* %1343, align 4
  %1345 = extractelement <2 x float> %1341, i32 0
  %1346 = fadd float %1345, %1344
  store float %1346, float* %25, align 1, !tbaa !2451
  %1347 = bitcast <2 x float> %1341 to <2 x i32>
  %1348 = extractelement <2 x i32> %1347, i32 1
  store i32 %1348, i32* %245, align 1, !tbaa !2451
  %1349 = extractelement <2 x i32> %1342, i32 0
  store i32 %1349, i32* %247, align 1, !tbaa !2451
  %1350 = extractelement <2 x i32> %1342, i32 1
  store i32 %1350, i32* %249, align 1, !tbaa !2451
  %1351 = load i64, i64* %RBP, align 8
  %1352 = add i64 %1351, -16
  %1353 = add i64 %1331, 39
  store i64 %1353, i64* %PC, align 8
  %1354 = load <2 x float>, <2 x float>* %57, align 1
  %1355 = extractelement <2 x float> %1354, i32 0
  %1356 = inttoptr i64 %1352 to float*
  store float %1355, float* %1356, align 4
  %1357 = load i64, i64* %RBP, align 8
  %1358 = add i64 %1357, -16
  %1359 = load i64, i64* %PC, align 8
  %1360 = add i64 %1359, 5
  store i64 %1360, i64* %PC, align 8
  %1361 = inttoptr i64 %1358 to i32*
  %1362 = load i32, i32* %1361, align 4
  store i32 %1362, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1363 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1364 = sext i32 %1363 to i64
  store i64 %1364, i64* %RAX, align 8, !tbaa !2428
  %1365 = shl nsw i64 %1364, 2
  %1366 = add i64 %1365, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568)
  %1367 = add i64 %1359, 22
  store i64 %1367, i64* %PC, align 8
  %1368 = load <2 x float>, <2 x float>* %57, align 1
  %1369 = extractelement <2 x float> %1368, i32 0
  %1370 = inttoptr i64 %1366 to float*
  store float %1369, float* %1370, align 4
  %1371 = load i64, i64* %RBP, align 8
  %1372 = add i64 %1371, -12
  %1373 = load i64, i64* %PC, align 8
  %1374 = add i64 %1373, 5
  store i64 %1374, i64* %PC, align 8
  %1375 = inttoptr i64 %1372 to float*
  %1376 = load float, float* %1375, align 4
  %1377 = fpext float %1376 to double
  store double %1377, double* %189, align 1, !tbaa !2454
  %1378 = add i64 %1371, -16
  %1379 = add i64 %1373, 10
  store i64 %1379, i64* %PC, align 8
  %1380 = inttoptr i64 %1378 to float*
  %1381 = load float, float* %1380, align 4
  %1382 = fpext float %1381 to double
  store double %1382, double* %232, align 1, !tbaa !2454
  %1383 = load double, double* %219, align 1
  %1384 = fmul double %1382, %1383
  store double %1384, double* %219, align 1, !tbaa !2454
  %1385 = load <2 x i32>, <2 x i32>* %1237, align 1
  %1386 = fdiv double %1377, %1384
  %.cast28 = bitcast double %1386 to <2 x i32>
  %1387 = fptrunc double %1386 to float
  store float %1387, float* %25, align 1, !tbaa !2451
  %1388 = extractelement <2 x i32> %.cast28, i32 1
  store i32 %1388, i32* %245, align 1, !tbaa !2451
  %1389 = extractelement <2 x i32> %1385, i32 0
  store i32 %1389, i32* %247, align 1, !tbaa !2451
  %1390 = extractelement <2 x i32> %1385, i32 1
  store i32 %1390, i32* %249, align 1, !tbaa !2451
  %1391 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1392 = sext i32 %1391 to i64
  %1393 = shl nsw i64 %1392, 2
  %1394 = add i64 %1393, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1395 = add i64 %1373, 39
  store i64 %1395, i64* %PC, align 8
  %1396 = load <2 x float>, <2 x float>* %57, align 1
  %1397 = extractelement <2 x float> %1396, i32 0
  %1398 = inttoptr i64 %1394 to float*
  store float %1397, float* %1398, align 4
  %1399 = load i64, i64* %PC, align 8
  %1400 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1401 = sext i32 %1400 to i64
  store i64 %1401, i64* %RAX, align 8, !tbaa !2428
  %1402 = shl nsw i64 %1401, 2
  %1403 = add i64 %1402, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1404 = add i64 %1399, 17
  store i64 %1404, i64* %PC, align 8
  %1405 = inttoptr i64 %1403 to float*
  %1406 = load float, float* %1405, align 4
  %1407 = fpext float %1406 to double
  %1408 = load double, double* %193, align 1
  %1409 = fdiv double %1408, %1407
  store double %1409, double* %193, align 1, !tbaa !2454
  %1410 = bitcast double %1407 to <2 x i32>
  %1411 = load <2 x i32>, <2 x i32>* %222, align 1
  %1412 = fptrunc double %1409 to float
  store float %1412, float* %25, align 1, !tbaa !2451
  %1413 = extractelement <2 x i32> %1410, i32 1
  store i32 %1413, i32* %245, align 1, !tbaa !2451
  %1414 = extractelement <2 x i32> %1411, i32 0
  store i32 %1414, i32* %247, align 1, !tbaa !2451
  %1415 = extractelement <2 x i32> %1411, i32 1
  store i32 %1415, i32* %249, align 1, !tbaa !2451
  store i64 %1401, i64* %RAX, align 8, !tbaa !2428
  %1416 = add i64 %1402, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688)
  %1417 = add i64 %1399, 42
  store i64 %1417, i64* %PC, align 8
  %1418 = load <2 x float>, <2 x float>* %57, align 1
  %1419 = extractelement <2 x float> %1418, i32 0
  %1420 = inttoptr i64 %1416 to float*
  store float %1419, float* %1420, align 4
  %1421 = load i64, i64* %RBP, align 8
  %1422 = add i64 %1421, -16
  %1423 = load i64, i64* %PC, align 8
  %1424 = add i64 %1423, 5
  store i64 %1424, i64* %PC, align 8
  %1425 = inttoptr i64 %1422 to i32*
  %1426 = load i32, i32* %1425, align 4
  store i32 %1426, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1427 = add i64 %1421, -8
  %1428 = add i64 %1423, 10
  store i64 %1428, i64* %PC, align 8
  %1429 = load <2 x float>, <2 x float>* %57, align 1
  %1430 = inttoptr i64 %1427 to float*
  %1431 = load float, float* %1430, align 4
  %1432 = extractelement <2 x float> %1429, i32 0
  %1433 = fdiv float %1432, %1431
  store float %1433, float* %25, align 1, !tbaa !2451
  %1434 = bitcast <2 x float> %1429 to <2 x i32>
  %1435 = extractelement <2 x i32> %1434, i32 1
  store i32 %1435, i32* %245, align 1, !tbaa !2451
  %1436 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1437 = sext i32 %1436 to i64
  %1438 = shl nsw i64 %1437, 2
  %1439 = add i64 %1438, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748)
  %1440 = add i64 %1423, 27
  store i64 %1440, i64* %PC, align 8
  %1441 = load <2 x float>, <2 x float>* %57, align 1
  %1442 = extractelement <2 x float> %1441, i32 0
  %1443 = inttoptr i64 %1439 to float*
  store float %1442, float* %1443, align 4
  %1444 = load i64, i64* %PC, align 8
  %1445 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to i32*), align 4
  store i32 %1445, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1446 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1447 = sext i32 %1446 to i64
  store i64 %1447, i64* %RAX, align 8, !tbaa !2428
  %1448 = shl nsw i64 %1447, 2
  %1449 = add i64 %1448, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628)
  %1450 = add i64 %1444, 26
  store i64 %1450, i64* %PC, align 8
  %1451 = load <2 x float>, <2 x float>* %57, align 1
  %1452 = load <2 x i32>, <2 x i32>* %222, align 1
  %1453 = inttoptr i64 %1449 to float*
  %1454 = load float, float* %1453, align 4
  %1455 = extractelement <2 x float> %1451, i32 0
  %1456 = fadd float %1455, %1454
  store float %1456, float* %25, align 1, !tbaa !2451
  %1457 = bitcast <2 x float> %1451 to <2 x i32>
  %1458 = extractelement <2 x i32> %1457, i32 1
  store i32 %1458, i32* %245, align 1, !tbaa !2451
  %1459 = extractelement <2 x i32> %1452, i32 0
  store i32 %1459, i32* %247, align 1, !tbaa !2451
  %1460 = extractelement <2 x i32> %1452, i32 1
  store i32 %1460, i32* %249, align 1, !tbaa !2451
  %1461 = load <2 x float>, <2 x float>* %57, align 1
  %1462 = extractelement <2 x float> %1461, i32 0
  store float %1462, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162652) to float*), align 4
  %1463 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1464 = zext i32 %1463 to i64
  store i64 %1464, i64* %RDI, align 8, !tbaa !2428
  %1465 = add i64 %1444, 5572
  %1466 = add i64 %1444, 47
  %1467 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1468 = add i64 %1467, -8
  %1469 = inttoptr i64 %1468 to i64*
  store i64 %1466, i64* %1469, align 8
  store i64 %1468, i64* %RSP, align 8, !tbaa !2428
  store i64 %1465, i64* %PC, align 8, !tbaa !2428
  %1470 = tail call %struct.Memory* @sub_402860_print_time(%struct.State* nonnull %0, i64 %1465, %struct.Memory* %1289)
  %1471 = load i64, i64* %PC, align 8
  %1472 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1473 = add i32 %1472, 1
  %1474 = zext i32 %1473 to i64
  store i64 %1474, i64* %RAX, align 8, !tbaa !2428
  %1475 = icmp eq i32 %1472, -1
  %1476 = icmp eq i32 %1473, 0
  %1477 = or i1 %1475, %1476
  %1478 = zext i1 %1477 to i8
  store i8 %1478, i8* %17, align 1, !tbaa !2432
  %1479 = and i32 %1473, 255
  %1480 = tail call i32 @llvm.ctpop.i32(i32 %1479) #9
  %1481 = trunc i32 %1480 to i8
  %1482 = and i8 %1481, 1
  %1483 = xor i8 %1482, 1
  store i8 %1483, i8* %18, align 1, !tbaa !2446
  %1484 = xor i32 %1473, %1472
  %1485 = lshr i32 %1484, 4
  %1486 = trunc i32 %1485 to i8
  %1487 = and i8 %1486, 1
  store i8 %1487, i8* %19, align 1, !tbaa !2447
  %1488 = zext i1 %1476 to i8
  store i8 %1488, i8* %20, align 1, !tbaa !2448
  %1489 = lshr i32 %1473, 31
  %1490 = trunc i32 %1489 to i8
  store i8 %1490, i8* %21, align 1, !tbaa !2449
  %1491 = lshr i32 %1472, 31
  %1492 = xor i32 %1489, %1491
  %1493 = add nuw nsw i32 %1492, %1489
  %1494 = icmp eq i32 %1493, 2
  %1495 = zext i1 %1494 to i8
  store i8 %1495, i8* %22, align 1, !tbaa !2450
  store i32 %1473, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1496 = add i64 %1471, -601
  store i64 %1496, i64* %PC, align 8, !tbaa !2428
  br label %block_401072

block_400f3a:                                     ; preds = %block_400eb4
  %1497 = add i64 %1737, -2394
  %1498 = add i64 %1737, 5
  %1499 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1500 = add i64 %1499, -8
  %1501 = inttoptr i64 %1500 to i64*
  store i64 %1498, i64* %1501, align 8
  store i64 %1500, i64* %RSP, align 8, !tbaa !2428
  store i64 %1497, i64* %PC, align 8, !tbaa !2428
  %1502 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %1497, %struct.Memory* %MEMORY.8)
  %1503 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 589), i64* %RSI, align 8, !tbaa !2428
  store <4 x i32> zeroinitializer, <4 x i32>* %2997, align 1, !tbaa !2456
  %1504 = load i64, i64* %RBP, align 8
  %1505 = add i64 %1504, -80
  %1506 = add i64 %1503, 18
  store i64 %1506, i64* %PC, align 8
  %1507 = load <2 x float>, <2 x float>* %57, align 1
  %1508 = inttoptr i64 %1505 to float*
  %1509 = load float, float* %1508, align 4
  %1510 = extractelement <2 x float> %1507, i32 0
  %1511 = fsub float %1510, %1509
  store float %1511, float* %25, align 1, !tbaa !2451
  %1512 = bitcast <2 x float> %1507 to <2 x i32>
  %1513 = extractelement <2 x i32> %1512, i32 1
  store i32 %1513, i32* %245, align 1, !tbaa !2451
  %1514 = add i64 %1504, -84
  %1515 = add i64 %1503, 23
  store i64 %1515, i64* %PC, align 8
  %1516 = load <2 x float>, <2 x float>* %57, align 1
  %1517 = extractelement <2 x float> %1516, i32 0
  %1518 = inttoptr i64 %1514 to float*
  store float %1517, float* %1518, align 4
  %1519 = load i64, i64* %PC, align 8
  %1520 = load i64, i64* @stderr, align 64
  store i64 %1520, i64* %RDI, align 8, !tbaa !2428
  %1521 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1522 = zext i32 %1521 to i64
  store i64 %1522, i64* %RDX, align 8, !tbaa !2428
  %1523 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1524 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1525 = extractelement <2 x i32> %1523, i32 0
  store i32 %1525, i32* %26, align 1, !tbaa !2451
  %1526 = extractelement <2 x i32> %1523, i32 1
  store i32 %1526, i32* %245, align 1, !tbaa !2451
  %1527 = extractelement <2 x i32> %1524, i32 0
  store i32 %1527, i32* %247, align 1, !tbaa !2451
  %1528 = extractelement <2 x i32> %1524, i32 1
  store i32 %1528, i32* %249, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %1529 = add i64 %1519, -2678
  %1530 = add i64 %1519, 25
  %1531 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1532 = add i64 %1531, -8
  %1533 = inttoptr i64 %1532 to i64*
  store i64 %1530, i64* %1533, align 8
  store i64 %1532, i64* %RSP, align 8, !tbaa !2428
  store i64 %1529, i64* %PC, align 8, !tbaa !2428
  %1534 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1502)
  %1535 = load i64, i64* %RBP, align 8
  %1536 = add i64 %1535, -64
  %1537 = load i64, i64* %PC, align 8
  %1538 = add i64 %1537, 4
  store i64 %1538, i64* %PC, align 8
  %1539 = inttoptr i64 %1536 to i32*
  %1540 = load i32, i32* %1539, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %1541 = and i32 %1540, 255
  %1542 = tail call i32 @llvm.ctpop.i32(i32 %1541) #9
  %1543 = trunc i32 %1542 to i8
  %1544 = and i8 %1543, 1
  %1545 = xor i8 %1544, 1
  store i8 %1545, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %1546 = icmp eq i32 %1540, 0
  %1547 = zext i1 %1546 to i8
  store i8 %1547, i8* %20, align 1, !tbaa !2448
  %1548 = lshr i32 %1540, 31
  %1549 = trunc i32 %1548 to i8
  store i8 %1549, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %1550 = add i64 %1535, -952
  %1551 = load i32, i32* %EAX, align 4
  %1552 = add i64 %1537, 10
  store i64 %1552, i64* %PC, align 8
  %1553 = inttoptr i64 %1550 to i32*
  store i32 %1551, i32* %1553, align 4
  %1554 = load i64, i64* %PC, align 8
  %1555 = add i64 %1554, 23
  %1556 = add i64 %1554, 6
  %1557 = load i8, i8* %21, align 1, !tbaa !2449
  %1558 = icmp ne i8 %1557, 0
  %1559 = load i8, i8* %22, align 1, !tbaa !2450
  %1560 = icmp ne i8 %1559, 0
  %1561 = xor i1 %1558, %1560
  %1562 = select i1 %1561, i64 %1556, i64 %1555
  store i64 %1562, i64* %PC, align 8, !tbaa !2428
  br i1 %1561, label %block_400f7f, label %block_400f90

block_401578:                                     ; preds = %block_40158c, %block_401536
  %1563 = phi i32 [ 0, %block_401536 ], [ %3010, %block_40158c ]
  %1564 = phi i64 [ %1706, %block_401536 ], [ %3033, %block_40158c ]
  %MEMORY.7 = phi %struct.Memory* [ %1697, %block_401536 ], [ %3007, %block_40158c ]
  %1565 = zext i32 %1563 to i64
  store i64 %1565, i64* %RAX, align 8, !tbaa !2428
  %1566 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1567 = sub i32 %1563, %1566
  %1568 = icmp ult i32 %1563, %1566
  %1569 = zext i1 %1568 to i8
  store i8 %1569, i8* %17, align 1, !tbaa !2432
  %1570 = and i32 %1567, 255
  %1571 = tail call i32 @llvm.ctpop.i32(i32 %1570) #9
  %1572 = trunc i32 %1571 to i8
  %1573 = and i8 %1572, 1
  %1574 = xor i8 %1573, 1
  store i8 %1574, i8* %18, align 1, !tbaa !2446
  %1575 = xor i32 %1566, %1563
  %1576 = xor i32 %1575, %1567
  %1577 = lshr i32 %1576, 4
  %1578 = trunc i32 %1577 to i8
  %1579 = and i8 %1578, 1
  store i8 %1579, i8* %19, align 1, !tbaa !2447
  %1580 = icmp eq i32 %1567, 0
  %1581 = zext i1 %1580 to i8
  store i8 %1581, i8* %20, align 1, !tbaa !2448
  %1582 = lshr i32 %1567, 31
  %1583 = trunc i32 %1582 to i8
  store i8 %1583, i8* %21, align 1, !tbaa !2449
  %1584 = lshr i32 %1563, 31
  %1585 = lshr i32 %1566, 31
  %1586 = xor i32 %1585, %1584
  %1587 = xor i32 %1582, %1584
  %1588 = add nuw nsw i32 %1587, %1586
  %1589 = icmp eq i32 %1588, 2
  %1590 = zext i1 %1589 to i8
  store i8 %1590, i8* %22, align 1, !tbaa !2450
  %1591 = icmp ne i8 %1583, 0
  %1592 = xor i1 %1591, %1589
  %.v102 = select i1 %1592, i64 20, i64 94
  %1593 = add i64 %1564, %.v102
  store i64 %1593, i64* %PC, align 8, !tbaa !2428
  br i1 %1592, label %block_40158c, label %block_4015d6

block_4009b7:                                     ; preds = %block_40095d
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RSI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992), i64* %R8, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %R9, align 8, !tbaa !2428
  %1594 = zext i32 %1741 to i64
  store i64 %1594, i64* %RDI, align 8, !tbaa !2428
  store i64 %1594, i64* %RDX, align 8, !tbaa !2428
  %1595 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %1596 = zext i32 %1595 to i64
  store i64 %1596, i64* %RCX, align 8, !tbaa !2428
  %1597 = add i64 %1768, 5625
  %1598 = add i64 %1768, 56
  %1599 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1600 = add i64 %1599, -8
  %1601 = inttoptr i64 %1600 to i64*
  store i64 %1598, i64* %1601, align 8
  store i64 %1600, i64* %RSP, align 8, !tbaa !2428
  store i64 %1597, i64* %PC, align 8, !tbaa !2428
  %1602 = tail call %struct.Memory* @sub_401fb0_dmxpy(%struct.State* nonnull %0, i64 %1597, %struct.Memory* %3047)
  %1603 = load i64, i64* %PC, align 8
  %1604 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1604, align 1, !tbaa !2456
  %1605 = load i64, i64* %RBP, align 8
  %1606 = add i64 %1605, -28
  %1607 = add i64 %1603, 8
  store i64 %1607, i64* %PC, align 8
  %1608 = load <2 x float>, <2 x float>* %57, align 1
  %1609 = extractelement <2 x float> %1608, i32 0
  %1610 = inttoptr i64 %1606 to float*
  store float %1609, float* %1610, align 4
  %1611 = load i64, i64* %RBP, align 8
  %1612 = add i64 %1611, -24
  %1613 = load i64, i64* %PC, align 8
  %1614 = add i64 %1613, 5
  store i64 %1614, i64* %PC, align 8
  %1615 = load <2 x float>, <2 x float>* %57, align 1
  %1616 = extractelement <2 x float> %1615, i32 0
  %1617 = inttoptr i64 %1612 to float*
  store float %1616, float* %1617, align 4
  %1618 = load i64, i64* %PC, align 8
  %1619 = add i64 %1618, 11
  store i64 %1619, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %1620 = bitcast %union.VectorReg* %8 to i32*
  %1621 = getelementptr inbounds i8, i8* %3036, i64 4
  %1622 = bitcast i8* %1621 to i32*
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %1624 = bitcast i64* %1623 to i32*
  %1625 = getelementptr inbounds i8, i8* %3036, i64 12
  %1626 = bitcast i8* %1625 to i32*
  %1627 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  %1628 = bitcast %union.VectorReg* %7 to i32*
  %1629 = getelementptr inbounds i8, i8* %3035, i64 4
  %1630 = bitcast i8* %1629 to i32*
  %1631 = bitcast i64* %195 to i32*
  %1632 = getelementptr inbounds i8, i8* %3035, i64 12
  %1633 = bitcast i8* %1632 to i32*
  br label %block_400a07

block_401536:                                     ; preds = %block_4014b0
  %1634 = add i64 %925, -3926
  %1635 = add i64 %925, 5
  %1636 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1637 = add i64 %1636, -8
  %1638 = inttoptr i64 %1637 to i64*
  store i64 %1635, i64* %1638, align 8
  store i64 %1637, i64* %RSP, align 8, !tbaa !2428
  store i64 %1634, i64* %PC, align 8, !tbaa !2428
  %1639 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %1634, %struct.Memory* %MEMORY.4)
  %1640 = load i64, i64* %RBP, align 8
  %1641 = add i64 %1640, -40
  %1642 = load i64, i64* %PC, align 8
  %1643 = add i64 %1642, 5
  store i64 %1643, i64* %PC, align 8
  %1644 = load <2 x float>, <2 x float>* %57, align 1
  %1645 = load <2 x i32>, <2 x i32>* %222, align 1
  %1646 = inttoptr i64 %1641 to float*
  %1647 = load float, float* %1646, align 4
  %1648 = extractelement <2 x float> %1644, i32 0
  %1649 = fsub float %1648, %1647
  store float %1649, float* %25, align 1, !tbaa !2451
  %1650 = bitcast <2 x float> %1644 to <2 x i32>
  %1651 = extractelement <2 x i32> %1650, i32 1
  store i32 %1651, i32* %245, align 1, !tbaa !2451
  %1652 = extractelement <2 x i32> %1645, i32 0
  store i32 %1652, i32* %247, align 1, !tbaa !2451
  %1653 = extractelement <2 x i32> %1645, i32 1
  store i32 %1653, i32* %249, align 1, !tbaa !2451
  %1654 = add i64 %1640, -44
  %1655 = add i64 %1642, 10
  store i64 %1655, i64* %PC, align 8
  %1656 = load <2 x float>, <2 x float>* %57, align 1
  %1657 = load <2 x i32>, <2 x i32>* %222, align 1
  %1658 = inttoptr i64 %1654 to float*
  %1659 = load float, float* %1658, align 4
  %1660 = extractelement <2 x float> %1656, i32 0
  %1661 = fsub float %1660, %1659
  store float %1661, float* %25, align 1, !tbaa !2451
  %1662 = bitcast <2 x float> %1656 to <2 x i32>
  %1663 = extractelement <2 x i32> %1662, i32 1
  store i32 %1663, i32* %245, align 1, !tbaa !2451
  %1664 = extractelement <2 x i32> %1657, i32 0
  store i32 %1664, i32* %247, align 1, !tbaa !2451
  %1665 = extractelement <2 x i32> %1657, i32 1
  store i32 %1665, i32* %249, align 1, !tbaa !2451
  %1666 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1667 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1668 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1669 = sitofp i32 %1668 to float
  store float %1669, float* %2325, align 1, !tbaa !2451
  %1670 = extractelement <2 x i32> %1666, i32 1
  store i32 %1670, i32* %1630, align 1, !tbaa !2451
  %1671 = extractelement <2 x i32> %1667, i32 0
  store i32 %1671, i32* %1631, align 1, !tbaa !2451
  %1672 = extractelement <2 x i32> %1667, i32 1
  store i32 %1672, i32* %1633, align 1, !tbaa !2451
  %1673 = load <2 x float>, <2 x float>* %57, align 1
  %1674 = load <2 x i32>, <2 x i32>* %222, align 1
  %1675 = load <2 x float>, <2 x float>* %2418, align 1
  %1676 = extractelement <2 x float> %1673, i32 0
  %1677 = extractelement <2 x float> %1675, i32 0
  %1678 = fdiv float %1676, %1677
  store float %1678, float* %25, align 1, !tbaa !2451
  %1679 = bitcast <2 x float> %1673 to <2 x i32>
  %1680 = extractelement <2 x i32> %1679, i32 1
  store i32 %1680, i32* %245, align 1, !tbaa !2451
  %1681 = extractelement <2 x i32> %1674, i32 0
  store i32 %1681, i32* %247, align 1, !tbaa !2451
  %1682 = extractelement <2 x i32> %1674, i32 1
  store i32 %1682, i32* %249, align 1, !tbaa !2451
  %1683 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1684 = sext i32 %1683 to i64
  store i64 %1684, i64* %RAX, align 8, !tbaa !2428
  %1685 = shl nsw i64 %1684, 2
  %1686 = add i64 %1685, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %1687 = add i64 %1642, 40
  store i64 %1687, i64* %PC, align 8
  %1688 = load <2 x float>, <2 x float>* %57, align 1
  %1689 = extractelement <2 x float> %1688, i32 0
  %1690 = inttoptr i64 %1686 to float*
  store float %1689, float* %1690, align 4
  %1691 = load i64, i64* %PC, align 8
  %1692 = add i64 %1691, -3971
  %1693 = add i64 %1691, 5
  %1694 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1695 = add i64 %1694, -8
  %1696 = inttoptr i64 %1695 to i64*
  store i64 %1693, i64* %1696, align 8
  store i64 %1695, i64* %RSP, align 8, !tbaa !2428
  store i64 %1692, i64* %PC, align 8, !tbaa !2428
  %1697 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %1692, %struct.Memory* %1639)
  %1698 = load i64, i64* %RBP, align 8
  %1699 = add i64 %1698, -40
  %1700 = load i64, i64* %PC, align 8
  %1701 = add i64 %1700, 5
  store i64 %1701, i64* %PC, align 8
  %1702 = load <2 x float>, <2 x float>* %57, align 1
  %1703 = extractelement <2 x float> %1702, i32 0
  %1704 = inttoptr i64 %1699 to float*
  store float %1703, float* %1704, align 4
  %1705 = load i64, i64* %PC, align 8
  %1706 = add i64 %1705, 11
  store i64 %1706, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_401578

block_400eb4:                                     ; preds = %block_400e96, %block_400ec8
  %1707 = phi i32 [ 0, %block_400e96 ], [ %1064, %block_400ec8 ]
  %1708 = phi i64 [ %2249, %block_400e96 ], [ %1087, %block_400ec8 ]
  %MEMORY.8 = phi %struct.Memory* [ %2210, %block_400e96 ], [ %1061, %block_400ec8 ]
  %1709 = zext i32 %1707 to i64
  store i64 %1709, i64* %RAX, align 8, !tbaa !2428
  %1710 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1711 = sub i32 %1707, %1710
  %1712 = icmp ult i32 %1707, %1710
  %1713 = zext i1 %1712 to i8
  store i8 %1713, i8* %17, align 1, !tbaa !2432
  %1714 = and i32 %1711, 255
  %1715 = tail call i32 @llvm.ctpop.i32(i32 %1714) #9
  %1716 = trunc i32 %1715 to i8
  %1717 = and i8 %1716, 1
  %1718 = xor i8 %1717, 1
  store i8 %1718, i8* %18, align 1, !tbaa !2446
  %1719 = xor i32 %1710, %1707
  %1720 = xor i32 %1719, %1711
  %1721 = lshr i32 %1720, 4
  %1722 = trunc i32 %1721 to i8
  %1723 = and i8 %1722, 1
  store i8 %1723, i8* %19, align 1, !tbaa !2447
  %1724 = icmp eq i32 %1711, 0
  %1725 = zext i1 %1724 to i8
  store i8 %1725, i8* %20, align 1, !tbaa !2448
  %1726 = lshr i32 %1711, 31
  %1727 = trunc i32 %1726 to i8
  store i8 %1727, i8* %21, align 1, !tbaa !2449
  %1728 = lshr i32 %1707, 31
  %1729 = lshr i32 %1710, 31
  %1730 = xor i32 %1729, %1728
  %1731 = xor i32 %1726, %1728
  %1732 = add nuw nsw i32 %1731, %1730
  %1733 = icmp eq i32 %1732, 2
  %1734 = zext i1 %1733 to i8
  store i8 %1734, i8* %22, align 1, !tbaa !2450
  %1735 = icmp ne i8 %1727, 0
  %1736 = xor i1 %1735, %1733
  %.v97 = select i1 %1736, i64 20, i64 134
  %1737 = add i64 %1708, %.v97
  store i64 %1737, i64* %PC, align 8, !tbaa !2428
  br i1 %1736, label %block_400ec8, label %block_400f3a

block_40095d:                                     ; preds = %block_400927, %block_400971
  %1738 = phi i32 [ 0, %block_400927 ], [ %2818, %block_400971 ]
  %1739 = phi i64 [ %3049, %block_400927 ], [ %2841, %block_400971 ]
  %1740 = zext i32 %1738 to i64
  store i64 %1740, i64* %RAX, align 8, !tbaa !2428
  %1741 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %1742 = sub i32 %1738, %1741
  %1743 = icmp ult i32 %1738, %1741
  %1744 = zext i1 %1743 to i8
  store i8 %1744, i8* %17, align 1, !tbaa !2432
  %1745 = and i32 %1742, 255
  %1746 = tail call i32 @llvm.ctpop.i32(i32 %1745) #9
  %1747 = trunc i32 %1746 to i8
  %1748 = and i8 %1747, 1
  %1749 = xor i8 %1748, 1
  store i8 %1749, i8* %18, align 1, !tbaa !2446
  %1750 = xor i32 %1741, %1738
  %1751 = xor i32 %1750, %1742
  %1752 = lshr i32 %1751, 4
  %1753 = trunc i32 %1752 to i8
  %1754 = and i8 %1753, 1
  store i8 %1754, i8* %19, align 1, !tbaa !2447
  %1755 = icmp eq i32 %1742, 0
  %1756 = zext i1 %1755 to i8
  store i8 %1756, i8* %20, align 1, !tbaa !2448
  %1757 = lshr i32 %1742, 31
  %1758 = trunc i32 %1757 to i8
  store i8 %1758, i8* %21, align 1, !tbaa !2449
  %1759 = lshr i32 %1738, 31
  %1760 = lshr i32 %1741, 31
  %1761 = xor i32 %1760, %1759
  %1762 = xor i32 %1757, %1759
  %1763 = add nuw nsw i32 %1762, %1761
  %1764 = icmp eq i32 %1763, 2
  %1765 = zext i1 %1764 to i8
  store i8 %1765, i8* %22, align 1, !tbaa !2450
  %1766 = icmp ne i8 %1758, 0
  %1767 = xor i1 %1766, %1764
  %.v94 = select i1 %1767, i64 20, i64 90
  %1768 = add i64 %1739, %.v94
  store i64 %1768, i64* %PC, align 8, !tbaa !2428
  br i1 %1767, label %block_400971, label %block_4009b7

block_400a1b:                                     ; preds = %block_400a07
  %1769 = load i64, i64* %RBP, align 8
  %1770 = add i64 %1769, -28
  %1771 = add i64 %3130, 5
  store i64 %1771, i64* %PC, align 8
  %1772 = inttoptr i64 %1770 to float*
  %1773 = load float, float* %1772, align 4
  %1774 = fpext float %1773 to double
  store double %1774, double* %189, align 1, !tbaa !2454
  %1775 = sext i32 %3100 to i64
  store i64 %1775, i64* %RAX, align 8, !tbaa !2428
  %1776 = shl nsw i64 %1775, 2
  %1777 = add i64 %1776, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %1778 = add i64 %3130, 22
  store i64 %1778, i64* %PC, align 8
  %1779 = inttoptr i64 %1777 to float*
  %1780 = load float, float* %1779, align 4
  %1781 = fpext float %1780 to double
  %1782 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %1783 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %1784 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %1785 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %1782, i32* %1620, align 1, !tbaa !2451
  store i32 %1783, i32* %1622, align 1, !tbaa !2451
  store i32 %1784, i32* %1624, align 1, !tbaa !2451
  store i32 %1785, i32* %1626, align 1, !tbaa !2451
  %1786 = bitcast double %1781 to i64
  %1787 = load i64, i64* %195, align 1
  %1788 = load i64, i64* %1627, align 1
  %1789 = load i64, i64* %1623, align 1
  %1790 = and i64 %1788, %1786
  %1791 = and i64 %1789, %1787
  %1792 = trunc i64 %1790 to i32
  %1793 = lshr i64 %1790, 32
  %1794 = trunc i64 %1793 to i32
  store i32 %1792, i32* %1628, align 1, !tbaa !2456
  store i32 %1794, i32* %1630, align 1, !tbaa !2456
  %1795 = trunc i64 %1791 to i32
  store i32 %1795, i32* %1631, align 1, !tbaa !2456
  %1796 = lshr i64 %1791, 32
  %1797 = trunc i64 %1796 to i32
  store i32 %1797, i32* %1633, align 1, !tbaa !2456
  %1798 = add i64 %3130, 37
  store i64 %1798, i64* %PC, align 8
  %1799 = load double, double* %193, align 1
  %1800 = fcmp uno double %1774, %1799
  br i1 %1800, label %1801, label %1811

; <label>:1801:                                   ; preds = %block_400a1b
  %1802 = fadd double %1774, %1799
  %1803 = bitcast double %1802 to i64
  %1804 = and i64 %1803, 9221120237041090560
  %1805 = icmp eq i64 %1804, 9218868437227405312
  %1806 = and i64 %1803, 2251799813685247
  %1807 = icmp ne i64 %1806, 0
  %1808 = and i1 %1805, %1807
  br i1 %1808, label %1809, label %1817

; <label>:1809:                                   ; preds = %1801
  %1810 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1798, %struct.Memory* %MEMORY.18) #12
  %.pre84 = load i64, i64* %PC, align 8
  %.pre85 = load i8, i8* %17, align 1, !tbaa !2432
  %.pre86 = load i8, i8* %20, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:1811:                                   ; preds = %block_400a1b
  %1812 = fcmp ogt double %1774, %1799
  br i1 %1812, label %1817, label %1813

; <label>:1813:                                   ; preds = %1811
  %1814 = fcmp olt double %1774, %1799
  br i1 %1814, label %1817, label %1815

; <label>:1815:                                   ; preds = %1813
  %1816 = fcmp oeq double %1774, %1799
  br i1 %1816, label %1817, label %1821

; <label>:1817:                                   ; preds = %1815, %1813, %1811, %1801
  %1818 = phi i8 [ 0, %1811 ], [ 0, %1813 ], [ 1, %1815 ], [ 1, %1801 ]
  %1819 = phi i8 [ 0, %1811 ], [ 0, %1813 ], [ 0, %1815 ], [ 1, %1801 ]
  %1820 = phi i8 [ 0, %1811 ], [ 1, %1813 ], [ 0, %1815 ], [ 1, %1801 ]
  store i8 %1818, i8* %20, align 1, !tbaa !2453
  store i8 %1819, i8* %18, align 1, !tbaa !2453
  store i8 %1820, i8* %17, align 1, !tbaa !2453
  br label %1821

; <label>:1821:                                   ; preds = %1817, %1815
  %1822 = phi i8 [ %1818, %1817 ], [ %3118, %1815 ]
  %1823 = phi i8 [ %1820, %1817 ], [ %3106, %1815 ]
  store i8 0, i8* %22, align 1, !tbaa !2453
  store i8 0, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %19, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %1821, %1809
  %1824 = phi i8 [ %.pre86, %1809 ], [ %1822, %1821 ]
  %1825 = phi i8 [ %.pre85, %1809 ], [ %1823, %1821 ]
  %1826 = phi i64 [ %.pre84, %1809 ], [ %1798, %1821 ]
  %1827 = phi %struct.Memory* [ %1810, %1809 ], [ %MEMORY.18, %1821 ]
  %1828 = or i8 %1824, %1825
  %1829 = icmp ne i8 %1828, 0
  %.v105 = select i1 %1829, i64 24, i64 6
  %1830 = add i64 %1826, %.v105
  store i64 %1830, i64* %PC, align 8, !tbaa !2428
  br i1 %1829, label %block_400a58, label %block_400a46

block_4013aa:                                     ; preds = %block_401359
  %1831 = add i64 %2284, -3530
  %1832 = add i64 %2284, 5
  %1833 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1834 = add i64 %1833, -8
  %1835 = inttoptr i64 %1834 to i64*
  store i64 %1832, i64* %1835, align 8
  store i64 %1834, i64* %RSP, align 8, !tbaa !2428
  store i64 %1831, i64* %PC, align 8, !tbaa !2428
  %1836 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %1831, %struct.Memory* %MEMORY.12)
  %1837 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %1838 = bitcast %union.VectorReg* %7 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1838, align 1, !tbaa !2456
  %1839 = load i64, i64* %RBP, align 8
  %1840 = add i64 %1839, -84
  %1841 = add i64 %1837, 18
  store i64 %1841, i64* %PC, align 8
  %1842 = load <2 x float>, <2 x float>* %57, align 1
  %1843 = extractelement <2 x float> %1842, i32 0
  %1844 = inttoptr i64 %1840 to float*
  store float %1843, float* %1844, align 4
  %1845 = load i64, i64* %RBP, align 8
  %1846 = add i64 %1845, -84
  %1847 = load i64, i64* %PC, align 8
  %1848 = add i64 %1847, 5
  store i64 %1848, i64* %PC, align 8
  %1849 = inttoptr i64 %1846 to i32*
  %1850 = load i32, i32* %1849, align 4
  store i32 %1850, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %1851 = add i64 %1845, -80
  %1852 = add i64 %1847, 10
  store i64 %1852, i64* %PC, align 8
  %1853 = load <2 x float>, <2 x float>* %57, align 1
  %1854 = load <2 x i32>, <2 x i32>* %222, align 1
  %1855 = inttoptr i64 %1851 to float*
  %1856 = load float, float* %1855, align 4
  %1857 = extractelement <2 x float> %1853, i32 0
  %1858 = fsub float %1857, %1856
  store float %1858, float* %25, align 1, !tbaa !2451
  %1859 = bitcast <2 x float> %1853 to <2 x i32>
  %1860 = extractelement <2 x i32> %1859, i32 1
  store i32 %1860, i32* %245, align 1, !tbaa !2451
  %1861 = extractelement <2 x i32> %1854, i32 0
  store i32 %1861, i32* %247, align 1, !tbaa !2451
  %1862 = extractelement <2 x i32> %1854, i32 1
  store i32 %1862, i32* %249, align 1, !tbaa !2451
  %1863 = add i64 %1845, -76
  %1864 = add i64 %1847, 15
  store i64 %1864, i64* %PC, align 8
  %1865 = load <2 x float>, <2 x float>* %57, align 1
  %1866 = extractelement <2 x float> %1865, i32 0
  %1867 = inttoptr i64 %1863 to float*
  store float %1866, float* %1867, align 4
  %1868 = load i64, i64* %RBP, align 8
  %1869 = add i64 %1868, -76
  %1870 = load i64, i64* %PC, align 8
  %1871 = add i64 %1870, 5
  store i64 %1871, i64* %PC, align 8
  %1872 = inttoptr i64 %1869 to float*
  %1873 = load float, float* %1872, align 4
  %1874 = fpext float %1873 to double
  store double %1874, double* %189, align 1, !tbaa !2454
  %1875 = add i64 %1868, -68
  %1876 = add i64 %1870, 10
  store i64 %1876, i64* %PC, align 8
  %1877 = inttoptr i64 %1875 to i32*
  %1878 = load i32, i32* %1877, align 4
  %1879 = sitofp i32 %1878 to double
  store double %1879, double* %219, align 1, !tbaa !2454
  %1880 = fdiv double %1874, %1879
  %.cast31 = bitcast double %1880 to <2 x i32>
  %1881 = fptrunc double %1880 to float
  store float %1881, float* %25, align 1, !tbaa !2451
  %1882 = extractelement <2 x i32> %.cast31, i32 1
  store i32 %1882, i32* %245, align 1, !tbaa !2451
  %1883 = add i64 %1870, 23
  store i64 %1883, i64* %PC, align 8
  %1884 = load <2 x float>, <2 x float>* %57, align 1
  %1885 = extractelement <2 x float> %1884, i32 0
  store float %1885, float* %1872, align 4
  %1886 = load i64, i64* %PC, align 8
  %1887 = load i64, i64* @stderr, align 64
  store i64 %1887, i64* %RDI, align 8, !tbaa !2428
  %1888 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1889 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1890 = extractelement <2 x i32> %1888, i32 0
  store i32 %1890, i32* %26, align 1, !tbaa !2451
  %1891 = extractelement <2 x i32> %1888, i32 1
  store i32 %1891, i32* %245, align 1, !tbaa !2451
  %1892 = extractelement <2 x i32> %1889, i32 0
  store i32 %1892, i32* %247, align 1, !tbaa !2451
  %1893 = extractelement <2 x i32> %1889, i32 1
  store i32 %1893, i32* %249, align 1, !tbaa !2451
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %1894 = add i64 %1886, -3847
  %1895 = add i64 %1886, 18
  %1896 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1897 = add i64 %1896, -8
  %1898 = inttoptr i64 %1897 to i64*
  store i64 %1895, i64* %1898, align 8
  store i64 %1897, i64* %RSP, align 8, !tbaa !2428
  store i64 %1894, i64* %PC, align 8, !tbaa !2428
  %1899 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1836)
  %1900 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 721), i64* %RSI, align 8, !tbaa !2428
  %1901 = load i64, i64* @stderr, align 64
  store i64 %1901, i64* %RDI, align 8, !tbaa !2428
  %1902 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %1903 = zext i32 %1902 to i64
  store i64 %1903, i64* %RDX, align 8, !tbaa !2428
  %1904 = load i64, i64* %RBP, align 8
  %1905 = add i64 %1904, -980
  %1906 = load i32, i32* %EAX, align 4
  %1907 = add i64 %1900, 31
  store i64 %1907, i64* %PC, align 8
  %1908 = inttoptr i64 %1905 to i32*
  store i32 %1906, i32* %1908, align 4
  %1909 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %1910 = add i64 %1909, -3896
  %1911 = add i64 %1909, 7
  %1912 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1913 = add i64 %1912, -8
  %1914 = inttoptr i64 %1913 to i64*
  store i64 %1911, i64* %1914, align 8
  store i64 %1913, i64* %RSP, align 8, !tbaa !2428
  store i64 %1910, i64* %PC, align 8, !tbaa !2428
  %1915 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1899)
  %1916 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %1917 = load i64, i64* @stderr, align 64
  store i64 %1917, i64* %RDI, align 8, !tbaa !2428
  %1918 = load i64, i64* %RBP, align 8
  %1919 = add i64 %1918, -984
  %1920 = load i32, i32* %EAX, align 4
  %1921 = add i64 %1916, 24
  store i64 %1921, i64* %PC, align 8
  %1922 = inttoptr i64 %1919 to i32*
  store i32 %1920, i32* %1922, align 4
  %1923 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %1924 = add i64 %1923, -3927
  %1925 = add i64 %1923, 7
  %1926 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1927 = add i64 %1926, -8
  %1928 = inttoptr i64 %1927 to i64*
  store i64 %1925, i64* %1928, align 8
  store i64 %1927, i64* %RSP, align 8, !tbaa !2428
  store i64 %1924, i64* %PC, align 8, !tbaa !2428
  %1929 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1915)
  %1930 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %1931 = load i64, i64* @stderr, align 64
  store i64 %1931, i64* %RDI, align 8, !tbaa !2428
  %1932 = load i64, i64* %RBP, align 8
  %1933 = add i64 %1932, -988
  %1934 = load i32, i32* %EAX, align 4
  %1935 = add i64 %1930, 24
  store i64 %1935, i64* %PC, align 8
  %1936 = inttoptr i64 %1933 to i32*
  store i32 %1934, i32* %1936, align 4
  %1937 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %1938 = add i64 %1937, -3958
  %1939 = add i64 %1937, 7
  %1940 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1941 = add i64 %1940, -8
  %1942 = inttoptr i64 %1941 to i64*
  store i64 %1939, i64* %1942, align 8
  store i64 %1941, i64* %RSP, align 8, !tbaa !2428
  store i64 %1938, i64* %PC, align 8, !tbaa !2428
  %1943 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1929)
  %1944 = load i64, i64* %PC, align 8
  %1945 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %1945, align 1, !tbaa !2456
  %1946 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %1947 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1948 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %1949 = sitofp i32 %1948 to float
  store float %1949, float* %2325, align 1, !tbaa !2451
  %1950 = extractelement <2 x i32> %1946, i32 1
  store i32 %1950, i32* %1630, align 1, !tbaa !2451
  %1951 = extractelement <2 x i32> %1947, i32 0
  store i32 %1951, i32* %1631, align 1, !tbaa !2451
  %1952 = extractelement <2 x i32> %1947, i32 1
  store i32 %1952, i32* %1633, align 1, !tbaa !2451
  %1953 = load i64, i64* %RBP, align 8
  %1954 = add i64 %1953, -76
  %1955 = add i64 %1944, 17
  store i64 %1955, i64* %PC, align 8
  %1956 = load <2 x float>, <2 x float>* %2418, align 1
  %1957 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %1958 = inttoptr i64 %1954 to float*
  %1959 = load float, float* %1958, align 4
  %1960 = extractelement <2 x float> %1956, i32 0
  %1961 = fmul float %1960, %1959
  store float %1961, float* %2325, align 1, !tbaa !2451
  %1962 = bitcast <2 x float> %1956 to <2 x i32>
  %1963 = extractelement <2 x i32> %1962, i32 1
  store i32 %1963, i32* %1630, align 1, !tbaa !2451
  %1964 = extractelement <2 x i32> %1957, i32 0
  store i32 %1964, i32* %1631, align 1, !tbaa !2451
  %1965 = extractelement <2 x i32> %1957, i32 1
  store i32 %1965, i32* %1633, align 1, !tbaa !2451
  %1966 = add i64 %1953, -44
  %1967 = add i64 %1944, 22
  store i64 %1967, i64* %PC, align 8
  %1968 = load <2 x float>, <2 x float>* %2418, align 1
  %1969 = extractelement <2 x float> %1968, i32 0
  %1970 = inttoptr i64 %1966 to float*
  store float %1969, float* %1970, align 4
  %1971 = load i64, i64* %PC, align 8
  %1972 = load <2 x float>, <2 x float>* %57, align 1
  %1973 = extractelement <2 x float> %1972, i32 0
  store float %1973, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  store i32 7, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1974 = load i64, i64* %RBP, align 8
  %1975 = add i64 %1974, -992
  %1976 = load i32, i32* %EAX, align 4
  %1977 = add i64 %1971, 26
  store i64 %1977, i64* %PC, align 8
  %1978 = inttoptr i64 %1975 to i32*
  store i32 %1976, i32* %1978, align 4
  %.pre82 = load i64, i64* %PC, align 8
  %.pre83 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %1979 = bitcast i64* %29 to <2 x i32>*
  br label %block_40148d

block_400cb0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1980 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 24) to i64*), align 8
  store i64 %1980, i64* %190, align 1, !tbaa !2454
  store double 0.000000e+00, double* %191, align 1, !tbaa !2454
  %1981 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 40) to i64*), align 8
  store i64 %1981, i64* %194, align 1, !tbaa !2454
  store double 0.000000e+00, double* %196, align 1, !tbaa !2454
  %1982 = load i64, i64* %RBP, align 8
  %1983 = add i64 %1982, -12
  %1984 = add i64 %2650, 21
  store i64 %1984, i64* %PC, align 8
  %1985 = inttoptr i64 %1983 to float*
  %1986 = load float, float* %1985, align 4
  %1987 = fpext float %1986 to double
  store double %1987, double* %219, align 1, !tbaa !2454
  %1988 = add i64 %1982, -16
  %1989 = add i64 %2650, 26
  store i64 %1989, i64* %PC, align 8
  %1990 = inttoptr i64 %1988 to float*
  %1991 = load float, float* %1990, align 4
  %1992 = fpext float %1991 to double
  store double %1992, double* %232, align 1, !tbaa !2454
  %1993 = bitcast i64 %1981 to double
  %1994 = fmul double %1992, %1993
  %1995 = fdiv double %1987, %1994
  store double %1995, double* %219, align 1, !tbaa !2454
  %1996 = bitcast double %1994 to <2 x i32>
  %1997 = fptrunc double %1995 to float
  store float %1997, float* %2325, align 1, !tbaa !2451
  %1998 = extractelement <2 x i32> %1996, i32 1
  store i32 %1998, i32* %1630, align 1, !tbaa !2451
  store i32 0, i32* %1631, align 1, !tbaa !2451
  store i32 0, i32* %1633, align 1, !tbaa !2451
  %1999 = load <2 x float>, <2 x float>* %2418, align 1
  %2000 = extractelement <2 x float> %1999, i32 0
  store float %2000, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162628) to float*), align 4
  %2001 = fpext float %2000 to double
  store double %2001, double* %193, align 1, !tbaa !2454
  %2002 = bitcast i64 %1980 to double
  %2003 = fdiv double %2002, %2001
  %.cast23 = bitcast double %2003 to <2 x i32>
  %2004 = fptrunc double %2003 to float
  store float %2004, float* %25, align 1, !tbaa !2451
  %2005 = extractelement <2 x i32> %.cast23, i32 1
  store i32 %2005, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  store i32 0, i32* %249, align 1, !tbaa !2451
  %2006 = load <2 x float>, <2 x float>* %57, align 1
  %2007 = extractelement <2 x float> %2006, i32 0
  store float %2007, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162688) to float*), align 16
  %2008 = add i64 %2650, 99
  store i64 %2008, i64* %PC, align 8, !tbaa !2428
  br label %block_400d13

block_400f7f:                                     ; preds = %block_400f3a
  %2009 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2010 = shl i32 %2009, 1
  %2011 = icmp slt i32 %2009, 0
  %2012 = icmp slt i32 %2010, 0
  %2013 = xor i1 %2011, %2012
  %2014 = zext i32 %2010 to i64
  store i64 %2014, i64* %RAX, align 8, !tbaa !2428
  %.lobit27 = lshr i32 %2009, 31
  %2015 = trunc i32 %.lobit27 to i8
  store i8 %2015, i8* %17, align 1, !tbaa !2453
  %2016 = and i32 %2010, 254
  %2017 = tail call i32 @llvm.ctpop.i32(i32 %2016) #9
  %2018 = trunc i32 %2017 to i8
  %2019 = and i8 %2018, 1
  %2020 = xor i8 %2019, 1
  store i8 %2020, i8* %18, align 1, !tbaa !2453
  store i8 0, i8* %19, align 1, !tbaa !2453
  %2021 = icmp eq i32 %2010, 0
  %2022 = zext i1 %2021 to i8
  store i8 %2022, i8* %20, align 1, !tbaa !2453
  %2023 = lshr i32 %2009, 30
  %2024 = trunc i32 %2023 to i8
  %2025 = and i8 %2024, 1
  store i8 %2025, i8* %21, align 1, !tbaa !2453
  %2026 = zext i1 %2013 to i8
  store i8 %2026, i8* %22, align 1, !tbaa !2453
  %2027 = add i64 %1562, 17
  store i64 %2027, i64* %PC, align 8
  store i32 %2010, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  br label %block_400f90

block_400e1d:                                     ; preds = %block_400dc9, %block_400e14
  %2028 = phi i64 [ %1031, %block_400dc9 ], [ %.pre77, %block_400e14 ]
  %2029 = load i64, i64* %RBP, align 8
  %2030 = add i64 %2029, -64
  %2031 = add i64 %2028, 9
  store i64 %2031, i64* %PC, align 8
  %2032 = inttoptr i64 %2030 to i32*
  %2033 = load i32, i32* %2032, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %2034 = and i32 %2033, 255
  %2035 = tail call i32 @llvm.ctpop.i32(i32 %2034) #9
  %2036 = trunc i32 %2035 to i8
  %2037 = and i8 %2036, 1
  %2038 = xor i8 %2037, 1
  store i8 %2038, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2039 = icmp eq i32 %2033, 0
  %2040 = zext i1 %2039 to i8
  store i8 %2040, i8* %20, align 1, !tbaa !2448
  %2041 = lshr i32 %2033, 31
  %2042 = trunc i32 %2041 to i8
  store i8 %2042, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %2043 = icmp ne i8 %2042, 0
  %.v = select i1 %2043, i64 -204, i64 6
  %2044 = add i64 %2031, %.v
  store i64 %2044, i64* %PC, align 8, !tbaa !2428
  br i1 %2043, label %block_400d5a, label %block_400e2c

block_401369:                                     ; preds = %block_401359
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2045 = add i64 %2253, -20
  store i64 %2045, i64* %R8, align 8, !tbaa !2428
  %2046 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2047 = zext i32 %2046 to i64
  store i64 %2047, i64* %RSI, align 8, !tbaa !2428
  %2048 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2049 = zext i32 %2048 to i64
  store i64 %2049, i64* %RDX, align 8, !tbaa !2428
  %2050 = add i64 %2284, 999
  %2051 = add i64 %2284, 43
  %2052 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2053 = add i64 %2052, -8
  %2054 = inttoptr i64 %2053 to i64*
  store i64 %2051, i64* %2054, align 8
  store i64 %2053, i64* %RSP, align 8, !tbaa !2428
  store i64 %2050, i64* %PC, align 8, !tbaa !2428
  %2055 = tail call %struct.Memory* @sub_401750_matgen(%struct.State* nonnull %0, i64 %2050, %struct.Memory* %MEMORY.12)
  %2056 = load i64, i64* %PC, align 8
  %2057 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2058 = add i32 %2057, 1
  %2059 = zext i32 %2058 to i64
  store i64 %2059, i64* %RAX, align 8, !tbaa !2428
  %2060 = icmp eq i32 %2057, -1
  %2061 = icmp eq i32 %2058, 0
  %2062 = or i1 %2060, %2061
  %2063 = zext i1 %2062 to i8
  store i8 %2063, i8* %17, align 1, !tbaa !2432
  %2064 = and i32 %2058, 255
  %2065 = tail call i32 @llvm.ctpop.i32(i32 %2064) #9
  %2066 = trunc i32 %2065 to i8
  %2067 = and i8 %2066, 1
  %2068 = xor i8 %2067, 1
  store i8 %2068, i8* %18, align 1, !tbaa !2446
  %2069 = xor i32 %2058, %2057
  %2070 = lshr i32 %2069, 4
  %2071 = trunc i32 %2070 to i8
  %2072 = and i8 %2071, 1
  store i8 %2072, i8* %19, align 1, !tbaa !2447
  %2073 = zext i1 %2061 to i8
  store i8 %2073, i8* %20, align 1, !tbaa !2448
  %2074 = lshr i32 %2058, 31
  %2075 = trunc i32 %2074 to i8
  store i8 %2075, i8* %21, align 1, !tbaa !2449
  %2076 = lshr i32 %2057, 31
  %2077 = xor i32 %2074, %2076
  %2078 = add nuw nsw i32 %2077, %2074
  %2079 = icmp eq i32 %2078, 2
  %2080 = zext i1 %2079 to i8
  store i8 %2080, i8* %22, align 1, !tbaa !2450
  store i32 %2058, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2081 = add i64 %2056, -59
  store i64 %2081, i64* %PC, align 8, !tbaa !2428
  br label %block_401359

block_40111b:                                     ; preds = %block_401095
  %2082 = add i64 %2315, -2875
  %2083 = add i64 %2315, 5
  %2084 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2085 = add i64 %2084, -8
  %2086 = inttoptr i64 %2085 to i64*
  store i64 %2083, i64* %2086, align 8
  store i64 %2085, i64* %RSP, align 8, !tbaa !2428
  store i64 %2082, i64* %PC, align 8, !tbaa !2428
  %2087 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %2082, %struct.Memory* %MEMORY.13)
  %2088 = load i64, i64* %RBP, align 8
  %2089 = add i64 %2088, -40
  %2090 = load i64, i64* %PC, align 8
  %2091 = add i64 %2090, 5
  store i64 %2091, i64* %PC, align 8
  %2092 = load <2 x float>, <2 x float>* %57, align 1
  %2093 = load <2 x i32>, <2 x i32>* %222, align 1
  %2094 = inttoptr i64 %2089 to float*
  %2095 = load float, float* %2094, align 4
  %2096 = extractelement <2 x float> %2092, i32 0
  %2097 = fsub float %2096, %2095
  store float %2097, float* %25, align 1, !tbaa !2451
  %2098 = bitcast <2 x float> %2092 to <2 x i32>
  %2099 = extractelement <2 x i32> %2098, i32 1
  store i32 %2099, i32* %245, align 1, !tbaa !2451
  %2100 = extractelement <2 x i32> %2093, i32 0
  store i32 %2100, i32* %247, align 1, !tbaa !2451
  %2101 = extractelement <2 x i32> %2093, i32 1
  store i32 %2101, i32* %249, align 1, !tbaa !2451
  %2102 = add i64 %2088, -44
  %2103 = add i64 %2090, 10
  store i64 %2103, i64* %PC, align 8
  %2104 = load <2 x float>, <2 x float>* %57, align 1
  %2105 = load <2 x i32>, <2 x i32>* %222, align 1
  %2106 = inttoptr i64 %2102 to float*
  %2107 = load float, float* %2106, align 4
  %2108 = extractelement <2 x float> %2104, i32 0
  %2109 = fsub float %2108, %2107
  store float %2109, float* %25, align 1, !tbaa !2451
  %2110 = bitcast <2 x float> %2104 to <2 x i32>
  %2111 = extractelement <2 x i32> %2110, i32 1
  store i32 %2111, i32* %245, align 1, !tbaa !2451
  %2112 = extractelement <2 x i32> %2105, i32 0
  store i32 %2112, i32* %247, align 1, !tbaa !2451
  %2113 = extractelement <2 x i32> %2105, i32 1
  store i32 %2113, i32* %249, align 1, !tbaa !2451
  %2114 = load <2 x i32>, <2 x i32>* %.pre-phi, align 1
  %2115 = load <2 x i32>, <2 x i32>* %.pre-phi92, align 1
  %2116 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2117 = sitofp i32 %2116 to float
  store float %2117, float* %2325, align 1, !tbaa !2451
  %2118 = extractelement <2 x i32> %2114, i32 1
  store i32 %2118, i32* %1630, align 1, !tbaa !2451
  %2119 = extractelement <2 x i32> %2115, i32 0
  store i32 %2119, i32* %1631, align 1, !tbaa !2451
  %2120 = extractelement <2 x i32> %2115, i32 1
  store i32 %2120, i32* %1633, align 1, !tbaa !2451
  %2121 = load <2 x float>, <2 x float>* %57, align 1
  %2122 = load <2 x i32>, <2 x i32>* %222, align 1
  %2123 = load <2 x float>, <2 x float>* %2418, align 1
  %2124 = extractelement <2 x float> %2121, i32 0
  %2125 = extractelement <2 x float> %2123, i32 0
  %2126 = fdiv float %2124, %2125
  store float %2126, float* %25, align 1, !tbaa !2451
  %2127 = bitcast <2 x float> %2121 to <2 x i32>
  %2128 = extractelement <2 x i32> %2127, i32 1
  store i32 %2128, i32* %245, align 1, !tbaa !2451
  %2129 = extractelement <2 x i32> %2122, i32 0
  store i32 %2129, i32* %247, align 1, !tbaa !2451
  %2130 = extractelement <2 x i32> %2122, i32 1
  store i32 %2130, i32* %249, align 1, !tbaa !2451
  %2131 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163796) to i32*), align 4
  %2132 = sext i32 %2131 to i64
  store i64 %2132, i64* %RAX, align 8, !tbaa !2428
  %2133 = shl nsw i64 %2132, 2
  %2134 = add i64 %2133, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162448)
  %2135 = add i64 %2090, 40
  store i64 %2135, i64* %PC, align 8
  %2136 = load <2 x float>, <2 x float>* %57, align 1
  %2137 = extractelement <2 x float> %2136, i32 0
  %2138 = inttoptr i64 %2134 to float*
  store float %2137, float* %2138, align 4
  %2139 = load i64, i64* %PC, align 8
  %2140 = add i64 %2139, -2920
  %2141 = add i64 %2139, 5
  %2142 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2143 = add i64 %2142, -8
  %2144 = inttoptr i64 %2143 to i64*
  store i64 %2141, i64* %2144, align 8
  store i64 %2143, i64* %RSP, align 8, !tbaa !2428
  store i64 %2140, i64* %PC, align 8, !tbaa !2428
  %2145 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %2140, %struct.Memory* %2087)
  %2146 = load i64, i64* %RBP, align 8
  %2147 = add i64 %2146, -40
  %2148 = load i64, i64* %PC, align 8
  %2149 = add i64 %2148, 5
  store i64 %2149, i64* %PC, align 8
  %2150 = load <2 x float>, <2 x float>* %57, align 1
  %2151 = extractelement <2 x float> %2150, i32 0
  %2152 = inttoptr i64 %2147 to float*
  store float %2151, float* %2152, align 4
  %2153 = load i64, i64* %PC, align 8
  %2154 = add i64 %2153, 11
  store i64 %2154, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_40115d

block_4010a9:                                     ; preds = %block_401095
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %2155 = load i64, i64* %RBP, align 8
  %2156 = add i64 %2155, -20
  store i64 %2156, i64* %R8, align 8, !tbaa !2428
  %2157 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2158 = zext i32 %2157 to i64
  store i64 %2158, i64* %RSI, align 8, !tbaa !2428
  %2159 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2160 = zext i32 %2159 to i64
  store i64 %2160, i64* %RDX, align 8, !tbaa !2428
  %2161 = add i64 %2315, 1703
  %2162 = add i64 %2315, 43
  %2163 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2164 = add i64 %2163, -8
  %2165 = inttoptr i64 %2164 to i64*
  store i64 %2162, i64* %2165, align 8
  store i64 %2164, i64* %RSP, align 8, !tbaa !2428
  store i64 %2161, i64* %PC, align 8, !tbaa !2428
  %2166 = tail call %struct.Memory* @sub_401750_matgen(%struct.State* nonnull %0, i64 %2161, %struct.Memory* %MEMORY.13)
  %2167 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162432), i64* %R8, align 8, !tbaa !2428
  %2168 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2169 = zext i32 %2168 to i64
  store i64 %2169, i64* %RSI, align 8, !tbaa !2428
  %2170 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2171 = zext i32 %2170 to i64
  store i64 %2171, i64* %RDX, align 8, !tbaa !2428
  %2172 = add i64 %2167, 2124
  %2173 = add i64 %2167, 49
  %2174 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2175 = add i64 %2174, -8
  %2176 = inttoptr i64 %2175 to i64*
  store i64 %2173, i64* %2176, align 8
  store i64 %2175, i64* %RSP, align 8, !tbaa !2428
  store i64 %2172, i64* %PC, align 8, !tbaa !2428
  %2177 = tail call %struct.Memory* @sub_401920_dgefa(%struct.State* nonnull %0, i64 %2172, %struct.Memory* %2166)
  %2178 = load i64, i64* %PC, align 8
  %2179 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2180 = add i32 %2179, 1
  %2181 = zext i32 %2180 to i64
  store i64 %2181, i64* %RAX, align 8, !tbaa !2428
  %2182 = icmp eq i32 %2179, -1
  %2183 = icmp eq i32 %2180, 0
  %2184 = or i1 %2182, %2183
  %2185 = zext i1 %2184 to i8
  store i8 %2185, i8* %17, align 1, !tbaa !2432
  %2186 = and i32 %2180, 255
  %2187 = tail call i32 @llvm.ctpop.i32(i32 %2186) #9
  %2188 = trunc i32 %2187 to i8
  %2189 = and i8 %2188, 1
  %2190 = xor i8 %2189, 1
  store i8 %2190, i8* %18, align 1, !tbaa !2446
  %2191 = xor i32 %2180, %2179
  %2192 = lshr i32 %2191, 4
  %2193 = trunc i32 %2192 to i8
  %2194 = and i8 %2193, 1
  store i8 %2194, i8* %19, align 1, !tbaa !2447
  %2195 = zext i1 %2183 to i8
  store i8 %2195, i8* %20, align 1, !tbaa !2448
  %2196 = lshr i32 %2180, 31
  %2197 = trunc i32 %2196 to i8
  store i8 %2197, i8* %21, align 1, !tbaa !2449
  %2198 = lshr i32 %2179, 31
  %2199 = xor i32 %2196, %2198
  %2200 = add nuw nsw i32 %2199, %2196
  %2201 = icmp eq i32 %2200, 2
  %2202 = zext i1 %2201 to i8
  store i8 %2202, i8* %22, align 1, !tbaa !2450
  store i32 %2180, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2203 = add i64 %2178, -112
  store i64 %2203, i64* %PC, align 8, !tbaa !2428
  br label %block_401095

block_400e96:                                     ; preds = %block_400e2c, %block_400f90
  %2204 = phi i64 [ %.pre78, %block_400e2c ], [ %2799, %block_400f90 ]
  %MEMORY.11 = phi %struct.Memory* [ %2985, %block_400e2c ], [ %1534, %block_400f90 ]
  %2205 = add i64 %2204, -2230
  %2206 = add i64 %2204, 5
  %2207 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2208 = add i64 %2207, -8
  %2209 = inttoptr i64 %2208 to i64*
  store i64 %2206, i64* %2209, align 8
  store i64 %2208, i64* %RSP, align 8, !tbaa !2428
  store i64 %2205, i64* %PC, align 8, !tbaa !2428
  %2210 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %2205, %struct.Memory* %MEMORY.11)
  %2211 = load i64, i64* %RBP, align 8
  %2212 = add i64 %2211, -80
  %2213 = load i64, i64* %PC, align 8
  %2214 = add i64 %2213, 5
  store i64 %2214, i64* %PC, align 8
  %2215 = load <2 x float>, <2 x float>* %57, align 1
  %2216 = extractelement <2 x float> %2215, i32 0
  %2217 = inttoptr i64 %2212 to float*
  store float %2216, float* %2217, align 4
  %2218 = load i64, i64* %RBP, align 8
  %2219 = add i64 %2218, -64
  %2220 = load i64, i64* %PC, align 8
  %2221 = add i64 %2220, 3
  store i64 %2221, i64* %PC, align 8
  %2222 = inttoptr i64 %2219 to i32*
  %2223 = load i32, i32* %2222, align 4
  %2224 = add i32 %2223, 1
  %2225 = zext i32 %2224 to i64
  store i64 %2225, i64* %RAX, align 8, !tbaa !2428
  %2226 = icmp eq i32 %2223, -1
  %2227 = icmp eq i32 %2224, 0
  %2228 = or i1 %2226, %2227
  %2229 = zext i1 %2228 to i8
  store i8 %2229, i8* %17, align 1, !tbaa !2432
  %2230 = and i32 %2224, 255
  %2231 = tail call i32 @llvm.ctpop.i32(i32 %2230) #9
  %2232 = trunc i32 %2231 to i8
  %2233 = and i8 %2232, 1
  %2234 = xor i8 %2233, 1
  store i8 %2234, i8* %18, align 1, !tbaa !2446
  %2235 = xor i32 %2224, %2223
  %2236 = lshr i32 %2235, 4
  %2237 = trunc i32 %2236 to i8
  %2238 = and i8 %2237, 1
  store i8 %2238, i8* %19, align 1, !tbaa !2447
  %2239 = zext i1 %2227 to i8
  store i8 %2239, i8* %20, align 1, !tbaa !2448
  %2240 = lshr i32 %2224, 31
  %2241 = trunc i32 %2240 to i8
  store i8 %2241, i8* %21, align 1, !tbaa !2449
  %2242 = lshr i32 %2223, 31
  %2243 = xor i32 %2240, %2242
  %2244 = add nuw nsw i32 %2243, %2240
  %2245 = icmp eq i32 %2244, 2
  %2246 = zext i1 %2245 to i8
  store i8 %2246, i8* %22, align 1, !tbaa !2450
  %2247 = add i64 %2220, 9
  store i64 %2247, i64* %PC, align 8
  store i32 %2224, i32* %2222, align 4
  %2248 = load i64, i64* %PC, align 8
  %2249 = add i64 %2248, 11
  store i64 %2249, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_400eb4

block_401359:                                     ; preds = %block_401369, %block_4012e1
  %2250 = phi i32 [ 0, %block_4012e1 ], [ %2058, %block_401369 ]
  %2251 = phi i64 [ %499, %block_4012e1 ], [ %2081, %block_401369 ]
  %MEMORY.12 = phi %struct.Memory* [ %490, %block_4012e1 ], [ %2055, %block_401369 ]
  %2252 = zext i32 %2250 to i64
  store i64 %2252, i64* %RAX, align 8, !tbaa !2428
  %2253 = load i64, i64* %RBP, align 8
  %2254 = add i64 %2253, -68
  %2255 = add i64 %2251, 10
  store i64 %2255, i64* %PC, align 8
  %2256 = inttoptr i64 %2254 to i32*
  %2257 = load i32, i32* %2256, align 4
  %2258 = sub i32 %2250, %2257
  %2259 = icmp ult i32 %2250, %2257
  %2260 = zext i1 %2259 to i8
  store i8 %2260, i8* %17, align 1, !tbaa !2432
  %2261 = and i32 %2258, 255
  %2262 = tail call i32 @llvm.ctpop.i32(i32 %2261) #9
  %2263 = trunc i32 %2262 to i8
  %2264 = and i8 %2263, 1
  %2265 = xor i8 %2264, 1
  store i8 %2265, i8* %18, align 1, !tbaa !2446
  %2266 = xor i32 %2257, %2250
  %2267 = xor i32 %2266, %2258
  %2268 = lshr i32 %2267, 4
  %2269 = trunc i32 %2268 to i8
  %2270 = and i8 %2269, 1
  store i8 %2270, i8* %19, align 1, !tbaa !2447
  %2271 = icmp eq i32 %2258, 0
  %2272 = zext i1 %2271 to i8
  store i8 %2272, i8* %20, align 1, !tbaa !2448
  %2273 = lshr i32 %2258, 31
  %2274 = trunc i32 %2273 to i8
  store i8 %2274, i8* %21, align 1, !tbaa !2449
  %2275 = lshr i32 %2250, 31
  %2276 = lshr i32 %2257, 31
  %2277 = xor i32 %2276, %2275
  %2278 = xor i32 %2273, %2275
  %2279 = add nuw nsw i32 %2278, %2277
  %2280 = icmp eq i32 %2279, 2
  %2281 = zext i1 %2280 to i8
  store i8 %2281, i8* %22, align 1, !tbaa !2450
  %2282 = icmp ne i8 %2274, 0
  %2283 = xor i1 %2282, %2280
  %.v99 = select i1 %2283, i64 16, i64 81
  %2284 = add i64 %2251, %.v99
  store i64 %2284, i64* %PC, align 8, !tbaa !2428
  br i1 %2283, label %block_401369, label %block_4013aa

block_401095:                                     ; preds = %block_401080, %block_4010a9
  %2285 = phi i32 [ 0, %block_401080 ], [ %2180, %block_4010a9 ]
  %2286 = phi i64 [ %3180, %block_401080 ], [ %2203, %block_4010a9 ]
  %MEMORY.13 = phi %struct.Memory* [ %3171, %block_401080 ], [ %2177, %block_4010a9 ]
  %2287 = zext i32 %2285 to i64
  store i64 %2287, i64* %RAX, align 8, !tbaa !2428
  %2288 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2289 = sub i32 %2285, %2288
  %2290 = icmp ult i32 %2285, %2288
  %2291 = zext i1 %2290 to i8
  store i8 %2291, i8* %17, align 1, !tbaa !2432
  %2292 = and i32 %2289, 255
  %2293 = tail call i32 @llvm.ctpop.i32(i32 %2292) #9
  %2294 = trunc i32 %2293 to i8
  %2295 = and i8 %2294, 1
  %2296 = xor i8 %2295, 1
  store i8 %2296, i8* %18, align 1, !tbaa !2446
  %2297 = xor i32 %2288, %2285
  %2298 = xor i32 %2297, %2289
  %2299 = lshr i32 %2298, 4
  %2300 = trunc i32 %2299 to i8
  %2301 = and i8 %2300, 1
  store i8 %2301, i8* %19, align 1, !tbaa !2447
  %2302 = icmp eq i32 %2289, 0
  %2303 = zext i1 %2302 to i8
  store i8 %2303, i8* %20, align 1, !tbaa !2448
  %2304 = lshr i32 %2289, 31
  %2305 = trunc i32 %2304 to i8
  store i8 %2305, i8* %21, align 1, !tbaa !2449
  %2306 = lshr i32 %2285, 31
  %2307 = lshr i32 %2288, 31
  %2308 = xor i32 %2307, %2306
  %2309 = xor i32 %2304, %2306
  %2310 = add nuw nsw i32 %2309, %2308
  %2311 = icmp eq i32 %2310, 2
  %2312 = zext i1 %2311 to i8
  store i8 %2312, i8* %22, align 1, !tbaa !2450
  %2313 = icmp ne i8 %2305, 0
  %2314 = xor i1 %2313, %2311
  %.v103 = select i1 %2314, i64 20, i64 134
  %2315 = add i64 %2286, %.v103
  store i64 %2315, i64* %PC, align 8, !tbaa !2428
  br i1 %2314, label %block_4010a9, label %block_40111b

block_400b15:                                     ; preds = %block_400a07
  %2316 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 12) to i32*), align 4
  store i32 %2316, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2317 = add i64 %3130, 7323
  %2318 = add i64 %3130, 13
  %2319 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2320 = add i64 %2319, -8
  %2321 = inttoptr i64 %2320 to i64*
  store i64 %2318, i64* %2321, align 8
  store i64 %2320, i64* %RSP, align 8, !tbaa !2428
  store i64 %2317, i64* %PC, align 8, !tbaa !2428
  %2322 = tail call %struct.Memory* @sub_4027b0_epslon(%struct.State* nonnull %0, i64 %2317, %struct.Memory* %MEMORY.18)
  %2323 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 276), i64* %RSI, align 8, !tbaa !2428
  %2324 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 12) to i32*), align 4
  %2325 = bitcast %union.VectorReg* %7 to float*
  store i32 %2324, i32* %1628, align 1, !tbaa !2451
  %2326 = bitcast i8* %1629 to float*
  store float 0.000000e+00, float* %2326, align 1, !tbaa !2451
  %2327 = bitcast i64* %195 to float*
  store float 0.000000e+00, float* %2327, align 1, !tbaa !2451
  %2328 = bitcast i8* %1632 to float*
  store float 0.000000e+00, float* %2328, align 1, !tbaa !2451
  %2329 = load i64, i64* %RBP, align 8
  %2330 = add i64 %2329, -36
  %2331 = add i64 %2323, 23
  store i64 %2331, i64* %PC, align 8
  %2332 = load <2 x float>, <2 x float>* %57, align 1
  %2333 = extractelement <2 x float> %2332, i32 0
  %2334 = inttoptr i64 %2330 to float*
  store float %2333, float* %2334, align 4
  %2335 = load i64, i64* %RBP, align 8
  %2336 = add i64 %2335, -28
  %2337 = load i64, i64* %PC, align 8
  %2338 = add i64 %2337, 5
  store i64 %2338, i64* %PC, align 8
  %2339 = inttoptr i64 %2336 to i32*
  %2340 = load i32, i32* %2339, align 4
  store i32 %2340, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2341 = bitcast %union.VectorReg* %8 to <2 x i32>*
  %2342 = load <2 x i32>, <2 x i32>* %2341, align 1
  %2343 = bitcast i64* %1623 to <2 x i32>*
  %2344 = load <2 x i32>, <2 x i32>* %2343, align 1
  %2345 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2346 = sitofp i32 %2345 to float
  %2347 = bitcast %union.VectorReg* %8 to float*
  store float %2346, float* %2347, align 1, !tbaa !2451
  %2348 = extractelement <2 x i32> %2342, i32 1
  store i32 %2348, i32* %1622, align 1, !tbaa !2451
  %2349 = extractelement <2 x i32> %2344, i32 0
  store i32 %2349, i32* %1624, align 1, !tbaa !2451
  %2350 = extractelement <2 x i32> %2344, i32 1
  store i32 %2350, i32* %1626, align 1, !tbaa !2451
  %2351 = add i64 %2335, -20
  %2352 = add i64 %2337, 19
  store i64 %2352, i64* %PC, align 8
  %2353 = bitcast %union.VectorReg* %8 to <2 x float>*
  %2354 = load <2 x float>, <2 x float>* %2353, align 1
  %2355 = load <2 x i32>, <2 x i32>* %2343, align 1
  %2356 = inttoptr i64 %2351 to float*
  %2357 = load float, float* %2356, align 4
  %2358 = extractelement <2 x float> %2354, i32 0
  %2359 = fmul float %2358, %2357
  store float %2359, float* %2347, align 1, !tbaa !2451
  %2360 = bitcast <2 x float> %2354 to <2 x i32>
  %2361 = extractelement <2 x i32> %2360, i32 1
  store i32 %2361, i32* %1622, align 1, !tbaa !2451
  %2362 = extractelement <2 x i32> %2355, i32 0
  store i32 %2362, i32* %1624, align 1, !tbaa !2451
  %2363 = extractelement <2 x i32> %2355, i32 1
  store i32 %2363, i32* %1626, align 1, !tbaa !2451
  %2364 = add i64 %2335, -24
  %2365 = add i64 %2337, 24
  store i64 %2365, i64* %PC, align 8
  %2366 = load <2 x float>, <2 x float>* %2353, align 1
  %2367 = load <2 x i32>, <2 x i32>* %2343, align 1
  %2368 = inttoptr i64 %2364 to float*
  %2369 = load float, float* %2368, align 4
  %2370 = extractelement <2 x float> %2366, i32 0
  %2371 = fmul float %2370, %2369
  store float %2371, float* %2347, align 1, !tbaa !2451
  %2372 = bitcast <2 x float> %2366 to <2 x i32>
  %2373 = extractelement <2 x i32> %2372, i32 1
  store i32 %2373, i32* %1622, align 1, !tbaa !2451
  %2374 = extractelement <2 x i32> %2367, i32 0
  store i32 %2374, i32* %1624, align 1, !tbaa !2451
  %2375 = extractelement <2 x i32> %2367, i32 1
  store i32 %2375, i32* %1626, align 1, !tbaa !2451
  %2376 = add i64 %2335, -36
  %2377 = add i64 %2337, 29
  store i64 %2377, i64* %PC, align 8
  %2378 = load <2 x float>, <2 x float>* %2353, align 1
  %2379 = load <2 x i32>, <2 x i32>* %2343, align 1
  %2380 = inttoptr i64 %2376 to float*
  %2381 = load float, float* %2380, align 4
  %2382 = extractelement <2 x float> %2378, i32 0
  %2383 = fmul float %2382, %2381
  store float %2383, float* %2347, align 1, !tbaa !2451
  %2384 = bitcast <2 x float> %2378 to <2 x i32>
  %2385 = extractelement <2 x i32> %2384, i32 1
  store i32 %2385, i32* %1622, align 1, !tbaa !2451
  %2386 = extractelement <2 x i32> %2379, i32 0
  store i32 %2386, i32* %1624, align 1, !tbaa !2451
  %2387 = extractelement <2 x i32> %2379, i32 1
  store i32 %2387, i32* %1626, align 1, !tbaa !2451
  %2388 = load <2 x float>, <2 x float>* %57, align 1
  %2389 = load <2 x i32>, <2 x i32>* %222, align 1
  %2390 = load <2 x float>, <2 x float>* %2353, align 1
  %2391 = extractelement <2 x float> %2388, i32 0
  %2392 = extractelement <2 x float> %2390, i32 0
  %2393 = fdiv float %2391, %2392
  store float %2393, float* %25, align 1, !tbaa !2451
  %2394 = bitcast <2 x float> %2388 to <2 x i32>
  %2395 = extractelement <2 x i32> %2394, i32 1
  store i32 %2395, i32* %245, align 1, !tbaa !2451
  %2396 = extractelement <2 x i32> %2389, i32 0
  store i32 %2396, i32* %247, align 1, !tbaa !2451
  %2397 = extractelement <2 x i32> %2389, i32 1
  store i32 %2397, i32* %249, align 1, !tbaa !2451
  %2398 = add i64 %2335, -32
  %2399 = add i64 %2337, 38
  store i64 %2399, i64* %PC, align 8
  %2400 = load <2 x float>, <2 x float>* %57, align 1
  %2401 = extractelement <2 x float> %2400, i32 0
  %2402 = inttoptr i64 %2398 to float*
  store float %2401, float* %2402, align 4
  %2403 = load i64, i64* %RBP, align 8
  %2404 = add i64 %2403, -36
  %2405 = load i64, i64* %PC, align 8
  %2406 = add i64 %2405, 5
  store i64 %2406, i64* %PC, align 8
  %2407 = inttoptr i64 %2404 to i32*
  %2408 = load i32, i32* %2407, align 4
  store i32 %2408, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %2409 = add i64 %2403, -48
  %2410 = add i64 %2405, 10
  store i64 %2410, i64* %PC, align 8
  %2411 = load <2 x float>, <2 x float>* %57, align 1
  %2412 = extractelement <2 x float> %2411, i32 0
  %2413 = inttoptr i64 %2409 to float*
  store float %2412, float* %2413, align 4
  %2414 = load i64, i64* %PC, align 8
  %2415 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992) to i32*), align 16
  store i32 %2415, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2416 = load <2 x float>, <2 x float>* %57, align 1
  %2417 = load <2 x i32>, <2 x i32>* %222, align 1
  %2418 = bitcast %union.VectorReg* %7 to <2 x float>*
  %2419 = load <2 x float>, <2 x float>* %2418, align 1
  %2420 = extractelement <2 x float> %2416, i32 0
  %2421 = extractelement <2 x float> %2419, i32 0
  %2422 = fsub float %2420, %2421
  store float %2422, float* %25, align 1, !tbaa !2451
  %2423 = bitcast <2 x float> %2416 to <2 x i32>
  %2424 = extractelement <2 x i32> %2423, i32 1
  store i32 %2424, i32* %245, align 1, !tbaa !2451
  %2425 = extractelement <2 x i32> %2417, i32 0
  store i32 %2425, i32* %247, align 1, !tbaa !2451
  %2426 = extractelement <2 x i32> %2417, i32 1
  store i32 %2426, i32* %249, align 1, !tbaa !2451
  %2427 = load i64, i64* %RBP, align 8
  %2428 = add i64 %2427, -52
  %2429 = add i64 %2414, 18
  store i64 %2429, i64* %PC, align 8
  %2430 = load <2 x float>, <2 x float>* %57, align 1
  %2431 = extractelement <2 x float> %2430, i32 0
  %2432 = inttoptr i64 %2428 to float*
  store float %2431, float* %2432, align 4
  %2433 = load i64, i64* %PC, align 8
  %2434 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2435 = add i32 %2434, -1
  %2436 = zext i32 %2435 to i64
  store i64 %2436, i64* %RAX, align 8, !tbaa !2428
  %2437 = icmp eq i32 %2434, 0
  %2438 = zext i1 %2437 to i8
  store i8 %2438, i8* %17, align 1, !tbaa !2432
  %2439 = and i32 %2435, 255
  %2440 = tail call i32 @llvm.ctpop.i32(i32 %2439) #9
  %2441 = trunc i32 %2440 to i8
  %2442 = and i8 %2441, 1
  %2443 = xor i8 %2442, 1
  store i8 %2443, i8* %18, align 1, !tbaa !2446
  %2444 = xor i32 %2435, %2434
  %2445 = lshr i32 %2444, 4
  %2446 = trunc i32 %2445 to i8
  %2447 = and i8 %2446, 1
  store i8 %2447, i8* %19, align 1, !tbaa !2447
  %2448 = icmp eq i32 %2435, 0
  %2449 = zext i1 %2448 to i8
  store i8 %2449, i8* %20, align 1, !tbaa !2448
  %2450 = lshr i32 %2435, 31
  %2451 = trunc i32 %2450 to i8
  store i8 %2451, i8* %21, align 1, !tbaa !2449
  %2452 = lshr i32 %2434, 31
  %2453 = xor i32 %2450, %2452
  %2454 = add nuw nsw i32 %2453, %2452
  %2455 = icmp eq i32 %2454, 2
  %2456 = zext i1 %2455 to i8
  store i8 %2456, i8* %22, align 1, !tbaa !2450
  %2457 = sext i32 %2435 to i64
  store i64 %2457, i64* %RCX, align 8, !tbaa !2428
  %2458 = shl nsw i64 %2457, 2
  %2459 = add i64 %2458, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2460 = add i64 %2433, 22
  store i64 %2460, i64* %PC, align 8
  %2461 = inttoptr i64 %2459 to i32*
  %2462 = load i32, i32* %2461, align 4
  store i32 %2462, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2463 = load <2 x float>, <2 x float>* %57, align 1
  %2464 = load <2 x i32>, <2 x i32>* %222, align 1
  %2465 = load <2 x float>, <2 x float>* %2418, align 1
  %2466 = extractelement <2 x float> %2463, i32 0
  %2467 = extractelement <2 x float> %2465, i32 0
  %2468 = fsub float %2466, %2467
  store float %2468, float* %25, align 1, !tbaa !2451
  %2469 = bitcast <2 x float> %2463 to <2 x i32>
  %2470 = extractelement <2 x i32> %2469, i32 1
  store i32 %2470, i32* %245, align 1, !tbaa !2451
  %2471 = extractelement <2 x i32> %2464, i32 0
  store i32 %2471, i32* %247, align 1, !tbaa !2451
  %2472 = extractelement <2 x i32> %2464, i32 1
  store i32 %2472, i32* %249, align 1, !tbaa !2451
  %2473 = load i64, i64* %RBP, align 8
  %2474 = add i64 %2473, -56
  %2475 = add i64 %2433, 31
  store i64 %2475, i64* %PC, align 8
  %2476 = load <2 x float>, <2 x float>* %57, align 1
  %2477 = extractelement <2 x float> %2476, i32 0
  %2478 = inttoptr i64 %2474 to float*
  store float %2477, float* %2478, align 4
  %2479 = load i64, i64* %PC, align 8
  %2480 = load i64, i64* @stderr, align 64
  store i64 %2480, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2481 = add i64 %2479, -1722
  %2482 = add i64 %2479, 15
  %2483 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2484 = add i64 %2483, -8
  %2485 = inttoptr i64 %2484 to i64*
  store i64 %2482, i64* %2485, align 8
  store i64 %2484, i64* %RSP, align 8, !tbaa !2428
  store i64 %2481, i64* %PC, align 8, !tbaa !2428
  %2486 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2322)
  %2487 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 315), i64* %RSI, align 8, !tbaa !2428
  %2488 = load i64, i64* @stderr, align 64
  store i64 %2488, i64* %RDI, align 8, !tbaa !2428
  %2489 = load i64, i64* %RBP, align 8
  %2490 = add i64 %2489, -908
  %2491 = load i32, i32* %EAX, align 4
  %2492 = add i64 %2487, 24
  store i64 %2492, i64* %PC, align 8
  %2493 = inttoptr i64 %2490 to i32*
  store i32 %2491, i32* %2493, align 4
  %2494 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2495 = add i64 %2494, -1761
  %2496 = add i64 %2494, 7
  %2497 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2498 = add i64 %2497, -8
  %2499 = inttoptr i64 %2498 to i64*
  store i64 %2496, i64* %2499, align 8
  store i64 %2498, i64* %RSP, align 8, !tbaa !2428
  store i64 %2495, i64* %PC, align 8, !tbaa !2428
  %2500 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2486)
  %2501 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 350), i64* %RSI, align 8, !tbaa !2428
  %2502 = load i64, i64* @stderr, align 64
  store i64 %2502, i64* %RDI, align 8, !tbaa !2428
  %2503 = load i64, i64* %RBP, align 8
  %2504 = add i64 %2503, -32
  %2505 = add i64 %2501, 23
  store i64 %2505, i64* %PC, align 8
  %2506 = inttoptr i64 %2504 to float*
  %2507 = load float, float* %2506, align 4
  %2508 = fpext float %2507 to double
  store double %2508, double* %189, align 1, !tbaa !2454
  %2509 = add i64 %2503, -28
  %2510 = add i64 %2501, 28
  store i64 %2510, i64* %PC, align 8
  %2511 = inttoptr i64 %2509 to float*
  %2512 = load float, float* %2511, align 4
  %2513 = fpext float %2512 to double
  store double %2513, double* %193, align 1, !tbaa !2454
  %2514 = add i64 %2503, -48
  %2515 = add i64 %2501, 33
  store i64 %2515, i64* %PC, align 8
  %2516 = inttoptr i64 %2514 to float*
  %2517 = load float, float* %2516, align 4
  %2518 = fpext float %2517 to double
  store double %2518, double* %219, align 1, !tbaa !2454
  %2519 = add i64 %2503, -52
  %2520 = add i64 %2501, 38
  store i64 %2520, i64* %PC, align 8
  %2521 = inttoptr i64 %2519 to float*
  %2522 = load float, float* %2521, align 4
  %2523 = fpext float %2522 to double
  store double %2523, double* %232, align 1, !tbaa !2454
  %2524 = add i64 %2503, -56
  %2525 = add i64 %2501, 43
  store i64 %2525, i64* %PC, align 8
  %2526 = inttoptr i64 %2524 to float*
  %2527 = load float, float* %2526, align 4
  %2528 = fpext float %2527 to double
  %2529 = bitcast %union.VectorReg* %3034 to double*
  store double %2528, double* %2529, align 1, !tbaa !2454
  %2530 = add i64 %2503, -912
  %2531 = load i32, i32* %EAX, align 4
  %2532 = add i64 %2501, 49
  store i64 %2532, i64* %PC, align 8
  %2533 = inttoptr i64 %2530 to i32*
  store i32 %2531, i32* %2533, align 4
  %2534 = load i64, i64* %PC, align 8
  store i8 5, i8* %AL, align 1, !tbaa !2453
  %2535 = add i64 %2534, -1817
  %2536 = add i64 %2534, 7
  %2537 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2538 = add i64 %2537, -8
  %2539 = inttoptr i64 %2538 to i64*
  store i64 %2536, i64* %2539, align 8
  store i64 %2538, i64* %RSP, align 8, !tbaa !2428
  store i64 %2535, i64* %PC, align 8, !tbaa !2428
  %2540 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2500)
  %2541 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 383), i64* %RSI, align 8, !tbaa !2428
  %2542 = load i64, i64* @stderr, align 64
  store i64 %2542, i64* %RDI, align 8, !tbaa !2428
  %2543 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %2544 = zext i32 %2543 to i64
  store i64 %2544, i64* %RDX, align 8, !tbaa !2428
  %2545 = load i64, i64* %RBP, align 8
  %2546 = add i64 %2545, -916
  %2547 = load i32, i32* %EAX, align 4
  %2548 = add i64 %2541, 31
  store i64 %2548, i64* %PC, align 8
  %2549 = inttoptr i64 %2546 to i32*
  store i32 %2547, i32* %2549, align 4
  %2550 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2551 = add i64 %2550, -1855
  %2552 = add i64 %2550, 7
  %2553 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2554 = add i64 %2553, -8
  %2555 = inttoptr i64 %2554 to i64*
  store i64 %2552, i64* %2555, align 8
  store i64 %2554, i64* %RSP, align 8, !tbaa !2428
  store i64 %2551, i64* %PC, align 8, !tbaa !2428
  %2556 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2540)
  %2557 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 436), i64* %RSI, align 8, !tbaa !2428
  %2558 = load i64, i64* @stderr, align 64
  store i64 %2558, i64* %RDI, align 8, !tbaa !2428
  %2559 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %2560 = zext i32 %2559 to i64
  store i64 %2560, i64* %RDX, align 8, !tbaa !2428
  %2561 = load i64, i64* %RBP, align 8
  %2562 = add i64 %2561, -920
  %2563 = load i32, i32* %EAX, align 4
  %2564 = add i64 %2557, 31
  store i64 %2564, i64* %PC, align 8
  %2565 = inttoptr i64 %2562 to i32*
  store i32 %2563, i32* %2565, align 4
  %2566 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2567 = add i64 %2566, -1893
  %2568 = add i64 %2566, 7
  %2569 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2570 = add i64 %2569, -8
  %2571 = inttoptr i64 %2570 to i64*
  store i64 %2568, i64* %2571, align 8
  store i64 %2570, i64* %RSP, align 8, !tbaa !2428
  store i64 %2567, i64* %PC, align 8, !tbaa !2428
  %2572 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2556)
  %2573 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 490), i64* %RSI, align 8, !tbaa !2428
  %2574 = load i64, i64* @stderr, align 64
  store i64 %2574, i64* %RDI, align 8, !tbaa !2428
  %2575 = load i64, i64* %RBP, align 8
  %2576 = add i64 %2575, -924
  %2577 = load i32, i32* %EAX, align 4
  %2578 = add i64 %2573, 24
  store i64 %2578, i64* %PC, align 8
  %2579 = inttoptr i64 %2576 to i32*
  store i32 %2577, i32* %2579, align 4
  %2580 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2581 = add i64 %2580, -1924
  %2582 = add i64 %2580, 7
  %2583 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2584 = add i64 %2583, -8
  %2585 = inttoptr i64 %2584 to i64*
  store i64 %2582, i64* %2585, align 8
  store i64 %2584, i64* %RSP, align 8, !tbaa !2428
  store i64 %2581, i64* %PC, align 8, !tbaa !2428
  %2586 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2572)
  %2587 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 546), i64* %RSI, align 8, !tbaa !2428
  %2588 = load i64, i64* @stderr, align 64
  store i64 %2588, i64* %RDI, align 8, !tbaa !2428
  %2589 = load i64, i64* %RBP, align 8
  %2590 = add i64 %2589, -928
  %2591 = load i32, i32* %EAX, align 4
  %2592 = add i64 %2587, 24
  store i64 %2592, i64* %PC, align 8
  %2593 = inttoptr i64 %2590 to i32*
  store i32 %2591, i32* %2593, align 4
  %2594 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2595 = add i64 %2594, -1955
  %2596 = add i64 %2594, 7
  %2597 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2598 = add i64 %2597, -8
  %2599 = inttoptr i64 %2598 to i64*
  store i64 %2596, i64* %2599, align 8
  store i64 %2598, i64* %RSP, align 8, !tbaa !2428
  store i64 %2595, i64* %PC, align 8, !tbaa !2428
  %2600 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2586)
  %2601 = load i64, i64* %PC, align 8
  %2602 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2602, align 1, !tbaa !2456
  %2603 = load i64, i64* %RBP, align 8
  %2604 = add i64 %2603, -16
  %2605 = add i64 %2601, 8
  store i64 %2605, i64* %PC, align 8
  %2606 = inttoptr i64 %2604 to i32*
  %2607 = load i32, i32* %2606, align 4
  store i32 %2607, i32* %1628, align 1, !tbaa !2451
  store float 0.000000e+00, float* %2326, align 1, !tbaa !2451
  store float 0.000000e+00, float* %2327, align 1, !tbaa !2451
  store float 0.000000e+00, float* %2328, align 1, !tbaa !2451
  %2608 = load <2 x float>, <2 x float>* %2418, align 1
  %2609 = extractelement <2 x float> %2608, i32 0
  store float %2609, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162568) to float*), align 8
  %2610 = add i64 %2601, 22
  store i64 %2610, i64* %PC, align 8
  %2611 = inttoptr i64 %2604 to float*
  %2612 = load float, float* %2611, align 4
  %2613 = fpext float %2612 to double
  store double %2613, double* %193, align 1, !tbaa !2454
  %2614 = add i64 %2601, 26
  store i64 %2614, i64* %PC, align 8
  %2615 = load double, double* %189, align 1
  %2616 = fcmp uno double %2613, %2615
  br i1 %2616, label %2617, label %2627

; <label>:2617:                                   ; preds = %block_400b15
  %2618 = fadd double %2613, %2615
  %2619 = bitcast double %2618 to i64
  %2620 = and i64 %2619, 9221120237041090560
  %2621 = icmp eq i64 %2620, 9218868437227405312
  %2622 = and i64 %2619, 2251799813685247
  %2623 = icmp ne i64 %2622, 0
  %2624 = and i1 %2621, %2623
  br i1 %2624, label %2625, label %2633

; <label>:2625:                                   ; preds = %2617
  %2626 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2614, %struct.Memory* %2600) #12
  %.pre = load i64, i64* %RBP, align 8
  %.pre74 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:2627:                                   ; preds = %block_400b15
  %2628 = fcmp ogt double %2613, %2615
  br i1 %2628, label %2633, label %2629

; <label>:2629:                                   ; preds = %2627
  %2630 = fcmp olt double %2613, %2615
  br i1 %2630, label %2633, label %2631

; <label>:2631:                                   ; preds = %2629
  %2632 = fcmp oeq double %2613, %2615
  br i1 %2632, label %2633, label %2637

; <label>:2633:                                   ; preds = %2631, %2629, %2627, %2617
  %2634 = phi i8 [ 0, %2627 ], [ 0, %2629 ], [ 1, %2631 ], [ 1, %2617 ]
  %2635 = phi i8 [ 0, %2627 ], [ 0, %2629 ], [ 0, %2631 ], [ 1, %2617 ]
  %2636 = phi i8 [ 0, %2627 ], [ 1, %2629 ], [ 0, %2631 ], [ 1, %2617 ]
  store i8 %2634, i8* %20, align 1, !tbaa !2453
  store i8 %2635, i8* %18, align 1, !tbaa !2453
  store i8 %2636, i8* %17, align 1, !tbaa !2453
  br label %2637

; <label>:2637:                                   ; preds = %2633, %2631
  store i8 0, i8* %22, align 1, !tbaa !2453
  store i8 0, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %19, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %2637, %2625
  %2638 = phi i64 [ %.pre74, %2625 ], [ %2614, %2637 ]
  %2639 = phi i64 [ %.pre, %2625 ], [ %2603, %2637 ]
  %2640 = phi %struct.Memory* [ %2626, %2625 ], [ %2600, %2637 ]
  %2641 = add i64 %2639, -932
  %2642 = load i32, i32* %EAX, align 4
  %2643 = add i64 %2638, 6
  store i64 %2643, i64* %PC, align 8
  %2644 = inttoptr i64 %2641 to i32*
  store i32 %2642, i32* %2644, align 4
  %2645 = load i64, i64* %PC, align 8
  %2646 = load i8, i8* %17, align 1, !tbaa !2432
  %2647 = load i8, i8* %20, align 1, !tbaa !2448
  %2648 = or i8 %2647, %2646
  %2649 = icmp ne i8 %2648, 0
  %.v124 = select i1 %2649, i64 84, i64 6
  %2650 = add i64 %2645, %.v124
  store i64 %2650, i64* %PC, align 8, !tbaa !2428
  br i1 %2649, label %block_400cfe, label %block_400cb0

block_400e14:                                     ; preds = %block_400dc9
  %2651 = load i64, i64* %RBP, align 8
  %2652 = add i64 %2651, -68
  %2653 = add i64 %1038, 3
  store i64 %2653, i64* %PC, align 8
  %2654 = inttoptr i64 %2652 to i32*
  %2655 = load i32, i32* %2654, align 4
  %2656 = shl i32 %2655, 1
  %2657 = icmp slt i32 %2655, 0
  %2658 = icmp slt i32 %2656, 0
  %2659 = xor i1 %2657, %2658
  %2660 = zext i32 %2656 to i64
  store i64 %2660, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i32 %2655, 31
  %2661 = trunc i32 %.lobit to i8
  store i8 %2661, i8* %17, align 1, !tbaa !2453
  %2662 = and i32 %2656, 254
  %2663 = tail call i32 @llvm.ctpop.i32(i32 %2662) #9
  %2664 = trunc i32 %2663 to i8
  %2665 = and i8 %2664, 1
  %2666 = xor i8 %2665, 1
  store i8 %2666, i8* %18, align 1, !tbaa !2453
  store i8 0, i8* %19, align 1, !tbaa !2453
  %2667 = icmp eq i32 %2656, 0
  %2668 = zext i1 %2667 to i8
  store i8 %2668, i8* %20, align 1, !tbaa !2453
  %2669 = lshr i32 %2655, 30
  %2670 = trunc i32 %2669 to i8
  %2671 = and i8 %2670, 1
  store i8 %2671, i8* %21, align 1, !tbaa !2453
  %2672 = zext i1 %2659 to i8
  store i8 %2672, i8* %22, align 1, !tbaa !2453
  %2673 = add i64 %1038, 9
  store i64 %2673, i64* %PC, align 8
  store i32 %2656, i32* %2654, align 4
  %.pre77 = load i64, i64* %PC, align 8
  br label %block_400e1d

block_4016fc:                                     ; preds = %block_40148d
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 768), i64* %RSI, align 8, !tbaa !2428
  %2674 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2674, align 1, !tbaa !2456
  %2675 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 48) to i64*), align 16
  %2676 = load float, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %2677 = fpext float %2676 to double
  %2678 = bitcast i64 %2675 to double
  %2679 = fdiv double %2677, %2678
  store double %2679, double* %219, align 1, !tbaa !2454
  %.cast35 = bitcast i64 %2675 to <2 x i32>
  %2680 = fptrunc double %2679 to float
  store float %2680, float* %2325, align 1, !tbaa !2451
  %2681 = extractelement <2 x i32> %.cast35, i32 1
  store i32 %2681, i32* %1630, align 1, !tbaa !2451
  store i32 0, i32* %1631, align 1, !tbaa !2451
  store i32 0, i32* %1633, align 1, !tbaa !2451
  %2682 = load <2 x float>, <2 x float>* %2418, align 1
  %2683 = extractelement <2 x float> %2682, i32 0
  store float %2683, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162676) to float*), align 4
  %2684 = load i64, i64* @stderr, align 64
  store i64 %2684, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %2685 = add i64 %2867, -4636
  %2686 = add i64 %2867, 62
  %2687 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2688 = add i64 %2687, -8
  %2689 = inttoptr i64 %2688 to i64*
  store i64 %2686, i64* %2689, align 8
  store i64 %2688, i64* %RSP, align 8, !tbaa !2428
  store i64 %2685, i64* %PC, align 8, !tbaa !2428
  %2690 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %MEMORY.16)
  %2691 = load i64, i64* %PC, align 8
  store i64 0, i64* %RCX, align 8, !tbaa !2428
  %2692 = load i64, i64* %RBP, align 8
  %2693 = add i64 %2692, -996
  %2694 = load i32, i32* %EAX, align 4
  %2695 = add i64 %2691, 8
  store i64 %2695, i64* %PC, align 8
  %2696 = inttoptr i64 %2693 to i32*
  store i32 %2694, i32* %2696, align 4
  %2697 = load i32, i32* %ECX, align 4
  %2698 = zext i32 %2697 to i64
  %2699 = load i64, i64* %PC, align 8
  store i64 %2698, i64* %RAX, align 8, !tbaa !2428
  %2700 = load i64, i64* %RSP, align 8
  %2701 = add i64 %2700, 1008
  store i64 %2701, i64* %RSP, align 8, !tbaa !2428
  %2702 = icmp ugt i64 %2700, -1009
  %2703 = zext i1 %2702 to i8
  store i8 %2703, i8* %17, align 1, !tbaa !2432
  %2704 = trunc i64 %2701 to i32
  %2705 = and i32 %2704, 255
  %2706 = tail call i32 @llvm.ctpop.i32(i32 %2705) #9
  %2707 = trunc i32 %2706 to i8
  %2708 = and i8 %2707, 1
  %2709 = xor i8 %2708, 1
  store i8 %2709, i8* %18, align 1, !tbaa !2446
  %2710 = xor i64 %2700, 16
  %2711 = xor i64 %2710, %2701
  %2712 = lshr i64 %2711, 4
  %2713 = trunc i64 %2712 to i8
  %2714 = and i8 %2713, 1
  store i8 %2714, i8* %19, align 1, !tbaa !2447
  %2715 = icmp eq i64 %2701, 0
  %2716 = zext i1 %2715 to i8
  store i8 %2716, i8* %20, align 1, !tbaa !2448
  %2717 = lshr i64 %2701, 63
  %2718 = trunc i64 %2717 to i8
  store i8 %2718, i8* %21, align 1, !tbaa !2449
  %2719 = lshr i64 %2700, 63
  %2720 = xor i64 %2717, %2719
  %2721 = add nuw nsw i64 %2720, %2717
  %2722 = icmp eq i64 %2721, 2
  %2723 = zext i1 %2722 to i8
  store i8 %2723, i8* %22, align 1, !tbaa !2450
  %2724 = add i64 %2699, 10
  store i64 %2724, i64* %PC, align 8
  %2725 = add i64 %2700, 1016
  %2726 = inttoptr i64 %2701 to i64*
  %2727 = load i64, i64* %2726, align 8
  store i64 %2727, i64* %RBP, align 8, !tbaa !2428
  store i64 %2725, i64* %RSP, align 8, !tbaa !2428
  %2728 = add i64 %2699, 11
  store i64 %2728, i64* %PC, align 8
  %2729 = inttoptr i64 %2725 to i64*
  %2730 = load i64, i64* %2729, align 8
  store i64 %2730, i64* %PC, align 8, !tbaa !2428
  %2731 = add i64 %2700, 1024
  store i64 %2731, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2690

block_400d13:                                     ; preds = %block_400cb0, %block_400cfe
  %2732 = phi i64 [ %1982, %block_400cb0 ], [ %.pre75, %block_400cfe ]
  %2733 = phi i64 [ %2008, %block_400cb0 ], [ %384, %block_400cfe ]
  %.pre-phi = bitcast %union.VectorReg* %7 to <2 x i32>*
  %.pre-phi92 = bitcast i64* %195 to <2 x i32>*
  store i64 0, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2734 = add i64 %2732, -16
  %2735 = add i64 %2733, 7
  store i64 %2735, i64* %PC, align 8
  %2736 = inttoptr i64 %2734 to i32*
  %2737 = load i32, i32* %2736, align 4
  store i32 %2737, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %32, align 1, !tbaa !2451
  %2738 = add i64 %2732, -8
  %2739 = add i64 %2733, 12
  store i64 %2739, i64* %PC, align 8
  %2740 = load <2 x float>, <2 x float>* %57, align 1
  %2741 = load <2 x i32>, <2 x i32>* %222, align 1
  %2742 = inttoptr i64 %2738 to float*
  %2743 = load float, float* %2742, align 4
  %2744 = extractelement <2 x float> %2740, i32 0
  %2745 = fdiv float %2744, %2743
  store float %2745, float* %25, align 1, !tbaa !2451
  %2746 = bitcast <2 x float> %2740 to <2 x i32>
  %2747 = extractelement <2 x i32> %2746, i32 1
  store i32 %2747, i32* %245, align 1, !tbaa !2451
  %2748 = extractelement <2 x i32> %2741, i32 0
  store i32 %2748, i32* %247, align 1, !tbaa !2451
  %2749 = extractelement <2 x i32> %2741, i32 1
  store i32 %2749, i32* %249, align 1, !tbaa !2451
  %2750 = load <2 x float>, <2 x float>* %57, align 1
  %2751 = extractelement <2 x float> %2750, i32 0
  store float %2751, float* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162748) to float*), align 4
  %2752 = add i64 %2733, 6989
  %2753 = add i64 %2733, 26
  %2754 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2755 = add i64 %2754, -8
  %2756 = inttoptr i64 %2755 to i64*
  store i64 %2753, i64* %2756, align 8
  store i64 %2755, i64* %RSP, align 8, !tbaa !2428
  store i64 %2752, i64* %PC, align 8, !tbaa !2428
  %2757 = tail call %struct.Memory* @sub_402860_print_time(%struct.State* nonnull %0, i64 %2752, %struct.Memory* %2640)
  %2758 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 559), i64* %RSI, align 8, !tbaa !2428
  %2759 = load i64, i64* @stderr, align 64
  store i64 %2759, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2760 = add i64 %2758, -2125
  %2761 = add i64 %2758, 25
  %2762 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2763 = add i64 %2762, -8
  %2764 = inttoptr i64 %2763 to i64*
  store i64 %2761, i64* %2764, align 8
  store i64 %2763, i64* %RSP, align 8, !tbaa !2428
  store i64 %2760, i64* %PC, align 8, !tbaa !2428
  %2765 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2757)
  %2766 = load i64, i64* %RBP, align 8
  %2767 = add i64 %2766, -64
  %2768 = load i64, i64* %PC, align 8
  %2769 = add i64 %2768, 7
  store i64 %2769, i64* %PC, align 8
  %2770 = inttoptr i64 %2767 to i32*
  store i32 -3, i32* %2770, align 4
  %2771 = load i64, i64* %RBP, align 8
  %2772 = add i64 %2771, -68
  %2773 = load i64, i64* %PC, align 8
  %2774 = add i64 %2773, 7
  store i64 %2774, i64* %PC, align 8
  %2775 = inttoptr i64 %2772 to i32*
  store i32 100, i32* %2775, align 4
  %2776 = load i64, i64* %RBP, align 8
  %2777 = add i64 %2776, -936
  %2778 = load i32, i32* %EAX, align 4
  %2779 = load i64, i64* %PC, align 8
  %2780 = add i64 %2779, 6
  store i64 %2780, i64* %PC, align 8
  %2781 = inttoptr i64 %2777 to i32*
  store i32 %2778, i32* %2781, align 4
  %.pre76 = load i64, i64* %PC, align 8
  %2782 = bitcast %union.VectorReg* %7 to <4 x i32>*
  br label %block_400d5a

block_400f90:                                     ; preds = %block_400f3a, %block_400f7f
  %2783 = phi i64 [ %1555, %block_400f3a ], [ %2027, %block_400f7f ]
  %2784 = load i64, i64* %RBP, align 8
  %2785 = add i64 %2784, -64
  %2786 = add i64 %2783, 9
  store i64 %2786, i64* %PC, align 8
  %2787 = inttoptr i64 %2785 to i32*
  %2788 = load i32, i32* %2787, align 4
  store i8 0, i8* %17, align 1, !tbaa !2432
  %2789 = and i32 %2788, 255
  %2790 = tail call i32 @llvm.ctpop.i32(i32 %2789) #9
  %2791 = trunc i32 %2790 to i8
  %2792 = and i8 %2791, 1
  %2793 = xor i8 %2792, 1
  store i8 %2793, i8* %18, align 1, !tbaa !2446
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2794 = icmp eq i32 %2788, 0
  %2795 = zext i1 %2794 to i8
  store i8 %2795, i8* %20, align 1, !tbaa !2448
  %2796 = lshr i32 %2788, 31
  %2797 = trunc i32 %2796 to i8
  store i8 %2797, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  %2798 = icmp ne i8 %2797, 0
  %.v36 = select i1 %2798, i64 -259, i64 6
  %2799 = add i64 %2786, %.v36
  store i64 %2799, i64* %PC, align 8, !tbaa !2428
  br i1 %2798, label %block_400e96, label %block_400fc3

block_400971:                                     ; preds = %block_40095d
  %2800 = sext i32 %1738 to i64
  store i64 %2800, i64* %RAX, align 8, !tbaa !2428
  %2801 = shl nsw i64 %2800, 2
  %2802 = add i64 %2801, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832)
  %2803 = add i64 %1768, 17
  store i64 %2803, i64* %PC, align 8
  %2804 = inttoptr i64 %2802 to i32*
  %2805 = load i32, i32* %2804, align 4
  store i32 %2805, i32* %26, align 1, !tbaa !2451
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %2806 = load i64, i64* %190, align 1
  %2807 = trunc i64 %2806 to i32
  store i32 %2807, i32* %ECX, align 1, !tbaa !2456
  store i32 0, i32* %3051, align 1, !tbaa !2456
  %2808 = load i64, i64* %RCX, align 8
  %2809 = xor i64 %2808, -2147483648
  %2810 = and i64 %2809, 4294967295
  store i64 %2810, i64* %RCX, align 8, !tbaa !2428
  %2811 = trunc i64 %2809 to i32
  store i32 %2811, i32* %26, align 1, !tbaa !2456
  store i32 0, i32* %245, align 1, !tbaa !2456
  store i32 0, i32* %247, align 1, !tbaa !2456
  store i32 0, i32* %249, align 1, !tbaa !2456
  %2812 = add i64 %1768, 48
  store i64 %2812, i64* %PC, align 8
  %2813 = load <2 x float>, <2 x float>* %57, align 1
  %2814 = extractelement <2 x float> %2813, i32 0
  %2815 = inttoptr i64 %2802 to float*
  store float %2814, float* %2815, align 4
  %2816 = load i64, i64* %PC, align 8
  %2817 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2818 = add i32 %2817, 1
  %2819 = zext i32 %2818 to i64
  store i64 %2819, i64* %RAX, align 8, !tbaa !2428
  %2820 = icmp eq i32 %2817, -1
  %2821 = icmp eq i32 %2818, 0
  %2822 = or i1 %2820, %2821
  %2823 = zext i1 %2822 to i8
  store i8 %2823, i8* %17, align 1, !tbaa !2432
  %2824 = and i32 %2818, 255
  %2825 = tail call i32 @llvm.ctpop.i32(i32 %2824) #9
  %2826 = trunc i32 %2825 to i8
  %2827 = and i8 %2826, 1
  %2828 = xor i8 %2827, 1
  store i8 %2828, i8* %18, align 1, !tbaa !2446
  %2829 = xor i32 %2818, %2817
  %2830 = lshr i32 %2829, 4
  %2831 = trunc i32 %2830 to i8
  %2832 = and i8 %2831, 1
  store i8 %2832, i8* %19, align 1, !tbaa !2447
  %2833 = zext i1 %2821 to i8
  store i8 %2833, i8* %20, align 1, !tbaa !2448
  %2834 = lshr i32 %2818, 31
  %2835 = trunc i32 %2834 to i8
  store i8 %2835, i8* %21, align 1, !tbaa !2449
  %2836 = lshr i32 %2817, 31
  %2837 = xor i32 %2834, %2836
  %2838 = add nuw nsw i32 %2837, %2834
  %2839 = icmp eq i32 %2838, 2
  %2840 = zext i1 %2839 to i8
  store i8 %2840, i8* %22, align 1, !tbaa !2450
  store i32 %2818, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2841 = add i64 %2816, -68
  store i64 %2841, i64* %PC, align 8, !tbaa !2428
  br label %block_40095d

block_40148d:                                     ; preds = %block_4013aa, %block_4015d6
  %2842 = phi i32 [ %.pre83, %block_4013aa ], [ %819, %block_4015d6 ]
  %2843 = phi i64 [ %.pre82, %block_4013aa ], [ %842, %block_4015d6 ]
  %MEMORY.16 = phi %struct.Memory* [ %1943, %block_4013aa ], [ %816, %block_4015d6 ]
  %2844 = add i32 %2842, -12
  %2845 = icmp ult i32 %2842, 12
  %2846 = zext i1 %2845 to i8
  store i8 %2846, i8* %17, align 1, !tbaa !2432
  %2847 = and i32 %2844, 255
  %2848 = tail call i32 @llvm.ctpop.i32(i32 %2847) #9
  %2849 = trunc i32 %2848 to i8
  %2850 = and i8 %2849, 1
  %2851 = xor i8 %2850, 1
  store i8 %2851, i8* %18, align 1, !tbaa !2446
  %2852 = xor i32 %2844, %2842
  %2853 = lshr i32 %2852, 4
  %2854 = trunc i32 %2853 to i8
  %2855 = and i8 %2854, 1
  store i8 %2855, i8* %19, align 1, !tbaa !2447
  %2856 = icmp eq i32 %2844, 0
  %2857 = zext i1 %2856 to i8
  store i8 %2857, i8* %20, align 1, !tbaa !2448
  %2858 = lshr i32 %2844, 31
  %2859 = trunc i32 %2858 to i8
  store i8 %2859, i8* %21, align 1, !tbaa !2449
  %2860 = lshr i32 %2842, 31
  %2861 = xor i32 %2858, %2860
  %2862 = add nuw nsw i32 %2861, %2860
  %2863 = icmp eq i32 %2862, 2
  %2864 = zext i1 %2863 to i8
  store i8 %2864, i8* %22, align 1, !tbaa !2450
  %2865 = icmp ne i8 %2859, 0
  %2866 = xor i1 %2865, %2863
  %.v100 = select i1 %2866, i64 14, i64 623
  %2867 = add i64 %2843, %.v100
  store i64 %2867, i64* %PC, align 8, !tbaa !2428
  br i1 %2866, label %block_40149b, label %block_4016fc

block_400a7c:                                     ; preds = %block_400a46, %block_400a58
  %2868 = phi i64 [ %1098, %block_400a46 ], [ %.pre87, %block_400a58 ]
  %2869 = load i64, i64* %RBP, align 8
  %2870 = add i64 %2869, -896
  %2871 = add i64 %2868, 8
  store i64 %2871, i64* %PC, align 8
  %2872 = inttoptr i64 %2870 to i64*
  %2873 = load i64, i64* %2872, align 8
  %.cast = bitcast i64 %2873 to <2 x i32>
  %.cast20 = bitcast i64 %2873 to double
  %2874 = fptrunc double %.cast20 to float
  store float %2874, float* %25, align 1, !tbaa !2451
  %2875 = extractelement <2 x i32> %.cast, i32 1
  store i32 %2875, i32* %245, align 1, !tbaa !2451
  store i32 0, i32* %247, align 1, !tbaa !2451
  store i32 0, i32* %249, align 1, !tbaa !2451
  %2876 = add i64 %2869, -28
  %2877 = add i64 %2868, 17
  store i64 %2877, i64* %PC, align 8
  %2878 = load <2 x float>, <2 x float>* %57, align 1
  %2879 = extractelement <2 x float> %2878, i32 0
  %2880 = inttoptr i64 %2876 to float*
  store float %2879, float* %2880, align 4
  %2881 = load i64, i64* %RBP, align 8
  %2882 = add i64 %2881, -24
  %2883 = load i64, i64* %PC, align 8
  %2884 = add i64 %2883, 5
  store i64 %2884, i64* %PC, align 8
  %2885 = inttoptr i64 %2882 to float*
  %2886 = load float, float* %2885, align 4
  %2887 = fpext float %2886 to double
  store double %2887, double* %189, align 1, !tbaa !2454
  %2888 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %2889 = sext i32 %2888 to i64
  store i64 %2889, i64* %RAX, align 8, !tbaa !2428
  %2890 = shl nsw i64 %2889, 2
  %2891 = add i64 %2890, add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162992)
  %2892 = add i64 %2883, 22
  store i64 %2892, i64* %PC, align 8
  %2893 = inttoptr i64 %2891 to float*
  %2894 = load float, float* %2893, align 4
  %2895 = fpext float %2894 to double
  %2896 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %2897 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %2898 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %2899 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %2896, i32* %1620, align 1, !tbaa !2451
  store i32 %2897, i32* %1622, align 1, !tbaa !2451
  store i32 %2898, i32* %1624, align 1, !tbaa !2451
  store i32 %2899, i32* %1626, align 1, !tbaa !2451
  %2900 = bitcast double %2895 to i64
  %2901 = load i64, i64* %195, align 1
  %2902 = load i64, i64* %1627, align 1
  %2903 = load i64, i64* %1623, align 1
  %2904 = and i64 %2902, %2900
  %2905 = and i64 %2903, %2901
  %2906 = trunc i64 %2904 to i32
  %2907 = lshr i64 %2904, 32
  %2908 = trunc i64 %2907 to i32
  store i32 %2906, i32* %1628, align 1, !tbaa !2456
  store i32 %2908, i32* %1630, align 1, !tbaa !2456
  %2909 = trunc i64 %2905 to i32
  store i32 %2909, i32* %1631, align 1, !tbaa !2456
  %2910 = lshr i64 %2905, 32
  %2911 = trunc i64 %2910 to i32
  store i32 %2911, i32* %1633, align 1, !tbaa !2456
  %2912 = add i64 %2883, 37
  store i64 %2912, i64* %PC, align 8
  %2913 = load double, double* %193, align 1
  %2914 = fcmp uno double %2887, %2913
  br i1 %2914, label %2915, label %2925

; <label>:2915:                                   ; preds = %block_400a7c
  %2916 = fadd double %2887, %2913
  %2917 = bitcast double %2916 to i64
  %2918 = and i64 %2917, 9221120237041090560
  %2919 = icmp eq i64 %2918, 9218868437227405312
  %2920 = and i64 %2917, 2251799813685247
  %2921 = icmp ne i64 %2920, 0
  %2922 = and i1 %2919, %2921
  br i1 %2922, label %2923, label %2931

; <label>:2923:                                   ; preds = %2915
  %2924 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2912, %struct.Memory* %1827) #12
  %.pre88 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:2925:                                   ; preds = %block_400a7c
  %2926 = fcmp ogt double %2887, %2913
  br i1 %2926, label %2931, label %2927

; <label>:2927:                                   ; preds = %2925
  %2928 = fcmp olt double %2887, %2913
  br i1 %2928, label %2931, label %2929

; <label>:2929:                                   ; preds = %2927
  %2930 = fcmp oeq double %2887, %2913
  br i1 %2930, label %2931, label %2935

; <label>:2931:                                   ; preds = %2929, %2927, %2925, %2915
  %2932 = phi i8 [ 0, %2925 ], [ 0, %2927 ], [ 1, %2929 ], [ 1, %2915 ]
  %2933 = phi i8 [ 0, %2925 ], [ 0, %2927 ], [ 0, %2929 ], [ 1, %2915 ]
  %2934 = phi i8 [ 0, %2925 ], [ 1, %2927 ], [ 0, %2929 ], [ 1, %2915 ]
  store i8 %2932, i8* %20, align 1, !tbaa !2453
  store i8 %2933, i8* %18, align 1, !tbaa !2453
  store i8 %2934, i8* %17, align 1, !tbaa !2453
  br label %2935

; <label>:2935:                                   ; preds = %2931, %2929
  store i8 0, i8* %22, align 1, !tbaa !2453
  store i8 0, i8* %21, align 1, !tbaa !2453
  store i8 0, i8* %19, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %2935, %2923
  %2936 = phi i64 [ %.pre88, %2923 ], [ %2912, %2935 ]
  %2937 = phi %struct.Memory* [ %2924, %2923 ], [ %1827, %2935 ]
  %2938 = load i8, i8* %17, align 1, !tbaa !2432
  %2939 = load i8, i8* %20, align 1, !tbaa !2448
  %2940 = or i8 %2939, %2938
  %2941 = icmp ne i8 %2940, 0
  %.v125 = select i1 %2941, i64 24, i64 6
  %2942 = add i64 %2936, %.v125
  store i64 %2942, i64* %PC, align 8, !tbaa !2428
  br i1 %2941, label %block_400aca, label %block_400ab8

block_400e2c:                                     ; preds = %block_400e1d
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 615), i64* %RSI, align 8, !tbaa !2428
  %2943 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %2943, align 1, !tbaa !2456
  %2944 = add i64 %2029, -72
  %2945 = add i64 %2044, 18
  store i64 %2945, i64* %PC, align 8
  %2946 = inttoptr i64 %2944 to float*
  %2947 = load float, float* %2946, align 4
  %2948 = fpext float %2947 to double
  store double %2948, double* %193, align 1, !tbaa !2454
  %2949 = add i64 %2029, -68
  %2950 = add i64 %2044, 23
  store i64 %2950, i64* %PC, align 8
  %2951 = inttoptr i64 %2949 to i32*
  %2952 = load i32, i32* %2951, align 4
  %2953 = sitofp i32 %2952 to double
  store double %2953, double* %219, align 1, !tbaa !2454
  %2954 = bitcast i64* %195 to <2 x i32>*
  %2955 = load <2 x i32>, <2 x i32>* %2954, align 1
  %2956 = fdiv double %2948, %2953
  %.cast25 = bitcast double %2956 to <2 x i32>
  %2957 = fptrunc double %2956 to float
  store float %2957, float* %2325, align 1, !tbaa !2451
  %2958 = extractelement <2 x i32> %.cast25, i32 1
  store i32 %2958, i32* %1630, align 1, !tbaa !2451
  %2959 = extractelement <2 x i32> %2955, i32 0
  store i32 %2959, i32* %1631, align 1, !tbaa !2451
  %2960 = extractelement <2 x i32> %2955, i32 1
  store i32 %2960, i32* %1633, align 1, !tbaa !2451
  %2961 = add i64 %2044, 36
  store i64 %2961, i64* %PC, align 8
  %2962 = load <2 x float>, <2 x float>* %2418, align 1
  %2963 = extractelement <2 x float> %2962, i32 0
  store float %2963, float* %2946, align 4
  %2964 = load i64, i64* %PC, align 8
  %2965 = load i64, i64* @stderr, align 64
  store i64 %2965, i64* %RDI, align 8, !tbaa !2428
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %2966 = add i64 %2964, -2416
  %2967 = add i64 %2964, 15
  %2968 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2969 = add i64 %2968, -8
  %2970 = inttoptr i64 %2969 to i64*
  store i64 %2967, i64* %2970, align 8
  store i64 %2969, i64* %RSP, align 8, !tbaa !2428
  store i64 %2966, i64* %PC, align 8, !tbaa !2428
  %2971 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %1010)
  %2972 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 654), i64* %RSI, align 8, !tbaa !2428
  %2973 = load i64, i64* @stderr, align 64
  store i64 %2973, i64* %RDI, align 8, !tbaa !2428
  %2974 = load i64, i64* %RBP, align 8
  %2975 = add i64 %2974, -944
  %2976 = load i32, i32* %EAX, align 4
  %2977 = add i64 %2972, 24
  store i64 %2977, i64* %PC, align 8
  %2978 = inttoptr i64 %2975 to i32*
  store i32 %2976, i32* %2978, align 4
  %2979 = load i64, i64* %PC, align 8
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %2980 = add i64 %2979, -2455
  %2981 = add i64 %2979, 7
  %2982 = load i64, i64* %RSP, align 8, !tbaa !2428
  %2983 = add i64 %2982, -8
  %2984 = inttoptr i64 %2983 to i64*
  store i64 %2981, i64* %2984, align 8
  store i64 %2983, i64* %RSP, align 8, !tbaa !2428
  store i64 %2980, i64* %PC, align 8, !tbaa !2428
  %2985 = tail call fastcc %struct.Memory* @ext_653138_fprintf(%struct.State* nonnull %0, %struct.Memory* %2971)
  %2986 = load i64, i64* %RBP, align 8
  %2987 = add i64 %2986, -64
  %2988 = load i64, i64* %PC, align 8
  %2989 = add i64 %2988, 7
  store i64 %2989, i64* %PC, align 8
  %2990 = inttoptr i64 %2987 to i32*
  store i32 -3, i32* %2990, align 4
  %2991 = load i64, i64* %PC, align 8
  store i32 100, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163792) to i32*), align 16
  %2992 = load i64, i64* %RBP, align 8
  %2993 = add i64 %2992, -948
  %2994 = load i32, i32* %EAX, align 4
  %2995 = add i64 %2991, 17
  store i64 %2995, i64* %PC, align 8
  %2996 = inttoptr i64 %2993 to i32*
  store i32 %2994, i32* %2996, align 4
  %.pre78 = load i64, i64* %PC, align 8
  %2997 = bitcast %union.VectorReg* %7 to <4 x i32>*
  br label %block_400e96

block_40158c:                                     ; preds = %block_401578
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 163808), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 161632), i64* %RCX, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %R8, align 8, !tbaa !2428
  store i64 0, i64* %R9, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2432
  store i8 1, i8* %18, align 1, !tbaa !2446
  store i8 1, i8* %20, align 1, !tbaa !2448
  store i8 0, i8* %21, align 1, !tbaa !2449
  store i8 0, i8* %22, align 1, !tbaa !2450
  store i8 0, i8* %19, align 1, !tbaa !2447
  %2998 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 20) to i32*), align 4
  %2999 = zext i32 %2998 to i64
  store i64 %2999, i64* %RSI, align 8, !tbaa !2428
  %3000 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %3001 = zext i32 %3000 to i64
  store i64 %3001, i64* %RDX, align 8, !tbaa !2428
  %3002 = add i64 %1593, 1700
  %3003 = add i64 %1593, 52
  %3004 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3005 = add i64 %3004, -8
  %3006 = inttoptr i64 %3005 to i64*
  store i64 %3003, i64* %3006, align 8
  store i64 %3005, i64* %RSP, align 8, !tbaa !2428
  store i64 %3002, i64* %PC, align 8, !tbaa !2428
  %3007 = tail call %struct.Memory* @sub_401c30_dgesl(%struct.State* nonnull %0, i64 %3002, %struct.Memory* %MEMORY.7)
  %3008 = load i64, i64* %PC, align 8
  %3009 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3010 = add i32 %3009, 1
  %3011 = zext i32 %3010 to i64
  store i64 %3011, i64* %RAX, align 8, !tbaa !2428
  %3012 = icmp eq i32 %3009, -1
  %3013 = icmp eq i32 %3010, 0
  %3014 = or i1 %3012, %3013
  %3015 = zext i1 %3014 to i8
  store i8 %3015, i8* %17, align 1, !tbaa !2432
  %3016 = and i32 %3010, 255
  %3017 = tail call i32 @llvm.ctpop.i32(i32 %3016) #9
  %3018 = trunc i32 %3017 to i8
  %3019 = and i8 %3018, 1
  %3020 = xor i8 %3019, 1
  store i8 %3020, i8* %18, align 1, !tbaa !2446
  %3021 = xor i32 %3010, %3009
  %3022 = lshr i32 %3021, 4
  %3023 = trunc i32 %3022 to i8
  %3024 = and i8 %3023, 1
  store i8 %3024, i8* %19, align 1, !tbaa !2447
  %3025 = zext i1 %3013 to i8
  store i8 %3025, i8* %20, align 1, !tbaa !2448
  %3026 = lshr i32 %3010, 31
  %3027 = trunc i32 %3026 to i8
  store i8 %3027, i8* %21, align 1, !tbaa !2449
  %3028 = lshr i32 %3009, 31
  %3029 = xor i32 %3026, %3028
  %3030 = add nuw nsw i32 %3029, %3026
  %3031 = icmp eq i32 %3030, 2
  %3032 = zext i1 %3031 to i8
  store i8 %3032, i8* %22, align 1, !tbaa !2450
  store i32 %3010, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3033 = add i64 %3008, -72
  store i64 %3033, i64* %PC, align 8, !tbaa !2428
  br label %block_401578

block_400927:                                     ; preds = %block_4008db
  %ECX = bitcast %union.anon* %4 to i32*
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 4
  %3035 = bitcast %union.VectorReg* %7 to i8*
  %3036 = bitcast %union.VectorReg* %8 to i8*
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %3037 = load i64, i64* %RBP, align 8
  %3038 = add i64 %3037, -20
  store i64 %3038, i64* %R8, align 8, !tbaa !2428
  %3039 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %3040 = zext i32 %3039 to i64
  store i64 %3040, i64* %RSI, align 8, !tbaa !2428
  %3041 = zext i32 %573 to i64
  store i64 %3041, i64* %RDX, align 8, !tbaa !2428
  %3042 = add i64 %600, 3625
  %3043 = add i64 %600, 43
  %3044 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3045 = add i64 %3044, -8
  %3046 = inttoptr i64 %3045 to i64*
  store i64 %3043, i64* %3046, align 8
  store i64 %3045, i64* %RSP, align 8, !tbaa !2428
  store i64 %3042, i64* %PC, align 8, !tbaa !2428
  %3047 = tail call %struct.Memory* @sub_401750_matgen(%struct.State* nonnull %0, i64 %3042, %struct.Memory* %351)
  %3048 = load i64, i64* %PC, align 8
  %3049 = add i64 %3048, 11
  store i64 %3049, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3050 = bitcast %union.anon* %4 to [2 x i32]*
  %3051 = getelementptr inbounds [2 x i32], [2 x i32]* %3050, i64 0, i64 1
  br label %block_40095d

block_400d88:                                     ; preds = %block_400d78
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 32), i64* %RDI, align 8, !tbaa !2428
  store i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 160832), i64* %RCX, align 8, !tbaa !2428
  %3052 = add i64 %3134, -20
  store i64 %3052, i64* %R8, align 8, !tbaa !2428
  %3053 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 16) to i32*), align 16
  %3054 = zext i32 %3053 to i64
  store i64 %3054, i64* %RSI, align 8, !tbaa !2428
  %3055 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %3056 = zext i32 %3055 to i64
  store i64 %3056, i64* %RDX, align 8, !tbaa !2428
  %3057 = add i64 %3165, 2504
  %3058 = add i64 %3165, 43
  %3059 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3060 = add i64 %3059, -8
  %3061 = inttoptr i64 %3060 to i64*
  store i64 %3058, i64* %3061, align 8
  store i64 %3060, i64* %RSP, align 8, !tbaa !2428
  store i64 %3057, i64* %PC, align 8, !tbaa !2428
  %3062 = tail call %struct.Memory* @sub_401750_matgen(%struct.State* nonnull %0, i64 %3057, %struct.Memory* %MEMORY.19)
  %3063 = load i64, i64* %PC, align 8
  %3064 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3065 = add i32 %3064, 1
  %3066 = zext i32 %3065 to i64
  store i64 %3066, i64* %RAX, align 8, !tbaa !2428
  %3067 = icmp eq i32 %3064, -1
  %3068 = icmp eq i32 %3065, 0
  %3069 = or i1 %3067, %3068
  %3070 = zext i1 %3069 to i8
  store i8 %3070, i8* %17, align 1, !tbaa !2432
  %3071 = and i32 %3065, 255
  %3072 = tail call i32 @llvm.ctpop.i32(i32 %3071) #9
  %3073 = trunc i32 %3072 to i8
  %3074 = and i8 %3073, 1
  %3075 = xor i8 %3074, 1
  store i8 %3075, i8* %18, align 1, !tbaa !2446
  %3076 = xor i32 %3065, %3064
  %3077 = lshr i32 %3076, 4
  %3078 = trunc i32 %3077 to i8
  %3079 = and i8 %3078, 1
  store i8 %3079, i8* %19, align 1, !tbaa !2447
  %3080 = zext i1 %3068 to i8
  store i8 %3080, i8* %20, align 1, !tbaa !2448
  %3081 = lshr i32 %3065, 31
  %3082 = trunc i32 %3081 to i8
  store i8 %3082, i8* %21, align 1, !tbaa !2449
  %3083 = lshr i32 %3064, 31
  %3084 = xor i32 %3081, %3083
  %3085 = add nuw nsw i32 %3084, %3081
  %3086 = icmp eq i32 %3085, 2
  %3087 = zext i1 %3086 to i8
  store i8 %3087, i8* %22, align 1, !tbaa !2450
  store i32 %3065, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  %3088 = add i64 %3063, -59
  store i64 %3088, i64* %PC, align 8, !tbaa !2428
  br label %block_400d78

block_400ab8:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %3089 = load i64, i64* %RBP, align 8
  %3090 = add i64 %3089, -24
  %3091 = add i64 %2942, 5
  store i64 %3091, i64* %PC, align 8
  %3092 = inttoptr i64 %3090 to float*
  %3093 = load float, float* %3092, align 4
  %3094 = fpext float %3093 to double
  store double %3094, double* %189, align 1, !tbaa !2454
  %3095 = add i64 %3089, -904
  %3096 = add i64 %2942, 13
  store i64 %3096, i64* %PC, align 8
  %3097 = inttoptr i64 %3095 to double*
  store double %3094, double* %3097, align 8
  %3098 = load i64, i64* %PC, align 8
  %3099 = add i64 %3098, 41
  store i64 %3099, i64* %PC, align 8, !tbaa !2428
  br label %block_400aee

block_400a07:                                     ; preds = %block_4009b7, %block_400aee
  %3100 = phi i32 [ 0, %block_4009b7 ], [ %546, %block_400aee ]
  %3101 = phi i64 [ %1619, %block_4009b7 ], [ %569, %block_400aee ]
  %MEMORY.18 = phi %struct.Memory* [ %1602, %block_4009b7 ], [ %2937, %block_400aee ]
  %3102 = zext i32 %3100 to i64
  store i64 %3102, i64* %RAX, align 8, !tbaa !2428
  %3103 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 24) to i32*), align 8
  %3104 = sub i32 %3100, %3103
  %3105 = icmp ult i32 %3100, %3103
  %3106 = zext i1 %3105 to i8
  store i8 %3106, i8* %17, align 1, !tbaa !2432
  %3107 = and i32 %3104, 255
  %3108 = tail call i32 @llvm.ctpop.i32(i32 %3107) #9
  %3109 = trunc i32 %3108 to i8
  %3110 = and i8 %3109, 1
  %3111 = xor i8 %3110, 1
  store i8 %3111, i8* %18, align 1, !tbaa !2446
  %3112 = xor i32 %3103, %3100
  %3113 = xor i32 %3112, %3104
  %3114 = lshr i32 %3113, 4
  %3115 = trunc i32 %3114 to i8
  %3116 = and i8 %3115, 1
  store i8 %3116, i8* %19, align 1, !tbaa !2447
  %3117 = icmp eq i32 %3104, 0
  %3118 = zext i1 %3117 to i8
  store i8 %3118, i8* %20, align 1, !tbaa !2448
  %3119 = lshr i32 %3104, 31
  %3120 = trunc i32 %3119 to i8
  store i8 %3120, i8* %21, align 1, !tbaa !2449
  %3121 = lshr i32 %3100, 31
  %3122 = lshr i32 %3103, 31
  %3123 = xor i32 %3122, %3121
  %3124 = xor i32 %3119, %3121
  %3125 = add nuw nsw i32 %3124, %3123
  %3126 = icmp eq i32 %3125, 2
  %3127 = zext i1 %3126 to i8
  store i8 %3127, i8* %22, align 1, !tbaa !2450
  %3128 = icmp ne i8 %3120, 0
  %3129 = xor i1 %3128, %3126
  %.v95 = select i1 %3129, i64 20, i64 270
  %3130 = add i64 %3101, %.v95
  store i64 %3130, i64* %PC, align 8, !tbaa !2428
  br i1 %3129, label %block_400a1b, label %block_400b15

block_400d78:                                     ; preds = %block_400d88, %block_400d5a
  %3131 = phi i32 [ 0, %block_400d5a ], [ %3065, %block_400d88 ]
  %3132 = phi i64 [ %1283, %block_400d5a ], [ %3088, %block_400d88 ]
  %MEMORY.19 = phi %struct.Memory* [ %1244, %block_400d5a ], [ %3062, %block_400d88 ]
  %3133 = zext i32 %3131 to i64
  store i64 %3133, i64* %RAX, align 8, !tbaa !2428
  %3134 = load i64, i64* %RBP, align 8
  %3135 = add i64 %3134, -68
  %3136 = add i64 %3132, 10
  store i64 %3136, i64* %PC, align 8
  %3137 = inttoptr i64 %3135 to i32*
  %3138 = load i32, i32* %3137, align 4
  %3139 = sub i32 %3131, %3138
  %3140 = icmp ult i32 %3131, %3138
  %3141 = zext i1 %3140 to i8
  store i8 %3141, i8* %17, align 1, !tbaa !2432
  %3142 = and i32 %3139, 255
  %3143 = tail call i32 @llvm.ctpop.i32(i32 %3142) #9
  %3144 = trunc i32 %3143 to i8
  %3145 = and i8 %3144, 1
  %3146 = xor i8 %3145, 1
  store i8 %3146, i8* %18, align 1, !tbaa !2446
  %3147 = xor i32 %3138, %3131
  %3148 = xor i32 %3147, %3139
  %3149 = lshr i32 %3148, 4
  %3150 = trunc i32 %3149 to i8
  %3151 = and i8 %3150, 1
  store i8 %3151, i8* %19, align 1, !tbaa !2447
  %3152 = icmp eq i32 %3139, 0
  %3153 = zext i1 %3152 to i8
  store i8 %3153, i8* %20, align 1, !tbaa !2448
  %3154 = lshr i32 %3139, 31
  %3155 = trunc i32 %3154 to i8
  store i8 %3155, i8* %21, align 1, !tbaa !2449
  %3156 = lshr i32 %3131, 31
  %3157 = lshr i32 %3138, 31
  %3158 = xor i32 %3157, %3156
  %3159 = xor i32 %3154, %3156
  %3160 = add nuw nsw i32 %3159, %3158
  %3161 = icmp eq i32 %3160, 2
  %3162 = zext i1 %3161 to i8
  store i8 %3162, i8* %22, align 1, !tbaa !2450
  %3163 = icmp ne i8 %3155, 0
  %3164 = xor i1 %3163, %3161
  %.v96 = select i1 %3164, i64 16, i64 81
  %3165 = add i64 %3132, %.v96
  store i64 %3165, i64* %PC, align 8, !tbaa !2428
  br i1 %3164, label %block_400d88, label %block_400dc9

block_401080:                                     ; preds = %block_401072
  %3166 = add i64 %410, -2720
  %3167 = add i64 %410, 5
  %3168 = load i64, i64* %RSP, align 8, !tbaa !2428
  %3169 = add i64 %3168, -8
  %3170 = inttoptr i64 %3169 to i64*
  store i64 %3167, i64* %3170, align 8
  store i64 %3169, i64* %RSP, align 8, !tbaa !2428
  store i64 %3166, i64* %PC, align 8, !tbaa !2428
  %3171 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* nonnull %0, i64 %3166, %struct.Memory* %MEMORY.0)
  %3172 = load i64, i64* %RBP, align 8
  %3173 = add i64 %3172, -40
  %3174 = load i64, i64* %PC, align 8
  %3175 = add i64 %3174, 5
  store i64 %3175, i64* %PC, align 8
  %3176 = load <2 x float>, <2 x float>* %57, align 1
  %3177 = extractelement <2 x float> %3176, i32 0
  %3178 = inttoptr i64 %3173 to float*
  store float %3177, float* %3178, align 4
  %3179 = load i64, i64* %PC, align 8
  %3180 = add i64 %3179, 11
  store i64 %3180, i64* %PC, align 8
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%seg_604040__bss_type* @seg_604040__bss to i64), i64 162988) to i32*), align 4
  br label %block_401095
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4004f0__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4004f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2432
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2446
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2447
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, 8
  %13 = inttoptr i64 %11 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %RSI, align 8, !tbaa !2428
  store i64 %12, i64* %RDX, align 8, !tbaa !2428
  %15 = and i64 %12, -16
  store i8 0, i8* %3, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 240
  %18 = tail call i32 @llvm.ctpop.i32(i32 %17) #9
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  store i8 %21, i8* %4, align 1, !tbaa !2446
  %22 = icmp eq i64 %15, 0
  %23 = zext i1 %22 to i8
  store i8 %23, i8* %5, align 1, !tbaa !2448
  %24 = lshr i64 %12, 63
  %25 = trunc i64 %24 to i8
  store i8 %25, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2447
  %26 = load i64, i64* %RAX, align 8
  %27 = add i64 %1, 14
  store i64 %27, i64* %PC, align 8
  %28 = add i64 %15, -8
  %29 = inttoptr i64 %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC, align 8
  %32 = add i64 %15, -16
  %33 = inttoptr i64 %32 to i64*
  store i64 %28, i64* %33, align 16
  %34 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_402e20___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_402db0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %35 = add i64 %34, 27
  %36 = add i64 %15, -24
  %37 = inttoptr i64 %36 to i64*
  store i64 %35, i64* %37, align 8
  store i64 %36, i64* %RSP, align 8, !tbaa !2428
  %38 = load i64, i64* getelementptr inbounds (%seg_603ff0__got_type, %seg_603ff0__got_type* @seg_603ff0__got, i64 0, i32 0), align 8
  store i64 %38, i64* %PC, align 8, !tbaa !2428
  %39 = tail call fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %40 = load i64, i64* %PC, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %PC, align 8
  %42 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %41, %struct.Memory* %39)
  ret %struct.Memory* %42
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402ce0_dscal(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402ce0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -12
  %14 = load i32, i32* %EDI, align 4
  %15 = add i64 %12, 6
  store i64 %15, i64* %PC, align 8
  %16 = inttoptr i64 %13 to i32*
  store i32 %14, i32* %16, align 4
  %17 = load i64, i64* %RBP, align 8
  %18 = add i64 %17, -8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 5
  store i64 %20, i64* %PC, align 8
  %21 = bitcast %union.VectorReg* %5 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 1
  %23 = extractelement <2 x float> %22, i32 0
  %24 = inttoptr i64 %18 to float*
  store float %23, float* %24, align 4
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %25, -16
  %27 = load i64, i64* %RSI, align 8
  %28 = load i64, i64* %PC, align 8
  %29 = add i64 %28, 4
  store i64 %29, i64* %PC, align 8
  %30 = inttoptr i64 %26 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -20
  %33 = load i32, i32* %EDX, align 4
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 3
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %32 to i32*
  store i32 %33, i32* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -32
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 7
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i32*
  store i32 0, i32* %41, align 4
  %42 = load i64, i64* %RBP, align 8
  %43 = add i64 %42, -28
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i32*
  store i32 0, i32* %46, align 4
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -4
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %53, align 1, !tbaa !2432
  %54 = and i32 %52, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %60, align 1, !tbaa !2447
  %61 = icmp eq i32 %52, 0
  %62 = zext i1 %61 to i8
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %62, i8* %63, align 1, !tbaa !2448
  %64 = lshr i32 %52, 31
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %65, i8* %66, align 1, !tbaa !2449
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %67, align 1, !tbaa !2450
  %68 = xor i1 %61, true
  %69 = icmp eq i8 %65, 0
  %70 = and i1 %69, %68
  %.v = select i1 %70, i64 15, i64 10
  %71 = add i64 %49, %.v
  store i64 %71, i64* %PC, align 8, !tbaa !2428
  br i1 %70, label %block_402d10, label %block_402da9.sink.split

block_402d1a:                                     ; preds = %block_402d10
  %72 = add i64 %320, 3
  store i64 %72, i64* %PC, align 8
  %73 = load i32, i32* %51, align 4
  %74 = zext i32 %73 to i64
  store i64 %74, i64* %RAX, align 8, !tbaa !2428
  %75 = add i64 %320, 7
  store i64 %75, i64* %PC, align 8
  %76 = load i32, i32* %297, align 4
  %77 = sext i32 %73 to i64
  %78 = sext i32 %76 to i64
  %79 = mul nsw i64 %78, %77
  %80 = trunc i64 %79 to i32
  %81 = and i64 %79, 4294967295
  store i64 %81, i64* %RAX, align 8, !tbaa !2428
  %82 = shl i64 %79, 32
  %83 = ashr exact i64 %82, 32
  %84 = icmp ne i64 %83, %79
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %53, align 1, !tbaa !2432
  %86 = and i32 %80, 255
  %87 = tail call i32 @llvm.ctpop.i32(i32 %86) #9
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 1
  %90 = xor i8 %89, 1
  store i8 %90, i8* %59, align 1, !tbaa !2446
  store i8 0, i8* %60, align 1, !tbaa !2447
  store i8 0, i8* %63, align 1, !tbaa !2448
  %91 = lshr i32 %80, 31
  %92 = trunc i32 %91 to i8
  store i8 %92, i8* %66, align 1, !tbaa !2449
  store i8 %85, i8* %67, align 1, !tbaa !2450
  %93 = add i64 %47, -36
  %94 = trunc i64 %79 to i32
  %95 = add i64 %320, 10
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %93 to i32*
  store i32 %94, i32* %96, align 4
  %97 = load i64, i64* %RBP, align 8
  %98 = add i64 %97, -24
  %99 = load i64, i64* %PC, align 8
  %100 = add i64 %99, 7
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %98 to i32*
  store i32 0, i32* %101, align 4
  %102 = bitcast %union.VectorReg* %5 to i8*
  %103 = bitcast %union.VectorReg* %5 to float*
  %104 = bitcast %union.VectorReg* %5 to i32*
  %105 = getelementptr inbounds i8, i8* %102, i64 4
  %106 = bitcast i8* %105 to float*
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %108 = bitcast i64* %107 to float*
  %109 = getelementptr inbounds i8, i8* %102, i64 12
  %110 = bitcast i8* %109 to float*
  %111 = bitcast i64* %107 to <2 x i32>*
  %112 = bitcast i8* %105 to i32*
  %113 = bitcast i64* %107 to i32*
  %114 = bitcast i8* %109 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402d2b

block_402da9.sink.split.loopexit:                 ; preds = %block_402d2b
  br label %block_402da9.sink.split

block_402da9.sink.split:                          ; preds = %block_402da9.sink.split.loopexit, %block_402ce0
  %115 = phi i64 [ %71, %block_402ce0 ], [ %202, %block_402da9.sink.split.loopexit ]
  %.sink5 = phi i64 [ 158, %block_402ce0 ], [ 69, %block_402da9.sink.split.loopexit ]
  %116 = add i64 %115, %.sink5
  store i64 %116, i64* %PC, align 8, !tbaa !2428
  br label %block_402da9

block_402da9.loopexit:                            ; preds = %block_402d70
  br label %block_402da9

block_402da9:                                     ; preds = %block_402da9.loopexit, %block_402da9.sink.split
  %117 = phi i64 [ %116, %block_402da9.sink.split ], [ %164, %block_402da9.loopexit ]
  %118 = add i64 %117, 1
  store i64 %118, i64* %PC, align 8
  %119 = load i64, i64* %8, align 8, !tbaa !2428
  %120 = add i64 %119, 8
  %121 = inttoptr i64 %119 to i64*
  %122 = load i64, i64* %121, align 8
  store i64 %122, i64* %RBP, align 8, !tbaa !2428
  store i64 %120, i64* %8, align 8, !tbaa !2428
  %123 = add i64 %117, 2
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %120 to i64*
  %125 = load i64, i64* %124, align 8
  store i64 %125, i64* %PC, align 8, !tbaa !2428
  %126 = add i64 %119, 16
  store i64 %126, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402d70:                                     ; preds = %block_402d7c, %block_402d69
  %127 = phi i64 [ %387, %block_402d7c ], [ %.pre9, %block_402d69 ]
  %128 = load i64, i64* %RBP, align 8
  %129 = add i64 %128, -24
  %130 = add i64 %127, 3
  store i64 %130, i64* %PC, align 8
  %131 = inttoptr i64 %129 to i32*
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i64
  store i64 %133, i64* %RAX, align 8, !tbaa !2428
  %134 = add i64 %128, -4
  %135 = add i64 %127, 6
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i32*
  %137 = load i32, i32* %136, align 4
  %138 = sub i32 %132, %137
  %139 = icmp ult i32 %132, %137
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %53, align 1, !tbaa !2432
  %141 = and i32 %138, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #9
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %59, align 1, !tbaa !2446
  %146 = xor i32 %137, %132
  %147 = xor i32 %146, %138
  %148 = lshr i32 %147, 4
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  store i8 %150, i8* %60, align 1, !tbaa !2447
  %151 = icmp eq i32 %138, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %63, align 1, !tbaa !2448
  %153 = lshr i32 %138, 31
  %154 = trunc i32 %153 to i8
  store i8 %154, i8* %66, align 1, !tbaa !2449
  %155 = lshr i32 %132, 31
  %156 = lshr i32 %137, 31
  %157 = xor i32 %156, %155
  %158 = xor i32 %153, %155
  %159 = add nuw nsw i32 %158, %157
  %160 = icmp eq i32 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %67, align 1, !tbaa !2450
  %162 = icmp ne i8 %154, 0
  %163 = xor i1 %162, %160
  %.v12 = select i1 %163, i64 12, i64 57
  %164 = add i64 %127, %.v12
  store i64 %164, i64* %PC, align 8, !tbaa !2428
  br i1 %163, label %block_402d7c, label %block_402da9.loopexit

block_402d2b:                                     ; preds = %block_402d37, %block_402d1a
  %165 = phi i64 [ %294, %block_402d37 ], [ %.pre, %block_402d1a ]
  %166 = load i64, i64* %RBP, align 8
  %167 = add i64 %166, -24
  %168 = add i64 %165, 3
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %167 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = zext i32 %170 to i64
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = add i64 %166, -36
  %173 = add i64 %165, 6
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = sub i32 %170, %175
  %177 = icmp ult i32 %170, %175
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %53, align 1, !tbaa !2432
  %179 = and i32 %176, 255
  %180 = tail call i32 @llvm.ctpop.i32(i32 %179) #9
  %181 = trunc i32 %180 to i8
  %182 = and i8 %181, 1
  %183 = xor i8 %182, 1
  store i8 %183, i8* %59, align 1, !tbaa !2446
  %184 = xor i32 %175, %170
  %185 = xor i32 %184, %176
  %186 = lshr i32 %185, 4
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 1
  store i8 %188, i8* %60, align 1, !tbaa !2447
  %189 = icmp eq i32 %176, 0
  %190 = zext i1 %189 to i8
  store i8 %190, i8* %63, align 1, !tbaa !2448
  %191 = lshr i32 %176, 31
  %192 = trunc i32 %191 to i8
  store i8 %192, i8* %66, align 1, !tbaa !2449
  %193 = lshr i32 %170, 31
  %194 = lshr i32 %175, 31
  %195 = xor i32 %194, %193
  %196 = xor i32 %191, %193
  %197 = add nuw nsw i32 %196, %195
  %198 = icmp eq i32 %197, 2
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %67, align 1, !tbaa !2450
  %200 = icmp ne i8 %192, 0
  %201 = xor i1 %200, %198
  %.v11 = select i1 %201, i64 12, i64 57
  %202 = add i64 %165, %.v11
  store i64 %202, i64* %PC, align 8, !tbaa !2428
  br i1 %201, label %block_402d37, label %block_402da9.sink.split.loopexit

block_402d69:                                     ; preds = %block_402d10
  %203 = add i64 %47, -24
  %204 = add i64 %320, 7
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i32*
  store i32 0, i32* %205, align 4
  %206 = bitcast %union.VectorReg* %5 to i8*
  %207 = bitcast %union.VectorReg* %5 to float*
  %208 = bitcast %union.VectorReg* %5 to i32*
  %209 = getelementptr inbounds i8, i8* %206, i64 4
  %210 = bitcast i8* %209 to float*
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %212 = bitcast i64* %211 to float*
  %213 = getelementptr inbounds i8, i8* %206, i64 12
  %214 = bitcast i8* %213 to float*
  %215 = bitcast i64* %211 to <2 x i32>*
  %216 = bitcast i8* %209 to i32*
  %217 = bitcast i64* %211 to i32*
  %218 = bitcast i8* %213 to i32*
  %.pre9 = load i64, i64* %PC, align 8
  br label %block_402d70

block_402d37:                                     ; preds = %block_402d2b
  %219 = add i64 %166, -8
  %220 = add i64 %202, 5
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %221, align 4
  store i32 %222, i32* %104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %110, align 1, !tbaa !2451
  %223 = add i64 %166, -16
  %224 = add i64 %202, 9
  store i64 %224, i64* %PC, align 8
  %225 = inttoptr i64 %223 to i64*
  %226 = load i64, i64* %225, align 8
  store i64 %226, i64* %RAX, align 8, !tbaa !2428
  %227 = add i64 %202, 13
  store i64 %227, i64* %PC, align 8
  %228 = load i32, i32* %169, align 4
  %229 = sext i32 %228 to i64
  store i64 %229, i64* %RCX, align 8, !tbaa !2428
  %230 = shl nsw i64 %229, 2
  %231 = add i64 %230, %226
  %232 = add i64 %202, 18
  store i64 %232, i64* %PC, align 8
  %233 = load <2 x float>, <2 x float>* %21, align 1
  %234 = load <2 x i32>, <2 x i32>* %111, align 1
  %235 = inttoptr i64 %231 to float*
  %236 = load float, float* %235, align 4
  %237 = extractelement <2 x float> %233, i32 0
  %238 = fmul float %237, %236
  store float %238, float* %103, align 1, !tbaa !2451
  %239 = bitcast <2 x float> %233 to <2 x i32>
  %240 = extractelement <2 x i32> %239, i32 1
  store i32 %240, i32* %112, align 1, !tbaa !2451
  %241 = extractelement <2 x i32> %234, i32 0
  store i32 %241, i32* %113, align 1, !tbaa !2451
  %242 = extractelement <2 x i32> %234, i32 1
  store i32 %242, i32* %114, align 1, !tbaa !2451
  %243 = add i64 %202, 22
  store i64 %243, i64* %PC, align 8
  %244 = load i64, i64* %225, align 8
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %245 = add i64 %202, 26
  store i64 %245, i64* %PC, align 8
  %246 = load i32, i32* %169, align 4
  %247 = sext i32 %246 to i64
  store i64 %247, i64* %RCX, align 8, !tbaa !2428
  %248 = shl nsw i64 %247, 2
  %249 = add i64 %248, %244
  %250 = add i64 %202, 31
  store i64 %250, i64* %PC, align 8
  %251 = load <2 x float>, <2 x float>* %21, align 1
  %252 = extractelement <2 x float> %251, i32 0
  %253 = inttoptr i64 %249 to float*
  store float %252, float* %253, align 4
  %254 = load i64, i64* %RBP, align 8
  %255 = add i64 %254, -24
  %256 = load i64, i64* %PC, align 8
  %257 = add i64 %256, 3
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %255 to i32*
  %259 = load i32, i32* %258, align 4
  %260 = zext i32 %259 to i64
  store i64 %260, i64* %RAX, align 8, !tbaa !2428
  %261 = add i64 %254, -20
  %262 = add i64 %256, 6
  store i64 %262, i64* %PC, align 8
  %263 = inttoptr i64 %261 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = add i32 %264, %259
  %266 = zext i32 %265 to i64
  store i64 %266, i64* %RAX, align 8, !tbaa !2428
  %267 = icmp ult i32 %265, %259
  %268 = icmp ult i32 %265, %264
  %269 = or i1 %267, %268
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %53, align 1, !tbaa !2432
  %271 = and i32 %265, 255
  %272 = tail call i32 @llvm.ctpop.i32(i32 %271) #9
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  store i8 %275, i8* %59, align 1, !tbaa !2446
  %276 = xor i32 %264, %259
  %277 = xor i32 %276, %265
  %278 = lshr i32 %277, 4
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  store i8 %280, i8* %60, align 1, !tbaa !2447
  %281 = icmp eq i32 %265, 0
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %63, align 1, !tbaa !2448
  %283 = lshr i32 %265, 31
  %284 = trunc i32 %283 to i8
  store i8 %284, i8* %66, align 1, !tbaa !2449
  %285 = lshr i32 %259, 31
  %286 = lshr i32 %264, 31
  %287 = xor i32 %283, %285
  %288 = xor i32 %283, %286
  %289 = add nuw nsw i32 %287, %288
  %290 = icmp eq i32 %289, 2
  %291 = zext i1 %290 to i8
  store i8 %291, i8* %67, align 1, !tbaa !2450
  %292 = add i64 %256, 9
  store i64 %292, i64* %PC, align 8
  store i32 %265, i32* %258, align 4
  %293 = load i64, i64* %PC, align 8
  %294 = add i64 %293, -52
  store i64 %294, i64* %PC, align 8, !tbaa !2428
  br label %block_402d2b

block_402d10:                                     ; preds = %block_402ce0
  %295 = add i64 %47, -20
  %296 = add i64 %71, 4
  store i64 %296, i64* %PC, align 8
  %297 = inttoptr i64 %295 to i32*
  %298 = load i32, i32* %297, align 4
  %299 = add i32 %298, -1
  %300 = icmp eq i32 %298, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %53, align 1, !tbaa !2432
  %302 = and i32 %299, 255
  %303 = tail call i32 @llvm.ctpop.i32(i32 %302) #9
  %304 = trunc i32 %303 to i8
  %305 = and i8 %304, 1
  %306 = xor i8 %305, 1
  store i8 %306, i8* %59, align 1, !tbaa !2446
  %307 = xor i32 %299, %298
  %308 = lshr i32 %307, 4
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  store i8 %310, i8* %60, align 1, !tbaa !2447
  %311 = icmp eq i32 %299, 0
  %312 = zext i1 %311 to i8
  store i8 %312, i8* %63, align 1, !tbaa !2448
  %313 = lshr i32 %299, 31
  %314 = trunc i32 %313 to i8
  store i8 %314, i8* %66, align 1, !tbaa !2449
  %315 = lshr i32 %298, 31
  %316 = xor i32 %313, %315
  %317 = add nuw nsw i32 %316, %315
  %318 = icmp eq i32 %317, 2
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %67, align 1, !tbaa !2450
  %.v10 = select i1 %311, i64 89, i64 10
  %320 = add i64 %71, %.v10
  store i64 %320, i64* %PC, align 8, !tbaa !2428
  br i1 %311, label %block_402d69, label %block_402d1a

block_402d7c:                                     ; preds = %block_402d70
  %321 = add i64 %128, -8
  %322 = add i64 %164, 5
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %321 to i32*
  %324 = load i32, i32* %323, align 4
  store i32 %324, i32* %208, align 1, !tbaa !2451
  store float 0.000000e+00, float* %210, align 1, !tbaa !2451
  store float 0.000000e+00, float* %212, align 1, !tbaa !2451
  store float 0.000000e+00, float* %214, align 1, !tbaa !2451
  %325 = add i64 %128, -16
  %326 = add i64 %164, 9
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %325 to i64*
  %328 = load i64, i64* %327, align 8
  store i64 %328, i64* %RAX, align 8, !tbaa !2428
  %329 = add i64 %164, 13
  store i64 %329, i64* %PC, align 8
  %330 = load i32, i32* %131, align 4
  %331 = sext i32 %330 to i64
  store i64 %331, i64* %RCX, align 8, !tbaa !2428
  %332 = shl nsw i64 %331, 2
  %333 = add i64 %332, %328
  %334 = add i64 %164, 18
  store i64 %334, i64* %PC, align 8
  %335 = load <2 x float>, <2 x float>* %21, align 1
  %336 = load <2 x i32>, <2 x i32>* %215, align 1
  %337 = inttoptr i64 %333 to float*
  %338 = load float, float* %337, align 4
  %339 = extractelement <2 x float> %335, i32 0
  %340 = fmul float %339, %338
  store float %340, float* %207, align 1, !tbaa !2451
  %341 = bitcast <2 x float> %335 to <2 x i32>
  %342 = extractelement <2 x i32> %341, i32 1
  store i32 %342, i32* %216, align 1, !tbaa !2451
  %343 = extractelement <2 x i32> %336, i32 0
  store i32 %343, i32* %217, align 1, !tbaa !2451
  %344 = extractelement <2 x i32> %336, i32 1
  store i32 %344, i32* %218, align 1, !tbaa !2451
  %345 = add i64 %164, 22
  store i64 %345, i64* %PC, align 8
  %346 = load i64, i64* %327, align 8
  store i64 %346, i64* %RAX, align 8, !tbaa !2428
  %347 = add i64 %164, 26
  store i64 %347, i64* %PC, align 8
  %348 = load i32, i32* %131, align 4
  %349 = sext i32 %348 to i64
  store i64 %349, i64* %RCX, align 8, !tbaa !2428
  %350 = shl nsw i64 %349, 2
  %351 = add i64 %350, %346
  %352 = add i64 %164, 31
  store i64 %352, i64* %PC, align 8
  %353 = load <2 x float>, <2 x float>* %21, align 1
  %354 = extractelement <2 x float> %353, i32 0
  %355 = inttoptr i64 %351 to float*
  store float %354, float* %355, align 4
  %356 = load i64, i64* %RBP, align 8
  %357 = add i64 %356, -24
  %358 = load i64, i64* %PC, align 8
  %359 = add i64 %358, 3
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %357 to i32*
  %361 = load i32, i32* %360, align 4
  %362 = add i32 %361, 1
  %363 = zext i32 %362 to i64
  store i64 %363, i64* %RAX, align 8, !tbaa !2428
  %364 = icmp eq i32 %361, -1
  %365 = icmp eq i32 %362, 0
  %366 = or i1 %364, %365
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %53, align 1, !tbaa !2432
  %368 = and i32 %362, 255
  %369 = tail call i32 @llvm.ctpop.i32(i32 %368) #9
  %370 = trunc i32 %369 to i8
  %371 = and i8 %370, 1
  %372 = xor i8 %371, 1
  store i8 %372, i8* %59, align 1, !tbaa !2446
  %373 = xor i32 %362, %361
  %374 = lshr i32 %373, 4
  %375 = trunc i32 %374 to i8
  %376 = and i8 %375, 1
  store i8 %376, i8* %60, align 1, !tbaa !2447
  %377 = zext i1 %365 to i8
  store i8 %377, i8* %63, align 1, !tbaa !2448
  %378 = lshr i32 %362, 31
  %379 = trunc i32 %378 to i8
  store i8 %379, i8* %66, align 1, !tbaa !2449
  %380 = lshr i32 %361, 31
  %381 = xor i32 %378, %380
  %382 = add nuw nsw i32 %381, %378
  %383 = icmp eq i32 %382, 2
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %67, align 1, !tbaa !2450
  %385 = add i64 %358, 9
  store i64 %385, i64* %PC, align 8
  store i32 %362, i32* %360, align 4
  %386 = load i64, i64* %PC, align 8
  %387 = add i64 %386, -52
  store i64 %387, i64* %PC, align 8, !tbaa !2428
  br label %block_402d70
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_400520__dl_relocate_static_pie(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_400520:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_402860_print_time(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_402860:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = load i64, i64* %RBP, align 8
  %5 = add i64 %1, 1
  store i64 %5, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %4, i64* %9, align 8
  store i64 %8, i64* %6, align 8, !tbaa !2428
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -12
  %12 = load i32, i32* %EDI, align 4
  %13 = add i64 %10, 6
  store i64 %13, i64* %PC, align 8
  %14 = inttoptr i64 %11 to i32*
  store i32 %12, i32* %14, align 4
  %15 = load i64, i64* %PC, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %PC, align 8
  %17 = load i64, i64* %6, align 8, !tbaa !2428
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %17 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %RBP, align 8, !tbaa !2428
  store i64 %18, i64* %6, align 8, !tbaa !2428
  %21 = add i64 %15, 2
  store i64 %21, i64* %PC, align 8
  %22 = inttoptr i64 %18 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %17, 16
  store i64 %24, i64* %6, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402870_daxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402870:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -12
  %16 = load i32, i32* %EDI, align 4
  %17 = add i64 %14, 6
  store i64 %17, i64* %PC, align 8
  %18 = inttoptr i64 %15 to i32*
  store i32 %16, i32* %18, align 4
  %19 = load i64, i64* %RBP, align 8
  %20 = add i64 %19, -8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 5
  store i64 %22, i64* %PC, align 8
  %23 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 1
  %25 = extractelement <2 x float> %24, i32 0
  %26 = inttoptr i64 %20 to float*
  store float %25, float* %26, align 4
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %27, -16
  %29 = load i64, i64* %RSI, align 8
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %28 to i64*
  store i64 %29, i64* %32, align 8
  %33 = load i64, i64* %RBP, align 8
  %34 = add i64 %33, -20
  %35 = load i32, i32* %EDX, align 4
  %36 = load i64, i64* %PC, align 8
  %37 = add i64 %36, 3
  store i64 %37, i64* %PC, align 8
  %38 = inttoptr i64 %34 to i32*
  store i32 %35, i32* %38, align 4
  %39 = load i64, i64* %RBP, align 8
  %40 = add i64 %39, -32
  %41 = load i64, i64* %RCX, align 8
  %42 = load i64, i64* %PC, align 8
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -36
  %47 = load i32, i32* %R8D, align 4
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i32*
  store i32 %47, i32* %50, align 4
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -56
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55, align 4
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -52
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %67, align 1, !tbaa !2432
  %68 = and i32 %66, 255
  %69 = tail call i32 @llvm.ctpop.i32(i32 %68) #9
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 1
  %72 = xor i8 %71, 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %72, i8* %73, align 1, !tbaa !2446
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %74, align 1, !tbaa !2447
  %75 = icmp eq i32 %66, 0
  %76 = zext i1 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i32 %66, 31
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %79, i8* %80, align 1, !tbaa !2449
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %81, align 1, !tbaa !2450
  %82 = xor i1 %75, true
  %83 = icmp eq i8 %79, 0
  %84 = and i1 %83, %82
  %.v24 = select i1 %84, i64 15, i64 10
  %85 = add i64 %63, %.v24
  store i64 %85, i64* %PC, align 8, !tbaa !2428
  br i1 %84, label %block_4028a8, label %block_4029d7

block_402919:                                     ; preds = %block_402900, %block_40290a
  %86 = phi i64 [ %725, %block_402900 ], [ %.pre22, %block_40290a ]
  %87 = phi i64 [ %710, %block_402900 ], [ %.pre21, %block_40290a ]
  %88 = add i64 %87, -40
  %89 = add i64 %86, 7
  store i64 %89, i64* %PC, align 8
  %90 = inttoptr i64 %88 to i32*
  store i32 0, i32* %90, align 4
  %91 = bitcast [32 x %union.VectorReg]* %6 to float*
  %92 = bitcast i8* %138 to float*
  %93 = bitcast i64* %136 to float*
  %94 = bitcast i8* %141 to float*
  %95 = bitcast %union.VectorReg* %7 to float*
  %96 = bitcast %union.VectorReg* %7 to i32*
  %97 = getelementptr inbounds i8, i8* %144, i64 4
  %98 = bitcast i8* %97 to float*
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %100 = bitcast i64* %99 to float*
  %101 = getelementptr inbounds i8, i8* %144, i64 12
  %102 = bitcast i8* %101 to float*
  %103 = bitcast %union.VectorReg* %7 to <2 x float>*
  %104 = bitcast i64* %99 to <2 x i32>*
  %105 = bitcast i8* %97 to i32*
  %106 = bitcast i64* %99 to i32*
  %107 = bitcast i8* %101 to i32*
  %108 = bitcast i64* %136 to <2 x i32>*
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_402920

block_4028d9:                                     ; preds = %block_4028c5, %block_4028cf
  %109 = phi i64 [ %704, %block_4028c5 ], [ %207, %block_4028cf ]
  %110 = add i64 %678, -44
  %111 = add i64 %109, 7
  store i64 %111, i64* %PC, align 8
  %112 = inttoptr i64 %110 to i32*
  store i32 0, i32* %112, align 4
  %113 = load i64, i64* %RBP, align 8
  %114 = add i64 %113, -48
  %115 = load i64, i64* %PC, align 8
  %116 = add i64 %115, 7
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %114 to i32*
  store i32 0, i32* %117, align 4
  %118 = load i64, i64* %RBP, align 8
  %119 = add i64 %118, -20
  %120 = load i64, i64* %PC, align 8
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %119 to i32*
  %123 = load i32, i32* %122, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %124 = and i32 %123, 255
  %125 = tail call i32 @llvm.ctpop.i32(i32 %124) #9
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = xor i8 %127, 1
  store i8 %128, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  %129 = icmp eq i32 %123, 0
  %130 = zext i1 %129 to i8
  store i8 %130, i8* %77, align 1, !tbaa !2448
  %131 = lshr i32 %123, 31
  %132 = trunc i32 %131 to i8
  store i8 %132, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  %133 = icmp ne i8 %132, 0
  %.v = select i1 %133, i64 6, i64 21
  %134 = add i64 %121, %.v
  store i64 %134, i64* %PC, align 8, !tbaa !2428
  br i1 %133, label %block_4028f1, label %block_402900

block_4028a8:                                     ; preds = %block_402870
  %135 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %137 = bitcast [32 x %union.VectorReg]* %6 to i32*
  %138 = getelementptr inbounds i8, i8* %135, i64 4
  %139 = bitcast i8* %138 to i32*
  %140 = bitcast i64* %136 to i32*
  %141 = getelementptr inbounds i8, i8* %135, i64 12
  %142 = bitcast i8* %141 to i32*
  %143 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %143, align 1, !tbaa !2456
  %144 = bitcast %union.VectorReg* %7 to i8*
  %145 = add i64 %61, -8
  %146 = add i64 %85, 8
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to float*
  %148 = load float, float* %147, align 4
  %149 = fpext float %148 to double
  %150 = bitcast %union.VectorReg* %7 to double*
  store double %149, double* %150, align 1, !tbaa !2454
  %151 = add i64 %85, 12
  store i64 %151, i64* %PC, align 8
  %152 = bitcast [32 x %union.VectorReg]* %6 to double*
  %153 = load double, double* %152, align 1
  %154 = fcmp uno double %149, %153
  br i1 %154, label %155, label %165

; <label>:155:                                    ; preds = %block_4028a8
  %156 = fadd double %149, %153
  %157 = bitcast double %156 to i64
  %158 = and i64 %157, 9221120237041090560
  %159 = icmp eq i64 %158, 9218868437227405312
  %160 = and i64 %157, 2251799813685247
  %161 = icmp ne i64 %160, 0
  %162 = and i1 %159, %161
  br i1 %162, label %163, label %171

; <label>:163:                                    ; preds = %155
  %164 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %151, %struct.Memory* %2) #12
  %.pre = load i64, i64* %PC, align 8
  %.pre17 = load i8, i8* %77, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:165:                                    ; preds = %block_4028a8
  %166 = fcmp ogt double %149, %153
  br i1 %166, label %171, label %167

; <label>:167:                                    ; preds = %165
  %168 = fcmp olt double %149, %153
  br i1 %168, label %171, label %169

; <label>:169:                                    ; preds = %167
  %170 = fcmp oeq double %149, %153
  br i1 %170, label %171, label %175

; <label>:171:                                    ; preds = %169, %167, %165, %155
  %172 = phi i8 [ 0, %165 ], [ 0, %167 ], [ 1, %169 ], [ 1, %155 ]
  %173 = phi i8 [ 0, %165 ], [ 0, %167 ], [ 0, %169 ], [ 1, %155 ]
  %174 = phi i8 [ 0, %165 ], [ 1, %167 ], [ 0, %169 ], [ 1, %155 ]
  store i8 %172, i8* %77, align 1, !tbaa !2453
  store i8 %173, i8* %73, align 1, !tbaa !2453
  store i8 %174, i8* %67, align 1, !tbaa !2453
  br label %175

; <label>:175:                                    ; preds = %171, %169
  %176 = phi i8 [ %172, %171 ], [ 0, %169 ]
  store i8 0, i8* %81, align 1, !tbaa !2453
  store i8 0, i8* %80, align 1, !tbaa !2453
  store i8 0, i8* %74, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %175, %163
  %177 = phi i8 [ %.pre17, %163 ], [ %176, %175 ]
  %178 = phi i64 [ %.pre, %163 ], [ %151, %175 ]
  %179 = phi %struct.Memory* [ %164, %163 ], [ %2, %175 ]
  %180 = icmp eq i8 %177, 0
  %.v25 = select i1 %180, i64 17, i64 6
  %181 = add i64 %178, %.v25
  store i64 %181, i64* %PC, align 8, !tbaa !2428
  br i1 %180, label %block_4028c5, label %block_4028ba

block_4028cf:                                     ; preds = %block_4028c5
  %182 = add i64 %678, -36
  %183 = add i64 %704, 4
  store i64 %183, i64* %PC, align 8
  %184 = inttoptr i64 %182 to i32*
  %185 = load i32, i32* %184, align 4
  %186 = add i32 %185, -1
  %187 = icmp eq i32 %185, 0
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %67, align 1, !tbaa !2432
  %189 = and i32 %186, 255
  %190 = tail call i32 @llvm.ctpop.i32(i32 %189) #9
  %191 = trunc i32 %190 to i8
  %192 = and i8 %191, 1
  %193 = xor i8 %192, 1
  store i8 %193, i8* %73, align 1, !tbaa !2446
  %194 = xor i32 %186, %185
  %195 = lshr i32 %194, 4
  %196 = trunc i32 %195 to i8
  %197 = and i8 %196, 1
  store i8 %197, i8* %74, align 1, !tbaa !2447
  %198 = icmp eq i32 %186, 0
  %199 = zext i1 %198 to i8
  store i8 %199, i8* %77, align 1, !tbaa !2448
  %200 = lshr i32 %186, 31
  %201 = trunc i32 %200 to i8
  store i8 %201, i8* %80, align 1, !tbaa !2449
  %202 = lshr i32 %185, 31
  %203 = xor i32 %200, %202
  %204 = add nuw nsw i32 %203, %202
  %205 = icmp eq i32 %204, 2
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %81, align 1, !tbaa !2450
  %.v28 = select i1 %198, i64 178, i64 10
  %207 = add i64 %704, %.v28
  store i64 %207, i64* %PC, align 8, !tbaa !2428
  br i1 %198, label %block_402981, label %block_4028d9

block_4029d7.loopexit:                            ; preds = %block_402988
  br label %block_4029d7

block_4029d7.loopexit35:                          ; preds = %block_402920
  br label %block_4029d7

block_4029d7:                                     ; preds = %block_4029d7.loopexit35, %block_4029d7.loopexit, %block_4028ba, %block_402870
  %208 = phi i64 [ %85, %block_402870 ], [ %707, %block_4028ba ], [ %515, %block_4029d7.loopexit ], [ %306, %block_4029d7.loopexit35 ]
  %.sink5 = phi i64 [ 309, %block_402870 ], [ 280, %block_4028ba ], [ 6, %block_4029d7.loopexit ], [ 92, %block_4029d7.loopexit35 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_402870 ], [ %179, %block_4028ba ], [ %179, %block_4029d7.loopexit ], [ %179, %block_4029d7.loopexit35 ]
  %209 = add i64 %.sink5, %208
  store i64 %209, i64* %PC, align 8
  %210 = load i64, i64* %10, align 8, !tbaa !2428
  %211 = add i64 %210, 8
  %212 = inttoptr i64 %210 to i64*
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %RBP, align 8, !tbaa !2428
  store i64 %211, i64* %10, align 8, !tbaa !2428
  %214 = add i64 %209, 1
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %211 to i64*
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %PC, align 8, !tbaa !2428
  %217 = add i64 %210, 16
  store i64 %217, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4028f1:                                     ; preds = %block_4028d9
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  store i8 0, i8* %74, align 1, !tbaa !2447
  %218 = add i64 %118, -4
  %219 = add i64 %134, 5
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to i32*
  %221 = load i32, i32* %220, align 4
  %222 = sub i32 0, %221
  %223 = lshr i32 %222, 31
  %224 = sub i32 1, %221
  %225 = zext i32 %224 to i64
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = icmp eq i32 %222, -1
  %227 = icmp eq i32 %224, 0
  %228 = or i1 %226, %227
  %229 = zext i1 %228 to i8
  store i8 %229, i8* %67, align 1, !tbaa !2432
  %230 = and i32 %224, 255
  %231 = tail call i32 @llvm.ctpop.i32(i32 %230) #9
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  store i8 %234, i8* %73, align 1, !tbaa !2446
  %235 = xor i32 %224, %222
  %236 = lshr i32 %235, 4
  %237 = trunc i32 %236 to i8
  %238 = and i8 %237, 1
  store i8 %238, i8* %74, align 1, !tbaa !2447
  %239 = zext i1 %227 to i8
  store i8 %239, i8* %77, align 1, !tbaa !2448
  %240 = lshr i32 %224, 31
  %241 = trunc i32 %240 to i8
  store i8 %241, i8* %80, align 1, !tbaa !2449
  %242 = xor i32 %240, %223
  %243 = add nuw nsw i32 %242, %240
  %244 = icmp eq i32 %243, 2
  %245 = zext i1 %244 to i8
  store i8 %245, i8* %81, align 1, !tbaa !2450
  %246 = add i64 %134, 12
  store i64 %246, i64* %PC, align 8
  %247 = load i32, i32* %122, align 4
  %248 = sext i32 %224 to i64
  %249 = sext i32 %247 to i64
  %250 = mul nsw i64 %249, %248
  %251 = trunc i64 %250 to i32
  %252 = and i64 %250, 4294967295
  store i64 %252, i64* %RAX, align 8, !tbaa !2428
  %253 = shl i64 %250, 32
  %254 = ashr exact i64 %253, 32
  %255 = icmp ne i64 %254, %250
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %67, align 1, !tbaa !2432
  %257 = and i32 %251, 255
  %258 = tail call i32 @llvm.ctpop.i32(i32 %257) #9
  %259 = trunc i32 %258 to i8
  %260 = and i8 %259, 1
  %261 = xor i8 %260, 1
  store i8 %261, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %262 = lshr i32 %251, 31
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %80, align 1, !tbaa !2449
  store i8 %256, i8* %81, align 1, !tbaa !2450
  %264 = load i64, i64* %RBP, align 8
  %265 = add i64 %264, -44
  %266 = trunc i64 %250 to i32
  %267 = add i64 %134, 15
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %265 to i32*
  store i32 %266, i32* %268, align 4
  %.pre19 = load i64, i64* %RBP, align 8
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_402900

block_402920:                                     ; preds = %block_40292c, %block_402919
  %269 = phi i64 [ %477, %block_40292c ], [ %.pre23, %block_402919 ]
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -40
  %272 = add i64 %269, 3
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i32*
  %274 = load i32, i32* %273, align 4
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = add i64 %270, -4
  %277 = add i64 %269, 6
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i32*
  %279 = load i32, i32* %278, align 4
  %280 = sub i32 %274, %279
  %281 = icmp ult i32 %274, %279
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %67, align 1, !tbaa !2432
  %283 = and i32 %280, 255
  %284 = tail call i32 @llvm.ctpop.i32(i32 %283) #9
  %285 = trunc i32 %284 to i8
  %286 = and i8 %285, 1
  %287 = xor i8 %286, 1
  store i8 %287, i8* %73, align 1, !tbaa !2446
  %288 = xor i32 %279, %274
  %289 = xor i32 %288, %280
  %290 = lshr i32 %289, 4
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  store i8 %292, i8* %74, align 1, !tbaa !2447
  %293 = icmp eq i32 %280, 0
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %77, align 1, !tbaa !2448
  %295 = lshr i32 %280, 31
  %296 = trunc i32 %295 to i8
  store i8 %296, i8* %80, align 1, !tbaa !2449
  %297 = lshr i32 %274, 31
  %298 = lshr i32 %279, 31
  %299 = xor i32 %298, %297
  %300 = xor i32 %295, %297
  %301 = add nuw nsw i32 %300, %299
  %302 = icmp eq i32 %301, 2
  %303 = zext i1 %302 to i8
  store i8 %303, i8* %81, align 1, !tbaa !2450
  %304 = icmp ne i8 %296, 0
  %305 = xor i1 %304, %302
  %.v27 = select i1 %305, i64 12, i64 92
  %306 = add i64 %269, %.v27
  store i64 %306, i64* %PC, align 8, !tbaa !2428
  br i1 %305, label %block_40292c, label %block_4029d7.loopexit35

block_40292c:                                     ; preds = %block_402920
  %307 = add i64 %270, -32
  %308 = add i64 %306, 4
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %307 to i64*
  %310 = load i64, i64* %309, align 8
  store i64 %310, i64* %RAX, align 8, !tbaa !2428
  %311 = add i64 %270, -48
  %312 = add i64 %306, 8
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = sext i32 %314 to i64
  store i64 %315, i64* %RCX, align 8, !tbaa !2428
  %316 = shl nsw i64 %315, 2
  %317 = add i64 %316, %310
  %318 = add i64 %306, 13
  store i64 %318, i64* %PC, align 8
  %319 = inttoptr i64 %317 to i32*
  %320 = load i32, i32* %319, align 4
  store i32 %320, i32* %137, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  store float 0.000000e+00, float* %94, align 1, !tbaa !2451
  %321 = add i64 %270, -8
  %322 = add i64 %306, 18
  store i64 %322, i64* %PC, align 8
  %323 = inttoptr i64 %321 to i32*
  %324 = load i32, i32* %323, align 4
  store i32 %324, i32* %96, align 1, !tbaa !2451
  store float 0.000000e+00, float* %98, align 1, !tbaa !2451
  store float 0.000000e+00, float* %100, align 1, !tbaa !2451
  store float 0.000000e+00, float* %102, align 1, !tbaa !2451
  %325 = add i64 %270, -16
  %326 = add i64 %306, 22
  store i64 %326, i64* %PC, align 8
  %327 = inttoptr i64 %325 to i64*
  %328 = load i64, i64* %327, align 8
  store i64 %328, i64* %RAX, align 8, !tbaa !2428
  %329 = add i64 %270, -44
  %330 = add i64 %306, 26
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %329 to i32*
  %332 = load i32, i32* %331, align 4
  %333 = sext i32 %332 to i64
  store i64 %333, i64* %RCX, align 8, !tbaa !2428
  %334 = shl nsw i64 %333, 2
  %335 = add i64 %334, %328
  %336 = add i64 %306, 31
  store i64 %336, i64* %PC, align 8
  %337 = load <2 x float>, <2 x float>* %103, align 1
  %338 = load <2 x i32>, <2 x i32>* %104, align 1
  %339 = inttoptr i64 %335 to float*
  %340 = load float, float* %339, align 4
  %341 = extractelement <2 x float> %337, i32 0
  %342 = fmul float %341, %340
  store float %342, float* %95, align 1, !tbaa !2451
  %343 = bitcast <2 x float> %337 to <2 x i32>
  %344 = extractelement <2 x i32> %343, i32 1
  store i32 %344, i32* %105, align 1, !tbaa !2451
  %345 = extractelement <2 x i32> %338, i32 0
  store i32 %345, i32* %106, align 1, !tbaa !2451
  %346 = extractelement <2 x i32> %338, i32 1
  store i32 %346, i32* %107, align 1, !tbaa !2451
  %347 = load <2 x float>, <2 x float>* %23, align 1
  %348 = load <2 x i32>, <2 x i32>* %108, align 1
  %349 = load <2 x float>, <2 x float>* %103, align 1
  %350 = extractelement <2 x float> %347, i32 0
  %351 = extractelement <2 x float> %349, i32 0
  %352 = fadd float %350, %351
  store float %352, float* %91, align 1, !tbaa !2451
  %353 = bitcast <2 x float> %347 to <2 x i32>
  %354 = extractelement <2 x i32> %353, i32 1
  store i32 %354, i32* %139, align 1, !tbaa !2451
  %355 = extractelement <2 x i32> %348, i32 0
  store i32 %355, i32* %140, align 1, !tbaa !2451
  %356 = extractelement <2 x i32> %348, i32 1
  store i32 %356, i32* %142, align 1, !tbaa !2451
  %357 = add i64 %306, 39
  store i64 %357, i64* %PC, align 8
  %358 = load i64, i64* %309, align 8
  store i64 %358, i64* %RAX, align 8, !tbaa !2428
  %359 = add i64 %306, 43
  store i64 %359, i64* %PC, align 8
  %360 = load i32, i32* %313, align 4
  %361 = sext i32 %360 to i64
  store i64 %361, i64* %RCX, align 8, !tbaa !2428
  %362 = shl nsw i64 %361, 2
  %363 = add i64 %362, %358
  %364 = add i64 %306, 48
  store i64 %364, i64* %PC, align 8
  %365 = load <2 x float>, <2 x float>* %23, align 1
  %366 = extractelement <2 x float> %365, i32 0
  %367 = inttoptr i64 %363 to float*
  store float %366, float* %367, align 4
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -44
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDX, align 8, !tbaa !2428
  %375 = add i64 %368, -20
  %376 = add i64 %370, 6
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %375 to i32*
  %378 = load i32, i32* %377, align 4
  %379 = add i32 %378, %373
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %RDX, align 8, !tbaa !2428
  %381 = icmp ult i32 %379, %373
  %382 = icmp ult i32 %379, %378
  %383 = or i1 %381, %382
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %67, align 1, !tbaa !2432
  %385 = and i32 %379, 255
  %386 = tail call i32 @llvm.ctpop.i32(i32 %385) #9
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  store i8 %389, i8* %73, align 1, !tbaa !2446
  %390 = xor i32 %378, %373
  %391 = xor i32 %390, %379
  %392 = lshr i32 %391, 4
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* %74, align 1, !tbaa !2447
  %395 = icmp eq i32 %379, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %77, align 1, !tbaa !2448
  %397 = lshr i32 %379, 31
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %80, align 1, !tbaa !2449
  %399 = lshr i32 %373, 31
  %400 = lshr i32 %378, 31
  %401 = xor i32 %397, %399
  %402 = xor i32 %397, %400
  %403 = add nuw nsw i32 %401, %402
  %404 = icmp eq i32 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %81, align 1, !tbaa !2450
  %406 = add i64 %370, 9
  store i64 %406, i64* %PC, align 8
  store i32 %379, i32* %372, align 4
  %407 = load i64, i64* %RBP, align 8
  %408 = add i64 %407, -48
  %409 = load i64, i64* %PC, align 8
  %410 = add i64 %409, 3
  store i64 %410, i64* %PC, align 8
  %411 = inttoptr i64 %408 to i32*
  %412 = load i32, i32* %411, align 4
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %RDX, align 8, !tbaa !2428
  %414 = add i64 %407, -36
  %415 = add i64 %409, 6
  store i64 %415, i64* %PC, align 8
  %416 = inttoptr i64 %414 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = add i32 %417, %412
  %419 = zext i32 %418 to i64
  store i64 %419, i64* %RDX, align 8, !tbaa !2428
  %420 = icmp ult i32 %418, %412
  %421 = icmp ult i32 %418, %417
  %422 = or i1 %420, %421
  %423 = zext i1 %422 to i8
  store i8 %423, i8* %67, align 1, !tbaa !2432
  %424 = and i32 %418, 255
  %425 = tail call i32 @llvm.ctpop.i32(i32 %424) #9
  %426 = trunc i32 %425 to i8
  %427 = and i8 %426, 1
  %428 = xor i8 %427, 1
  store i8 %428, i8* %73, align 1, !tbaa !2446
  %429 = xor i32 %417, %412
  %430 = xor i32 %429, %418
  %431 = lshr i32 %430, 4
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  store i8 %433, i8* %74, align 1, !tbaa !2447
  %434 = icmp eq i32 %418, 0
  %435 = zext i1 %434 to i8
  store i8 %435, i8* %77, align 1, !tbaa !2448
  %436 = lshr i32 %418, 31
  %437 = trunc i32 %436 to i8
  store i8 %437, i8* %80, align 1, !tbaa !2449
  %438 = lshr i32 %412, 31
  %439 = lshr i32 %417, 31
  %440 = xor i32 %436, %438
  %441 = xor i32 %436, %439
  %442 = add nuw nsw i32 %440, %441
  %443 = icmp eq i32 %442, 2
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %81, align 1, !tbaa !2450
  %445 = add i64 %409, 9
  store i64 %445, i64* %PC, align 8
  store i32 %418, i32* %411, align 4
  %446 = load i64, i64* %RBP, align 8
  %447 = add i64 %446, -40
  %448 = load i64, i64* %PC, align 8
  %449 = add i64 %448, 3
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %447 to i32*
  %451 = load i32, i32* %450, align 4
  %452 = add i32 %451, 1
  %453 = zext i32 %452 to i64
  store i64 %453, i64* %RAX, align 8, !tbaa !2428
  %454 = icmp eq i32 %451, -1
  %455 = icmp eq i32 %452, 0
  %456 = or i1 %454, %455
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %67, align 1, !tbaa !2432
  %458 = and i32 %452, 255
  %459 = tail call i32 @llvm.ctpop.i32(i32 %458) #9
  %460 = trunc i32 %459 to i8
  %461 = and i8 %460, 1
  %462 = xor i8 %461, 1
  store i8 %462, i8* %73, align 1, !tbaa !2446
  %463 = xor i32 %452, %451
  %464 = lshr i32 %463, 4
  %465 = trunc i32 %464 to i8
  %466 = and i8 %465, 1
  store i8 %466, i8* %74, align 1, !tbaa !2447
  %467 = zext i1 %455 to i8
  store i8 %467, i8* %77, align 1, !tbaa !2448
  %468 = lshr i32 %452, 31
  %469 = trunc i32 %468 to i8
  store i8 %469, i8* %80, align 1, !tbaa !2449
  %470 = lshr i32 %451, 31
  %471 = xor i32 %468, %470
  %472 = add nuw nsw i32 %471, %468
  %473 = icmp eq i32 %472, 2
  %474 = zext i1 %473 to i8
  store i8 %474, i8* %81, align 1, !tbaa !2450
  %475 = add i64 %448, 9
  store i64 %475, i64* %PC, align 8
  store i32 %452, i32* %450, align 4
  %476 = load i64, i64* %PC, align 8
  %477 = add i64 %476, -87
  store i64 %477, i64* %PC, align 8, !tbaa !2428
  br label %block_402920

block_402988:                                     ; preds = %block_402994, %block_402981
  %478 = phi i64 [ %625, %block_402994 ], [ %.pre18, %block_402981 ]
  %479 = load i64, i64* %RBP, align 8
  %480 = add i64 %479, -40
  %481 = add i64 %478, 3
  store i64 %481, i64* %PC, align 8
  %482 = inttoptr i64 %480 to i32*
  %483 = load i32, i32* %482, align 4
  %484 = zext i32 %483 to i64
  store i64 %484, i64* %RAX, align 8, !tbaa !2428
  %485 = add i64 %479, -4
  %486 = add i64 %478, 6
  store i64 %486, i64* %PC, align 8
  %487 = inttoptr i64 %485 to i32*
  %488 = load i32, i32* %487, align 4
  %489 = sub i32 %483, %488
  %490 = icmp ult i32 %483, %488
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %67, align 1, !tbaa !2432
  %492 = and i32 %489, 255
  %493 = tail call i32 @llvm.ctpop.i32(i32 %492) #9
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  store i8 %496, i8* %73, align 1, !tbaa !2446
  %497 = xor i32 %488, %483
  %498 = xor i32 %497, %489
  %499 = lshr i32 %498, 4
  %500 = trunc i32 %499 to i8
  %501 = and i8 %500, 1
  store i8 %501, i8* %74, align 1, !tbaa !2447
  %502 = icmp eq i32 %489, 0
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %77, align 1, !tbaa !2448
  %504 = lshr i32 %489, 31
  %505 = trunc i32 %504 to i8
  store i8 %505, i8* %80, align 1, !tbaa !2449
  %506 = lshr i32 %483, 31
  %507 = lshr i32 %488, 31
  %508 = xor i32 %507, %506
  %509 = xor i32 %504, %506
  %510 = add nuw nsw i32 %509, %508
  %511 = icmp eq i32 %510, 2
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %81, align 1, !tbaa !2450
  %513 = icmp ne i8 %505, 0
  %514 = xor i1 %513, %511
  %.v29 = select i1 %514, i64 12, i64 74
  %515 = add i64 %478, %.v29
  store i64 %515, i64* %PC, align 8, !tbaa !2428
  br i1 %514, label %block_402994, label %block_4029d7.loopexit

block_402981:                                     ; preds = %block_4028cf
  %516 = add i64 %678, -40
  %517 = add i64 %207, 7
  store i64 %517, i64* %PC, align 8
  %518 = inttoptr i64 %516 to i32*
  store i32 0, i32* %518, align 4
  %519 = bitcast [32 x %union.VectorReg]* %6 to float*
  %520 = bitcast i8* %138 to float*
  %521 = bitcast i64* %136 to float*
  %522 = bitcast i8* %141 to float*
  %523 = bitcast %union.VectorReg* %7 to float*
  %524 = bitcast %union.VectorReg* %7 to i32*
  %525 = getelementptr inbounds i8, i8* %144, i64 4
  %526 = bitcast i8* %525 to float*
  %527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %528 = bitcast i64* %527 to float*
  %529 = getelementptr inbounds i8, i8* %144, i64 12
  %530 = bitcast i8* %529 to float*
  %531 = bitcast %union.VectorReg* %7 to <2 x float>*
  %532 = bitcast i64* %527 to <2 x i32>*
  %533 = bitcast i8* %525 to i32*
  %534 = bitcast i64* %527 to i32*
  %535 = bitcast i8* %529 to i32*
  %536 = bitcast i64* %136 to <2 x i32>*
  %.pre18 = load i64, i64* %PC, align 8
  br label %block_402988

block_402994:                                     ; preds = %block_402988
  %537 = add i64 %479, -32
  %538 = add i64 %515, 4
  store i64 %538, i64* %PC, align 8
  %539 = inttoptr i64 %537 to i64*
  %540 = load i64, i64* %539, align 8
  store i64 %540, i64* %RAX, align 8, !tbaa !2428
  %541 = add i64 %515, 8
  store i64 %541, i64* %PC, align 8
  %542 = load i32, i32* %482, align 4
  %543 = sext i32 %542 to i64
  store i64 %543, i64* %RCX, align 8, !tbaa !2428
  %544 = shl nsw i64 %543, 2
  %545 = add i64 %544, %540
  %546 = add i64 %515, 13
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %545 to i32*
  %548 = load i32, i32* %547, align 4
  store i32 %548, i32* %137, align 1, !tbaa !2451
  store float 0.000000e+00, float* %520, align 1, !tbaa !2451
  store float 0.000000e+00, float* %521, align 1, !tbaa !2451
  store float 0.000000e+00, float* %522, align 1, !tbaa !2451
  %549 = add i64 %479, -8
  %550 = add i64 %515, 18
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to i32*
  %552 = load i32, i32* %551, align 4
  store i32 %552, i32* %524, align 1, !tbaa !2451
  store float 0.000000e+00, float* %526, align 1, !tbaa !2451
  store float 0.000000e+00, float* %528, align 1, !tbaa !2451
  store float 0.000000e+00, float* %530, align 1, !tbaa !2451
  %553 = add i64 %479, -16
  %554 = add i64 %515, 22
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %553 to i64*
  %556 = load i64, i64* %555, align 8
  store i64 %556, i64* %RAX, align 8, !tbaa !2428
  %557 = add i64 %515, 26
  store i64 %557, i64* %PC, align 8
  %558 = load i32, i32* %482, align 4
  %559 = sext i32 %558 to i64
  store i64 %559, i64* %RCX, align 8, !tbaa !2428
  %560 = shl nsw i64 %559, 2
  %561 = add i64 %560, %556
  %562 = add i64 %515, 31
  store i64 %562, i64* %PC, align 8
  %563 = load <2 x float>, <2 x float>* %531, align 1
  %564 = load <2 x i32>, <2 x i32>* %532, align 1
  %565 = inttoptr i64 %561 to float*
  %566 = load float, float* %565, align 4
  %567 = extractelement <2 x float> %563, i32 0
  %568 = fmul float %567, %566
  store float %568, float* %523, align 1, !tbaa !2451
  %569 = bitcast <2 x float> %563 to <2 x i32>
  %570 = extractelement <2 x i32> %569, i32 1
  store i32 %570, i32* %533, align 1, !tbaa !2451
  %571 = extractelement <2 x i32> %564, i32 0
  store i32 %571, i32* %534, align 1, !tbaa !2451
  %572 = extractelement <2 x i32> %564, i32 1
  store i32 %572, i32* %535, align 1, !tbaa !2451
  %573 = load <2 x float>, <2 x float>* %23, align 1
  %574 = load <2 x i32>, <2 x i32>* %536, align 1
  %575 = load <2 x float>, <2 x float>* %531, align 1
  %576 = extractelement <2 x float> %573, i32 0
  %577 = extractelement <2 x float> %575, i32 0
  %578 = fadd float %576, %577
  store float %578, float* %519, align 1, !tbaa !2451
  %579 = bitcast <2 x float> %573 to <2 x i32>
  %580 = extractelement <2 x i32> %579, i32 1
  store i32 %580, i32* %139, align 1, !tbaa !2451
  %581 = extractelement <2 x i32> %574, i32 0
  store i32 %581, i32* %140, align 1, !tbaa !2451
  %582 = extractelement <2 x i32> %574, i32 1
  store i32 %582, i32* %142, align 1, !tbaa !2451
  %583 = add i64 %515, 39
  store i64 %583, i64* %PC, align 8
  %584 = load i64, i64* %539, align 8
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = add i64 %515, 43
  store i64 %585, i64* %PC, align 8
  %586 = load i32, i32* %482, align 4
  %587 = sext i32 %586 to i64
  store i64 %587, i64* %RCX, align 8, !tbaa !2428
  %588 = shl nsw i64 %587, 2
  %589 = add i64 %588, %584
  %590 = add i64 %515, 48
  store i64 %590, i64* %PC, align 8
  %591 = load <2 x float>, <2 x float>* %23, align 1
  %592 = extractelement <2 x float> %591, i32 0
  %593 = inttoptr i64 %589 to float*
  store float %592, float* %593, align 4
  %594 = load i64, i64* %RBP, align 8
  %595 = add i64 %594, -40
  %596 = load i64, i64* %PC, align 8
  %597 = add i64 %596, 3
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %595 to i32*
  %599 = load i32, i32* %598, align 4
  %600 = add i32 %599, 1
  %601 = zext i32 %600 to i64
  store i64 %601, i64* %RAX, align 8, !tbaa !2428
  %602 = icmp eq i32 %599, -1
  %603 = icmp eq i32 %600, 0
  %604 = or i1 %602, %603
  %605 = zext i1 %604 to i8
  store i8 %605, i8* %67, align 1, !tbaa !2432
  %606 = and i32 %600, 255
  %607 = tail call i32 @llvm.ctpop.i32(i32 %606) #9
  %608 = trunc i32 %607 to i8
  %609 = and i8 %608, 1
  %610 = xor i8 %609, 1
  store i8 %610, i8* %73, align 1, !tbaa !2446
  %611 = xor i32 %600, %599
  %612 = lshr i32 %611, 4
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  store i8 %614, i8* %74, align 1, !tbaa !2447
  %615 = zext i1 %603 to i8
  store i8 %615, i8* %77, align 1, !tbaa !2448
  %616 = lshr i32 %600, 31
  %617 = trunc i32 %616 to i8
  store i8 %617, i8* %80, align 1, !tbaa !2449
  %618 = lshr i32 %599, 31
  %619 = xor i32 %616, %618
  %620 = add nuw nsw i32 %619, %616
  %621 = icmp eq i32 %620, 2
  %622 = zext i1 %621 to i8
  store i8 %622, i8* %81, align 1, !tbaa !2450
  %623 = add i64 %596, 9
  store i64 %623, i64* %PC, align 8
  store i32 %600, i32* %598, align 4
  %624 = load i64, i64* %PC, align 8
  %625 = add i64 %624, -69
  store i64 %625, i64* %PC, align 8, !tbaa !2428
  br label %block_402988

block_40290a:                                     ; preds = %block_402900
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %67, align 1, !tbaa !2432
  store i8 1, i8* %73, align 1, !tbaa !2446
  store i8 1, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  store i8 0, i8* %74, align 1, !tbaa !2447
  %626 = add i64 %710, -4
  %627 = add i64 %725, 5
  store i64 %627, i64* %PC, align 8
  %628 = inttoptr i64 %626 to i32*
  %629 = load i32, i32* %628, align 4
  %630 = sub i32 0, %629
  %631 = lshr i32 %630, 31
  %632 = sub i32 1, %629
  %633 = zext i32 %632 to i64
  store i64 %633, i64* %RAX, align 8, !tbaa !2428
  %634 = icmp eq i32 %630, -1
  %635 = icmp eq i32 %632, 0
  %636 = or i1 %634, %635
  %637 = zext i1 %636 to i8
  store i8 %637, i8* %67, align 1, !tbaa !2432
  %638 = and i32 %632, 255
  %639 = tail call i32 @llvm.ctpop.i32(i32 %638) #9
  %640 = trunc i32 %639 to i8
  %641 = and i8 %640, 1
  %642 = xor i8 %641, 1
  store i8 %642, i8* %73, align 1, !tbaa !2446
  %643 = xor i32 %632, %630
  %644 = lshr i32 %643, 4
  %645 = trunc i32 %644 to i8
  %646 = and i8 %645, 1
  store i8 %646, i8* %74, align 1, !tbaa !2447
  %647 = zext i1 %635 to i8
  store i8 %647, i8* %77, align 1, !tbaa !2448
  %648 = lshr i32 %632, 31
  %649 = trunc i32 %648 to i8
  store i8 %649, i8* %80, align 1, !tbaa !2449
  %650 = xor i32 %648, %631
  %651 = add nuw nsw i32 %650, %648
  %652 = icmp eq i32 %651, 2
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %81, align 1, !tbaa !2450
  %654 = add i64 %725, 12
  store i64 %654, i64* %PC, align 8
  %655 = load i32, i32* %713, align 4
  %656 = sext i32 %632 to i64
  %657 = sext i32 %655 to i64
  %658 = mul nsw i64 %657, %656
  %659 = trunc i64 %658 to i32
  %660 = and i64 %658, 4294967295
  store i64 %660, i64* %RAX, align 8, !tbaa !2428
  %661 = shl i64 %658, 32
  %662 = ashr exact i64 %661, 32
  %663 = icmp ne i64 %662, %658
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %67, align 1, !tbaa !2432
  %665 = and i32 %659, 255
  %666 = tail call i32 @llvm.ctpop.i32(i32 %665) #9
  %667 = trunc i32 %666 to i8
  %668 = and i8 %667, 1
  %669 = xor i8 %668, 1
  store i8 %669, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %670 = lshr i32 %659, 31
  %671 = trunc i32 %670 to i8
  store i8 %671, i8* %80, align 1, !tbaa !2449
  store i8 %664, i8* %81, align 1, !tbaa !2450
  %672 = load i64, i64* %RBP, align 8
  %673 = add i64 %672, -48
  %674 = trunc i64 %658 to i32
  %675 = add i64 %725, 15
  store i64 %675, i64* %PC, align 8
  %676 = inttoptr i64 %673 to i32*
  store i32 %674, i32* %676, align 4
  %.pre21 = load i64, i64* %RBP, align 8
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_402919

block_4028c5:                                     ; preds = %block_4028ba, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %677 = phi i64 [ %707, %block_4028ba ], [ %181, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %678 = load i64, i64* %RBP, align 8
  %679 = add i64 %678, -20
  %680 = add i64 %677, 4
  store i64 %680, i64* %PC, align 8
  %681 = inttoptr i64 %679 to i32*
  %682 = load i32, i32* %681, align 4
  %683 = add i32 %682, -1
  %684 = icmp eq i32 %682, 0
  %685 = zext i1 %684 to i8
  store i8 %685, i8* %67, align 1, !tbaa !2432
  %686 = and i32 %683, 255
  %687 = tail call i32 @llvm.ctpop.i32(i32 %686) #9
  %688 = trunc i32 %687 to i8
  %689 = and i8 %688, 1
  %690 = xor i8 %689, 1
  store i8 %690, i8* %73, align 1, !tbaa !2446
  %691 = xor i32 %683, %682
  %692 = lshr i32 %691, 4
  %693 = trunc i32 %692 to i8
  %694 = and i8 %693, 1
  store i8 %694, i8* %74, align 1, !tbaa !2447
  %695 = icmp eq i32 %683, 0
  %696 = zext i1 %695 to i8
  store i8 %696, i8* %77, align 1, !tbaa !2448
  %697 = lshr i32 %683, 31
  %698 = trunc i32 %697 to i8
  store i8 %698, i8* %80, align 1, !tbaa !2449
  %699 = lshr i32 %682, 31
  %700 = xor i32 %697, %699
  %701 = add nuw nsw i32 %700, %699
  %702 = icmp eq i32 %701, 2
  %703 = zext i1 %702 to i8
  store i8 %703, i8* %81, align 1, !tbaa !2450
  %.v26 = select i1 %695, i64 10, i64 20
  %704 = add i64 %677, %.v26
  store i64 %704, i64* %PC, align 8, !tbaa !2428
  br i1 %695, label %block_4028cf, label %block_4028d9

block_4028ba:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %705 = load i8, i8* %73, align 1, !tbaa !2446
  %706 = icmp ne i8 %705, 0
  %.v32 = select i1 %706, i64 11, i64 6
  %707 = add i64 %181, %.v32
  store i64 %707, i64* %PC, align 8, !tbaa !2428
  %708 = icmp eq i8 %705, 1
  br i1 %708, label %block_4028c5, label %block_4029d7

block_402900:                                     ; preds = %block_4028d9, %block_4028f1
  %709 = phi i64 [ %134, %block_4028d9 ], [ %.pre20, %block_4028f1 ]
  %710 = phi i64 [ %118, %block_4028d9 ], [ %.pre19, %block_4028f1 ]
  %711 = add i64 %710, -36
  %712 = add i64 %709, 4
  store i64 %712, i64* %PC, align 8
  %713 = inttoptr i64 %711 to i32*
  %714 = load i32, i32* %713, align 4
  store i8 0, i8* %67, align 1, !tbaa !2432
  %715 = and i32 %714, 255
  %716 = tail call i32 @llvm.ctpop.i32(i32 %715) #9
  %717 = trunc i32 %716 to i8
  %718 = and i8 %717, 1
  %719 = xor i8 %718, 1
  store i8 %719, i8* %73, align 1, !tbaa !2446
  store i8 0, i8* %74, align 1, !tbaa !2447
  %720 = icmp eq i32 %714, 0
  %721 = zext i1 %720 to i8
  store i8 %721, i8* %77, align 1, !tbaa !2448
  %722 = lshr i32 %714, 31
  %723 = trunc i32 %722 to i8
  store i8 %723, i8* %80, align 1, !tbaa !2449
  store i8 0, i8* %81, align 1, !tbaa !2450
  %724 = icmp ne i8 %723, 0
  %.v14 = select i1 %724, i64 6, i64 21
  %725 = add i64 %712, %.v14
  store i64 %725, i64* %PC, align 8, !tbaa !2428
  br i1 %724, label %block_40290a, label %block_402919
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400498__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400498:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_603ff0__got_type* @seg_603ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2432
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #9
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2446
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2447
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_4004aa, label %block_4004a8

block_4004a8:                                     ; preds = %block_400498
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_4004aa

block_4004aa:                                     ; preds = %block_4004a8, %block_400498
  %27 = phi i64 [ %22, %block_400498 ], [ %.pre1, %block_4004a8 ]
  %28 = phi i64 [ %4, %block_400498 ], [ %.pre, %block_4004a8 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400498 ], [ %26, %block_4004a8 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2432
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #9
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2446
  %38 = xor i64 %29, %28
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2447
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2448
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2449
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2450
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4005d0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4005d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400560_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402db0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402db0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_603df0__init_array_type* @seg_603df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2453
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #9
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2453
  store i8 0, i8* %45, align 1, !tbaa !2453
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2453
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2453
  store i8 0, i8* %48, align 1, !tbaa !2453
  %63 = add i64 %38, -10547
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_400498__init_proc(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2432
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #9
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2446
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2448
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_402e06, label %block_402de6

block_402e06.loopexit:                            ; preds = %block_402df0
  br label %block_402e06

block_402e06:                                     ; preds = %block_402e06.loopexit, %block_402db0
  %81 = phi i64 [ %80, %block_402db0 ], [ %179, %block_402e06.loopexit ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_402db0 ], [ %149, %block_402e06.loopexit ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2432
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #9
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2446
  %92 = xor i64 %83, %82
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2447
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2450
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402de6:                                     ; preds = %block_402db0
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 1, i8* %44, align 1, !tbaa !2446
  store i8 1, i8* %46, align 1, !tbaa !2448
  store i8 0, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2447
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_402df0

block_402df0:                                     ; preds = %block_402df0, %block_402de6
  %134 = phi i64 [ 0, %block_402de6 ], [ %152, %block_402df0 ]
  %135 = phi i64 [ %133, %block_402de6 ], [ %179, %block_402df0 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_402de6 ], [ %149, %block_402df0 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2432
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #9
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2446
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2447
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2450
  %.v2 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v2
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_402e06.loopexit, label %block_402df0
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401920_dgefa(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401920:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %RSP, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %9, i64* %13, align 8
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = add i64 %11, -72
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 64
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #9
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 %12, %15
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !2447
  %31 = icmp eq i64 %15, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !2448
  %34 = lshr i64 %15, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !2449
  %37 = lshr i64 %12, 63
  %38 = xor i64 %34, %37
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !2450
  %43 = add i64 %11, -16
  %44 = load i64, i64* %RDI, align 8
  %45 = add i64 %14, 11
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i64*
  store i64 %44, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -12
  %49 = load i32, i32* %ESI, align 4
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %52, align 4
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -16
  %55 = load i32, i32* %EDX, align 4
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 3
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i32*
  store i32 %55, i32* %58, align 4
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -24
  %61 = load i64, i64* %RCX, align 8
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %64, align 8
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -32
  %67 = load i64, i64* %R8, align 8
  %68 = load i64, i64* %PC, align 8
  %69 = add i64 %68, 4
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %66 to i64*
  store i64 %67, i64* %70, align 8
  %71 = load i64, i64* %RBP, align 8
  %72 = add i64 %71, -32
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC, align 8
  %75 = inttoptr i64 %72 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %RCX, align 8, !tbaa !2428
  %77 = add i64 %73, 10
  store i64 %77, i64* %PC, align 8
  %78 = inttoptr i64 %76 to i32*
  store i32 0, i32* %78, align 4
  %79 = load i64, i64* %RBP, align 8
  %80 = add i64 %79, -16
  %81 = load i64, i64* %PC, align 8
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %80 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = add i32 %84, -1
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = icmp eq i32 %84, 0
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %18, align 1, !tbaa !2432
  %89 = and i32 %85, 255
  %90 = tail call i32 @llvm.ctpop.i32(i32 %89) #9
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  store i8 %93, i8* %25, align 1, !tbaa !2446
  %94 = xor i32 %85, %84
  %95 = lshr i32 %94, 4
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  store i8 %97, i8* %30, align 1, !tbaa !2447
  %98 = icmp eq i32 %85, 0
  %99 = zext i1 %98 to i8
  store i8 %99, i8* %33, align 1, !tbaa !2448
  %100 = lshr i32 %85, 31
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %36, align 1, !tbaa !2449
  %102 = lshr i32 %84, 31
  %103 = xor i32 %100, %102
  %104 = add nuw nsw i32 %103, %102
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %42, align 1, !tbaa !2450
  %107 = add i64 %79, -56
  %108 = add i64 %81, 9
  store i64 %108, i64* %PC, align 8
  %109 = inttoptr i64 %107 to i32*
  store i32 %85, i32* %109, align 4
  %110 = load i64, i64* %RBP, align 8
  %111 = add i64 %110, -56
  %112 = load i64, i64* %PC, align 8
  %113 = add i64 %112, 4
  store i64 %113, i64* %PC, align 8
  %114 = inttoptr i64 %111 to i32*
  %115 = load i32, i32* %114, align 4
  store i8 0, i8* %18, align 1, !tbaa !2432
  %116 = and i32 %115, 255
  %117 = tail call i32 @llvm.ctpop.i32(i32 %116) #9
  %118 = trunc i32 %117 to i8
  %119 = and i8 %118, 1
  %120 = xor i8 %119, 1
  store i8 %120, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  %121 = icmp eq i32 %115, 0
  %122 = zext i1 %121 to i8
  store i8 %122, i8* %33, align 1, !tbaa !2448
  %123 = lshr i32 %115, 31
  %124 = trunc i32 %123 to i8
  store i8 %124, i8* %36, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  %125 = icmp ne i8 %124, 0
  %.v = select i1 %125, i64 631, i64 6
  %126 = add i64 %113, %.v
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br i1 %125, label %block_401920.block_401bc8_crit_edge, label %block_401957

block_401920.block_401bc8_crit_edge:              ; preds = %block_401920
  %.pre25 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %.pre26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre28 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %.pre30 = getelementptr inbounds i8, i8* %.pre25, i64 4
  %.pre32 = bitcast i8* %.pre30 to i32*
  %.pre34 = bitcast i64* %.pre26 to i32*
  %.pre36 = getelementptr inbounds i8, i8* %.pre25, i64 12
  %.pre38 = bitcast i8* %.pre36 to i32*
  %.pre40 = bitcast %union.VectorReg* %8 to double*
  %.pre42 = bitcast [32 x %union.VectorReg]* %7 to double*
  br label %block_401bc8

block_401c0b:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %127 = load i8, i8* %25, align 1, !tbaa !2446
  %128 = icmp ne i8 %127, 0
  %.v53 = select i1 %128, i64 18, i64 6
  %129 = add i64 %1083, %.v53
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  %130 = icmp eq i8 %127, 1
  br i1 %130, label %block_401c1d, label %block_401c11

block_401aee:                                     ; preds = %block_401ac7
  %131 = add i64 %1175, -8
  %132 = add i64 %1210, 4
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %RAX, align 8, !tbaa !2428
  %135 = add i64 %1175, -12
  %136 = add i64 %1210, 7
  store i64 %136, i64* %PC, align 8
  %137 = inttoptr i64 %135 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RCX, align 8, !tbaa !2428
  %140 = add i64 %1175, -40
  %141 = add i64 %1210, 11
  store i64 %141, i64* %PC, align 8
  %142 = inttoptr i64 %140 to i32*
  %143 = load i32, i32* %142, align 4
  %144 = sext i32 %138 to i64
  %145 = sext i32 %143 to i64
  %146 = mul nsw i64 %145, %144
  %147 = trunc i64 %146 to i32
  %148 = and i64 %146, 4294967295
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %149 = shl i64 %146, 32
  %150 = ashr exact i64 %149, 32
  %151 = icmp ne i64 %150, %146
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %18, align 1, !tbaa !2432
  %153 = and i32 %147, 255
  %154 = tail call i32 @llvm.ctpop.i32(i32 %153) #9
  %155 = trunc i32 %154 to i8
  %156 = and i8 %155, 1
  %157 = xor i8 %156, 1
  store i8 %157, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %158 = lshr i32 %147, 31
  %159 = trunc i32 %158 to i8
  store i8 %159, i8* %36, align 1, !tbaa !2449
  store i8 %152, i8* %42, align 1, !tbaa !2450
  %160 = add i64 %1210, 14
  store i64 %160, i64* %PC, align 8
  %161 = trunc i64 %146 to i32
  %162 = load i32, i32* %1184, align 4
  %163 = add i32 %162, %161
  %164 = zext i32 %163 to i64
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = icmp ult i32 %163, %161
  %166 = icmp ult i32 %163, %162
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %18, align 1, !tbaa !2432
  %169 = and i32 %163, 255
  %170 = tail call i32 @llvm.ctpop.i32(i32 %169) #9
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  store i8 %173, i8* %25, align 1, !tbaa !2446
  %174 = xor i32 %162, %161
  %175 = xor i32 %174, %163
  %176 = lshr i32 %175, 4
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  store i8 %178, i8* %30, align 1, !tbaa !2447
  %179 = icmp eq i32 %163, 0
  %180 = zext i1 %179 to i8
  store i8 %180, i8* %33, align 1, !tbaa !2448
  %181 = lshr i32 %163, 31
  %182 = trunc i32 %181 to i8
  store i8 %182, i8* %36, align 1, !tbaa !2449
  %183 = lshr i32 %161, 31
  %184 = lshr i32 %162, 31
  %185 = xor i32 %181, %183
  %186 = xor i32 %181, %184
  %187 = add nuw nsw i32 %185, %186
  %188 = icmp eq i32 %187, 2
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %42, align 1, !tbaa !2450
  %190 = sext i32 %163 to i64
  store i64 %190, i64* %RDX, align 8, !tbaa !2428
  %191 = shl nsw i64 %190, 2
  %192 = add i64 %134, %191
  %193 = add i64 %1210, 22
  store i64 %193, i64* %PC, align 8
  %194 = inttoptr i64 %192 to i32*
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* %1089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1101, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1102, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1103, align 1, !tbaa !2451
  %196 = add i64 %1210, 26
  store i64 %196, i64* %PC, align 8
  %197 = load i64, i64* %133, align 8
  store i64 %197, i64* %RAX, align 8, !tbaa !2428
  %198 = add i64 %1210, 29
  store i64 %198, i64* %PC, align 8
  %199 = load i32, i32* %137, align 4
  %200 = zext i32 %199 to i64
  store i64 %200, i64* %RCX, align 8, !tbaa !2428
  %201 = load i64, i64* %RBP, align 8
  %202 = add i64 %201, -40
  %203 = add i64 %1210, 33
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i32*
  %205 = load i32, i32* %204, align 4
  %206 = sext i32 %199 to i64
  %207 = sext i32 %205 to i64
  %208 = mul nsw i64 %207, %206
  %209 = trunc i64 %208 to i32
  %210 = and i64 %208, 4294967295
  store i64 %210, i64* %RCX, align 8, !tbaa !2428
  %211 = shl i64 %208, 32
  %212 = ashr exact i64 %211, 32
  %213 = icmp ne i64 %212, %208
  %214 = zext i1 %213 to i8
  store i8 %214, i8* %18, align 1, !tbaa !2432
  %215 = and i32 %209, 255
  %216 = tail call i32 @llvm.ctpop.i32(i32 %215) #9
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 1
  %219 = xor i8 %218, 1
  store i8 %219, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %220 = lshr i32 %209, 31
  %221 = trunc i32 %220 to i8
  store i8 %221, i8* %36, align 1, !tbaa !2449
  store i8 %214, i8* %42, align 1, !tbaa !2450
  %222 = add i64 %201, -52
  %223 = add i64 %1210, 36
  store i64 %223, i64* %PC, align 8
  %224 = trunc i64 %208 to i32
  %225 = inttoptr i64 %222 to i32*
  %226 = load i32, i32* %225, align 4
  %227 = add i32 %226, %224
  %228 = zext i32 %227 to i64
  store i64 %228, i64* %RCX, align 8, !tbaa !2428
  %229 = icmp ult i32 %227, %224
  %230 = icmp ult i32 %227, %226
  %231 = or i1 %229, %230
  %232 = zext i1 %231 to i8
  store i8 %232, i8* %18, align 1, !tbaa !2432
  %233 = and i32 %227, 255
  %234 = tail call i32 @llvm.ctpop.i32(i32 %233) #9
  %235 = trunc i32 %234 to i8
  %236 = and i8 %235, 1
  %237 = xor i8 %236, 1
  store i8 %237, i8* %25, align 1, !tbaa !2446
  %238 = xor i32 %226, %224
  %239 = xor i32 %238, %227
  %240 = lshr i32 %239, 4
  %241 = trunc i32 %240 to i8
  %242 = and i8 %241, 1
  store i8 %242, i8* %30, align 1, !tbaa !2447
  %243 = icmp eq i32 %227, 0
  %244 = zext i1 %243 to i8
  store i8 %244, i8* %33, align 1, !tbaa !2448
  %245 = lshr i32 %227, 31
  %246 = trunc i32 %245 to i8
  store i8 %246, i8* %36, align 1, !tbaa !2449
  %247 = lshr i32 %224, 31
  %248 = lshr i32 %226, 31
  %249 = xor i32 %245, %247
  %250 = xor i32 %245, %248
  %251 = add nuw nsw i32 %249, %250
  %252 = icmp eq i32 %251, 2
  %253 = zext i1 %252 to i8
  store i8 %253, i8* %42, align 1, !tbaa !2450
  %254 = sext i32 %227 to i64
  store i64 %254, i64* %RDX, align 8, !tbaa !2428
  %255 = shl nsw i64 %254, 2
  %256 = add i64 %197, %255
  %257 = add i64 %1210, 44
  store i64 %257, i64* %PC, align 8
  %258 = load <2 x float>, <2 x float>* %1100, align 1
  %259 = extractelement <2 x float> %258, i32 0
  %260 = inttoptr i64 %256 to float*
  store float %259, float* %260, align 4
  %261 = load i64, i64* %RBP, align 8
  %262 = add i64 %261, -36
  %263 = load i64, i64* %PC, align 8
  %264 = add i64 %263, 5
  store i64 %264, i64* %PC, align 8
  %265 = inttoptr i64 %262 to i32*
  %266 = load i32, i32* %265, align 4
  store i32 %266, i32* %1089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1101, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1102, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1103, align 1, !tbaa !2451
  %267 = add i64 %261, -8
  %268 = add i64 %263, 9
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %267 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = add i64 %261, -12
  %272 = add i64 %263, 12
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i32*
  %274 = load i32, i32* %273, align 4
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %RCX, align 8, !tbaa !2428
  %276 = add i64 %261, -40
  %277 = add i64 %263, 16
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i32*
  %279 = load i32, i32* %278, align 4
  %280 = sext i32 %274 to i64
  %281 = sext i32 %279 to i64
  %282 = mul nsw i64 %281, %280
  %283 = trunc i64 %282 to i32
  %284 = and i64 %282, 4294967295
  store i64 %284, i64* %RCX, align 8, !tbaa !2428
  %285 = shl i64 %282, 32
  %286 = ashr exact i64 %285, 32
  %287 = icmp ne i64 %286, %282
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %18, align 1, !tbaa !2432
  %289 = and i32 %283, 255
  %290 = tail call i32 @llvm.ctpop.i32(i32 %289) #9
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  store i8 %293, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %294 = lshr i32 %283, 31
  %295 = trunc i32 %294 to i8
  store i8 %295, i8* %36, align 1, !tbaa !2449
  store i8 %288, i8* %42, align 1, !tbaa !2450
  %296 = add i64 %261, -44
  %297 = add i64 %263, 19
  store i64 %297, i64* %PC, align 8
  %298 = trunc i64 %282 to i32
  %299 = inttoptr i64 %296 to i32*
  %300 = load i32, i32* %299, align 4
  %301 = add i32 %300, %298
  %302 = zext i32 %301 to i64
  store i64 %302, i64* %RCX, align 8, !tbaa !2428
  %303 = icmp ult i32 %301, %298
  %304 = icmp ult i32 %301, %300
  %305 = or i1 %303, %304
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %18, align 1, !tbaa !2432
  %307 = and i32 %301, 255
  %308 = tail call i32 @llvm.ctpop.i32(i32 %307) #9
  %309 = trunc i32 %308 to i8
  %310 = and i8 %309, 1
  %311 = xor i8 %310, 1
  store i8 %311, i8* %25, align 1, !tbaa !2446
  %312 = xor i32 %300, %298
  %313 = xor i32 %312, %301
  %314 = lshr i32 %313, 4
  %315 = trunc i32 %314 to i8
  %316 = and i8 %315, 1
  store i8 %316, i8* %30, align 1, !tbaa !2447
  %317 = icmp eq i32 %301, 0
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %33, align 1, !tbaa !2448
  %319 = lshr i32 %301, 31
  %320 = trunc i32 %319 to i8
  store i8 %320, i8* %36, align 1, !tbaa !2449
  %321 = lshr i32 %298, 31
  %322 = lshr i32 %300, 31
  %323 = xor i32 %319, %321
  %324 = xor i32 %319, %322
  %325 = add nuw nsw i32 %323, %324
  %326 = icmp eq i32 %325, 2
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %42, align 1, !tbaa !2450
  %328 = sext i32 %301 to i64
  store i64 %328, i64* %RDX, align 8, !tbaa !2428
  %329 = shl nsw i64 %328, 2
  %330 = add i64 %270, %329
  %331 = add i64 %263, 27
  store i64 %331, i64* %PC, align 8
  %332 = load <2 x float>, <2 x float>* %1100, align 1
  %333 = extractelement <2 x float> %332, i32 0
  %334 = inttoptr i64 %330 to float*
  store float %333, float* %334, align 4
  %.pre20 = load i64, i64* %PC, align 8
  %.pre21 = load i64, i64* %RBP, align 8
  br label %block_401b35

block_4019e2:                                     ; preds = %block_4019d7, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %335 = phi i64 [ %1852, %block_4019d7 ], [ %701, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %336 = load i64, i64* %RBP, align 8
  %337 = add i64 %336, -52
  %338 = add i64 %335, 3
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  store i64 %341, i64* %RAX, align 8, !tbaa !2428
  %342 = add i64 %336, -44
  %343 = add i64 %335, 6
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to i32*
  %345 = load i32, i32* %344, align 4
  %346 = sub i32 %340, %345
  %347 = icmp ult i32 %340, %345
  %348 = zext i1 %347 to i8
  store i8 %348, i8* %18, align 1, !tbaa !2432
  %349 = and i32 %346, 255
  %350 = tail call i32 @llvm.ctpop.i32(i32 %349) #9
  %351 = trunc i32 %350 to i8
  %352 = and i8 %351, 1
  %353 = xor i8 %352, 1
  store i8 %353, i8* %25, align 1, !tbaa !2446
  %354 = xor i32 %345, %340
  %355 = xor i32 %354, %346
  %356 = lshr i32 %355, 4
  %357 = trunc i32 %356 to i8
  %358 = and i8 %357, 1
  store i8 %358, i8* %30, align 1, !tbaa !2447
  %359 = icmp eq i32 %346, 0
  %360 = zext i1 %359 to i8
  store i8 %360, i8* %33, align 1, !tbaa !2448
  %361 = lshr i32 %346, 31
  %362 = trunc i32 %361 to i8
  store i8 %362, i8* %36, align 1, !tbaa !2449
  %363 = lshr i32 %340, 31
  %364 = lshr i32 %345, 31
  %365 = xor i32 %364, %363
  %366 = xor i32 %361, %363
  %367 = add nuw nsw i32 %366, %365
  %368 = icmp eq i32 %367, 2
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %42, align 1, !tbaa !2450
  %.v47 = select i1 %359, i64 110, i64 12
  %370 = add i64 %335, %.v47
  store i64 %370, i64* %PC, align 8, !tbaa !2428
  br i1 %359, label %block_401a50, label %block_4019ee

block_40195e:                                     ; preds = %block_401bb0, %block_401957
  %371 = phi i64 [ %.pre, %block_401957 ], [ %1509, %block_401bb0 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401957 ], [ %MEMORY.6, %block_401bb0 ]
  %372 = load i64, i64* %RBP, align 8
  %373 = add i64 %372, -44
  %374 = add i64 %371, 3
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = zext i32 %376 to i64
  store i64 %377, i64* %RAX, align 8, !tbaa !2428
  %378 = add i64 %372, -56
  %379 = add i64 %371, 6
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %378 to i32*
  %381 = load i32, i32* %380, align 4
  %382 = sub i32 %376, %381
  %383 = icmp ult i32 %376, %381
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %18, align 1, !tbaa !2432
  %385 = and i32 %382, 255
  %386 = tail call i32 @llvm.ctpop.i32(i32 %385) #9
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  store i8 %389, i8* %25, align 1, !tbaa !2446
  %390 = xor i32 %381, %376
  %391 = xor i32 %390, %382
  %392 = lshr i32 %391, 4
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* %30, align 1, !tbaa !2447
  %395 = icmp eq i32 %382, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %33, align 1, !tbaa !2448
  %397 = lshr i32 %382, 31
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %36, align 1, !tbaa !2449
  %399 = lshr i32 %376, 31
  %400 = lshr i32 %381, 31
  %401 = xor i32 %400, %399
  %402 = xor i32 %397, %399
  %403 = add nuw nsw i32 %402, %401
  %404 = icmp eq i32 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %42, align 1, !tbaa !2450
  %406 = icmp ne i8 %398, 0
  %407 = xor i1 %406, %404
  %.v44 = select i1 %407, i64 12, i64 613
  %408 = add i64 %371, %.v44
  %409 = add i64 %408, 5
  store i64 %409, i64* %PC, align 8
  br i1 %407, label %block_40196a, label %block_401bc8.loopexit

block_40196a:                                     ; preds = %block_40195e
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %410 = add i64 %408, 8
  store i64 %410, i64* %PC, align 8
  %411 = load i32, i32* %375, align 4
  %412 = add i32 %411, 1
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %RAX, align 8, !tbaa !2428
  %414 = icmp eq i32 %411, -1
  %415 = icmp eq i32 %412, 0
  %416 = or i1 %414, %415
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %18, align 1, !tbaa !2432
  %418 = and i32 %412, 255
  %419 = tail call i32 @llvm.ctpop.i32(i32 %418) #9
  %420 = trunc i32 %419 to i8
  %421 = and i8 %420, 1
  %422 = xor i8 %421, 1
  store i8 %422, i8* %25, align 1, !tbaa !2446
  %423 = xor i32 %412, %411
  %424 = lshr i32 %423, 4
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  store i8 %426, i8* %30, align 1, !tbaa !2447
  %427 = zext i1 %415 to i8
  store i8 %427, i8* %33, align 1, !tbaa !2448
  %428 = lshr i32 %412, 31
  %429 = trunc i32 %428 to i8
  store i8 %429, i8* %36, align 1, !tbaa !2449
  %430 = lshr i32 %411, 31
  %431 = xor i32 %428, %430
  %432 = add nuw nsw i32 %431, %428
  %433 = icmp eq i32 %432, 2
  %434 = zext i1 %433 to i8
  store i8 %434, i8* %42, align 1, !tbaa !2450
  %435 = add i64 %372, -48
  %436 = add i64 %408, 14
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %435 to i32*
  store i32 %412, i32* %437, align 4
  %438 = load i64, i64* %RBP, align 8
  %439 = add i64 %438, -16
  %440 = load i64, i64* %PC, align 8
  %441 = add i64 %440, 3
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %439 to i32*
  %443 = load i32, i32* %442, align 4
  %444 = zext i32 %443 to i64
  store i64 %444, i64* %RAX, align 8, !tbaa !2428
  %445 = add i64 %438, -44
  %446 = add i64 %440, 6
  store i64 %446, i64* %PC, align 8
  %447 = inttoptr i64 %445 to i32*
  %448 = load i32, i32* %447, align 4
  %449 = sub i32 %443, %448
  %450 = zext i32 %449 to i64
  store i64 %450, i64* %RAX, align 8, !tbaa !2428
  %451 = icmp ult i32 %443, %448
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %18, align 1, !tbaa !2432
  %453 = and i32 %449, 255
  %454 = tail call i32 @llvm.ctpop.i32(i32 %453) #9
  %455 = trunc i32 %454 to i8
  %456 = and i8 %455, 1
  %457 = xor i8 %456, 1
  store i8 %457, i8* %25, align 1, !tbaa !2446
  %458 = xor i32 %448, %443
  %459 = xor i32 %458, %449
  %460 = lshr i32 %459, 4
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  store i8 %462, i8* %30, align 1, !tbaa !2447
  %463 = icmp eq i32 %449, 0
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %33, align 1, !tbaa !2448
  %465 = lshr i32 %449, 31
  %466 = trunc i32 %465 to i8
  store i8 %466, i8* %36, align 1, !tbaa !2449
  %467 = lshr i32 %443, 31
  %468 = lshr i32 %448, 31
  %469 = xor i32 %468, %467
  %470 = xor i32 %465, %467
  %471 = add nuw nsw i32 %470, %469
  %472 = icmp eq i32 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %42, align 1, !tbaa !2450
  %474 = add i64 %438, -8
  %475 = add i64 %440, 10
  store i64 %475, i64* %PC, align 8
  %476 = inttoptr i64 %474 to i64*
  %477 = load i64, i64* %476, align 8
  store i64 %477, i64* %RCX, align 8, !tbaa !2428
  %478 = add i64 %438, -12
  %479 = add i64 %440, 13
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %478 to i32*
  %481 = load i32, i32* %480, align 4
  %482 = zext i32 %481 to i64
  store i64 %482, i64* %RSI, align 8, !tbaa !2428
  %483 = add i64 %440, 17
  store i64 %483, i64* %PC, align 8
  %484 = load i32, i32* %447, align 4
  %485 = sext i32 %481 to i64
  %486 = sext i32 %484 to i64
  %487 = mul nsw i64 %486, %485
  %488 = trunc i64 %487 to i32
  %489 = and i64 %487, 4294967295
  store i64 %489, i64* %RSI, align 8, !tbaa !2428
  %490 = shl i64 %487, 32
  %491 = ashr exact i64 %490, 32
  %492 = icmp ne i64 %491, %487
  %493 = zext i1 %492 to i8
  store i8 %493, i8* %18, align 1, !tbaa !2432
  %494 = and i32 %488, 255
  %495 = tail call i32 @llvm.ctpop.i32(i32 %494) #9
  %496 = trunc i32 %495 to i8
  %497 = and i8 %496, 1
  %498 = xor i8 %497, 1
  store i8 %498, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %499 = lshr i32 %488, 31
  %500 = trunc i32 %499 to i8
  store i8 %500, i8* %36, align 1, !tbaa !2449
  store i8 %493, i8* %42, align 1, !tbaa !2450
  %501 = add i64 %440, 20
  store i64 %501, i64* %PC, align 8
  %502 = trunc i64 %487 to i32
  %503 = load i32, i32* %447, align 4
  %504 = add i32 %503, %502
  %505 = sext i32 %504 to i64
  %506 = shl nsw i64 %505, 2
  %507 = load i64, i64* %RCX, align 8
  %508 = add i64 %506, %507
  store i64 %508, i64* %RCX, align 8, !tbaa !2428
  %509 = icmp ult i64 %508, %507
  %510 = icmp ult i64 %508, %506
  %511 = or i1 %509, %510
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %18, align 1, !tbaa !2432
  %513 = trunc i64 %508 to i32
  %514 = and i32 %513, 255
  %515 = tail call i32 @llvm.ctpop.i32(i32 %514) #9
  %516 = trunc i32 %515 to i8
  %517 = and i8 %516, 1
  %518 = xor i8 %517, 1
  store i8 %518, i8* %25, align 1, !tbaa !2446
  %519 = xor i64 %506, %507
  %520 = xor i64 %519, %508
  %521 = lshr i64 %520, 4
  %522 = trunc i64 %521 to i8
  %523 = and i8 %522, 1
  store i8 %523, i8* %30, align 1, !tbaa !2447
  %524 = icmp eq i64 %508, 0
  %525 = zext i1 %524 to i8
  store i8 %525, i8* %33, align 1, !tbaa !2448
  %526 = lshr i64 %508, 63
  %527 = trunc i64 %526 to i8
  store i8 %527, i8* %36, align 1, !tbaa !2449
  %528 = lshr i64 %507, 63
  %529 = lshr i64 %505, 61
  %530 = and i64 %529, 1
  %531 = xor i64 %526, %528
  %532 = xor i64 %526, %530
  %533 = add nuw nsw i64 %531, %532
  %534 = icmp eq i64 %533, 2
  %535 = zext i1 %534 to i8
  store i8 %535, i8* %42, align 1, !tbaa !2450
  %536 = load i32, i32* %EAX, align 4
  %537 = zext i32 %536 to i64
  store i64 %537, i64* %RDI, align 8, !tbaa !2428
  store i64 %508, i64* %RSI, align 8, !tbaa !2428
  %538 = add i64 %440, 4552
  %539 = add i64 %440, 40
  %540 = load i64, i64* %RSP, align 8, !tbaa !2428
  %541 = add i64 %540, -8
  %542 = inttoptr i64 %541 to i64*
  store i64 %539, i64* %542, align 8
  store i64 %541, i64* %RSP, align 8, !tbaa !2428
  store i64 %538, i64* %PC, align 8, !tbaa !2428
  %543 = tail call %struct.Memory* @sub_402b40_idamax(%struct.State* nonnull %0, i64 %538, %struct.Memory* %MEMORY.1)
  %544 = load i64, i64* %PC, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %1104, align 1, !tbaa !2456
  %545 = load i64, i64* %RAX, align 8
  %546 = load i64, i64* %RBP, align 8
  %547 = add i64 %546, -44
  %548 = add i64 %544, 6
  store i64 %548, i64* %PC, align 8
  %549 = trunc i64 %545 to i32
  %550 = inttoptr i64 %547 to i32*
  %551 = load i32, i32* %550, align 4
  %552 = add i32 %551, %549
  %553 = zext i32 %552 to i64
  store i64 %553, i64* %RAX, align 8, !tbaa !2428
  %554 = icmp ult i32 %552, %549
  %555 = icmp ult i32 %552, %551
  %556 = or i1 %554, %555
  %557 = zext i1 %556 to i8
  store i8 %557, i8* %18, align 1, !tbaa !2432
  %558 = and i32 %552, 255
  %559 = tail call i32 @llvm.ctpop.i32(i32 %558) #9
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  %562 = xor i8 %561, 1
  store i8 %562, i8* %25, align 1, !tbaa !2446
  %563 = xor i32 %551, %549
  %564 = xor i32 %563, %552
  %565 = lshr i32 %564, 4
  %566 = trunc i32 %565 to i8
  %567 = and i8 %566, 1
  store i8 %567, i8* %30, align 1, !tbaa !2447
  %568 = icmp eq i32 %552, 0
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %33, align 1, !tbaa !2448
  %570 = lshr i32 %552, 31
  %571 = trunc i32 %570 to i8
  store i8 %571, i8* %36, align 1, !tbaa !2449
  %572 = lshr i32 %549, 31
  %573 = lshr i32 %551, 31
  %574 = xor i32 %570, %572
  %575 = xor i32 %570, %573
  %576 = add nuw nsw i32 %574, %575
  %577 = icmp eq i32 %576, 2
  %578 = zext i1 %577 to i8
  store i8 %578, i8* %42, align 1, !tbaa !2450
  %579 = add i64 %546, -52
  %580 = add i64 %544, 9
  store i64 %580, i64* %PC, align 8
  %581 = inttoptr i64 %579 to i32*
  store i32 %552, i32* %581, align 4
  %582 = load i64, i64* %RBP, align 8
  %583 = add i64 %582, -52
  %584 = load i64, i64* %PC, align 8
  %585 = add i64 %584, 3
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %583 to i32*
  %587 = load i32, i32* %586, align 4
  %588 = zext i32 %587 to i64
  store i64 %588, i64* %RAX, align 8, !tbaa !2428
  %589 = add i64 %582, -24
  %590 = add i64 %584, 7
  store i64 %590, i64* %PC, align 8
  %591 = inttoptr i64 %589 to i64*
  %592 = load i64, i64* %591, align 8
  store i64 %592, i64* %RCX, align 8, !tbaa !2428
  %593 = add i64 %582, -44
  %594 = add i64 %584, 11
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i32*
  %596 = load i32, i32* %595, align 4
  %597 = sext i32 %596 to i64
  store i64 %597, i64* %RSI, align 8, !tbaa !2428
  %598 = shl nsw i64 %597, 2
  %599 = add i64 %598, %592
  %600 = add i64 %584, 14
  store i64 %600, i64* %PC, align 8
  %601 = inttoptr i64 %599 to i32*
  store i32 %587, i32* %601, align 4
  %602 = load i64, i64* %RBP, align 8
  %603 = add i64 %602, -8
  %604 = load i64, i64* %PC, align 8
  %605 = add i64 %604, 4
  store i64 %605, i64* %PC, align 8
  %606 = inttoptr i64 %603 to i64*
  %607 = load i64, i64* %606, align 8
  store i64 %607, i64* %RCX, align 8, !tbaa !2428
  %608 = add i64 %602, -12
  %609 = add i64 %604, 7
  store i64 %609, i64* %PC, align 8
  %610 = inttoptr i64 %608 to i32*
  %611 = load i32, i32* %610, align 4
  %612 = zext i32 %611 to i64
  store i64 %612, i64* %RAX, align 8, !tbaa !2428
  %613 = add i64 %602, -44
  %614 = add i64 %604, 11
  store i64 %614, i64* %PC, align 8
  %615 = inttoptr i64 %613 to i32*
  %616 = load i32, i32* %615, align 4
  %617 = sext i32 %611 to i64
  %618 = sext i32 %616 to i64
  %619 = mul nsw i64 %618, %617
  %620 = trunc i64 %619 to i32
  %621 = and i64 %619, 4294967295
  store i64 %621, i64* %RAX, align 8, !tbaa !2428
  %622 = shl i64 %619, 32
  %623 = ashr exact i64 %622, 32
  %624 = icmp ne i64 %623, %619
  %625 = zext i1 %624 to i8
  store i8 %625, i8* %18, align 1, !tbaa !2432
  %626 = and i32 %620, 255
  %627 = tail call i32 @llvm.ctpop.i32(i32 %626) #9
  %628 = trunc i32 %627 to i8
  %629 = and i8 %628, 1
  %630 = xor i8 %629, 1
  store i8 %630, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %631 = lshr i32 %620, 31
  %632 = trunc i32 %631 to i8
  store i8 %632, i8* %36, align 1, !tbaa !2449
  store i8 %625, i8* %42, align 1, !tbaa !2450
  %633 = add i64 %602, -52
  %634 = add i64 %604, 14
  store i64 %634, i64* %PC, align 8
  %635 = trunc i64 %619 to i32
  %636 = inttoptr i64 %633 to i32*
  %637 = load i32, i32* %636, align 4
  %638 = add i32 %637, %635
  %639 = zext i32 %638 to i64
  store i64 %639, i64* %RAX, align 8, !tbaa !2428
  %640 = icmp ult i32 %638, %635
  %641 = icmp ult i32 %638, %637
  %642 = or i1 %640, %641
  %643 = zext i1 %642 to i8
  store i8 %643, i8* %18, align 1, !tbaa !2432
  %644 = and i32 %638, 255
  %645 = tail call i32 @llvm.ctpop.i32(i32 %644) #9
  %646 = trunc i32 %645 to i8
  %647 = and i8 %646, 1
  %648 = xor i8 %647, 1
  store i8 %648, i8* %25, align 1, !tbaa !2446
  %649 = xor i32 %637, %635
  %650 = xor i32 %649, %638
  %651 = lshr i32 %650, 4
  %652 = trunc i32 %651 to i8
  %653 = and i8 %652, 1
  store i8 %653, i8* %30, align 1, !tbaa !2447
  %654 = icmp eq i32 %638, 0
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %33, align 1, !tbaa !2448
  %656 = lshr i32 %638, 31
  %657 = trunc i32 %656 to i8
  store i8 %657, i8* %36, align 1, !tbaa !2449
  %658 = lshr i32 %635, 31
  %659 = lshr i32 %637, 31
  %660 = xor i32 %656, %658
  %661 = xor i32 %656, %659
  %662 = add nuw nsw i32 %660, %661
  %663 = icmp eq i32 %662, 2
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %42, align 1, !tbaa !2450
  %665 = sext i32 %638 to i64
  store i64 %665, i64* %RSI, align 8, !tbaa !2428
  %666 = shl nsw i64 %665, 2
  %667 = add i64 %607, %666
  %668 = add i64 %604, 22
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to float*
  %670 = load float, float* %669, align 4
  %671 = fpext float %670 to double
  store double %671, double* %1095, align 1, !tbaa !2454
  %672 = add i64 %604, 26
  store i64 %672, i64* %PC, align 8
  %673 = load double, double* %1096, align 1
  %674 = fcmp uno double %671, %673
  br i1 %674, label %675, label %685

; <label>:675:                                    ; preds = %block_40196a
  %676 = fadd double %671, %673
  %677 = bitcast double %676 to i64
  %678 = and i64 %677, 9221120237041090560
  %679 = icmp eq i64 %678, 9218868437227405312
  %680 = and i64 %677, 2251799813685247
  %681 = icmp ne i64 %680, 0
  %682 = and i1 %679, %681
  br i1 %682, label %683, label %691

; <label>:683:                                    ; preds = %675
  %684 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %672, %struct.Memory* %543) #12
  %.pre13 = load i64, i64* %PC, align 8
  %.pre14 = load i8, i8* %33, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:685:                                    ; preds = %block_40196a
  %686 = fcmp ogt double %671, %673
  br i1 %686, label %691, label %687

; <label>:687:                                    ; preds = %685
  %688 = fcmp olt double %671, %673
  br i1 %688, label %691, label %689

; <label>:689:                                    ; preds = %687
  %690 = fcmp oeq double %671, %673
  br i1 %690, label %691, label %695

; <label>:691:                                    ; preds = %689, %687, %685, %675
  %692 = phi i8 [ 0, %685 ], [ 0, %687 ], [ 1, %689 ], [ 1, %675 ]
  %693 = phi i8 [ 0, %685 ], [ 0, %687 ], [ 0, %689 ], [ 1, %675 ]
  %694 = phi i8 [ 0, %685 ], [ 1, %687 ], [ 0, %689 ], [ 1, %675 ]
  store i8 %692, i8* %33, align 1, !tbaa !2453
  store i8 %693, i8* %25, align 1, !tbaa !2453
  store i8 %694, i8* %18, align 1, !tbaa !2453
  br label %695

; <label>:695:                                    ; preds = %691, %689
  %696 = phi i8 [ %692, %691 ], [ %655, %689 ]
  store i8 0, i8* %42, align 1, !tbaa !2453
  store i8 0, i8* %36, align 1, !tbaa !2453
  store i8 0, i8* %30, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %695, %683
  %697 = phi i8 [ %.pre14, %683 ], [ %696, %695 ]
  %698 = phi i64 [ %.pre13, %683 ], [ %672, %695 ]
  %699 = phi %struct.Memory* [ %684, %683 ], [ %543, %695 ]
  %700 = icmp eq i8 %697, 0
  %.v46 = select i1 %700, i64 17, i64 6
  %701 = add i64 %698, %.v46
  store i64 %701, i64* %PC, align 8, !tbaa !2428
  br i1 %700, label %block_4019e2, label %block_4019d7

block_4019dd:                                     ; preds = %block_4019d7
  %702 = load i64, i64* %RBP, align 8
  %703 = add i64 %702, -44
  %704 = add i64 %1852, 461
  store i64 %704, i64* %PC, align 8
  %705 = inttoptr i64 %703 to i32*
  %706 = load i32, i32* %705, align 4
  %707 = zext i32 %706 to i64
  store i64 %707, i64* %RAX, align 8, !tbaa !2428
  %708 = add i64 %702, -32
  %709 = add i64 %1852, 465
  store i64 %709, i64* %PC, align 8
  %710 = inttoptr i64 %708 to i64*
  %711 = load i64, i64* %710, align 8
  store i64 %711, i64* %RCX, align 8, !tbaa !2428
  %712 = add i64 %1852, 467
  store i64 %712, i64* %PC, align 8
  %713 = inttoptr i64 %711 to i32*
  store i32 %706, i32* %713, align 4
  %.pre18 = load i64, i64* %PC, align 8
  %.pre19 = load i64, i64* %RBP, align 8
  br label %block_401bb0

block_401a50:                                     ; preds = %block_4019ee, %block_4019e2
  %714 = phi i64 [ %.pre16, %block_4019ee ], [ %336, %block_4019e2 ]
  %715 = phi i64 [ %.pre15, %block_4019ee ], [ %370, %block_4019e2 ]
  store i64 1, i64* %RDX, align 8, !tbaa !2428
  %716 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 72) to i64*), align 8
  store i64 %716, i64* %1097, align 1, !tbaa !2454
  store double 0.000000e+00, double* %1098, align 1, !tbaa !2454
  %717 = add i64 %714, -8
  %718 = add i64 %715, 17
  store i64 %718, i64* %PC, align 8
  %719 = inttoptr i64 %717 to i64*
  %720 = load i64, i64* %719, align 8
  store i64 %720, i64* %RAX, align 8, !tbaa !2428
  %721 = add i64 %714, -12
  %722 = add i64 %715, 20
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %721 to i32*
  %724 = load i32, i32* %723, align 4
  %725 = zext i32 %724 to i64
  store i64 %725, i64* %RCX, align 8, !tbaa !2428
  %726 = add i64 %714, -44
  %727 = add i64 %715, 24
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %726 to i32*
  %729 = load i32, i32* %728, align 4
  %730 = sext i32 %724 to i64
  %731 = sext i32 %729 to i64
  %732 = mul nsw i64 %731, %730
  %733 = trunc i64 %732 to i32
  %734 = and i64 %732, 4294967295
  store i64 %734, i64* %RCX, align 8, !tbaa !2428
  %735 = shl i64 %732, 32
  %736 = ashr exact i64 %735, 32
  %737 = icmp ne i64 %736, %732
  %738 = zext i1 %737 to i8
  store i8 %738, i8* %18, align 1, !tbaa !2432
  %739 = and i32 %733, 255
  %740 = tail call i32 @llvm.ctpop.i32(i32 %739) #9
  %741 = trunc i32 %740 to i8
  %742 = and i8 %741, 1
  %743 = xor i8 %742, 1
  store i8 %743, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %744 = lshr i32 %733, 31
  %745 = trunc i32 %744 to i8
  store i8 %745, i8* %36, align 1, !tbaa !2449
  store i8 %738, i8* %42, align 1, !tbaa !2450
  %746 = add i64 %715, 27
  store i64 %746, i64* %PC, align 8
  %747 = trunc i64 %732 to i32
  %748 = load i32, i32* %728, align 4
  %749 = add i32 %748, %747
  %750 = zext i32 %749 to i64
  store i64 %750, i64* %RCX, align 8, !tbaa !2428
  %751 = icmp ult i32 %749, %747
  %752 = icmp ult i32 %749, %748
  %753 = or i1 %751, %752
  %754 = zext i1 %753 to i8
  store i8 %754, i8* %18, align 1, !tbaa !2432
  %755 = and i32 %749, 255
  %756 = tail call i32 @llvm.ctpop.i32(i32 %755) #9
  %757 = trunc i32 %756 to i8
  %758 = and i8 %757, 1
  %759 = xor i8 %758, 1
  store i8 %759, i8* %25, align 1, !tbaa !2446
  %760 = xor i32 %748, %747
  %761 = xor i32 %760, %749
  %762 = lshr i32 %761, 4
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  store i8 %764, i8* %30, align 1, !tbaa !2447
  %765 = icmp eq i32 %749, 0
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %33, align 1, !tbaa !2448
  %767 = lshr i32 %749, 31
  %768 = trunc i32 %767 to i8
  store i8 %768, i8* %36, align 1, !tbaa !2449
  %769 = lshr i32 %747, 31
  %770 = lshr i32 %748, 31
  %771 = xor i32 %767, %769
  %772 = xor i32 %767, %770
  %773 = add nuw nsw i32 %771, %772
  %774 = icmp eq i32 %773, 2
  %775 = zext i1 %774 to i8
  store i8 %775, i8* %42, align 1, !tbaa !2450
  %776 = sext i32 %749 to i64
  store i64 %776, i64* %RSI, align 8, !tbaa !2428
  %777 = shl nsw i64 %776, 2
  %778 = add i64 %720, %777
  %779 = add i64 %715, 35
  store i64 %779, i64* %PC, align 8
  %780 = inttoptr i64 %778 to float*
  %781 = load float, float* %780, align 4
  %782 = fpext float %781 to double
  store double %782, double* %1095, align 1, !tbaa !2454
  %783 = bitcast i64 %716 to double
  %784 = fdiv double %783, %782
  %.cast = bitcast double %784 to <2 x i32>
  %785 = fptrunc double %784 to float
  store float %785, float* %1099, align 1, !tbaa !2451
  %786 = extractelement <2 x i32> %.cast, i32 1
  store i32 %786, i32* %1091, align 1, !tbaa !2451
  store i32 0, i32* %1092, align 1, !tbaa !2451
  store i32 0, i32* %1094, align 1, !tbaa !2451
  %787 = load i64, i64* %RBP, align 8
  %788 = add i64 %787, -36
  %789 = add i64 %715, 48
  store i64 %789, i64* %PC, align 8
  %790 = load <2 x float>, <2 x float>* %1100, align 1
  %791 = extractelement <2 x float> %790, i32 0
  %792 = inttoptr i64 %788 to float*
  store float %791, float* %792, align 4
  %793 = load i64, i64* %RBP, align 8
  %794 = add i64 %793, -16
  %795 = load i64, i64* %PC, align 8
  %796 = add i64 %795, 3
  store i64 %796, i64* %PC, align 8
  %797 = inttoptr i64 %794 to i32*
  %798 = load i32, i32* %797, align 4
  %799 = zext i32 %798 to i64
  store i64 %799, i64* %RCX, align 8, !tbaa !2428
  %800 = add i64 %793, -44
  %801 = add i64 %795, 6
  store i64 %801, i64* %PC, align 8
  %802 = inttoptr i64 %800 to i32*
  %803 = load i32, i32* %802, align 4
  %804 = add i32 %803, 1
  %805 = zext i32 %804 to i64
  store i64 %805, i64* %RDI, align 8, !tbaa !2428
  %806 = lshr i32 %804, 31
  %807 = sub i32 %798, %804
  %808 = zext i32 %807 to i64
  store i64 %808, i64* %RCX, align 8, !tbaa !2428
  %809 = icmp ult i32 %798, %804
  %810 = zext i1 %809 to i8
  store i8 %810, i8* %18, align 1, !tbaa !2432
  %811 = and i32 %807, 255
  %812 = tail call i32 @llvm.ctpop.i32(i32 %811) #9
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = xor i8 %814, 1
  store i8 %815, i8* %25, align 1, !tbaa !2446
  %816 = xor i32 %804, %798
  %817 = xor i32 %816, %807
  %818 = lshr i32 %817, 4
  %819 = trunc i32 %818 to i8
  %820 = and i8 %819, 1
  store i8 %820, i8* %30, align 1, !tbaa !2447
  %821 = icmp eq i32 %807, 0
  %822 = zext i1 %821 to i8
  store i8 %822, i8* %33, align 1, !tbaa !2448
  %823 = lshr i32 %807, 31
  %824 = trunc i32 %823 to i8
  store i8 %824, i8* %36, align 1, !tbaa !2449
  %825 = lshr i32 %798, 31
  %826 = xor i32 %806, %825
  %827 = xor i32 %823, %825
  %828 = add nuw nsw i32 %827, %826
  %829 = icmp eq i32 %828, 2
  %830 = zext i1 %829 to i8
  store i8 %830, i8* %42, align 1, !tbaa !2450
  %831 = add i64 %793, -36
  %832 = add i64 %795, 16
  store i64 %832, i64* %PC, align 8
  %833 = inttoptr i64 %831 to i32*
  %834 = load i32, i32* %833, align 4
  store i32 %834, i32* %1089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1101, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1102, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1103, align 1, !tbaa !2451
  %835 = add i64 %793, -8
  %836 = add i64 %795, 20
  store i64 %836, i64* %PC, align 8
  %837 = inttoptr i64 %835 to i64*
  %838 = load i64, i64* %837, align 8
  store i64 %838, i64* %RAX, align 8, !tbaa !2428
  %839 = load i64, i64* %RBP, align 8
  %840 = add i64 %839, -12
  %841 = add i64 %795, 23
  store i64 %841, i64* %PC, align 8
  %842 = inttoptr i64 %840 to i32*
  %843 = load i32, i32* %842, align 4
  %844 = zext i32 %843 to i64
  store i64 %844, i64* %RDI, align 8, !tbaa !2428
  %845 = add i64 %839, -44
  %846 = add i64 %795, 27
  store i64 %846, i64* %PC, align 8
  %847 = inttoptr i64 %845 to i32*
  %848 = load i32, i32* %847, align 4
  %849 = sext i32 %843 to i64
  %850 = sext i32 %848 to i64
  %851 = mul nsw i64 %850, %849
  %852 = trunc i64 %851 to i32
  %853 = and i64 %851, 4294967295
  store i64 %853, i64* %RDI, align 8, !tbaa !2428
  %854 = shl i64 %851, 32
  %855 = ashr exact i64 %854, 32
  %856 = icmp ne i64 %855, %851
  %857 = zext i1 %856 to i8
  store i8 %857, i8* %18, align 1, !tbaa !2432
  %858 = and i32 %852, 255
  %859 = tail call i32 @llvm.ctpop.i32(i32 %858) #9
  %860 = trunc i32 %859 to i8
  %861 = and i8 %860, 1
  %862 = xor i8 %861, 1
  store i8 %862, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %863 = lshr i32 %852, 31
  %864 = trunc i32 %863 to i8
  store i8 %864, i8* %36, align 1, !tbaa !2449
  store i8 %857, i8* %42, align 1, !tbaa !2450
  %865 = add i64 %795, 30
  store i64 %865, i64* %PC, align 8
  %866 = trunc i64 %851 to i32
  %867 = load i32, i32* %847, align 4
  %868 = add i32 %867, %866
  %869 = add i32 %868, 1
  %870 = sext i32 %869 to i64
  %871 = shl nsw i64 %870, 2
  %872 = load i64, i64* %RAX, align 8
  %873 = add i64 %871, %872
  store i64 %873, i64* %RAX, align 8, !tbaa !2428
  %874 = icmp ult i64 %873, %872
  %875 = icmp ult i64 %873, %871
  %876 = or i1 %874, %875
  %877 = zext i1 %876 to i8
  store i8 %877, i8* %18, align 1, !tbaa !2432
  %878 = trunc i64 %873 to i32
  %879 = and i32 %878, 255
  %880 = tail call i32 @llvm.ctpop.i32(i32 %879) #9
  %881 = trunc i32 %880 to i8
  %882 = and i8 %881, 1
  %883 = xor i8 %882, 1
  store i8 %883, i8* %25, align 1, !tbaa !2446
  %884 = xor i64 %871, %872
  %885 = xor i64 %884, %873
  %886 = lshr i64 %885, 4
  %887 = trunc i64 %886 to i8
  %888 = and i8 %887, 1
  store i8 %888, i8* %30, align 1, !tbaa !2447
  %889 = icmp eq i64 %873, 0
  %890 = zext i1 %889 to i8
  store i8 %890, i8* %33, align 1, !tbaa !2448
  %891 = lshr i64 %873, 63
  %892 = trunc i64 %891 to i8
  store i8 %892, i8* %36, align 1, !tbaa !2449
  %893 = lshr i64 %872, 63
  %894 = lshr i64 %870, 61
  %895 = and i64 %894, 1
  %896 = xor i64 %891, %893
  %897 = xor i64 %891, %895
  %898 = add nuw nsw i64 %896, %897
  %899 = icmp eq i64 %898, 2
  %900 = zext i1 %899 to i8
  store i8 %900, i8* %42, align 1, !tbaa !2450
  %901 = load i32, i32* %ECX, align 4
  %902 = zext i32 %901 to i64
  store i64 %902, i64* %RDI, align 8, !tbaa !2428
  store i64 %873, i64* %RSI, align 8, !tbaa !2428
  %903 = add i64 %795, 4704
  %904 = add i64 %795, 53
  %905 = load i64, i64* %RSP, align 8, !tbaa !2428
  %906 = add i64 %905, -8
  %907 = inttoptr i64 %906 to i64*
  store i64 %904, i64* %907, align 8
  store i64 %906, i64* %RSP, align 8, !tbaa !2428
  store i64 %903, i64* %PC, align 8, !tbaa !2428
  %908 = tail call %struct.Memory* @sub_402ce0_dscal(%struct.State* nonnull %0, i64 %903, %struct.Memory* %699)
  %909 = load i64, i64* %RBP, align 8
  %910 = add i64 %909, -48
  %911 = load i64, i64* %PC, align 8
  %912 = add i64 %911, 3
  store i64 %912, i64* %PC, align 8
  %913 = inttoptr i64 %910 to i32*
  %914 = load i32, i32* %913, align 4
  %915 = zext i32 %914 to i64
  store i64 %915, i64* %RCX, align 8, !tbaa !2428
  %916 = add i64 %909, -40
  %917 = add i64 %911, 6
  store i64 %917, i64* %PC, align 8
  %918 = inttoptr i64 %916 to i32*
  store i32 %914, i32* %918, align 4
  %.pre17 = load i64, i64* %PC, align 8
  br label %block_401abb

block_401bc8.loopexit:                            ; preds = %block_40195e
  br label %block_401bc8

block_401bc8:                                     ; preds = %block_401bc8.loopexit, %block_401920.block_401bc8_crit_edge
  %.pre-phi43 = phi double* [ %.pre42, %block_401920.block_401bc8_crit_edge ], [ %1096, %block_401bc8.loopexit ]
  %.pre-phi41 = phi double* [ %.pre40, %block_401920.block_401bc8_crit_edge ], [ %1095, %block_401bc8.loopexit ]
  %.pre-phi39 = phi i32* [ %.pre38, %block_401920.block_401bc8_crit_edge ], [ %1094, %block_401bc8.loopexit ]
  %.pre-phi35 = phi i32* [ %.pre34, %block_401920.block_401bc8_crit_edge ], [ %1092, %block_401bc8.loopexit ]
  %.pre-phi33 = phi i32* [ %.pre32, %block_401920.block_401bc8_crit_edge ], [ %1091, %block_401bc8.loopexit ]
  %.pre-phi29 = phi i32* [ %.pre28, %block_401920.block_401bc8_crit_edge ], [ %1089, %block_401bc8.loopexit ]
  %919 = phi i64 [ %110, %block_401920.block_401bc8_crit_edge ], [ %372, %block_401bc8.loopexit ]
  %920 = phi i64 [ %126, %block_401920.block_401bc8_crit_edge ], [ %409, %block_401bc8.loopexit ]
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_401920.block_401bc8_crit_edge ], [ %MEMORY.1, %block_401bc8.loopexit ]
  store i32 0, i32* %.pre-phi29, align 1, !tbaa !2456
  store i32 0, i32* %.pre-phi33, align 1, !tbaa !2456
  store i32 0, i32* %.pre-phi35, align 1, !tbaa !2456
  store i32 0, i32* %.pre-phi39, align 1, !tbaa !2456
  %921 = add i64 %919, -16
  %922 = add i64 %920, 6
  store i64 %922, i64* %PC, align 8
  %923 = inttoptr i64 %921 to i32*
  %924 = load i32, i32* %923, align 4
  %925 = add i32 %924, -1
  %926 = zext i32 %925 to i64
  store i64 %926, i64* %RAX, align 8, !tbaa !2428
  %927 = icmp eq i32 %924, 0
  %928 = zext i1 %927 to i8
  store i8 %928, i8* %18, align 1, !tbaa !2432
  %929 = and i32 %925, 255
  %930 = tail call i32 @llvm.ctpop.i32(i32 %929) #9
  %931 = trunc i32 %930 to i8
  %932 = and i8 %931, 1
  %933 = xor i8 %932, 1
  store i8 %933, i8* %25, align 1, !tbaa !2446
  %934 = xor i32 %925, %924
  %935 = lshr i32 %934, 4
  %936 = trunc i32 %935 to i8
  %937 = and i8 %936, 1
  store i8 %937, i8* %30, align 1, !tbaa !2447
  %938 = icmp eq i32 %925, 0
  %939 = zext i1 %938 to i8
  store i8 %939, i8* %33, align 1, !tbaa !2448
  %940 = lshr i32 %925, 31
  %941 = trunc i32 %940 to i8
  store i8 %941, i8* %36, align 1, !tbaa !2449
  %942 = lshr i32 %924, 31
  %943 = xor i32 %940, %942
  %944 = add nuw nsw i32 %943, %942
  %945 = icmp eq i32 %944, 2
  %946 = zext i1 %945 to i8
  store i8 %946, i8* %42, align 1, !tbaa !2450
  %947 = add i64 %919, -24
  %948 = add i64 %920, 13
  store i64 %948, i64* %PC, align 8
  %949 = inttoptr i64 %947 to i64*
  %950 = load i64, i64* %949, align 8
  store i64 %950, i64* %RCX, align 8, !tbaa !2428
  %951 = add i64 %920, 16
  store i64 %951, i64* %PC, align 8
  %952 = load i32, i32* %923, align 4
  %953 = add i32 %952, -1
  %954 = zext i32 %953 to i64
  store i64 %954, i64* %RDX, align 8, !tbaa !2428
  %955 = icmp eq i32 %952, 0
  %956 = zext i1 %955 to i8
  store i8 %956, i8* %18, align 1, !tbaa !2432
  %957 = and i32 %953, 255
  %958 = tail call i32 @llvm.ctpop.i32(i32 %957) #9
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = xor i8 %960, 1
  store i8 %961, i8* %25, align 1, !tbaa !2446
  %962 = xor i32 %953, %952
  %963 = lshr i32 %962, 4
  %964 = trunc i32 %963 to i8
  %965 = and i8 %964, 1
  store i8 %965, i8* %30, align 1, !tbaa !2447
  %966 = icmp eq i32 %953, 0
  %967 = zext i1 %966 to i8
  store i8 %967, i8* %33, align 1, !tbaa !2448
  %968 = lshr i32 %953, 31
  %969 = trunc i32 %968 to i8
  store i8 %969, i8* %36, align 1, !tbaa !2449
  %970 = lshr i32 %952, 31
  %971 = xor i32 %968, %970
  %972 = add nuw nsw i32 %971, %970
  %973 = icmp eq i32 %972, 2
  %974 = zext i1 %973 to i8
  store i8 %974, i8* %42, align 1, !tbaa !2450
  %975 = sext i32 %953 to i64
  store i64 %975, i64* %RSI, align 8, !tbaa !2428
  %976 = shl nsw i64 %975, 2
  %977 = add i64 %950, %976
  %978 = add i64 %920, 25
  store i64 %978, i64* %PC, align 8
  %979 = inttoptr i64 %977 to i32*
  store i32 %925, i32* %979, align 4
  %980 = load i64, i64* %RBP, align 8
  %981 = add i64 %980, -8
  %982 = load i64, i64* %PC, align 8
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC, align 8
  %984 = inttoptr i64 %981 to i64*
  %985 = load i64, i64* %984, align 8
  store i64 %985, i64* %RCX, align 8, !tbaa !2428
  %986 = add i64 %980, -12
  %987 = add i64 %982, 7
  store i64 %987, i64* %PC, align 8
  %988 = inttoptr i64 %986 to i32*
  %989 = load i32, i32* %988, align 4
  %990 = zext i32 %989 to i64
  store i64 %990, i64* %RAX, align 8, !tbaa !2428
  %991 = add i64 %980, -16
  %992 = add i64 %982, 10
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %991 to i32*
  %994 = load i32, i32* %993, align 4
  %995 = add i32 %994, -1
  %996 = zext i32 %995 to i64
  store i64 %996, i64* %RDX, align 8, !tbaa !2428
  %997 = sext i32 %989 to i64
  %998 = sext i32 %995 to i64
  %999 = mul nsw i64 %998, %997
  %1000 = trunc i64 %999 to i32
  %1001 = and i64 %999, 4294967295
  store i64 %1001, i64* %RAX, align 8, !tbaa !2428
  %1002 = shl i64 %999, 32
  %1003 = ashr exact i64 %1002, 32
  %1004 = icmp ne i64 %1003, %999
  %1005 = zext i1 %1004 to i8
  store i8 %1005, i8* %18, align 1, !tbaa !2432
  %1006 = and i32 %1000, 255
  %1007 = tail call i32 @llvm.ctpop.i32(i32 %1006) #9
  %1008 = trunc i32 %1007 to i8
  %1009 = and i8 %1008, 1
  %1010 = xor i8 %1009, 1
  store i8 %1010, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1011 = lshr i32 %1000, 31
  %1012 = trunc i32 %1011 to i8
  store i8 %1012, i8* %36, align 1, !tbaa !2449
  store i8 %1005, i8* %42, align 1, !tbaa !2450
  %1013 = add i64 %982, 19
  store i64 %1013, i64* %PC, align 8
  %1014 = load i32, i32* %993, align 4
  %1015 = add i32 %1014, -1
  %1016 = zext i32 %1015 to i64
  store i64 %1016, i64* %RDX, align 8, !tbaa !2428
  %1017 = lshr i32 %1015, 31
  %1018 = trunc i64 %999 to i32
  %1019 = add i32 %1015, %1018
  %1020 = zext i32 %1019 to i64
  store i64 %1020, i64* %RAX, align 8, !tbaa !2428
  %1021 = icmp ult i32 %1019, %1018
  %1022 = icmp ult i32 %1019, %1015
  %1023 = or i1 %1021, %1022
  %1024 = zext i1 %1023 to i8
  store i8 %1024, i8* %18, align 1, !tbaa !2432
  %1025 = and i32 %1019, 255
  %1026 = tail call i32 @llvm.ctpop.i32(i32 %1025) #9
  %1027 = trunc i32 %1026 to i8
  %1028 = and i8 %1027, 1
  %1029 = xor i8 %1028, 1
  store i8 %1029, i8* %25, align 1, !tbaa !2446
  %1030 = xor i64 %1016, %999
  %1031 = trunc i64 %1030 to i32
  %1032 = xor i32 %1031, %1019
  %1033 = lshr i32 %1032, 4
  %1034 = trunc i32 %1033 to i8
  %1035 = and i8 %1034, 1
  store i8 %1035, i8* %30, align 1, !tbaa !2447
  %1036 = icmp eq i32 %1019, 0
  %1037 = zext i1 %1036 to i8
  store i8 %1037, i8* %33, align 1, !tbaa !2448
  %1038 = lshr i32 %1019, 31
  %1039 = trunc i32 %1038 to i8
  store i8 %1039, i8* %36, align 1, !tbaa !2449
  %1040 = lshr i32 %1018, 31
  %1041 = xor i32 %1038, %1040
  %1042 = xor i32 %1038, %1017
  %1043 = add nuw nsw i32 %1041, %1042
  %1044 = icmp eq i32 %1043, 2
  %1045 = zext i1 %1044 to i8
  store i8 %1045, i8* %42, align 1, !tbaa !2450
  %1046 = sext i32 %1019 to i64
  store i64 %1046, i64* %RSI, align 8, !tbaa !2428
  %1047 = load i64, i64* %RCX, align 8
  %1048 = shl nsw i64 %1046, 2
  %1049 = add i64 %1047, %1048
  %1050 = add i64 %982, 32
  store i64 %1050, i64* %PC, align 8
  %1051 = inttoptr i64 %1049 to float*
  %1052 = load float, float* %1051, align 4
  %1053 = fpext float %1052 to double
  store double %1053, double* %.pre-phi41, align 1, !tbaa !2454
  %1054 = add i64 %982, 36
  store i64 %1054, i64* %PC, align 8
  %1055 = load double, double* %.pre-phi43, align 1
  %1056 = fcmp uno double %1053, %1055
  br i1 %1056, label %1057, label %1067

; <label>:1057:                                   ; preds = %block_401bc8
  %1058 = fadd double %1053, %1055
  %1059 = bitcast double %1058 to i64
  %1060 = and i64 %1059, 9221120237041090560
  %1061 = icmp eq i64 %1060, 9218868437227405312
  %1062 = and i64 %1059, 2251799813685247
  %1063 = icmp ne i64 %1062, 0
  %1064 = and i1 %1061, %1063
  br i1 %1064, label %1065, label %1073

; <label>:1065:                                   ; preds = %1057
  %1066 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %1054, %struct.Memory* %MEMORY.3) #12
  %.pre22 = load i64, i64* %PC, align 8
  %.pre23 = load i8, i8* %33, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:1067:                                   ; preds = %block_401bc8
  %1068 = fcmp ogt double %1053, %1055
  br i1 %1068, label %1073, label %1069

; <label>:1069:                                   ; preds = %1067
  %1070 = fcmp olt double %1053, %1055
  br i1 %1070, label %1073, label %1071

; <label>:1071:                                   ; preds = %1069
  %1072 = fcmp oeq double %1053, %1055
  br i1 %1072, label %1073, label %1077

; <label>:1073:                                   ; preds = %1071, %1069, %1067, %1057
  %1074 = phi i8 [ 0, %1067 ], [ 0, %1069 ], [ 1, %1071 ], [ 1, %1057 ]
  %1075 = phi i8 [ 0, %1067 ], [ 0, %1069 ], [ 0, %1071 ], [ 1, %1057 ]
  %1076 = phi i8 [ 0, %1067 ], [ 1, %1069 ], [ 0, %1071 ], [ 1, %1057 ]
  store i8 %1074, i8* %33, align 1, !tbaa !2453
  store i8 %1075, i8* %25, align 1, !tbaa !2453
  store i8 %1076, i8* %18, align 1, !tbaa !2453
  br label %1077

; <label>:1077:                                   ; preds = %1073, %1071
  %1078 = phi i8 [ %1074, %1073 ], [ %1037, %1071 ]
  store i8 0, i8* %42, align 1, !tbaa !2453
  store i8 0, i8* %36, align 1, !tbaa !2453
  store i8 0, i8* %30, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %1077, %1065
  %1079 = phi i8 [ %.pre23, %1065 ], [ %1078, %1077 ]
  %1080 = phi i64 [ %.pre22, %1065 ], [ %1054, %1077 ]
  %1081 = phi %struct.Memory* [ %1066, %1065 ], [ %MEMORY.3, %1077 ]
  %1082 = icmp eq i8 %1079, 0
  %.v45 = select i1 %1082, i64 24, i64 6
  %1083 = add i64 %1080, %.v45
  store i64 %1083, i64* %PC, align 8, !tbaa !2428
  br i1 %1082, label %block_401c1d, label %block_401c0b

block_401957:                                     ; preds = %block_401920
  %1084 = add i64 %110, -44
  %1085 = add i64 %126, 7
  store i64 %1085, i64* %PC, align 8
  %1086 = inttoptr i64 %1084 to i32*
  store i32 0, i32* %1086, align 4
  %1087 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %1088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1089 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %1090 = getelementptr inbounds i8, i8* %1087, i64 4
  %1091 = bitcast i8* %1090 to i32*
  %1092 = bitcast i64* %1088 to i32*
  %1093 = getelementptr inbounds i8, i8* %1087, i64 12
  %1094 = bitcast i8* %1093 to i32*
  %1095 = bitcast %union.VectorReg* %8 to double*
  %1096 = bitcast [32 x %union.VectorReg]* %7 to double*
  %1097 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %7, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %1098 = bitcast i64* %1088 to double*
  %1099 = bitcast [32 x %union.VectorReg]* %7 to float*
  %1100 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %1101 = bitcast i8* %1090 to float*
  %1102 = bitcast i64* %1088 to float*
  %1103 = bitcast i8* %1093 to float*
  %.pre = load i64, i64* %PC, align 8
  %1104 = bitcast [32 x %union.VectorReg]* %7 to <4 x i32>*
  br label %block_40195e

block_401ac7:                                     ; preds = %block_401abb
  %1105 = add i64 %1441, -8
  %1106 = add i64 %1477, 4
  store i64 %1106, i64* %PC, align 8
  %1107 = inttoptr i64 %1105 to i64*
  %1108 = load i64, i64* %1107, align 8
  store i64 %1108, i64* %RAX, align 8, !tbaa !2428
  %1109 = add i64 %1441, -12
  %1110 = add i64 %1477, 7
  store i64 %1110, i64* %PC, align 8
  %1111 = inttoptr i64 %1109 to i32*
  %1112 = load i32, i32* %1111, align 4
  %1113 = zext i32 %1112 to i64
  store i64 %1113, i64* %RCX, align 8, !tbaa !2428
  %1114 = add i64 %1477, 11
  store i64 %1114, i64* %PC, align 8
  %1115 = load i32, i32* %1444, align 4
  %1116 = sext i32 %1112 to i64
  %1117 = sext i32 %1115 to i64
  %1118 = mul nsw i64 %1117, %1116
  %1119 = trunc i64 %1118 to i32
  %1120 = and i64 %1118, 4294967295
  store i64 %1120, i64* %RCX, align 8, !tbaa !2428
  %1121 = shl i64 %1118, 32
  %1122 = ashr exact i64 %1121, 32
  %1123 = icmp ne i64 %1122, %1118
  %1124 = zext i1 %1123 to i8
  store i8 %1124, i8* %18, align 1, !tbaa !2432
  %1125 = and i32 %1119, 255
  %1126 = tail call i32 @llvm.ctpop.i32(i32 %1125) #9
  %1127 = trunc i32 %1126 to i8
  %1128 = and i8 %1127, 1
  %1129 = xor i8 %1128, 1
  store i8 %1129, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1130 = lshr i32 %1119, 31
  %1131 = trunc i32 %1130 to i8
  store i8 %1131, i8* %36, align 1, !tbaa !2449
  store i8 %1124, i8* %42, align 1, !tbaa !2450
  %1132 = add i64 %1441, -52
  %1133 = add i64 %1477, 14
  store i64 %1133, i64* %PC, align 8
  %1134 = trunc i64 %1118 to i32
  %1135 = inttoptr i64 %1132 to i32*
  %1136 = load i32, i32* %1135, align 4
  %1137 = add i32 %1136, %1134
  %1138 = zext i32 %1137 to i64
  store i64 %1138, i64* %RCX, align 8, !tbaa !2428
  %1139 = icmp ult i32 %1137, %1134
  %1140 = icmp ult i32 %1137, %1136
  %1141 = or i1 %1139, %1140
  %1142 = zext i1 %1141 to i8
  store i8 %1142, i8* %18, align 1, !tbaa !2432
  %1143 = and i32 %1137, 255
  %1144 = tail call i32 @llvm.ctpop.i32(i32 %1143) #9
  %1145 = trunc i32 %1144 to i8
  %1146 = and i8 %1145, 1
  %1147 = xor i8 %1146, 1
  store i8 %1147, i8* %25, align 1, !tbaa !2446
  %1148 = xor i32 %1136, %1134
  %1149 = xor i32 %1148, %1137
  %1150 = lshr i32 %1149, 4
  %1151 = trunc i32 %1150 to i8
  %1152 = and i8 %1151, 1
  store i8 %1152, i8* %30, align 1, !tbaa !2447
  %1153 = icmp eq i32 %1137, 0
  %1154 = zext i1 %1153 to i8
  store i8 %1154, i8* %33, align 1, !tbaa !2448
  %1155 = lshr i32 %1137, 31
  %1156 = trunc i32 %1155 to i8
  store i8 %1156, i8* %36, align 1, !tbaa !2449
  %1157 = lshr i32 %1134, 31
  %1158 = lshr i32 %1136, 31
  %1159 = xor i32 %1155, %1157
  %1160 = xor i32 %1155, %1158
  %1161 = add nuw nsw i32 %1159, %1160
  %1162 = icmp eq i32 %1161, 2
  %1163 = zext i1 %1162 to i8
  store i8 %1163, i8* %42, align 1, !tbaa !2450
  %1164 = sext i32 %1137 to i64
  store i64 %1164, i64* %RDX, align 8, !tbaa !2428
  %1165 = shl nsw i64 %1164, 2
  %1166 = add i64 %1108, %1165
  %1167 = add i64 %1477, 22
  store i64 %1167, i64* %PC, align 8
  %1168 = inttoptr i64 %1166 to i32*
  %1169 = load i32, i32* %1168, align 4
  store i32 %1169, i32* %1089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1101, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1102, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1103, align 1, !tbaa !2451
  %1170 = add i64 %1441, -36
  %1171 = add i64 %1477, 27
  store i64 %1171, i64* %PC, align 8
  %1172 = load <2 x float>, <2 x float>* %1100, align 1
  %1173 = extractelement <2 x float> %1172, i32 0
  %1174 = inttoptr i64 %1170 to float*
  store float %1173, float* %1174, align 4
  %1175 = load i64, i64* %RBP, align 8
  %1176 = add i64 %1175, -52
  %1177 = load i64, i64* %PC, align 8
  %1178 = add i64 %1177, 3
  store i64 %1178, i64* %PC, align 8
  %1179 = inttoptr i64 %1176 to i32*
  %1180 = load i32, i32* %1179, align 4
  %1181 = zext i32 %1180 to i64
  store i64 %1181, i64* %RCX, align 8, !tbaa !2428
  %1182 = add i64 %1175, -44
  %1183 = add i64 %1177, 6
  store i64 %1183, i64* %PC, align 8
  %1184 = inttoptr i64 %1182 to i32*
  %1185 = load i32, i32* %1184, align 4
  %1186 = sub i32 %1180, %1185
  %1187 = icmp ult i32 %1180, %1185
  %1188 = zext i1 %1187 to i8
  store i8 %1188, i8* %18, align 1, !tbaa !2432
  %1189 = and i32 %1186, 255
  %1190 = tail call i32 @llvm.ctpop.i32(i32 %1189) #9
  %1191 = trunc i32 %1190 to i8
  %1192 = and i8 %1191, 1
  %1193 = xor i8 %1192, 1
  store i8 %1193, i8* %25, align 1, !tbaa !2446
  %1194 = xor i32 %1185, %1180
  %1195 = xor i32 %1194, %1186
  %1196 = lshr i32 %1195, 4
  %1197 = trunc i32 %1196 to i8
  %1198 = and i8 %1197, 1
  store i8 %1198, i8* %30, align 1, !tbaa !2447
  %1199 = icmp eq i32 %1186, 0
  %1200 = zext i1 %1199 to i8
  store i8 %1200, i8* %33, align 1, !tbaa !2448
  %1201 = lshr i32 %1186, 31
  %1202 = trunc i32 %1201 to i8
  store i8 %1202, i8* %36, align 1, !tbaa !2449
  %1203 = lshr i32 %1180, 31
  %1204 = lshr i32 %1185, 31
  %1205 = xor i32 %1204, %1203
  %1206 = xor i32 %1201, %1203
  %1207 = add nuw nsw i32 %1206, %1205
  %1208 = icmp eq i32 %1207, 2
  %1209 = zext i1 %1208 to i8
  store i8 %1209, i8* %42, align 1, !tbaa !2450
  %.v49 = select i1 %1199, i64 83, i64 12
  %1210 = add i64 %1177, %.v49
  store i64 %1210, i64* %PC, align 8, !tbaa !2428
  br i1 %1199, label %block_401b35, label %block_401aee

block_401b35:                                     ; preds = %block_401ac7, %block_401aee
  %1211 = phi i64 [ %1175, %block_401ac7 ], [ %.pre21, %block_401aee ]
  %1212 = phi i64 [ %1210, %block_401ac7 ], [ %.pre20, %block_401aee ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1213 = add i64 %1211, -16
  %1214 = add i64 %1212, 8
  store i64 %1214, i64* %PC, align 8
  %1215 = inttoptr i64 %1213 to i32*
  %1216 = load i32, i32* %1215, align 4
  %1217 = zext i32 %1216 to i64
  store i64 %1217, i64* %RCX, align 8, !tbaa !2428
  %1218 = add i64 %1211, -44
  %1219 = add i64 %1212, 11
  store i64 %1219, i64* %PC, align 8
  %1220 = inttoptr i64 %1218 to i32*
  %1221 = load i32, i32* %1220, align 4
  %1222 = add i32 %1221, 1
  %1223 = zext i32 %1222 to i64
  store i64 %1223, i64* %RDX, align 8, !tbaa !2428
  %1224 = lshr i32 %1222, 31
  %1225 = sub i32 %1216, %1222
  %1226 = zext i32 %1225 to i64
  store i64 %1226, i64* %RCX, align 8, !tbaa !2428
  %1227 = icmp ult i32 %1216, %1222
  %1228 = zext i1 %1227 to i8
  store i8 %1228, i8* %18, align 1, !tbaa !2432
  %1229 = and i32 %1225, 255
  %1230 = tail call i32 @llvm.ctpop.i32(i32 %1229) #9
  %1231 = trunc i32 %1230 to i8
  %1232 = and i8 %1231, 1
  %1233 = xor i8 %1232, 1
  store i8 %1233, i8* %25, align 1, !tbaa !2446
  %1234 = xor i32 %1222, %1216
  %1235 = xor i32 %1234, %1225
  %1236 = lshr i32 %1235, 4
  %1237 = trunc i32 %1236 to i8
  %1238 = and i8 %1237, 1
  store i8 %1238, i8* %30, align 1, !tbaa !2447
  %1239 = icmp eq i32 %1225, 0
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %33, align 1, !tbaa !2448
  %1241 = lshr i32 %1225, 31
  %1242 = trunc i32 %1241 to i8
  store i8 %1242, i8* %36, align 1, !tbaa !2449
  %1243 = lshr i32 %1216, 31
  %1244 = xor i32 %1224, %1243
  %1245 = xor i32 %1241, %1243
  %1246 = add nuw nsw i32 %1245, %1244
  %1247 = icmp eq i32 %1246, 2
  %1248 = zext i1 %1247 to i8
  store i8 %1248, i8* %42, align 1, !tbaa !2450
  %1249 = add i64 %1211, -36
  %1250 = add i64 %1212, 21
  store i64 %1250, i64* %PC, align 8
  %1251 = inttoptr i64 %1249 to i32*
  %1252 = load i32, i32* %1251, align 4
  store i32 %1252, i32* %1089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1101, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1102, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1103, align 1, !tbaa !2451
  %1253 = add i64 %1211, -8
  %1254 = add i64 %1212, 25
  store i64 %1254, i64* %PC, align 8
  %1255 = inttoptr i64 %1253 to i64*
  %1256 = load i64, i64* %1255, align 8
  store i64 %1256, i64* %RSI, align 8, !tbaa !2428
  %1257 = load i64, i64* %RBP, align 8
  %1258 = add i64 %1257, -12
  %1259 = add i64 %1212, 28
  store i64 %1259, i64* %PC, align 8
  %1260 = inttoptr i64 %1258 to i32*
  %1261 = load i32, i32* %1260, align 4
  %1262 = zext i32 %1261 to i64
  store i64 %1262, i64* %RDX, align 8, !tbaa !2428
  %1263 = add i64 %1257, -44
  %1264 = add i64 %1212, 32
  store i64 %1264, i64* %PC, align 8
  %1265 = inttoptr i64 %1263 to i32*
  %1266 = load i32, i32* %1265, align 4
  %1267 = sext i32 %1261 to i64
  %1268 = sext i32 %1266 to i64
  %1269 = mul nsw i64 %1268, %1267
  %1270 = trunc i64 %1269 to i32
  %1271 = and i64 %1269, 4294967295
  store i64 %1271, i64* %RDX, align 8, !tbaa !2428
  %1272 = shl i64 %1269, 32
  %1273 = ashr exact i64 %1272, 32
  %1274 = icmp ne i64 %1273, %1269
  %1275 = zext i1 %1274 to i8
  store i8 %1275, i8* %18, align 1, !tbaa !2432
  %1276 = and i32 %1270, 255
  %1277 = tail call i32 @llvm.ctpop.i32(i32 %1276) #9
  %1278 = trunc i32 %1277 to i8
  %1279 = and i8 %1278, 1
  %1280 = xor i8 %1279, 1
  store i8 %1280, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1281 = lshr i32 %1270, 31
  %1282 = trunc i32 %1281 to i8
  store i8 %1282, i8* %36, align 1, !tbaa !2449
  store i8 %1275, i8* %42, align 1, !tbaa !2450
  %1283 = add i64 %1212, 35
  store i64 %1283, i64* %PC, align 8
  %1284 = trunc i64 %1269 to i32
  %1285 = load i32, i32* %1265, align 4
  %1286 = add i32 %1285, %1284
  %1287 = add i32 %1286, 1
  %1288 = zext i32 %1287 to i64
  store i64 %1288, i64* %RDX, align 8, !tbaa !2428
  %1289 = sext i32 %1287 to i64
  %1290 = shl nsw i64 %1289, 2
  store i64 %1290, i64* %RDI, align 8, !tbaa !2428
  %1291 = load i64, i64* %RSI, align 8
  %1292 = add i64 %1290, %1291
  store i64 %1292, i64* %RSI, align 8, !tbaa !2428
  %1293 = icmp ult i64 %1292, %1291
  %1294 = icmp ult i64 %1292, %1290
  %1295 = or i1 %1293, %1294
  %1296 = zext i1 %1295 to i8
  store i8 %1296, i8* %18, align 1, !tbaa !2432
  %1297 = trunc i64 %1292 to i32
  %1298 = and i32 %1297, 255
  %1299 = tail call i32 @llvm.ctpop.i32(i32 %1298) #9
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  store i8 %1302, i8* %25, align 1, !tbaa !2446
  %1303 = xor i64 %1290, %1291
  %1304 = xor i64 %1303, %1292
  %1305 = lshr i64 %1304, 4
  %1306 = trunc i64 %1305 to i8
  %1307 = and i8 %1306, 1
  store i8 %1307, i8* %30, align 1, !tbaa !2447
  %1308 = icmp eq i64 %1292, 0
  %1309 = zext i1 %1308 to i8
  store i8 %1309, i8* %33, align 1, !tbaa !2448
  %1310 = lshr i64 %1292, 63
  %1311 = trunc i64 %1310 to i8
  store i8 %1311, i8* %36, align 1, !tbaa !2449
  %1312 = lshr i64 %1291, 63
  %1313 = lshr i64 %1289, 61
  %1314 = and i64 %1313, 1
  %1315 = xor i64 %1310, %1312
  %1316 = xor i64 %1310, %1314
  %1317 = add nuw nsw i64 %1315, %1316
  %1318 = icmp eq i64 %1317, 2
  %1319 = zext i1 %1318 to i8
  store i8 %1319, i8* %42, align 1, !tbaa !2450
  %1320 = load i64, i64* %RBP, align 8
  %1321 = add i64 %1320, -8
  %1322 = add i64 %1212, 52
  store i64 %1322, i64* %PC, align 8
  %1323 = inttoptr i64 %1321 to i64*
  %1324 = load i64, i64* %1323, align 8
  store i64 %1324, i64* %RDI, align 8, !tbaa !2428
  %1325 = add i64 %1320, -12
  %1326 = add i64 %1212, 55
  store i64 %1326, i64* %PC, align 8
  %1327 = inttoptr i64 %1325 to i32*
  %1328 = load i32, i32* %1327, align 4
  %1329 = zext i32 %1328 to i64
  store i64 %1329, i64* %RDX, align 8, !tbaa !2428
  %1330 = add i64 %1320, -40
  %1331 = add i64 %1212, 59
  store i64 %1331, i64* %PC, align 8
  %1332 = inttoptr i64 %1330 to i32*
  %1333 = load i32, i32* %1332, align 4
  %1334 = sext i32 %1328 to i64
  %1335 = sext i32 %1333 to i64
  %1336 = mul nsw i64 %1335, %1334
  %1337 = trunc i64 %1336 to i32
  %1338 = and i64 %1336, 4294967295
  store i64 %1338, i64* %RDX, align 8, !tbaa !2428
  %1339 = shl i64 %1336, 32
  %1340 = ashr exact i64 %1339, 32
  %1341 = icmp ne i64 %1340, %1336
  %1342 = zext i1 %1341 to i8
  store i8 %1342, i8* %18, align 1, !tbaa !2432
  %1343 = and i32 %1337, 255
  %1344 = tail call i32 @llvm.ctpop.i32(i32 %1343) #9
  %1345 = trunc i32 %1344 to i8
  %1346 = and i8 %1345, 1
  %1347 = xor i8 %1346, 1
  store i8 %1347, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1348 = lshr i32 %1337, 31
  %1349 = trunc i32 %1348 to i8
  store i8 %1349, i8* %36, align 1, !tbaa !2449
  store i8 %1342, i8* %42, align 1, !tbaa !2450
  %1350 = add i64 %1320, -44
  %1351 = add i64 %1212, 62
  store i64 %1351, i64* %PC, align 8
  %1352 = trunc i64 %1336 to i32
  %1353 = inttoptr i64 %1350 to i32*
  %1354 = load i32, i32* %1353, align 4
  %1355 = add i32 %1354, %1352
  %1356 = add i32 %1355, 1
  %1357 = sext i32 %1356 to i64
  %1358 = shl nsw i64 %1357, 2
  store i64 %1358, i64* %R8, align 8, !tbaa !2428
  %1359 = load i64, i64* %RDI, align 8
  %1360 = add i64 %1358, %1359
  %1361 = icmp ult i64 %1360, %1359
  %1362 = icmp ult i64 %1360, %1358
  %1363 = or i1 %1361, %1362
  %1364 = zext i1 %1363 to i8
  store i8 %1364, i8* %18, align 1, !tbaa !2432
  %1365 = trunc i64 %1360 to i32
  %1366 = and i32 %1365, 255
  %1367 = tail call i32 @llvm.ctpop.i32(i32 %1366) #9
  %1368 = trunc i32 %1367 to i8
  %1369 = and i8 %1368, 1
  %1370 = xor i8 %1369, 1
  store i8 %1370, i8* %25, align 1, !tbaa !2446
  %1371 = xor i64 %1358, %1359
  %1372 = xor i64 %1371, %1360
  %1373 = lshr i64 %1372, 4
  %1374 = trunc i64 %1373 to i8
  %1375 = and i8 %1374, 1
  store i8 %1375, i8* %30, align 1, !tbaa !2447
  %1376 = icmp eq i64 %1360, 0
  %1377 = zext i1 %1376 to i8
  store i8 %1377, i8* %33, align 1, !tbaa !2448
  %1378 = lshr i64 %1360, 63
  %1379 = trunc i64 %1378 to i8
  store i8 %1379, i8* %36, align 1, !tbaa !2449
  %1380 = lshr i64 %1359, 63
  %1381 = lshr i64 %1357, 61
  %1382 = and i64 %1381, 1
  %1383 = xor i64 %1378, %1380
  %1384 = xor i64 %1378, %1382
  %1385 = add nuw nsw i64 %1383, %1384
  %1386 = icmp eq i64 %1385, 2
  %1387 = zext i1 %1386 to i8
  store i8 %1387, i8* %42, align 1, !tbaa !2450
  %1388 = load i64, i64* %RBP, align 8
  %1389 = add i64 %1388, -64
  %1390 = add i64 %1212, 79
  store i64 %1390, i64* %PC, align 8
  %1391 = inttoptr i64 %1389 to i64*
  store i64 %1360, i64* %1391, align 8
  %1392 = load i32, i32* %ECX, align 4
  %1393 = zext i32 %1392 to i64
  %1394 = load i64, i64* %PC, align 8
  store i64 %1393, i64* %RDI, align 8, !tbaa !2428
  %1395 = load i32, i32* %EAX, align 4
  %1396 = zext i32 %1395 to i64
  store i64 %1396, i64* %RDX, align 8, !tbaa !2428
  %1397 = load i64, i64* %RBP, align 8
  %1398 = add i64 %1397, -64
  %1399 = add i64 %1394, 8
  store i64 %1399, i64* %PC, align 8
  %1400 = inttoptr i64 %1398 to i64*
  %1401 = load i64, i64* %1400, align 8
  store i64 %1401, i64* %RCX, align 8, !tbaa !2428
  store i64 %1396, i64* %R8, align 8, !tbaa !2428
  %1402 = add i64 %1394, 3308
  %1403 = add i64 %1394, 16
  %1404 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1405 = add i64 %1404, -8
  %1406 = inttoptr i64 %1405 to i64*
  store i64 %1403, i64* %1406, align 8
  store i64 %1405, i64* %RSP, align 8, !tbaa !2428
  store i64 %1402, i64* %PC, align 8, !tbaa !2428
  %1407 = tail call %struct.Memory* @sub_402870_daxpy(%struct.State* nonnull %0, i64 %1402, %struct.Memory* %MEMORY.5)
  %1408 = load i64, i64* %RBP, align 8
  %1409 = add i64 %1408, -40
  %1410 = load i64, i64* %PC, align 8
  %1411 = add i64 %1410, 3
  store i64 %1411, i64* %PC, align 8
  %1412 = inttoptr i64 %1409 to i32*
  %1413 = load i32, i32* %1412, align 4
  %1414 = add i32 %1413, 1
  %1415 = zext i32 %1414 to i64
  store i64 %1415, i64* %RAX, align 8, !tbaa !2428
  %1416 = icmp eq i32 %1413, -1
  %1417 = icmp eq i32 %1414, 0
  %1418 = or i1 %1416, %1417
  %1419 = zext i1 %1418 to i8
  store i8 %1419, i8* %18, align 1, !tbaa !2432
  %1420 = and i32 %1414, 255
  %1421 = tail call i32 @llvm.ctpop.i32(i32 %1420) #9
  %1422 = trunc i32 %1421 to i8
  %1423 = and i8 %1422, 1
  %1424 = xor i8 %1423, 1
  store i8 %1424, i8* %25, align 1, !tbaa !2446
  %1425 = xor i32 %1414, %1413
  %1426 = lshr i32 %1425, 4
  %1427 = trunc i32 %1426 to i8
  %1428 = and i8 %1427, 1
  store i8 %1428, i8* %30, align 1, !tbaa !2447
  %1429 = zext i1 %1417 to i8
  store i8 %1429, i8* %33, align 1, !tbaa !2448
  %1430 = lshr i32 %1414, 31
  %1431 = trunc i32 %1430 to i8
  store i8 %1431, i8* %36, align 1, !tbaa !2449
  %1432 = lshr i32 %1413, 31
  %1433 = xor i32 %1430, %1432
  %1434 = add nuw nsw i32 %1433, %1430
  %1435 = icmp eq i32 %1434, 2
  %1436 = zext i1 %1435 to i8
  store i8 %1436, i8* %42, align 1, !tbaa !2450
  %1437 = add i64 %1410, 9
  store i64 %1437, i64* %PC, align 8
  store i32 %1414, i32* %1412, align 4
  %1438 = load i64, i64* %PC, align 8
  %1439 = add i64 %1438, -226
  store i64 %1439, i64* %PC, align 8, !tbaa !2428
  br label %block_401abb

block_401abb:                                     ; preds = %block_401b35, %block_401a50
  %1440 = phi i64 [ %.pre17, %block_401a50 ], [ %1439, %block_401b35 ]
  %MEMORY.5 = phi %struct.Memory* [ %908, %block_401a50 ], [ %1407, %block_401b35 ]
  %1441 = load i64, i64* %RBP, align 8
  %1442 = add i64 %1441, -40
  %1443 = add i64 %1440, 3
  store i64 %1443, i64* %PC, align 8
  %1444 = inttoptr i64 %1442 to i32*
  %1445 = load i32, i32* %1444, align 4
  %1446 = zext i32 %1445 to i64
  store i64 %1446, i64* %RAX, align 8, !tbaa !2428
  %1447 = add i64 %1441, -16
  %1448 = add i64 %1440, 6
  store i64 %1448, i64* %PC, align 8
  %1449 = inttoptr i64 %1447 to i32*
  %1450 = load i32, i32* %1449, align 4
  %1451 = sub i32 %1445, %1450
  %1452 = icmp ult i32 %1445, %1450
  %1453 = zext i1 %1452 to i8
  store i8 %1453, i8* %18, align 1, !tbaa !2432
  %1454 = and i32 %1451, 255
  %1455 = tail call i32 @llvm.ctpop.i32(i32 %1454) #9
  %1456 = trunc i32 %1455 to i8
  %1457 = and i8 %1456, 1
  %1458 = xor i8 %1457, 1
  store i8 %1458, i8* %25, align 1, !tbaa !2446
  %1459 = xor i32 %1450, %1445
  %1460 = xor i32 %1459, %1451
  %1461 = lshr i32 %1460, 4
  %1462 = trunc i32 %1461 to i8
  %1463 = and i8 %1462, 1
  store i8 %1463, i8* %30, align 1, !tbaa !2447
  %1464 = icmp eq i32 %1451, 0
  %1465 = zext i1 %1464 to i8
  store i8 %1465, i8* %33, align 1, !tbaa !2448
  %1466 = lshr i32 %1451, 31
  %1467 = trunc i32 %1466 to i8
  store i8 %1467, i8* %36, align 1, !tbaa !2449
  %1468 = lshr i32 %1445, 31
  %1469 = lshr i32 %1450, 31
  %1470 = xor i32 %1469, %1468
  %1471 = xor i32 %1466, %1468
  %1472 = add nuw nsw i32 %1471, %1470
  %1473 = icmp eq i32 %1472, 2
  %1474 = zext i1 %1473 to i8
  store i8 %1474, i8* %42, align 1, !tbaa !2450
  %1475 = icmp ne i8 %1467, 0
  %1476 = xor i1 %1475, %1473
  %.v48 = select i1 %1476, i64 12, i64 231
  %1477 = add i64 %1440, %.v48
  store i64 %1477, i64* %PC, align 8, !tbaa !2428
  br i1 %1476, label %block_401ac7, label %block_401ba2

block_401bb0:                                     ; preds = %block_401ba2, %block_4019dd
  %1478 = phi i64 [ %1441, %block_401ba2 ], [ %.pre19, %block_4019dd ]
  %1479 = phi i64 [ %1510, %block_401ba2 ], [ %.pre18, %block_4019dd ]
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.5, %block_401ba2 ], [ %699, %block_4019dd ]
  %1480 = add i64 %1478, -44
  %1481 = add i64 %1479, 8
  store i64 %1481, i64* %PC, align 8
  %1482 = inttoptr i64 %1480 to i32*
  %1483 = load i32, i32* %1482, align 4
  %1484 = add i32 %1483, 1
  %1485 = zext i32 %1484 to i64
  store i64 %1485, i64* %RAX, align 8, !tbaa !2428
  %1486 = icmp eq i32 %1483, -1
  %1487 = icmp eq i32 %1484, 0
  %1488 = or i1 %1486, %1487
  %1489 = zext i1 %1488 to i8
  store i8 %1489, i8* %18, align 1, !tbaa !2432
  %1490 = and i32 %1484, 255
  %1491 = tail call i32 @llvm.ctpop.i32(i32 %1490) #9
  %1492 = trunc i32 %1491 to i8
  %1493 = and i8 %1492, 1
  %1494 = xor i8 %1493, 1
  store i8 %1494, i8* %25, align 1, !tbaa !2446
  %1495 = xor i32 %1484, %1483
  %1496 = lshr i32 %1495, 4
  %1497 = trunc i32 %1496 to i8
  %1498 = and i8 %1497, 1
  store i8 %1498, i8* %30, align 1, !tbaa !2447
  %1499 = zext i1 %1487 to i8
  store i8 %1499, i8* %33, align 1, !tbaa !2448
  %1500 = lshr i32 %1484, 31
  %1501 = trunc i32 %1500 to i8
  store i8 %1501, i8* %36, align 1, !tbaa !2449
  %1502 = lshr i32 %1483, 31
  %1503 = xor i32 %1500, %1502
  %1504 = add nuw nsw i32 %1503, %1500
  %1505 = icmp eq i32 %1504, 2
  %1506 = zext i1 %1505 to i8
  store i8 %1506, i8* %42, align 1, !tbaa !2450
  %1507 = add i64 %1479, 14
  store i64 %1507, i64* %PC, align 8
  store i32 %1484, i32* %1482, align 4
  %1508 = load i64, i64* %PC, align 8
  %1509 = add i64 %1508, -608
  store i64 %1509, i64* %PC, align 8, !tbaa !2428
  br label %block_40195e

block_401ba2:                                     ; preds = %block_401abb
  %1510 = add i64 %1477, 14
  store i64 %1510, i64* %PC, align 8, !tbaa !2428
  br label %block_401bb0

block_401c1d:                                     ; preds = %block_401c11, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_401c0b
  %1511 = phi i64 [ %.pre24, %block_401c11 ], [ %1083, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %129, %block_401c0b ]
  %1512 = load i64, i64* %RSP, align 8
  %1513 = add i64 %1512, 64
  store i64 %1513, i64* %RSP, align 8, !tbaa !2428
  %1514 = icmp ugt i64 %1512, -65
  %1515 = zext i1 %1514 to i8
  store i8 %1515, i8* %18, align 1, !tbaa !2432
  %1516 = trunc i64 %1513 to i32
  %1517 = and i32 %1516, 255
  %1518 = tail call i32 @llvm.ctpop.i32(i32 %1517) #9
  %1519 = trunc i32 %1518 to i8
  %1520 = and i8 %1519, 1
  %1521 = xor i8 %1520, 1
  store i8 %1521, i8* %25, align 1, !tbaa !2446
  %1522 = xor i64 %1513, %1512
  %1523 = lshr i64 %1522, 4
  %1524 = trunc i64 %1523 to i8
  %1525 = and i8 %1524, 1
  store i8 %1525, i8* %30, align 1, !tbaa !2447
  %1526 = icmp eq i64 %1513, 0
  %1527 = zext i1 %1526 to i8
  store i8 %1527, i8* %33, align 1, !tbaa !2448
  %1528 = lshr i64 %1513, 63
  %1529 = trunc i64 %1528 to i8
  store i8 %1529, i8* %36, align 1, !tbaa !2449
  %1530 = lshr i64 %1512, 63
  %1531 = xor i64 %1528, %1530
  %1532 = add nuw nsw i64 %1531, %1528
  %1533 = icmp eq i64 %1532, 2
  %1534 = zext i1 %1533 to i8
  store i8 %1534, i8* %42, align 1, !tbaa !2450
  %1535 = add i64 %1511, 5
  store i64 %1535, i64* %PC, align 8
  %1536 = add i64 %1512, 72
  %1537 = inttoptr i64 %1513 to i64*
  %1538 = load i64, i64* %1537, align 8
  store i64 %1538, i64* %RBP, align 8, !tbaa !2428
  store i64 %1536, i64* %RSP, align 8, !tbaa !2428
  %1539 = add i64 %1511, 6
  store i64 %1539, i64* %PC, align 8
  %1540 = inttoptr i64 %1536 to i64*
  %1541 = load i64, i64* %1540, align 8
  store i64 %1541, i64* %PC, align 8, !tbaa !2428
  %1542 = add i64 %1512, 80
  store i64 %1542, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %1081

block_401c11:                                     ; preds = %block_401c0b
  %1543 = load i64, i64* %RBP, align 8
  %1544 = add i64 %1543, -16
  %1545 = add i64 %129, 3
  store i64 %1545, i64* %PC, align 8
  %1546 = inttoptr i64 %1544 to i32*
  %1547 = load i32, i32* %1546, align 4
  %1548 = add i32 %1547, -1
  %1549 = zext i32 %1548 to i64
  store i64 %1549, i64* %RAX, align 8, !tbaa !2428
  %1550 = icmp eq i32 %1547, 0
  %1551 = zext i1 %1550 to i8
  store i8 %1551, i8* %18, align 1, !tbaa !2432
  %1552 = and i32 %1548, 255
  %1553 = tail call i32 @llvm.ctpop.i32(i32 %1552) #9
  %1554 = trunc i32 %1553 to i8
  %1555 = and i8 %1554, 1
  %1556 = xor i8 %1555, 1
  store i8 %1556, i8* %25, align 1, !tbaa !2446
  %1557 = xor i32 %1548, %1547
  %1558 = lshr i32 %1557, 4
  %1559 = trunc i32 %1558 to i8
  %1560 = and i8 %1559, 1
  store i8 %1560, i8* %30, align 1, !tbaa !2447
  %1561 = icmp eq i32 %1548, 0
  %1562 = zext i1 %1561 to i8
  store i8 %1562, i8* %33, align 1, !tbaa !2448
  %1563 = lshr i32 %1548, 31
  %1564 = trunc i32 %1563 to i8
  store i8 %1564, i8* %36, align 1, !tbaa !2449
  %1565 = lshr i32 %1547, 31
  %1566 = xor i32 %1563, %1565
  %1567 = add nuw nsw i32 %1566, %1565
  %1568 = icmp eq i32 %1567, 2
  %1569 = zext i1 %1568 to i8
  store i8 %1569, i8* %42, align 1, !tbaa !2450
  %1570 = add i64 %1543, -32
  %1571 = add i64 %129, 10
  store i64 %1571, i64* %PC, align 8
  %1572 = inttoptr i64 %1570 to i64*
  %1573 = load i64, i64* %1572, align 8
  store i64 %1573, i64* %RCX, align 8, !tbaa !2428
  %1574 = add i64 %129, 12
  store i64 %1574, i64* %PC, align 8
  %1575 = inttoptr i64 %1573 to i32*
  store i32 %1548, i32* %1575, align 4
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_401c1d

block_4019ee:                                     ; preds = %block_4019e2
  %1576 = add i64 %336, -8
  %1577 = add i64 %370, 4
  store i64 %1577, i64* %PC, align 8
  %1578 = inttoptr i64 %1576 to i64*
  %1579 = load i64, i64* %1578, align 8
  store i64 %1579, i64* %RAX, align 8, !tbaa !2428
  %1580 = add i64 %336, -12
  %1581 = add i64 %370, 7
  store i64 %1581, i64* %PC, align 8
  %1582 = inttoptr i64 %1580 to i32*
  %1583 = load i32, i32* %1582, align 4
  %1584 = zext i32 %1583 to i64
  store i64 %1584, i64* %RCX, align 8, !tbaa !2428
  %1585 = add i64 %370, 11
  store i64 %1585, i64* %PC, align 8
  %1586 = load i32, i32* %344, align 4
  %1587 = sext i32 %1583 to i64
  %1588 = sext i32 %1586 to i64
  %1589 = mul nsw i64 %1588, %1587
  %1590 = trunc i64 %1589 to i32
  %1591 = and i64 %1589, 4294967295
  store i64 %1591, i64* %RCX, align 8, !tbaa !2428
  %1592 = shl i64 %1589, 32
  %1593 = ashr exact i64 %1592, 32
  %1594 = icmp ne i64 %1593, %1589
  %1595 = zext i1 %1594 to i8
  store i8 %1595, i8* %18, align 1, !tbaa !2432
  %1596 = and i32 %1590, 255
  %1597 = tail call i32 @llvm.ctpop.i32(i32 %1596) #9
  %1598 = trunc i32 %1597 to i8
  %1599 = and i8 %1598, 1
  %1600 = xor i8 %1599, 1
  store i8 %1600, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1601 = lshr i32 %1590, 31
  %1602 = trunc i32 %1601 to i8
  store i8 %1602, i8* %36, align 1, !tbaa !2449
  store i8 %1595, i8* %42, align 1, !tbaa !2450
  %1603 = add i64 %370, 14
  store i64 %1603, i64* %PC, align 8
  %1604 = trunc i64 %1589 to i32
  %1605 = load i32, i32* %339, align 4
  %1606 = add i32 %1605, %1604
  %1607 = zext i32 %1606 to i64
  store i64 %1607, i64* %RCX, align 8, !tbaa !2428
  %1608 = icmp ult i32 %1606, %1604
  %1609 = icmp ult i32 %1606, %1605
  %1610 = or i1 %1608, %1609
  %1611 = zext i1 %1610 to i8
  store i8 %1611, i8* %18, align 1, !tbaa !2432
  %1612 = and i32 %1606, 255
  %1613 = tail call i32 @llvm.ctpop.i32(i32 %1612) #9
  %1614 = trunc i32 %1613 to i8
  %1615 = and i8 %1614, 1
  %1616 = xor i8 %1615, 1
  store i8 %1616, i8* %25, align 1, !tbaa !2446
  %1617 = xor i32 %1605, %1604
  %1618 = xor i32 %1617, %1606
  %1619 = lshr i32 %1618, 4
  %1620 = trunc i32 %1619 to i8
  %1621 = and i8 %1620, 1
  store i8 %1621, i8* %30, align 1, !tbaa !2447
  %1622 = icmp eq i32 %1606, 0
  %1623 = zext i1 %1622 to i8
  store i8 %1623, i8* %33, align 1, !tbaa !2448
  %1624 = lshr i32 %1606, 31
  %1625 = trunc i32 %1624 to i8
  store i8 %1625, i8* %36, align 1, !tbaa !2449
  %1626 = lshr i32 %1604, 31
  %1627 = lshr i32 %1605, 31
  %1628 = xor i32 %1624, %1626
  %1629 = xor i32 %1624, %1627
  %1630 = add nuw nsw i32 %1628, %1629
  %1631 = icmp eq i32 %1630, 2
  %1632 = zext i1 %1631 to i8
  store i8 %1632, i8* %42, align 1, !tbaa !2450
  %1633 = sext i32 %1606 to i64
  store i64 %1633, i64* %RDX, align 8, !tbaa !2428
  %1634 = shl nsw i64 %1633, 2
  %1635 = add i64 %1579, %1634
  %1636 = add i64 %370, 22
  store i64 %1636, i64* %PC, align 8
  %1637 = inttoptr i64 %1635 to i32*
  %1638 = load i32, i32* %1637, align 4
  store i32 %1638, i32* %1089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1101, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1102, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1103, align 1, !tbaa !2451
  %1639 = add i64 %336, -36
  %1640 = add i64 %370, 27
  store i64 %1640, i64* %PC, align 8
  %1641 = load <2 x float>, <2 x float>* %1100, align 1
  %1642 = extractelement <2 x float> %1641, i32 0
  %1643 = inttoptr i64 %1639 to float*
  store float %1642, float* %1643, align 4
  %1644 = load i64, i64* %RBP, align 8
  %1645 = add i64 %1644, -8
  %1646 = load i64, i64* %PC, align 8
  %1647 = add i64 %1646, 4
  store i64 %1647, i64* %PC, align 8
  %1648 = inttoptr i64 %1645 to i64*
  %1649 = load i64, i64* %1648, align 8
  store i64 %1649, i64* %RAX, align 8, !tbaa !2428
  %1650 = add i64 %1644, -12
  %1651 = add i64 %1646, 7
  store i64 %1651, i64* %PC, align 8
  %1652 = inttoptr i64 %1650 to i32*
  %1653 = load i32, i32* %1652, align 4
  %1654 = zext i32 %1653 to i64
  store i64 %1654, i64* %RCX, align 8, !tbaa !2428
  %1655 = add i64 %1644, -44
  %1656 = add i64 %1646, 11
  store i64 %1656, i64* %PC, align 8
  %1657 = inttoptr i64 %1655 to i32*
  %1658 = load i32, i32* %1657, align 4
  %1659 = sext i32 %1653 to i64
  %1660 = sext i32 %1658 to i64
  %1661 = mul nsw i64 %1660, %1659
  %1662 = trunc i64 %1661 to i32
  %1663 = and i64 %1661, 4294967295
  store i64 %1663, i64* %RCX, align 8, !tbaa !2428
  %1664 = shl i64 %1661, 32
  %1665 = ashr exact i64 %1664, 32
  %1666 = icmp ne i64 %1665, %1661
  %1667 = zext i1 %1666 to i8
  store i8 %1667, i8* %18, align 1, !tbaa !2432
  %1668 = and i32 %1662, 255
  %1669 = tail call i32 @llvm.ctpop.i32(i32 %1668) #9
  %1670 = trunc i32 %1669 to i8
  %1671 = and i8 %1670, 1
  %1672 = xor i8 %1671, 1
  store i8 %1672, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1673 = lshr i32 %1662, 31
  %1674 = trunc i32 %1673 to i8
  store i8 %1674, i8* %36, align 1, !tbaa !2449
  store i8 %1667, i8* %42, align 1, !tbaa !2450
  %1675 = add i64 %1646, 14
  store i64 %1675, i64* %PC, align 8
  %1676 = trunc i64 %1661 to i32
  %1677 = load i32, i32* %1657, align 4
  %1678 = add i32 %1677, %1676
  %1679 = zext i32 %1678 to i64
  store i64 %1679, i64* %RCX, align 8, !tbaa !2428
  %1680 = icmp ult i32 %1678, %1676
  %1681 = icmp ult i32 %1678, %1677
  %1682 = or i1 %1680, %1681
  %1683 = zext i1 %1682 to i8
  store i8 %1683, i8* %18, align 1, !tbaa !2432
  %1684 = and i32 %1678, 255
  %1685 = tail call i32 @llvm.ctpop.i32(i32 %1684) #9
  %1686 = trunc i32 %1685 to i8
  %1687 = and i8 %1686, 1
  %1688 = xor i8 %1687, 1
  store i8 %1688, i8* %25, align 1, !tbaa !2446
  %1689 = xor i32 %1677, %1676
  %1690 = xor i32 %1689, %1678
  %1691 = lshr i32 %1690, 4
  %1692 = trunc i32 %1691 to i8
  %1693 = and i8 %1692, 1
  store i8 %1693, i8* %30, align 1, !tbaa !2447
  %1694 = icmp eq i32 %1678, 0
  %1695 = zext i1 %1694 to i8
  store i8 %1695, i8* %33, align 1, !tbaa !2448
  %1696 = lshr i32 %1678, 31
  %1697 = trunc i32 %1696 to i8
  store i8 %1697, i8* %36, align 1, !tbaa !2449
  %1698 = lshr i32 %1676, 31
  %1699 = lshr i32 %1677, 31
  %1700 = xor i32 %1696, %1698
  %1701 = xor i32 %1696, %1699
  %1702 = add nuw nsw i32 %1700, %1701
  %1703 = icmp eq i32 %1702, 2
  %1704 = zext i1 %1703 to i8
  store i8 %1704, i8* %42, align 1, !tbaa !2450
  %1705 = sext i32 %1678 to i64
  store i64 %1705, i64* %RDX, align 8, !tbaa !2428
  %1706 = shl nsw i64 %1705, 2
  %1707 = add i64 %1649, %1706
  %1708 = add i64 %1646, 22
  store i64 %1708, i64* %PC, align 8
  %1709 = inttoptr i64 %1707 to i32*
  %1710 = load i32, i32* %1709, align 4
  store i32 %1710, i32* %1089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1101, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1102, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1103, align 1, !tbaa !2451
  %1711 = add i64 %1646, 26
  store i64 %1711, i64* %PC, align 8
  %1712 = load i64, i64* %1648, align 8
  store i64 %1712, i64* %RAX, align 8, !tbaa !2428
  %1713 = load i64, i64* %RBP, align 8
  %1714 = add i64 %1713, -12
  %1715 = add i64 %1646, 29
  store i64 %1715, i64* %PC, align 8
  %1716 = inttoptr i64 %1714 to i32*
  %1717 = load i32, i32* %1716, align 4
  %1718 = zext i32 %1717 to i64
  store i64 %1718, i64* %RCX, align 8, !tbaa !2428
  %1719 = add i64 %1713, -44
  %1720 = add i64 %1646, 33
  store i64 %1720, i64* %PC, align 8
  %1721 = inttoptr i64 %1719 to i32*
  %1722 = load i32, i32* %1721, align 4
  %1723 = sext i32 %1717 to i64
  %1724 = sext i32 %1722 to i64
  %1725 = mul nsw i64 %1724, %1723
  %1726 = trunc i64 %1725 to i32
  %1727 = and i64 %1725, 4294967295
  store i64 %1727, i64* %RCX, align 8, !tbaa !2428
  %1728 = shl i64 %1725, 32
  %1729 = ashr exact i64 %1728, 32
  %1730 = icmp ne i64 %1729, %1725
  %1731 = zext i1 %1730 to i8
  store i8 %1731, i8* %18, align 1, !tbaa !2432
  %1732 = and i32 %1726, 255
  %1733 = tail call i32 @llvm.ctpop.i32(i32 %1732) #9
  %1734 = trunc i32 %1733 to i8
  %1735 = and i8 %1734, 1
  %1736 = xor i8 %1735, 1
  store i8 %1736, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1737 = lshr i32 %1726, 31
  %1738 = trunc i32 %1737 to i8
  store i8 %1738, i8* %36, align 1, !tbaa !2449
  store i8 %1731, i8* %42, align 1, !tbaa !2450
  %1739 = add i64 %1713, -52
  %1740 = add i64 %1646, 36
  store i64 %1740, i64* %PC, align 8
  %1741 = trunc i64 %1725 to i32
  %1742 = inttoptr i64 %1739 to i32*
  %1743 = load i32, i32* %1742, align 4
  %1744 = add i32 %1743, %1741
  %1745 = zext i32 %1744 to i64
  store i64 %1745, i64* %RCX, align 8, !tbaa !2428
  %1746 = icmp ult i32 %1744, %1741
  %1747 = icmp ult i32 %1744, %1743
  %1748 = or i1 %1746, %1747
  %1749 = zext i1 %1748 to i8
  store i8 %1749, i8* %18, align 1, !tbaa !2432
  %1750 = and i32 %1744, 255
  %1751 = tail call i32 @llvm.ctpop.i32(i32 %1750) #9
  %1752 = trunc i32 %1751 to i8
  %1753 = and i8 %1752, 1
  %1754 = xor i8 %1753, 1
  store i8 %1754, i8* %25, align 1, !tbaa !2446
  %1755 = xor i32 %1743, %1741
  %1756 = xor i32 %1755, %1744
  %1757 = lshr i32 %1756, 4
  %1758 = trunc i32 %1757 to i8
  %1759 = and i8 %1758, 1
  store i8 %1759, i8* %30, align 1, !tbaa !2447
  %1760 = icmp eq i32 %1744, 0
  %1761 = zext i1 %1760 to i8
  store i8 %1761, i8* %33, align 1, !tbaa !2448
  %1762 = lshr i32 %1744, 31
  %1763 = trunc i32 %1762 to i8
  store i8 %1763, i8* %36, align 1, !tbaa !2449
  %1764 = lshr i32 %1741, 31
  %1765 = lshr i32 %1743, 31
  %1766 = xor i32 %1762, %1764
  %1767 = xor i32 %1762, %1765
  %1768 = add nuw nsw i32 %1766, %1767
  %1769 = icmp eq i32 %1768, 2
  %1770 = zext i1 %1769 to i8
  store i8 %1770, i8* %42, align 1, !tbaa !2450
  %1771 = sext i32 %1744 to i64
  store i64 %1771, i64* %RDX, align 8, !tbaa !2428
  %1772 = shl nsw i64 %1771, 2
  %1773 = add i64 %1712, %1772
  %1774 = add i64 %1646, 44
  store i64 %1774, i64* %PC, align 8
  %1775 = load <2 x float>, <2 x float>* %1100, align 1
  %1776 = extractelement <2 x float> %1775, i32 0
  %1777 = inttoptr i64 %1773 to float*
  store float %1776, float* %1777, align 4
  %1778 = load i64, i64* %RBP, align 8
  %1779 = add i64 %1778, -36
  %1780 = load i64, i64* %PC, align 8
  %1781 = add i64 %1780, 5
  store i64 %1781, i64* %PC, align 8
  %1782 = inttoptr i64 %1779 to i32*
  %1783 = load i32, i32* %1782, align 4
  store i32 %1783, i32* %1089, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1101, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1102, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1103, align 1, !tbaa !2451
  %1784 = add i64 %1778, -8
  %1785 = add i64 %1780, 9
  store i64 %1785, i64* %PC, align 8
  %1786 = inttoptr i64 %1784 to i64*
  %1787 = load i64, i64* %1786, align 8
  store i64 %1787, i64* %RAX, align 8, !tbaa !2428
  %1788 = add i64 %1778, -12
  %1789 = add i64 %1780, 12
  store i64 %1789, i64* %PC, align 8
  %1790 = inttoptr i64 %1788 to i32*
  %1791 = load i32, i32* %1790, align 4
  %1792 = zext i32 %1791 to i64
  store i64 %1792, i64* %RCX, align 8, !tbaa !2428
  %1793 = add i64 %1778, -44
  %1794 = add i64 %1780, 16
  store i64 %1794, i64* %PC, align 8
  %1795 = inttoptr i64 %1793 to i32*
  %1796 = load i32, i32* %1795, align 4
  %1797 = sext i32 %1791 to i64
  %1798 = sext i32 %1796 to i64
  %1799 = mul nsw i64 %1798, %1797
  %1800 = trunc i64 %1799 to i32
  %1801 = and i64 %1799, 4294967295
  store i64 %1801, i64* %RCX, align 8, !tbaa !2428
  %1802 = shl i64 %1799, 32
  %1803 = ashr exact i64 %1802, 32
  %1804 = icmp ne i64 %1803, %1799
  %1805 = zext i1 %1804 to i8
  store i8 %1805, i8* %18, align 1, !tbaa !2432
  %1806 = and i32 %1800, 255
  %1807 = tail call i32 @llvm.ctpop.i32(i32 %1806) #9
  %1808 = trunc i32 %1807 to i8
  %1809 = and i8 %1808, 1
  %1810 = xor i8 %1809, 1
  store i8 %1810, i8* %25, align 1, !tbaa !2446
  store i8 0, i8* %30, align 1, !tbaa !2447
  store i8 0, i8* %33, align 1, !tbaa !2448
  %1811 = lshr i32 %1800, 31
  %1812 = trunc i32 %1811 to i8
  store i8 %1812, i8* %36, align 1, !tbaa !2449
  store i8 %1805, i8* %42, align 1, !tbaa !2450
  %1813 = add i64 %1780, 19
  store i64 %1813, i64* %PC, align 8
  %1814 = trunc i64 %1799 to i32
  %1815 = load i32, i32* %1795, align 4
  %1816 = add i32 %1815, %1814
  %1817 = zext i32 %1816 to i64
  store i64 %1817, i64* %RCX, align 8, !tbaa !2428
  %1818 = icmp ult i32 %1816, %1814
  %1819 = icmp ult i32 %1816, %1815
  %1820 = or i1 %1818, %1819
  %1821 = zext i1 %1820 to i8
  store i8 %1821, i8* %18, align 1, !tbaa !2432
  %1822 = and i32 %1816, 255
  %1823 = tail call i32 @llvm.ctpop.i32(i32 %1822) #9
  %1824 = trunc i32 %1823 to i8
  %1825 = and i8 %1824, 1
  %1826 = xor i8 %1825, 1
  store i8 %1826, i8* %25, align 1, !tbaa !2446
  %1827 = xor i32 %1815, %1814
  %1828 = xor i32 %1827, %1816
  %1829 = lshr i32 %1828, 4
  %1830 = trunc i32 %1829 to i8
  %1831 = and i8 %1830, 1
  store i8 %1831, i8* %30, align 1, !tbaa !2447
  %1832 = icmp eq i32 %1816, 0
  %1833 = zext i1 %1832 to i8
  store i8 %1833, i8* %33, align 1, !tbaa !2448
  %1834 = lshr i32 %1816, 31
  %1835 = trunc i32 %1834 to i8
  store i8 %1835, i8* %36, align 1, !tbaa !2449
  %1836 = lshr i32 %1814, 31
  %1837 = lshr i32 %1815, 31
  %1838 = xor i32 %1834, %1836
  %1839 = xor i32 %1834, %1837
  %1840 = add nuw nsw i32 %1838, %1839
  %1841 = icmp eq i32 %1840, 2
  %1842 = zext i1 %1841 to i8
  store i8 %1842, i8* %42, align 1, !tbaa !2450
  %1843 = sext i32 %1816 to i64
  store i64 %1843, i64* %RDX, align 8, !tbaa !2428
  %1844 = shl nsw i64 %1843, 2
  %1845 = add i64 %1787, %1844
  %1846 = add i64 %1780, 27
  store i64 %1846, i64* %PC, align 8
  %1847 = load <2 x float>, <2 x float>* %1100, align 1
  %1848 = extractelement <2 x float> %1847, i32 0
  %1849 = inttoptr i64 %1845 to float*
  store float %1848, float* %1849, align 4
  %.pre15 = load i64, i64* %PC, align 8
  %.pre16 = load i64, i64* %RBP, align 8
  br label %block_401a50

block_4019d7:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1850 = load i8, i8* %25, align 1, !tbaa !2446
  %1851 = icmp ne i8 %1850, 0
  %.v54 = select i1 %1851, i64 11, i64 6
  %1852 = add i64 %701, %.v54
  store i64 %1852, i64* %PC, align 8, !tbaa !2428
  %1853 = icmp eq i8 %1850, 1
  br i1 %1853, label %block_4019e2, label %block_4019dd
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4027b0_epslon(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4027b0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %6 = load i64, i64* %RBP, align 8
  %7 = add i64 %1, 1
  store i64 %7, i64* %PC, align 8
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %6, i64* %11, align 8
  store i64 %10, i64* %8, align 8, !tbaa !2428
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = bitcast %union.VectorReg* %4 to i8*
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %15 = bitcast %union.VectorReg* %4 to i32*
  %16 = getelementptr inbounds i8, i8* %13, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = bitcast i64* %14 to i32*
  %19 = getelementptr inbounds i8, i8* %13, i64 12
  %20 = bitcast i8* %19 to i32*
  %21 = bitcast %union.VectorReg* %4 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %21, align 1, !tbaa !2456
  %22 = bitcast %union.VectorReg* %5 to i8*
  %23 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 16) to i32*), align 16
  %24 = bitcast %union.VectorReg* %5 to i32*
  store i32 %23, i32* %24, align 1, !tbaa !2451
  %25 = getelementptr inbounds i8, i8* %22, i64 4
  %26 = bitcast i8* %25 to float*
  store float 0.000000e+00, float* %26, align 1, !tbaa !2451
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %28 = bitcast i64* %27 to float*
  store float 0.000000e+00, float* %28, align 1, !tbaa !2451
  %29 = getelementptr inbounds i8, i8* %22, i64 12
  %30 = bitcast i8* %29 to float*
  store float 0.000000e+00, float* %30, align 1, !tbaa !2451
  %31 = add i64 %9, -12
  %32 = add i64 %12, 19
  store i64 %32, i64* %PC, align 8
  %33 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 1
  %35 = extractelement <2 x float> %34, i32 0
  %36 = inttoptr i64 %31 to float*
  store float %35, float* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -8
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 5
  store i64 %40, i64* %PC, align 8
  %41 = bitcast %union.VectorReg* %5 to <2 x float>*
  %42 = load <2 x float>, <2 x float>* %41, align 1
  %43 = extractelement <2 x float> %42, i32 0
  %44 = inttoptr i64 %38 to float*
  store float %43, float* %44, align 4
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -20
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 5
  store i64 %48, i64* %PC, align 8
  %49 = bitcast %union.VectorReg* %4 to <2 x float>*
  %50 = load <2 x float>, <2 x float>* %49, align 1
  %51 = extractelement <2 x float> %50, i32 0
  %52 = inttoptr i64 %46 to float*
  store float %51, float* %52, align 4
  %53 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %55 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %3, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %56 = bitcast [32 x %union.VectorReg]* %3 to i32*
  %57 = getelementptr inbounds i8, i8* %53, i64 4
  %58 = bitcast i8* %57 to i32*
  %59 = bitcast i64* %54 to i32*
  %60 = getelementptr inbounds i8, i8* %53, i64 12
  %61 = bitcast i8* %60 to i32*
  %62 = bitcast %union.VectorReg* %4 to double*
  %63 = bitcast [32 x %union.VectorReg]* %3 to double*
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %66 = bitcast i64* %54 to double*
  %67 = bitcast i64* %14 to <2 x i32>*
  %68 = bitcast %union.VectorReg* %4 to float*
  %69 = bitcast i8* %16 to float*
  %70 = bitcast i64* %14 to float*
  %71 = bitcast i8* %19 to float*
  %72 = bitcast [32 x %union.VectorReg]* %3 to float*
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre = load i64, i64* %PC, align 8
  %77 = bitcast [32 x %union.VectorReg]* %3 to <4 x i32>*
  %78 = bitcast i64* %14 to <2 x i32>*
  br label %block_4027ce

block_402836:                                     ; preds = %block_4027e0, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %79 = phi i64 [ %258, %block_4027e0 ], [ %161, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ]
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -20
  %82 = add i64 %79, 5
  store i64 %82, i64* %PC, align 8
  %83 = inttoptr i64 %81 to float*
  %84 = load float, float* %83, align 4
  %85 = fpext float %84 to double
  store double %85, double* %63, align 1, !tbaa !2454
  %86 = add i64 %80, -4
  %87 = add i64 %79, 10
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to float*
  %89 = load float, float* %88, align 4
  %90 = fpext float %89 to double
  %91 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %92 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %93 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %94 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %91, i32* %24, align 1, !tbaa !2451
  %95 = bitcast i8* %25 to i32*
  store i32 %92, i32* %95, align 1, !tbaa !2451
  %96 = bitcast i64* %27 to i32*
  store i32 %93, i32* %96, align 1, !tbaa !2451
  %97 = bitcast i8* %29 to i32*
  store i32 %94, i32* %97, align 1, !tbaa !2451
  %98 = bitcast double %90 to i64
  %99 = load i64, i64* %14, align 1
  %100 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  %101 = load i64, i64* %100, align 1
  %102 = load i64, i64* %27, align 1
  %103 = and i64 %101, %98
  %104 = and i64 %102, %99
  %105 = trunc i64 %103 to i32
  %106 = lshr i64 %103, 32
  %107 = trunc i64 %106 to i32
  store i32 %105, i32* %15, align 1, !tbaa !2456
  store i32 %107, i32* %17, align 1, !tbaa !2456
  %108 = trunc i64 %104 to i32
  store i32 %108, i32* %18, align 1, !tbaa !2456
  %109 = lshr i64 %104, 32
  %110 = trunc i64 %109 to i32
  store i32 %110, i32* %20, align 1, !tbaa !2456
  %111 = bitcast i64* %54 to <2 x i32>*
  %112 = load <2 x i32>, <2 x i32>* %111, align 1
  %113 = load double, double* %62, align 1
  %114 = fmul double %85, %113
  %.cast3 = bitcast double %114 to <2 x i32>
  %115 = fptrunc double %114 to float
  store float %115, float* %72, align 1, !tbaa !2451
  %116 = extractelement <2 x i32> %.cast3, i32 1
  store i32 %116, i32* %58, align 1, !tbaa !2451
  %117 = extractelement <2 x i32> %112, i32 0
  store i32 %117, i32* %59, align 1, !tbaa !2451
  %118 = extractelement <2 x i32> %112, i32 1
  store i32 %118, i32* %61, align 1, !tbaa !2451
  %119 = add i64 %79, 30
  store i64 %119, i64* %PC, align 8
  %120 = load i64, i64* %8, align 8, !tbaa !2428
  %121 = add i64 %120, 8
  %122 = inttoptr i64 %120 to i64*
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %RBP, align 8, !tbaa !2428
  store i64 %121, i64* %8, align 8, !tbaa !2428
  %124 = add i64 %79, 31
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %121 to i64*
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  %127 = add i64 %120, 16
  store i64 %127, i64* %8, align 8, !tbaa !2428
  ret %struct.Memory* %160

block_4027ce:                                     ; preds = %block_4027e6, %block_4027b0
  %128 = phi i64 [ %.pre, %block_4027b0 ], [ %255, %block_4027e6 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4027b0 ], [ %160, %block_4027e6 ]
  store <4 x i32> zeroinitializer, <4 x i32>* %77, align 1, !tbaa !2456
  %129 = load i64, i64* %RBP, align 8
  %130 = add i64 %129, -20
  %131 = add i64 %128, 8
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to float*
  %133 = load float, float* %132, align 4
  %134 = fpext float %133 to double
  store double %134, double* %62, align 1, !tbaa !2454
  %135 = add i64 %128, 12
  store i64 %135, i64* %PC, align 8
  %136 = load double, double* %63, align 1
  %137 = fcmp uno double %134, %136
  br i1 %137, label %138, label %148

; <label>:138:                                    ; preds = %block_4027ce
  %139 = fadd double %134, %136
  %140 = bitcast double %139 to i64
  %141 = and i64 %140, 9221120237041090560
  %142 = icmp eq i64 %141, 9218868437227405312
  %143 = and i64 %140, 2251799813685247
  %144 = icmp ne i64 %143, 0
  %145 = and i1 %142, %144
  br i1 %145, label %146, label %154

; <label>:146:                                    ; preds = %138
  %147 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %135, %struct.Memory* %MEMORY.1) #12
  %.pre11 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:148:                                    ; preds = %block_4027ce
  %149 = fcmp ogt double %134, %136
  br i1 %149, label %154, label %150

; <label>:150:                                    ; preds = %148
  %151 = fcmp olt double %134, %136
  br i1 %151, label %154, label %152

; <label>:152:                                    ; preds = %150
  %153 = fcmp oeq double %134, %136
  br i1 %153, label %154, label %158

; <label>:154:                                    ; preds = %152, %150, %148, %138
  %155 = phi i8 [ 0, %148 ], [ 0, %150 ], [ 1, %152 ], [ 1, %138 ]
  %156 = phi i8 [ 0, %148 ], [ 0, %150 ], [ 0, %152 ], [ 1, %138 ]
  %157 = phi i8 [ 0, %148 ], [ 1, %150 ], [ 0, %152 ], [ 1, %138 ]
  store i8 %155, i8* %64, align 1, !tbaa !2453
  store i8 %156, i8* %65, align 1, !tbaa !2453
  store i8 %157, i8* %73, align 1, !tbaa !2453
  br label %158

; <label>:158:                                    ; preds = %154, %152
  store i8 0, i8* %74, align 1, !tbaa !2453
  store i8 0, i8* %75, align 1, !tbaa !2453
  store i8 0, i8* %76, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %158, %146
  %159 = phi i64 [ %.pre11, %146 ], [ %135, %158 ]
  %160 = phi %struct.Memory* [ %147, %146 ], [ %MEMORY.1, %158 ]
  %161 = add i64 %159, 92
  %162 = add i64 %159, 6
  %163 = load i8, i8* %64, align 1, !tbaa !2448
  %164 = icmp eq i8 %163, 0
  %165 = select i1 %164, i64 %161, i64 %162
  store i64 %165, i64* %PC, align 8, !tbaa !2428
  br i1 %164, label %block_402836, label %block_4027e0

block_4027e6:                                     ; preds = %block_4027e0
  %166 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 80) to i64*), align 16
  store i64 %166, i64* %55, align 1, !tbaa !2454
  store double 0.000000e+00, double* %66, align 1, !tbaa !2454
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -8
  %169 = add i64 %258, 13
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to float*
  %171 = load float, float* %170, align 4
  %172 = fpext float %171 to double
  %173 = load <2 x i32>, <2 x i32>* %78, align 1
  %174 = bitcast i64 %166 to double
  %175 = fsub double %172, %174
  %.cast = bitcast double %175 to <2 x i32>
  %176 = fptrunc double %175 to float
  store float %176, float* %68, align 1, !tbaa !2451
  %177 = extractelement <2 x i32> %.cast, i32 1
  store i32 %177, i32* %17, align 1, !tbaa !2451
  %178 = extractelement <2 x i32> %173, i32 0
  store i32 %178, i32* %18, align 1, !tbaa !2451
  %179 = extractelement <2 x i32> %173, i32 1
  store i32 %179, i32* %20, align 1, !tbaa !2451
  %180 = add i64 %167, -12
  %181 = add i64 %258, 26
  store i64 %181, i64* %PC, align 8
  %182 = load <2 x float>, <2 x float>* %49, align 1
  %183 = extractelement <2 x float> %182, i32 0
  %184 = inttoptr i64 %180 to float*
  store float %183, float* %184, align 4
  %185 = load i64, i64* %RBP, align 8
  %186 = add i64 %185, -12
  %187 = load i64, i64* %PC, align 8
  %188 = add i64 %187, 5
  store i64 %188, i64* %PC, align 8
  %189 = inttoptr i64 %186 to i32*
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %15, align 1, !tbaa !2451
  store float 0.000000e+00, float* %69, align 1, !tbaa !2451
  store float 0.000000e+00, float* %70, align 1, !tbaa !2451
  store float 0.000000e+00, float* %71, align 1, !tbaa !2451
  %191 = add i64 %187, 10
  store i64 %191, i64* %PC, align 8
  %192 = load <2 x float>, <2 x float>* %49, align 1
  %193 = load <2 x i32>, <2 x i32>* %67, align 1
  %194 = inttoptr i64 %186 to float*
  %195 = load float, float* %194, align 4
  %196 = extractelement <2 x float> %192, i32 0
  %197 = fadd float %196, %195
  store float %197, float* %68, align 1, !tbaa !2451
  %198 = bitcast <2 x float> %192 to <2 x i32>
  %199 = extractelement <2 x i32> %198, i32 1
  store i32 %199, i32* %17, align 1, !tbaa !2451
  %200 = extractelement <2 x i32> %193, i32 0
  store i32 %200, i32* %18, align 1, !tbaa !2451
  %201 = extractelement <2 x i32> %193, i32 1
  store i32 %201, i32* %20, align 1, !tbaa !2451
  %202 = add i64 %187, 15
  store i64 %202, i64* %PC, align 8
  %203 = load <2 x float>, <2 x float>* %49, align 1
  %204 = load <2 x i32>, <2 x i32>* %67, align 1
  %205 = load float, float* %194, align 4
  %206 = extractelement <2 x float> %203, i32 0
  %207 = fadd float %206, %205
  store float %207, float* %68, align 1, !tbaa !2451
  %208 = bitcast <2 x float> %203 to <2 x i32>
  %209 = extractelement <2 x i32> %208, i32 1
  store i32 %209, i32* %17, align 1, !tbaa !2451
  %210 = extractelement <2 x i32> %204, i32 0
  store i32 %210, i32* %18, align 1, !tbaa !2451
  %211 = extractelement <2 x i32> %204, i32 1
  store i32 %211, i32* %20, align 1, !tbaa !2451
  %212 = add i64 %185, -16
  %213 = add i64 %187, 20
  store i64 %213, i64* %PC, align 8
  %214 = load <2 x float>, <2 x float>* %49, align 1
  %215 = extractelement <2 x float> %214, i32 0
  %216 = inttoptr i64 %212 to float*
  store float %215, float* %216, align 4
  %217 = load i64, i64* %RBP, align 8
  %218 = add i64 %217, -16
  %219 = load i64, i64* %PC, align 8
  %220 = add i64 %219, 5
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %218 to float*
  %222 = load float, float* %221, align 4
  %223 = fpext float %222 to double
  %224 = load i64, i64* %14, align 1
  %225 = load double, double* %63, align 1
  %226 = fsub double %223, %225
  %227 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %228 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %229 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %230 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %227, i32* %56, align 1, !tbaa !2451
  store i32 %228, i32* %58, align 1, !tbaa !2451
  store i32 %229, i32* %59, align 1, !tbaa !2451
  store i32 %230, i32* %61, align 1, !tbaa !2451
  %231 = bitcast double %226 to i64
  %232 = load i64, i64* %55, align 1
  %233 = load i64, i64* %54, align 1
  %234 = and i64 %232, %231
  %235 = and i64 %233, %224
  %236 = trunc i64 %234 to i32
  %237 = lshr i64 %234, 32
  %238 = trunc i64 %237 to i32
  store i32 %236, i32* %15, align 1, !tbaa !2456
  store i32 %238, i32* %17, align 1, !tbaa !2456
  %239 = trunc i64 %235 to i32
  store i32 %239, i32* %18, align 1, !tbaa !2456
  %240 = lshr i64 %235, 32
  %241 = trunc i64 %240 to i32
  store i32 %241, i32* %20, align 1, !tbaa !2456
  %242 = bitcast i64 %232 to <2 x i32>
  %243 = bitcast i64 %233 to <2 x i32>
  %244 = load double, double* %62, align 1
  %245 = fptrunc double %244 to float
  store float %245, float* %72, align 1, !tbaa !2451
  %246 = extractelement <2 x i32> %242, i32 1
  store i32 %246, i32* %58, align 1, !tbaa !2451
  %247 = extractelement <2 x i32> %243, i32 0
  store i32 %247, i32* %59, align 1, !tbaa !2451
  %248 = extractelement <2 x i32> %243, i32 1
  store i32 %248, i32* %61, align 1, !tbaa !2451
  %249 = add i64 %217, -20
  %250 = add i64 %219, 29
  store i64 %250, i64* %PC, align 8
  %251 = load <2 x float>, <2 x float>* %33, align 1
  %252 = extractelement <2 x float> %251, i32 0
  %253 = inttoptr i64 %249 to float*
  store float %252, float* %253, align 4
  %254 = load i64, i64* %PC, align 8
  %255 = add i64 %254, -99
  store i64 %255, i64* %PC, align 8, !tbaa !2428
  br label %block_4027ce

block_4027e0:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %256 = load i8, i8* %65, align 1, !tbaa !2446
  %257 = icmp ne i8 %256, 0
  %.v = select i1 %257, i64 86, i64 6
  %258 = add i64 %165, %.v
  store i64 %258, i64* %PC, align 8, !tbaa !2428
  %259 = icmp eq i8 %256, 1
  br i1 %259, label %block_402836, label %block_4027e6
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401c30_dgesl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401c30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %6 to i32*
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0
  %R9D = bitcast %union.anon* %7 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -104
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = icmp ult i64 %13, 96
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !2432
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #9
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !2446
  %27 = xor i64 %13, %16
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %16, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %16, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %13, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = add i64 %12, -16
  %45 = load i64, i64* %RDI, align 8
  %46 = add i64 %15, 11
  store i64 %46, i64* %PC, align 8
  %47 = inttoptr i64 %44 to i64*
  store i64 %45, i64* %47, align 8
  %48 = load i64, i64* %RBP, align 8
  %49 = add i64 %48, -12
  %50 = load i32, i32* %ESI, align 4
  %51 = load i64, i64* %PC, align 8
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC, align 8
  %53 = inttoptr i64 %49 to i32*
  store i32 %50, i32* %53, align 4
  %54 = load i64, i64* %RBP, align 8
  %55 = add i64 %54, -16
  %56 = load i32, i32* %EDX, align 4
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 3
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %55 to i32*
  store i32 %56, i32* %59, align 4
  %60 = load i64, i64* %RBP, align 8
  %61 = add i64 %60, -24
  %62 = load i64, i64* %RCX, align 8
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %61 to i64*
  store i64 %62, i64* %65, align 8
  %66 = load i64, i64* %RBP, align 8
  %67 = add i64 %66, -32
  %68 = load i64, i64* %R8, align 8
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %67 to i64*
  store i64 %68, i64* %71, align 8
  %72 = load i64, i64* %RBP, align 8
  %73 = add i64 %72, -36
  %74 = load i32, i32* %R9D, align 4
  %75 = load i64, i64* %PC, align 8
  %76 = add i64 %75, 4
  store i64 %76, i64* %PC, align 8
  %77 = inttoptr i64 %73 to i32*
  store i32 %74, i32* %77, align 4
  %78 = load i64, i64* %RBP, align 8
  %79 = add i64 %78, -16
  %80 = load i64, i64* %PC, align 8
  %81 = add i64 %80, 3
  store i64 %81, i64* %PC, align 8
  %82 = inttoptr i64 %79 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = add i32 %83, -1
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %RDX, align 8, !tbaa !2428
  %86 = icmp eq i32 %83, 0
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %19, align 1, !tbaa !2432
  %88 = and i32 %84, 255
  %89 = tail call i32 @llvm.ctpop.i32(i32 %88) #9
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 1
  %92 = xor i8 %91, 1
  store i8 %92, i8* %26, align 1, !tbaa !2446
  %93 = xor i32 %84, %83
  %94 = lshr i32 %93, 4
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  store i8 %96, i8* %31, align 1, !tbaa !2447
  %97 = icmp eq i32 %84, 0
  %98 = zext i1 %97 to i8
  store i8 %98, i8* %34, align 1, !tbaa !2448
  %99 = lshr i32 %84, 31
  %100 = trunc i32 %99 to i8
  store i8 %100, i8* %37, align 1, !tbaa !2449
  %101 = lshr i32 %83, 31
  %102 = xor i32 %99, %101
  %103 = add nuw nsw i32 %102, %101
  %104 = icmp eq i32 %103, 2
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %43, align 1, !tbaa !2450
  %106 = add i64 %78, -56
  %107 = add i64 %80, 9
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %106 to i32*
  store i32 %84, i32* %108, align 4
  %109 = load i64, i64* %RBP, align 8
  %110 = add i64 %109, -36
  %111 = load i64, i64* %PC, align 8
  %112 = add i64 %111, 4
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %110 to i32*
  %114 = load i32, i32* %113, align 4
  store i8 0, i8* %19, align 1, !tbaa !2432
  %115 = and i32 %114, 255
  %116 = tail call i32 @llvm.ctpop.i32(i32 %115) #9
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  %119 = xor i8 %118, 1
  store i8 %119, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  %120 = icmp eq i32 %114, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %34, align 1, !tbaa !2448
  %122 = lshr i32 %114, 31
  %123 = trunc i32 %122 to i8
  store i8 %123, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %.v = select i1 %120, i64 10, i64 417
  %124 = add i64 %111, %.v
  store i64 %124, i64* %PC, align 8, !tbaa !2428
  br i1 %120, label %block_401c61, label %block_401df8

block_401dff:                                     ; preds = %block_401e0b, %block_401df8
  %125 = phi i64 [ %1585, %block_401e0b ], [ %.pre24, %block_401df8 ]
  %126 = load i64, i64* %RBP, align 8
  %127 = add i64 %126, -44
  %128 = add i64 %125, 3
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = add i64 %126, -16
  %133 = add i64 %125, 6
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i32*
  %135 = load i32, i32* %134, align 4
  %136 = sub i32 %130, %135
  %137 = icmp ult i32 %130, %135
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %19, align 1, !tbaa !2432
  %139 = and i32 %136, 255
  %140 = tail call i32 @llvm.ctpop.i32(i32 %139) #9
  %141 = trunc i32 %140 to i8
  %142 = and i8 %141, 1
  %143 = xor i8 %142, 1
  store i8 %143, i8* %26, align 1, !tbaa !2446
  %144 = xor i32 %135, %130
  %145 = xor i32 %144, %136
  %146 = lshr i32 %145, 4
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  store i8 %148, i8* %31, align 1, !tbaa !2447
  %149 = icmp eq i32 %136, 0
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %34, align 1, !tbaa !2448
  %151 = lshr i32 %136, 31
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %37, align 1, !tbaa !2449
  %153 = lshr i32 %130, 31
  %154 = lshr i32 %135, 31
  %155 = xor i32 %154, %153
  %156 = xor i32 %151, %153
  %157 = add nuw nsw i32 %156, %155
  %158 = icmp eq i32 %157, 2
  %159 = zext i1 %158 to i8
  store i8 %159, i8* %43, align 1, !tbaa !2450
  %160 = icmp ne i8 %152, 0
  %161 = xor i1 %160, %158
  %.v46 = select i1 %161, i64 12, i64 141
  %162 = add i64 %125, %.v46
  store i64 %162, i64* %PC, align 8, !tbaa !2428
  br i1 %161, label %block_401e0b, label %block_401e8c

block_401df3:                                     ; preds = %block_401d48
  %163 = add i64 %911, 436
  br label %block_401fa7

block_401c72:                                     ; preds = %block_401cd6, %block_401c6b
  %164 = phi i64 [ %.pre, %block_401c6b ], [ %532, %block_401cd6 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401c6b ], [ %500, %block_401cd6 ]
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -44
  %167 = add i64 %164, 3
  store i64 %167, i64* %PC, align 8
  %168 = inttoptr i64 %166 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %RAX, align 8, !tbaa !2428
  %171 = add i64 %165, -56
  %172 = add i64 %164, 6
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %171 to i32*
  %174 = load i32, i32* %173, align 4
  %175 = sub i32 %169, %174
  %176 = icmp ult i32 %169, %174
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %19, align 1, !tbaa !2432
  %178 = and i32 %175, 255
  %179 = tail call i32 @llvm.ctpop.i32(i32 %178) #9
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = xor i8 %181, 1
  store i8 %182, i8* %26, align 1, !tbaa !2446
  %183 = xor i32 %174, %169
  %184 = xor i32 %183, %175
  %185 = lshr i32 %184, 4
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  store i8 %187, i8* %31, align 1, !tbaa !2447
  %188 = icmp eq i32 %175, 0
  %189 = zext i1 %188 to i8
  store i8 %189, i8* %34, align 1, !tbaa !2448
  %190 = lshr i32 %175, 31
  %191 = trunc i32 %190 to i8
  store i8 %191, i8* %37, align 1, !tbaa !2449
  %192 = lshr i32 %169, 31
  %193 = lshr i32 %174, 31
  %194 = xor i32 %193, %192
  %195 = xor i32 %190, %192
  %196 = add nuw nsw i32 %195, %194
  %197 = icmp eq i32 %196, 2
  %198 = zext i1 %197 to i8
  store i8 %198, i8* %43, align 1, !tbaa !2450
  %199 = icmp ne i8 %191, 0
  %200 = xor i1 %199, %197
  %.v51 = select i1 %200, i64 12, i64 202
  %201 = add i64 %164, %.v51
  store i64 %201, i64* %PC, align 8, !tbaa !2428
  br i1 %200, label %block_401c7e, label %block_401d3c

block_401c6b:                                     ; preds = %block_401c61
  %202 = add i64 %109, -44
  %203 = add i64 %314, 7
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to i32*
  store i32 0, i32* %204, align 4
  %205 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %206 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %207 = getelementptr inbounds i8, i8* %205, i64 4
  %208 = bitcast i8* %207 to float*
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %210 = bitcast i64* %209 to float*
  %211 = getelementptr inbounds i8, i8* %205, i64 12
  %212 = bitcast i8* %211 to float*
  %213 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_401c72

block_401c7e:                                     ; preds = %block_401c72
  %214 = add i64 %165, -24
  %215 = add i64 %201, 4
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  store i64 %217, i64* %RAX, align 8, !tbaa !2428
  %218 = add i64 %201, 8
  store i64 %218, i64* %PC, align 8
  %219 = load i32, i32* %168, align 4
  %220 = sext i32 %219 to i64
  store i64 %220, i64* %RCX, align 8, !tbaa !2428
  %221 = shl nsw i64 %220, 2
  %222 = add i64 %221, %217
  %223 = add i64 %201, 11
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %222 to i32*
  %225 = load i32, i32* %224, align 4
  %226 = zext i32 %225 to i64
  store i64 %226, i64* %RDX, align 8, !tbaa !2428
  %227 = add i64 %165, -52
  %228 = add i64 %201, 14
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %227 to i32*
  store i32 %225, i32* %229, align 4
  %230 = load i64, i64* %RBP, align 8
  %231 = add i64 %230, -32
  %232 = load i64, i64* %PC, align 8
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC, align 8
  %234 = inttoptr i64 %231 to i64*
  %235 = load i64, i64* %234, align 8
  store i64 %235, i64* %RAX, align 8, !tbaa !2428
  %236 = add i64 %230, -52
  %237 = add i64 %232, 8
  store i64 %237, i64* %PC, align 8
  %238 = inttoptr i64 %236 to i32*
  %239 = load i32, i32* %238, align 4
  %240 = sext i32 %239 to i64
  store i64 %240, i64* %RCX, align 8, !tbaa !2428
  %241 = shl nsw i64 %240, 2
  %242 = add i64 %241, %235
  %243 = add i64 %232, 13
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %242 to i32*
  %245 = load i32, i32* %244, align 4
  store i32 %245, i32* %206, align 1, !tbaa !2451
  store float 0.000000e+00, float* %208, align 1, !tbaa !2451
  store float 0.000000e+00, float* %210, align 1, !tbaa !2451
  store float 0.000000e+00, float* %212, align 1, !tbaa !2451
  %246 = add i64 %230, -40
  %247 = add i64 %232, 18
  store i64 %247, i64* %PC, align 8
  %248 = load <2 x float>, <2 x float>* %213, align 1
  %249 = extractelement <2 x float> %248, i32 0
  %250 = inttoptr i64 %246 to float*
  store float %249, float* %250, align 4
  %251 = load i64, i64* %RBP, align 8
  %252 = add i64 %251, -52
  %253 = load i64, i64* %PC, align 8
  %254 = add i64 %253, 3
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %252 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = zext i32 %256 to i64
  store i64 %257, i64* %RDX, align 8, !tbaa !2428
  %258 = add i64 %251, -44
  %259 = add i64 %253, 6
  store i64 %259, i64* %PC, align 8
  %260 = inttoptr i64 %258 to i32*
  %261 = load i32, i32* %260, align 4
  %262 = sub i32 %256, %261
  %263 = icmp ult i32 %256, %261
  %264 = zext i1 %263 to i8
  store i8 %264, i8* %19, align 1, !tbaa !2432
  %265 = and i32 %262, 255
  %266 = tail call i32 @llvm.ctpop.i32(i32 %265) #9
  %267 = trunc i32 %266 to i8
  %268 = and i8 %267, 1
  %269 = xor i8 %268, 1
  store i8 %269, i8* %26, align 1, !tbaa !2446
  %270 = xor i32 %261, %256
  %271 = xor i32 %270, %262
  %272 = lshr i32 %271, 4
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  store i8 %274, i8* %31, align 1, !tbaa !2447
  %275 = icmp eq i32 %262, 0
  %276 = zext i1 %275 to i8
  store i8 %276, i8* %34, align 1, !tbaa !2448
  %277 = lshr i32 %262, 31
  %278 = trunc i32 %277 to i8
  store i8 %278, i8* %37, align 1, !tbaa !2449
  %279 = lshr i32 %256, 31
  %280 = lshr i32 %261, 31
  %281 = xor i32 %280, %279
  %282 = xor i32 %277, %279
  %283 = add nuw nsw i32 %282, %281
  %284 = icmp eq i32 %283, 2
  %285 = zext i1 %284 to i8
  store i8 %285, i8* %43, align 1, !tbaa !2450
  %.v53 = select i1 %275, i64 56, i64 12
  %286 = add i64 %253, %.v53
  store i64 %286, i64* %PC, align 8, !tbaa !2428
  br i1 %275, label %block_401cd6, label %block_401caa

block_401c61:                                     ; preds = %block_401c30
  %287 = add i64 %109, -56
  %288 = add i64 %124, 4
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to i32*
  %290 = load i32, i32* %289, align 4
  %291 = add i32 %290, -1
  %292 = icmp eq i32 %290, 0
  %293 = zext i1 %292 to i8
  store i8 %293, i8* %19, align 1, !tbaa !2432
  %294 = and i32 %291, 255
  %295 = tail call i32 @llvm.ctpop.i32(i32 %294) #9
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = xor i8 %297, 1
  store i8 %298, i8* %26, align 1, !tbaa !2446
  %299 = xor i32 %291, %290
  %300 = lshr i32 %299, 4
  %301 = trunc i32 %300 to i8
  %302 = and i8 %301, 1
  store i8 %302, i8* %31, align 1, !tbaa !2447
  %303 = icmp eq i32 %291, 0
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %34, align 1, !tbaa !2448
  %305 = lshr i32 %291, 31
  %306 = trunc i32 %305 to i8
  store i8 %306, i8* %37, align 1, !tbaa !2449
  %307 = lshr i32 %290, 31
  %308 = xor i32 %305, %307
  %309 = add nuw nsw i32 %308, %307
  %310 = icmp eq i32 %309, 2
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %43, align 1, !tbaa !2450
  %312 = icmp ne i8 %306, 0
  %313 = xor i1 %312, %310
  %.v50 = select i1 %313, i64 224, i64 10
  %314 = add i64 %124, %.v50
  store i64 %314, i64* %PC, align 8, !tbaa !2428
  br i1 %313, label %block_401c61.block_401d41_crit_edge, label %block_401c6b

block_401c61.block_401d41_crit_edge:              ; preds = %block_401c61
  %.pre28 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %.pre29 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %.pre31 = getelementptr inbounds i8, i8* %.pre28, i64 4
  %.pre33 = bitcast i8* %.pre31 to float*
  %.pre35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %.pre37 = bitcast i64* %.pre35 to float*
  %.pre39 = getelementptr inbounds i8, i8* %.pre28, i64 12
  %.pre41 = bitcast i8* %.pre39 to float*
  %.pre43 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  br label %block_401d41

block_401df8:                                     ; preds = %block_401c30
  %315 = add i64 %109, -44
  %316 = add i64 %124, 7
  store i64 %316, i64* %PC, align 8
  %317 = inttoptr i64 %315 to i32*
  store i32 0, i32* %317, align 4
  %318 = bitcast [32 x %union.VectorReg]* %8 to <2 x float>*
  %319 = bitcast [32 x %union.VectorReg]* %8 to i8*
  %320 = bitcast [32 x %union.VectorReg]* %8 to float*
  %321 = bitcast [32 x %union.VectorReg]* %8 to i32*
  %322 = getelementptr inbounds i8, i8* %319, i64 4
  %323 = bitcast i8* %322 to float*
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %325 = bitcast i64* %324 to float*
  %326 = getelementptr inbounds i8, i8* %319, i64 12
  %327 = bitcast i8* %326 to float*
  %328 = bitcast i64* %324 to <2 x i32>*
  %329 = bitcast i8* %322 to i32*
  %330 = bitcast i64* %324 to i32*
  %331 = bitcast i8* %326 to i32*
  %.pre24 = load i64, i64* %PC, align 8
  br label %block_401dff

block_401cd6:                                     ; preds = %block_401caa, %block_401c7e
  %332 = phi i64 [ %.pre22, %block_401caa ], [ %251, %block_401c7e ]
  %333 = phi i64 [ %.pre21, %block_401caa ], [ %286, %block_401c7e ]
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %334 = add i64 %332, -16
  %335 = add i64 %333, 8
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %334 to i32*
  %337 = load i32, i32* %336, align 4
  %338 = zext i32 %337 to i64
  store i64 %338, i64* %RCX, align 8, !tbaa !2428
  %339 = add i64 %332, -44
  %340 = add i64 %333, 11
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i32*
  %342 = load i32, i32* %341, align 4
  %343 = add i32 %342, 1
  %344 = zext i32 %343 to i64
  store i64 %344, i64* %RDX, align 8, !tbaa !2428
  %345 = lshr i32 %343, 31
  %346 = sub i32 %337, %343
  %347 = zext i32 %346 to i64
  store i64 %347, i64* %RCX, align 8, !tbaa !2428
  %348 = icmp ult i32 %337, %343
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %19, align 1, !tbaa !2432
  %350 = and i32 %346, 255
  %351 = tail call i32 @llvm.ctpop.i32(i32 %350) #9
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = xor i8 %353, 1
  store i8 %354, i8* %26, align 1, !tbaa !2446
  %355 = xor i32 %343, %337
  %356 = xor i32 %355, %346
  %357 = lshr i32 %356, 4
  %358 = trunc i32 %357 to i8
  %359 = and i8 %358, 1
  store i8 %359, i8* %31, align 1, !tbaa !2447
  %360 = icmp eq i32 %346, 0
  %361 = zext i1 %360 to i8
  store i8 %361, i8* %34, align 1, !tbaa !2448
  %362 = lshr i32 %346, 31
  %363 = trunc i32 %362 to i8
  store i8 %363, i8* %37, align 1, !tbaa !2449
  %364 = lshr i32 %337, 31
  %365 = xor i32 %345, %364
  %366 = xor i32 %362, %364
  %367 = add nuw nsw i32 %366, %365
  %368 = icmp eq i32 %367, 2
  %369 = zext i1 %368 to i8
  store i8 %369, i8* %43, align 1, !tbaa !2450
  %370 = add i64 %332, -40
  %371 = add i64 %333, 21
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %370 to i32*
  %373 = load i32, i32* %372, align 4
  store i32 %373, i32* %206, align 1, !tbaa !2451
  store float 0.000000e+00, float* %208, align 1, !tbaa !2451
  store float 0.000000e+00, float* %210, align 1, !tbaa !2451
  store float 0.000000e+00, float* %212, align 1, !tbaa !2451
  %374 = add i64 %332, -8
  %375 = add i64 %333, 25
  store i64 %375, i64* %PC, align 8
  %376 = inttoptr i64 %374 to i64*
  %377 = load i64, i64* %376, align 8
  store i64 %377, i64* %RSI, align 8, !tbaa !2428
  %378 = load i64, i64* %RBP, align 8
  %379 = add i64 %378, -12
  %380 = add i64 %333, 28
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %379 to i32*
  %382 = load i32, i32* %381, align 4
  %383 = zext i32 %382 to i64
  store i64 %383, i64* %RDX, align 8, !tbaa !2428
  %384 = add i64 %378, -44
  %385 = add i64 %333, 32
  store i64 %385, i64* %PC, align 8
  %386 = inttoptr i64 %384 to i32*
  %387 = load i32, i32* %386, align 4
  %388 = sext i32 %382 to i64
  %389 = sext i32 %387 to i64
  %390 = mul nsw i64 %389, %388
  %391 = trunc i64 %390 to i32
  %392 = and i64 %390, 4294967295
  store i64 %392, i64* %RDX, align 8, !tbaa !2428
  %393 = shl i64 %390, 32
  %394 = ashr exact i64 %393, 32
  %395 = icmp ne i64 %394, %390
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %19, align 1, !tbaa !2432
  %397 = and i32 %391, 255
  %398 = tail call i32 @llvm.ctpop.i32(i32 %397) #9
  %399 = trunc i32 %398 to i8
  %400 = and i8 %399, 1
  %401 = xor i8 %400, 1
  store i8 %401, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %402 = lshr i32 %391, 31
  %403 = trunc i32 %402 to i8
  store i8 %403, i8* %37, align 1, !tbaa !2449
  store i8 %396, i8* %43, align 1, !tbaa !2450
  %404 = add i64 %333, 35
  store i64 %404, i64* %PC, align 8
  %405 = trunc i64 %390 to i32
  %406 = load i32, i32* %386, align 4
  %407 = add i32 %406, %405
  %408 = add i32 %407, 1
  %409 = zext i32 %408 to i64
  store i64 %409, i64* %RDX, align 8, !tbaa !2428
  %410 = sext i32 %408 to i64
  %411 = shl nsw i64 %410, 2
  store i64 %411, i64* %RDI, align 8, !tbaa !2428
  %412 = load i64, i64* %RSI, align 8
  %413 = add i64 %411, %412
  store i64 %413, i64* %RSI, align 8, !tbaa !2428
  %414 = icmp ult i64 %413, %412
  %415 = icmp ult i64 %413, %411
  %416 = or i1 %414, %415
  %417 = zext i1 %416 to i8
  store i8 %417, i8* %19, align 1, !tbaa !2432
  %418 = trunc i64 %413 to i32
  %419 = and i32 %418, 255
  %420 = tail call i32 @llvm.ctpop.i32(i32 %419) #9
  %421 = trunc i32 %420 to i8
  %422 = and i8 %421, 1
  %423 = xor i8 %422, 1
  store i8 %423, i8* %26, align 1, !tbaa !2446
  %424 = xor i64 %411, %412
  %425 = xor i64 %424, %413
  %426 = lshr i64 %425, 4
  %427 = trunc i64 %426 to i8
  %428 = and i8 %427, 1
  store i8 %428, i8* %31, align 1, !tbaa !2447
  %429 = icmp eq i64 %413, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %34, align 1, !tbaa !2448
  %431 = lshr i64 %413, 63
  %432 = trunc i64 %431 to i8
  store i8 %432, i8* %37, align 1, !tbaa !2449
  %433 = lshr i64 %412, 63
  %434 = lshr i64 %410, 61
  %435 = and i64 %434, 1
  %436 = xor i64 %431, %433
  %437 = xor i64 %431, %435
  %438 = add nuw nsw i64 %436, %437
  %439 = icmp eq i64 %438, 2
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %43, align 1, !tbaa !2450
  %441 = load i64, i64* %RBP, align 8
  %442 = add i64 %441, -32
  %443 = add i64 %333, 52
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to i64*
  %445 = load i64, i64* %444, align 8
  store i64 %445, i64* %RDI, align 8, !tbaa !2428
  %446 = add i64 %441, -44
  %447 = add i64 %333, 55
  store i64 %447, i64* %PC, align 8
  %448 = inttoptr i64 %446 to i32*
  %449 = load i32, i32* %448, align 4
  %450 = add i32 %449, 1
  %451 = sext i32 %450 to i64
  %452 = shl nsw i64 %451, 2
  store i64 %452, i64* %R8, align 8, !tbaa !2428
  %453 = add i64 %452, %445
  %454 = icmp ult i64 %453, %445
  %455 = icmp ult i64 %453, %452
  %456 = or i1 %454, %455
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %19, align 1, !tbaa !2432
  %458 = trunc i64 %453 to i32
  %459 = and i32 %458, 255
  %460 = tail call i32 @llvm.ctpop.i32(i32 %459) #9
  %461 = trunc i32 %460 to i8
  %462 = and i8 %461, 1
  %463 = xor i8 %462, 1
  store i8 %463, i8* %26, align 1, !tbaa !2446
  %464 = xor i64 %452, %445
  %465 = xor i64 %464, %453
  %466 = lshr i64 %465, 4
  %467 = trunc i64 %466 to i8
  %468 = and i8 %467, 1
  store i8 %468, i8* %31, align 1, !tbaa !2447
  %469 = icmp eq i64 %453, 0
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %34, align 1, !tbaa !2448
  %471 = lshr i64 %453, 63
  %472 = trunc i64 %471 to i8
  store i8 %472, i8* %37, align 1, !tbaa !2449
  %473 = lshr i64 %445, 63
  %474 = lshr i64 %451, 61
  %475 = and i64 %474, 1
  %476 = xor i64 %471, %473
  %477 = xor i64 %471, %475
  %478 = add nuw nsw i64 %476, %477
  %479 = icmp eq i64 %478, 2
  %480 = zext i1 %479 to i8
  store i8 %480, i8* %43, align 1, !tbaa !2450
  %481 = load i64, i64* %RBP, align 8
  %482 = add i64 %481, -64
  %483 = add i64 %333, 72
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i64*
  store i64 %453, i64* %484, align 8
  %485 = load i32, i32* %ECX, align 4
  %486 = zext i32 %485 to i64
  %487 = load i64, i64* %PC, align 8
  store i64 %486, i64* %RDI, align 8, !tbaa !2428
  %488 = load i32, i32* %EAX, align 4
  %489 = zext i32 %488 to i64
  store i64 %489, i64* %RDX, align 8, !tbaa !2428
  %490 = load i64, i64* %RBP, align 8
  %491 = add i64 %490, -64
  %492 = add i64 %487, 8
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %491 to i64*
  %494 = load i64, i64* %493, align 8
  store i64 %494, i64* %RCX, align 8, !tbaa !2428
  store i64 %489, i64* %R8, align 8, !tbaa !2428
  %495 = add i64 %487, 2898
  %496 = add i64 %487, 16
  %497 = load i64, i64* %RSP, align 8, !tbaa !2428
  %498 = add i64 %497, -8
  %499 = inttoptr i64 %498 to i64*
  store i64 %496, i64* %499, align 8
  store i64 %498, i64* %RSP, align 8, !tbaa !2428
  store i64 %495, i64* %PC, align 8, !tbaa !2428
  %500 = tail call %struct.Memory* @sub_402870_daxpy(%struct.State* nonnull %0, i64 %495, %struct.Memory* %MEMORY.1)
  %501 = load i64, i64* %RBP, align 8
  %502 = add i64 %501, -44
  %503 = load i64, i64* %PC, align 8
  %504 = add i64 %503, 3
  store i64 %504, i64* %PC, align 8
  %505 = inttoptr i64 %502 to i32*
  %506 = load i32, i32* %505, align 4
  %507 = add i32 %506, 1
  %508 = zext i32 %507 to i64
  store i64 %508, i64* %RAX, align 8, !tbaa !2428
  %509 = icmp eq i32 %506, -1
  %510 = icmp eq i32 %507, 0
  %511 = or i1 %509, %510
  %512 = zext i1 %511 to i8
  store i8 %512, i8* %19, align 1, !tbaa !2432
  %513 = and i32 %507, 255
  %514 = tail call i32 @llvm.ctpop.i32(i32 %513) #9
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  %517 = xor i8 %516, 1
  store i8 %517, i8* %26, align 1, !tbaa !2446
  %518 = xor i32 %507, %506
  %519 = lshr i32 %518, 4
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  store i8 %521, i8* %31, align 1, !tbaa !2447
  %522 = zext i1 %510 to i8
  store i8 %522, i8* %34, align 1, !tbaa !2448
  %523 = lshr i32 %507, 31
  %524 = trunc i32 %523 to i8
  store i8 %524, i8* %37, align 1, !tbaa !2449
  %525 = lshr i32 %506, 31
  %526 = xor i32 %523, %525
  %527 = add nuw nsw i32 %526, %523
  %528 = icmp eq i32 %527, 2
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %43, align 1, !tbaa !2450
  %530 = add i64 %503, 9
  store i64 %530, i64* %PC, align 8
  store i32 %507, i32* %505, align 4
  %531 = load i64, i64* %PC, align 8
  %532 = add i64 %531, -197
  store i64 %532, i64* %PC, align 8, !tbaa !2428
  br label %block_401c72

block_401d54:                                     ; preds = %block_401d48
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %533 = add i64 %911, 8
  store i64 %533, i64* %PC, align 8
  %534 = load i32, i32* %883, align 4
  %535 = zext i32 %534 to i64
  store i64 %535, i64* %RCX, align 8, !tbaa !2428
  %536 = add i64 %911, 11
  store i64 %536, i64* %PC, align 8
  %537 = load i32, i32* %878, align 4
  %538 = add i32 %537, 1
  %539 = zext i32 %538 to i64
  store i64 %539, i64* %RDX, align 8, !tbaa !2428
  %540 = lshr i32 %538, 31
  %541 = sub i32 %534, %538
  %542 = zext i32 %541 to i64
  store i64 %542, i64* %RCX, align 8, !tbaa !2428
  %543 = icmp ult i32 %534, %538
  %544 = zext i1 %543 to i8
  store i8 %544, i8* %19, align 1, !tbaa !2432
  %545 = and i32 %541, 255
  %546 = tail call i32 @llvm.ctpop.i32(i32 %545) #9
  %547 = trunc i32 %546 to i8
  %548 = and i8 %547, 1
  %549 = xor i8 %548, 1
  store i8 %549, i8* %26, align 1, !tbaa !2446
  %550 = xor i32 %538, %534
  %551 = xor i32 %550, %541
  %552 = lshr i32 %551, 4
  %553 = trunc i32 %552 to i8
  %554 = and i8 %553, 1
  store i8 %554, i8* %31, align 1, !tbaa !2447
  %555 = icmp eq i32 %541, 0
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %34, align 1, !tbaa !2448
  %557 = lshr i32 %541, 31
  %558 = trunc i32 %557 to i8
  store i8 %558, i8* %37, align 1, !tbaa !2449
  %559 = lshr i32 %534, 31
  %560 = xor i32 %540, %559
  %561 = xor i32 %557, %559
  %562 = add nuw nsw i32 %561, %560
  %563 = icmp eq i32 %562, 2
  %564 = zext i1 %563 to i8
  store i8 %564, i8* %43, align 1, !tbaa !2450
  %565 = add i64 %875, -44
  %566 = add i64 %911, 19
  store i64 %566, i64* %PC, align 8
  %567 = inttoptr i64 %565 to i32*
  store i32 %541, i32* %567, align 4
  %568 = load i64, i64* %RBP, align 8
  %569 = add i64 %568, -32
  %570 = load i64, i64* %PC, align 8
  %571 = add i64 %570, 4
  store i64 %571, i64* %PC, align 8
  %572 = inttoptr i64 %569 to i64*
  %573 = load i64, i64* %572, align 8
  store i64 %573, i64* %RSI, align 8, !tbaa !2428
  %574 = add i64 %568, -44
  %575 = add i64 %570, 8
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %574 to i32*
  %577 = load i32, i32* %576, align 4
  %578 = sext i32 %577 to i64
  store i64 %578, i64* %RDI, align 8, !tbaa !2428
  %579 = shl nsw i64 %578, 2
  %580 = add i64 %579, %573
  %581 = add i64 %570, 13
  store i64 %581, i64* %PC, align 8
  %582 = inttoptr i64 %580 to i32*
  %583 = load i32, i32* %582, align 4
  store i32 %583, i32* %.pre-phi30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi34, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi38, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi42, align 1, !tbaa !2451
  %584 = add i64 %568, -8
  %585 = add i64 %570, 17
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i64*
  %587 = load i64, i64* %586, align 8
  store i64 %587, i64* %RSI, align 8, !tbaa !2428
  %588 = add i64 %568, -12
  %589 = add i64 %570, 20
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %588 to i32*
  %591 = load i32, i32* %590, align 4
  %592 = zext i32 %591 to i64
  store i64 %592, i64* %RCX, align 8, !tbaa !2428
  %593 = add i64 %570, 24
  store i64 %593, i64* %PC, align 8
  %594 = load i32, i32* %576, align 4
  %595 = sext i32 %591 to i64
  %596 = sext i32 %594 to i64
  %597 = mul nsw i64 %596, %595
  %598 = trunc i64 %597 to i32
  %599 = and i64 %597, 4294967295
  store i64 %599, i64* %RCX, align 8, !tbaa !2428
  %600 = shl i64 %597, 32
  %601 = ashr exact i64 %600, 32
  %602 = icmp ne i64 %601, %597
  %603 = zext i1 %602 to i8
  store i8 %603, i8* %19, align 1, !tbaa !2432
  %604 = and i32 %598, 255
  %605 = tail call i32 @llvm.ctpop.i32(i32 %604) #9
  %606 = trunc i32 %605 to i8
  %607 = and i8 %606, 1
  %608 = xor i8 %607, 1
  store i8 %608, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %609 = lshr i32 %598, 31
  %610 = trunc i32 %609 to i8
  store i8 %610, i8* %37, align 1, !tbaa !2449
  store i8 %603, i8* %43, align 1, !tbaa !2450
  %611 = add i64 %570, 27
  store i64 %611, i64* %PC, align 8
  %612 = trunc i64 %597 to i32
  %613 = load i32, i32* %576, align 4
  %614 = add i32 %613, %612
  %615 = zext i32 %614 to i64
  store i64 %615, i64* %RCX, align 8, !tbaa !2428
  %616 = icmp ult i32 %614, %612
  %617 = icmp ult i32 %614, %613
  %618 = or i1 %616, %617
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %19, align 1, !tbaa !2432
  %620 = and i32 %614, 255
  %621 = tail call i32 @llvm.ctpop.i32(i32 %620) #9
  %622 = trunc i32 %621 to i8
  %623 = and i8 %622, 1
  %624 = xor i8 %623, 1
  store i8 %624, i8* %26, align 1, !tbaa !2446
  %625 = xor i32 %613, %612
  %626 = xor i32 %625, %614
  %627 = lshr i32 %626, 4
  %628 = trunc i32 %627 to i8
  %629 = and i8 %628, 1
  store i8 %629, i8* %31, align 1, !tbaa !2447
  %630 = icmp eq i32 %614, 0
  %631 = zext i1 %630 to i8
  store i8 %631, i8* %34, align 1, !tbaa !2448
  %632 = lshr i32 %614, 31
  %633 = trunc i32 %632 to i8
  store i8 %633, i8* %37, align 1, !tbaa !2449
  %634 = lshr i32 %612, 31
  %635 = lshr i32 %613, 31
  %636 = xor i32 %632, %634
  %637 = xor i32 %632, %635
  %638 = add nuw nsw i32 %636, %637
  %639 = icmp eq i32 %638, 2
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %43, align 1, !tbaa !2450
  %641 = sext i32 %614 to i64
  store i64 %641, i64* %RDI, align 8, !tbaa !2428
  %642 = shl nsw i64 %641, 2
  %643 = add i64 %587, %642
  %644 = add i64 %570, 35
  store i64 %644, i64* %PC, align 8
  %645 = load <2 x float>, <2 x float>* %.pre-phi44, align 1
  %646 = load <2 x i32>, <2 x i32>* %962, align 1
  %647 = inttoptr i64 %643 to float*
  %648 = load float, float* %647, align 4
  %649 = extractelement <2 x float> %645, i32 0
  %650 = fdiv float %649, %648
  store float %650, float* %961, align 1, !tbaa !2451
  %651 = bitcast <2 x float> %645 to <2 x i32>
  %652 = extractelement <2 x i32> %651, i32 1
  store i32 %652, i32* %963, align 1, !tbaa !2451
  %653 = extractelement <2 x i32> %646, i32 0
  store i32 %653, i32* %964, align 1, !tbaa !2451
  %654 = extractelement <2 x i32> %646, i32 1
  store i32 %654, i32* %965, align 1, !tbaa !2451
  %655 = load i64, i64* %RBP, align 8
  %656 = add i64 %655, -32
  %657 = add i64 %570, 39
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %656 to i64*
  %659 = load i64, i64* %658, align 8
  store i64 %659, i64* %RSI, align 8, !tbaa !2428
  %660 = add i64 %655, -44
  %661 = add i64 %570, 43
  store i64 %661, i64* %PC, align 8
  %662 = inttoptr i64 %660 to i32*
  %663 = load i32, i32* %662, align 4
  %664 = sext i32 %663 to i64
  store i64 %664, i64* %RDI, align 8, !tbaa !2428
  %665 = shl nsw i64 %664, 2
  %666 = add i64 %665, %659
  %667 = add i64 %570, 48
  store i64 %667, i64* %PC, align 8
  %668 = load <2 x float>, <2 x float>* %.pre-phi44, align 1
  %669 = extractelement <2 x float> %668, i32 0
  %670 = inttoptr i64 %666 to float*
  store float %669, float* %670, align 4
  %671 = load i64, i64* %RBP, align 8
  %672 = add i64 %671, -32
  %673 = load i64, i64* %PC, align 8
  %674 = add i64 %673, 4
  store i64 %674, i64* %PC, align 8
  %675 = inttoptr i64 %672 to i64*
  %676 = load i64, i64* %675, align 8
  store i64 %676, i64* %RSI, align 8, !tbaa !2428
  %677 = add i64 %671, -44
  %678 = add i64 %673, 8
  store i64 %678, i64* %PC, align 8
  %679 = inttoptr i64 %677 to i32*
  %680 = load i32, i32* %679, align 4
  %681 = sext i32 %680 to i64
  store i64 %681, i64* %RDI, align 8, !tbaa !2428
  %682 = shl nsw i64 %681, 2
  %683 = add i64 %682, %676
  %684 = add i64 %673, 13
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to i32*
  %686 = load i32, i32* %685, align 4
  store i32 %686, i32* %.pre-phi30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi34, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi38, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi42, align 1, !tbaa !2451
  %687 = load i64, i64* %966, align 1
  %688 = trunc i64 %687 to i32
  store i32 %688, i32* %ECX, align 1, !tbaa !2456
  store i32 0, i32* %968, align 1, !tbaa !2456
  %689 = load i64, i64* %RCX, align 8
  %690 = xor i64 %689, -2147483648
  %691 = trunc i64 %690 to i32
  %692 = and i64 %690, 4294967295
  store i64 %692, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2432
  %693 = and i32 %691, 255
  %694 = tail call i32 @llvm.ctpop.i32(i32 %693) #9
  %695 = trunc i32 %694 to i8
  %696 = and i8 %695, 1
  %697 = xor i8 %696, 1
  store i8 %697, i8* %26, align 1, !tbaa !2446
  %698 = icmp eq i32 %691, 0
  %699 = zext i1 %698 to i8
  store i8 %699, i8* %34, align 1, !tbaa !2448
  %700 = lshr i32 %691, 31
  %701 = trunc i32 %700 to i8
  store i8 %701, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %31, align 1, !tbaa !2447
  %702 = trunc i64 %690 to i32
  store i32 %702, i32* %.pre-phi30, align 1, !tbaa !2456
  store i32 0, i32* %963, align 1, !tbaa !2456
  store i32 0, i32* %964, align 1, !tbaa !2456
  store i32 0, i32* %965, align 1, !tbaa !2456
  %703 = add i64 %671, -40
  %704 = add i64 %673, 32
  store i64 %704, i64* %PC, align 8
  %705 = load <2 x float>, <2 x float>* %.pre-phi44, align 1
  %706 = extractelement <2 x float> %705, i32 0
  %707 = inttoptr i64 %703 to float*
  store float %706, float* %707, align 4
  %708 = load i64, i64* %RBP, align 8
  %709 = add i64 %708, -44
  %710 = load i64, i64* %PC, align 8
  %711 = add i64 %710, 3
  store i64 %711, i64* %PC, align 8
  %712 = inttoptr i64 %709 to i32*
  %713 = load i32, i32* %712, align 4
  %714 = zext i32 %713 to i64
  store i64 %714, i64* %RDI, align 8, !tbaa !2428
  %715 = add i64 %708, -40
  %716 = add i64 %710, 8
  store i64 %716, i64* %PC, align 8
  %717 = inttoptr i64 %715 to i32*
  %718 = load i32, i32* %717, align 4
  store i32 %718, i32* %.pre-phi30, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi34, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi38, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi42, align 1, !tbaa !2451
  %719 = add i64 %708, -8
  %720 = add i64 %710, 12
  store i64 %720, i64* %PC, align 8
  %721 = inttoptr i64 %719 to i64*
  %722 = load i64, i64* %721, align 8
  store i64 %722, i64* %RSI, align 8, !tbaa !2428
  %723 = add i64 %708, -12
  %724 = add i64 %710, 15
  store i64 %724, i64* %PC, align 8
  %725 = inttoptr i64 %723 to i32*
  %726 = load i32, i32* %725, align 4
  %727 = zext i32 %726 to i64
  store i64 %727, i64* %RCX, align 8, !tbaa !2428
  %728 = add i64 %710, 19
  store i64 %728, i64* %PC, align 8
  %729 = load i32, i32* %712, align 4
  %730 = sext i32 %726 to i64
  %731 = sext i32 %729 to i64
  %732 = mul nsw i64 %731, %730
  %733 = and i64 %732, 4294967295
  store i64 %733, i64* %RCX, align 8, !tbaa !2428
  %sext = shl i64 %732, 32
  %734 = ashr exact i64 %sext, 30
  store i64 %734, i64* %R8, align 8, !tbaa !2428
  %735 = add i64 %734, %722
  store i64 %735, i64* %RSI, align 8, !tbaa !2428
  %736 = icmp ult i64 %735, %722
  %737 = icmp ult i64 %735, %734
  %738 = or i1 %736, %737
  %739 = zext i1 %738 to i8
  store i8 %739, i8* %19, align 1, !tbaa !2432
  %740 = trunc i64 %735 to i32
  %741 = and i32 %740, 255
  %742 = tail call i32 @llvm.ctpop.i32(i32 %741) #9
  %743 = trunc i32 %742 to i8
  %744 = and i8 %743, 1
  %745 = xor i8 %744, 1
  store i8 %745, i8* %26, align 1, !tbaa !2446
  %746 = xor i64 %734, %722
  %747 = xor i64 %746, %735
  %748 = lshr i64 %747, 4
  %749 = trunc i64 %748 to i8
  %750 = and i8 %749, 1
  store i8 %750, i8* %31, align 1, !tbaa !2447
  %751 = icmp eq i64 %735, 0
  %752 = zext i1 %751 to i8
  store i8 %752, i8* %34, align 1, !tbaa !2448
  %753 = lshr i64 %735, 63
  %754 = trunc i64 %753 to i8
  store i8 %754, i8* %37, align 1, !tbaa !2449
  %755 = lshr i64 %722, 63
  %756 = lshr i64 %734, 63
  %757 = xor i64 %753, %755
  %758 = xor i64 %753, %756
  %759 = add nuw nsw i64 %757, %758
  %760 = icmp eq i64 %759, 2
  %761 = zext i1 %760 to i8
  store i8 %761, i8* %43, align 1, !tbaa !2450
  %762 = load i64, i64* %RBP, align 8
  %763 = add i64 %762, -32
  %764 = add i64 %710, 36
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %763 to i64*
  %766 = load i64, i64* %765, align 8
  store i64 %766, i64* %RCX, align 8, !tbaa !2428
  %767 = load i32, i32* %EAX, align 4
  %768 = zext i32 %767 to i64
  store i64 %768, i64* %RDX, align 8, !tbaa !2428
  store i64 %768, i64* %R8, align 8, !tbaa !2428
  %769 = add i64 %710, 2745
  %770 = add i64 %710, 46
  %771 = load i64, i64* %RSP, align 8, !tbaa !2428
  %772 = add i64 %771, -8
  %773 = inttoptr i64 %772 to i64*
  store i64 %770, i64* %773, align 8
  store i64 %772, i64* %RSP, align 8, !tbaa !2428
  store i64 %769, i64* %PC, align 8, !tbaa !2428
  %774 = tail call %struct.Memory* @sub_402870_daxpy(%struct.State* nonnull %0, i64 %769, %struct.Memory* %MEMORY.3)
  %775 = load i64, i64* %RBP, align 8
  %776 = add i64 %775, -48
  %777 = load i64, i64* %PC, align 8
  %778 = add i64 %777, 3
  store i64 %778, i64* %PC, align 8
  %779 = inttoptr i64 %776 to i32*
  %780 = load i32, i32* %779, align 4
  %781 = add i32 %780, 1
  %782 = zext i32 %781 to i64
  store i64 %782, i64* %RAX, align 8, !tbaa !2428
  %783 = icmp eq i32 %780, -1
  %784 = icmp eq i32 %781, 0
  %785 = or i1 %783, %784
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %19, align 1, !tbaa !2432
  %787 = and i32 %781, 255
  %788 = tail call i32 @llvm.ctpop.i32(i32 %787) #9
  %789 = trunc i32 %788 to i8
  %790 = and i8 %789, 1
  %791 = xor i8 %790, 1
  store i8 %791, i8* %26, align 1, !tbaa !2446
  %792 = xor i32 %781, %780
  %793 = lshr i32 %792, 4
  %794 = trunc i32 %793 to i8
  %795 = and i8 %794, 1
  store i8 %795, i8* %31, align 1, !tbaa !2447
  %796 = zext i1 %784 to i8
  store i8 %796, i8* %34, align 1, !tbaa !2448
  %797 = lshr i32 %781, 31
  %798 = trunc i32 %797 to i8
  store i8 %798, i8* %37, align 1, !tbaa !2449
  %799 = lshr i32 %780, 31
  %800 = xor i32 %797, %799
  %801 = add nuw nsw i32 %800, %797
  %802 = icmp eq i32 %801, 2
  %803 = zext i1 %802 to i8
  store i8 %803, i8* %43, align 1, !tbaa !2450
  %804 = add i64 %777, 9
  store i64 %804, i64* %PC, align 8
  store i32 %781, i32* %779, align 4
  %805 = load i64, i64* %PC, align 8
  %806 = add i64 %805, -166
  store i64 %806, i64* %PC, align 8, !tbaa !2428
  br label %block_401d48

block_401f4c:                                     ; preds = %block_401ea9
  %807 = add i64 %1299, -32
  %808 = add i64 %1334, 4
  store i64 %808, i64* %PC, align 8
  %809 = inttoptr i64 %807 to i64*
  %810 = load i64, i64* %809, align 8
  store i64 %810, i64* %RAX, align 8, !tbaa !2428
  %811 = add i64 %1334, 8
  store i64 %811, i64* %PC, align 8
  %812 = load i32, i32* %1303, align 4
  %813 = sext i32 %812 to i64
  store i64 %813, i64* %RCX, align 8, !tbaa !2428
  %814 = shl nsw i64 %813, 2
  %815 = add i64 %814, %810
  %816 = add i64 %1334, 13
  store i64 %816, i64* %PC, align 8
  %817 = inttoptr i64 %815 to i32*
  %818 = load i32, i32* %817, align 4
  store i32 %818, i32* %321, align 1, !tbaa !2451
  store float 0.000000e+00, float* %323, align 1, !tbaa !2451
  store float 0.000000e+00, float* %325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %327, align 1, !tbaa !2451
  %819 = add i64 %1299, -40
  %820 = add i64 %1334, 18
  store i64 %820, i64* %PC, align 8
  %821 = load <2 x float>, <2 x float>* %318, align 1
  %822 = extractelement <2 x float> %821, i32 0
  %823 = inttoptr i64 %819 to float*
  store float %822, float* %823, align 4
  %824 = load i64, i64* %RBP, align 8
  %825 = add i64 %824, -32
  %826 = load i64, i64* %PC, align 8
  %827 = add i64 %826, 4
  store i64 %827, i64* %PC, align 8
  %828 = inttoptr i64 %825 to i64*
  %829 = load i64, i64* %828, align 8
  store i64 %829, i64* %RAX, align 8, !tbaa !2428
  %830 = add i64 %824, -44
  %831 = add i64 %826, 8
  store i64 %831, i64* %PC, align 8
  %832 = inttoptr i64 %830 to i32*
  %833 = load i32, i32* %832, align 4
  %834 = sext i32 %833 to i64
  store i64 %834, i64* %RCX, align 8, !tbaa !2428
  %835 = shl nsw i64 %834, 2
  %836 = add i64 %835, %829
  %837 = add i64 %826, 13
  store i64 %837, i64* %PC, align 8
  %838 = inttoptr i64 %836 to i32*
  %839 = load i32, i32* %838, align 4
  store i32 %839, i32* %321, align 1, !tbaa !2451
  store float 0.000000e+00, float* %323, align 1, !tbaa !2451
  store float 0.000000e+00, float* %325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %327, align 1, !tbaa !2451
  %840 = add i64 %826, 17
  store i64 %840, i64* %PC, align 8
  %841 = load i64, i64* %828, align 8
  store i64 %841, i64* %RAX, align 8, !tbaa !2428
  %842 = add i64 %824, -52
  %843 = add i64 %826, 21
  store i64 %843, i64* %PC, align 8
  %844 = inttoptr i64 %842 to i32*
  %845 = load i32, i32* %844, align 4
  %846 = sext i32 %845 to i64
  store i64 %846, i64* %RCX, align 8, !tbaa !2428
  %847 = shl nsw i64 %846, 2
  %848 = add i64 %847, %841
  %849 = add i64 %826, 26
  store i64 %849, i64* %PC, align 8
  %850 = load <2 x float>, <2 x float>* %318, align 1
  %851 = extractelement <2 x float> %850, i32 0
  %852 = inttoptr i64 %848 to float*
  store float %851, float* %852, align 4
  %853 = load i64, i64* %RBP, align 8
  %854 = add i64 %853, -40
  %855 = load i64, i64* %PC, align 8
  %856 = add i64 %855, 5
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %854 to i32*
  %858 = load i32, i32* %857, align 4
  store i32 %858, i32* %321, align 1, !tbaa !2451
  store float 0.000000e+00, float* %323, align 1, !tbaa !2451
  store float 0.000000e+00, float* %325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %327, align 1, !tbaa !2451
  %859 = add i64 %853, -32
  %860 = add i64 %855, 9
  store i64 %860, i64* %PC, align 8
  %861 = inttoptr i64 %859 to i64*
  %862 = load i64, i64* %861, align 8
  store i64 %862, i64* %RAX, align 8, !tbaa !2428
  %863 = add i64 %853, -44
  %864 = add i64 %855, 13
  store i64 %864, i64* %PC, align 8
  %865 = inttoptr i64 %863 to i32*
  %866 = load i32, i32* %865, align 4
  %867 = sext i32 %866 to i64
  store i64 %867, i64* %RCX, align 8, !tbaa !2428
  %868 = shl nsw i64 %867, 2
  %869 = add i64 %868, %862
  %870 = add i64 %855, 18
  store i64 %870, i64* %PC, align 8
  %871 = load <2 x float>, <2 x float>* %318, align 1
  %872 = extractelement <2 x float> %871, i32 0
  %873 = inttoptr i64 %869 to float*
  store float %872, float* %873, align 4
  %.pre26 = load i64, i64* %PC, align 8
  %.pre27 = load i64, i64* %RBP, align 8
  br label %block_401f8a

block_401d48:                                     ; preds = %block_401d41, %block_401d54
  %874 = phi i64 [ %.pre23, %block_401d41 ], [ %806, %block_401d54 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.4, %block_401d41 ], [ %774, %block_401d54 ]
  %875 = load i64, i64* %RBP, align 8
  %876 = add i64 %875, -48
  %877 = add i64 %874, 3
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i32*
  %879 = load i32, i32* %878, align 4
  %880 = zext i32 %879 to i64
  store i64 %880, i64* %RAX, align 8, !tbaa !2428
  %881 = add i64 %875, -16
  %882 = add i64 %874, 6
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %881 to i32*
  %884 = load i32, i32* %883, align 4
  %885 = sub i32 %879, %884
  %886 = icmp ult i32 %879, %884
  %887 = zext i1 %886 to i8
  store i8 %887, i8* %19, align 1, !tbaa !2432
  %888 = and i32 %885, 255
  %889 = tail call i32 @llvm.ctpop.i32(i32 %888) #9
  %890 = trunc i32 %889 to i8
  %891 = and i8 %890, 1
  %892 = xor i8 %891, 1
  store i8 %892, i8* %26, align 1, !tbaa !2446
  %893 = xor i32 %884, %879
  %894 = xor i32 %893, %885
  %895 = lshr i32 %894, 4
  %896 = trunc i32 %895 to i8
  %897 = and i8 %896, 1
  store i8 %897, i8* %31, align 1, !tbaa !2447
  %898 = icmp eq i32 %885, 0
  %899 = zext i1 %898 to i8
  store i8 %899, i8* %34, align 1, !tbaa !2448
  %900 = lshr i32 %885, 31
  %901 = trunc i32 %900 to i8
  store i8 %901, i8* %37, align 1, !tbaa !2449
  %902 = lshr i32 %879, 31
  %903 = lshr i32 %884, 31
  %904 = xor i32 %903, %902
  %905 = xor i32 %900, %902
  %906 = add nuw nsw i32 %905, %904
  %907 = icmp eq i32 %906, 2
  %908 = zext i1 %907 to i8
  store i8 %908, i8* %43, align 1, !tbaa !2450
  %909 = icmp ne i8 %901, 0
  %910 = xor i1 %909, %907
  %.v52 = select i1 %910, i64 12, i64 171
  %911 = add i64 %874, %.v52
  store i64 %911, i64* %PC, align 8, !tbaa !2428
  br i1 %910, label %block_401d54, label %block_401df3

block_401caa:                                     ; preds = %block_401c7e
  %912 = add i64 %251, -32
  %913 = add i64 %286, 4
  store i64 %913, i64* %PC, align 8
  %914 = inttoptr i64 %912 to i64*
  %915 = load i64, i64* %914, align 8
  store i64 %915, i64* %RAX, align 8, !tbaa !2428
  %916 = add i64 %286, 8
  store i64 %916, i64* %PC, align 8
  %917 = load i32, i32* %260, align 4
  %918 = sext i32 %917 to i64
  store i64 %918, i64* %RCX, align 8, !tbaa !2428
  %919 = shl nsw i64 %918, 2
  %920 = add i64 %919, %915
  %921 = add i64 %286, 13
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %920 to i32*
  %923 = load i32, i32* %922, align 4
  store i32 %923, i32* %206, align 1, !tbaa !2451
  store float 0.000000e+00, float* %208, align 1, !tbaa !2451
  store float 0.000000e+00, float* %210, align 1, !tbaa !2451
  store float 0.000000e+00, float* %212, align 1, !tbaa !2451
  %924 = add i64 %286, 17
  store i64 %924, i64* %PC, align 8
  %925 = load i64, i64* %914, align 8
  store i64 %925, i64* %RAX, align 8, !tbaa !2428
  %926 = add i64 %286, 21
  store i64 %926, i64* %PC, align 8
  %927 = load i32, i32* %255, align 4
  %928 = sext i32 %927 to i64
  store i64 %928, i64* %RCX, align 8, !tbaa !2428
  %929 = shl nsw i64 %928, 2
  %930 = add i64 %929, %925
  %931 = add i64 %286, 26
  store i64 %931, i64* %PC, align 8
  %932 = load <2 x float>, <2 x float>* %213, align 1
  %933 = extractelement <2 x float> %932, i32 0
  %934 = inttoptr i64 %930 to float*
  store float %933, float* %934, align 4
  %935 = load i64, i64* %RBP, align 8
  %936 = add i64 %935, -40
  %937 = load i64, i64* %PC, align 8
  %938 = add i64 %937, 5
  store i64 %938, i64* %PC, align 8
  %939 = inttoptr i64 %936 to i32*
  %940 = load i32, i32* %939, align 4
  store i32 %940, i32* %206, align 1, !tbaa !2451
  store float 0.000000e+00, float* %208, align 1, !tbaa !2451
  store float 0.000000e+00, float* %210, align 1, !tbaa !2451
  store float 0.000000e+00, float* %212, align 1, !tbaa !2451
  %941 = add i64 %935, -32
  %942 = add i64 %937, 9
  store i64 %942, i64* %PC, align 8
  %943 = inttoptr i64 %941 to i64*
  %944 = load i64, i64* %943, align 8
  store i64 %944, i64* %RAX, align 8, !tbaa !2428
  %945 = add i64 %935, -44
  %946 = add i64 %937, 13
  store i64 %946, i64* %PC, align 8
  %947 = inttoptr i64 %945 to i32*
  %948 = load i32, i32* %947, align 4
  %949 = sext i32 %948 to i64
  store i64 %949, i64* %RCX, align 8, !tbaa !2428
  %950 = shl nsw i64 %949, 2
  %951 = add i64 %950, %944
  %952 = add i64 %937, 18
  store i64 %952, i64* %PC, align 8
  %953 = load <2 x float>, <2 x float>* %213, align 1
  %954 = extractelement <2 x float> %953, i32 0
  %955 = inttoptr i64 %951 to float*
  store float %954, float* %955, align 4
  %.pre21 = load i64, i64* %PC, align 8
  %.pre22 = load i64, i64* %RBP, align 8
  br label %block_401cd6

block_401d41:                                     ; preds = %block_401c61.block_401d41_crit_edge, %block_401d3c
  %.pre-phi44 = phi <2 x float>* [ %.pre43, %block_401c61.block_401d41_crit_edge ], [ %213, %block_401d3c ]
  %.pre-phi42 = phi float* [ %.pre41, %block_401c61.block_401d41_crit_edge ], [ %212, %block_401d3c ]
  %.pre-phi40 = phi i8* [ %.pre39, %block_401c61.block_401d41_crit_edge ], [ %211, %block_401d3c ]
  %.pre-phi38 = phi float* [ %.pre37, %block_401c61.block_401d41_crit_edge ], [ %210, %block_401d3c ]
  %.pre-phi36 = phi i64* [ %.pre35, %block_401c61.block_401d41_crit_edge ], [ %209, %block_401d3c ]
  %.pre-phi34 = phi float* [ %.pre33, %block_401c61.block_401d41_crit_edge ], [ %208, %block_401d3c ]
  %.pre-phi32 = phi i8* [ %.pre31, %block_401c61.block_401d41_crit_edge ], [ %207, %block_401d3c ]
  %.pre-phi30 = phi i32* [ %.pre29, %block_401c61.block_401d41_crit_edge ], [ %206, %block_401d3c ]
  %956 = phi i64 [ %314, %block_401c61.block_401d41_crit_edge ], [ %1010, %block_401d3c ]
  %957 = phi i64 [ %109, %block_401c61.block_401d41_crit_edge ], [ %165, %block_401d3c ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_401c61.block_401d41_crit_edge ], [ %MEMORY.1, %block_401d3c ]
  %958 = add i64 %957, -48
  %959 = add i64 %956, 7
  store i64 %959, i64* %PC, align 8
  %960 = inttoptr i64 %958 to i32*
  store i32 0, i32* %960, align 4
  %961 = bitcast [32 x %union.VectorReg]* %8 to float*
  %962 = bitcast i64* %.pre-phi36 to <2 x i32>*
  %963 = bitcast i8* %.pre-phi32 to i32*
  %964 = bitcast i64* %.pre-phi36 to i32*
  %965 = bitcast i8* %.pre-phi40 to i32*
  %966 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %8, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %967 = bitcast %union.anon* %4 to [2 x i32]*
  %968 = getelementptr inbounds [2 x i32], [2 x i32]* %967, i64 0, i64 1
  %.pre23 = load i64, i64* %PC, align 8
  br label %block_401d48

block_401e9d:                                     ; preds = %block_401f8a, %block_401e96
  %969 = phi i64 [ %1648, %block_401f8a ], [ %.pre25, %block_401e96 ]
  %970 = load i64, i64* %RBP, align 8
  %971 = add i64 %970, -48
  %972 = add i64 %969, 3
  store i64 %972, i64* %PC, align 8
  %973 = inttoptr i64 %971 to i32*
  %974 = load i32, i32* %973, align 4
  %975 = zext i32 %974 to i64
  store i64 %975, i64* %RAX, align 8, !tbaa !2428
  %976 = add i64 %970, -56
  %977 = add i64 %969, 6
  store i64 %977, i64* %PC, align 8
  %978 = inttoptr i64 %976 to i32*
  %979 = load i32, i32* %978, align 4
  %980 = sub i32 %974, %979
  %981 = icmp ult i32 %974, %979
  %982 = zext i1 %981 to i8
  store i8 %982, i8* %19, align 1, !tbaa !2432
  %983 = and i32 %980, 255
  %984 = tail call i32 @llvm.ctpop.i32(i32 %983) #9
  %985 = trunc i32 %984 to i8
  %986 = and i8 %985, 1
  %987 = xor i8 %986, 1
  store i8 %987, i8* %26, align 1, !tbaa !2446
  %988 = xor i32 %979, %974
  %989 = xor i32 %988, %980
  %990 = lshr i32 %989, 4
  %991 = trunc i32 %990 to i8
  %992 = and i8 %991, 1
  store i8 %992, i8* %31, align 1, !tbaa !2447
  %993 = icmp eq i32 %980, 0
  %994 = zext i1 %993 to i8
  store i8 %994, i8* %34, align 1, !tbaa !2448
  %995 = lshr i32 %980, 31
  %996 = trunc i32 %995 to i8
  store i8 %996, i8* %37, align 1, !tbaa !2449
  %997 = lshr i32 %974, 31
  %998 = lshr i32 %979, 31
  %999 = xor i32 %998, %997
  %1000 = xor i32 %995, %997
  %1001 = add nuw nsw i32 %1000, %999
  %1002 = icmp eq i32 %1001, 2
  %1003 = zext i1 %1002 to i8
  store i8 %1003, i8* %43, align 1, !tbaa !2450
  %1004 = icmp ne i8 %996, 0
  %1005 = xor i1 %1004, %1002
  %.v48 = select i1 %1005, i64 12, i64 256
  %1006 = add i64 %969, %.v48
  %1007 = add i64 %1006, 5
  store i64 %1007, i64* %PC, align 8
  br i1 %1005, label %block_401ea9, label %block_401fa2.loopexit

block_401fa2.loopexit:                            ; preds = %block_401e9d
  br label %block_401fa2

block_401fa2:                                     ; preds = %block_401fa2.loopexit, %block_401e8c
  %1008 = phi i64 [ %1362, %block_401e8c ], [ %1007, %block_401fa2.loopexit ]
  %1009 = add i64 %1008, 5
  br label %block_401fa7

block_401d3c:                                     ; preds = %block_401c72
  %1010 = add i64 %201, 5
  store i64 %1010, i64* %PC, align 8, !tbaa !2428
  br label %block_401d41

block_401e96:                                     ; preds = %block_401e8c
  %1011 = add i64 %126, -48
  %1012 = add i64 %1362, 7
  store i64 %1012, i64* %PC, align 8
  %1013 = inttoptr i64 %1011 to i32*
  store i32 1, i32* %1013, align 4
  %1014 = bitcast %union.VectorReg* %9 to i8*
  %1015 = bitcast %union.VectorReg* %9 to float*
  %1016 = bitcast %union.VectorReg* %9 to i32*
  %1017 = getelementptr inbounds i8, i8* %1014, i64 4
  %1018 = bitcast i8* %1017 to float*
  %1019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %1020 = bitcast i64* %1019 to float*
  %1021 = getelementptr inbounds i8, i8* %1014, i64 12
  %1022 = bitcast i8* %1021 to float*
  %1023 = bitcast %union.VectorReg* %9 to <2 x float>*
  %1024 = bitcast i64* %1019 to <2 x i32>*
  %1025 = bitcast i8* %1017 to i32*
  %1026 = bitcast i64* %1019 to i32*
  %1027 = bitcast i8* %1021 to i32*
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_401e9d

block_401ea9:                                     ; preds = %block_401e9d
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1028 = add i64 %970, -16
  %1029 = add i64 %1006, 8
  store i64 %1029, i64* %PC, align 8
  %1030 = inttoptr i64 %1028 to i32*
  %1031 = load i32, i32* %1030, align 4
  %1032 = zext i32 %1031 to i64
  store i64 %1032, i64* %RCX, align 8, !tbaa !2428
  %1033 = add i64 %1006, 11
  store i64 %1033, i64* %PC, align 8
  %1034 = load i32, i32* %973, align 4
  %1035 = add i32 %1034, 1
  %1036 = zext i32 %1035 to i64
  store i64 %1036, i64* %RDX, align 8, !tbaa !2428
  %1037 = lshr i32 %1035, 31
  %1038 = sub i32 %1031, %1035
  %1039 = zext i32 %1038 to i64
  store i64 %1039, i64* %RCX, align 8, !tbaa !2428
  %1040 = icmp ult i32 %1031, %1035
  %1041 = zext i1 %1040 to i8
  store i8 %1041, i8* %19, align 1, !tbaa !2432
  %1042 = and i32 %1038, 255
  %1043 = tail call i32 @llvm.ctpop.i32(i32 %1042) #9
  %1044 = trunc i32 %1043 to i8
  %1045 = and i8 %1044, 1
  %1046 = xor i8 %1045, 1
  store i8 %1046, i8* %26, align 1, !tbaa !2446
  %1047 = xor i32 %1035, %1031
  %1048 = xor i32 %1047, %1038
  %1049 = lshr i32 %1048, 4
  %1050 = trunc i32 %1049 to i8
  %1051 = and i8 %1050, 1
  store i8 %1051, i8* %31, align 1, !tbaa !2447
  %1052 = icmp eq i32 %1038, 0
  %1053 = zext i1 %1052 to i8
  store i8 %1053, i8* %34, align 1, !tbaa !2448
  %1054 = lshr i32 %1038, 31
  %1055 = trunc i32 %1054 to i8
  store i8 %1055, i8* %37, align 1, !tbaa !2449
  %1056 = lshr i32 %1031, 31
  %1057 = xor i32 %1037, %1056
  %1058 = xor i32 %1054, %1056
  %1059 = add nuw nsw i32 %1058, %1057
  %1060 = icmp eq i32 %1059, 2
  %1061 = zext i1 %1060 to i8
  store i8 %1061, i8* %43, align 1, !tbaa !2450
  %1062 = add i64 %970, -44
  %1063 = add i64 %1006, 19
  store i64 %1063, i64* %PC, align 8
  %1064 = inttoptr i64 %1062 to i32*
  store i32 %1038, i32* %1064, align 4
  %1065 = load i64, i64* %RBP, align 8
  %1066 = add i64 %1065, -32
  %1067 = load i64, i64* %PC, align 8
  %1068 = add i64 %1067, 4
  store i64 %1068, i64* %PC, align 8
  %1069 = inttoptr i64 %1066 to i64*
  %1070 = load i64, i64* %1069, align 8
  store i64 %1070, i64* %RSI, align 8, !tbaa !2428
  %1071 = add i64 %1065, -44
  %1072 = add i64 %1067, 8
  store i64 %1072, i64* %PC, align 8
  %1073 = inttoptr i64 %1071 to i32*
  %1074 = load i32, i32* %1073, align 4
  %1075 = sext i32 %1074 to i64
  store i64 %1075, i64* %RDI, align 8, !tbaa !2428
  %1076 = shl nsw i64 %1075, 2
  %1077 = add i64 %1076, %1070
  %1078 = add i64 %1067, 13
  store i64 %1078, i64* %PC, align 8
  %1079 = inttoptr i64 %1077 to i32*
  %1080 = load i32, i32* %1079, align 4
  store i32 %1080, i32* %321, align 1, !tbaa !2451
  store float 0.000000e+00, float* %323, align 1, !tbaa !2451
  store float 0.000000e+00, float* %325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %327, align 1, !tbaa !2451
  %1081 = add i64 %1065, -16
  %1082 = add i64 %1067, 16
  store i64 %1082, i64* %PC, align 8
  %1083 = inttoptr i64 %1081 to i32*
  %1084 = load i32, i32* %1083, align 4
  %1085 = zext i32 %1084 to i64
  store i64 %1085, i64* %RCX, align 8, !tbaa !2428
  %1086 = add i64 %1067, 19
  store i64 %1086, i64* %PC, align 8
  %1087 = load i32, i32* %1073, align 4
  %1088 = add i32 %1087, 1
  %1089 = zext i32 %1088 to i64
  store i64 %1089, i64* %RDX, align 8, !tbaa !2428
  %1090 = lshr i32 %1088, 31
  %1091 = sub i32 %1084, %1088
  %1092 = zext i32 %1091 to i64
  store i64 %1092, i64* %RCX, align 8, !tbaa !2428
  %1093 = icmp ult i32 %1084, %1088
  %1094 = zext i1 %1093 to i8
  store i8 %1094, i8* %19, align 1, !tbaa !2432
  %1095 = and i32 %1091, 255
  %1096 = tail call i32 @llvm.ctpop.i32(i32 %1095) #9
  %1097 = trunc i32 %1096 to i8
  %1098 = and i8 %1097, 1
  %1099 = xor i8 %1098, 1
  store i8 %1099, i8* %26, align 1, !tbaa !2446
  %1100 = xor i32 %1088, %1084
  %1101 = xor i32 %1100, %1091
  %1102 = lshr i32 %1101, 4
  %1103 = trunc i32 %1102 to i8
  %1104 = and i8 %1103, 1
  store i8 %1104, i8* %31, align 1, !tbaa !2447
  %1105 = icmp eq i32 %1091, 0
  %1106 = zext i1 %1105 to i8
  store i8 %1106, i8* %34, align 1, !tbaa !2448
  %1107 = lshr i32 %1091, 31
  %1108 = trunc i32 %1107 to i8
  store i8 %1108, i8* %37, align 1, !tbaa !2449
  %1109 = lshr i32 %1084, 31
  %1110 = xor i32 %1090, %1109
  %1111 = xor i32 %1107, %1109
  %1112 = add nuw nsw i32 %1111, %1110
  %1113 = icmp eq i32 %1112, 2
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %43, align 1, !tbaa !2450
  %1115 = load i64, i64* %RBP, align 8
  %1116 = add i64 %1115, -8
  %1117 = add i64 %1067, 28
  store i64 %1117, i64* %PC, align 8
  %1118 = inttoptr i64 %1116 to i64*
  %1119 = load i64, i64* %1118, align 8
  store i64 %1119, i64* %RSI, align 8, !tbaa !2428
  %1120 = add i64 %1115, -12
  %1121 = add i64 %1067, 31
  store i64 %1121, i64* %PC, align 8
  %1122 = inttoptr i64 %1120 to i32*
  %1123 = load i32, i32* %1122, align 4
  %1124 = zext i32 %1123 to i64
  store i64 %1124, i64* %RDX, align 8, !tbaa !2428
  %1125 = add i64 %1115, -44
  %1126 = add i64 %1067, 35
  store i64 %1126, i64* %PC, align 8
  %1127 = inttoptr i64 %1125 to i32*
  %1128 = load i32, i32* %1127, align 4
  %1129 = sext i32 %1123 to i64
  %1130 = sext i32 %1128 to i64
  %1131 = mul nsw i64 %1130, %1129
  %1132 = trunc i64 %1131 to i32
  %1133 = and i64 %1131, 4294967295
  store i64 %1133, i64* %RDX, align 8, !tbaa !2428
  %1134 = shl i64 %1131, 32
  %1135 = ashr exact i64 %1134, 32
  %1136 = icmp ne i64 %1135, %1131
  %1137 = zext i1 %1136 to i8
  store i8 %1137, i8* %19, align 1, !tbaa !2432
  %1138 = and i32 %1132, 255
  %1139 = tail call i32 @llvm.ctpop.i32(i32 %1138) #9
  %1140 = trunc i32 %1139 to i8
  %1141 = and i8 %1140, 1
  %1142 = xor i8 %1141, 1
  store i8 %1142, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %1143 = lshr i32 %1132, 31
  %1144 = trunc i32 %1143 to i8
  store i8 %1144, i8* %37, align 1, !tbaa !2449
  store i8 %1137, i8* %43, align 1, !tbaa !2450
  %1145 = add i64 %1067, 38
  store i64 %1145, i64* %PC, align 8
  %1146 = trunc i64 %1131 to i32
  %1147 = load i32, i32* %1127, align 4
  %1148 = add i32 %1147, %1146
  %1149 = add i32 %1148, 1
  %1150 = zext i32 %1149 to i64
  store i64 %1150, i64* %RDX, align 8, !tbaa !2428
  %1151 = sext i32 %1149 to i64
  %1152 = shl nsw i64 %1151, 2
  store i64 %1152, i64* %RDI, align 8, !tbaa !2428
  %1153 = load i64, i64* %RSI, align 8
  %1154 = add i64 %1152, %1153
  store i64 %1154, i64* %RSI, align 8, !tbaa !2428
  %1155 = icmp ult i64 %1154, %1153
  %1156 = icmp ult i64 %1154, %1152
  %1157 = or i1 %1155, %1156
  %1158 = zext i1 %1157 to i8
  store i8 %1158, i8* %19, align 1, !tbaa !2432
  %1159 = trunc i64 %1154 to i32
  %1160 = and i32 %1159, 255
  %1161 = tail call i32 @llvm.ctpop.i32(i32 %1160) #9
  %1162 = trunc i32 %1161 to i8
  %1163 = and i8 %1162, 1
  %1164 = xor i8 %1163, 1
  store i8 %1164, i8* %26, align 1, !tbaa !2446
  %1165 = xor i64 %1152, %1153
  %1166 = xor i64 %1165, %1154
  %1167 = lshr i64 %1166, 4
  %1168 = trunc i64 %1167 to i8
  %1169 = and i8 %1168, 1
  store i8 %1169, i8* %31, align 1, !tbaa !2447
  %1170 = icmp eq i64 %1154, 0
  %1171 = zext i1 %1170 to i8
  store i8 %1171, i8* %34, align 1, !tbaa !2448
  %1172 = lshr i64 %1154, 63
  %1173 = trunc i64 %1172 to i8
  store i8 %1173, i8* %37, align 1, !tbaa !2449
  %1174 = lshr i64 %1153, 63
  %1175 = lshr i64 %1151, 61
  %1176 = and i64 %1175, 1
  %1177 = xor i64 %1172, %1174
  %1178 = xor i64 %1172, %1176
  %1179 = add nuw nsw i64 %1177, %1178
  %1180 = icmp eq i64 %1179, 2
  %1181 = zext i1 %1180 to i8
  store i8 %1181, i8* %43, align 1, !tbaa !2450
  %1182 = load i64, i64* %RBP, align 8
  %1183 = add i64 %1182, -32
  %1184 = add i64 %1067, 55
  store i64 %1184, i64* %PC, align 8
  %1185 = inttoptr i64 %1183 to i64*
  %1186 = load i64, i64* %1185, align 8
  store i64 %1186, i64* %RDI, align 8, !tbaa !2428
  %1187 = add i64 %1182, -44
  %1188 = add i64 %1067, 58
  store i64 %1188, i64* %PC, align 8
  %1189 = inttoptr i64 %1187 to i32*
  %1190 = load i32, i32* %1189, align 4
  %1191 = add i32 %1190, 1
  %1192 = sext i32 %1191 to i64
  %1193 = shl nsw i64 %1192, 2
  store i64 %1193, i64* %R8, align 8, !tbaa !2428
  %1194 = add i64 %1193, %1186
  %1195 = icmp ult i64 %1194, %1186
  %1196 = icmp ult i64 %1194, %1193
  %1197 = or i1 %1195, %1196
  %1198 = zext i1 %1197 to i8
  store i8 %1198, i8* %19, align 1, !tbaa !2432
  %1199 = trunc i64 %1194 to i32
  %1200 = and i32 %1199, 255
  %1201 = tail call i32 @llvm.ctpop.i32(i32 %1200) #9
  %1202 = trunc i32 %1201 to i8
  %1203 = and i8 %1202, 1
  %1204 = xor i8 %1203, 1
  store i8 %1204, i8* %26, align 1, !tbaa !2446
  %1205 = xor i64 %1193, %1186
  %1206 = xor i64 %1205, %1194
  %1207 = lshr i64 %1206, 4
  %1208 = trunc i64 %1207 to i8
  %1209 = and i8 %1208, 1
  store i8 %1209, i8* %31, align 1, !tbaa !2447
  %1210 = icmp eq i64 %1194, 0
  %1211 = zext i1 %1210 to i8
  store i8 %1211, i8* %34, align 1, !tbaa !2448
  %1212 = lshr i64 %1194, 63
  %1213 = trunc i64 %1212 to i8
  store i8 %1213, i8* %37, align 1, !tbaa !2449
  %1214 = lshr i64 %1186, 63
  %1215 = lshr i64 %1192, 61
  %1216 = and i64 %1215, 1
  %1217 = xor i64 %1212, %1214
  %1218 = xor i64 %1212, %1216
  %1219 = add nuw nsw i64 %1217, %1218
  %1220 = icmp eq i64 %1219, 2
  %1221 = zext i1 %1220 to i8
  store i8 %1221, i8* %43, align 1, !tbaa !2450
  %1222 = load i64, i64* %RBP, align 8
  %1223 = add i64 %1222, -80
  %1224 = add i64 %1067, 75
  store i64 %1224, i64* %PC, align 8
  %1225 = inttoptr i64 %1223 to i64*
  store i64 %1194, i64* %1225, align 8
  %1226 = load i32, i32* %ECX, align 4
  %1227 = zext i32 %1226 to i64
  %1228 = load i64, i64* %PC, align 8
  store i64 %1227, i64* %RDI, align 8, !tbaa !2428
  %1229 = load i32, i32* %EAX, align 4
  %1230 = zext i32 %1229 to i64
  store i64 %1230, i64* %RDX, align 8, !tbaa !2428
  %1231 = load i64, i64* %RBP, align 8
  %1232 = add i64 %1231, -80
  %1233 = add i64 %1228, 8
  store i64 %1233, i64* %PC, align 8
  %1234 = inttoptr i64 %1232 to i64*
  %1235 = load i64, i64* %1234, align 8
  store i64 %1235, i64* %RCX, align 8, !tbaa !2428
  store i64 %1230, i64* %R8, align 8, !tbaa !2428
  %1236 = add i64 %1231, -84
  %1237 = add i64 %1228, 16
  store i64 %1237, i64* %PC, align 8
  %1238 = load <2 x float>, <2 x float>* %318, align 1
  %1239 = extractelement <2 x float> %1238, i32 0
  %1240 = inttoptr i64 %1236 to float*
  store float %1239, float* %1240, align 4
  %1241 = load i64, i64* %PC, align 8
  %1242 = add i64 %1241, 2761
  %1243 = add i64 %1241, 5
  %1244 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1245 = add i64 %1244, -8
  %1246 = inttoptr i64 %1245 to i64*
  store i64 %1243, i64* %1246, align 8
  store i64 %1245, i64* %RSP, align 8, !tbaa !2428
  store i64 %1242, i64* %PC, align 8, !tbaa !2428
  %1247 = tail call %struct.Memory* @sub_4029e0_ddot(%struct.State* nonnull %0, i64 %1242, %struct.Memory* %2)
  %1248 = load i64, i64* %RBP, align 8
  %1249 = add i64 %1248, -84
  %1250 = load i64, i64* %PC, align 8
  %1251 = add i64 %1250, 5
  store i64 %1251, i64* %PC, align 8
  %1252 = inttoptr i64 %1249 to i32*
  %1253 = load i32, i32* %1252, align 4
  store i32 %1253, i32* %1016, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1018, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1020, align 1, !tbaa !2451
  store float 0.000000e+00, float* %1022, align 1, !tbaa !2451
  %1254 = load <2 x float>, <2 x float>* %1023, align 1
  %1255 = load <2 x i32>, <2 x i32>* %1024, align 1
  %1256 = load <2 x float>, <2 x float>* %318, align 1
  %1257 = extractelement <2 x float> %1254, i32 0
  %1258 = extractelement <2 x float> %1256, i32 0
  %1259 = fadd float %1257, %1258
  store float %1259, float* %1015, align 1, !tbaa !2451
  %1260 = bitcast <2 x float> %1254 to <2 x i32>
  %1261 = extractelement <2 x i32> %1260, i32 1
  store i32 %1261, i32* %1025, align 1, !tbaa !2451
  %1262 = extractelement <2 x i32> %1255, i32 0
  store i32 %1262, i32* %1026, align 1, !tbaa !2451
  %1263 = extractelement <2 x i32> %1255, i32 1
  store i32 %1263, i32* %1027, align 1, !tbaa !2451
  %1264 = add i64 %1248, -32
  %1265 = add i64 %1250, 13
  store i64 %1265, i64* %PC, align 8
  %1266 = inttoptr i64 %1264 to i64*
  %1267 = load i64, i64* %1266, align 8
  store i64 %1267, i64* %RCX, align 8, !tbaa !2428
  %1268 = add i64 %1248, -44
  %1269 = add i64 %1250, 17
  store i64 %1269, i64* %PC, align 8
  %1270 = inttoptr i64 %1268 to i32*
  %1271 = load i32, i32* %1270, align 4
  %1272 = sext i32 %1271 to i64
  store i64 %1272, i64* %RSI, align 8, !tbaa !2428
  %1273 = shl nsw i64 %1272, 2
  %1274 = add i64 %1273, %1267
  %1275 = add i64 %1250, 22
  store i64 %1275, i64* %PC, align 8
  %1276 = load <2 x float>, <2 x float>* %1023, align 1
  %1277 = extractelement <2 x float> %1276, i32 0
  %1278 = inttoptr i64 %1274 to float*
  store float %1277, float* %1278, align 4
  %1279 = load i64, i64* %RBP, align 8
  %1280 = add i64 %1279, -24
  %1281 = load i64, i64* %PC, align 8
  %1282 = add i64 %1281, 4
  store i64 %1282, i64* %PC, align 8
  %1283 = inttoptr i64 %1280 to i64*
  %1284 = load i64, i64* %1283, align 8
  store i64 %1284, i64* %RCX, align 8, !tbaa !2428
  %1285 = add i64 %1279, -44
  %1286 = add i64 %1281, 8
  store i64 %1286, i64* %PC, align 8
  %1287 = inttoptr i64 %1285 to i32*
  %1288 = load i32, i32* %1287, align 4
  %1289 = sext i32 %1288 to i64
  store i64 %1289, i64* %RSI, align 8, !tbaa !2428
  %1290 = shl nsw i64 %1289, 2
  %1291 = add i64 %1290, %1284
  %1292 = add i64 %1281, 11
  store i64 %1292, i64* %PC, align 8
  %1293 = inttoptr i64 %1291 to i32*
  %1294 = load i32, i32* %1293, align 4
  %1295 = zext i32 %1294 to i64
  store i64 %1295, i64* %RAX, align 8, !tbaa !2428
  %1296 = add i64 %1279, -52
  %1297 = add i64 %1281, 14
  store i64 %1297, i64* %PC, align 8
  %1298 = inttoptr i64 %1296 to i32*
  store i32 %1294, i32* %1298, align 4
  %1299 = load i64, i64* %RBP, align 8
  %1300 = add i64 %1299, -52
  %1301 = load i64, i64* %PC, align 8
  %1302 = add i64 %1301, 3
  store i64 %1302, i64* %PC, align 8
  %1303 = inttoptr i64 %1300 to i32*
  %1304 = load i32, i32* %1303, align 4
  %1305 = zext i32 %1304 to i64
  store i64 %1305, i64* %RAX, align 8, !tbaa !2428
  %1306 = add i64 %1299, -44
  %1307 = add i64 %1301, 6
  store i64 %1307, i64* %PC, align 8
  %1308 = inttoptr i64 %1306 to i32*
  %1309 = load i32, i32* %1308, align 4
  %1310 = sub i32 %1304, %1309
  %1311 = icmp ult i32 %1304, %1309
  %1312 = zext i1 %1311 to i8
  store i8 %1312, i8* %19, align 1, !tbaa !2432
  %1313 = and i32 %1310, 255
  %1314 = tail call i32 @llvm.ctpop.i32(i32 %1313) #9
  %1315 = trunc i32 %1314 to i8
  %1316 = and i8 %1315, 1
  %1317 = xor i8 %1316, 1
  store i8 %1317, i8* %26, align 1, !tbaa !2446
  %1318 = xor i32 %1309, %1304
  %1319 = xor i32 %1318, %1310
  %1320 = lshr i32 %1319, 4
  %1321 = trunc i32 %1320 to i8
  %1322 = and i8 %1321, 1
  store i8 %1322, i8* %31, align 1, !tbaa !2447
  %1323 = icmp eq i32 %1310, 0
  %1324 = zext i1 %1323 to i8
  store i8 %1324, i8* %34, align 1, !tbaa !2448
  %1325 = lshr i32 %1310, 31
  %1326 = trunc i32 %1325 to i8
  store i8 %1326, i8* %37, align 1, !tbaa !2449
  %1327 = lshr i32 %1304, 31
  %1328 = lshr i32 %1309, 31
  %1329 = xor i32 %1328, %1327
  %1330 = xor i32 %1325, %1327
  %1331 = add nuw nsw i32 %1330, %1329
  %1332 = icmp eq i32 %1331, 2
  %1333 = zext i1 %1332 to i8
  store i8 %1333, i8* %43, align 1, !tbaa !2450
  %.v49 = select i1 %1323, i64 74, i64 12
  %1334 = add i64 %1301, %.v49
  store i64 %1334, i64* %PC, align 8, !tbaa !2428
  br i1 %1323, label %block_401f8a, label %block_401f4c

block_401e8c:                                     ; preds = %block_401dff
  %1335 = add i64 %126, -56
  %1336 = add i64 %162, 4
  store i64 %1336, i64* %PC, align 8
  %1337 = inttoptr i64 %1335 to i32*
  %1338 = load i32, i32* %1337, align 4
  %1339 = add i32 %1338, -1
  %1340 = icmp eq i32 %1338, 0
  %1341 = zext i1 %1340 to i8
  store i8 %1341, i8* %19, align 1, !tbaa !2432
  %1342 = and i32 %1339, 255
  %1343 = tail call i32 @llvm.ctpop.i32(i32 %1342) #9
  %1344 = trunc i32 %1343 to i8
  %1345 = and i8 %1344, 1
  %1346 = xor i8 %1345, 1
  store i8 %1346, i8* %26, align 1, !tbaa !2446
  %1347 = xor i32 %1339, %1338
  %1348 = lshr i32 %1347, 4
  %1349 = trunc i32 %1348 to i8
  %1350 = and i8 %1349, 1
  store i8 %1350, i8* %31, align 1, !tbaa !2447
  %1351 = icmp eq i32 %1339, 0
  %1352 = zext i1 %1351 to i8
  store i8 %1352, i8* %34, align 1, !tbaa !2448
  %1353 = lshr i32 %1339, 31
  %1354 = trunc i32 %1353 to i8
  store i8 %1354, i8* %37, align 1, !tbaa !2449
  %1355 = lshr i32 %1338, 31
  %1356 = xor i32 %1353, %1355
  %1357 = add nuw nsw i32 %1356, %1355
  %1358 = icmp eq i32 %1357, 2
  %1359 = zext i1 %1358 to i8
  store i8 %1359, i8* %43, align 1, !tbaa !2450
  %1360 = icmp ne i8 %1354, 0
  %1361 = xor i1 %1360, %1358
  %.v47 = select i1 %1361, i64 278, i64 10
  %1362 = add i64 %162, %.v47
  store i64 %1362, i64* %PC, align 8, !tbaa !2428
  br i1 %1361, label %block_401fa2, label %block_401e96

block_401e0b:                                     ; preds = %block_401dff
  store i64 1, i64* %RAX, align 8, !tbaa !2428
  %1363 = add i64 %162, 8
  store i64 %1363, i64* %PC, align 8
  %1364 = load i32, i32* %129, align 4
  %1365 = zext i32 %1364 to i64
  store i64 %1365, i64* %RDI, align 8, !tbaa !2428
  %1366 = add i64 %126, -8
  %1367 = add i64 %162, 12
  store i64 %1367, i64* %PC, align 8
  %1368 = inttoptr i64 %1366 to i64*
  %1369 = load i64, i64* %1368, align 8
  store i64 %1369, i64* %RCX, align 8, !tbaa !2428
  %1370 = add i64 %126, -12
  %1371 = add i64 %162, 15
  store i64 %1371, i64* %PC, align 8
  %1372 = inttoptr i64 %1370 to i32*
  %1373 = load i32, i32* %1372, align 4
  %1374 = zext i32 %1373 to i64
  store i64 %1374, i64* %RDX, align 8, !tbaa !2428
  %1375 = add i64 %162, 19
  store i64 %1375, i64* %PC, align 8
  %1376 = load i32, i32* %129, align 4
  %1377 = sext i32 %1373 to i64
  %1378 = sext i32 %1376 to i64
  %1379 = mul nsw i64 %1378, %1377
  %1380 = and i64 %1379, 4294967295
  store i64 %1380, i64* %RDX, align 8, !tbaa !2428
  %sext45 = shl i64 %1379, 32
  %1381 = ashr exact i64 %sext45, 30
  store i64 %1381, i64* %RSI, align 8, !tbaa !2428
  %1382 = add i64 %1381, %1369
  store i64 %1382, i64* %RCX, align 8, !tbaa !2428
  %1383 = icmp ult i64 %1382, %1369
  %1384 = icmp ult i64 %1382, %1381
  %1385 = or i1 %1383, %1384
  %1386 = zext i1 %1385 to i8
  store i8 %1386, i8* %19, align 1, !tbaa !2432
  %1387 = trunc i64 %1382 to i32
  %1388 = and i32 %1387, 255
  %1389 = tail call i32 @llvm.ctpop.i32(i32 %1388) #9
  %1390 = trunc i32 %1389 to i8
  %1391 = and i8 %1390, 1
  %1392 = xor i8 %1391, 1
  store i8 %1392, i8* %26, align 1, !tbaa !2446
  %1393 = xor i64 %1381, %1369
  %1394 = xor i64 %1393, %1382
  %1395 = lshr i64 %1394, 4
  %1396 = trunc i64 %1395 to i8
  %1397 = and i8 %1396, 1
  store i8 %1397, i8* %31, align 1, !tbaa !2447
  %1398 = icmp eq i64 %1382, 0
  %1399 = zext i1 %1398 to i8
  store i8 %1399, i8* %34, align 1, !tbaa !2448
  %1400 = lshr i64 %1382, 63
  %1401 = trunc i64 %1400 to i8
  store i8 %1401, i8* %37, align 1, !tbaa !2449
  %1402 = lshr i64 %1369, 63
  %1403 = lshr i64 %1381, 63
  %1404 = xor i64 %1400, %1402
  %1405 = xor i64 %1400, %1403
  %1406 = add nuw nsw i64 %1404, %1405
  %1407 = icmp eq i64 %1406, 2
  %1408 = zext i1 %1407 to i8
  store i8 %1408, i8* %43, align 1, !tbaa !2450
  %1409 = load i64, i64* %RBP, align 8
  %1410 = add i64 %1409, -32
  %1411 = add i64 %162, 36
  store i64 %1411, i64* %PC, align 8
  %1412 = inttoptr i64 %1410 to i64*
  %1413 = load i64, i64* %1412, align 8
  %1414 = add i64 %1409, -72
  %1415 = add i64 %162, 40
  store i64 %1415, i64* %PC, align 8
  %1416 = inttoptr i64 %1414 to i64*
  store i64 %1413, i64* %1416, align 8
  %1417 = load i64, i64* %RCX, align 8
  %1418 = load i64, i64* %PC, align 8
  store i64 %1417, i64* %RSI, align 8, !tbaa !2428
  %1419 = load i32, i32* %EAX, align 4
  %1420 = zext i32 %1419 to i64
  store i64 %1420, i64* %RDX, align 8, !tbaa !2428
  %1421 = load i64, i64* %RBP, align 8
  %1422 = add i64 %1421, -72
  %1423 = add i64 %1418, 9
  store i64 %1423, i64* %PC, align 8
  %1424 = inttoptr i64 %1422 to i64*
  %1425 = load i64, i64* %1424, align 8
  store i64 %1425, i64* %RCX, align 8, !tbaa !2428
  store i64 %1420, i64* %R8, align 8, !tbaa !2428
  %1426 = add i64 %1418, 2989
  %1427 = add i64 %1418, 17
  %1428 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1429 = add i64 %1428, -8
  %1430 = inttoptr i64 %1429 to i64*
  store i64 %1427, i64* %1430, align 8
  store i64 %1429, i64* %RSP, align 8, !tbaa !2428
  store i64 %1426, i64* %PC, align 8, !tbaa !2428
  %1431 = tail call %struct.Memory* @sub_4029e0_ddot(%struct.State* nonnull %0, i64 %1426, %struct.Memory* %2)
  %1432 = load i64, i64* %RBP, align 8
  %1433 = add i64 %1432, -40
  %1434 = load i64, i64* %PC, align 8
  %1435 = add i64 %1434, 5
  store i64 %1435, i64* %PC, align 8
  %1436 = load <2 x float>, <2 x float>* %318, align 1
  %1437 = extractelement <2 x float> %1436, i32 0
  %1438 = inttoptr i64 %1433 to float*
  store float %1437, float* %1438, align 4
  %1439 = load i64, i64* %RBP, align 8
  %1440 = add i64 %1439, -32
  %1441 = load i64, i64* %PC, align 8
  %1442 = add i64 %1441, 4
  store i64 %1442, i64* %PC, align 8
  %1443 = inttoptr i64 %1440 to i64*
  %1444 = load i64, i64* %1443, align 8
  store i64 %1444, i64* %RCX, align 8, !tbaa !2428
  %1445 = add i64 %1439, -44
  %1446 = add i64 %1441, 8
  store i64 %1446, i64* %PC, align 8
  %1447 = inttoptr i64 %1445 to i32*
  %1448 = load i32, i32* %1447, align 4
  %1449 = sext i32 %1448 to i64
  store i64 %1449, i64* %RSI, align 8, !tbaa !2428
  %1450 = shl nsw i64 %1449, 2
  %1451 = add i64 %1450, %1444
  %1452 = add i64 %1441, 13
  store i64 %1452, i64* %PC, align 8
  %1453 = inttoptr i64 %1451 to i32*
  %1454 = load i32, i32* %1453, align 4
  store i32 %1454, i32* %321, align 1, !tbaa !2451
  store float 0.000000e+00, float* %323, align 1, !tbaa !2451
  store float 0.000000e+00, float* %325, align 1, !tbaa !2451
  store float 0.000000e+00, float* %327, align 1, !tbaa !2451
  %1455 = add i64 %1439, -40
  %1456 = add i64 %1441, 18
  store i64 %1456, i64* %PC, align 8
  %1457 = load <2 x float>, <2 x float>* %318, align 1
  %1458 = load <2 x i32>, <2 x i32>* %328, align 1
  %1459 = inttoptr i64 %1455 to float*
  %1460 = load float, float* %1459, align 4
  %1461 = extractelement <2 x float> %1457, i32 0
  %1462 = fsub float %1461, %1460
  store float %1462, float* %320, align 1, !tbaa !2451
  %1463 = bitcast <2 x float> %1457 to <2 x i32>
  %1464 = extractelement <2 x i32> %1463, i32 1
  store i32 %1464, i32* %329, align 1, !tbaa !2451
  %1465 = extractelement <2 x i32> %1458, i32 0
  store i32 %1465, i32* %330, align 1, !tbaa !2451
  %1466 = extractelement <2 x i32> %1458, i32 1
  store i32 %1466, i32* %331, align 1, !tbaa !2451
  %1467 = add i64 %1439, -8
  %1468 = add i64 %1441, 22
  store i64 %1468, i64* %PC, align 8
  %1469 = inttoptr i64 %1467 to i64*
  %1470 = load i64, i64* %1469, align 8
  store i64 %1470, i64* %RCX, align 8, !tbaa !2428
  %1471 = add i64 %1439, -12
  %1472 = add i64 %1441, 25
  store i64 %1472, i64* %PC, align 8
  %1473 = inttoptr i64 %1471 to i32*
  %1474 = load i32, i32* %1473, align 4
  %1475 = zext i32 %1474 to i64
  store i64 %1475, i64* %RAX, align 8, !tbaa !2428
  %1476 = add i64 %1441, 29
  store i64 %1476, i64* %PC, align 8
  %1477 = load i32, i32* %1447, align 4
  %1478 = sext i32 %1474 to i64
  %1479 = sext i32 %1477 to i64
  %1480 = mul nsw i64 %1479, %1478
  %1481 = trunc i64 %1480 to i32
  %1482 = and i64 %1480, 4294967295
  store i64 %1482, i64* %RAX, align 8, !tbaa !2428
  %1483 = shl i64 %1480, 32
  %1484 = ashr exact i64 %1483, 32
  %1485 = icmp ne i64 %1484, %1480
  %1486 = zext i1 %1485 to i8
  store i8 %1486, i8* %19, align 1, !tbaa !2432
  %1487 = and i32 %1481, 255
  %1488 = tail call i32 @llvm.ctpop.i32(i32 %1487) #9
  %1489 = trunc i32 %1488 to i8
  %1490 = and i8 %1489, 1
  %1491 = xor i8 %1490, 1
  store i8 %1491, i8* %26, align 1, !tbaa !2446
  store i8 0, i8* %31, align 1, !tbaa !2447
  store i8 0, i8* %34, align 1, !tbaa !2448
  %1492 = lshr i32 %1481, 31
  %1493 = trunc i32 %1492 to i8
  store i8 %1493, i8* %37, align 1, !tbaa !2449
  store i8 %1486, i8* %43, align 1, !tbaa !2450
  %1494 = add i64 %1441, 32
  store i64 %1494, i64* %PC, align 8
  %1495 = trunc i64 %1480 to i32
  %1496 = load i32, i32* %1447, align 4
  %1497 = add i32 %1496, %1495
  %1498 = zext i32 %1497 to i64
  store i64 %1498, i64* %RAX, align 8, !tbaa !2428
  %1499 = icmp ult i32 %1497, %1495
  %1500 = icmp ult i32 %1497, %1496
  %1501 = or i1 %1499, %1500
  %1502 = zext i1 %1501 to i8
  store i8 %1502, i8* %19, align 1, !tbaa !2432
  %1503 = and i32 %1497, 255
  %1504 = tail call i32 @llvm.ctpop.i32(i32 %1503) #9
  %1505 = trunc i32 %1504 to i8
  %1506 = and i8 %1505, 1
  %1507 = xor i8 %1506, 1
  store i8 %1507, i8* %26, align 1, !tbaa !2446
  %1508 = xor i32 %1496, %1495
  %1509 = xor i32 %1508, %1497
  %1510 = lshr i32 %1509, 4
  %1511 = trunc i32 %1510 to i8
  %1512 = and i8 %1511, 1
  store i8 %1512, i8* %31, align 1, !tbaa !2447
  %1513 = icmp eq i32 %1497, 0
  %1514 = zext i1 %1513 to i8
  store i8 %1514, i8* %34, align 1, !tbaa !2448
  %1515 = lshr i32 %1497, 31
  %1516 = trunc i32 %1515 to i8
  store i8 %1516, i8* %37, align 1, !tbaa !2449
  %1517 = lshr i32 %1495, 31
  %1518 = lshr i32 %1496, 31
  %1519 = xor i32 %1515, %1517
  %1520 = xor i32 %1515, %1518
  %1521 = add nuw nsw i32 %1519, %1520
  %1522 = icmp eq i32 %1521, 2
  %1523 = zext i1 %1522 to i8
  store i8 %1523, i8* %43, align 1, !tbaa !2450
  %1524 = sext i32 %1497 to i64
  store i64 %1524, i64* %RSI, align 8, !tbaa !2428
  %1525 = shl nsw i64 %1524, 2
  %1526 = add i64 %1470, %1525
  %1527 = add i64 %1441, 40
  store i64 %1527, i64* %PC, align 8
  %1528 = load <2 x float>, <2 x float>* %318, align 1
  %1529 = load <2 x i32>, <2 x i32>* %328, align 1
  %1530 = inttoptr i64 %1526 to float*
  %1531 = load float, float* %1530, align 4
  %1532 = extractelement <2 x float> %1528, i32 0
  %1533 = fdiv float %1532, %1531
  store float %1533, float* %320, align 1, !tbaa !2451
  %1534 = bitcast <2 x float> %1528 to <2 x i32>
  %1535 = extractelement <2 x i32> %1534, i32 1
  store i32 %1535, i32* %329, align 1, !tbaa !2451
  %1536 = extractelement <2 x i32> %1529, i32 0
  store i32 %1536, i32* %330, align 1, !tbaa !2451
  %1537 = extractelement <2 x i32> %1529, i32 1
  store i32 %1537, i32* %331, align 1, !tbaa !2451
  %1538 = load i64, i64* %RBP, align 8
  %1539 = add i64 %1538, -32
  %1540 = add i64 %1441, 44
  store i64 %1540, i64* %PC, align 8
  %1541 = inttoptr i64 %1539 to i64*
  %1542 = load i64, i64* %1541, align 8
  store i64 %1542, i64* %RCX, align 8, !tbaa !2428
  %1543 = add i64 %1538, -44
  %1544 = add i64 %1441, 48
  store i64 %1544, i64* %PC, align 8
  %1545 = inttoptr i64 %1543 to i32*
  %1546 = load i32, i32* %1545, align 4
  %1547 = sext i32 %1546 to i64
  store i64 %1547, i64* %RSI, align 8, !tbaa !2428
  %1548 = shl nsw i64 %1547, 2
  %1549 = add i64 %1548, %1542
  %1550 = add i64 %1441, 53
  store i64 %1550, i64* %PC, align 8
  %1551 = load <2 x float>, <2 x float>* %318, align 1
  %1552 = extractelement <2 x float> %1551, i32 0
  %1553 = inttoptr i64 %1549 to float*
  store float %1552, float* %1553, align 4
  %1554 = load i64, i64* %RBP, align 8
  %1555 = add i64 %1554, -44
  %1556 = load i64, i64* %PC, align 8
  %1557 = add i64 %1556, 3
  store i64 %1557, i64* %PC, align 8
  %1558 = inttoptr i64 %1555 to i32*
  %1559 = load i32, i32* %1558, align 4
  %1560 = add i32 %1559, 1
  %1561 = zext i32 %1560 to i64
  store i64 %1561, i64* %RAX, align 8, !tbaa !2428
  %1562 = icmp eq i32 %1559, -1
  %1563 = icmp eq i32 %1560, 0
  %1564 = or i1 %1562, %1563
  %1565 = zext i1 %1564 to i8
  store i8 %1565, i8* %19, align 1, !tbaa !2432
  %1566 = and i32 %1560, 255
  %1567 = tail call i32 @llvm.ctpop.i32(i32 %1566) #9
  %1568 = trunc i32 %1567 to i8
  %1569 = and i8 %1568, 1
  %1570 = xor i8 %1569, 1
  store i8 %1570, i8* %26, align 1, !tbaa !2446
  %1571 = xor i32 %1560, %1559
  %1572 = lshr i32 %1571, 4
  %1573 = trunc i32 %1572 to i8
  %1574 = and i8 %1573, 1
  store i8 %1574, i8* %31, align 1, !tbaa !2447
  %1575 = zext i1 %1563 to i8
  store i8 %1575, i8* %34, align 1, !tbaa !2448
  %1576 = lshr i32 %1560, 31
  %1577 = trunc i32 %1576 to i8
  store i8 %1577, i8* %37, align 1, !tbaa !2449
  %1578 = lshr i32 %1559, 31
  %1579 = xor i32 %1576, %1578
  %1580 = add nuw nsw i32 %1579, %1576
  %1581 = icmp eq i32 %1580, 2
  %1582 = zext i1 %1581 to i8
  store i8 %1582, i8* %43, align 1, !tbaa !2450
  %1583 = add i64 %1556, 9
  store i64 %1583, i64* %PC, align 8
  store i32 %1560, i32* %1558, align 4
  %1584 = load i64, i64* %PC, align 8
  %1585 = add i64 %1584, -136
  store i64 %1585, i64* %PC, align 8, !tbaa !2428
  br label %block_401dff

block_401fa7:                                     ; preds = %block_401fa2, %block_401df3
  %.sink = phi i64 [ %1009, %block_401fa2 ], [ %163, %block_401df3 ]
  %MEMORY.7 = phi %struct.Memory* [ %2, %block_401fa2 ], [ %MEMORY.3, %block_401df3 ]
  %1586 = load i64, i64* %RSP, align 8
  %1587 = add i64 %1586, 96
  store i64 %1587, i64* %RSP, align 8, !tbaa !2428
  %1588 = icmp ugt i64 %1586, -97
  %1589 = zext i1 %1588 to i8
  store i8 %1589, i8* %19, align 1, !tbaa !2432
  %1590 = trunc i64 %1587 to i32
  %1591 = and i32 %1590, 255
  %1592 = tail call i32 @llvm.ctpop.i32(i32 %1591) #9
  %1593 = trunc i32 %1592 to i8
  %1594 = and i8 %1593, 1
  %1595 = xor i8 %1594, 1
  store i8 %1595, i8* %26, align 1, !tbaa !2446
  %1596 = xor i64 %1587, %1586
  %1597 = lshr i64 %1596, 4
  %1598 = trunc i64 %1597 to i8
  %1599 = and i8 %1598, 1
  store i8 %1599, i8* %31, align 1, !tbaa !2447
  %1600 = icmp eq i64 %1587, 0
  %1601 = zext i1 %1600 to i8
  store i8 %1601, i8* %34, align 1, !tbaa !2448
  %1602 = lshr i64 %1587, 63
  %1603 = trunc i64 %1602 to i8
  store i8 %1603, i8* %37, align 1, !tbaa !2449
  %1604 = lshr i64 %1586, 63
  %1605 = xor i64 %1602, %1604
  %1606 = add nuw nsw i64 %1605, %1602
  %1607 = icmp eq i64 %1606, 2
  %1608 = zext i1 %1607 to i8
  store i8 %1608, i8* %43, align 1, !tbaa !2450
  %1609 = add i64 %.sink, 5
  store i64 %1609, i64* %PC, align 8
  %1610 = add i64 %1586, 104
  %1611 = inttoptr i64 %1587 to i64*
  %1612 = load i64, i64* %1611, align 8
  store i64 %1612, i64* %RBP, align 8, !tbaa !2428
  store i64 %1610, i64* %RSP, align 8, !tbaa !2428
  %1613 = add i64 %.sink, 6
  store i64 %1613, i64* %PC, align 8
  %1614 = inttoptr i64 %1610 to i64*
  %1615 = load i64, i64* %1614, align 8
  store i64 %1615, i64* %PC, align 8, !tbaa !2428
  %1616 = add i64 %1586, 112
  store i64 %1616, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.7

block_401f8a:                                     ; preds = %block_401ea9, %block_401f4c
  %1617 = phi i64 [ %1299, %block_401ea9 ], [ %.pre27, %block_401f4c ]
  %1618 = phi i64 [ %1334, %block_401ea9 ], [ %.pre26, %block_401f4c ]
  %1619 = add i64 %1617, -48
  %1620 = add i64 %1618, 8
  store i64 %1620, i64* %PC, align 8
  %1621 = inttoptr i64 %1619 to i32*
  %1622 = load i32, i32* %1621, align 4
  %1623 = add i32 %1622, 1
  %1624 = zext i32 %1623 to i64
  store i64 %1624, i64* %RAX, align 8, !tbaa !2428
  %1625 = icmp eq i32 %1622, -1
  %1626 = icmp eq i32 %1623, 0
  %1627 = or i1 %1625, %1626
  %1628 = zext i1 %1627 to i8
  store i8 %1628, i8* %19, align 1, !tbaa !2432
  %1629 = and i32 %1623, 255
  %1630 = tail call i32 @llvm.ctpop.i32(i32 %1629) #9
  %1631 = trunc i32 %1630 to i8
  %1632 = and i8 %1631, 1
  %1633 = xor i8 %1632, 1
  store i8 %1633, i8* %26, align 1, !tbaa !2446
  %1634 = xor i32 %1623, %1622
  %1635 = lshr i32 %1634, 4
  %1636 = trunc i32 %1635 to i8
  %1637 = and i8 %1636, 1
  store i8 %1637, i8* %31, align 1, !tbaa !2447
  %1638 = zext i1 %1626 to i8
  store i8 %1638, i8* %34, align 1, !tbaa !2448
  %1639 = lshr i32 %1623, 31
  %1640 = trunc i32 %1639 to i8
  store i8 %1640, i8* %37, align 1, !tbaa !2449
  %1641 = lshr i32 %1622, 31
  %1642 = xor i32 %1639, %1641
  %1643 = add nuw nsw i32 %1642, %1639
  %1644 = icmp eq i32 %1643, 2
  %1645 = zext i1 %1644 to i8
  store i8 %1645, i8* %43, align 1, !tbaa !2450
  %1646 = add i64 %1618, 14
  store i64 %1646, i64* %PC, align 8
  store i32 %1623, i32* %1621, align 4
  %1647 = load i64, i64* %PC, align 8
  %1648 = add i64 %1647, -251
  store i64 %1648, i64* %PC, align 8, !tbaa !2428
  br label %block_401e9d
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4005e0_second(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4005e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -24
  %12 = icmp ult i64 %8, 16
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2432
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #9
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2447
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %10, -289
  %41 = add i64 %10, 12
  %42 = add i64 %7, -32
  %43 = inttoptr i64 %42 to i64*
  store i64 %41, i64* %43, align 8
  store i64 %42, i64* %RSP, align 8, !tbaa !2428
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %44 = tail call fastcc %struct.Memory* @ext_653140_clock(%struct.State* nonnull %0, %struct.Memory* %2)
  %45 = bitcast [32 x %union.VectorReg]* %3 to i8*
  %46 = load i64, i64* %PC, align 8
  %47 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 4) to i32*), align 4
  %48 = bitcast [32 x %union.VectorReg]* %3 to i32*
  store i32 %47, i32* %48, align 1, !tbaa !2451
  %49 = getelementptr inbounds i8, i8* %45, i64 4
  %50 = bitcast i8* %49 to float*
  store float 0.000000e+00, float* %50, align 1, !tbaa !2451
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %52 = bitcast i64* %51 to float*
  store float 0.000000e+00, float* %52, align 1, !tbaa !2451
  %53 = getelementptr inbounds i8, i8* %45, i64 12
  %54 = bitcast i8* %53 to float*
  store float 0.000000e+00, float* %54, align 1, !tbaa !2451
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -16
  %57 = load i64, i64* %RAX, align 8
  %58 = add i64 %46, 12
  store i64 %58, i64* %PC, align 8
  %59 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %59, align 8
  %60 = bitcast %union.VectorReg* %4 to i8*
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -16
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 6
  store i64 %64, i64* %PC, align 8
  %65 = bitcast %union.VectorReg* %4 to <2 x i32>*
  %66 = load <2 x i32>, <2 x i32>* %65, align 1
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %68 = bitcast i64* %67 to <2 x i32>*
  %69 = load <2 x i32>, <2 x i32>* %68, align 1
  %70 = inttoptr i64 %62 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sitofp i64 %71 to float
  %73 = bitcast %union.VectorReg* %4 to float*
  store float %72, float* %73, align 1, !tbaa !2451
  %74 = extractelement <2 x i32> %66, i32 1
  %75 = getelementptr inbounds i8, i8* %60, i64 4
  %76 = bitcast i8* %75 to i32*
  store i32 %74, i32* %76, align 1, !tbaa !2451
  %77 = extractelement <2 x i32> %69, i32 0
  %78 = bitcast i64* %67 to i32*
  store i32 %77, i32* %78, align 1, !tbaa !2451
  %79 = extractelement <2 x i32> %69, i32 1
  %80 = getelementptr inbounds i8, i8* %60, i64 12
  %81 = bitcast i8* %80 to i32*
  store i32 %79, i32* %81, align 1, !tbaa !2451
  %82 = bitcast %union.VectorReg* %4 to <2 x float>*
  %83 = load <2 x float>, <2 x float>* %82, align 1
  %84 = load <2 x i32>, <2 x i32>* %68, align 1
  %85 = bitcast [32 x %union.VectorReg]* %3 to <2 x float>*
  %86 = load <2 x float>, <2 x float>* %85, align 1
  %87 = extractelement <2 x float> %83, i32 0
  %88 = extractelement <2 x float> %86, i32 0
  %89 = fdiv float %87, %88
  store float %89, float* %73, align 1, !tbaa !2451
  %90 = bitcast <2 x float> %83 to <2 x i32>
  %91 = extractelement <2 x i32> %90, i32 1
  store i32 %91, i32* %76, align 1, !tbaa !2451
  %92 = extractelement <2 x i32> %84, i32 0
  store i32 %92, i32* %78, align 1, !tbaa !2451
  %93 = extractelement <2 x i32> %84, i32 1
  store i32 %93, i32* %81, align 1, !tbaa !2451
  %94 = add i64 %61, -4
  %95 = add i64 %63, 15
  store i64 %95, i64* %PC, align 8
  %96 = load <2 x float>, <2 x float>* %82, align 1
  %97 = extractelement <2 x float> %96, i32 0
  %98 = inttoptr i64 %94 to float*
  store float %97, float* %98, align 4
  %99 = load i64, i64* %RBP, align 8
  %100 = add i64 %99, -4
  %101 = load i64, i64* %PC, align 8
  %102 = add i64 %101, 5
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %100 to i32*
  %104 = load i32, i32* %103, align 4
  store i32 %104, i32* %48, align 1, !tbaa !2451
  store float 0.000000e+00, float* %50, align 1, !tbaa !2451
  store float 0.000000e+00, float* %52, align 1, !tbaa !2451
  store float 0.000000e+00, float* %54, align 1, !tbaa !2451
  %105 = load i64, i64* %RSP, align 8
  %106 = add i64 %105, 16
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %107 = icmp ugt i64 %105, -17
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %14, align 1, !tbaa !2432
  %109 = trunc i64 %106 to i32
  %110 = and i32 %109, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #9
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %21, align 1, !tbaa !2446
  %115 = xor i64 %105, 16
  %116 = xor i64 %115, %106
  %117 = lshr i64 %116, 4
  %118 = trunc i64 %117 to i8
  %119 = and i8 %118, 1
  store i8 %119, i8* %27, align 1, !tbaa !2447
  %120 = icmp eq i64 %106, 0
  %121 = zext i1 %120 to i8
  store i8 %121, i8* %30, align 1, !tbaa !2448
  %122 = lshr i64 %106, 63
  %123 = trunc i64 %122 to i8
  store i8 %123, i8* %33, align 1, !tbaa !2449
  %124 = lshr i64 %105, 63
  %125 = xor i64 %122, %124
  %126 = add nuw nsw i64 %125, %122
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %39, align 1, !tbaa !2450
  %129 = add i64 %101, 10
  store i64 %129, i64* %PC, align 8
  %130 = add i64 %105, 24
  %131 = inttoptr i64 %106 to i64*
  %132 = load i64, i64* %131, align 8
  store i64 %132, i64* %RBP, align 8, !tbaa !2428
  store i64 %130, i64* %RSP, align 8, !tbaa !2428
  %133 = add i64 %101, 11
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %130 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %PC, align 8, !tbaa !2428
  %136 = add i64 %105, 32
  store i64 %136, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %44
}

; Function Attrs: noinline norecurse nounwind
define %struct.Memory* @sub_402e20___libc_csu_fini(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #6 {
block_402e20:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402e24__term_proc(%struct.State* noalias nocapture dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_402e24:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = xor i64 %4, %3
  %8 = lshr i64 %7, 4
  %9 = trunc i64 %8 to i8
  %10 = and i8 %9, 1
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13 = lshr i64 %4, 63
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %15 = lshr i64 %3, 63
  %16 = xor i64 %13, %15
  %17 = add nuw nsw i64 %16, %15
  %18 = icmp eq i64 %17, 2
  %19 = zext i1 %18 to i8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %3, i64* %RSP, align 8, !tbaa !2428
  %21 = icmp ult i64 %3, 8
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1, !tbaa !2432
  %23 = trunc i64 %3 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #9
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %6, align 1, !tbaa !2446
  store i8 %10, i8* %11, align 1, !tbaa !2447
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %12, align 1, !tbaa !2448
  %31 = trunc i64 %15 to i8
  store i8 %31, i8* %14, align 1, !tbaa !2449
  store i8 %19, i8* %20, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401fb0_dmxpy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401fb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  store i64 2, i64* %RAX, align 8, !tbaa !2428
  %16 = add i64 %12, -12
  %17 = load i32, i32* %EDI, align 4
  %18 = add i64 %15, 11
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %16 to i32*
  store i32 %17, i32* %19, align 4
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -16
  %22 = load i64, i64* %RSI, align 8
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 4
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i64*
  store i64 %22, i64* %25, align 8
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -20
  %28 = load i32, i32* %EDX, align 4
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 3
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i32*
  store i32 %28, i32* %31, align 4
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i32, i32* %ECX, align 4
  %35 = load i64, i64* %PC, align 8
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC, align 8
  %37 = inttoptr i64 %33 to i32*
  store i32 %34, i32* %37, align 4
  %38 = load i64, i64* %RBP, align 8
  %39 = add i64 %38, -32
  %40 = load i64, i64* %R8, align 8
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 4
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %39 to i64*
  store i64 %40, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -40
  %46 = load i64, i64* %R9, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -20
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 3
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  store i64 %56, i64* %RCX, align 8, !tbaa !2428
  %57 = add i64 %50, -56
  %58 = load i32, i32* %EAX, align 4
  %59 = add i64 %52, 6
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 %58, i32* %60, align 4
  %61 = load i32, i32* %ECX, align 4
  %62 = zext i32 %61 to i64
  %63 = load i64, i64* %PC, align 8
  store i64 %62, i64* %RAX, align 8, !tbaa !2428
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %65 = sext i32 %61 to i64
  %66 = lshr i64 %65, 32
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -56
  %69 = add i64 %63, 6
  store i64 %69, i64* %PC, align 8
  %70 = inttoptr i64 %68 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RCX, align 8, !tbaa !2428
  %73 = add i64 %63, 8
  store i64 %73, i64* %PC, align 8
  %74 = sext i32 %71 to i64
  %75 = shl nuw i64 %66, 32
  %76 = or i64 %75, %62
  %77 = sdiv i64 %76, %74
  %78 = shl i64 %77, 32
  %79 = ashr exact i64 %78, 32
  %80 = icmp eq i64 %77, %79
  br i1 %80, label %83, label %81

; <label>:81:                                     ; preds = %block_401fb0
  %82 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %73, %struct.Memory* %2) #12
  %.pre = load i64, i64* %RBP, align 8
  %.pre20 = load i32, i32* %EDX, align 4
  %.pre21 = load i64, i64* %PC, align 8
  %.pre40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %.pre41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %.pre43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %.pre45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %.pre47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %.pre49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

; <label>:83:                                     ; preds = %block_401fb0
  %84 = srem i64 %76, %74
  %85 = and i64 %77, 4294967295
  store i64 %85, i64* %RAX, align 8, !tbaa !2428
  %86 = and i64 %84, 4294967295
  store i64 %86, i64* %RDX, align 8, !tbaa !2428
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %87, align 1, !tbaa !2432
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 0, i8* %88, align 1, !tbaa !2446
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %89, align 1, !tbaa !2447
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %90, align 1, !tbaa !2448
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %91, align 1, !tbaa !2449
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %92, align 1, !tbaa !2450
  %93 = trunc i64 %84 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4: ; preds = %83, %81
  %.pre-phi50 = phi i8* [ %92, %83 ], [ %.pre49, %81 ]
  %.pre-phi48 = phi i8* [ %91, %83 ], [ %.pre47, %81 ]
  %.pre-phi46 = phi i8* [ %90, %83 ], [ %.pre45, %81 ]
  %.pre-phi44 = phi i8* [ %89, %83 ], [ %.pre43, %81 ]
  %.pre-phi42 = phi i8* [ %88, %83 ], [ %.pre41, %81 ]
  %.pre-phi = phi i8* [ %87, %83 ], [ %.pre40, %81 ]
  %94 = phi i64 [ %73, %83 ], [ %.pre21, %81 ]
  %95 = phi i32 [ %93, %83 ], [ %.pre20, %81 ]
  %96 = phi i64 [ %67, %83 ], [ %.pre, %81 ]
  %97 = phi %struct.Memory* [ %2, %83 ], [ %82, %81 ]
  %98 = add i64 %96, -44
  %99 = add i64 %94, 3
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i32*
  store i32 %95, i32* %100, align 4
  %101 = load i64, i64* %RBP, align 8
  %102 = add i64 %101, -44
  %103 = load i64, i64* %PC, align 8
  %104 = add i64 %103, 4
  store i64 %104, i64* %PC, align 8
  %105 = inttoptr i64 %102 to i32*
  %106 = load i32, i32* %105, align 4
  %107 = add i32 %106, -1
  %108 = icmp eq i32 %106, 0
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %.pre-phi, align 1, !tbaa !2432
  %110 = and i32 %107, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #9
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %.pre-phi42, align 1, !tbaa !2446
  %115 = xor i32 %107, %106
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %.pre-phi44, align 1, !tbaa !2447
  %119 = icmp eq i32 %107, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %.pre-phi46, align 1, !tbaa !2448
  %121 = lshr i32 %107, 31
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %.pre-phi48, align 1, !tbaa !2449
  %123 = lshr i32 %106, 31
  %124 = xor i32 %121, %123
  %125 = add nuw nsw i32 %124, %123
  %126 = icmp eq i32 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %.pre-phi50, align 1, !tbaa !2450
  %128 = icmp ne i8 %122, 0
  %129 = xor i1 %128, %126
  %.v51 = select i1 %129, i64 122, i64 10
  %130 = add i64 %103, %.v51
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  br i1 %129, label %block_402059, label %block_401fe9

block_40226d:                                     ; preds = %block_40225d, %block_402279
  %131 = phi i64 [ %.pre34, %block_40225d ], [ %3926, %block_402279 ]
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -48
  %134 = add i64 %131, 3
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %133 to i32*
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = add i64 %132, -4
  %139 = add i64 %131, 6
  store i64 %139, i64* %PC, align 8
  %140 = inttoptr i64 %138 to i32*
  %141 = load i32, i32* %140, align 4
  %142 = sub i32 %136, %141
  %143 = icmp ult i32 %136, %141
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %.pre-phi, align 1, !tbaa !2432
  %145 = and i32 %142, 255
  %146 = tail call i32 @llvm.ctpop.i32(i32 %145) #9
  %147 = trunc i32 %146 to i8
  %148 = and i8 %147, 1
  %149 = xor i8 %148, 1
  store i8 %149, i8* %.pre-phi42, align 1, !tbaa !2446
  %150 = xor i32 %141, %136
  %151 = xor i32 %150, %142
  %152 = lshr i32 %151, 4
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  store i8 %154, i8* %.pre-phi44, align 1, !tbaa !2447
  %155 = icmp eq i32 %142, 0
  %156 = zext i1 %155 to i8
  store i8 %156, i8* %.pre-phi46, align 1, !tbaa !2448
  %157 = lshr i32 %142, 31
  %158 = trunc i32 %157 to i8
  store i8 %158, i8* %.pre-phi48, align 1, !tbaa !2449
  %159 = lshr i32 %136, 31
  %160 = lshr i32 %141, 31
  %161 = xor i32 %160, %159
  %162 = xor i32 %157, %159
  %163 = add nuw nsw i32 %162, %161
  %164 = icmp eq i32 %163, 2
  %165 = zext i1 %164 to i8
  store i8 %165, i8* %.pre-phi50, align 1, !tbaa !2450
  %166 = icmp ne i8 %158, 0
  %167 = xor i1 %166, %164
  %.v58 = select i1 %167, i64 12, i64 434
  %168 = add i64 %131, %.v58
  store i64 %168, i64* %PC, align 8, !tbaa !2428
  br i1 %167, label %block_402279, label %block_40241f

block_401fe9:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %169 = add i64 %130, 3
  store i64 %169, i64* %PC, align 8
  %170 = load i32, i32* %105, align 4
  %171 = add i32 %170, -1
  %172 = zext i32 %171 to i64
  store i64 %172, i64* %RAX, align 8, !tbaa !2428
  %173 = icmp eq i32 %170, 0
  %174 = zext i1 %173 to i8
  store i8 %174, i8* %.pre-phi, align 1, !tbaa !2432
  %175 = and i32 %171, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #9
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %.pre-phi42, align 1, !tbaa !2446
  %180 = xor i32 %171, %170
  %181 = lshr i32 %180, 4
  %182 = trunc i32 %181 to i8
  %183 = and i8 %182, 1
  store i8 %183, i8* %.pre-phi44, align 1, !tbaa !2447
  %184 = icmp eq i32 %171, 0
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %.pre-phi46, align 1, !tbaa !2448
  %186 = lshr i32 %171, 31
  %187 = trunc i32 %186 to i8
  store i8 %187, i8* %.pre-phi48, align 1, !tbaa !2449
  %188 = lshr i32 %170, 31
  %189 = xor i32 %186, %188
  %190 = add nuw nsw i32 %189, %188
  %191 = icmp eq i32 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %.pre-phi50, align 1, !tbaa !2450
  %193 = add i64 %130, 9
  store i64 %193, i64* %PC, align 8
  store i32 %171, i32* %105, align 4
  %194 = load i64, i64* %RBP, align 8
  %195 = add i64 %194, -48
  %196 = load i64, i64* %PC, align 8
  %197 = add i64 %196, 7
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %195 to i32*
  store i32 0, i32* %198, align 4
  %199 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %200 = bitcast [32 x %union.VectorReg]* %7 to float*
  %201 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %202 = getelementptr inbounds i8, i8* %199, i64 4
  %203 = bitcast i8* %202 to float*
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %205 = bitcast i64* %204 to float*
  %206 = getelementptr inbounds i8, i8* %199, i64 12
  %207 = bitcast i8* %206 to float*
  %208 = bitcast %union.VectorReg* %8 to i8*
  %209 = bitcast %union.VectorReg* %8 to float*
  %210 = bitcast %union.VectorReg* %8 to i32*
  %211 = getelementptr inbounds i8, i8* %208, i64 4
  %212 = bitcast i8* %211 to float*
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %214 = bitcast i64* %213 to float*
  %215 = getelementptr inbounds i8, i8* %208, i64 12
  %216 = bitcast i8* %215 to float*
  %217 = bitcast %union.VectorReg* %8 to <2 x float>*
  %218 = bitcast i64* %213 to <2 x i32>*
  %219 = bitcast i8* %211 to i32*
  %220 = bitcast i64* %213 to i32*
  %221 = bitcast i8* %215 to i32*
  %222 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %223 = bitcast i64* %204 to <2 x i32>*
  %224 = bitcast i8* %202 to i32*
  %225 = bitcast i64* %204 to i32*
  %226 = bitcast i8* %206 to i32*
  %.pre22 = load i64, i64* %PC, align 8
  br label %block_401ff9

block_402465:                                     ; preds = %block_402459
  %227 = add i64 %4122, -16
  %228 = add i64 %4158, 4
  store i64 %228, i64* %PC, align 8
  %229 = inttoptr i64 %227 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %RAX, align 8, !tbaa !2428
  %231 = add i64 %4158, 8
  store i64 %231, i64* %PC, align 8
  %232 = load i32, i32* %4125, align 4
  %233 = sext i32 %232 to i64
  store i64 %233, i64* %RCX, align 8, !tbaa !2428
  %234 = shl nsw i64 %233, 2
  %235 = add i64 %234, %230
  %236 = add i64 %4158, 13
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %235 to i32*
  %238 = load i32, i32* %237, align 4
  store i32 %238, i32* %4095, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4097, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4099, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4101, align 1, !tbaa !2451
  %239 = add i64 %4122, -32
  %240 = add i64 %4158, 17
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %239 to i64*
  %242 = load i64, i64* %241, align 8
  store i64 %242, i64* %RAX, align 8, !tbaa !2428
  %243 = add i64 %4122, -44
  %244 = add i64 %4158, 20
  store i64 %244, i64* %PC, align 8
  %245 = inttoptr i64 %243 to i32*
  %246 = load i32, i32* %245, align 4
  %247 = add i32 %246, -15
  %248 = zext i32 %247 to i64
  store i64 %248, i64* %RDX, align 8, !tbaa !2428
  %249 = icmp ult i32 %246, 15
  %250 = zext i1 %249 to i8
  store i8 %250, i8* %.pre-phi, align 1, !tbaa !2432
  %251 = and i32 %247, 255
  %252 = tail call i32 @llvm.ctpop.i32(i32 %251) #9
  %253 = trunc i32 %252 to i8
  %254 = and i8 %253, 1
  %255 = xor i8 %254, 1
  store i8 %255, i8* %.pre-phi42, align 1, !tbaa !2446
  %256 = xor i32 %247, %246
  %257 = lshr i32 %256, 4
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  store i8 %259, i8* %.pre-phi44, align 1, !tbaa !2447
  %260 = icmp eq i32 %247, 0
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %.pre-phi46, align 1, !tbaa !2448
  %262 = lshr i32 %247, 31
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %.pre-phi48, align 1, !tbaa !2449
  %264 = lshr i32 %246, 31
  %265 = xor i32 %262, %264
  %266 = add nuw nsw i32 %265, %264
  %267 = icmp eq i32 %266, 2
  %268 = zext i1 %267 to i8
  store i8 %268, i8* %.pre-phi50, align 1, !tbaa !2450
  %269 = sext i32 %247 to i64
  store i64 %269, i64* %RCX, align 8, !tbaa !2428
  %270 = shl nsw i64 %269, 2
  %271 = add i64 %242, %270
  %272 = add i64 %4158, 31
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i32*
  %274 = load i32, i32* %273, align 4
  store i32 %274, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %275 = add i64 %4122, -40
  %276 = add i64 %4158, 35
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %275 to i64*
  %278 = load i64, i64* %277, align 8
  store i64 %278, i64* %RAX, align 8, !tbaa !2428
  %279 = add i64 %4122, -24
  %280 = add i64 %4158, 38
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %279 to i32*
  %282 = load i32, i32* %281, align 4
  %283 = zext i32 %282 to i64
  store i64 %283, i64* %RDX, align 8, !tbaa !2428
  %284 = add i64 %4158, 41
  store i64 %284, i64* %PC, align 8
  %285 = load i32, i32* %245, align 4
  %286 = add i32 %285, -15
  %287 = zext i32 %286 to i64
  store i64 %287, i64* %RSI, align 8, !tbaa !2428
  %288 = sext i32 %282 to i64
  %289 = sext i32 %286 to i64
  %290 = mul nsw i64 %289, %288
  %291 = trunc i64 %290 to i32
  %292 = and i64 %290, 4294967295
  store i64 %292, i64* %RDX, align 8, !tbaa !2428
  %293 = shl i64 %290, 32
  %294 = ashr exact i64 %293, 32
  %295 = icmp ne i64 %294, %290
  %296 = zext i1 %295 to i8
  store i8 %296, i8* %.pre-phi, align 1, !tbaa !2432
  %297 = and i32 %291, 255
  %298 = tail call i32 @llvm.ctpop.i32(i32 %297) #9
  %299 = trunc i32 %298 to i8
  %300 = and i8 %299, 1
  %301 = xor i8 %300, 1
  store i8 %301, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %302 = lshr i32 %291, 31
  %303 = trunc i32 %302 to i8
  store i8 %303, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %296, i8* %.pre-phi50, align 1, !tbaa !2450
  %304 = load i64, i64* %RBP, align 8
  %305 = add i64 %304, -48
  %306 = add i64 %4158, 50
  store i64 %306, i64* %PC, align 8
  %307 = trunc i64 %290 to i32
  %308 = inttoptr i64 %305 to i32*
  %309 = load i32, i32* %308, align 4
  %310 = add i32 %309, %307
  %311 = zext i32 %310 to i64
  store i64 %311, i64* %RDX, align 8, !tbaa !2428
  %312 = icmp ult i32 %310, %307
  %313 = icmp ult i32 %310, %309
  %314 = or i1 %312, %313
  %315 = zext i1 %314 to i8
  store i8 %315, i8* %.pre-phi, align 1, !tbaa !2432
  %316 = and i32 %310, 255
  %317 = tail call i32 @llvm.ctpop.i32(i32 %316) #9
  %318 = trunc i32 %317 to i8
  %319 = and i8 %318, 1
  %320 = xor i8 %319, 1
  store i8 %320, i8* %.pre-phi42, align 1, !tbaa !2446
  %321 = xor i32 %309, %307
  %322 = xor i32 %321, %310
  %323 = lshr i32 %322, 4
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  store i8 %325, i8* %.pre-phi44, align 1, !tbaa !2447
  %326 = icmp eq i32 %310, 0
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %.pre-phi46, align 1, !tbaa !2448
  %328 = lshr i32 %310, 31
  %329 = trunc i32 %328 to i8
  store i8 %329, i8* %.pre-phi48, align 1, !tbaa !2449
  %330 = lshr i32 %307, 31
  %331 = lshr i32 %309, 31
  %332 = xor i32 %328, %330
  %333 = xor i32 %328, %331
  %334 = add nuw nsw i32 %332, %333
  %335 = icmp eq i32 %334, 2
  %336 = zext i1 %335 to i8
  store i8 %336, i8* %.pre-phi50, align 1, !tbaa !2450
  %337 = sext i32 %310 to i64
  store i64 %337, i64* %RCX, align 8, !tbaa !2428
  %338 = load i64, i64* %RAX, align 8
  %339 = shl nsw i64 %337, 2
  %340 = add i64 %338, %339
  %341 = add i64 %4158, 58
  store i64 %341, i64* %PC, align 8
  %342 = load <2 x float>, <2 x float>* %4111, align 1
  %343 = load <2 x i32>, <2 x i32>* %4112, align 1
  %344 = inttoptr i64 %340 to float*
  %345 = load float, float* %344, align 4
  %346 = extractelement <2 x float> %342, i32 0
  %347 = fmul float %346, %345
  store float %347, float* %4103, align 1, !tbaa !2451
  %348 = bitcast <2 x float> %342 to <2 x i32>
  %349 = extractelement <2 x i32> %348, i32 1
  store i32 %349, i32* %4113, align 1, !tbaa !2451
  %350 = extractelement <2 x i32> %343, i32 0
  store i32 %350, i32* %4114, align 1, !tbaa !2451
  %351 = extractelement <2 x i32> %343, i32 1
  store i32 %351, i32* %4115, align 1, !tbaa !2451
  %352 = load <2 x float>, <2 x float>* %4116, align 1
  %353 = load <2 x i32>, <2 x i32>* %4117, align 1
  %354 = load <2 x float>, <2 x float>* %4111, align 1
  %355 = extractelement <2 x float> %352, i32 0
  %356 = extractelement <2 x float> %354, i32 0
  %357 = fadd float %355, %356
  store float %357, float* %4094, align 1, !tbaa !2451
  %358 = bitcast <2 x float> %352 to <2 x i32>
  %359 = extractelement <2 x i32> %358, i32 1
  store i32 %359, i32* %4118, align 1, !tbaa !2451
  %360 = extractelement <2 x i32> %353, i32 0
  store i32 %360, i32* %4119, align 1, !tbaa !2451
  %361 = extractelement <2 x i32> %353, i32 1
  store i32 %361, i32* %4120, align 1, !tbaa !2451
  %362 = add i64 %304, -32
  %363 = add i64 %4158, 66
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %362 to i64*
  %365 = load i64, i64* %364, align 8
  store i64 %365, i64* %RAX, align 8, !tbaa !2428
  %366 = add i64 %304, -44
  %367 = add i64 %4158, 69
  store i64 %367, i64* %PC, align 8
  %368 = inttoptr i64 %366 to i32*
  %369 = load i32, i32* %368, align 4
  %370 = add i32 %369, -14
  %371 = zext i32 %370 to i64
  store i64 %371, i64* %RDX, align 8, !tbaa !2428
  %372 = icmp ult i32 %369, 14
  %373 = zext i1 %372 to i8
  store i8 %373, i8* %.pre-phi, align 1, !tbaa !2432
  %374 = and i32 %370, 255
  %375 = tail call i32 @llvm.ctpop.i32(i32 %374) #9
  %376 = trunc i32 %375 to i8
  %377 = and i8 %376, 1
  %378 = xor i8 %377, 1
  store i8 %378, i8* %.pre-phi42, align 1, !tbaa !2446
  %379 = xor i32 %370, %369
  %380 = lshr i32 %379, 4
  %381 = trunc i32 %380 to i8
  %382 = and i8 %381, 1
  store i8 %382, i8* %.pre-phi44, align 1, !tbaa !2447
  %383 = icmp eq i32 %370, 0
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %.pre-phi46, align 1, !tbaa !2448
  %385 = lshr i32 %370, 31
  %386 = trunc i32 %385 to i8
  store i8 %386, i8* %.pre-phi48, align 1, !tbaa !2449
  %387 = lshr i32 %369, 31
  %388 = xor i32 %385, %387
  %389 = add nuw nsw i32 %388, %387
  %390 = icmp eq i32 %389, 2
  %391 = zext i1 %390 to i8
  store i8 %391, i8* %.pre-phi50, align 1, !tbaa !2450
  %392 = sext i32 %370 to i64
  store i64 %392, i64* %RCX, align 8, !tbaa !2428
  %393 = shl nsw i64 %392, 2
  %394 = add i64 %365, %393
  %395 = add i64 %4158, 80
  store i64 %395, i64* %PC, align 8
  %396 = inttoptr i64 %394 to i32*
  %397 = load i32, i32* %396, align 4
  store i32 %397, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %398 = load i64, i64* %RBP, align 8
  %399 = add i64 %398, -40
  %400 = add i64 %4158, 84
  store i64 %400, i64* %PC, align 8
  %401 = inttoptr i64 %399 to i64*
  %402 = load i64, i64* %401, align 8
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = add i64 %398, -24
  %404 = add i64 %4158, 87
  store i64 %404, i64* %PC, align 8
  %405 = inttoptr i64 %403 to i32*
  %406 = load i32, i32* %405, align 4
  %407 = zext i32 %406 to i64
  store i64 %407, i64* %RDX, align 8, !tbaa !2428
  %408 = add i64 %398, -44
  %409 = add i64 %4158, 90
  store i64 %409, i64* %PC, align 8
  %410 = inttoptr i64 %408 to i32*
  %411 = load i32, i32* %410, align 4
  %412 = add i32 %411, -14
  %413 = zext i32 %412 to i64
  store i64 %413, i64* %RSI, align 8, !tbaa !2428
  %414 = sext i32 %406 to i64
  %415 = sext i32 %412 to i64
  %416 = mul nsw i64 %415, %414
  %417 = trunc i64 %416 to i32
  %418 = and i64 %416, 4294967295
  store i64 %418, i64* %RDX, align 8, !tbaa !2428
  %419 = shl i64 %416, 32
  %420 = ashr exact i64 %419, 32
  %421 = icmp ne i64 %420, %416
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %.pre-phi, align 1, !tbaa !2432
  %423 = and i32 %417, 255
  %424 = tail call i32 @llvm.ctpop.i32(i32 %423) #9
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  %427 = xor i8 %426, 1
  store i8 %427, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %428 = lshr i32 %417, 31
  %429 = trunc i32 %428 to i8
  store i8 %429, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %422, i8* %.pre-phi50, align 1, !tbaa !2450
  %430 = add i64 %398, -48
  %431 = add i64 %4158, 99
  store i64 %431, i64* %PC, align 8
  %432 = trunc i64 %416 to i32
  %433 = inttoptr i64 %430 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = add i32 %434, %432
  %436 = zext i32 %435 to i64
  store i64 %436, i64* %RDX, align 8, !tbaa !2428
  %437 = icmp ult i32 %435, %432
  %438 = icmp ult i32 %435, %434
  %439 = or i1 %437, %438
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %.pre-phi, align 1, !tbaa !2432
  %441 = and i32 %435, 255
  %442 = tail call i32 @llvm.ctpop.i32(i32 %441) #9
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  store i8 %445, i8* %.pre-phi42, align 1, !tbaa !2446
  %446 = xor i32 %434, %432
  %447 = xor i32 %446, %435
  %448 = lshr i32 %447, 4
  %449 = trunc i32 %448 to i8
  %450 = and i8 %449, 1
  store i8 %450, i8* %.pre-phi44, align 1, !tbaa !2447
  %451 = icmp eq i32 %435, 0
  %452 = zext i1 %451 to i8
  store i8 %452, i8* %.pre-phi46, align 1, !tbaa !2448
  %453 = lshr i32 %435, 31
  %454 = trunc i32 %453 to i8
  store i8 %454, i8* %.pre-phi48, align 1, !tbaa !2449
  %455 = lshr i32 %432, 31
  %456 = lshr i32 %434, 31
  %457 = xor i32 %453, %455
  %458 = xor i32 %453, %456
  %459 = add nuw nsw i32 %457, %458
  %460 = icmp eq i32 %459, 2
  %461 = zext i1 %460 to i8
  store i8 %461, i8* %.pre-phi50, align 1, !tbaa !2450
  %462 = sext i32 %435 to i64
  store i64 %462, i64* %RCX, align 8, !tbaa !2428
  %463 = load i64, i64* %RAX, align 8
  %464 = shl nsw i64 %462, 2
  %465 = add i64 %463, %464
  %466 = add i64 %4158, 107
  store i64 %466, i64* %PC, align 8
  %467 = load <2 x float>, <2 x float>* %4111, align 1
  %468 = load <2 x i32>, <2 x i32>* %4112, align 1
  %469 = inttoptr i64 %465 to float*
  %470 = load float, float* %469, align 4
  %471 = extractelement <2 x float> %467, i32 0
  %472 = fmul float %471, %470
  store float %472, float* %4103, align 1, !tbaa !2451
  %473 = bitcast <2 x float> %467 to <2 x i32>
  %474 = extractelement <2 x i32> %473, i32 1
  store i32 %474, i32* %4113, align 1, !tbaa !2451
  %475 = extractelement <2 x i32> %468, i32 0
  store i32 %475, i32* %4114, align 1, !tbaa !2451
  %476 = extractelement <2 x i32> %468, i32 1
  store i32 %476, i32* %4115, align 1, !tbaa !2451
  %477 = load <2 x float>, <2 x float>* %4116, align 1
  %478 = load <2 x i32>, <2 x i32>* %4117, align 1
  %479 = load <2 x float>, <2 x float>* %4111, align 1
  %480 = extractelement <2 x float> %477, i32 0
  %481 = extractelement <2 x float> %479, i32 0
  %482 = fadd float %480, %481
  store float %482, float* %4094, align 1, !tbaa !2451
  %483 = bitcast <2 x float> %477 to <2 x i32>
  %484 = extractelement <2 x i32> %483, i32 1
  store i32 %484, i32* %4118, align 1, !tbaa !2451
  %485 = extractelement <2 x i32> %478, i32 0
  store i32 %485, i32* %4119, align 1, !tbaa !2451
  %486 = extractelement <2 x i32> %478, i32 1
  store i32 %486, i32* %4120, align 1, !tbaa !2451
  %487 = load i64, i64* %RBP, align 8
  %488 = add i64 %487, -32
  %489 = add i64 %4158, 115
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %488 to i64*
  %491 = load i64, i64* %490, align 8
  store i64 %491, i64* %RAX, align 8, !tbaa !2428
  %492 = add i64 %487, -44
  %493 = add i64 %4158, 118
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to i32*
  %495 = load i32, i32* %494, align 4
  %496 = add i32 %495, -13
  %497 = zext i32 %496 to i64
  store i64 %497, i64* %RDX, align 8, !tbaa !2428
  %498 = icmp ult i32 %495, 13
  %499 = zext i1 %498 to i8
  store i8 %499, i8* %.pre-phi, align 1, !tbaa !2432
  %500 = and i32 %496, 255
  %501 = tail call i32 @llvm.ctpop.i32(i32 %500) #9
  %502 = trunc i32 %501 to i8
  %503 = and i8 %502, 1
  %504 = xor i8 %503, 1
  store i8 %504, i8* %.pre-phi42, align 1, !tbaa !2446
  %505 = xor i32 %496, %495
  %506 = lshr i32 %505, 4
  %507 = trunc i32 %506 to i8
  %508 = and i8 %507, 1
  store i8 %508, i8* %.pre-phi44, align 1, !tbaa !2447
  %509 = icmp eq i32 %496, 0
  %510 = zext i1 %509 to i8
  store i8 %510, i8* %.pre-phi46, align 1, !tbaa !2448
  %511 = lshr i32 %496, 31
  %512 = trunc i32 %511 to i8
  store i8 %512, i8* %.pre-phi48, align 1, !tbaa !2449
  %513 = lshr i32 %495, 31
  %514 = xor i32 %511, %513
  %515 = add nuw nsw i32 %514, %513
  %516 = icmp eq i32 %515, 2
  %517 = zext i1 %516 to i8
  store i8 %517, i8* %.pre-phi50, align 1, !tbaa !2450
  %518 = sext i32 %496 to i64
  store i64 %518, i64* %RCX, align 8, !tbaa !2428
  %519 = shl nsw i64 %518, 2
  %520 = add i64 %491, %519
  %521 = add i64 %4158, 129
  store i64 %521, i64* %PC, align 8
  %522 = inttoptr i64 %520 to i32*
  %523 = load i32, i32* %522, align 4
  store i32 %523, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %524 = add i64 %487, -40
  %525 = add i64 %4158, 133
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %524 to i64*
  %527 = load i64, i64* %526, align 8
  store i64 %527, i64* %RAX, align 8, !tbaa !2428
  %528 = add i64 %487, -24
  %529 = add i64 %4158, 136
  store i64 %529, i64* %PC, align 8
  %530 = inttoptr i64 %528 to i32*
  %531 = load i32, i32* %530, align 4
  %532 = zext i32 %531 to i64
  store i64 %532, i64* %RDX, align 8, !tbaa !2428
  %533 = add i64 %4158, 139
  store i64 %533, i64* %PC, align 8
  %534 = load i32, i32* %494, align 4
  %535 = add i32 %534, -13
  %536 = zext i32 %535 to i64
  store i64 %536, i64* %RSI, align 8, !tbaa !2428
  %537 = sext i32 %531 to i64
  %538 = sext i32 %535 to i64
  %539 = mul nsw i64 %538, %537
  %540 = trunc i64 %539 to i32
  %541 = and i64 %539, 4294967295
  store i64 %541, i64* %RDX, align 8, !tbaa !2428
  %542 = shl i64 %539, 32
  %543 = ashr exact i64 %542, 32
  %544 = icmp ne i64 %543, %539
  %545 = zext i1 %544 to i8
  store i8 %545, i8* %.pre-phi, align 1, !tbaa !2432
  %546 = and i32 %540, 255
  %547 = tail call i32 @llvm.ctpop.i32(i32 %546) #9
  %548 = trunc i32 %547 to i8
  %549 = and i8 %548, 1
  %550 = xor i8 %549, 1
  store i8 %550, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %551 = lshr i32 %540, 31
  %552 = trunc i32 %551 to i8
  store i8 %552, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %545, i8* %.pre-phi50, align 1, !tbaa !2450
  %553 = load i64, i64* %RBP, align 8
  %554 = add i64 %553, -48
  %555 = add i64 %4158, 148
  store i64 %555, i64* %PC, align 8
  %556 = trunc i64 %539 to i32
  %557 = inttoptr i64 %554 to i32*
  %558 = load i32, i32* %557, align 4
  %559 = add i32 %558, %556
  %560 = zext i32 %559 to i64
  store i64 %560, i64* %RDX, align 8, !tbaa !2428
  %561 = icmp ult i32 %559, %556
  %562 = icmp ult i32 %559, %558
  %563 = or i1 %561, %562
  %564 = zext i1 %563 to i8
  store i8 %564, i8* %.pre-phi, align 1, !tbaa !2432
  %565 = and i32 %559, 255
  %566 = tail call i32 @llvm.ctpop.i32(i32 %565) #9
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  %569 = xor i8 %568, 1
  store i8 %569, i8* %.pre-phi42, align 1, !tbaa !2446
  %570 = xor i32 %558, %556
  %571 = xor i32 %570, %559
  %572 = lshr i32 %571, 4
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  store i8 %574, i8* %.pre-phi44, align 1, !tbaa !2447
  %575 = icmp eq i32 %559, 0
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %.pre-phi46, align 1, !tbaa !2448
  %577 = lshr i32 %559, 31
  %578 = trunc i32 %577 to i8
  store i8 %578, i8* %.pre-phi48, align 1, !tbaa !2449
  %579 = lshr i32 %556, 31
  %580 = lshr i32 %558, 31
  %581 = xor i32 %577, %579
  %582 = xor i32 %577, %580
  %583 = add nuw nsw i32 %581, %582
  %584 = icmp eq i32 %583, 2
  %585 = zext i1 %584 to i8
  store i8 %585, i8* %.pre-phi50, align 1, !tbaa !2450
  %586 = sext i32 %559 to i64
  store i64 %586, i64* %RCX, align 8, !tbaa !2428
  %587 = load i64, i64* %RAX, align 8
  %588 = shl nsw i64 %586, 2
  %589 = add i64 %587, %588
  %590 = add i64 %4158, 156
  store i64 %590, i64* %PC, align 8
  %591 = load <2 x float>, <2 x float>* %4111, align 1
  %592 = load <2 x i32>, <2 x i32>* %4112, align 1
  %593 = inttoptr i64 %589 to float*
  %594 = load float, float* %593, align 4
  %595 = extractelement <2 x float> %591, i32 0
  %596 = fmul float %595, %594
  store float %596, float* %4103, align 1, !tbaa !2451
  %597 = bitcast <2 x float> %591 to <2 x i32>
  %598 = extractelement <2 x i32> %597, i32 1
  store i32 %598, i32* %4113, align 1, !tbaa !2451
  %599 = extractelement <2 x i32> %592, i32 0
  store i32 %599, i32* %4114, align 1, !tbaa !2451
  %600 = extractelement <2 x i32> %592, i32 1
  store i32 %600, i32* %4115, align 1, !tbaa !2451
  %601 = load <2 x float>, <2 x float>* %4116, align 1
  %602 = load <2 x i32>, <2 x i32>* %4117, align 1
  %603 = load <2 x float>, <2 x float>* %4111, align 1
  %604 = extractelement <2 x float> %601, i32 0
  %605 = extractelement <2 x float> %603, i32 0
  %606 = fadd float %604, %605
  store float %606, float* %4094, align 1, !tbaa !2451
  %607 = bitcast <2 x float> %601 to <2 x i32>
  %608 = extractelement <2 x i32> %607, i32 1
  store i32 %608, i32* %4118, align 1, !tbaa !2451
  %609 = extractelement <2 x i32> %602, i32 0
  store i32 %609, i32* %4119, align 1, !tbaa !2451
  %610 = extractelement <2 x i32> %602, i32 1
  store i32 %610, i32* %4120, align 1, !tbaa !2451
  %611 = add i64 %553, -32
  %612 = add i64 %4158, 164
  store i64 %612, i64* %PC, align 8
  %613 = inttoptr i64 %611 to i64*
  %614 = load i64, i64* %613, align 8
  store i64 %614, i64* %RAX, align 8, !tbaa !2428
  %615 = add i64 %553, -44
  %616 = add i64 %4158, 167
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i32*
  %618 = load i32, i32* %617, align 4
  %619 = add i32 %618, -12
  %620 = zext i32 %619 to i64
  store i64 %620, i64* %RDX, align 8, !tbaa !2428
  %621 = icmp ult i32 %618, 12
  %622 = zext i1 %621 to i8
  store i8 %622, i8* %.pre-phi, align 1, !tbaa !2432
  %623 = and i32 %619, 255
  %624 = tail call i32 @llvm.ctpop.i32(i32 %623) #9
  %625 = trunc i32 %624 to i8
  %626 = and i8 %625, 1
  %627 = xor i8 %626, 1
  store i8 %627, i8* %.pre-phi42, align 1, !tbaa !2446
  %628 = xor i32 %619, %618
  %629 = lshr i32 %628, 4
  %630 = trunc i32 %629 to i8
  %631 = and i8 %630, 1
  store i8 %631, i8* %.pre-phi44, align 1, !tbaa !2447
  %632 = icmp eq i32 %619, 0
  %633 = zext i1 %632 to i8
  store i8 %633, i8* %.pre-phi46, align 1, !tbaa !2448
  %634 = lshr i32 %619, 31
  %635 = trunc i32 %634 to i8
  store i8 %635, i8* %.pre-phi48, align 1, !tbaa !2449
  %636 = lshr i32 %618, 31
  %637 = xor i32 %634, %636
  %638 = add nuw nsw i32 %637, %636
  %639 = icmp eq i32 %638, 2
  %640 = zext i1 %639 to i8
  store i8 %640, i8* %.pre-phi50, align 1, !tbaa !2450
  %641 = sext i32 %619 to i64
  store i64 %641, i64* %RCX, align 8, !tbaa !2428
  %642 = shl nsw i64 %641, 2
  %643 = add i64 %614, %642
  %644 = add i64 %4158, 178
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %643 to i32*
  %646 = load i32, i32* %645, align 4
  store i32 %646, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %647 = load i64, i64* %RBP, align 8
  %648 = add i64 %647, -40
  %649 = add i64 %4158, 182
  store i64 %649, i64* %PC, align 8
  %650 = inttoptr i64 %648 to i64*
  %651 = load i64, i64* %650, align 8
  store i64 %651, i64* %RAX, align 8, !tbaa !2428
  %652 = add i64 %647, -24
  %653 = add i64 %4158, 185
  store i64 %653, i64* %PC, align 8
  %654 = inttoptr i64 %652 to i32*
  %655 = load i32, i32* %654, align 4
  %656 = zext i32 %655 to i64
  store i64 %656, i64* %RDX, align 8, !tbaa !2428
  %657 = add i64 %647, -44
  %658 = add i64 %4158, 188
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %657 to i32*
  %660 = load i32, i32* %659, align 4
  %661 = add i32 %660, -12
  %662 = zext i32 %661 to i64
  store i64 %662, i64* %RSI, align 8, !tbaa !2428
  %663 = sext i32 %655 to i64
  %664 = sext i32 %661 to i64
  %665 = mul nsw i64 %664, %663
  %666 = trunc i64 %665 to i32
  %667 = and i64 %665, 4294967295
  store i64 %667, i64* %RDX, align 8, !tbaa !2428
  %668 = shl i64 %665, 32
  %669 = ashr exact i64 %668, 32
  %670 = icmp ne i64 %669, %665
  %671 = zext i1 %670 to i8
  store i8 %671, i8* %.pre-phi, align 1, !tbaa !2432
  %672 = and i32 %666, 255
  %673 = tail call i32 @llvm.ctpop.i32(i32 %672) #9
  %674 = trunc i32 %673 to i8
  %675 = and i8 %674, 1
  %676 = xor i8 %675, 1
  store i8 %676, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %677 = lshr i32 %666, 31
  %678 = trunc i32 %677 to i8
  store i8 %678, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %671, i8* %.pre-phi50, align 1, !tbaa !2450
  %679 = add i64 %647, -48
  %680 = add i64 %4158, 197
  store i64 %680, i64* %PC, align 8
  %681 = trunc i64 %665 to i32
  %682 = inttoptr i64 %679 to i32*
  %683 = load i32, i32* %682, align 4
  %684 = add i32 %683, %681
  %685 = zext i32 %684 to i64
  store i64 %685, i64* %RDX, align 8, !tbaa !2428
  %686 = icmp ult i32 %684, %681
  %687 = icmp ult i32 %684, %683
  %688 = or i1 %686, %687
  %689 = zext i1 %688 to i8
  store i8 %689, i8* %.pre-phi, align 1, !tbaa !2432
  %690 = and i32 %684, 255
  %691 = tail call i32 @llvm.ctpop.i32(i32 %690) #9
  %692 = trunc i32 %691 to i8
  %693 = and i8 %692, 1
  %694 = xor i8 %693, 1
  store i8 %694, i8* %.pre-phi42, align 1, !tbaa !2446
  %695 = xor i32 %683, %681
  %696 = xor i32 %695, %684
  %697 = lshr i32 %696, 4
  %698 = trunc i32 %697 to i8
  %699 = and i8 %698, 1
  store i8 %699, i8* %.pre-phi44, align 1, !tbaa !2447
  %700 = icmp eq i32 %684, 0
  %701 = zext i1 %700 to i8
  store i8 %701, i8* %.pre-phi46, align 1, !tbaa !2448
  %702 = lshr i32 %684, 31
  %703 = trunc i32 %702 to i8
  store i8 %703, i8* %.pre-phi48, align 1, !tbaa !2449
  %704 = lshr i32 %681, 31
  %705 = lshr i32 %683, 31
  %706 = xor i32 %702, %704
  %707 = xor i32 %702, %705
  %708 = add nuw nsw i32 %706, %707
  %709 = icmp eq i32 %708, 2
  %710 = zext i1 %709 to i8
  store i8 %710, i8* %.pre-phi50, align 1, !tbaa !2450
  %711 = sext i32 %684 to i64
  store i64 %711, i64* %RCX, align 8, !tbaa !2428
  %712 = load i64, i64* %RAX, align 8
  %713 = shl nsw i64 %711, 2
  %714 = add i64 %712, %713
  %715 = add i64 %4158, 205
  store i64 %715, i64* %PC, align 8
  %716 = load <2 x float>, <2 x float>* %4111, align 1
  %717 = load <2 x i32>, <2 x i32>* %4112, align 1
  %718 = inttoptr i64 %714 to float*
  %719 = load float, float* %718, align 4
  %720 = extractelement <2 x float> %716, i32 0
  %721 = fmul float %720, %719
  store float %721, float* %4103, align 1, !tbaa !2451
  %722 = bitcast <2 x float> %716 to <2 x i32>
  %723 = extractelement <2 x i32> %722, i32 1
  store i32 %723, i32* %4113, align 1, !tbaa !2451
  %724 = extractelement <2 x i32> %717, i32 0
  store i32 %724, i32* %4114, align 1, !tbaa !2451
  %725 = extractelement <2 x i32> %717, i32 1
  store i32 %725, i32* %4115, align 1, !tbaa !2451
  %726 = load <2 x float>, <2 x float>* %4116, align 1
  %727 = load <2 x i32>, <2 x i32>* %4117, align 1
  %728 = load <2 x float>, <2 x float>* %4111, align 1
  %729 = extractelement <2 x float> %726, i32 0
  %730 = extractelement <2 x float> %728, i32 0
  %731 = fadd float %729, %730
  store float %731, float* %4094, align 1, !tbaa !2451
  %732 = bitcast <2 x float> %726 to <2 x i32>
  %733 = extractelement <2 x i32> %732, i32 1
  store i32 %733, i32* %4118, align 1, !tbaa !2451
  %734 = extractelement <2 x i32> %727, i32 0
  store i32 %734, i32* %4119, align 1, !tbaa !2451
  %735 = extractelement <2 x i32> %727, i32 1
  store i32 %735, i32* %4120, align 1, !tbaa !2451
  %736 = load i64, i64* %RBP, align 8
  %737 = add i64 %736, -32
  %738 = add i64 %4158, 213
  store i64 %738, i64* %PC, align 8
  %739 = inttoptr i64 %737 to i64*
  %740 = load i64, i64* %739, align 8
  store i64 %740, i64* %RAX, align 8, !tbaa !2428
  %741 = add i64 %736, -44
  %742 = add i64 %4158, 216
  store i64 %742, i64* %PC, align 8
  %743 = inttoptr i64 %741 to i32*
  %744 = load i32, i32* %743, align 4
  %745 = add i32 %744, -11
  %746 = zext i32 %745 to i64
  store i64 %746, i64* %RDX, align 8, !tbaa !2428
  %747 = icmp ult i32 %744, 11
  %748 = zext i1 %747 to i8
  store i8 %748, i8* %.pre-phi, align 1, !tbaa !2432
  %749 = and i32 %745, 255
  %750 = tail call i32 @llvm.ctpop.i32(i32 %749) #9
  %751 = trunc i32 %750 to i8
  %752 = and i8 %751, 1
  %753 = xor i8 %752, 1
  store i8 %753, i8* %.pre-phi42, align 1, !tbaa !2446
  %754 = xor i32 %745, %744
  %755 = lshr i32 %754, 4
  %756 = trunc i32 %755 to i8
  %757 = and i8 %756, 1
  store i8 %757, i8* %.pre-phi44, align 1, !tbaa !2447
  %758 = icmp eq i32 %745, 0
  %759 = zext i1 %758 to i8
  store i8 %759, i8* %.pre-phi46, align 1, !tbaa !2448
  %760 = lshr i32 %745, 31
  %761 = trunc i32 %760 to i8
  store i8 %761, i8* %.pre-phi48, align 1, !tbaa !2449
  %762 = lshr i32 %744, 31
  %763 = xor i32 %760, %762
  %764 = add nuw nsw i32 %763, %762
  %765 = icmp eq i32 %764, 2
  %766 = zext i1 %765 to i8
  store i8 %766, i8* %.pre-phi50, align 1, !tbaa !2450
  %767 = sext i32 %745 to i64
  store i64 %767, i64* %RCX, align 8, !tbaa !2428
  %768 = shl nsw i64 %767, 2
  %769 = add i64 %740, %768
  %770 = add i64 %4158, 227
  store i64 %770, i64* %PC, align 8
  %771 = inttoptr i64 %769 to i32*
  %772 = load i32, i32* %771, align 4
  store i32 %772, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %773 = add i64 %736, -40
  %774 = add i64 %4158, 231
  store i64 %774, i64* %PC, align 8
  %775 = inttoptr i64 %773 to i64*
  %776 = load i64, i64* %775, align 8
  store i64 %776, i64* %RAX, align 8, !tbaa !2428
  %777 = add i64 %736, -24
  %778 = add i64 %4158, 234
  store i64 %778, i64* %PC, align 8
  %779 = inttoptr i64 %777 to i32*
  %780 = load i32, i32* %779, align 4
  %781 = zext i32 %780 to i64
  store i64 %781, i64* %RDX, align 8, !tbaa !2428
  %782 = add i64 %4158, 237
  store i64 %782, i64* %PC, align 8
  %783 = load i32, i32* %743, align 4
  %784 = add i32 %783, -11
  %785 = zext i32 %784 to i64
  store i64 %785, i64* %RSI, align 8, !tbaa !2428
  %786 = sext i32 %780 to i64
  %787 = sext i32 %784 to i64
  %788 = mul nsw i64 %787, %786
  %789 = trunc i64 %788 to i32
  %790 = and i64 %788, 4294967295
  store i64 %790, i64* %RDX, align 8, !tbaa !2428
  %791 = shl i64 %788, 32
  %792 = ashr exact i64 %791, 32
  %793 = icmp ne i64 %792, %788
  %794 = zext i1 %793 to i8
  store i8 %794, i8* %.pre-phi, align 1, !tbaa !2432
  %795 = and i32 %789, 255
  %796 = tail call i32 @llvm.ctpop.i32(i32 %795) #9
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  %799 = xor i8 %798, 1
  store i8 %799, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %800 = lshr i32 %789, 31
  %801 = trunc i32 %800 to i8
  store i8 %801, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %794, i8* %.pre-phi50, align 1, !tbaa !2450
  %802 = load i64, i64* %RBP, align 8
  %803 = add i64 %802, -48
  %804 = add i64 %4158, 246
  store i64 %804, i64* %PC, align 8
  %805 = trunc i64 %788 to i32
  %806 = inttoptr i64 %803 to i32*
  %807 = load i32, i32* %806, align 4
  %808 = add i32 %807, %805
  %809 = zext i32 %808 to i64
  store i64 %809, i64* %RDX, align 8, !tbaa !2428
  %810 = icmp ult i32 %808, %805
  %811 = icmp ult i32 %808, %807
  %812 = or i1 %810, %811
  %813 = zext i1 %812 to i8
  store i8 %813, i8* %.pre-phi, align 1, !tbaa !2432
  %814 = and i32 %808, 255
  %815 = tail call i32 @llvm.ctpop.i32(i32 %814) #9
  %816 = trunc i32 %815 to i8
  %817 = and i8 %816, 1
  %818 = xor i8 %817, 1
  store i8 %818, i8* %.pre-phi42, align 1, !tbaa !2446
  %819 = xor i32 %807, %805
  %820 = xor i32 %819, %808
  %821 = lshr i32 %820, 4
  %822 = trunc i32 %821 to i8
  %823 = and i8 %822, 1
  store i8 %823, i8* %.pre-phi44, align 1, !tbaa !2447
  %824 = icmp eq i32 %808, 0
  %825 = zext i1 %824 to i8
  store i8 %825, i8* %.pre-phi46, align 1, !tbaa !2448
  %826 = lshr i32 %808, 31
  %827 = trunc i32 %826 to i8
  store i8 %827, i8* %.pre-phi48, align 1, !tbaa !2449
  %828 = lshr i32 %805, 31
  %829 = lshr i32 %807, 31
  %830 = xor i32 %826, %828
  %831 = xor i32 %826, %829
  %832 = add nuw nsw i32 %830, %831
  %833 = icmp eq i32 %832, 2
  %834 = zext i1 %833 to i8
  store i8 %834, i8* %.pre-phi50, align 1, !tbaa !2450
  %835 = sext i32 %808 to i64
  store i64 %835, i64* %RCX, align 8, !tbaa !2428
  %836 = load i64, i64* %RAX, align 8
  %837 = shl nsw i64 %835, 2
  %838 = add i64 %836, %837
  %839 = add i64 %4158, 254
  store i64 %839, i64* %PC, align 8
  %840 = load <2 x float>, <2 x float>* %4111, align 1
  %841 = load <2 x i32>, <2 x i32>* %4112, align 1
  %842 = inttoptr i64 %838 to float*
  %843 = load float, float* %842, align 4
  %844 = extractelement <2 x float> %840, i32 0
  %845 = fmul float %844, %843
  store float %845, float* %4103, align 1, !tbaa !2451
  %846 = bitcast <2 x float> %840 to <2 x i32>
  %847 = extractelement <2 x i32> %846, i32 1
  store i32 %847, i32* %4113, align 1, !tbaa !2451
  %848 = extractelement <2 x i32> %841, i32 0
  store i32 %848, i32* %4114, align 1, !tbaa !2451
  %849 = extractelement <2 x i32> %841, i32 1
  store i32 %849, i32* %4115, align 1, !tbaa !2451
  %850 = load <2 x float>, <2 x float>* %4116, align 1
  %851 = load <2 x i32>, <2 x i32>* %4117, align 1
  %852 = load <2 x float>, <2 x float>* %4111, align 1
  %853 = extractelement <2 x float> %850, i32 0
  %854 = extractelement <2 x float> %852, i32 0
  %855 = fadd float %853, %854
  store float %855, float* %4094, align 1, !tbaa !2451
  %856 = bitcast <2 x float> %850 to <2 x i32>
  %857 = extractelement <2 x i32> %856, i32 1
  store i32 %857, i32* %4118, align 1, !tbaa !2451
  %858 = extractelement <2 x i32> %851, i32 0
  store i32 %858, i32* %4119, align 1, !tbaa !2451
  %859 = extractelement <2 x i32> %851, i32 1
  store i32 %859, i32* %4120, align 1, !tbaa !2451
  %860 = add i64 %802, -32
  %861 = add i64 %4158, 262
  store i64 %861, i64* %PC, align 8
  %862 = inttoptr i64 %860 to i64*
  %863 = load i64, i64* %862, align 8
  store i64 %863, i64* %RAX, align 8, !tbaa !2428
  %864 = add i64 %802, -44
  %865 = add i64 %4158, 265
  store i64 %865, i64* %PC, align 8
  %866 = inttoptr i64 %864 to i32*
  %867 = load i32, i32* %866, align 4
  %868 = add i32 %867, -10
  %869 = zext i32 %868 to i64
  store i64 %869, i64* %RDX, align 8, !tbaa !2428
  %870 = icmp ult i32 %867, 10
  %871 = zext i1 %870 to i8
  store i8 %871, i8* %.pre-phi, align 1, !tbaa !2432
  %872 = and i32 %868, 255
  %873 = tail call i32 @llvm.ctpop.i32(i32 %872) #9
  %874 = trunc i32 %873 to i8
  %875 = and i8 %874, 1
  %876 = xor i8 %875, 1
  store i8 %876, i8* %.pre-phi42, align 1, !tbaa !2446
  %877 = xor i32 %868, %867
  %878 = lshr i32 %877, 4
  %879 = trunc i32 %878 to i8
  %880 = and i8 %879, 1
  store i8 %880, i8* %.pre-phi44, align 1, !tbaa !2447
  %881 = icmp eq i32 %868, 0
  %882 = zext i1 %881 to i8
  store i8 %882, i8* %.pre-phi46, align 1, !tbaa !2448
  %883 = lshr i32 %868, 31
  %884 = trunc i32 %883 to i8
  store i8 %884, i8* %.pre-phi48, align 1, !tbaa !2449
  %885 = lshr i32 %867, 31
  %886 = xor i32 %883, %885
  %887 = add nuw nsw i32 %886, %885
  %888 = icmp eq i32 %887, 2
  %889 = zext i1 %888 to i8
  store i8 %889, i8* %.pre-phi50, align 1, !tbaa !2450
  %890 = sext i32 %868 to i64
  store i64 %890, i64* %RCX, align 8, !tbaa !2428
  %891 = shl nsw i64 %890, 2
  %892 = add i64 %863, %891
  %893 = add i64 %4158, 276
  store i64 %893, i64* %PC, align 8
  %894 = inttoptr i64 %892 to i32*
  %895 = load i32, i32* %894, align 4
  store i32 %895, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %896 = load i64, i64* %RBP, align 8
  %897 = add i64 %896, -40
  %898 = add i64 %4158, 280
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %897 to i64*
  %900 = load i64, i64* %899, align 8
  store i64 %900, i64* %RAX, align 8, !tbaa !2428
  %901 = add i64 %896, -24
  %902 = add i64 %4158, 283
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %901 to i32*
  %904 = load i32, i32* %903, align 4
  %905 = zext i32 %904 to i64
  store i64 %905, i64* %RDX, align 8, !tbaa !2428
  %906 = add i64 %896, -44
  %907 = add i64 %4158, 286
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %906 to i32*
  %909 = load i32, i32* %908, align 4
  %910 = add i32 %909, -10
  %911 = zext i32 %910 to i64
  store i64 %911, i64* %RSI, align 8, !tbaa !2428
  %912 = sext i32 %904 to i64
  %913 = sext i32 %910 to i64
  %914 = mul nsw i64 %913, %912
  %915 = trunc i64 %914 to i32
  %916 = and i64 %914, 4294967295
  store i64 %916, i64* %RDX, align 8, !tbaa !2428
  %917 = shl i64 %914, 32
  %918 = ashr exact i64 %917, 32
  %919 = icmp ne i64 %918, %914
  %920 = zext i1 %919 to i8
  store i8 %920, i8* %.pre-phi, align 1, !tbaa !2432
  %921 = and i32 %915, 255
  %922 = tail call i32 @llvm.ctpop.i32(i32 %921) #9
  %923 = trunc i32 %922 to i8
  %924 = and i8 %923, 1
  %925 = xor i8 %924, 1
  store i8 %925, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %926 = lshr i32 %915, 31
  %927 = trunc i32 %926 to i8
  store i8 %927, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %920, i8* %.pre-phi50, align 1, !tbaa !2450
  %928 = add i64 %896, -48
  %929 = add i64 %4158, 295
  store i64 %929, i64* %PC, align 8
  %930 = trunc i64 %914 to i32
  %931 = inttoptr i64 %928 to i32*
  %932 = load i32, i32* %931, align 4
  %933 = add i32 %932, %930
  %934 = zext i32 %933 to i64
  store i64 %934, i64* %RDX, align 8, !tbaa !2428
  %935 = icmp ult i32 %933, %930
  %936 = icmp ult i32 %933, %932
  %937 = or i1 %935, %936
  %938 = zext i1 %937 to i8
  store i8 %938, i8* %.pre-phi, align 1, !tbaa !2432
  %939 = and i32 %933, 255
  %940 = tail call i32 @llvm.ctpop.i32(i32 %939) #9
  %941 = trunc i32 %940 to i8
  %942 = and i8 %941, 1
  %943 = xor i8 %942, 1
  store i8 %943, i8* %.pre-phi42, align 1, !tbaa !2446
  %944 = xor i32 %932, %930
  %945 = xor i32 %944, %933
  %946 = lshr i32 %945, 4
  %947 = trunc i32 %946 to i8
  %948 = and i8 %947, 1
  store i8 %948, i8* %.pre-phi44, align 1, !tbaa !2447
  %949 = icmp eq i32 %933, 0
  %950 = zext i1 %949 to i8
  store i8 %950, i8* %.pre-phi46, align 1, !tbaa !2448
  %951 = lshr i32 %933, 31
  %952 = trunc i32 %951 to i8
  store i8 %952, i8* %.pre-phi48, align 1, !tbaa !2449
  %953 = lshr i32 %930, 31
  %954 = lshr i32 %932, 31
  %955 = xor i32 %951, %953
  %956 = xor i32 %951, %954
  %957 = add nuw nsw i32 %955, %956
  %958 = icmp eq i32 %957, 2
  %959 = zext i1 %958 to i8
  store i8 %959, i8* %.pre-phi50, align 1, !tbaa !2450
  %960 = sext i32 %933 to i64
  store i64 %960, i64* %RCX, align 8, !tbaa !2428
  %961 = load i64, i64* %RAX, align 8
  %962 = shl nsw i64 %960, 2
  %963 = add i64 %961, %962
  %964 = add i64 %4158, 303
  store i64 %964, i64* %PC, align 8
  %965 = load <2 x float>, <2 x float>* %4111, align 1
  %966 = load <2 x i32>, <2 x i32>* %4112, align 1
  %967 = inttoptr i64 %963 to float*
  %968 = load float, float* %967, align 4
  %969 = extractelement <2 x float> %965, i32 0
  %970 = fmul float %969, %968
  store float %970, float* %4103, align 1, !tbaa !2451
  %971 = bitcast <2 x float> %965 to <2 x i32>
  %972 = extractelement <2 x i32> %971, i32 1
  store i32 %972, i32* %4113, align 1, !tbaa !2451
  %973 = extractelement <2 x i32> %966, i32 0
  store i32 %973, i32* %4114, align 1, !tbaa !2451
  %974 = extractelement <2 x i32> %966, i32 1
  store i32 %974, i32* %4115, align 1, !tbaa !2451
  %975 = load <2 x float>, <2 x float>* %4116, align 1
  %976 = load <2 x i32>, <2 x i32>* %4117, align 1
  %977 = load <2 x float>, <2 x float>* %4111, align 1
  %978 = extractelement <2 x float> %975, i32 0
  %979 = extractelement <2 x float> %977, i32 0
  %980 = fadd float %978, %979
  store float %980, float* %4094, align 1, !tbaa !2451
  %981 = bitcast <2 x float> %975 to <2 x i32>
  %982 = extractelement <2 x i32> %981, i32 1
  store i32 %982, i32* %4118, align 1, !tbaa !2451
  %983 = extractelement <2 x i32> %976, i32 0
  store i32 %983, i32* %4119, align 1, !tbaa !2451
  %984 = extractelement <2 x i32> %976, i32 1
  store i32 %984, i32* %4120, align 1, !tbaa !2451
  %985 = load i64, i64* %RBP, align 8
  %986 = add i64 %985, -32
  %987 = add i64 %4158, 311
  store i64 %987, i64* %PC, align 8
  %988 = inttoptr i64 %986 to i64*
  %989 = load i64, i64* %988, align 8
  store i64 %989, i64* %RAX, align 8, !tbaa !2428
  %990 = add i64 %985, -44
  %991 = add i64 %4158, 314
  store i64 %991, i64* %PC, align 8
  %992 = inttoptr i64 %990 to i32*
  %993 = load i32, i32* %992, align 4
  %994 = add i32 %993, -9
  %995 = zext i32 %994 to i64
  store i64 %995, i64* %RDX, align 8, !tbaa !2428
  %996 = icmp ult i32 %993, 9
  %997 = zext i1 %996 to i8
  store i8 %997, i8* %.pre-phi, align 1, !tbaa !2432
  %998 = and i32 %994, 255
  %999 = tail call i32 @llvm.ctpop.i32(i32 %998) #9
  %1000 = trunc i32 %999 to i8
  %1001 = and i8 %1000, 1
  %1002 = xor i8 %1001, 1
  store i8 %1002, i8* %.pre-phi42, align 1, !tbaa !2446
  %1003 = xor i32 %994, %993
  %1004 = lshr i32 %1003, 4
  %1005 = trunc i32 %1004 to i8
  %1006 = and i8 %1005, 1
  store i8 %1006, i8* %.pre-phi44, align 1, !tbaa !2447
  %1007 = icmp eq i32 %994, 0
  %1008 = zext i1 %1007 to i8
  store i8 %1008, i8* %.pre-phi46, align 1, !tbaa !2448
  %1009 = lshr i32 %994, 31
  %1010 = trunc i32 %1009 to i8
  store i8 %1010, i8* %.pre-phi48, align 1, !tbaa !2449
  %1011 = lshr i32 %993, 31
  %1012 = xor i32 %1009, %1011
  %1013 = add nuw nsw i32 %1012, %1011
  %1014 = icmp eq i32 %1013, 2
  %1015 = zext i1 %1014 to i8
  store i8 %1015, i8* %.pre-phi50, align 1, !tbaa !2450
  %1016 = sext i32 %994 to i64
  store i64 %1016, i64* %RCX, align 8, !tbaa !2428
  %1017 = shl nsw i64 %1016, 2
  %1018 = add i64 %989, %1017
  %1019 = add i64 %4158, 325
  store i64 %1019, i64* %PC, align 8
  %1020 = inttoptr i64 %1018 to i32*
  %1021 = load i32, i32* %1020, align 4
  store i32 %1021, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %1022 = add i64 %985, -40
  %1023 = add i64 %4158, 329
  store i64 %1023, i64* %PC, align 8
  %1024 = inttoptr i64 %1022 to i64*
  %1025 = load i64, i64* %1024, align 8
  store i64 %1025, i64* %RAX, align 8, !tbaa !2428
  %1026 = add i64 %985, -24
  %1027 = add i64 %4158, 332
  store i64 %1027, i64* %PC, align 8
  %1028 = inttoptr i64 %1026 to i32*
  %1029 = load i32, i32* %1028, align 4
  %1030 = zext i32 %1029 to i64
  store i64 %1030, i64* %RDX, align 8, !tbaa !2428
  %1031 = add i64 %4158, 335
  store i64 %1031, i64* %PC, align 8
  %1032 = load i32, i32* %992, align 4
  %1033 = add i32 %1032, -9
  %1034 = zext i32 %1033 to i64
  store i64 %1034, i64* %RSI, align 8, !tbaa !2428
  %1035 = sext i32 %1029 to i64
  %1036 = sext i32 %1033 to i64
  %1037 = mul nsw i64 %1036, %1035
  %1038 = trunc i64 %1037 to i32
  %1039 = and i64 %1037, 4294967295
  store i64 %1039, i64* %RDX, align 8, !tbaa !2428
  %1040 = shl i64 %1037, 32
  %1041 = ashr exact i64 %1040, 32
  %1042 = icmp ne i64 %1041, %1037
  %1043 = zext i1 %1042 to i8
  store i8 %1043, i8* %.pre-phi, align 1, !tbaa !2432
  %1044 = and i32 %1038, 255
  %1045 = tail call i32 @llvm.ctpop.i32(i32 %1044) #9
  %1046 = trunc i32 %1045 to i8
  %1047 = and i8 %1046, 1
  %1048 = xor i8 %1047, 1
  store i8 %1048, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1049 = lshr i32 %1038, 31
  %1050 = trunc i32 %1049 to i8
  store i8 %1050, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1043, i8* %.pre-phi50, align 1, !tbaa !2450
  %1051 = load i64, i64* %RBP, align 8
  %1052 = add i64 %1051, -48
  %1053 = add i64 %4158, 344
  store i64 %1053, i64* %PC, align 8
  %1054 = trunc i64 %1037 to i32
  %1055 = inttoptr i64 %1052 to i32*
  %1056 = load i32, i32* %1055, align 4
  %1057 = add i32 %1056, %1054
  %1058 = zext i32 %1057 to i64
  store i64 %1058, i64* %RDX, align 8, !tbaa !2428
  %1059 = icmp ult i32 %1057, %1054
  %1060 = icmp ult i32 %1057, %1056
  %1061 = or i1 %1059, %1060
  %1062 = zext i1 %1061 to i8
  store i8 %1062, i8* %.pre-phi, align 1, !tbaa !2432
  %1063 = and i32 %1057, 255
  %1064 = tail call i32 @llvm.ctpop.i32(i32 %1063) #9
  %1065 = trunc i32 %1064 to i8
  %1066 = and i8 %1065, 1
  %1067 = xor i8 %1066, 1
  store i8 %1067, i8* %.pre-phi42, align 1, !tbaa !2446
  %1068 = xor i32 %1056, %1054
  %1069 = xor i32 %1068, %1057
  %1070 = lshr i32 %1069, 4
  %1071 = trunc i32 %1070 to i8
  %1072 = and i8 %1071, 1
  store i8 %1072, i8* %.pre-phi44, align 1, !tbaa !2447
  %1073 = icmp eq i32 %1057, 0
  %1074 = zext i1 %1073 to i8
  store i8 %1074, i8* %.pre-phi46, align 1, !tbaa !2448
  %1075 = lshr i32 %1057, 31
  %1076 = trunc i32 %1075 to i8
  store i8 %1076, i8* %.pre-phi48, align 1, !tbaa !2449
  %1077 = lshr i32 %1054, 31
  %1078 = lshr i32 %1056, 31
  %1079 = xor i32 %1075, %1077
  %1080 = xor i32 %1075, %1078
  %1081 = add nuw nsw i32 %1079, %1080
  %1082 = icmp eq i32 %1081, 2
  %1083 = zext i1 %1082 to i8
  store i8 %1083, i8* %.pre-phi50, align 1, !tbaa !2450
  %1084 = sext i32 %1057 to i64
  store i64 %1084, i64* %RCX, align 8, !tbaa !2428
  %1085 = load i64, i64* %RAX, align 8
  %1086 = shl nsw i64 %1084, 2
  %1087 = add i64 %1085, %1086
  %1088 = add i64 %4158, 352
  store i64 %1088, i64* %PC, align 8
  %1089 = load <2 x float>, <2 x float>* %4111, align 1
  %1090 = load <2 x i32>, <2 x i32>* %4112, align 1
  %1091 = inttoptr i64 %1087 to float*
  %1092 = load float, float* %1091, align 4
  %1093 = extractelement <2 x float> %1089, i32 0
  %1094 = fmul float %1093, %1092
  store float %1094, float* %4103, align 1, !tbaa !2451
  %1095 = bitcast <2 x float> %1089 to <2 x i32>
  %1096 = extractelement <2 x i32> %1095, i32 1
  store i32 %1096, i32* %4113, align 1, !tbaa !2451
  %1097 = extractelement <2 x i32> %1090, i32 0
  store i32 %1097, i32* %4114, align 1, !tbaa !2451
  %1098 = extractelement <2 x i32> %1090, i32 1
  store i32 %1098, i32* %4115, align 1, !tbaa !2451
  %1099 = load <2 x float>, <2 x float>* %4116, align 1
  %1100 = load <2 x i32>, <2 x i32>* %4117, align 1
  %1101 = load <2 x float>, <2 x float>* %4111, align 1
  %1102 = extractelement <2 x float> %1099, i32 0
  %1103 = extractelement <2 x float> %1101, i32 0
  %1104 = fadd float %1102, %1103
  store float %1104, float* %4094, align 1, !tbaa !2451
  %1105 = bitcast <2 x float> %1099 to <2 x i32>
  %1106 = extractelement <2 x i32> %1105, i32 1
  store i32 %1106, i32* %4118, align 1, !tbaa !2451
  %1107 = extractelement <2 x i32> %1100, i32 0
  store i32 %1107, i32* %4119, align 1, !tbaa !2451
  %1108 = extractelement <2 x i32> %1100, i32 1
  store i32 %1108, i32* %4120, align 1, !tbaa !2451
  %1109 = add i64 %1051, -32
  %1110 = add i64 %4158, 360
  store i64 %1110, i64* %PC, align 8
  %1111 = inttoptr i64 %1109 to i64*
  %1112 = load i64, i64* %1111, align 8
  store i64 %1112, i64* %RAX, align 8, !tbaa !2428
  %1113 = add i64 %1051, -44
  %1114 = add i64 %4158, 363
  store i64 %1114, i64* %PC, align 8
  %1115 = inttoptr i64 %1113 to i32*
  %1116 = load i32, i32* %1115, align 4
  %1117 = add i32 %1116, -8
  %1118 = zext i32 %1117 to i64
  store i64 %1118, i64* %RDX, align 8, !tbaa !2428
  %1119 = icmp ult i32 %1116, 8
  %1120 = zext i1 %1119 to i8
  store i8 %1120, i8* %.pre-phi, align 1, !tbaa !2432
  %1121 = and i32 %1117, 255
  %1122 = tail call i32 @llvm.ctpop.i32(i32 %1121) #9
  %1123 = trunc i32 %1122 to i8
  %1124 = and i8 %1123, 1
  %1125 = xor i8 %1124, 1
  store i8 %1125, i8* %.pre-phi42, align 1, !tbaa !2446
  %1126 = xor i32 %1117, %1116
  %1127 = lshr i32 %1126, 4
  %1128 = trunc i32 %1127 to i8
  %1129 = and i8 %1128, 1
  store i8 %1129, i8* %.pre-phi44, align 1, !tbaa !2447
  %1130 = icmp eq i32 %1117, 0
  %1131 = zext i1 %1130 to i8
  store i8 %1131, i8* %.pre-phi46, align 1, !tbaa !2448
  %1132 = lshr i32 %1117, 31
  %1133 = trunc i32 %1132 to i8
  store i8 %1133, i8* %.pre-phi48, align 1, !tbaa !2449
  %1134 = lshr i32 %1116, 31
  %1135 = xor i32 %1132, %1134
  %1136 = add nuw nsw i32 %1135, %1134
  %1137 = icmp eq i32 %1136, 2
  %1138 = zext i1 %1137 to i8
  store i8 %1138, i8* %.pre-phi50, align 1, !tbaa !2450
  %1139 = sext i32 %1117 to i64
  store i64 %1139, i64* %RCX, align 8, !tbaa !2428
  %1140 = shl nsw i64 %1139, 2
  %1141 = add i64 %1112, %1140
  %1142 = add i64 %4158, 374
  store i64 %1142, i64* %PC, align 8
  %1143 = inttoptr i64 %1141 to i32*
  %1144 = load i32, i32* %1143, align 4
  store i32 %1144, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %1145 = load i64, i64* %RBP, align 8
  %1146 = add i64 %1145, -40
  %1147 = add i64 %4158, 378
  store i64 %1147, i64* %PC, align 8
  %1148 = inttoptr i64 %1146 to i64*
  %1149 = load i64, i64* %1148, align 8
  store i64 %1149, i64* %RAX, align 8, !tbaa !2428
  %1150 = add i64 %1145, -24
  %1151 = add i64 %4158, 381
  store i64 %1151, i64* %PC, align 8
  %1152 = inttoptr i64 %1150 to i32*
  %1153 = load i32, i32* %1152, align 4
  %1154 = zext i32 %1153 to i64
  store i64 %1154, i64* %RDX, align 8, !tbaa !2428
  %1155 = add i64 %1145, -44
  %1156 = add i64 %4158, 384
  store i64 %1156, i64* %PC, align 8
  %1157 = inttoptr i64 %1155 to i32*
  %1158 = load i32, i32* %1157, align 4
  %1159 = add i32 %1158, -8
  %1160 = zext i32 %1159 to i64
  store i64 %1160, i64* %RSI, align 8, !tbaa !2428
  %1161 = sext i32 %1153 to i64
  %1162 = sext i32 %1159 to i64
  %1163 = mul nsw i64 %1162, %1161
  %1164 = trunc i64 %1163 to i32
  %1165 = and i64 %1163, 4294967295
  store i64 %1165, i64* %RDX, align 8, !tbaa !2428
  %1166 = shl i64 %1163, 32
  %1167 = ashr exact i64 %1166, 32
  %1168 = icmp ne i64 %1167, %1163
  %1169 = zext i1 %1168 to i8
  store i8 %1169, i8* %.pre-phi, align 1, !tbaa !2432
  %1170 = and i32 %1164, 255
  %1171 = tail call i32 @llvm.ctpop.i32(i32 %1170) #9
  %1172 = trunc i32 %1171 to i8
  %1173 = and i8 %1172, 1
  %1174 = xor i8 %1173, 1
  store i8 %1174, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1175 = lshr i32 %1164, 31
  %1176 = trunc i32 %1175 to i8
  store i8 %1176, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1169, i8* %.pre-phi50, align 1, !tbaa !2450
  %1177 = add i64 %1145, -48
  %1178 = add i64 %4158, 393
  store i64 %1178, i64* %PC, align 8
  %1179 = trunc i64 %1163 to i32
  %1180 = inttoptr i64 %1177 to i32*
  %1181 = load i32, i32* %1180, align 4
  %1182 = add i32 %1181, %1179
  %1183 = zext i32 %1182 to i64
  store i64 %1183, i64* %RDX, align 8, !tbaa !2428
  %1184 = icmp ult i32 %1182, %1179
  %1185 = icmp ult i32 %1182, %1181
  %1186 = or i1 %1184, %1185
  %1187 = zext i1 %1186 to i8
  store i8 %1187, i8* %.pre-phi, align 1, !tbaa !2432
  %1188 = and i32 %1182, 255
  %1189 = tail call i32 @llvm.ctpop.i32(i32 %1188) #9
  %1190 = trunc i32 %1189 to i8
  %1191 = and i8 %1190, 1
  %1192 = xor i8 %1191, 1
  store i8 %1192, i8* %.pre-phi42, align 1, !tbaa !2446
  %1193 = xor i32 %1181, %1179
  %1194 = xor i32 %1193, %1182
  %1195 = lshr i32 %1194, 4
  %1196 = trunc i32 %1195 to i8
  %1197 = and i8 %1196, 1
  store i8 %1197, i8* %.pre-phi44, align 1, !tbaa !2447
  %1198 = icmp eq i32 %1182, 0
  %1199 = zext i1 %1198 to i8
  store i8 %1199, i8* %.pre-phi46, align 1, !tbaa !2448
  %1200 = lshr i32 %1182, 31
  %1201 = trunc i32 %1200 to i8
  store i8 %1201, i8* %.pre-phi48, align 1, !tbaa !2449
  %1202 = lshr i32 %1179, 31
  %1203 = lshr i32 %1181, 31
  %1204 = xor i32 %1200, %1202
  %1205 = xor i32 %1200, %1203
  %1206 = add nuw nsw i32 %1204, %1205
  %1207 = icmp eq i32 %1206, 2
  %1208 = zext i1 %1207 to i8
  store i8 %1208, i8* %.pre-phi50, align 1, !tbaa !2450
  %1209 = sext i32 %1182 to i64
  store i64 %1209, i64* %RCX, align 8, !tbaa !2428
  %1210 = load i64, i64* %RAX, align 8
  %1211 = shl nsw i64 %1209, 2
  %1212 = add i64 %1210, %1211
  %1213 = add i64 %4158, 401
  store i64 %1213, i64* %PC, align 8
  %1214 = load <2 x float>, <2 x float>* %4111, align 1
  %1215 = load <2 x i32>, <2 x i32>* %4112, align 1
  %1216 = inttoptr i64 %1212 to float*
  %1217 = load float, float* %1216, align 4
  %1218 = extractelement <2 x float> %1214, i32 0
  %1219 = fmul float %1218, %1217
  store float %1219, float* %4103, align 1, !tbaa !2451
  %1220 = bitcast <2 x float> %1214 to <2 x i32>
  %1221 = extractelement <2 x i32> %1220, i32 1
  store i32 %1221, i32* %4113, align 1, !tbaa !2451
  %1222 = extractelement <2 x i32> %1215, i32 0
  store i32 %1222, i32* %4114, align 1, !tbaa !2451
  %1223 = extractelement <2 x i32> %1215, i32 1
  store i32 %1223, i32* %4115, align 1, !tbaa !2451
  %1224 = load <2 x float>, <2 x float>* %4116, align 1
  %1225 = load <2 x i32>, <2 x i32>* %4117, align 1
  %1226 = load <2 x float>, <2 x float>* %4111, align 1
  %1227 = extractelement <2 x float> %1224, i32 0
  %1228 = extractelement <2 x float> %1226, i32 0
  %1229 = fadd float %1227, %1228
  store float %1229, float* %4094, align 1, !tbaa !2451
  %1230 = bitcast <2 x float> %1224 to <2 x i32>
  %1231 = extractelement <2 x i32> %1230, i32 1
  store i32 %1231, i32* %4118, align 1, !tbaa !2451
  %1232 = extractelement <2 x i32> %1225, i32 0
  store i32 %1232, i32* %4119, align 1, !tbaa !2451
  %1233 = extractelement <2 x i32> %1225, i32 1
  store i32 %1233, i32* %4120, align 1, !tbaa !2451
  %1234 = load i64, i64* %RBP, align 8
  %1235 = add i64 %1234, -32
  %1236 = add i64 %4158, 409
  store i64 %1236, i64* %PC, align 8
  %1237 = inttoptr i64 %1235 to i64*
  %1238 = load i64, i64* %1237, align 8
  store i64 %1238, i64* %RAX, align 8, !tbaa !2428
  %1239 = add i64 %1234, -44
  %1240 = add i64 %4158, 412
  store i64 %1240, i64* %PC, align 8
  %1241 = inttoptr i64 %1239 to i32*
  %1242 = load i32, i32* %1241, align 4
  %1243 = add i32 %1242, -7
  %1244 = zext i32 %1243 to i64
  store i64 %1244, i64* %RDX, align 8, !tbaa !2428
  %1245 = icmp ult i32 %1242, 7
  %1246 = zext i1 %1245 to i8
  store i8 %1246, i8* %.pre-phi, align 1, !tbaa !2432
  %1247 = and i32 %1243, 255
  %1248 = tail call i32 @llvm.ctpop.i32(i32 %1247) #9
  %1249 = trunc i32 %1248 to i8
  %1250 = and i8 %1249, 1
  %1251 = xor i8 %1250, 1
  store i8 %1251, i8* %.pre-phi42, align 1, !tbaa !2446
  %1252 = xor i32 %1243, %1242
  %1253 = lshr i32 %1252, 4
  %1254 = trunc i32 %1253 to i8
  %1255 = and i8 %1254, 1
  store i8 %1255, i8* %.pre-phi44, align 1, !tbaa !2447
  %1256 = icmp eq i32 %1243, 0
  %1257 = zext i1 %1256 to i8
  store i8 %1257, i8* %.pre-phi46, align 1, !tbaa !2448
  %1258 = lshr i32 %1243, 31
  %1259 = trunc i32 %1258 to i8
  store i8 %1259, i8* %.pre-phi48, align 1, !tbaa !2449
  %1260 = lshr i32 %1242, 31
  %1261 = xor i32 %1258, %1260
  %1262 = add nuw nsw i32 %1261, %1260
  %1263 = icmp eq i32 %1262, 2
  %1264 = zext i1 %1263 to i8
  store i8 %1264, i8* %.pre-phi50, align 1, !tbaa !2450
  %1265 = sext i32 %1243 to i64
  store i64 %1265, i64* %RCX, align 8, !tbaa !2428
  %1266 = shl nsw i64 %1265, 2
  %1267 = add i64 %1238, %1266
  %1268 = add i64 %4158, 423
  store i64 %1268, i64* %PC, align 8
  %1269 = inttoptr i64 %1267 to i32*
  %1270 = load i32, i32* %1269, align 4
  store i32 %1270, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %1271 = add i64 %1234, -40
  %1272 = add i64 %4158, 427
  store i64 %1272, i64* %PC, align 8
  %1273 = inttoptr i64 %1271 to i64*
  %1274 = load i64, i64* %1273, align 8
  store i64 %1274, i64* %RAX, align 8, !tbaa !2428
  %1275 = add i64 %1234, -24
  %1276 = add i64 %4158, 430
  store i64 %1276, i64* %PC, align 8
  %1277 = inttoptr i64 %1275 to i32*
  %1278 = load i32, i32* %1277, align 4
  %1279 = zext i32 %1278 to i64
  store i64 %1279, i64* %RDX, align 8, !tbaa !2428
  %1280 = add i64 %4158, 433
  store i64 %1280, i64* %PC, align 8
  %1281 = load i32, i32* %1241, align 4
  %1282 = add i32 %1281, -7
  %1283 = zext i32 %1282 to i64
  store i64 %1283, i64* %RSI, align 8, !tbaa !2428
  %1284 = sext i32 %1278 to i64
  %1285 = sext i32 %1282 to i64
  %1286 = mul nsw i64 %1285, %1284
  %1287 = trunc i64 %1286 to i32
  %1288 = and i64 %1286, 4294967295
  store i64 %1288, i64* %RDX, align 8, !tbaa !2428
  %1289 = shl i64 %1286, 32
  %1290 = ashr exact i64 %1289, 32
  %1291 = icmp ne i64 %1290, %1286
  %1292 = zext i1 %1291 to i8
  store i8 %1292, i8* %.pre-phi, align 1, !tbaa !2432
  %1293 = and i32 %1287, 255
  %1294 = tail call i32 @llvm.ctpop.i32(i32 %1293) #9
  %1295 = trunc i32 %1294 to i8
  %1296 = and i8 %1295, 1
  %1297 = xor i8 %1296, 1
  store i8 %1297, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1298 = lshr i32 %1287, 31
  %1299 = trunc i32 %1298 to i8
  store i8 %1299, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1292, i8* %.pre-phi50, align 1, !tbaa !2450
  %1300 = load i64, i64* %RBP, align 8
  %1301 = add i64 %1300, -48
  %1302 = add i64 %4158, 442
  store i64 %1302, i64* %PC, align 8
  %1303 = trunc i64 %1286 to i32
  %1304 = inttoptr i64 %1301 to i32*
  %1305 = load i32, i32* %1304, align 4
  %1306 = add i32 %1305, %1303
  %1307 = zext i32 %1306 to i64
  store i64 %1307, i64* %RDX, align 8, !tbaa !2428
  %1308 = icmp ult i32 %1306, %1303
  %1309 = icmp ult i32 %1306, %1305
  %1310 = or i1 %1308, %1309
  %1311 = zext i1 %1310 to i8
  store i8 %1311, i8* %.pre-phi, align 1, !tbaa !2432
  %1312 = and i32 %1306, 255
  %1313 = tail call i32 @llvm.ctpop.i32(i32 %1312) #9
  %1314 = trunc i32 %1313 to i8
  %1315 = and i8 %1314, 1
  %1316 = xor i8 %1315, 1
  store i8 %1316, i8* %.pre-phi42, align 1, !tbaa !2446
  %1317 = xor i32 %1305, %1303
  %1318 = xor i32 %1317, %1306
  %1319 = lshr i32 %1318, 4
  %1320 = trunc i32 %1319 to i8
  %1321 = and i8 %1320, 1
  store i8 %1321, i8* %.pre-phi44, align 1, !tbaa !2447
  %1322 = icmp eq i32 %1306, 0
  %1323 = zext i1 %1322 to i8
  store i8 %1323, i8* %.pre-phi46, align 1, !tbaa !2448
  %1324 = lshr i32 %1306, 31
  %1325 = trunc i32 %1324 to i8
  store i8 %1325, i8* %.pre-phi48, align 1, !tbaa !2449
  %1326 = lshr i32 %1303, 31
  %1327 = lshr i32 %1305, 31
  %1328 = xor i32 %1324, %1326
  %1329 = xor i32 %1324, %1327
  %1330 = add nuw nsw i32 %1328, %1329
  %1331 = icmp eq i32 %1330, 2
  %1332 = zext i1 %1331 to i8
  store i8 %1332, i8* %.pre-phi50, align 1, !tbaa !2450
  %1333 = sext i32 %1306 to i64
  store i64 %1333, i64* %RCX, align 8, !tbaa !2428
  %1334 = load i64, i64* %RAX, align 8
  %1335 = shl nsw i64 %1333, 2
  %1336 = add i64 %1334, %1335
  %1337 = add i64 %4158, 450
  store i64 %1337, i64* %PC, align 8
  %1338 = load <2 x float>, <2 x float>* %4111, align 1
  %1339 = load <2 x i32>, <2 x i32>* %4112, align 1
  %1340 = inttoptr i64 %1336 to float*
  %1341 = load float, float* %1340, align 4
  %1342 = extractelement <2 x float> %1338, i32 0
  %1343 = fmul float %1342, %1341
  store float %1343, float* %4103, align 1, !tbaa !2451
  %1344 = bitcast <2 x float> %1338 to <2 x i32>
  %1345 = extractelement <2 x i32> %1344, i32 1
  store i32 %1345, i32* %4113, align 1, !tbaa !2451
  %1346 = extractelement <2 x i32> %1339, i32 0
  store i32 %1346, i32* %4114, align 1, !tbaa !2451
  %1347 = extractelement <2 x i32> %1339, i32 1
  store i32 %1347, i32* %4115, align 1, !tbaa !2451
  %1348 = load <2 x float>, <2 x float>* %4116, align 1
  %1349 = load <2 x i32>, <2 x i32>* %4117, align 1
  %1350 = load <2 x float>, <2 x float>* %4111, align 1
  %1351 = extractelement <2 x float> %1348, i32 0
  %1352 = extractelement <2 x float> %1350, i32 0
  %1353 = fadd float %1351, %1352
  store float %1353, float* %4094, align 1, !tbaa !2451
  %1354 = bitcast <2 x float> %1348 to <2 x i32>
  %1355 = extractelement <2 x i32> %1354, i32 1
  store i32 %1355, i32* %4118, align 1, !tbaa !2451
  %1356 = extractelement <2 x i32> %1349, i32 0
  store i32 %1356, i32* %4119, align 1, !tbaa !2451
  %1357 = extractelement <2 x i32> %1349, i32 1
  store i32 %1357, i32* %4120, align 1, !tbaa !2451
  %1358 = add i64 %1300, -32
  %1359 = add i64 %4158, 458
  store i64 %1359, i64* %PC, align 8
  %1360 = inttoptr i64 %1358 to i64*
  %1361 = load i64, i64* %1360, align 8
  store i64 %1361, i64* %RAX, align 8, !tbaa !2428
  %1362 = add i64 %1300, -44
  %1363 = add i64 %4158, 461
  store i64 %1363, i64* %PC, align 8
  %1364 = inttoptr i64 %1362 to i32*
  %1365 = load i32, i32* %1364, align 4
  %1366 = add i32 %1365, -6
  %1367 = zext i32 %1366 to i64
  store i64 %1367, i64* %RDX, align 8, !tbaa !2428
  %1368 = icmp ult i32 %1365, 6
  %1369 = zext i1 %1368 to i8
  store i8 %1369, i8* %.pre-phi, align 1, !tbaa !2432
  %1370 = and i32 %1366, 255
  %1371 = tail call i32 @llvm.ctpop.i32(i32 %1370) #9
  %1372 = trunc i32 %1371 to i8
  %1373 = and i8 %1372, 1
  %1374 = xor i8 %1373, 1
  store i8 %1374, i8* %.pre-phi42, align 1, !tbaa !2446
  %1375 = xor i32 %1366, %1365
  %1376 = lshr i32 %1375, 4
  %1377 = trunc i32 %1376 to i8
  %1378 = and i8 %1377, 1
  store i8 %1378, i8* %.pre-phi44, align 1, !tbaa !2447
  %1379 = icmp eq i32 %1366, 0
  %1380 = zext i1 %1379 to i8
  store i8 %1380, i8* %.pre-phi46, align 1, !tbaa !2448
  %1381 = lshr i32 %1366, 31
  %1382 = trunc i32 %1381 to i8
  store i8 %1382, i8* %.pre-phi48, align 1, !tbaa !2449
  %1383 = lshr i32 %1365, 31
  %1384 = xor i32 %1381, %1383
  %1385 = add nuw nsw i32 %1384, %1383
  %1386 = icmp eq i32 %1385, 2
  %1387 = zext i1 %1386 to i8
  store i8 %1387, i8* %.pre-phi50, align 1, !tbaa !2450
  %1388 = sext i32 %1366 to i64
  store i64 %1388, i64* %RCX, align 8, !tbaa !2428
  %1389 = shl nsw i64 %1388, 2
  %1390 = add i64 %1361, %1389
  %1391 = add i64 %4158, 472
  store i64 %1391, i64* %PC, align 8
  %1392 = inttoptr i64 %1390 to i32*
  %1393 = load i32, i32* %1392, align 4
  store i32 %1393, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %1394 = load i64, i64* %RBP, align 8
  %1395 = add i64 %1394, -40
  %1396 = add i64 %4158, 476
  store i64 %1396, i64* %PC, align 8
  %1397 = inttoptr i64 %1395 to i64*
  %1398 = load i64, i64* %1397, align 8
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = add i64 %1394, -24
  %1400 = add i64 %4158, 479
  store i64 %1400, i64* %PC, align 8
  %1401 = inttoptr i64 %1399 to i32*
  %1402 = load i32, i32* %1401, align 4
  %1403 = zext i32 %1402 to i64
  store i64 %1403, i64* %RDX, align 8, !tbaa !2428
  %1404 = add i64 %1394, -44
  %1405 = add i64 %4158, 482
  store i64 %1405, i64* %PC, align 8
  %1406 = inttoptr i64 %1404 to i32*
  %1407 = load i32, i32* %1406, align 4
  %1408 = add i32 %1407, -6
  %1409 = zext i32 %1408 to i64
  store i64 %1409, i64* %RSI, align 8, !tbaa !2428
  %1410 = sext i32 %1402 to i64
  %1411 = sext i32 %1408 to i64
  %1412 = mul nsw i64 %1411, %1410
  %1413 = trunc i64 %1412 to i32
  %1414 = and i64 %1412, 4294967295
  store i64 %1414, i64* %RDX, align 8, !tbaa !2428
  %1415 = shl i64 %1412, 32
  %1416 = ashr exact i64 %1415, 32
  %1417 = icmp ne i64 %1416, %1412
  %1418 = zext i1 %1417 to i8
  store i8 %1418, i8* %.pre-phi, align 1, !tbaa !2432
  %1419 = and i32 %1413, 255
  %1420 = tail call i32 @llvm.ctpop.i32(i32 %1419) #9
  %1421 = trunc i32 %1420 to i8
  %1422 = and i8 %1421, 1
  %1423 = xor i8 %1422, 1
  store i8 %1423, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1424 = lshr i32 %1413, 31
  %1425 = trunc i32 %1424 to i8
  store i8 %1425, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1418, i8* %.pre-phi50, align 1, !tbaa !2450
  %1426 = add i64 %1394, -48
  %1427 = add i64 %4158, 491
  store i64 %1427, i64* %PC, align 8
  %1428 = trunc i64 %1412 to i32
  %1429 = inttoptr i64 %1426 to i32*
  %1430 = load i32, i32* %1429, align 4
  %1431 = add i32 %1430, %1428
  %1432 = zext i32 %1431 to i64
  store i64 %1432, i64* %RDX, align 8, !tbaa !2428
  %1433 = icmp ult i32 %1431, %1428
  %1434 = icmp ult i32 %1431, %1430
  %1435 = or i1 %1433, %1434
  %1436 = zext i1 %1435 to i8
  store i8 %1436, i8* %.pre-phi, align 1, !tbaa !2432
  %1437 = and i32 %1431, 255
  %1438 = tail call i32 @llvm.ctpop.i32(i32 %1437) #9
  %1439 = trunc i32 %1438 to i8
  %1440 = and i8 %1439, 1
  %1441 = xor i8 %1440, 1
  store i8 %1441, i8* %.pre-phi42, align 1, !tbaa !2446
  %1442 = xor i32 %1430, %1428
  %1443 = xor i32 %1442, %1431
  %1444 = lshr i32 %1443, 4
  %1445 = trunc i32 %1444 to i8
  %1446 = and i8 %1445, 1
  store i8 %1446, i8* %.pre-phi44, align 1, !tbaa !2447
  %1447 = icmp eq i32 %1431, 0
  %1448 = zext i1 %1447 to i8
  store i8 %1448, i8* %.pre-phi46, align 1, !tbaa !2448
  %1449 = lshr i32 %1431, 31
  %1450 = trunc i32 %1449 to i8
  store i8 %1450, i8* %.pre-phi48, align 1, !tbaa !2449
  %1451 = lshr i32 %1428, 31
  %1452 = lshr i32 %1430, 31
  %1453 = xor i32 %1449, %1451
  %1454 = xor i32 %1449, %1452
  %1455 = add nuw nsw i32 %1453, %1454
  %1456 = icmp eq i32 %1455, 2
  %1457 = zext i1 %1456 to i8
  store i8 %1457, i8* %.pre-phi50, align 1, !tbaa !2450
  %1458 = sext i32 %1431 to i64
  store i64 %1458, i64* %RCX, align 8, !tbaa !2428
  %1459 = load i64, i64* %RAX, align 8
  %1460 = shl nsw i64 %1458, 2
  %1461 = add i64 %1459, %1460
  %1462 = add i64 %4158, 499
  store i64 %1462, i64* %PC, align 8
  %1463 = load <2 x float>, <2 x float>* %4111, align 1
  %1464 = load <2 x i32>, <2 x i32>* %4112, align 1
  %1465 = inttoptr i64 %1461 to float*
  %1466 = load float, float* %1465, align 4
  %1467 = extractelement <2 x float> %1463, i32 0
  %1468 = fmul float %1467, %1466
  store float %1468, float* %4103, align 1, !tbaa !2451
  %1469 = bitcast <2 x float> %1463 to <2 x i32>
  %1470 = extractelement <2 x i32> %1469, i32 1
  store i32 %1470, i32* %4113, align 1, !tbaa !2451
  %1471 = extractelement <2 x i32> %1464, i32 0
  store i32 %1471, i32* %4114, align 1, !tbaa !2451
  %1472 = extractelement <2 x i32> %1464, i32 1
  store i32 %1472, i32* %4115, align 1, !tbaa !2451
  %1473 = load <2 x float>, <2 x float>* %4116, align 1
  %1474 = load <2 x i32>, <2 x i32>* %4117, align 1
  %1475 = load <2 x float>, <2 x float>* %4111, align 1
  %1476 = extractelement <2 x float> %1473, i32 0
  %1477 = extractelement <2 x float> %1475, i32 0
  %1478 = fadd float %1476, %1477
  store float %1478, float* %4094, align 1, !tbaa !2451
  %1479 = bitcast <2 x float> %1473 to <2 x i32>
  %1480 = extractelement <2 x i32> %1479, i32 1
  store i32 %1480, i32* %4118, align 1, !tbaa !2451
  %1481 = extractelement <2 x i32> %1474, i32 0
  store i32 %1481, i32* %4119, align 1, !tbaa !2451
  %1482 = extractelement <2 x i32> %1474, i32 1
  store i32 %1482, i32* %4120, align 1, !tbaa !2451
  %1483 = load i64, i64* %RBP, align 8
  %1484 = add i64 %1483, -32
  %1485 = add i64 %4158, 507
  store i64 %1485, i64* %PC, align 8
  %1486 = inttoptr i64 %1484 to i64*
  %1487 = load i64, i64* %1486, align 8
  store i64 %1487, i64* %RAX, align 8, !tbaa !2428
  %1488 = add i64 %1483, -44
  %1489 = add i64 %4158, 510
  store i64 %1489, i64* %PC, align 8
  %1490 = inttoptr i64 %1488 to i32*
  %1491 = load i32, i32* %1490, align 4
  %1492 = add i32 %1491, -5
  %1493 = zext i32 %1492 to i64
  store i64 %1493, i64* %RDX, align 8, !tbaa !2428
  %1494 = icmp ult i32 %1491, 5
  %1495 = zext i1 %1494 to i8
  store i8 %1495, i8* %.pre-phi, align 1, !tbaa !2432
  %1496 = and i32 %1492, 255
  %1497 = tail call i32 @llvm.ctpop.i32(i32 %1496) #9
  %1498 = trunc i32 %1497 to i8
  %1499 = and i8 %1498, 1
  %1500 = xor i8 %1499, 1
  store i8 %1500, i8* %.pre-phi42, align 1, !tbaa !2446
  %1501 = xor i32 %1492, %1491
  %1502 = lshr i32 %1501, 4
  %1503 = trunc i32 %1502 to i8
  %1504 = and i8 %1503, 1
  store i8 %1504, i8* %.pre-phi44, align 1, !tbaa !2447
  %1505 = icmp eq i32 %1492, 0
  %1506 = zext i1 %1505 to i8
  store i8 %1506, i8* %.pre-phi46, align 1, !tbaa !2448
  %1507 = lshr i32 %1492, 31
  %1508 = trunc i32 %1507 to i8
  store i8 %1508, i8* %.pre-phi48, align 1, !tbaa !2449
  %1509 = lshr i32 %1491, 31
  %1510 = xor i32 %1507, %1509
  %1511 = add nuw nsw i32 %1510, %1509
  %1512 = icmp eq i32 %1511, 2
  %1513 = zext i1 %1512 to i8
  store i8 %1513, i8* %.pre-phi50, align 1, !tbaa !2450
  %1514 = sext i32 %1492 to i64
  store i64 %1514, i64* %RCX, align 8, !tbaa !2428
  %1515 = shl nsw i64 %1514, 2
  %1516 = add i64 %1487, %1515
  %1517 = add i64 %4158, 521
  store i64 %1517, i64* %PC, align 8
  %1518 = inttoptr i64 %1516 to i32*
  %1519 = load i32, i32* %1518, align 4
  store i32 %1519, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %1520 = add i64 %1483, -40
  %1521 = add i64 %4158, 525
  store i64 %1521, i64* %PC, align 8
  %1522 = inttoptr i64 %1520 to i64*
  %1523 = load i64, i64* %1522, align 8
  store i64 %1523, i64* %RAX, align 8, !tbaa !2428
  %1524 = add i64 %1483, -24
  %1525 = add i64 %4158, 528
  store i64 %1525, i64* %PC, align 8
  %1526 = inttoptr i64 %1524 to i32*
  %1527 = load i32, i32* %1526, align 4
  %1528 = zext i32 %1527 to i64
  store i64 %1528, i64* %RDX, align 8, !tbaa !2428
  %1529 = add i64 %4158, 531
  store i64 %1529, i64* %PC, align 8
  %1530 = load i32, i32* %1490, align 4
  %1531 = add i32 %1530, -5
  %1532 = zext i32 %1531 to i64
  store i64 %1532, i64* %RSI, align 8, !tbaa !2428
  %1533 = sext i32 %1527 to i64
  %1534 = sext i32 %1531 to i64
  %1535 = mul nsw i64 %1534, %1533
  %1536 = trunc i64 %1535 to i32
  %1537 = and i64 %1535, 4294967295
  store i64 %1537, i64* %RDX, align 8, !tbaa !2428
  %1538 = shl i64 %1535, 32
  %1539 = ashr exact i64 %1538, 32
  %1540 = icmp ne i64 %1539, %1535
  %1541 = zext i1 %1540 to i8
  store i8 %1541, i8* %.pre-phi, align 1, !tbaa !2432
  %1542 = and i32 %1536, 255
  %1543 = tail call i32 @llvm.ctpop.i32(i32 %1542) #9
  %1544 = trunc i32 %1543 to i8
  %1545 = and i8 %1544, 1
  %1546 = xor i8 %1545, 1
  store i8 %1546, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1547 = lshr i32 %1536, 31
  %1548 = trunc i32 %1547 to i8
  store i8 %1548, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1541, i8* %.pre-phi50, align 1, !tbaa !2450
  %1549 = load i64, i64* %RBP, align 8
  %1550 = add i64 %1549, -48
  %1551 = add i64 %4158, 540
  store i64 %1551, i64* %PC, align 8
  %1552 = trunc i64 %1535 to i32
  %1553 = inttoptr i64 %1550 to i32*
  %1554 = load i32, i32* %1553, align 4
  %1555 = add i32 %1554, %1552
  %1556 = zext i32 %1555 to i64
  store i64 %1556, i64* %RDX, align 8, !tbaa !2428
  %1557 = icmp ult i32 %1555, %1552
  %1558 = icmp ult i32 %1555, %1554
  %1559 = or i1 %1557, %1558
  %1560 = zext i1 %1559 to i8
  store i8 %1560, i8* %.pre-phi, align 1, !tbaa !2432
  %1561 = and i32 %1555, 255
  %1562 = tail call i32 @llvm.ctpop.i32(i32 %1561) #9
  %1563 = trunc i32 %1562 to i8
  %1564 = and i8 %1563, 1
  %1565 = xor i8 %1564, 1
  store i8 %1565, i8* %.pre-phi42, align 1, !tbaa !2446
  %1566 = xor i32 %1554, %1552
  %1567 = xor i32 %1566, %1555
  %1568 = lshr i32 %1567, 4
  %1569 = trunc i32 %1568 to i8
  %1570 = and i8 %1569, 1
  store i8 %1570, i8* %.pre-phi44, align 1, !tbaa !2447
  %1571 = icmp eq i32 %1555, 0
  %1572 = zext i1 %1571 to i8
  store i8 %1572, i8* %.pre-phi46, align 1, !tbaa !2448
  %1573 = lshr i32 %1555, 31
  %1574 = trunc i32 %1573 to i8
  store i8 %1574, i8* %.pre-phi48, align 1, !tbaa !2449
  %1575 = lshr i32 %1552, 31
  %1576 = lshr i32 %1554, 31
  %1577 = xor i32 %1573, %1575
  %1578 = xor i32 %1573, %1576
  %1579 = add nuw nsw i32 %1577, %1578
  %1580 = icmp eq i32 %1579, 2
  %1581 = zext i1 %1580 to i8
  store i8 %1581, i8* %.pre-phi50, align 1, !tbaa !2450
  %1582 = sext i32 %1555 to i64
  store i64 %1582, i64* %RCX, align 8, !tbaa !2428
  %1583 = load i64, i64* %RAX, align 8
  %1584 = shl nsw i64 %1582, 2
  %1585 = add i64 %1583, %1584
  %1586 = add i64 %4158, 548
  store i64 %1586, i64* %PC, align 8
  %1587 = load <2 x float>, <2 x float>* %4111, align 1
  %1588 = load <2 x i32>, <2 x i32>* %4112, align 1
  %1589 = inttoptr i64 %1585 to float*
  %1590 = load float, float* %1589, align 4
  %1591 = extractelement <2 x float> %1587, i32 0
  %1592 = fmul float %1591, %1590
  store float %1592, float* %4103, align 1, !tbaa !2451
  %1593 = bitcast <2 x float> %1587 to <2 x i32>
  %1594 = extractelement <2 x i32> %1593, i32 1
  store i32 %1594, i32* %4113, align 1, !tbaa !2451
  %1595 = extractelement <2 x i32> %1588, i32 0
  store i32 %1595, i32* %4114, align 1, !tbaa !2451
  %1596 = extractelement <2 x i32> %1588, i32 1
  store i32 %1596, i32* %4115, align 1, !tbaa !2451
  %1597 = load <2 x float>, <2 x float>* %4116, align 1
  %1598 = load <2 x i32>, <2 x i32>* %4117, align 1
  %1599 = load <2 x float>, <2 x float>* %4111, align 1
  %1600 = extractelement <2 x float> %1597, i32 0
  %1601 = extractelement <2 x float> %1599, i32 0
  %1602 = fadd float %1600, %1601
  store float %1602, float* %4094, align 1, !tbaa !2451
  %1603 = bitcast <2 x float> %1597 to <2 x i32>
  %1604 = extractelement <2 x i32> %1603, i32 1
  store i32 %1604, i32* %4118, align 1, !tbaa !2451
  %1605 = extractelement <2 x i32> %1598, i32 0
  store i32 %1605, i32* %4119, align 1, !tbaa !2451
  %1606 = extractelement <2 x i32> %1598, i32 1
  store i32 %1606, i32* %4120, align 1, !tbaa !2451
  %1607 = add i64 %1549, -32
  %1608 = add i64 %4158, 556
  store i64 %1608, i64* %PC, align 8
  %1609 = inttoptr i64 %1607 to i64*
  %1610 = load i64, i64* %1609, align 8
  store i64 %1610, i64* %RAX, align 8, !tbaa !2428
  %1611 = add i64 %1549, -44
  %1612 = add i64 %4158, 559
  store i64 %1612, i64* %PC, align 8
  %1613 = inttoptr i64 %1611 to i32*
  %1614 = load i32, i32* %1613, align 4
  %1615 = add i32 %1614, -4
  %1616 = zext i32 %1615 to i64
  store i64 %1616, i64* %RDX, align 8, !tbaa !2428
  %1617 = icmp ult i32 %1614, 4
  %1618 = zext i1 %1617 to i8
  store i8 %1618, i8* %.pre-phi, align 1, !tbaa !2432
  %1619 = and i32 %1615, 255
  %1620 = tail call i32 @llvm.ctpop.i32(i32 %1619) #9
  %1621 = trunc i32 %1620 to i8
  %1622 = and i8 %1621, 1
  %1623 = xor i8 %1622, 1
  store i8 %1623, i8* %.pre-phi42, align 1, !tbaa !2446
  %1624 = xor i32 %1615, %1614
  %1625 = lshr i32 %1624, 4
  %1626 = trunc i32 %1625 to i8
  %1627 = and i8 %1626, 1
  store i8 %1627, i8* %.pre-phi44, align 1, !tbaa !2447
  %1628 = icmp eq i32 %1615, 0
  %1629 = zext i1 %1628 to i8
  store i8 %1629, i8* %.pre-phi46, align 1, !tbaa !2448
  %1630 = lshr i32 %1615, 31
  %1631 = trunc i32 %1630 to i8
  store i8 %1631, i8* %.pre-phi48, align 1, !tbaa !2449
  %1632 = lshr i32 %1614, 31
  %1633 = xor i32 %1630, %1632
  %1634 = add nuw nsw i32 %1633, %1632
  %1635 = icmp eq i32 %1634, 2
  %1636 = zext i1 %1635 to i8
  store i8 %1636, i8* %.pre-phi50, align 1, !tbaa !2450
  %1637 = sext i32 %1615 to i64
  store i64 %1637, i64* %RCX, align 8, !tbaa !2428
  %1638 = shl nsw i64 %1637, 2
  %1639 = add i64 %1610, %1638
  %1640 = add i64 %4158, 570
  store i64 %1640, i64* %PC, align 8
  %1641 = inttoptr i64 %1639 to i32*
  %1642 = load i32, i32* %1641, align 4
  store i32 %1642, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %1643 = load i64, i64* %RBP, align 8
  %1644 = add i64 %1643, -40
  %1645 = add i64 %4158, 574
  store i64 %1645, i64* %PC, align 8
  %1646 = inttoptr i64 %1644 to i64*
  %1647 = load i64, i64* %1646, align 8
  store i64 %1647, i64* %RAX, align 8, !tbaa !2428
  %1648 = add i64 %1643, -24
  %1649 = add i64 %4158, 577
  store i64 %1649, i64* %PC, align 8
  %1650 = inttoptr i64 %1648 to i32*
  %1651 = load i32, i32* %1650, align 4
  %1652 = zext i32 %1651 to i64
  store i64 %1652, i64* %RDX, align 8, !tbaa !2428
  %1653 = add i64 %1643, -44
  %1654 = add i64 %4158, 580
  store i64 %1654, i64* %PC, align 8
  %1655 = inttoptr i64 %1653 to i32*
  %1656 = load i32, i32* %1655, align 4
  %1657 = add i32 %1656, -4
  %1658 = zext i32 %1657 to i64
  store i64 %1658, i64* %RSI, align 8, !tbaa !2428
  %1659 = sext i32 %1651 to i64
  %1660 = sext i32 %1657 to i64
  %1661 = mul nsw i64 %1660, %1659
  %1662 = trunc i64 %1661 to i32
  %1663 = and i64 %1661, 4294967295
  store i64 %1663, i64* %RDX, align 8, !tbaa !2428
  %1664 = shl i64 %1661, 32
  %1665 = ashr exact i64 %1664, 32
  %1666 = icmp ne i64 %1665, %1661
  %1667 = zext i1 %1666 to i8
  store i8 %1667, i8* %.pre-phi, align 1, !tbaa !2432
  %1668 = and i32 %1662, 255
  %1669 = tail call i32 @llvm.ctpop.i32(i32 %1668) #9
  %1670 = trunc i32 %1669 to i8
  %1671 = and i8 %1670, 1
  %1672 = xor i8 %1671, 1
  store i8 %1672, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1673 = lshr i32 %1662, 31
  %1674 = trunc i32 %1673 to i8
  store i8 %1674, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1667, i8* %.pre-phi50, align 1, !tbaa !2450
  %1675 = add i64 %1643, -48
  %1676 = add i64 %4158, 589
  store i64 %1676, i64* %PC, align 8
  %1677 = trunc i64 %1661 to i32
  %1678 = inttoptr i64 %1675 to i32*
  %1679 = load i32, i32* %1678, align 4
  %1680 = add i32 %1679, %1677
  %1681 = zext i32 %1680 to i64
  store i64 %1681, i64* %RDX, align 8, !tbaa !2428
  %1682 = icmp ult i32 %1680, %1677
  %1683 = icmp ult i32 %1680, %1679
  %1684 = or i1 %1682, %1683
  %1685 = zext i1 %1684 to i8
  store i8 %1685, i8* %.pre-phi, align 1, !tbaa !2432
  %1686 = and i32 %1680, 255
  %1687 = tail call i32 @llvm.ctpop.i32(i32 %1686) #9
  %1688 = trunc i32 %1687 to i8
  %1689 = and i8 %1688, 1
  %1690 = xor i8 %1689, 1
  store i8 %1690, i8* %.pre-phi42, align 1, !tbaa !2446
  %1691 = xor i32 %1679, %1677
  %1692 = xor i32 %1691, %1680
  %1693 = lshr i32 %1692, 4
  %1694 = trunc i32 %1693 to i8
  %1695 = and i8 %1694, 1
  store i8 %1695, i8* %.pre-phi44, align 1, !tbaa !2447
  %1696 = icmp eq i32 %1680, 0
  %1697 = zext i1 %1696 to i8
  store i8 %1697, i8* %.pre-phi46, align 1, !tbaa !2448
  %1698 = lshr i32 %1680, 31
  %1699 = trunc i32 %1698 to i8
  store i8 %1699, i8* %.pre-phi48, align 1, !tbaa !2449
  %1700 = lshr i32 %1677, 31
  %1701 = lshr i32 %1679, 31
  %1702 = xor i32 %1698, %1700
  %1703 = xor i32 %1698, %1701
  %1704 = add nuw nsw i32 %1702, %1703
  %1705 = icmp eq i32 %1704, 2
  %1706 = zext i1 %1705 to i8
  store i8 %1706, i8* %.pre-phi50, align 1, !tbaa !2450
  %1707 = sext i32 %1680 to i64
  store i64 %1707, i64* %RCX, align 8, !tbaa !2428
  %1708 = load i64, i64* %RAX, align 8
  %1709 = shl nsw i64 %1707, 2
  %1710 = add i64 %1708, %1709
  %1711 = add i64 %4158, 597
  store i64 %1711, i64* %PC, align 8
  %1712 = load <2 x float>, <2 x float>* %4111, align 1
  %1713 = load <2 x i32>, <2 x i32>* %4112, align 1
  %1714 = inttoptr i64 %1710 to float*
  %1715 = load float, float* %1714, align 4
  %1716 = extractelement <2 x float> %1712, i32 0
  %1717 = fmul float %1716, %1715
  store float %1717, float* %4103, align 1, !tbaa !2451
  %1718 = bitcast <2 x float> %1712 to <2 x i32>
  %1719 = extractelement <2 x i32> %1718, i32 1
  store i32 %1719, i32* %4113, align 1, !tbaa !2451
  %1720 = extractelement <2 x i32> %1713, i32 0
  store i32 %1720, i32* %4114, align 1, !tbaa !2451
  %1721 = extractelement <2 x i32> %1713, i32 1
  store i32 %1721, i32* %4115, align 1, !tbaa !2451
  %1722 = load <2 x float>, <2 x float>* %4116, align 1
  %1723 = load <2 x i32>, <2 x i32>* %4117, align 1
  %1724 = load <2 x float>, <2 x float>* %4111, align 1
  %1725 = extractelement <2 x float> %1722, i32 0
  %1726 = extractelement <2 x float> %1724, i32 0
  %1727 = fadd float %1725, %1726
  store float %1727, float* %4094, align 1, !tbaa !2451
  %1728 = bitcast <2 x float> %1722 to <2 x i32>
  %1729 = extractelement <2 x i32> %1728, i32 1
  store i32 %1729, i32* %4118, align 1, !tbaa !2451
  %1730 = extractelement <2 x i32> %1723, i32 0
  store i32 %1730, i32* %4119, align 1, !tbaa !2451
  %1731 = extractelement <2 x i32> %1723, i32 1
  store i32 %1731, i32* %4120, align 1, !tbaa !2451
  %1732 = load i64, i64* %RBP, align 8
  %1733 = add i64 %1732, -32
  %1734 = add i64 %4158, 605
  store i64 %1734, i64* %PC, align 8
  %1735 = inttoptr i64 %1733 to i64*
  %1736 = load i64, i64* %1735, align 8
  store i64 %1736, i64* %RAX, align 8, !tbaa !2428
  %1737 = add i64 %1732, -44
  %1738 = add i64 %4158, 608
  store i64 %1738, i64* %PC, align 8
  %1739 = inttoptr i64 %1737 to i32*
  %1740 = load i32, i32* %1739, align 4
  %1741 = add i32 %1740, -3
  %1742 = zext i32 %1741 to i64
  store i64 %1742, i64* %RDX, align 8, !tbaa !2428
  %1743 = icmp ult i32 %1740, 3
  %1744 = zext i1 %1743 to i8
  store i8 %1744, i8* %.pre-phi, align 1, !tbaa !2432
  %1745 = and i32 %1741, 255
  %1746 = tail call i32 @llvm.ctpop.i32(i32 %1745) #9
  %1747 = trunc i32 %1746 to i8
  %1748 = and i8 %1747, 1
  %1749 = xor i8 %1748, 1
  store i8 %1749, i8* %.pre-phi42, align 1, !tbaa !2446
  %1750 = xor i32 %1741, %1740
  %1751 = lshr i32 %1750, 4
  %1752 = trunc i32 %1751 to i8
  %1753 = and i8 %1752, 1
  store i8 %1753, i8* %.pre-phi44, align 1, !tbaa !2447
  %1754 = icmp eq i32 %1741, 0
  %1755 = zext i1 %1754 to i8
  store i8 %1755, i8* %.pre-phi46, align 1, !tbaa !2448
  %1756 = lshr i32 %1741, 31
  %1757 = trunc i32 %1756 to i8
  store i8 %1757, i8* %.pre-phi48, align 1, !tbaa !2449
  %1758 = lshr i32 %1740, 31
  %1759 = xor i32 %1756, %1758
  %1760 = add nuw nsw i32 %1759, %1758
  %1761 = icmp eq i32 %1760, 2
  %1762 = zext i1 %1761 to i8
  store i8 %1762, i8* %.pre-phi50, align 1, !tbaa !2450
  %1763 = sext i32 %1741 to i64
  store i64 %1763, i64* %RCX, align 8, !tbaa !2428
  %1764 = shl nsw i64 %1763, 2
  %1765 = add i64 %1736, %1764
  %1766 = add i64 %4158, 619
  store i64 %1766, i64* %PC, align 8
  %1767 = inttoptr i64 %1765 to i32*
  %1768 = load i32, i32* %1767, align 4
  store i32 %1768, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %1769 = add i64 %1732, -40
  %1770 = add i64 %4158, 623
  store i64 %1770, i64* %PC, align 8
  %1771 = inttoptr i64 %1769 to i64*
  %1772 = load i64, i64* %1771, align 8
  store i64 %1772, i64* %RAX, align 8, !tbaa !2428
  %1773 = add i64 %1732, -24
  %1774 = add i64 %4158, 626
  store i64 %1774, i64* %PC, align 8
  %1775 = inttoptr i64 %1773 to i32*
  %1776 = load i32, i32* %1775, align 4
  %1777 = zext i32 %1776 to i64
  store i64 %1777, i64* %RDX, align 8, !tbaa !2428
  %1778 = add i64 %4158, 629
  store i64 %1778, i64* %PC, align 8
  %1779 = load i32, i32* %1739, align 4
  %1780 = add i32 %1779, -3
  %1781 = zext i32 %1780 to i64
  store i64 %1781, i64* %RSI, align 8, !tbaa !2428
  %1782 = sext i32 %1776 to i64
  %1783 = sext i32 %1780 to i64
  %1784 = mul nsw i64 %1783, %1782
  %1785 = trunc i64 %1784 to i32
  %1786 = and i64 %1784, 4294967295
  store i64 %1786, i64* %RDX, align 8, !tbaa !2428
  %1787 = shl i64 %1784, 32
  %1788 = ashr exact i64 %1787, 32
  %1789 = icmp ne i64 %1788, %1784
  %1790 = zext i1 %1789 to i8
  store i8 %1790, i8* %.pre-phi, align 1, !tbaa !2432
  %1791 = and i32 %1785, 255
  %1792 = tail call i32 @llvm.ctpop.i32(i32 %1791) #9
  %1793 = trunc i32 %1792 to i8
  %1794 = and i8 %1793, 1
  %1795 = xor i8 %1794, 1
  store i8 %1795, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1796 = lshr i32 %1785, 31
  %1797 = trunc i32 %1796 to i8
  store i8 %1797, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1790, i8* %.pre-phi50, align 1, !tbaa !2450
  %1798 = load i64, i64* %RBP, align 8
  %1799 = add i64 %1798, -48
  %1800 = add i64 %4158, 638
  store i64 %1800, i64* %PC, align 8
  %1801 = trunc i64 %1784 to i32
  %1802 = inttoptr i64 %1799 to i32*
  %1803 = load i32, i32* %1802, align 4
  %1804 = add i32 %1803, %1801
  %1805 = zext i32 %1804 to i64
  store i64 %1805, i64* %RDX, align 8, !tbaa !2428
  %1806 = icmp ult i32 %1804, %1801
  %1807 = icmp ult i32 %1804, %1803
  %1808 = or i1 %1806, %1807
  %1809 = zext i1 %1808 to i8
  store i8 %1809, i8* %.pre-phi, align 1, !tbaa !2432
  %1810 = and i32 %1804, 255
  %1811 = tail call i32 @llvm.ctpop.i32(i32 %1810) #9
  %1812 = trunc i32 %1811 to i8
  %1813 = and i8 %1812, 1
  %1814 = xor i8 %1813, 1
  store i8 %1814, i8* %.pre-phi42, align 1, !tbaa !2446
  %1815 = xor i32 %1803, %1801
  %1816 = xor i32 %1815, %1804
  %1817 = lshr i32 %1816, 4
  %1818 = trunc i32 %1817 to i8
  %1819 = and i8 %1818, 1
  store i8 %1819, i8* %.pre-phi44, align 1, !tbaa !2447
  %1820 = icmp eq i32 %1804, 0
  %1821 = zext i1 %1820 to i8
  store i8 %1821, i8* %.pre-phi46, align 1, !tbaa !2448
  %1822 = lshr i32 %1804, 31
  %1823 = trunc i32 %1822 to i8
  store i8 %1823, i8* %.pre-phi48, align 1, !tbaa !2449
  %1824 = lshr i32 %1801, 31
  %1825 = lshr i32 %1803, 31
  %1826 = xor i32 %1822, %1824
  %1827 = xor i32 %1822, %1825
  %1828 = add nuw nsw i32 %1826, %1827
  %1829 = icmp eq i32 %1828, 2
  %1830 = zext i1 %1829 to i8
  store i8 %1830, i8* %.pre-phi50, align 1, !tbaa !2450
  %1831 = sext i32 %1804 to i64
  store i64 %1831, i64* %RCX, align 8, !tbaa !2428
  %1832 = load i64, i64* %RAX, align 8
  %1833 = shl nsw i64 %1831, 2
  %1834 = add i64 %1832, %1833
  %1835 = add i64 %4158, 646
  store i64 %1835, i64* %PC, align 8
  %1836 = load <2 x float>, <2 x float>* %4111, align 1
  %1837 = load <2 x i32>, <2 x i32>* %4112, align 1
  %1838 = inttoptr i64 %1834 to float*
  %1839 = load float, float* %1838, align 4
  %1840 = extractelement <2 x float> %1836, i32 0
  %1841 = fmul float %1840, %1839
  store float %1841, float* %4103, align 1, !tbaa !2451
  %1842 = bitcast <2 x float> %1836 to <2 x i32>
  %1843 = extractelement <2 x i32> %1842, i32 1
  store i32 %1843, i32* %4113, align 1, !tbaa !2451
  %1844 = extractelement <2 x i32> %1837, i32 0
  store i32 %1844, i32* %4114, align 1, !tbaa !2451
  %1845 = extractelement <2 x i32> %1837, i32 1
  store i32 %1845, i32* %4115, align 1, !tbaa !2451
  %1846 = load <2 x float>, <2 x float>* %4116, align 1
  %1847 = load <2 x i32>, <2 x i32>* %4117, align 1
  %1848 = load <2 x float>, <2 x float>* %4111, align 1
  %1849 = extractelement <2 x float> %1846, i32 0
  %1850 = extractelement <2 x float> %1848, i32 0
  %1851 = fadd float %1849, %1850
  store float %1851, float* %4094, align 1, !tbaa !2451
  %1852 = bitcast <2 x float> %1846 to <2 x i32>
  %1853 = extractelement <2 x i32> %1852, i32 1
  store i32 %1853, i32* %4118, align 1, !tbaa !2451
  %1854 = extractelement <2 x i32> %1847, i32 0
  store i32 %1854, i32* %4119, align 1, !tbaa !2451
  %1855 = extractelement <2 x i32> %1847, i32 1
  store i32 %1855, i32* %4120, align 1, !tbaa !2451
  %1856 = add i64 %1798, -32
  %1857 = add i64 %4158, 654
  store i64 %1857, i64* %PC, align 8
  %1858 = inttoptr i64 %1856 to i64*
  %1859 = load i64, i64* %1858, align 8
  store i64 %1859, i64* %RAX, align 8, !tbaa !2428
  %1860 = add i64 %1798, -44
  %1861 = add i64 %4158, 657
  store i64 %1861, i64* %PC, align 8
  %1862 = inttoptr i64 %1860 to i32*
  %1863 = load i32, i32* %1862, align 4
  %1864 = add i32 %1863, -2
  %1865 = zext i32 %1864 to i64
  store i64 %1865, i64* %RDX, align 8, !tbaa !2428
  %1866 = icmp ult i32 %1863, 2
  %1867 = zext i1 %1866 to i8
  store i8 %1867, i8* %.pre-phi, align 1, !tbaa !2432
  %1868 = and i32 %1864, 255
  %1869 = tail call i32 @llvm.ctpop.i32(i32 %1868) #9
  %1870 = trunc i32 %1869 to i8
  %1871 = and i8 %1870, 1
  %1872 = xor i8 %1871, 1
  store i8 %1872, i8* %.pre-phi42, align 1, !tbaa !2446
  %1873 = xor i32 %1864, %1863
  %1874 = lshr i32 %1873, 4
  %1875 = trunc i32 %1874 to i8
  %1876 = and i8 %1875, 1
  store i8 %1876, i8* %.pre-phi44, align 1, !tbaa !2447
  %1877 = icmp eq i32 %1864, 0
  %1878 = zext i1 %1877 to i8
  store i8 %1878, i8* %.pre-phi46, align 1, !tbaa !2448
  %1879 = lshr i32 %1864, 31
  %1880 = trunc i32 %1879 to i8
  store i8 %1880, i8* %.pre-phi48, align 1, !tbaa !2449
  %1881 = lshr i32 %1863, 31
  %1882 = xor i32 %1879, %1881
  %1883 = add nuw nsw i32 %1882, %1881
  %1884 = icmp eq i32 %1883, 2
  %1885 = zext i1 %1884 to i8
  store i8 %1885, i8* %.pre-phi50, align 1, !tbaa !2450
  %1886 = sext i32 %1864 to i64
  store i64 %1886, i64* %RCX, align 8, !tbaa !2428
  %1887 = shl nsw i64 %1886, 2
  %1888 = add i64 %1859, %1887
  %1889 = add i64 %4158, 668
  store i64 %1889, i64* %PC, align 8
  %1890 = inttoptr i64 %1888 to i32*
  %1891 = load i32, i32* %1890, align 4
  store i32 %1891, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %1892 = load i64, i64* %RBP, align 8
  %1893 = add i64 %1892, -40
  %1894 = add i64 %4158, 672
  store i64 %1894, i64* %PC, align 8
  %1895 = inttoptr i64 %1893 to i64*
  %1896 = load i64, i64* %1895, align 8
  store i64 %1896, i64* %RAX, align 8, !tbaa !2428
  %1897 = add i64 %1892, -24
  %1898 = add i64 %4158, 675
  store i64 %1898, i64* %PC, align 8
  %1899 = inttoptr i64 %1897 to i32*
  %1900 = load i32, i32* %1899, align 4
  %1901 = zext i32 %1900 to i64
  store i64 %1901, i64* %RDX, align 8, !tbaa !2428
  %1902 = add i64 %1892, -44
  %1903 = add i64 %4158, 678
  store i64 %1903, i64* %PC, align 8
  %1904 = inttoptr i64 %1902 to i32*
  %1905 = load i32, i32* %1904, align 4
  %1906 = add i32 %1905, -2
  %1907 = zext i32 %1906 to i64
  store i64 %1907, i64* %RSI, align 8, !tbaa !2428
  %1908 = sext i32 %1900 to i64
  %1909 = sext i32 %1906 to i64
  %1910 = mul nsw i64 %1909, %1908
  %1911 = trunc i64 %1910 to i32
  %1912 = and i64 %1910, 4294967295
  store i64 %1912, i64* %RDX, align 8, !tbaa !2428
  %1913 = shl i64 %1910, 32
  %1914 = ashr exact i64 %1913, 32
  %1915 = icmp ne i64 %1914, %1910
  %1916 = zext i1 %1915 to i8
  store i8 %1916, i8* %.pre-phi, align 1, !tbaa !2432
  %1917 = and i32 %1911, 255
  %1918 = tail call i32 @llvm.ctpop.i32(i32 %1917) #9
  %1919 = trunc i32 %1918 to i8
  %1920 = and i8 %1919, 1
  %1921 = xor i8 %1920, 1
  store i8 %1921, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %1922 = lshr i32 %1911, 31
  %1923 = trunc i32 %1922 to i8
  store i8 %1923, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %1916, i8* %.pre-phi50, align 1, !tbaa !2450
  %1924 = add i64 %1892, -48
  %1925 = add i64 %4158, 687
  store i64 %1925, i64* %PC, align 8
  %1926 = trunc i64 %1910 to i32
  %1927 = inttoptr i64 %1924 to i32*
  %1928 = load i32, i32* %1927, align 4
  %1929 = add i32 %1928, %1926
  %1930 = zext i32 %1929 to i64
  store i64 %1930, i64* %RDX, align 8, !tbaa !2428
  %1931 = icmp ult i32 %1929, %1926
  %1932 = icmp ult i32 %1929, %1928
  %1933 = or i1 %1931, %1932
  %1934 = zext i1 %1933 to i8
  store i8 %1934, i8* %.pre-phi, align 1, !tbaa !2432
  %1935 = and i32 %1929, 255
  %1936 = tail call i32 @llvm.ctpop.i32(i32 %1935) #9
  %1937 = trunc i32 %1936 to i8
  %1938 = and i8 %1937, 1
  %1939 = xor i8 %1938, 1
  store i8 %1939, i8* %.pre-phi42, align 1, !tbaa !2446
  %1940 = xor i32 %1928, %1926
  %1941 = xor i32 %1940, %1929
  %1942 = lshr i32 %1941, 4
  %1943 = trunc i32 %1942 to i8
  %1944 = and i8 %1943, 1
  store i8 %1944, i8* %.pre-phi44, align 1, !tbaa !2447
  %1945 = icmp eq i32 %1929, 0
  %1946 = zext i1 %1945 to i8
  store i8 %1946, i8* %.pre-phi46, align 1, !tbaa !2448
  %1947 = lshr i32 %1929, 31
  %1948 = trunc i32 %1947 to i8
  store i8 %1948, i8* %.pre-phi48, align 1, !tbaa !2449
  %1949 = lshr i32 %1926, 31
  %1950 = lshr i32 %1928, 31
  %1951 = xor i32 %1947, %1949
  %1952 = xor i32 %1947, %1950
  %1953 = add nuw nsw i32 %1951, %1952
  %1954 = icmp eq i32 %1953, 2
  %1955 = zext i1 %1954 to i8
  store i8 %1955, i8* %.pre-phi50, align 1, !tbaa !2450
  %1956 = sext i32 %1929 to i64
  store i64 %1956, i64* %RCX, align 8, !tbaa !2428
  %1957 = load i64, i64* %RAX, align 8
  %1958 = shl nsw i64 %1956, 2
  %1959 = add i64 %1957, %1958
  %1960 = add i64 %4158, 695
  store i64 %1960, i64* %PC, align 8
  %1961 = load <2 x float>, <2 x float>* %4111, align 1
  %1962 = load <2 x i32>, <2 x i32>* %4112, align 1
  %1963 = inttoptr i64 %1959 to float*
  %1964 = load float, float* %1963, align 4
  %1965 = extractelement <2 x float> %1961, i32 0
  %1966 = fmul float %1965, %1964
  store float %1966, float* %4103, align 1, !tbaa !2451
  %1967 = bitcast <2 x float> %1961 to <2 x i32>
  %1968 = extractelement <2 x i32> %1967, i32 1
  store i32 %1968, i32* %4113, align 1, !tbaa !2451
  %1969 = extractelement <2 x i32> %1962, i32 0
  store i32 %1969, i32* %4114, align 1, !tbaa !2451
  %1970 = extractelement <2 x i32> %1962, i32 1
  store i32 %1970, i32* %4115, align 1, !tbaa !2451
  %1971 = load <2 x float>, <2 x float>* %4116, align 1
  %1972 = load <2 x i32>, <2 x i32>* %4117, align 1
  %1973 = load <2 x float>, <2 x float>* %4111, align 1
  %1974 = extractelement <2 x float> %1971, i32 0
  %1975 = extractelement <2 x float> %1973, i32 0
  %1976 = fadd float %1974, %1975
  store float %1976, float* %4094, align 1, !tbaa !2451
  %1977 = bitcast <2 x float> %1971 to <2 x i32>
  %1978 = extractelement <2 x i32> %1977, i32 1
  store i32 %1978, i32* %4118, align 1, !tbaa !2451
  %1979 = extractelement <2 x i32> %1972, i32 0
  store i32 %1979, i32* %4119, align 1, !tbaa !2451
  %1980 = extractelement <2 x i32> %1972, i32 1
  store i32 %1980, i32* %4120, align 1, !tbaa !2451
  %1981 = load i64, i64* %RBP, align 8
  %1982 = add i64 %1981, -32
  %1983 = add i64 %4158, 703
  store i64 %1983, i64* %PC, align 8
  %1984 = inttoptr i64 %1982 to i64*
  %1985 = load i64, i64* %1984, align 8
  store i64 %1985, i64* %RAX, align 8, !tbaa !2428
  %1986 = add i64 %1981, -44
  %1987 = add i64 %4158, 706
  store i64 %1987, i64* %PC, align 8
  %1988 = inttoptr i64 %1986 to i32*
  %1989 = load i32, i32* %1988, align 4
  %1990 = add i32 %1989, -1
  %1991 = zext i32 %1990 to i64
  store i64 %1991, i64* %RDX, align 8, !tbaa !2428
  %1992 = icmp eq i32 %1989, 0
  %1993 = zext i1 %1992 to i8
  store i8 %1993, i8* %.pre-phi, align 1, !tbaa !2432
  %1994 = and i32 %1990, 255
  %1995 = tail call i32 @llvm.ctpop.i32(i32 %1994) #9
  %1996 = trunc i32 %1995 to i8
  %1997 = and i8 %1996, 1
  %1998 = xor i8 %1997, 1
  store i8 %1998, i8* %.pre-phi42, align 1, !tbaa !2446
  %1999 = xor i32 %1990, %1989
  %2000 = lshr i32 %1999, 4
  %2001 = trunc i32 %2000 to i8
  %2002 = and i8 %2001, 1
  store i8 %2002, i8* %.pre-phi44, align 1, !tbaa !2447
  %2003 = icmp eq i32 %1990, 0
  %2004 = zext i1 %2003 to i8
  store i8 %2004, i8* %.pre-phi46, align 1, !tbaa !2448
  %2005 = lshr i32 %1990, 31
  %2006 = trunc i32 %2005 to i8
  store i8 %2006, i8* %.pre-phi48, align 1, !tbaa !2449
  %2007 = lshr i32 %1989, 31
  %2008 = xor i32 %2005, %2007
  %2009 = add nuw nsw i32 %2008, %2007
  %2010 = icmp eq i32 %2009, 2
  %2011 = zext i1 %2010 to i8
  store i8 %2011, i8* %.pre-phi50, align 1, !tbaa !2450
  %2012 = sext i32 %1990 to i64
  store i64 %2012, i64* %RCX, align 8, !tbaa !2428
  %2013 = shl nsw i64 %2012, 2
  %2014 = add i64 %1985, %2013
  %2015 = add i64 %4158, 717
  store i64 %2015, i64* %PC, align 8
  %2016 = inttoptr i64 %2014 to i32*
  %2017 = load i32, i32* %2016, align 4
  store i32 %2017, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %2018 = add i64 %1981, -40
  %2019 = add i64 %4158, 721
  store i64 %2019, i64* %PC, align 8
  %2020 = inttoptr i64 %2018 to i64*
  %2021 = load i64, i64* %2020, align 8
  store i64 %2021, i64* %RAX, align 8, !tbaa !2428
  %2022 = add i64 %1981, -24
  %2023 = add i64 %4158, 724
  store i64 %2023, i64* %PC, align 8
  %2024 = inttoptr i64 %2022 to i32*
  %2025 = load i32, i32* %2024, align 4
  %2026 = zext i32 %2025 to i64
  store i64 %2026, i64* %RDX, align 8, !tbaa !2428
  %2027 = add i64 %4158, 727
  store i64 %2027, i64* %PC, align 8
  %2028 = load i32, i32* %1988, align 4
  %2029 = add i32 %2028, -1
  %2030 = zext i32 %2029 to i64
  store i64 %2030, i64* %RSI, align 8, !tbaa !2428
  %2031 = sext i32 %2025 to i64
  %2032 = sext i32 %2029 to i64
  %2033 = mul nsw i64 %2032, %2031
  %2034 = trunc i64 %2033 to i32
  %2035 = and i64 %2033, 4294967295
  store i64 %2035, i64* %RDX, align 8, !tbaa !2428
  %2036 = shl i64 %2033, 32
  %2037 = ashr exact i64 %2036, 32
  %2038 = icmp ne i64 %2037, %2033
  %2039 = zext i1 %2038 to i8
  store i8 %2039, i8* %.pre-phi, align 1, !tbaa !2432
  %2040 = and i32 %2034, 255
  %2041 = tail call i32 @llvm.ctpop.i32(i32 %2040) #9
  %2042 = trunc i32 %2041 to i8
  %2043 = and i8 %2042, 1
  %2044 = xor i8 %2043, 1
  store i8 %2044, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2045 = lshr i32 %2034, 31
  %2046 = trunc i32 %2045 to i8
  store i8 %2046, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2039, i8* %.pre-phi50, align 1, !tbaa !2450
  %2047 = load i64, i64* %RBP, align 8
  %2048 = add i64 %2047, -48
  %2049 = add i64 %4158, 736
  store i64 %2049, i64* %PC, align 8
  %2050 = trunc i64 %2033 to i32
  %2051 = inttoptr i64 %2048 to i32*
  %2052 = load i32, i32* %2051, align 4
  %2053 = add i32 %2052, %2050
  %2054 = zext i32 %2053 to i64
  store i64 %2054, i64* %RDX, align 8, !tbaa !2428
  %2055 = icmp ult i32 %2053, %2050
  %2056 = icmp ult i32 %2053, %2052
  %2057 = or i1 %2055, %2056
  %2058 = zext i1 %2057 to i8
  store i8 %2058, i8* %.pre-phi, align 1, !tbaa !2432
  %2059 = and i32 %2053, 255
  %2060 = tail call i32 @llvm.ctpop.i32(i32 %2059) #9
  %2061 = trunc i32 %2060 to i8
  %2062 = and i8 %2061, 1
  %2063 = xor i8 %2062, 1
  store i8 %2063, i8* %.pre-phi42, align 1, !tbaa !2446
  %2064 = xor i32 %2052, %2050
  %2065 = xor i32 %2064, %2053
  %2066 = lshr i32 %2065, 4
  %2067 = trunc i32 %2066 to i8
  %2068 = and i8 %2067, 1
  store i8 %2068, i8* %.pre-phi44, align 1, !tbaa !2447
  %2069 = icmp eq i32 %2053, 0
  %2070 = zext i1 %2069 to i8
  store i8 %2070, i8* %.pre-phi46, align 1, !tbaa !2448
  %2071 = lshr i32 %2053, 31
  %2072 = trunc i32 %2071 to i8
  store i8 %2072, i8* %.pre-phi48, align 1, !tbaa !2449
  %2073 = lshr i32 %2050, 31
  %2074 = lshr i32 %2052, 31
  %2075 = xor i32 %2071, %2073
  %2076 = xor i32 %2071, %2074
  %2077 = add nuw nsw i32 %2075, %2076
  %2078 = icmp eq i32 %2077, 2
  %2079 = zext i1 %2078 to i8
  store i8 %2079, i8* %.pre-phi50, align 1, !tbaa !2450
  %2080 = sext i32 %2053 to i64
  store i64 %2080, i64* %RCX, align 8, !tbaa !2428
  %2081 = load i64, i64* %RAX, align 8
  %2082 = shl nsw i64 %2080, 2
  %2083 = add i64 %2081, %2082
  %2084 = add i64 %4158, 744
  store i64 %2084, i64* %PC, align 8
  %2085 = load <2 x float>, <2 x float>* %4111, align 1
  %2086 = load <2 x i32>, <2 x i32>* %4112, align 1
  %2087 = inttoptr i64 %2083 to float*
  %2088 = load float, float* %2087, align 4
  %2089 = extractelement <2 x float> %2085, i32 0
  %2090 = fmul float %2089, %2088
  store float %2090, float* %4103, align 1, !tbaa !2451
  %2091 = bitcast <2 x float> %2085 to <2 x i32>
  %2092 = extractelement <2 x i32> %2091, i32 1
  store i32 %2092, i32* %4113, align 1, !tbaa !2451
  %2093 = extractelement <2 x i32> %2086, i32 0
  store i32 %2093, i32* %4114, align 1, !tbaa !2451
  %2094 = extractelement <2 x i32> %2086, i32 1
  store i32 %2094, i32* %4115, align 1, !tbaa !2451
  %2095 = load <2 x float>, <2 x float>* %4116, align 1
  %2096 = load <2 x i32>, <2 x i32>* %4117, align 1
  %2097 = load <2 x float>, <2 x float>* %4111, align 1
  %2098 = extractelement <2 x float> %2095, i32 0
  %2099 = extractelement <2 x float> %2097, i32 0
  %2100 = fadd float %2098, %2099
  store float %2100, float* %4094, align 1, !tbaa !2451
  %2101 = bitcast <2 x float> %2095 to <2 x i32>
  %2102 = extractelement <2 x i32> %2101, i32 1
  store i32 %2102, i32* %4118, align 1, !tbaa !2451
  %2103 = extractelement <2 x i32> %2096, i32 0
  store i32 %2103, i32* %4119, align 1, !tbaa !2451
  %2104 = extractelement <2 x i32> %2096, i32 1
  store i32 %2104, i32* %4120, align 1, !tbaa !2451
  %2105 = add i64 %2047, -32
  %2106 = add i64 %4158, 752
  store i64 %2106, i64* %PC, align 8
  %2107 = inttoptr i64 %2105 to i64*
  %2108 = load i64, i64* %2107, align 8
  store i64 %2108, i64* %RAX, align 8, !tbaa !2428
  %2109 = add i64 %2047, -44
  %2110 = add i64 %4158, 756
  store i64 %2110, i64* %PC, align 8
  %2111 = inttoptr i64 %2109 to i32*
  %2112 = load i32, i32* %2111, align 4
  %2113 = sext i32 %2112 to i64
  store i64 %2113, i64* %RCX, align 8, !tbaa !2428
  %2114 = shl nsw i64 %2113, 2
  %2115 = add i64 %2114, %2108
  %2116 = add i64 %4158, 761
  store i64 %2116, i64* %PC, align 8
  %2117 = inttoptr i64 %2115 to i32*
  %2118 = load i32, i32* %2117, align 4
  store i32 %2118, i32* %4104, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4106, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4108, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4110, align 1, !tbaa !2451
  %2119 = load i64, i64* %RBP, align 8
  %2120 = add i64 %2119, -40
  %2121 = add i64 %4158, 765
  store i64 %2121, i64* %PC, align 8
  %2122 = inttoptr i64 %2120 to i64*
  %2123 = load i64, i64* %2122, align 8
  store i64 %2123, i64* %RAX, align 8, !tbaa !2428
  %2124 = add i64 %2119, -24
  %2125 = add i64 %4158, 768
  store i64 %2125, i64* %PC, align 8
  %2126 = inttoptr i64 %2124 to i32*
  %2127 = load i32, i32* %2126, align 4
  %2128 = zext i32 %2127 to i64
  store i64 %2128, i64* %RDX, align 8, !tbaa !2428
  %2129 = add i64 %2119, -44
  %2130 = add i64 %4158, 772
  store i64 %2130, i64* %PC, align 8
  %2131 = inttoptr i64 %2129 to i32*
  %2132 = load i32, i32* %2131, align 4
  %2133 = sext i32 %2127 to i64
  %2134 = sext i32 %2132 to i64
  %2135 = mul nsw i64 %2134, %2133
  %2136 = trunc i64 %2135 to i32
  %2137 = and i64 %2135, 4294967295
  store i64 %2137, i64* %RDX, align 8, !tbaa !2428
  %2138 = shl i64 %2135, 32
  %2139 = ashr exact i64 %2138, 32
  %2140 = icmp ne i64 %2139, %2135
  %2141 = zext i1 %2140 to i8
  store i8 %2141, i8* %.pre-phi, align 1, !tbaa !2432
  %2142 = and i32 %2136, 255
  %2143 = tail call i32 @llvm.ctpop.i32(i32 %2142) #9
  %2144 = trunc i32 %2143 to i8
  %2145 = and i8 %2144, 1
  %2146 = xor i8 %2145, 1
  store i8 %2146, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2147 = lshr i32 %2136, 31
  %2148 = trunc i32 %2147 to i8
  store i8 %2148, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2141, i8* %.pre-phi50, align 1, !tbaa !2450
  %2149 = add i64 %2119, -48
  %2150 = add i64 %4158, 775
  store i64 %2150, i64* %PC, align 8
  %2151 = trunc i64 %2135 to i32
  %2152 = inttoptr i64 %2149 to i32*
  %2153 = load i32, i32* %2152, align 4
  %2154 = add i32 %2153, %2151
  %2155 = zext i32 %2154 to i64
  store i64 %2155, i64* %RDX, align 8, !tbaa !2428
  %2156 = icmp ult i32 %2154, %2151
  %2157 = icmp ult i32 %2154, %2153
  %2158 = or i1 %2156, %2157
  %2159 = zext i1 %2158 to i8
  store i8 %2159, i8* %.pre-phi, align 1, !tbaa !2432
  %2160 = and i32 %2154, 255
  %2161 = tail call i32 @llvm.ctpop.i32(i32 %2160) #9
  %2162 = trunc i32 %2161 to i8
  %2163 = and i8 %2162, 1
  %2164 = xor i8 %2163, 1
  store i8 %2164, i8* %.pre-phi42, align 1, !tbaa !2446
  %2165 = xor i32 %2153, %2151
  %2166 = xor i32 %2165, %2154
  %2167 = lshr i32 %2166, 4
  %2168 = trunc i32 %2167 to i8
  %2169 = and i8 %2168, 1
  store i8 %2169, i8* %.pre-phi44, align 1, !tbaa !2447
  %2170 = icmp eq i32 %2154, 0
  %2171 = zext i1 %2170 to i8
  store i8 %2171, i8* %.pre-phi46, align 1, !tbaa !2448
  %2172 = lshr i32 %2154, 31
  %2173 = trunc i32 %2172 to i8
  store i8 %2173, i8* %.pre-phi48, align 1, !tbaa !2449
  %2174 = lshr i32 %2151, 31
  %2175 = lshr i32 %2153, 31
  %2176 = xor i32 %2172, %2174
  %2177 = xor i32 %2172, %2175
  %2178 = add nuw nsw i32 %2176, %2177
  %2179 = icmp eq i32 %2178, 2
  %2180 = zext i1 %2179 to i8
  store i8 %2180, i8* %.pre-phi50, align 1, !tbaa !2450
  %2181 = sext i32 %2154 to i64
  store i64 %2181, i64* %RCX, align 8, !tbaa !2428
  %2182 = shl nsw i64 %2181, 2
  %2183 = add i64 %2123, %2182
  %2184 = add i64 %4158, 783
  store i64 %2184, i64* %PC, align 8
  %2185 = load <2 x float>, <2 x float>* %4111, align 1
  %2186 = load <2 x i32>, <2 x i32>* %4112, align 1
  %2187 = inttoptr i64 %2183 to float*
  %2188 = load float, float* %2187, align 4
  %2189 = extractelement <2 x float> %2185, i32 0
  %2190 = fmul float %2189, %2188
  store float %2190, float* %4103, align 1, !tbaa !2451
  %2191 = bitcast <2 x float> %2185 to <2 x i32>
  %2192 = extractelement <2 x i32> %2191, i32 1
  store i32 %2192, i32* %4113, align 1, !tbaa !2451
  %2193 = extractelement <2 x i32> %2186, i32 0
  store i32 %2193, i32* %4114, align 1, !tbaa !2451
  %2194 = extractelement <2 x i32> %2186, i32 1
  store i32 %2194, i32* %4115, align 1, !tbaa !2451
  %2195 = load <2 x float>, <2 x float>* %4116, align 1
  %2196 = load <2 x i32>, <2 x i32>* %4117, align 1
  %2197 = load <2 x float>, <2 x float>* %4111, align 1
  %2198 = extractelement <2 x float> %2195, i32 0
  %2199 = extractelement <2 x float> %2197, i32 0
  %2200 = fadd float %2198, %2199
  store float %2200, float* %4094, align 1, !tbaa !2451
  %2201 = bitcast <2 x float> %2195 to <2 x i32>
  %2202 = extractelement <2 x i32> %2201, i32 1
  store i32 %2202, i32* %4118, align 1, !tbaa !2451
  %2203 = extractelement <2 x i32> %2196, i32 0
  store i32 %2203, i32* %4119, align 1, !tbaa !2451
  %2204 = extractelement <2 x i32> %2196, i32 1
  store i32 %2204, i32* %4120, align 1, !tbaa !2451
  %2205 = load i64, i64* %RBP, align 8
  %2206 = add i64 %2205, -16
  %2207 = add i64 %4158, 791
  store i64 %2207, i64* %PC, align 8
  %2208 = inttoptr i64 %2206 to i64*
  %2209 = load i64, i64* %2208, align 8
  store i64 %2209, i64* %RAX, align 8, !tbaa !2428
  %2210 = add i64 %2205, -48
  %2211 = add i64 %4158, 795
  store i64 %2211, i64* %PC, align 8
  %2212 = inttoptr i64 %2210 to i32*
  %2213 = load i32, i32* %2212, align 4
  %2214 = sext i32 %2213 to i64
  store i64 %2214, i64* %RCX, align 8, !tbaa !2428
  %2215 = shl nsw i64 %2214, 2
  %2216 = add i64 %2215, %2209
  %2217 = add i64 %4158, 800
  store i64 %2217, i64* %PC, align 8
  %2218 = load <2 x float>, <2 x float>* %4116, align 1
  %2219 = extractelement <2 x float> %2218, i32 0
  %2220 = inttoptr i64 %2216 to float*
  store float %2219, float* %2220, align 4
  %2221 = load i64, i64* %RBP, align 8
  %2222 = add i64 %2221, -48
  %2223 = load i64, i64* %PC, align 8
  %2224 = add i64 %2223, 3
  store i64 %2224, i64* %PC, align 8
  %2225 = inttoptr i64 %2222 to i32*
  %2226 = load i32, i32* %2225, align 4
  %2227 = add i32 %2226, 1
  %2228 = zext i32 %2227 to i64
  store i64 %2228, i64* %RAX, align 8, !tbaa !2428
  %2229 = icmp eq i32 %2226, -1
  %2230 = icmp eq i32 %2227, 0
  %2231 = or i1 %2229, %2230
  %2232 = zext i1 %2231 to i8
  store i8 %2232, i8* %.pre-phi, align 1, !tbaa !2432
  %2233 = and i32 %2227, 255
  %2234 = tail call i32 @llvm.ctpop.i32(i32 %2233) #9
  %2235 = trunc i32 %2234 to i8
  %2236 = and i8 %2235, 1
  %2237 = xor i8 %2236, 1
  store i8 %2237, i8* %.pre-phi42, align 1, !tbaa !2446
  %2238 = xor i32 %2227, %2226
  %2239 = lshr i32 %2238, 4
  %2240 = trunc i32 %2239 to i8
  %2241 = and i8 %2240, 1
  store i8 %2241, i8* %.pre-phi44, align 1, !tbaa !2447
  %2242 = zext i1 %2230 to i8
  store i8 %2242, i8* %.pre-phi46, align 1, !tbaa !2448
  %2243 = lshr i32 %2227, 31
  %2244 = trunc i32 %2243 to i8
  store i8 %2244, i8* %.pre-phi48, align 1, !tbaa !2449
  %2245 = lshr i32 %2226, 31
  %2246 = xor i32 %2243, %2245
  %2247 = add nuw nsw i32 %2246, %2243
  %2248 = icmp eq i32 %2247, 2
  %2249 = zext i1 %2248 to i8
  store i8 %2249, i8* %.pre-phi50, align 1, !tbaa !2450
  %2250 = add i64 %2223, 9
  store i64 %2250, i64* %PC, align 8
  store i32 %2227, i32* %2225, align 4
  %2251 = load i64, i64* %PC, align 8
  %2252 = add i64 %2251, -821
  store i64 %2252, i64* %PC, align 8, !tbaa !2428
  br label %block_402459

block_402156:                                     ; preds = %block_40214a
  %2253 = add i64 %4160, -16
  %2254 = add i64 %4196, 4
  store i64 %2254, i64* %PC, align 8
  %2255 = inttoptr i64 %2253 to i64*
  %2256 = load i64, i64* %2255, align 8
  store i64 %2256, i64* %RAX, align 8, !tbaa !2428
  %2257 = add i64 %4196, 8
  store i64 %2257, i64* %PC, align 8
  %2258 = load i32, i32* %4163, align 4
  %2259 = sext i32 %2258 to i64
  store i64 %2259, i64* %RCX, align 8, !tbaa !2428
  %2260 = shl nsw i64 %2259, 2
  %2261 = add i64 %2260, %2256
  %2262 = add i64 %4196, 13
  store i64 %2262, i64* %PC, align 8
  %2263 = inttoptr i64 %2261 to i32*
  %2264 = load i32, i32* %2263, align 4
  store i32 %2264, i32* %3959, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3961, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3963, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3965, align 1, !tbaa !2451
  %2265 = add i64 %4160, -32
  %2266 = add i64 %4196, 17
  store i64 %2266, i64* %PC, align 8
  %2267 = inttoptr i64 %2265 to i64*
  %2268 = load i64, i64* %2267, align 8
  store i64 %2268, i64* %RAX, align 8, !tbaa !2428
  %2269 = add i64 %4160, -44
  %2270 = add i64 %4196, 20
  store i64 %2270, i64* %PC, align 8
  %2271 = inttoptr i64 %2269 to i32*
  %2272 = load i32, i32* %2271, align 4
  %2273 = add i32 %2272, -3
  %2274 = zext i32 %2273 to i64
  store i64 %2274, i64* %RDX, align 8, !tbaa !2428
  %2275 = icmp ult i32 %2272, 3
  %2276 = zext i1 %2275 to i8
  store i8 %2276, i8* %.pre-phi, align 1, !tbaa !2432
  %2277 = and i32 %2273, 255
  %2278 = tail call i32 @llvm.ctpop.i32(i32 %2277) #9
  %2279 = trunc i32 %2278 to i8
  %2280 = and i8 %2279, 1
  %2281 = xor i8 %2280, 1
  store i8 %2281, i8* %.pre-phi42, align 1, !tbaa !2446
  %2282 = xor i32 %2273, %2272
  %2283 = lshr i32 %2282, 4
  %2284 = trunc i32 %2283 to i8
  %2285 = and i8 %2284, 1
  store i8 %2285, i8* %.pre-phi44, align 1, !tbaa !2447
  %2286 = icmp eq i32 %2273, 0
  %2287 = zext i1 %2286 to i8
  store i8 %2287, i8* %.pre-phi46, align 1, !tbaa !2448
  %2288 = lshr i32 %2273, 31
  %2289 = trunc i32 %2288 to i8
  store i8 %2289, i8* %.pre-phi48, align 1, !tbaa !2449
  %2290 = lshr i32 %2272, 31
  %2291 = xor i32 %2288, %2290
  %2292 = add nuw nsw i32 %2291, %2290
  %2293 = icmp eq i32 %2292, 2
  %2294 = zext i1 %2293 to i8
  store i8 %2294, i8* %.pre-phi50, align 1, !tbaa !2450
  %2295 = sext i32 %2273 to i64
  store i64 %2295, i64* %RCX, align 8, !tbaa !2428
  %2296 = shl nsw i64 %2295, 2
  %2297 = add i64 %2268, %2296
  %2298 = add i64 %4196, 31
  store i64 %2298, i64* %PC, align 8
  %2299 = inttoptr i64 %2297 to i32*
  %2300 = load i32, i32* %2299, align 4
  store i32 %2300, i32* %3968, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3970, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3972, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3974, align 1, !tbaa !2451
  %2301 = add i64 %4160, -40
  %2302 = add i64 %4196, 35
  store i64 %2302, i64* %PC, align 8
  %2303 = inttoptr i64 %2301 to i64*
  %2304 = load i64, i64* %2303, align 8
  store i64 %2304, i64* %RAX, align 8, !tbaa !2428
  %2305 = add i64 %4160, -24
  %2306 = add i64 %4196, 38
  store i64 %2306, i64* %PC, align 8
  %2307 = inttoptr i64 %2305 to i32*
  %2308 = load i32, i32* %2307, align 4
  %2309 = zext i32 %2308 to i64
  store i64 %2309, i64* %RDX, align 8, !tbaa !2428
  %2310 = add i64 %4196, 41
  store i64 %2310, i64* %PC, align 8
  %2311 = load i32, i32* %2271, align 4
  %2312 = add i32 %2311, -3
  %2313 = zext i32 %2312 to i64
  store i64 %2313, i64* %RSI, align 8, !tbaa !2428
  %2314 = sext i32 %2308 to i64
  %2315 = sext i32 %2312 to i64
  %2316 = mul nsw i64 %2315, %2314
  %2317 = trunc i64 %2316 to i32
  %2318 = and i64 %2316, 4294967295
  store i64 %2318, i64* %RDX, align 8, !tbaa !2428
  %2319 = shl i64 %2316, 32
  %2320 = ashr exact i64 %2319, 32
  %2321 = icmp ne i64 %2320, %2316
  %2322 = zext i1 %2321 to i8
  store i8 %2322, i8* %.pre-phi, align 1, !tbaa !2432
  %2323 = and i32 %2317, 255
  %2324 = tail call i32 @llvm.ctpop.i32(i32 %2323) #9
  %2325 = trunc i32 %2324 to i8
  %2326 = and i8 %2325, 1
  %2327 = xor i8 %2326, 1
  store i8 %2327, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2328 = lshr i32 %2317, 31
  %2329 = trunc i32 %2328 to i8
  store i8 %2329, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2322, i8* %.pre-phi50, align 1, !tbaa !2450
  %2330 = load i64, i64* %RBP, align 8
  %2331 = add i64 %2330, -48
  %2332 = add i64 %4196, 50
  store i64 %2332, i64* %PC, align 8
  %2333 = trunc i64 %2316 to i32
  %2334 = inttoptr i64 %2331 to i32*
  %2335 = load i32, i32* %2334, align 4
  %2336 = add i32 %2335, %2333
  %2337 = zext i32 %2336 to i64
  store i64 %2337, i64* %RDX, align 8, !tbaa !2428
  %2338 = icmp ult i32 %2336, %2333
  %2339 = icmp ult i32 %2336, %2335
  %2340 = or i1 %2338, %2339
  %2341 = zext i1 %2340 to i8
  store i8 %2341, i8* %.pre-phi, align 1, !tbaa !2432
  %2342 = and i32 %2336, 255
  %2343 = tail call i32 @llvm.ctpop.i32(i32 %2342) #9
  %2344 = trunc i32 %2343 to i8
  %2345 = and i8 %2344, 1
  %2346 = xor i8 %2345, 1
  store i8 %2346, i8* %.pre-phi42, align 1, !tbaa !2446
  %2347 = xor i32 %2335, %2333
  %2348 = xor i32 %2347, %2336
  %2349 = lshr i32 %2348, 4
  %2350 = trunc i32 %2349 to i8
  %2351 = and i8 %2350, 1
  store i8 %2351, i8* %.pre-phi44, align 1, !tbaa !2447
  %2352 = icmp eq i32 %2336, 0
  %2353 = zext i1 %2352 to i8
  store i8 %2353, i8* %.pre-phi46, align 1, !tbaa !2448
  %2354 = lshr i32 %2336, 31
  %2355 = trunc i32 %2354 to i8
  store i8 %2355, i8* %.pre-phi48, align 1, !tbaa !2449
  %2356 = lshr i32 %2333, 31
  %2357 = lshr i32 %2335, 31
  %2358 = xor i32 %2354, %2356
  %2359 = xor i32 %2354, %2357
  %2360 = add nuw nsw i32 %2358, %2359
  %2361 = icmp eq i32 %2360, 2
  %2362 = zext i1 %2361 to i8
  store i8 %2362, i8* %.pre-phi50, align 1, !tbaa !2450
  %2363 = sext i32 %2336 to i64
  store i64 %2363, i64* %RCX, align 8, !tbaa !2428
  %2364 = load i64, i64* %RAX, align 8
  %2365 = shl nsw i64 %2363, 2
  %2366 = add i64 %2364, %2365
  %2367 = add i64 %4196, 58
  store i64 %2367, i64* %PC, align 8
  %2368 = load <2 x float>, <2 x float>* %3975, align 1
  %2369 = load <2 x i32>, <2 x i32>* %3976, align 1
  %2370 = inttoptr i64 %2366 to float*
  %2371 = load float, float* %2370, align 4
  %2372 = extractelement <2 x float> %2368, i32 0
  %2373 = fmul float %2372, %2371
  store float %2373, float* %3967, align 1, !tbaa !2451
  %2374 = bitcast <2 x float> %2368 to <2 x i32>
  %2375 = extractelement <2 x i32> %2374, i32 1
  store i32 %2375, i32* %3977, align 1, !tbaa !2451
  %2376 = extractelement <2 x i32> %2369, i32 0
  store i32 %2376, i32* %3978, align 1, !tbaa !2451
  %2377 = extractelement <2 x i32> %2369, i32 1
  store i32 %2377, i32* %3979, align 1, !tbaa !2451
  %2378 = load <2 x float>, <2 x float>* %3980, align 1
  %2379 = load <2 x i32>, <2 x i32>* %3981, align 1
  %2380 = load <2 x float>, <2 x float>* %3975, align 1
  %2381 = extractelement <2 x float> %2378, i32 0
  %2382 = extractelement <2 x float> %2380, i32 0
  %2383 = fadd float %2381, %2382
  store float %2383, float* %3958, align 1, !tbaa !2451
  %2384 = bitcast <2 x float> %2378 to <2 x i32>
  %2385 = extractelement <2 x i32> %2384, i32 1
  store i32 %2385, i32* %3982, align 1, !tbaa !2451
  %2386 = extractelement <2 x i32> %2379, i32 0
  store i32 %2386, i32* %3983, align 1, !tbaa !2451
  %2387 = extractelement <2 x i32> %2379, i32 1
  store i32 %2387, i32* %3984, align 1, !tbaa !2451
  %2388 = add i64 %2330, -32
  %2389 = add i64 %4196, 66
  store i64 %2389, i64* %PC, align 8
  %2390 = inttoptr i64 %2388 to i64*
  %2391 = load i64, i64* %2390, align 8
  store i64 %2391, i64* %RAX, align 8, !tbaa !2428
  %2392 = add i64 %2330, -44
  %2393 = add i64 %4196, 69
  store i64 %2393, i64* %PC, align 8
  %2394 = inttoptr i64 %2392 to i32*
  %2395 = load i32, i32* %2394, align 4
  %2396 = add i32 %2395, -2
  %2397 = zext i32 %2396 to i64
  store i64 %2397, i64* %RDX, align 8, !tbaa !2428
  %2398 = icmp ult i32 %2395, 2
  %2399 = zext i1 %2398 to i8
  store i8 %2399, i8* %.pre-phi, align 1, !tbaa !2432
  %2400 = and i32 %2396, 255
  %2401 = tail call i32 @llvm.ctpop.i32(i32 %2400) #9
  %2402 = trunc i32 %2401 to i8
  %2403 = and i8 %2402, 1
  %2404 = xor i8 %2403, 1
  store i8 %2404, i8* %.pre-phi42, align 1, !tbaa !2446
  %2405 = xor i32 %2396, %2395
  %2406 = lshr i32 %2405, 4
  %2407 = trunc i32 %2406 to i8
  %2408 = and i8 %2407, 1
  store i8 %2408, i8* %.pre-phi44, align 1, !tbaa !2447
  %2409 = icmp eq i32 %2396, 0
  %2410 = zext i1 %2409 to i8
  store i8 %2410, i8* %.pre-phi46, align 1, !tbaa !2448
  %2411 = lshr i32 %2396, 31
  %2412 = trunc i32 %2411 to i8
  store i8 %2412, i8* %.pre-phi48, align 1, !tbaa !2449
  %2413 = lshr i32 %2395, 31
  %2414 = xor i32 %2411, %2413
  %2415 = add nuw nsw i32 %2414, %2413
  %2416 = icmp eq i32 %2415, 2
  %2417 = zext i1 %2416 to i8
  store i8 %2417, i8* %.pre-phi50, align 1, !tbaa !2450
  %2418 = sext i32 %2396 to i64
  store i64 %2418, i64* %RCX, align 8, !tbaa !2428
  %2419 = shl nsw i64 %2418, 2
  %2420 = add i64 %2391, %2419
  %2421 = add i64 %4196, 80
  store i64 %2421, i64* %PC, align 8
  %2422 = inttoptr i64 %2420 to i32*
  %2423 = load i32, i32* %2422, align 4
  store i32 %2423, i32* %3968, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3970, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3972, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3974, align 1, !tbaa !2451
  %2424 = load i64, i64* %RBP, align 8
  %2425 = add i64 %2424, -40
  %2426 = add i64 %4196, 84
  store i64 %2426, i64* %PC, align 8
  %2427 = inttoptr i64 %2425 to i64*
  %2428 = load i64, i64* %2427, align 8
  store i64 %2428, i64* %RAX, align 8, !tbaa !2428
  %2429 = add i64 %2424, -24
  %2430 = add i64 %4196, 87
  store i64 %2430, i64* %PC, align 8
  %2431 = inttoptr i64 %2429 to i32*
  %2432 = load i32, i32* %2431, align 4
  %2433 = zext i32 %2432 to i64
  store i64 %2433, i64* %RDX, align 8, !tbaa !2428
  %2434 = add i64 %2424, -44
  %2435 = add i64 %4196, 90
  store i64 %2435, i64* %PC, align 8
  %2436 = inttoptr i64 %2434 to i32*
  %2437 = load i32, i32* %2436, align 4
  %2438 = add i32 %2437, -2
  %2439 = zext i32 %2438 to i64
  store i64 %2439, i64* %RSI, align 8, !tbaa !2428
  %2440 = sext i32 %2432 to i64
  %2441 = sext i32 %2438 to i64
  %2442 = mul nsw i64 %2441, %2440
  %2443 = trunc i64 %2442 to i32
  %2444 = and i64 %2442, 4294967295
  store i64 %2444, i64* %RDX, align 8, !tbaa !2428
  %2445 = shl i64 %2442, 32
  %2446 = ashr exact i64 %2445, 32
  %2447 = icmp ne i64 %2446, %2442
  %2448 = zext i1 %2447 to i8
  store i8 %2448, i8* %.pre-phi, align 1, !tbaa !2432
  %2449 = and i32 %2443, 255
  %2450 = tail call i32 @llvm.ctpop.i32(i32 %2449) #9
  %2451 = trunc i32 %2450 to i8
  %2452 = and i8 %2451, 1
  %2453 = xor i8 %2452, 1
  store i8 %2453, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2454 = lshr i32 %2443, 31
  %2455 = trunc i32 %2454 to i8
  store i8 %2455, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2448, i8* %.pre-phi50, align 1, !tbaa !2450
  %2456 = add i64 %2424, -48
  %2457 = add i64 %4196, 99
  store i64 %2457, i64* %PC, align 8
  %2458 = trunc i64 %2442 to i32
  %2459 = inttoptr i64 %2456 to i32*
  %2460 = load i32, i32* %2459, align 4
  %2461 = add i32 %2460, %2458
  %2462 = zext i32 %2461 to i64
  store i64 %2462, i64* %RDX, align 8, !tbaa !2428
  %2463 = icmp ult i32 %2461, %2458
  %2464 = icmp ult i32 %2461, %2460
  %2465 = or i1 %2463, %2464
  %2466 = zext i1 %2465 to i8
  store i8 %2466, i8* %.pre-phi, align 1, !tbaa !2432
  %2467 = and i32 %2461, 255
  %2468 = tail call i32 @llvm.ctpop.i32(i32 %2467) #9
  %2469 = trunc i32 %2468 to i8
  %2470 = and i8 %2469, 1
  %2471 = xor i8 %2470, 1
  store i8 %2471, i8* %.pre-phi42, align 1, !tbaa !2446
  %2472 = xor i32 %2460, %2458
  %2473 = xor i32 %2472, %2461
  %2474 = lshr i32 %2473, 4
  %2475 = trunc i32 %2474 to i8
  %2476 = and i8 %2475, 1
  store i8 %2476, i8* %.pre-phi44, align 1, !tbaa !2447
  %2477 = icmp eq i32 %2461, 0
  %2478 = zext i1 %2477 to i8
  store i8 %2478, i8* %.pre-phi46, align 1, !tbaa !2448
  %2479 = lshr i32 %2461, 31
  %2480 = trunc i32 %2479 to i8
  store i8 %2480, i8* %.pre-phi48, align 1, !tbaa !2449
  %2481 = lshr i32 %2458, 31
  %2482 = lshr i32 %2460, 31
  %2483 = xor i32 %2479, %2481
  %2484 = xor i32 %2479, %2482
  %2485 = add nuw nsw i32 %2483, %2484
  %2486 = icmp eq i32 %2485, 2
  %2487 = zext i1 %2486 to i8
  store i8 %2487, i8* %.pre-phi50, align 1, !tbaa !2450
  %2488 = sext i32 %2461 to i64
  store i64 %2488, i64* %RCX, align 8, !tbaa !2428
  %2489 = load i64, i64* %RAX, align 8
  %2490 = shl nsw i64 %2488, 2
  %2491 = add i64 %2489, %2490
  %2492 = add i64 %4196, 107
  store i64 %2492, i64* %PC, align 8
  %2493 = load <2 x float>, <2 x float>* %3975, align 1
  %2494 = load <2 x i32>, <2 x i32>* %3976, align 1
  %2495 = inttoptr i64 %2491 to float*
  %2496 = load float, float* %2495, align 4
  %2497 = extractelement <2 x float> %2493, i32 0
  %2498 = fmul float %2497, %2496
  store float %2498, float* %3967, align 1, !tbaa !2451
  %2499 = bitcast <2 x float> %2493 to <2 x i32>
  %2500 = extractelement <2 x i32> %2499, i32 1
  store i32 %2500, i32* %3977, align 1, !tbaa !2451
  %2501 = extractelement <2 x i32> %2494, i32 0
  store i32 %2501, i32* %3978, align 1, !tbaa !2451
  %2502 = extractelement <2 x i32> %2494, i32 1
  store i32 %2502, i32* %3979, align 1, !tbaa !2451
  %2503 = load <2 x float>, <2 x float>* %3980, align 1
  %2504 = load <2 x i32>, <2 x i32>* %3981, align 1
  %2505 = load <2 x float>, <2 x float>* %3975, align 1
  %2506 = extractelement <2 x float> %2503, i32 0
  %2507 = extractelement <2 x float> %2505, i32 0
  %2508 = fadd float %2506, %2507
  store float %2508, float* %3958, align 1, !tbaa !2451
  %2509 = bitcast <2 x float> %2503 to <2 x i32>
  %2510 = extractelement <2 x i32> %2509, i32 1
  store i32 %2510, i32* %3982, align 1, !tbaa !2451
  %2511 = extractelement <2 x i32> %2504, i32 0
  store i32 %2511, i32* %3983, align 1, !tbaa !2451
  %2512 = extractelement <2 x i32> %2504, i32 1
  store i32 %2512, i32* %3984, align 1, !tbaa !2451
  %2513 = load i64, i64* %RBP, align 8
  %2514 = add i64 %2513, -32
  %2515 = add i64 %4196, 115
  store i64 %2515, i64* %PC, align 8
  %2516 = inttoptr i64 %2514 to i64*
  %2517 = load i64, i64* %2516, align 8
  store i64 %2517, i64* %RAX, align 8, !tbaa !2428
  %2518 = add i64 %2513, -44
  %2519 = add i64 %4196, 118
  store i64 %2519, i64* %PC, align 8
  %2520 = inttoptr i64 %2518 to i32*
  %2521 = load i32, i32* %2520, align 4
  %2522 = add i32 %2521, -1
  %2523 = zext i32 %2522 to i64
  store i64 %2523, i64* %RDX, align 8, !tbaa !2428
  %2524 = icmp eq i32 %2521, 0
  %2525 = zext i1 %2524 to i8
  store i8 %2525, i8* %.pre-phi, align 1, !tbaa !2432
  %2526 = and i32 %2522, 255
  %2527 = tail call i32 @llvm.ctpop.i32(i32 %2526) #9
  %2528 = trunc i32 %2527 to i8
  %2529 = and i8 %2528, 1
  %2530 = xor i8 %2529, 1
  store i8 %2530, i8* %.pre-phi42, align 1, !tbaa !2446
  %2531 = xor i32 %2522, %2521
  %2532 = lshr i32 %2531, 4
  %2533 = trunc i32 %2532 to i8
  %2534 = and i8 %2533, 1
  store i8 %2534, i8* %.pre-phi44, align 1, !tbaa !2447
  %2535 = icmp eq i32 %2522, 0
  %2536 = zext i1 %2535 to i8
  store i8 %2536, i8* %.pre-phi46, align 1, !tbaa !2448
  %2537 = lshr i32 %2522, 31
  %2538 = trunc i32 %2537 to i8
  store i8 %2538, i8* %.pre-phi48, align 1, !tbaa !2449
  %2539 = lshr i32 %2521, 31
  %2540 = xor i32 %2537, %2539
  %2541 = add nuw nsw i32 %2540, %2539
  %2542 = icmp eq i32 %2541, 2
  %2543 = zext i1 %2542 to i8
  store i8 %2543, i8* %.pre-phi50, align 1, !tbaa !2450
  %2544 = sext i32 %2522 to i64
  store i64 %2544, i64* %RCX, align 8, !tbaa !2428
  %2545 = shl nsw i64 %2544, 2
  %2546 = add i64 %2517, %2545
  %2547 = add i64 %4196, 129
  store i64 %2547, i64* %PC, align 8
  %2548 = inttoptr i64 %2546 to i32*
  %2549 = load i32, i32* %2548, align 4
  store i32 %2549, i32* %3968, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3970, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3972, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3974, align 1, !tbaa !2451
  %2550 = add i64 %2513, -40
  %2551 = add i64 %4196, 133
  store i64 %2551, i64* %PC, align 8
  %2552 = inttoptr i64 %2550 to i64*
  %2553 = load i64, i64* %2552, align 8
  store i64 %2553, i64* %RAX, align 8, !tbaa !2428
  %2554 = add i64 %2513, -24
  %2555 = add i64 %4196, 136
  store i64 %2555, i64* %PC, align 8
  %2556 = inttoptr i64 %2554 to i32*
  %2557 = load i32, i32* %2556, align 4
  %2558 = zext i32 %2557 to i64
  store i64 %2558, i64* %RDX, align 8, !tbaa !2428
  %2559 = add i64 %4196, 139
  store i64 %2559, i64* %PC, align 8
  %2560 = load i32, i32* %2520, align 4
  %2561 = add i32 %2560, -1
  %2562 = zext i32 %2561 to i64
  store i64 %2562, i64* %RSI, align 8, !tbaa !2428
  %2563 = sext i32 %2557 to i64
  %2564 = sext i32 %2561 to i64
  %2565 = mul nsw i64 %2564, %2563
  %2566 = trunc i64 %2565 to i32
  %2567 = and i64 %2565, 4294967295
  store i64 %2567, i64* %RDX, align 8, !tbaa !2428
  %2568 = shl i64 %2565, 32
  %2569 = ashr exact i64 %2568, 32
  %2570 = icmp ne i64 %2569, %2565
  %2571 = zext i1 %2570 to i8
  store i8 %2571, i8* %.pre-phi, align 1, !tbaa !2432
  %2572 = and i32 %2566, 255
  %2573 = tail call i32 @llvm.ctpop.i32(i32 %2572) #9
  %2574 = trunc i32 %2573 to i8
  %2575 = and i8 %2574, 1
  %2576 = xor i8 %2575, 1
  store i8 %2576, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2577 = lshr i32 %2566, 31
  %2578 = trunc i32 %2577 to i8
  store i8 %2578, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2571, i8* %.pre-phi50, align 1, !tbaa !2450
  %2579 = load i64, i64* %RBP, align 8
  %2580 = add i64 %2579, -48
  %2581 = add i64 %4196, 148
  store i64 %2581, i64* %PC, align 8
  %2582 = trunc i64 %2565 to i32
  %2583 = inttoptr i64 %2580 to i32*
  %2584 = load i32, i32* %2583, align 4
  %2585 = add i32 %2584, %2582
  %2586 = zext i32 %2585 to i64
  store i64 %2586, i64* %RDX, align 8, !tbaa !2428
  %2587 = icmp ult i32 %2585, %2582
  %2588 = icmp ult i32 %2585, %2584
  %2589 = or i1 %2587, %2588
  %2590 = zext i1 %2589 to i8
  store i8 %2590, i8* %.pre-phi, align 1, !tbaa !2432
  %2591 = and i32 %2585, 255
  %2592 = tail call i32 @llvm.ctpop.i32(i32 %2591) #9
  %2593 = trunc i32 %2592 to i8
  %2594 = and i8 %2593, 1
  %2595 = xor i8 %2594, 1
  store i8 %2595, i8* %.pre-phi42, align 1, !tbaa !2446
  %2596 = xor i32 %2584, %2582
  %2597 = xor i32 %2596, %2585
  %2598 = lshr i32 %2597, 4
  %2599 = trunc i32 %2598 to i8
  %2600 = and i8 %2599, 1
  store i8 %2600, i8* %.pre-phi44, align 1, !tbaa !2447
  %2601 = icmp eq i32 %2585, 0
  %2602 = zext i1 %2601 to i8
  store i8 %2602, i8* %.pre-phi46, align 1, !tbaa !2448
  %2603 = lshr i32 %2585, 31
  %2604 = trunc i32 %2603 to i8
  store i8 %2604, i8* %.pre-phi48, align 1, !tbaa !2449
  %2605 = lshr i32 %2582, 31
  %2606 = lshr i32 %2584, 31
  %2607 = xor i32 %2603, %2605
  %2608 = xor i32 %2603, %2606
  %2609 = add nuw nsw i32 %2607, %2608
  %2610 = icmp eq i32 %2609, 2
  %2611 = zext i1 %2610 to i8
  store i8 %2611, i8* %.pre-phi50, align 1, !tbaa !2450
  %2612 = sext i32 %2585 to i64
  store i64 %2612, i64* %RCX, align 8, !tbaa !2428
  %2613 = load i64, i64* %RAX, align 8
  %2614 = shl nsw i64 %2612, 2
  %2615 = add i64 %2613, %2614
  %2616 = add i64 %4196, 156
  store i64 %2616, i64* %PC, align 8
  %2617 = load <2 x float>, <2 x float>* %3975, align 1
  %2618 = load <2 x i32>, <2 x i32>* %3976, align 1
  %2619 = inttoptr i64 %2615 to float*
  %2620 = load float, float* %2619, align 4
  %2621 = extractelement <2 x float> %2617, i32 0
  %2622 = fmul float %2621, %2620
  store float %2622, float* %3967, align 1, !tbaa !2451
  %2623 = bitcast <2 x float> %2617 to <2 x i32>
  %2624 = extractelement <2 x i32> %2623, i32 1
  store i32 %2624, i32* %3977, align 1, !tbaa !2451
  %2625 = extractelement <2 x i32> %2618, i32 0
  store i32 %2625, i32* %3978, align 1, !tbaa !2451
  %2626 = extractelement <2 x i32> %2618, i32 1
  store i32 %2626, i32* %3979, align 1, !tbaa !2451
  %2627 = load <2 x float>, <2 x float>* %3980, align 1
  %2628 = load <2 x i32>, <2 x i32>* %3981, align 1
  %2629 = load <2 x float>, <2 x float>* %3975, align 1
  %2630 = extractelement <2 x float> %2627, i32 0
  %2631 = extractelement <2 x float> %2629, i32 0
  %2632 = fadd float %2630, %2631
  store float %2632, float* %3958, align 1, !tbaa !2451
  %2633 = bitcast <2 x float> %2627 to <2 x i32>
  %2634 = extractelement <2 x i32> %2633, i32 1
  store i32 %2634, i32* %3982, align 1, !tbaa !2451
  %2635 = extractelement <2 x i32> %2628, i32 0
  store i32 %2635, i32* %3983, align 1, !tbaa !2451
  %2636 = extractelement <2 x i32> %2628, i32 1
  store i32 %2636, i32* %3984, align 1, !tbaa !2451
  %2637 = add i64 %2579, -32
  %2638 = add i64 %4196, 164
  store i64 %2638, i64* %PC, align 8
  %2639 = inttoptr i64 %2637 to i64*
  %2640 = load i64, i64* %2639, align 8
  store i64 %2640, i64* %RAX, align 8, !tbaa !2428
  %2641 = add i64 %2579, -44
  %2642 = add i64 %4196, 168
  store i64 %2642, i64* %PC, align 8
  %2643 = inttoptr i64 %2641 to i32*
  %2644 = load i32, i32* %2643, align 4
  %2645 = sext i32 %2644 to i64
  store i64 %2645, i64* %RCX, align 8, !tbaa !2428
  %2646 = shl nsw i64 %2645, 2
  %2647 = add i64 %2646, %2640
  %2648 = add i64 %4196, 173
  store i64 %2648, i64* %PC, align 8
  %2649 = inttoptr i64 %2647 to i32*
  %2650 = load i32, i32* %2649, align 4
  store i32 %2650, i32* %3968, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3970, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3972, align 1, !tbaa !2451
  store float 0.000000e+00, float* %3974, align 1, !tbaa !2451
  %2651 = load i64, i64* %RBP, align 8
  %2652 = add i64 %2651, -40
  %2653 = add i64 %4196, 177
  store i64 %2653, i64* %PC, align 8
  %2654 = inttoptr i64 %2652 to i64*
  %2655 = load i64, i64* %2654, align 8
  store i64 %2655, i64* %RAX, align 8, !tbaa !2428
  %2656 = add i64 %2651, -24
  %2657 = add i64 %4196, 180
  store i64 %2657, i64* %PC, align 8
  %2658 = inttoptr i64 %2656 to i32*
  %2659 = load i32, i32* %2658, align 4
  %2660 = zext i32 %2659 to i64
  store i64 %2660, i64* %RDX, align 8, !tbaa !2428
  %2661 = add i64 %2651, -44
  %2662 = add i64 %4196, 184
  store i64 %2662, i64* %PC, align 8
  %2663 = inttoptr i64 %2661 to i32*
  %2664 = load i32, i32* %2663, align 4
  %2665 = sext i32 %2659 to i64
  %2666 = sext i32 %2664 to i64
  %2667 = mul nsw i64 %2666, %2665
  %2668 = trunc i64 %2667 to i32
  %2669 = and i64 %2667, 4294967295
  store i64 %2669, i64* %RDX, align 8, !tbaa !2428
  %2670 = shl i64 %2667, 32
  %2671 = ashr exact i64 %2670, 32
  %2672 = icmp ne i64 %2671, %2667
  %2673 = zext i1 %2672 to i8
  store i8 %2673, i8* %.pre-phi, align 1, !tbaa !2432
  %2674 = and i32 %2668, 255
  %2675 = tail call i32 @llvm.ctpop.i32(i32 %2674) #9
  %2676 = trunc i32 %2675 to i8
  %2677 = and i8 %2676, 1
  %2678 = xor i8 %2677, 1
  store i8 %2678, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2679 = lshr i32 %2668, 31
  %2680 = trunc i32 %2679 to i8
  store i8 %2680, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2673, i8* %.pre-phi50, align 1, !tbaa !2450
  %2681 = add i64 %2651, -48
  %2682 = add i64 %4196, 187
  store i64 %2682, i64* %PC, align 8
  %2683 = trunc i64 %2667 to i32
  %2684 = inttoptr i64 %2681 to i32*
  %2685 = load i32, i32* %2684, align 4
  %2686 = add i32 %2685, %2683
  %2687 = zext i32 %2686 to i64
  store i64 %2687, i64* %RDX, align 8, !tbaa !2428
  %2688 = icmp ult i32 %2686, %2683
  %2689 = icmp ult i32 %2686, %2685
  %2690 = or i1 %2688, %2689
  %2691 = zext i1 %2690 to i8
  store i8 %2691, i8* %.pre-phi, align 1, !tbaa !2432
  %2692 = and i32 %2686, 255
  %2693 = tail call i32 @llvm.ctpop.i32(i32 %2692) #9
  %2694 = trunc i32 %2693 to i8
  %2695 = and i8 %2694, 1
  %2696 = xor i8 %2695, 1
  store i8 %2696, i8* %.pre-phi42, align 1, !tbaa !2446
  %2697 = xor i32 %2685, %2683
  %2698 = xor i32 %2697, %2686
  %2699 = lshr i32 %2698, 4
  %2700 = trunc i32 %2699 to i8
  %2701 = and i8 %2700, 1
  store i8 %2701, i8* %.pre-phi44, align 1, !tbaa !2447
  %2702 = icmp eq i32 %2686, 0
  %2703 = zext i1 %2702 to i8
  store i8 %2703, i8* %.pre-phi46, align 1, !tbaa !2448
  %2704 = lshr i32 %2686, 31
  %2705 = trunc i32 %2704 to i8
  store i8 %2705, i8* %.pre-phi48, align 1, !tbaa !2449
  %2706 = lshr i32 %2683, 31
  %2707 = lshr i32 %2685, 31
  %2708 = xor i32 %2704, %2706
  %2709 = xor i32 %2704, %2707
  %2710 = add nuw nsw i32 %2708, %2709
  %2711 = icmp eq i32 %2710, 2
  %2712 = zext i1 %2711 to i8
  store i8 %2712, i8* %.pre-phi50, align 1, !tbaa !2450
  %2713 = sext i32 %2686 to i64
  store i64 %2713, i64* %RCX, align 8, !tbaa !2428
  %2714 = shl nsw i64 %2713, 2
  %2715 = add i64 %2655, %2714
  %2716 = add i64 %4196, 195
  store i64 %2716, i64* %PC, align 8
  %2717 = load <2 x float>, <2 x float>* %3975, align 1
  %2718 = load <2 x i32>, <2 x i32>* %3976, align 1
  %2719 = inttoptr i64 %2715 to float*
  %2720 = load float, float* %2719, align 4
  %2721 = extractelement <2 x float> %2717, i32 0
  %2722 = fmul float %2721, %2720
  store float %2722, float* %3967, align 1, !tbaa !2451
  %2723 = bitcast <2 x float> %2717 to <2 x i32>
  %2724 = extractelement <2 x i32> %2723, i32 1
  store i32 %2724, i32* %3977, align 1, !tbaa !2451
  %2725 = extractelement <2 x i32> %2718, i32 0
  store i32 %2725, i32* %3978, align 1, !tbaa !2451
  %2726 = extractelement <2 x i32> %2718, i32 1
  store i32 %2726, i32* %3979, align 1, !tbaa !2451
  %2727 = load <2 x float>, <2 x float>* %3980, align 1
  %2728 = load <2 x i32>, <2 x i32>* %3981, align 1
  %2729 = load <2 x float>, <2 x float>* %3975, align 1
  %2730 = extractelement <2 x float> %2727, i32 0
  %2731 = extractelement <2 x float> %2729, i32 0
  %2732 = fadd float %2730, %2731
  store float %2732, float* %3958, align 1, !tbaa !2451
  %2733 = bitcast <2 x float> %2727 to <2 x i32>
  %2734 = extractelement <2 x i32> %2733, i32 1
  store i32 %2734, i32* %3982, align 1, !tbaa !2451
  %2735 = extractelement <2 x i32> %2728, i32 0
  store i32 %2735, i32* %3983, align 1, !tbaa !2451
  %2736 = extractelement <2 x i32> %2728, i32 1
  store i32 %2736, i32* %3984, align 1, !tbaa !2451
  %2737 = load i64, i64* %RBP, align 8
  %2738 = add i64 %2737, -16
  %2739 = add i64 %4196, 203
  store i64 %2739, i64* %PC, align 8
  %2740 = inttoptr i64 %2738 to i64*
  %2741 = load i64, i64* %2740, align 8
  store i64 %2741, i64* %RAX, align 8, !tbaa !2428
  %2742 = add i64 %2737, -48
  %2743 = add i64 %4196, 207
  store i64 %2743, i64* %PC, align 8
  %2744 = inttoptr i64 %2742 to i32*
  %2745 = load i32, i32* %2744, align 4
  %2746 = sext i32 %2745 to i64
  store i64 %2746, i64* %RCX, align 8, !tbaa !2428
  %2747 = shl nsw i64 %2746, 2
  %2748 = add i64 %2747, %2741
  %2749 = add i64 %4196, 212
  store i64 %2749, i64* %PC, align 8
  %2750 = load <2 x float>, <2 x float>* %3980, align 1
  %2751 = extractelement <2 x float> %2750, i32 0
  %2752 = inttoptr i64 %2748 to float*
  store float %2751, float* %2752, align 4
  %2753 = load i64, i64* %RBP, align 8
  %2754 = add i64 %2753, -48
  %2755 = load i64, i64* %PC, align 8
  %2756 = add i64 %2755, 3
  store i64 %2756, i64* %PC, align 8
  %2757 = inttoptr i64 %2754 to i32*
  %2758 = load i32, i32* %2757, align 4
  %2759 = add i32 %2758, 1
  %2760 = zext i32 %2759 to i64
  store i64 %2760, i64* %RAX, align 8, !tbaa !2428
  %2761 = icmp eq i32 %2758, -1
  %2762 = icmp eq i32 %2759, 0
  %2763 = or i1 %2761, %2762
  %2764 = zext i1 %2763 to i8
  store i8 %2764, i8* %.pre-phi, align 1, !tbaa !2432
  %2765 = and i32 %2759, 255
  %2766 = tail call i32 @llvm.ctpop.i32(i32 %2765) #9
  %2767 = trunc i32 %2766 to i8
  %2768 = and i8 %2767, 1
  %2769 = xor i8 %2768, 1
  store i8 %2769, i8* %.pre-phi42, align 1, !tbaa !2446
  %2770 = xor i32 %2759, %2758
  %2771 = lshr i32 %2770, 4
  %2772 = trunc i32 %2771 to i8
  %2773 = and i8 %2772, 1
  store i8 %2773, i8* %.pre-phi44, align 1, !tbaa !2447
  %2774 = zext i1 %2762 to i8
  store i8 %2774, i8* %.pre-phi46, align 1, !tbaa !2448
  %2775 = lshr i32 %2759, 31
  %2776 = trunc i32 %2775 to i8
  store i8 %2776, i8* %.pre-phi48, align 1, !tbaa !2449
  %2777 = lshr i32 %2758, 31
  %2778 = xor i32 %2775, %2777
  %2779 = add nuw nsw i32 %2778, %2775
  %2780 = icmp eq i32 %2779, 2
  %2781 = zext i1 %2780 to i8
  store i8 %2781, i8* %.pre-phi50, align 1, !tbaa !2450
  %2782 = add i64 %2755, 9
  store i64 %2782, i64* %PC, align 8
  store i32 %2759, i32* %2757, align 4
  %2783 = load i64, i64* %PC, align 8
  %2784 = add i64 %2783, -233
  store i64 %2784, i64* %PC, align 8, !tbaa !2428
  br label %block_40214a

block_402054:                                     ; preds = %block_401ff9
  %2785 = add i64 %2823, 5
  store i64 %2785, i64* %PC, align 8, !tbaa !2428
  br label %block_402059

block_401ff9:                                     ; preds = %block_402005, %block_401fe9
  %2786 = phi i64 [ %5006, %block_402005 ], [ %.pre22, %block_401fe9 ]
  %2787 = load i64, i64* %RBP, align 8
  %2788 = add i64 %2787, -48
  %2789 = add i64 %2786, 3
  store i64 %2789, i64* %PC, align 8
  %2790 = inttoptr i64 %2788 to i32*
  %2791 = load i32, i32* %2790, align 4
  %2792 = zext i32 %2791 to i64
  store i64 %2792, i64* %RAX, align 8, !tbaa !2428
  %2793 = add i64 %2787, -4
  %2794 = add i64 %2786, 6
  store i64 %2794, i64* %PC, align 8
  %2795 = inttoptr i64 %2793 to i32*
  %2796 = load i32, i32* %2795, align 4
  %2797 = sub i32 %2791, %2796
  %2798 = icmp ult i32 %2791, %2796
  %2799 = zext i1 %2798 to i8
  store i8 %2799, i8* %.pre-phi, align 1, !tbaa !2432
  %2800 = and i32 %2797, 255
  %2801 = tail call i32 @llvm.ctpop.i32(i32 %2800) #9
  %2802 = trunc i32 %2801 to i8
  %2803 = and i8 %2802, 1
  %2804 = xor i8 %2803, 1
  store i8 %2804, i8* %.pre-phi42, align 1, !tbaa !2446
  %2805 = xor i32 %2796, %2791
  %2806 = xor i32 %2805, %2797
  %2807 = lshr i32 %2806, 4
  %2808 = trunc i32 %2807 to i8
  %2809 = and i8 %2808, 1
  store i8 %2809, i8* %.pre-phi44, align 1, !tbaa !2447
  %2810 = icmp eq i32 %2797, 0
  %2811 = zext i1 %2810 to i8
  store i8 %2811, i8* %.pre-phi46, align 1, !tbaa !2448
  %2812 = lshr i32 %2797, 31
  %2813 = trunc i32 %2812 to i8
  store i8 %2813, i8* %.pre-phi48, align 1, !tbaa !2449
  %2814 = lshr i32 %2791, 31
  %2815 = lshr i32 %2796, 31
  %2816 = xor i32 %2815, %2814
  %2817 = xor i32 %2812, %2814
  %2818 = add nuw nsw i32 %2817, %2816
  %2819 = icmp eq i32 %2818, 2
  %2820 = zext i1 %2819 to i8
  store i8 %2820, i8* %.pre-phi50, align 1, !tbaa !2450
  %2821 = icmp ne i8 %2813, 0
  %2822 = xor i1 %2821, %2819
  %.v52 = select i1 %2822, i64 12, i64 91
  %2823 = add i64 %2786, %.v52
  store i64 %2823, i64* %PC, align 8, !tbaa !2428
  br i1 %2822, label %block_402005, label %block_402054

block_40223d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_402238
  %2824 = phi i64 [ %4726, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %4160, %block_402238 ]
  %2825 = phi i64 [ %4755, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ], [ %3985, %block_402238 ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %2826 = add i64 %2824, -20
  %2827 = add i64 %2825, 8
  store i64 %2827, i64* %PC, align 8
  %2828 = inttoptr i64 %2826 to i32*
  %2829 = load i32, i32* %2828, align 4
  %2830 = zext i32 %2829 to i64
  store i64 %2830, i64* %RCX, align 8, !tbaa !2428
  %2831 = add i64 %2824, -68
  %2832 = add i64 %2825, 11
  store i64 %2832, i64* %PC, align 8
  %2833 = inttoptr i64 %2831 to i32*
  store i32 16, i32* %2833, align 4
  %2834 = load i32, i32* %ECX, align 4
  %2835 = zext i32 %2834 to i64
  %2836 = load i64, i64* %PC, align 8
  store i64 %2835, i64* %RAX, align 8, !tbaa !2428
  %2837 = sext i32 %2834 to i64
  %2838 = lshr i64 %2837, 32
  store i64 %2838, i64* %64, align 8, !tbaa !2428
  %2839 = load i64, i64* %RBP, align 8
  %2840 = add i64 %2839, -68
  %2841 = add i64 %2836, 6
  store i64 %2841, i64* %PC, align 8
  %2842 = inttoptr i64 %2840 to i32*
  %2843 = load i32, i32* %2842, align 4
  %2844 = zext i32 %2843 to i64
  store i64 %2844, i64* %RCX, align 8, !tbaa !2428
  %2845 = add i64 %2836, 8
  store i64 %2845, i64* %PC, align 8
  %2846 = sext i32 %2843 to i64
  %2847 = shl nuw i64 %2838, 32
  %2848 = or i64 %2847, %2835
  %2849 = sdiv i64 %2848, %2846
  %2850 = shl i64 %2849, 32
  %2851 = ashr exact i64 %2850, 32
  %2852 = icmp eq i64 %2849, %2851
  br i1 %2852, label %2855, label %2853

; <label>:2853:                                   ; preds = %block_40223d
  %2854 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %2845, %struct.Memory* %4722) #12
  %.pre31 = load i64, i64* %RBP, align 8
  %.pre32 = load i32, i32* %EDX, align 4
  %.pre33 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

; <label>:2855:                                   ; preds = %block_40223d
  %2856 = srem i64 %2848, %2846
  %2857 = and i64 %2849, 4294967295
  store i64 %2857, i64* %RAX, align 8, !tbaa !2428
  %2858 = and i64 %2856, 4294967295
  store i64 %2858, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi50, align 1, !tbaa !2450
  %2859 = trunc i64 %2856 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3: ; preds = %2855, %2853
  %2860 = phi i64 [ %.pre33, %2853 ], [ %2845, %2855 ]
  %2861 = phi i32 [ %.pre32, %2853 ], [ %2859, %2855 ]
  %2862 = phi i64 [ %.pre31, %2853 ], [ %2839, %2855 ]
  %2863 = phi %struct.Memory* [ %2854, %2853 ], [ %4722, %2855 ]
  %2864 = add i64 %2862, -44
  %2865 = add i64 %2860, 3
  store i64 %2865, i64* %PC, align 8
  %2866 = inttoptr i64 %2864 to i32*
  store i32 %2861, i32* %2866, align 4
  %2867 = load i64, i64* %RBP, align 8
  %2868 = add i64 %2867, -44
  %2869 = load i64, i64* %PC, align 8
  %2870 = add i64 %2869, 4
  store i64 %2870, i64* %PC, align 8
  %2871 = inttoptr i64 %2868 to i32*
  %2872 = load i32, i32* %2871, align 4
  %2873 = add i32 %2872, -8
  %2874 = icmp ult i32 %2872, 8
  %2875 = zext i1 %2874 to i8
  store i8 %2875, i8* %.pre-phi, align 1, !tbaa !2432
  %2876 = and i32 %2873, 255
  %2877 = tail call i32 @llvm.ctpop.i32(i32 %2876) #9
  %2878 = trunc i32 %2877 to i8
  %2879 = and i8 %2878, 1
  %2880 = xor i8 %2879, 1
  store i8 %2880, i8* %.pre-phi42, align 1, !tbaa !2446
  %2881 = xor i32 %2873, %2872
  %2882 = lshr i32 %2881, 4
  %2883 = trunc i32 %2882 to i8
  %2884 = and i8 %2883, 1
  store i8 %2884, i8* %.pre-phi44, align 1, !tbaa !2447
  %2885 = icmp eq i32 %2873, 0
  %2886 = zext i1 %2885 to i8
  store i8 %2886, i8* %.pre-phi46, align 1, !tbaa !2448
  %2887 = lshr i32 %2873, 31
  %2888 = trunc i32 %2887 to i8
  store i8 %2888, i8* %.pre-phi48, align 1, !tbaa !2449
  %2889 = lshr i32 %2872, 31
  %2890 = xor i32 %2887, %2889
  %2891 = add nuw nsw i32 %2890, %2889
  %2892 = icmp eq i32 %2891, 2
  %2893 = zext i1 %2892 to i8
  store i8 %2893, i8* %.pre-phi50, align 1, !tbaa !2450
  %2894 = icmp ne i8 %2888, 0
  %2895 = xor i1 %2894, %2892
  %.v57 = select i1 %2895, i64 465, i64 10
  %2896 = add i64 %2869, %.v57
  store i64 %2896, i64* %PC, align 8, !tbaa !2428
  br i1 %2895, label %block_402424, label %block_40225d

block_402279:                                     ; preds = %block_40226d
  %2897 = add i64 %132, -16
  %2898 = add i64 %168, 4
  store i64 %2898, i64* %PC, align 8
  %2899 = inttoptr i64 %2897 to i64*
  %2900 = load i64, i64* %2899, align 8
  store i64 %2900, i64* %RAX, align 8, !tbaa !2428
  %2901 = add i64 %168, 8
  store i64 %2901, i64* %PC, align 8
  %2902 = load i32, i32* %135, align 4
  %2903 = sext i32 %2902 to i64
  store i64 %2903, i64* %RCX, align 8, !tbaa !2428
  %2904 = shl nsw i64 %2903, 2
  %2905 = add i64 %2904, %2900
  %2906 = add i64 %168, 13
  store i64 %2906, i64* %PC, align 8
  %2907 = inttoptr i64 %2905 to i32*
  %2908 = load i32, i32* %2907, align 4
  store i32 %2908, i32* %4589, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4591, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4593, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4595, align 1, !tbaa !2451
  %2909 = add i64 %132, -32
  %2910 = add i64 %168, 17
  store i64 %2910, i64* %PC, align 8
  %2911 = inttoptr i64 %2909 to i64*
  %2912 = load i64, i64* %2911, align 8
  store i64 %2912, i64* %RAX, align 8, !tbaa !2428
  %2913 = add i64 %132, -44
  %2914 = add i64 %168, 20
  store i64 %2914, i64* %PC, align 8
  %2915 = inttoptr i64 %2913 to i32*
  %2916 = load i32, i32* %2915, align 4
  %2917 = add i32 %2916, -7
  %2918 = zext i32 %2917 to i64
  store i64 %2918, i64* %RDX, align 8, !tbaa !2428
  %2919 = icmp ult i32 %2916, 7
  %2920 = zext i1 %2919 to i8
  store i8 %2920, i8* %.pre-phi, align 1, !tbaa !2432
  %2921 = and i32 %2917, 255
  %2922 = tail call i32 @llvm.ctpop.i32(i32 %2921) #9
  %2923 = trunc i32 %2922 to i8
  %2924 = and i8 %2923, 1
  %2925 = xor i8 %2924, 1
  store i8 %2925, i8* %.pre-phi42, align 1, !tbaa !2446
  %2926 = xor i32 %2917, %2916
  %2927 = lshr i32 %2926, 4
  %2928 = trunc i32 %2927 to i8
  %2929 = and i8 %2928, 1
  store i8 %2929, i8* %.pre-phi44, align 1, !tbaa !2447
  %2930 = icmp eq i32 %2917, 0
  %2931 = zext i1 %2930 to i8
  store i8 %2931, i8* %.pre-phi46, align 1, !tbaa !2448
  %2932 = lshr i32 %2917, 31
  %2933 = trunc i32 %2932 to i8
  store i8 %2933, i8* %.pre-phi48, align 1, !tbaa !2449
  %2934 = lshr i32 %2916, 31
  %2935 = xor i32 %2932, %2934
  %2936 = add nuw nsw i32 %2935, %2934
  %2937 = icmp eq i32 %2936, 2
  %2938 = zext i1 %2937 to i8
  store i8 %2938, i8* %.pre-phi50, align 1, !tbaa !2450
  %2939 = sext i32 %2917 to i64
  store i64 %2939, i64* %RCX, align 8, !tbaa !2428
  %2940 = shl nsw i64 %2939, 2
  %2941 = add i64 %2912, %2940
  %2942 = add i64 %168, 31
  store i64 %2942, i64* %PC, align 8
  %2943 = inttoptr i64 %2941 to i32*
  %2944 = load i32, i32* %2943, align 4
  store i32 %2944, i32* %4598, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4600, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4602, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4604, align 1, !tbaa !2451
  %2945 = add i64 %132, -40
  %2946 = add i64 %168, 35
  store i64 %2946, i64* %PC, align 8
  %2947 = inttoptr i64 %2945 to i64*
  %2948 = load i64, i64* %2947, align 8
  store i64 %2948, i64* %RAX, align 8, !tbaa !2428
  %2949 = add i64 %132, -24
  %2950 = add i64 %168, 38
  store i64 %2950, i64* %PC, align 8
  %2951 = inttoptr i64 %2949 to i32*
  %2952 = load i32, i32* %2951, align 4
  %2953 = zext i32 %2952 to i64
  store i64 %2953, i64* %RDX, align 8, !tbaa !2428
  %2954 = add i64 %168, 41
  store i64 %2954, i64* %PC, align 8
  %2955 = load i32, i32* %2915, align 4
  %2956 = add i32 %2955, -7
  %2957 = zext i32 %2956 to i64
  store i64 %2957, i64* %RSI, align 8, !tbaa !2428
  %2958 = sext i32 %2952 to i64
  %2959 = sext i32 %2956 to i64
  %2960 = mul nsw i64 %2959, %2958
  %2961 = trunc i64 %2960 to i32
  %2962 = and i64 %2960, 4294967295
  store i64 %2962, i64* %RDX, align 8, !tbaa !2428
  %2963 = shl i64 %2960, 32
  %2964 = ashr exact i64 %2963, 32
  %2965 = icmp ne i64 %2964, %2960
  %2966 = zext i1 %2965 to i8
  store i8 %2966, i8* %.pre-phi, align 1, !tbaa !2432
  %2967 = and i32 %2961, 255
  %2968 = tail call i32 @llvm.ctpop.i32(i32 %2967) #9
  %2969 = trunc i32 %2968 to i8
  %2970 = and i8 %2969, 1
  %2971 = xor i8 %2970, 1
  store i8 %2971, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %2972 = lshr i32 %2961, 31
  %2973 = trunc i32 %2972 to i8
  store i8 %2973, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %2966, i8* %.pre-phi50, align 1, !tbaa !2450
  %2974 = load i64, i64* %RBP, align 8
  %2975 = add i64 %2974, -48
  %2976 = add i64 %168, 50
  store i64 %2976, i64* %PC, align 8
  %2977 = trunc i64 %2960 to i32
  %2978 = inttoptr i64 %2975 to i32*
  %2979 = load i32, i32* %2978, align 4
  %2980 = add i32 %2979, %2977
  %2981 = zext i32 %2980 to i64
  store i64 %2981, i64* %RDX, align 8, !tbaa !2428
  %2982 = icmp ult i32 %2980, %2977
  %2983 = icmp ult i32 %2980, %2979
  %2984 = or i1 %2982, %2983
  %2985 = zext i1 %2984 to i8
  store i8 %2985, i8* %.pre-phi, align 1, !tbaa !2432
  %2986 = and i32 %2980, 255
  %2987 = tail call i32 @llvm.ctpop.i32(i32 %2986) #9
  %2988 = trunc i32 %2987 to i8
  %2989 = and i8 %2988, 1
  %2990 = xor i8 %2989, 1
  store i8 %2990, i8* %.pre-phi42, align 1, !tbaa !2446
  %2991 = xor i32 %2979, %2977
  %2992 = xor i32 %2991, %2980
  %2993 = lshr i32 %2992, 4
  %2994 = trunc i32 %2993 to i8
  %2995 = and i8 %2994, 1
  store i8 %2995, i8* %.pre-phi44, align 1, !tbaa !2447
  %2996 = icmp eq i32 %2980, 0
  %2997 = zext i1 %2996 to i8
  store i8 %2997, i8* %.pre-phi46, align 1, !tbaa !2448
  %2998 = lshr i32 %2980, 31
  %2999 = trunc i32 %2998 to i8
  store i8 %2999, i8* %.pre-phi48, align 1, !tbaa !2449
  %3000 = lshr i32 %2977, 31
  %3001 = lshr i32 %2979, 31
  %3002 = xor i32 %2998, %3000
  %3003 = xor i32 %2998, %3001
  %3004 = add nuw nsw i32 %3002, %3003
  %3005 = icmp eq i32 %3004, 2
  %3006 = zext i1 %3005 to i8
  store i8 %3006, i8* %.pre-phi50, align 1, !tbaa !2450
  %3007 = sext i32 %2980 to i64
  store i64 %3007, i64* %RCX, align 8, !tbaa !2428
  %3008 = load i64, i64* %RAX, align 8
  %3009 = shl nsw i64 %3007, 2
  %3010 = add i64 %3008, %3009
  %3011 = add i64 %168, 58
  store i64 %3011, i64* %PC, align 8
  %3012 = load <2 x float>, <2 x float>* %4605, align 1
  %3013 = load <2 x i32>, <2 x i32>* %4606, align 1
  %3014 = inttoptr i64 %3010 to float*
  %3015 = load float, float* %3014, align 4
  %3016 = extractelement <2 x float> %3012, i32 0
  %3017 = fmul float %3016, %3015
  store float %3017, float* %4597, align 1, !tbaa !2451
  %3018 = bitcast <2 x float> %3012 to <2 x i32>
  %3019 = extractelement <2 x i32> %3018, i32 1
  store i32 %3019, i32* %4607, align 1, !tbaa !2451
  %3020 = extractelement <2 x i32> %3013, i32 0
  store i32 %3020, i32* %4608, align 1, !tbaa !2451
  %3021 = extractelement <2 x i32> %3013, i32 1
  store i32 %3021, i32* %4609, align 1, !tbaa !2451
  %3022 = load <2 x float>, <2 x float>* %4610, align 1
  %3023 = load <2 x i32>, <2 x i32>* %4611, align 1
  %3024 = load <2 x float>, <2 x float>* %4605, align 1
  %3025 = extractelement <2 x float> %3022, i32 0
  %3026 = extractelement <2 x float> %3024, i32 0
  %3027 = fadd float %3025, %3026
  store float %3027, float* %4588, align 1, !tbaa !2451
  %3028 = bitcast <2 x float> %3022 to <2 x i32>
  %3029 = extractelement <2 x i32> %3028, i32 1
  store i32 %3029, i32* %4612, align 1, !tbaa !2451
  %3030 = extractelement <2 x i32> %3023, i32 0
  store i32 %3030, i32* %4613, align 1, !tbaa !2451
  %3031 = extractelement <2 x i32> %3023, i32 1
  store i32 %3031, i32* %4614, align 1, !tbaa !2451
  %3032 = add i64 %2974, -32
  %3033 = add i64 %168, 66
  store i64 %3033, i64* %PC, align 8
  %3034 = inttoptr i64 %3032 to i64*
  %3035 = load i64, i64* %3034, align 8
  store i64 %3035, i64* %RAX, align 8, !tbaa !2428
  %3036 = add i64 %2974, -44
  %3037 = add i64 %168, 69
  store i64 %3037, i64* %PC, align 8
  %3038 = inttoptr i64 %3036 to i32*
  %3039 = load i32, i32* %3038, align 4
  %3040 = add i32 %3039, -6
  %3041 = zext i32 %3040 to i64
  store i64 %3041, i64* %RDX, align 8, !tbaa !2428
  %3042 = icmp ult i32 %3039, 6
  %3043 = zext i1 %3042 to i8
  store i8 %3043, i8* %.pre-phi, align 1, !tbaa !2432
  %3044 = and i32 %3040, 255
  %3045 = tail call i32 @llvm.ctpop.i32(i32 %3044) #9
  %3046 = trunc i32 %3045 to i8
  %3047 = and i8 %3046, 1
  %3048 = xor i8 %3047, 1
  store i8 %3048, i8* %.pre-phi42, align 1, !tbaa !2446
  %3049 = xor i32 %3040, %3039
  %3050 = lshr i32 %3049, 4
  %3051 = trunc i32 %3050 to i8
  %3052 = and i8 %3051, 1
  store i8 %3052, i8* %.pre-phi44, align 1, !tbaa !2447
  %3053 = icmp eq i32 %3040, 0
  %3054 = zext i1 %3053 to i8
  store i8 %3054, i8* %.pre-phi46, align 1, !tbaa !2448
  %3055 = lshr i32 %3040, 31
  %3056 = trunc i32 %3055 to i8
  store i8 %3056, i8* %.pre-phi48, align 1, !tbaa !2449
  %3057 = lshr i32 %3039, 31
  %3058 = xor i32 %3055, %3057
  %3059 = add nuw nsw i32 %3058, %3057
  %3060 = icmp eq i32 %3059, 2
  %3061 = zext i1 %3060 to i8
  store i8 %3061, i8* %.pre-phi50, align 1, !tbaa !2450
  %3062 = sext i32 %3040 to i64
  store i64 %3062, i64* %RCX, align 8, !tbaa !2428
  %3063 = shl nsw i64 %3062, 2
  %3064 = add i64 %3035, %3063
  %3065 = add i64 %168, 80
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3064 to i32*
  %3067 = load i32, i32* %3066, align 4
  store i32 %3067, i32* %4598, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4600, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4602, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4604, align 1, !tbaa !2451
  %3068 = load i64, i64* %RBP, align 8
  %3069 = add i64 %3068, -40
  %3070 = add i64 %168, 84
  store i64 %3070, i64* %PC, align 8
  %3071 = inttoptr i64 %3069 to i64*
  %3072 = load i64, i64* %3071, align 8
  store i64 %3072, i64* %RAX, align 8, !tbaa !2428
  %3073 = add i64 %3068, -24
  %3074 = add i64 %168, 87
  store i64 %3074, i64* %PC, align 8
  %3075 = inttoptr i64 %3073 to i32*
  %3076 = load i32, i32* %3075, align 4
  %3077 = zext i32 %3076 to i64
  store i64 %3077, i64* %RDX, align 8, !tbaa !2428
  %3078 = add i64 %3068, -44
  %3079 = add i64 %168, 90
  store i64 %3079, i64* %PC, align 8
  %3080 = inttoptr i64 %3078 to i32*
  %3081 = load i32, i32* %3080, align 4
  %3082 = add i32 %3081, -6
  %3083 = zext i32 %3082 to i64
  store i64 %3083, i64* %RSI, align 8, !tbaa !2428
  %3084 = sext i32 %3076 to i64
  %3085 = sext i32 %3082 to i64
  %3086 = mul nsw i64 %3085, %3084
  %3087 = trunc i64 %3086 to i32
  %3088 = and i64 %3086, 4294967295
  store i64 %3088, i64* %RDX, align 8, !tbaa !2428
  %3089 = shl i64 %3086, 32
  %3090 = ashr exact i64 %3089, 32
  %3091 = icmp ne i64 %3090, %3086
  %3092 = zext i1 %3091 to i8
  store i8 %3092, i8* %.pre-phi, align 1, !tbaa !2432
  %3093 = and i32 %3087, 255
  %3094 = tail call i32 @llvm.ctpop.i32(i32 %3093) #9
  %3095 = trunc i32 %3094 to i8
  %3096 = and i8 %3095, 1
  %3097 = xor i8 %3096, 1
  store i8 %3097, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3098 = lshr i32 %3087, 31
  %3099 = trunc i32 %3098 to i8
  store i8 %3099, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3092, i8* %.pre-phi50, align 1, !tbaa !2450
  %3100 = add i64 %3068, -48
  %3101 = add i64 %168, 99
  store i64 %3101, i64* %PC, align 8
  %3102 = trunc i64 %3086 to i32
  %3103 = inttoptr i64 %3100 to i32*
  %3104 = load i32, i32* %3103, align 4
  %3105 = add i32 %3104, %3102
  %3106 = zext i32 %3105 to i64
  store i64 %3106, i64* %RDX, align 8, !tbaa !2428
  %3107 = icmp ult i32 %3105, %3102
  %3108 = icmp ult i32 %3105, %3104
  %3109 = or i1 %3107, %3108
  %3110 = zext i1 %3109 to i8
  store i8 %3110, i8* %.pre-phi, align 1, !tbaa !2432
  %3111 = and i32 %3105, 255
  %3112 = tail call i32 @llvm.ctpop.i32(i32 %3111) #9
  %3113 = trunc i32 %3112 to i8
  %3114 = and i8 %3113, 1
  %3115 = xor i8 %3114, 1
  store i8 %3115, i8* %.pre-phi42, align 1, !tbaa !2446
  %3116 = xor i32 %3104, %3102
  %3117 = xor i32 %3116, %3105
  %3118 = lshr i32 %3117, 4
  %3119 = trunc i32 %3118 to i8
  %3120 = and i8 %3119, 1
  store i8 %3120, i8* %.pre-phi44, align 1, !tbaa !2447
  %3121 = icmp eq i32 %3105, 0
  %3122 = zext i1 %3121 to i8
  store i8 %3122, i8* %.pre-phi46, align 1, !tbaa !2448
  %3123 = lshr i32 %3105, 31
  %3124 = trunc i32 %3123 to i8
  store i8 %3124, i8* %.pre-phi48, align 1, !tbaa !2449
  %3125 = lshr i32 %3102, 31
  %3126 = lshr i32 %3104, 31
  %3127 = xor i32 %3123, %3125
  %3128 = xor i32 %3123, %3126
  %3129 = add nuw nsw i32 %3127, %3128
  %3130 = icmp eq i32 %3129, 2
  %3131 = zext i1 %3130 to i8
  store i8 %3131, i8* %.pre-phi50, align 1, !tbaa !2450
  %3132 = sext i32 %3105 to i64
  store i64 %3132, i64* %RCX, align 8, !tbaa !2428
  %3133 = load i64, i64* %RAX, align 8
  %3134 = shl nsw i64 %3132, 2
  %3135 = add i64 %3133, %3134
  %3136 = add i64 %168, 107
  store i64 %3136, i64* %PC, align 8
  %3137 = load <2 x float>, <2 x float>* %4605, align 1
  %3138 = load <2 x i32>, <2 x i32>* %4606, align 1
  %3139 = inttoptr i64 %3135 to float*
  %3140 = load float, float* %3139, align 4
  %3141 = extractelement <2 x float> %3137, i32 0
  %3142 = fmul float %3141, %3140
  store float %3142, float* %4597, align 1, !tbaa !2451
  %3143 = bitcast <2 x float> %3137 to <2 x i32>
  %3144 = extractelement <2 x i32> %3143, i32 1
  store i32 %3144, i32* %4607, align 1, !tbaa !2451
  %3145 = extractelement <2 x i32> %3138, i32 0
  store i32 %3145, i32* %4608, align 1, !tbaa !2451
  %3146 = extractelement <2 x i32> %3138, i32 1
  store i32 %3146, i32* %4609, align 1, !tbaa !2451
  %3147 = load <2 x float>, <2 x float>* %4610, align 1
  %3148 = load <2 x i32>, <2 x i32>* %4611, align 1
  %3149 = load <2 x float>, <2 x float>* %4605, align 1
  %3150 = extractelement <2 x float> %3147, i32 0
  %3151 = extractelement <2 x float> %3149, i32 0
  %3152 = fadd float %3150, %3151
  store float %3152, float* %4588, align 1, !tbaa !2451
  %3153 = bitcast <2 x float> %3147 to <2 x i32>
  %3154 = extractelement <2 x i32> %3153, i32 1
  store i32 %3154, i32* %4612, align 1, !tbaa !2451
  %3155 = extractelement <2 x i32> %3148, i32 0
  store i32 %3155, i32* %4613, align 1, !tbaa !2451
  %3156 = extractelement <2 x i32> %3148, i32 1
  store i32 %3156, i32* %4614, align 1, !tbaa !2451
  %3157 = load i64, i64* %RBP, align 8
  %3158 = add i64 %3157, -32
  %3159 = add i64 %168, 115
  store i64 %3159, i64* %PC, align 8
  %3160 = inttoptr i64 %3158 to i64*
  %3161 = load i64, i64* %3160, align 8
  store i64 %3161, i64* %RAX, align 8, !tbaa !2428
  %3162 = add i64 %3157, -44
  %3163 = add i64 %168, 118
  store i64 %3163, i64* %PC, align 8
  %3164 = inttoptr i64 %3162 to i32*
  %3165 = load i32, i32* %3164, align 4
  %3166 = add i32 %3165, -5
  %3167 = zext i32 %3166 to i64
  store i64 %3167, i64* %RDX, align 8, !tbaa !2428
  %3168 = icmp ult i32 %3165, 5
  %3169 = zext i1 %3168 to i8
  store i8 %3169, i8* %.pre-phi, align 1, !tbaa !2432
  %3170 = and i32 %3166, 255
  %3171 = tail call i32 @llvm.ctpop.i32(i32 %3170) #9
  %3172 = trunc i32 %3171 to i8
  %3173 = and i8 %3172, 1
  %3174 = xor i8 %3173, 1
  store i8 %3174, i8* %.pre-phi42, align 1, !tbaa !2446
  %3175 = xor i32 %3166, %3165
  %3176 = lshr i32 %3175, 4
  %3177 = trunc i32 %3176 to i8
  %3178 = and i8 %3177, 1
  store i8 %3178, i8* %.pre-phi44, align 1, !tbaa !2447
  %3179 = icmp eq i32 %3166, 0
  %3180 = zext i1 %3179 to i8
  store i8 %3180, i8* %.pre-phi46, align 1, !tbaa !2448
  %3181 = lshr i32 %3166, 31
  %3182 = trunc i32 %3181 to i8
  store i8 %3182, i8* %.pre-phi48, align 1, !tbaa !2449
  %3183 = lshr i32 %3165, 31
  %3184 = xor i32 %3181, %3183
  %3185 = add nuw nsw i32 %3184, %3183
  %3186 = icmp eq i32 %3185, 2
  %3187 = zext i1 %3186 to i8
  store i8 %3187, i8* %.pre-phi50, align 1, !tbaa !2450
  %3188 = sext i32 %3166 to i64
  store i64 %3188, i64* %RCX, align 8, !tbaa !2428
  %3189 = shl nsw i64 %3188, 2
  %3190 = add i64 %3161, %3189
  %3191 = add i64 %168, 129
  store i64 %3191, i64* %PC, align 8
  %3192 = inttoptr i64 %3190 to i32*
  %3193 = load i32, i32* %3192, align 4
  store i32 %3193, i32* %4598, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4600, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4602, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4604, align 1, !tbaa !2451
  %3194 = add i64 %3157, -40
  %3195 = add i64 %168, 133
  store i64 %3195, i64* %PC, align 8
  %3196 = inttoptr i64 %3194 to i64*
  %3197 = load i64, i64* %3196, align 8
  store i64 %3197, i64* %RAX, align 8, !tbaa !2428
  %3198 = add i64 %3157, -24
  %3199 = add i64 %168, 136
  store i64 %3199, i64* %PC, align 8
  %3200 = inttoptr i64 %3198 to i32*
  %3201 = load i32, i32* %3200, align 4
  %3202 = zext i32 %3201 to i64
  store i64 %3202, i64* %RDX, align 8, !tbaa !2428
  %3203 = add i64 %168, 139
  store i64 %3203, i64* %PC, align 8
  %3204 = load i32, i32* %3164, align 4
  %3205 = add i32 %3204, -5
  %3206 = zext i32 %3205 to i64
  store i64 %3206, i64* %RSI, align 8, !tbaa !2428
  %3207 = sext i32 %3201 to i64
  %3208 = sext i32 %3205 to i64
  %3209 = mul nsw i64 %3208, %3207
  %3210 = trunc i64 %3209 to i32
  %3211 = and i64 %3209, 4294967295
  store i64 %3211, i64* %RDX, align 8, !tbaa !2428
  %3212 = shl i64 %3209, 32
  %3213 = ashr exact i64 %3212, 32
  %3214 = icmp ne i64 %3213, %3209
  %3215 = zext i1 %3214 to i8
  store i8 %3215, i8* %.pre-phi, align 1, !tbaa !2432
  %3216 = and i32 %3210, 255
  %3217 = tail call i32 @llvm.ctpop.i32(i32 %3216) #9
  %3218 = trunc i32 %3217 to i8
  %3219 = and i8 %3218, 1
  %3220 = xor i8 %3219, 1
  store i8 %3220, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3221 = lshr i32 %3210, 31
  %3222 = trunc i32 %3221 to i8
  store i8 %3222, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3215, i8* %.pre-phi50, align 1, !tbaa !2450
  %3223 = load i64, i64* %RBP, align 8
  %3224 = add i64 %3223, -48
  %3225 = add i64 %168, 148
  store i64 %3225, i64* %PC, align 8
  %3226 = trunc i64 %3209 to i32
  %3227 = inttoptr i64 %3224 to i32*
  %3228 = load i32, i32* %3227, align 4
  %3229 = add i32 %3228, %3226
  %3230 = zext i32 %3229 to i64
  store i64 %3230, i64* %RDX, align 8, !tbaa !2428
  %3231 = icmp ult i32 %3229, %3226
  %3232 = icmp ult i32 %3229, %3228
  %3233 = or i1 %3231, %3232
  %3234 = zext i1 %3233 to i8
  store i8 %3234, i8* %.pre-phi, align 1, !tbaa !2432
  %3235 = and i32 %3229, 255
  %3236 = tail call i32 @llvm.ctpop.i32(i32 %3235) #9
  %3237 = trunc i32 %3236 to i8
  %3238 = and i8 %3237, 1
  %3239 = xor i8 %3238, 1
  store i8 %3239, i8* %.pre-phi42, align 1, !tbaa !2446
  %3240 = xor i32 %3228, %3226
  %3241 = xor i32 %3240, %3229
  %3242 = lshr i32 %3241, 4
  %3243 = trunc i32 %3242 to i8
  %3244 = and i8 %3243, 1
  store i8 %3244, i8* %.pre-phi44, align 1, !tbaa !2447
  %3245 = icmp eq i32 %3229, 0
  %3246 = zext i1 %3245 to i8
  store i8 %3246, i8* %.pre-phi46, align 1, !tbaa !2448
  %3247 = lshr i32 %3229, 31
  %3248 = trunc i32 %3247 to i8
  store i8 %3248, i8* %.pre-phi48, align 1, !tbaa !2449
  %3249 = lshr i32 %3226, 31
  %3250 = lshr i32 %3228, 31
  %3251 = xor i32 %3247, %3249
  %3252 = xor i32 %3247, %3250
  %3253 = add nuw nsw i32 %3251, %3252
  %3254 = icmp eq i32 %3253, 2
  %3255 = zext i1 %3254 to i8
  store i8 %3255, i8* %.pre-phi50, align 1, !tbaa !2450
  %3256 = sext i32 %3229 to i64
  store i64 %3256, i64* %RCX, align 8, !tbaa !2428
  %3257 = load i64, i64* %RAX, align 8
  %3258 = shl nsw i64 %3256, 2
  %3259 = add i64 %3257, %3258
  %3260 = add i64 %168, 156
  store i64 %3260, i64* %PC, align 8
  %3261 = load <2 x float>, <2 x float>* %4605, align 1
  %3262 = load <2 x i32>, <2 x i32>* %4606, align 1
  %3263 = inttoptr i64 %3259 to float*
  %3264 = load float, float* %3263, align 4
  %3265 = extractelement <2 x float> %3261, i32 0
  %3266 = fmul float %3265, %3264
  store float %3266, float* %4597, align 1, !tbaa !2451
  %3267 = bitcast <2 x float> %3261 to <2 x i32>
  %3268 = extractelement <2 x i32> %3267, i32 1
  store i32 %3268, i32* %4607, align 1, !tbaa !2451
  %3269 = extractelement <2 x i32> %3262, i32 0
  store i32 %3269, i32* %4608, align 1, !tbaa !2451
  %3270 = extractelement <2 x i32> %3262, i32 1
  store i32 %3270, i32* %4609, align 1, !tbaa !2451
  %3271 = load <2 x float>, <2 x float>* %4610, align 1
  %3272 = load <2 x i32>, <2 x i32>* %4611, align 1
  %3273 = load <2 x float>, <2 x float>* %4605, align 1
  %3274 = extractelement <2 x float> %3271, i32 0
  %3275 = extractelement <2 x float> %3273, i32 0
  %3276 = fadd float %3274, %3275
  store float %3276, float* %4588, align 1, !tbaa !2451
  %3277 = bitcast <2 x float> %3271 to <2 x i32>
  %3278 = extractelement <2 x i32> %3277, i32 1
  store i32 %3278, i32* %4612, align 1, !tbaa !2451
  %3279 = extractelement <2 x i32> %3272, i32 0
  store i32 %3279, i32* %4613, align 1, !tbaa !2451
  %3280 = extractelement <2 x i32> %3272, i32 1
  store i32 %3280, i32* %4614, align 1, !tbaa !2451
  %3281 = add i64 %3223, -32
  %3282 = add i64 %168, 164
  store i64 %3282, i64* %PC, align 8
  %3283 = inttoptr i64 %3281 to i64*
  %3284 = load i64, i64* %3283, align 8
  store i64 %3284, i64* %RAX, align 8, !tbaa !2428
  %3285 = add i64 %3223, -44
  %3286 = add i64 %168, 167
  store i64 %3286, i64* %PC, align 8
  %3287 = inttoptr i64 %3285 to i32*
  %3288 = load i32, i32* %3287, align 4
  %3289 = add i32 %3288, -4
  %3290 = zext i32 %3289 to i64
  store i64 %3290, i64* %RDX, align 8, !tbaa !2428
  %3291 = icmp ult i32 %3288, 4
  %3292 = zext i1 %3291 to i8
  store i8 %3292, i8* %.pre-phi, align 1, !tbaa !2432
  %3293 = and i32 %3289, 255
  %3294 = tail call i32 @llvm.ctpop.i32(i32 %3293) #9
  %3295 = trunc i32 %3294 to i8
  %3296 = and i8 %3295, 1
  %3297 = xor i8 %3296, 1
  store i8 %3297, i8* %.pre-phi42, align 1, !tbaa !2446
  %3298 = xor i32 %3289, %3288
  %3299 = lshr i32 %3298, 4
  %3300 = trunc i32 %3299 to i8
  %3301 = and i8 %3300, 1
  store i8 %3301, i8* %.pre-phi44, align 1, !tbaa !2447
  %3302 = icmp eq i32 %3289, 0
  %3303 = zext i1 %3302 to i8
  store i8 %3303, i8* %.pre-phi46, align 1, !tbaa !2448
  %3304 = lshr i32 %3289, 31
  %3305 = trunc i32 %3304 to i8
  store i8 %3305, i8* %.pre-phi48, align 1, !tbaa !2449
  %3306 = lshr i32 %3288, 31
  %3307 = xor i32 %3304, %3306
  %3308 = add nuw nsw i32 %3307, %3306
  %3309 = icmp eq i32 %3308, 2
  %3310 = zext i1 %3309 to i8
  store i8 %3310, i8* %.pre-phi50, align 1, !tbaa !2450
  %3311 = sext i32 %3289 to i64
  store i64 %3311, i64* %RCX, align 8, !tbaa !2428
  %3312 = shl nsw i64 %3311, 2
  %3313 = add i64 %3284, %3312
  %3314 = add i64 %168, 178
  store i64 %3314, i64* %PC, align 8
  %3315 = inttoptr i64 %3313 to i32*
  %3316 = load i32, i32* %3315, align 4
  store i32 %3316, i32* %4598, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4600, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4602, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4604, align 1, !tbaa !2451
  %3317 = load i64, i64* %RBP, align 8
  %3318 = add i64 %3317, -40
  %3319 = add i64 %168, 182
  store i64 %3319, i64* %PC, align 8
  %3320 = inttoptr i64 %3318 to i64*
  %3321 = load i64, i64* %3320, align 8
  store i64 %3321, i64* %RAX, align 8, !tbaa !2428
  %3322 = add i64 %3317, -24
  %3323 = add i64 %168, 185
  store i64 %3323, i64* %PC, align 8
  %3324 = inttoptr i64 %3322 to i32*
  %3325 = load i32, i32* %3324, align 4
  %3326 = zext i32 %3325 to i64
  store i64 %3326, i64* %RDX, align 8, !tbaa !2428
  %3327 = add i64 %3317, -44
  %3328 = add i64 %168, 188
  store i64 %3328, i64* %PC, align 8
  %3329 = inttoptr i64 %3327 to i32*
  %3330 = load i32, i32* %3329, align 4
  %3331 = add i32 %3330, -4
  %3332 = zext i32 %3331 to i64
  store i64 %3332, i64* %RSI, align 8, !tbaa !2428
  %3333 = sext i32 %3325 to i64
  %3334 = sext i32 %3331 to i64
  %3335 = mul nsw i64 %3334, %3333
  %3336 = trunc i64 %3335 to i32
  %3337 = and i64 %3335, 4294967295
  store i64 %3337, i64* %RDX, align 8, !tbaa !2428
  %3338 = shl i64 %3335, 32
  %3339 = ashr exact i64 %3338, 32
  %3340 = icmp ne i64 %3339, %3335
  %3341 = zext i1 %3340 to i8
  store i8 %3341, i8* %.pre-phi, align 1, !tbaa !2432
  %3342 = and i32 %3336, 255
  %3343 = tail call i32 @llvm.ctpop.i32(i32 %3342) #9
  %3344 = trunc i32 %3343 to i8
  %3345 = and i8 %3344, 1
  %3346 = xor i8 %3345, 1
  store i8 %3346, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3347 = lshr i32 %3336, 31
  %3348 = trunc i32 %3347 to i8
  store i8 %3348, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3341, i8* %.pre-phi50, align 1, !tbaa !2450
  %3349 = add i64 %3317, -48
  %3350 = add i64 %168, 197
  store i64 %3350, i64* %PC, align 8
  %3351 = trunc i64 %3335 to i32
  %3352 = inttoptr i64 %3349 to i32*
  %3353 = load i32, i32* %3352, align 4
  %3354 = add i32 %3353, %3351
  %3355 = zext i32 %3354 to i64
  store i64 %3355, i64* %RDX, align 8, !tbaa !2428
  %3356 = icmp ult i32 %3354, %3351
  %3357 = icmp ult i32 %3354, %3353
  %3358 = or i1 %3356, %3357
  %3359 = zext i1 %3358 to i8
  store i8 %3359, i8* %.pre-phi, align 1, !tbaa !2432
  %3360 = and i32 %3354, 255
  %3361 = tail call i32 @llvm.ctpop.i32(i32 %3360) #9
  %3362 = trunc i32 %3361 to i8
  %3363 = and i8 %3362, 1
  %3364 = xor i8 %3363, 1
  store i8 %3364, i8* %.pre-phi42, align 1, !tbaa !2446
  %3365 = xor i32 %3353, %3351
  %3366 = xor i32 %3365, %3354
  %3367 = lshr i32 %3366, 4
  %3368 = trunc i32 %3367 to i8
  %3369 = and i8 %3368, 1
  store i8 %3369, i8* %.pre-phi44, align 1, !tbaa !2447
  %3370 = icmp eq i32 %3354, 0
  %3371 = zext i1 %3370 to i8
  store i8 %3371, i8* %.pre-phi46, align 1, !tbaa !2448
  %3372 = lshr i32 %3354, 31
  %3373 = trunc i32 %3372 to i8
  store i8 %3373, i8* %.pre-phi48, align 1, !tbaa !2449
  %3374 = lshr i32 %3351, 31
  %3375 = lshr i32 %3353, 31
  %3376 = xor i32 %3372, %3374
  %3377 = xor i32 %3372, %3375
  %3378 = add nuw nsw i32 %3376, %3377
  %3379 = icmp eq i32 %3378, 2
  %3380 = zext i1 %3379 to i8
  store i8 %3380, i8* %.pre-phi50, align 1, !tbaa !2450
  %3381 = sext i32 %3354 to i64
  store i64 %3381, i64* %RCX, align 8, !tbaa !2428
  %3382 = load i64, i64* %RAX, align 8
  %3383 = shl nsw i64 %3381, 2
  %3384 = add i64 %3382, %3383
  %3385 = add i64 %168, 205
  store i64 %3385, i64* %PC, align 8
  %3386 = load <2 x float>, <2 x float>* %4605, align 1
  %3387 = load <2 x i32>, <2 x i32>* %4606, align 1
  %3388 = inttoptr i64 %3384 to float*
  %3389 = load float, float* %3388, align 4
  %3390 = extractelement <2 x float> %3386, i32 0
  %3391 = fmul float %3390, %3389
  store float %3391, float* %4597, align 1, !tbaa !2451
  %3392 = bitcast <2 x float> %3386 to <2 x i32>
  %3393 = extractelement <2 x i32> %3392, i32 1
  store i32 %3393, i32* %4607, align 1, !tbaa !2451
  %3394 = extractelement <2 x i32> %3387, i32 0
  store i32 %3394, i32* %4608, align 1, !tbaa !2451
  %3395 = extractelement <2 x i32> %3387, i32 1
  store i32 %3395, i32* %4609, align 1, !tbaa !2451
  %3396 = load <2 x float>, <2 x float>* %4610, align 1
  %3397 = load <2 x i32>, <2 x i32>* %4611, align 1
  %3398 = load <2 x float>, <2 x float>* %4605, align 1
  %3399 = extractelement <2 x float> %3396, i32 0
  %3400 = extractelement <2 x float> %3398, i32 0
  %3401 = fadd float %3399, %3400
  store float %3401, float* %4588, align 1, !tbaa !2451
  %3402 = bitcast <2 x float> %3396 to <2 x i32>
  %3403 = extractelement <2 x i32> %3402, i32 1
  store i32 %3403, i32* %4612, align 1, !tbaa !2451
  %3404 = extractelement <2 x i32> %3397, i32 0
  store i32 %3404, i32* %4613, align 1, !tbaa !2451
  %3405 = extractelement <2 x i32> %3397, i32 1
  store i32 %3405, i32* %4614, align 1, !tbaa !2451
  %3406 = load i64, i64* %RBP, align 8
  %3407 = add i64 %3406, -32
  %3408 = add i64 %168, 213
  store i64 %3408, i64* %PC, align 8
  %3409 = inttoptr i64 %3407 to i64*
  %3410 = load i64, i64* %3409, align 8
  store i64 %3410, i64* %RAX, align 8, !tbaa !2428
  %3411 = add i64 %3406, -44
  %3412 = add i64 %168, 216
  store i64 %3412, i64* %PC, align 8
  %3413 = inttoptr i64 %3411 to i32*
  %3414 = load i32, i32* %3413, align 4
  %3415 = add i32 %3414, -3
  %3416 = zext i32 %3415 to i64
  store i64 %3416, i64* %RDX, align 8, !tbaa !2428
  %3417 = icmp ult i32 %3414, 3
  %3418 = zext i1 %3417 to i8
  store i8 %3418, i8* %.pre-phi, align 1, !tbaa !2432
  %3419 = and i32 %3415, 255
  %3420 = tail call i32 @llvm.ctpop.i32(i32 %3419) #9
  %3421 = trunc i32 %3420 to i8
  %3422 = and i8 %3421, 1
  %3423 = xor i8 %3422, 1
  store i8 %3423, i8* %.pre-phi42, align 1, !tbaa !2446
  %3424 = xor i32 %3415, %3414
  %3425 = lshr i32 %3424, 4
  %3426 = trunc i32 %3425 to i8
  %3427 = and i8 %3426, 1
  store i8 %3427, i8* %.pre-phi44, align 1, !tbaa !2447
  %3428 = icmp eq i32 %3415, 0
  %3429 = zext i1 %3428 to i8
  store i8 %3429, i8* %.pre-phi46, align 1, !tbaa !2448
  %3430 = lshr i32 %3415, 31
  %3431 = trunc i32 %3430 to i8
  store i8 %3431, i8* %.pre-phi48, align 1, !tbaa !2449
  %3432 = lshr i32 %3414, 31
  %3433 = xor i32 %3430, %3432
  %3434 = add nuw nsw i32 %3433, %3432
  %3435 = icmp eq i32 %3434, 2
  %3436 = zext i1 %3435 to i8
  store i8 %3436, i8* %.pre-phi50, align 1, !tbaa !2450
  %3437 = sext i32 %3415 to i64
  store i64 %3437, i64* %RCX, align 8, !tbaa !2428
  %3438 = shl nsw i64 %3437, 2
  %3439 = add i64 %3410, %3438
  %3440 = add i64 %168, 227
  store i64 %3440, i64* %PC, align 8
  %3441 = inttoptr i64 %3439 to i32*
  %3442 = load i32, i32* %3441, align 4
  store i32 %3442, i32* %4598, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4600, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4602, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4604, align 1, !tbaa !2451
  %3443 = add i64 %3406, -40
  %3444 = add i64 %168, 231
  store i64 %3444, i64* %PC, align 8
  %3445 = inttoptr i64 %3443 to i64*
  %3446 = load i64, i64* %3445, align 8
  store i64 %3446, i64* %RAX, align 8, !tbaa !2428
  %3447 = add i64 %3406, -24
  %3448 = add i64 %168, 234
  store i64 %3448, i64* %PC, align 8
  %3449 = inttoptr i64 %3447 to i32*
  %3450 = load i32, i32* %3449, align 4
  %3451 = zext i32 %3450 to i64
  store i64 %3451, i64* %RDX, align 8, !tbaa !2428
  %3452 = add i64 %168, 237
  store i64 %3452, i64* %PC, align 8
  %3453 = load i32, i32* %3413, align 4
  %3454 = add i32 %3453, -3
  %3455 = zext i32 %3454 to i64
  store i64 %3455, i64* %RSI, align 8, !tbaa !2428
  %3456 = sext i32 %3450 to i64
  %3457 = sext i32 %3454 to i64
  %3458 = mul nsw i64 %3457, %3456
  %3459 = trunc i64 %3458 to i32
  %3460 = and i64 %3458, 4294967295
  store i64 %3460, i64* %RDX, align 8, !tbaa !2428
  %3461 = shl i64 %3458, 32
  %3462 = ashr exact i64 %3461, 32
  %3463 = icmp ne i64 %3462, %3458
  %3464 = zext i1 %3463 to i8
  store i8 %3464, i8* %.pre-phi, align 1, !tbaa !2432
  %3465 = and i32 %3459, 255
  %3466 = tail call i32 @llvm.ctpop.i32(i32 %3465) #9
  %3467 = trunc i32 %3466 to i8
  %3468 = and i8 %3467, 1
  %3469 = xor i8 %3468, 1
  store i8 %3469, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3470 = lshr i32 %3459, 31
  %3471 = trunc i32 %3470 to i8
  store i8 %3471, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3464, i8* %.pre-phi50, align 1, !tbaa !2450
  %3472 = load i64, i64* %RBP, align 8
  %3473 = add i64 %3472, -48
  %3474 = add i64 %168, 246
  store i64 %3474, i64* %PC, align 8
  %3475 = trunc i64 %3458 to i32
  %3476 = inttoptr i64 %3473 to i32*
  %3477 = load i32, i32* %3476, align 4
  %3478 = add i32 %3477, %3475
  %3479 = zext i32 %3478 to i64
  store i64 %3479, i64* %RDX, align 8, !tbaa !2428
  %3480 = icmp ult i32 %3478, %3475
  %3481 = icmp ult i32 %3478, %3477
  %3482 = or i1 %3480, %3481
  %3483 = zext i1 %3482 to i8
  store i8 %3483, i8* %.pre-phi, align 1, !tbaa !2432
  %3484 = and i32 %3478, 255
  %3485 = tail call i32 @llvm.ctpop.i32(i32 %3484) #9
  %3486 = trunc i32 %3485 to i8
  %3487 = and i8 %3486, 1
  %3488 = xor i8 %3487, 1
  store i8 %3488, i8* %.pre-phi42, align 1, !tbaa !2446
  %3489 = xor i32 %3477, %3475
  %3490 = xor i32 %3489, %3478
  %3491 = lshr i32 %3490, 4
  %3492 = trunc i32 %3491 to i8
  %3493 = and i8 %3492, 1
  store i8 %3493, i8* %.pre-phi44, align 1, !tbaa !2447
  %3494 = icmp eq i32 %3478, 0
  %3495 = zext i1 %3494 to i8
  store i8 %3495, i8* %.pre-phi46, align 1, !tbaa !2448
  %3496 = lshr i32 %3478, 31
  %3497 = trunc i32 %3496 to i8
  store i8 %3497, i8* %.pre-phi48, align 1, !tbaa !2449
  %3498 = lshr i32 %3475, 31
  %3499 = lshr i32 %3477, 31
  %3500 = xor i32 %3496, %3498
  %3501 = xor i32 %3496, %3499
  %3502 = add nuw nsw i32 %3500, %3501
  %3503 = icmp eq i32 %3502, 2
  %3504 = zext i1 %3503 to i8
  store i8 %3504, i8* %.pre-phi50, align 1, !tbaa !2450
  %3505 = sext i32 %3478 to i64
  store i64 %3505, i64* %RCX, align 8, !tbaa !2428
  %3506 = load i64, i64* %RAX, align 8
  %3507 = shl nsw i64 %3505, 2
  %3508 = add i64 %3506, %3507
  %3509 = add i64 %168, 254
  store i64 %3509, i64* %PC, align 8
  %3510 = load <2 x float>, <2 x float>* %4605, align 1
  %3511 = load <2 x i32>, <2 x i32>* %4606, align 1
  %3512 = inttoptr i64 %3508 to float*
  %3513 = load float, float* %3512, align 4
  %3514 = extractelement <2 x float> %3510, i32 0
  %3515 = fmul float %3514, %3513
  store float %3515, float* %4597, align 1, !tbaa !2451
  %3516 = bitcast <2 x float> %3510 to <2 x i32>
  %3517 = extractelement <2 x i32> %3516, i32 1
  store i32 %3517, i32* %4607, align 1, !tbaa !2451
  %3518 = extractelement <2 x i32> %3511, i32 0
  store i32 %3518, i32* %4608, align 1, !tbaa !2451
  %3519 = extractelement <2 x i32> %3511, i32 1
  store i32 %3519, i32* %4609, align 1, !tbaa !2451
  %3520 = load <2 x float>, <2 x float>* %4610, align 1
  %3521 = load <2 x i32>, <2 x i32>* %4611, align 1
  %3522 = load <2 x float>, <2 x float>* %4605, align 1
  %3523 = extractelement <2 x float> %3520, i32 0
  %3524 = extractelement <2 x float> %3522, i32 0
  %3525 = fadd float %3523, %3524
  store float %3525, float* %4588, align 1, !tbaa !2451
  %3526 = bitcast <2 x float> %3520 to <2 x i32>
  %3527 = extractelement <2 x i32> %3526, i32 1
  store i32 %3527, i32* %4612, align 1, !tbaa !2451
  %3528 = extractelement <2 x i32> %3521, i32 0
  store i32 %3528, i32* %4613, align 1, !tbaa !2451
  %3529 = extractelement <2 x i32> %3521, i32 1
  store i32 %3529, i32* %4614, align 1, !tbaa !2451
  %3530 = add i64 %3472, -32
  %3531 = add i64 %168, 262
  store i64 %3531, i64* %PC, align 8
  %3532 = inttoptr i64 %3530 to i64*
  %3533 = load i64, i64* %3532, align 8
  store i64 %3533, i64* %RAX, align 8, !tbaa !2428
  %3534 = add i64 %3472, -44
  %3535 = add i64 %168, 265
  store i64 %3535, i64* %PC, align 8
  %3536 = inttoptr i64 %3534 to i32*
  %3537 = load i32, i32* %3536, align 4
  %3538 = add i32 %3537, -2
  %3539 = zext i32 %3538 to i64
  store i64 %3539, i64* %RDX, align 8, !tbaa !2428
  %3540 = icmp ult i32 %3537, 2
  %3541 = zext i1 %3540 to i8
  store i8 %3541, i8* %.pre-phi, align 1, !tbaa !2432
  %3542 = and i32 %3538, 255
  %3543 = tail call i32 @llvm.ctpop.i32(i32 %3542) #9
  %3544 = trunc i32 %3543 to i8
  %3545 = and i8 %3544, 1
  %3546 = xor i8 %3545, 1
  store i8 %3546, i8* %.pre-phi42, align 1, !tbaa !2446
  %3547 = xor i32 %3538, %3537
  %3548 = lshr i32 %3547, 4
  %3549 = trunc i32 %3548 to i8
  %3550 = and i8 %3549, 1
  store i8 %3550, i8* %.pre-phi44, align 1, !tbaa !2447
  %3551 = icmp eq i32 %3538, 0
  %3552 = zext i1 %3551 to i8
  store i8 %3552, i8* %.pre-phi46, align 1, !tbaa !2448
  %3553 = lshr i32 %3538, 31
  %3554 = trunc i32 %3553 to i8
  store i8 %3554, i8* %.pre-phi48, align 1, !tbaa !2449
  %3555 = lshr i32 %3537, 31
  %3556 = xor i32 %3553, %3555
  %3557 = add nuw nsw i32 %3556, %3555
  %3558 = icmp eq i32 %3557, 2
  %3559 = zext i1 %3558 to i8
  store i8 %3559, i8* %.pre-phi50, align 1, !tbaa !2450
  %3560 = sext i32 %3538 to i64
  store i64 %3560, i64* %RCX, align 8, !tbaa !2428
  %3561 = shl nsw i64 %3560, 2
  %3562 = add i64 %3533, %3561
  %3563 = add i64 %168, 276
  store i64 %3563, i64* %PC, align 8
  %3564 = inttoptr i64 %3562 to i32*
  %3565 = load i32, i32* %3564, align 4
  store i32 %3565, i32* %4598, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4600, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4602, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4604, align 1, !tbaa !2451
  %3566 = load i64, i64* %RBP, align 8
  %3567 = add i64 %3566, -40
  %3568 = add i64 %168, 280
  store i64 %3568, i64* %PC, align 8
  %3569 = inttoptr i64 %3567 to i64*
  %3570 = load i64, i64* %3569, align 8
  store i64 %3570, i64* %RAX, align 8, !tbaa !2428
  %3571 = add i64 %3566, -24
  %3572 = add i64 %168, 283
  store i64 %3572, i64* %PC, align 8
  %3573 = inttoptr i64 %3571 to i32*
  %3574 = load i32, i32* %3573, align 4
  %3575 = zext i32 %3574 to i64
  store i64 %3575, i64* %RDX, align 8, !tbaa !2428
  %3576 = add i64 %3566, -44
  %3577 = add i64 %168, 286
  store i64 %3577, i64* %PC, align 8
  %3578 = inttoptr i64 %3576 to i32*
  %3579 = load i32, i32* %3578, align 4
  %3580 = add i32 %3579, -2
  %3581 = zext i32 %3580 to i64
  store i64 %3581, i64* %RSI, align 8, !tbaa !2428
  %3582 = sext i32 %3574 to i64
  %3583 = sext i32 %3580 to i64
  %3584 = mul nsw i64 %3583, %3582
  %3585 = trunc i64 %3584 to i32
  %3586 = and i64 %3584, 4294967295
  store i64 %3586, i64* %RDX, align 8, !tbaa !2428
  %3587 = shl i64 %3584, 32
  %3588 = ashr exact i64 %3587, 32
  %3589 = icmp ne i64 %3588, %3584
  %3590 = zext i1 %3589 to i8
  store i8 %3590, i8* %.pre-phi, align 1, !tbaa !2432
  %3591 = and i32 %3585, 255
  %3592 = tail call i32 @llvm.ctpop.i32(i32 %3591) #9
  %3593 = trunc i32 %3592 to i8
  %3594 = and i8 %3593, 1
  %3595 = xor i8 %3594, 1
  store i8 %3595, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3596 = lshr i32 %3585, 31
  %3597 = trunc i32 %3596 to i8
  store i8 %3597, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3590, i8* %.pre-phi50, align 1, !tbaa !2450
  %3598 = add i64 %3566, -48
  %3599 = add i64 %168, 295
  store i64 %3599, i64* %PC, align 8
  %3600 = trunc i64 %3584 to i32
  %3601 = inttoptr i64 %3598 to i32*
  %3602 = load i32, i32* %3601, align 4
  %3603 = add i32 %3602, %3600
  %3604 = zext i32 %3603 to i64
  store i64 %3604, i64* %RDX, align 8, !tbaa !2428
  %3605 = icmp ult i32 %3603, %3600
  %3606 = icmp ult i32 %3603, %3602
  %3607 = or i1 %3605, %3606
  %3608 = zext i1 %3607 to i8
  store i8 %3608, i8* %.pre-phi, align 1, !tbaa !2432
  %3609 = and i32 %3603, 255
  %3610 = tail call i32 @llvm.ctpop.i32(i32 %3609) #9
  %3611 = trunc i32 %3610 to i8
  %3612 = and i8 %3611, 1
  %3613 = xor i8 %3612, 1
  store i8 %3613, i8* %.pre-phi42, align 1, !tbaa !2446
  %3614 = xor i32 %3602, %3600
  %3615 = xor i32 %3614, %3603
  %3616 = lshr i32 %3615, 4
  %3617 = trunc i32 %3616 to i8
  %3618 = and i8 %3617, 1
  store i8 %3618, i8* %.pre-phi44, align 1, !tbaa !2447
  %3619 = icmp eq i32 %3603, 0
  %3620 = zext i1 %3619 to i8
  store i8 %3620, i8* %.pre-phi46, align 1, !tbaa !2448
  %3621 = lshr i32 %3603, 31
  %3622 = trunc i32 %3621 to i8
  store i8 %3622, i8* %.pre-phi48, align 1, !tbaa !2449
  %3623 = lshr i32 %3600, 31
  %3624 = lshr i32 %3602, 31
  %3625 = xor i32 %3621, %3623
  %3626 = xor i32 %3621, %3624
  %3627 = add nuw nsw i32 %3625, %3626
  %3628 = icmp eq i32 %3627, 2
  %3629 = zext i1 %3628 to i8
  store i8 %3629, i8* %.pre-phi50, align 1, !tbaa !2450
  %3630 = sext i32 %3603 to i64
  store i64 %3630, i64* %RCX, align 8, !tbaa !2428
  %3631 = load i64, i64* %RAX, align 8
  %3632 = shl nsw i64 %3630, 2
  %3633 = add i64 %3631, %3632
  %3634 = add i64 %168, 303
  store i64 %3634, i64* %PC, align 8
  %3635 = load <2 x float>, <2 x float>* %4605, align 1
  %3636 = load <2 x i32>, <2 x i32>* %4606, align 1
  %3637 = inttoptr i64 %3633 to float*
  %3638 = load float, float* %3637, align 4
  %3639 = extractelement <2 x float> %3635, i32 0
  %3640 = fmul float %3639, %3638
  store float %3640, float* %4597, align 1, !tbaa !2451
  %3641 = bitcast <2 x float> %3635 to <2 x i32>
  %3642 = extractelement <2 x i32> %3641, i32 1
  store i32 %3642, i32* %4607, align 1, !tbaa !2451
  %3643 = extractelement <2 x i32> %3636, i32 0
  store i32 %3643, i32* %4608, align 1, !tbaa !2451
  %3644 = extractelement <2 x i32> %3636, i32 1
  store i32 %3644, i32* %4609, align 1, !tbaa !2451
  %3645 = load <2 x float>, <2 x float>* %4610, align 1
  %3646 = load <2 x i32>, <2 x i32>* %4611, align 1
  %3647 = load <2 x float>, <2 x float>* %4605, align 1
  %3648 = extractelement <2 x float> %3645, i32 0
  %3649 = extractelement <2 x float> %3647, i32 0
  %3650 = fadd float %3648, %3649
  store float %3650, float* %4588, align 1, !tbaa !2451
  %3651 = bitcast <2 x float> %3645 to <2 x i32>
  %3652 = extractelement <2 x i32> %3651, i32 1
  store i32 %3652, i32* %4612, align 1, !tbaa !2451
  %3653 = extractelement <2 x i32> %3646, i32 0
  store i32 %3653, i32* %4613, align 1, !tbaa !2451
  %3654 = extractelement <2 x i32> %3646, i32 1
  store i32 %3654, i32* %4614, align 1, !tbaa !2451
  %3655 = load i64, i64* %RBP, align 8
  %3656 = add i64 %3655, -32
  %3657 = add i64 %168, 311
  store i64 %3657, i64* %PC, align 8
  %3658 = inttoptr i64 %3656 to i64*
  %3659 = load i64, i64* %3658, align 8
  store i64 %3659, i64* %RAX, align 8, !tbaa !2428
  %3660 = add i64 %3655, -44
  %3661 = add i64 %168, 314
  store i64 %3661, i64* %PC, align 8
  %3662 = inttoptr i64 %3660 to i32*
  %3663 = load i32, i32* %3662, align 4
  %3664 = add i32 %3663, -1
  %3665 = zext i32 %3664 to i64
  store i64 %3665, i64* %RDX, align 8, !tbaa !2428
  %3666 = icmp eq i32 %3663, 0
  %3667 = zext i1 %3666 to i8
  store i8 %3667, i8* %.pre-phi, align 1, !tbaa !2432
  %3668 = and i32 %3664, 255
  %3669 = tail call i32 @llvm.ctpop.i32(i32 %3668) #9
  %3670 = trunc i32 %3669 to i8
  %3671 = and i8 %3670, 1
  %3672 = xor i8 %3671, 1
  store i8 %3672, i8* %.pre-phi42, align 1, !tbaa !2446
  %3673 = xor i32 %3664, %3663
  %3674 = lshr i32 %3673, 4
  %3675 = trunc i32 %3674 to i8
  %3676 = and i8 %3675, 1
  store i8 %3676, i8* %.pre-phi44, align 1, !tbaa !2447
  %3677 = icmp eq i32 %3664, 0
  %3678 = zext i1 %3677 to i8
  store i8 %3678, i8* %.pre-phi46, align 1, !tbaa !2448
  %3679 = lshr i32 %3664, 31
  %3680 = trunc i32 %3679 to i8
  store i8 %3680, i8* %.pre-phi48, align 1, !tbaa !2449
  %3681 = lshr i32 %3663, 31
  %3682 = xor i32 %3679, %3681
  %3683 = add nuw nsw i32 %3682, %3681
  %3684 = icmp eq i32 %3683, 2
  %3685 = zext i1 %3684 to i8
  store i8 %3685, i8* %.pre-phi50, align 1, !tbaa !2450
  %3686 = sext i32 %3664 to i64
  store i64 %3686, i64* %RCX, align 8, !tbaa !2428
  %3687 = shl nsw i64 %3686, 2
  %3688 = add i64 %3659, %3687
  %3689 = add i64 %168, 325
  store i64 %3689, i64* %PC, align 8
  %3690 = inttoptr i64 %3688 to i32*
  %3691 = load i32, i32* %3690, align 4
  store i32 %3691, i32* %4598, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4600, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4602, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4604, align 1, !tbaa !2451
  %3692 = add i64 %3655, -40
  %3693 = add i64 %168, 329
  store i64 %3693, i64* %PC, align 8
  %3694 = inttoptr i64 %3692 to i64*
  %3695 = load i64, i64* %3694, align 8
  store i64 %3695, i64* %RAX, align 8, !tbaa !2428
  %3696 = add i64 %3655, -24
  %3697 = add i64 %168, 332
  store i64 %3697, i64* %PC, align 8
  %3698 = inttoptr i64 %3696 to i32*
  %3699 = load i32, i32* %3698, align 4
  %3700 = zext i32 %3699 to i64
  store i64 %3700, i64* %RDX, align 8, !tbaa !2428
  %3701 = add i64 %168, 335
  store i64 %3701, i64* %PC, align 8
  %3702 = load i32, i32* %3662, align 4
  %3703 = add i32 %3702, -1
  %3704 = zext i32 %3703 to i64
  store i64 %3704, i64* %RSI, align 8, !tbaa !2428
  %3705 = sext i32 %3699 to i64
  %3706 = sext i32 %3703 to i64
  %3707 = mul nsw i64 %3706, %3705
  %3708 = trunc i64 %3707 to i32
  %3709 = and i64 %3707, 4294967295
  store i64 %3709, i64* %RDX, align 8, !tbaa !2428
  %3710 = shl i64 %3707, 32
  %3711 = ashr exact i64 %3710, 32
  %3712 = icmp ne i64 %3711, %3707
  %3713 = zext i1 %3712 to i8
  store i8 %3713, i8* %.pre-phi, align 1, !tbaa !2432
  %3714 = and i32 %3708, 255
  %3715 = tail call i32 @llvm.ctpop.i32(i32 %3714) #9
  %3716 = trunc i32 %3715 to i8
  %3717 = and i8 %3716, 1
  %3718 = xor i8 %3717, 1
  store i8 %3718, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3719 = lshr i32 %3708, 31
  %3720 = trunc i32 %3719 to i8
  store i8 %3720, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3713, i8* %.pre-phi50, align 1, !tbaa !2450
  %3721 = load i64, i64* %RBP, align 8
  %3722 = add i64 %3721, -48
  %3723 = add i64 %168, 344
  store i64 %3723, i64* %PC, align 8
  %3724 = trunc i64 %3707 to i32
  %3725 = inttoptr i64 %3722 to i32*
  %3726 = load i32, i32* %3725, align 4
  %3727 = add i32 %3726, %3724
  %3728 = zext i32 %3727 to i64
  store i64 %3728, i64* %RDX, align 8, !tbaa !2428
  %3729 = icmp ult i32 %3727, %3724
  %3730 = icmp ult i32 %3727, %3726
  %3731 = or i1 %3729, %3730
  %3732 = zext i1 %3731 to i8
  store i8 %3732, i8* %.pre-phi, align 1, !tbaa !2432
  %3733 = and i32 %3727, 255
  %3734 = tail call i32 @llvm.ctpop.i32(i32 %3733) #9
  %3735 = trunc i32 %3734 to i8
  %3736 = and i8 %3735, 1
  %3737 = xor i8 %3736, 1
  store i8 %3737, i8* %.pre-phi42, align 1, !tbaa !2446
  %3738 = xor i32 %3726, %3724
  %3739 = xor i32 %3738, %3727
  %3740 = lshr i32 %3739, 4
  %3741 = trunc i32 %3740 to i8
  %3742 = and i8 %3741, 1
  store i8 %3742, i8* %.pre-phi44, align 1, !tbaa !2447
  %3743 = icmp eq i32 %3727, 0
  %3744 = zext i1 %3743 to i8
  store i8 %3744, i8* %.pre-phi46, align 1, !tbaa !2448
  %3745 = lshr i32 %3727, 31
  %3746 = trunc i32 %3745 to i8
  store i8 %3746, i8* %.pre-phi48, align 1, !tbaa !2449
  %3747 = lshr i32 %3724, 31
  %3748 = lshr i32 %3726, 31
  %3749 = xor i32 %3745, %3747
  %3750 = xor i32 %3745, %3748
  %3751 = add nuw nsw i32 %3749, %3750
  %3752 = icmp eq i32 %3751, 2
  %3753 = zext i1 %3752 to i8
  store i8 %3753, i8* %.pre-phi50, align 1, !tbaa !2450
  %3754 = sext i32 %3727 to i64
  store i64 %3754, i64* %RCX, align 8, !tbaa !2428
  %3755 = load i64, i64* %RAX, align 8
  %3756 = shl nsw i64 %3754, 2
  %3757 = add i64 %3755, %3756
  %3758 = add i64 %168, 352
  store i64 %3758, i64* %PC, align 8
  %3759 = load <2 x float>, <2 x float>* %4605, align 1
  %3760 = load <2 x i32>, <2 x i32>* %4606, align 1
  %3761 = inttoptr i64 %3757 to float*
  %3762 = load float, float* %3761, align 4
  %3763 = extractelement <2 x float> %3759, i32 0
  %3764 = fmul float %3763, %3762
  store float %3764, float* %4597, align 1, !tbaa !2451
  %3765 = bitcast <2 x float> %3759 to <2 x i32>
  %3766 = extractelement <2 x i32> %3765, i32 1
  store i32 %3766, i32* %4607, align 1, !tbaa !2451
  %3767 = extractelement <2 x i32> %3760, i32 0
  store i32 %3767, i32* %4608, align 1, !tbaa !2451
  %3768 = extractelement <2 x i32> %3760, i32 1
  store i32 %3768, i32* %4609, align 1, !tbaa !2451
  %3769 = load <2 x float>, <2 x float>* %4610, align 1
  %3770 = load <2 x i32>, <2 x i32>* %4611, align 1
  %3771 = load <2 x float>, <2 x float>* %4605, align 1
  %3772 = extractelement <2 x float> %3769, i32 0
  %3773 = extractelement <2 x float> %3771, i32 0
  %3774 = fadd float %3772, %3773
  store float %3774, float* %4588, align 1, !tbaa !2451
  %3775 = bitcast <2 x float> %3769 to <2 x i32>
  %3776 = extractelement <2 x i32> %3775, i32 1
  store i32 %3776, i32* %4612, align 1, !tbaa !2451
  %3777 = extractelement <2 x i32> %3770, i32 0
  store i32 %3777, i32* %4613, align 1, !tbaa !2451
  %3778 = extractelement <2 x i32> %3770, i32 1
  store i32 %3778, i32* %4614, align 1, !tbaa !2451
  %3779 = add i64 %3721, -32
  %3780 = add i64 %168, 360
  store i64 %3780, i64* %PC, align 8
  %3781 = inttoptr i64 %3779 to i64*
  %3782 = load i64, i64* %3781, align 8
  store i64 %3782, i64* %RAX, align 8, !tbaa !2428
  %3783 = add i64 %3721, -44
  %3784 = add i64 %168, 364
  store i64 %3784, i64* %PC, align 8
  %3785 = inttoptr i64 %3783 to i32*
  %3786 = load i32, i32* %3785, align 4
  %3787 = sext i32 %3786 to i64
  store i64 %3787, i64* %RCX, align 8, !tbaa !2428
  %3788 = shl nsw i64 %3787, 2
  %3789 = add i64 %3788, %3782
  %3790 = add i64 %168, 369
  store i64 %3790, i64* %PC, align 8
  %3791 = inttoptr i64 %3789 to i32*
  %3792 = load i32, i32* %3791, align 4
  store i32 %3792, i32* %4598, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4600, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4602, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4604, align 1, !tbaa !2451
  %3793 = load i64, i64* %RBP, align 8
  %3794 = add i64 %3793, -40
  %3795 = add i64 %168, 373
  store i64 %3795, i64* %PC, align 8
  %3796 = inttoptr i64 %3794 to i64*
  %3797 = load i64, i64* %3796, align 8
  store i64 %3797, i64* %RAX, align 8, !tbaa !2428
  %3798 = add i64 %3793, -24
  %3799 = add i64 %168, 376
  store i64 %3799, i64* %PC, align 8
  %3800 = inttoptr i64 %3798 to i32*
  %3801 = load i32, i32* %3800, align 4
  %3802 = zext i32 %3801 to i64
  store i64 %3802, i64* %RDX, align 8, !tbaa !2428
  %3803 = add i64 %3793, -44
  %3804 = add i64 %168, 380
  store i64 %3804, i64* %PC, align 8
  %3805 = inttoptr i64 %3803 to i32*
  %3806 = load i32, i32* %3805, align 4
  %3807 = sext i32 %3801 to i64
  %3808 = sext i32 %3806 to i64
  %3809 = mul nsw i64 %3808, %3807
  %3810 = trunc i64 %3809 to i32
  %3811 = and i64 %3809, 4294967295
  store i64 %3811, i64* %RDX, align 8, !tbaa !2428
  %3812 = shl i64 %3809, 32
  %3813 = ashr exact i64 %3812, 32
  %3814 = icmp ne i64 %3813, %3809
  %3815 = zext i1 %3814 to i8
  store i8 %3815, i8* %.pre-phi, align 1, !tbaa !2432
  %3816 = and i32 %3810, 255
  %3817 = tail call i32 @llvm.ctpop.i32(i32 %3816) #9
  %3818 = trunc i32 %3817 to i8
  %3819 = and i8 %3818, 1
  %3820 = xor i8 %3819, 1
  store i8 %3820, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %3821 = lshr i32 %3810, 31
  %3822 = trunc i32 %3821 to i8
  store i8 %3822, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %3815, i8* %.pre-phi50, align 1, !tbaa !2450
  %3823 = add i64 %3793, -48
  %3824 = add i64 %168, 383
  store i64 %3824, i64* %PC, align 8
  %3825 = trunc i64 %3809 to i32
  %3826 = inttoptr i64 %3823 to i32*
  %3827 = load i32, i32* %3826, align 4
  %3828 = add i32 %3827, %3825
  %3829 = zext i32 %3828 to i64
  store i64 %3829, i64* %RDX, align 8, !tbaa !2428
  %3830 = icmp ult i32 %3828, %3825
  %3831 = icmp ult i32 %3828, %3827
  %3832 = or i1 %3830, %3831
  %3833 = zext i1 %3832 to i8
  store i8 %3833, i8* %.pre-phi, align 1, !tbaa !2432
  %3834 = and i32 %3828, 255
  %3835 = tail call i32 @llvm.ctpop.i32(i32 %3834) #9
  %3836 = trunc i32 %3835 to i8
  %3837 = and i8 %3836, 1
  %3838 = xor i8 %3837, 1
  store i8 %3838, i8* %.pre-phi42, align 1, !tbaa !2446
  %3839 = xor i32 %3827, %3825
  %3840 = xor i32 %3839, %3828
  %3841 = lshr i32 %3840, 4
  %3842 = trunc i32 %3841 to i8
  %3843 = and i8 %3842, 1
  store i8 %3843, i8* %.pre-phi44, align 1, !tbaa !2447
  %3844 = icmp eq i32 %3828, 0
  %3845 = zext i1 %3844 to i8
  store i8 %3845, i8* %.pre-phi46, align 1, !tbaa !2448
  %3846 = lshr i32 %3828, 31
  %3847 = trunc i32 %3846 to i8
  store i8 %3847, i8* %.pre-phi48, align 1, !tbaa !2449
  %3848 = lshr i32 %3825, 31
  %3849 = lshr i32 %3827, 31
  %3850 = xor i32 %3846, %3848
  %3851 = xor i32 %3846, %3849
  %3852 = add nuw nsw i32 %3850, %3851
  %3853 = icmp eq i32 %3852, 2
  %3854 = zext i1 %3853 to i8
  store i8 %3854, i8* %.pre-phi50, align 1, !tbaa !2450
  %3855 = sext i32 %3828 to i64
  store i64 %3855, i64* %RCX, align 8, !tbaa !2428
  %3856 = shl nsw i64 %3855, 2
  %3857 = add i64 %3797, %3856
  %3858 = add i64 %168, 391
  store i64 %3858, i64* %PC, align 8
  %3859 = load <2 x float>, <2 x float>* %4605, align 1
  %3860 = load <2 x i32>, <2 x i32>* %4606, align 1
  %3861 = inttoptr i64 %3857 to float*
  %3862 = load float, float* %3861, align 4
  %3863 = extractelement <2 x float> %3859, i32 0
  %3864 = fmul float %3863, %3862
  store float %3864, float* %4597, align 1, !tbaa !2451
  %3865 = bitcast <2 x float> %3859 to <2 x i32>
  %3866 = extractelement <2 x i32> %3865, i32 1
  store i32 %3866, i32* %4607, align 1, !tbaa !2451
  %3867 = extractelement <2 x i32> %3860, i32 0
  store i32 %3867, i32* %4608, align 1, !tbaa !2451
  %3868 = extractelement <2 x i32> %3860, i32 1
  store i32 %3868, i32* %4609, align 1, !tbaa !2451
  %3869 = load <2 x float>, <2 x float>* %4610, align 1
  %3870 = load <2 x i32>, <2 x i32>* %4611, align 1
  %3871 = load <2 x float>, <2 x float>* %4605, align 1
  %3872 = extractelement <2 x float> %3869, i32 0
  %3873 = extractelement <2 x float> %3871, i32 0
  %3874 = fadd float %3872, %3873
  store float %3874, float* %4588, align 1, !tbaa !2451
  %3875 = bitcast <2 x float> %3869 to <2 x i32>
  %3876 = extractelement <2 x i32> %3875, i32 1
  store i32 %3876, i32* %4612, align 1, !tbaa !2451
  %3877 = extractelement <2 x i32> %3870, i32 0
  store i32 %3877, i32* %4613, align 1, !tbaa !2451
  %3878 = extractelement <2 x i32> %3870, i32 1
  store i32 %3878, i32* %4614, align 1, !tbaa !2451
  %3879 = load i64, i64* %RBP, align 8
  %3880 = add i64 %3879, -16
  %3881 = add i64 %168, 399
  store i64 %3881, i64* %PC, align 8
  %3882 = inttoptr i64 %3880 to i64*
  %3883 = load i64, i64* %3882, align 8
  store i64 %3883, i64* %RAX, align 8, !tbaa !2428
  %3884 = add i64 %3879, -48
  %3885 = add i64 %168, 403
  store i64 %3885, i64* %PC, align 8
  %3886 = inttoptr i64 %3884 to i32*
  %3887 = load i32, i32* %3886, align 4
  %3888 = sext i32 %3887 to i64
  store i64 %3888, i64* %RCX, align 8, !tbaa !2428
  %3889 = shl nsw i64 %3888, 2
  %3890 = add i64 %3889, %3883
  %3891 = add i64 %168, 408
  store i64 %3891, i64* %PC, align 8
  %3892 = load <2 x float>, <2 x float>* %4610, align 1
  %3893 = extractelement <2 x float> %3892, i32 0
  %3894 = inttoptr i64 %3890 to float*
  store float %3893, float* %3894, align 4
  %3895 = load i64, i64* %RBP, align 8
  %3896 = add i64 %3895, -48
  %3897 = load i64, i64* %PC, align 8
  %3898 = add i64 %3897, 3
  store i64 %3898, i64* %PC, align 8
  %3899 = inttoptr i64 %3896 to i32*
  %3900 = load i32, i32* %3899, align 4
  %3901 = add i32 %3900, 1
  %3902 = zext i32 %3901 to i64
  store i64 %3902, i64* %RAX, align 8, !tbaa !2428
  %3903 = icmp eq i32 %3900, -1
  %3904 = icmp eq i32 %3901, 0
  %3905 = or i1 %3903, %3904
  %3906 = zext i1 %3905 to i8
  store i8 %3906, i8* %.pre-phi, align 1, !tbaa !2432
  %3907 = and i32 %3901, 255
  %3908 = tail call i32 @llvm.ctpop.i32(i32 %3907) #9
  %3909 = trunc i32 %3908 to i8
  %3910 = and i8 %3909, 1
  %3911 = xor i8 %3910, 1
  store i8 %3911, i8* %.pre-phi42, align 1, !tbaa !2446
  %3912 = xor i32 %3901, %3900
  %3913 = lshr i32 %3912, 4
  %3914 = trunc i32 %3913 to i8
  %3915 = and i8 %3914, 1
  store i8 %3915, i8* %.pre-phi44, align 1, !tbaa !2447
  %3916 = zext i1 %3904 to i8
  store i8 %3916, i8* %.pre-phi46, align 1, !tbaa !2448
  %3917 = lshr i32 %3901, 31
  %3918 = trunc i32 %3917 to i8
  store i8 %3918, i8* %.pre-phi48, align 1, !tbaa !2449
  %3919 = lshr i32 %3900, 31
  %3920 = xor i32 %3917, %3919
  %3921 = add nuw nsw i32 %3920, %3917
  %3922 = icmp eq i32 %3921, 2
  %3923 = zext i1 %3922 to i8
  store i8 %3923, i8* %.pre-phi50, align 1, !tbaa !2450
  %3924 = add i64 %3897, 9
  store i64 %3924, i64* %PC, align 8
  store i32 %3901, i32* %3899, align 4
  %3925 = load i64, i64* %PC, align 8
  %3926 = add i64 %3925, -429
  store i64 %3926, i64* %PC, align 8, !tbaa !2428
  br label %block_40226d

block_40213a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %3927 = add i64 %4755, 3
  store i64 %3927, i64* %PC, align 8
  %3928 = load i32, i32* %4730, align 4
  %3929 = add i32 %3928, -1
  %3930 = zext i32 %3929 to i64
  store i64 %3930, i64* %RAX, align 8, !tbaa !2428
  %3931 = icmp eq i32 %3928, 0
  %3932 = zext i1 %3931 to i8
  store i8 %3932, i8* %.pre-phi, align 1, !tbaa !2432
  %3933 = and i32 %3929, 255
  %3934 = tail call i32 @llvm.ctpop.i32(i32 %3933) #9
  %3935 = trunc i32 %3934 to i8
  %3936 = and i8 %3935, 1
  %3937 = xor i8 %3936, 1
  store i8 %3937, i8* %.pre-phi42, align 1, !tbaa !2446
  %3938 = xor i32 %3929, %3928
  %3939 = lshr i32 %3938, 4
  %3940 = trunc i32 %3939 to i8
  %3941 = and i8 %3940, 1
  store i8 %3941, i8* %.pre-phi44, align 1, !tbaa !2447
  %3942 = icmp eq i32 %3929, 0
  %3943 = zext i1 %3942 to i8
  store i8 %3943, i8* %.pre-phi46, align 1, !tbaa !2448
  %3944 = lshr i32 %3929, 31
  %3945 = trunc i32 %3944 to i8
  store i8 %3945, i8* %.pre-phi48, align 1, !tbaa !2449
  %3946 = lshr i32 %3928, 31
  %3947 = xor i32 %3944, %3946
  %3948 = add nuw nsw i32 %3947, %3946
  %3949 = icmp eq i32 %3948, 2
  %3950 = zext i1 %3949 to i8
  store i8 %3950, i8* %.pre-phi50, align 1, !tbaa !2450
  %3951 = add i64 %4755, 9
  store i64 %3951, i64* %PC, align 8
  store i32 %3929, i32* %4730, align 4
  %3952 = load i64, i64* %RBP, align 8
  %3953 = add i64 %3952, -48
  %3954 = load i64, i64* %PC, align 8
  %3955 = add i64 %3954, 7
  store i64 %3955, i64* %PC, align 8
  %3956 = inttoptr i64 %3953 to i32*
  store i32 0, i32* %3956, align 4
  %3957 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %3958 = bitcast [32 x %union.VectorReg]* %7 to float*
  %3959 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %3960 = getelementptr inbounds i8, i8* %3957, i64 4
  %3961 = bitcast i8* %3960 to float*
  %3962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3963 = bitcast i64* %3962 to float*
  %3964 = getelementptr inbounds i8, i8* %3957, i64 12
  %3965 = bitcast i8* %3964 to float*
  %3966 = bitcast %union.VectorReg* %8 to i8*
  %3967 = bitcast %union.VectorReg* %8 to float*
  %3968 = bitcast %union.VectorReg* %8 to i32*
  %3969 = getelementptr inbounds i8, i8* %3966, i64 4
  %3970 = bitcast i8* %3969 to float*
  %3971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %3972 = bitcast i64* %3971 to float*
  %3973 = getelementptr inbounds i8, i8* %3966, i64 12
  %3974 = bitcast i8* %3973 to float*
  %3975 = bitcast %union.VectorReg* %8 to <2 x float>*
  %3976 = bitcast i64* %3971 to <2 x i32>*
  %3977 = bitcast i8* %3969 to i32*
  %3978 = bitcast i64* %3971 to i32*
  %3979 = bitcast i8* %3973 to i32*
  %3980 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %3981 = bitcast i64* %3962 to <2 x i32>*
  %3982 = bitcast i8* %3960 to i32*
  %3983 = bitcast i64* %3962 to i32*
  %3984 = bitcast i8* %3964 to i32*
  %.pre30 = load i64, i64* %PC, align 8
  br label %block_40214a

block_402238:                                     ; preds = %block_40214a
  %3985 = add i64 %4196, 5
  store i64 %3985, i64* %PC, align 8, !tbaa !2428
  br label %block_40223d

block_4027a6:                                     ; preds = %block_402446
  %3986 = add i64 %4682, 1
  store i64 %3986, i64* %PC, align 8
  %3987 = load i64, i64* %11, align 8, !tbaa !2428
  %3988 = add i64 %3987, 8
  %3989 = inttoptr i64 %3987 to i64*
  %3990 = load i64, i64* %3989, align 8
  store i64 %3990, i64* %RBP, align 8, !tbaa !2428
  store i64 %3988, i64* %11, align 8, !tbaa !2428
  %3991 = add i64 %4682, 2
  store i64 %3991, i64* %PC, align 8
  %3992 = inttoptr i64 %3988 to i64*
  %3993 = load i64, i64* %3992, align 8
  store i64 %3993, i64* %PC, align 8, !tbaa !2428
  %3994 = add i64 %3987, 16
  store i64 %3994, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %4034

block_402115:                                     ; preds = %block_402089
  %3995 = add i64 %4793, 5
  store i64 %3995, i64* %PC, align 8, !tbaa !2428
  br label %block_40211a

block_402424:                                     ; preds = %block_40241f, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %3996 = phi i64 [ %132, %block_40241f ], [ %2867, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  %3997 = phi i64 [ %4197, %block_40241f ], [ %2896, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3 ]
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  %3998 = add i64 %3996, -20
  %3999 = add i64 %3997, 8
  store i64 %3999, i64* %PC, align 8
  %4000 = inttoptr i64 %3998 to i32*
  %4001 = load i32, i32* %4000, align 4
  %4002 = zext i32 %4001 to i64
  store i64 %4002, i64* %RCX, align 8, !tbaa !2428
  %4003 = add i64 %3996, -72
  %4004 = add i64 %3997, 11
  store i64 %4004, i64* %PC, align 8
  %4005 = inttoptr i64 %4003 to i32*
  store i32 16, i32* %4005, align 4
  %4006 = load i32, i32* %ECX, align 4
  %4007 = zext i32 %4006 to i64
  %4008 = load i64, i64* %PC, align 8
  store i64 %4007, i64* %RAX, align 8, !tbaa !2428
  %4009 = sext i32 %4006 to i64
  %4010 = lshr i64 %4009, 32
  store i64 %4010, i64* %64, align 8, !tbaa !2428
  %4011 = load i64, i64* %RBP, align 8
  %4012 = add i64 %4011, -72
  %4013 = add i64 %4008, 6
  store i64 %4013, i64* %PC, align 8
  %4014 = inttoptr i64 %4012 to i32*
  %4015 = load i32, i32* %4014, align 4
  %4016 = zext i32 %4015 to i64
  store i64 %4016, i64* %RCX, align 8, !tbaa !2428
  %4017 = add i64 %4008, 8
  store i64 %4017, i64* %PC, align 8
  %4018 = sext i32 %4015 to i64
  %4019 = shl nuw i64 %4010, 32
  %4020 = or i64 %4019, %4007
  %4021 = sdiv i64 %4020, %4018
  %4022 = shl i64 %4021, 32
  %4023 = ashr exact i64 %4022, 32
  %4024 = icmp eq i64 %4021, %4023
  br i1 %4024, label %4027, label %4025

; <label>:4025:                                   ; preds = %block_402424
  %4026 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4017, %struct.Memory* %2863) #12
  %.pre35 = load i64, i64* %RDX, align 8
  %.pre36 = load i64, i64* %PC, align 8
  %.pre37 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

; <label>:4027:                                   ; preds = %block_402424
  %4028 = srem i64 %4020, %4018
  %4029 = and i64 %4021, 4294967295
  store i64 %4029, i64* %RAX, align 8, !tbaa !2428
  %4030 = and i64 %4028, 4294967295
  store i64 %4030, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi50, align 1, !tbaa !2450
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2: ; preds = %4027, %4025
  %4031 = phi i64 [ %.pre37, %4025 ], [ %4011, %4027 ]
  %4032 = phi i64 [ %.pre36, %4025 ], [ %4017, %4027 ]
  %4033 = phi i64 [ %.pre35, %4025 ], [ %4030, %4027 ]
  %4034 = phi %struct.Memory* [ %4026, %4025 ], [ %2863, %4027 ]
  %4035 = trunc i64 %4033 to i32
  %4036 = add i32 %4035, 16
  %4037 = zext i32 %4036 to i64
  store i64 %4037, i64* %RDX, align 8, !tbaa !2428
  %4038 = icmp ugt i32 %4035, -17
  %4039 = zext i1 %4038 to i8
  store i8 %4039, i8* %.pre-phi, align 1, !tbaa !2432
  %4040 = and i32 %4036, 255
  %4041 = tail call i32 @llvm.ctpop.i32(i32 %4040) #9
  %4042 = trunc i32 %4041 to i8
  %4043 = and i8 %4042, 1
  %4044 = xor i8 %4043, 1
  store i8 %4044, i8* %.pre-phi42, align 1, !tbaa !2446
  %4045 = xor i32 %4035, 16
  %4046 = xor i32 %4045, %4036
  %4047 = lshr i32 %4046, 4
  %4048 = trunc i32 %4047 to i8
  %4049 = and i8 %4048, 1
  store i8 %4049, i8* %.pre-phi44, align 1, !tbaa !2447
  %4050 = icmp eq i32 %4036, 0
  %4051 = zext i1 %4050 to i8
  store i8 %4051, i8* %.pre-phi46, align 1, !tbaa !2448
  %4052 = lshr i32 %4036, 31
  %4053 = trunc i32 %4052 to i8
  store i8 %4053, i8* %.pre-phi48, align 1, !tbaa !2449
  %4054 = lshr i32 %4035, 31
  %4055 = xor i32 %4052, %4054
  %4056 = add nuw nsw i32 %4055, %4052
  %4057 = icmp eq i32 %4056, 2
  %4058 = zext i1 %4057 to i8
  store i8 %4058, i8* %.pre-phi50, align 1, !tbaa !2450
  %4059 = add i64 %4031, -52
  %4060 = add i64 %4032, 6
  store i64 %4060, i64* %PC, align 8
  %4061 = inttoptr i64 %4059 to i32*
  store i32 %4036, i32* %4061, align 4
  %4062 = load i64, i64* %RBP, align 8
  %4063 = add i64 %4062, -52
  %4064 = load i64, i64* %PC, align 8
  %4065 = add i64 %4064, 3
  store i64 %4065, i64* %PC, align 8
  %4066 = inttoptr i64 %4063 to i32*
  %4067 = load i32, i32* %4066, align 4
  %4068 = add i32 %4067, -1
  %4069 = zext i32 %4068 to i64
  store i64 %4069, i64* %RDX, align 8, !tbaa !2428
  %4070 = icmp eq i32 %4067, 0
  %4071 = zext i1 %4070 to i8
  store i8 %4071, i8* %.pre-phi, align 1, !tbaa !2432
  %4072 = and i32 %4068, 255
  %4073 = tail call i32 @llvm.ctpop.i32(i32 %4072) #9
  %4074 = trunc i32 %4073 to i8
  %4075 = and i8 %4074, 1
  %4076 = xor i8 %4075, 1
  store i8 %4076, i8* %.pre-phi42, align 1, !tbaa !2446
  %4077 = xor i32 %4068, %4067
  %4078 = lshr i32 %4077, 4
  %4079 = trunc i32 %4078 to i8
  %4080 = and i8 %4079, 1
  store i8 %4080, i8* %.pre-phi44, align 1, !tbaa !2447
  %4081 = icmp eq i32 %4068, 0
  %4082 = zext i1 %4081 to i8
  store i8 %4082, i8* %.pre-phi46, align 1, !tbaa !2448
  %4083 = lshr i32 %4068, 31
  %4084 = trunc i32 %4083 to i8
  store i8 %4084, i8* %.pre-phi48, align 1, !tbaa !2449
  %4085 = lshr i32 %4067, 31
  %4086 = xor i32 %4083, %4085
  %4087 = add nuw nsw i32 %4086, %4085
  %4088 = icmp eq i32 %4087, 2
  %4089 = zext i1 %4088 to i8
  store i8 %4089, i8* %.pre-phi50, align 1, !tbaa !2450
  %4090 = add i64 %4062, -44
  %4091 = add i64 %4064, 9
  store i64 %4091, i64* %PC, align 8
  %4092 = inttoptr i64 %4090 to i32*
  store i32 %4068, i32* %4092, align 4
  %4093 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %4094 = bitcast [32 x %union.VectorReg]* %7 to float*
  %4095 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %4096 = getelementptr inbounds i8, i8* %4093, i64 4
  %4097 = bitcast i8* %4096 to float*
  %4098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %4099 = bitcast i64* %4098 to float*
  %4100 = getelementptr inbounds i8, i8* %4093, i64 12
  %4101 = bitcast i8* %4100 to float*
  %4102 = bitcast %union.VectorReg* %8 to i8*
  %4103 = bitcast %union.VectorReg* %8 to float*
  %4104 = bitcast %union.VectorReg* %8 to i32*
  %4105 = getelementptr inbounds i8, i8* %4102, i64 4
  %4106 = bitcast i8* %4105 to float*
  %4107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %4108 = bitcast i64* %4107 to float*
  %4109 = getelementptr inbounds i8, i8* %4102, i64 12
  %4110 = bitcast i8* %4109 to float*
  %4111 = bitcast %union.VectorReg* %8 to <2 x float>*
  %4112 = bitcast i64* %4107 to <2 x i32>*
  %4113 = bitcast i8* %4105 to i32*
  %4114 = bitcast i64* %4107 to i32*
  %4115 = bitcast i8* %4109 to i32*
  %4116 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %4117 = bitcast i64* %4098 to <2 x i32>*
  %4118 = bitcast i8* %4096 to i32*
  %4119 = bitcast i64* %4098 to i32*
  %4120 = bitcast i8* %4100 to i32*
  %.pre38 = load i64, i64* %PC, align 8
  br label %block_402446

block_402459:                                     ; preds = %block_402452, %block_402465
  %4121 = phi i64 [ %.pre39, %block_402452 ], [ %2252, %block_402465 ]
  %4122 = load i64, i64* %RBP, align 8
  %4123 = add i64 %4122, -48
  %4124 = add i64 %4121, 3
  store i64 %4124, i64* %PC, align 8
  %4125 = inttoptr i64 %4123 to i32*
  %4126 = load i32, i32* %4125, align 4
  %4127 = zext i32 %4126 to i64
  store i64 %4127, i64* %RAX, align 8, !tbaa !2428
  %4128 = add i64 %4122, -4
  %4129 = add i64 %4121, 6
  store i64 %4129, i64* %PC, align 8
  %4130 = inttoptr i64 %4128 to i32*
  %4131 = load i32, i32* %4130, align 4
  %4132 = sub i32 %4126, %4131
  %4133 = icmp ult i32 %4126, %4131
  %4134 = zext i1 %4133 to i8
  store i8 %4134, i8* %.pre-phi, align 1, !tbaa !2432
  %4135 = and i32 %4132, 255
  %4136 = tail call i32 @llvm.ctpop.i32(i32 %4135) #9
  %4137 = trunc i32 %4136 to i8
  %4138 = and i8 %4137, 1
  %4139 = xor i8 %4138, 1
  store i8 %4139, i8* %.pre-phi42, align 1, !tbaa !2446
  %4140 = xor i32 %4131, %4126
  %4141 = xor i32 %4140, %4132
  %4142 = lshr i32 %4141, 4
  %4143 = trunc i32 %4142 to i8
  %4144 = and i8 %4143, 1
  store i8 %4144, i8* %.pre-phi44, align 1, !tbaa !2447
  %4145 = icmp eq i32 %4132, 0
  %4146 = zext i1 %4145 to i8
  store i8 %4146, i8* %.pre-phi46, align 1, !tbaa !2448
  %4147 = lshr i32 %4132, 31
  %4148 = trunc i32 %4147 to i8
  store i8 %4148, i8* %.pre-phi48, align 1, !tbaa !2449
  %4149 = lshr i32 %4126, 31
  %4150 = lshr i32 %4131, 31
  %4151 = xor i32 %4150, %4149
  %4152 = xor i32 %4147, %4149
  %4153 = add nuw nsw i32 %4152, %4151
  %4154 = icmp eq i32 %4153, 2
  %4155 = zext i1 %4154 to i8
  store i8 %4155, i8* %.pre-phi50, align 1, !tbaa !2450
  %4156 = icmp ne i8 %4148, 0
  %4157 = xor i1 %4156, %4154
  %.v = select i1 %4157, i64 12, i64 826
  %4158 = add i64 %4121, %.v
  store i64 %4158, i64* %PC, align 8, !tbaa !2428
  br i1 %4157, label %block_402465, label %block_402793

block_40214a:                                     ; preds = %block_40213a, %block_402156
  %4159 = phi i64 [ %.pre30, %block_40213a ], [ %2784, %block_402156 ]
  %4160 = load i64, i64* %RBP, align 8
  %4161 = add i64 %4160, -48
  %4162 = add i64 %4159, 3
  store i64 %4162, i64* %PC, align 8
  %4163 = inttoptr i64 %4161 to i32*
  %4164 = load i32, i32* %4163, align 4
  %4165 = zext i32 %4164 to i64
  store i64 %4165, i64* %RAX, align 8, !tbaa !2428
  %4166 = add i64 %4160, -4
  %4167 = add i64 %4159, 6
  store i64 %4167, i64* %PC, align 8
  %4168 = inttoptr i64 %4166 to i32*
  %4169 = load i32, i32* %4168, align 4
  %4170 = sub i32 %4164, %4169
  %4171 = icmp ult i32 %4164, %4169
  %4172 = zext i1 %4171 to i8
  store i8 %4172, i8* %.pre-phi, align 1, !tbaa !2432
  %4173 = and i32 %4170, 255
  %4174 = tail call i32 @llvm.ctpop.i32(i32 %4173) #9
  %4175 = trunc i32 %4174 to i8
  %4176 = and i8 %4175, 1
  %4177 = xor i8 %4176, 1
  store i8 %4177, i8* %.pre-phi42, align 1, !tbaa !2446
  %4178 = xor i32 %4169, %4164
  %4179 = xor i32 %4178, %4170
  %4180 = lshr i32 %4179, 4
  %4181 = trunc i32 %4180 to i8
  %4182 = and i8 %4181, 1
  store i8 %4182, i8* %.pre-phi44, align 1, !tbaa !2447
  %4183 = icmp eq i32 %4170, 0
  %4184 = zext i1 %4183 to i8
  store i8 %4184, i8* %.pre-phi46, align 1, !tbaa !2448
  %4185 = lshr i32 %4170, 31
  %4186 = trunc i32 %4185 to i8
  store i8 %4186, i8* %.pre-phi48, align 1, !tbaa !2449
  %4187 = lshr i32 %4164, 31
  %4188 = lshr i32 %4169, 31
  %4189 = xor i32 %4188, %4187
  %4190 = xor i32 %4185, %4187
  %4191 = add nuw nsw i32 %4190, %4189
  %4192 = icmp eq i32 %4191, 2
  %4193 = zext i1 %4192 to i8
  store i8 %4193, i8* %.pre-phi50, align 1, !tbaa !2450
  %4194 = icmp ne i8 %4186, 0
  %4195 = xor i1 %4194, %4192
  %.v56 = select i1 %4195, i64 12, i64 238
  %4196 = add i64 %4159, %.v56
  store i64 %4196, i64* %PC, align 8, !tbaa !2428
  br i1 %4195, label %block_402156, label %block_402238

block_40241f:                                     ; preds = %block_40226d
  %4197 = add i64 %168, 5
  store i64 %4197, i64* %PC, align 8, !tbaa !2428
  br label %block_402424

block_402059:                                     ; preds = %block_402054, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4
  %4198 = phi i64 [ %2787, %block_402054 ], [ %101, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  %4199 = phi i64 [ %2785, %block_402054 ], [ %130, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit4 ]
  store i64 4, i64* %RAX, align 8, !tbaa !2428
  %4200 = add i64 %4198, -20
  %4201 = add i64 %4199, 8
  store i64 %4201, i64* %PC, align 8
  %4202 = inttoptr i64 %4200 to i32*
  %4203 = load i32, i32* %4202, align 4
  %4204 = zext i32 %4203 to i64
  store i64 %4204, i64* %RCX, align 8, !tbaa !2428
  %4205 = add i64 %4198, -60
  %4206 = add i64 %4199, 11
  store i64 %4206, i64* %PC, align 8
  %4207 = inttoptr i64 %4205 to i32*
  store i32 4, i32* %4207, align 4
  %4208 = load i32, i32* %ECX, align 4
  %4209 = zext i32 %4208 to i64
  %4210 = load i64, i64* %PC, align 8
  store i64 %4209, i64* %RAX, align 8, !tbaa !2428
  %4211 = sext i32 %4208 to i64
  %4212 = lshr i64 %4211, 32
  store i64 %4212, i64* %64, align 8, !tbaa !2428
  %4213 = load i64, i64* %RBP, align 8
  %4214 = add i64 %4213, -60
  %4215 = add i64 %4210, 6
  store i64 %4215, i64* %PC, align 8
  %4216 = inttoptr i64 %4214 to i32*
  %4217 = load i32, i32* %4216, align 4
  %4218 = zext i32 %4217 to i64
  store i64 %4218, i64* %RCX, align 8, !tbaa !2428
  %4219 = add i64 %4210, 8
  store i64 %4219, i64* %PC, align 8
  %4220 = sext i32 %4217 to i64
  %4221 = shl nuw i64 %4212, 32
  %4222 = or i64 %4221, %4209
  %4223 = sdiv i64 %4222, %4220
  %4224 = shl i64 %4223, 32
  %4225 = ashr exact i64 %4224, 32
  %4226 = icmp eq i64 %4223, %4225
  br i1 %4226, label %4229, label %4227

; <label>:4227:                                   ; preds = %block_402059
  %4228 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4219, %struct.Memory* %97) #12
  %.pre23 = load i64, i64* %RBP, align 8
  %.pre24 = load i32, i32* %EDX, align 4
  %.pre25 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

; <label>:4229:                                   ; preds = %block_402059
  %4230 = srem i64 %4222, %4220
  %4231 = and i64 %4223, 4294967295
  store i64 %4231, i64* %RAX, align 8, !tbaa !2428
  %4232 = and i64 %4230, 4294967295
  store i64 %4232, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi50, align 1, !tbaa !2450
  %4233 = trunc i64 %4230 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1: ; preds = %4229, %4227
  %4234 = phi i64 [ %.pre25, %4227 ], [ %4219, %4229 ]
  %4235 = phi i32 [ %.pre24, %4227 ], [ %4233, %4229 ]
  %4236 = phi i64 [ %.pre23, %4227 ], [ %4213, %4229 ]
  %4237 = phi %struct.Memory* [ %4228, %4227 ], [ %97, %4229 ]
  %4238 = add i64 %4236, -44
  %4239 = add i64 %4234, 3
  store i64 %4239, i64* %PC, align 8
  %4240 = inttoptr i64 %4238 to i32*
  store i32 %4235, i32* %4240, align 4
  %4241 = load i64, i64* %RBP, align 8
  %4242 = add i64 %4241, -44
  %4243 = load i64, i64* %PC, align 8
  %4244 = add i64 %4243, 4
  store i64 %4244, i64* %PC, align 8
  %4245 = inttoptr i64 %4242 to i32*
  %4246 = load i32, i32* %4245, align 4
  %4247 = add i32 %4246, -2
  %4248 = icmp ult i32 %4246, 2
  %4249 = zext i1 %4248 to i8
  store i8 %4249, i8* %.pre-phi, align 1, !tbaa !2432
  %4250 = and i32 %4247, 255
  %4251 = tail call i32 @llvm.ctpop.i32(i32 %4250) #9
  %4252 = trunc i32 %4251 to i8
  %4253 = and i8 %4252, 1
  %4254 = xor i8 %4253, 1
  store i8 %4254, i8* %.pre-phi42, align 1, !tbaa !2446
  %4255 = xor i32 %4247, %4246
  %4256 = lshr i32 %4255, 4
  %4257 = trunc i32 %4256 to i8
  %4258 = and i8 %4257, 1
  store i8 %4258, i8* %.pre-phi44, align 1, !tbaa !2447
  %4259 = icmp eq i32 %4247, 0
  %4260 = zext i1 %4259 to i8
  store i8 %4260, i8* %.pre-phi46, align 1, !tbaa !2448
  %4261 = lshr i32 %4247, 31
  %4262 = trunc i32 %4261 to i8
  store i8 %4262, i8* %.pre-phi48, align 1, !tbaa !2449
  %4263 = lshr i32 %4246, 31
  %4264 = xor i32 %4261, %4263
  %4265 = add nuw nsw i32 %4264, %4263
  %4266 = icmp eq i32 %4265, 2
  %4267 = zext i1 %4266 to i8
  store i8 %4267, i8* %.pre-phi50, align 1, !tbaa !2450
  %4268 = icmp ne i8 %4262, 0
  %4269 = xor i1 %4268, %4266
  %.v53 = select i1 %4269, i64 171, i64 10
  %4270 = add i64 %4243, %.v53
  store i64 %4270, i64* %PC, align 8, !tbaa !2428
  br i1 %4269, label %block_40211a, label %block_402079

block_402452:                                     ; preds = %block_402446
  %4271 = add i64 %4646, -48
  %4272 = add i64 %4682, 7
  store i64 %4272, i64* %PC, align 8
  %4273 = inttoptr i64 %4271 to i32*
  store i32 0, i32* %4273, align 4
  %.pre39 = load i64, i64* %PC, align 8
  br label %block_402459

block_402095:                                     ; preds = %block_402089
  %4274 = add i64 %4757, -16
  %4275 = add i64 %4793, 4
  store i64 %4275, i64* %PC, align 8
  %4276 = inttoptr i64 %4274 to i64*
  %4277 = load i64, i64* %4276, align 8
  store i64 %4277, i64* %RAX, align 8, !tbaa !2428
  %4278 = add i64 %4793, 8
  store i64 %4278, i64* %PC, align 8
  %4279 = load i32, i32* %4760, align 4
  %4280 = sext i32 %4279 to i64
  store i64 %4280, i64* %RCX, align 8, !tbaa !2428
  %4281 = shl nsw i64 %4280, 2
  %4282 = add i64 %4281, %4277
  %4283 = add i64 %4793, 13
  store i64 %4283, i64* %PC, align 8
  %4284 = inttoptr i64 %4282 to i32*
  %4285 = load i32, i32* %4284, align 4
  store i32 %4285, i32* %4826, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4828, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4830, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4832, align 1, !tbaa !2451
  %4286 = add i64 %4757, -32
  %4287 = add i64 %4793, 17
  store i64 %4287, i64* %PC, align 8
  %4288 = inttoptr i64 %4286 to i64*
  %4289 = load i64, i64* %4288, align 8
  store i64 %4289, i64* %RAX, align 8, !tbaa !2428
  %4290 = add i64 %4757, -44
  %4291 = add i64 %4793, 20
  store i64 %4291, i64* %PC, align 8
  %4292 = inttoptr i64 %4290 to i32*
  %4293 = load i32, i32* %4292, align 4
  %4294 = add i32 %4293, -1
  %4295 = zext i32 %4294 to i64
  store i64 %4295, i64* %RDX, align 8, !tbaa !2428
  %4296 = icmp eq i32 %4293, 0
  %4297 = zext i1 %4296 to i8
  store i8 %4297, i8* %.pre-phi, align 1, !tbaa !2432
  %4298 = and i32 %4294, 255
  %4299 = tail call i32 @llvm.ctpop.i32(i32 %4298) #9
  %4300 = trunc i32 %4299 to i8
  %4301 = and i8 %4300, 1
  %4302 = xor i8 %4301, 1
  store i8 %4302, i8* %.pre-phi42, align 1, !tbaa !2446
  %4303 = xor i32 %4294, %4293
  %4304 = lshr i32 %4303, 4
  %4305 = trunc i32 %4304 to i8
  %4306 = and i8 %4305, 1
  store i8 %4306, i8* %.pre-phi44, align 1, !tbaa !2447
  %4307 = icmp eq i32 %4294, 0
  %4308 = zext i1 %4307 to i8
  store i8 %4308, i8* %.pre-phi46, align 1, !tbaa !2448
  %4309 = lshr i32 %4294, 31
  %4310 = trunc i32 %4309 to i8
  store i8 %4310, i8* %.pre-phi48, align 1, !tbaa !2449
  %4311 = lshr i32 %4293, 31
  %4312 = xor i32 %4309, %4311
  %4313 = add nuw nsw i32 %4312, %4311
  %4314 = icmp eq i32 %4313, 2
  %4315 = zext i1 %4314 to i8
  store i8 %4315, i8* %.pre-phi50, align 1, !tbaa !2450
  %4316 = sext i32 %4294 to i64
  store i64 %4316, i64* %RCX, align 8, !tbaa !2428
  %4317 = shl nsw i64 %4316, 2
  %4318 = add i64 %4289, %4317
  %4319 = add i64 %4793, 31
  store i64 %4319, i64* %PC, align 8
  %4320 = inttoptr i64 %4318 to i32*
  %4321 = load i32, i32* %4320, align 4
  store i32 %4321, i32* %4835, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4837, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4839, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4841, align 1, !tbaa !2451
  %4322 = add i64 %4757, -40
  %4323 = add i64 %4793, 35
  store i64 %4323, i64* %PC, align 8
  %4324 = inttoptr i64 %4322 to i64*
  %4325 = load i64, i64* %4324, align 8
  store i64 %4325, i64* %RAX, align 8, !tbaa !2428
  %4326 = add i64 %4757, -24
  %4327 = add i64 %4793, 38
  store i64 %4327, i64* %PC, align 8
  %4328 = inttoptr i64 %4326 to i32*
  %4329 = load i32, i32* %4328, align 4
  %4330 = zext i32 %4329 to i64
  store i64 %4330, i64* %RDX, align 8, !tbaa !2428
  %4331 = add i64 %4793, 41
  store i64 %4331, i64* %PC, align 8
  %4332 = load i32, i32* %4292, align 4
  %4333 = add i32 %4332, -1
  %4334 = zext i32 %4333 to i64
  store i64 %4334, i64* %RSI, align 8, !tbaa !2428
  %4335 = sext i32 %4329 to i64
  %4336 = sext i32 %4333 to i64
  %4337 = mul nsw i64 %4336, %4335
  %4338 = trunc i64 %4337 to i32
  %4339 = and i64 %4337, 4294967295
  store i64 %4339, i64* %RDX, align 8, !tbaa !2428
  %4340 = shl i64 %4337, 32
  %4341 = ashr exact i64 %4340, 32
  %4342 = icmp ne i64 %4341, %4337
  %4343 = zext i1 %4342 to i8
  store i8 %4343, i8* %.pre-phi, align 1, !tbaa !2432
  %4344 = and i32 %4338, 255
  %4345 = tail call i32 @llvm.ctpop.i32(i32 %4344) #9
  %4346 = trunc i32 %4345 to i8
  %4347 = and i8 %4346, 1
  %4348 = xor i8 %4347, 1
  store i8 %4348, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4349 = lshr i32 %4338, 31
  %4350 = trunc i32 %4349 to i8
  store i8 %4350, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4343, i8* %.pre-phi50, align 1, !tbaa !2450
  %4351 = load i64, i64* %RBP, align 8
  %4352 = add i64 %4351, -48
  %4353 = add i64 %4793, 50
  store i64 %4353, i64* %PC, align 8
  %4354 = trunc i64 %4337 to i32
  %4355 = inttoptr i64 %4352 to i32*
  %4356 = load i32, i32* %4355, align 4
  %4357 = add i32 %4356, %4354
  %4358 = zext i32 %4357 to i64
  store i64 %4358, i64* %RDX, align 8, !tbaa !2428
  %4359 = icmp ult i32 %4357, %4354
  %4360 = icmp ult i32 %4357, %4356
  %4361 = or i1 %4359, %4360
  %4362 = zext i1 %4361 to i8
  store i8 %4362, i8* %.pre-phi, align 1, !tbaa !2432
  %4363 = and i32 %4357, 255
  %4364 = tail call i32 @llvm.ctpop.i32(i32 %4363) #9
  %4365 = trunc i32 %4364 to i8
  %4366 = and i8 %4365, 1
  %4367 = xor i8 %4366, 1
  store i8 %4367, i8* %.pre-phi42, align 1, !tbaa !2446
  %4368 = xor i32 %4356, %4354
  %4369 = xor i32 %4368, %4357
  %4370 = lshr i32 %4369, 4
  %4371 = trunc i32 %4370 to i8
  %4372 = and i8 %4371, 1
  store i8 %4372, i8* %.pre-phi44, align 1, !tbaa !2447
  %4373 = icmp eq i32 %4357, 0
  %4374 = zext i1 %4373 to i8
  store i8 %4374, i8* %.pre-phi46, align 1, !tbaa !2448
  %4375 = lshr i32 %4357, 31
  %4376 = trunc i32 %4375 to i8
  store i8 %4376, i8* %.pre-phi48, align 1, !tbaa !2449
  %4377 = lshr i32 %4354, 31
  %4378 = lshr i32 %4356, 31
  %4379 = xor i32 %4375, %4377
  %4380 = xor i32 %4375, %4378
  %4381 = add nuw nsw i32 %4379, %4380
  %4382 = icmp eq i32 %4381, 2
  %4383 = zext i1 %4382 to i8
  store i8 %4383, i8* %.pre-phi50, align 1, !tbaa !2450
  %4384 = sext i32 %4357 to i64
  store i64 %4384, i64* %RCX, align 8, !tbaa !2428
  %4385 = load i64, i64* %RAX, align 8
  %4386 = shl nsw i64 %4384, 2
  %4387 = add i64 %4385, %4386
  %4388 = add i64 %4793, 58
  store i64 %4388, i64* %PC, align 8
  %4389 = load <2 x float>, <2 x float>* %4842, align 1
  %4390 = load <2 x i32>, <2 x i32>* %4843, align 1
  %4391 = inttoptr i64 %4387 to float*
  %4392 = load float, float* %4391, align 4
  %4393 = extractelement <2 x float> %4389, i32 0
  %4394 = fmul float %4393, %4392
  store float %4394, float* %4834, align 1, !tbaa !2451
  %4395 = bitcast <2 x float> %4389 to <2 x i32>
  %4396 = extractelement <2 x i32> %4395, i32 1
  store i32 %4396, i32* %4844, align 1, !tbaa !2451
  %4397 = extractelement <2 x i32> %4390, i32 0
  store i32 %4397, i32* %4845, align 1, !tbaa !2451
  %4398 = extractelement <2 x i32> %4390, i32 1
  store i32 %4398, i32* %4846, align 1, !tbaa !2451
  %4399 = load <2 x float>, <2 x float>* %4847, align 1
  %4400 = load <2 x i32>, <2 x i32>* %4848, align 1
  %4401 = load <2 x float>, <2 x float>* %4842, align 1
  %4402 = extractelement <2 x float> %4399, i32 0
  %4403 = extractelement <2 x float> %4401, i32 0
  %4404 = fadd float %4402, %4403
  store float %4404, float* %4825, align 1, !tbaa !2451
  %4405 = bitcast <2 x float> %4399 to <2 x i32>
  %4406 = extractelement <2 x i32> %4405, i32 1
  store i32 %4406, i32* %4849, align 1, !tbaa !2451
  %4407 = extractelement <2 x i32> %4400, i32 0
  store i32 %4407, i32* %4850, align 1, !tbaa !2451
  %4408 = extractelement <2 x i32> %4400, i32 1
  store i32 %4408, i32* %4851, align 1, !tbaa !2451
  %4409 = add i64 %4351, -32
  %4410 = add i64 %4793, 66
  store i64 %4410, i64* %PC, align 8
  %4411 = inttoptr i64 %4409 to i64*
  %4412 = load i64, i64* %4411, align 8
  store i64 %4412, i64* %RAX, align 8, !tbaa !2428
  %4413 = add i64 %4351, -44
  %4414 = add i64 %4793, 70
  store i64 %4414, i64* %PC, align 8
  %4415 = inttoptr i64 %4413 to i32*
  %4416 = load i32, i32* %4415, align 4
  %4417 = sext i32 %4416 to i64
  store i64 %4417, i64* %RCX, align 8, !tbaa !2428
  %4418 = shl nsw i64 %4417, 2
  %4419 = add i64 %4418, %4412
  %4420 = add i64 %4793, 75
  store i64 %4420, i64* %PC, align 8
  %4421 = inttoptr i64 %4419 to i32*
  %4422 = load i32, i32* %4421, align 4
  store i32 %4422, i32* %4835, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4837, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4839, align 1, !tbaa !2451
  store float 0.000000e+00, float* %4841, align 1, !tbaa !2451
  %4423 = load i64, i64* %RBP, align 8
  %4424 = add i64 %4423, -40
  %4425 = add i64 %4793, 79
  store i64 %4425, i64* %PC, align 8
  %4426 = inttoptr i64 %4424 to i64*
  %4427 = load i64, i64* %4426, align 8
  store i64 %4427, i64* %RAX, align 8, !tbaa !2428
  %4428 = add i64 %4423, -24
  %4429 = add i64 %4793, 82
  store i64 %4429, i64* %PC, align 8
  %4430 = inttoptr i64 %4428 to i32*
  %4431 = load i32, i32* %4430, align 4
  %4432 = zext i32 %4431 to i64
  store i64 %4432, i64* %RDX, align 8, !tbaa !2428
  %4433 = add i64 %4423, -44
  %4434 = add i64 %4793, 86
  store i64 %4434, i64* %PC, align 8
  %4435 = inttoptr i64 %4433 to i32*
  %4436 = load i32, i32* %4435, align 4
  %4437 = sext i32 %4431 to i64
  %4438 = sext i32 %4436 to i64
  %4439 = mul nsw i64 %4438, %4437
  %4440 = trunc i64 %4439 to i32
  %4441 = and i64 %4439, 4294967295
  store i64 %4441, i64* %RDX, align 8, !tbaa !2428
  %4442 = shl i64 %4439, 32
  %4443 = ashr exact i64 %4442, 32
  %4444 = icmp ne i64 %4443, %4439
  %4445 = zext i1 %4444 to i8
  store i8 %4445, i8* %.pre-phi, align 1, !tbaa !2432
  %4446 = and i32 %4440, 255
  %4447 = tail call i32 @llvm.ctpop.i32(i32 %4446) #9
  %4448 = trunc i32 %4447 to i8
  %4449 = and i8 %4448, 1
  %4450 = xor i8 %4449, 1
  store i8 %4450, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4451 = lshr i32 %4440, 31
  %4452 = trunc i32 %4451 to i8
  store i8 %4452, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4445, i8* %.pre-phi50, align 1, !tbaa !2450
  %4453 = add i64 %4423, -48
  %4454 = add i64 %4793, 89
  store i64 %4454, i64* %PC, align 8
  %4455 = trunc i64 %4439 to i32
  %4456 = inttoptr i64 %4453 to i32*
  %4457 = load i32, i32* %4456, align 4
  %4458 = add i32 %4457, %4455
  %4459 = zext i32 %4458 to i64
  store i64 %4459, i64* %RDX, align 8, !tbaa !2428
  %4460 = icmp ult i32 %4458, %4455
  %4461 = icmp ult i32 %4458, %4457
  %4462 = or i1 %4460, %4461
  %4463 = zext i1 %4462 to i8
  store i8 %4463, i8* %.pre-phi, align 1, !tbaa !2432
  %4464 = and i32 %4458, 255
  %4465 = tail call i32 @llvm.ctpop.i32(i32 %4464) #9
  %4466 = trunc i32 %4465 to i8
  %4467 = and i8 %4466, 1
  %4468 = xor i8 %4467, 1
  store i8 %4468, i8* %.pre-phi42, align 1, !tbaa !2446
  %4469 = xor i32 %4457, %4455
  %4470 = xor i32 %4469, %4458
  %4471 = lshr i32 %4470, 4
  %4472 = trunc i32 %4471 to i8
  %4473 = and i8 %4472, 1
  store i8 %4473, i8* %.pre-phi44, align 1, !tbaa !2447
  %4474 = icmp eq i32 %4458, 0
  %4475 = zext i1 %4474 to i8
  store i8 %4475, i8* %.pre-phi46, align 1, !tbaa !2448
  %4476 = lshr i32 %4458, 31
  %4477 = trunc i32 %4476 to i8
  store i8 %4477, i8* %.pre-phi48, align 1, !tbaa !2449
  %4478 = lshr i32 %4455, 31
  %4479 = lshr i32 %4457, 31
  %4480 = xor i32 %4476, %4478
  %4481 = xor i32 %4476, %4479
  %4482 = add nuw nsw i32 %4480, %4481
  %4483 = icmp eq i32 %4482, 2
  %4484 = zext i1 %4483 to i8
  store i8 %4484, i8* %.pre-phi50, align 1, !tbaa !2450
  %4485 = sext i32 %4458 to i64
  store i64 %4485, i64* %RCX, align 8, !tbaa !2428
  %4486 = shl nsw i64 %4485, 2
  %4487 = add i64 %4427, %4486
  %4488 = add i64 %4793, 97
  store i64 %4488, i64* %PC, align 8
  %4489 = load <2 x float>, <2 x float>* %4842, align 1
  %4490 = load <2 x i32>, <2 x i32>* %4843, align 1
  %4491 = inttoptr i64 %4487 to float*
  %4492 = load float, float* %4491, align 4
  %4493 = extractelement <2 x float> %4489, i32 0
  %4494 = fmul float %4493, %4492
  store float %4494, float* %4834, align 1, !tbaa !2451
  %4495 = bitcast <2 x float> %4489 to <2 x i32>
  %4496 = extractelement <2 x i32> %4495, i32 1
  store i32 %4496, i32* %4844, align 1, !tbaa !2451
  %4497 = extractelement <2 x i32> %4490, i32 0
  store i32 %4497, i32* %4845, align 1, !tbaa !2451
  %4498 = extractelement <2 x i32> %4490, i32 1
  store i32 %4498, i32* %4846, align 1, !tbaa !2451
  %4499 = load <2 x float>, <2 x float>* %4847, align 1
  %4500 = load <2 x i32>, <2 x i32>* %4848, align 1
  %4501 = load <2 x float>, <2 x float>* %4842, align 1
  %4502 = extractelement <2 x float> %4499, i32 0
  %4503 = extractelement <2 x float> %4501, i32 0
  %4504 = fadd float %4502, %4503
  store float %4504, float* %4825, align 1, !tbaa !2451
  %4505 = bitcast <2 x float> %4499 to <2 x i32>
  %4506 = extractelement <2 x i32> %4505, i32 1
  store i32 %4506, i32* %4849, align 1, !tbaa !2451
  %4507 = extractelement <2 x i32> %4500, i32 0
  store i32 %4507, i32* %4850, align 1, !tbaa !2451
  %4508 = extractelement <2 x i32> %4500, i32 1
  store i32 %4508, i32* %4851, align 1, !tbaa !2451
  %4509 = load i64, i64* %RBP, align 8
  %4510 = add i64 %4509, -16
  %4511 = add i64 %4793, 105
  store i64 %4511, i64* %PC, align 8
  %4512 = inttoptr i64 %4510 to i64*
  %4513 = load i64, i64* %4512, align 8
  store i64 %4513, i64* %RAX, align 8, !tbaa !2428
  %4514 = add i64 %4509, -48
  %4515 = add i64 %4793, 109
  store i64 %4515, i64* %PC, align 8
  %4516 = inttoptr i64 %4514 to i32*
  %4517 = load i32, i32* %4516, align 4
  %4518 = sext i32 %4517 to i64
  store i64 %4518, i64* %RCX, align 8, !tbaa !2428
  %4519 = shl nsw i64 %4518, 2
  %4520 = add i64 %4519, %4513
  %4521 = add i64 %4793, 114
  store i64 %4521, i64* %PC, align 8
  %4522 = load <2 x float>, <2 x float>* %4847, align 1
  %4523 = extractelement <2 x float> %4522, i32 0
  %4524 = inttoptr i64 %4520 to float*
  store float %4523, float* %4524, align 4
  %4525 = load i64, i64* %RBP, align 8
  %4526 = add i64 %4525, -48
  %4527 = load i64, i64* %PC, align 8
  %4528 = add i64 %4527, 3
  store i64 %4528, i64* %PC, align 8
  %4529 = inttoptr i64 %4526 to i32*
  %4530 = load i32, i32* %4529, align 4
  %4531 = add i32 %4530, 1
  %4532 = zext i32 %4531 to i64
  store i64 %4532, i64* %RAX, align 8, !tbaa !2428
  %4533 = icmp eq i32 %4530, -1
  %4534 = icmp eq i32 %4531, 0
  %4535 = or i1 %4533, %4534
  %4536 = zext i1 %4535 to i8
  store i8 %4536, i8* %.pre-phi, align 1, !tbaa !2432
  %4537 = and i32 %4531, 255
  %4538 = tail call i32 @llvm.ctpop.i32(i32 %4537) #9
  %4539 = trunc i32 %4538 to i8
  %4540 = and i8 %4539, 1
  %4541 = xor i8 %4540, 1
  store i8 %4541, i8* %.pre-phi42, align 1, !tbaa !2446
  %4542 = xor i32 %4531, %4530
  %4543 = lshr i32 %4542, 4
  %4544 = trunc i32 %4543 to i8
  %4545 = and i8 %4544, 1
  store i8 %4545, i8* %.pre-phi44, align 1, !tbaa !2447
  %4546 = zext i1 %4534 to i8
  store i8 %4546, i8* %.pre-phi46, align 1, !tbaa !2448
  %4547 = lshr i32 %4531, 31
  %4548 = trunc i32 %4547 to i8
  store i8 %4548, i8* %.pre-phi48, align 1, !tbaa !2449
  %4549 = lshr i32 %4530, 31
  %4550 = xor i32 %4547, %4549
  %4551 = add nuw nsw i32 %4550, %4547
  %4552 = icmp eq i32 %4551, 2
  %4553 = zext i1 %4552 to i8
  store i8 %4553, i8* %.pre-phi50, align 1, !tbaa !2450
  %4554 = add i64 %4527, 9
  store i64 %4554, i64* %PC, align 8
  store i32 %4531, i32* %4529, align 4
  %4555 = load i64, i64* %PC, align 8
  %4556 = add i64 %4555, -135
  store i64 %4556, i64* %PC, align 8, !tbaa !2428
  br label %block_402089

block_40225d:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit3
  %4557 = add i64 %2896, 3
  store i64 %4557, i64* %PC, align 8
  %4558 = load i32, i32* %2871, align 4
  %4559 = add i32 %4558, -1
  %4560 = zext i32 %4559 to i64
  store i64 %4560, i64* %RAX, align 8, !tbaa !2428
  %4561 = icmp eq i32 %4558, 0
  %4562 = zext i1 %4561 to i8
  store i8 %4562, i8* %.pre-phi, align 1, !tbaa !2432
  %4563 = and i32 %4559, 255
  %4564 = tail call i32 @llvm.ctpop.i32(i32 %4563) #9
  %4565 = trunc i32 %4564 to i8
  %4566 = and i8 %4565, 1
  %4567 = xor i8 %4566, 1
  store i8 %4567, i8* %.pre-phi42, align 1, !tbaa !2446
  %4568 = xor i32 %4559, %4558
  %4569 = lshr i32 %4568, 4
  %4570 = trunc i32 %4569 to i8
  %4571 = and i8 %4570, 1
  store i8 %4571, i8* %.pre-phi44, align 1, !tbaa !2447
  %4572 = icmp eq i32 %4559, 0
  %4573 = zext i1 %4572 to i8
  store i8 %4573, i8* %.pre-phi46, align 1, !tbaa !2448
  %4574 = lshr i32 %4559, 31
  %4575 = trunc i32 %4574 to i8
  store i8 %4575, i8* %.pre-phi48, align 1, !tbaa !2449
  %4576 = lshr i32 %4558, 31
  %4577 = xor i32 %4574, %4576
  %4578 = add nuw nsw i32 %4577, %4576
  %4579 = icmp eq i32 %4578, 2
  %4580 = zext i1 %4579 to i8
  store i8 %4580, i8* %.pre-phi50, align 1, !tbaa !2450
  %4581 = add i64 %2896, 9
  store i64 %4581, i64* %PC, align 8
  store i32 %4559, i32* %2871, align 4
  %4582 = load i64, i64* %RBP, align 8
  %4583 = add i64 %4582, -48
  %4584 = load i64, i64* %PC, align 8
  %4585 = add i64 %4584, 7
  store i64 %4585, i64* %PC, align 8
  %4586 = inttoptr i64 %4583 to i32*
  store i32 0, i32* %4586, align 4
  %4587 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %4588 = bitcast [32 x %union.VectorReg]* %7 to float*
  %4589 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %4590 = getelementptr inbounds i8, i8* %4587, i64 4
  %4591 = bitcast i8* %4590 to float*
  %4592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %4593 = bitcast i64* %4592 to float*
  %4594 = getelementptr inbounds i8, i8* %4587, i64 12
  %4595 = bitcast i8* %4594 to float*
  %4596 = bitcast %union.VectorReg* %8 to i8*
  %4597 = bitcast %union.VectorReg* %8 to float*
  %4598 = bitcast %union.VectorReg* %8 to i32*
  %4599 = getelementptr inbounds i8, i8* %4596, i64 4
  %4600 = bitcast i8* %4599 to float*
  %4601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %4602 = bitcast i64* %4601 to float*
  %4603 = getelementptr inbounds i8, i8* %4596, i64 12
  %4604 = bitcast i8* %4603 to float*
  %4605 = bitcast %union.VectorReg* %8 to <2 x float>*
  %4606 = bitcast i64* %4601 to <2 x i32>*
  %4607 = bitcast i8* %4599 to i32*
  %4608 = bitcast i64* %4601 to i32*
  %4609 = bitcast i8* %4603 to i32*
  %4610 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %4611 = bitcast i64* %4592 to <2 x i32>*
  %4612 = bitcast i8* %4590 to i32*
  %4613 = bitcast i64* %4592 to i32*
  %4614 = bitcast i8* %4594 to i32*
  %.pre34 = load i64, i64* %PC, align 8
  br label %block_40226d

block_402793:                                     ; preds = %block_402459
  %4615 = add i64 %4122, -44
  %4616 = add i64 %4158, 8
  store i64 %4616, i64* %PC, align 8
  %4617 = inttoptr i64 %4615 to i32*
  %4618 = load i32, i32* %4617, align 4
  %4619 = add i32 %4618, 16
  %4620 = zext i32 %4619 to i64
  store i64 %4620, i64* %RAX, align 8, !tbaa !2428
  %4621 = icmp ugt i32 %4618, -17
  %4622 = zext i1 %4621 to i8
  store i8 %4622, i8* %.pre-phi, align 1, !tbaa !2432
  %4623 = and i32 %4619, 255
  %4624 = tail call i32 @llvm.ctpop.i32(i32 %4623) #9
  %4625 = trunc i32 %4624 to i8
  %4626 = and i8 %4625, 1
  %4627 = xor i8 %4626, 1
  store i8 %4627, i8* %.pre-phi42, align 1, !tbaa !2446
  %4628 = xor i32 %4618, 16
  %4629 = xor i32 %4628, %4619
  %4630 = lshr i32 %4629, 4
  %4631 = trunc i32 %4630 to i8
  %4632 = and i8 %4631, 1
  store i8 %4632, i8* %.pre-phi44, align 1, !tbaa !2447
  %4633 = icmp eq i32 %4619, 0
  %4634 = zext i1 %4633 to i8
  store i8 %4634, i8* %.pre-phi46, align 1, !tbaa !2448
  %4635 = lshr i32 %4619, 31
  %4636 = trunc i32 %4635 to i8
  store i8 %4636, i8* %.pre-phi48, align 1, !tbaa !2449
  %4637 = lshr i32 %4618, 31
  %4638 = xor i32 %4635, %4637
  %4639 = add nuw nsw i32 %4638, %4635
  %4640 = icmp eq i32 %4639, 2
  %4641 = zext i1 %4640 to i8
  store i8 %4641, i8* %.pre-phi50, align 1, !tbaa !2450
  %4642 = add i64 %4158, 14
  store i64 %4642, i64* %PC, align 8
  store i32 %4619, i32* %4617, align 4
  %4643 = load i64, i64* %PC, align 8
  %4644 = add i64 %4643, -859
  store i64 %4644, i64* %PC, align 8, !tbaa !2428
  br label %block_402446

block_402446:                                     ; preds = %block_402793, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2
  %4645 = phi i64 [ %4644, %block_402793 ], [ %.pre38, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit2 ]
  %4646 = load i64, i64* %RBP, align 8
  %4647 = add i64 %4646, -44
  %4648 = add i64 %4645, 3
  store i64 %4648, i64* %PC, align 8
  %4649 = inttoptr i64 %4647 to i32*
  %4650 = load i32, i32* %4649, align 4
  %4651 = zext i32 %4650 to i64
  store i64 %4651, i64* %RAX, align 8, !tbaa !2428
  %4652 = add i64 %4646, -20
  %4653 = add i64 %4645, 6
  store i64 %4653, i64* %PC, align 8
  %4654 = inttoptr i64 %4652 to i32*
  %4655 = load i32, i32* %4654, align 4
  %4656 = sub i32 %4650, %4655
  %4657 = icmp ult i32 %4650, %4655
  %4658 = zext i1 %4657 to i8
  store i8 %4658, i8* %.pre-phi, align 1, !tbaa !2432
  %4659 = and i32 %4656, 255
  %4660 = tail call i32 @llvm.ctpop.i32(i32 %4659) #9
  %4661 = trunc i32 %4660 to i8
  %4662 = and i8 %4661, 1
  %4663 = xor i8 %4662, 1
  store i8 %4663, i8* %.pre-phi42, align 1, !tbaa !2446
  %4664 = xor i32 %4655, %4650
  %4665 = xor i32 %4664, %4656
  %4666 = lshr i32 %4665, 4
  %4667 = trunc i32 %4666 to i8
  %4668 = and i8 %4667, 1
  store i8 %4668, i8* %.pre-phi44, align 1, !tbaa !2447
  %4669 = icmp eq i32 %4656, 0
  %4670 = zext i1 %4669 to i8
  store i8 %4670, i8* %.pre-phi46, align 1, !tbaa !2448
  %4671 = lshr i32 %4656, 31
  %4672 = trunc i32 %4671 to i8
  store i8 %4672, i8* %.pre-phi48, align 1, !tbaa !2449
  %4673 = lshr i32 %4650, 31
  %4674 = lshr i32 %4655, 31
  %4675 = xor i32 %4674, %4673
  %4676 = xor i32 %4671, %4673
  %4677 = add nuw nsw i32 %4676, %4675
  %4678 = icmp eq i32 %4677, 2
  %4679 = zext i1 %4678 to i8
  store i8 %4679, i8* %.pre-phi50, align 1, !tbaa !2450
  %4680 = icmp ne i8 %4672, 0
  %4681 = xor i1 %4680, %4678
  %.v59 = select i1 %4681, i64 12, i64 864
  %4682 = add i64 %4645, %.v59
  store i64 %4682, i64* %PC, align 8, !tbaa !2428
  br i1 %4681, label %block_402452, label %block_4027a6

block_40211a:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1, %block_402115
  %4683 = phi i64 [ %4241, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %4757, %block_402115 ]
  %4684 = phi i64 [ %4270, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1 ], [ %3995, %block_402115 ]
  store i64 8, i64* %RAX, align 8, !tbaa !2428
  %4685 = add i64 %4683, -20
  %4686 = add i64 %4684, 8
  store i64 %4686, i64* %PC, align 8
  %4687 = inttoptr i64 %4685 to i32*
  %4688 = load i32, i32* %4687, align 4
  %4689 = zext i32 %4688 to i64
  store i64 %4689, i64* %RCX, align 8, !tbaa !2428
  %4690 = add i64 %4683, -64
  %4691 = add i64 %4684, 11
  store i64 %4691, i64* %PC, align 8
  %4692 = inttoptr i64 %4690 to i32*
  store i32 8, i32* %4692, align 4
  %4693 = load i32, i32* %ECX, align 4
  %4694 = zext i32 %4693 to i64
  %4695 = load i64, i64* %PC, align 8
  store i64 %4694, i64* %RAX, align 8, !tbaa !2428
  %4696 = sext i32 %4693 to i64
  %4697 = lshr i64 %4696, 32
  store i64 %4697, i64* %64, align 8, !tbaa !2428
  %4698 = load i64, i64* %RBP, align 8
  %4699 = add i64 %4698, -64
  %4700 = add i64 %4695, 6
  store i64 %4700, i64* %PC, align 8
  %4701 = inttoptr i64 %4699 to i32*
  %4702 = load i32, i32* %4701, align 4
  %4703 = zext i32 %4702 to i64
  store i64 %4703, i64* %RCX, align 8, !tbaa !2428
  %4704 = add i64 %4695, 8
  store i64 %4704, i64* %PC, align 8
  %4705 = sext i32 %4702 to i64
  %4706 = shl nuw i64 %4697, 32
  %4707 = or i64 %4706, %4694
  %4708 = sdiv i64 %4707, %4705
  %4709 = shl i64 %4708, 32
  %4710 = ashr exact i64 %4709, 32
  %4711 = icmp eq i64 %4708, %4710
  br i1 %4711, label %4714, label %4712

; <label>:4712:                                   ; preds = %block_40211a
  %4713 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4704, %struct.Memory* %4237) #12
  %.pre27 = load i64, i64* %RBP, align 8
  %.pre28 = load i32, i32* %EDX, align 4
  %.pre29 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:4714:                                   ; preds = %block_40211a
  %4715 = srem i64 %4707, %4705
  %4716 = and i64 %4708, 4294967295
  store i64 %4716, i64* %RAX, align 8, !tbaa !2428
  %4717 = and i64 %4715, 4294967295
  store i64 %4717, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %.pre-phi, align 1, !tbaa !2432
  store i8 0, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  store i8 0, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 0, i8* %.pre-phi50, align 1, !tbaa !2450
  %4718 = trunc i64 %4715 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %4714, %4712
  %4719 = phi i64 [ %.pre29, %4712 ], [ %4704, %4714 ]
  %4720 = phi i32 [ %.pre28, %4712 ], [ %4718, %4714 ]
  %4721 = phi i64 [ %.pre27, %4712 ], [ %4698, %4714 ]
  %4722 = phi %struct.Memory* [ %4713, %4712 ], [ %4237, %4714 ]
  %4723 = add i64 %4721, -44
  %4724 = add i64 %4719, 3
  store i64 %4724, i64* %PC, align 8
  %4725 = inttoptr i64 %4723 to i32*
  store i32 %4720, i32* %4725, align 4
  %4726 = load i64, i64* %RBP, align 8
  %4727 = add i64 %4726, -44
  %4728 = load i64, i64* %PC, align 8
  %4729 = add i64 %4728, 4
  store i64 %4729, i64* %PC, align 8
  %4730 = inttoptr i64 %4727 to i32*
  %4731 = load i32, i32* %4730, align 4
  %4732 = add i32 %4731, -4
  %4733 = icmp ult i32 %4731, 4
  %4734 = zext i1 %4733 to i8
  store i8 %4734, i8* %.pre-phi, align 1, !tbaa !2432
  %4735 = and i32 %4732, 255
  %4736 = tail call i32 @llvm.ctpop.i32(i32 %4735) #9
  %4737 = trunc i32 %4736 to i8
  %4738 = and i8 %4737, 1
  %4739 = xor i8 %4738, 1
  store i8 %4739, i8* %.pre-phi42, align 1, !tbaa !2446
  %4740 = xor i32 %4732, %4731
  %4741 = lshr i32 %4740, 4
  %4742 = trunc i32 %4741 to i8
  %4743 = and i8 %4742, 1
  store i8 %4743, i8* %.pre-phi44, align 1, !tbaa !2447
  %4744 = icmp eq i32 %4732, 0
  %4745 = zext i1 %4744 to i8
  store i8 %4745, i8* %.pre-phi46, align 1, !tbaa !2448
  %4746 = lshr i32 %4732, 31
  %4747 = trunc i32 %4746 to i8
  store i8 %4747, i8* %.pre-phi48, align 1, !tbaa !2449
  %4748 = lshr i32 %4731, 31
  %4749 = xor i32 %4746, %4748
  %4750 = add nuw nsw i32 %4749, %4748
  %4751 = icmp eq i32 %4750, 2
  %4752 = zext i1 %4751 to i8
  store i8 %4752, i8* %.pre-phi50, align 1, !tbaa !2450
  %4753 = icmp ne i8 %4747, 0
  %4754 = xor i1 %4753, %4751
  %.v55 = select i1 %4754, i64 269, i64 10
  %4755 = add i64 %4728, %.v55
  store i64 %4755, i64* %PC, align 8, !tbaa !2428
  br i1 %4754, label %block_40223d, label %block_40213a

block_402089:                                     ; preds = %block_402079, %block_402095
  %4756 = phi i64 [ %.pre26, %block_402079 ], [ %4556, %block_402095 ]
  %4757 = load i64, i64* %RBP, align 8
  %4758 = add i64 %4757, -48
  %4759 = add i64 %4756, 3
  store i64 %4759, i64* %PC, align 8
  %4760 = inttoptr i64 %4758 to i32*
  %4761 = load i32, i32* %4760, align 4
  %4762 = zext i32 %4761 to i64
  store i64 %4762, i64* %RAX, align 8, !tbaa !2428
  %4763 = add i64 %4757, -4
  %4764 = add i64 %4756, 6
  store i64 %4764, i64* %PC, align 8
  %4765 = inttoptr i64 %4763 to i32*
  %4766 = load i32, i32* %4765, align 4
  %4767 = sub i32 %4761, %4766
  %4768 = icmp ult i32 %4761, %4766
  %4769 = zext i1 %4768 to i8
  store i8 %4769, i8* %.pre-phi, align 1, !tbaa !2432
  %4770 = and i32 %4767, 255
  %4771 = tail call i32 @llvm.ctpop.i32(i32 %4770) #9
  %4772 = trunc i32 %4771 to i8
  %4773 = and i8 %4772, 1
  %4774 = xor i8 %4773, 1
  store i8 %4774, i8* %.pre-phi42, align 1, !tbaa !2446
  %4775 = xor i32 %4766, %4761
  %4776 = xor i32 %4775, %4767
  %4777 = lshr i32 %4776, 4
  %4778 = trunc i32 %4777 to i8
  %4779 = and i8 %4778, 1
  store i8 %4779, i8* %.pre-phi44, align 1, !tbaa !2447
  %4780 = icmp eq i32 %4767, 0
  %4781 = zext i1 %4780 to i8
  store i8 %4781, i8* %.pre-phi46, align 1, !tbaa !2448
  %4782 = lshr i32 %4767, 31
  %4783 = trunc i32 %4782 to i8
  store i8 %4783, i8* %.pre-phi48, align 1, !tbaa !2449
  %4784 = lshr i32 %4761, 31
  %4785 = lshr i32 %4766, 31
  %4786 = xor i32 %4785, %4784
  %4787 = xor i32 %4782, %4784
  %4788 = add nuw nsw i32 %4787, %4786
  %4789 = icmp eq i32 %4788, 2
  %4790 = zext i1 %4789 to i8
  store i8 %4790, i8* %.pre-phi50, align 1, !tbaa !2450
  %4791 = icmp ne i8 %4783, 0
  %4792 = xor i1 %4791, %4789
  %.v54 = select i1 %4792, i64 12, i64 140
  %4793 = add i64 %4756, %.v54
  store i64 %4793, i64* %PC, align 8, !tbaa !2428
  br i1 %4792, label %block_402095, label %block_402115

block_402079:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit1
  %4794 = add i64 %4270, 3
  store i64 %4794, i64* %PC, align 8
  %4795 = load i32, i32* %4245, align 4
  %4796 = add i32 %4795, -1
  %4797 = zext i32 %4796 to i64
  store i64 %4797, i64* %RAX, align 8, !tbaa !2428
  %4798 = icmp eq i32 %4795, 0
  %4799 = zext i1 %4798 to i8
  store i8 %4799, i8* %.pre-phi, align 1, !tbaa !2432
  %4800 = and i32 %4796, 255
  %4801 = tail call i32 @llvm.ctpop.i32(i32 %4800) #9
  %4802 = trunc i32 %4801 to i8
  %4803 = and i8 %4802, 1
  %4804 = xor i8 %4803, 1
  store i8 %4804, i8* %.pre-phi42, align 1, !tbaa !2446
  %4805 = xor i32 %4796, %4795
  %4806 = lshr i32 %4805, 4
  %4807 = trunc i32 %4806 to i8
  %4808 = and i8 %4807, 1
  store i8 %4808, i8* %.pre-phi44, align 1, !tbaa !2447
  %4809 = icmp eq i32 %4796, 0
  %4810 = zext i1 %4809 to i8
  store i8 %4810, i8* %.pre-phi46, align 1, !tbaa !2448
  %4811 = lshr i32 %4796, 31
  %4812 = trunc i32 %4811 to i8
  store i8 %4812, i8* %.pre-phi48, align 1, !tbaa !2449
  %4813 = lshr i32 %4795, 31
  %4814 = xor i32 %4811, %4813
  %4815 = add nuw nsw i32 %4814, %4813
  %4816 = icmp eq i32 %4815, 2
  %4817 = zext i1 %4816 to i8
  store i8 %4817, i8* %.pre-phi50, align 1, !tbaa !2450
  %4818 = add i64 %4270, 9
  store i64 %4818, i64* %PC, align 8
  store i32 %4796, i32* %4245, align 4
  %4819 = load i64, i64* %RBP, align 8
  %4820 = add i64 %4819, -48
  %4821 = load i64, i64* %PC, align 8
  %4822 = add i64 %4821, 7
  store i64 %4822, i64* %PC, align 8
  %4823 = inttoptr i64 %4820 to i32*
  store i32 0, i32* %4823, align 4
  %4824 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %4825 = bitcast [32 x %union.VectorReg]* %7 to float*
  %4826 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %4827 = getelementptr inbounds i8, i8* %4824, i64 4
  %4828 = bitcast i8* %4827 to float*
  %4829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %4830 = bitcast i64* %4829 to float*
  %4831 = getelementptr inbounds i8, i8* %4824, i64 12
  %4832 = bitcast i8* %4831 to float*
  %4833 = bitcast %union.VectorReg* %8 to i8*
  %4834 = bitcast %union.VectorReg* %8 to float*
  %4835 = bitcast %union.VectorReg* %8 to i32*
  %4836 = getelementptr inbounds i8, i8* %4833, i64 4
  %4837 = bitcast i8* %4836 to float*
  %4838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %4839 = bitcast i64* %4838 to float*
  %4840 = getelementptr inbounds i8, i8* %4833, i64 12
  %4841 = bitcast i8* %4840 to float*
  %4842 = bitcast %union.VectorReg* %8 to <2 x float>*
  %4843 = bitcast i64* %4838 to <2 x i32>*
  %4844 = bitcast i8* %4836 to i32*
  %4845 = bitcast i64* %4838 to i32*
  %4846 = bitcast i8* %4840 to i32*
  %4847 = bitcast [32 x %union.VectorReg]* %7 to <2 x float>*
  %4848 = bitcast i64* %4829 to <2 x i32>*
  %4849 = bitcast i8* %4827 to i32*
  %4850 = bitcast i64* %4829 to i32*
  %4851 = bitcast i8* %4831 to i32*
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_402089

block_402005:                                     ; preds = %block_401ff9
  %4852 = add i64 %2787, -16
  %4853 = add i64 %2823, 4
  store i64 %4853, i64* %PC, align 8
  %4854 = inttoptr i64 %4852 to i64*
  %4855 = load i64, i64* %4854, align 8
  store i64 %4855, i64* %RAX, align 8, !tbaa !2428
  %4856 = add i64 %2823, 8
  store i64 %4856, i64* %PC, align 8
  %4857 = load i32, i32* %2790, align 4
  %4858 = sext i32 %4857 to i64
  store i64 %4858, i64* %RCX, align 8, !tbaa !2428
  %4859 = shl nsw i64 %4858, 2
  %4860 = add i64 %4859, %4855
  %4861 = add i64 %2823, 13
  store i64 %4861, i64* %PC, align 8
  %4862 = inttoptr i64 %4860 to i32*
  %4863 = load i32, i32* %4862, align 4
  store i32 %4863, i32* %201, align 1, !tbaa !2451
  store float 0.000000e+00, float* %203, align 1, !tbaa !2451
  store float 0.000000e+00, float* %205, align 1, !tbaa !2451
  store float 0.000000e+00, float* %207, align 1, !tbaa !2451
  %4864 = add i64 %2787, -32
  %4865 = add i64 %2823, 17
  store i64 %4865, i64* %PC, align 8
  %4866 = inttoptr i64 %4864 to i64*
  %4867 = load i64, i64* %4866, align 8
  store i64 %4867, i64* %RAX, align 8, !tbaa !2428
  %4868 = add i64 %2787, -44
  %4869 = add i64 %2823, 21
  store i64 %4869, i64* %PC, align 8
  %4870 = inttoptr i64 %4868 to i32*
  %4871 = load i32, i32* %4870, align 4
  %4872 = sext i32 %4871 to i64
  store i64 %4872, i64* %RCX, align 8, !tbaa !2428
  %4873 = shl nsw i64 %4872, 2
  %4874 = add i64 %4873, %4867
  %4875 = add i64 %2823, 26
  store i64 %4875, i64* %PC, align 8
  %4876 = inttoptr i64 %4874 to i32*
  %4877 = load i32, i32* %4876, align 4
  store i32 %4877, i32* %210, align 1, !tbaa !2451
  store float 0.000000e+00, float* %212, align 1, !tbaa !2451
  store float 0.000000e+00, float* %214, align 1, !tbaa !2451
  store float 0.000000e+00, float* %216, align 1, !tbaa !2451
  %4878 = add i64 %2787, -40
  %4879 = add i64 %2823, 30
  store i64 %4879, i64* %PC, align 8
  %4880 = inttoptr i64 %4878 to i64*
  %4881 = load i64, i64* %4880, align 8
  store i64 %4881, i64* %RAX, align 8, !tbaa !2428
  %4882 = add i64 %2787, -24
  %4883 = add i64 %2823, 33
  store i64 %4883, i64* %PC, align 8
  %4884 = inttoptr i64 %4882 to i32*
  %4885 = load i32, i32* %4884, align 4
  %4886 = zext i32 %4885 to i64
  store i64 %4886, i64* %RDX, align 8, !tbaa !2428
  %4887 = add i64 %2823, 37
  store i64 %4887, i64* %PC, align 8
  %4888 = load i32, i32* %4870, align 4
  %4889 = sext i32 %4885 to i64
  %4890 = sext i32 %4888 to i64
  %4891 = mul nsw i64 %4890, %4889
  %4892 = trunc i64 %4891 to i32
  %4893 = and i64 %4891, 4294967295
  store i64 %4893, i64* %RDX, align 8, !tbaa !2428
  %4894 = shl i64 %4891, 32
  %4895 = ashr exact i64 %4894, 32
  %4896 = icmp ne i64 %4895, %4891
  %4897 = zext i1 %4896 to i8
  store i8 %4897, i8* %.pre-phi, align 1, !tbaa !2432
  %4898 = and i32 %4892, 255
  %4899 = tail call i32 @llvm.ctpop.i32(i32 %4898) #9
  %4900 = trunc i32 %4899 to i8
  %4901 = and i8 %4900, 1
  %4902 = xor i8 %4901, 1
  store i8 %4902, i8* %.pre-phi42, align 1, !tbaa !2446
  store i8 0, i8* %.pre-phi44, align 1, !tbaa !2447
  store i8 0, i8* %.pre-phi46, align 1, !tbaa !2448
  %4903 = lshr i32 %4892, 31
  %4904 = trunc i32 %4903 to i8
  store i8 %4904, i8* %.pre-phi48, align 1, !tbaa !2449
  store i8 %4897, i8* %.pre-phi50, align 1, !tbaa !2450
  %4905 = add i64 %2823, 40
  store i64 %4905, i64* %PC, align 8
  %4906 = trunc i64 %4891 to i32
  %4907 = load i32, i32* %2790, align 4
  %4908 = add i32 %4907, %4906
  %4909 = zext i32 %4908 to i64
  store i64 %4909, i64* %RDX, align 8, !tbaa !2428
  %4910 = icmp ult i32 %4908, %4906
  %4911 = icmp ult i32 %4908, %4907
  %4912 = or i1 %4910, %4911
  %4913 = zext i1 %4912 to i8
  store i8 %4913, i8* %.pre-phi, align 1, !tbaa !2432
  %4914 = and i32 %4908, 255
  %4915 = tail call i32 @llvm.ctpop.i32(i32 %4914) #9
  %4916 = trunc i32 %4915 to i8
  %4917 = and i8 %4916, 1
  %4918 = xor i8 %4917, 1
  store i8 %4918, i8* %.pre-phi42, align 1, !tbaa !2446
  %4919 = xor i32 %4907, %4906
  %4920 = xor i32 %4919, %4908
  %4921 = lshr i32 %4920, 4
  %4922 = trunc i32 %4921 to i8
  %4923 = and i8 %4922, 1
  store i8 %4923, i8* %.pre-phi44, align 1, !tbaa !2447
  %4924 = icmp eq i32 %4908, 0
  %4925 = zext i1 %4924 to i8
  store i8 %4925, i8* %.pre-phi46, align 1, !tbaa !2448
  %4926 = lshr i32 %4908, 31
  %4927 = trunc i32 %4926 to i8
  store i8 %4927, i8* %.pre-phi48, align 1, !tbaa !2449
  %4928 = lshr i32 %4906, 31
  %4929 = lshr i32 %4907, 31
  %4930 = xor i32 %4926, %4928
  %4931 = xor i32 %4926, %4929
  %4932 = add nuw nsw i32 %4930, %4931
  %4933 = icmp eq i32 %4932, 2
  %4934 = zext i1 %4933 to i8
  store i8 %4934, i8* %.pre-phi50, align 1, !tbaa !2450
  %4935 = sext i32 %4908 to i64
  store i64 %4935, i64* %RCX, align 8, !tbaa !2428
  %4936 = shl nsw i64 %4935, 2
  %4937 = add i64 %4881, %4936
  %4938 = add i64 %2823, 48
  store i64 %4938, i64* %PC, align 8
  %4939 = load <2 x float>, <2 x float>* %217, align 1
  %4940 = load <2 x i32>, <2 x i32>* %218, align 1
  %4941 = inttoptr i64 %4937 to float*
  %4942 = load float, float* %4941, align 4
  %4943 = extractelement <2 x float> %4939, i32 0
  %4944 = fmul float %4943, %4942
  store float %4944, float* %209, align 1, !tbaa !2451
  %4945 = bitcast <2 x float> %4939 to <2 x i32>
  %4946 = extractelement <2 x i32> %4945, i32 1
  store i32 %4946, i32* %219, align 1, !tbaa !2451
  %4947 = extractelement <2 x i32> %4940, i32 0
  store i32 %4947, i32* %220, align 1, !tbaa !2451
  %4948 = extractelement <2 x i32> %4940, i32 1
  store i32 %4948, i32* %221, align 1, !tbaa !2451
  %4949 = load <2 x float>, <2 x float>* %222, align 1
  %4950 = load <2 x i32>, <2 x i32>* %223, align 1
  %4951 = load <2 x float>, <2 x float>* %217, align 1
  %4952 = extractelement <2 x float> %4949, i32 0
  %4953 = extractelement <2 x float> %4951, i32 0
  %4954 = fadd float %4952, %4953
  store float %4954, float* %200, align 1, !tbaa !2451
  %4955 = bitcast <2 x float> %4949 to <2 x i32>
  %4956 = extractelement <2 x i32> %4955, i32 1
  store i32 %4956, i32* %224, align 1, !tbaa !2451
  %4957 = extractelement <2 x i32> %4950, i32 0
  store i32 %4957, i32* %225, align 1, !tbaa !2451
  %4958 = extractelement <2 x i32> %4950, i32 1
  store i32 %4958, i32* %226, align 1, !tbaa !2451
  %4959 = load i64, i64* %RBP, align 8
  %4960 = add i64 %4959, -16
  %4961 = add i64 %2823, 56
  store i64 %4961, i64* %PC, align 8
  %4962 = inttoptr i64 %4960 to i64*
  %4963 = load i64, i64* %4962, align 8
  store i64 %4963, i64* %RAX, align 8, !tbaa !2428
  %4964 = add i64 %4959, -48
  %4965 = add i64 %2823, 60
  store i64 %4965, i64* %PC, align 8
  %4966 = inttoptr i64 %4964 to i32*
  %4967 = load i32, i32* %4966, align 4
  %4968 = sext i32 %4967 to i64
  store i64 %4968, i64* %RCX, align 8, !tbaa !2428
  %4969 = shl nsw i64 %4968, 2
  %4970 = add i64 %4969, %4963
  %4971 = add i64 %2823, 65
  store i64 %4971, i64* %PC, align 8
  %4972 = load <2 x float>, <2 x float>* %222, align 1
  %4973 = extractelement <2 x float> %4972, i32 0
  %4974 = inttoptr i64 %4970 to float*
  store float %4973, float* %4974, align 4
  %4975 = load i64, i64* %RBP, align 8
  %4976 = add i64 %4975, -48
  %4977 = load i64, i64* %PC, align 8
  %4978 = add i64 %4977, 3
  store i64 %4978, i64* %PC, align 8
  %4979 = inttoptr i64 %4976 to i32*
  %4980 = load i32, i32* %4979, align 4
  %4981 = add i32 %4980, 1
  %4982 = zext i32 %4981 to i64
  store i64 %4982, i64* %RAX, align 8, !tbaa !2428
  %4983 = icmp eq i32 %4980, -1
  %4984 = icmp eq i32 %4981, 0
  %4985 = or i1 %4983, %4984
  %4986 = zext i1 %4985 to i8
  store i8 %4986, i8* %.pre-phi, align 1, !tbaa !2432
  %4987 = and i32 %4981, 255
  %4988 = tail call i32 @llvm.ctpop.i32(i32 %4987) #9
  %4989 = trunc i32 %4988 to i8
  %4990 = and i8 %4989, 1
  %4991 = xor i8 %4990, 1
  store i8 %4991, i8* %.pre-phi42, align 1, !tbaa !2446
  %4992 = xor i32 %4981, %4980
  %4993 = lshr i32 %4992, 4
  %4994 = trunc i32 %4993 to i8
  %4995 = and i8 %4994, 1
  store i8 %4995, i8* %.pre-phi44, align 1, !tbaa !2447
  %4996 = zext i1 %4984 to i8
  store i8 %4996, i8* %.pre-phi46, align 1, !tbaa !2448
  %4997 = lshr i32 %4981, 31
  %4998 = trunc i32 %4997 to i8
  store i8 %4998, i8* %.pre-phi48, align 1, !tbaa !2449
  %4999 = lshr i32 %4980, 31
  %5000 = xor i32 %4997, %4999
  %5001 = add nuw nsw i32 %5000, %4997
  %5002 = icmp eq i32 %5001, 2
  %5003 = zext i1 %5002 to i8
  store i8 %5003, i8* %.pre-phi50, align 1, !tbaa !2450
  %5004 = add i64 %4977, 9
  store i64 %5004, i64* %PC, align 8
  store i32 %4981, i32* %4979, align 4
  %5005 = load i64, i64* %PC, align 8
  %5006 = add i64 %5005, -86
  store i64 %5006, i64* %PC, align 8, !tbaa !2428
  br label %block_401ff9
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_402b40_idamax(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402b40:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %7, i64* %12, align 8
  store i64 %11, i64* %9, align 8, !tbaa !2428
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -16
  %15 = load i32, i32* %EDI, align 4
  %16 = add i64 %13, 6
  store i64 %16, i64* %PC, align 8
  %17 = inttoptr i64 %14 to i32*
  store i32 %15, i32* %17, align 4
  %18 = load i64, i64* %RBP, align 8
  %19 = add i64 %18, -16
  %20 = load i64, i64* %RSI, align 8
  %21 = load i64, i64* %PC, align 8
  %22 = add i64 %21, 4
  store i64 %22, i64* %PC, align 8
  %23 = inttoptr i64 %19 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load i64, i64* %RBP, align 8
  %25 = add i64 %24, -20
  %26 = load i32, i32* %EDX, align 4
  %27 = load i64, i64* %PC, align 8
  %28 = add i64 %27, 3
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %25 to i32*
  store i32 %26, i32* %29, align 4
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 4
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %31 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = icmp eq i32 %35, 0
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = and i32 %36, 255
  %41 = tail call i32 @llvm.ctpop.i32(i32 %40) #9
  %42 = trunc i32 %41 to i8
  %43 = and i8 %42, 1
  %44 = xor i8 %43, 1
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %44, i8* %45, align 1, !tbaa !2446
  %46 = xor i32 %36, %35
  %47 = lshr i32 %46, 4
  %48 = trunc i32 %47 to i8
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = icmp eq i32 %36, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %36, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = lshr i32 %35, 31
  %58 = xor i32 %54, %57
  %59 = add nuw nsw i32 %58, %57
  %60 = icmp eq i32 %59, 2
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = icmp ne i8 %55, 0
  %64 = xor i1 %63, %60
  %.v = select i1 %64, i64 10, i64 22
  %65 = add i64 %32, %.v
  store i64 %65, i64* %PC, align 8, !tbaa !2428
  br i1 %64, label %block_402b58, label %block_402b64

block_402b7a:                                     ; preds = %block_402b64
  %66 = add i64 %30, -20
  %67 = add i64 %674, 4
  store i64 %67, i64* %PC, align 8
  %68 = inttoptr i64 %66 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = add i32 %69, -1
  %71 = icmp eq i32 %69, 0
  %72 = zext i1 %71 to i8
  store i8 %72, i8* %39, align 1, !tbaa !2432
  %73 = and i32 %70, 255
  %74 = tail call i32 @llvm.ctpop.i32(i32 %73) #9
  %75 = trunc i32 %74 to i8
  %76 = and i8 %75, 1
  %77 = xor i8 %76, 1
  store i8 %77, i8* %45, align 1, !tbaa !2446
  %78 = xor i32 %70, %69
  %79 = lshr i32 %78, 4
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  store i8 %81, i8* %50, align 1, !tbaa !2447
  %82 = icmp eq i32 %70, 0
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %53, align 1, !tbaa !2448
  %84 = lshr i32 %70, 31
  %85 = trunc i32 %84 to i8
  store i8 %85, i8* %56, align 1, !tbaa !2449
  %86 = lshr i32 %69, 31
  %87 = xor i32 %84, %86
  %88 = add nuw nsw i32 %87, %86
  %89 = icmp eq i32 %88, 2
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %62, align 1, !tbaa !2450
  %.v28 = select i1 %82, i64 179, i64 10
  %91 = add i64 %674, %.v28
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  br i1 %82, label %block_402c2d, label %block_402b84

block_402b84:                                     ; preds = %block_402b7a
  %92 = add i64 %30, -32
  %93 = add i64 %91, 7
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to i32*
  store i32 1, i32* %94, align 4
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -16
  %97 = load i64, i64* %PC, align 8
  %98 = add i64 %97, 4
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %96 to i64*
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %102 = add i64 %97, 8
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %100 to float*
  %104 = load float, float* %103, align 4
  %105 = fpext float %104 to double
  %106 = bitcast [32 x %union.VectorReg]* %5 to double*
  %107 = bitcast %union.VectorReg* %6 to i8*
  %108 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %109 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %110 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %111 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  %112 = bitcast %union.VectorReg* %6 to i32*
  store i32 %108, i32* %112, align 1, !tbaa !2451
  %113 = getelementptr inbounds i8, i8* %107, i64 4
  %114 = bitcast i8* %113 to i32*
  store i32 %109, i32* %114, align 1, !tbaa !2451
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %116 = bitcast i64* %115 to i32*
  store i32 %110, i32* %116, align 1, !tbaa !2451
  %117 = getelementptr inbounds i8, i8* %107, i64 12
  %118 = bitcast i8* %117 to i32*
  store i32 %111, i32* %118, align 1, !tbaa !2451
  %119 = bitcast double %105 to i64
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %121 = load i64, i64* %120, align 1
  %122 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %123 = load i64, i64* %122, align 1
  %124 = load i64, i64* %115, align 1
  %125 = and i64 %123, %119
  %126 = and i64 %124, %121
  %127 = trunc i64 %125 to i32
  %128 = lshr i64 %125, 32
  %129 = trunc i64 %128 to i32
  %130 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %127, i32* %130, align 1, !tbaa !2456
  %131 = getelementptr inbounds i8, i8* %101, i64 4
  %132 = bitcast i8* %131 to i32*
  store i32 %129, i32* %132, align 1, !tbaa !2456
  %133 = trunc i64 %126 to i32
  %134 = bitcast i64* %120 to i32*
  store i32 %133, i32* %134, align 1, !tbaa !2456
  %135 = lshr i64 %126, 32
  %136 = trunc i64 %135 to i32
  %137 = getelementptr inbounds i8, i8* %101, i64 12
  %138 = bitcast i8* %137 to i32*
  store i32 %136, i32* %138, align 1, !tbaa !2456
  %139 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %140 = load <2 x i32>, <2 x i32>* %139, align 1
  %141 = bitcast i64* %120 to <2 x i32>*
  %142 = load <2 x i32>, <2 x i32>* %141, align 1
  %.cast = bitcast <2 x i32> %140 to double
  %143 = fptrunc double %.cast to float
  %144 = bitcast [32 x %union.VectorReg]* %5 to float*
  store float %143, float* %144, align 1, !tbaa !2451
  %145 = extractelement <2 x i32> %140, i32 1
  store i32 %145, i32* %132, align 1, !tbaa !2451
  %146 = extractelement <2 x i32> %142, i32 0
  store i32 %146, i32* %134, align 1, !tbaa !2451
  %147 = extractelement <2 x i32> %142, i32 1
  store i32 %147, i32* %138, align 1, !tbaa !2451
  %148 = add i64 %95, -24
  %149 = add i64 %97, 28
  store i64 %149, i64* %PC, align 8
  %150 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %151 = load <2 x float>, <2 x float>* %150, align 1
  %152 = extractelement <2 x float> %151, i32 0
  %153 = inttoptr i64 %148 to float*
  store float %152, float* %153, align 4
  %154 = load i64, i64* %RBP, align 8
  %155 = add i64 %154, -32
  %156 = load i64, i64* %PC, align 8
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %155 to i32*
  %159 = load i32, i32* %158, align 4
  %160 = zext i32 %159 to i64
  store i64 %160, i64* %RCX, align 8, !tbaa !2428
  %161 = add i64 %154, -20
  %162 = add i64 %156, 6
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = add i32 %164, %159
  %166 = zext i32 %165 to i64
  store i64 %166, i64* %RCX, align 8, !tbaa !2428
  %167 = icmp ult i32 %165, %159
  %168 = icmp ult i32 %165, %164
  %169 = or i1 %167, %168
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %39, align 1, !tbaa !2432
  %171 = and i32 %165, 255
  %172 = tail call i32 @llvm.ctpop.i32(i32 %171) #9
  %173 = trunc i32 %172 to i8
  %174 = and i8 %173, 1
  %175 = xor i8 %174, 1
  store i8 %175, i8* %45, align 1, !tbaa !2446
  %176 = xor i32 %164, %159
  %177 = xor i32 %176, %165
  %178 = lshr i32 %177, 4
  %179 = trunc i32 %178 to i8
  %180 = and i8 %179, 1
  store i8 %180, i8* %50, align 1, !tbaa !2447
  %181 = icmp eq i32 %165, 0
  %182 = zext i1 %181 to i8
  store i8 %182, i8* %53, align 1, !tbaa !2448
  %183 = lshr i32 %165, 31
  %184 = trunc i32 %183 to i8
  store i8 %184, i8* %56, align 1, !tbaa !2449
  %185 = lshr i32 %159, 31
  %186 = lshr i32 %164, 31
  %187 = xor i32 %183, %185
  %188 = xor i32 %183, %186
  %189 = add nuw nsw i32 %187, %188
  %190 = icmp eq i32 %189, 2
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %62, align 1, !tbaa !2450
  %192 = add i64 %156, 9
  store i64 %192, i64* %PC, align 8
  store i32 %165, i32* %158, align 4
  %193 = load i64, i64* %RBP, align 8
  %194 = add i64 %193, -28
  %195 = load i64, i64* %PC, align 8
  %196 = add i64 %195, 7
  store i64 %196, i64* %PC, align 8
  %197 = inttoptr i64 %194 to i32*
  store i32 1, i32* %197, align 4
  %198 = bitcast %union.VectorReg* %6 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402bb7

block_402c57:                                     ; preds = %block_402c2d, %block_402cb1
  %199 = phi i64 [ %.pre21, %block_402c2d ], [ %340, %block_402cb1 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_402c2d ], [ %300, %block_402cb1 ]
  %200 = load i64, i64* %RBP, align 8
  %201 = add i64 %200, -28
  %202 = add i64 %199, 3
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = zext i32 %204 to i64
  store i64 %205, i64* %RAX, align 8, !tbaa !2428
  %206 = add i64 %200, -8
  %207 = add i64 %199, 6
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = sub i32 %204, %209
  %211 = icmp ult i32 %204, %209
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %39, align 1, !tbaa !2432
  %213 = and i32 %210, 255
  %214 = tail call i32 @llvm.ctpop.i32(i32 %213) #9
  %215 = trunc i32 %214 to i8
  %216 = and i8 %215, 1
  %217 = xor i8 %216, 1
  store i8 %217, i8* %45, align 1, !tbaa !2446
  %218 = xor i32 %209, %204
  %219 = xor i32 %218, %210
  %220 = lshr i32 %219, 4
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  store i8 %222, i8* %50, align 1, !tbaa !2447
  %223 = icmp eq i32 %210, 0
  %224 = zext i1 %223 to i8
  store i8 %224, i8* %53, align 1, !tbaa !2448
  %225 = lshr i32 %210, 31
  %226 = trunc i32 %225 to i8
  store i8 %226, i8* %56, align 1, !tbaa !2449
  %227 = lshr i32 %204, 31
  %228 = lshr i32 %209, 31
  %229 = xor i32 %228, %227
  %230 = xor i32 %225, %227
  %231 = add nuw nsw i32 %230, %229
  %232 = icmp eq i32 %231, 2
  %233 = zext i1 %232 to i8
  store i8 %233, i8* %62, align 1, !tbaa !2450
  %234 = icmp ne i8 %226, 0
  %235 = xor i1 %234, %232
  %.v31 = select i1 %235, i64 12, i64 109
  %236 = add i64 %199, %.v31
  store i64 %236, i64* %PC, align 8, !tbaa !2428
  br i1 %235, label %block_402c63, label %block_402cc9.loopexit

block_402c63:                                     ; preds = %block_402c57
  %237 = add i64 %200, -16
  %238 = add i64 %236, 4
  store i64 %238, i64* %PC, align 8
  %239 = inttoptr i64 %237 to i64*
  %240 = load i64, i64* %239, align 8
  store i64 %240, i64* %RAX, align 8, !tbaa !2428
  %241 = add i64 %236, 8
  store i64 %241, i64* %PC, align 8
  %242 = load i32, i32* %203, align 4
  %243 = sext i32 %242 to i64
  store i64 %243, i64* %RCX, align 8, !tbaa !2428
  %244 = shl nsw i64 %243, 2
  %245 = add i64 %244, %240
  %246 = add i64 %236, 13
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %245 to float*
  %248 = load float, float* %247, align 4
  %249 = fpext float %248 to double
  %250 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %251 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %252 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %253 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %250, i32* %361, align 1, !tbaa !2451
  store i32 %251, i32* %363, align 1, !tbaa !2451
  store i32 %252, i32* %365, align 1, !tbaa !2451
  store i32 %253, i32* %367, align 1, !tbaa !2451
  %254 = bitcast double %249 to i64
  %255 = load i64, i64* %369, align 1
  %256 = load i64, i64* %371, align 1
  %257 = load i64, i64* %364, align 1
  %258 = and i64 %256, %254
  %259 = and i64 %257, %255
  %260 = trunc i64 %258 to i32
  %261 = lshr i64 %258, 32
  %262 = trunc i64 %261 to i32
  store i32 %260, i32* %379, align 1, !tbaa !2456
  store i32 %262, i32* %381, align 1, !tbaa !2456
  %263 = trunc i64 %259 to i32
  store i32 %263, i32* %383, align 1, !tbaa !2456
  %264 = lshr i64 %259, 32
  %265 = trunc i64 %264 to i32
  store i32 %265, i32* %387, align 1, !tbaa !2456
  %266 = add i64 %200, -24
  %267 = add i64 %236, 29
  store i64 %267, i64* %PC, align 8
  %268 = inttoptr i64 %266 to float*
  %269 = load float, float* %268, align 4
  %270 = fpext float %269 to double
  store double %270, double* %408, align 1, !tbaa !2454
  %271 = add i64 %236, 33
  store i64 %271, i64* %PC, align 8
  %272 = load double, double* %355, align 1
  %273 = fcmp uno double %272, %270
  br i1 %273, label %274, label %284

; <label>:274:                                    ; preds = %block_402c63
  %275 = fadd double %270, %272
  %276 = bitcast double %275 to i64
  %277 = and i64 %276, 9221120237041090560
  %278 = icmp eq i64 %277, 9218868437227405312
  %279 = and i64 %276, 2251799813685247
  %280 = icmp ne i64 %279, 0
  %281 = and i1 %278, %280
  br i1 %281, label %282, label %290

; <label>:282:                                    ; preds = %274
  %283 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %271, %struct.Memory* %MEMORY.0) #12
  %.pre22 = load i64, i64* %PC, align 8
  %.pre23 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre24 = load i8, i8* %53, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:284:                                    ; preds = %block_402c63
  %285 = fcmp ogt double %272, %270
  br i1 %285, label %290, label %286

; <label>:286:                                    ; preds = %284
  %287 = fcmp olt double %272, %270
  br i1 %287, label %290, label %288

; <label>:288:                                    ; preds = %286
  %289 = fcmp oeq double %272, %270
  br i1 %289, label %290, label %294

; <label>:290:                                    ; preds = %288, %286, %284, %274
  %291 = phi i8 [ 0, %284 ], [ 0, %286 ], [ 1, %288 ], [ 1, %274 ]
  %292 = phi i8 [ 0, %284 ], [ 0, %286 ], [ 0, %288 ], [ 1, %274 ]
  %293 = phi i8 [ 0, %284 ], [ 1, %286 ], [ 0, %288 ], [ 1, %274 ]
  store i8 %291, i8* %53, align 1, !tbaa !2453
  store i8 %292, i8* %45, align 1, !tbaa !2453
  store i8 %293, i8* %39, align 1, !tbaa !2453
  br label %294

; <label>:294:                                    ; preds = %290, %288
  %295 = phi i8 [ %291, %290 ], [ %224, %288 ]
  %296 = phi i8 [ %293, %290 ], [ %212, %288 ]
  store i8 0, i8* %62, align 1, !tbaa !2453
  store i8 0, i8* %56, align 1, !tbaa !2453
  store i8 0, i8* %50, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %294, %282
  %297 = phi i8 [ %.pre24, %282 ], [ %295, %294 ]
  %298 = phi i8 [ %.pre23, %282 ], [ %296, %294 ]
  %299 = phi i64 [ %.pre22, %282 ], [ %271, %294 ]
  %300 = phi %struct.Memory* [ %283, %282 ], [ %MEMORY.0, %294 ]
  %301 = or i8 %297, %298
  %302 = icmp ne i8 %301, 0
  %.v32 = select i1 %302, i64 45, i64 6
  %303 = add i64 %299, %.v32
  store i64 %303, i64* %PC, align 8, !tbaa !2428
  br i1 %302, label %block_402cb1, label %block_402c8a

block_402b58:                                     ; preds = %block_402b40
  %304 = add i64 %30, -4
  %305 = add i64 %65, 7
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to i32*
  store i32 -1, i32* %306, align 4
  %307 = load i64, i64* %PC, align 8
  %308 = add i64 %307, 368
  store i64 %308, i64* %PC, align 8, !tbaa !2428
  br label %block_402ccf

block_402cb1:                                     ; preds = %block_402c8a, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %309 = phi i64 [ %.pre25, %block_402c8a ], [ %303, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1 ]
  %310 = load i64, i64* %RBP, align 8
  %311 = add i64 %310, -28
  %312 = add i64 %309, 8
  store i64 %312, i64* %PC, align 8
  %313 = inttoptr i64 %311 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = add i32 %314, 1
  %316 = zext i32 %315 to i64
  store i64 %316, i64* %RAX, align 8, !tbaa !2428
  %317 = icmp eq i32 %314, -1
  %318 = icmp eq i32 %315, 0
  %319 = or i1 %317, %318
  %320 = zext i1 %319 to i8
  store i8 %320, i8* %39, align 1, !tbaa !2432
  %321 = and i32 %315, 255
  %322 = tail call i32 @llvm.ctpop.i32(i32 %321) #9
  %323 = trunc i32 %322 to i8
  %324 = and i8 %323, 1
  %325 = xor i8 %324, 1
  store i8 %325, i8* %45, align 1, !tbaa !2446
  %326 = xor i32 %315, %314
  %327 = lshr i32 %326, 4
  %328 = trunc i32 %327 to i8
  %329 = and i8 %328, 1
  store i8 %329, i8* %50, align 1, !tbaa !2447
  %330 = zext i1 %318 to i8
  store i8 %330, i8* %53, align 1, !tbaa !2448
  %331 = lshr i32 %315, 31
  %332 = trunc i32 %331 to i8
  store i8 %332, i8* %56, align 1, !tbaa !2449
  %333 = lshr i32 %314, 31
  %334 = xor i32 %331, %333
  %335 = add nuw nsw i32 %334, %331
  %336 = icmp eq i32 %335, 2
  %337 = zext i1 %336 to i8
  store i8 %337, i8* %62, align 1, !tbaa !2450
  %338 = add i64 %309, 14
  store i64 %338, i64* %PC, align 8
  store i32 %315, i32* %313, align 4
  %339 = load i64, i64* %PC, align 8
  %340 = add i64 %339, -104
  store i64 %340, i64* %PC, align 8, !tbaa !2428
  br label %block_402c57

block_402c2d:                                     ; preds = %block_402b7a
  %341 = add i64 %30, -36
  %342 = add i64 %91, 7
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to i32*
  store i32 0, i32* %343, align 4
  %344 = load i64, i64* %RBP, align 8
  %345 = add i64 %344, -16
  %346 = load i64, i64* %PC, align 8
  %347 = add i64 %346, 4
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %345 to i64*
  %349 = load i64, i64* %348, align 8
  store i64 %349, i64* %RAX, align 8, !tbaa !2428
  %350 = bitcast [32 x %union.VectorReg]* %5 to i8*
  %351 = add i64 %346, 8
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %349 to float*
  %353 = load float, float* %352, align 4
  %354 = fpext float %353 to double
  %355 = bitcast [32 x %union.VectorReg]* %5 to double*
  %356 = bitcast %union.VectorReg* %6 to i8*
  %357 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %358 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %359 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %360 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  %361 = bitcast %union.VectorReg* %6 to i32*
  store i32 %357, i32* %361, align 1, !tbaa !2451
  %362 = getelementptr inbounds i8, i8* %356, i64 4
  %363 = bitcast i8* %362 to i32*
  store i32 %358, i32* %363, align 1, !tbaa !2451
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %365 = bitcast i64* %364 to i32*
  store i32 %359, i32* %365, align 1, !tbaa !2451
  %366 = getelementptr inbounds i8, i8* %356, i64 12
  %367 = bitcast i8* %366 to i32*
  store i32 %360, i32* %367, align 1, !tbaa !2451
  %368 = bitcast double %354 to i64
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %370 = load i64, i64* %369, align 1
  %371 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  %372 = load i64, i64* %371, align 1
  %373 = load i64, i64* %364, align 1
  %374 = and i64 %372, %368
  %375 = and i64 %373, %370
  %376 = trunc i64 %374 to i32
  %377 = lshr i64 %374, 32
  %378 = trunc i64 %377 to i32
  %379 = bitcast [32 x %union.VectorReg]* %5 to i32*
  store i32 %376, i32* %379, align 1, !tbaa !2456
  %380 = getelementptr inbounds i8, i8* %350, i64 4
  %381 = bitcast i8* %380 to i32*
  store i32 %378, i32* %381, align 1, !tbaa !2456
  %382 = trunc i64 %375 to i32
  %383 = bitcast i64* %369 to i32*
  store i32 %382, i32* %383, align 1, !tbaa !2456
  %384 = lshr i64 %375, 32
  %385 = trunc i64 %384 to i32
  %386 = getelementptr inbounds i8, i8* %350, i64 12
  %387 = bitcast i8* %386 to i32*
  store i32 %385, i32* %387, align 1, !tbaa !2456
  %388 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %389 = load <2 x i32>, <2 x i32>* %388, align 1
  %390 = bitcast i64* %369 to <2 x i32>*
  %391 = load <2 x i32>, <2 x i32>* %390, align 1
  %.cast13 = bitcast <2 x i32> %389 to double
  %392 = fptrunc double %.cast13 to float
  %393 = bitcast [32 x %union.VectorReg]* %5 to float*
  store float %392, float* %393, align 1, !tbaa !2451
  %394 = extractelement <2 x i32> %389, i32 1
  store i32 %394, i32* %381, align 1, !tbaa !2451
  %395 = extractelement <2 x i32> %391, i32 0
  store i32 %395, i32* %383, align 1, !tbaa !2451
  %396 = extractelement <2 x i32> %391, i32 1
  store i32 %396, i32* %387, align 1, !tbaa !2451
  %397 = add i64 %344, -24
  %398 = add i64 %346, 28
  store i64 %398, i64* %PC, align 8
  %399 = bitcast [32 x %union.VectorReg]* %5 to <2 x float>*
  %400 = load <2 x float>, <2 x float>* %399, align 1
  %401 = extractelement <2 x float> %400, i32 0
  %402 = inttoptr i64 %397 to float*
  store float %401, float* %402, align 4
  %403 = load i64, i64* %RBP, align 8
  %404 = add i64 %403, -28
  %405 = load i64, i64* %PC, align 8
  %406 = add i64 %405, 7
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %404 to i32*
  store i32 1, i32* %407, align 4
  %408 = bitcast %union.VectorReg* %6 to double*
  %.pre21 = load i64, i64* %PC, align 8
  br label %block_402c57

block_402bb7:                                     ; preds = %block_402c11, %block_402b84
  %409 = phi i64 [ %.pre, %block_402b84 ], [ %581, %block_402c11 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_402b84 ], [ %740, %block_402c11 ]
  %410 = load i64, i64* %RBP, align 8
  %411 = add i64 %410, -28
  %412 = add i64 %409, 3
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i32*
  %414 = load i32, i32* %413, align 4
  %415 = zext i32 %414 to i64
  store i64 %415, i64* %RAX, align 8, !tbaa !2428
  %416 = add i64 %410, -8
  %417 = add i64 %409, 6
  store i64 %417, i64* %PC, align 8
  %418 = inttoptr i64 %416 to i32*
  %419 = load i32, i32* %418, align 4
  %420 = sub i32 %414, %419
  %421 = icmp ult i32 %414, %419
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %39, align 1, !tbaa !2432
  %423 = and i32 %420, 255
  %424 = tail call i32 @llvm.ctpop.i32(i32 %423) #9
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  %427 = xor i8 %426, 1
  store i8 %427, i8* %45, align 1, !tbaa !2446
  %428 = xor i32 %419, %414
  %429 = xor i32 %428, %420
  %430 = lshr i32 %429, 4
  %431 = trunc i32 %430 to i8
  %432 = and i8 %431, 1
  store i8 %432, i8* %50, align 1, !tbaa !2447
  %433 = icmp eq i32 %420, 0
  %434 = zext i1 %433 to i8
  store i8 %434, i8* %53, align 1, !tbaa !2448
  %435 = lshr i32 %420, 31
  %436 = trunc i32 %435 to i8
  store i8 %436, i8* %56, align 1, !tbaa !2449
  %437 = lshr i32 %414, 31
  %438 = lshr i32 %419, 31
  %439 = xor i32 %438, %437
  %440 = xor i32 %435, %437
  %441 = add nuw nsw i32 %440, %439
  %442 = icmp eq i32 %441, 2
  %443 = zext i1 %442 to i8
  store i8 %443, i8* %62, align 1, !tbaa !2450
  %444 = icmp ne i8 %436, 0
  %445 = xor i1 %444, %442
  %.v29 = select i1 %445, i64 12, i64 113
  %446 = add i64 %409, %.v29
  store i64 %446, i64* %PC, align 8, !tbaa !2428
  br i1 %445, label %block_402bc3, label %block_402cc9.loopexit41

block_402bea:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -28
  %449 = add i64 %743, 3
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to i32*
  %451 = load i32, i32* %450, align 4
  %452 = zext i32 %451 to i64
  store i64 %452, i64* %RAX, align 8, !tbaa !2428
  %453 = add i64 %447, -36
  %454 = add i64 %743, 6
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %453 to i32*
  store i32 %451, i32* %455, align 4
  %456 = load i64, i64* %RBP, align 8
  %457 = add i64 %456, -16
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 4
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %457 to i64*
  %461 = load i64, i64* %460, align 8
  store i64 %461, i64* %RCX, align 8, !tbaa !2428
  %462 = add i64 %456, -32
  %463 = add i64 %458, 8
  store i64 %463, i64* %PC, align 8
  %464 = inttoptr i64 %462 to i32*
  %465 = load i32, i32* %464, align 4
  %466 = sext i32 %465 to i64
  store i64 %466, i64* %RDX, align 8, !tbaa !2428
  %467 = shl nsw i64 %466, 2
  %468 = add i64 %467, %461
  %469 = add i64 %458, 13
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %468 to float*
  %471 = load float, float* %470, align 4
  %472 = fpext float %471 to double
  %473 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %474 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %475 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %476 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %473, i32* %112, align 1, !tbaa !2451
  store i32 %474, i32* %114, align 1, !tbaa !2451
  store i32 %475, i32* %116, align 1, !tbaa !2451
  store i32 %476, i32* %118, align 1, !tbaa !2451
  %477 = bitcast double %472 to i64
  %478 = load i64, i64* %120, align 1
  %479 = load i64, i64* %122, align 1
  %480 = load i64, i64* %115, align 1
  %481 = and i64 %479, %477
  %482 = and i64 %480, %478
  %483 = trunc i64 %481 to i32
  %484 = lshr i64 %481, 32
  %485 = trunc i64 %484 to i32
  store i32 %483, i32* %130, align 1, !tbaa !2456
  store i32 %485, i32* %132, align 1, !tbaa !2456
  %486 = trunc i64 %482 to i32
  store i32 %486, i32* %134, align 1, !tbaa !2456
  %487 = lshr i64 %482, 32
  %488 = trunc i64 %487 to i32
  store i32 %488, i32* %138, align 1, !tbaa !2456
  %489 = load <2 x i32>, <2 x i32>* %139, align 1
  %490 = load <2 x i32>, <2 x i32>* %141, align 1
  %.cast12 = bitcast <2 x i32> %489 to double
  %491 = fptrunc double %.cast12 to float
  store float %491, float* %144, align 1, !tbaa !2451
  %492 = extractelement <2 x i32> %489, i32 1
  store i32 %492, i32* %132, align 1, !tbaa !2451
  %493 = extractelement <2 x i32> %490, i32 0
  store i32 %493, i32* %134, align 1, !tbaa !2451
  %494 = extractelement <2 x i32> %490, i32 1
  store i32 %494, i32* %138, align 1, !tbaa !2451
  %495 = add i64 %456, -24
  %496 = add i64 %458, 33
  store i64 %496, i64* %PC, align 8
  %497 = load <2 x float>, <2 x float>* %150, align 1
  %498 = extractelement <2 x float> %497, i32 0
  %499 = inttoptr i64 %495 to float*
  store float %498, float* %499, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_402c11

block_402cc9.loopexit:                            ; preds = %block_402c57
  br label %block_402cc9

block_402cc9.loopexit41:                          ; preds = %block_402bb7
  br label %block_402cc9

block_402cc9:                                     ; preds = %block_402cc9.loopexit41, %block_402cc9.loopexit
  %500 = phi i64 [ %200, %block_402cc9.loopexit ], [ %410, %block_402cc9.loopexit41 ]
  %501 = phi i64 [ %236, %block_402cc9.loopexit ], [ %446, %block_402cc9.loopexit41 ]
  %.sink5 = phi i64 [ 5, %block_402cc9.loopexit ], [ 161, %block_402cc9.loopexit41 ]
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.0, %block_402cc9.loopexit ], [ %MEMORY.2, %block_402cc9.loopexit41 ]
  %502 = add i64 %501, %.sink5
  %503 = add i64 %500, -36
  %504 = add i64 %502, 3
  store i64 %504, i64* %PC, align 8
  %505 = inttoptr i64 %503 to i32*
  %506 = load i32, i32* %505, align 4
  %507 = zext i32 %506 to i64
  store i64 %507, i64* %RAX, align 8, !tbaa !2428
  %508 = add i64 %500, -4
  %509 = add i64 %502, 6
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %508 to i32*
  store i32 %506, i32* %510, align 4
  %.pre26 = load i64, i64* %PC, align 8
  br label %block_402ccf

block_402c11:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_402bea
  %511 = phi i64 [ %743, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %.pre20, %block_402bea ]
  %512 = load i64, i64* %RBP, align 8
  %513 = add i64 %512, -32
  %514 = add i64 %511, 3
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %513 to i32*
  %516 = load i32, i32* %515, align 4
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = add i64 %512, -20
  %519 = add i64 %511, 6
  store i64 %519, i64* %PC, align 8
  %520 = inttoptr i64 %518 to i32*
  %521 = load i32, i32* %520, align 4
  %522 = add i32 %521, %516
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %RAX, align 8, !tbaa !2428
  %524 = icmp ult i32 %522, %516
  %525 = icmp ult i32 %522, %521
  %526 = or i1 %524, %525
  %527 = zext i1 %526 to i8
  store i8 %527, i8* %39, align 1, !tbaa !2432
  %528 = and i32 %522, 255
  %529 = tail call i32 @llvm.ctpop.i32(i32 %528) #9
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  %532 = xor i8 %531, 1
  store i8 %532, i8* %45, align 1, !tbaa !2446
  %533 = xor i32 %521, %516
  %534 = xor i32 %533, %522
  %535 = lshr i32 %534, 4
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  store i8 %537, i8* %50, align 1, !tbaa !2447
  %538 = icmp eq i32 %522, 0
  %539 = zext i1 %538 to i8
  store i8 %539, i8* %53, align 1, !tbaa !2448
  %540 = lshr i32 %522, 31
  %541 = trunc i32 %540 to i8
  store i8 %541, i8* %56, align 1, !tbaa !2449
  %542 = lshr i32 %516, 31
  %543 = lshr i32 %521, 31
  %544 = xor i32 %540, %542
  %545 = xor i32 %540, %543
  %546 = add nuw nsw i32 %544, %545
  %547 = icmp eq i32 %546, 2
  %548 = zext i1 %547 to i8
  store i8 %548, i8* %62, align 1, !tbaa !2450
  %549 = add i64 %511, 9
  store i64 %549, i64* %PC, align 8
  store i32 %522, i32* %515, align 4
  %550 = load i64, i64* %RBP, align 8
  %551 = add i64 %550, -28
  %552 = load i64, i64* %PC, align 8
  %553 = add i64 %552, 3
  store i64 %553, i64* %PC, align 8
  %554 = inttoptr i64 %551 to i32*
  %555 = load i32, i32* %554, align 4
  %556 = add i32 %555, 1
  %557 = zext i32 %556 to i64
  store i64 %557, i64* %RAX, align 8, !tbaa !2428
  %558 = icmp eq i32 %555, -1
  %559 = icmp eq i32 %556, 0
  %560 = or i1 %558, %559
  %561 = zext i1 %560 to i8
  store i8 %561, i8* %39, align 1, !tbaa !2432
  %562 = and i32 %556, 255
  %563 = tail call i32 @llvm.ctpop.i32(i32 %562) #9
  %564 = trunc i32 %563 to i8
  %565 = and i8 %564, 1
  %566 = xor i8 %565, 1
  store i8 %566, i8* %45, align 1, !tbaa !2446
  %567 = xor i32 %556, %555
  %568 = lshr i32 %567, 4
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  store i8 %570, i8* %50, align 1, !tbaa !2447
  %571 = zext i1 %559 to i8
  store i8 %571, i8* %53, align 1, !tbaa !2448
  %572 = lshr i32 %556, 31
  %573 = trunc i32 %572 to i8
  store i8 %573, i8* %56, align 1, !tbaa !2449
  %574 = lshr i32 %555, 31
  %575 = xor i32 %572, %574
  %576 = add nuw nsw i32 %575, %572
  %577 = icmp eq i32 %576, 2
  %578 = zext i1 %577 to i8
  store i8 %578, i8* %62, align 1, !tbaa !2450
  %579 = add i64 %552, 9
  store i64 %579, i64* %PC, align 8
  store i32 %556, i32* %554, align 4
  %580 = load i64, i64* %PC, align 8
  %581 = add i64 %580, -108
  store i64 %581, i64* %PC, align 8, !tbaa !2428
  br label %block_402bb7

block_402ccf:                                     ; preds = %block_402b6e, %block_402cc9, %block_402b58
  %582 = phi i64 [ %.pre26, %block_402cc9 ], [ %748, %block_402b6e ], [ %308, %block_402b58 ]
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.3, %block_402cc9 ], [ %2, %block_402b6e ], [ %2, %block_402b58 ]
  %583 = load i64, i64* %RBP, align 8
  %584 = add i64 %583, -4
  %585 = add i64 %582, 3
  store i64 %585, i64* %PC, align 8
  %586 = inttoptr i64 %584 to i32*
  %587 = load i32, i32* %586, align 4
  %588 = zext i32 %587 to i64
  store i64 %588, i64* %RAX, align 8, !tbaa !2428
  %589 = add i64 %582, 4
  store i64 %589, i64* %PC, align 8
  %590 = load i64, i64* %9, align 8, !tbaa !2428
  %591 = add i64 %590, 8
  %592 = inttoptr i64 %590 to i64*
  %593 = load i64, i64* %592, align 8
  store i64 %593, i64* %RBP, align 8, !tbaa !2428
  store i64 %591, i64* %9, align 8, !tbaa !2428
  %594 = add i64 %582, 5
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %591 to i64*
  %596 = load i64, i64* %595, align 8
  store i64 %596, i64* %PC, align 8, !tbaa !2428
  %597 = add i64 %590, 16
  store i64 %597, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.5

block_402c8a:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %598 = load i64, i64* %RBP, align 8
  %599 = add i64 %598, -28
  %600 = add i64 %303, 3
  store i64 %600, i64* %PC, align 8
  %601 = inttoptr i64 %599 to i32*
  %602 = load i32, i32* %601, align 4
  %603 = zext i32 %602 to i64
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = add i64 %598, -36
  %605 = add i64 %303, 6
  store i64 %605, i64* %PC, align 8
  %606 = inttoptr i64 %604 to i32*
  store i32 %602, i32* %606, align 4
  %607 = load i64, i64* %RBP, align 8
  %608 = add i64 %607, -16
  %609 = load i64, i64* %PC, align 8
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC, align 8
  %611 = inttoptr i64 %608 to i64*
  %612 = load i64, i64* %611, align 8
  store i64 %612, i64* %RCX, align 8, !tbaa !2428
  %613 = add i64 %607, -28
  %614 = add i64 %609, 8
  store i64 %614, i64* %PC, align 8
  %615 = inttoptr i64 %613 to i32*
  %616 = load i32, i32* %615, align 4
  %617 = sext i32 %616 to i64
  store i64 %617, i64* %RDX, align 8, !tbaa !2428
  %618 = shl nsw i64 %617, 2
  %619 = add i64 %618, %612
  %620 = add i64 %609, 13
  store i64 %620, i64* %PC, align 8
  %621 = inttoptr i64 %619 to float*
  %622 = load float, float* %621, align 4
  %623 = fpext float %622 to double
  %624 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %625 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %626 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %627 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %624, i32* %361, align 1, !tbaa !2451
  store i32 %625, i32* %363, align 1, !tbaa !2451
  store i32 %626, i32* %365, align 1, !tbaa !2451
  store i32 %627, i32* %367, align 1, !tbaa !2451
  %628 = bitcast double %623 to i64
  %629 = load i64, i64* %369, align 1
  %630 = load i64, i64* %371, align 1
  %631 = load i64, i64* %364, align 1
  %632 = and i64 %630, %628
  %633 = and i64 %631, %629
  %634 = trunc i64 %632 to i32
  %635 = lshr i64 %632, 32
  %636 = trunc i64 %635 to i32
  store i32 %634, i32* %379, align 1, !tbaa !2456
  store i32 %636, i32* %381, align 1, !tbaa !2456
  %637 = trunc i64 %633 to i32
  store i32 %637, i32* %383, align 1, !tbaa !2456
  %638 = lshr i64 %633, 32
  %639 = trunc i64 %638 to i32
  store i32 %639, i32* %387, align 1, !tbaa !2456
  %640 = load <2 x i32>, <2 x i32>* %388, align 1
  %641 = load <2 x i32>, <2 x i32>* %390, align 1
  %.cast14 = bitcast <2 x i32> %640 to double
  %642 = fptrunc double %.cast14 to float
  store float %642, float* %393, align 1, !tbaa !2451
  %643 = extractelement <2 x i32> %640, i32 1
  store i32 %643, i32* %381, align 1, !tbaa !2451
  %644 = extractelement <2 x i32> %641, i32 0
  store i32 %644, i32* %383, align 1, !tbaa !2451
  %645 = extractelement <2 x i32> %641, i32 1
  store i32 %645, i32* %387, align 1, !tbaa !2451
  %646 = add i64 %607, -24
  %647 = add i64 %609, 33
  store i64 %647, i64* %PC, align 8
  %648 = load <2 x float>, <2 x float>* %399, align 1
  %649 = extractelement <2 x float> %648, i32 0
  %650 = inttoptr i64 %646 to float*
  store float %649, float* %650, align 4
  %.pre25 = load i64, i64* %PC, align 8
  br label %block_402cb1

block_402b64:                                     ; preds = %block_402b40
  %651 = add i64 %65, 4
  store i64 %651, i64* %PC, align 8
  %652 = load i32, i32* %34, align 4
  %653 = add i32 %652, -1
  %654 = icmp eq i32 %652, 0
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %39, align 1, !tbaa !2432
  %656 = and i32 %653, 255
  %657 = tail call i32 @llvm.ctpop.i32(i32 %656) #9
  %658 = trunc i32 %657 to i8
  %659 = and i8 %658, 1
  %660 = xor i8 %659, 1
  store i8 %660, i8* %45, align 1, !tbaa !2446
  %661 = xor i32 %653, %652
  %662 = lshr i32 %661, 4
  %663 = trunc i32 %662 to i8
  %664 = and i8 %663, 1
  store i8 %664, i8* %50, align 1, !tbaa !2447
  %665 = icmp eq i32 %653, 0
  %666 = zext i1 %665 to i8
  store i8 %666, i8* %53, align 1, !tbaa !2448
  %667 = lshr i32 %653, 31
  %668 = trunc i32 %667 to i8
  store i8 %668, i8* %56, align 1, !tbaa !2449
  %669 = lshr i32 %652, 31
  %670 = xor i32 %667, %669
  %671 = add nuw nsw i32 %670, %669
  %672 = icmp eq i32 %671, 2
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %62, align 1, !tbaa !2450
  %.v27 = select i1 %665, i64 10, i64 22
  %674 = add i64 %65, %.v27
  store i64 %674, i64* %PC, align 8, !tbaa !2428
  br i1 %665, label %block_402b6e, label %block_402b7a

block_402bc3:                                     ; preds = %block_402bb7
  %675 = add i64 %410, -16
  %676 = add i64 %446, 4
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %675 to i64*
  %678 = load i64, i64* %677, align 8
  store i64 %678, i64* %RAX, align 8, !tbaa !2428
  %679 = add i64 %410, -32
  %680 = add i64 %446, 8
  store i64 %680, i64* %PC, align 8
  %681 = inttoptr i64 %679 to i32*
  %682 = load i32, i32* %681, align 4
  %683 = sext i32 %682 to i64
  store i64 %683, i64* %RCX, align 8, !tbaa !2428
  %684 = shl nsw i64 %683, 2
  %685 = add i64 %684, %678
  %686 = add i64 %446, 13
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %685 to float*
  %688 = load float, float* %687, align 4
  %689 = fpext float %688 to double
  %690 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 96) to i32*), align 16
  %691 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 100) to i32*), align 4
  %692 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 104) to i32*), align 8
  %693 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 108) to i32*), align 4
  store i32 %690, i32* %112, align 1, !tbaa !2451
  store i32 %691, i32* %114, align 1, !tbaa !2451
  store i32 %692, i32* %116, align 1, !tbaa !2451
  store i32 %693, i32* %118, align 1, !tbaa !2451
  %694 = bitcast double %689 to i64
  %695 = load i64, i64* %120, align 1
  %696 = load i64, i64* %122, align 1
  %697 = load i64, i64* %115, align 1
  %698 = and i64 %696, %694
  %699 = and i64 %697, %695
  %700 = trunc i64 %698 to i32
  %701 = lshr i64 %698, 32
  %702 = trunc i64 %701 to i32
  store i32 %700, i32* %130, align 1, !tbaa !2456
  store i32 %702, i32* %132, align 1, !tbaa !2456
  %703 = trunc i64 %699 to i32
  store i32 %703, i32* %134, align 1, !tbaa !2456
  %704 = lshr i64 %699, 32
  %705 = trunc i64 %704 to i32
  store i32 %705, i32* %138, align 1, !tbaa !2456
  %706 = add i64 %410, -24
  %707 = add i64 %446, 29
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to float*
  %709 = load float, float* %708, align 4
  %710 = fpext float %709 to double
  store double %710, double* %198, align 1, !tbaa !2454
  %711 = add i64 %446, 33
  store i64 %711, i64* %PC, align 8
  %712 = load double, double* %106, align 1
  %713 = fcmp uno double %712, %710
  br i1 %713, label %714, label %724

; <label>:714:                                    ; preds = %block_402bc3
  %715 = fadd double %710, %712
  %716 = bitcast double %715 to i64
  %717 = and i64 %716, 9221120237041090560
  %718 = icmp eq i64 %717, 9218868437227405312
  %719 = and i64 %716, 2251799813685247
  %720 = icmp ne i64 %719, 0
  %721 = and i1 %718, %720
  br i1 %721, label %722, label %730

; <label>:722:                                    ; preds = %714
  %723 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %711, %struct.Memory* %MEMORY.2) #12
  %.pre17 = load i64, i64* %PC, align 8
  %.pre18 = load i8, i8* %39, align 1, !tbaa !2432
  %.pre19 = load i8, i8* %53, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:724:                                    ; preds = %block_402bc3
  %725 = fcmp ogt double %712, %710
  br i1 %725, label %730, label %726

; <label>:726:                                    ; preds = %724
  %727 = fcmp olt double %712, %710
  br i1 %727, label %730, label %728

; <label>:728:                                    ; preds = %726
  %729 = fcmp oeq double %712, %710
  br i1 %729, label %730, label %734

; <label>:730:                                    ; preds = %728, %726, %724, %714
  %731 = phi i8 [ 0, %724 ], [ 0, %726 ], [ 1, %728 ], [ 1, %714 ]
  %732 = phi i8 [ 0, %724 ], [ 0, %726 ], [ 0, %728 ], [ 1, %714 ]
  %733 = phi i8 [ 0, %724 ], [ 1, %726 ], [ 0, %728 ], [ 1, %714 ]
  store i8 %731, i8* %53, align 1, !tbaa !2453
  store i8 %732, i8* %45, align 1, !tbaa !2453
  store i8 %733, i8* %39, align 1, !tbaa !2453
  br label %734

; <label>:734:                                    ; preds = %730, %728
  %735 = phi i8 [ %731, %730 ], [ %434, %728 ]
  %736 = phi i8 [ %733, %730 ], [ %422, %728 ]
  store i8 0, i8* %62, align 1, !tbaa !2453
  store i8 0, i8* %56, align 1, !tbaa !2453
  store i8 0, i8* %50, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %734, %722
  %737 = phi i8 [ %.pre19, %722 ], [ %735, %734 ]
  %738 = phi i8 [ %.pre18, %722 ], [ %736, %734 ]
  %739 = phi i64 [ %.pre17, %722 ], [ %711, %734 ]
  %740 = phi %struct.Memory* [ %723, %722 ], [ %MEMORY.2, %734 ]
  %741 = or i8 %737, %738
  %742 = icmp ne i8 %741, 0
  %.v30 = select i1 %742, i64 45, i64 6
  %743 = add i64 %739, %.v30
  store i64 %743, i64* %PC, align 8, !tbaa !2428
  br i1 %742, label %block_402c11, label %block_402bea

block_402b6e:                                     ; preds = %block_402b64
  %744 = add i64 %30, -4
  %745 = add i64 %674, 7
  store i64 %745, i64* %PC, align 8
  %746 = inttoptr i64 %744 to i32*
  store i32 0, i32* %746, align 4
  %747 = load i64, i64* %PC, align 8
  %748 = add i64 %747, 346
  store i64 %748, i64* %PC, align 8, !tbaa !2428
  br label %block_402ccf
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_4029e0_ddot(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr #7 {
block_4029e0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %R8D = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11 = load i64, i64* %10, align 8, !tbaa !2428
  %12 = add i64 %11, -8
  %13 = inttoptr i64 %12 to i64*
  store i64 %8, i64* %13, align 8
  store i64 %12, i64* %10, align 8, !tbaa !2428
  %14 = load i64, i64* %PC, align 8
  store i64 %12, i64* %RBP, align 8, !tbaa !2428
  %15 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %17 = bitcast [32 x %union.VectorReg]* %6 to i32*
  %18 = getelementptr inbounds i8, i8* %15, i64 4
  %19 = bitcast i8* %18 to i32*
  %20 = bitcast i64* %16 to i32*
  %21 = getelementptr inbounds i8, i8* %15, i64 12
  %22 = bitcast i8* %21 to i32*
  %23 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %23, align 1, !tbaa !2456
  %24 = add i64 %11, -16
  %25 = load i32, i32* %EDI, align 4
  %26 = add i64 %14, 9
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %24 to i32*
  store i32 %25, i32* %27, align 4
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %RSI, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 4
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %29 to i64*
  store i64 %30, i64* %33, align 8
  %34 = load i64, i64* %RBP, align 8
  %35 = add i64 %34, -20
  %36 = load i32, i32* %EDX, align 4
  %37 = load i64, i64* %PC, align 8
  %38 = add i64 %37, 3
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %35 to i32*
  store i32 %36, i32* %39, align 4
  %40 = load i64, i64* %RBP, align 8
  %41 = add i64 %40, -32
  %42 = load i64, i64* %RCX, align 8
  %43 = load i64, i64* %PC, align 8
  %44 = add i64 %43, 4
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %41 to i64*
  store i64 %42, i64* %45, align 8
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -36
  %48 = load i32, i32* %R8D, align 4
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %47 to i32*
  store i32 %48, i32* %51, align 4
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -60
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 7
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %53 to i32*
  store i32 0, i32* %56, align 4
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -56
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 7
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  store i32 0, i32* %61, align 4
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -40
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 5
  store i64 %65, i64* %PC, align 8
  %66 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %67 = load <2 x float>, <2 x float>* %66, align 1
  %68 = extractelement <2 x float> %67, i32 0
  %69 = inttoptr i64 %63 to float*
  store float %68, float* %69, align 4
  %70 = load i64, i64* %RBP, align 8
  %71 = add i64 %70, -8
  %72 = load i64, i64* %PC, align 8
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %71 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = and i32 %75, 255
  %78 = tail call i32 @llvm.ctpop.i32(i32 %77) #9
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  %81 = xor i8 %80, 1
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %81, i8* %82, align 1, !tbaa !2446
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %83, align 1, !tbaa !2447
  %84 = icmp eq i32 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i32 %75, 31
  %88 = trunc i32 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = xor i1 %84, true
  %92 = icmp eq i8 %88, 0
  %93 = and i1 %92, %91
  %.v23 = select i1 %93, i64 23, i64 10
  %94 = add i64 %72, %.v23
  store i64 %94, i64* %PC, align 8, !tbaa !2428
  br i1 %93, label %block_402a23, label %block_402a16

block_402a7e:                                     ; preds = %block_402a8a, %block_402a77
  %95 = phi i64 [ %517, %block_402a8a ], [ %.pre14, %block_402a77 ]
  %96 = load i64, i64* %RBP, align 8
  %97 = add i64 %96, -44
  %98 = add i64 %95, 3
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %RAX, align 8, !tbaa !2428
  %102 = add i64 %96, -8
  %103 = add i64 %95, 6
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = sub i32 %100, %105
  %107 = icmp ult i32 %100, %105
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %76, align 1, !tbaa !2432
  %109 = and i32 %106, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #9
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %82, align 1, !tbaa !2446
  %114 = xor i32 %105, %100
  %115 = xor i32 %114, %106
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %83, align 1, !tbaa !2447
  %119 = icmp eq i32 %106, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %86, align 1, !tbaa !2448
  %121 = lshr i32 %106, 31
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %89, align 1, !tbaa !2449
  %123 = lshr i32 %100, 31
  %124 = lshr i32 %105, 31
  %125 = xor i32 %124, %123
  %126 = xor i32 %121, %123
  %127 = add nuw nsw i32 %126, %125
  %128 = icmp eq i32 %127, 2
  %129 = zext i1 %128 to i8
  store i8 %129, i8* %90, align 1, !tbaa !2450
  %130 = icmp ne i8 %122, 0
  %131 = xor i1 %130, %128
  %.v21 = select i1 %131, i64 12, i64 84
  %132 = add i64 %95, %.v21
  %133 = add i64 %96, -40
  %134 = add i64 %132, 5
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %133 to i32*
  %136 = load i32, i32* %135, align 4
  store i32 %136, i32* %17, align 1, !tbaa !2451
  store float 0.000000e+00, float* %339, align 1, !tbaa !2451
  store float 0.000000e+00, float* %340, align 1, !tbaa !2451
  store float 0.000000e+00, float* %341, align 1, !tbaa !2451
  br i1 %131, label %block_402a8a, label %block_402ad2

block_402b2a:                                     ; preds = %block_402ae8
  %137 = add i64 %182, -4
  %138 = add i64 %218, 10
  store i64 %138, i64* %PC, align 8
  %139 = load <2 x float>, <2 x float>* %66, align 1
  %140 = extractelement <2 x float> %139, i32 0
  %141 = inttoptr i64 %137 to float*
  store float %140, float* %141, align 4
  %.pre15 = load i64, i64* %PC, align 8
  br label %block_402b34

block_402a5e:                                     ; preds = %block_402a37, %block_402a4f
  %142 = phi i64 [ %333, %block_402a37 ], [ %.pre11, %block_402a4f ]
  %143 = phi i64 [ %317, %block_402a37 ], [ %.pre10, %block_402a4f ]
  %144 = add i64 %143, -36
  %145 = add i64 %142, 4
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i32*
  %147 = load i32, i32* %146, align 4
  store i8 0, i8* %76, align 1, !tbaa !2432
  %148 = and i32 %147, 255
  %149 = tail call i32 @llvm.ctpop.i32(i32 %148) #9
  %150 = trunc i32 %149 to i8
  %151 = and i8 %150, 1
  %152 = xor i8 %151, 1
  store i8 %152, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  %153 = icmp eq i32 %147, 0
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %86, align 1, !tbaa !2448
  %155 = lshr i32 %147, 31
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  %157 = icmp ne i8 %156, 0
  %.v7 = select i1 %157, i64 6, i64 21
  %158 = add i64 %145, %.v7
  store i64 %158, i64* %PC, align 8, !tbaa !2428
  br i1 %157, label %block_402a68, label %block_402a77

block_402ad2:                                     ; preds = %block_402a7e
  %159 = add i64 %96, -4
  %160 = add i64 %132, 10
  store i64 %160, i64* %PC, align 8
  %161 = load <2 x float>, <2 x float>* %66, align 1
  %162 = extractelement <2 x float> %161, i32 0
  %163 = inttoptr i64 %159 to float*
  store float %162, float* %163, align 4
  %164 = load i64, i64* %PC, align 8
  %165 = add i64 %164, 88
  store i64 %165, i64* %PC, align 8, !tbaa !2428
  br label %block_402b34

block_402b34:                                     ; preds = %block_402a16, %block_402ad2, %block_402b2a
  %.pre-phi20 = phi float* [ %.pre19, %block_402a16 ], [ %341, %block_402ad2 ], [ %678, %block_402b2a ]
  %.pre-phi18 = phi float* [ %.pre17, %block_402a16 ], [ %340, %block_402ad2 ], [ %677, %block_402b2a ]
  %.pre-phi = phi float* [ %.pre16, %block_402a16 ], [ %339, %block_402ad2 ], [ %676, %block_402b2a ]
  %166 = phi i64 [ %230, %block_402a16 ], [ %165, %block_402ad2 ], [ %.pre15, %block_402b2a ]
  %167 = load i64, i64* %RBP, align 8
  %168 = add i64 %167, -4
  %169 = add i64 %166, 5
  store i64 %169, i64* %PC, align 8
  %170 = inttoptr i64 %168 to i32*
  %171 = load i32, i32* %170, align 4
  store i32 %171, i32* %17, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %.pre-phi20, align 1, !tbaa !2451
  %172 = add i64 %166, 6
  store i64 %172, i64* %PC, align 8
  %173 = load i64, i64* %10, align 8, !tbaa !2428
  %174 = add i64 %173, 8
  %175 = inttoptr i64 %173 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %RBP, align 8, !tbaa !2428
  store i64 %174, i64* %10, align 8, !tbaa !2428
  %177 = add i64 %166, 7
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %174 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  %180 = add i64 %173, 16
  store i64 %180, i64* %10, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_402ae8:                                     ; preds = %block_402ae1, %block_402af4
  %181 = phi i64 [ %.pre, %block_402ae1 ], [ %646, %block_402af4 ]
  %182 = load i64, i64* %RBP, align 8
  %183 = add i64 %182, -44
  %184 = add i64 %181, 3
  store i64 %184, i64* %PC, align 8
  %185 = inttoptr i64 %183 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = zext i32 %186 to i64
  store i64 %187, i64* %RAX, align 8, !tbaa !2428
  %188 = add i64 %182, -8
  %189 = add i64 %181, 6
  store i64 %189, i64* %PC, align 8
  %190 = inttoptr i64 %188 to i32*
  %191 = load i32, i32* %190, align 4
  %192 = sub i32 %186, %191
  %193 = icmp ult i32 %186, %191
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %76, align 1, !tbaa !2432
  %195 = and i32 %192, 255
  %196 = tail call i32 @llvm.ctpop.i32(i32 %195) #9
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  store i8 %199, i8* %82, align 1, !tbaa !2446
  %200 = xor i32 %191, %186
  %201 = xor i32 %200, %192
  %202 = lshr i32 %201, 4
  %203 = trunc i32 %202 to i8
  %204 = and i8 %203, 1
  store i8 %204, i8* %83, align 1, !tbaa !2447
  %205 = icmp eq i32 %192, 0
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %86, align 1, !tbaa !2448
  %207 = lshr i32 %192, 31
  %208 = trunc i32 %207 to i8
  store i8 %208, i8* %89, align 1, !tbaa !2449
  %209 = lshr i32 %186, 31
  %210 = lshr i32 %191, 31
  %211 = xor i32 %210, %209
  %212 = xor i32 %207, %209
  %213 = add nuw nsw i32 %212, %211
  %214 = icmp eq i32 %213, 2
  %215 = zext i1 %214 to i8
  store i8 %215, i8* %90, align 1, !tbaa !2450
  %216 = icmp ne i8 %208, 0
  %217 = xor i1 %216, %214
  %.v22 = select i1 %217, i64 12, i64 66
  %218 = add i64 %181, %.v22
  %219 = add i64 %182, -40
  %220 = add i64 %218, 5
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %219 to i32*
  %222 = load i32, i32* %221, align 4
  store i32 %222, i32* %17, align 1, !tbaa !2451
  store float 0.000000e+00, float* %676, align 1, !tbaa !2451
  store float 0.000000e+00, float* %677, align 1, !tbaa !2451
  store float 0.000000e+00, float* %678, align 1, !tbaa !2451
  br i1 %217, label %block_402af4, label %block_402b2a

block_402a16:                                     ; preds = %block_4029e0
  %223 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %223, align 1, !tbaa !2456
  %224 = add i64 %70, -4
  %225 = add i64 %94, 8
  store i64 %225, i64* %PC, align 8
  %226 = load <2 x float>, <2 x float>* %66, align 1
  %227 = extractelement <2 x float> %226, i32 0
  %228 = inttoptr i64 %224 to float*
  store float %227, float* %228, align 4
  %229 = load i64, i64* %PC, align 8
  %230 = add i64 %229, 278
  store i64 %230, i64* %PC, align 8, !tbaa !2428
  %.pre16 = bitcast i8* %18 to float*
  %.pre17 = bitcast i64* %16 to float*
  %.pre19 = bitcast i8* %21 to float*
  br label %block_402b34

block_402a4f:                                     ; preds = %block_402a37
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %76, align 1, !tbaa !2432
  store i8 1, i8* %82, align 1, !tbaa !2446
  store i8 1, i8* %86, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  store i8 0, i8* %83, align 1, !tbaa !2447
  %231 = add i64 %317, -8
  %232 = add i64 %333, 5
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %231 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = sub i32 0, %234
  %236 = lshr i32 %235, 31
  %237 = sub i32 1, %234
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = icmp eq i32 %235, -1
  %240 = icmp eq i32 %237, 0
  %241 = or i1 %239, %240
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %76, align 1, !tbaa !2432
  %243 = and i32 %237, 255
  %244 = tail call i32 @llvm.ctpop.i32(i32 %243) #9
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  store i8 %247, i8* %82, align 1, !tbaa !2446
  %248 = xor i32 %237, %235
  %249 = lshr i32 %248, 4
  %250 = trunc i32 %249 to i8
  %251 = and i8 %250, 1
  store i8 %251, i8* %83, align 1, !tbaa !2447
  %252 = zext i1 %240 to i8
  store i8 %252, i8* %86, align 1, !tbaa !2448
  %253 = lshr i32 %237, 31
  %254 = trunc i32 %253 to i8
  store i8 %254, i8* %89, align 1, !tbaa !2449
  %255 = xor i32 %253, %236
  %256 = add nuw nsw i32 %255, %253
  %257 = icmp eq i32 %256, 2
  %258 = zext i1 %257 to i8
  store i8 %258, i8* %90, align 1, !tbaa !2450
  %259 = add i64 %333, 12
  store i64 %259, i64* %PC, align 8
  %260 = load i32, i32* %321, align 4
  %261 = sext i32 %237 to i64
  %262 = sext i32 %260 to i64
  %263 = mul nsw i64 %262, %261
  %264 = trunc i64 %263 to i32
  %265 = and i64 %263, 4294967295
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = shl i64 %263, 32
  %267 = ashr exact i64 %266, 32
  %268 = icmp ne i64 %267, %263
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %76, align 1, !tbaa !2432
  %270 = and i32 %264, 255
  %271 = tail call i32 @llvm.ctpop.i32(i32 %270) #9
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  %274 = xor i8 %273, 1
  store i8 %274, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  store i8 0, i8* %86, align 1, !tbaa !2448
  %275 = lshr i32 %264, 31
  %276 = trunc i32 %275 to i8
  store i8 %276, i8* %89, align 1, !tbaa !2449
  store i8 %269, i8* %90, align 1, !tbaa !2450
  %277 = load i64, i64* %RBP, align 8
  %278 = add i64 %277, -48
  %279 = trunc i64 %263 to i32
  %280 = add i64 %333, 15
  store i64 %280, i64* %PC, align 8
  %281 = inttoptr i64 %278 to i32*
  store i32 %279, i32* %281, align 4
  %.pre10 = load i64, i64* %RBP, align 8
  %.pre11 = load i64, i64* %PC, align 8
  br label %block_402a5e

block_402a2d:                                     ; preds = %block_402a23
  %282 = add i64 %70, -36
  %283 = add i64 %672, 4
  store i64 %283, i64* %PC, align 8
  %284 = inttoptr i64 %282 to i32*
  %285 = load i32, i32* %284, align 4
  %286 = add i32 %285, -1
  %287 = icmp eq i32 %285, 0
  %288 = zext i1 %287 to i8
  store i8 %288, i8* %76, align 1, !tbaa !2432
  %289 = and i32 %286, 255
  %290 = tail call i32 @llvm.ctpop.i32(i32 %289) #9
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = xor i8 %292, 1
  store i8 %293, i8* %82, align 1, !tbaa !2446
  %294 = xor i32 %286, %285
  %295 = lshr i32 %294, 4
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  store i8 %297, i8* %83, align 1, !tbaa !2447
  %298 = icmp eq i32 %286, 0
  %299 = zext i1 %298 to i8
  store i8 %299, i8* %86, align 1, !tbaa !2448
  %300 = lshr i32 %286, 31
  %301 = trunc i32 %300 to i8
  store i8 %301, i8* %89, align 1, !tbaa !2449
  %302 = lshr i32 %285, 31
  %303 = xor i32 %300, %302
  %304 = add nuw nsw i32 %303, %302
  %305 = icmp eq i32 %304, 2
  %306 = zext i1 %305 to i8
  store i8 %306, i8* %90, align 1, !tbaa !2450
  %.v25 = select i1 %298, i64 180, i64 10
  %307 = add i64 %672, %.v25
  store i64 %307, i64* %PC, align 8, !tbaa !2428
  br i1 %298, label %block_402ae1, label %block_402a37

block_402a37:                                     ; preds = %block_402a23, %block_402a2d
  %308 = phi i64 [ %672, %block_402a23 ], [ %307, %block_402a2d ]
  %309 = add i64 %70, -48
  %310 = add i64 %308, 7
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %309 to i32*
  store i32 0, i32* %311, align 4
  %312 = load i64, i64* %RBP, align 8
  %313 = add i64 %312, -52
  %314 = load i64, i64* %PC, align 8
  %315 = add i64 %314, 7
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %313 to i32*
  store i32 0, i32* %316, align 4
  %317 = load i64, i64* %RBP, align 8
  %318 = add i64 %317, -20
  %319 = load i64, i64* %PC, align 8
  %320 = add i64 %319, 4
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %318 to i32*
  %322 = load i32, i32* %321, align 4
  store i8 0, i8* %76, align 1, !tbaa !2432
  %323 = and i32 %322, 255
  %324 = tail call i32 @llvm.ctpop.i32(i32 %323) #9
  %325 = trunc i32 %324 to i8
  %326 = and i8 %325, 1
  %327 = xor i8 %326, 1
  store i8 %327, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  %328 = icmp eq i32 %322, 0
  %329 = zext i1 %328 to i8
  store i8 %329, i8* %86, align 1, !tbaa !2448
  %330 = lshr i32 %322, 31
  %331 = trunc i32 %330 to i8
  store i8 %331, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  %332 = icmp ne i8 %331, 0
  %.v = select i1 %332, i64 6, i64 21
  %333 = add i64 %320, %.v
  store i64 %333, i64* %PC, align 8, !tbaa !2428
  br i1 %332, label %block_402a4f, label %block_402a5e

block_402a77:                                     ; preds = %block_402a5e, %block_402a68
  %334 = phi i64 [ %158, %block_402a5e ], [ %.pre13, %block_402a68 ]
  %335 = phi i64 [ %143, %block_402a5e ], [ %.pre12, %block_402a68 ]
  %336 = add i64 %335, -44
  %337 = add i64 %334, 7
  store i64 %337, i64* %PC, align 8
  %338 = inttoptr i64 %336 to i32*
  store i32 0, i32* %338, align 4
  %339 = bitcast i8* %18 to float*
  %340 = bitcast i64* %16 to float*
  %341 = bitcast i8* %21 to float*
  %342 = bitcast [32 x %union.VectorReg]* %6 to float*
  %343 = bitcast %union.VectorReg* %7 to i8*
  %344 = bitcast %union.VectorReg* %7 to float*
  %345 = bitcast %union.VectorReg* %7 to i32*
  %346 = getelementptr inbounds i8, i8* %343, i64 4
  %347 = bitcast i8* %346 to float*
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %349 = bitcast i64* %348 to float*
  %350 = getelementptr inbounds i8, i8* %343, i64 12
  %351 = bitcast i8* %350 to float*
  %352 = bitcast %union.VectorReg* %7 to <2 x float>*
  %353 = bitcast i64* %348 to <2 x i32>*
  %354 = bitcast i8* %346 to i32*
  %355 = bitcast i64* %348 to i32*
  %356 = bitcast i8* %350 to i32*
  %357 = bitcast i64* %16 to <2 x i32>*
  %.pre14 = load i64, i64* %PC, align 8
  br label %block_402a7e

block_402a8a:                                     ; preds = %block_402a7e
  %358 = add i64 %96, -16
  %359 = add i64 %132, 9
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %358 to i64*
  %361 = load i64, i64* %360, align 8
  store i64 %361, i64* %RAX, align 8, !tbaa !2428
  %362 = add i64 %96, -48
  %363 = add i64 %132, 13
  store i64 %363, i64* %PC, align 8
  %364 = inttoptr i64 %362 to i32*
  %365 = load i32, i32* %364, align 4
  %366 = sext i32 %365 to i64
  store i64 %366, i64* %RCX, align 8, !tbaa !2428
  %367 = shl nsw i64 %366, 2
  %368 = add i64 %367, %361
  %369 = add i64 %132, 18
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i32*
  %371 = load i32, i32* %370, align 4
  store i32 %371, i32* %345, align 1, !tbaa !2451
  store float 0.000000e+00, float* %347, align 1, !tbaa !2451
  store float 0.000000e+00, float* %349, align 1, !tbaa !2451
  store float 0.000000e+00, float* %351, align 1, !tbaa !2451
  %372 = add i64 %96, -32
  %373 = add i64 %132, 22
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %372 to i64*
  %375 = load i64, i64* %374, align 8
  store i64 %375, i64* %RAX, align 8, !tbaa !2428
  %376 = add i64 %96, -52
  %377 = add i64 %132, 26
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = sext i32 %379 to i64
  store i64 %380, i64* %RCX, align 8, !tbaa !2428
  %381 = shl nsw i64 %380, 2
  %382 = add i64 %381, %375
  %383 = add i64 %132, 31
  store i64 %383, i64* %PC, align 8
  %384 = load <2 x float>, <2 x float>* %352, align 1
  %385 = load <2 x i32>, <2 x i32>* %353, align 1
  %386 = inttoptr i64 %382 to float*
  %387 = load float, float* %386, align 4
  %388 = extractelement <2 x float> %384, i32 0
  %389 = fmul float %388, %387
  store float %389, float* %344, align 1, !tbaa !2451
  %390 = bitcast <2 x float> %384 to <2 x i32>
  %391 = extractelement <2 x i32> %390, i32 1
  store i32 %391, i32* %354, align 1, !tbaa !2451
  %392 = extractelement <2 x i32> %385, i32 0
  store i32 %392, i32* %355, align 1, !tbaa !2451
  %393 = extractelement <2 x i32> %385, i32 1
  store i32 %393, i32* %356, align 1, !tbaa !2451
  %394 = load <2 x float>, <2 x float>* %66, align 1
  %395 = load <2 x i32>, <2 x i32>* %357, align 1
  %396 = load <2 x float>, <2 x float>* %352, align 1
  %397 = extractelement <2 x float> %394, i32 0
  %398 = extractelement <2 x float> %396, i32 0
  %399 = fadd float %397, %398
  store float %399, float* %342, align 1, !tbaa !2451
  %400 = bitcast <2 x float> %394 to <2 x i32>
  %401 = extractelement <2 x i32> %400, i32 1
  store i32 %401, i32* %19, align 1, !tbaa !2451
  %402 = extractelement <2 x i32> %395, i32 0
  store i32 %402, i32* %20, align 1, !tbaa !2451
  %403 = extractelement <2 x i32> %395, i32 1
  store i32 %403, i32* %22, align 1, !tbaa !2451
  %404 = add i64 %132, 40
  store i64 %404, i64* %PC, align 8
  %405 = load <2 x float>, <2 x float>* %66, align 1
  %406 = extractelement <2 x float> %405, i32 0
  %407 = inttoptr i64 %133 to float*
  store float %406, float* %407, align 4
  %408 = load i64, i64* %RBP, align 8
  %409 = add i64 %408, -48
  %410 = load i64, i64* %PC, align 8
  %411 = add i64 %410, 3
  store i64 %411, i64* %PC, align 8
  %412 = inttoptr i64 %409 to i32*
  %413 = load i32, i32* %412, align 4
  %414 = zext i32 %413 to i64
  store i64 %414, i64* %RDX, align 8, !tbaa !2428
  %415 = add i64 %408, -20
  %416 = add i64 %410, 6
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = add i32 %418, %413
  %420 = zext i32 %419 to i64
  store i64 %420, i64* %RDX, align 8, !tbaa !2428
  %421 = icmp ult i32 %419, %413
  %422 = icmp ult i32 %419, %418
  %423 = or i1 %421, %422
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %76, align 1, !tbaa !2432
  %425 = and i32 %419, 255
  %426 = tail call i32 @llvm.ctpop.i32(i32 %425) #9
  %427 = trunc i32 %426 to i8
  %428 = and i8 %427, 1
  %429 = xor i8 %428, 1
  store i8 %429, i8* %82, align 1, !tbaa !2446
  %430 = xor i32 %418, %413
  %431 = xor i32 %430, %419
  %432 = lshr i32 %431, 4
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  store i8 %434, i8* %83, align 1, !tbaa !2447
  %435 = icmp eq i32 %419, 0
  %436 = zext i1 %435 to i8
  store i8 %436, i8* %86, align 1, !tbaa !2448
  %437 = lshr i32 %419, 31
  %438 = trunc i32 %437 to i8
  store i8 %438, i8* %89, align 1, !tbaa !2449
  %439 = lshr i32 %413, 31
  %440 = lshr i32 %418, 31
  %441 = xor i32 %437, %439
  %442 = xor i32 %437, %440
  %443 = add nuw nsw i32 %441, %442
  %444 = icmp eq i32 %443, 2
  %445 = zext i1 %444 to i8
  store i8 %445, i8* %90, align 1, !tbaa !2450
  %446 = add i64 %410, 9
  store i64 %446, i64* %PC, align 8
  store i32 %419, i32* %412, align 4
  %447 = load i64, i64* %RBP, align 8
  %448 = add i64 %447, -52
  %449 = load i64, i64* %PC, align 8
  %450 = add i64 %449, 3
  store i64 %450, i64* %PC, align 8
  %451 = inttoptr i64 %448 to i32*
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  store i64 %453, i64* %RDX, align 8, !tbaa !2428
  %454 = add i64 %447, -36
  %455 = add i64 %449, 6
  store i64 %455, i64* %PC, align 8
  %456 = inttoptr i64 %454 to i32*
  %457 = load i32, i32* %456, align 4
  %458 = add i32 %457, %452
  %459 = zext i32 %458 to i64
  store i64 %459, i64* %RDX, align 8, !tbaa !2428
  %460 = icmp ult i32 %458, %452
  %461 = icmp ult i32 %458, %457
  %462 = or i1 %460, %461
  %463 = zext i1 %462 to i8
  store i8 %463, i8* %76, align 1, !tbaa !2432
  %464 = and i32 %458, 255
  %465 = tail call i32 @llvm.ctpop.i32(i32 %464) #9
  %466 = trunc i32 %465 to i8
  %467 = and i8 %466, 1
  %468 = xor i8 %467, 1
  store i8 %468, i8* %82, align 1, !tbaa !2446
  %469 = xor i32 %457, %452
  %470 = xor i32 %469, %458
  %471 = lshr i32 %470, 4
  %472 = trunc i32 %471 to i8
  %473 = and i8 %472, 1
  store i8 %473, i8* %83, align 1, !tbaa !2447
  %474 = icmp eq i32 %458, 0
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %86, align 1, !tbaa !2448
  %476 = lshr i32 %458, 31
  %477 = trunc i32 %476 to i8
  store i8 %477, i8* %89, align 1, !tbaa !2449
  %478 = lshr i32 %452, 31
  %479 = lshr i32 %457, 31
  %480 = xor i32 %476, %478
  %481 = xor i32 %476, %479
  %482 = add nuw nsw i32 %480, %481
  %483 = icmp eq i32 %482, 2
  %484 = zext i1 %483 to i8
  store i8 %484, i8* %90, align 1, !tbaa !2450
  %485 = add i64 %449, 9
  store i64 %485, i64* %PC, align 8
  store i32 %458, i32* %451, align 4
  %486 = load i64, i64* %RBP, align 8
  %487 = add i64 %486, -44
  %488 = load i64, i64* %PC, align 8
  %489 = add i64 %488, 3
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %487 to i32*
  %491 = load i32, i32* %490, align 4
  %492 = add i32 %491, 1
  %493 = zext i32 %492 to i64
  store i64 %493, i64* %RAX, align 8, !tbaa !2428
  %494 = icmp eq i32 %491, -1
  %495 = icmp eq i32 %492, 0
  %496 = or i1 %494, %495
  %497 = zext i1 %496 to i8
  store i8 %497, i8* %76, align 1, !tbaa !2432
  %498 = and i32 %492, 255
  %499 = tail call i32 @llvm.ctpop.i32(i32 %498) #9
  %500 = trunc i32 %499 to i8
  %501 = and i8 %500, 1
  %502 = xor i8 %501, 1
  store i8 %502, i8* %82, align 1, !tbaa !2446
  %503 = xor i32 %492, %491
  %504 = lshr i32 %503, 4
  %505 = trunc i32 %504 to i8
  %506 = and i8 %505, 1
  store i8 %506, i8* %83, align 1, !tbaa !2447
  %507 = zext i1 %495 to i8
  store i8 %507, i8* %86, align 1, !tbaa !2448
  %508 = lshr i32 %492, 31
  %509 = trunc i32 %508 to i8
  store i8 %509, i8* %89, align 1, !tbaa !2449
  %510 = lshr i32 %491, 31
  %511 = xor i32 %508, %510
  %512 = add nuw nsw i32 %511, %508
  %513 = icmp eq i32 %512, 2
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %90, align 1, !tbaa !2450
  %515 = add i64 %488, 9
  store i64 %515, i64* %PC, align 8
  store i32 %492, i32* %490, align 4
  %516 = load i64, i64* %PC, align 8
  %517 = add i64 %516, -79
  store i64 %517, i64* %PC, align 8, !tbaa !2428
  br label %block_402a7e

block_402a68:                                     ; preds = %block_402a5e
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %76, align 1, !tbaa !2432
  store i8 1, i8* %82, align 1, !tbaa !2446
  store i8 1, i8* %86, align 1, !tbaa !2448
  store i8 0, i8* %89, align 1, !tbaa !2449
  store i8 0, i8* %90, align 1, !tbaa !2450
  store i8 0, i8* %83, align 1, !tbaa !2447
  %518 = add i64 %143, -8
  %519 = add i64 %158, 5
  store i64 %519, i64* %PC, align 8
  %520 = inttoptr i64 %518 to i32*
  %521 = load i32, i32* %520, align 4
  %522 = sub i32 0, %521
  %523 = lshr i32 %522, 31
  %524 = sub i32 1, %521
  %525 = zext i32 %524 to i64
  store i64 %525, i64* %RAX, align 8, !tbaa !2428
  %526 = icmp eq i32 %522, -1
  %527 = icmp eq i32 %524, 0
  %528 = or i1 %526, %527
  %529 = zext i1 %528 to i8
  store i8 %529, i8* %76, align 1, !tbaa !2432
  %530 = and i32 %524, 255
  %531 = tail call i32 @llvm.ctpop.i32(i32 %530) #9
  %532 = trunc i32 %531 to i8
  %533 = and i8 %532, 1
  %534 = xor i8 %533, 1
  store i8 %534, i8* %82, align 1, !tbaa !2446
  %535 = xor i32 %524, %522
  %536 = lshr i32 %535, 4
  %537 = trunc i32 %536 to i8
  %538 = and i8 %537, 1
  store i8 %538, i8* %83, align 1, !tbaa !2447
  %539 = zext i1 %527 to i8
  store i8 %539, i8* %86, align 1, !tbaa !2448
  %540 = lshr i32 %524, 31
  %541 = trunc i32 %540 to i8
  store i8 %541, i8* %89, align 1, !tbaa !2449
  %542 = xor i32 %540, %523
  %543 = add nuw nsw i32 %542, %540
  %544 = icmp eq i32 %543, 2
  %545 = zext i1 %544 to i8
  store i8 %545, i8* %90, align 1, !tbaa !2450
  %546 = add i64 %158, 12
  store i64 %546, i64* %PC, align 8
  %547 = load i32, i32* %146, align 4
  %548 = sext i32 %524 to i64
  %549 = sext i32 %547 to i64
  %550 = mul nsw i64 %549, %548
  %551 = trunc i64 %550 to i32
  %552 = and i64 %550, 4294967295
  store i64 %552, i64* %RAX, align 8, !tbaa !2428
  %553 = shl i64 %550, 32
  %554 = ashr exact i64 %553, 32
  %555 = icmp ne i64 %554, %550
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %76, align 1, !tbaa !2432
  %557 = and i32 %551, 255
  %558 = tail call i32 @llvm.ctpop.i32(i32 %557) #9
  %559 = trunc i32 %558 to i8
  %560 = and i8 %559, 1
  %561 = xor i8 %560, 1
  store i8 %561, i8* %82, align 1, !tbaa !2446
  store i8 0, i8* %83, align 1, !tbaa !2447
  store i8 0, i8* %86, align 1, !tbaa !2448
  %562 = lshr i32 %551, 31
  %563 = trunc i32 %562 to i8
  store i8 %563, i8* %89, align 1, !tbaa !2449
  store i8 %556, i8* %90, align 1, !tbaa !2450
  %564 = load i64, i64* %RBP, align 8
  %565 = add i64 %564, -52
  %566 = trunc i64 %550 to i32
  %567 = add i64 %158, 15
  store i64 %567, i64* %PC, align 8
  %568 = inttoptr i64 %565 to i32*
  store i32 %566, i32* %568, align 4
  %.pre12 = load i64, i64* %RBP, align 8
  %.pre13 = load i64, i64* %PC, align 8
  br label %block_402a77

block_402af4:                                     ; preds = %block_402ae8
  %569 = add i64 %182, -16
  %570 = add i64 %218, 9
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %569 to i64*
  %572 = load i64, i64* %571, align 8
  store i64 %572, i64* %RAX, align 8, !tbaa !2428
  %573 = add i64 %218, 13
  store i64 %573, i64* %PC, align 8
  %574 = load i32, i32* %185, align 4
  %575 = sext i32 %574 to i64
  store i64 %575, i64* %RCX, align 8, !tbaa !2428
  %576 = shl nsw i64 %575, 2
  %577 = add i64 %576, %572
  %578 = add i64 %218, 18
  store i64 %578, i64* %PC, align 8
  %579 = inttoptr i64 %577 to i32*
  %580 = load i32, i32* %579, align 4
  store i32 %580, i32* %682, align 1, !tbaa !2451
  store float 0.000000e+00, float* %684, align 1, !tbaa !2451
  store float 0.000000e+00, float* %686, align 1, !tbaa !2451
  store float 0.000000e+00, float* %688, align 1, !tbaa !2451
  %581 = add i64 %182, -32
  %582 = add i64 %218, 22
  store i64 %582, i64* %PC, align 8
  %583 = inttoptr i64 %581 to i64*
  %584 = load i64, i64* %583, align 8
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = add i64 %218, 26
  store i64 %585, i64* %PC, align 8
  %586 = load i32, i32* %185, align 4
  %587 = sext i32 %586 to i64
  store i64 %587, i64* %RCX, align 8, !tbaa !2428
  %588 = shl nsw i64 %587, 2
  %589 = add i64 %588, %584
  %590 = add i64 %218, 31
  store i64 %590, i64* %PC, align 8
  %591 = load <2 x float>, <2 x float>* %689, align 1
  %592 = load <2 x i32>, <2 x i32>* %690, align 1
  %593 = inttoptr i64 %589 to float*
  %594 = load float, float* %593, align 4
  %595 = extractelement <2 x float> %591, i32 0
  %596 = fmul float %595, %594
  store float %596, float* %681, align 1, !tbaa !2451
  %597 = bitcast <2 x float> %591 to <2 x i32>
  %598 = extractelement <2 x i32> %597, i32 1
  store i32 %598, i32* %691, align 1, !tbaa !2451
  %599 = extractelement <2 x i32> %592, i32 0
  store i32 %599, i32* %692, align 1, !tbaa !2451
  %600 = extractelement <2 x i32> %592, i32 1
  store i32 %600, i32* %693, align 1, !tbaa !2451
  %601 = load <2 x float>, <2 x float>* %66, align 1
  %602 = load <2 x i32>, <2 x i32>* %694, align 1
  %603 = load <2 x float>, <2 x float>* %689, align 1
  %604 = extractelement <2 x float> %601, i32 0
  %605 = extractelement <2 x float> %603, i32 0
  %606 = fadd float %604, %605
  store float %606, float* %679, align 1, !tbaa !2451
  %607 = bitcast <2 x float> %601 to <2 x i32>
  %608 = extractelement <2 x i32> %607, i32 1
  store i32 %608, i32* %19, align 1, !tbaa !2451
  %609 = extractelement <2 x i32> %602, i32 0
  store i32 %609, i32* %20, align 1, !tbaa !2451
  %610 = extractelement <2 x i32> %602, i32 1
  store i32 %610, i32* %22, align 1, !tbaa !2451
  %611 = add i64 %218, 40
  store i64 %611, i64* %PC, align 8
  %612 = load <2 x float>, <2 x float>* %66, align 1
  %613 = extractelement <2 x float> %612, i32 0
  %614 = inttoptr i64 %219 to float*
  store float %613, float* %614, align 4
  %615 = load i64, i64* %RBP, align 8
  %616 = add i64 %615, -44
  %617 = load i64, i64* %PC, align 8
  %618 = add i64 %617, 3
  store i64 %618, i64* %PC, align 8
  %619 = inttoptr i64 %616 to i32*
  %620 = load i32, i32* %619, align 4
  %621 = add i32 %620, 1
  %622 = zext i32 %621 to i64
  store i64 %622, i64* %RAX, align 8, !tbaa !2428
  %623 = icmp eq i32 %620, -1
  %624 = icmp eq i32 %621, 0
  %625 = or i1 %623, %624
  %626 = zext i1 %625 to i8
  store i8 %626, i8* %76, align 1, !tbaa !2432
  %627 = and i32 %621, 255
  %628 = tail call i32 @llvm.ctpop.i32(i32 %627) #9
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  store i8 %631, i8* %82, align 1, !tbaa !2446
  %632 = xor i32 %621, %620
  %633 = lshr i32 %632, 4
  %634 = trunc i32 %633 to i8
  %635 = and i8 %634, 1
  store i8 %635, i8* %83, align 1, !tbaa !2447
  %636 = zext i1 %624 to i8
  store i8 %636, i8* %86, align 1, !tbaa !2448
  %637 = lshr i32 %621, 31
  %638 = trunc i32 %637 to i8
  store i8 %638, i8* %89, align 1, !tbaa !2449
  %639 = lshr i32 %620, 31
  %640 = xor i32 %637, %639
  %641 = add nuw nsw i32 %640, %637
  %642 = icmp eq i32 %641, 2
  %643 = zext i1 %642 to i8
  store i8 %643, i8* %90, align 1, !tbaa !2450
  %644 = add i64 %617, 9
  store i64 %644, i64* %PC, align 8
  store i32 %621, i32* %619, align 4
  %645 = load i64, i64* %PC, align 8
  %646 = add i64 %645, -61
  store i64 %646, i64* %PC, align 8, !tbaa !2428
  br label %block_402ae8

block_402a23:                                     ; preds = %block_4029e0
  %647 = add i64 %70, -20
  %648 = add i64 %94, 4
  store i64 %648, i64* %PC, align 8
  %649 = inttoptr i64 %647 to i32*
  %650 = load i32, i32* %649, align 4
  %651 = add i32 %650, -1
  %652 = icmp eq i32 %650, 0
  %653 = zext i1 %652 to i8
  store i8 %653, i8* %76, align 1, !tbaa !2432
  %654 = and i32 %651, 255
  %655 = tail call i32 @llvm.ctpop.i32(i32 %654) #9
  %656 = trunc i32 %655 to i8
  %657 = and i8 %656, 1
  %658 = xor i8 %657, 1
  store i8 %658, i8* %82, align 1, !tbaa !2446
  %659 = xor i32 %651, %650
  %660 = lshr i32 %659, 4
  %661 = trunc i32 %660 to i8
  %662 = and i8 %661, 1
  store i8 %662, i8* %83, align 1, !tbaa !2447
  %663 = icmp eq i32 %651, 0
  %664 = zext i1 %663 to i8
  store i8 %664, i8* %86, align 1, !tbaa !2448
  %665 = lshr i32 %651, 31
  %666 = trunc i32 %665 to i8
  store i8 %666, i8* %89, align 1, !tbaa !2449
  %667 = lshr i32 %650, 31
  %668 = xor i32 %665, %667
  %669 = add nuw nsw i32 %668, %667
  %670 = icmp eq i32 %669, 2
  %671 = zext i1 %670 to i8
  store i8 %671, i8* %90, align 1, !tbaa !2450
  %.v24 = select i1 %663, i64 10, i64 20
  %672 = add i64 %94, %.v24
  store i64 %672, i64* %PC, align 8, !tbaa !2428
  br i1 %663, label %block_402a2d, label %block_402a37

block_402ae1:                                     ; preds = %block_402a2d
  %673 = add i64 %70, -44
  %674 = add i64 %307, 7
  store i64 %674, i64* %PC, align 8
  %675 = inttoptr i64 %673 to i32*
  store i32 0, i32* %675, align 4
  %676 = bitcast i8* %18 to float*
  %677 = bitcast i64* %16 to float*
  %678 = bitcast i8* %21 to float*
  %679 = bitcast [32 x %union.VectorReg]* %6 to float*
  %680 = bitcast %union.VectorReg* %7 to i8*
  %681 = bitcast %union.VectorReg* %7 to float*
  %682 = bitcast %union.VectorReg* %7 to i32*
  %683 = getelementptr inbounds i8, i8* %680, i64 4
  %684 = bitcast i8* %683 to float*
  %685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %686 = bitcast i64* %685 to float*
  %687 = getelementptr inbounds i8, i8* %680, i64 12
  %688 = bitcast i8* %687 to float*
  %689 = bitcast %union.VectorReg* %7 to <2 x float>*
  %690 = bitcast i64* %685 to <2 x i32>*
  %691 = bitcast i8* %683 to i32*
  %692 = bitcast i64* %685 to i32*
  %693 = bitcast i8* %687 to i32*
  %694 = bitcast i64* %16 to <2 x i32>*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402ae8
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_401750_matgen(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401750:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %18 = bitcast [32 x %union.VectorReg]* %6 to i32*
  %19 = getelementptr inbounds i8, i8* %16, i64 4
  %20 = bitcast i8* %19 to i32*
  %21 = bitcast i64* %17 to i32*
  %22 = getelementptr inbounds i8, i8* %16, i64 12
  %23 = bitcast i8* %22 to i32*
  %24 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %24, align 1, !tbaa !2456
  %25 = add i64 %12, -16
  %26 = load i64, i64* %RDI, align 8
  %27 = add i64 %15, 10
  store i64 %27, i64* %PC, align 8
  %28 = inttoptr i64 %25 to i64*
  store i64 %26, i64* %28, align 8
  %29 = load i64, i64* %RBP, align 8
  %30 = add i64 %29, -12
  %31 = load i32, i32* %ESI, align 4
  %32 = load i64, i64* %PC, align 8
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %30 to i32*
  store i32 %31, i32* %34, align 4
  %35 = load i64, i64* %RBP, align 8
  %36 = add i64 %35, -16
  %37 = load i32, i32* %EDX, align 4
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %36 to i32*
  store i32 %37, i32* %40, align 4
  %41 = load i64, i64* %RBP, align 8
  %42 = add i64 %41, -24
  %43 = load i64, i64* %RCX, align 8
  %44 = load i64, i64* %PC, align 8
  %45 = add i64 %44, 4
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %42 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -32
  %49 = load i64, i64* %R8, align 8
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 4
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i64*
  store i64 %49, i64* %52, align 8
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -36
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %54 to i32*
  store i32 1325, i32* %57, align 4
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -32
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RCX, align 8, !tbaa !2428
  %64 = add i64 %60, 8
  store i64 %64, i64* %PC, align 8
  %65 = bitcast [32 x %union.VectorReg]* %6 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 1
  %67 = extractelement <2 x float> %66, i32 0
  %68 = inttoptr i64 %63 to float*
  store float %67, float* %68, align 4
  %69 = load i64, i64* %RBP, align 8
  %70 = add i64 %69, -44
  %71 = load i64, i64* %PC, align 8
  %72 = add i64 %71, 7
  store i64 %72, i64* %PC, align 8
  %73 = inttoptr i64 %70 to i32*
  store i32 0, i32* %73, align 4
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %80 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %81 = bitcast i64* %17 to double*
  %82 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %84 = bitcast i64* %83 to double*
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %86 = bitcast %union.VectorReg* %8 to double*
  %87 = bitcast %union.VectorReg* %7 to double*
  %88 = bitcast [32 x %union.VectorReg]* %6 to double*
  %89 = bitcast i64* %17 to <2 x i32>*
  %90 = bitcast [32 x %union.VectorReg]* %6 to float*
  %91 = bitcast i8* %19 to float*
  %92 = bitcast i64* %17 to float*
  %93 = bitcast i8* %22 to float*
  %.pre = load i64, i64* %PC, align 8
  br label %block_40177f

block_40177f:                                     ; preds = %block_40185a, %block_401750
  %94 = phi i64 [ %.pre, %block_401750 ], [ %810, %block_40185a ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401750 ], [ %MEMORY.5, %block_40185a ]
  %95 = load i64, i64* %RBP, align 8
  %96 = add i64 %95, -44
  %97 = add i64 %94, 3
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i32*
  %99 = load i32, i32* %98, align 4
  %100 = zext i32 %99 to i64
  store i64 %100, i64* %RAX, align 8, !tbaa !2428
  %101 = add i64 %95, -16
  %102 = add i64 %94, 6
  store i64 %102, i64* %PC, align 8
  %103 = inttoptr i64 %101 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = sub i32 %99, %104
  %106 = icmp ult i32 %99, %104
  %107 = zext i1 %106 to i8
  store i8 %107, i8* %74, align 1, !tbaa !2432
  %108 = and i32 %105, 255
  %109 = tail call i32 @llvm.ctpop.i32(i32 %108) #9
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %75, align 1, !tbaa !2446
  %113 = xor i32 %104, %99
  %114 = xor i32 %113, %105
  %115 = lshr i32 %114, 4
  %116 = trunc i32 %115 to i8
  %117 = and i8 %116, 1
  store i8 %117, i8* %76, align 1, !tbaa !2447
  %118 = icmp eq i32 %105, 0
  %119 = zext i1 %118 to i8
  store i8 %119, i8* %77, align 1, !tbaa !2448
  %120 = lshr i32 %105, 31
  %121 = trunc i32 %120 to i8
  store i8 %121, i8* %78, align 1, !tbaa !2449
  %122 = lshr i32 %99, 31
  %123 = lshr i32 %104, 31
  %124 = xor i32 %123, %122
  %125 = xor i32 %120, %122
  %126 = add nuw nsw i32 %125, %124
  %127 = icmp eq i32 %126, 2
  %128 = zext i1 %127 to i8
  store i8 %128, i8* %79, align 1, !tbaa !2450
  %129 = icmp ne i8 %121, 0
  %130 = xor i1 %129, %127
  %.v = select i1 %130, i64 12, i64 238
  %131 = add i64 %94, %.v
  %132 = add i64 %95, -40
  %133 = add i64 %131, 7
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i32*
  store i32 0, i32* %134, align 4
  %.pre21 = load i64, i64* %PC, align 8
  br i1 %130, label %block_401792.preheader, label %block_401874.preheader

block_401792.preheader:                           ; preds = %block_40177f
  br label %block_401792

block_401874.preheader:                           ; preds = %block_40177f
  %135 = bitcast [32 x %union.VectorReg]* %6 to <4 x i32>*
  br label %block_401874

block_4018c4:                                     ; preds = %block_4018b8
  %136 = add i64 %270, -24
  %137 = add i64 %306, 4
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RAX, align 8, !tbaa !2428
  %140 = add i64 %306, 8
  store i64 %140, i64* %PC, align 8
  %141 = load i32, i32* %273, align 4
  %142 = sext i32 %141 to i64
  store i64 %142, i64* %RCX, align 8, !tbaa !2428
  %143 = shl nsw i64 %142, 2
  %144 = add i64 %143, %139
  %145 = add i64 %306, 13
  store i64 %145, i64* %PC, align 8
  %146 = inttoptr i64 %144 to i32*
  %147 = load i32, i32* %146, align 4
  store i32 %147, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %148 = add i64 %270, -8
  %149 = add i64 %306, 17
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %RAX, align 8, !tbaa !2428
  %152 = add i64 %270, -12
  %153 = add i64 %306, 20
  store i64 %153, i64* %PC, align 8
  %154 = inttoptr i64 %152 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i64
  store i64 %156, i64* %RDX, align 8, !tbaa !2428
  %157 = add i64 %270, -44
  %158 = add i64 %306, 24
  store i64 %158, i64* %PC, align 8
  %159 = inttoptr i64 %157 to i32*
  %160 = load i32, i32* %159, align 4
  %161 = sext i32 %155 to i64
  %162 = sext i32 %160 to i64
  %163 = mul nsw i64 %162, %161
  %164 = trunc i64 %163 to i32
  %165 = and i64 %163, 4294967295
  store i64 %165, i64* %RDX, align 8, !tbaa !2428
  %166 = shl i64 %163, 32
  %167 = ashr exact i64 %166, 32
  %168 = icmp ne i64 %167, %163
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %74, align 1, !tbaa !2432
  %170 = and i32 %164, 255
  %171 = tail call i32 @llvm.ctpop.i32(i32 %170) #9
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  store i8 %174, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %175 = lshr i32 %164, 31
  %176 = trunc i32 %175 to i8
  store i8 %176, i8* %78, align 1, !tbaa !2449
  store i8 %169, i8* %79, align 1, !tbaa !2450
  %177 = add i64 %306, 27
  store i64 %177, i64* %PC, align 8
  %178 = trunc i64 %163 to i32
  %179 = load i32, i32* %273, align 4
  %180 = add i32 %179, %178
  %181 = zext i32 %180 to i64
  store i64 %181, i64* %RDX, align 8, !tbaa !2428
  %182 = icmp ult i32 %180, %178
  %183 = icmp ult i32 %180, %179
  %184 = or i1 %182, %183
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %74, align 1, !tbaa !2432
  %186 = and i32 %180, 255
  %187 = tail call i32 @llvm.ctpop.i32(i32 %186) #9
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %75, align 1, !tbaa !2446
  %191 = xor i32 %179, %178
  %192 = xor i32 %191, %180
  %193 = lshr i32 %192, 4
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  store i8 %195, i8* %76, align 1, !tbaa !2447
  %196 = icmp eq i32 %180, 0
  %197 = zext i1 %196 to i8
  store i8 %197, i8* %77, align 1, !tbaa !2448
  %198 = lshr i32 %180, 31
  %199 = trunc i32 %198 to i8
  store i8 %199, i8* %78, align 1, !tbaa !2449
  %200 = lshr i32 %178, 31
  %201 = lshr i32 %179, 31
  %202 = xor i32 %198, %200
  %203 = xor i32 %198, %201
  %204 = add nuw nsw i32 %202, %203
  %205 = icmp eq i32 %204, 2
  %206 = zext i1 %205 to i8
  store i8 %206, i8* %79, align 1, !tbaa !2450
  %207 = sext i32 %180 to i64
  store i64 %207, i64* %RCX, align 8, !tbaa !2428
  %208 = shl nsw i64 %207, 2
  %209 = add i64 %151, %208
  %210 = add i64 %306, 35
  store i64 %210, i64* %PC, align 8
  %211 = load <2 x float>, <2 x float>* %65, align 1
  %212 = load <2 x i32>, <2 x i32>* %89, align 1
  %213 = inttoptr i64 %209 to float*
  %214 = load float, float* %213, align 4
  %215 = extractelement <2 x float> %211, i32 0
  %216 = fadd float %215, %214
  store float %216, float* %90, align 1, !tbaa !2451
  %217 = bitcast <2 x float> %211 to <2 x i32>
  %218 = extractelement <2 x i32> %217, i32 1
  store i32 %218, i32* %20, align 1, !tbaa !2451
  %219 = extractelement <2 x i32> %212, i32 0
  store i32 %219, i32* %21, align 1, !tbaa !2451
  %220 = extractelement <2 x i32> %212, i32 1
  store i32 %220, i32* %23, align 1, !tbaa !2451
  %221 = load i64, i64* %RBP, align 8
  %222 = add i64 %221, -24
  %223 = add i64 %306, 39
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224, align 8
  store i64 %225, i64* %RAX, align 8, !tbaa !2428
  %226 = add i64 %221, -40
  %227 = add i64 %306, 43
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %226 to i32*
  %229 = load i32, i32* %228, align 4
  %230 = sext i32 %229 to i64
  store i64 %230, i64* %RCX, align 8, !tbaa !2428
  %231 = shl nsw i64 %230, 2
  %232 = add i64 %231, %225
  %233 = add i64 %306, 48
  store i64 %233, i64* %PC, align 8
  %234 = load <2 x float>, <2 x float>* %65, align 1
  %235 = extractelement <2 x float> %234, i32 0
  %236 = inttoptr i64 %232 to float*
  store float %235, float* %236, align 4
  %237 = load i64, i64* %RBP, align 8
  %238 = add i64 %237, -40
  %239 = load i64, i64* %PC, align 8
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC, align 8
  %241 = inttoptr i64 %238 to i32*
  %242 = load i32, i32* %241, align 4
  %243 = add i32 %242, 1
  %244 = zext i32 %243 to i64
  store i64 %244, i64* %RAX, align 8, !tbaa !2428
  %245 = icmp eq i32 %242, -1
  %246 = icmp eq i32 %243, 0
  %247 = or i1 %245, %246
  %248 = zext i1 %247 to i8
  store i8 %248, i8* %74, align 1, !tbaa !2432
  %249 = and i32 %243, 255
  %250 = tail call i32 @llvm.ctpop.i32(i32 %249) #9
  %251 = trunc i32 %250 to i8
  %252 = and i8 %251, 1
  %253 = xor i8 %252, 1
  store i8 %253, i8* %75, align 1, !tbaa !2446
  %254 = xor i32 %243, %242
  %255 = lshr i32 %254, 4
  %256 = trunc i32 %255 to i8
  %257 = and i8 %256, 1
  store i8 %257, i8* %76, align 1, !tbaa !2447
  %258 = zext i1 %246 to i8
  store i8 %258, i8* %77, align 1, !tbaa !2448
  %259 = lshr i32 %243, 31
  %260 = trunc i32 %259 to i8
  store i8 %260, i8* %78, align 1, !tbaa !2449
  %261 = lshr i32 %242, 31
  %262 = xor i32 %259, %261
  %263 = add nuw nsw i32 %262, %259
  %264 = icmp eq i32 %263, 2
  %265 = zext i1 %264 to i8
  store i8 %265, i8* %79, align 1, !tbaa !2450
  %266 = add i64 %239, 9
  store i64 %266, i64* %PC, align 8
  store i32 %243, i32* %241, align 4
  %267 = load i64, i64* %PC, align 8
  %268 = add i64 %267, -69
  store i64 %268, i64* %PC, align 8, !tbaa !2428
  br label %block_4018b8

block_4018b8:                                     ; preds = %block_4018b1, %block_4018c4
  %269 = phi i64 [ %.pre20, %block_4018b1 ], [ %268, %block_4018c4 ]
  %270 = load i64, i64* %RBP, align 8
  %271 = add i64 %270, -40
  %272 = add i64 %269, 3
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i32*
  %274 = load i32, i32* %273, align 4
  %275 = zext i32 %274 to i64
  store i64 %275, i64* %RAX, align 8, !tbaa !2428
  %276 = add i64 %270, -16
  %277 = add i64 %269, 6
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i32*
  %279 = load i32, i32* %278, align 4
  %280 = sub i32 %274, %279
  %281 = icmp ult i32 %274, %279
  %282 = zext i1 %281 to i8
  store i8 %282, i8* %74, align 1, !tbaa !2432
  %283 = and i32 %280, 255
  %284 = tail call i32 @llvm.ctpop.i32(i32 %283) #9
  %285 = trunc i32 %284 to i8
  %286 = and i8 %285, 1
  %287 = xor i8 %286, 1
  store i8 %287, i8* %75, align 1, !tbaa !2446
  %288 = xor i32 %279, %274
  %289 = xor i32 %288, %280
  %290 = lshr i32 %289, 4
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  store i8 %292, i8* %76, align 1, !tbaa !2447
  %293 = icmp eq i32 %280, 0
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %77, align 1, !tbaa !2448
  %295 = lshr i32 %280, 31
  %296 = trunc i32 %295 to i8
  store i8 %296, i8* %78, align 1, !tbaa !2449
  %297 = lshr i32 %274, 31
  %298 = lshr i32 %279, 31
  %299 = xor i32 %298, %297
  %300 = xor i32 %295, %297
  %301 = add nuw nsw i32 %300, %299
  %302 = icmp eq i32 %301, 2
  %303 = zext i1 %302 to i8
  store i8 %303, i8* %79, align 1, !tbaa !2450
  %304 = icmp ne i8 %296, 0
  %305 = xor i1 %304, %302
  %.v29 = select i1 %305, i64 12, i64 74
  %306 = add i64 %269, %.v29
  store i64 %306, i64* %PC, align 8, !tbaa !2428
  br i1 %305, label %block_4018c4, label %block_401902

block_40189e:                                     ; preds = %block_401874
  %307 = add i64 %661, -44
  %308 = add i64 %697, 7
  store i64 %308, i64* %PC, align 8
  %309 = inttoptr i64 %307 to i32*
  store i32 0, i32* %309, align 4
  %.pre19 = load i64, i64* %PC, align 8
  br label %block_4018a5

block_4018b1:                                     ; preds = %block_4018a5
  %310 = add i64 %326, -40
  %311 = add i64 %362, 7
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %310 to i32*
  store i32 0, i32* %312, align 4
  %.pre20 = load i64, i64* %PC, align 8
  br label %block_4018b8

block_401832:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %313 = add i64 %659, -32
  %314 = add i64 %658, 4
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i64*
  %316 = load i64, i64* %315, align 8
  store i64 %316, i64* %RAX, align 8, !tbaa !2428
  %317 = add i64 %658, 8
  store i64 %317, i64* %PC, align 8
  %318 = inttoptr i64 %316 to i32*
  %319 = load i32, i32* %318, align 4
  store i32 %319, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %320 = add i64 %659, -52
  %321 = add i64 %658, 13
  store i64 %321, i64* %PC, align 8
  %322 = load <2 x float>, <2 x float>* %65, align 1
  %323 = extractelement <2 x float> %322, i32 0
  %324 = inttoptr i64 %320 to float*
  store float %323, float* %324, align 4
  %.pre28 = load i64, i64* %PC, align 8
  br label %block_40183f

block_4018a5:                                     ; preds = %block_401902, %block_40189e
  %325 = phi i64 [ %878, %block_401902 ], [ %.pre19, %block_40189e ]
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -44
  %328 = add i64 %325, 3
  store i64 %328, i64* %PC, align 8
  %329 = inttoptr i64 %327 to i32*
  %330 = load i32, i32* %329, align 4
  %331 = zext i32 %330 to i64
  store i64 %331, i64* %RAX, align 8, !tbaa !2428
  %332 = add i64 %326, -16
  %333 = add i64 %325, 6
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to i32*
  %335 = load i32, i32* %334, align 4
  %336 = sub i32 %330, %335
  %337 = icmp ult i32 %330, %335
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %74, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = tail call i32 @llvm.ctpop.i32(i32 %339) #9
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  store i8 %343, i8* %75, align 1, !tbaa !2446
  %344 = xor i32 %335, %330
  %345 = xor i32 %344, %336
  %346 = lshr i32 %345, 4
  %347 = trunc i32 %346 to i8
  %348 = and i8 %347, 1
  store i8 %348, i8* %76, align 1, !tbaa !2447
  %349 = icmp eq i32 %336, 0
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %77, align 1, !tbaa !2448
  %351 = lshr i32 %336, 31
  %352 = trunc i32 %351 to i8
  store i8 %352, i8* %78, align 1, !tbaa !2449
  %353 = lshr i32 %330, 31
  %354 = lshr i32 %335, 31
  %355 = xor i32 %354, %353
  %356 = xor i32 %351, %353
  %357 = add nuw nsw i32 %356, %355
  %358 = icmp eq i32 %357, 2
  %359 = zext i1 %358 to i8
  store i8 %359, i8* %79, align 1, !tbaa !2450
  %360 = icmp ne i8 %352, 0
  %361 = xor i1 %360, %358
  %.v32 = select i1 %361, i64 12, i64 112
  %362 = add i64 %325, %.v32
  store i64 %362, i64* %PC, align 8, !tbaa !2428
  br i1 %361, label %block_4018b1, label %block_401915

block_40183f:                                     ; preds = %block_401812, %block_401832
  %363 = phi i64 [ %780, %block_401812 ], [ %.pre28, %block_401832 ]
  %364 = load i64, i64* %RBP, align 8
  %365 = add i64 %364, -52
  %366 = add i64 %363, 5
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i32*
  %368 = load i32, i32* %367, align 4
  store i32 %368, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %369 = add i64 %364, -32
  %370 = add i64 %363, 9
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %369 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RAX, align 8, !tbaa !2428
  %373 = add i64 %363, 13
  store i64 %373, i64* %PC, align 8
  %374 = load <2 x float>, <2 x float>* %65, align 1
  %375 = extractelement <2 x float> %374, i32 0
  %376 = inttoptr i64 %372 to float*
  store float %375, float* %376, align 4
  %377 = load i64, i64* %RBP, align 8
  %378 = add i64 %377, -40
  %379 = load i64, i64* %PC, align 8
  %380 = add i64 %379, 3
  store i64 %380, i64* %PC, align 8
  %381 = inttoptr i64 %378 to i32*
  %382 = load i32, i32* %381, align 4
  %383 = add i32 %382, 1
  %384 = zext i32 %383 to i64
  store i64 %384, i64* %RAX, align 8, !tbaa !2428
  %385 = icmp eq i32 %382, -1
  %386 = icmp eq i32 %383, 0
  %387 = or i1 %385, %386
  %388 = zext i1 %387 to i8
  store i8 %388, i8* %74, align 1, !tbaa !2432
  %389 = and i32 %383, 255
  %390 = tail call i32 @llvm.ctpop.i32(i32 %389) #9
  %391 = trunc i32 %390 to i8
  %392 = and i8 %391, 1
  %393 = xor i8 %392, 1
  store i8 %393, i8* %75, align 1, !tbaa !2446
  %394 = xor i32 %383, %382
  %395 = lshr i32 %394, 4
  %396 = trunc i32 %395 to i8
  %397 = and i8 %396, 1
  store i8 %397, i8* %76, align 1, !tbaa !2447
  %398 = zext i1 %386 to i8
  store i8 %398, i8* %77, align 1, !tbaa !2448
  %399 = lshr i32 %383, 31
  %400 = trunc i32 %399 to i8
  store i8 %400, i8* %78, align 1, !tbaa !2449
  %401 = lshr i32 %382, 31
  %402 = xor i32 %399, %401
  %403 = add nuw nsw i32 %402, %399
  %404 = icmp eq i32 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %79, align 1, !tbaa !2450
  %406 = add i64 %379, 9
  store i64 %406, i64* %PC, align 8
  store i32 %383, i32* %381, align 4
  %407 = load i64, i64* %PC, align 8
  %408 = add i64 %407, -195
  store i64 %408, i64* %PC, align 8, !tbaa !2428
  br label %block_401792

block_40179e:                                     ; preds = %block_401792
  %409 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 56) to i64*), align 8
  store i64 %409, i64* %80, align 1, !tbaa !2454
  store double 0.000000e+00, double* %81, align 1, !tbaa !2454
  %410 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_402e30__rodata_type* @seg_402e30__rodata to i64), i64 64) to i64*), align 16
  store i64 %410, i64* %82, align 1, !tbaa !2454
  store double 0.000000e+00, double* %84, align 1, !tbaa !2454
  store i64 65536, i64* %RAX, align 8, !tbaa !2428
  %411 = add i64 %812, -36
  %412 = add i64 %848, 28
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i32*
  %414 = load i32, i32* %413, align 4
  %415 = sext i32 %414 to i64
  %416 = mul nsw i64 %415, 3125
  %417 = trunc i64 %416 to i32
  %418 = and i64 %416, 4294967295
  store i64 %418, i64* %RCX, align 8, !tbaa !2428
  %419 = mul i64 %415, 13421772800000
  %420 = ashr exact i64 %419, 32
  %421 = icmp ne i64 %420, %416
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %74, align 1, !tbaa !2432
  %423 = and i32 %417, 255
  %424 = tail call i32 @llvm.ctpop.i32(i32 %423) #9
  %425 = trunc i32 %424 to i8
  %426 = and i8 %425, 1
  %427 = xor i8 %426, 1
  store i8 %427, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %428 = lshr i32 %417, 31
  %429 = trunc i32 %428 to i8
  store i8 %429, i8* %78, align 1, !tbaa !2449
  store i8 %422, i8* %79, align 1, !tbaa !2450
  %430 = add i64 %812, -48
  %431 = add i64 %848, 31
  store i64 %431, i64* %PC, align 8
  %432 = inttoptr i64 %430 to i32*
  store i32 65536, i32* %432, align 4
  %433 = load i32, i32* %ECX, align 4
  %434 = zext i32 %433 to i64
  %435 = load i64, i64* %PC, align 8
  store i64 %434, i64* %RAX, align 8, !tbaa !2428
  %436 = sext i32 %433 to i64
  %437 = lshr i64 %436, 32
  store i64 %437, i64* %85, align 8, !tbaa !2428
  %438 = load i64, i64* %RBP, align 8
  %439 = add i64 %438, -48
  %440 = add i64 %435, 6
  store i64 %440, i64* %PC, align 8
  %441 = inttoptr i64 %439 to i32*
  %442 = load i32, i32* %441, align 4
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RCX, align 8, !tbaa !2428
  %444 = add i64 %435, 8
  store i64 %444, i64* %PC, align 8
  %445 = sext i32 %442 to i64
  %446 = shl nuw i64 %437, 32
  %447 = or i64 %446, %434
  %448 = sdiv i64 %447, %445
  %449 = shl i64 %448, 32
  %450 = ashr exact i64 %449, 32
  %451 = icmp eq i64 %448, %450
  br i1 %451, label %454, label %452

; <label>:452:                                    ; preds = %block_40179e
  %453 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %444, %struct.Memory* %MEMORY.5) #12
  %.pre22 = load i64, i64* %RBP, align 8
  %.pre23 = load i32, i32* %EDX, align 4
  %.pre24 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:454:                                    ; preds = %block_40179e
  %455 = srem i64 %447, %445
  %456 = and i64 %448, 4294967295
  store i64 %456, i64* %RAX, align 8, !tbaa !2428
  %457 = and i64 %455, 4294967295
  store i64 %457, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %74, align 1, !tbaa !2432
  store i8 0, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  store i8 0, i8* %78, align 1, !tbaa !2449
  store i8 0, i8* %79, align 1, !tbaa !2450
  %458 = trunc i64 %455 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %454, %452
  %459 = phi i64 [ %.pre24, %452 ], [ %444, %454 ]
  %460 = phi i32 [ %.pre23, %452 ], [ %458, %454 ]
  %461 = phi i64 [ %.pre22, %452 ], [ %438, %454 ]
  %462 = phi %struct.Memory* [ %453, %452 ], [ %MEMORY.5, %454 ]
  %463 = add i64 %461, -36
  %464 = add i64 %459, 3
  store i64 %464, i64* %PC, align 8
  %465 = inttoptr i64 %463 to i32*
  store i32 %460, i32* %465, align 4
  %466 = load i64, i64* %RBP, align 8
  %467 = add i64 %466, -36
  %468 = load i64, i64* %PC, align 8
  %469 = add i64 %468, 5
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %467 to i32*
  %471 = load i32, i32* %470, align 4
  %472 = sitofp i32 %471 to double
  %473 = load double, double* %87, align 1
  %474 = fsub double %472, %473
  %475 = load double, double* %88, align 1
  %476 = fdiv double %474, %475
  store double %476, double* %86, align 1, !tbaa !2454
  %.cast = bitcast double %475 to <2 x i32>
  %477 = load <2 x i32>, <2 x i32>* %89, align 1
  %478 = fptrunc double %476 to float
  store float %478, float* %90, align 1, !tbaa !2451
  %479 = extractelement <2 x i32> %.cast, i32 1
  store i32 %479, i32* %20, align 1, !tbaa !2451
  %480 = extractelement <2 x i32> %477, i32 0
  store i32 %480, i32* %21, align 1, !tbaa !2451
  %481 = extractelement <2 x i32> %477, i32 1
  store i32 %481, i32* %23, align 1, !tbaa !2451
  %482 = add i64 %466, -8
  %483 = add i64 %468, 21
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i64*
  %485 = load i64, i64* %484, align 8
  store i64 %485, i64* %RSI, align 8, !tbaa !2428
  %486 = add i64 %466, -12
  %487 = add i64 %468, 24
  store i64 %487, i64* %PC, align 8
  %488 = inttoptr i64 %486 to i32*
  %489 = load i32, i32* %488, align 4
  %490 = zext i32 %489 to i64
  store i64 %490, i64* %RDX, align 8, !tbaa !2428
  %491 = add i64 %466, -44
  %492 = add i64 %468, 28
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %491 to i32*
  %494 = load i32, i32* %493, align 4
  %495 = sext i32 %489 to i64
  %496 = sext i32 %494 to i64
  %497 = mul nsw i64 %496, %495
  %498 = trunc i64 %497 to i32
  %499 = and i64 %497, 4294967295
  store i64 %499, i64* %RDX, align 8, !tbaa !2428
  %500 = shl i64 %497, 32
  %501 = ashr exact i64 %500, 32
  %502 = icmp ne i64 %501, %497
  %503 = zext i1 %502 to i8
  store i8 %503, i8* %74, align 1, !tbaa !2432
  %504 = and i32 %498, 255
  %505 = tail call i32 @llvm.ctpop.i32(i32 %504) #9
  %506 = trunc i32 %505 to i8
  %507 = and i8 %506, 1
  %508 = xor i8 %507, 1
  store i8 %508, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %509 = lshr i32 %498, 31
  %510 = trunc i32 %509 to i8
  store i8 %510, i8* %78, align 1, !tbaa !2449
  store i8 %503, i8* %79, align 1, !tbaa !2450
  %511 = add i64 %466, -40
  %512 = add i64 %468, 31
  store i64 %512, i64* %PC, align 8
  %513 = trunc i64 %497 to i32
  %514 = inttoptr i64 %511 to i32*
  %515 = load i32, i32* %514, align 4
  %516 = add i32 %515, %513
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RDX, align 8, !tbaa !2428
  %518 = icmp ult i32 %516, %513
  %519 = icmp ult i32 %516, %515
  %520 = or i1 %518, %519
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %74, align 1, !tbaa !2432
  %522 = and i32 %516, 255
  %523 = tail call i32 @llvm.ctpop.i32(i32 %522) #9
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  %526 = xor i8 %525, 1
  store i8 %526, i8* %75, align 1, !tbaa !2446
  %527 = xor i32 %515, %513
  %528 = xor i32 %527, %516
  %529 = lshr i32 %528, 4
  %530 = trunc i32 %529 to i8
  %531 = and i8 %530, 1
  store i8 %531, i8* %76, align 1, !tbaa !2447
  %532 = icmp eq i32 %516, 0
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %77, align 1, !tbaa !2448
  %534 = lshr i32 %516, 31
  %535 = trunc i32 %534 to i8
  store i8 %535, i8* %78, align 1, !tbaa !2449
  %536 = lshr i32 %513, 31
  %537 = lshr i32 %515, 31
  %538 = xor i32 %534, %536
  %539 = xor i32 %534, %537
  %540 = add nuw nsw i32 %538, %539
  %541 = icmp eq i32 %540, 2
  %542 = zext i1 %541 to i8
  store i8 %542, i8* %79, align 1, !tbaa !2450
  %543 = sext i32 %516 to i64
  store i64 %543, i64* %RDI, align 8, !tbaa !2428
  %544 = shl nsw i64 %543, 2
  %545 = add i64 %485, %544
  %546 = add i64 %468, 39
  store i64 %546, i64* %PC, align 8
  %547 = load <2 x float>, <2 x float>* %65, align 1
  %548 = extractelement <2 x float> %547, i32 0
  %549 = inttoptr i64 %545 to float*
  store float %548, float* %549, align 4
  %550 = load i64, i64* %RBP, align 8
  %551 = add i64 %550, -8
  %552 = load i64, i64* %PC, align 8
  %553 = add i64 %552, 4
  store i64 %553, i64* %PC, align 8
  %554 = inttoptr i64 %551 to i64*
  %555 = load i64, i64* %554, align 8
  store i64 %555, i64* %RSI, align 8, !tbaa !2428
  %556 = add i64 %550, -12
  %557 = add i64 %552, 7
  store i64 %557, i64* %PC, align 8
  %558 = inttoptr i64 %556 to i32*
  %559 = load i32, i32* %558, align 4
  %560 = zext i32 %559 to i64
  store i64 %560, i64* %RDX, align 8, !tbaa !2428
  %561 = add i64 %550, -44
  %562 = add i64 %552, 11
  store i64 %562, i64* %PC, align 8
  %563 = inttoptr i64 %561 to i32*
  %564 = load i32, i32* %563, align 4
  %565 = sext i32 %559 to i64
  %566 = sext i32 %564 to i64
  %567 = mul nsw i64 %566, %565
  %568 = trunc i64 %567 to i32
  %569 = and i64 %567, 4294967295
  store i64 %569, i64* %RDX, align 8, !tbaa !2428
  %570 = shl i64 %567, 32
  %571 = ashr exact i64 %570, 32
  %572 = icmp ne i64 %571, %567
  %573 = zext i1 %572 to i8
  store i8 %573, i8* %74, align 1, !tbaa !2432
  %574 = and i32 %568, 255
  %575 = tail call i32 @llvm.ctpop.i32(i32 %574) #9
  %576 = trunc i32 %575 to i8
  %577 = and i8 %576, 1
  %578 = xor i8 %577, 1
  store i8 %578, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %579 = lshr i32 %568, 31
  %580 = trunc i32 %579 to i8
  store i8 %580, i8* %78, align 1, !tbaa !2449
  store i8 %573, i8* %79, align 1, !tbaa !2450
  %581 = add i64 %550, -40
  %582 = add i64 %552, 14
  store i64 %582, i64* %PC, align 8
  %583 = trunc i64 %567 to i32
  %584 = inttoptr i64 %581 to i32*
  %585 = load i32, i32* %584, align 4
  %586 = add i32 %585, %583
  %587 = zext i32 %586 to i64
  store i64 %587, i64* %RDX, align 8, !tbaa !2428
  %588 = icmp ult i32 %586, %583
  %589 = icmp ult i32 %586, %585
  %590 = or i1 %588, %589
  %591 = zext i1 %590 to i8
  store i8 %591, i8* %74, align 1, !tbaa !2432
  %592 = and i32 %586, 255
  %593 = tail call i32 @llvm.ctpop.i32(i32 %592) #9
  %594 = trunc i32 %593 to i8
  %595 = and i8 %594, 1
  %596 = xor i8 %595, 1
  store i8 %596, i8* %75, align 1, !tbaa !2446
  %597 = xor i32 %585, %583
  %598 = xor i32 %597, %586
  %599 = lshr i32 %598, 4
  %600 = trunc i32 %599 to i8
  %601 = and i8 %600, 1
  store i8 %601, i8* %76, align 1, !tbaa !2447
  %602 = icmp eq i32 %586, 0
  %603 = zext i1 %602 to i8
  store i8 %603, i8* %77, align 1, !tbaa !2448
  %604 = lshr i32 %586, 31
  %605 = trunc i32 %604 to i8
  store i8 %605, i8* %78, align 1, !tbaa !2449
  %606 = lshr i32 %583, 31
  %607 = lshr i32 %585, 31
  %608 = xor i32 %604, %606
  %609 = xor i32 %604, %607
  %610 = add nuw nsw i32 %608, %609
  %611 = icmp eq i32 %610, 2
  %612 = zext i1 %611 to i8
  store i8 %612, i8* %79, align 1, !tbaa !2450
  %613 = sext i32 %586 to i64
  store i64 %613, i64* %RDI, align 8, !tbaa !2428
  %614 = shl nsw i64 %613, 2
  %615 = add i64 %555, %614
  %616 = add i64 %552, 22
  store i64 %616, i64* %PC, align 8
  %617 = inttoptr i64 %615 to i32*
  %618 = load i32, i32* %617, align 4
  store i32 %618, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %619 = add i64 %550, -32
  %620 = add i64 %552, 26
  store i64 %620, i64* %PC, align 8
  %621 = inttoptr i64 %619 to i64*
  %622 = load i64, i64* %621, align 8
  store i64 %622, i64* %RSI, align 8, !tbaa !2428
  %623 = add i64 %552, 29
  store i64 %623, i64* %PC, align 8
  %624 = load <2 x float>, <2 x float>* %65, align 1
  %625 = extractelement <2 x float> %624, i32 0
  %626 = inttoptr i64 %622 to float*
  %627 = load float, float* %626, align 4
  %628 = fcmp uno float %625, %627
  br i1 %628, label %629, label %639

; <label>:629:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %630 = fadd float %625, %627
  %631 = bitcast float %630 to i32
  %632 = and i32 %631, 2143289344
  %633 = icmp eq i32 %632, 2139095040
  %634 = and i32 %631, 4194303
  %635 = icmp ne i32 %634, 0
  %636 = and i1 %633, %635
  br i1 %636, label %637, label %645

; <label>:637:                                    ; preds = %629
  %638 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %623, %struct.Memory* %462) #12
  %.pre25 = load i64, i64* %PC, align 8
  %.pre26 = load i8, i8* %74, align 1, !tbaa !2432
  %.pre27 = load i8, i8* %77, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:639:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %640 = fcmp ogt float %625, %627
  br i1 %640, label %645, label %641

; <label>:641:                                    ; preds = %639
  %642 = fcmp olt float %625, %627
  br i1 %642, label %645, label %643

; <label>:643:                                    ; preds = %641
  %644 = fcmp oeq float %625, %627
  br i1 %644, label %645, label %649

; <label>:645:                                    ; preds = %643, %641, %639, %629
  %646 = phi i8 [ 0, %639 ], [ 0, %641 ], [ 1, %643 ], [ 1, %629 ]
  %647 = phi i8 [ 0, %639 ], [ 0, %641 ], [ 0, %643 ], [ 1, %629 ]
  %648 = phi i8 [ 0, %639 ], [ 1, %641 ], [ 0, %643 ], [ 1, %629 ]
  store i8 %646, i8* %77, align 1, !tbaa !2453
  store i8 %647, i8* %75, align 1, !tbaa !2453
  store i8 %648, i8* %74, align 1, !tbaa !2453
  br label %649

; <label>:649:                                    ; preds = %645, %643
  %650 = phi i8 [ %646, %645 ], [ %603, %643 ]
  %651 = phi i8 [ %648, %645 ], [ %591, %643 ]
  store i8 0, i8* %79, align 1, !tbaa !2453
  store i8 0, i8* %78, align 1, !tbaa !2453
  store i8 0, i8* %76, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %649, %637
  %652 = phi i8 [ %.pre27, %637 ], [ %650, %649 ]
  %653 = phi i8 [ %.pre26, %637 ], [ %651, %649 ]
  %654 = phi i64 [ %.pre25, %637 ], [ %623, %649 ]
  %655 = phi %struct.Memory* [ %638, %637 ], [ %462, %649 ]
  %656 = or i8 %652, %653
  %657 = icmp ne i8 %656, 0
  %.v33 = select i1 %657, i64 38, i64 6
  %658 = add i64 %654, %.v33
  store i64 %658, i64* %PC, align 8, !tbaa !2428
  %659 = load i64, i64* %RBP, align 8
  br i1 %657, label %block_401832, label %block_401812

block_401874:                                     ; preds = %block_401874.preheader, %block_401880
  %660 = phi i64 [ %923, %block_401880 ], [ %.pre21, %block_401874.preheader ]
  %661 = load i64, i64* %RBP, align 8
  %662 = add i64 %661, -40
  %663 = add i64 %660, 3
  store i64 %663, i64* %PC, align 8
  %664 = inttoptr i64 %662 to i32*
  %665 = load i32, i32* %664, align 4
  %666 = zext i32 %665 to i64
  store i64 %666, i64* %RAX, align 8, !tbaa !2428
  %667 = add i64 %661, -16
  %668 = add i64 %660, 6
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to i32*
  %670 = load i32, i32* %669, align 4
  %671 = sub i32 %665, %670
  %672 = icmp ult i32 %665, %670
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %74, align 1, !tbaa !2432
  %674 = and i32 %671, 255
  %675 = tail call i32 @llvm.ctpop.i32(i32 %674) #9
  %676 = trunc i32 %675 to i8
  %677 = and i8 %676, 1
  %678 = xor i8 %677, 1
  store i8 %678, i8* %75, align 1, !tbaa !2446
  %679 = xor i32 %670, %665
  %680 = xor i32 %679, %671
  %681 = lshr i32 %680, 4
  %682 = trunc i32 %681 to i8
  %683 = and i8 %682, 1
  store i8 %683, i8* %76, align 1, !tbaa !2447
  %684 = icmp eq i32 %671, 0
  %685 = zext i1 %684 to i8
  store i8 %685, i8* %77, align 1, !tbaa !2448
  %686 = lshr i32 %671, 31
  %687 = trunc i32 %686 to i8
  store i8 %687, i8* %78, align 1, !tbaa !2449
  %688 = lshr i32 %665, 31
  %689 = lshr i32 %670, 31
  %690 = xor i32 %689, %688
  %691 = xor i32 %686, %688
  %692 = add nuw nsw i32 %691, %690
  %693 = icmp eq i32 %692, 2
  %694 = zext i1 %693 to i8
  store i8 %694, i8* %79, align 1, !tbaa !2450
  %695 = icmp ne i8 %687, 0
  %696 = xor i1 %695, %693
  %.v31 = select i1 %696, i64 12, i64 42
  %697 = add i64 %660, %.v31
  store i64 %697, i64* %PC, align 8, !tbaa !2428
  br i1 %696, label %block_401880, label %block_40189e

block_401915:                                     ; preds = %block_4018a5
  %698 = add i64 %362, 1
  store i64 %698, i64* %PC, align 8
  %699 = load i64, i64* %11, align 8, !tbaa !2428
  %700 = add i64 %699, 8
  %701 = inttoptr i64 %699 to i64*
  %702 = load i64, i64* %701, align 8
  store i64 %702, i64* %RBP, align 8, !tbaa !2428
  store i64 %700, i64* %11, align 8, !tbaa !2428
  %703 = add i64 %362, 2
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %700 to i64*
  %705 = load i64, i64* %704, align 8
  store i64 %705, i64* %PC, align 8, !tbaa !2428
  %706 = add i64 %699, 16
  store i64 %706, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401812:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISSI2VnI8vec128_tE3MVnI7vec32_tEEEP6MemoryS8_R5StateT_T0_.exit
  %707 = add i64 %659, -8
  %708 = add i64 %658, 4
  store i64 %708, i64* %PC, align 8
  %709 = inttoptr i64 %707 to i64*
  %710 = load i64, i64* %709, align 8
  store i64 %710, i64* %RAX, align 8, !tbaa !2428
  %711 = add i64 %659, -12
  %712 = add i64 %658, 7
  store i64 %712, i64* %PC, align 8
  %713 = inttoptr i64 %711 to i32*
  %714 = load i32, i32* %713, align 4
  %715 = zext i32 %714 to i64
  store i64 %715, i64* %RCX, align 8, !tbaa !2428
  %716 = add i64 %659, -44
  %717 = add i64 %658, 11
  store i64 %717, i64* %PC, align 8
  %718 = inttoptr i64 %716 to i32*
  %719 = load i32, i32* %718, align 4
  %720 = sext i32 %714 to i64
  %721 = sext i32 %719 to i64
  %722 = mul nsw i64 %721, %720
  %723 = trunc i64 %722 to i32
  %724 = and i64 %722, 4294967295
  store i64 %724, i64* %RCX, align 8, !tbaa !2428
  %725 = shl i64 %722, 32
  %726 = ashr exact i64 %725, 32
  %727 = icmp ne i64 %726, %722
  %728 = zext i1 %727 to i8
  store i8 %728, i8* %74, align 1, !tbaa !2432
  %729 = and i32 %723, 255
  %730 = tail call i32 @llvm.ctpop.i32(i32 %729) #9
  %731 = trunc i32 %730 to i8
  %732 = and i8 %731, 1
  %733 = xor i8 %732, 1
  store i8 %733, i8* %75, align 1, !tbaa !2446
  store i8 0, i8* %76, align 1, !tbaa !2447
  store i8 0, i8* %77, align 1, !tbaa !2448
  %734 = lshr i32 %723, 31
  %735 = trunc i32 %734 to i8
  store i8 %735, i8* %78, align 1, !tbaa !2449
  store i8 %728, i8* %79, align 1, !tbaa !2450
  %736 = add i64 %659, -40
  %737 = add i64 %658, 14
  store i64 %737, i64* %PC, align 8
  %738 = trunc i64 %722 to i32
  %739 = inttoptr i64 %736 to i32*
  %740 = load i32, i32* %739, align 4
  %741 = add i32 %740, %738
  %742 = zext i32 %741 to i64
  store i64 %742, i64* %RCX, align 8, !tbaa !2428
  %743 = icmp ult i32 %741, %738
  %744 = icmp ult i32 %741, %740
  %745 = or i1 %743, %744
  %746 = zext i1 %745 to i8
  store i8 %746, i8* %74, align 1, !tbaa !2432
  %747 = and i32 %741, 255
  %748 = tail call i32 @llvm.ctpop.i32(i32 %747) #9
  %749 = trunc i32 %748 to i8
  %750 = and i8 %749, 1
  %751 = xor i8 %750, 1
  store i8 %751, i8* %75, align 1, !tbaa !2446
  %752 = xor i32 %740, %738
  %753 = xor i32 %752, %741
  %754 = lshr i32 %753, 4
  %755 = trunc i32 %754 to i8
  %756 = and i8 %755, 1
  store i8 %756, i8* %76, align 1, !tbaa !2447
  %757 = icmp eq i32 %741, 0
  %758 = zext i1 %757 to i8
  store i8 %758, i8* %77, align 1, !tbaa !2448
  %759 = lshr i32 %741, 31
  %760 = trunc i32 %759 to i8
  store i8 %760, i8* %78, align 1, !tbaa !2449
  %761 = lshr i32 %738, 31
  %762 = lshr i32 %740, 31
  %763 = xor i32 %759, %761
  %764 = xor i32 %759, %762
  %765 = add nuw nsw i32 %763, %764
  %766 = icmp eq i32 %765, 2
  %767 = zext i1 %766 to i8
  store i8 %767, i8* %79, align 1, !tbaa !2450
  %768 = sext i32 %741 to i64
  store i64 %768, i64* %RDX, align 8, !tbaa !2428
  %769 = shl nsw i64 %768, 2
  %770 = add i64 %710, %769
  %771 = add i64 %658, 22
  store i64 %771, i64* %PC, align 8
  %772 = inttoptr i64 %770 to i32*
  %773 = load i32, i32* %772, align 4
  store i32 %773, i32* %18, align 1, !tbaa !2451
  store float 0.000000e+00, float* %91, align 1, !tbaa !2451
  store float 0.000000e+00, float* %92, align 1, !tbaa !2451
  store float 0.000000e+00, float* %93, align 1, !tbaa !2451
  %774 = add i64 %659, -52
  %775 = add i64 %658, 27
  store i64 %775, i64* %PC, align 8
  %776 = load <2 x float>, <2 x float>* %65, align 1
  %777 = extractelement <2 x float> %776, i32 0
  %778 = inttoptr i64 %774 to float*
  store float %777, float* %778, align 4
  %779 = load i64, i64* %PC, align 8
  %780 = add i64 %779, 18
  store i64 %780, i64* %PC, align 8, !tbaa !2428
  br label %block_40183f

block_40185a:                                     ; preds = %block_401792
  %781 = add i64 %812, -44
  %782 = add i64 %848, 8
  store i64 %782, i64* %PC, align 8
  %783 = inttoptr i64 %781 to i32*
  %784 = load i32, i32* %783, align 4
  %785 = add i32 %784, 1
  %786 = zext i32 %785 to i64
  store i64 %786, i64* %RAX, align 8, !tbaa !2428
  %787 = icmp eq i32 %784, -1
  %788 = icmp eq i32 %785, 0
  %789 = or i1 %787, %788
  %790 = zext i1 %789 to i8
  store i8 %790, i8* %74, align 1, !tbaa !2432
  %791 = and i32 %785, 255
  %792 = tail call i32 @llvm.ctpop.i32(i32 %791) #9
  %793 = trunc i32 %792 to i8
  %794 = and i8 %793, 1
  %795 = xor i8 %794, 1
  store i8 %795, i8* %75, align 1, !tbaa !2446
  %796 = xor i32 %785, %784
  %797 = lshr i32 %796, 4
  %798 = trunc i32 %797 to i8
  %799 = and i8 %798, 1
  store i8 %799, i8* %76, align 1, !tbaa !2447
  %800 = zext i1 %788 to i8
  store i8 %800, i8* %77, align 1, !tbaa !2448
  %801 = lshr i32 %785, 31
  %802 = trunc i32 %801 to i8
  store i8 %802, i8* %78, align 1, !tbaa !2449
  %803 = lshr i32 %784, 31
  %804 = xor i32 %801, %803
  %805 = add nuw nsw i32 %804, %801
  %806 = icmp eq i32 %805, 2
  %807 = zext i1 %806 to i8
  store i8 %807, i8* %79, align 1, !tbaa !2450
  %808 = add i64 %848, 14
  store i64 %808, i64* %PC, align 8
  store i32 %785, i32* %783, align 4
  %809 = load i64, i64* %PC, align 8
  %810 = add i64 %809, -233
  store i64 %810, i64* %PC, align 8, !tbaa !2428
  br label %block_40177f

block_401792:                                     ; preds = %block_401792.preheader, %block_40183f
  %811 = phi i64 [ %408, %block_40183f ], [ %.pre21, %block_401792.preheader ]
  %MEMORY.5 = phi %struct.Memory* [ %655, %block_40183f ], [ %MEMORY.0, %block_401792.preheader ]
  %812 = load i64, i64* %RBP, align 8
  %813 = add i64 %812, -40
  %814 = add i64 %811, 3
  store i64 %814, i64* %PC, align 8
  %815 = inttoptr i64 %813 to i32*
  %816 = load i32, i32* %815, align 4
  %817 = zext i32 %816 to i64
  store i64 %817, i64* %RAX, align 8, !tbaa !2428
  %818 = add i64 %812, -16
  %819 = add i64 %811, 6
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %818 to i32*
  %821 = load i32, i32* %820, align 4
  %822 = sub i32 %816, %821
  %823 = icmp ult i32 %816, %821
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %74, align 1, !tbaa !2432
  %825 = and i32 %822, 255
  %826 = tail call i32 @llvm.ctpop.i32(i32 %825) #9
  %827 = trunc i32 %826 to i8
  %828 = and i8 %827, 1
  %829 = xor i8 %828, 1
  store i8 %829, i8* %75, align 1, !tbaa !2446
  %830 = xor i32 %821, %816
  %831 = xor i32 %830, %822
  %832 = lshr i32 %831, 4
  %833 = trunc i32 %832 to i8
  %834 = and i8 %833, 1
  store i8 %834, i8* %76, align 1, !tbaa !2447
  %835 = icmp eq i32 %822, 0
  %836 = zext i1 %835 to i8
  store i8 %836, i8* %77, align 1, !tbaa !2448
  %837 = lshr i32 %822, 31
  %838 = trunc i32 %837 to i8
  store i8 %838, i8* %78, align 1, !tbaa !2449
  %839 = lshr i32 %816, 31
  %840 = lshr i32 %821, 31
  %841 = xor i32 %840, %839
  %842 = xor i32 %837, %839
  %843 = add nuw nsw i32 %842, %841
  %844 = icmp eq i32 %843, 2
  %845 = zext i1 %844 to i8
  store i8 %845, i8* %79, align 1, !tbaa !2450
  %846 = icmp ne i8 %838, 0
  %847 = xor i1 %846, %844
  %.v30 = select i1 %847, i64 12, i64 200
  %848 = add i64 %811, %.v30
  store i64 %848, i64* %PC, align 8, !tbaa !2428
  br i1 %847, label %block_40179e, label %block_40185a

block_401902:                                     ; preds = %block_4018b8
  %849 = add i64 %270, -44
  %850 = add i64 %306, 8
  store i64 %850, i64* %PC, align 8
  %851 = inttoptr i64 %849 to i32*
  %852 = load i32, i32* %851, align 4
  %853 = add i32 %852, 1
  %854 = zext i32 %853 to i64
  store i64 %854, i64* %RAX, align 8, !tbaa !2428
  %855 = icmp eq i32 %852, -1
  %856 = icmp eq i32 %853, 0
  %857 = or i1 %855, %856
  %858 = zext i1 %857 to i8
  store i8 %858, i8* %74, align 1, !tbaa !2432
  %859 = and i32 %853, 255
  %860 = tail call i32 @llvm.ctpop.i32(i32 %859) #9
  %861 = trunc i32 %860 to i8
  %862 = and i8 %861, 1
  %863 = xor i8 %862, 1
  store i8 %863, i8* %75, align 1, !tbaa !2446
  %864 = xor i32 %853, %852
  %865 = lshr i32 %864, 4
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  store i8 %867, i8* %76, align 1, !tbaa !2447
  %868 = zext i1 %856 to i8
  store i8 %868, i8* %77, align 1, !tbaa !2448
  %869 = lshr i32 %853, 31
  %870 = trunc i32 %869 to i8
  store i8 %870, i8* %78, align 1, !tbaa !2449
  %871 = lshr i32 %852, 31
  %872 = xor i32 %869, %871
  %873 = add nuw nsw i32 %872, %869
  %874 = icmp eq i32 %873, 2
  %875 = zext i1 %874 to i8
  store i8 %875, i8* %79, align 1, !tbaa !2450
  %876 = add i64 %306, 14
  store i64 %876, i64* %PC, align 8
  store i32 %853, i32* %851, align 4
  %877 = load i64, i64* %PC, align 8
  %878 = add i64 %877, -107
  store i64 %878, i64* %PC, align 8, !tbaa !2428
  br label %block_4018a5

block_401880:                                     ; preds = %block_401874
  store <4 x i32> zeroinitializer, <4 x i32>* %135, align 1, !tbaa !2456
  %879 = add i64 %661, -24
  %880 = add i64 %697, 7
  store i64 %880, i64* %PC, align 8
  %881 = inttoptr i64 %879 to i64*
  %882 = load i64, i64* %881, align 8
  store i64 %882, i64* %RAX, align 8, !tbaa !2428
  %883 = add i64 %697, 11
  store i64 %883, i64* %PC, align 8
  %884 = load i32, i32* %664, align 4
  %885 = sext i32 %884 to i64
  store i64 %885, i64* %RCX, align 8, !tbaa !2428
  %886 = shl nsw i64 %885, 2
  %887 = add i64 %886, %882
  %888 = add i64 %697, 16
  store i64 %888, i64* %PC, align 8
  %889 = load <2 x float>, <2 x float>* %65, align 1
  %890 = extractelement <2 x float> %889, i32 0
  %891 = inttoptr i64 %887 to float*
  store float %890, float* %891, align 4
  %892 = load i64, i64* %RBP, align 8
  %893 = add i64 %892, -40
  %894 = load i64, i64* %PC, align 8
  %895 = add i64 %894, 3
  store i64 %895, i64* %PC, align 8
  %896 = inttoptr i64 %893 to i32*
  %897 = load i32, i32* %896, align 4
  %898 = add i32 %897, 1
  %899 = zext i32 %898 to i64
  store i64 %899, i64* %RAX, align 8, !tbaa !2428
  %900 = icmp eq i32 %897, -1
  %901 = icmp eq i32 %898, 0
  %902 = or i1 %900, %901
  %903 = zext i1 %902 to i8
  store i8 %903, i8* %74, align 1, !tbaa !2432
  %904 = and i32 %898, 255
  %905 = tail call i32 @llvm.ctpop.i32(i32 %904) #9
  %906 = trunc i32 %905 to i8
  %907 = and i8 %906, 1
  %908 = xor i8 %907, 1
  store i8 %908, i8* %75, align 1, !tbaa !2446
  %909 = xor i32 %898, %897
  %910 = lshr i32 %909, 4
  %911 = trunc i32 %910 to i8
  %912 = and i8 %911, 1
  store i8 %912, i8* %76, align 1, !tbaa !2447
  %913 = zext i1 %901 to i8
  store i8 %913, i8* %77, align 1, !tbaa !2448
  %914 = lshr i32 %898, 31
  %915 = trunc i32 %914 to i8
  store i8 %915, i8* %78, align 1, !tbaa !2449
  %916 = lshr i32 %897, 31
  %917 = xor i32 %914, %916
  %918 = add nuw nsw i32 %917, %914
  %919 = icmp eq i32 %918, 2
  %920 = zext i1 %919 to i8
  store i8 %920, i8* %79, align 1, !tbaa !2450
  %921 = add i64 %894, 9
  store i64 %921, i64* %PC, align 8
  store i32 %898, i32* %896, align 4
  %922 = load i64, i64* %PC, align 8
  %923 = add i64 %922, -37
  store i64 %923, i64* %PC, align 8, !tbaa !2428
  br label %block_401874
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400530_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400530:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %PC, align 8
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i8), i8* %9, align 1, !tbaa !2432
  %10 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)) to i32), i32 255)) #9
  %11 = trunc i32 %10 to i8
  %12 = and i8 %11, 1
  %13 = xor i8 %12, 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13, i8* %14, align 1, !tbaa !2446
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (i64* @stderr to i64), i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64))), i64 4) to i8), i8 1), i8* %15, align 1, !tbaa !2447
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0) to i8), i8* %16, align 1, !tbaa !2448
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63) to i8), i8* %17, align 1, !tbaa !2449
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (i64* @stderr to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %18, align 1, !tbaa !2450
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %19 = add i64 %8, select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16)
  store i64 %19, i64* %PC, align 8, !tbaa !2428
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), label %block_400558, label %block_400541

block_400558:                                     ; preds = %block_400541, %block_400530
  %20 = phi i64 [ %27, %block_400541 ], [ %19, %block_400530 ]
  %21 = add i64 %20, 1
  store i64 %21, i64* %PC, align 8
  %22 = load i64, i64* %7, align 8
  store i64 %22, i64* %RBP, align 8, !tbaa !2428
  store i64 %5, i64* %RSP, align 8, !tbaa !2428
  %23 = add i64 %20, 2
  store i64 %23, i64* %PC, align 8
  %24 = inttoptr i64 %5 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %PC, align 8, !tbaa !2428
  %26 = add i64 %5, 8
  store i64 %26, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400541:                                     ; preds = %block_400530
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %9, align 1, !tbaa !2432
  store i8 1, i8* %14, align 1, !tbaa !2446
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2447
  %27 = add i64 %8, add (i64 select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64 ptrtoint (i64* @stderr to i64)), i64 0), i64 39, i64 16), i64 23)
  store i64 %27, i64* %PC, align 8, !tbaa !2428
  br label %block_400558
}

; Function Attrs: noinline nounwind
define %struct.Memory* @sub_400560_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400560:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 and (i64 ptrtoint (i64* @stderr to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = load i64, i64* %RSP, align 8, !tbaa !2428
  %6 = add i64 %5, -8
  %7 = inttoptr i64 %6 to i64*
  store i64 %3, i64* %7, align 8
  store i64 %6, i64* %RSP, align 8, !tbaa !2428
  %8 = load i64, i64* %RSI, align 8
  %9 = load i64, i64* %PC, align 8
  %10 = sub i64 %8, ptrtoint (i64* @stderr to i64)
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %6, i64* %RBP, align 8, !tbaa !2428
  %17 = ashr i64 %10, 3
  %18 = lshr i64 %17, 63
  store i64 %18, i64* %RAX, align 8, !tbaa !2428
  %19 = add nsw i64 %18, %17
  %20 = trunc i64 %19 to i8
  %21 = and i8 %20, 1
  %22 = ashr i64 %19, 1
  store i64 %22, i64* %RSI, align 8, !tbaa !2428
  store i8 %21, i8* %11, align 1, !tbaa !2453
  %23 = trunc i64 %22 to i32
  %24 = and i32 %23, 255
  %25 = tail call i32 @llvm.ctpop.i32(i32 %24) #9
  %26 = trunc i32 %25 to i8
  %27 = and i8 %26, 1
  %28 = xor i8 %27, 1
  store i8 %28, i8* %12, align 1, !tbaa !2453
  store i8 0, i8* %13, align 1, !tbaa !2453
  %29 = icmp eq i64 %22, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %14, align 1, !tbaa !2453
  %31 = lshr i64 %22, 63
  %32 = trunc i64 %31 to i8
  store i8 %32, i8* %15, align 1, !tbaa !2453
  store i8 0, i8* %16, align 1, !tbaa !2453
  %.v = select i1 %29, i64 50, i64 29
  %33 = add i64 %9, %.v
  store i64 %33, i64* %PC, align 8, !tbaa !2428
  br i1 %29, label %block_400598, label %block_400583

block_400598:                                     ; preds = %block_400583, %block_400560
  %34 = phi i64 [ %44, %block_400583 ], [ %33, %block_400560 ]
  %35 = add i64 %34, 1
  store i64 %35, i64* %PC, align 8
  %36 = load i64, i64* %RSP, align 8, !tbaa !2428
  %37 = add i64 %36, 8
  %38 = inttoptr i64 %36 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %RBP, align 8, !tbaa !2428
  store i64 %37, i64* %RSP, align 8, !tbaa !2428
  %40 = add i64 %34, 2
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %37 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  %43 = add i64 %36, 16
  store i64 %43, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400583:                                     ; preds = %block_400560
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %11, align 1, !tbaa !2432
  store i8 1, i8* %12, align 1, !tbaa !2446
  store i8 1, i8* %14, align 1, !tbaa !2448
  store i8 0, i8* %15, align 1, !tbaa !2449
  store i8 0, i8* %16, align 1, !tbaa !2450
  store i8 0, i8* %13, align 1, !tbaa !2447
  %44 = add i64 %33, 21
  store i64 %44, i64* %PC, align 8, !tbaa !2428
  br label %block_400598
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #5

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4005d0_frame_dummy() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_4005d0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005d0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_4005a0___do_global_dtors_aux() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_4005a0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005a0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653138_fprintf(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @fprintf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_4004d0_memset(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_402e20___libc_csu_fini() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e20;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @callback_sub_402e20___libc_csu_fini_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e20___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define internal void @callback_sub_402db0___libc_csu_init() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402db0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @callback_sub_402db0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402db0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @main() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400630;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400630_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653150___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline nounwind
define internal fastcc %struct.Memory* @ext_653140_clock(%struct.State*, %struct.Memory*) unnamed_addr #10 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @clock to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @what_date() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400620;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @what_date_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400620_what_date(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dmxpy() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401fb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @dmxpy_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401fb0_dmxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dgefa() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401920;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @dgefa_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401920_dgefa(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @daxpy() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @daxpy_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402870_daxpy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @ddot() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4029e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @ddot_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4029e0_ddot(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.init_proc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400498;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400498__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @epslon() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4027b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @epslon_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4027b0_epslon(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dgesl() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401c30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @14, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @dgesl_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401c30_dgesl(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @.term_proc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402e24;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @15, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @.term_proc_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402e24__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @matgen() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401750;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @16, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @matgen_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401750_matgen(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @dscal() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402ce0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @17, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @dscal_wrapper(%struct.State*, i64, %struct.Memory* readnone returned) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402ce0_dscal(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @second() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4005e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @18, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @second_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4005e0_second(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @idamax() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402b40;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @19, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: nounwind
define internal %struct.Memory* @idamax_wrapper(%struct.State*, i64, %struct.Memory*) #9 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402b40_idamax(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline nounwind
define dllexport void @print_time() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x402860;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @20, void ()** nonnull @2) #9
  ret void
}

; Function Attrs: norecurse nounwind
define internal %struct.Memory* @print_time_wrapper(%struct.State* nocapture, i64, %struct.Memory* readnone returned) #11 {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_402860_print_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: nounwind
define internal void @__mcsema_constructor() #9 {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_402db0___libc_csu_init()
  ret void
}

; Function Attrs: nounwind
define internal void @__mcsema_destructor() #9 {
  tail call void @callback_sub_402e20___libc_csu_fini()
  ret void
}

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline }
attributes #6 = { noinline norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { naked nobuiltin noinline nounwind }
attributes #9 = { nounwind }
attributes #10 = { noinline nounwind }
attributes #11 = { norecurse nounwind }
attributes #12 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2452, !2452, i64 0}
!2452 = !{!"float", !2430, i64 0}
!2453 = !{!2430, !2430, i64 0}
!2454 = !{!2455, !2455, i64 0}
!2455 = !{!"double", !2430, i64 0}
!2456 = !{!2445, !2445, i64 0}
